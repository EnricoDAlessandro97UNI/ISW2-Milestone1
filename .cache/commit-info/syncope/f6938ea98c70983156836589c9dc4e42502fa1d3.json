{"sha":"f6938ea98c70983156836589c9dc4e42502fa1d3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY2OTM4ZWE5OGM3MDk4MzE1NjgzNjU4OWM5ZGM0ZTQyNTAyZmExZDM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-02T17:21:46Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-02T17:21:46Z"},"message":"[SYNCOPE-620] Adding EntityFactory","tree":{"sha":"bfa3b28df1922755840fb4b555aa9843a3b3312a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/bfa3b28df1922755840fb4b555aa9843a3b3312a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f6938ea98c70983156836589c9dc4e42502fa1d3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f6938ea98c70983156836589c9dc4e42502fa1d3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f6938ea98c70983156836589c9dc4e42502fa1d3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f6938ea98c70983156836589c9dc4e42502fa1d3/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71"}],"stats":{"total":542,"additions":405,"deletions":137},"files":[{"sha":"f93f639c14c8d6d74f2c230b62d79a6a6acdcf6a","filename":"syncope620/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fpom.xml?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -309,7 +309,7 @@ under the License.\n     <connid.ldap.version>1.4.0</connid.ldap.version>\n     <connid.ad.version>1.2.1</connid.ad.version>\n \n-    <jackson.version>2.4.4</jackson.version>\n+    <jackson.version>2.5.0</jackson.version>\n \n     <spring.version>4.1.4.RELEASE</spring.version>\n     <spring-security.version>3.2.5.RELEASE</spring-security.version>"},{"sha":"58af4f881bc84d746f74188bd5746ce9ddfa2c7d","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/EntityFactory.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FEntityFactory.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -0,0 +1,26 @@\n+package org.apache.syncope.persistence.api.entity;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+public interface EntityFactory {\n+\n+    <KEY, T extends Entity<KEY>> T newEntity(Class<T> reference);\n+\n+    <T extends Policy> T newPolicy(Class<T> reference, boolean global);\n+}"},{"sha":"c404c53d4311c7e97bc134b2335e023f6d90d5f0","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/JPAEntityFactory.java","status":"added","additions":280,"deletions":0,"changes":280,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -0,0 +1,280 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import org.apache.syncope.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.persistence.api.entity.Entitlement;\n+import org.apache.syncope.persistence.api.entity.Entity;\n+import org.apache.syncope.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.persistence.api.entity.Notification;\n+import org.apache.syncope.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.persistence.api.entity.Policy;\n+import org.apache.syncope.persistence.api.entity.PushPolicy;\n+import org.apache.syncope.persistence.api.entity.Report;\n+import org.apache.syncope.persistence.api.entity.ReportExec;\n+import org.apache.syncope.persistence.api.entity.ReportletConfInstance;\n+import org.apache.syncope.persistence.api.entity.SyncPolicy;\n+import org.apache.syncope.persistence.api.entity.conf.CPlainAttr;\n+import org.apache.syncope.persistence.api.entity.conf.CPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.api.entity.conf.CPlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.conf.CPlainSchema;\n+import org.apache.syncope.persistence.api.entity.conf.Conf;\n+import org.apache.syncope.persistence.api.entity.membership.MDerAttr;\n+import org.apache.syncope.persistence.api.entity.membership.MDerAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.membership.MDerSchema;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttr;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainSchema;\n+import org.apache.syncope.persistence.api.entity.membership.MVirAttr;\n+import org.apache.syncope.persistence.api.entity.membership.MVirAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.membership.MVirSchema;\n+import org.apache.syncope.persistence.api.entity.membership.Membership;\n+import org.apache.syncope.persistence.api.entity.role.RDerAttr;\n+import org.apache.syncope.persistence.api.entity.role.RDerAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.role.RDerSchema;\n+import org.apache.syncope.persistence.api.entity.role.RMapping;\n+import org.apache.syncope.persistence.api.entity.role.RMappingItem;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttr;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.role.RPlainSchema;\n+import org.apache.syncope.persistence.api.entity.role.RVirAttr;\n+import org.apache.syncope.persistence.api.entity.role.RVirAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.role.RVirSchema;\n+import org.apache.syncope.persistence.api.entity.role.Role;\n+import org.apache.syncope.persistence.api.entity.task.NotificationTask;\n+import org.apache.syncope.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.persistence.api.entity.task.PushTask;\n+import org.apache.syncope.persistence.api.entity.task.SchedTask;\n+import org.apache.syncope.persistence.api.entity.task.SyncTask;\n+import org.apache.syncope.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.persistence.api.entity.user.SecurityQuestion;\n+import org.apache.syncope.persistence.api.entity.user.UDerAttr;\n+import org.apache.syncope.persistence.api.entity.user.UDerSchema;\n+import org.apache.syncope.persistence.api.entity.user.UMapping;\n+import org.apache.syncope.persistence.api.entity.user.UMappingItem;\n+import org.apache.syncope.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.persistence.api.entity.user.UPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.api.entity.user.UPlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.user.UPlainSchema;\n+import org.apache.syncope.persistence.api.entity.user.UVirAttr;\n+import org.apache.syncope.persistence.api.entity.user.UVirSchema;\n+import org.apache.syncope.persistence.api.entity.user.User;\n+import org.apache.syncope.persistence.jpa.entity.conf.JPACPlainAttr;\n+import org.apache.syncope.persistence.jpa.entity.conf.JPACPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.jpa.entity.conf.JPACPlainAttrValue;\n+import org.apache.syncope.persistence.jpa.entity.conf.JPACPlainSchema;\n+import org.apache.syncope.persistence.jpa.entity.conf.JPAConf;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMDerAttr;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMDerAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMDerSchema;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMPlainAttr;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMPlainAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMPlainAttrValue;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMPlainSchema;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMVirAttr;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMVirAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMVirSchema;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMembership;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARDerAttr;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARDerAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARDerSchema;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARMapping;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARMappingItem;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARPlainAttr;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARPlainAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARPlainAttrValue;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARPlainSchema;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARVirAttr;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARVirAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARVirSchema;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARole;\n+import org.apache.syncope.persistence.jpa.entity.task.JPANotificationTask;\n+import org.apache.syncope.persistence.jpa.entity.task.JPAPropagationTask;\n+import org.apache.syncope.persistence.jpa.entity.task.JPAPushTask;\n+import org.apache.syncope.persistence.jpa.entity.task.JPASchedTask;\n+import org.apache.syncope.persistence.jpa.entity.task.JPASyncTask;\n+import org.apache.syncope.persistence.jpa.entity.task.JPATaskExec;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUDerAttr;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUDerSchema;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUMapping;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUMappingItem;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUPlainAttr;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUPlainAttrValue;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUPlainSchema;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUVirAttr;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUVirSchema;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUser;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class JPAEntityFactory implements EntityFactory {\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n+        T result;\n+\n+        if (reference.equals(User.class)) {\n+            result = (T) new JPAUser();\n+        } else if (reference.equals(Role.class)) {\n+            result = (T) new JPARole();\n+        } else if (reference.equals(Membership.class)) {\n+            result = (T) new JPAMembership();\n+        } else if (reference.equals(Conf.class)) {\n+            result = (T) new JPAConf();\n+        } else if (reference.equals(Notification.class)) {\n+            result = (T) new JPANotification();\n+        } else if (reference.equals(Entitlement.class)) {\n+            result = (T) new JPAEntitlement();\n+        } else if (reference.equals(ExternalResource.class)) {\n+            result = (T) new JPAExternalResource();\n+        } else if (reference.equals(ConnInstance.class)) {\n+            result = (T) new JPAConnInstance();\n+        } else if (reference.equals(UPlainSchema.class)) {\n+            result = (T) new JPAUPlainSchema();\n+        } else if (reference.equals(UPlainAttr.class)) {\n+            result = (T) new JPAUPlainAttr();\n+        } else if (reference.equals(UPlainAttrValue.class)) {\n+            result = (T) new JPAUPlainAttrValue();\n+        } else if (reference.equals(UPlainAttrUniqueValue.class)) {\n+            result = (T) new JPAUPlainAttrUniqueValue();\n+        } else if (reference.equals(UDerSchema.class)) {\n+            result = (T) new JPAUDerSchema();\n+        } else if (reference.equals(UDerAttr.class)) {\n+            result = (T) new JPAUDerAttr();\n+        } else if (reference.equals(UVirSchema.class)) {\n+            result = (T) new JPAUVirSchema();\n+        } else if (reference.equals(UVirAttr.class)) {\n+            result = (T) new JPAUVirAttr();\n+        } else if (reference.equals(UMapping.class)) {\n+            result = (T) new JPAUMapping();\n+        } else if (reference.equals(UMappingItem.class)) {\n+            result = (T) new JPAUMappingItem();\n+        } else if (reference.equals(RPlainSchema.class)) {\n+            result = (T) new JPARPlainSchema();\n+        } else if (reference.equals(RPlainAttr.class)) {\n+            result = (T) new JPARPlainAttr();\n+        } else if (reference.equals(RPlainAttrValue.class)) {\n+            result = (T) new JPARPlainAttrValue();\n+        } else if (reference.equals(RPlainAttrUniqueValue.class)) {\n+            result = (T) new JPARPlainAttrUniqueValue();\n+        } else if (reference.equals(RPlainAttrTemplate.class)) {\n+            result = (T) new JPARPlainAttrTemplate();\n+        } else if (reference.equals(RDerAttrTemplate.class)) {\n+            result = (T) new JPARDerAttrTemplate();\n+        } else if (reference.equals(RVirAttrTemplate.class)) {\n+            result = (T) new JPARVirAttrTemplate();\n+        } else if (reference.equals(RDerSchema.class)) {\n+            result = (T) new JPARDerSchema();\n+        } else if (reference.equals(RDerAttr.class)) {\n+            result = (T) new JPARDerAttr();\n+        } else if (reference.equals(RVirSchema.class)) {\n+            result = (T) new JPARVirSchema();\n+        } else if (reference.equals(RVirAttr.class)) {\n+            result = (T) new JPARVirAttr();\n+        } else if (reference.equals(RMapping.class)) {\n+            result = (T) new JPARMapping();\n+        } else if (reference.equals(RMappingItem.class)) {\n+            result = (T) new JPARMappingItem();\n+        } else if (reference.equals(MPlainSchema.class)) {\n+            result = (T) new JPAMPlainSchema();\n+        } else if (reference.equals(MPlainAttr.class)) {\n+            result = (T) new JPAMPlainAttr();\n+        } else if (reference.equals(MPlainAttrValue.class)) {\n+            result = (T) new JPAMPlainAttrValue();\n+        } else if (reference.equals(MPlainAttrUniqueValue.class)) {\n+            result = (T) new JPAMPlainAttrUniqueValue();\n+        } else if (reference.equals(MDerSchema.class)) {\n+            result = (T) new JPAMDerSchema();\n+        } else if (reference.equals(MDerAttr.class)) {\n+            result = (T) new JPAMDerAttr();\n+        } else if (reference.equals(MVirSchema.class)) {\n+            result = (T) new JPAMVirSchema();\n+        } else if (reference.equals(MVirAttr.class)) {\n+            result = (T) new JPAMVirAttr();\n+        } else if (reference.equals(MPlainAttrTemplate.class)) {\n+            result = (T) new JPAMPlainAttrTemplate();\n+        } else if (reference.equals(MDerAttrTemplate.class)) {\n+            result = (T) new JPAMDerAttrTemplate();\n+        } else if (reference.equals(MVirAttrTemplate.class)) {\n+            result = (T) new JPAMVirAttrTemplate();\n+        } else if (reference.equals(CPlainSchema.class)) {\n+            result = (T) new JPACPlainSchema();\n+        } else if (reference.equals(CPlainAttr.class)) {\n+            result = (T) new JPACPlainAttr();\n+        } else if (reference.equals(CPlainAttrValue.class)) {\n+            result = (T) new JPACPlainAttrValue();\n+        } else if (reference.equals(CPlainAttrUniqueValue.class)) {\n+            result = (T) new JPACPlainAttrUniqueValue();\n+        } else if (reference.equals(Report.class)) {\n+            result = (T) new JPAReport();\n+        } else if (reference.equals(ReportExec.class)) {\n+            result = (T) new JPAReportExec();\n+        } else if (reference.equals(ReportletConfInstance.class)) {\n+            result = (T) new JPAReportletConfInstance();\n+        } else if (reference.equals(NotificationTask.class)) {\n+            result = (T) new JPANotificationTask();\n+        } else if (reference.equals(PropagationTask.class)) {\n+            result = (T) new JPAPropagationTask();\n+        } else if (reference.equals(PushTask.class)) {\n+            result = (T) new JPAPushTask();\n+        } else if (reference.equals(SyncTask.class)) {\n+            result = (T) new JPASyncTask();\n+        } else if (reference.equals(SchedTask.class)) {\n+            result = (T) new JPASchedTask();\n+        } else if (reference.equals(TaskExec.class)) {\n+            result = (T) new JPATaskExec();\n+        } else if (reference.equals(SecurityQuestion.class)) {\n+            result = (T) new JPASecurityQuestion();\n+        } else {\n+            throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends Policy> T newPolicy(final Class<T> reference, final boolean global) {\n+        T result;\n+\n+        if (reference.equals(AccountPolicy.class)) {\n+            result = (T) new JPAAccountPolicy(global);\n+        } else if (reference.equals(PasswordPolicy.class)) {\n+            result = (T) new JPAPasswordPolicy(global);\n+        } else if (reference.equals(PushPolicy.class)) {\n+            result = (T) new JPAPushPolicy(global);\n+        } else if (reference.equals(SyncPolicy.class)) {\n+            result = (T) new JPASyncPolicy(global);\n+        } else {\n+            throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n+        }\n+\n+        return result;\n+    }\n+\n+}"},{"sha":"b81e948e1ccb49d21e1f4ee39c73cda85d90ee8a","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/JPAPasswordPolicy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAPasswordPolicy.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -33,7 +33,7 @@ public JPAPasswordPolicy() {\n         this(false);\n     }\n \n-    public JPAPasswordPolicy(boolean global) {\n+    public JPAPasswordPolicy(final boolean global) {\n         super();\n \n         this.type = global"},{"sha":"2c7845368a6aa183b1ad74a6a277adb4d12258a1","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/AbstractTest.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2FAbstractTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -18,11 +18,17 @@\n  */\n package org.apache.syncope.persistence.jpa;\n \n+import org.apache.syncope.persistence.api.entity.EntityFactory;\n import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(locations = { \"classpath:persistenceTestEnv.xml\" })\n public abstract class AbstractTest {\n+\n+    @Autowired\n+    protected EntityFactory entityFactory;\n+\n }"},{"sha":"f751b77bf0d6e0a37f877cbeaf06092aff137e57","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/AttrTest.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAttrTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -40,8 +40,6 @@\n import org.apache.syncope.persistence.api.entity.user.UPlainSchema;\n import org.apache.syncope.persistence.api.entity.user.User;\n import org.apache.syncope.persistence.jpa.AbstractTest;\n-import org.apache.syncope.persistence.jpa.entity.user.JPAUPlainAttr;\n-import org.apache.syncope.persistence.jpa.entity.user.JPAUPlainAttrUniqueValue;\n import org.apache.syncope.server.security.Encryptor;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -83,7 +81,7 @@ public void save() throws ClassNotFoundException {\n         UPlainSchema emailSchema = userSchemaDAO.find(\"email\", UPlainSchema.class);\n         assertNotNull(emailSchema);\n \n-        UPlainAttr attribute = new JPAUPlainAttr();\n+        UPlainAttr attribute = entityFactory.newEntity(UPlainAttr.class);\n         attribute.setSchema(emailSchema);\n         attribute.setOwner(user);\n \n@@ -113,7 +111,7 @@ public void saveWithEnum() throws ClassNotFoundException {\n         assertNotNull(gender.getType());\n         assertNotNull(gender.getEnumerationValues());\n \n-        UPlainAttr attribute = new JPAUPlainAttr();\n+        UPlainAttr attribute = entityFactory.newEntity(UPlainAttr.class);\n         attribute.setSchema(gender);\n         attribute.setOwner(user);\n         user.addPlainAttr(attribute);\n@@ -148,10 +146,10 @@ public void validateAndSave() {\n         final UPlainSchema fullnameSchema = userSchemaDAO.find(\"fullname\", UPlainSchema.class);\n         assertNotNull(fullnameSchema);\n \n-        UPlainAttr attribute = new JPAUPlainAttr();\n+        UPlainAttr attribute = entityFactory.newEntity(UPlainAttr.class);\n         attribute.setSchema(emailSchema);\n \n-        UPlainAttrUniqueValue uauv = new JPAUPlainAttrUniqueValue();\n+        UPlainAttrUniqueValue uauv = entityFactory.newEntity(UPlainAttrUniqueValue.class);\n         uauv.setAttr(attribute);\n         uauv.setSchema(fullnameSchema);\n         uauv.setStringValue(\"a value\");\n@@ -183,7 +181,7 @@ public void saveWithEncrypted() throws Exception {\n         assertNotNull(obscureSchema.getSecretKey());\n         assertNotNull(obscureSchema.getCipherAlgorithm());\n \n-        UPlainAttr attribute = new JPAUPlainAttr();\n+        UPlainAttr attribute = entityFactory.newEntity(UPlainAttr.class);\n         attribute.setSchema(obscureSchema);\n         attribute.addValue(\"testvalue\", JPAAttributableUtil.getInstance(AttributableType.USER));\n         attribute.setOwner(user);\n@@ -210,7 +208,7 @@ public void saveWithBinary() throws UnsupportedEncodingException {\n         new Random().nextBytes(bytes);\n         final String photoB64Value = new String(Base64.encode(bytes), SyncopeConstants.DEFAULT_ENCODING);\n \n-        UPlainAttr attribute = new JPAUPlainAttr();\n+        UPlainAttr attribute = entityFactory.newEntity(UPlainAttr.class);\n         attribute.setSchema(photoSchema);\n         attribute.addValue(photoB64Value, JPAAttributableUtil.getInstance(AttributableType.USER));\n         attribute.setOwner(user);"},{"sha":"ab662b70aebda000e1e7419a9e7f342d25e746be","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/ConfTest.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FConfTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FConfTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FConfTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -33,8 +33,6 @@\n import org.apache.syncope.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.persistence.api.entity.conf.CPlainSchema;\n import org.apache.syncope.persistence.jpa.AbstractTest;\n-import org.apache.syncope.persistence.jpa.entity.conf.JPACPlainAttr;\n-import org.apache.syncope.persistence.jpa.entity.conf.JPACPlainSchema;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -65,14 +63,14 @@ public void read() {\n     @Test\n     public void setAndDelete() {\n         // 1. create CSChema\n-        CPlainSchema useless = new JPACPlainSchema();\n+        CPlainSchema useless = entityFactory.newEntity(CPlainSchema.class);\n         useless.setKey(\"useless\");\n         useless.setType(AttrSchemaType.Date);\n         useless.setConversionPattern(\"yyyy-MM-dd\");\n         useless = plainSchemaDAO.save(useless);\n \n         // 2. create conf\n-        CPlainAttr newConf = new JPACPlainAttr();\n+        CPlainAttr newConf = entityFactory.newEntity(CPlainAttr.class);\n         newConf.setSchema(useless);\n         newConf.addValue(\"2014-06-20\", JPAAttributableUtil.getInstance(AttributableType.CONFIGURATION));\n         confDAO.save(newConf);\n@@ -96,7 +94,7 @@ public void setAndDelete() {\n     @Test\n     public void issueSYNCOPE418() {\n         try {\n-            CPlainSchema failing = new JPACPlainSchema();\n+            CPlainSchema failing = entityFactory.newEntity(CPlainSchema.class);\n             failing.setKey(\"http://schemas.examples.org/security/authorization/organizationUnit\");\n             failing.setType(AttrSchemaType.String);\n             plainSchemaDAO.save(failing);"},{"sha":"23953704e2a61f3b81ed56bd99dc7933b46ea9ad","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/ConnInstanceTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FConnInstanceTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -64,7 +64,7 @@ public void findById() {\n \n     @Test\n     public void save() throws ClassNotFoundException {\n-        ConnInstance connInstance = new JPAConnInstance();\n+        ConnInstance connInstance = entityFactory.newEntity(ConnInstance.class);\n \n         connInstance.setLocation(new File(System.getProperty(\"java.io.tmpdir\")).toURI().toString());\n "},{"sha":"8bc4468c73c5489c96f5f6417c0b56c27fd9fd48","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/DerAttrTest.java","status":"modified","additions":11,"deletions":19,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FDerAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FDerAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FDerAttrTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -45,14 +45,6 @@\n import org.apache.syncope.persistence.api.entity.user.UPlainAttrValue;\n import org.apache.syncope.persistence.api.entity.user.User;\n import org.apache.syncope.persistence.jpa.AbstractTest;\n-import org.apache.syncope.persistence.jpa.entity.membership.JPAMDerAttr;\n-import org.apache.syncope.persistence.jpa.entity.membership.JPAMDerAttrTemplate;\n-import org.apache.syncope.persistence.jpa.entity.membership.JPAMDerSchema;\n-import org.apache.syncope.persistence.jpa.entity.role.JPARDerAttr;\n-import org.apache.syncope.persistence.jpa.entity.role.JPARDerAttrTemplate;\n-import org.apache.syncope.persistence.jpa.entity.role.JPARDerSchema;\n-import org.apache.syncope.persistence.jpa.entity.user.JPAUDerAttr;\n-import org.apache.syncope.persistence.jpa.entity.user.JPAUDerSchema;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -95,7 +87,7 @@ public void saveUDerAttribute() {\n         User owner = userDAO.find(3L);\n         assertNotNull(\"did not get expected user\", owner);\n \n-        UDerAttr derAttr = new JPAUDerAttr();\n+        UDerAttr derAttr = entityFactory.newEntity(UDerAttr.class);\n         derAttr.setOwner(owner);\n         derAttr.setSchema(cnSchema);\n \n@@ -116,7 +108,7 @@ public void saveMDerAttribute() {\n         Membership owner = membershipDAO.find(1L);\n         assertNotNull(\"did not get expected user\", owner);\n \n-        MDerAttr derAttr = new JPAMDerAttr();\n+        MDerAttr derAttr = entityFactory.newEntity(MDerAttr.class);\n         derAttr.setOwner(owner);\n         derAttr.setTemplate(owner.getRole().getAttrTemplate(MDerAttrTemplate.class, \"mderiveddata\"));\n \n@@ -138,7 +130,7 @@ public void saveRDerAttribute() {\n         Role owner = roleDAO.find(1L);\n         assertNotNull(\"did not get expected user\", owner);\n \n-        RDerAttr derAttr = new JPARDerAttr();\n+        RDerAttr derAttr = entityFactory.newEntity(RDerAttr.class);\n         derAttr.setOwner(owner);\n         derAttr.setTemplate(owner.getAttrTemplate(RDerAttrTemplate.class, \"rderiveddata\"));\n \n@@ -171,7 +163,7 @@ public void delete() {\n \n     @Test\n     public void issueSYNCOPE134User() {\n-        UDerSchema sderived = new JPAUDerSchema();\n+        UDerSchema sderived = entityFactory.newEntity(UDerSchema.class);\n         sderived.setKey(\"sderived\");\n         sderived.setExpression(\"status + ' - ' + username + ' - ' + creationDate + '[' + failedLogins + ']'\");\n \n@@ -185,7 +177,7 @@ public void issueSYNCOPE134User() {\n         User owner = userDAO.find(3L);\n         assertNotNull(\"did not get expected user\", owner);\n \n-        UDerAttr derAttr = new JPAUDerAttr();\n+        UDerAttr derAttr = entityFactory.newEntity(UDerAttr.class);\n         derAttr.setOwner(owner);\n         derAttr.setSchema(sderived);\n \n@@ -204,7 +196,7 @@ public void issueSYNCOPE134User() {\n \n     @Test\n     public void issueSYNCOPE134Role() {\n-        RDerSchema sderived = new JPARDerSchema();\n+        RDerSchema sderived = entityFactory.newEntity(RDerSchema.class);\n         sderived.setKey(\"sderived\");\n         sderived.setExpression(\"name\");\n \n@@ -218,11 +210,11 @@ public void issueSYNCOPE134Role() {\n         Role owner = roleDAO.find(7L);\n         assertNotNull(\"did not get expected role\", owner);\n \n-        RDerAttrTemplate template = new JPARDerAttrTemplate();\n+        RDerAttrTemplate template = entityFactory.newEntity(RDerAttrTemplate.class);\n         template.setSchema(sderived);\n         owner.getAttrTemplates(RDerAttrTemplate.class).add(template);\n \n-        RDerAttr derAttr = new JPARDerAttr();\n+        RDerAttr derAttr = entityFactory.newEntity(RDerAttr.class);\n         derAttr.setOwner(owner);\n         derAttr.setTemplate(owner.getAttrTemplate(RDerAttrTemplate.class, sderived.getKey()));\n \n@@ -241,7 +233,7 @@ public void issueSYNCOPE134Role() {\n \n     @Test\n     public void issueSYNCOPE134Memb() {\n-        MDerSchema mderived = new JPAMDerSchema();\n+        MDerSchema mderived = entityFactory.newEntity(MDerSchema.class);\n         mderived.setKey(\"mderived\");\n         mderived.setExpression(\"key\");\n \n@@ -255,13 +247,13 @@ public void issueSYNCOPE134Memb() {\n         Membership owner = membershipDAO.find(4L);\n         assertNotNull(\"did not get expected membership\", owner);\n \n-        MDerAttrTemplate template = new JPAMDerAttrTemplate();\n+        MDerAttrTemplate template = entityFactory.newEntity(MDerAttrTemplate.class);\n         template.setSchema(mderived);\n         owner.getRole().getAttrTemplates(MDerAttrTemplate.class).add(template);\n \n         derSchemaDAO.flush();\n \n-        MDerAttr derAttr = new JPAMDerAttr();\n+        MDerAttr derAttr = entityFactory.newEntity(MDerAttr.class);\n         derAttr.setOwner(owner);\n         derAttr.setTemplate(owner.getRole().getAttrTemplate(MDerAttrTemplate.class, mderived.getKey()));\n "},{"sha":"19af5e9699eaebcd75fd8b0c109fa7f905ff3efe","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/DerSchemaTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FDerSchemaTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -33,7 +33,6 @@\n import org.apache.syncope.persistence.api.entity.role.RDerSchema;\n import org.apache.syncope.persistence.api.entity.user.UDerSchema;\n import org.apache.syncope.persistence.jpa.AbstractTest;\n-import org.apache.syncope.persistence.jpa.entity.user.JPAUDerSchema;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -58,7 +57,7 @@ public void findByName() {\n \n     @Test\n     public void save() {\n-        UDerSchema derivedAttributeSchema = new JPAUDerSchema();\n+        UDerSchema derivedAttributeSchema = entityFactory.newEntity(UDerSchema.class);\n         derivedAttributeSchema.setKey(\"cn2\");\n         derivedAttributeSchema.setExpression(\"firstname surname\");\n \n@@ -91,7 +90,7 @@ public void delete() {\n \n     @Test\n     public void issueSYNCOPE418() {\n-        UDerSchema schema = new JPAUDerSchema();\n+        UDerSchema schema = entityFactory.newEntity(UDerSchema.class);\n         schema.setKey(\"http://schemas.examples.org/security/authorization/organizationUnit\");\n \n         try {"},{"sha":"9d4746be4e11fa02b03167620c6bf6c7c1a886cb","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/EntitlementTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FEntitlementTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FEntitlementTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FEntitlementTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -50,7 +50,7 @@ public void findByName() {\n \n     @Test\n     public void save() {\n-        Entitlement entitlement = new JPAEntitlement();\n+        Entitlement entitlement = entityFactory.newEntity(Entitlement.class);\n         entitlement.setKey(\"another\");\n \n         entitlementDAO.save(entitlement);"},{"sha":"b83c453c8e0d3e744f099d3f385d382a325e7ba7","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/MembershipTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FMembershipTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FMembershipTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FMembershipTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -30,7 +30,6 @@\n import org.apache.syncope.persistence.api.entity.role.Role;\n import org.apache.syncope.persistence.api.entity.user.User;\n import org.apache.syncope.persistence.jpa.AbstractTest;\n-import org.apache.syncope.persistence.jpa.entity.membership.JPAMembership;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -64,7 +63,7 @@ public void save() {\n         User user = userDAO.find(4L);\n         Role role = roleDAO.find(1L);\n \n-        Membership membership = new JPAMembership();\n+        Membership membership = entityFactory.newEntity(Membership.class);\n         membership.setUser(user);\n         membership.setRole(role);\n "},{"sha":"cd4b11685b3f5d6a1ee444cc55b8f6ce043dc29b","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/NotificationTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FNotificationTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -57,7 +57,7 @@ public void findAll() {\n \n     @Test\n     public void save() {\n-        Notification notification = new JPANotification();\n+        Notification notification = entityFactory.newEntity(Notification.class);\n         notification.addEvent(\"save\");\n \n         notification.setUserAbout(\"fake search condition\");\n@@ -84,7 +84,7 @@ public void delete() {\n \n     @Test\n     public void issueSYNCOPE445() {\n-        Notification notification = new JPANotification();\n+        Notification notification = entityFactory.newEntity(Notification.class);\n         notification.addEvent(\"save\");\n \n         notification.setUserAbout(\"fake search condition\");\n@@ -109,7 +109,7 @@ public void issueSYNCOPE445() {\n \n     @Test\n     public void issueSYNCOPE446() {\n-        Notification notification = new JPANotification();\n+        Notification notification = entityFactory.newEntity(Notification.class);\n         notification.addEvent(\"[REST]:[RoleController]:[]:[create]:[SUCCESS]\");\n \n         notification.setRoleAbout(\"fake search condition\");"},{"sha":"4e470877376423c60508d42a72a5bdd4ba9361df","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/PlainSchemaTest.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FPlainSchemaTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -36,8 +36,6 @@\n import org.apache.syncope.persistence.api.entity.role.RPlainSchema;\n import org.apache.syncope.persistence.api.entity.user.UPlainSchema;\n import org.apache.syncope.persistence.jpa.AbstractTest;\n-import org.apache.syncope.persistence.jpa.entity.role.JPARPlainSchema;\n-import org.apache.syncope.persistence.jpa.entity.user.JPAUPlainSchema;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -78,7 +76,7 @@ public void findAttrs() {\n \n     @Test\n     public void save() {\n-        UPlainSchema schema = new JPAUPlainSchema();\n+        UPlainSchema schema = entityFactory.newEntity(UPlainSchema.class);\n         schema.setKey(\"secondaryEmail\");\n         schema.setType(AttrSchemaType.String);\n         schema.setValidatorClass(\"org.apache.syncope.core.validation.EmailAddressValidator\");\n@@ -94,7 +92,7 @@ public void save() {\n \n     @Test(expected = InvalidEntityException.class)\n     public void saveNonValid() {\n-        UPlainSchema schema = new JPAUPlainSchema();\n+        UPlainSchema schema = entityFactory.newEntity(UPlainSchema.class);\n         schema.setKey(\"secondaryEmail\");\n         schema.setType(AttrSchemaType.String);\n         schema.setValidatorClass(\"org.apache.syncope.core.validation.EmailAddressValidator\");\n@@ -107,7 +105,7 @@ public void saveNonValid() {\n \n     @Test\n     public void checkForEnumType() {\n-        RPlainSchema schema = new JPARPlainSchema();\n+        RPlainSchema schema = entityFactory.newEntity(RPlainSchema.class);\n         schema.setType(AttrSchemaType.Enum);\n         schema.setKey(\"color\");\n \n@@ -132,7 +130,7 @@ public void checkForEnumType() {\n \n     @Test(expected = InvalidEntityException.class)\n     public void saveInvalidSchema() {\n-        UPlainSchema schema = new JPAUPlainSchema();\n+        UPlainSchema schema = entityFactory.newEntity(UPlainSchema.class);\n         schema.setKey(\"username\");\n         plainSchemaDAO.save(schema);\n     }\n@@ -149,7 +147,7 @@ public void delete() {\n \n     @Test\n     public void issueSYNCOPE418() {\n-        UPlainSchema schema = new JPAUPlainSchema();\n+        UPlainSchema schema = entityFactory.newEntity(UPlainSchema.class);\n         schema.setKey(\"http://schemas.examples.org/security/authorization/organizationUnit\");\n \n         try {"},{"sha":"8c1d65ab3896aec6db506eb2ea1243c0ae28a28e","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/PolicyTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FPolicyTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -79,7 +79,7 @@ public void saveInvalidPolicy() {\n         passwordPolicy.setMaxLength(8);\n         passwordPolicy.setMinLength(6);\n \n-        SyncPolicy policy = new JPASyncPolicy();\n+        SyncPolicy policy = entityFactory.newPolicy(SyncPolicy.class, false);\n         policy.setSpecification(passwordPolicy);\n         policy.setDescription(\"sync policy\");\n \n@@ -92,7 +92,7 @@ public void saveSecondPasswordPolicy() {\n         passwordPolicy.setMaxLength(8);\n         passwordPolicy.setMinLength(6);\n \n-        PasswordPolicy policy = new JPAPasswordPolicy(true);\n+        PasswordPolicy policy = entityFactory.newPolicy(PasswordPolicy.class, true);\n         policy.setSpecification(passwordPolicy);\n         policy.setDescription(\"global password policy\");\n \n@@ -101,7 +101,7 @@ public void saveSecondPasswordPolicy() {\n \n     @Test\n     public void create() {\n-        SyncPolicy policy = new JPASyncPolicy();\n+        SyncPolicy policy = entityFactory.newPolicy(SyncPolicy.class, false);\n \n         final String syncURuleName = \"net.tirasa.sync.correlation.TirasaURule\";\n         final String syncRRuleName = \"net.tirasa.sync.correlation.TirasaRRule\";"},{"sha":"e469f5ca27df8bfcbf5990536eaa80ce45b4be8b","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/ReportTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FReportTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FReportTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FReportTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -57,7 +57,7 @@ public void findAll() {\n     public void save() {\n         int beforeCount = reportDAO.count();\n \n-        Report report = new JPAReport();\n+        Report report = entityFactory.newEntity(Report.class);\n         report.setName(\"new report\");\n         report.addReportletConf(new UserReportletConf(\"first\"));\n         report.addReportletConf(new UserReportletConf(\"second\"));"},{"sha":"a82c450ad5fc6323c6eb26d69a7185c8789c4dc8","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/ResourceTest.java","status":"modified","additions":19,"deletions":21,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FResourceTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -38,8 +38,6 @@\n import org.apache.syncope.persistence.api.entity.user.UMapping;\n import org.apache.syncope.persistence.api.entity.user.UMappingItem;\n import org.apache.syncope.persistence.jpa.AbstractTest;\n-import org.apache.syncope.persistence.jpa.entity.user.JPAUMapping;\n-import org.apache.syncope.persistence.jpa.entity.user.JPAUMappingItem;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -93,15 +91,15 @@ public void getAccountId() {\n \n     @Test\n     public void save() {\n-        ExternalResource resource = new JPAExternalResource();\n+        ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n         resource.setKey(\"ws-target-resource-basic-save\");\n         resource.setPropagationPriority(2);\n         resource.setPropagationPrimary(true);\n \n-        UMapping mapping = new JPAUMapping();\n+        UMapping mapping = entityFactory.newEntity(UMapping.class);\n         resource.setUmapping(mapping);\n \n-        UMappingItem accountId = new JPAUMappingItem();\n+        UMappingItem accountId = entityFactory.newEntity(UMappingItem.class);\n         accountId.setExtAttrName(\"username\");\n         accountId.setIntAttrName(\"fullname\");\n         accountId.setIntMappingType(IntMappingType.UserId);\n@@ -124,16 +122,16 @@ public void save() {\n \n     @Test(expected = InvalidEntityException.class)\n     public void saveInvalidMappingIntAttr() {\n-        ExternalResource resource = new JPAExternalResource();\n+        ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n         resource.setKey(\"ws-target-resource-basic-save-invalid\");\n \n         ConnInstance connector = resourceDAO.find(\"ws-target-resource-1\").getConnector();\n         resource.setConnector(connector);\n \n-        UMapping mapping = new JPAUMapping();\n+        UMapping mapping = entityFactory.newEntity(UMapping.class);\n         resource.setUmapping(mapping);\n \n-        UMappingItem accountId = new JPAUMappingItem();\n+        UMappingItem accountId = entityFactory.newEntity(UMappingItem.class);\n         accountId.setAccountid(true);\n         accountId.setIntMappingType(IntMappingType.UserSchema);\n         mapping.addItem(accountId);\n@@ -145,16 +143,16 @@ public void saveInvalidMappingIntAttr() {\n \n     @Test(expected = IllegalArgumentException.class)\n     public void saveInvalidAccountIdMapping() {\n-        ExternalResource resource = new JPAExternalResource();\n+        ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n         resource.setKey(\"ws-target-resource-basic-save-invalid\");\n \n         ConnInstance connector = resourceDAO.find(\"ws-target-resource-1\").getConnector();\n         resource.setConnector(connector);\n \n-        UMapping mapping = new JPAUMapping();\n+        UMapping mapping = entityFactory.newEntity(UMapping.class);\n         resource.setUmapping(mapping);\n \n-        UMappingItem accountId = new JPAUMappingItem();\n+        UMappingItem accountId = entityFactory.newEntity(UMappingItem.class);\n         accountId.setAccountid(true);\n         accountId.setIntMappingType(IntMappingType.UserVirtualSchema);\n         mapping.setAccountIdItem(accountId);\n@@ -166,22 +164,22 @@ public void saveInvalidAccountIdMapping() {\n \n     @Test(expected = InvalidEntityException.class)\n     public void saveInvalidMappingExtAttr() {\n-        ExternalResource resource = new JPAExternalResource();\n+        ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n         resource.setKey(\"ws-target-resource-basic-save-invalid\");\n \n         ConnInstance connector = resourceDAO.find(\"ws-target-resource-1\").getConnector();\n         resource.setConnector(connector);\n \n-        UMapping mapping = new JPAUMapping();\n+        UMapping mapping = entityFactory.newEntity(UMapping.class);\n         resource.setUmapping(mapping);\n \n-        UMappingItem item = new JPAUMappingItem();\n+        UMappingItem item = entityFactory.newEntity(UMappingItem.class);\n         item.setAccountid(true);\n         item.setIntAttrName(\"fullname\");\n         item.setIntMappingType(IntMappingType.UserSchema);\n         mapping.addItem(item);\n \n-        item = new JPAUMappingItem();\n+        item = entityFactory.newEntity(UMappingItem.class);\n         item.setIntAttrName(\"userId\");\n         item.setIntMappingType(IntMappingType.UserSchema);\n         mapping.addItem(item);\n@@ -192,30 +190,30 @@ public void saveInvalidMappingExtAttr() {\n \n     @Test\n     public void saveWithRoleMappingType() {\n-        ExternalResource resource = new JPAExternalResource();\n+        ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n         resource.setKey(\"ws-target-resource-basic-save-invalid\");\n \n         ConnInstance connector = resourceDAO.find(\"ws-target-resource-1\").getConnector();\n         resource.setConnector(connector);\n \n-        UMapping mapping = new JPAUMapping();\n+        UMapping mapping = entityFactory.newEntity(UMapping.class);\n         resource.setUmapping(mapping);\n \n-        UMappingItem item = new JPAUMappingItem();\n+        UMappingItem item = entityFactory.newEntity(UMappingItem.class);\n         item.setIntAttrName(\"fullname\");\n         item.setExtAttrName(\"fullname\");\n         item.setIntMappingType(IntMappingType.UserSchema);\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.setAccountIdItem(item);\n \n-        item = new JPAUMappingItem();\n+        item = entityFactory.newEntity(UMappingItem.class);\n         item.setIntAttrName(\"icon\");\n         item.setExtAttrName(\"icon\");\n         item.setIntMappingType(IntMappingType.RoleSchema);\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.addItem(item);\n \n-        item = new JPAUMappingItem();\n+        item = entityFactory.newEntity(UMappingItem.class);\n         item.setIntAttrName(\"mderiveddata\");\n         item.setExtAttrName(\"mderiveddata\");\n         item.setIntMappingType(IntMappingType.MembershipDerivedSchema);\n@@ -255,7 +253,7 @@ public void delete() {\n \n     @Test\n     public void issueSYNCOPE418() {\n-        ExternalResource resource = new JPAExternalResource();\n+        ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n         resource.setKey(\"http://schemas.examples.org/security/authorization/organizationUnit\");\n \n         try {"},{"sha":"b2cc6415c2b6041f6ec040a001ea7a6fdd6a25af","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/RoleTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FRoleTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -29,7 +29,6 @@\n import org.apache.syncope.persistence.api.entity.PasswordPolicy;\n import org.apache.syncope.persistence.api.entity.role.Role;\n import org.apache.syncope.persistence.jpa.AbstractTest;\n-import org.apache.syncope.persistence.jpa.entity.role.JPARole;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -104,7 +103,7 @@ public void inheritedPolicy() {\n \n     @Test\n     public void save() {\n-        Role role = new JPARole();\n+        Role role = entityFactory.newEntity(Role.class);\n         role.setName(\"secondChild\");\n \n         // verify inheritance password and account policies"},{"sha":"5c74bd342396181b27801289ecf9b157cb6fa61f","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/SecurityQuestionTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FSecurityQuestionTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FSecurityQuestionTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FSecurityQuestionTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -52,7 +52,7 @@ public void findAll() {\n \n     @Test\n     public void save() {\n-        SecurityQuestion securityQuestion = new JPASecurityQuestion();\n+        SecurityQuestion securityQuestion = entityFactory.newEntity(SecurityQuestion.class);\n         securityQuestion.setContent(\"What is your favorite pet's name?\");\n \n         SecurityQuestion actual = securityQuestionDAO.save(securityQuestion);"},{"sha":"f3df4e28eb2135e8008a37e5d3c3da3c48aadbdd","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/TaskExecTest.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FTaskExecTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FTaskExecTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FTaskExecTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.persistence.jpa.entity;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n@@ -32,7 +31,6 @@\n import org.apache.syncope.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.persistence.jpa.AbstractTest;\n-import org.apache.syncope.persistence.jpa.entity.task.JPATaskExec;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -79,7 +77,7 @@ public void issueSYNCOPE214() {\n         String faultyMessage = \"A faulty message\";\n         faultyMessage = faultyMessage.replace('a', '\\0');\n \n-        TaskExec exec = new JPATaskExec();\n+        TaskExec exec = entityFactory.newEntity(TaskExec.class);\n         exec.setStartDate(new Date());\n         exec.setEndDate(new Date());\n         exec.setStatus(PropagationTaskExecStatus.SUCCESS.name());"},{"sha":"75777aa4ae681ae4260f3bf94fbc2a2c36c49614","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/TaskTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FTaskTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -37,7 +37,6 @@\n import org.apache.syncope.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.persistence.api.entity.user.User;\n import org.apache.syncope.persistence.jpa.AbstractTest;\n-import org.apache.syncope.persistence.jpa.entity.task.JPAPropagationTask;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.junit.Test;\n@@ -80,7 +79,7 @@ public void savePropagationTask() {\n         User user = userDAO.find(2L);\n         assertNotNull(user);\n \n-        PropagationTask task = new JPAPropagationTask();\n+        PropagationTask task = entityFactory.newEntity(PropagationTask.class);\n         task.setResource(resource);\n         task.setSubjectType(AttributableType.USER);\n         task.setPropagationMode(PropagationMode.TWO_PHASES);"},{"sha":"5ae3b063a22500ec7b0c59122496cf9582532ef8","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/UserTest.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FUserTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -33,8 +33,6 @@\n import org.apache.syncope.persistence.api.entity.user.UPlainAttrValue;\n import org.apache.syncope.persistence.api.entity.user.User;\n import org.apache.syncope.persistence.jpa.AbstractTest;\n-import org.apache.syncope.persistence.jpa.entity.user.JPAUPlainAttrValue;\n-import org.apache.syncope.persistence.jpa.entity.user.JPAUser;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -100,7 +98,7 @@ public void findByInvalidDerAttrExpression() {\n \n     @Test\n     public void findByAttributeValue() {\n-        final UPlainAttrValue fullnameValue = new JPAUPlainAttrValue();\n+        final UPlainAttrValue fullnameValue = entityFactory.newEntity(UPlainAttrValue.class);\n         fullnameValue.setStringValue(\"Gioacchino Rossini\");\n \n         final List<User> list = userDAO.findByAttrValue(\"fullname\", fullnameValue);\n@@ -109,7 +107,7 @@ public void findByAttributeValue() {\n \n     @Test\n     public void findByAttributeBooleanValue() {\n-        final UPlainAttrValue coolValue = new JPAUPlainAttrValue();\n+        final UPlainAttrValue coolValue = entityFactory.newEntity(UPlainAttrValue.class);\n         coolValue.setBooleanValue(true);\n \n         final List<User> list = userDAO.findByAttrValue(\"cool\", coolValue);\n@@ -138,7 +136,7 @@ public void findByUsername() {\n \n     @Test\n     public void save() {\n-        User user = new JPAUser();\n+        User user = entityFactory.newEntity(User.class);\n         user.setUsername(\"username\");\n         user.setCreationDate(new Date());\n \n@@ -183,7 +181,7 @@ public void delete() {\n \n     @Test\n     public void issue237() {\n-        User user = new JPAUser();\n+        User user = entityFactory.newEntity(User.class);\n         user.setUsername(\"username\");\n         user.setCreationDate(new Date());\n \n@@ -195,7 +193,7 @@ public void issue237() {\n \n     @Test\n     public void issueSYNCOPE391() {\n-        User user = new JPAUser();\n+        User user = entityFactory.newEntity(User.class);\n         user.setUsername(\"username\");\n         user.setPassword(null, CipherAlgorithm.AES);\n "},{"sha":"c63bf7240a0d4fe37667320dd2e54ab6b0e7a6de","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/VirAttrTest.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FVirAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FVirAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FVirAttrTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -38,9 +38,6 @@\n import org.apache.syncope.persistence.api.entity.user.UVirSchema;\n import org.apache.syncope.persistence.api.entity.user.User;\n import org.apache.syncope.persistence.jpa.AbstractTest;\n-import org.apache.syncope.persistence.jpa.entity.membership.JPAMVirAttr;\n-import org.apache.syncope.persistence.jpa.entity.role.JPARVirAttr;\n-import org.apache.syncope.persistence.jpa.entity.user.JPAUVirAttr;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -83,7 +80,7 @@ public void saveUVirAttribute() {\n         User owner = userDAO.find(3L);\n         assertNotNull(\"did not get expected user\", owner);\n \n-        UVirAttr virAttr = new JPAUVirAttr();\n+        UVirAttr virAttr = entityFactory.newEntity(UVirAttr.class);\n         virAttr.setOwner(owner);\n         virAttr.setSchema(virSchema);\n \n@@ -99,7 +96,7 @@ public void saveMVirAttribute() {\n         Membership owner = membershipDAO.find(3L);\n         assertNotNull(\"did not get expected membership\", owner);\n \n-        MVirAttr virAttr = new JPAMVirAttr();\n+        MVirAttr virAttr = entityFactory.newEntity(MVirAttr.class);\n         virAttr.setOwner(owner);\n         virAttr.setTemplate(owner.getRole().getAttrTemplate(MVirAttrTemplate.class, \"mvirtualdata\"));\n \n@@ -116,7 +113,7 @@ public void saveRVirAttribute() {\n         Role owner = roleDAO.find(3L);\n         assertNotNull(\"did not get expected membership\", owner);\n \n-        RVirAttr virAttr = new JPARVirAttr();\n+        RVirAttr virAttr = entityFactory.newEntity(RVirAttr.class);\n         virAttr.setOwner(owner);\n         virAttr.setTemplate(owner.getAttrTemplate(RVirAttrTemplate.class, \"rvirtualdata\"));\n "},{"sha":"9ae9e4832e2d5228de764906c17c90f51b948e14","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/VirSchemaTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FVirSchemaTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -33,7 +33,6 @@\n import org.apache.syncope.persistence.api.entity.role.RVirSchema;\n import org.apache.syncope.persistence.api.entity.user.UVirSchema;\n import org.apache.syncope.persistence.jpa.AbstractTest;\n-import org.apache.syncope.persistence.jpa.entity.user.JPAUVirSchema;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -58,7 +57,7 @@ public void findByName() {\n \n     @Test\n     public void save() {\n-        UVirSchema virtualAttributeSchema = new JPAUVirSchema();\n+        UVirSchema virtualAttributeSchema = entityFactory.newEntity(UVirSchema.class);\n         virtualAttributeSchema.setKey(\"virtual\");\n         virtualAttributeSchema.setReadonly(true);\n \n@@ -90,7 +89,7 @@ public void delete() {\n \n     @Test\n     public void issueSYNCOPE418() {\n-        UVirSchema schema = new JPAUVirSchema();\n+        UVirSchema schema = entityFactory.newEntity(UVirSchema.class);\n         schema.setKey(\"http://schemas.examples.org/security/authorization/organizationUnit\");\n \n         try {"},{"sha":"10747260a58acd1b60900a368398986c6b1413e4","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/relationship/AttrTest.java","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FAttrTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -48,11 +48,6 @@\n import org.apache.syncope.persistence.api.entity.user.User;\n import org.apache.syncope.persistence.jpa.AbstractTest;\n import org.apache.syncope.persistence.jpa.entity.JPAAttributableUtil;\n-import org.apache.syncope.persistence.jpa.entity.membership.JPAMPlainAttr;\n-import org.apache.syncope.persistence.jpa.entity.membership.JPAMPlainAttrTemplate;\n-import org.apache.syncope.persistence.jpa.entity.membership.JPAMPlainSchema;\n-import org.apache.syncope.persistence.jpa.entity.user.JPAUDerAttr;\n-import org.apache.syncope.persistence.jpa.entity.user.JPAUDerSchema;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -115,19 +110,19 @@ public void checkForEnumType() {\n         Membership membership = user.getMembership(1L);\n         assertNotNull(membership);\n \n-        MPlainSchema schema = new JPAMPlainSchema();\n+        MPlainSchema schema = entityFactory.newEntity(MPlainSchema.class);\n         schema.setType(AttrSchemaType.Enum);\n         schema.setKey(\"color\");\n         schema.setEnumerationValues(\"red\" + SyncopeConstants.ENUM_VALUES_SEPARATOR + \"yellow\");\n \n         MPlainSchema actualSchema = plainSchemaDAO.save(schema);\n         assertNotNull(actualSchema);\n \n-        MPlainAttrTemplate template = new JPAMPlainAttrTemplate();\n+        MPlainAttrTemplate template = entityFactory.newEntity(MPlainAttrTemplate.class);\n         template.setSchema(actualSchema);\n         membership.getRole().getAttrTemplates(MPlainAttrTemplate.class).add(template);\n \n-        MPlainAttr attr = new JPAMPlainAttr();\n+        MPlainAttr attr = entityFactory.newEntity(MPlainAttr.class);\n         attr.setTemplate(template);\n         attr.setOwner(membership);\n         attr.addValue(\"yellow\", JPAAttributableUtil.getInstance(AttributableType.MEMBERSHIP));\n@@ -146,7 +141,7 @@ public void checkForEnumType() {\n \n     @Test\n     public void derAttrFromSpecialAttrs() {\n-        UDerSchema sderived = new JPAUDerSchema();\n+        UDerSchema sderived = entityFactory.newEntity(UDerSchema.class);\n         sderived.setKey(\"sderived\");\n         sderived.setExpression(\"username + ' - ' + creationDate + '[' + failedLogins + ']'\");\n \n@@ -160,7 +155,7 @@ public void derAttrFromSpecialAttrs() {\n         User owner = userDAO.find(3L);\n         assertNotNull(\"did not get expected user\", owner);\n \n-        UDerAttr derAttr = new JPAUDerAttr();\n+        UDerAttr derAttr = entityFactory.newEntity(UDerAttr.class);\n         derAttr.setOwner(owner);\n         derAttr.setSchema(sderived);\n "},{"sha":"c391aaa2d7e6f9aa4bcb09b76c5b24f8a4d83b11","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/relationship/MembershipTest.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FMembershipTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FMembershipTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FMembershipTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -26,13 +26,10 @@\n import org.apache.syncope.persistence.api.entity.role.Role;\n import org.apache.syncope.persistence.api.entity.user.User;\n import org.apache.syncope.persistence.jpa.AbstractTest;\n-import org.apache.syncope.persistence.jpa.entity.membership.JPAMembership;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-\n-\n @Transactional\n public class MembershipTest extends AbstractTest {\n \n@@ -75,7 +72,7 @@ public void deleteAndCreate() {\n \n         // 2. (in the same transaction) create new membership with same user\n         // and role (in order to check the UNIQE constraint on Membership)\n-        membership = new JPAMembership();\n+        membership = entityFactory.newEntity(Membership.class);\n         membership.setUser(user);\n         membership.setRole(role);\n "},{"sha":"1623a99fb32fa7b0159164fc26fd2aa56a7094da","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/relationship/ReportTest.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FReportTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FReportTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FReportTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -31,8 +31,6 @@\n import org.apache.syncope.persistence.api.entity.Report;\n import org.apache.syncope.persistence.api.entity.ReportExec;\n import org.apache.syncope.persistence.jpa.AbstractTest;\n-import org.apache.syncope.persistence.jpa.entity.JPAReport;\n-import org.apache.syncope.persistence.jpa.entity.JPAReportExec;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -63,7 +61,7 @@ public void saveWithExistingName() {\n \n         String name = report.getName();\n \n-        report = new JPAReport();\n+        report = entityFactory.newEntity(Report.class);\n         report.setName(name);\n \n         reportDAO.save(report);\n@@ -76,7 +74,7 @@ public void save() {\n         assertNotNull(report);\n         assertEquals(1, report.getExecs().size());\n \n-        ReportExec reportExec = new JPAReportExec();\n+        ReportExec reportExec = entityFactory.newEntity(ReportExec.class);\n         reportExec.setReport(report);\n         reportExec.setStartDate(new Date());\n         reportExec.setEndDate(new Date());"},{"sha":"6a5595c70181a450d4aed60f06465db7837a2b72","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/relationship/ResourceTest.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FResourceTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -46,10 +46,7 @@\n import org.apache.syncope.persistence.api.entity.user.UMappingItem;\n import org.apache.syncope.persistence.api.entity.user.User;\n import org.apache.syncope.persistence.jpa.AbstractTest;\n-import org.apache.syncope.persistence.jpa.entity.JPAExternalResource;\n import org.apache.syncope.persistence.jpa.entity.role.JPARMappingItem;\n-import org.apache.syncope.persistence.jpa.entity.user.JPAUMapping;\n-import org.apache.syncope.persistence.jpa.entity.user.JPAUMappingItem;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -80,7 +77,7 @@ public void createWithPasswordPolicy() {\n         final String resourceName = \"resourceWithPasswordPolicy\";\n \n         PasswordPolicy policy = (PasswordPolicy) policyDAO.find(4L);\n-        ExternalResource resource = new JPAExternalResource();\n+        ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n         resource.setKey(resourceName);\n         resource.setPasswordPolicy(policy);\n \n@@ -103,7 +100,7 @@ public void createWithPasswordPolicy() {\n \n     @Test\n     public void save() {\n-        ExternalResource resource = new JPAExternalResource();\n+        ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n         resource.setKey(\"ws-target-resource-save\");\n \n         // specify the connector\n@@ -112,13 +109,13 @@ public void save() {\n \n         resource.setConnector(connector);\n \n-        UMapping mapping = new JPAUMapping();\n+        UMapping mapping = entityFactory.newEntity(UMapping.class);\n         mapping.setResource(resource);\n         resource.setUmapping(mapping);\n \n         // specify mappings\n         for (int i = 0; i < 3; i++) {\n-            UMappingItem item = new JPAUMappingItem();\n+            UMappingItem item = entityFactory.newEntity(UMappingItem.class);\n             item.setExtAttrName(\"test\" + i);\n             item.setIntAttrName(\"nonexistent\" + i);\n             item.setIntMappingType(IntMappingType.UserSchema);\n@@ -127,7 +124,7 @@ public void save() {\n             mapping.addItem(item);\n             item.setMapping(mapping);\n         }\n-        UMappingItem accountId = new JPAUMappingItem();\n+        UMappingItem accountId = entityFactory.newEntity(UMappingItem.class);\n         accountId.setExtAttrName(\"username\");\n         accountId.setIntAttrName(\"username\");\n         accountId.setIntMappingType(IntMappingType.UserId);\n@@ -136,7 +133,7 @@ public void save() {\n         accountId.setMapping(mapping);\n \n         // map a derived attribute\n-        UMappingItem derived = new JPAUMappingItem();\n+        UMappingItem derived = entityFactory.newEntity(UMappingItem.class);\n         derived.setAccountid(false);\n         derived.setExtAttrName(\"fullname\");\n         derived.setIntAttrName(\"cn\");\n@@ -282,7 +279,7 @@ public void issue243() {\n \n         int origMapItems = csv.getUmapping().getItems().size();\n \n-        UMappingItem newMapItem = new JPAUMappingItem();\n+        UMappingItem newMapItem = entityFactory.newEntity(UMappingItem.class);\n         newMapItem.setIntMappingType(IntMappingType.Username);\n         newMapItem.setExtAttrName(\"TEST\");\n         newMapItem.setPurpose(MappingPurpose.PROPAGATION);"},{"sha":"9eddc6e816e42db063a5554f5beb7f72e8077d02","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/relationship/RoleTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FRoleTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -40,7 +40,6 @@\n import org.apache.syncope.persistence.api.entity.role.Role;\n import org.apache.syncope.persistence.api.entity.user.User;\n import org.apache.syncope.persistence.jpa.AbstractTest;\n-import org.apache.syncope.persistence.jpa.entity.role.JPARole;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -77,7 +76,7 @@ public void saveWithTwoOwners() {\n         User user = userDAO.find(1L);\n         assertNotNull(\"did not find expected user\", user);\n \n-        Role role = new JPARole();\n+        Role role = entityFactory.newEntity(Role.class);\n         role.setName(\"error\");\n         role.setUserOwner(user);\n         role.setRoleOwner(root);\n@@ -113,7 +112,7 @@ public void findByOwner() {\n \n     public void createWithPasswordPolicy() {\n         PasswordPolicy policy = (PasswordPolicy) policyDAO.find(4L);\n-        Role role = new JPARole();\n+        Role role = entityFactory.newEntity(Role.class);\n         role.setName(\"roleWithPasswordPolicy\");\n         role.setPasswordPolicy(policy);\n "},{"sha":"27ffb1e0c97303e1e059f56a9d9278204c9ff143","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/relationship/TaskTest.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6938ea98c70983156836589c9dc4e42502fa1d3/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FTaskTest.java?ref=f6938ea98c70983156836589c9dc4e42502fa1d3","patch":"@@ -43,8 +43,6 @@\n import org.apache.syncope.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.persistence.api.entity.user.User;\n import org.apache.syncope.persistence.jpa.AbstractTest;\n-import org.apache.syncope.persistence.jpa.entity.task.JPAPropagationTask;\n-import org.apache.syncope.persistence.jpa.entity.task.JPATaskExec;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.junit.Test;\n@@ -84,7 +82,7 @@ public void save() {\n         User user = userDAO.find(2L);\n         assertNotNull(user);\n \n-        PropagationTask task = new JPAPropagationTask();\n+        PropagationTask task = entityFactory.newEntity(PropagationTask.class);\n         task.setResource(resource);\n         task.setSubjectType(AttributableType.USER);\n         task.setPropagationMode(PropagationMode.TWO_PHASES);\n@@ -115,7 +113,7 @@ public void addPropagationTaskExecution() {\n \n         int executionNumber = task.getExecs().size();\n \n-        TaskExec execution = new JPATaskExec();\n+        TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setTask(task);\n         execution.setStatus(PropagationTaskExecStatus.CREATED.name());\n         task.addExec(execution);\n@@ -137,7 +135,7 @@ public void addSyncTaskExecution() {\n \n         int executionNumber = task.getExecs().size();\n \n-        TaskExec execution = new JPATaskExec();\n+        TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setStatus(\"Text-free status\");\n         execution.setTask(task);\n         task.addExec(execution);\n@@ -159,7 +157,7 @@ public void addPushTaskExecution() {\n \n         int executionNumber = task.getExecs().size();\n \n-        TaskExec execution = new JPATaskExec();\n+        TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setStatus(\"Text-free status\");\n         execution.setTask(task);\n         task.addExec(execution);"}]}