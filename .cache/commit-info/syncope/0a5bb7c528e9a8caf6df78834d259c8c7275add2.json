{"sha":"0a5bb7c528e9a8caf6df78834d259c8c7275add2","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjBhNWJiN2M1MjhlOWE4Y2FmNmRmNzg4MzRkMjU5YzhjNzI3NWFkZDI=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-03-01T15:09:24Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-03-01T15:09:24Z"},"message":"SYNCOPE-16 #comment fixed issue\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1295610 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"704fb4783e38b80235bcaff74bb0f15500d7d6ec","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/704fb4783e38b80235bcaff74bb0f15500d7d6ec"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0a5bb7c528e9a8caf6df78834d259c8c7275add2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0a5bb7c528e9a8caf6df78834d259c8c7275add2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0a5bb7c528e9a8caf6df78834d259c8c7275add2","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0a5bb7c528e9a8caf6df78834d259c8c7275add2/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"17f7f5a0b91d696499d6570b3e7f53904be1e25d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/17f7f5a0b91d696499d6570b3e7f53904be1e25d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/17f7f5a0b91d696499d6570b3e7f53904be1e25d"}],"stats":{"total":1068,"additions":402,"deletions":666},"files":[{"sha":"44b04252bcc6ed5c0eb5828daa0371d14919c89b","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":9,"deletions":16,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=0a5bb7c528e9a8caf6df78834d259c8c7275add2","patch":"@@ -47,8 +47,7 @@ public <T extends AbstractAttr> T getAttribute(final String schemaName) {\n         return result;\n     }\n \n-    public <T extends AbstractDerAttr> T getDerivedAttribute(\n-            final String derivedSchemaName) {\n+    public <T extends AbstractDerAttr> T getDerivedAttribute(final String derivedSchemaName) {\n \n         T result = null;\n         T derivedAttribute;\n@@ -58,8 +57,7 @@ public <T extends AbstractDerAttr> T getDerivedAttribute(\n \n             derivedAttribute = (T) itor.next();\n             if (derivedAttribute.getDerivedSchema() != null\n-                    && derivedSchemaName.equals(\n-                    derivedAttribute.getDerivedSchema().getName())) {\n+                    && derivedSchemaName.equals(derivedAttribute.getDerivedSchema().getName())) {\n \n                 result = derivedAttribute;\n             }\n@@ -68,19 +66,17 @@ public <T extends AbstractDerAttr> T getDerivedAttribute(\n         return result;\n     }\n \n-    public <T extends AbstractVirAttr> T getVirtualAttribute(\n-            final String virtualSchemaName) {\n+    public <T extends AbstractVirAttr> T getVirtualAttribute(final String virtualSchemaName) {\n \n         T result = null;\n         T virtualAttribute;\n-        for (Iterator<? extends AbstractVirAttr> itor =\n-                getVirtualAttributes().iterator();\n+        for (Iterator<? extends AbstractVirAttr> itor = getVirtualAttributes().iterator();\n                 result == null && itor.hasNext();) {\n \n             virtualAttribute = (T) itor.next();\n+\n             if (virtualAttribute.getVirtualSchema() != null\n-                    && virtualSchemaName.equals(\n-                    virtualAttribute.getVirtualSchema().getName())) {\n+                    && virtualSchemaName.equals(virtualAttribute.getVirtualSchema().getName())) {\n \n                 result = virtualAttribute;\n             }\n@@ -90,8 +86,7 @@ public <T extends AbstractVirAttr> T getVirtualAttribute(\n     }\n \n     protected Map<AbstractSchema, AbstractAttr> getAttrMap() {\n-        final Map<AbstractSchema, AbstractAttr> map =\n-                new HashMap<AbstractSchema, AbstractAttr>();\n+        final Map<AbstractSchema, AbstractAttr> map = new HashMap<AbstractSchema, AbstractAttr>();\n \n         for (AbstractAttr attr : getAttributes()) {\n             map.put((AbstractSchema) attr.getSchema(), attr);\n@@ -101,8 +96,7 @@ protected Map<AbstractSchema, AbstractAttr> getAttrMap() {\n     }\n \n     protected Map<AbstractDerSchema, AbstractDerAttr> getDerAttrMap() {\n-        final Map<AbstractDerSchema, AbstractDerAttr> map =\n-                new HashMap<AbstractDerSchema, AbstractDerAttr>();\n+        final Map<AbstractDerSchema, AbstractDerAttr> map = new HashMap<AbstractDerSchema, AbstractDerAttr>();\n \n         for (AbstractDerAttr attr : getDerivedAttributes()) {\n             map.put((AbstractDerSchema) attr.getDerivedSchema(), attr);\n@@ -112,8 +106,7 @@ protected Map<AbstractDerSchema, AbstractDerAttr> getDerAttrMap() {\n     }\n \n     protected Map<AbstractVirSchema, AbstractVirAttr> getVirAttrMap() {\n-        final Map<AbstractVirSchema, AbstractVirAttr> map =\n-                new HashMap<AbstractVirSchema, AbstractVirAttr>();\n+        final Map<AbstractVirSchema, AbstractVirAttr> map = new HashMap<AbstractVirSchema, AbstractVirAttr>();\n \n         for (AbstractVirAttr attr : getVirtualAttributes()) {\n             map.put((AbstractVirSchema) attr.getVirtualSchema(), attr);"},{"sha":"4a633ef2d795b053c8fe42d1df1fe89497b77fa3","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractVirAttr.java","status":"modified","additions":23,"deletions":24,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java?ref=0a5bb7c528e9a8caf6df78834d259c8c7275add2","patch":"@@ -29,6 +29,7 @@\n import javax.persistence.Transient;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.OperationOptionsBuilder;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.syncope.core.init.ConnInstanceLoader;\n@@ -57,23 +58,25 @@ public void setValues(final List<String> values) {\n     }\n \n     protected <T extends AbstractAttributable> List<Object> retrieveValues(\n-            final T attributable, final String attributeName,\n-            final IntMappingType intMappingType) {\n+            final T attributable, final String attributeName, final IntMappingType intMappingType) {\n \n-        LOG.debug(\"{}: retrieving external values for {}\",\n-                new Object[]{attributable, attributeName});\n+        LOG.debug(\"{}: retrieving external values for {}\", new Object[]{attributable, attributeName});\n+\n+        List<Object> virAttrValues = new ArrayList<Object>();\n+\n+        // if attributable is not defined it won't be possible to retrieve values from external resources.\n+        if (attributable == null) {\n+            return virAttrValues;\n+        }\n+\n+        ConfigurableApplicationContext context = ApplicationContextManager.getApplicationContext();\n+        ConnInstanceLoader connInstanceLoader = context.getBean(ConnInstanceLoader.class);\n \n-        ConfigurableApplicationContext context =\n-                ApplicationContextManager.getApplicationContext();\n-        ConnInstanceLoader connInstanceLoader =\n-                context.getBean(ConnInstanceLoader.class);\n         if (connInstanceLoader == null) {\n             LOG.error(\"Could not get to ConnInstanceLoader\");\n             return null;\n         }\n \n-        List<Object> virAttrValues = new ArrayList<Object>();\n-\n         for (ExternalResource resource : attributable.getResources()) {\n             LOG.debug(\"Retrieving attribute mapped on {}\", resource);\n \n@@ -88,23 +91,18 @@ protected <T extends AbstractAttributable> List<Object> retrieveValues(\n                             + \"\\n\\tSource: \" + mapping.getIntAttrName()\n                             + \"\\n\\tDestination: \" + mapping.getExtAttrName()\n                             + \"\\n\\tType: \" + mapping.getIntMappingType()\n-                            + \"\\n\\tMandatory condition: \"\n-                            + mapping.getMandatoryCondition()\n+                            + \"\\n\\tMandatory condition: \" + mapping.getMandatoryCondition()\n                             + \"\\n\\tAccountId: \" + mapping.isAccountid()\n                             + \"\\n\\tPassword: \" + mapping.isPassword());\n                 }\n \n-                if (attributeName.equals(mapping.getIntAttrName())\n-                        && mapping.getIntMappingType() == intMappingType) {\n-\n+                if (attributeName.equals(mapping.getIntAttrName()) && mapping.getIntMappingType() == intMappingType) {\n                     attributeNames.add(mapping.getExtAttrName());\n                 }\n \n                 if (mapping.isAccountid()) {\n                     try {\n-                        accountId = attributable.getAttribute(\n-                                mapping.getIntAttrName()).\n-                                getValuesAsStrings().get(0);\n+                        accountId = attributable.getAttribute(mapping.getIntAttrName()).getValuesAsStrings().get(0);\n                     } catch (NullPointerException e) {\n                         // ignore exception\n                         LOG.debug(\"Invalid accountId specified\", e);\n@@ -116,13 +114,14 @@ protected <T extends AbstractAttributable> List<Object> retrieveValues(\n                 LOG.debug(\"Get object attribute for entry {}\", accountId);\n \n                 try {\n-                    ConnectorFacadeProxy connector =\n-                            connInstanceLoader.getConnector(resource);\n+\n+                    final OperationOptionsBuilder oob = new OperationOptionsBuilder();\n+                    oob.setAttributesToGet(attributeNames);\n+\n+                    final ConnectorFacadeProxy connector = connInstanceLoader.getConnector(resource);\n+\n                     Set<Attribute> attributes = connector.getObjectAttributes(\n-                            ObjectClass.ACCOUNT,\n-                            new Uid(accountId),\n-                            null,\n-                            attributeNames);\n+                            ObjectClass.ACCOUNT, new Uid(accountId), oob.build(), attributeNames);\n \n                     LOG.debug(\"Retrieved {}\", attributes);\n "},{"sha":"3cb7a3818d953777747ee71b1143e22c3e97b942","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":4,"deletions":12,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=0a5bb7c528e9a8caf6df78834d259c8c7275add2","patch":"@@ -342,26 +342,20 @@ public List<? extends AbstractDerAttr> getDerivedAttributes() {\n     }\n \n     @Override\n-    public void setDerivedAttributes(\n-            final List<? extends AbstractDerAttr> derivedAttributes) {\n-\n+    public void setDerivedAttributes(final List<? extends AbstractDerAttr> derivedAttributes) {\n         this.derivedAttributes.clear();\n         if (derivedAttributes != null && !derivedAttributes.isEmpty()) {\n             this.derivedAttributes.addAll((List<UDerAttr>) derivedAttributes);\n         }\n     }\n \n     @Override\n-    public <T extends AbstractVirAttr> boolean addVirtualAttribute(\n-            final T virtualAttribute) {\n-\n+    public <T extends AbstractVirAttr> boolean addVirtualAttribute(final T virtualAttribute) {\n         return virtualAttributes.add((UVirAttr) virtualAttribute);\n     }\n \n     @Override\n-    public <T extends AbstractVirAttr> boolean removeVirtualAttribute(\n-            final T virtualAttribute) {\n-\n+    public <T extends AbstractVirAttr> boolean removeVirtualAttribute(final T virtualAttribute) {\n         return virtualAttributes.remove((UVirAttr) virtualAttribute);\n     }\n \n@@ -371,9 +365,7 @@ public List<? extends AbstractVirAttr> getVirtualAttributes() {\n     }\n \n     @Override\n-    public void setVirtualAttributes(\n-            final List<? extends AbstractVirAttr> virtualAttributes) {\n-\n+    public void setVirtualAttributes(final List<? extends AbstractVirAttr> virtualAttributes) {\n         this.virtualAttributes.clear();\n         if (virtualAttributes != null && !virtualAttributes.isEmpty()) {\n             this.virtualAttributes.addAll((List<UVirAttr>) virtualAttributes);"},{"sha":"52b953d0f60e6897b099e755a554ddbf65b3f99f","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UVirAttr.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirAttr.java?ref=0a5bb7c528e9a8caf6df78834d259c8c7275add2","patch":"@@ -63,17 +63,14 @@ public <T extends AbstractVirSchema> void setVirtualSchema(\n \n     @Override\n     public List<String> getValues() {\n-        LOG.debug(\"{}: retrieve value for attribute {}\",\n-                new Object[]{getOwner(), getVirtualSchema().getName()});\n+        LOG.debug(\"{}: retrieve value for attribute {}\", new Object[]{getOwner(), getVirtualSchema().getName()});\n \n         if (values != null) {\n             return values;\n         }\n \n         final List<Object> retrievedValues =\n-                retrieveValues(getOwner(),\n-                getVirtualSchema().getName(),\n-                IntMappingType.UserVirtualSchema);\n+                retrieveValues(getOwner(), getVirtualSchema().getName(), IntMappingType.UserVirtualSchema);\n \n         LOG.debug(\"Retrieved external values {}\", retrievedValues);\n "},{"sha":"0ec80e2ac1f7668b6f7624409a040ab6872295ce","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserDAOImpl.java","status":"modified","additions":9,"deletions":14,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java?ref=0a5bb7c528e9a8caf6df78834d259c8c7275add2","patch":"@@ -112,18 +112,16 @@ public SyncopeUser findByWorkflowId(final String workflowId) {\n     }\n \n     /**\n-     * Find users by derived attribute value. This method could fail if one or\n-     * more string literals contained into the derived attribute value provided\n-     * derive from identifier (schema name) replacement. When you are going to\n-     * specify a derived attribute expression you must be quite sure that string\n-     * literals used to build the expression cannot be found into the attribute\n-     * values used to replace attribute schema names used as identifiers.\n+     * Find users by derived attribute value. This method could fail if one or more string literals contained into the\n+     * derived attribute value provided derive from identifier (schema name) replacement. When you are going to specify\n+     * a derived attribute expression you must be quite sure that string literals used to build the expression cannot be\n+     * found into the attribute values used to replace attribute schema names used as identifiers.\n      *\n      * @param schemaName derived schema name.\n      * @param value derived attribute value.\n      * @return list of users.\n-     * @throws InvalidSearchConditionException in case of errors retrieving\n-     * schema names used to buid the derived schema expression.\n+     * @throws InvalidSearchConditionException in case of errors retrieving schema names used to buid the derived schema\n+     * expression.\n      */\n     @Override\n     public List<SyncopeUser> findByDerAttrValue(\n@@ -356,8 +354,7 @@ public SyncopeUser save(final SyncopeUser user) {\n         SyncopeUser merged = entityManager.merge(user);\n \n         for (AbstractVirAttr virtual : merged.getVirtualAttributes()) {\n-            virtual.setValues(user.getVirtualAttribute(\n-                    virtual.getVirtualSchema().getName()).getValues());\n+            virtual.setValues(user.getVirtualAttribute(virtual.getVirtualSchema().getName()).getValues());\n         }\n \n         return merged;\n@@ -396,14 +393,12 @@ public void delete(final SyncopeUser user) {\n     }\n \n     /**\n-     * Generate one where clause for each different attribute schema into the\n-     * derived schema expression provided.\n+     * Generate one where clause for each different attribute schema into the derived schema expression provided.\n      *\n      * @param expression derived schema expression.\n      * @param value derived attribute value.\n      * @return where clauses to use to build the query.\n-     * @throws InvalidSearchConditionException in case of errors retrieving\n-     * identifiers.\n+     * @throws InvalidSearchConditionException in case of errors retrieving identifiers.\n      */\n     private Set<String> getWhereClause(\n             final String expression, final String value)"},{"sha":"c46bd5e168181bfb512eae51cf196764b177dd92","filename":"core/src/main/java/org/syncope/core/propagation/ConnectorFacadeProxy.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java?ref=0a5bb7c528e9a8caf6df78834d259c8c7275add2","patch":"@@ -571,8 +571,7 @@ public Set<Attribute> getObjectAttributes(\n         final Set<Attribute> attributes = new HashSet<Attribute>();\n \n         try {\n-            final ConnectorObject object =\n-                    connector.getObject(objectClass, uid, options);\n+            final ConnectorObject object = connector.getObject(objectClass, uid, options);\n \n             for (String attribute : attributeNames) {\n                 attributes.add(object.getAttributeByName(attribute));"},{"sha":"2697f6231c5c4cf45b549a0952eaeda31fd14c17","filename":"core/src/main/java/org/syncope/core/propagation/PropagationManager.java","status":"modified","additions":34,"deletions":60,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java?ref=0a5bb7c528e9a8caf6df78834d259c8c7275add2","patch":"@@ -163,8 +163,7 @@ private SyncopeUser getSyncopeUser(final Long userId)\n     /**\n      * Create the user on every associated resource.\n      *\n-     * @param wfResult user to be propagated (and info associated), as per\n-     * result from workflow\n+     * @param wfResult user to be propagated (and info associated), as per result from workflow\n      * @param password to be set\n      * @param vAttrs virtual attributes to be set\n      * @return list of propagation tasks\n@@ -181,12 +180,10 @@ public List<PropagationTask> getCreateTaskIds(\n     /**\n      * Create the user on every associated resource.\n      *\n-     * @param wfResult user to be propagated (and info associated), as per\n-     * result from workflow.\n+     * @param wfResult user to be propagated (and info associated), as per result from workflow.\n      * @param password to be set.\n      * @param vAttrs virtual attributes to be set.\n-     * @param syncResourceNames external resources performing sync, hence not to\n-     * be considered for propagation.\n+     * @param syncResourceNames external resources performing sync, hence not to be considered for propagation.\n      * @return list of propagation tasks.\n      * @throws NotFoundException if userId is not found.\n      */\n@@ -217,14 +214,12 @@ public List<PropagationTask> getCreateTaskIds(\n     }\n \n     /**\n-     * Performs update on each resource associated to the user excluding the\n-     * specified into 'resourceNames' parameter.\n+     * Performs update on each resource associated to the user excluding the specified into 'resourceNames' parameter.\n      *\n      * @param user to be propagated.\n      * @param enable wether user must be enabled or not.\n-     * @param syncResourceNames external resource names not to be considered for\n-     * propagation. Use this during sync and disable/enable actions limited to\n-     * the external resources only.\n+     * @param syncResourceNames external resource names not to be considered for propagation. Use this during sync and\n+     * disable/enable actions limited to the external resources only.\n      * @return list of propagation tasks\n      * @throws NotFoundException if userId is not found\n      */\n@@ -247,8 +242,7 @@ public List<PropagationTask> getUpdateTaskIds(\n     /**\n      * Performs update on each resource associated to the user.\n      *\n-     * @param wfResult user to be propagated (and info associated), as per\n-     * result from workflow.\n+     * @param wfResult user to be propagated (and info associated), as per result from workflow.\n      * @param enable wether user must be enabled or not.\n      * @return list of propagation tasks\n      * @throws NotFoundException if userId is not found\n@@ -265,8 +259,7 @@ public List<PropagationTask> getUpdateTaskIds(\n     /**\n      * Performs update on each resource associated to the user.\n      *\n-     * @param wfResult user to be propagated (and info associated), as per\n-     * result from workflow\n+     * @param wfResult user to be propagated (and info associated), as per result from workflow\n      * @param password to be updated\n      * @param vAttrsToBeRemoved virtual attributes to be removed\n      * @param vAttrsToBeUpdated virtual attributes to be added\n@@ -282,22 +275,19 @@ public List<PropagationTask> getUpdateTaskIds(\n             final Boolean enable)\n             throws NotFoundException {\n \n-        return getUpdateTaskIds(wfResult, password, vAttrsToBeRemoved,\n-                vAttrsToBeUpdated, enable, null);\n+        return getUpdateTaskIds(wfResult, password, vAttrsToBeRemoved, vAttrsToBeUpdated, enable, null);\n     }\n \n     /**\n      * Performs update on each resource associated to the user.\n      *\n-     * @param wfResult user to be propagated (and info associated), as per\n-     * result from workflow\n+     * @param wfResult user to be propagated (and info associated), as per result from workflow\n      * @param password to be updated\n      * @param vAttrsToBeRemoved virtual attributes to be removed\n      * @param vAttrsToBeUpdated virtual attributes to be added\n      * @param enable wether user must be enabled or not\n-     * @param syncResourceNames external resource names not to be considered for\n-     * propagation. Use this during sync and disable/enable actions limited to\n-     * the external resources only.\n+     * @param syncResourceNames external resource names not to be considered for propagation. Use this during sync and\n+     * disable/enable actions limited to the external resources only.\n      * @return list of propagation tasks\n      * @throws NotFoundException if userId is not found\n      */\n@@ -334,10 +324,8 @@ private List<PropagationTask> getUpdateTaskIds(\n \n         PropagationByResource localPropByRes = userDataBinder.fillVirtual(\n                 user,\n-                vAttrsToBeRemoved == null\n-                ? Collections.EMPTY_SET : vAttrsToBeRemoved,\n-                vAttrsToBeUpdated == null\n-                ? Collections.EMPTY_SET : vAttrsToBeUpdated,\n+                vAttrsToBeRemoved == null ? Collections.EMPTY_SET : vAttrsToBeRemoved,\n+                vAttrsToBeUpdated == null ? Collections.EMPTY_SET : vAttrsToBeUpdated, \n                 AttributableUtil.USER);\n \n         if (propByRes != null && !propByRes.isEmpty()) {\n@@ -360,10 +348,9 @@ private List<PropagationTask> getUpdateTaskIds(\n     }\n \n     /**\n-     * Perform delete on each resource associated to the user. It is possible to\n-     * ask for a mandatory provisioning for some resources specifying a set of\n-     * resource names. Exceptions won't be ignored and the process will be\n-     * stopped if the creation fails onto a mandatory resource.\n+     * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for\n+     * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n+     * the creation fails onto a mandatory resource.\n      *\n      * @param userId to be deleted\n      * @return list of propagation tasks\n@@ -376,14 +363,12 @@ public List<PropagationTask> getDeleteTaskIds(final Long userId)\n     }\n \n     /**\n-     * Perform delete on each resource associated to the user. It is possible to\n-     * ask for a mandatory provisioning for some resources specifying a set of\n-     * resource names. Exceptions won't be ignored and the process will be\n-     * stopped if the creation fails onto a mandatory resource.\n+     * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for\n+     * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n+     * the creation fails onto a mandatory resource.\n      *\n      * @param userId to be deleted\n-     * @param syncResourceName name of external resource performing sync, hence\n-     * not to be considered for propagation\n+     * @param syncResourceName name of external resource performing sync, hence not to be considered for propagation\n      * @return list of propagation tasks\n      * @throws NotFoundException if user is not found\n      */\n@@ -458,17 +443,15 @@ private Class getIntMappingTypeClass(\n      * @param user given user\n      * @param password clear-text password\n      * @return account link + prepare attributes\n-     * @throws ClassNotFoundException if schema type for given mapping does not\n-     * exists in current class loader\n+     * @throws ClassNotFoundException if schema type for given mapping does not exists in current class loader\n      */\n     private Map.Entry<String, Attribute> prepareAttribute(\n             final SchemaMapping mapping,\n             final SyncopeUser user,\n             final String password)\n             throws ClassNotFoundException {\n \n-        final List<AbstractAttributable> attributables =\n-                new ArrayList<AbstractAttributable>();\n+        final List<AbstractAttributable> attributables = new ArrayList<AbstractAttributable>();\n \n         switch (mapping.getIntMappingType().getEntity()) {\n             case USER:\n@@ -491,8 +474,7 @@ private Map.Entry<String, Attribute> prepareAttribute(\n \n         final List<AbstractAttrValue> values = entry.getValue();\n         final AbstractSchema schema = entry.getKey();\n-        final SchemaType schemaType =\n-                schema == null ? SchemaType.String : schema.getType();\n+        final SchemaType schemaType = schema == null ? SchemaType.String : schema.getType();\n \n         LOG.debug(\"Define mapping for: \"\n                 + \"\\n* ExtAttrName \" + mapping.getExtAttrName()\n@@ -510,8 +492,7 @@ private Map.Entry<String, Attribute> prepareAttribute(\n \n         List<Object> objValues = new ArrayList<Object>();\n         for (AbstractAttrValue value : values) {\n-            if (FrameworkUtil.isSupportedAttributeType(\n-                    Class.forName(schemaType.getClassName()))) {\n+            if (FrameworkUtil.isSupportedAttributeType(Class.forName(schemaType.getClassName()))) {\n                 objValues.add(value.getValue());\n             } else {\n                 objValues.add(value.getValueAsString());\n@@ -522,20 +503,16 @@ private Map.Entry<String, Attribute> prepareAttribute(\n \n         if (mapping.isAccountid()) {\n \n-            res = new DefaultMapEntry(\n-                    objValues.iterator().next().toString(), null);\n+            res = new DefaultMapEntry(objValues.iterator().next().toString(), null);\n \n         } else if (mapping.isPassword()) {\n \n-            res = new DefaultMapEntry(null,\n-                    AttributeBuilder.buildPassword(\n-                    objValues.iterator().next().toString().toCharArray()));\n+            res = new DefaultMapEntry(\n+                    null, AttributeBuilder.buildPassword(objValues.iterator().next().toString().toCharArray()));\n \n         } else {\n             if (schema != null && schema.isMultivalue()) {\n-                res = new DefaultMapEntry(null,\n-                        AttributeBuilder.build(mapping.getExtAttrName(),\n-                        objValues));\n+                res = new DefaultMapEntry(null, AttributeBuilder.build(mapping.getExtAttrName(), objValues));\n \n             } else {\n                 res = new DefaultMapEntry(null,\n@@ -604,8 +581,7 @@ private Entry<AbstractSchema, List<AbstractAttrValue>> getAttributeValues(\n             case MembershipVirtualSchema:\n \n                 for (AbstractAttributable attributable : attributables) {\n-                    AbstractVirAttr virAttr = attributable.getVirtualAttribute(\n-                            mapping.getIntAttrName());\n+                    AbstractVirAttr virAttr = attributable.getVirtualAttribute(mapping.getIntAttrName());\n \n                     if (virAttr != null && virAttr.getValues() != null) {\n                         for (String value : virAttr.getValues()) {\n@@ -619,8 +595,7 @@ private Entry<AbstractSchema, List<AbstractAttrValue>> getAttributeValues(\n                             + \"\\n* IntAttrName {}\"\n                             + \"\\n* IntMappingType {}\"\n                             + \"\\n* Attribute values {}\",\n-                            new Object[]{virAttr, mapping.getIntAttrName(),\n-                                mapping.getIntMappingType(), values});\n+                            new Object[]{virAttr, mapping.getIntAttrName(), mapping.getIntMappingType(), values});\n                 }\n                 break;\n \n@@ -837,9 +812,8 @@ public void execute(final List<PropagationTask> tasks)\n      * Execute a list of PropagationTask, in given order.\n      *\n      * @param tasks to be execute, in given order\n-     * @throws PropagationException if propagation goes wrong: propagation is\n-     * interrupted as soon as the result of the communication with a primary\n-     * resource is in error\n+     * @throws PropagationException if propagation goes wrong: propagation is interrupted as soon as the result of the\n+     * communication with a primary resource is in error\n      */\n     public void execute(\n             final List<PropagationTask> tasks,\n@@ -1153,7 +1127,7 @@ private ConnectorObject getRemoteObject(\n                     ? task.getAccountId()\n                     : task.getOldAccountId()),\n                     connector.getOperationOptions(task.getResource()));\n-            \n+\n         } catch (RuntimeException ignore) {\n             LOG.debug(\"Resolving username\", ignore);\n             return null;"},{"sha":"42233099ad51daf72ca2249b39596a1114cb7204","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":15,"deletions":22,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=0a5bb7c528e9a8caf6df78834d259c8c7275add2","patch":"@@ -62,8 +62,8 @@\n import org.syncope.types.PropagationTaskExecStatus;\n \n /**\n- * Note that this controller does not extend AbstractController, hence does not\n- * provide any Spring's @Transactional logic at class level.\n+ * Note that this controller does not extend AbstractController, hence does not provide any Spring's @Transactional\n+ * logic at class level.\n  *\n  * @see AbstractController\n  */\n@@ -210,8 +210,7 @@ public List<UserTO> search(@RequestBody final NodeCond searchCondition)\n         }\n \n         List<SyncopeUser> matchingUsers = searchDAO.search(\n-                EntitlementUtil.getRoleIds(EntitlementUtil.\n-                getOwnedEntitlementNames()), searchCondition);\n+                EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()), searchCondition);\n         List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {\n             result.add(userDataBinder.getUserTO(user));\n@@ -253,30 +252,26 @@ public List<UserTO> search(\n     @PreAuthorize(\"hasRole('USER_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n-    public UserTO create(final HttpServletResponse response,\n-            @RequestBody final UserTO userTO)\n-            throws PropagationException, UnauthorizedRoleException,\n-            WorkflowException, NotFoundException {\n+    public UserTO create(final HttpServletResponse response, @RequestBody final UserTO userTO)\n+            throws PropagationException, UnauthorizedRoleException, WorkflowException, NotFoundException {\n \n         LOG.debug(\"User create called with {}\", userTO);\n \n-        Set<Long> requestRoleIds =\n-                new HashSet<Long>(userTO.getMemberships().size());\n+        Set<Long> requestRoleIds = new HashSet<Long>(userTO.getMemberships().size());\n         for (MembershipTO membership : userTO.getMemberships()) {\n             requestRoleIds.add(membership.getRoleId());\n         }\n-        Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(\n-                EntitlementUtil.getOwnedEntitlementNames());\n+\n+        Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n         requestRoleIds.removeAll(adminRoleIds);\n         if (!requestRoleIds.isEmpty()) {\n             throw new UnauthorizedRoleException(requestRoleIds);\n         }\n \n-        WorkflowResult<Map.Entry<Long, Boolean>> created =\n-                wfAdapter.create(userTO);\n+        WorkflowResult<Map.Entry<Long, Boolean>> created = wfAdapter.create(userTO);\n \n-        List<PropagationTask> tasks = propagationManager.getCreateTaskIds(\n-                created, userTO.getPassword(), userTO.getVirtualAttributes());\n+        List<PropagationTask> tasks =\n+                propagationManager.getCreateTaskIds(created, userTO.getPassword(), userTO.getVirtualAttributes());\n \n         final List<PropagationTO> propagations = new ArrayList<PropagationTO>();\n \n@@ -308,12 +303,9 @@ public void handle(\n         });\n \n         notificationManager.createTasks(new WorkflowResult<Long>(\n-                created.getResult().getKey(),\n-                created.getPropByRes(),\n-                created.getPerformedTasks()));\n+                created.getResult().getKey(), created.getPropByRes(), created.getPerformedTasks()));\n \n-        final UserTO savedTO = userDataBinder.getUserTO(\n-                created.getResult().getKey());\n+        final UserTO savedTO = userDataBinder.getUserTO(created.getResult().getKey());\n \n         savedTO.setPropagationTOs(propagations);\n \n@@ -337,7 +329,8 @@ public UserTO update(@RequestBody final UserMod userMod)\n         List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(\n                 updated, userMod.getPassword(),\n                 userMod.getVirtualAttributesToBeRemoved(),\n-                userMod.getVirtualAttributesToBeUpdated(), null);\n+                userMod.getVirtualAttributesToBeUpdated(), \n+                null);\n \n         final List<PropagationTO> propagations = new ArrayList<PropagationTO>();\n "},{"sha":"80e945f4127b808f3bfb14381eb91087af37565d","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":73,"deletions":126,"changes":199,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=0a5bb7c528e9a8caf6df78834d259c8c7275add2","patch":"@@ -18,6 +18,7 @@\n  */\n package org.syncope.core.rest.data;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n@@ -310,39 +311,32 @@ public PropagationByResource fillVirtual(\n \n         // 1. virtual attributes to be removed\n         for (String vAttrToBeRemoved : vAttrsToBeRemoved) {\n-            AbstractVirSchema virtualSchema = getVirtualSchema(\n-                    vAttrToBeRemoved, attributableUtil.virtualSchemaClass());\n+            AbstractVirSchema virtualSchema = getVirtualSchema(vAttrToBeRemoved, attributableUtil.virtualSchemaClass());\n \n             if (virtualSchema != null) {\n-                AbstractVirAttr virtualAttribute =\n-                        attributable.getVirtualAttribute(\n-                        virtualSchema.getName());\n+                AbstractVirAttr virtualAttribute = attributable.getVirtualAttribute(virtualSchema.getName());\n \n                 if (virtualAttribute == null) {\n-                    LOG.debug(\"No virtual attribute found for schema {}\",\n-                            virtualSchema.getName());\n+                    LOG.debug(\"No virtual attribute found for schema {}\", virtualSchema.getName());\n                 } else {\n+                    attributable.removeVirtualAttribute(virtualAttribute);\n                     virAttrDAO.delete(virtualAttribute);\n                 }\n \n                 for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n-                    if (virtualSchema.getName().equals(\n-                            mapping.getIntAttrName())\n-                            && mapping.getIntMappingType()\n-                            == attributableUtil.virtualIntMappingType()\n+                    if (virtualSchema.getName().equals(mapping.getIntAttrName())\n+                            && mapping.getIntMappingType() == attributableUtil.virtualIntMappingType()\n                             && mapping.getResource() != null\n-                            && attributable.getResources().\n-                            contains(mapping.getResource())) {\n+                            && attributable.getResources().contains(mapping.getResource())) {\n \n-                        propByRes.add(PropagationOperation.UPDATE,\n-                                mapping.getResource().getName());\n+                        propByRes.add(PropagationOperation.UPDATE, mapping.getResource().getName());\n \n-                        if (mapping.isAccountid() && virtualAttribute != null\n-                                && !virtualAttribute.getValues().isEmpty()) {\n+                        // TODO: must be avoided to use virtual attribute as AccountId\n+                        if (mapping.isAccountid()\n+                                && virtualAttribute != null && !virtualAttribute.getValues().isEmpty()) {\n \n                             propByRes.addOldAccountId(\n-                                    mapping.getResource().getName(),\n-                                    virtualAttribute.getValues().get(0));\n+                                    mapping.getResource().getName(), virtualAttribute.getValues().get(0));\n                         }\n                     }\n                 }\n@@ -353,40 +347,36 @@ public PropagationByResource fillVirtual(\n \n         // 2. virtual attributes to be updated\n         for (AttributeMod vAttrToBeUpdated : vAttrsToBeUpdated) {\n-            AbstractVirSchema virtualSchema = getVirtualSchema(\n-                    vAttrToBeUpdated.getSchema(),\n-                    attributableUtil.virtualSchemaClass());\n+            AbstractVirSchema virtualSchema =\n+                    getVirtualSchema(vAttrToBeUpdated.getSchema(), attributableUtil.virtualSchemaClass());\n \n             if (virtualSchema != null) {\n                 for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n-                    if (virtualSchema.getName().equals(\n-                            mapping.getIntAttrName())\n-                            && mapping.getIntMappingType()\n-                            == attributableUtil.virtualIntMappingType()\n+                    if (virtualSchema.getName().equals(mapping.getIntAttrName())\n+                            && mapping.getIntMappingType() == attributableUtil.virtualIntMappingType()\n                             && mapping.getResource() != null\n-                            && attributable.getResources().\n-                            contains(mapping.getResource())) {\n+                            && attributable.getResources().contains(mapping.getResource())) {\n \n-                        propByRes.add(PropagationOperation.UPDATE,\n-                                mapping.getResource().getName());\n+                        propByRes.add(PropagationOperation.UPDATE, mapping.getResource().getName());\n                     }\n                 }\n \n-                AbstractVirAttr virtualAttribute =\n-                        attributable.getVirtualAttribute(\n-                        virtualSchema.getName());\n+                AbstractVirAttr virtualAttribute = attributable.getVirtualAttribute(virtualSchema.getName());\n+\n                 if (virtualAttribute == null) {\n-                    virtualAttribute =\n-                            attributableUtil.newVirtualAttribute();\n+                    virtualAttribute = attributableUtil.newVirtualAttribute();\n                     virtualAttribute.setVirtualSchema(virtualSchema);\n-                    virtualAttribute.setOwner(attributable);\n-\n                     attributable.addVirtualAttribute(virtualAttribute);\n                 }\n-                virtualAttribute.getValues().removeAll(\n-                        vAttrToBeUpdated.getValuesToBeRemoved());\n-                virtualAttribute.getValues().addAll(\n-                        vAttrToBeUpdated.getValuesToBeAdded());\n+\n+                final List<String> values = new ArrayList<String>(virtualAttribute.getValues());\n+                values.removeAll(vAttrToBeUpdated.getValuesToBeRemoved());\n+                values.addAll(vAttrToBeUpdated.getValuesToBeAdded());\n+\n+                virtualAttribute.setValues(values);\n+\n+                // Owner cannot be specified before otherwise a virtual attribute remove will be invalidated.\n+                virtualAttribute.setOwner(attributable);\n             }\n         }\n \n@@ -444,49 +434,40 @@ protected PropagationByResource fill(\n         AbstractDerAttr derivedAttribute;\n \n         // 3. attributes to be removed\n-        for (String attributeToBeRemoved :\n-                attributableMod.getAttributesToBeRemoved()) {\n+        for (String attributeToBeRemoved : attributableMod.getAttributesToBeRemoved()) {\n \n-            schema = getSchema(\n-                    attributeToBeRemoved, attributableUtil.schemaClass());\n+            schema = getSchema(attributeToBeRemoved, attributableUtil.schemaClass());\n \n             if (schema != null) {\n                 attribute = attributable.getAttribute(schema.getName());\n+\n                 if (attribute == null) {\n                     LOG.debug(\"No attribute found for schema {}\", schema);\n                 } else {\n                     String newValue = null;\n-                    for (AttributeMod mod : attributableMod.\n-                            getAttributesToBeUpdated()) {\n-\n+                    for (AttributeMod mod : attributableMod.getAttributesToBeUpdated()) {\n                         if (schema.getName().equals(mod.getSchema())) {\n                             newValue = mod.getValuesToBeAdded().get(0);\n                         }\n                     }\n \n                     if (!schema.isUniqueConstraint()\n-                            || (!attribute.getUniqueValue().getStringValue().\n-                            equals(newValue))) {\n+                            || (!attribute.getUniqueValue().getStringValue().equals(newValue))) {\n \n                         attributable.removeAttribute(attribute);\n-                        attributeDAO.delete(attribute.getId(),\n-                                attributableUtil.attributeClass());\n+                        attributeDAO.delete(attribute.getId(), attributableUtil.attributeClass());\n                     }\n                 }\n \n                 for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n                     if (schema.getName().equals(mapping.getIntAttrName())\n-                            && mapping.getIntMappingType()\n-                            == attributableUtil.intMappingType()\n+                            && mapping.getIntMappingType() == attributableUtil.intMappingType()\n                             && mapping.getResource() != null\n-                            && attributable.getResources().\n-                            contains(mapping.getResource())) {\n+                            && attributable.getResources().contains(mapping.getResource())) {\n \n-                        propByRes.add(PropagationOperation.UPDATE,\n-                                mapping.getResource().getName());\n+                        propByRes.add(PropagationOperation.UPDATE, mapping.getResource().getName());\n \n-                        if (mapping.isAccountid() && attribute != null\n-                                && !attribute.getValuesAsStrings().isEmpty()) {\n+                        if (mapping.isAccountid() && attribute != null && !attribute.getValuesAsStrings().isEmpty()) {\n \n                             propByRes.addOldAccountId(\n                                     mapping.getResource().getName(),\n@@ -503,23 +484,18 @@ protected PropagationByResource fill(\n         // 4. attributes to be updated\n         Set<Long> valuesToBeRemoved;\n         List<String> valuesToBeAdded;\n-        for (AttributeMod attributeMod :\n-                attributableMod.getAttributesToBeUpdated()) {\n+        for (AttributeMod attributeMod : attributableMod.getAttributesToBeUpdated()) {\n \n-            schema = getSchema(attributeMod.getSchema(),\n-                    attributableUtil.schemaClass());\n+            schema = getSchema(attributeMod.getSchema(), attributableUtil.schemaClass());\n \n             if (schema != null) {\n                 for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n                     if (schema.getName().equals(mapping.getIntAttrName())\n-                            && mapping.getIntMappingType()\n-                            == attributableUtil.intMappingType()\n+                            && mapping.getIntMappingType() == attributableUtil.intMappingType()\n                             && mapping.getResource() != null\n-                            && attributable.getResources().\n-                            contains(mapping.getResource())) {\n+                            && attributable.getResources().contains(mapping.getResource())) {\n \n-                        propByRes.add(PropagationOperation.UPDATE,\n-                                mapping.getResource().getName());\n+                        propByRes.add(PropagationOperation.UPDATE, mapping.getResource().getName());\n                     }\n                 }\n \n@@ -534,44 +510,34 @@ protected PropagationByResource fill(\n \n                 // 1.1 remove values\n                 valuesToBeRemoved = new HashSet<Long>();\n-                for (String valueToBeRemoved :\n-                        attributeMod.getValuesToBeRemoved()) {\n+                for (String valueToBeRemoved : attributeMod.getValuesToBeRemoved()) {\n \n                     if (attribute.getSchema().isUniqueConstraint()) {\n                         if (attribute.getUniqueValue() != null\n-                                && valueToBeRemoved.equals(\n-                                attribute.getUniqueValue().\n-                                getValueAsString())) {\n+                                && valueToBeRemoved.equals(attribute.getUniqueValue().getValueAsString())) {\n \n-                            valuesToBeRemoved.add(\n-                                    attribute.getUniqueValue().getId());\n+                            valuesToBeRemoved.add(attribute.getUniqueValue().getId());\n                         }\n                     } else {\n                         for (AbstractAttrValue mav : attribute.getValues()) {\n-                            if (valueToBeRemoved.equals(\n-                                    mav.getValueAsString())) {\n-\n+                            if (valueToBeRemoved.equals(mav.getValueAsString())) {\n                                 valuesToBeRemoved.add(mav.getId());\n                             }\n                         }\n                     }\n                 }\n                 for (Long attributeValueId : valuesToBeRemoved) {\n-                    attributeValueDAO.delete(attributeValueId,\n-                            attributableUtil.attributeValueClass());\n+                    attributeValueDAO.delete(attributeValueId, attributableUtil.attributeValueClass());\n                 }\n \n                 // 1.2 add values\n                 valuesToBeAdded = attributeMod.getValuesToBeAdded();\n                 if (valuesToBeAdded != null && !valuesToBeAdded.isEmpty()\n                         && (!schema.isUniqueConstraint()\n                         || attribute.getUniqueValue() == null\n-                        || !valuesToBeAdded.iterator().next().equals(\n-                        attribute.getUniqueValue().getValueAsString()))) {\n+                        || !valuesToBeAdded.iterator().next().equals(attribute.getUniqueValue().getValueAsString()))) {\n \n-                    fillAttribute(attributeMod.getValuesToBeAdded(),\n-                            attributableUtil, schema, attribute,\n-                            invalidValues);\n+                    fillAttribute(attributeMod.getValuesToBeAdded(), attributableUtil, schema, attribute, invalidValues);\n                 }\n \n                 // if no values are in, the attribute can be safely removed\n@@ -588,8 +554,7 @@ protected PropagationByResource fill(\n         LOG.debug(\"Attributes to be updated:\\n{}\", propByRes);\n \n         // 5. derived attributes to be removed\n-        for (String derivedAttributeToBeRemoved :\n-                attributableMod.getDerivedAttributesToBeRemoved()) {\n+        for (String derivedAttributeToBeRemoved : attributableMod.getDerivedAttributesToBeRemoved()) {\n \n             derivedSchema = getDerivedSchema(derivedAttributeToBeRemoved,\n                     attributableUtil.derivedSchemaClass());\n@@ -606,50 +571,40 @@ protected PropagationByResource fill(\n                 }\n \n                 for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n-                    if (derivedSchema.getName().equals(\n-                            mapping.getIntAttrName())\n-                            && mapping.getIntMappingType()\n-                            == attributableUtil.derivedIntMappingType()\n+                    if (derivedSchema.getName().equals(mapping.getIntAttrName())\n+                            && mapping.getIntMappingType() == attributableUtil.derivedIntMappingType()\n                             && mapping.getResource() != null\n                             && attributable.getResources().\n                             contains(mapping.getResource())) {\n \n-                        propByRes.add(PropagationOperation.UPDATE,\n-                                mapping.getResource().getName());\n+                        propByRes.add(PropagationOperation.UPDATE, mapping.getResource().getName());\n \n                         if (mapping.isAccountid() && derivedAttribute != null\n-                                && !derivedAttribute.getValue(\n-                                attributable.getAttributes()).isEmpty()) {\n+                                && !derivedAttribute.getValue(attributable.getAttributes()).isEmpty()) {\n \n                             propByRes.addOldAccountId(\n                                     mapping.getResource().getName(),\n-                                    derivedAttribute.getValue(\n-                                    attributable.getAttributes()));\n+                                    derivedAttribute.getValue(attributable.getAttributes()));\n                         }\n                     }\n                 }\n             }\n         }\n \n-        LOG.debug(\"Derived attributes to be removed:\\n{}\",\n-                propByRes);\n+        LOG.debug(\"Derived attributes to be removed:\\n{}\", propByRes);\n \n         // 6. derived attributes to be added\n-        for (String derivedAttributeToBeAdded :\n-                attributableMod.getDerivedAttributesToBeAdded()) {\n+        for (String derivedAttributeToBeAdded : attributableMod.getDerivedAttributesToBeAdded()) {\n \n-            derivedSchema = getDerivedSchema(derivedAttributeToBeAdded,\n-                    attributableUtil.derivedSchemaClass());\n+            derivedSchema = getDerivedSchema(derivedAttributeToBeAdded, attributableUtil.derivedSchemaClass());\n \n             if (derivedSchema != null) {\n                 for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n                     if (derivedSchema.getName().equals(\n                             mapping.getIntAttrName())\n-                            && mapping.getIntMappingType()\n-                            == attributableUtil.derivedIntMappingType()\n+                            && mapping.getIntMappingType() == attributableUtil.derivedIntMappingType()\n                             && mapping.getResource() != null\n-                            && attributable.getResources().\n-                            contains(mapping.getResource())) {\n+                            && attributable.getResources().contains(mapping.getResource())) {\n \n                         propByRes.add(PropagationOperation.UPDATE,\n                                 mapping.getResource().getName());\n@@ -663,11 +618,9 @@ protected PropagationByResource fill(\n             }\n         }\n \n-        LOG.debug(\"Derived attributes to be added:\\n{}\",\n-                propByRes);\n+        LOG.debug(\"Derived attributes to be added:\\n{}\", propByRes);\n \n-        // 7. virtual attributes: for users this is delegated to \n-        // PropagationManager\n+        // 7. virtual attributes: for users this is delegated to  PropagationManager\n         if (AttributableUtil.USER != attributableUtil) {\n             fillVirtual(attributable,\n                     attributableMod.getVirtualAttributesToBeRemoved(),\n@@ -676,8 +629,7 @@ protected PropagationByResource fill(\n         }\n \n         // Finally, check if mandatory values are missing\n-        SyncopeClientException requiredValuesMissing =\n-                checkMandatory(attributableUtil, attributable);\n+        SyncopeClientException requiredValuesMissing = checkMandatory(attributableUtil, attributable);\n         if (!requiredValuesMissing.isEmpty()) {\n             compositeErrorException.addException(requiredValuesMissing);\n         }\n@@ -697,13 +649,11 @@ public void fillVirtual(\n             final AttributableUtil attributableUtil) {\n \n         for (AttributeTO attributeTO : vAttrs) {\n-            AbstractVirSchema virtualSchema = getVirtualSchema(\n-                    attributeTO.getSchema(),\n-                    attributableUtil.virtualSchemaClass());\n+            AbstractVirSchema virtualSchema =\n+                    getVirtualSchema(attributeTO.getSchema(), attributableUtil.virtualSchemaClass());\n \n             if (virtualSchema != null) {\n-                AbstractVirAttr virtualAttribute =\n-                        attributableUtil.newVirtualAttribute();\n+                AbstractVirAttr virtualAttribute = attributableUtil.newVirtualAttribute();\n                 virtualAttribute.setVirtualSchema(virtualSchema);\n                 virtualAttribute.setOwner(attributable);\n                 virtualAttribute.setValues(attributeTO.getValues());\n@@ -720,8 +670,7 @@ protected void fill(\n             throws SyncopeClientCompositeErrorException {\n \n         // 1. attributes\n-        SyncopeClientException invalidValues = new SyncopeClientException(\n-                SyncopeClientExceptionType.InvalidValues);\n+        SyncopeClientException invalidValues = new SyncopeClientException(SyncopeClientExceptionType.InvalidValues);\n \n         AbstractSchema schema;\n         AbstractAttr attribute;\n@@ -781,11 +730,9 @@ protected void fill(\n             }\n         }\n \n-        // 3. virtual attributes: for users this is delegated to \n-        // PropagationManager\n+        // 3. virtual attributes: for users this is delegated to PropagationManager\n         if (AttributableUtil.USER != attributableUtil) {\n-            fillVirtual(attributable, attributableTO.getVirtualAttributes(),\n-                    attributableUtil);\n+            fillVirtual(attributable, attributableTO.getVirtualAttributes(), attributableUtil);\n         }\n \n         // 4. resources"},{"sha":"79cdc12f9694c51c21e1438646cec4c789496fbc","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":18,"deletions":41,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=0a5bb7c528e9a8caf6df78834d259c8c7275add2","patch":"@@ -40,9 +40,7 @@\n import org.syncope.core.persistence.beans.AbstractVirAttr;\n import org.syncope.core.persistence.beans.Policy;\n import org.syncope.core.persistence.beans.ExternalResource;\n-import org.syncope.core.persistence.beans.PropagationTask;\n import org.syncope.core.persistence.beans.SchemaMapping;\n-import org.syncope.core.persistence.beans.TaskExec;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.membership.MAttr;\n import org.syncope.core.persistence.beans.membership.MDerAttr;\n@@ -58,7 +56,6 @@\n import org.syncope.types.IntMappingType;\n import org.syncope.types.PasswordPolicySpec;\n import org.syncope.types.PropagationOperation;\n-import org.syncope.types.PropagationTaskExecStatus;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n@@ -149,9 +146,7 @@ private CipherAlgorithm getCipherAlgoritm() {\n     public void create(final SyncopeUser user, final UserTO userTO)\n             throws SyncopeClientCompositeErrorException {\n \n-        SyncopeClientCompositeErrorException scce =\n-                new SyncopeClientCompositeErrorException(\n-                HttpStatus.BAD_REQUEST);\n+        SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n         // memberships\n         SyncopeRole role;\n@@ -160,8 +155,7 @@ public void create(final SyncopeUser user, final UserTO userTO)\n \n             if (role == null) {\n                 if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Ignoring invalid role \"\n-                            + membershipTO.getRoleName());\n+                    LOG.debug(\"Ignoring invalid role \" + membershipTO.getRoleName());\n                 }\n             } else {\n                 Membership membership = null;\n@@ -226,9 +220,7 @@ public PropagationByResource update(final SyncopeUser user,\n \n         PropagationByResource propByRes = new PropagationByResource();\n \n-        SyncopeClientCompositeErrorException scce =\n-                new SyncopeClientCompositeErrorException(\n-                HttpStatus.BAD_REQUEST);\n+        SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n         // when requesting to add user to new resources, either directly or\n         // through role subscription, password is mandatory (issue 147)\n@@ -246,13 +238,11 @@ public PropagationByResource update(final SyncopeUser user,\n                 // ignore exceptions\n             }\n \n-            user.setPassword(userMod.getPassword(), getCipherAlgoritm(),\n-                    passwordHistorySize);\n+            user.setPassword(userMod.getPassword(), getCipherAlgoritm(), passwordHistorySize);\n \n             user.setChangePwdDate(new Date());\n \n-            propByRes.addAll(PropagationOperation.UPDATE,\n-                    user.getResourceNames());\n+            propByRes.addAll(PropagationOperation.UPDATE, user.getResourceNames());\n         }\n \n         // username\n@@ -293,31 +283,26 @@ public PropagationByResource update(final SyncopeUser user,\n \n             membership = membershipDAO.find(membershipId);\n             if (membership == null) {\n-                LOG.debug(\"Invalid membership id specified to be removed: {}\",\n-                        membershipId);\n+                LOG.debug(\"Invalid membership id specified to be removed: {}\", membershipId);\n             } else {\n                 for (ExternalResource resource :\n                         membership.getSyncopeRole().getResources()) {\n \n-                    if (!membershipToBeAddedRoleIds.contains(\n-                            membership.getSyncopeRole().getId())) {\n+                    if (!membershipToBeAddedRoleIds.contains(membership.getSyncopeRole().getId())) {\n \n-                        propByRes.add(PropagationOperation.DELETE,\n-                                resource.getName());\n+                        propByRes.add(PropagationOperation.DELETE, resource.getName());\n                     }\n                 }\n \n                 // In order to make the removeMembership() below to work,\n                 // we need to be sure to take exactly the same membership\n                 // of the user object currently in memory (which has potentially\n                 // some modifications compared to the one stored in the DB\n-                membership = user.getMembership(\n-                        membership.getSyncopeRole().getId());\n+                membership = user.getMembership(membership.getSyncopeRole().getId());\n                 if (membershipToBeAddedRoleIds.contains(\n                         membership.getSyncopeRole().getId())) {\n \n-                    Set<Long> attributeIds = new HashSet<Long>(\n-                            membership.getAttributes().size());\n+                    Set<Long> attributeIds = new HashSet<Long>(membership.getAttributes().size());\n                     for (AbstractAttr attribute : membership.getAttributes()) {\n                         attributeIds.add(attribute.getId());\n                     }\n@@ -327,8 +312,7 @@ public PropagationByResource update(final SyncopeUser user,\n                     attributeIds.clear();\n \n                     // remove derived attributes\n-                    for (AbstractDerAttr derAttr :\n-                            membership.getDerivedAttributes()) {\n+                    for (AbstractDerAttr derAttr : membership.getDerivedAttributes()) {\n \n                         attributeIds.add(derAttr.getId());\n                     }\n@@ -338,8 +322,7 @@ public PropagationByResource update(final SyncopeUser user,\n                     attributeIds.clear();\n \n                     // remove virtual attributes\n-                    for (AbstractVirAttr virAttr :\n-                            membership.getVirtualAttributes()) {\n+                    for (AbstractVirAttr virAttr : membership.getVirtualAttributes()) {\n \n                         attributeIds.add(virAttr.getId());\n                     }\n@@ -357,8 +340,7 @@ public PropagationByResource update(final SyncopeUser user,\n \n         // memberships to be added\n         for (MembershipMod membershipMod : userMod.getMembershipsToBeAdded()) {\n-            LOG.debug(\"Membership to be added: role({})\",\n-                    membershipMod.getRole());\n+            LOG.debug(\"Membership to be added: role({})\", membershipMod.getRole());\n \n             SyncopeRole role = roleDAO.find(membershipMod.getRole());\n             if (role == null) {\n@@ -372,26 +354,21 @@ public PropagationByResource update(final SyncopeUser user,\n \n                     user.addMembership(membership);\n \n-                    propByRes.addAll(PropagationOperation.UPDATE,\n-                            role.getResourceNames());\n+                    propByRes.addAll(PropagationOperation.UPDATE, role.getResourceNames());\n                 }\n \n-                propByRes.merge(fill(membership, membershipMod,\n-                        AttributableUtil.MEMBERSHIP, scce));\n+                propByRes.merge(fill(membership, membershipMod, AttributableUtil.MEMBERSHIP, scce));\n             }\n         }\n \n         // now, let's see if there are new resource subscriptions without\n         // providing password\n         Set<String> updatedResources = user.getResourceNames();\n         updatedResources.removeAll(currentResources);\n-        if (!updatedResources.isEmpty()\n-                && StringUtils.isBlank(userMod.getPassword())) {\n+        if (!updatedResources.isEmpty() && StringUtils.isBlank(userMod.getPassword())) {\n \n-            SyncopeClientException sce = new SyncopeClientException(\n-                    SyncopeClientExceptionType.RequiredValuesMissing);\n-            sce.addElement(\"password cannot be empty \"\n-                    + \"when subscribing to new resources\");\n+            SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);\n+            sce.addElement(\"password cannot be empty \" + \"when subscribing to new resources\");\n             scce.addException(sce);\n \n             throw scce;"},{"sha":"dede8611f8f16e116fc8bdf2cc22687732038812","filename":"core/src/main/java/org/syncope/core/workflow/activiti/Create.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FCreate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FCreate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FCreate.java?ref=0a5bb7c528e9a8caf6df78834d259c8c7275add2","patch":"@@ -29,16 +29,14 @@ public class Create extends AbstractActivitiDelegate {\n     protected void doExecute(final DelegateExecution execution)\n             throws Exception {\n \n-        UserTO userTO = (UserTO) execution.getVariable(\n-                ActivitiUserWorkflowAdapter.USER_TO);\n+        UserTO userTO = (UserTO) execution.getVariable(ActivitiUserWorkflowAdapter.USER_TO);\n \n         // create and set workflow id\n         SyncopeUser user = new SyncopeUser();\n         dataBinder.create(user, userTO);\n         user.setWorkflowId(execution.getProcessInstanceId());\n \n         // report SyncopeUser as result\n-        execution.setVariable(\n-                ActivitiUserWorkflowAdapter.SYNCOPE_USER, user);\n+        execution.setVariable(ActivitiUserWorkflowAdapter.SYNCOPE_USER, user);\n     }\n }"},{"sha":"b0884ce76e410253fc5315332db8d351082c44a7","filename":"core/src/main/java/org/syncope/core/workflow/activiti/Update.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FUpdate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FUpdate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FUpdate.java?ref=0a5bb7c528e9a8caf6df78834d259c8c7275add2","patch":"@@ -30,18 +30,14 @@ public class Update extends AbstractActivitiDelegate {\n     protected void doExecute(final DelegateExecution execution)\n             throws Exception {\n \n-        SyncopeUser user = (SyncopeUser) execution.getVariable(\n-                ActivitiUserWorkflowAdapter.SYNCOPE_USER);\n-        UserMod userMod = (UserMod) execution.getVariable(\n-                ActivitiUserWorkflowAdapter.USER_MOD);\n+        SyncopeUser user = (SyncopeUser) execution.getVariable(ActivitiUserWorkflowAdapter.SYNCOPE_USER);\n+        UserMod userMod = (UserMod) execution.getVariable(ActivitiUserWorkflowAdapter.USER_MOD);\n \n         // update SyncopeUser\n         PropagationByResource propByRes = dataBinder.update(user, userMod);\n \n         // report updated user and propagation by resource as result\n-        execution.setVariable(ActivitiUserWorkflowAdapter.SYNCOPE_USER,\n-                user);\n-        execution.setVariable(ActivitiUserWorkflowAdapter.PROP_BY_RESOURCE,\n-                propByRes);\n+        execution.setVariable(ActivitiUserWorkflowAdapter.SYNCOPE_USER, user);\n+        execution.setVariable(ActivitiUserWorkflowAdapter.PROP_BY_RESOURCE, propByRes);\n     }\n }"},{"sha":"ec2c52a3bd3e8d901f0fc56c19e1ee7f0edf9b55","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":208,"deletions":332,"changes":540,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0a5bb7c528e9a8caf6df78834d259c8c7275add2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=0a5bb7c528e9a8caf6df78834d259c8c7275add2","patch":"@@ -199,10 +199,9 @@ public void createUserWithNoPropagation() {\n     @Test\n     /*\n      * This test has been introduced to verify and solve the following issue:\n-     * http://code.google.com/p/syncope/issues/detail?id=172. Creations of a new\n-     * user without having a global password policy stored into the local\n-     * repository used to fail with a null pointer exception. This bug has been\n-     * fixed introducing a simple control.\n+     * http://code.google.com/p/syncope/issues/detail?id=172. Creations of a new user without having a global password\n+     * policy stored into the local repository used to fail with a null pointer exception. This bug has been fixed\n+     * introducing a simple control.\n      */\n     public void issue172() {\n         PolicyTO policyTO = restTemplate.getForObject(\n@@ -268,8 +267,7 @@ public void issue186() {\n         attributeTO.addValue(\"issue186\");\n         userTO.addAttribute(attributeTO);\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n-                userTO, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n         assertTrue(userTO.getResources().isEmpty());\n \n@@ -315,8 +313,7 @@ public void issue186() {\n \n         sce = null;\n         try {\n-            userTO = restTemplate.postForObject(\n-                    BASE_URL + \"user/update\", userMod, UserTO.class);\n+            userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n         } catch (SyncopeClientCompositeErrorException scce) {\n             sce = scce.getException(SyncopeClientExceptionType.Propagation);\n         }\n@@ -328,8 +325,7 @@ public void issue147() {\n         // 1. create an user wihtout role nor resources\n         UserTO userTO = getSampleTO(\"issue147@syncope-idm.org\");\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n-                userTO, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n         assertTrue(userTO.getResources().isEmpty());\n \n@@ -340,8 +336,7 @@ public void issue147() {\n \n         SyncopeClientException sce = null;\n         try {\n-            userTO = restTemplate.postForObject(\n-                    BASE_URL + \"user/update\", userMod, UserTO.class);\n+            userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n         } catch (SyncopeClientCompositeErrorException scce) {\n             sce = scce.getException(\n                     SyncopeClientExceptionType.RequiredValuesMissing);\n@@ -350,8 +345,7 @@ public void issue147() {\n \n         // 3. provide password: now update must work\n         userMod.setPassword(\"newPassword\");\n-        userTO = restTemplate.postForObject(\n-                BASE_URL + \"user/update\", userMod, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(1, userTO.getResources().size());\n     }\n@@ -384,21 +378,18 @@ public void createUserWithDbPropagation() {\n \n         userTO.addResource(\"resource-testdb\");\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n-                userTO, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(1, userTO.getPropagationTOs().size());\n-        assertTrue(\n-                userTO.getPropagationTOs().get(0).getStatus().isSuccessful());\n+        assertTrue(userTO.getPropagationTOs().get(0).getStatus().isSuccessful());\n     }\n \n     @Test(expected = SyncopeClientCompositeErrorException.class)\n     public void createWithInvalidPassword() {\n         UserTO userTO = getSampleTO(\"invalidpasswd@syncope-idm.org\");\n         userTO.setPassword(\"pass\");\n \n-        restTemplate.postForObject(\n-                BASE_URL + \"user/create\", userTO, UserTO.class);\n+        restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n     }\n \n     @Test(expected = SyncopeClientCompositeErrorException.class)\n@@ -411,8 +402,7 @@ public void createWithInvalidUsername() {\n \n         userTO.addMembership(membershipTO);\n \n-        restTemplate.postForObject(\n-                BASE_URL + \"user/create\", userTO, UserTO.class);\n+        restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n     }\n \n     @Test(expected = SyncopeClientCompositeErrorException.class)\n@@ -422,11 +412,9 @@ public void createWithInvalidPasswordByRes() {\n         // configured to be minLength=16\n         userTO.setPassword(\"password1\");\n \n-        userTO.setResources(\n-                Collections.singleton(\"ws-target-resource-nopropagation\"));\n+        userTO.setResources(Collections.singleton(\"ws-target-resource-nopropagation\"));\n \n-        restTemplate.postForObject(\n-                BASE_URL + \"user/create\", userTO, UserTO.class);\n+        restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n     }\n \n     @Test(expected = SyncopeClientCompositeErrorException.class)\n@@ -441,8 +429,7 @@ public void createWithInvalidPasswordByRole() {\n \n         userTO.addMembership(membership);\n \n-        restTemplate.postForObject(\n-                BASE_URL + \"user/create\", userTO, UserTO.class);\n+        restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n     }\n \n     @Test(expected = SyncopeClientCompositeErrorException.class)\n@@ -454,16 +441,14 @@ public void createWithException() {\n         UserTO newUserTO = new UserTO();\n         newUserTO.addAttribute(attributeTO);\n \n-        restTemplate.postForObject(BASE_URL + \"user/create\",\n-                newUserTO, UserTO.class);\n+        restTemplate.postForObject(BASE_URL + \"user/create\", newUserTO, UserTO.class);\n     }\n \n     @Test\n     public void create() {\n         // get task list\n         List<PropagationTaskTO> tasks = Arrays.asList(\n-                restTemplate.getForObject(\n-                BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n+                restTemplate.getForObject(BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n@@ -475,9 +460,9 @@ public void create() {\n                 maxId = task.getId();\n             }\n         }\n-        PropagationTaskTO taskTO = restTemplate.getForObject(\n-                BASE_URL + \"task/read/{taskId}\", PropagationTaskTO.class,\n-                maxId);\n+        PropagationTaskTO taskTO =\n+                restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", PropagationTaskTO.class, maxId);\n+\n         assertNotNull(taskTO);\n         int maxTaskExecutions = taskTO.getExecutions().size();\n \n@@ -507,35 +492,25 @@ public void create() {\n         userTO.addAttribute(nullValueAttrTO);\n \n         // 1. create user\n-        UserTO newUserTO = restTemplate.postForObject(\n-                BASE_URL + \"user/create\", userTO, UserTO.class);\n+        UserTO newUserTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n \n         assertNotNull(newUserTO);\n-        assertFalse(newUserTO.getAttributes().contains(\n-                attrWithInvalidSchemaTO));\n+        assertFalse(newUserTO.getAttributes().contains(attrWithInvalidSchemaTO));\n \n         // check for changePwdDate\n         assertNotNull(newUserTO.getCreationDate());\n \n         // 2. check for virtual attribute value\n-        newUserTO = restTemplate.getForObject(\n-                BASE_URL + \"user/read/{userId}.json\",\n-                UserTO.class, newUserTO.getId());\n+        newUserTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, newUserTO.getId());\n         assertNotNull(newUserTO);\n \n         assertNotNull(newUserTO.getVirtualAttributeMap());\n-        assertNotNull(newUserTO.getVirtualAttributeMap().get(\"virtualdata\").\n-                getValues());\n-        assertFalse(newUserTO.getVirtualAttributeMap().get(\"virtualdata\").\n-                getValues().isEmpty());\n-        assertEquals(\"virtualvalue\",\n-                newUserTO.getVirtualAttributeMap().get(\"virtualdata\").\n-                getValues().get(0));\n+        assertNotNull(newUserTO.getVirtualAttributeMap().get(\"virtualdata\").getValues());\n+        assertFalse(newUserTO.getVirtualAttributeMap().get(\"virtualdata\").getValues().isEmpty());\n+        assertEquals(\"virtualvalue\", newUserTO.getVirtualAttributeMap().get(\"virtualdata\").getValues().get(0));\n \n         // get the new task list\n-        tasks = Arrays.asList(\n-                restTemplate.getForObject(\n-                BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n+        tasks = Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n@@ -554,21 +529,18 @@ public void create() {\n         assertEquals(newMaxId, maxId);\n \n         // get last task\n-        taskTO = restTemplate.getForObject(\n-                BASE_URL + \"task/read/{taskId}\", PropagationTaskTO.class,\n-                newMaxId);\n+        taskTO = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", PropagationTaskTO.class, newMaxId);\n \n         assertNotNull(taskTO);\n         assertEquals(maxTaskExecutions, taskTO.getExecutions().size());\n \n         // 3. verify password\n         Boolean verify = restTemplate.getForObject(\n-                BASE_URL + \"user/verifyPassword/{userId}?password=password123\",\n-                Boolean.class, newUserTO.getId());\n+                BASE_URL + \"user/verifyPassword/{userId}?password=password123\", Boolean.class, newUserTO.getId());\n         assertTrue(verify);\n+\n         verify = restTemplate.getForObject(\n-                BASE_URL + \"user/verifyPassword/{userId}?password=passwordXX\",\n-                Boolean.class, newUserTO.getId());\n+                BASE_URL + \"user/verifyPassword/{userId}?password=passwordXX\", Boolean.class, newUserTO.getId());\n         assertFalse(verify);\n \n         // 4. try (and fail) to create another user with same (unique) values\n@@ -582,11 +554,9 @@ public void create() {\n \n         SyncopeClientException sce = null;\n         try {\n-            restTemplate.postForObject(BASE_URL + \"user/create\",\n-                    userTO, UserTO.class);\n+            restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n         } catch (SyncopeClientCompositeErrorException e) {\n-            sce = e.getException(\n-                    SyncopeClientExceptionType.DataIntegrityViolation);\n+            sce = e.getException(SyncopeClientExceptionType.DataIntegrityViolation);\n         }\n         assertNotNull(sce);\n     }\n@@ -612,14 +582,12 @@ public void createWithRequiredValueMissing() {\n         SyncopeClientCompositeErrorException ex = null;\n         try {\n             // 1. create user without type (mandatory by UserSchema)\n-            restTemplate.postForObject(BASE_URL + \"user/create\",\n-                    userTO, UserTO.class);\n+            restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n         } catch (SyncopeClientCompositeErrorException e) {\n             ex = e;\n         }\n         assertNotNull(ex);\n-        assertNotNull(ex.getException(\n-                SyncopeClientExceptionType.RequiredValuesMissing));\n+        assertNotNull(ex.getException(SyncopeClientExceptionType.RequiredValuesMissing));\n \n         AttributeTO fType = new AttributeTO();\n         fType.setSchema(\"type\");\n@@ -637,14 +605,12 @@ public void createWithRequiredValueMissing() {\n         // 2. create user without surname (mandatory when type == 'F')\n         ex = null;\n         try {\n-            restTemplate.postForObject(BASE_URL + \"user/create\",\n-                    userTO, UserTO.class);\n+            restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n         } catch (SyncopeClientCompositeErrorException e) {\n             ex = e;\n         }\n         assertNotNull(ex);\n-        assertNotNull(ex.getException(\n-                SyncopeClientExceptionType.RequiredValuesMissing));\n+        assertNotNull(ex.getException(SyncopeClientExceptionType.RequiredValuesMissing));\n     }\n \n     @Test\n@@ -657,50 +623,41 @@ public void createWithReject() {\n         userTO.addMembership(membershipTO);\n \n         // 1. create user with role 9\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n-                userTO, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(1, userTO.getMemberships().size());\n         assertEquals(9, userTO.getMemberships().get(0).getRoleId());\n         assertEquals(\"createApproval\", userTO.getStatus());\n \n         // 2. request if there is any pending task for user just created\n         WorkflowFormTO form = restTemplate.getForObject(\n-                BASE_URL + \"user/workflow/form/{userId}\",\n-                WorkflowFormTO.class, userTO.getId());\n+                BASE_URL + \"user/workflow/form/{userId}\", WorkflowFormTO.class, userTO.getId());\n         assertNotNull(form);\n         assertNotNull(form.getTaskId());\n         assertNull(form.getOwner());\n \n         // 3. claim task from user1, not in role 7 (designated for \n         // approval in workflow definition): fail\n         PreemptiveAuthHttpRequestFactory requestFactory =\n-                ((PreemptiveAuthHttpRequestFactory) restTemplate.\n-                getRequestFactory());\n-        ((DefaultHttpClient) requestFactory.getHttpClient()).\n-                getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(),\n-                new UsernamePasswordCredentials(\"user1\", \"password\"));\n+                ((PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory());\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n+                requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user1\", \"password\"));\n \n         SyncopeClientException sce = null;\n         try {\n             restTemplate.getForObject(\n-                    BASE_URL + \"user/workflow/form/claim/{taskId}\",\n-                    WorkflowFormTO.class, form.getTaskId());\n+                    BASE_URL + \"user/workflow/form/claim/{taskId}\", WorkflowFormTO.class, form.getTaskId());\n         } catch (SyncopeClientCompositeErrorException scce) {\n             sce = scce.getException(SyncopeClientExceptionType.Workflow);\n         }\n         assertNotNull(sce);\n \n         // 4. claim task from user4, in to role 7\n-        ((DefaultHttpClient) requestFactory.getHttpClient()).\n-                getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(),\n-                new UsernamePasswordCredentials(\"user4\", \"password\"));\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n+                requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user4\", \"password\"));\n \n         form = restTemplate.getForObject(\n-                BASE_URL + \"user/workflow/form/claim/{taskId}\",\n-                WorkflowFormTO.class, form.getTaskId());\n+                BASE_URL + \"user/workflow/form/claim/{taskId}\", WorkflowFormTO.class, form.getTaskId());\n         assertNotNull(form);\n         assertNotNull(form.getTaskId());\n         assertNotNull(form.getOwner());\n@@ -710,9 +667,7 @@ public void createWithReject() {\n         props.get(\"approve\").setValue(Boolean.FALSE.toString());\n         props.get(\"rejectReason\").setValue(\"I don't like him.\");\n         form.setProperties(props.values());\n-        userTO = restTemplate.postForObject(\n-                BASE_URL + \"user/workflow/form/submit\",\n-                form, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/workflow/form/submit\", form, UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(\"rejected\", userTO.getStatus());\n \n@@ -733,38 +688,33 @@ public void createWithApproval() {\n         userTO.addMembership(membershipTO);\n \n         // 1. create user with role 9 (and verify that no propagation occurred)\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n-                userTO, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(1, userTO.getMemberships().size());\n         assertEquals(9, userTO.getMemberships().get(0).getRoleId());\n         assertEquals(\"createApproval\", userTO.getStatus());\n-        assertEquals(Collections.singleton(\"resource-testdb\"),\n-                userTO.getResources());\n+        assertEquals(Collections.singleton(\"resource-testdb\"), userTO.getResources());\n \n         assertTrue(userTO.getPropagationTOs().isEmpty());\n \n         Exception exception = null;\n         try {\n-            jdbcTemplate.queryForInt(\n-                    \"SELECT id FROM test WHERE id=?\", userTO.getUsername());\n+            jdbcTemplate.queryForInt(\"SELECT id FROM test WHERE id=?\", userTO.getUsername());\n         } catch (EmptyResultDataAccessException e) {\n             exception = e;\n         }\n         assertNotNull(exception);\n \n         // 2. request if there is any pending task for user just created\n         WorkflowFormTO form = restTemplate.getForObject(\n-                BASE_URL + \"user/workflow/form/{userId}\",\n-                WorkflowFormTO.class, userTO.getId());\n+                BASE_URL + \"user/workflow/form/{userId}\", WorkflowFormTO.class, userTO.getId());\n         assertNotNull(form);\n         assertNotNull(form.getTaskId());\n         assertNull(form.getOwner());\n \n         // 4. claim task (from admin)\n         form = restTemplate.getForObject(\n-                BASE_URL + \"user/workflow/form/claim/{taskId}\",\n-                WorkflowFormTO.class, form.getTaskId());\n+                BASE_URL + \"user/workflow/form/claim/{taskId}\", WorkflowFormTO.class, form.getTaskId());\n         assertNotNull(form);\n         assertNotNull(form.getTaskId());\n         assertNotNull(form.getOwner());\n@@ -773,19 +723,15 @@ public void createWithApproval() {\n         Map<String, WorkflowFormPropertyTO> props = form.getPropertiesAsMap();\n         props.get(\"approve\").setValue(Boolean.TRUE.toString());\n         form.setProperties(props.values());\n-        userTO = restTemplate.postForObject(\n-                BASE_URL + \"user/workflow/form/submit\", form, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/workflow/form/submit\", form, UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n-        assertEquals(Collections.singleton(\"resource-testdb\"),\n-                userTO.getResources());\n+        assertEquals(Collections.singleton(\"resource-testdb\"), userTO.getResources());\n \n         exception = null;\n         try {\n-            String username = jdbcTemplate.queryForObject(\n-                    \"SELECT id FROM test WHERE id=?\",\n-                    String.class,\n-                    userTO.getUsername());\n+            final String username =\n+                    jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\", String.class, userTO.getUsername());\n             assertEquals(userTO.getUsername(), username);\n         } catch (EmptyResultDataAccessException e) {\n             exception = e;\n@@ -797,16 +743,14 @@ public void createWithApproval() {\n         userMod.setId(userTO.getId());\n         userMod.setPassword(\"anotherPassword123\");\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/update\",\n-                userMod, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n         assertNotNull(userTO);\n     }\n \n     @Test\n     public void delete() {\n         try {\n-            restTemplate.getForObject(\n-                    BASE_URL + \"user/delete/{userId}\", UserTO.class, 0);\n+            restTemplate.getForObject(BASE_URL + \"user/delete/{userId}\", UserTO.class, 0);\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n@@ -816,35 +760,30 @@ public void delete() {\n         // specify a propagation\n         userTO.addResource(\"resource-testdb\");\n \n-        userTO = restTemplate.postForObject(\n-                BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n \n         long id = userTO.getId();\n \n-        userTO = restTemplate.getForObject(\n-                BASE_URL + \"user/delete/{userId}\", UserTO.class, id);\n+        userTO = restTemplate.getForObject(BASE_URL + \"user/delete/{userId}\", UserTO.class, id);\n \n         assertNotNull(userTO);\n         assertEquals(id, userTO.getId());\n         assertTrue(userTO.getAttributes().isEmpty());\n \n         // check for propagation result\n         assertFalse(userTO.getPropagationTOs().isEmpty());\n-        assertTrue(\n-                userTO.getPropagationTOs().get(0).getStatus().isSuccessful());\n+        assertTrue(userTO.getPropagationTOs().get(0).getStatus().isSuccessful());\n \n         try {\n-            restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\",\n-                    UserTO.class, userTO.getId());\n+            restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n     }\n \n     @Test\n     public void count() {\n-        Integer count = restTemplate.getForObject(\n-                BASE_URL + \"user/count.json\", Integer.class);\n+        Integer count = restTemplate.getForObject(BASE_URL + \"user/count.json\", Integer.class);\n         assertNotNull(count);\n         assertTrue(count > 0);\n     }\n@@ -855,17 +794,14 @@ public void searchCount() {\n         isNullCond.setSchema(\"loginDate\");\n         NodeCond searchCond = NodeCond.getLeafCond(isNullCond);\n \n-        Integer count = restTemplate.postForObject(\n-                BASE_URL + \"user/search/count.json\", searchCond, Integer.class);\n+        Integer count = restTemplate.postForObject(BASE_URL + \"user/search/count.json\", searchCond, Integer.class);\n         assertNotNull(count);\n         assertTrue(count > 0);\n     }\n \n     @Test\n     public void list() {\n-        List<UserTO> users = Arrays.asList(\n-                restTemplate.getForObject(\n-                BASE_URL + \"user/list.json\", UserTO[].class));\n+        List<UserTO> users = Arrays.asList(restTemplate.getForObject(BASE_URL + \"user/list.json\", UserTO[].class));\n         assertNotNull(users);\n         assertFalse(users.isEmpty());\n         for (UserTO user : users) {\n@@ -875,9 +811,8 @@ public void list() {\n \n     @Test\n     public void paginatedList() {\n-        List<UserTO> users = Arrays.asList(restTemplate.getForObject(\n-                BASE_URL + \"user/list/{page}/{size}.json\",\n-                UserTO[].class, 1, 2));\n+        List<UserTO> users = Arrays.asList(\n+                restTemplate.getForObject(BASE_URL + \"user/list/{page}/{size}.json\", UserTO[].class, 1, 2));\n \n         assertNotNull(users);\n         assertFalse(users.isEmpty());\n@@ -887,26 +822,23 @@ public void paginatedList() {\n             assertNotNull(user);\n         }\n \n-        users = Arrays.asList(restTemplate.getForObject(\n-                BASE_URL + \"user/list/{page}/{size}.json\",\n-                UserTO[].class, 2, 2));\n+        users = Arrays.asList(\n+                restTemplate.getForObject(BASE_URL + \"user/list/{page}/{size}.json\", UserTO[].class, 2, 2));\n \n         assertNotNull(users);\n         assertFalse(users.isEmpty());\n         assertEquals(2, users.size());\n \n-        users = Arrays.asList(restTemplate.getForObject(\n-                BASE_URL + \"user/list/{page}/{size}.json\",\n-                UserTO[].class, 100, 2));\n+        users = Arrays.asList(\n+                restTemplate.getForObject(BASE_URL + \"user/list/{page}/{size}.json\", UserTO[].class, 100, 2));\n \n         assertNotNull(users);\n         assertTrue(users.isEmpty());\n     }\n \n     @Test\n     public void read() {\n-        UserTO userTO = restTemplate.getForObject(\n-                BASE_URL + \"user/read/{userId}.json\", UserTO.class, 1);\n+        UserTO userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, 1);\n \n         assertNotNull(userTO);\n         assertNotNull(userTO.getAttributes());\n@@ -916,26 +848,21 @@ public void read() {\n     @Test\n     public void search() {\n         // LIKE\n-        AttributeCond fullnameLeafCond1 =\n-                new AttributeCond(AttributeCond.Type.LIKE);\n+        AttributeCond fullnameLeafCond1 = new AttributeCond(AttributeCond.Type.LIKE);\n         fullnameLeafCond1.setSchema(\"fullname\");\n         fullnameLeafCond1.setExpression(\"%o%\");\n \n-        AttributeCond fullnameLeafCond2 =\n-                new AttributeCond(AttributeCond.Type.LIKE);\n+        AttributeCond fullnameLeafCond2 = new AttributeCond(AttributeCond.Type.LIKE);\n         fullnameLeafCond2.setSchema(\"fullname\");\n         fullnameLeafCond2.setExpression(\"%i%\");\n \n-        NodeCond searchCondition = NodeCond.getAndCond(\n-                NodeCond.getLeafCond(fullnameLeafCond1),\n-                NodeCond.getLeafCond(fullnameLeafCond2));\n+        NodeCond searchCondition =\n+                NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond1), NodeCond.getLeafCond(fullnameLeafCond2));\n \n         assertTrue(searchCondition.checkValidity());\n \n         List<UserTO> matchedUsers = Arrays.asList(\n-                restTemplate.postForObject(\n-                BASE_URL + \"user/search\",\n-                searchCondition, UserTO[].class));\n+                restTemplate.postForObject(BASE_URL + \"user/search\", searchCondition, UserTO[].class));\n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.isEmpty());\n         for (UserTO user : matchedUsers) {\n@@ -948,10 +875,10 @@ public void search() {\n         searchCondition = NodeCond.getLeafCond(isNullCond);\n \n         matchedUsers = Arrays.asList(\n-                restTemplate.postForObject(BASE_URL + \"user/search\",\n-                searchCondition, UserTO[].class));\n+                restTemplate.postForObject(BASE_URL + \"user/search\", searchCondition, UserTO[].class));\n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.isEmpty());\n+\n         Set<Long> userIds = new HashSet<Long>(matchedUsers.size());\n         for (UserTO user : matchedUsers) {\n             userIds.add(user.getId());\n@@ -962,26 +889,21 @@ public void search() {\n \n     @Test\n     public void searchByUsernameAndId() {\n-        final SyncopeUserCond usernameLeafCond =\n-                new SyncopeUserCond(SyncopeUserCond.Type.EQ);\n+        final SyncopeUserCond usernameLeafCond = new SyncopeUserCond(SyncopeUserCond.Type.EQ);\n         usernameLeafCond.setSchema(\"username\");\n         usernameLeafCond.setExpression(\"user1\");\n \n-        final SyncopeUserCond idRightCond =\n-                new SyncopeUserCond(SyncopeUserCond.Type.LT);\n+        final SyncopeUserCond idRightCond = new SyncopeUserCond(SyncopeUserCond.Type.LT);\n         idRightCond.setSchema(\"id\");\n         idRightCond.setExpression(\"2\");\n \n         final NodeCond searchCondition = NodeCond.getAndCond(\n-                NodeCond.getLeafCond(usernameLeafCond),\n-                NodeCond.getLeafCond(idRightCond));\n+                NodeCond.getLeafCond(usernameLeafCond), NodeCond.getLeafCond(idRightCond));\n \n         assertTrue(searchCondition.checkValidity());\n \n         final List<UserTO> matchingUsers = Arrays.asList(\n-                restTemplate.postForObject(\n-                BASE_URL + \"user/search\",\n-                searchCondition, UserTO[].class));\n+                restTemplate.postForObject(BASE_URL + \"user/search\", searchCondition, UserTO[].class));\n \n         assertNotNull(matchingUsers);\n         assertEquals(1, matchingUsers.size());\n@@ -997,16 +919,12 @@ public void searchUserByResourceName() {\n         ResourceCond ws1 = new ResourceCond();\n         ws1.setResourceName(\"ws-target-resource-list-mappings-2\");\n \n-        NodeCond searchCondition = NodeCond.getAndCond(\n-                NodeCond.getNotLeafCond(ws2),\n-                NodeCond.getLeafCond(ws1));\n+        NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getNotLeafCond(ws2), NodeCond.getLeafCond(ws1));\n \n         assertTrue(searchCondition.checkValidity());\n \n         List<UserTO> matchedUsers = Arrays.asList(\n-                restTemplate.postForObject(\n-                BASE_URL + \"user/search\",\n-                searchCondition, UserTO[].class));\n+                restTemplate.postForObject(BASE_URL + \"user/search\", searchCondition, UserTO[].class));\n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.isEmpty());\n \n@@ -1022,25 +940,21 @@ public void searchUserByResourceName() {\n     @Test\n     public void paginatedSearch() {\n         // LIKE\n-        AttributeCond fullnameLeafCond1 =\n-                new AttributeCond(AttributeCond.Type.LIKE);\n+        AttributeCond fullnameLeafCond1 = new AttributeCond(AttributeCond.Type.LIKE);\n         fullnameLeafCond1.setSchema(\"fullname\");\n         fullnameLeafCond1.setExpression(\"%o%\");\n \n-        AttributeCond fullnameLeafCond2 =\n-                new AttributeCond(AttributeCond.Type.LIKE);\n+        AttributeCond fullnameLeafCond2 = new AttributeCond(AttributeCond.Type.LIKE);\n         fullnameLeafCond2.setSchema(\"fullname\");\n         fullnameLeafCond2.setExpression(\"%i%\");\n \n-        NodeCond searchCondition = NodeCond.getAndCond(\n-                NodeCond.getLeafCond(fullnameLeafCond1),\n-                NodeCond.getLeafCond(fullnameLeafCond2));\n+        NodeCond searchCondition =\n+                NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond1), NodeCond.getLeafCond(fullnameLeafCond2));\n \n         assertTrue(searchCondition.checkValidity());\n \n         List<UserTO> matchedUsers = Arrays.asList(restTemplate.postForObject(\n-                BASE_URL + \"user/search/{page}/{size}\",\n-                searchCondition, UserTO[].class, 1, 2));\n+                BASE_URL + \"user/search/{page}/{size}\", searchCondition, UserTO[].class, 1, 2));\n         assertNotNull(matchedUsers);\n \n         assertFalse(matchedUsers.isEmpty());\n@@ -1054,8 +968,7 @@ public void paginatedSearch() {\n         searchCondition = NodeCond.getLeafCond(isNullCond);\n \n         matchedUsers = Arrays.asList(restTemplate.postForObject(\n-                BASE_URL + \"user/search/{page}/{size}\",\n-                searchCondition, UserTO[].class, 1, 2));\n+                BASE_URL + \"user/search/{page}/{size}\", searchCondition, UserTO[].class, 1, 2));\n \n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.isEmpty());\n@@ -1070,17 +983,15 @@ public void paginatedSearch() {\n     public void updateWithouPassword() {\n         UserTO userTO = getSampleTO(\"updatewithout@password.com\");\n \n-        userTO = restTemplate.postForObject(\n-                BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n \n         assertNotNull(userTO);\n \n         UserMod userMod = new UserMod();\n         userMod.setId(userTO.getId());\n         userMod.addDerivedAttributeToBeRemoved(\"cn\");\n \n-        userTO = restTemplate.postForObject(\n-                BASE_URL + \"user/update\", userMod, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n \n         assertNotNull(userTO);\n         assertNotNull(userTO.getDerivedAttributeMap());\n@@ -1091,32 +1002,28 @@ public void updateWithouPassword() {\n     public void updateInvalidPassword() {\n         UserTO userTO = getSampleTO(\"updateinvalid@password.com\");\n \n-        userTO = restTemplate.postForObject(\n-                BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n \n         UserMod userMod = new UserMod();\n         userMod.setId(userTO.getId());\n         userMod.setPassword(\"pass\");\n \n-        restTemplate.postForObject(\n-                BASE_URL + \"user/update\", userMod, UserTO.class);\n+        restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n     }\n \n     @Test(expected = SyncopeClientCompositeErrorException.class)\n     public void updateSamePassword() {\n         UserTO userTO = getSampleTO(\"updatesame@password.com\");\n \n-        userTO = restTemplate.postForObject(\n-                BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n \n         UserMod userMod = new UserMod();\n         userMod.setId(userTO.getId());\n         userMod.setPassword(\"password123\");\n \n-        restTemplate.postForObject(\n-                BASE_URL + \"user/update\", userMod, UserTO.class);\n+        restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n     }\n \n     @Test\n@@ -1131,8 +1038,7 @@ public void update() {\n         membershipTO.addAttribute(membershipAttr);\n         userTO.addMembership(membershipTO);\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n-                userTO, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n \n         assertFalse(userTO.getDerivedAttributes().isEmpty());\n         assertEquals(1, userTO.getMemberships().size());\n@@ -1163,35 +1069,30 @@ public void update() {\n \n         userMod.addDerivedAttributeToBeAdded(\"cn\");\n         userMod.addMembershipToBeAdded(membershipMod);\n-        userMod.addMembershipToBeRemoved(\n-                userTO.getMemberships().iterator().next().getId());\n+        userMod.addMembershipToBeRemoved(userTO.getMemberships().iterator().next().getId());\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/update\",\n-                userMod, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n         assertNotNull(userTO);\n \n         SyncopeUser passwordTestUser = new SyncopeUser();\n         passwordTestUser.setPassword(\"newPassword\", CipherAlgorithm.MD5, 0);\n         assertEquals(passwordTestUser.getPassword(), userTO.getPassword());\n \n         assertEquals(1, userTO.getMemberships().size());\n-        assertEquals(1, userTO.getMemberships().iterator().next().\n-                getAttributes().size());\n+        assertEquals(1, userTO.getMemberships().iterator().next().getAttributes().size());\n         assertFalse(userTO.getDerivedAttributes().isEmpty());\n+\n         boolean userIdFound = false;\n         boolean fullnameFound = false;\n+\n         for (AttributeTO attributeTO : userTO.getAttributes()) {\n             if (\"userId\".equals(attributeTO.getSchema())) {\n                 userIdFound = true;\n-\n-                assertEquals(Collections.singletonList(\"t.w@spre.net\"),\n-                        attributeTO.getValues());\n+                assertEquals(Collections.singletonList(\"t.w@spre.net\"), attributeTO.getValues());\n             }\n             if (\"fullname\".equals(attributeTO.getSchema())) {\n                 fullnameFound = true;\n-\n-                assertEquals(Collections.singletonList(\"g.h@t.com\"),\n-                        attributeTO.getValues());\n+                assertEquals(Collections.singletonList(\"g.h@t.com\"), attributeTO.getValues());\n             }\n         }\n         assertTrue(userIdFound);\n@@ -1201,8 +1102,7 @@ public void update() {\n     @Test\n     public void updatePasswordOnly() {\n         List<PropagationTaskTO> beforeTasks = Arrays.asList(\n-                restTemplate.getForObject(\n-                BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n+                restTemplate.getForObject(BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n         assertNotNull(beforeTasks);\n         assertFalse(beforeTasks.isEmpty());\n \n@@ -1215,15 +1115,13 @@ public void updatePasswordOnly() {\n         membershipTO.addAttribute(membershipAttr);\n         userTO.addMembership(membershipTO);\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n-                userTO, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n \n         UserMod userMod = new UserMod();\n         userMod.setId(userTO.getId());\n         userMod.setPassword(\"newPassword\");\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/update\",\n-                userMod, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n \n         // check for changePwdDate\n         assertNotNull(userTO.getChangePwdDate());\n@@ -1233,8 +1131,7 @@ public void updatePasswordOnly() {\n         assertEquals(passwordTestUser.getPassword(), userTO.getPassword());\n \n         List<PropagationTaskTO> afterTasks = Arrays.asList(\n-                restTemplate.getForObject(\n-                BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n+                restTemplate.getForObject(BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n         assertNotNull(afterTasks);\n         assertFalse(afterTasks.isEmpty());\n \n@@ -1245,8 +1142,7 @@ public void updatePasswordOnly() {\n     public void verifyTaskRegistration() {\n         // get task list\n         List<PropagationTaskTO> tasks = Arrays.asList(\n-                restTemplate.getForObject(\n-                BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n+                restTemplate.getForObject(BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n@@ -1271,14 +1167,11 @@ public void verifyTaskRegistration() {\n         userTO.addMembership(membershipTO);\n \n         // 1. create user\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n-                userTO, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n \n         // get the new task list\n-        tasks = Arrays.asList(\n-                restTemplate.getForObject(\n-                BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n+        tasks = Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n@@ -1307,15 +1200,13 @@ public void verifyTaskRegistration() {\n         attributeMod.addValueToBeAdded(\"surname\");\n         userMod.addAttributeToBeUpdated(attributeMod);\n \n-        userTO = restTemplate.postForObject(\n-                BASE_URL + \"user/update\", userMod, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n \n         assertNotNull(userTO);\n \n         // get the new task list\n         tasks = Arrays.asList(\n-                restTemplate.getForObject(\n-                BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n+                restTemplate.getForObject(BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n \n         // get max task id\n         maxId = newMaxId;\n@@ -1333,13 +1224,11 @@ public void verifyTaskRegistration() {\n         // --------------------------------------\n         // Delete operation\n         // --------------------------------------\n-        restTemplate.getForObject(BASE_URL + \"user/delete/{userId}\",\n-                UserTO.class, userTO.getId());\n+        restTemplate.getForObject(BASE_URL + \"user/delete/{userId}\", UserTO.class, userTO.getId());\n \n         // get the new task list\n         tasks = Arrays.asList(\n-                restTemplate.getForObject(\n-                BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n+                restTemplate.getForObject(BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n \n         // get max task id\n         maxId = newMaxId;\n@@ -1364,20 +1253,17 @@ public void suspendReactivate() {\n         membershipTO.setRoleId(7L);\n         userTO.addMembership(membershipTO);\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n-                userTO, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n \n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n \n-        userTO = restTemplate.getForObject(\n-                BASE_URL + \"user/suspend/\" + userTO.getId(), UserTO.class);\n+        userTO = restTemplate.getForObject(BASE_URL + \"user/suspend/\" + userTO.getId(), UserTO.class);\n \n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n-        userTO = restTemplate.getForObject(\n-                BASE_URL + \"user/reactivate/\" + userTO.getId(), UserTO.class);\n+        userTO = restTemplate.getForObject(BASE_URL + \"user/reactivate/\" + userTO.getId(), UserTO.class);\n \n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n@@ -1391,21 +1277,18 @@ public void suspendReactivateOnResource() {\n         userTO.getResources().clear();\n \n         ResourceTO dbTable = restTemplate.getForObject(\n-                BASE_URL + \"/resource/read/{resourceName}.json\",\n-                ResourceTO.class, \"resource-testdb\");\n+                BASE_URL + \"/resource/read/{resourceName}.json\", ResourceTO.class, \"resource-testdb\");\n \n         assertNotNull(dbTable);\n         userTO.addResource(dbTable.getName());\n \n         ResourceTO ldap = restTemplate.getForObject(\n-                BASE_URL + \"/resource/read/{resourceName}.json\",\n-                ResourceTO.class, \"resource-ldap\");\n+                BASE_URL + \"/resource/read/{resourceName}.json\", ResourceTO.class, \"resource-ldap\");\n \n         assertNotNull(ldap);\n         userTO.addResource(ldap.getName());\n \n-        userTO = restTemplate.postForObject(\n-                BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n \n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n@@ -1414,9 +1297,7 @@ public void suspendReactivateOnResource() {\n                 + \"&resourceNames=\" + ldap.getName()\n                 + \"&performLocally=true\"; // check also performLocally\n \n-        userTO = restTemplate.getForObject(\n-                BASE_URL + \"user/suspend/\" + userTO.getId() + query,\n-                UserTO.class);\n+        userTO = restTemplate.getForObject(BASE_URL + \"user/suspend/\" + userTO.getId() + query, UserTO.class);\n \n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n@@ -1425,71 +1306,60 @@ public void suspendReactivateOnResource() {\n         assertNotNull(dbTableUID);\n \n         ConnObjectTO connObjectTO = restTemplate.getForObject(\n-                BASE_URL + \"/resource/{resourceName}/read/{objectId}.json\",\n-                ConnObjectTO.class, dbTable.getName(), dbTableUID);\n+                BASE_URL + \"/resource/{resourceName}/read/{objectId}.json\", ConnObjectTO.class, dbTable.getName(),\n+                dbTableUID);\n \n-        assertFalse(Boolean.parseBoolean(connObjectTO.getAttributeMap().\n-                get(OperationalAttributes.ENABLE_NAME).getValues().get(0)));\n+        assertFalse(Boolean.parseBoolean(\n+                connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME).getValues().get(0)));\n \n         String ldapUID = userTO.getUsername();\n         assertNotNull(ldapUID);\n \n-        connObjectTO = restTemplate.getForObject(\n-                BASE_URL + \"/resource/{resourceName}/read/{objectId}.json\",\n+        connObjectTO = restTemplate.getForObject(BASE_URL + \"/resource/{resourceName}/read/{objectId}.json\",\n                 ConnObjectTO.class, ldap.getName(), ldapUID);\n \n         assertNotNull(connObjectTO);\n \n         query = \"?resourceNames=\" + ldap.getName()\n                 + \"&performLocally=false\"; // check also performLocally\n \n-        userTO = restTemplate.getForObject(\n-                BASE_URL + \"user/reactivate/\" + userTO.getId() + query,\n-                UserTO.class);\n+        userTO = restTemplate.getForObject(BASE_URL + \"user/reactivate/\" + userTO.getId() + query, UserTO.class);\n \n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n-        connObjectTO = restTemplate.getForObject(\n-                BASE_URL + \"/resource/{resourceName}/read/{objectId}.json\",\n+        connObjectTO = restTemplate.getForObject(BASE_URL + \"/resource/{resourceName}/read/{objectId}.json\",\n                 ConnObjectTO.class, dbTable.getName(), dbTableUID);\n \n-        assertFalse(Boolean.parseBoolean(connObjectTO.getAttributeMap().\n-                get(OperationalAttributes.ENABLE_NAME).getValues().get(0)));\n+        assertFalse(Boolean.parseBoolean(\n+                connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME).getValues().get(0)));\n \n-        query = \"?resourceNames=\" + dbTable.getName()\n-                + \"&performLocally=true\"; // check also performLocally\n+        query = \"?resourceNames=\" + dbTable.getName() + \"&performLocally=true\"; // check also performLocally\n \n-        userTO = restTemplate.getForObject(\n-                BASE_URL + \"user/reactivate/\" + userTO.getId() + query,\n-                UserTO.class);\n+        userTO = restTemplate.getForObject(BASE_URL + \"user/reactivate/\" + userTO.getId() + query, UserTO.class);\n \n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n \n-        connObjectTO = restTemplate.getForObject(\n-                BASE_URL + \"/resource/{resourceName}/read/{objectId}.json\",\n+        connObjectTO = restTemplate.getForObject(BASE_URL + \"/resource/{resourceName}/read/{objectId}.json\",\n                 ConnObjectTO.class, dbTable.getName(), dbTableUID);\n \n-        assertTrue(Boolean.parseBoolean(connObjectTO.getAttributeMap().\n-                get(OperationalAttributes.ENABLE_NAME).getValues().get(0)));\n+        assertTrue(Boolean.parseBoolean(\n+                connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME).getValues().get(0)));\n     }\n \n     @Test(expected = EmptyResultDataAccessException.class)\n     public void issue213() {\n         UserTO userTO = getSampleTO(\"issue213@syncope-idm.org\");\n         userTO.addResource(\"resource-testdb\");\n \n-        userTO = restTemplate.postForObject(\n-                BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n \n         JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n \n-        String username = jdbcTemplate.queryForObject(\n-                \"SELECT id FROM test WHERE id=?\",\n-                String.class,\n-                userTO.getUsername());\n+        String username =\n+                jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\", String.class, userTO.getUsername());\n \n         assertEquals(userTO.getUsername(), username);\n \n@@ -1498,39 +1368,31 @@ public void issue213() {\n         userMod.setId(userTO.getId());\n         userMod.addResourceToBeRemoved(\"resource-testdb\");\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/update\",\n-                userMod, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n \n         assertTrue(userTO.getResources().isEmpty());\n \n-        jdbcTemplate.queryForObject(\n-                \"SELECT id FROM test WHERE id=?\",\n-                String.class,\n-                userTO.getUsername());\n+        jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\", String.class, userTO.getUsername());\n     }\n \n     @Test\n     public void issue234() {\n         UserTO userTO = getSampleTO(\"issue234@syncope-idm.org\");\n         userTO.addResource(\"resource-ldap\");\n \n-        userTO = restTemplate.postForObject(\n-                BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n \n         UserMod userMod = new UserMod();\n \n         userMod.setId(userTO.getId());\n-        userMod.setUsername(\n-                \"1\" + userTO.getUsername());\n+        userMod.setUsername(\"1\" + userTO.getUsername());\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/update\",\n-                userMod, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n \n         assertNotNull(userTO);\n \n-        assertEquals(\n-                \"1issue234@syncope-idm.org\", userTO.getUsername());\n+        assertEquals(\"1issue234@syncope-idm.org\", userTO.getUsername());\n     }\n \n     @Test\n@@ -1540,23 +1402,19 @@ public void issue270() {\n         // be sure to remove all virtual attributes\n         original.setVirtualAttributes(Collections.EMPTY_LIST);\n \n-        original = restTemplate.postForObject(\n-                BASE_URL + \"user/create\", original, UserTO.class);\n+        original = restTemplate.postForObject(BASE_URL + \"user/create\", original, UserTO.class);\n \n         assertNotNull(original);\n \n         assertTrue(original.getVirtualAttributes().isEmpty());\n \n         UserTO toBeUpdated = restTemplate.getForObject(\n-                BASE_URL + \"user/read/{userId}.json\",\n-                UserTO.class, original.getId());\n+                BASE_URL + \"user/read/{userId}.json\", UserTO.class, original.getId());\n \n         AttributeTO virtual = new AttributeTO();\n \n-        virtual.setSchema(\n-                \"virtualdata\");\n-        virtual.addValue(\n-                \"virtualvalue\");\n+        virtual.setSchema(\"virtualdata\");\n+        virtual.addValue(\"virtualvalue\");\n \n         toBeUpdated.addVirtualAttribute(virtual);\n \n@@ -1565,16 +1423,14 @@ public void issue270() {\n \n         assertNotNull(userMod);\n \n-        toBeUpdated = restTemplate.postForObject(\n-                BASE_URL + \"user/update\", userMod, UserTO.class);\n+        toBeUpdated = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n \n         assertNotNull(toBeUpdated);\n \n         assertFalse(toBeUpdated.getVirtualAttributes().isEmpty());\n         assertNotNull(toBeUpdated.getVirtualAttributes().get(0));\n \n-        assertEquals(virtual.getSchema(),\n-                toBeUpdated.getVirtualAttributes().get(0).getSchema());\n+        assertEquals(virtual.getSchema(), toBeUpdated.getVirtualAttributes().get(0).getSchema());\n     }\n \n     @Test\n@@ -1584,26 +1440,23 @@ public final void issue280() {\n         userTO.getMemberships().clear();\n         userTO.getDerivedAttributes().clear();\n \n-        userTO = restTemplate.postForObject(\n-                BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n \n         UserMod userMod = new UserMod();\n         userMod.setId(userTO.getId());\n         userMod.setPassword(\"123password\");\n         userMod.addResourceToBeAdded(\"resource-testdb\");\n \n-        userTO = restTemplate.postForObject(\n-                BASE_URL + \"user/update\", userMod, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n         assertNotNull(userTO);\n \n         final List<PropagationTO> propagations = userTO.getPropagationTOs();\n \n         assertNotNull(propagations);\n         assertEquals(1, propagations.size());\n \n-        final PropagationTaskExecStatus status =\n-                propagations.get(0).getStatus();\n+        final PropagationTaskExecStatus status = propagations.get(0).getStatus();\n         final String resource = propagations.get(0).getResourceName();\n \n         assertNotNull(status);\n@@ -1619,17 +1472,15 @@ public void issue281() {\n         userTO.getDerivedAttributes().clear();\n         userTO.addResource(\"resource-csv\");\n \n-        userTO = restTemplate.postForObject(\n-                BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n \n         final List<PropagationTO> propagations = userTO.getPropagationTOs();\n \n         assertNotNull(propagations);\n         assertEquals(1, propagations.size());\n \n-        final PropagationTaskExecStatus status =\n-                propagations.get(0).getStatus();\n+        final PropagationTaskExecStatus status = propagations.get(0).getStatus();\n         final String resource = propagations.get(0).getResourceName();\n \n         assertNotNull(status);\n@@ -1647,12 +1498,10 @@ public void issue288() {\n         userTO.addAttribute(attributeTO);\n \n         try {\n-            restTemplate.postForObject(\n-                    BASE_URL + \"user/create\", userTO, UserTO.class);\n+            restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n             fail();\n         } catch (SyncopeClientCompositeErrorException sccee) {\n-            assertNotNull(sccee.getException(\n-                    SyncopeClientExceptionType.InvalidValues));\n+            assertNotNull(sccee.getException(SyncopeClientExceptionType.InvalidValues));\n         }\n     }\n \n@@ -1675,25 +1524,20 @@ public void roleAttrPropagation() {\n \n         userTO.addResource(\"resource-csv\");\n \n-        UserTO actual = restTemplate.postForObject(\n-                BASE_URL + \"user/create\", userTO, UserTO.class);\n+        UserTO actual = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n \n         assertNotNull(actual);\n         assertNotNull(actual.getDerivedAttributeMap().get(\"csvuserid\"));\n \n         ConnObjectTO connObjectTO = restTemplate.getForObject(\n-                BASE_URL + \"/resource/{resourceName}/read/{objectId}.json\",\n-                ConnObjectTO.class,\n-                \"resource-csv\",\n-                actual.getDerivedAttributeMap().get(\"csvuserid\").getValues().\n-                get(0));\n+                BASE_URL + \"/resource/{resourceName}/read/{objectId}.json\", ConnObjectTO.class, \"resource-csv\",\n+                actual.getDerivedAttributeMap().get(\"csvuserid\").getValues().get(0));\n \n         assertNotNull(connObjectTO);\n \n-        assertEquals(\"sx-dx\", connObjectTO.getAttributeMap().get(\"ROLE\").\n-                getValues().get(0));\n+        assertEquals(\"sx-dx\", connObjectTO.getAttributeMap().get(\"ROLE\").getValues().get(0));\n     }\n-    \n+\n     @Test\n     public void membershipAttrPropagation() {\n         UserTO userTO = getSampleTO(\"checkMembAttrPropagation@syncope-idm.org\");\n@@ -1708,17 +1552,17 @@ public void membershipAttrPropagation() {\n \n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(1L);\n-        \n+\n         AttributeTO mderived_sx = new AttributeTO();\n         mderived_sx.setSchema(\"mderived_sx\");\n         mderived_sx.setValues(Collections.singletonList(\"sx\"));\n         membershipTO.addAttribute(mderived_sx);\n-        \n+\n         AttributeTO mderived_dx = new AttributeTO();\n         mderived_dx.setSchema(\"mderived_dx\");\n         mderived_dx.setValues(Collections.singletonList(\"dx\"));\n         membershipTO.addAttribute(mderived_dx);\n-        \n+\n         AttributeTO mderiveddata = new AttributeTO();\n         mderiveddata.setSchema(\"mderToBePropagated\");\n         membershipTO.addDerivedAttribute(mderiveddata);\n@@ -1727,22 +1571,54 @@ public void membershipAttrPropagation() {\n \n         userTO.addResource(\"resource-csv\");\n \n-        UserTO actual = restTemplate.postForObject(\n-                BASE_URL + \"user/create\", userTO, UserTO.class);\n+        UserTO actual = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n \n         assertNotNull(actual);\n         assertNotNull(actual.getDerivedAttributeMap().get(\"csvuserid\"));\n \n         ConnObjectTO connObjectTO = restTemplate.getForObject(\n-                BASE_URL + \"/resource/{resourceName}/read/{objectId}.json\",\n-                ConnObjectTO.class,\n-                \"resource-csv\",\n-                actual.getDerivedAttributeMap().get(\"csvuserid\").getValues().\n-                get(0));\n+                BASE_URL + \"/resource/{resourceName}/read/{objectId}.json\", ConnObjectTO.class, \"resource-csv\",\n+                actual.getDerivedAttributeMap().get(\"csvuserid\").getValues().get(0));\n \n         assertNotNull(connObjectTO);\n \n-        assertEquals(\"sx-dx\", connObjectTO.getAttributeMap().get(\"MEMBERSHIP\").\n-                getValues().get(0));\n+        assertEquals(\"sx-dx\", connObjectTO.getAttributeMap().get(\"MEMBERSHIP\").getValues().get(0));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE16() {\n+        UserTO userTO = getSampleTO(\"virattrupdate@apache.org\");\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(8L);\n+        userTO.addMembership(membershipTO);\n+\n+        // 1. create user\n+        UserTO actual = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        assertNotNull(actual);\n+\n+        // 2. check for virtual attribute value\n+        actual = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, actual.getId());\n+        assertNotNull(actual);\n+        assertEquals(\"virtualvalue\", actual.getVirtualAttributeMap().get(\"virtualdata\").getValues().get(0));\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setId(actual.getId());\n+        \n+        AttributeMod virtualdata = new AttributeMod();\n+        virtualdata.setSchema(\"virtualdata\");\n+        virtualdata.addValueToBeAdded(\"virtualupdated\");\n+        \n+        userMod.addVirtualAttributeToBeRemoved(\"virtualdata\");\n+        userMod.addVirtualAttributeToBeUpdated(virtualdata);\n+        \n+        // 3. update virtual attribute\n+        actual = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        assertNotNull(actual);\n+        \n+        // 4. check for virtual attribute value\n+        actual = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, actual.getId());\n+        assertNotNull(actual);\n+        assertEquals(\"virtualupdated\", actual.getVirtualAttributeMap().get(\"virtualdata\").getValues().get(0));\n     }\n }"}]}