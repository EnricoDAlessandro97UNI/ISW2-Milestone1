{"sha":"dc893d8eee1231ae1832017e7eb3f963b6862138","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRjODkzZDhlZWUxMjMxYWUxODMyMDE3ZTdlYjNmOTYzYjY4NjIxMzg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-03-19T15:06:51Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-03-19T15:06:51Z"},"message":"[SYNCOPE-338] Spring Security annotations moved to *Internal() Spring MVC conrtoller methods\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1458326 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1a67bc42ab59539183c55db03cdc26a1e4bad880","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1a67bc42ab59539183c55db03cdc26a1e4bad880"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/dc893d8eee1231ae1832017e7eb3f963b6862138","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dc893d8eee1231ae1832017e7eb3f963b6862138","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dc893d8eee1231ae1832017e7eb3f963b6862138","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dc893d8eee1231ae1832017e7eb3f963b6862138/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"e8a50c9ed1fa2e4638e6e2ca38fb0eba461676af","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e8a50c9ed1fa2e4638e6e2ca38fb0eba461676af","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e8a50c9ed1fa2e4638e6e2ca38fb0eba461676af"}],"stats":{"total":70,"additions":32,"deletions":38},"files":[{"sha":"ae9229062887f0d8abfec34d6a0d605f41caf20c","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc893d8eee1231ae1832017e7eb3f963b6862138/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc893d8eee1231ae1832017e7eb3f963b6862138/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=dc893d8eee1231ae1832017e7eb3f963b6862138","patch":"@@ -126,7 +126,6 @@ public List<ConfigurationTO> list(final HttpServletRequest request) {\n     @PreAuthorize(\"hasRole('CONFIGURATION_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{key}\")\n     public ConfigurationTO read(final HttpServletResponse response, @PathVariable(\"key\") final String key) {\n-\n         ConfigurationTO result;\n         try {\n             SyncopeConf conf = confDAO.find(key);\n@@ -202,9 +201,7 @@ public ModelAndView getMailTemplates() {\n         return new ModelAndView().addObject(htmlTemplates);\n     }\n \n-    @PreAuthorize(\"hasRole('CONFIGURATION_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/dbexport\")\n-    @Transactional(readOnly = true)\n     public void dbExport(final HttpServletResponse response) {\n         response.setContentType(MediaType.TEXT_XML);\n         response.setHeader(SyncopeConstants.CONTENT_DISPOSITION_HEADER,\n@@ -216,6 +213,7 @@ public void dbExport(final HttpServletResponse response) {\n         }\n     }\n \n+    @PreAuthorize(\"hasRole('CONFIGURATION_READ')\")\n     @Transactional(readOnly = true)\n     public void dbExportInternal(final OutputStream os) {\n         try {"},{"sha":"4d23910723bdc93685b7db6b4562ee3419793cbe","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/LoggerController.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc893d8eee1231ae1832017e7eb3f963b6862138/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc893d8eee1231ae1832017e7eb3f963b6862138/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java?ref=dc893d8eee1231ae1832017e7eb3f963b6862138","patch":"@@ -170,7 +170,7 @@ private LoggerTO delete(final String name, final SyncopeLoggerType expectedType)\n         } else if (expectedType != syncopeLogger.getType()) {\n             throwInvalidLogger(expectedType);\n         }\n-        \n+\n         LoggerTO loggerToDelete = new LoggerTO();\n         BeanUtils.copyProperties(syncopeLogger, loggerToDelete);\n \n@@ -184,7 +184,7 @@ private LoggerTO delete(final String name, final SyncopeLoggerType expectedType)\n \n         auditManager.audit(Category.logger, LoggerSubCategory.setLevel, Result.success, String.format(\n                 \"Successfully deleted logger %s (%s)\", name, expectedType));\n-        \n+\n         return loggerToDelete;\n     }\n \n@@ -197,7 +197,6 @@ public LoggerTO deleteLog(@PathVariable(\"name\") final String name) throws NotFou\n     @PreAuthorize(\"hasRole('AUDIT_DISABLE')\")\n     @RequestMapping(method = RequestMethod.PUT, value = \"/audit/disable\")\n     public void disableAudit(@RequestBody final AuditLoggerName auditLoggerName) {\n-\n         try {\n             delete(auditLoggerName.toLoggerName(), SyncopeLoggerType.AUDIT);\n         } catch (NotFoundException e) {"},{"sha":"215b2fe3b2333110a5c99076f302daf9af5ede03","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/NotificationController.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc893d8eee1231ae1832017e7eb3f963b6862138/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc893d8eee1231ae1832017e7eb3f963b6862138/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java?ref=dc893d8eee1231ae1832017e7eb3f963b6862138","patch":"@@ -82,14 +82,14 @@ public List<NotificationTO> list() {\n         return notificationTOs;\n     }\n \n-    @PreAuthorize(\"hasRole('NOTIFICATION_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n     public NotificationTO create(final HttpServletResponse response, @RequestBody final NotificationTO notificationTO) {\n         NotificationTO savedNotificationTO = createInternal(notificationTO);\n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return savedNotificationTO;\n     }\n \n+    @PreAuthorize(\"hasRole('NOTIFICATION_CREATE')\")\n     public NotificationTO createInternal(final NotificationTO notificationTO) {\n         LOG.debug(\"Notification create called with parameter {}\", notificationTO);\n         Notification notification = notificationDAO.save(binder.createNotification(notificationTO));\n@@ -122,7 +122,6 @@ public NotificationTO update(@RequestBody final NotificationTO notificationTO) {\n     @PreAuthorize(\"hasRole('CONNECTOR_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/delete/{notificationId}\")\n     public NotificationTO delete(@PathVariable(\"notificationId\") final Long notificationId) {\n-\n         Notification notification = notificationDAO.find(notificationId);\n         if (notification == null) {\n             LOG.error(\"Could not find notificatin '\" + notificationId + \"'\");"},{"sha":"91edf2fb808d85e54d10aa5517d08e0f69675a32","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/PolicyController.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc893d8eee1231ae1832017e7eb3f963b6862138/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc893d8eee1231ae1832017e7eb3f963b6862138/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=dc893d8eee1231ae1832017e7eb3f963b6862138","patch":"@@ -66,24 +66,22 @@ public class PolicyController extends AbstractController {\n     @Autowired\n     private PolicyDataBinder binder;\n \n-    @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/password/create\")\n     public PasswordPolicyTO create(final HttpServletResponse response, @RequestBody final PasswordPolicyTO policyTO) {\n         return createInternal(policyTO);\n     }\n \n-    @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/account/create\")\n     public AccountPolicyTO create(final HttpServletResponse response, @RequestBody final AccountPolicyTO policyTO) {\n         return createInternal(policyTO);\n     }\n \n-    @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/sync/create\")\n     public SyncPolicyTO create(final HttpServletResponse response, @RequestBody final SyncPolicyTO policyTO) {\n         return createInternal(policyTO);\n     }\n \n+    @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n     public <T extends PolicyTO> T createInternal(final T policyTO) {\n         LOG.debug(\"Creating policy \" + policyTO);\n "},{"sha":"7b9ea030eb83eab7662b8f848949ffd0b89ceeca","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ReportController.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc893d8eee1231ae1832017e7eb3f963b6862138/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc893d8eee1231ae1832017e7eb3f963b6862138/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=dc893d8eee1231ae1832017e7eb3f963b6862138","patch":"@@ -98,14 +98,14 @@ public class ReportController extends AbstractController {\n     @Autowired\n     private ReportDataBinder binder;\n \n-    @PreAuthorize(\"hasRole('REPORT_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n     public ReportTO create(final HttpServletResponse response, @RequestBody final ReportTO reportTO) {\n         ReportTO createdReportTO = createInternal(reportTO);\n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return createdReportTO;\n     }\n \n+    @PreAuthorize(\"hasRole('REPORT_CREATE')\")\n     public ReportTO createInternal(final ReportTO reportTO) {\n         LOG.debug(\"Creating report \" + reportTO);\n \n@@ -150,11 +150,12 @@ public ReportTO update(@RequestBody final ReportTO reportTO) {\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for report \" + report.getId(), e);\n \n-            SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientCompositeErrorException sccee =\n+                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n             SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.Scheduling);\n             sce.addElement(e.getMessage());\n-            scce.addException(sce);\n-            throw scce;\n+            sccee.addException(sce);\n+            throw sccee;\n         }\n \n         auditManager.audit(Category.report, ReportSubCategory.update, Result.success,\n@@ -199,13 +200,13 @@ public List<ReportTO> list(@PathVariable(\"page\") final int page, @PathVariable(\"\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('REPORT_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/reportletConfClasses\")\n     public ModelAndView getReportletConfClasses() {\n         Set<String> reportletConfClasses = getReportletConfClassesInternal();\n         return new ModelAndView().addObject(reportletConfClasses);\n     }\n \n+    @PreAuthorize(\"hasRole('REPORT_LIST')\")\n     @SuppressWarnings(\"rawtypes\")\n     public Set<String> getReportletConfClassesInternal() {\n         Set<String> reportletConfClasses = new HashSet<String>();\n@@ -251,7 +252,6 @@ public ReportExecTO readExecution(@PathVariable(\"executionId\") final Long execut\n         return binder.getReportExecTO(reportExec);\n     }\n \n-    @PreAuthorize(\"hasRole('REPORT_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/execution/export/{executionId}\")\n     @Transactional(readOnly = true)\n     public void exportExecutionResult(final HttpServletResponse response,\n@@ -275,6 +275,7 @@ public void exportExecutionResult(final HttpServletResponse response,\n         exportExecutionResultInternal(os, reportExec, format);\n     }\n \n+    @PreAuthorize(\"hasRole('REPORT_READ')\")\n     public void exportExecutionResultInternal(final OutputStream os, final ReportExec reportExec,\n             final ReportExecExportFormat format) {\n \n@@ -338,14 +339,15 @@ public void exportExecutionResultInternal(final OutputStream os, final ReportExe\n                 \"Successfully exported report execution: \" + reportExec.getId());\n     }\n \n+    @PreAuthorize(\"hasRole('REPORT_READ')\")\n     public ReportExec getAndCheckReportExecInternal(final Long executionId) {\n         ReportExec reportExec = reportExecDAO.find(executionId);\n         if (reportExec == null) {\n             throw new NotFoundException(\"Report execution \" + executionId);\n         }\n         if (!ReportExecStatus.SUCCESS.name().equals(reportExec.getStatus()) || reportExec.getExecResult() == null) {\n-            SyncopeClientCompositeErrorException sccee = new SyncopeClientCompositeErrorException(\n-                    HttpStatus.BAD_REQUEST);\n+            SyncopeClientCompositeErrorException sccee =\n+                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n             SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.InvalidReportExec);\n             sce.addElement(reportExec.getExecResult() == null\n                     ? \"No report data produced\""},{"sha":"053e987d1711bc95c7850e03ce419f7ea7a55f7e","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/TaskController.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc893d8eee1231ae1832017e7eb3f963b6862138/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc893d8eee1231ae1832017e7eb3f963b6862138/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=dc893d8eee1231ae1832017e7eb3f963b6862138","patch":"@@ -99,20 +99,19 @@ public class TaskController extends AbstractController {\n     @Autowired\n     private ImplementationClassNamesLoader classNamesLoader;\n \n-    @PreAuthorize(\"hasRole('TASK_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create/sync\")\n     public TaskTO createSyncTask(final HttpServletResponse response, @RequestBody final SyncTaskTO taskTO) {\n         return createSchedTask(response, taskTO);\n     }\n \n-    @PreAuthorize(\"hasRole('TASK_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create/sched\")\n     public TaskTO createSchedTask(final HttpServletResponse response, @RequestBody final SchedTaskTO taskTO) {\n         TaskTO createdTaskTO = createSchedTaskInternal(taskTO);\n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return createdTaskTO;\n     }\n \n+    @PreAuthorize(\"hasRole('TASK_CREATE')\")\n     public TaskTO createSchedTaskInternal(final SchedTaskTO taskTO) {\n         LOG.debug(\"Creating task \" + taskTO);\n \n@@ -180,12 +179,12 @@ public TaskTO updateSched(@RequestBody final SchedTaskTO taskTO) {\n         return binder.getTaskTO(task, taskUtil);\n     }\n \n-    @PreAuthorize(\"hasRole('TASK_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/count\")\n     public ModelAndView count(@PathVariable(\"kind\") final String kind) {\n         return new ModelAndView().addObject(countInternal(kind));\n     }\n \n+    @PreAuthorize(\"hasRole('TASK_LIST')\")\n     public int countInternal(final String kind) {\n         return taskDAO.count(getTaskUtil(kind).taskClass());\n     }\n@@ -445,9 +444,9 @@ public TaskExecTO deleteExecution(@PathVariable(\"executionId\") final Long execut\n     }\n \n     @PreAuthorize(\"(hasRole('TASK_DELETE') and #bulkAction.operation == #bulkAction.operation.DELETE) or \"\n-    + \"(hasRole('TASK_EXECUTE') and \"\n-    + \"(#bulkAction.operation == #bulkAction.operation.EXECUTE or \"\n-    + \"#bulkAction.operation == #bulkAction.operation.DRYRUN))\")\n+            + \"(hasRole('TASK_EXECUTE') and \"\n+            + \"(#bulkAction.operation == #bulkAction.operation.EXECUTE or \"\n+            + \"#bulkAction.operation == #bulkAction.operation.DRYRUN))\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/bulk\")\n     public BulkActionRes bulkAction(@RequestBody final BulkAction bulkAction) {\n         LOG.debug(\"Bulk action '{}' called on '{}'\", bulkAction.getOperation(), bulkAction.getTargets());"},{"sha":"e7e5edb79328e3162afa1bcc043e23c2a33258cf","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":12,"deletions":13,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc893d8eee1231ae1832017e7eb3f963b6862138/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc893d8eee1231ae1832017e7eb3f963b6862138/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=dc893d8eee1231ae1832017e7eb3f963b6862138","patch":"@@ -117,49 +117,49 @@ public class UserController {\n     @Autowired\n     protected ConnObjectUtil connObjectUtil;\n \n-    @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/verifyPassword/{username}\")\n-    @Transactional(readOnly = true)\n     public ModelAndView verifyPassword(@PathVariable(\"username\") String username,\n             @RequestParam(\"password\") final String password) {\n \n         return new ModelAndView().addObject(verifyPasswordInternal(username, password));\n     }\n \n+    @PreAuthorize(\"hasRole('USER_READ')\")\n+    @Transactional(readOnly = true)\n     public Boolean verifyPasswordInternal(final String username, final String password) {\n         auditManager.audit(Category.user, UserSubCategory.create, Result.success,\n                 \"Verified password for: \" + username);\n         return binder.verifyPassword(username, password);\n     }\n \n-    @PreAuthorize(\"hasRole('USER_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/count\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public ModelAndView count() {\n         return new ModelAndView().addObject(countInternal());\n     }\n \n+    @PreAuthorize(\"hasRole('USER_LIST')\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public int countInternal() {\n         return userDAO.count(EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()));\n     }\n \n-    @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/search/count\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public ModelAndView searchCount(@RequestBody final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n         return new ModelAndView().addObject(searchCountInternal(searchCondition));\n     }\n \n+    @PreAuthorize(\"hasRole('USER_READ')\")\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public int searchCountInternal(final NodeCond searchCondition) throws InvalidSearchConditionException {\n         if (!searchCondition.isValid()) {\n             LOG.error(\"Invalid search condition: {}\", searchCondition);\n             throw new InvalidSearchConditionException();\n         }\n-        final Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n-        return searchDAO.count(adminRoleIds, searchCondition, AttributableUtil.getInstance(AttributableType.USER));\n+\n+        return searchDAO.count(EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()),\n+                searchCondition, AttributableUtil.getInstance(AttributableType.USER));\n     }\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n@@ -214,7 +214,6 @@ public UserTO read(@PathVariable(\"userId\") final Long userId) {\n     @RequestMapping(method = RequestMethod.GET, value = \"/readByUsername/{username}\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public UserTO read(@PathVariable final String username) {\n-\n         UserTO result = binder.getUserTO(username);\n \n         auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n@@ -273,14 +272,14 @@ public List<UserTO> search(@RequestBody final NodeCond searchCondition, @PathVar\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('USER_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n     public UserTO create(final HttpServletResponse response, @RequestBody final UserTO userTO) {\n         UserTO savedTO = createInternal(userTO);\n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return savedTO;\n     }\n \n+    @PreAuthorize(\"hasRole('USER_CREATE')\")\n     public UserTO createInternal(final UserTO userTO) {\n         LOG.debug(\"User create called with {}\", userTO);\n \n@@ -700,9 +699,9 @@ protected UserTO doDelete(final Long userId) {\n     }\n \n     @PreAuthorize(\"(hasRole('USER_DELETE') and #bulkAction.operation == #bulkAction.operation.DELETE) or \"\n-    + \"(hasRole('USER_UPDATE') and \"\n-    + \"(#bulkAction.operation == #bulkAction.operation.REACTIVATE or \"\n-    + \"#bulkAction.operation == #bulkAction.operation.SUSPEND))\")\n+            + \"(hasRole('USER_UPDATE') and \"\n+            + \"(#bulkAction.operation == #bulkAction.operation.REACTIVATE or \"\n+            + \"#bulkAction.operation == #bulkAction.operation.SUSPEND))\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/bulk\")\n     public BulkActionRes bulkAction(@RequestBody final BulkAction bulkAction) {\n         LOG.debug(\"Bulk action '{}' called on '{}'\", bulkAction.getOperation(), bulkAction.getTargets());"}]}