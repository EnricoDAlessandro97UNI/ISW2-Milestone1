{"sha":"3be90d61a89842e6991f63d0f96c2f3421a126bf","node_id":"C_kwDOJfYA1toAKDNiZTkwZDYxYTg5ODQyZTY5OTFmNjNkMGY5NmMyZjM0MjFhMTI2YmY","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2023-04-18T11:56:44Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-04-18T12:03:11Z"},"message":"[SYNCOPE-1752] Refactoring Realms storage and management (#442)","tree":{"sha":"83491d02e6505bd878506341e96b5ce2d000d5b7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/83491d02e6505bd878506341e96b5ce2d000d5b7"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3be90d61a89842e6991f63d0f96c2f3421a126bf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3be90d61a89842e6991f63d0f96c2f3421a126bf","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3be90d61a89842e6991f63d0f96c2f3421a126bf","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3be90d61a89842e6991f63d0f96c2f3421a126bf/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"c011c0998bf1302f60fffdeae539f3c5e0b2880a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c011c0998bf1302f60fffdeae539f3c5e0b2880a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c011c0998bf1302f60fffdeae539f3c5e0b2880a"}],"stats":{"total":949,"additions":466,"deletions":483},"files":[{"sha":"a80a05ec5b3cf5d8c6174a075b3bed086b7eebc4","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/clientapps/ClientAppModalPanelBuilder.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppModalPanelBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppModalPanelBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppModalPanelBuilder.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -29,6 +29,7 @@\n import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.commons.RealmsUtils;\n import org.apache.syncope.client.console.panels.AbstractModalPanel;\n import org.apache.syncope.client.console.rest.ClientAppRestClient;\n@@ -49,7 +50,6 @@\n import org.apache.syncope.client.ui.commons.panels.WizardModalPanel;\n import org.apache.syncope.client.ui.commons.wizards.AbstractModalPanelBuilder;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.to.ClientAppTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n@@ -154,22 +154,20 @@ private class Profile extends AbstractModalPanel<T> {\n \n             List<Component> fields = new ArrayList<>();\n \n-            boolean isSearchEnabled = RealmsUtils.isSearchEnabled();\n+            boolean fullRealmsTree = SyncopeWebApplication.get().fullRealmsTree();\n             AutoCompleteSettings settings = new AutoCompleteSettings();\n-            settings.setShowCompleteListOnFocusGain(!isSearchEnabled);\n-            settings.setShowListOnEmptyInput(!isSearchEnabled);\n+            settings.setShowCompleteListOnFocusGain(fullRealmsTree);\n+            settings.setShowListOnEmptyInput(fullRealmsTree);\n             AjaxSearchFieldPanel realm = new AjaxSearchFieldPanel(\n                     \"field\", \"realm\", new PropertyModel<>(clientAppTO, \"realm\"), settings) {\n \n                 private static final long serialVersionUID = -6390474600233486704L;\n \n                 @Override\n                 protected Iterator<String> getChoices(final String input) {\n-                    return (isSearchEnabled\n-                            ? RealmRestClient.search(RealmsUtils.buildQuery(input)).getResult()\n-                            : RealmRestClient.list(SyncopeConstants.ROOT_REALM)).\n-                            stream().filter(realm -> SyncopeConsoleSession.get().getAuthRealms().stream().\n-                            anyMatch(authRealm -> realm.getFullPath().startsWith(authRealm))).\n+                    return RealmRestClient.search(fullRealmsTree\n+                            ? RealmsUtils.buildRootQuery()\n+                            : RealmsUtils.buildKeywordQuery(input)).getResult().stream().\n                             map(RealmTO::getFullPath).collect(Collectors.toList()).iterator();\n                 }\n             };"},{"sha":"07b33950ff3473cd18989a9baa9fcd7a7b63487f","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/ReconTaskPanel.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconTaskPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconTaskPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconTaskPanel.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.client.console.status;\n \n-import java.util.Comparator;\n import java.util.Iterator;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.commons.RealmsUtils;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.MultilevelPanel;\n@@ -72,7 +72,7 @@ public class ReconTaskPanel extends MultilevelPanel.SecondLevel {\n         @Override\n         protected List<String> load() {\n             return ImplementationRestClient.list(IdMImplementationType.PULL_ACTIONS).stream().\n-                map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n+                    map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n         }\n     };\n \n@@ -83,7 +83,7 @@ protected List<String> load() {\n         @Override\n         protected List<String> load() {\n             return ImplementationRestClient.list(IdMImplementationType.PUSH_ACTIONS).stream().\n-                map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n+                    map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n         }\n     };\n \n@@ -116,10 +116,10 @@ public ReconTaskPanel(\n             form.add(new Label(\"realm\", \"\"));\n             form.add(new Label(\"remediation\", \"\"));\n         } else {\n-            boolean isSearchEnabled = RealmsUtils.isSearchEnabled();\n+            boolean fullRealmsTree = SyncopeWebApplication.get().fullRealmsTree();\n             AutoCompleteSettings settings = new AutoCompleteSettings();\n-            settings.setShowCompleteListOnFocusGain(!isSearchEnabled);\n-            settings.setShowListOnEmptyInput(!isSearchEnabled);\n+            settings.setShowCompleteListOnFocusGain(fullRealmsTree);\n+            settings.setShowListOnEmptyInput(fullRealmsTree);\n \n             AjaxSearchFieldPanel realm = new AjaxSearchFieldPanel(\n                     \"realm\", \"destinationRealm\", new PropertyModel<>(taskTO, \"destinationRealm\"), settings) {\n@@ -129,11 +129,10 @@ public ReconTaskPanel(\n                 @Override\n                 protected Iterator<String> getChoices(final String input) {\n                     return (RealmsUtils.checkInput(input)\n-                            ? (isSearchEnabled\n-                                    ? RealmRestClient.search(RealmsUtils.buildQuery(input)).getResult()\n-                                    : RealmRestClient.list(SyncopeConstants.ROOT_REALM))\n+                            ? (RealmRestClient.search(fullRealmsTree\n+                                    ? RealmsUtils.buildRootQuery()\n+                                    : RealmsUtils.buildKeywordQuery(input)).getResult())\n                             : List.<RealmTO>of()).stream().\n-                            sorted(Comparator.comparing(RealmTO::getName)).\n                             map(RealmTO::getFullPath).collect(Collectors.toList()).iterator();\n                 }\n             };"},{"sha":"f0e05c8c6b47cfb2051017ccf3c442896a3bd0eb","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ConnectorDetailsPanel.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -23,7 +23,7 @@\n import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.commons.RealmsUtils;\n import org.apache.syncope.client.console.rest.RealmRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxSearchFieldPanel;\n@@ -32,7 +32,6 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxSpinnerFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ConnIdBundle;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ConnPoolConfTO;\n@@ -50,11 +49,11 @@ public ConnectorDetailsPanel(final ConnInstanceTO connInstanceTO, final List<Con\n         super();\n         setOutputMarkupId(true);\n \n-        boolean isSearchEnabled = RealmsUtils.isSearchEnabled();\n+        boolean fullRealmsTree = SyncopeWebApplication.get().fullRealmsTree();\n \n         AutoCompleteSettings settings = new AutoCompleteSettings();\n-        settings.setShowCompleteListOnFocusGain(!isSearchEnabled);\n-        settings.setShowListOnEmptyInput(!isSearchEnabled);\n+        settings.setShowCompleteListOnFocusGain(fullRealmsTree);\n+        settings.setShowListOnEmptyInput(fullRealmsTree);\n \n         AjaxSearchFieldPanel realm = new AjaxSearchFieldPanel(\n                 \"adminRealm\", \"adminRealm\", new PropertyModel<>(connInstanceTO, \"adminRealm\"), settings) {\n@@ -63,11 +62,11 @@ public ConnectorDetailsPanel(final ConnInstanceTO connInstanceTO, final List<Con\n \n             @Override\n             protected Iterator<String> getChoices(final String input) {\n-                return (isSearchEnabled\n-                        ? RealmRestClient.search(RealmsUtils.buildQuery(input)).getResult()\n-                        : RealmRestClient.list(SyncopeConstants.ROOT_REALM)).\n-                        stream().filter(realm -> SyncopeConsoleSession.get().getAuthRealms().stream().\n-                        anyMatch(authRealm -> realm.getFullPath().startsWith(authRealm))).\n+                return (RealmsUtils.checkInput(input)\n+                        ? (RealmRestClient.search(fullRealmsTree\n+                                ? RealmsUtils.buildRootQuery()\n+                                : RealmsUtils.buildKeywordQuery(input)).getResult())\n+                        : List.<RealmTO>of()).stream().\n                         map(RealmTO::getFullPath).collect(Collectors.toList()).iterator();\n             }\n         };"},{"sha":"14a8a1ed0a134849c2834c15694af17744bf6b97","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/ConsoleProperties.java","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FConsoleProperties.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FConsoleProperties.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FConsoleProperties.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -72,6 +72,8 @@ public void setQueueCapacity(final int queueCapacity) {\n \n     private String defaultAnyPanelClass = AnyPanel.class.getName();\n \n+    private int realmsFullTreeThreshold = 20;\n+\n     private final Topology topology = new Topology();\n \n     @Override\n@@ -84,6 +86,10 @@ public void setAdminUser(final String adminUser) {\n         this.adminUser = adminUser;\n     }\n \n+    public Map<String, Class<? extends BasePage>> getPage() {\n+        return page;\n+    }\n+\n     public String getDefaultAnyPanelClass() {\n         return defaultAnyPanelClass;\n     }\n@@ -92,8 +98,12 @@ public void setDefaultAnyPanelClass(final String defaultAnyPanelClass) {\n         this.defaultAnyPanelClass = defaultAnyPanelClass;\n     }\n \n-    public Map<String, Class<? extends BasePage>> getPage() {\n-        return page;\n+    public int getRealmsFullTreeThreshold() {\n+        return realmsFullTreeThreshold;\n+    }\n+\n+    public void setRealmsFullTreeThreshold(final int realmsFullTreeThreshold) {\n+        this.realmsFullTreeThreshold = realmsFullTreeThreshold;\n     }\n \n     public Topology getTopology() {"},{"sha":"a80fa45cd4c7e56cf0509125a9ec21bd5f489ce9","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -286,7 +286,7 @@ public List<String> getAuthRealms() {\n     }\n \n     public List<String> getSearchableRealms() {\n-        Set<String> roots = auth.get(IdRepoEntitlement.REALM_LIST);\n+        Set<String> roots = auth.get(IdRepoEntitlement.REALM_SEARCH);\n         return CollectionUtils.isEmpty(roots)\n                 ? List.of()\n                 : roots.stream().sorted().collect(Collectors.toList());"},{"sha":"a5de408b57fc0ae7646a4f269ce3976f6a8c861e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeWebApplication.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.client.console;\n \n+\n import com.giffing.wicket.spring.boot.starter.app.WicketBootSecuredWebApplication;\n import de.agilecoders.wicket.core.Bootstrap;\n import de.agilecoders.wicket.core.settings.BootstrapSettings;\n@@ -33,13 +34,15 @@\n import org.apache.syncope.client.console.commons.ExternalResourceProvider;\n import org.apache.syncope.client.console.commons.ImplementationInfoProvider;\n import org.apache.syncope.client.console.commons.PolicyTabProvider;\n+import org.apache.syncope.client.console.commons.RealmsUtils;\n import org.apache.syncope.client.console.commons.StatusProvider;\n import org.apache.syncope.client.console.commons.VirSchemaDetailsPanelProvider;\n import org.apache.syncope.client.console.init.ClassPathScanImplementationLookup;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.pages.Dashboard;\n import org.apache.syncope.client.console.pages.Login;\n import org.apache.syncope.client.console.pages.MustChangePassword;\n+import org.apache.syncope.client.console.rest.RealmRestClient;\n import org.apache.syncope.client.console.wizards.any.UserFormFinalizer;\n import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClient;\n@@ -51,6 +54,7 @@\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n+import org.apache.syncope.common.rest.api.beans.RealmQuery;\n import org.apache.wicket.Page;\n import org.apache.wicket.authroles.authentication.AbstractAuthenticatedWebSession;\n import org.apache.wicket.authroles.authentication.AuthenticatedWebSession;\n@@ -303,6 +307,17 @@ public int getMaxUploadFileSizeMB() {\n         return props.getMaxUploadFileSizeMB();\n     }\n \n+    public boolean fullRealmsTree() {\n+        if (props.getRealmsFullTreeThreshold() <= 0) {\n+            return false;\n+        }\n+\n+        RealmQuery query = RealmsUtils.buildRootQuery();\n+        query.setPage(1);\n+        query.setSize(0);\n+        return RealmRestClient.search(query).getTotalCount() < props.getRealmsFullTreeThreshold();\n+    }\n+\n     public ExternalResourceProvider getResourceProvider() {\n         return resourceProvider;\n     }"},{"sha":"375ec10b4414da7495b53be347bdb66ccdb2d863","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/RealmsUtils.java","status":"modified","additions":8,"deletions":24,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FRealmsUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FRealmsUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FRealmsUtils.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -18,21 +18,12 @@\n  */\n package org.apache.syncope.client.console.commons;\n \n-import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.syncope.client.console.rest.RealmRestClient;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.rest.api.beans.RealmQuery;\n \n public final class RealmsUtils {\n \n-    public static final int REALMS_VIEW_SIZE = 20;\n-\n-    private RealmsUtils() {\n-        // private constructor for static utility class\n-    }\n-\n     public static String getFullPath(final String fullpath) {\n         String display = fullpath;\n         if (display.indexOf('@') != -1) {\n@@ -41,26 +32,19 @@ public static String getFullPath(final String fullpath) {\n         return display;\n     }\n \n-    public static boolean isSearchEnabled() {\n-        return isSearchEnabled(SyncopeConsoleSession.get().getAuthRealms());\n+    public static boolean checkInput(final String input) {\n+        return StringUtils.isNotBlank(input) && !\"*\".equals(input);\n     }\n \n-    public static boolean isSearchEnabled(final List<String> realms) {\n-        return realms.isEmpty()\n-                ? false\n-                : RealmRestClient.search(\n-                        new RealmQuery.Builder().keyword(\n-                                realms.contains(SyncopeConstants.ROOT_REALM)\n-                                ? SyncopeConstants.ROOT_REALM\n-                                : realms.get(0)).build()).\n-                        getTotalCount() > REALMS_VIEW_SIZE;\n+    public static RealmQuery buildKeywordQuery(final String input) {\n+        return new RealmQuery.Builder().keyword(input.contains(\"*\") ? input : \"*\" + input + \"*\").build();\n     }\n \n-    public static boolean checkInput(final String input) {\n-        return StringUtils.isNotBlank(input) && !\"*\".equals(input);\n+    public static RealmQuery buildRootQuery() {\n+        return new RealmQuery.Builder().base(SyncopeConstants.ROOT_REALM).build();\n     }\n \n-    public static RealmQuery buildQuery(final String input) {\n-        return new RealmQuery.Builder().keyword(input.contains(\"*\") ? input : \"*\" + input + \"*\").build();\n+    private RealmsUtils() {\n+        // private constructor for static utility class\n     }\n }"},{"sha":"9a27bef0961c315c5402c1035d9b4f6beb7c9e7c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/BasePage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -149,7 +149,7 @@ public void onClick() {\n         body.add(liContainer);\n \n         BookmarkablePageLink<? extends BasePage> link = BookmarkablePageLinkBuilder.build(\"realms\", Realms.class);\n-        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, IdRepoEntitlement.REALM_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, IdRepoEntitlement.REALM_SEARCH);\n \n         liContainer.add(link);\n "},{"sha":"d36cb813a27672e4f35949a7d13355f568a063a2","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RealmChoicePanel.java","status":"modified","additions":40,"deletions":38,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -38,6 +38,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.commons.RealmsUtils;\n import org.apache.syncope.client.console.rest.RealmRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.WebMarkupContainerNoVeil;\n@@ -47,6 +48,7 @@\n import org.apache.syncope.common.lib.to.DynRealmTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.common.rest.api.beans.RealmQuery;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n@@ -92,16 +94,16 @@ public class RealmChoicePanel extends Panel {\n \n     protected List<RealmTO> realmsChoices;\n \n-    protected final boolean isSearchEnabled;\n+    protected final boolean fullRealmsTree;\n \n     protected final ListView<String> breadcrumb;\n \n-    public RealmChoicePanel(final String id, final String initialRealm, final PageReference pageRef) {\n+    public RealmChoicePanel(final String id, final String base, final PageReference pageRef) {\n         super(id);\n         this.pageRef = pageRef;\n \n         tree = new HashMap<>();\n-        isSearchEnabled = RealmsUtils.isSearchEnabled(SyncopeConsoleSession.get().getSearchableRealms());\n+        fullRealmsTree = SyncopeWebApplication.get().fullRealmsTree();\n \n         realmTree = new LoadableDetachableModel<>() {\n \n@@ -111,13 +113,13 @@ public RealmChoicePanel(final String id, final String initialRealm, final PageRe\n             protected List<Pair<String, RealmTO>> load() {\n                 Map<String, Pair<RealmTO, List<RealmTO>>> map = reloadRealmParentMap();\n                 Stream<Pair<String, RealmTO>> full;\n-                if (isSearchEnabled) {\n-                    full = map.entrySet().stream().\n-                            map(el -> Pair.of(el.getKey(), el.getValue().getLeft()));\n-                } else {\n+                if (fullRealmsTree) {\n                     full = map.entrySet().stream().\n                             map(el -> Pair.of(el.getValue().getLeft().getFullPath(), el.getValue().getKey())).\n                             sorted(Comparator.comparing(Pair::getLeft));\n+                } else {\n+                    full = map.entrySet().stream().\n+                            map(el -> Pair.of(el.getKey(), el.getValue().getLeft()));\n                 }\n                 return full.filter(realm -> SyncopeConsoleSession.get().getSearchableRealms().stream().anyMatch(\n                         availableRealm -> realm.getValue().getFullPath().startsWith(availableRealm))).\n@@ -147,11 +149,11 @@ protected List<DynRealmTO> load() {\n             }\n         };\n \n-        RealmTO realm = SyncopeConsoleSession.get().getRootRealm(initialRealm).map(rootRealm -> {\n+        RealmTO realm = SyncopeConsoleSession.get().getRootRealm(base).map(rootRealm -> {\n             String rootRealmName = StringUtils.substringAfterLast(rootRealm, \"/\");\n \n             List<RealmTO> realmTOs = RealmRestClient.search(\n-                    RealmsUtils.buildQuery(SyncopeConstants.ROOT_REALM.equals(rootRealm)\n+                    RealmsUtils.buildKeywordQuery(SyncopeConstants.ROOT_REALM.equals(rootRealm)\n                             ? SyncopeConstants.ROOT_REALM : rootRealmName)).getResult();\n \n             return realmTOs.stream().\n@@ -187,8 +189,8 @@ protected void populateItem(final ListItem<String> item) {\n \n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n-                        RealmRestClient.list(item.getModelObject()).stream().\n-                                filter(r -> item.getModelObject().equals(r.getFullPath())).\n+                        RealmRestClient.search(\n+                                new RealmQuery.Builder().base(item.getModelObject()).build()).getResult().stream().\n                                 findFirst().ifPresent(t -> chooseRealm(t, target));\n                     }\n                 };\n@@ -202,7 +204,7 @@ public void onClick(final AjaxRequestTarget target) {\n         container.addOrReplace(breadcrumb.setOutputMarkupId(true).setOutputMarkupPlaceholderTag(true));\n         setBreadcrumb(model.getObject());\n \n-        reloadRealmTree();\n+        reloadRealmsTree();\n     }\n \n     protected void setBreadcrumb(final RealmTO realm) {\n@@ -232,8 +234,28 @@ protected void chooseRealm(final RealmTO realm, final AjaxRequestTarget target)\n         send(pageRef.getPage(), Broadcast.EXACT, new ChosenRealm<>(realm, target));\n     }\n \n-    public void reloadRealmTree() {\n-        if (isSearchEnabled) {\n+    public void reloadRealmsTree() {\n+        if (fullRealmsTree) {\n+            DropDownButton realms = new DropDownButton(\n+                    \"realms\", new ResourceModel(\"select\", \"\"), new Model<>(FontAwesome5IconType.folder_open_r)) {\n+\n+                private static final long serialVersionUID = -5560086780455361131L;\n+\n+                @Override\n+                protected List<AbstractLink> newSubMenuButtons(final String buttonMarkupId) {\n+                    buildRealmLinks();\n+                    return RealmChoicePanel.this.links;\n+                }\n+            };\n+            realms.setOutputMarkupId(true);\n+            realms.setAlignment(DropDownAlignmentBehavior.Alignment.RIGHT);\n+            realms.setType(Buttons.Type.Menu);\n+\n+            MetaDataRoleAuthorizationStrategy.authorize(realms, ENABLE, IdRepoEntitlement.REALM_SEARCH);\n+            Fragment fragment = new Fragment(\"realmsFragment\", \"realmsListFragment\", container);\n+            fragment.addOrReplace(realms);\n+            container.addOrReplace(fragment);\n+        } else {\n             realmsChoices = buildRealmChoices();\n             AutoCompleteSettings settings = new AutoCompleteSettings();\n             settings.setShowCompleteListOnFocusGain(false);\n@@ -294,26 +316,6 @@ protected void onUpdate(final AjaxRequestTarget target) {\n             Fragment fragment = new Fragment(\"realmsFragment\", \"realmsSearchFragment\", container);\n             fragment.addOrReplace(searchRealms);\n             container.addOrReplace(fragment);\n-        } else {\n-            DropDownButton realms = new DropDownButton(\n-                    \"realms\", new ResourceModel(\"select\", \"\"), new Model<>(FontAwesome5IconType.folder_open_r)) {\n-\n-                private static final long serialVersionUID = -5560086780455361131L;\n-\n-                @Override\n-                protected List<AbstractLink> newSubMenuButtons(final String buttonMarkupId) {\n-                    buildRealmLinks();\n-                    return RealmChoicePanel.this.links;\n-                }\n-            };\n-            realms.setOutputMarkupId(true);\n-            realms.setAlignment(DropDownAlignmentBehavior.Alignment.RIGHT);\n-            realms.setType(Buttons.Type.Menu);\n-\n-            MetaDataRoleAuthorizationStrategy.authorize(realms, ENABLE, IdRepoEntitlement.REALM_LIST);\n-            Fragment fragment = new Fragment(\"realmsFragment\", \"realmsListFragment\", container);\n-            fragment.addOrReplace(realms);\n-            container.addOrReplace(fragment);\n         }\n     }\n \n@@ -419,7 +421,7 @@ protected List<RealmTO> buildRealmChoices() {\n     }\n \n     public final RealmChoicePanel reloadRealmTree(final AjaxRequestTarget target) {\n-        reloadRealmTree();\n+        reloadRealmsTree();\n         chooseRealm(model.getObject(), target);\n         target.add(container);\n         return this;\n@@ -432,9 +434,9 @@ public final RealmChoicePanel reloadRealmTree(final AjaxRequestTarget target, fi\n     }\n \n     protected Map<String, Pair<RealmTO, List<RealmTO>>> reloadRealmParentMap() {\n-        List<RealmTO> realmsToList = isSearchEnabled\n-                ? RealmRestClient.search(RealmsUtils.buildQuery(searchQuery)).getResult()\n-                : RealmRestClient.list(SyncopeConstants.ROOT_REALM);\n+        List<RealmTO> realmsToList = RealmRestClient.search(fullRealmsTree\n+                ? RealmsUtils.buildRootQuery()\n+                : RealmsUtils.buildKeywordQuery(searchQuery)).getResult();\n \n         return reloadRealmParentMap(realmsToList.stream().\n                 sorted(Comparator.comparing(RealmTO::getName))."},{"sha":"73ccaf96a73921560f60ea548ee787dea96a704c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/RealmRestClient.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRealmRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRealmRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRealmRestClient.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -40,10 +40,6 @@ public static PagedResult<RealmTO> search(final RealmQuery query) {\n         return getService(RealmService.class).search(query);\n     }\n \n-    public static List<RealmTO> list(final String fullpath) {\n-        return getService(RealmService.class).list(fullpath);\n-    }\n-\n     public static List<DynRealmTO> listDynRealms() {\n         return getService(DynRealmService.class).list();\n     }"},{"sha":"f45cb0c40a3b6f4476859fdde015eebca9e3b417","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -71,12 +71,12 @@\n \n     private CrontabPanel crontabPanel;\n \n-    private final boolean isSearchEnabled;\n+    private final boolean fullRealmsTree;\n \n     public SchedTaskWizardBuilder(final TaskType type, final T taskTO, final PageReference pageRef) {\n         super(taskTO, pageRef);\n         this.type = type;\n-        this.isSearchEnabled = RealmsUtils.isSearchEnabled();\n+        this.fullRealmsTree = SyncopeWebApplication.get().fullRealmsTree();\n     }\n \n     @Override\n@@ -105,10 +105,11 @@ protected WizardModel buildModelSteps(final SchedTaskTO modelObject, final Wizar\n         return wizardModel;\n     }\n \n-    private List<RealmTO> searchRealms(final String realmQuery) {\n-        return isSearchEnabled\n-                ? RealmRestClient.search(RealmsUtils.buildQuery(realmQuery)).getResult()\n-                : RealmRestClient.list(SyncopeConstants.ROOT_REALM);\n+    protected List<String> searchRealms(final String realmQuery) {\n+        return RealmRestClient.search(fullRealmsTree\n+                ? RealmsUtils.buildRootQuery()\n+                : RealmsUtils.buildKeywordQuery(realmQuery)).\n+                getResult().stream().map(RealmTO::getFullPath).collect(Collectors.toList());\n     }\n \n     public class Profile extends WizardStep {\n@@ -154,8 +155,8 @@ public Profile(final SchedTaskTO taskTO) {\n             add(jobDelegate);\n \n             AutoCompleteSettings settings = new AutoCompleteSettings();\n-            settings.setShowCompleteListOnFocusGain(!isSearchEnabled);\n-            settings.setShowListOnEmptyInput(!isSearchEnabled);\n+            settings.setShowCompleteListOnFocusGain(fullRealmsTree);\n+            settings.setShowListOnEmptyInput(fullRealmsTree);\n \n             // ------------------------------\n             // Only for macro tasks\n@@ -172,7 +173,7 @@ public Profile(final SchedTaskTO taskTO) {\n                 @Override\n                 protected Iterator<String> getChoices(final String input) {\n                     return (RealmsUtils.checkInput(input)\n-                            ? searchRealms(input).stream().map(RealmTO::getFullPath).collect(Collectors.toList())\n+                            ? searchRealms(input)\n                             : List.<String>of()).iterator();\n                 }\n             };\n@@ -247,7 +248,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 @Override\n                 protected Iterator<String> getChoices(final String input) {\n                     return (RealmsUtils.checkInput(input)\n-                            ? searchRealms(input).stream().map(RealmTO::getFullPath).collect(Collectors.toList())\n+                            ? searchRealms(input)\n                             : List.<String>of()).iterator();\n                 }\n             };\n@@ -283,7 +284,7 @@ protected Iterator<String> getChoices(final String input) {\n                 @Override\n                 protected Iterator<String> getChoices(final String input) {\n                     return (RealmsUtils.checkInput(input)\n-                            ? searchRealms(input).stream().map(RealmTO::getFullPath).collect(Collectors.toList())\n+                            ? searchRealms(input)\n                             : List.<String>of()).iterator();\n                 }\n             };"},{"sha":"761d683568f7a5fa0269fc99c81cbe6eba889a4e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Details.java","status":"modified","additions":13,"deletions":17,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -18,19 +18,18 @@\n  */\n package org.apache.syncope.client.console.wizards.any;\n \n-import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.commons.RealmsUtils;\n import org.apache.syncope.client.console.pages.Realms;\n import org.apache.syncope.client.console.rest.RealmRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxSearchFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.FieldPanel;\n import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.wicket.Component;\n@@ -70,10 +69,10 @@ public Details(\n             AjaxTextFieldPanel.class.cast(realm).enableJexlHelp();\n             fragment = new Fragment(\"realmsFragment\", \"realmsTemplateFragment\", this);\n         } else {\n-            boolean isSearchEnabled = RealmsUtils.isSearchEnabled();\n-            final AutoCompleteSettings settings = new AutoCompleteSettings();\n-            settings.setShowCompleteListOnFocusGain(!isSearchEnabled);\n-            settings.setShowListOnEmptyInput(!isSearchEnabled);\n+            boolean fullRealmsTree = SyncopeWebApplication.get().fullRealmsTree();\n+            AutoCompleteSettings settings = new AutoCompleteSettings();\n+            settings.setShowCompleteListOnFocusGain(fullRealmsTree);\n+            settings.setShowListOnEmptyInput(fullRealmsTree);\n \n             realm = new AjaxSearchFieldPanel(\"destinationRealm\", \"destinationRealm\",\n                     new PropertyModel<>(inner, \"realm\"), settings) {\n@@ -82,11 +81,11 @@ public Details(\n \n                 @Override\n                 protected Iterator<String> getChoices(final String input) {\n-                    return (isSearchEnabled\n-                            ? RealmRestClient.search(RealmsUtils.buildQuery(input)).getResult()\n-                            : pageRef.getPage() instanceof Realms\n+                    return (pageRef.getPage() instanceof Realms\n                             ? getRealmsFromLinks(Realms.class.cast(pageRef.getPage()).getRealmChoicePanel().getLinks())\n-                            : RealmRestClient.list(SyncopeConstants.ROOT_REALM)).\n+                            : (fullRealmsTree\n+                                    ? RealmRestClient.search(RealmsUtils.buildRootQuery())\n+                                    : RealmRestClient.search(RealmsUtils.buildKeywordQuery(input))).getResult()).\n                             stream().filter(realm -> authRealms.stream().anyMatch(\n                             authRealm -> realm.getFullPath().startsWith(authRealm))).\n                             map(RealmTO::getFullPath).collect(Collectors.toList()).iterator();\n@@ -112,13 +111,10 @@ protected AnnotatedBeanPanel getGeneralStatusInformation(final String id, final\n     }\n \n     private static List<RealmTO> getRealmsFromLinks(final List<AbstractLink> realmLinks) {\n-        List<RealmTO> realms = new ArrayList<>();\n-\n-        realmLinks.stream().\n+        return realmLinks.stream().\n                 map(Component::getDefaultModelObject).\n-                filter(modelObject -> modelObject instanceof RealmTO).\n-                forEachOrdered(modelObject -> realms.add((RealmTO) modelObject));\n-\n-        return realms;\n+                filter(RealmTO.class::isInstance).\n+                map(RealmTO.class::cast).\n+                collect(Collectors.toList());\n     }\n }"},{"sha":"c96226134322b0feeafd9e03a710021a88a3d630","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/role/RoleWizardBuilder.java","status":"modified","additions":37,"deletions":11,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Frole%2FRoleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Frole%2FRoleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Frole%2FRoleWizardBuilder.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -20,26 +20,33 @@\n \n import java.io.Serializable;\n import java.util.ArrayList;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.SyncopeWebApplication;\n+import org.apache.syncope.client.console.commons.RealmsUtils;\n import org.apache.syncope.client.console.panels.search.UserSearchPanel;\n import org.apache.syncope.client.console.rest.ApplicationRestClient;\n import org.apache.syncope.client.console.rest.DynRealmRestClient;\n import org.apache.syncope.client.console.rest.RealmRestClient;\n import org.apache.syncope.client.console.rest.RoleRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxSearchFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n import org.apache.syncope.client.console.wizards.BaseAjaxWizardBuilder;\n import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AbstractFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.client.ui.commons.markup.html.form.FieldPanel;\n import org.apache.syncope.client.ui.commons.wicket.markup.html.bootstrap.tabs.Accordion;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizardBuilder;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.DynRealmTO;\n import org.apache.syncope.common.lib.to.PrivilegeTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.wicket.PageReference;\n+import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteSettings;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n import org.apache.wicket.extensions.wizard.WizardModel;\n import org.apache.wicket.extensions.wizard.WizardStep;\n@@ -99,7 +106,7 @@ protected WizardModel buildModelSteps(final RoleWrapper modelObject, final Wizar\n         return wizardModel;\n     }\n \n-    public class Details extends WizardStep {\n+    protected class Details extends WizardStep {\n \n         private static final long serialVersionUID = 5514523040031722255L;\n \n@@ -129,7 +136,7 @@ public Panel getPanel(final String panelId) {\n         }\n     }\n \n-    public static class Entitlements extends WizardStep {\n+    protected static class Entitlements extends WizardStep {\n \n         private static final long serialVersionUID = 5514523040031722256L;\n \n@@ -155,21 +162,40 @@ public void setObject(final List<String> object) {\n         }\n     }\n \n-    public static class Realms extends WizardStep {\n+    protected static class Realms extends WizardStep {\n \n         private static final long serialVersionUID = 5514523040031722257L;\n \n+        @SuppressWarnings(\"unchecked\")\n         public Realms(final RoleTO modelObject) {\n             setTitleModel(new ResourceModel(\"realms\"));\n-            add(new AjaxPalettePanel.Builder<>().build(\"realms\",\n-                    new PropertyModel<>(modelObject, \"realms\"),\n-                    new ListModel<>(RealmRestClient.list(SyncopeConstants.ROOT_REALM).stream().\n-                            map(RealmTO::getFullPath).collect(Collectors.toList()))).\n-                    hideLabel().setOutputMarkupId(true));\n+\n+            boolean fullRealmsTree = SyncopeWebApplication.get().fullRealmsTree();\n+            AutoCompleteSettings settings = new AutoCompleteSettings();\n+            settings.setShowCompleteListOnFocusGain(fullRealmsTree);\n+            settings.setShowListOnEmptyInput(fullRealmsTree);\n+            AbstractFieldPanel<?> realm = new AjaxSearchFieldPanel(\n+                    \"panel\", \"realm\", new Model<>(), settings) {\n+\n+                private static final long serialVersionUID = -6390474600233486704L;\n+\n+                @Override\n+                protected Iterator<String> getChoices(final String input) {\n+                    return RealmRestClient.search(fullRealmsTree\n+                            ? RealmsUtils.buildRootQuery()\n+                            : RealmsUtils.buildKeywordQuery(input)).getResult().stream().\n+                            map(RealmTO::getFullPath).collect(Collectors.toList()).iterator();\n+                }\n+            };\n+            add(new MultiFieldPanel.Builder<>(\n+                    new PropertyModel<>(modelObject, \"realms\")).build(\n+                    \"realms\",\n+                    \"realms\",\n+                    (FieldPanel) realm).hideLabel());\n         }\n     }\n \n-    public static class DynRealms extends WizardStep {\n+    protected static class DynRealms extends WizardStep {\n \n         private static final long serialVersionUID = 6846234574424462255L;\n \n@@ -183,7 +209,7 @@ public DynRealms(final RoleTO modelObject) {\n         }\n     }\n \n-    public static class Privileges extends WizardStep {\n+    protected static class Privileges extends WizardStep {\n \n         private static final long serialVersionUID = 6896014330702958579L;\n "},{"sha":"ca80121a3681e9d0a07879ead41b71577cef3c63","filename":"client/idrepo/console/src/main/resources/console.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -66,6 +66,8 @@ console.page.topology=org.apache.syncope.client.console.topology.Topology\n \n console.default-any-panel-class=org.apache.syncope.client.console.panels.AnyPanel\n \n+console.realms-full-tree-threshold=20\n+\n console.topology.corePoolSize=10\n console.topology.maxPoolSize=20\n console.topology.queueCapacity=50"},{"sha":"debec15deaa83f55c4b394db82455325db6fe4e5","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/panels/any/UserDetails.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FUserDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FUserDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FUserDetails.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -19,17 +19,16 @@\n package org.apache.syncope.client.enduser.panels.any;\n \n import de.agilecoders.wicket.extensions.markup.html.bootstrap.form.password.strength.PasswordStrengthBehavior;\n-import java.util.stream.Collectors;\n+import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.enduser.rest.RealmRestClient;\n import org.apache.syncope.client.ui.commons.ajax.markup.html.LabelInfo;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.FieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.SyncopePasswordStrengthConfig;\n import org.apache.syncope.client.ui.commons.wizards.any.PasswordPanel;\n import org.apache.syncope.client.ui.commons.wizards.any.UserWrapper;\n-import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.markup.html.basic.Label;\n@@ -41,8 +40,6 @@ public class UserDetails extends Details<UserTO> {\n \n     private static final long serialVersionUID = 6592027822510220463L;\n \n-    private final FieldPanel<String> realm;\n-\n     protected final AjaxTextFieldPanel username;\n \n     protected final UserTO userTO;\n@@ -68,12 +65,15 @@ public UserDetails(final String id, final UserWrapper wrapper, final PageReferen\n         // ------------------------\n         // Realm\n         // ------------------------\n-        realm = new AjaxDropDownChoicePanel<>(\n-                \"destinationRealm\", \"destinationRealm\", new PropertyModel<>(userTO, \"realm\"), false);\n+        add(buildDestinationRealm());\n+    }\n \n-        ((AjaxDropDownChoicePanel<String>) realm).setChoices(\n-                RealmRestClient.list().stream().map(RealmTO::getFullPath).collect(Collectors.toList()));\n-        add(realm);\n+    protected FieldPanel<String> buildDestinationRealm() {\n+        AjaxDropDownChoicePanel<String> destinationRealm = new AjaxDropDownChoicePanel<>(\n+                \"destinationRealm\", \"destinationRealm\", new PropertyModel<>(userTO, \"realm\"), false);\n+        destinationRealm.setNullValid(false);\n+        destinationRealm.setChoices(List.of(SyncopeConstants.ROOT_REALM));\n+        return destinationRealm;\n     }\n \n     protected static class EditUserPasswordPanel extends Panel {"},{"sha":"202c9c2ea0f1c74b74f66866b1de8a0d6134253f","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/AbstractAnyRestClient.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FAbstractAnyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FAbstractAnyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FAbstractAnyRestClient.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -32,5 +32,4 @@\n     public TO read(final String key) {\n         return getService(getAnyServiceClass()).read(key);\n     }\n-\n }"},{"sha":"4df6b64ce605f693b04a2e1262c8751a966afb94","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/GroupRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FGroupRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FGroupRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FGroupRestClient.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -33,7 +33,7 @@\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n \n /**\n- * Console client for invoking Rest Group's services.\n+ * Enduser client for invoking Rest Group's services.\n  */\n public class GroupRestClient extends AbstractAnyRestClient<GroupTO> {\n "},{"sha":"def9fd03ccfd4e0be20651c3f7163985e6abfaed","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/RealmRestClient.java","status":"removed","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c011c0998bf1302f60fffdeae539f3c5e0b2880a/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FRealmRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c011c0998bf1302f60fffdeae539f3c5e0b2880a/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FRealmRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FRealmRestClient.java?ref=c011c0998bf1302f60fffdeae539f3c5e0b2880a","patch":"@@ -1,36 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.enduser.rest;\n-\n-import java.util.List;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.RealmTO;\n-import org.apache.syncope.common.rest.api.service.RealmService;\n-\n-/**\n- * Console client for invoking REST Realm's services.\n- */\n-public class RealmRestClient extends BaseRestClient {\n-\n-    private static final long serialVersionUID = -8549081557283519638L;\n-\n-    public static List<RealmTO> list() {\n-        return getService(RealmService.class).list(SyncopeConstants.ROOT_REALM);\n-    }\n-}"},{"sha":"c598eb540aa9c85c0193af170f347d1d6133859f","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/SchemaRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSchemaRestClient.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -35,7 +35,7 @@\n import org.apache.syncope.common.rest.api.service.SchemaService;\n \n /**\n- * Console client for invoking rest schema services.\n+ * Enduser client for invoking rest schema services.\n  */\n public class SchemaRestClient extends BaseRestClient {\n "},{"sha":"350f622b06d96ff7c4ad5d8659f7a1be9758b693","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/SecurityQuestionRestClient.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSecurityQuestionRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSecurityQuestionRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSecurityQuestionRestClient.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -29,5 +29,4 @@ public class SecurityQuestionRestClient extends BaseRestClient {\n     public static List<SecurityQuestionTO> list() {\n         return getService(SecurityQuestionService.class).list();\n     }\n-\n }"},{"sha":"1fc48fe143e097b62369ef985a8c8b199ae6ea5a","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/IdRepoEntitlement.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoEntitlement.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -38,7 +38,7 @@ public final class IdRepoEntitlement {\n \n     public static final String DOMAIN_DELETE = \"DOMAIN_DELETE\";\n \n-    public static final String REALM_LIST = \"REALM_LIST\";\n+    public static final String REALM_SEARCH = \"REALM_SEARCH\";\n \n     public static final String REALM_CREATE = \"REALM_CREATE\";\n "},{"sha":"0858b356803bfbc1f79baea1337dc4790053195b","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/RealmQuery.java","status":"modified","additions":8,"deletions":10,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FRealmQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FRealmQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FRealmQuery.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -19,31 +19,29 @@\n package org.apache.syncope.common.rest.api.beans;\n \n import jakarta.ws.rs.QueryParam;\n-import java.io.Serializable;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n-public class RealmQuery implements Serializable {\n+public class RealmQuery extends AbstractQuery {\n \n     private static final long serialVersionUID = -2278419397595186866L;\n \n-    public static class Builder {\n+    public static class Builder extends AbstractQuery.Builder<RealmQuery, Builder> {\n \n-        private final RealmQuery instance = new RealmQuery();\n+        @Override\n+        protected RealmQuery newInstance() {\n+            return new RealmQuery();\n+        }\n \n         public Builder keyword(final String keyword) {\n-            instance.setKeyword(keyword);\n+            getInstance().setKeyword(keyword);\n             return this;\n         }\n \n         public Builder base(final String base) {\n-            instance.setBase(base);\n+            getInstance().setBase(base);\n             return this;\n         }\n-\n-        public RealmQuery build() {\n-            return instance;\n-        }\n     }\n \n     private String keyword;"},{"sha":"bda03ccb4cc21158994e2151c3a00291c02f266a","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RealmService.java","status":"modified","additions":2,"deletions":17,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -41,7 +41,6 @@\n import jakarta.ws.rs.core.HttpHeaders;\n import jakarta.ws.rs.core.MediaType;\n import jakarta.ws.rs.core.Response;\n-import java.util.List;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n@@ -59,29 +58,15 @@\n public interface RealmService extends JAXRSService {\n \n     /**\n-     * Returns a list of existing realms matching the given query (not including descendant realms) and the total number\n-     * of descendant realms.\n+     * Returns a paged list of existing realms matching the given query.\n      *\n      * @param query query conditions\n-     * @return list of existing realms matching the given query (not including descendant realms) and the total number\n-     * of descedant realms\n+     * @return paged list of existing realms matching the given query\n      */\n     @GET\n-    @Path(\"search\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     PagedResult<RealmTO> search(@BeanParam RealmQuery query);\n \n-    /**\n-     * Returns realms rooted at the given path, including descendant realms.\n-     *\n-     * @param fullPath full path of the root realm where to read from\n-     * @return realms rooted at the given path, including descendant realms\n-     */\n-    @GET\n-    @Path(\"{fullPath:.*}\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    List<RealmTO> list(@NotNull @PathParam(\"fullPath\") String fullPath);\n-\n     /**\n      * Creates a new realm under the given path.\n      *"},{"sha":"69372e809535a907f3f6dd63651681fe1913e115","filename":"common/keymaster/client-api/src/main/resources/defaultContent.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fresources%2FdefaultContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fresources%2FdefaultContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fresources%2FdefaultContent.xml?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -18,7 +18,7 @@ specific language governing permissions and limitations\n under the License.\n -->\n <dataset>\n-  <Realm id=\"ea696a4f-e77a-4ef1-be67-8f8093bc8686\" name=\"/\"/>\n+  <Realm id=\"ea696a4f-e77a-4ef1-be67-8f8093bc8686\" name=\"/\" fullPath=\"/\"/>\n \n   <AnyType id=\"USER\" kind=\"USER\"/>\n   <AnyTypeClass id=\"BaseUser\"/>"},{"sha":"24118f9d671bfb89aa1b9918270bb22858ef888c","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java","status":"modified","additions":22,"deletions":51,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -100,67 +100,42 @@ public RealmLogic(\n         this.taskExecutor = taskExecutor;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REALM_LIST + \"')\")\n+    @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n-    public Pair<Integer, List<RealmTO>> search(final String keyword, final String base) {\n-        Realm baseRealm = base == null ? realmDAO.getRoot() : realmDAO.findByFullPath(base);\n-        if (baseRealm == null) {\n-            LOG.error(\"Could not find realm '\" + base + \"'\");\n-\n-            throw new NotFoundException(base);\n-        }\n+    public Pair<Integer, List<RealmTO>> search(\n+            final String keyword,\n+            final String base,\n+            final int page,\n+            final int size) {\n \n-        Set<String> roots = AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.REALM_LIST).stream().\n-                filter(auth -> auth.startsWith(baseRealm.getFullPath())).collect(Collectors.toSet());\n+        Realm baseRealm = Optional.ofNullable(base == null ? realmDAO.getRoot() : realmDAO.findByFullPath(base)).\n+                orElseThrow(() -> new NotFoundException(base));\n \n-        Set<Realm> match = realmDAO.findMatching(keyword).stream().\n-                filter(realm -> roots.stream().anyMatch(root -> realm.getFullPath().startsWith(root))).\n-                collect(Collectors.toSet());\n+        int count = realmDAO.countDescendants(baseRealm.getFullPath(), keyword);\n \n-        int descendants = Math.toIntExact(\n-                match.stream().flatMap(realm -> realmDAO.findDescendants(realm).stream()).distinct().count());\n+        List<Realm> result = realmDAO.findDescendants(baseRealm.getFullPath(), keyword, page, size);\n \n         return Pair.of(\n-                descendants,\n-                match.stream().map(realm -> binder.getRealmTO(realm, true)).\n+                count,\n+                result.stream().map(realm -> binder.getRealmTO(\n+                realm,\n+                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.REALM_SEARCH).stream().\n+                        anyMatch(auth -> realm.getFullPath().startsWith(auth)))).\n                         sorted(Comparator.comparing(RealmTO::getFullPath)).\n                         collect(Collectors.toList()));\n     }\n \n-    @PreAuthorize(\"isAuthenticated()\")\n-    @Transactional(readOnly = true)\n-    public List<RealmTO> list(final String fullPath) {\n-        Realm realm = realmDAO.findByFullPath(fullPath);\n-        if (realm == null) {\n-            LOG.error(\"Could not find realm '\" + fullPath + '\\'');\n-\n-            throw new NotFoundException(fullPath);\n-        }\n-\n-        boolean admin = AuthContextUtils.getAuthorizations().keySet().contains(IdRepoEntitlement.REALM_LIST);\n-        return realmDAO.findDescendants(realm).stream().\n-                map(descendant -> binder.getRealmTO(descendant, admin)).collect(Collectors.toList());\n-    }\n-\n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REALM_CREATE + \"')\")\n     public ProvisioningResult<RealmTO> create(final String parentPath, final RealmTO realmTO) {\n         Realm parent;\n         if (StringUtils.isBlank(realmTO.getParent())) {\n-            parent = realmDAO.findByFullPath(parentPath);\n-            if (parent == null) {\n-                LOG.error(\"Could not find parent realm \" + parentPath);\n-\n-                throw new NotFoundException(parentPath);\n-            }\n+            parent = Optional.ofNullable(realmDAO.findByFullPath(parentPath)).\n+                    orElseThrow(() -> new NotFoundException(parentPath));\n \n             realmTO.setParent(parent.getFullPath());\n         } else {\n-            parent = realmDAO.find(realmTO.getParent());\n-            if (parent == null) {\n-                LOG.error(\"Could not find parent realm \" + realmTO.getParent());\n-\n-                throw new NotFoundException(realmTO.getParent());\n-            }\n+            parent = Optional.ofNullable(realmDAO.find(realmTO.getParent())).\n+                    orElseThrow(() -> new NotFoundException(realmTO.getParent()));\n \n             if (!parent.getFullPath().equals(parentPath)) {\n                 SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPath);\n@@ -190,12 +165,8 @@ public ProvisioningResult<RealmTO> create(final String parentPath, final RealmTO\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REALM_UPDATE + \"')\")\n     public ProvisioningResult<RealmTO> update(final RealmTO realmTO) {\n-        Realm realm = realmDAO.findByFullPath(realmTO.getFullPath());\n-        if (realm == null) {\n-            LOG.error(\"Could not find realm '\" + realmTO.getFullPath() + '\\'');\n-\n-            throw new NotFoundException(realmTO.getFullPath());\n-        }\n+        Realm realm = Optional.ofNullable(realmDAO.findByFullPath(realmTO.getFullPath())).\n+                orElseThrow(() -> new NotFoundException(realmTO.getFullPath()));\n \n         Map<Pair<String, String>, Set<Attribute>> beforeAttrs = propagationManager.prepareAttrs(realm);\n \n@@ -219,7 +190,7 @@ public ProvisioningResult<RealmTO> update(final RealmTO realmTO) {\n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REALM_DELETE + \"')\")\n     public ProvisioningResult<RealmTO> delete(final String fullPath) {\n         Realm realm = Optional.ofNullable(realmDAO.findByFullPath(fullPath)).\n-                orElseThrow(() -> new NotFoundException(\"Realm \" + fullPath));\n+                orElseThrow(() -> new NotFoundException(fullPath));\n \n         if (!realmDAO.findChildren(realm).isEmpty()) {\n             throw SyncopeClientException.build(ClientExceptionType.RealmContains);"},{"sha":"6cebbee6d2baaa313be7a1593129804552fba600","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RealmServiceImpl.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRealmServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRealmServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRealmServiceImpl.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -21,6 +21,7 @@\n import jakarta.ws.rs.core.Response;\n import java.net.URI;\n import java.util.List;\n+import java.util.Optional;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -44,17 +45,14 @@ public RealmServiceImpl(final RealmLogic logic) {\n \n     @Override\n     public PagedResult<RealmTO> search(final RealmQuery query) {\n-        String keyword = query.getKeyword() == null ? null : query.getKeyword().replace('*', '%');\n-\n-        Pair<Integer, List<RealmTO>> result = logic.search(keyword, query.getBase());\n+        Pair<Integer, List<RealmTO>> result = logic.search(\n+                Optional.ofNullable(query.getKeyword()).map(k -> k.replace('*', '%')).orElse(null),\n+                query.getBase(),\n+                query.getPage(),\n+                query.getSize());\n         return buildPagedResult(result.getRight(), 1, result.getRight().size(), result.getLeft());\n     }\n \n-    @Override\n-    public List<RealmTO> list(final String fullPath) {\n-        return logic.list(StringUtils.prependIfMissing(fullPath, SyncopeConstants.ROOT_REALM));\n-    }\n-\n     @Override\n     public Response create(final String parentPath, final RealmTO realmTO) {\n         ProvisioningResult<RealmTO> created ="},{"sha":"e05eb840b577b3ab31fbc862ce6973f112ad6fbc","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RealmDAO.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -41,7 +41,9 @@ public interface RealmDAO extends DAO<Realm> {\n \n     List<Realm> findByResource(ExternalResource resource);\n \n-    List<Realm> findMatching(String keyword);\n+    int countDescendants(String base, String keyword);\n+\n+    List<Realm> findDescendants(String base, String keyword, int page, int itemsPerPage);\n \n     <T extends Policy> List<Realm> findByPolicy(T policy);\n \n@@ -51,13 +53,7 @@ public interface RealmDAO extends DAO<Realm> {\n \n     List<Realm> findChildren(Realm realm);\n \n-    List<Realm> findDescendants(Realm realm);\n-\n-    List<Realm> findAll();\n-\n     Realm save(Realm realm);\n \n     void delete(Realm realm);\n-\n-    void delete(String key);\n }"},{"sha":"56c5c7480173b90f82b1aea27b1576c446530255","filename":"core/persistence-jpa-json/src/main/resources/domains/jpa-json/MasterContent.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fdomains%2Fjpa-json%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fdomains%2Fjpa-json%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fdomains%2Fjpa-json%2FMasterContent.xml?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -18,7 +18,7 @@ specific language governing permissions and limitations\n under the License.\n -->\n <dataset>\n-  <Realm id=\"ea696a4f-e77a-4ef1-be67-8f8093bc8686\" name=\"/\"/>  \n+  <Realm id=\"ea696a4f-e77a-4ef1-be67-8f8093bc8686\" name=\"/\" fullPath=\"/\"/>  \n \n   <AnyType id=\"USER\" kind=\"USER\"/>\n   <AnyTypeClass id=\"BaseUser\"/>\n@@ -104,5 +104,5 @@ we are happy to inform you that the password request was successfully executed f\n                 sender=\"admin@syncope.apache.org\" subject=\"Password Reset successful\" template_id=\"confirmPasswordReset\" \n                 traceLevel=\"FAILURES\" events='[\"[CUSTOM]:[]:[]:[confirmPasswordReset]:[SUCCESS]\"]'/> \n \n-  <SyncopeRole id=\"GROUP_OWNER\" entitlements='[\"USER_SEARCH\",\"USER_READ\",\"USER_CREATE\",\"USER_UPDATE\",\"USER_DELETE\",\"ANYTYPECLASS_READ\",\"ANYTYPE_LIST\",\"ANYTYPECLASS_LIST\",\"RELATIONSHIPTYPE_LIST\",\"ANYTYPE_READ\",\"REALM_LIST\",\"GROUP_SEARCH\",\"GROUP_READ\",\"GROUP_UPDATE\",\"GROUP_DELETE\"]'/>\n+  <SyncopeRole id=\"GROUP_OWNER\" entitlements='[\"USER_SEARCH\",\"USER_READ\",\"USER_CREATE\",\"USER_UPDATE\",\"USER_DELETE\",\"ANYTYPECLASS_READ\",\"ANYTYPE_LIST\",\"ANYTYPECLASS_LIST\",\"RELATIONSHIPTYPE_LIST\",\"ANYTYPE_READ\",\"REALM_SEARCH\",\"GROUP_SEARCH\",\"GROUP_READ\",\"GROUP_UPDATE\",\"GROUP_DELETE\"]'/>\n </dataset>"},{"sha":"64e0d7a67537defa6c22d20d65a2f8772e68f0dd","filename":"core/persistence-jpa-json/src/main/resources/myjson/indexes.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Findexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Findexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Findexes.xml?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -21,6 +21,9 @@ under the License.\n <properties>\n   <comment>Additional indexes (in respect to JPA's)</comment>\n \n+  <entry key=\"Realm_parent_id\">CREATE INDEX Realm_parent_id ON Realm(parent_id)</entry>\n+  <entry key=\"Realm_fullPath\">CREATE INDEX Realm_fullPath ON Realm(fullPath)</entry>\n+\n   <entry key=\"SyncopeUser_realm_id\">CREATE INDEX SyncopeUser_realm_id ON SyncopeUser(realm_id)</entry>\n   <entry key=\"SyncopeUser_username\">CREATE UNIQUE INDEX SyncopeUser_username ON SyncopeUser(username)</entry>\n "},{"sha":"b50d063222533072db42f1f04d663fadc5e9a121","filename":"core/persistence-jpa-json/src/main/resources/ojson/indexes.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fojson%2Findexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fojson%2Findexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fojson%2Findexes.xml?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -21,6 +21,9 @@ under the License.\n <properties>\n   <comment>Additional indexes (in respect to JPA's)</comment>\n \n+  <entry key=\"Realm_parent_id\">CREATE INDEX Realm_parent_id ON Realm(parent_id)</entry>\n+  <entry key=\"Realm_fullPath\">CREATE INDEX Realm_fullPath ON Realm(fullPath)</entry>\n+\n   <entry key=\"SyncopeUser_realm_id\">CREATE INDEX SyncopeUser_realm_id ON SyncopeUser(realm_id)</entry>\n   <entry key=\"SyncopeUser_lower_username\">CREATE INDEX SyncopeUser_lower_username ON SyncopeUser(LOWER(username))</entry>\n "},{"sha":"f93e8ac8b7eea19dc3756f7dd7c4139a6a31c448","filename":"core/persistence-jpa-json/src/main/resources/pgjsonb/indexes.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Findexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Findexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Findexes.xml?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -21,6 +21,10 @@ under the License.\n <properties>\n   <comment>Additional indexes (in respect to JPA's)</comment>\n \n+  <entry key=\"Realm_parent_id\">CREATE INDEX Realm_parent_id ON Realm(parent_id)</entry>\n+  <entry key=\"Realm_fullPath\">CREATE INDEX Realm_fullPath ON Realm(fullPath)</entry>\n+  <entry key=\"Realm_fullPath_startsWith\">CREATE INDEX Realm_fullPath_startsWith ON Realm USING GIN (to_tsvector('english', fullPath))</entry>\n+\n   <entry key=\"SyncopeUser_realm_id\">CREATE INDEX SyncopeUser_realm_id ON SyncopeUser(realm_id)</entry>\n   <entry key=\"SyncopeUser_username\">CREATE UNIQUE INDEX SyncopeUser_username ON SyncopeUser(username)</entry>\n   <entry key=\"SyncopeUser_lower_username\">CREATE INDEX SyncopeUser_lower_username ON SyncopeUser(LOWER(username))</entry>"},{"sha":"df3293b84c7bb0bada4cb1b216f197619faa5fe1","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -248,12 +248,14 @@ under the License.\n   <PlainSchema id=\"location\" type=\"String\" anyTypeClass_id=\"minimal printer\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n \n-  <Realm id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" name=\"/\" passwordPolicy_id=\"986d1236-3ac5-4a19-810c-5ab21d79cba1\"/>\n-  <Realm id=\"722f3d84-9c2b-4525-8f6e-e4b82c55a36c\" name=\"odd\" \n-         parent_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" accountPolicy_id=\"06e2ed52-6966-44aa-a177-a0ca7434201f\"/>\n-  <Realm id=\"c5b75db1-fce7-470f-b780-3b9934d82a9d\" name=\"even\" \n+  <Realm id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" name=\"/\"  fullPath=\"/\"\n+         passwordPolicy_id=\"986d1236-3ac5-4a19-810c-5ab21d79cba1\"/>\n+  <Realm id=\"722f3d84-9c2b-4525-8f6e-e4b82c55a36c\" name=\"odd\" fullPath=\"/odd\" \n+         parent_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n+         accountPolicy_id=\"06e2ed52-6966-44aa-a177-a0ca7434201f\"/>\n+  <Realm id=\"c5b75db1-fce7-470f-b780-3b9934d82a9d\" name=\"even\" fullPath=\"/even\" \n          parent_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"/>\n-  <Realm id=\"0679e069-7355-4b20-bd11-a5a0a5453c7c\" name=\"two\" \n+  <Realm id=\"0679e069-7355-4b20-bd11-a5a0a5453c7c\" name=\"two\" fullPath=\"/even/two\"\n          parent_id=\"c5b75db1-fce7-470f-b780-3b9934d82a9d\"\n          accountPolicy_id=\"20ab5a8c-4b0c-432c-b957-f7fb9784d9f7\"\n          passwordPolicy_id=\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\"/>\n@@ -957,7 +959,7 @@ $$ }&#10;\n             logout=\"0\" csrf=\"1\" routeType=\"PROTECTED\"\n             predicates=\"[{&quot;cond&quot;:null,&quot;factory&quot;:&quot;METHOD&quot;,&quot;args&quot;:&quot;GET&quot;}]\"/>\n \n-  <SyncopeRole id=\"GROUP_OWNER\" entitlements='[\"USER_SEARCH\",\"USER_READ\",\"USER_CREATE\",\"USER_UPDATE\",\"USER_DELETE\",\"ANYTYPECLASS_READ\",\"ANYTYPE_LIST\",\"ANYTYPECLASS_LIST\",\"RELATIONSHIPTYPE_LIST\",\"ANYTYPE_READ\",\"REALM_LIST\",\"GROUP_SEARCH\",\"GROUP_READ\",\"GROUP_UPDATE\",\"GROUP_DELETE\"]'/>\n+  <SyncopeRole id=\"GROUP_OWNER\" entitlements='[\"USER_SEARCH\",\"USER_READ\",\"USER_CREATE\",\"USER_UPDATE\",\"USER_DELETE\",\"ANYTYPECLASS_READ\",\"ANYTYPE_LIST\",\"ANYTYPECLASS_LIST\",\"RELATIONSHIPTYPE_LIST\",\"ANYTYPE_READ\",\"REALM_SEARCH\",\"GROUP_SEARCH\",\"GROUP_READ\",\"GROUP_UPDATE\",\"GROUP_DELETE\"]'/>\n \n   <AuditConf id=\"syncope.audit.[LOGIC]:[SyncopeLogic]:[]:[isSelfRegAllowed]:[SUCCESS]\" active=\"1\"/>\n "},{"sha":"e8c1af1d12bff5fad2fec43951283650f32f5796","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -71,6 +71,7 @@\n import org.apache.cxf.helpers.IOUtils;\n import org.apache.openjpa.lib.util.collections.BidiMap;\n import org.apache.openjpa.lib.util.collections.DualHashBidiMap;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.persistence.api.DomainHolder;\n import org.apache.syncope.core.persistence.api.content.ContentExporter;\n import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n@@ -400,11 +401,10 @@ protected void exportTable(\n             if (tableName.equalsIgnoreCase(JPARealm.TABLE)) {\n                 List<Map<String, String>> realmRows = new ArrayList<>(rows);\n                 rows.clear();\n-                realmDAO.findAll().forEach(realm -> realmRows.stream().filter(row -> {\n-                    String id = row.get(\"ID\");\n-                    if (id == null) {\n-                        id = row.get(\"id\");\n-                    }\n+                realmDAO.findDescendants(SyncopeConstants.ROOT_REALM, null, -1, -1).\n+                        forEach(realm -> realmRows.stream().filter(row -> {\n+\n+                    String id = Optional.ofNullable(row.get(\"ID\")).orElseGet(() -> row.get(\"id\"));\n                     return realm.getKey().equals(id);\n                 }).findFirst().ifPresent(rows::add));\n             }"},{"sha":"34ba9050971b5c8554daf8dbccc2951b758c9d52","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -22,6 +22,7 @@\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -130,16 +131,15 @@ protected Triple<String, Set<String>, Set<String>> getAdminRealmsFilter(\n                     goRealm -> groupOwners.add(goRealm.getRight()),\n                     () -> {\n                         if (realmPath.startsWith(\"/\")) {\n-                            Realm realm = realmDAO.findByFullPath(realmPath);\n-                            if (realm == null) {\n-                                SyncopeClientException noRealm = SyncopeClientException.build(\n-                                        ClientExceptionType.InvalidRealm);\n+                            Realm realm = Optional.ofNullable(realmDAO.findByFullPath(realmPath)).orElseThrow(() -> {\n+                                SyncopeClientException noRealm =\n+                                        SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n                                 noRealm.getElements().add(\"Invalid realm specified: \" + realmPath);\n-                                throw noRealm;\n-                            } else {\n-                                realmKeys.addAll(realmDAO.findDescendants(realm).stream().\n-                                        map(Realm::getKey).collect(Collectors.toSet()));\n-                            }\n+                                return noRealm;\n+                            });\n+\n+                            realmKeys.addAll(realmDAO.findDescendants(realm.getFullPath(), null, -1, -1).stream().\n+                                    map(Realm::getKey).collect(Collectors.toSet()));\n                         } else {\n                             DynRealm dynRealm = dynRealmDAO.find(realmPath);\n                             if (dynRealm == null) {"},{"sha":"1a775cded84afa85b31b64ffab5069bd43edbaf2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":109,"deletions":62,"changes":171,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import jakarta.persistence.NoResultException;\n+import jakarta.persistence.Query;\n import jakarta.persistence.TypedQuery;\n import java.util.ArrayList;\n import java.util.List;\n@@ -52,8 +53,8 @@ public JPARealmDAO(final RoleDAO roleDAO) {\n \n     @Override\n     public Realm getRoot() {\n-        TypedQuery<Realm> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPARealm.class.getSimpleName() + \" e WHERE e.parent IS NULL\", Realm.class);\n+        TypedQuery<Realm> query = entityManager().createQuery(\"SELECT e FROM \" + JPARealm.class.getSimpleName() + \" e \"\n+                + \"WHERE e.parent IS NULL\", Realm.class);\n \n         Realm result = null;\n         try {\n@@ -82,35 +83,16 @@ public Realm findByFullPath(final String fullPath) {\n             throw new MalformedPathException(fullPath);\n         }\n \n-        Realm root = getRoot();\n-        if (root == null) {\n-            return null;\n-        }\n+        TypedQuery<Realm> query = entityManager().createQuery(\"SELECT e FROM \" + JPARealm.class.getSimpleName() + \" e \"\n+                + \"WHERE e.fullPath=:fullPath\", Realm.class);\n+        query.setParameter(\"fullPath\", fullPath);\n \n-        Realm current = root;\n-        for (String pathElement : fullPath.substring(1).split(\"/\")) {\n-            current = findChildren(current).stream().\n-                    filter(realm -> pathElement.equals(realm.getName())).findFirst().\n-                    orElse(null);\n-            if (current == null) {\n-                return null;\n-            }\n+        Realm result = null;\n+        try {\n+            result = query.getSingleResult();\n+        } catch (NoResultException e) {\n+            LOG.debug(\"Root realm not found\", e);\n         }\n-        return current;\n-    }\n-\n-    private <T extends Policy> List<Realm> findSamePolicyChildren(final Realm realm, final T policy) {\n-        List<Realm> result = new ArrayList<>();\n-\n-        findChildren(realm).stream().\n-                filter(child -> (policy instanceof AccountPolicy\n-                && child.getAccountPolicy() == null || policy.equals(child.getAccountPolicy()))\n-                || (policy instanceof PasswordPolicy\n-                && child.getPasswordPolicy() == null || policy.equals(child.getPasswordPolicy()))).\n-                forEach(child -> {\n-                    result.add(child);\n-                    result.addAll(findSamePolicyChildren(child, policy));\n-                });\n \n         return result;\n     }\n@@ -133,15 +115,90 @@ public List<Realm> findByResource(final ExternalResource resource) {\n         return query.getResultList();\n     }\n \n+    protected int setParameter(final List<Object> parameters, final Object parameter) {\n+        parameters.add(parameter);\n+        return parameters.size();\n+    }\n+\n+    protected StringBuilder buildDescendantQuery(\n+            final String base,\n+            final String keyword,\n+            final List<Object> parameters) {\n+\n+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n+                append(JPARealm.class.getSimpleName()).append(\" e \").\n+                append(\"WHERE (e.fullPath=?\").\n+                append(setParameter(parameters, base)).\n+                append(\" OR e.fullPath LIKE ?\").\n+                append(setParameter(parameters, SyncopeConstants.ROOT_REALM.equals(base) ? \"/%\" : base + \"/%\")).\n+                append(')');\n+\n+        if (keyword != null) {\n+            queryString.append(\" AND LOWER(e.name) LIKE ?\").append(setParameter(parameters, keyword));\n+        }\n+\n+        return queryString;\n+    }\n+\n     @Override\n-    public List<Realm> findMatching(final String keyword) {\n-        TypedQuery<Realm> query = entityManager().createQuery(\"SELECT e FROM \" + JPARealm.class.getSimpleName() + \" e \"\n-                + \"WHERE e.name LIKE :keyword\", Realm.class);\n-        query.setParameter(\"keyword\", keyword);\n+    public int countDescendants(final String base, final String keyword) {\n+        List<Object> parameters = new ArrayList<>();\n+\n+        StringBuilder queryString = buildDescendantQuery(base, keyword, parameters);\n+        Query query = entityManager().createQuery(StringUtils.replaceOnce(\n+                queryString.toString(),\n+                \"SELECT e \",\n+                \"SELECT COUNT(e) \"));\n+\n+        for (int i = 1; i <= parameters.size(); i++) {\n+            query.setParameter(i, parameters.get(i - 1));\n+        }\n+\n+        return ((Number) query.getSingleResult()).intValue();\n+    }\n+\n+    @Override\n+    public List<Realm> findDescendants(\n+            final String base,\n+            final String keyword,\n+            final int page,\n+            final int itemsPerPage) {\n+\n+        List<Object> parameters = new ArrayList<>();\n+\n+        StringBuilder queryString = buildDescendantQuery(base, keyword, parameters);\n+        TypedQuery<Realm> query = entityManager().createQuery(\n+                queryString.append(\" ORDER BY e.fullPath\").toString(), Realm.class);\n+\n+        for (int i = 1; i <= parameters.size(); i++) {\n+            query.setParameter(i, parameters.get(i - 1));\n+        }\n+\n+        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n+\n+        if (itemsPerPage > 0) {\n+            query.setMaxResults(itemsPerPage);\n+        }\n \n         return query.getResultList();\n     }\n \n+    protected <T extends Policy> List<Realm> findSamePolicyChildren(final Realm realm, final T policy) {\n+        List<Realm> result = new ArrayList<>();\n+\n+        findChildren(realm).stream().\n+                filter(child -> (policy instanceof AccountPolicy\n+                && child.getAccountPolicy() == null || policy.equals(child.getAccountPolicy()))\n+                || (policy instanceof PasswordPolicy\n+                && child.getPasswordPolicy() == null || policy.equals(child.getPasswordPolicy()))).\n+                forEach(child -> {\n+                    result.add(child);\n+                    result.addAll(findSamePolicyChildren(child, policy));\n+                });\n+\n+        return result;\n+    }\n+\n     @Override\n     public <T extends Policy> List<Realm> findByPolicy(final T policy) {\n         if (policy instanceof PropagationPolicy || policy instanceof ProvisioningPolicy) {\n@@ -187,7 +244,7 @@ public List<Realm> findByLogicActions(final Implementation logicActions) {\n         return query.getResultList();\n     }\n \n-    private static void findAncestors(final List<Realm> result, final Realm realm) {\n+    protected void findAncestors(final List<Realm> result, final Realm realm) {\n         if (realm.getParent() != null && !result.contains(realm.getParent())) {\n             result.add(realm.getParent());\n             findAncestors(result, realm.getParent());\n@@ -211,50 +268,40 @@ public List<Realm> findChildren(final Realm realm) {\n         return query.getResultList();\n     }\n \n-    private void findDescendants(final List<Realm> result, final Realm realm) {\n-        result.add(realm);\n-        List<Realm> children = findChildren(realm);\n-        if (children != null) {\n-            children.forEach(child -> findDescendants(result, child));\n-        }\n-    }\n-\n-    @Override\n-    public List<Realm> findDescendants(final Realm realm) {\n-        List<Realm> result = new ArrayList<>();\n-        findDescendants(result, realm);\n-        return result;\n+    protected StringBuilder buildDescendantQuery(final String base, final List<Object> parameters) {\n+        return new StringBuilder(\"SELECT e FROM \").\n+                append(JPARealm.class.getSimpleName()).append(\" e \").\n+                append(\"WHERE e.fullPath=?\").\n+                append(setParameter(parameters, base)).\n+                append(\" OR e.fullPath LIKE ?\").\n+                append(setParameter(parameters, SyncopeConstants.ROOT_REALM.equals(base) ? \"/%\" : base + \"/%\")).\n+                append(\" ORDER BY e.fullPath\");\n     }\n \n-    @Transactional(readOnly = true)\n-    @Override\n-    public List<Realm> findAll() {\n-        return findDescendants(getRoot());\n+    protected String buildFullPath(final Realm realm) {\n+        return realm.getParent() == null\n+                ? SyncopeConstants.ROOT_REALM\n+                : StringUtils.appendIfMissing(realm.getParent().getFullPath(), \"/\") + realm.getName();\n     }\n \n     @Override\n     public Realm save(final Realm realm) {\n+        ((JPARealm) realm).setFullPath(buildFullPath(realm));\n         return entityManager().merge(realm);\n     }\n \n     @Override\n     public void delete(final Realm realm) {\n-        findDescendants(realm).forEach(toBeDeleted -> {\n+        if (realm == null || realm.getParent() == null) {\n+            return;\n+        }\n+\n+        findDescendants(realm.getFullPath(), null, -1, -1).forEach(toBeDeleted -> {\n             roleDAO.findByRealm(toBeDeleted).forEach(role -> role.getRealms().remove(toBeDeleted));\n \n             toBeDeleted.setParent(null);\n \n             entityManager().remove(toBeDeleted);\n         });\n     }\n-\n-    @Override\n-    public void delete(final String key) {\n-        Realm realm = find(key);\n-        if (realm == null) {\n-            return;\n-        }\n-\n-        delete(realm);\n-    }\n }"},{"sha":"16f61be329c62837ee2ae1529460a8440ffafdfb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -303,7 +303,7 @@ protected StringBuilder buildFindAllQuery(\n             String realmKeysArg = AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.TASK_LIST).stream().\n                     map(realmDAO::findByFullPath).\n                     filter(Objects::nonNull).\n-                    flatMap(r -> realmDAO.findDescendants(r).stream()).\n+                    flatMap(r -> realmDAO.findDescendants(r.getFullPath(), null, -1, -1).stream()).\n                     map(Realm::getKey).\n                     distinct().\n                     map(realmKey -> \"?\" + setParameter(parameters, realmKey))."},{"sha":"a3ac8a13efa48ab7e1100692390fddc8d02f0239","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARealm.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -20,6 +20,7 @@\n \n import jakarta.persistence.Cacheable;\n import jakarta.persistence.CascadeType;\n+import jakarta.persistence.Column;\n import jakarta.persistence.Entity;\n import jakarta.persistence.FetchType;\n import jakarta.persistence.JoinColumn;\n@@ -34,8 +35,6 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.core.persistence.api.entity.AnyTemplateRealm;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n@@ -73,6 +72,9 @@ public class JPARealm extends AbstractGeneratedKeyEntity implements Realm {\n     @ManyToOne\n     private JPARealm parent;\n \n+    @Column(nullable = false, unique = true)\n+    private String fullPath;\n+\n     @ManyToOne(fetch = FetchType.EAGER)\n     private JPAPasswordPolicy passwordPolicy;\n \n@@ -125,9 +127,7 @@ public Realm getParent() {\n \n     @Override\n     public String getFullPath() {\n-        return getParent() == null\n-                ? SyncopeConstants.ROOT_REALM\n-                : StringUtils.appendIfMissing(getParent().getFullPath(), \"/\") + getName();\n+        return fullPath;\n     }\n \n     @Override\n@@ -151,6 +151,10 @@ public void setParent(final Realm parent) {\n         this.parent = (JPARealm) parent;\n     }\n \n+    public void setFullPath(final String fullPath) {\n+        this.fullPath = fullPath;\n+    }\n+\n     @Override\n     public void setAccountPolicy(final AccountPolicy accountPolicy) {\n         checkType(accountPolicy, JPAAccountPolicy.class);"},{"sha":"68ef9183115c89d596e9c4e0897eac3eac04ee8e","filename":"core/persistence-jpa/src/main/resources/domains/MasterContent.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -18,7 +18,7 @@ specific language governing permissions and limitations\n under the License.\n -->\n <dataset>\n-  <Realm id=\"ea696a4f-e77a-4ef1-be67-8f8093bc8686\" name=\"/\"/>\n+  <Realm id=\"ea696a4f-e77a-4ef1-be67-8f8093bc8686\" name=\"/\" fullPath=\"/\"/>\n \n   <AnyType id=\"USER\" kind=\"USER\"/>\n   <AnyTypeClass id=\"BaseUser\"/>\n@@ -104,5 +104,5 @@ we are happy to inform you that the password request was successfully executed f\n                 sender=\"admin@syncope.apache.org\" subject=\"Password Reset successful\" template_id=\"confirmPasswordReset\" \n                 traceLevel=\"FAILURES\" events='[\"[CUSTOM]:[]:[]:[confirmPasswordReset]:[SUCCESS]\"]'/> \n \n-  <SyncopeRole id=\"GROUP_OWNER\" entitlements='[\"USER_SEARCH\",\"USER_READ\",\"USER_CREATE\",\"USER_UPDATE\",\"USER_DELETE\",\"ANYTYPECLASS_READ\",\"ANYTYPE_LIST\",\"ANYTYPECLASS_LIST\",\"RELATIONSHIPTYPE_LIST\",\"ANYTYPE_READ\",\"REALM_LIST\",\"GROUP_SEARCH\",\"GROUP_READ\",\"GROUP_UPDATE\",\"GROUP_DELETE\"]'/>\n+  <SyncopeRole id=\"GROUP_OWNER\" entitlements='[\"USER_SEARCH\",\"USER_READ\",\"USER_CREATE\",\"USER_UPDATE\",\"USER_DELETE\",\"ANYTYPECLASS_READ\",\"ANYTYPE_LIST\",\"ANYTYPECLASS_LIST\",\"RELATIONSHIPTYPE_LIST\",\"ANYTYPE_READ\",\"REALM_SEARCH\",\"GROUP_SEARCH\",\"GROUP_READ\",\"GROUP_UPDATE\",\"GROUP_DELETE\"]'/>\n </dataset>"},{"sha":"7626e7b58edf17ee8109f911e4a59d2dab9458d6","filename":"core/persistence-jpa/src/main/resources/indexes.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -21,6 +21,9 @@ under the License.\n <properties>\n   <comment>Additional indexes (in respect to JPA's)</comment>\n \n+  <entry key=\"Realm_parent_id\">CREATE INDEX Realm_parent_id ON Realm(parent_id)</entry>\n+  <entry key=\"Realm_fullPath\">CREATE INDEX Realm_fullPath ON Realm(fullPath)</entry>\n+\n   <entry key=\"SyncopeUser_realm_id\">CREATE INDEX SyncopeUser_realm_id ON SyncopeUser(realm_id)</entry>\n   <entry key=\"SyncopeUser_username\">CREATE UNIQUE INDEX SyncopeUser_username ON SyncopeUser(username)</entry>\n "},{"sha":"3d864abf7fadc4e4451b20c81367cb7d6de202c4","filename":"core/persistence-jpa/src/main/resources/oracle_indexes.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Foracle_indexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Foracle_indexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Foracle_indexes.xml?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -21,6 +21,9 @@ under the License.\n <properties>\n   <comment>Additional indexes (in respect to JPA's)</comment>\n \n+  <entry key=\"Realm_parent_id\">CREATE INDEX Realm_parent_id ON Realm(parent_id)</entry>\n+  <entry key=\"Realm_fullPath\">CREATE INDEX Realm_fullPath ON Realm(fullPath)</entry>\n+  \n   <entry key=\"SyncopeUser_realm_id\">CREATE INDEX SyncopeUser_realm_id ON SyncopeUser(realm_id)</entry>\n   <entry key=\"SyncopeUser_lower_username\">CREATE INDEX SyncopeUser_lower_username ON SyncopeUser(LOWER(username))</entry>\n "},{"sha":"0d62ccf264610a24693275e7a4297b8477c8a9df","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/MultitenancyTest.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -83,8 +83,10 @@ public void readPlainSchemas() {\n \n     @Test\n     public void readRealm() {\n-        assertEquals(1, realmDAO.findAll().size());\n-        assertEquals(realmDAO.getRoot(), realmDAO.findAll().get(0));\n+        assertEquals(1, realmDAO.findDescendants(realmDAO.getRoot().getFullPath(), null, -1, -1).size());\n+        assertEquals(\n+                realmDAO.getRoot(),\n+                realmDAO.findDescendants(realmDAO.getRoot().getFullPath(), null, -1, -1).get(0));\n     }\n \n     @Test"},{"sha":"2115cf9250fd5e6748c6f2c3b69f1e1ead953bc2","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RealmTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -95,7 +95,7 @@ public void findChildren() {\n \n     @Test\n     public void findAll() {\n-        List<Realm> list = realmDAO.findAll();\n+        List<Realm> list = realmDAO.findDescendants(realmDAO.getRoot().getFullPath(), null, -1, -1);\n         assertNotNull(list);\n         assertFalse(list.isEmpty());\n         list.forEach(Assertions::assertNotNull);\n@@ -161,10 +161,10 @@ public void delete() {\n         Realm actual = realmDAO.save(realm);\n         assertNotNull(actual);\n \n-        String id = actual.getKey();\n-        assertNotNull(realmDAO.find(id));\n+        actual = realmDAO.find(actual.getKey());\n+        assertNotNull(actual);\n \n-        realmDAO.delete(id);\n-        assertNull(realmDAO.find(id));\n+        realmDAO.delete(actual);\n+        assertNull(realmDAO.find(actual.getKey()));\n     }\n }"},{"sha":"42919ba69702d9d31cb1dab820940e9a057acdbe","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/XMLContentExporterTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FXMLContentExporterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FXMLContentExporterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FXMLContentExporterTest.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -60,8 +60,8 @@ public void issueSYNCOPE1128() throws Exception {\n                 filter(row -> row.trim().startsWith(\"<Realm\")).collect(Collectors.toList());\n         assertEquals(4, realms.size());\n         assertTrue(realms.get(0).contains(\"name=\\\"/\\\"\"));\n-        assertTrue(realms.get(1).contains(\"name=\\\"odd\\\"\"));\n-        assertTrue(realms.get(2).contains(\"name=\\\"even\\\"\"));\n-        assertTrue(realms.get(3).contains(\"name=\\\"two\\\"\"));\n+        assertTrue(realms.get(1).contains(\"name=\\\"even\\\"\"));\n+        assertTrue(realms.get(2).contains(\"name=\\\"two\\\"\"));\n+        assertTrue(realms.get(3).contains(\"name=\\\"odd\\\"\"));\n     }\n }"},{"sha":"e153317e47ef51e210c9278e9530118b40112f39","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -122,12 +122,14 @@ under the License.\n       \n   <AnyTypeClass id=\"csv\"/>\n \n-  <Realm id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" name=\"/\" passwordPolicy_id=\"986d1236-3ac5-4a19-810c-5ab21d79cba1\"/>\n-  <Realm id=\"722f3d84-9c2b-4525-8f6e-e4b82c55a36c\" name=\"odd\" \n-         parent_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" accountPolicy_id=\"06e2ed52-6966-44aa-a177-a0ca7434201f\"/>\n-  <Realm id=\"c5b75db1-fce7-470f-b780-3b9934d82a9d\" name=\"even\" \n+  <Realm id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" name=\"/\"  fullPath=\"/\"\n+         passwordPolicy_id=\"986d1236-3ac5-4a19-810c-5ab21d79cba1\"/>\n+  <Realm id=\"722f3d84-9c2b-4525-8f6e-e4b82c55a36c\" name=\"odd\" fullPath=\"/odd\" \n+         parent_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n+         accountPolicy_id=\"06e2ed52-6966-44aa-a177-a0ca7434201f\"/>\n+  <Realm id=\"c5b75db1-fce7-470f-b780-3b9934d82a9d\" name=\"even\" fullPath=\"/even\" \n          parent_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"/>\n-  <Realm id=\"0679e069-7355-4b20-bd11-a5a0a5453c7c\" name=\"two\" \n+  <Realm id=\"0679e069-7355-4b20-bd11-a5a0a5453c7c\" name=\"two\" fullPath=\"/even/two\"\n          parent_id=\"c5b75db1-fce7-470f-b780-3b9934d82a9d\"\n          accountPolicy_id=\"20ab5a8c-4b0c-432c-b957-f7fb9784d9f7\"\n          passwordPolicy_id=\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\"/>\n@@ -1043,7 +1045,7 @@ $$ }&#10;\n             logout=\"0\" csrf=\"1\" routeType=\"PROTECTED\"\n             predicates=\"[{&quot;cond&quot;:null,&quot;factory&quot;:&quot;METHOD&quot;,&quot;args&quot;:&quot;GET&quot;}]\"/>\n \n-  <SyncopeRole id=\"GROUP_OWNER\" entitlements='[\"USER_SEARCH\",\"USER_READ\",\"USER_CREATE\",\"USER_UPDATE\",\"USER_DELETE\",\"ANYTYPECLASS_READ\",\"ANYTYPE_LIST\",\"ANYTYPECLASS_LIST\",\"RELATIONSHIPTYPE_LIST\",\"ANYTYPE_READ\",\"REALM_LIST\",\"GROUP_SEARCH\",\"GROUP_READ\",\"GROUP_UPDATE\",\"GROUP_DELETE\"]'/>\n+  <SyncopeRole id=\"GROUP_OWNER\" entitlements='[\"USER_SEARCH\",\"USER_READ\",\"USER_CREATE\",\"USER_UPDATE\",\"USER_DELETE\",\"ANYTYPECLASS_READ\",\"ANYTYPE_LIST\",\"ANYTYPECLASS_LIST\",\"RELATIONSHIPTYPE_LIST\",\"ANYTYPE_READ\",\"REALM_SEARCH\",\"GROUP_SEARCH\",\"GROUP_READ\",\"GROUP_UPDATE\",\"GROUP_DELETE\"]'/>\n \n   <AuditConf id=\"syncope.audit.[LOGIC]:[SyncopeLogic]:[]:[isSelfRegAllowed]:[SUCCESS]\" active=\"1\"/>\n "},{"sha":"43c75da1dd2cf5c60ada2a81e9574f82a77fef04","filename":"core/persistence-jpa/src/test/resources/domains/TwoContent.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -18,7 +18,7 @@ specific language governing permissions and limitations\n under the License.\n -->\n <dataset>\n-  <Realm id=\"ea696a4f-e77a-4ef1-be67-8f8093bc8686\" name=\"/\"/>\n+  <Realm id=\"ea696a4f-e77a-4ef1-be67-8f8093bc8686\" name=\"/\" fullPath=\"/\"/>\n \n   <AnyType id=\"USER\" kind=\"USER\"/>\n   <AnyTypeClass id=\"BaseUser\"/>\n@@ -100,5 +100,5 @@ we are happy to inform you that the password request was successfully executed f\n                 jsonConf='[{\"schema\":{\"name\":\"synchronizePasswords\",\"displayName\":\"Enable Password Synchronization\",\"helpMessage\":\"If true, the connector will synchronize passwords. The Password Capture Plugin needs to be installed for password synchronization to work.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"maintainLdapGroupMembership\",\"displayName\":\"Maintain LDAP Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any LDAP groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"true\"]},{\"schema\":{\"name\":\"host\",\"displayName\":\"Host\",\"helpMessage\":\"The name or IP address of the host where the LDAP server is running.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"localhost\"]},{\"schema\":{\"name\":\"passwordHashAlgorithm\",\"displayName\":\"Password Hash Algorithm\",\"helpMessage\":\"Indicates the algorithm that the Identity system should use to hash the password. Currently supported values are SSHA, SHA, SSHA1, and SHA1. A blank value indicates that the system will not hash passwords. This will cause cleartext passwords to be stored in LDAP unless the LDAP server performs the hash (Netscape Directory Server and iPlanet Directory Server do).\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"SHA\"]},{\"schema\":{\"name\":\"port\",\"displayName\":\"TCP Port\",\"helpMessage\":\"TCP/IP port number used to communicate with the LDAP server.\",\"type\":\"int\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[1389]},{\"schema\":{\"name\":\"vlvSortAttribute\",\"displayName\":\"VLV Sort Attribute\",\"helpMessage\":\"Specify the sort attribute to use for VLV indexes on the resource.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"statusManagementClass\",\"displayName\":\"Status management class \",\"helpMessage\":\"Class to be used to manage enabled/disabled status. If no class is specified then identity status management wont be possible.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"net.tirasa.connid.bundles.ldap.commons.AttributeStatusManagement\"]},{\"schema\":{\"name\":\"accountObjectClasses\",\"displayName\":\"Account Object Classes\",\"helpMessage\":\"The object class or classes that will be used when creating new user objects in the LDAP tree. When entering more than one object class, each entry should be on its own line; do not use commas or semi-colons to separate multiple object classes. Some object classes may require that you specify all object classes in the class hierarchy.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\"]},{\"schema\":{\"name\":\"accountUserNameAttributes\",\"displayName\":\"Account User Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the account user name. They will be used when authenticating to find the LDAP entry for the user name to authenticate.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid\"]},{\"schema\":{\"name\":\"baseContextsToSynchronize\",\"displayName\":\"Base Contexts to Synchronize\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used to determine if a change should be synchronized. The base contexts attribute will be used to synchronize a change if this property is not set.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"accountSynchronizationFilter\",\"displayName\":\"LDAP Filter for Accounts to Synchronize\",\"helpMessage\":\"An optional LDAP filter for the objects to synchronize. Because the change log is for all objects, this filter updates only objects that match the specified filter. If you specify a filter, an object will be synchronized only if it matches the filter and includes a synchronized object class.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"removeLogEntryObjectClassFromFilter\",\"displayName\":\"Remove Log Entry Object Class from Filter\",\"helpMessage\":\"If this property is set (the default), the filter used to fetch change log entries does not contain the \\\"changeLogEntry\\\" object class, expecting that there are no entries of other object types in the change log.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordDecryptionKey\",\"displayName\":\"Password Decryption Key\",\"helpMessage\":\"The key to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"readSchema\",\"displayName\":\"Read Schema\",\"helpMessage\":\"If true, the connector will read the schema from the server. If false, the connector will provide a default schema based on the object classes in the configuration. This property must be true in order to use extended object classes.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"ssl\",\"displayName\":\"SSL\",\"helpMessage\":\"Select the check box to connect to the LDAP server using SSL.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordAttributeToSynchronize\",\"displayName\":\"Password Attribute to Synchronize\",\"helpMessage\":\"The name of the password attribute to synchronize when performing password synchronization.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"accountSearchFilter\",\"displayName\":\"LDAP Filter for Retrieving Accounts\",\"helpMessage\":\"An optional LDAP filter to control which accounts are returned from the LDAP resource. If no filter is specified, only accounts that include all specified object classes are returned.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=*\"]},{\"schema\":{\"name\":\"passwordDecryptionInitializationVector\",\"displayName\":\"Password Decryption Initialization Vector\",\"helpMessage\":\"The initialization vector to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupMemberAttribute\",\"displayName\":\"Group Member Attribute\",\"helpMessage\":\"The name of the group attribute that will be updated with the distinguished name of the user when the user is added to the group.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"failover\",\"displayName\":\"Failover Servers\",\"helpMessage\":\"List all servers that should be used for failover in case the preferred server fails. If the preferred server fails, JNDI will connect to the next available server in the list. List all servers in the form of \\\"ldap://ldap.example.com:389/\\\", which follows the standard LDAP v3 URLs described in RFC 2255. Only the host and port parts of the URL are relevant in this setting.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"modifiersNamesToFilterOut\",\"displayName\":\"Filter Out Changes By\",\"helpMessage\":\"The names (DNs) of directory administrators to filter from the changes. Changes with the attribute \\\"modifiersName\\\" that match entries in this list will be filtered out. The standard value is the administrator name used by this adapter, to prevent loops. Entries should be of the format \\\"cn=Directory Manager\\\".\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupNameAttributes\",\"displayName\":\"Group Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the group name.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"uidAttribute\",\"displayName\":\"Uid Attribute\",\"helpMessage\":\"The name of the LDAP attribute which is mapped to the Uid attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"respectResourcePasswordPolicyChangeAfterReset\",\"displayName\":\"Respect Resource Password Policy Change-After-Reset\",\"helpMessage\":\"When this resource is specified in a Login Module (i.e., this resource is a pass-through authentication target) and the resource password policy is configured for change-after-reset, a user whose resource account password has been administratively reset will be required to change that password after successfully authenticating.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"filterWithOrInsteadOfAnd\",\"displayName\":\"Filter with Or Instead of And\",\"helpMessage\":\"Normally the the filter used to fetch change log entries is an and-based filter retrieving an interval of change entries. If this property is set, the filter will or together the required change numbers instead.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"principal\",\"displayName\":\"Principal\",\"helpMessage\":\"The distinguished name with which to authenticate to the LDAP server.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=admin,ou=system\"]},{\"schema\":{\"name\":\"changeLogBlockSize\",\"displayName\":\"Change Log Block Size\",\"helpMessage\":\"The number of change log entries to fetch per query.\",\"type\":\"int\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[100]},{\"schema\":{\"name\":\"baseContexts\",\"displayName\":\"Base Contexts\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used when searching the tree. Searches are performed when discovering users from the LDAP server or when looking for the groups of which a user is a member.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"passwordAttribute\",\"displayName\":\"Password Attribute\",\"helpMessage\":\"The name of the LDAP attribute which holds the password. When changing an user password, the new password is set to this attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"userpassword\"]},{\"schema\":{\"name\":\"changeNumberAttribute\",\"displayName\":\"Change Number Attribute\",\"helpMessage\":\"The name of the change number attribute in the change log entry.\",\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"changeNumber\"]},{\"schema\":{\"name\":\"objectClassesToSynchronize\",\"displayName\":\"Object Classes to Synchronize\",\"helpMessage\":\"The object classes to synchronize. The change log is for all objects; this filters updates to just the listed object classes. You should not list the superclasses of an object class unless you intend to synchronize objects with any of the superclass values. For example, if only \\\"inetOrgPerson\\\" objects should be synchronized, but the superclasses of \\\"inetOrgPerson\\\" (\\\"person\\\", \\\"organizationalperson\\\" and \\\"top\\\") should be filtered out, then list only \\\"inetOrgPerson\\\" here. All objects in LDAP are subclassed from \\\"top\\\". For this reason, you should never list \\\"top\\\", otherwise no object would be filtered.\",\"type\":\"[Ljava.lang.String;\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\",\"groupOfUniqueNames\"]},{\"schema\":{\"name\":\"credentials\",\"displayName\":\"Password\",\"helpMessage\":\"Password for the principal.\",\"type\":\"org.identityconnectors.common.security.GuardedString\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"secret\"]},{\"schema\":{\"name\":\"attributesToSynchronize\",\"displayName\":\"Attributes to Synchronize\",\"helpMessage\":\"The names of the attributes to synchronize. This ignores updates from the change log if they do not update any of the named attributes. For example, if only \\\"department\\\" is listed, then only changes that affect \\\"department\\\" will be processed. All other updates are ignored. If blank (the default), then all changes are processed.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"maintainPosixGroupMembership\",\"displayName\":\"Maintain POSIX Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any POSIX groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"truemaintainLdapGroupMembership\"]}]'\n                 capabilities='[\"CREATE\",\"UPDATE\",\"DELETE\",\"SEARCH\"]'/>\n \n-  <SyncopeRole id=\"GROUP_OWNER\" entitlements='[\"USER_SEARCH\",\"USER_READ\",\"USER_CREATE\",\"USER_UPDATE\",\"USER_DELETE\",\"ANYTYPECLASS_READ\",\"ANYTYPE_LIST\",\"ANYTYPECLASS_LIST\",\"RELATIONSHIPTYPE_LIST\",\"ANYTYPE_READ\",\"REALM_LIST\",\"GROUP_SEARCH\",\"GROUP_READ\",\"GROUP_UPDATE\",\"GROUP_DELETE\"]'/>\n+  <SyncopeRole id=\"GROUP_OWNER\" entitlements='[\"USER_SEARCH\",\"USER_READ\",\"USER_CREATE\",\"USER_UPDATE\",\"USER_DELETE\",\"ANYTYPECLASS_READ\",\"ANYTYPE_LIST\",\"ANYTYPECLASS_LIST\",\"RELATIONSHIPTYPE_LIST\",\"ANYTYPE_READ\",\"REALM_SEARCH\",\"GROUP_SEARCH\",\"GROUP_READ\",\"GROUP_UPDATE\",\"GROUP_DELETE\"]'/>\n </dataset>"},{"sha":"798e6bfb95161e7f7b6faff67ed1041ef320bca4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/InboundMatcher.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -27,6 +27,7 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.OrgUnit;\n import org.apache.syncope.common.lib.to.Provision;\n@@ -488,9 +489,7 @@ public List<Realm> match(final SyncDelta syncDelta, final OrgUnit orgUnit) {\n \n             case \"name\":\n                 if (orgUnit.isIgnoreCaseMatch()) {\n-                    String realmName = connObjectKey;\n-                    result.addAll(realmDAO.findAll().stream().\n-                            filter(r -> r.getName().equalsIgnoreCase(realmName)).collect(Collectors.toList()));\n+                    result.addAll(realmDAO.findDescendants(SyncopeConstants.ROOT_REALM, connObjectKey, -1, -1));\n                 } else {\n                     result.addAll(realmDAO.findByName(connObjectKey).stream().collect(Collectors.toList()));\n                 }"},{"sha":"f72667d1ed038f881d808e453617af65f19e0e6d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushJobDelegate.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -206,7 +206,8 @@ protected String doExecuteProvisioning(\n             });\n \n             // Never push the root realm\n-            List<Realm> realms = realmDAO.findDescendants(profile.getTask().getSourceRealm()).stream().\n+            List<Realm> realms = realmDAO.findDescendants(\n+                    profile.getTask().getSourceRealm().getFullPath(), null, -1, -1).stream().\n                     filter(realm -> realm.getParent() != null).collect(Collectors.toList());\n             boolean result = true;\n             for (int i = 0; i < realms.size() && result; i++) {"},{"sha":"499922b80b043e3f0e8fa90c02061fc3aa29558d","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchClientContext.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientContext.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -72,7 +72,7 @@ public ElasticsearchIndexLoader elasticsearchIndexLoader(final ElasticsearchInde\n         return new ElasticsearchIndexLoader(indexManager);\n     }\n \n-    @ConditionalOnMissingBean\n+    @ConditionalOnMissingBean(name = \"syncopeElasticsearchHealthContributor\")\n     @Bean(name = {\n         \"syncopeElasticsearchHealthContributor\", \"elasticsearchHealthIndicator\", \"elasticsearchHealthContributor\" })\n     public HealthContributor syncopeElasticsearchHealthContributor(final ElasticsearchClient client) {"},{"sha":"c1ba3cd8b7565d416b23b84987c8ce86991c600e","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -158,7 +158,7 @@ protected Triple<Optional<Query>, Set<String>, Set<String>> getAdminRealmsFilter\n                         return noRealm;\n                     });\n \n-                    realmDAO.findDescendants(realm).forEach(descendant -> queries.add(\n+                    realmDAO.findDescendants(realm.getFullPath(), null, -1, -1).forEach(descendant -> queries.add(\n                             new Query.Builder().term(QueryBuilders.term().\n                                     field(\"realm\").value(FieldValue.of(descendant.getKey())).build()).\n                                     build()));"},{"sha":"f17e8c5e48b3d903223121c30803f0f5008f904c","filename":"ext/elasticsearch/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAOTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -114,9 +114,10 @@ public void getAdminRealmsFilter4realm() throws IOException {\n         // 1. mock\n         Realm root = mock(Realm.class);\n         when(root.getKey()).thenReturn(\"rootKey\");\n+        when(root.getFullPath()).thenReturn(SyncopeConstants.ROOT_REALM);\n \n         when(realmDAO.findByFullPath(SyncopeConstants.ROOT_REALM)).thenReturn(root);\n-        when(realmDAO.findDescendants(root)).thenReturn(List.of(root));\n+        when(realmDAO.findDescendants(SyncopeConstants.ROOT_REALM, null, -1, -1)).thenReturn(List.of(root));\n \n         // 2. test\n         Set<String> adminRealms = Set.of(SyncopeConstants.ROOT_REALM);"},{"sha":"043b77b20a626a8539699184223fd1575e9e171e","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestCommand.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestCommand.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -43,7 +43,8 @@ public class TestCommand implements Command<TestCommandArgs> {\n     private AnyObjectLogic anyObjectLogic;\n \n     private Optional<RealmTO> getRealm(final String fullPath) {\n-        return realmLogic.list(fullPath).stream().filter(realm -> fullPath.equals(realm.getFullPath())).findFirst();\n+        return realmLogic.search(null, fullPath, -1, -1).getRight().stream().\n+                filter(realm -> fullPath.equals(realm.getFullPath())).findFirst();\n     }\n \n     @Transactional(propagation = Propagation.NOT_SUPPORTED)"},{"sha":"622bf6da8b6e2c3269929d615b53813a19a99a94","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -112,6 +112,7 @@\n import org.apache.syncope.common.rest.api.batch.BatchPayloadParser;\n import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n import org.apache.syncope.common.rest.api.beans.AuditQuery;\n+import org.apache.syncope.common.rest.api.beans.RealmQuery;\n import org.apache.syncope.common.rest.api.service.AnyObjectService;\n import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n import org.apache.syncope.common.rest.api.service.AnyTypeService;\n@@ -1003,7 +1004,8 @@ protected static List<AuditEntry> query(final AuditQuery query, final int maxWai\n     }\n \n     protected static Optional<RealmTO> getRealm(final String fullPath) {\n-        return REALM_SERVICE.list(fullPath).stream().filter(realm -> fullPath.equals(realm.getFullPath())).findFirst();\n+        return REALM_SERVICE.search(new RealmQuery.Builder().base(fullPath).build()).getResult().stream().\n+                filter(realm -> fullPath.equals(realm.getFullPath())).findFirst();\n     }\n \n     @Autowired"},{"sha":"9b9c755a027b00eea02808bf7c5fa27257f44f2b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/CommandITCase.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCommandITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCommandITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCommandITCase.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -36,6 +36,7 @@\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.CommandQuery;\n+import org.apache.syncope.common.rest.api.beans.RealmQuery;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.core.reference.TestCommand;\n import org.apache.syncope.fit.core.reference.TestCommandArgs;\n@@ -107,7 +108,8 @@ public void runCommand() {\n             AnyObjectTO printer = ANY_OBJECT_SERVICE.read(args.getPrinterName());\n             assertNotNull(printer);\n             assertEquals(args.getParentRealm() + \"/\" + args.getRealmName(), printer.getRealm());\n-            assertFalse(REALM_SERVICE.list(printer.getRealm()).isEmpty());\n+            assertFalse(REALM_SERVICE.search(\n+                    new RealmQuery.Builder().base(printer.getRealm()).build()).getResult().isEmpty());\n         } finally {\n             ANY_OBJECT_SERVICE.delete(args.getPrinterName());\n             REALM_SERVICE.delete(args.getParentRealm() + \"/\" + args.getRealmName());"},{"sha":"c0452b98df37e20642dbafbdc48c569cdbc74402","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MacroITCase.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMacroITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMacroITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMacroITCase.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -45,6 +45,7 @@\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.ExecSpecs;\n+import org.apache.syncope.common.rest.api.beans.RealmQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.core.reference.TestCommand;\n@@ -134,7 +135,8 @@ public void execute() {\n         AnyObjectTO printer = ANY_OBJECT_SERVICE.read(TCA.getPrinterName());\n         assertNotNull(printer);\n         assertEquals(TCA.getParentRealm() + \"/\" + TCA.getRealmName(), printer.getRealm());\n-        assertFalse(REALM_SERVICE.list(printer.getRealm()).isEmpty());\n+        assertFalse(REALM_SERVICE.search(\n+                new RealmQuery.Builder().base(printer.getRealm()).build()).getResult().isEmpty());\n     }\n \n     @Test"},{"sha":"d6946059bcae32b4e4a5551583557a8127e5318f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RealmITCase.java","status":"modified","additions":27,"deletions":62,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -25,6 +25,7 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n+import jakarta.ws.rs.NotFoundException;\n import jakarta.ws.rs.core.GenericType;\n import jakarta.ws.rs.core.Response;\n import java.util.List;\n@@ -50,10 +51,8 @@\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.RealmQuery;\n-import org.apache.syncope.common.rest.api.service.RealmService;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n public class RealmITCase extends AbstractITCase {\n@@ -64,32 +63,15 @@ public void search() {\n         assertTrue(match.getResult().stream().allMatch(realm -> realm.getName().contains(\"o\")));\n     }\n \n-    @Test\n-    public void list() {\n-        List<RealmTO> realms = REALM_SERVICE.list(SyncopeConstants.ROOT_REALM);\n-        assertNotNull(realms);\n-        assertFalse(realms.isEmpty());\n-        realms.forEach(Assertions::assertNotNull);\n-\n-        try {\n-            REALM_SERVICE.list(\"a name\");\n-            fail(\"This should not happen\");\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.InvalidPath, e.getType());\n-        }\n-    }\n-\n     @Test\n     public void createUpdate() {\n         RealmTO realm = new RealmTO();\n         realm.setName(\"last\");\n \n         // 1. create\n         Response response = REALM_SERVICE.create(\"/even/two\", realm);\n-        RealmTO[] actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n-        assertNotNull(actuals);\n-        assertTrue(actuals.length > 0);\n-        RealmTO actual = actuals[0];\n+        RealmTO actual = getRealm(response.getHeaderString(RESTHeaders.RESOURCE_KEY)).\n+                orElseThrow(() -> new NotFoundException());\n         assertNotNull(actual.getKey());\n         assertEquals(\"last\", actual.getName());\n         assertEquals(\"/even/two/last\", actual.getFullPath());\n@@ -120,8 +102,8 @@ public void createUpdate() {\n         assertNotNull(actual);\n         assertEquals(\"/odd/last\", actual.getFullPath());\n \n-        assertEquals(1, REALM_SERVICE.list(SyncopeConstants.ROOT_REALM).stream().\n-                filter(object -> realm.getName().equals(object.getName())).count());\n+        assertEquals(1, REALM_SERVICE.search(new RealmQuery.Builder().base(SyncopeConstants.ROOT_REALM).build()).\n+                getResult().stream().filter(r -> realm.getName().equals(r.getName())).count());\n \n         // 4. create under invalid path\n         try {\n@@ -148,7 +130,8 @@ public void createWithTilde() {\n         Response response = REALM_SERVICE.create(\"/even/two\", realm);\n         assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n \n-        List<RealmTO> realms = REALM_SERVICE.list(\"/even/two/73~1~19534\");\n+        List<RealmTO> realms = REALM_SERVICE.search(new RealmQuery.Builder().\n+                base(\"/even/two/73~1~19534\").build()).getResult();\n         assertEquals(1, realms.size());\n         assertEquals(realm.getName(), realms.get(0).getName());\n     }\n@@ -180,20 +163,16 @@ public void deletingAccountPolicy() {\n         realm.setName(\"withPolicy\");\n \n         response = REALM_SERVICE.create(SyncopeConstants.ROOT_REALM, realm);\n-        RealmTO[] actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n-        assertNotNull(actuals);\n-        assertTrue(actuals.length > 0);\n-        realm = actuals[0];\n+        realm = getRealm(response.getHeaderString(RESTHeaders.RESOURCE_KEY)).\n+                orElseThrow(() -> new NotFoundException());\n \n         String existingAccountPolicy = realm.getAccountPolicy();\n \n         realm.setAccountPolicy(policy.getKey());\n         REALM_SERVICE.update(realm);\n \n-        actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n-        assertNotNull(actuals);\n-        assertTrue(actuals.length > 0);\n-        RealmTO actual = actuals[0];\n+        RealmTO actual = getRealm(response.getHeaderString(RESTHeaders.RESOURCE_KEY)).\n+                orElseThrow(() -> new NotFoundException());\n         assertEquals(policy.getKey(), actual.getAccountPolicy());\n \n         // 3. remove policy\n@@ -221,20 +200,16 @@ public void deletingAuthPolicy() {\n         realm.setName(\"withAuthPolicy\");\n \n         Response response = REALM_SERVICE.create(SyncopeConstants.ROOT_REALM, realm);\n-        RealmTO[] actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n-        assertNotNull(actuals);\n-        assertTrue(actuals.length > 0);\n-        realm = actuals[0];\n+        realm = getRealm(response.getHeaderString(RESTHeaders.RESOURCE_KEY)).\n+                orElseThrow(() -> new NotFoundException());\n \n         String existingAuthPolicy = realm.getAuthPolicy();\n \n         realm.setAuthPolicy(policy.getKey());\n         REALM_SERVICE.update(realm);\n \n-        actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n-        assertNotNull(actuals);\n-        assertTrue(actuals.length > 0);\n-        RealmTO actual = actuals[0];\n+        RealmTO actual = getRealm(response.getHeaderString(RESTHeaders.RESOURCE_KEY)).\n+                orElseThrow(() -> new NotFoundException());\n         assertEquals(policy.getKey(), actual.getAuthPolicy());\n \n         // 3. remove policy\n@@ -262,20 +237,16 @@ public void deletingAccessPolicy() {\n         realm.setName(\"withAccessPolicy\");\n \n         Response response = REALM_SERVICE.create(SyncopeConstants.ROOT_REALM, realm);\n-        RealmTO[] actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n-        assertNotNull(actuals);\n-        assertTrue(actuals.length > 0);\n-        realm = actuals[0];\n+        realm = getRealm(response.getHeaderString(RESTHeaders.RESOURCE_KEY)).\n+                orElseThrow(() -> new NotFoundException());\n \n         String existingAccessPolicy = realm.getAccessPolicy();\n \n         realm.setAccessPolicy(policy.getKey());\n         REALM_SERVICE.update(realm);\n \n-        actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n-        assertNotNull(actuals);\n-        assertTrue(actuals.length > 0);\n-        RealmTO actual = actuals[0];\n+        RealmTO actual = getRealm(response.getHeaderString(RESTHeaders.RESOURCE_KEY)).\n+                orElseThrow(() -> new NotFoundException());\n         assertEquals(policy.getKey(), actual.getAccessPolicy());\n \n         // 3. remove policy\n@@ -304,20 +275,16 @@ public void deletingAttributeReleasePolicy() {\n         realm.setName(\"withAttrReleasePolicy\");\n \n         Response response = REALM_SERVICE.create(SyncopeConstants.ROOT_REALM, realm);\n-        RealmTO[] actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n-        assertNotNull(actuals);\n-        assertTrue(actuals.length > 0);\n-        realm = actuals[0];\n+        realm = getRealm(response.getHeaderString(RESTHeaders.RESOURCE_KEY)).\n+                orElseThrow(() -> new NotFoundException());\n \n         String existingAttrReleasePolicy = realm.getAttrReleasePolicy();\n \n         realm.setAttrReleasePolicy(policy.getKey());\n         REALM_SERVICE.update(realm);\n \n-        actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n-        assertNotNull(actuals);\n-        assertTrue(actuals.length > 0);\n-        RealmTO actual = actuals[0];\n+        RealmTO actual = getRealm(response.getHeaderString(RESTHeaders.RESOURCE_KEY)).\n+                orElseThrow(() -> new NotFoundException());\n         assertEquals(policy.getKey(), actual.getAttrReleasePolicy());\n \n         // 3. remove policy\n@@ -334,15 +301,13 @@ public void delete() {\n         realm.setName(\"deletable3\");\n \n         Response response = REALM_SERVICE.create(\"/even/two\", realm);\n-        RealmTO[] actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n-        assertNotNull(actuals);\n-        assertTrue(actuals.length > 0);\n-        RealmTO actual = actuals[0];\n+        RealmTO actual = getRealm(response.getHeaderString(RESTHeaders.RESOURCE_KEY)).\n+                orElseThrow(() -> new NotFoundException());\n \n         REALM_SERVICE.delete(actual.getFullPath());\n \n         try {\n-            REALM_SERVICE.list(actual.getFullPath());\n+            REALM_SERVICE.search(new RealmQuery.Builder().base(actual.getFullPath()).build());\n             fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n@@ -421,7 +386,7 @@ public void propagate() {\n     @Test\n     public void issueSYNCOPE1472() {\n         // 1. assign twice resource-ldap-orgunit to /odd\n-        RealmTO realmTO = REALM_SERVICE.list(\"/odd\").get(0);\n+        RealmTO realmTO = REALM_SERVICE.search(new RealmQuery.Builder().base(\"/odd\").build()).getResult().get(0);\n         realmTO.getResources().clear();\n         realmTO.getResources().add(\"resource-ldap-orgunit\");\n         realmTO.getResources().add(\"resource-ldap-orgunit\");"},{"sha":"eff056471d7dfdb1d1e64e33bbb36db314ab95fb","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -25,6 +25,7 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n+import jakarta.ws.rs.NotFoundException;\n import jakarta.ws.rs.core.Response;\n import java.util.ArrayList;\n import java.util.List;\n@@ -55,10 +56,10 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.beans.ConnObjectTOQuery;\n import org.apache.syncope.common.rest.api.service.GroupService;\n-import org.apache.syncope.common.rest.api.service.RealmService;\n import org.apache.syncope.common.rest.api.service.RoleService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.identityconnectors.framework.common.objects.Name;\n@@ -816,10 +817,8 @@ public void issueSYNCOPE1727() {\n \n         // 1. create Realm\n         Response response = REALM_SERVICE.create(\"/even/two\", realm);\n-        RealmTO[] actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n-        assertNotNull(actuals);\n-        assertTrue(actuals.length > 0);\n-        realm = actuals[0];\n+        realm = getRealm(response.getHeaderString(RESTHeaders.RESOURCE_KEY)).\n+                orElseThrow(() -> new NotFoundException());\n         assertNotNull(realm.getKey());\n         assertEquals(\"syncope1727\", realm.getName());\n         assertEquals(\"/even/two/syncope1727\", realm.getFullPath());"},{"sha":"3c6c48d0540ac256bb16e24539120ffb6a604a56","filename":"pom.xml","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -431,7 +431,7 @@ under the License.\n     <elasticsearch.version>8.7.0</elasticsearch.version>\n \n     <disruptor.version>3.4.4</disruptor.version>\n-    \n+\n     <commons-jexl.version>3.3</commons-jexl.version>\n     <commons-text.version>1.10.0</commons-text.version>\n \n@@ -500,9 +500,9 @@ under the License.\n     <docker.mysql.version>8.0</docker.mysql.version>\n     <docker.mariadb.version>10</docker.mariadb.version>\n \n-    <jdbc.postgresql.version>42.5.4</jdbc.postgresql.version>\n+    <jdbc.postgresql.version>42.6.0</jdbc.postgresql.version>\n     <jdbc.mysql.version>8.0.32</jdbc.mysql.version>\n-    <jdbc.mariadb.version>3.1.2</jdbc.mariadb.version>\n+    <jdbc.mariadb.version>3.1.3</jdbc.mariadb.version>\n     <jdbc.mssql.version>12.2.0.jre</jdbc.mssql.version>\n     <jdbc.oracle.version>21.9.0.0</jdbc.oracle.version>\n \n@@ -659,7 +659,7 @@ under the License.\n       <dependency>\n         <groupId>com.fasterxml.woodstox</groupId>\n         <artifactId>woodstox-core</artifactId>\n-        <version>6.4.0</version>\n+        <version>6.5.0</version>\n       </dependency>\n \n       <dependency>\n@@ -1706,7 +1706,7 @@ under the License.\n         <plugin>\n           <groupId>org.jacoco</groupId>\n           <artifactId>jacoco-maven-plugin</artifactId>\n-          <version>0.8.8</version>\n+          <version>0.8.9</version>\n         </plugin>\n \n         <plugin>\n@@ -1996,7 +1996,7 @@ under the License.\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-javadoc-plugin</artifactId>\n-        <version>3.4.1</version>\n+        <version>3.5.0</version>\n         <configuration>\n           <source>${targetJdk}</source>\n           <destDir>apidocs/4.0</destDir>\n@@ -2060,7 +2060,7 @@ under the License.\n           <plugin>\n             <groupId>org.cyclonedx</groupId>\n             <artifactId>cyclonedx-maven-plugin</artifactId>\n-            <version>2.7.6</version>\n+            <version>2.7.7</version>\n             <executions>\n               <execution>\n                 <phase>package</phase>\n@@ -2133,7 +2133,7 @@ under the License.\n           <plugin>\n             <groupId>org.asciidoctor</groupId>\n             <artifactId>asciidoctor-maven-plugin</artifactId>\n-            <version>2.2.2</version>\n+            <version>2.2.3</version>\n             <inherited>false</inherited>\n             <dependencies>\n               <dependency>"},{"sha":"4986929cb9ad85ab83f8d493adea263fb0e53153","filename":"src/main/asciidoc/reference-guide/concepts/entitlements.adoc","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fentitlements.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fentitlements.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fentitlements.adoc?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -31,12 +31,12 @@ https://github.com/apache/syncope/blob/master/core/logic/src/main/java/org/apach\n endif::[]\n , the\n https://docs.spring.io/spring-security/site/docs/5.5.x/reference/html5/#el-common-built-in[`hasRole` expression^]\n-is used together with one of the standard entitlements to restrict access only to Users owning the `REALM_LIST`\n+is used together with one of the standard entitlements to restrict access only to Users owning the `REALM_SEARCH`\n entitlement.\n \n [source,java]\n ----\n-@PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REALM_LIST + \"')\")\n+@PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REALM_SEARCH + \"')\")\n public List<RealmTO> list(final String fullPath) {\n ----\n "},{"sha":"83e8cfa313c6510219955cdfd4f1b73c47084e77","filename":"src/main/asciidoc/reference-guide/concepts/roles.adoc","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3be90d61a89842e6991f63d0f96c2f3421a126bf/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Froles.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3be90d61a89842e6991f63d0f96c2f3421a126bf/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Froles.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Froles.adoc?ref=3be90d61a89842e6991f63d0f96c2f3421a126bf","patch":"@@ -93,7 +93,7 @@ For example, the following entitlements are normally required to be granted for\n . `RELATIONSHIPTYPE_LIST`\n . `USER_READ`\n . `ANYTYPE_READ`\n-. `REALM_LIST`\n+. `REALM_SEARCH`\n . `GROUP_SEARCH`\n ====\n \n@@ -122,7 +122,7 @@ The actual Entitlements are assigned through the predefined `GROUP_OWNER` Role:\n . `ANYTYPECLASS_LIST`\n . `RELATIONSHIPTYPE_LIST`\n . `ANYTYPE_READ`\n-. `REALM_LIST`\n+. `REALM_SEARCH`\n . `GROUP_SEARCH`\n . `GROUP_READ`\n . `GROUP_UPDATE`"}]}