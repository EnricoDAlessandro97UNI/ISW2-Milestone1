{"sha":"fc91e516ed0ba34f8252830f69830460d58eae6b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmZjOTFlNTE2ZWQwYmEzNGY4MjUyODMwZjY5ODMwNDYwZDU4ZWFlNmI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-17T15:28:55Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-17T15:28:55Z"},"message":"Cleanup unused stuff","tree":{"sha":"7ec0e5755ae08c49abd86289aaf4ca46d0e2b17d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7ec0e5755ae08c49abd86289aaf4ca46d0e2b17d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/fc91e516ed0ba34f8252830f69830460d58eae6b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fc91e516ed0ba34f8252830f69830460d58eae6b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fc91e516ed0ba34f8252830f69830460d58eae6b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fc91e516ed0ba34f8252830f69830460d58eae6b/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"8fe3c7c20105df6112a1ee7b0206cb00e9c1a054","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054"}],"stats":{"total":117,"additions":15,"deletions":102},"files":[{"sha":"5d2603fbd821883256d8047a6542fa66c2ddadc9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/annotation/FormAttributeField.java","status":"removed","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fannotation%2FFormAttributeField.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fannotation%2FFormAttributeField.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fannotation%2FFormAttributeField.java?ref=8fe3c7c20105df6112a1ee7b0206cb00e9c1a054","patch":"@@ -1,36 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.annotation;\n-\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n-\n-@Target({ ElementType.FIELD })\n-@Retention(RetentionPolicy.RUNTIME)\n-public @interface FormAttributeField {\n-\n-    boolean userSearch() default false;\n-\n-    boolean groupSearch() default false;\n-\n-    IntMappingType schema() default IntMappingType.UserPlainSchema;\n-}"},{"sha":"29f6363487079bdc04a87d928f8777fb5be397d2","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/report/AbstractAnyReportletConf.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc91e516ed0ba34f8252830f69830460d58eae6b/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAbstractAnyReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc91e516ed0ba34f8252830f69830460d58eae6b/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAbstractAnyReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAbstractAnyReportletConf.java?ref=fc91e516ed0ba34f8252830f69830460d58eae6b","patch":"@@ -24,24 +24,18 @@\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.annotation.FormAttributeField;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n \n @XmlType\n public abstract class AbstractAnyReportletConf extends AbstractReportletConf {\n \n     private static final long serialVersionUID = -5388597116592877789L;\n \n-    @FormAttributeField(userSearch = true)\n     protected String matchingCond;\n \n-    @FormAttributeField(schema = IntMappingType.UserPlainSchema)\n     protected final List<String> plainAttrs = new ArrayList<>();\n \n-    @FormAttributeField(schema = IntMappingType.UserDerivedSchema)\n     protected final List<String> derAttrs = new ArrayList<>();\n \n-    @FormAttributeField(schema = IntMappingType.UserVirtualSchema)\n     protected final List<String> virAttrs = new ArrayList<>();\n \n     public AbstractAnyReportletConf() {"},{"sha":"8b7a5479a56cdfe95766155f4e3a8ce4394313ad","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/AccountPolicyEnforcer.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc91e516ed0ba34f8252830f69830460d58eae6b/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FAccountPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc91e516ed0ba34f8252830f69830460d58eae6b/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FAccountPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FAccountPolicyEnforcer.java?ref=fc91e516ed0ba34f8252830f69830460d58eae6b","patch":"@@ -20,7 +20,6 @@\n \n import java.util.regex.Pattern;\n import org.apache.syncope.common.lib.types.AccountPolicySpec;\n-import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.springframework.stereotype.Component;\n \n@@ -29,13 +28,9 @@ public class AccountPolicyEnforcer {\n \n     private static final Pattern DEFAULT_PATTERN = Pattern.compile(\"[a-zA-Z0-9-_@. ]+\");\n \n-    public boolean enforce(final AccountPolicySpec policy, final PolicyType type, final User user) {\n+    public boolean enforce(final AccountPolicySpec policy, final User user) {\n         if (user.getUsername() == null) {\n-            throw new PolicyEnforceException(\"Invalid account\");\n-        }\n-\n-        if (policy == null) {\n-            throw new PolicyEnforceException(\"Invalid policy\");\n+            throw new AccountPolicyException(\"Invalid account\");\n         }\n \n         // check min length"},{"sha":"c2af367454013170977df8f2f8557dce5aeca164","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/PasswordPolicyEnforcer.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc91e516ed0ba34f8252830f69830460d58eae6b/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPasswordPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc91e516ed0ba34f8252830f69830460d58eae6b/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPasswordPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPasswordPolicyEnforcer.java?ref=fc91e516ed0ba34f8252830f69830460d58eae6b","patch":"@@ -19,24 +19,21 @@\n package org.apache.syncope.core.misc.policy;\n \n import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n-import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.springframework.stereotype.Component;\n \n @Component\n public class PasswordPolicyEnforcer {\n \n-    public boolean enforce(final PasswordPolicySpec policy, final PolicyType type, final User user) {\n-        final String clearPassword = user.getClearPassword();\n-        final String password = user.getPassword();\n-\n-        if (policy == null) {\n-            throw new PolicyEnforceException(\"Invalid policy\");\n-        }\n+    public boolean enforce(final PasswordPolicySpec policy, final User user) {\n+        String clearPassword = user.getClearPassword();\n+        String password = user.getPassword();\n \n         if (password == null && !policy.isAllowNullPassword()) {\n-            throw new PolicyEnforceException(\"Password mandatory\");\n-        } else if (password != null && clearPassword != null) {\n+            throw new PasswordPolicyException(\"Password mandatory\");\n+        }\n+        \n+        if (password != null && clearPassword != null) {\n             // check length\n             if (policy.getMinLength() > 0 && policy.getMinLength() > clearPassword.length()) {\n                 throw new PasswordPolicyException(\"Password too short\");"},{"sha":"e7211b803d18dc3b4890f28fa2bd6e7744aca8a7","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/PolicyEnforceException.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEnforceException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEnforceException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEnforceException.java?ref=8fe3c7c20105df6112a1ee7b0206cb00e9c1a054","patch":"@@ -1,32 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.misc.policy;\n-\n-public class PolicyEnforceException extends PolicyException {\n-\n-    private static final long serialVersionUID = 3247084727383061069L;\n-\n-    public PolicyEnforceException() {\n-        super();\n-    }\n-\n-    public PolicyEnforceException(final String message) {\n-        super(message);\n-    }\n-}"},{"sha":"425568d338853d070f4c376612e3d659633ec2d2","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/PolicyEvaluator.java","status":"modified","additions":4,"deletions":9,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc91e516ed0ba34f8252830f69830460d58eae6b/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEvaluator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc91e516ed0ba34f8252830f69830460d58eae6b/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEvaluator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEvaluator.java?ref=fc91e516ed0ba34f8252830f69830460d58eae6b","patch":"@@ -38,11 +38,7 @@ public class PolicyEvaluator {\n \n     @SuppressWarnings(\"unchecked\")\n     public <T extends PolicySpec> T evaluate(final Policy policy, final Any<?, ?, ?> any) {\n-        if (policy == null) {\n-            return null;\n-        }\n-\n-        T result = null;\n+        T result;\n         switch (policy.getType()) {\n             case PASSWORD:\n                 PasswordPolicySpec ppSpec = policy.getSpecification(PasswordPolicySpec.class);\n@@ -75,13 +71,13 @@ public <T extends PolicySpec> T evaluate(final Policy policy, final Any<?, ?, ?>\n                 break;\n \n             case ACCOUNT:\n-                final AccountPolicySpec spec = policy.getSpecification(AccountPolicySpec.class);\n-                final AccountPolicySpec accountPolicy = new AccountPolicySpec();\n+                AccountPolicySpec spec = policy.getSpecification(AccountPolicySpec.class);\n+                AccountPolicySpec accountPolicy = new AccountPolicySpec();\n \n                 BeanUtils.copyProperties(spec, accountPolicy, new String[] { \"schemasNotPermitted\" });\n \n                 for (String schema : spec.getSchemasNotPermitted()) {\n-                    PlainAttr attr = any.getPlainAttr(schema);\n+                    PlainAttr<?> attr = any.getPlainAttr(schema);\n                     if (attr != null) {\n                         List<String> values = attr.getValuesAsStrings();\n                         if (values != null && !values.isEmpty()) {\n@@ -93,7 +89,6 @@ public <T extends PolicySpec> T evaluate(final Policy policy, final Any<?, ?, ?>\n                 result = (T) accountPolicy;\n                 break;\n \n-            case SYNC:\n             default:\n                 result = null;\n         }"},{"sha":"7dd3fe78e4f3958ea3cafeb0203c4ad07d86249d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc91e516ed0ba34f8252830f69830460d58eae6b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc91e516ed0ba34f8252830f69830460d58eae6b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=fc91e516ed0ba34f8252830f69830460d58eae6b","patch":"@@ -239,7 +239,7 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n                 // evaluate policy\n                 PasswordPolicySpec ppSpec = evaluator.evaluate(policy, user);\n                 // enforce policy\n-                ppEnforcer.enforce(ppSpec, policy.getType(), user);\n+                ppEnforcer.enforce(ppSpec, user);\n \n                 if (ppSpec.getHistoryLength() > maxPPSpecHistory) {\n                     maxPPSpecHistory = ppSpec.getHistoryLength();\n@@ -282,7 +282,7 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n                 AccountPolicySpec apSpec = evaluator.evaluate(policy, user);\n \n                 // enforce policy\n-                suspend |= apEnforcer.enforce(apSpec, policy.getType(), user);\n+                suspend |= apEnforcer.enforce(apSpec, user);\n                 propagateSuspension |= apSpec.isPropagateSuspension();\n             }\n         } catch (Exception e) {"}]}