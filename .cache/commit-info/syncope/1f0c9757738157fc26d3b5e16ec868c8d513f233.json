{"sha":"1f0c9757738157fc26d3b5e16ec868c8d513f233","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjFmMGM5NzU3NzM4MTU3ZmMyNmQzYjVlMTZlYzg2OGM4ZDUxM2YyMzM=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2012-02-09T12:26:57Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2012-02-09T12:26:57Z"},"message":"Merge from branch 0_7_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247397 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"88424c460f070d907efc47524837a0f94dc3ed43","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/88424c460f070d907efc47524837a0f94dc3ed43"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1f0c9757738157fc26d3b5e16ec868c8d513f233","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1f0c9757738157fc26d3b5e16ec868c8d513f233","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1f0c9757738157fc26d3b5e16ec868c8d513f233","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1f0c9757738157fc26d3b5e16ec868c8d513f233/comments","author":null,"committer":null,"parents":[{"sha":"01d002d58fbbd22c2c562cc8ead51420c105a081","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/01d002d58fbbd22c2c562cc8ead51420c105a081","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/01d002d58fbbd22c2c562cc8ead51420c105a081"}],"stats":{"total":79,"additions":48,"deletions":31},"files":[{"sha":"50ce415cd9a94243aee0818f5221b5c351bd90f0","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttr.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f0c9757738157fc26d3b5e16ec868c8d513f233/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f0c9757738157fc26d3b5e16ec868c8d513f233/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java?ref=1f0c9757738157fc26d3b5e16ec868c8d513f233","patch":"@@ -18,7 +18,6 @@\n import java.util.Collections;\n import java.util.List;\n import javax.persistence.MappedSuperclass;\n-import org.syncope.core.persistence.validation.attrvalue.ParseException;\n import org.syncope.core.persistence.validation.attrvalue.InvalidAttrValueException;\n import org.syncope.core.persistence.validation.entity.AttrCheck;\n import org.syncope.core.util.AttributableUtil;\n@@ -33,7 +32,7 @@ public abstract class AbstractAttr extends AbstractBaseBean {\n \n     public <T extends AbstractAttrValue> T addValue(final String value,\n             final AttributableUtil attributableUtil)\n-            throws ParseException, InvalidAttrValueException {\n+            throws InvalidAttrValueException {\n \n         T attrValue;\n         if (getSchema().isUniqueConstraint()) {\n@@ -44,7 +43,7 @@ public <T extends AbstractAttrValue> T addValue(final String value,\n         }\n \n         attrValue.setAttribute(this);\n-        attrValue = getSchema().getValidator().getValue(value, attrValue);\n+        getSchema().getValidator().validate(value, attrValue);\n \n         if (getSchema().isUniqueConstraint()) {\n             setUniqueValue(attrValue);"},{"sha":"26cc81b28fa7fae9ebc566bff251a45a030ff95a","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserSearchDAOImpl.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f0c9757738157fc26d3b5e16ec868c8d513f233/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f0c9757738157fc26d3b5e16ec868c8d513f233/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java?ref=1f0c9757738157fc26d3b5e16ec868c8d513f233","patch":"@@ -538,8 +538,7 @@ private String getQuery(final AttributeCond cond,\n                     && cond.getType() != AttributeCond.Type.ISNULL\n                     && cond.getType() != AttributeCond.Type.ISNOTNULL) {\n \n-                attrValue = schema.getValidator().\n-                        getValue(cond.getExpression(), attrValue);\n+                schema.getValidator().validate(cond.getExpression(), attrValue);\n             }\n         } catch (ValidationException e) {\n             LOG.error(\"Could not validate expression '\"\n@@ -595,8 +594,7 @@ private String getQuery(final SyncopeUserCond cond,\n                     && cond.getType() != AttributeCond.Type.ISNULL\n                     && cond.getType() != AttributeCond.Type.ISNOTNULL) {\n \n-                attrValue = schema.getValidator().\n-                        getValue(cond.getExpression(), attrValue);\n+                schema.getValidator().validate(cond.getExpression(), attrValue);\n             }\n         } catch (ValidationException e) {\n             LOG.error(\"Could not validate expression '\""},{"sha":"3866c5e2aef93039587233e51c83e60e0bb72641","filename":"core/src/main/java/org/syncope/core/persistence/validation/attrvalue/AbstractValidator.java","status":"modified","additions":15,"deletions":18,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f0c9757738157fc26d3b5e16ec868c8d513f233/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FAbstractValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f0c9757738157fc26d3b5e16ec868c8d513f233/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FAbstractValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FAbstractValidator.java?ref=1f0c9757738157fc26d3b5e16ec868c8d513f233","patch":"@@ -22,8 +22,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.syncope.client.SyncopeConstants;\n-import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n \n public abstract class AbstractValidator implements Validator, Serializable {\n \n@@ -42,19 +42,17 @@ public AbstractValidator(final AbstractSchema schema) {\n     }\n \n     @Override\n-    public <T extends AbstractAttrValue> T getValue(final String value,\n+    public <T extends AbstractAttrValue> void validate(final String value,\n             T attributeValue)\n-            throws ParseException, InvalidAttrValueException {\n+            throws ParsingValidationException, InvalidAttrValueException {\n \n-        attributeValue = parseValue(value, attributeValue);\n+        parseValue(value, attributeValue);\n         doValidate(attributeValue);\n-\n-        return attributeValue;\n     }\n \n-    private <T extends AbstractAttrValue> T parseValue(final String value,\n-            T attributeValue)\n-            throws ParseException {\n+    private <T extends AbstractAttrValue> void parseValue(final String value,\n+            final T attributeValue)\n+            throws ParsingValidationException {\n \n         Exception exception = null;\n \n@@ -78,7 +76,7 @@ private <T extends AbstractAttrValue> T parseValue(final String value,\n                                 ((DecimalFormat) schema.getFormatter()).parse(\n                                 value).longValue()));\n                     }\n-                } catch (java.text.ParseException pe) {\n+                } catch (Exception pe) {\n                     exception = pe;\n                 }\n                 break;\n@@ -92,7 +90,7 @@ private <T extends AbstractAttrValue> T parseValue(final String value,\n                                 ((DecimalFormat) schema.getFormatter()).parse(\n                                 value).doubleValue()));\n                     }\n-                } catch (java.text.ParseException pe) {\n+                } catch (Exception pe) {\n                     exception = pe;\n                 }\n                 break;\n@@ -101,25 +99,24 @@ private <T extends AbstractAttrValue> T parseValue(final String value,\n                 try {\n                     if (schema.getFormatter() == null) {\n                         attributeValue.setDateValue(DateUtils.parseDate(\n-                                value,\n-                                SyncopeConstants.DATE_PATTERNS));\n+                                value, SyncopeConstants.DATE_PATTERNS));\n                     } else {\n                         attributeValue.setDateValue(new Date(\n                                 ((DateFormat) schema.getFormatter()).parse(\n                                 value).getTime()));\n                     }\n-                } catch (java.text.ParseException pe) {\n+                } catch (Exception pe) {\n                     exception = pe;\n                 }\n                 break;\n+\n+            default:\n         }\n \n         if (exception != null) {\n-            throw new ParseException(\"While trying to parse '\" + value + \"'\",\n-                    exception);\n+            throw new ParsingValidationException(\"While trying to parse '\"\n+                    + value + \"'\", exception);\n         }\n-\n-        return attributeValue;\n     }\n \n     protected abstract <T extends AbstractAttrValue> void doValidate("},{"sha":"93b538ab3f3a5811709ee1ccc23ba3109fdf5f2f","filename":"core/src/main/java/org/syncope/core/persistence/validation/attrvalue/ParsingValidationException.java","status":"renamed","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f0c9757738157fc26d3b5e16ec868c8d513f233/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FParsingValidationException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f0c9757738157fc26d3b5e16ec868c8d513f233/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FParsingValidationException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FParsingValidationException.java?ref=1f0c9757738157fc26d3b5e16ec868c8d513f233","patch":"@@ -16,9 +16,11 @@\n \n import javax.validation.ValidationException;\n \n-public class ParseException extends ValidationException {\n+public class ParsingValidationException extends ValidationException {\n \n-    public ParseException(String message, Throwable cause) {\n+    private static final long serialVersionUID = 5669262895008285522L;\n+\n+    public ParsingValidationException(String message, Throwable cause) {\n         super(message, cause);\n     }\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/validation/attrvalue/ParseException.java"},{"sha":"4e8bc01c0faa5a717cfe5db36d0156f079cf27cf","filename":"core/src/main/java/org/syncope/core/persistence/validation/attrvalue/Validator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f0c9757738157fc26d3b5e16ec868c8d513f233/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f0c9757738157fc26d3b5e16ec868c8d513f233/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FValidator.java?ref=1f0c9757738157fc26d3b5e16ec868c8d513f233","patch":"@@ -18,7 +18,7 @@\n \n public interface Validator {\n \n-    <T extends AbstractAttrValue> T getValue(String value,\n+    <T extends AbstractAttrValue> void validate(String value,\n             T attributeValue)\n-            throws ParseException, InvalidAttrValueException;\n+            throws ParsingValidationException, InvalidAttrValueException;\n }"},{"sha":"2cb72663eece7c4981286a0c9cf0caa307c0065d","filename":"core/src/test/java/org/syncope/core/persistence/dao/SchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f0c9757738157fc26d3b5e16ec868c8d513f233/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f0c9757738157fc26d3b5e16ec868c8d513f233/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java?ref=1f0c9757738157fc26d3b5e16ec868c8d513f233","patch":"@@ -38,7 +38,7 @@ public class SchemaTest extends AbstractTest {\n     @Test\n     public void findAll() {\n         List<USchema> userList = schemaDAO.findAll(USchema.class);\n-        assertEquals(11, userList.size());\n+        assertEquals(12, userList.size());\n \n         List<RSchema> roleList = schemaDAO.findAll(RSchema.class);\n         assertEquals(4, roleList.size());"},{"sha":"2506f753aa0f68850b50c4069c07463639a66101","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":20,"deletions":1,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f0c9757738157fc26d3b5e16ec868c8d513f233/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f0c9757738157fc26d3b5e16ec868c8d513f233/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=1f0c9757738157fc26d3b5e16ec868c8d513f233","patch":"@@ -1589,7 +1589,7 @@ public final void issue280() {\n     }\n \n     @Test\n-    public final void issue281() {\n+    public void issue281() {\n         UserTO userTO = getSampleTO(\"issue281@syncope-idm.org\");\n         userTO.getResources().clear();\n         userTO.getMemberships().clear();\n@@ -1613,4 +1613,23 @@ public final void issue281() {\n         assertEquals(\"resource-csv\", statuses.keySet().iterator().next());\n         assertFalse(exec.isSuccessful());\n     }\n+\n+    @Test\n+    public void issue288() {\n+        UserTO userTO = getSampleTO(\"issue288@syncope-idm.org\");\n+\n+        AttributeTO attributeTO = new AttributeTO();\n+        attributeTO.setSchema(\"aLong\");\n+        attributeTO.addValue(\"STRING\");\n+        userTO.addAttribute(attributeTO);\n+\n+        try {\n+            restTemplate.postForObject(\n+                    BASE_URL + \"user/create\", userTO, UserTO.class);\n+            fail();\n+        } catch (SyncopeClientCompositeErrorException sccee) {\n+            assertNotNull(sccee.getException(\n+                    SyncopeClientExceptionType.InvalidValues));\n+        }\n+    }\n }"},{"sha":"95d0569a8556005b0015df4af6b009f7f272e2f4","filename":"core/src/test/resources/content.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f0c9757738157fc26d3b5e16ec868c8d513f233/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f0c9757738157fc26d3b5e16ec868c8d513f233/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=1f0c9757738157fc26d3b5e16ec868c8d513f233","patch":"@@ -95,6 +95,8 @@\n     <USchema name=\"gender\" type=\"Enum\"\n              mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n              enumerationValues=\"M;F\"/>\n+    <USchema name=\"aLong\" type=\"Long\"\n+             mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n \n     <UDerSchema name=\"csvuserid\" expression=\"firstname + ',' + surname\"/>\n "}]}