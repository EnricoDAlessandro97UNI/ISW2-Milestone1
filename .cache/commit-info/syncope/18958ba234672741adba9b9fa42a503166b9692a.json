{"sha":"18958ba234672741adba9b9fa42a503166b9692a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjE4OTU4YmEyMzQ2NzI3NDFhZGJhOWI5ZmE0MmE1MDMxNjZiOTY5MmE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-04-10T13:11:19Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-04-10T13:11:19Z"},"message":"[SYNCOPE-119] (re)Introducing Roles","tree":{"sha":"e9f1a0ec77ab85176d9d870c31970e7dac267e40","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e9f1a0ec77ab85176d9d870c31970e7dac267e40"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/18958ba234672741adba9b9fa42a503166b9692a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/18958ba234672741adba9b9fa42a503166b9692a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/18958ba234672741adba9b9fa42a503166b9692a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/18958ba234672741adba9b9fa42a503166b9692a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"423e4cca089a3ba9f8458428a40f6d4d74a324f9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/423e4cca089a3ba9f8458428a40f6d4d74a324f9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/423e4cca089a3ba9f8458428a40f6d4d74a324f9"}],"stats":{"total":1414,"additions":1344,"deletions":70},"files":[{"sha":"f7e46de9153ebf710cc89fbfd3bf456847c02412","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RoleTO.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.types.Entitlement;\n+\n+@XmlRootElement(name = \"role\")\n+@XmlType\n+public class RoleTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 4560822655754800031L;\n+\n+    private long key;\n+\n+    private String name;\n+\n+    private String criteria;\n+\n+    private final Set<Entitlement> entitlements = EnumSet.noneOf(Entitlement.class);\n+\n+    private final List<String> realms = new ArrayList<>();\n+\n+    public long getKey() {\n+        return key;\n+    }\n+\n+    public void setKey(final long key) {\n+        this.key = key;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    public String getCriteria() {\n+        return criteria;\n+    }\n+\n+    public void setCriteria(final String criteria) {\n+        this.criteria = criteria;\n+    }\n+\n+    @XmlElementWrapper(name = \"entitlements\")\n+    @XmlElement(name = \"entitlement\")\n+    @JsonProperty(\"entitlements\")\n+    public Set<Entitlement> getEntitlements() {\n+        return entitlements;\n+    }\n+\n+    @XmlElementWrapper(name = \"realms\")\n+    @XmlElement(name = \"realm\")\n+    @JsonProperty(\"realms\")\n+    public List<String> getRealms() {\n+        return realms;\n+    }\n+\n+}"},{"sha":"8e405512096970f15bbe36e4a3f0bda3d05833ef","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/Entitlement.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+public enum Entitlement {\n+\n+    REALM_LIST,\n+    REALM_CREATE,\n+    REALM_UPDATE,\n+    REALM_DELETE,\n+    ROLE_LIST,\n+    ROLE_CREATE,\n+    ROLE_READ,\n+    ROLE_UPDATE,\n+    ROLE_DELETE,\n+    SCHEMA_LIST,\n+    SCHEMA_CREATE,\n+    SCHEMA_READ,\n+    SCHEMA_UPDATE,\n+    SCHEMA_DELETE,\n+    USER_LIST,\n+    USER_CREATE,\n+    USER_READ,\n+    USER_UPDATE,\n+    USER_DELETE,\n+    USER_VIEW,\n+    GROUP_LIST,\n+    GROUP_CREATE,\n+    GROUP_READ,\n+    GROUP_UPDATE,\n+    GROUP_DELETE,\n+    RESOURCE_LIST,\n+    RESOURCE_CREATE,\n+    RESOURCE_READ,\n+    RESOURCE_UPDATE,\n+    RESOURCE_DELETE,\n+    RESOURCE_GETCONNECTOROBJECT,\n+    CONNECTOR_LIST,\n+    CONNECTOR_CREATE,\n+    CONNECTOR_READ,\n+    CONNECTOR_UPDATE,\n+    CONNECTOR_DELETE,\n+    CONNECTOR_RELOAD,\n+    CONFIGURATION_EXPORT,\n+    CONFIGURATION_LIST,\n+    CONFIGURATION_SET,\n+    CONFIGURATION_DELETE,\n+    TASK_LIST,\n+    TASK_CREATE,\n+    TASK_READ,\n+    TASK_UPDATE,\n+    TASK_DELETE,\n+    TASK_EXECUTE,\n+    POLICY_LIST,\n+    POLICY_CREATE,\n+    POLICY_READ,\n+    POLICY_UPDATE,\n+    POLICY_DELETE,\n+    WORKFLOW_DEF_READ,\n+    WORKFLOW_DEF_UPDATE,\n+    WORKFLOW_TASK_LIST,\n+    WORKFLOW_FORM_LIST,\n+    WORKFLOW_FORM_READ,\n+    WORKFLOW_FORM_CLAIM,\n+    WORKFLOW_FORM_SUBMIT,\n+    NOTIFICATION_LIST,\n+    NOTIFICATION_CREATE,\n+    NOTIFICATION_READ,\n+    NOTIFICATION_UPDATE,\n+    NOTIFICATION_DELETE,\n+    REPORT_LIST,\n+    REPORT_READ,\n+    REPORT_CREATE,\n+    REPORT_UPDATE,\n+    REPORT_DELETE,\n+    REPORT_EXECUTE,\n+    LOG_LIST,\n+    LOG_SET_LEVEL,\n+    LOG_DELETE,\n+    AUDIT_LIST,\n+    AUDIT_ENABLE,\n+    AUDIT_DISABLE,\n+    SECURITY_QUESTION_CREATE,\n+    SECURITY_QUESTION_UPDATE,\n+    SECURITY_QUESTION_DELETE;\n+\n+}"},{"sha":"172af5f8f9849eef06a059e35cd9622ea8af1fea","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+\n+/**\n+ * REST operations for roles.\n+ */\n+@Path(\"roles\")\n+public interface RoleService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of all roles.\n+     *\n+     * @return list of all roles.\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<RoleTO> list();\n+\n+    /**\n+     * Returns role with matching id.\n+     *\n+     * @param roleKey role id to be read\n+     * @return role with matching id\n+     */\n+    @GET\n+    @Path(\"{roleKey}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    RoleTO read(@NotNull @PathParam(\"roleKey\") Long roleKey);\n+\n+    /**\n+     * Creates a new role.\n+     *\n+     * @param roleTO role to be created\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created role\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring <tt>Location</tt> header of created role\")\n+    })\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response create(@NotNull RoleTO roleTO);\n+\n+    /**\n+     * Updates the role matching the provided id.\n+     *\n+     * @param roleKey role id to be updated\n+     * @param roleTO role to be stored\n+     */\n+    @PUT\n+    @Path(\"{roleKey}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void update(@NotNull @PathParam(\"roleKey\") Long roleKey, @NotNull RoleTO roleTO);\n+\n+    /**\n+     * Deletes the role matching the provided id.\n+     *\n+     * @param roleKey role id to be deleted\n+     */\n+    @DELETE\n+    @Path(\"{roleKey}\")\n+    void delete(@NotNull @PathParam(\"roleKey\") Long roleKey);\n+}"},{"sha":"c7ad949b98fd811ef2b3c4194ddcf41ac4e02aa4","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/NotificationLogic.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -43,12 +43,12 @@ public class NotificationLogic extends AbstractTransactionalLogic<NotificationTO\n     private NotificationDataBinder binder;\n \n     @PreAuthorize(\"hasRole('NOTIFICATION_READ')\")\n-    public NotificationTO read(final Long notificationId) {\n-        Notification notification = notificationDAO.find(notificationId);\n+    public NotificationTO read(final Long notificationKey) {\n+        Notification notification = notificationDAO.find(notificationKey);\n         if (notification == null) {\n-            LOG.error(\"Could not find notification '\" + notificationId + \"'\");\n+            LOG.error(\"Could not find notification '\" + notificationKey + \"'\");\n \n-            throw new NotFoundException(String.valueOf(notificationId));\n+            throw new NotFoundException(String.valueOf(notificationKey));\n         }\n \n         return binder.getNotificationTO(notification);\n@@ -84,17 +84,17 @@ public NotificationTO update(final NotificationTO notificationTO) {\n         return binder.getNotificationTO(notification);\n     }\n \n-    @PreAuthorize(\"hasRole('CONNECTOR_DELETE')\")\n-    public NotificationTO delete(final Long notificationId) {\n-        Notification notification = notificationDAO.find(notificationId);\n+    @PreAuthorize(\"hasRole('NOTIFICATION_DELETE')\")\n+    public NotificationTO delete(final Long notificationKey) {\n+        Notification notification = notificationDAO.find(notificationKey);\n         if (notification == null) {\n-            LOG.error(\"Could not find notification '\" + notificationId + \"'\");\n+            LOG.error(\"Could not find notification '\" + notificationKey + \"'\");\n \n-            throw new NotFoundException(String.valueOf(notificationId));\n+            throw new NotFoundException(String.valueOf(notificationKey));\n         }\n \n         NotificationTO deleted = binder.getNotificationTO(notification);\n-        notificationDAO.delete(notificationId);\n+        notificationDAO.delete(notificationKey);\n         return deleted;\n     }\n "},{"sha":"668d263541c1f4ed6bad488292b9f8a38098dea3","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RoleLogic.java","status":"added","additions":129,"deletions":0,"changes":129,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.provisioning.api.data.RoleDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class RoleLogic extends AbstractTransactionalLogic<RoleTO> {\n+\n+    @Autowired\n+    private RoleDataBinder binder;\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n+    @PreAuthorize(\"hasRole('ROLE_READ')\")\n+    public RoleTO read(final Long roleKey) {\n+        Role role = roleDAO.find(roleKey);\n+        if (role == null) {\n+            LOG.error(\"Could not find role '\" + roleKey + \"'\");\n+\n+            throw new NotFoundException(String.valueOf(roleKey));\n+        }\n+\n+        return binder.getRoleTO(role);\n+    }\n+\n+    @PreAuthorize(\"hasRole('ROLE_LIST')\")\n+    public List<RoleTO> list() {\n+        return CollectionUtils.collect(roleDAO.findAll(), new Transformer<Role, RoleTO>() {\n+\n+            @Override\n+            public RoleTO transform(final Role input) {\n+                return binder.getRoleTO(input);\n+            }\n+        }, new ArrayList<RoleTO>());\n+    }\n+\n+    @PreAuthorize(\"hasRole('ROLE_CREATE')\")\n+    public RoleTO create(final RoleTO roleTO) {\n+        return binder.getRoleTO(roleDAO.save(binder.create(roleTO)));\n+    }\n+\n+    @PreAuthorize(\"hasRole('ROLE_UPDATE')\")\n+    public RoleTO update(final RoleTO roleTO) {\n+        Role role = roleDAO.find(roleTO.getKey());\n+        if (role == null) {\n+            LOG.error(\"Could not find role '\" + roleTO.getKey() + \"'\");\n+            throw new NotFoundException(String.valueOf(roleTO.getKey()));\n+        }\n+\n+        binder.update(role, roleTO);\n+        role = roleDAO.save(role);\n+\n+        return binder.getRoleTO(role);\n+    }\n+\n+    @PreAuthorize(\"hasRole('ROLE_DELETE')\")\n+    public RoleTO delete(final Long roleKey) {\n+        Role role = roleDAO.find(roleKey);\n+        if (role == null) {\n+            LOG.error(\"Could not find role '\" + roleKey + \"'\");\n+\n+            throw new NotFoundException(String.valueOf(roleKey));\n+        }\n+\n+        RoleTO deleted = binder.getRoleTO(role);\n+        roleDAO.delete(roleKey);\n+        return deleted;\n+    }\n+\n+    @Override\n+    protected RoleTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n+        Long key = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof Long) {\n+                    key = (Long) args[i];\n+                } else if (args[i] instanceof RoleTO) {\n+                    key = ((RoleTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if ((key != null) && !key.equals(0L)) {\n+            try {\n+                return binder.getRoleTO(roleDAO.find(key));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+\n+}"},{"sha":"684592c718ea438504006002ace5c2605de78c4c","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/search/SearchCondConverter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverter.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -24,7 +24,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n \n /**\n- * Converts FIQL expressions to Syncope's <tt>SearchCond</tt>.\n+ * Converts FIQL expressions to Syncope's {@link SearchCond}.\n  */\n public final class SearchCondConverter {\n \n@@ -36,10 +36,10 @@ public final class SearchCondConverter {\n      * @see FiqlParser\n      */\n     public static SearchCond convert(final String fiqlExpression) {\n-        FiqlParser<SearchBean> fiqlParser = new FiqlParser<SearchBean>(\n+        FiqlParser<SearchBean> fiqlParser = new FiqlParser<>(\n                 SearchBean.class, AbstractFiqlSearchConditionBuilder.CONTEXTUAL_PROPERTIES);\n-        SearchCondVisitor searchCondVisitor = new SearchCondVisitor();\n \n+        SearchCondVisitor searchCondVisitor = new SearchCondVisitor();\n         searchCondVisitor.visit(fiqlParser.parse(fiqlExpression));\n         return searchCondVisitor.getQuery();\n     }"},{"sha":"76723b0dfe9ccb556d67c2beb2114f3ba9e81798","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RoleDAO.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n+\n+public interface RoleDAO extends DAO<Role, Long> {\n+\n+    Role find(Long key);\n+\n+    Role find(String name);\n+\n+    List<Role> findByRealm(Realm realm);\n+\n+    List<Role> findAll();\n+\n+    Role save(Role role);\n+\n+    void delete(Role role);\n+\n+    void delete(Long key);\n+}"},{"sha":"7753ee2ced7667867cb74408f797eba6e644df56","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Role.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.syncope.common.lib.types.Entitlement;\n+\n+public interface Role extends Entity<Long> {\n+\n+    String getName();\n+\n+    void setName(String name);\n+\n+    String getCriteria();\n+\n+    void setCriteria(String criteria);\n+\n+    Set<Entitlement> getEntitlements();\n+\n+    boolean addRealm(Realm realm);\n+\n+    boolean removeReam(Realm realm);\n+\n+    List<? extends Realm> getRealms();\n+\n+}"},{"sha":"0921d8ca625b7b950dbe28a425ef8670b8916660","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -27,15 +27,21 @@\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.core.persistence.api.dao.MalformedPathException;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.jpa.entity.JPARealm;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n \n @Repository\n public class JPARealmDAO extends AbstractDAO<Realm, Long> implements RealmDAO {\n \n     private static final Pattern PATH_PATTERN = Pattern.compile(\"^(/[A-Za-z0-9]+)+\");\n \n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n     @Override\n     public Realm getRoot() {\n         TypedQuery<Realm> query = entityManager.createQuery(\n@@ -128,7 +134,12 @@ public Realm save(final Realm realm) {\n     @Override\n     public void delete(final Realm realm) {\n         for (Realm toBeDeleted : findDescendants(realm)) {\n+            for (Role role : roleDAO.findByRealm(toBeDeleted)) {\n+                role.getRealms().remove(toBeDeleted);\n+            }\n+\n             toBeDeleted.setParent(null);\n+\n             entityManager.remove(toBeDeleted);\n         }\n     }"},{"sha":"f24085002848be6a802a1cbc16968e1c6adf7f37","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.NoResultException;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.persistence.jpa.entity.JPARole;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JPARoleDAO extends AbstractDAO<Role, Long> implements RoleDAO {\n+\n+    @Override\n+    public Role find(final Long key) {\n+        return entityManager.find(JPARole.class, key);\n+    }\n+\n+    @Override\n+    public Role find(final String name) {\n+        TypedQuery<Role> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPARole.class.getSimpleName() + \" e WHERE e.name=:name\", Role.class);\n+        query.setParameter(\"name\", name);\n+\n+        Role result = null;\n+        try {\n+            result = query.getSingleResult();\n+        } catch (NoResultException e) {\n+            LOG.debug(\"Found more than one match\", e);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public List<Role> findByRealm(final Realm realm) {\n+        TypedQuery<Role> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPARole.class.getSimpleName() + \" e WHERE :realm MEMBER OF e.realms\", Role.class);\n+        query.setParameter(\"realm\", realm);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public List<Role> findAll() {\n+        TypedQuery<Role> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPARole.class.getSimpleName() + \" e \", Role.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public Role save(final Role role) {\n+        return entityManager.merge(role);\n+    }\n+\n+    @Override\n+    public void delete(final Role role) {\n+        entityManager.remove(role);\n+    }\n+\n+    @Override\n+    public void delete(final Long key) {\n+        Role role = find(key);\n+        if (role == null) {\n+            return;\n+        }\n+\n+        delete(role);\n+    }\n+\n+}"},{"sha":"746bf48779fe9a12d568d3ad3ab82947d2344162","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAConnInstance.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -94,7 +94,7 @@ public class JPAConnInstance extends AbstractEntity<Long> implements ConnInstanc\n      */\n     @ElementCollection(fetch = FetchType.EAGER)\n     @Enumerated(EnumType.STRING)\n-    @Column(name = \"capabilities\")\n+    @Column(name = \"capability\")\n     @CollectionTable(name = \"ConnInstance_capabilities\",\n             joinColumns =\n             @JoinColumn(name = \"ConnInstance_id\", referencedColumnName = \"id\"))"},{"sha":"4d83b7c87301acad345920f1ac1e89b42685650a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n import org.apache.syncope.core.persistence.api.entity.ReportletConfInstance;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrUniqueValue;\n@@ -144,6 +145,8 @@ public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n \n         if (reference.equals(Realm.class)) {\n             result = (T) new JPARealm();\n+        } else if (reference.equals(Role.class)) {\n+            result = (T) new JPARole();\n         } else if (reference.equals(User.class)) {\n             result = (T) new JPAUser();\n         } else if (reference.equals(Group.class)) {"},{"sha":"2f2848554480424d525a10a05656944b143aa4f8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAExternalResource.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -179,7 +179,7 @@ public class JPAExternalResource extends AbstractAnnotatedEntity<String> impleme\n      * (Optional) classes for PropagationAction.\n      */\n     @ElementCollection(fetch = FetchType.EAGER)\n-    @Column(name = \"action\")\n+    @Column(name = \"actionClassName\")\n     @CollectionTable(name = \"ExternalResource_PropActions\",\n             joinColumns =\n             @JoinColumn(name = \"ExternalResource_name\", referencedColumnName = \"name\"))"},{"sha":"498032eb5bcbba8320818a134f695bf857a6d5f6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPANotification.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -53,10 +53,10 @@ public class JPANotification extends AbstractEntity<Long> implements Notificatio\n     private Long id;\n \n     @ElementCollection(fetch = FetchType.EAGER)\n+    @Column(name = \"event\")\n     @CollectionTable(name = \"Notification_events\",\n             joinColumns =\n             @JoinColumn(name = \"Notification_id\", referencedColumnName = \"id\"))\n-    @Column(name = \"events\")\n     private List<String> events;\n \n     private String userAbout;"},{"sha":"3d7ac298be0562aa39af1439939016969d5aa3b0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARole.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.persistence.Cacheable;\n+import javax.persistence.CollectionTable;\n+import javax.persistence.Column;\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.Table;\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n+\n+@Entity\n+@Table(name = JPARole.TABLE)\n+@Cacheable\n+public class JPARole extends AbstractEntity<Long> implements Role {\n+\n+    private static final long serialVersionUID = -7657701119422588832L;\n+\n+    public static final String TABLE = \"SyncopeRole\";\n+\n+    @Id\n+    private Long id;\n+\n+    @Column(unique = true)\n+    @NotNull\n+    private String name;\n+\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"entitlement\")\n+    @CollectionTable(name = \"SyncopeRole_entitlements\",\n+            joinColumns =\n+            @JoinColumn(name = \"role_id\", referencedColumnName = \"id\"))\n+    private Set<Entitlement> entitlements = new HashSet<>();\n+\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(joinColumns =\n+            @JoinColumn(name = \"role_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"realm_id\"))\n+    @Valid\n+    private List<JPARealm> realms = new ArrayList<>();\n+\n+    private String criteria;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public String getCriteria() {\n+        return criteria;\n+    }\n+\n+    @Override\n+    public void setCriteria(final String criteria) {\n+        this.criteria = criteria;\n+    }\n+\n+    @Override\n+    public Set<Entitlement> getEntitlements() {\n+        return entitlements;\n+    }\n+\n+    @Override\n+    public boolean addRealm(final Realm realm) {\n+        checkType(realm, JPARealm.class);\n+        return realms.add((JPARealm) realm);\n+    }\n+\n+    @Override\n+    public boolean removeReam(final Realm realm) {\n+        checkType(realm, JPARealm.class);\n+        return realms.remove((JPARealm) realm);\n+    }\n+\n+    @Override\n+    public List<? extends Realm> getRealms() {\n+        return realms;\n+    }\n+\n+}"},{"sha":"3a61895c1b043375eedcc1df7dc6ccb7fde6e3c5","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -48,6 +48,15 @@ under the License.\n     </attributes>\n   </entity>\n   \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPARole\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_Role\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_Role\" pk-column-value=\"SEQ_Role\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+\n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"97af9747b7ea5e73e0da3dae932c7f809e975ab3","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -48,6 +48,15 @@ under the License.\n     </attributes>\n   </entity>\n   \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPARole\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_Role\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_Role\" pk-column-value=\"SEQ_Role\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"5921b94c17d9f679dff12ebdf6697023f2f1843c","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -48,6 +48,15 @@ under the License.\n     </attributes>\n   </entity>\n \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPARole\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_Role\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_Role\" pk-column-value=\"SEQ_Role\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+\n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"6b6c287e50fbe931838c126336ca8f3d4cb10db1","filename":"core/persistence-jpa/src/main/resources/content.xml","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -103,18 +103,23 @@ under the License.\n   <Notification id=\"1\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserPlainSchema\" selfAsRecipient=\"1\" \n                 sender=\"admin@syncope.apache.org\" subject=\"Password Reset request\" template=\"requestPasswordReset\" \n                 traceLevel=\"FAILURES\" userAbout=\"token!=$null\"/> \n-  <Notification_events Notification_id=\"1\" events=\"[CUSTOM]:[]:[]:[requestPasswordReset]:[SUCCESS]\"/>\n+  <Notification_events Notification_id=\"1\" event=\"[CUSTOM]:[]:[]:[requestPasswordReset]:[SUCCESS]\"/>\n   \n   <Notification id=\"2\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserPlainSchema\" selfAsRecipient=\"1\" \n                 sender=\"admin@syncope.apache.org\" subject=\"Password Reset successful\" template=\"confirmPasswordReset\" \n                 traceLevel=\"FAILURES\" userAbout=\"token!=$null\"/> \n-  <Notification_events Notification_id=\"2\" events=\"[CUSTOM]:[]:[]:[confirmPasswordReset]:[SUCCESS]\"/>  \n+  <Notification_events Notification_id=\"2\" event=\"[CUSTOM]:[]:[]:[confirmPasswordReset]:[SUCCESS]\"/>  \n   \n   <!-- Authentication and authorization -->\n   <Entitlement name=\"REALM_LIST\"/>\n   <Entitlement name=\"REALM_CREATE\"/>\n   <Entitlement name=\"REALM_UPDATE\"/>\n   <Entitlement name=\"REALM_DELETE\"/>\n+  <Entitlement name=\"ROLE_LIST\"/>\n+  <Entitlement name=\"ROLE_CREATE\"/>\n+  <Entitlement name=\"ROLE_READ\"/>\n+  <Entitlement name=\"ROLE_UPDATE\"/>\n+  <Entitlement name=\"ROLE_DELETE\"/>\n   <Entitlement name=\"SCHEMA_LIST\"/>\n   <Entitlement name=\"SCHEMA_CREATE\"/>\n   <Entitlement name=\"SCHEMA_READ\"/>"},{"sha":"82fa875d0e8086921a652e3291272adfb7370f6b","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/EntitlementTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FEntitlementTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FEntitlementTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FEntitlementTest.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -39,7 +39,7 @@ public class EntitlementTest extends AbstractTest {\n     @Test\n     public void findAll() {\n         List<Entitlement> list = entitlementDAO.findAll();\n-        assertEquals(\"did not get expected number of entitlements \", 90, list.size());\n+        assertEquals(\"did not get expected number of entitlements \", 95, list.size());\n     }\n \n     @Test"},{"sha":"b4830cf960a97f4b0268f7bbac502a4c1ca27ca7","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/RoleTest.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FRoleTest.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.syncope.common.lib.search.UserFiqlSearchConditionBuilder;\n+import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.core.misc.search.SearchCondConverter;\n+import org.apache.syncope.core.persistence.api.GroupEntitlementUtil;\n+import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class RoleTest extends AbstractTest {\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n+    @Autowired\n+    private EntitlementDAO entitlementDAO;\n+\n+    @Autowired\n+    private SubjectSearchDAO searchDAO;\n+\n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n+    @Test\n+    public void find() {\n+        Role role1 = roleDAO.find(2L);\n+        assertNotNull(role1);\n+        assertNotNull(role1.getName());\n+        assertFalse(searchDAO.<User>search(\n+                GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()),\n+                SearchCondConverter.convert(role1.getCriteria()),\n+                Collections.<OrderByClause>emptyList(), SubjectType.USER).isEmpty());\n+        assertFalse(role1.getRealms().isEmpty());\n+        assertFalse(role1.getEntitlements().isEmpty());\n+        assertTrue(role1.getEntitlements().contains(Entitlement.USER_LIST));\n+\n+        Role role2 = roleDAO.find(role1.getName());\n+        assertEquals(role1, role2);\n+    }\n+\n+    @Test\n+    public void findAll() {\n+        List<Role> list = roleDAO.findAll();\n+        assertNotNull(list);\n+        assertFalse(list.isEmpty());\n+        for (Role role : list) {\n+            assertNotNull(role);\n+        }\n+    }\n+\n+    @Test\n+    public void save() {\n+        Role role = entityFactory.newEntity(Role.class);\n+        role.setName(\"new\");\n+        role.setCriteria(new UserFiqlSearchConditionBuilder().inGroups(2L).query());\n+        role.addRealm(realmDAO.getRoot());\n+        role.addRealm(realmDAO.find(\"/even/two\"));\n+        role.getEntitlements().add(Entitlement.LOG_LIST);\n+        role.getEntitlements().add(Entitlement.LOG_SET_LEVEL);\n+\n+        Role actual = roleDAO.save(role);\n+        assertNotNull(actual);\n+    }\n+\n+    @Test\n+    public void delete() {\n+        assertNotNull(roleDAO.find(3L));\n+\n+        roleDAO.delete(3L);\n+        assertNull(roleDAO.find(3L));\n+    }\n+}"},{"sha":"e652e623dde9068b8c7fb668bc4a764fc271bb0a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/relationship/RealmTest.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FRealmTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FRealmTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FRealmTest.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.relationship;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class RealmTest extends AbstractTest {\n+\n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n+    @Test\n+    public void test() {\n+        Realm realm = realmDAO.find(\"/odd\");\n+        assertNotNull(realm);\n+\n+        Role role = roleDAO.find(1L);\n+        assertTrue(role.getRealms().contains(realm));\n+\n+        int beforeSize = role.getRealms().size();\n+\n+        realmDAO.delete(realm);\n+\n+        realmDAO.flush();\n+\n+        role = roleDAO.find(1L);\n+        assertEquals(beforeSize - 1, role.getRealms().size());\n+    }\n+}"},{"sha":"4a52eb2572a1e914b3353af8383ea93cef60d3e9","filename":"core/persistence-jpa/src/test/resources/content.xml","status":"modified","additions":75,"deletions":51,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -23,6 +23,25 @@ under the License.\n   <Realm id=\"3\" name=\"even\" parent_id=\"1\"/>\n   <Realm id=\"4\" name=\"two\" parent_id=\"3\"/>\n   \n+  <SyncopeRole id=\"1\" name=\"User reviewer\" criteria=\"fullname==*o*;fullname==*i*\"/>\n+  <SyncopeRole_entitlements entitlement=\"USER_READ\" role_id=\"1\"/>\n+  <SyncopeRole_entitlements entitlement=\"USER_LIST\" role_id=\"1\"/>\n+  <SyncopeRole_Realm role_id=\"1\" realm_id=\"2\"/>\n+  <SyncopeRole_Realm role_id=\"1\" realm_id=\"3\"/>\n+  \n+  <SyncopeRole id=\"2\" name=\"User manager\" criteria=\"username==rossini\"/>\n+  <SyncopeRole_entitlements entitlement=\"USER_READ\" role_id=\"2\"/>\n+  <SyncopeRole_entitlements entitlement=\"USER_LIST\" role_id=\"2\"/>\n+  <SyncopeRole_entitlements entitlement=\"WORKFLOW_FORM_CLAIM\" role_id=\"2\"/>\n+  <SyncopeRole_entitlements entitlement=\"WORKFLOW_FORM_SUBMIT\" role_id=\"2\"/>\n+  <SyncopeRole_Realm role_id=\"2\" realm_id=\"4\"/>\n+\n+  <SyncopeRole id=\"3\" name=\"Other\" criteria=\"id=gt=2;id=le=4\"/>\n+  <SyncopeRole_entitlements entitlement=\"SCHEMA_READ\" role_id=\"3\"/>\n+  <SyncopeRole_entitlements entitlement=\"GROUP_READ\" role_id=\"3\"/>\n+  <SyncopeRole_entitlements entitlement=\"WORKFLOW_FORM_CLAIM\" role_id=\"3\"/>\n+  <SyncopeRole_Realm role_id=\"3\" realm_id=\"2\"/>\n+\n   <SyncopeConf id=\"1\" \n                creator=\"admin\" lastModifier=\"admin\"\n                creationDate=\"2014-06-20 11:00:00\" lastChangeDate=\"2014-06-20 11:00:00\"/>\n@@ -451,29 +470,29 @@ under the License.\n                 connectorName=\"net.tirasa.connid.bundles.soap.WebServiceConnector\"\n                 version=\"${connid.soap.version}\"\n                 jsonConf='[{\"schema\":{\"name\":\"endpoint\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"http://localhost:${cargo.servlet.port}/wssample/services/provisioning\"]},{\"schema\":{\"name\":\"servicename\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"net.tirasa.connid.bundles.soap.provisioning.interfaces.Provisioning\"]}]'/>\n-  <ConnInstance_capabilities ConnInstance_id=\"100\" capabilities=\"ONE_PHASE_CREATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"100\" capabilities=\"ONE_PHASE_UPDATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"100\" capabilities=\"ONE_PHASE_DELETE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"100\" capabilities=\"TWO_PHASES_CREATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"100\" capabilities=\"TWO_PHASES_UPDATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"100\" capabilities=\"TWO_PHASES_DELETE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"100\" capabilities=\"SEARCH\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"100\" capability=\"ONE_PHASE_CREATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"100\" capability=\"ONE_PHASE_UPDATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"100\" capability=\"ONE_PHASE_DELETE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"100\" capability=\"TWO_PHASES_CREATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"100\" capability=\"TWO_PHASES_UPDATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"100\" capability=\"TWO_PHASES_DELETE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"100\" capability=\"SEARCH\"/>\n \n   <ConnInstance id=\"101\" displayName=\"H2\"\n                 location=\"connid://${testconnectorserver.key}@localhost:${testconnectorserver.port}\"\n                 bundleName=\"net.tirasa.connid.bundles.db.table\"\n                 connectorName=\"net.tirasa.connid.bundles.db.table.DatabaseTableConnector\"\n                 version=\"${connid.db.table.version}\"\n                 jsonConf='[{\"schema\":{\"name\":\"disabledStatusValue\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"user\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"sa\"]},{\"schema\":{\"name\":\"keyColumn\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"id\"]},{\"schema\":{\"name\":\"retrievePassword\",\"displayName\":null,\"helpMessage\":null,\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"true\"]},{\"schema\":{\"name\":\"cipherAlgorithm\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"SHA1\"]},{\"schema\":{\"name\":\"enabledStatusValue\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"true\"]},{\"schema\":{\"name\":\"passwordColumn\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"password\"]},{\"schema\":{\"name\":\"jdbcDriver\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"org.h2.Driver\"]},{\"schema\":{\"name\":\"defaultStatusValue\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"true\"]},{\"schema\":{\"name\":\"table\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"test\"]},{\"schema\":{\"name\":\"password\",\"displayName\":null,\"helpMessage\":null,\"type\":\"org.identityconnectors.common.security.GuardedString\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"sa\"]},{\"schema\":{\"name\":\"statusColumn\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"status\"]},{\"schema\":{\"name\":\"jdbcUrlTemplate\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"${testdb.url}\"]}]'/>\n-  <ConnInstance_capabilities ConnInstance_id=\"101\" capabilities=\"AUTHENTICATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"101\" capabilities=\"ONE_PHASE_CREATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"101\" capabilities=\"ONE_PHASE_UPDATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"101\" capabilities=\"ONE_PHASE_DELETE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"101\" capabilities=\"TWO_PHASES_CREATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"101\" capabilities=\"TWO_PHASES_UPDATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"101\" capabilities=\"TWO_PHASES_DELETE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"101\" capabilities=\"SEARCH\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"101\" capabilities=\"SYNC\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"101\" capability=\"AUTHENTICATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"101\" capability=\"ONE_PHASE_CREATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"101\" capability=\"ONE_PHASE_UPDATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"101\" capability=\"ONE_PHASE_DELETE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"101\" capability=\"TWO_PHASES_CREATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"101\" capability=\"TWO_PHASES_UPDATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"101\" capability=\"TWO_PHASES_DELETE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"101\" capability=\"SEARCH\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"101\" capability=\"SYNC\"/>\n \n   <ConnInstance id=\"102\" displayName=\"ConnInstance102\"\n                 location=\"${connid.location}\"\n@@ -482,13 +501,13 @@ under the License.\n                 version=\"${connid.soap.version}\"\n                 connRequestTimeout=\"10\"\n                 jsonConf='[{\"schema\":{\"name\":\"servicename\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"net.tirasa.connid.bundles.soap.provisioning.interfaces.Provisioning\"]},{\"schema\":{\"name\":\"endpoint\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":true,\"values\":[\"http://localhost:${cargo.servlet.port}/wssample/services/provisioning\"]}]'/>\n-  <ConnInstance_capabilities ConnInstance_id=\"102\" capabilities=\"ONE_PHASE_CREATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"102\" capabilities=\"ONE_PHASE_UPDATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"102\" capabilities=\"ONE_PHASE_DELETE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"102\" capabilities=\"TWO_PHASES_CREATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"102\" capabilities=\"TWO_PHASES_UPDATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"102\" capabilities=\"TWO_PHASES_DELETE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"102\" capabilities=\"SEARCH\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"102\" capability=\"ONE_PHASE_CREATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"102\" capability=\"ONE_PHASE_UPDATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"102\" capability=\"ONE_PHASE_DELETE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"102\" capability=\"TWO_PHASES_CREATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"102\" capability=\"TWO_PHASES_UPDATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"102\" capability=\"TWO_PHASES_DELETE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"102\" capability=\"SEARCH\"/>\n \n   <ConnInstance id=\"103\" displayName=\"ConnInstance103\"\n                 location=\"${connid.location}\"\n@@ -503,48 +522,48 @@ under the License.\n                 connectorName=\"net.tirasa.connid.bundles.csvdir.CSVDirConnector\"\n                 version=\"${connid.csvdir.version}\"\n                 jsonConf='[{\"schema\":{\"name\":\"fields\",\"displayName\":\"fields\",\"helpMessage\":\"Column names separated by comma\",\"type\":\"[Ljava.lang.String;\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"id\",\"name\",\"surname\",\"email\",\"password\",\"theirgroup\",\"membership\",\"status\",\"deleted\"]},{\"schema\":{\"name\":\"keyColumnNames\",\"displayName\":\"Key column name\",\"helpMessage\":\"Name of the column used to identify user uniquely\",\"type\":\"[Ljava.lang.String;\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"name\",\"surname\"]},{\"schema\":{\"name\":\"deleteColumnName\",\"displayName\":\"Delete column name\",\"helpMessage\":\"Name of the column used to specify users to be deleted\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"deleted\"]},{\"schema\":{\"name\":\"passwordColumnName\",\"displayName\":\"Password column name\",\"helpMessage\":\"Name of the column used to specify user password\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"password\"]},{\"schema\":{\"name\":\"keyseparator\",\"displayName\":\"Key separator\",\"helpMessage\":\"Character used to separate keys in a multi-key scenario\",\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\",\"]},{\"schema\":{\"name\":\"ignoreHeader\",\"displayName\":\"Ignore header\",\"helpMessage\":\"Specify it first line file must be ignored\",\"type\":\"java.lang.Boolean\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[false]},{\"schema\":{\"name\":\"fieldDelimiter\",\"displayName\":\"fieldDelimiter\",\"helpMessage\":\"fieldDelimiter\",\"type\":\"char\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\",\"]},{\"schema\":{\"name\":\"quotationRequired\",\"displayName\":\"Value quotation required\",\"helpMessage\":\"Specify if value quotation is required\",\"type\":\"java.lang.Boolean\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[false]},{\"schema\":{\"name\":\"statusColumn\",\"displayName\":\"statusColumn\",\"helpMessage\":\"Status column\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"status\"]},{\"schema\":{\"name\":\"sourcePath\",\"displayName\":\"Source path\",\"helpMessage\":\"Absolute path of a directory where are located CSV files to be processed\",\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"${test.csvdir.path}\"]},{\"schema\":{\"name\":\"fileMask\",\"displayName\":\"File mask\",\"helpMessage\":\"Regular expression describing files to be processed\",\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"test.csv\"]}]'/>\n-  <ConnInstance_capabilities ConnInstance_id=\"104\" capabilities=\"ONE_PHASE_CREATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"104\" capabilities=\"ONE_PHASE_UPDATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"104\" capabilities=\"ONE_PHASE_DELETE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"104\" capabilities=\"TWO_PHASES_CREATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"104\" capabilities=\"TWO_PHASES_UPDATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"104\" capabilities=\"TWO_PHASES_DELETE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"104\" capabilities=\"SEARCH\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"104\" capabilities=\"SYNC\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"104\" capability=\"ONE_PHASE_CREATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"104\" capability=\"ONE_PHASE_UPDATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"104\" capability=\"ONE_PHASE_DELETE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"104\" capability=\"TWO_PHASES_CREATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"104\" capability=\"TWO_PHASES_UPDATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"104\" capability=\"TWO_PHASES_DELETE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"104\" capability=\"SEARCH\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"104\" capability=\"SYNC\"/>\n     \n   <ConnInstance id=\"105\" bundleName=\"net.tirasa.connid.bundles.ldap\" displayName=\"ApacheDS\"\n                 location=\"${connid.location}\"\n                 connectorName=\"net.tirasa.connid.bundles.ldap.LdapConnector\"\n                 version=\"${connid.ldap.version}\" \n                 jsonConf='[{\"schema\":{\"name\":\"synchronizePasswords\",\"displayName\":\"Enable Password Synchronization\",\"helpMessage\":\"If true, the connector will synchronize passwords. The Password Capture Plugin needs to be installed for password synchronization to work.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"maintainLdapGroupMembership\",\"displayName\":\"Maintain LDAP Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any LDAP groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"true\"]},{\"schema\":{\"name\":\"host\",\"displayName\":\"Host\",\"helpMessage\":\"The name or IP address of the host where the LDAP server is running.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"localhost\"]},{\"schema\":{\"name\":\"passwordHashAlgorithm\",\"displayName\":\"Password Hash Algorithm\",\"helpMessage\":\"Indicates the algorithm that the Identity system should use to hash the password. Currently supported values are SSHA, SHA, SSHA1, and SHA1. A blank value indicates that the system will not hash passwords. This will cause cleartext passwords to be stored in LDAP unless the LDAP server performs the hash (Netscape Directory Server and iPlanet Directory Server do).\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"SHA\"]},{\"schema\":{\"name\":\"blockSize\",\"displayName\":\"Block Size\",\"helpMessage\":\"The maximum number of accounts that can be in a block when retrieving accounts in blocks.\",\"type\":\"int\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"useBlocks\",\"displayName\":\"Use Blocks\",\"helpMessage\":\"When performing operations on large numbers of accounts, the accounts are processed in blocks to reduce the amount of memory used by the operation. Select this option to process accounts in blocks.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[false]},{\"schema\":{\"name\":\"usePagedResultControl\",\"displayName\":\"Use Paged Result Control\",\"helpMessage\":\"When enabled, the LDAP Paged Results control is preferred over the VLV control when retrieving accounts.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"port\",\"displayName\":\"TCP Port\",\"helpMessage\":\"TCP/IP port number used to communicate with the LDAP server.\",\"type\":\"int\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[1389]},{\"schema\":{\"name\":\"vlvSortAttribute\",\"displayName\":\"VLV Sort Attribute\",\"helpMessage\":\"Specify the sort attribute to use for VLV indexes on the resource.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"statusManagementClass\",\"displayName\":\"Status management class \",\"helpMessage\":\"Class to be used to manage enabled/disabled status. If no class is specified then identity status management wont be possible.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"net.tirasa.connid.bundles.ldap.commons.AttributeStatusManagement\"]},{\"schema\":{\"name\":\"accountObjectClasses\",\"displayName\":\"Account Object Classes\",\"helpMessage\":\"The object class or classes that will be used when creating new user objects in the LDAP tree. When entering more than one object class, each entry should be on its own line; do not use commas or semi-colons to separate multiple object classes. Some object classes may require that you specify all object classes in the class hierarchy.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\"]},{\"schema\":{\"name\":\"accountUserNameAttributes\",\"displayName\":\"Account User Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the account user name. They will be used when authenticating to find the LDAP entry for the user name to authenticate.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid\"]},{\"schema\":{\"name\":\"baseContextsToSynchronize\",\"displayName\":\"Base Contexts to Synchronize\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used to determine if a change should be synchronized. The base contexts attribute will be used to synchronize a change if this property is not set.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"accountSynchronizationFilter\",\"displayName\":\"LDAP Filter for Accounts to Synchronize\",\"helpMessage\":\"An optional LDAP filter for the objects to synchronize. Because the change log is for all objects, this filter updates only objects that match the specified filter. If you specify a filter, an object will be synchronized only if it matches the filter and includes a synchronized object class.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"removeLogEntryObjectClassFromFilter\",\"displayName\":\"Remove Log Entry Object Class from Filter\",\"helpMessage\":\"If this property is set (the default), the filter used to fetch change log entries does not contain the \\\"changeLogEntry\\\" object class, expecting that there are no entries of other object types in the change log.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordDecryptionKey\",\"displayName\":\"Password Decryption Key\",\"helpMessage\":\"The key to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"readSchema\",\"displayName\":\"Read Schema\",\"helpMessage\":\"If true, the connector will read the schema from the server. If false, the connector will provide a default schema based on the object classes in the configuration. This property must be true in order to use extended object classes.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"ssl\",\"displayName\":\"SSL\",\"helpMessage\":\"Select the check box to connect to the LDAP server using SSL.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordAttributeToSynchronize\",\"displayName\":\"Password Attribute to Synchronize\",\"helpMessage\":\"The name of the password attribute to synchronize when performing password synchronization.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"accountSearchFilter\",\"displayName\":\"LDAP Filter for Retrieving Accounts\",\"helpMessage\":\"An optional LDAP filter to control which accounts are returned from the LDAP resource. If no filter is specified, only accounts that include all specified object classes are returned.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=*\"]},{\"schema\":{\"name\":\"passwordDecryptionInitializationVector\",\"displayName\":\"Password Decryption Initialization Vector\",\"helpMessage\":\"The initialization vector to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupMemberAttribute\",\"displayName\":\"Group Member Attribute\",\"helpMessage\":\"The name of the group attribute that will be updated with the distinguished name of the user when the user is added to the group.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"failover\",\"displayName\":\"Failover Servers\",\"helpMessage\":\"List all servers that should be used for failover in case the preferred server fails. If the preferred server fails, JNDI will connect to the next available server in the list. List all servers in the form of \\\"ldap://ldap.example.com:389/\\\", which follows the standard LDAP v3 URLs described in RFC 2255. Only the host and port parts of the URL are relevant in this setting.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"modifiersNamesToFilterOut\",\"displayName\":\"Filter Out Changes By\",\"helpMessage\":\"The names (DNs) of directory administrators to filter from the changes. Changes with the attribute \\\"modifiersName\\\" that match entries in this list will be filtered out. The standard value is the administrator name used by this adapter, to prevent loops. Entries should be of the format \\\"cn=Directory Manager\\\".\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupNameAttributes\",\"displayName\":\"Group Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the group name.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"uidAttribute\",\"displayName\":\"Uid Attribute\",\"helpMessage\":\"The name of the LDAP attribute which is mapped to the Uid attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"respectResourcePasswordPolicyChangeAfterReset\",\"displayName\":\"Respect Resource Password Policy Change-After-Reset\",\"helpMessage\":\"When this resource is specified in a Login Module (i.e., this resource is a pass-through authentication target) and the resource password policy is configured for change-after-reset, a user whose resource account password has been administratively reset will be required to change that password after successfully authenticating.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"filterWithOrInsteadOfAnd\",\"displayName\":\"Filter with Or Instead of And\",\"helpMessage\":\"Normally the the filter used to fetch change log entries is an and-based filter retrieving an interval of change entries. If this property is set, the filter will or together the required change numbers instead.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"principal\",\"displayName\":\"Principal\",\"helpMessage\":\"The distinguished name with which to authenticate to the LDAP server.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=admin,ou=system\"]},{\"schema\":{\"name\":\"changeLogBlockSize\",\"displayName\":\"Change Log Block Size\",\"helpMessage\":\"The number of change log entries to fetch per query.\",\"type\":\"int\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[100]},{\"schema\":{\"name\":\"baseContexts\",\"displayName\":\"Base Contexts\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used when searching the tree. Searches are performed when discovering users from the LDAP server or when looking for the groups of which a user is a member.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"passwordAttribute\",\"displayName\":\"Password Attribute\",\"helpMessage\":\"The name of the LDAP attribute which holds the password. When changing an user password, the new password is set to this attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"userpassword\"]},{\"schema\":{\"name\":\"changeNumberAttribute\",\"displayName\":\"Change Number Attribute\",\"helpMessage\":\"The name of the change number attribute in the change log entry.\",\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"changeNumber\"]},{\"schema\":{\"name\":\"objectClassesToSynchronize\",\"displayName\":\"Object Classes to Synchronize\",\"helpMessage\":\"The object classes to synchronize. The change log is for all objects; this filters updates to just the listed object classes. You should not list the superclasses of an object class unless you intend to synchronize objects with any of the superclass values. For example, if only \\\"inetOrgPerson\\\" objects should be synchronized, but the superclasses of \\\"inetOrgPerson\\\" (\\\"person\\\", \\\"organizationalperson\\\" and \\\"top\\\") should be filtered out, then list only \\\"inetOrgPerson\\\" here. All objects in LDAP are subclassed from \\\"top\\\". For this reason, you should never list \\\"top\\\", otherwise no object would be filtered.\",\"type\":\"[Ljava.lang.String;\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\",\"groupOfUniqueNames\"]},{\"schema\":{\"name\":\"credentials\",\"displayName\":\"Password\",\"helpMessage\":\"Password for the principal.\",\"type\":\"org.identityconnectors.common.security.GuardedString\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"secret\"]},{\"schema\":{\"name\":\"attributesToSynchronize\",\"displayName\":\"Attributes to Synchronize\",\"helpMessage\":\"The names of the attributes to synchronize. This ignores updates from the change log if they do not update any of the named attributes. For example, if only \\\"department\\\" is listed, then only changes that affect \\\"department\\\" will be processed. All other updates are ignored. If blank (the default), then all changes are processed.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"maintainPosixGroupMembership\",\"displayName\":\"Maintain POSIX Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any POSIX groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"truemaintainLdapGroupMembership\"]}]'/>\n-  <ConnInstance_capabilities ConnInstance_id=\"105\" capabilities=\"ONE_PHASE_CREATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"105\" capabilities=\"ONE_PHASE_UPDATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"105\" capabilities=\"ONE_PHASE_DELETE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"105\" capabilities=\"SEARCH\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"105\" capability=\"ONE_PHASE_CREATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"105\" capability=\"ONE_PHASE_UPDATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"105\" capability=\"ONE_PHASE_DELETE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"105\" capability=\"SEARCH\"/>\n   \n   <ConnInstance id=\"106\" displayName=\"H2-test2\"\n                 location=\"connid://${testconnectorserver.key}@localhost:${testconnectorserver.port}\"\n                 bundleName=\"net.tirasa.connid.bundles.db.table\"\n                 connectorName=\"net.tirasa.connid.bundles.db.table.DatabaseTableConnector\"\n                 version=\"${connid.db.table.version}\"\n                 jsonConf='[{\"schema\":{\"name\":\"disabledStatusValue\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"user\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"sa\"]},{\"schema\":{\"name\":\"keyColumn\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"id\"]},{\"schema\":{\"name\":\"cipherAlgorithm\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"SHA1\"]},{\"schema\":{\"name\":\"enabledStatusValue\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"true\"]},{\"schema\":{\"name\":\"passwordColumn\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"password\"]},{\"schema\":{\"name\":\"jdbcDriver\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"org.h2.Driver\"]},{\"schema\":{\"name\":\"retrievePassword\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.Boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"true\"]},{\"schema\":{\"name\":\"defaultStatusValue\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"true\"]},{\"schema\":{\"name\":\"password\",\"displayName\":null,\"helpMessage\":null,\"type\":\"org.identityconnectors.common.security.GuardedString\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"sa\"]},{\"schema\":{\"name\":\"statusColumn\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"status\"]},{\"schema\":{\"name\":\"jdbcUrlTemplate\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"${testdb.url}\"]},{\"schema\":{\"name\":\"table\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"test2\"]}]'/>\n-  <ConnInstance_capabilities ConnInstance_id=\"106\" capabilities=\"ONE_PHASE_CREATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"106\" capabilities=\"ONE_PHASE_UPDATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"106\" capabilities=\"SEARCH\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"106\" capabilities=\"SYNC\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"106\" capability=\"ONE_PHASE_CREATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"106\" capability=\"ONE_PHASE_UPDATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"106\" capability=\"SEARCH\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"106\" capability=\"SYNC\"/>\n   \n   <ConnInstance id=\"107\" bundleName=\"net.tirasa.connid.bundles.db.table\" \n                 location=\"connid://${testconnectorserver.key}@localhost:${testconnectorserver.port}\"\n                 connectorName=\"net.tirasa.connid.bundles.db.table.DatabaseTableConnector\" \n                 displayName=\"H2-testsync\" version=\"${connid.db.table.version}\"\n                 jsonConf='[{\"schema\":{\"name\":\"changeLogColumn\",\"displayName\":\"Change Log Column (Sync)\",\"helpMessage\":\"=&lt;b&gt;Change Log Column&lt;/b&gt;&lt;br&gt;The change log column store the latest change time. Providing this value the Sync capabilities are activated.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":21,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"nativeTimestamps\",\"displayName\":\"Native Timestamps \",\"helpMessage\":\"&lt;b&gt;Native Timestamps&lt;/b&gt;&lt;br&gt;Select to retrieve Timestamp data type of the columns in java.sql.Timestamp format from the database table.\",\"type\":\"boolean\",\"required\":false,\"order\":18,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"cipherAlgorithm\",\"displayName\":\"Password cipher algorithm (defaults to CLEARTEXT)\",\"helpMessage\":\"Cipher algorithm used to encode password before to store it onto the database table.\\nSpecify one of the values among CLEARTEXT,AES, MD5, SHA1, SHA256 or a custom implementation identified by its class name.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":24,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"enabledStatusValue\",\"displayName\":\"Enabled Status Value\",\"helpMessage\":\"&lt;b&gt;Enabled Status Value&lt;/b&gt;&lt;br&gt;Enter the value for enabled status.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":12,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"retrievePassword\",\"displayName\":\"Retrieve password\",\"helpMessage\":\"Specify if password must be retrieved by default.\",\"type\":\"boolean\",\"required\":true,\"order\":27,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"datasource\",\"displayName\":\"Datasource Path\",\"helpMessage\":\"&lt;b&gt;JDBC Data Source Name/Path&lt;/b&gt;&lt;br&gt;Enter the JDBC Data Source Name/Path to connect to the Oracle server. If specified, connector will only try to connect using Datasource and ignore other resource parameters specified.&lt;br&gt;the example value is: &lt;CODE&gt;jdbc/SampleDataSourceName&lt;/CODE&gt;\",\"type\":\"java.lang.String\",\"required\":false,\"order\":22,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"allNative\",\"displayName\":\"All native\",\"helpMessage\":\"&lt;b&gt;All native&lt;/b&gt;&lt;br&gt;Select to retrieve all data type of the columns in a native format from the database table.\",\"type\":\"boolean\",\"required\":false,\"order\":19,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"user\",\"displayName\":\"User\",\"helpMessage\":\"&lt;b&gt;User&lt;/b&gt;&lt;br&gt;Enter the name of the mandatory Database user with permission to account table.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":4,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"sa\"]},{\"schema\":{\"name\":\"pwdEncodeToLowerCase\",\"displayName\":\"Force password encoding to lower case\",\"helpMessage\":\"Force password encoding to lower case.\",\"type\":\"boolean\",\"required\":false,\"order\":26,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"jdbcUrlTemplate\",\"displayName\":\"JDBC Connection URL\",\"helpMessage\":\"&lt;b&gt;JDBC Connection URL&lt;/b&gt;&lt;br&gt;Specify the JDBC Driver Connection URL.&lt;br&gt; Oracle template is jdbc:oracle:thin:@[host]:[port(1521)]:[DB].&lt;br&gt;  MySQL template is jdbc:mysql://[host]:[port(3306)]/[db], for more info, read the JDBC driver documentation.&lt;br&gt;Could be empty if datasource is provided.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":15,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"${testdb.url}\"]},{\"schema\":{\"name\":\"keyColumn\",\"displayName\":\"Key Column\",\"helpMessage\":\"&lt;b&gt;Key Column&lt;/b&gt;&lt;br&gt;This mandatory column value will be used as the unique identifier for rows in the table.&lt;br&gt;\",\"type\":\"java.lang.String\",\"required\":true,\"order\":8,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"id\"]},{\"schema\":{\"name\":\"validConnectionQuery\",\"displayName\":\"Validate Connection Query\",\"helpMessage\":\"&lt;b&gt;Validate Connection Query&lt;/b&gt;&lt;br&gt;There can be specified the check connection alive query. If empty, default implementation will test it using the switch on/off the autocommit. Some select 1 from dummy table could be more efficient.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":20,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"rethrowAllSQLExceptions\",\"displayName\":\"Rethrow all SQLExceptions\",\"helpMessage\":\"If this is not checked, SQL statements which throw SQLExceptions with a 0 ErrorCode will be have the exception caught and suppressed. Check it to have exceptions with 0 ErrorCodes rethrown.\",\"type\":\"boolean\",\"required\":false,\"order\":17,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordColumn\",\"displayName\":\"Password Column\",\"helpMessage\":\"&lt;b&gt;Password Column&lt;/b&gt;&lt;br&gt;Enter the name of the column in the table that will hold the password values. If empty, no validation on resource and passwords are activated.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":9,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"jndiProperties\",\"displayName\":\"Initial JNDI Properties\",\"helpMessage\":\"&lt;b&gt;Initial JNDI Properties&lt;/b&gt;&lt;br&gt;Could be empty or enter the JDBC JNDI Initial context factory, context provider in a format: key = value.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":23,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"password\",\"displayName\":\"User Password\",\"helpMessage\":\"&lt;b&gt;User Password&lt;/b&gt;&lt;br&gt;Enter a user account that has permission to access accounts table.\",\"type\":\"org.identityconnectors.common.security.GuardedString\",\"required\":false,\"order\":5,\"confidential\":true,\"defaultValues\":null},\"overridable\":false,\"values\":[\"sa\"]},{\"schema\":{\"name\":\"host\",\"displayName\":\"Host\",\"helpMessage\":\"&lt;b&gt;Host&lt;/b&gt;&lt;br&gt;Enter the name of the host where the database is running.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":2,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"port\",\"displayName\":\"Port\",\"helpMessage\":\"&lt;b&gt;TCP Port&lt;/b&gt;&lt;br&gt;Enter the port number the database server is listening on.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":3,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"statusColumn\",\"displayName\":\"Status Column\",\"helpMessage\":\"&lt;b&gt;Status Column&lt;/b&gt;&lt;br&gt;Enter the name of the column in the table that will hold the status values. If empty enabled and disabled operation wont be performed.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":10,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"pwdEncodeToUpperCase\",\"displayName\":\"Force password encoding to upper case\",\"helpMessage\":\"Force password encoding to upper case.\",\"type\":\"boolean\",\"required\":false,\"order\":25,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"enableEmptyString\",\"displayName\":\"Enable writing empty string\",\"helpMessage\":\"&lt;b&gt;Enable writing empty string&lt;/b&gt;&lt;br&gt;Select to enable support for writing an empty strings, instead of a NULL value, in character based columns defined as not-null in the table schema. This option does not influence the way strings are written for Oracle based tables. By default empty strings are written as a NULL value.\",\"type\":\"boolean\",\"required\":false,\"order\":16,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"database\",\"displayName\":\"Database\",\"helpMessage\":\"&lt;b&gt;Database&lt;/b&gt;&lt;br&gt;Enter the name of the database on the database server that contains the table.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":6,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"defaultStatusValue\",\"displayName\":\"Default Status Value\",\"helpMessage\":\"&lt;b&gt;Default Status Value&lt;/b&gt;&lt;br&gt;Enter the value for status in case of status not specified.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":13,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"table\",\"displayName\":\"Table\",\"helpMessage\":\"&lt;b&gt;Table&lt;/b&gt;&lt;br&gt;Enter the name of the table in the database that contains the accounts.\",\"type\":\"java.lang.String\",\"required\":true,\"order\":7,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"testsync\"]},{\"schema\":{\"name\":\"disabledStatusValue\",\"displayName\":\"Disabled Status Value\",\"helpMessage\":\"&lt;b&gt;Disabled Status Value&lt;/b&gt;&lt;br&gt;Enter the value for disabled status.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":11,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"jdbcDriver\",\"displayName\":\"JDBC Driver\",\"helpMessage\":\"&lt;b&gt;JDBC Driver&lt;/b&gt;&lt;br&gt;Specify the JDBC Driver class name. Oracle is oracle.jdbc.driver.OracleDriver. MySQL is org.gjt.mm.mysql.Driver.&lt;br&gt;Could be empty if datasource is provided.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":14,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"org.h2.Driver\"]},{\"schema\":{\"name\":\"quoting\",\"displayName\":\"Name Quoting\",\"helpMessage\":\"&lt;b&gt;Name Quoting&lt;/b&gt;&lt;br&gt;Select whether database column names for this resource should be quoted, and the quoting characters. By default, database column names are not quoted (None). For other selections (Single, Double, Back, or Brackets), column names will appear between single quotes, double quotes, back quotes, or brackets in the SQL generated to access the database.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":1,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"cipherKey\",\"displayName\":\"Password cipher key\",\"helpMessage\":\"Specify key in case of reversible algorithm.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":25,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]}]'/>\n-  <ConnInstance_capabilities ConnInstance_id=\"107\" capabilities=\"ONE_PHASE_CREATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"107\" capabilities=\"TWO_PHASES_CREATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"107\" capabilities=\"ONE_PHASE_UPDATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"107\" capabilities=\"TWO_PHASES_UPDATE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"107\" capabilities=\"ONE_PHASE_DELETE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"107\" capabilities=\"TWO_PHASES_DELETE\"/>\n-  <ConnInstance_capabilities ConnInstance_id=\"107\" capabilities=\"SEARCH\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"107\" capability=\"ONE_PHASE_CREATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"107\" capability=\"TWO_PHASES_CREATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"107\" capability=\"ONE_PHASE_UPDATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"107\" capability=\"TWO_PHASES_UPDATE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"107\" capability=\"ONE_PHASE_DELETE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"107\" capability=\"TWO_PHASES_DELETE\"/>\n+  <ConnInstance_capabilities ConnInstance_id=\"107\" capability=\"SEARCH\"/>\n   \n   <ExternalResource name=\"ws-target-resource-1\" connector_id=\"100\"\n                     randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"0\" propagationMode=\"TWO_PHASES\"\n@@ -610,7 +629,7 @@ under the License.\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource_PropActions externalResource_name=\"resource-ldap\"\n-                                action=\"org.apache.syncope.core.provisioning.java.propagation.LDAPMembershipPropagationActions\"/>\n+                                actionClassName=\"org.apache.syncope.core.provisioning.java.propagation.LDAPMembershipPropagationActions\"/>\n   <ExternalResource name=\"ws-target-resource-nopropagation\" connector_id=\"103\"\n                     randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" \n@@ -997,20 +1016,20 @@ under the License.\n   <Notification id=\"1\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserPlainSchema\" selfAsRecipient=\"1\" \n                 sender=\"admin@syncope.apache.org\" subject=\"Password Reset request\" template=\"requestPasswordReset\" \n                 traceLevel=\"FAILURES\" userAbout=\"token!=$null\"/> \n-  <Notification_events Notification_id=\"1\" events=\"[CUSTOM]:[]:[]:[requestPasswordReset]:[SUCCESS]\"/>\n+  <Notification_events Notification_id=\"1\" event=\"[CUSTOM]:[]:[]:[requestPasswordReset]:[SUCCESS]\"/>\n   \n   <Notification id=\"2\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserPlainSchema\" selfAsRecipient=\"1\" \n                 sender=\"admin@syncope.apache.org\" subject=\"Password Reset successful\" template=\"confirmPasswordReset\" \n                 traceLevel=\"FAILURES\" userAbout=\"token!=$null\"/> \n-  <Notification_events Notification_id=\"2\" events=\"[CUSTOM]:[]:[]:[confirmPasswordReset]:[SUCCESS]\"/>\n+  <Notification_events Notification_id=\"2\" event=\"[CUSTOM]:[]:[]:[confirmPasswordReset]:[SUCCESS]\"/>\n \n   <Notification id=\"10\" sender=\"test@syncope.apache.org\" subject=\"Test subject\" template=\"test\" selfAsRecipient=\"0\" \n                 traceLevel=\"FAILURES\"\n                 userAbout=\"fullname==*o*;fullname==*i*\"\n                 recipients=\"$groups==7\"\n                 recipientAttrType=\"UserPlainSchema\" recipientAttrName=\"email\" active=\"1\"/>\n-  <Notification_events Notification_id=\"10\" events=\"[CUSTOM]:[]:[]:[unexisting1]:[FAILURE]\"/>\n-  <Notification_events Notification_id=\"10\" events=\"[CUSTOM]:[]:[]:[unexisting2]:[SUCCESS]\"/>\n+  <Notification_events Notification_id=\"10\" event=\"[CUSTOM]:[]:[]:[unexisting1]:[FAILURE]\"/>\n+  <Notification_events Notification_id=\"10\" event=\"[CUSTOM]:[]:[]:[unexisting2]:[SUCCESS]\"/>\n     \n   <NotificationTask_recipients notificationtask_id=\"8\" address=\"recipient@prova.org\"/>  \n   \n@@ -1028,6 +1047,11 @@ under the License.\n   <Entitlement name=\"REALM_CREATE\"/>\n   <Entitlement name=\"REALM_UPDATE\"/>\n   <Entitlement name=\"REALM_DELETE\"/>\n+  <Entitlement name=\"ROLE_LIST\"/>\n+  <Entitlement name=\"ROLE_CREATE\"/>\n+  <Entitlement name=\"ROLE_READ\"/>\n+  <Entitlement name=\"ROLE_UPDATE\"/>\n+  <Entitlement name=\"ROLE_DELETE\"/>\n   <Entitlement name=\"SCHEMA_LIST\"/>\n   <Entitlement name=\"SCHEMA_CREATE\"/>\n   <Entitlement name=\"SCHEMA_READ\"/>"},{"sha":"76315434579f4599d66ccc9b686c2daba3fe8be4","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/RoleDataBinder.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRoleDataBinder.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n+\n+public interface RoleDataBinder {\n+\n+    Role create(RoleTO roleTO);\n+\n+    void update(Role role, RoleTO roleTO);\n+\n+    RoleTO getRoleTO(Role role);\n+}"},{"sha":"842bf350ef73ccfd60b18c518b290f44046209db","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RoleDataBinderImpl.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import org.apache.commons.collections4.Closure;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.provisioning.api.data.RoleDataBinder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class RoleDataBinderImpl implements RoleDataBinder {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(RoleDataBinder.class);\n+\n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Override\n+    public Role create(final RoleTO roleTO) {\n+        Role role = entityFactory.newEntity(Role.class);\n+        update(role, roleTO);\n+        return role;\n+    }\n+\n+    @Override\n+    public void update(final Role role, final RoleTO roleTO) {\n+        role.setName(roleTO.getName());\n+        role.setCriteria(roleTO.getCriteria());\n+\n+        role.getEntitlements().clear();\n+        role.getEntitlements().addAll(roleTO.getEntitlements());\n+\n+        role.getRealms().clear();\n+        CollectionUtils.forAllDo(roleTO.getRealms(), new Closure<String>() {\n+\n+            @Override\n+            public void execute(final String realmFullPath) {\n+                Realm realm = realmDAO.find(realmFullPath);\n+                if (realm == null) {\n+                    LOG.warn(\"Invalid realm full path {}, ignoring\", realmFullPath);\n+                } else {\n+                    role.addRealm(realm);\n+                }\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public RoleTO getRoleTO(final Role role) {\n+        RoleTO roleTO = new RoleTO();\n+\n+        roleTO.setKey(role.getKey());\n+        roleTO.setName(role.getName());\n+        roleTO.setCriteria(role.getCriteria());\n+        roleTO.getEntitlements().addAll(role.getEntitlements());\n+\n+        CollectionUtils.collect(role.getRealms(), new Transformer<Realm, String>() {\n+\n+            @Override\n+            public String transform(final Realm input) {\n+                return input.getFullPath();\n+            }\n+        }, roleTO.getRealms());\n+\n+        return roleTO;\n+    }\n+\n+}"},{"sha":"33403fdb063e5c5c778cc5a571908e3270049d72","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RoleServiceImpl.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRoleServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRoleServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRoleServiceImpl.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.net.URI;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.RoleService;\n+import org.apache.syncope.core.logic.RoleLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class RoleServiceImpl extends AbstractServiceImpl implements RoleService {\n+\n+    @Autowired\n+    private RoleLogic logic;\n+\n+    @Override\n+    public List<RoleTO> list() {\n+        return logic.list();\n+    }\n+\n+    @Override\n+    public RoleTO read(final Long roleKey) {\n+        return logic.read(roleKey);\n+    }\n+\n+    @Override\n+    public Response create(final RoleTO roleTO) {\n+        RoleTO created = logic.create(roleTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(created.getKey())).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_ID, created.getKey()).\n+                build();\n+    }\n+\n+    @Override\n+    public void update(final Long roleKey, final RoleTO roleTO) {\n+        roleTO.setKey(roleKey);\n+        logic.update(roleTO);\n+    }\n+\n+    @Override\n+    public void delete(final Long roleKey) {\n+        logic.delete(roleKey);\n+    }\n+\n+}"},{"sha":"cd8ce6f3ec1e10da717aba039ebaeaf2bd8a7080","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractITCase.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -59,6 +59,7 @@\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.common.rest.api.service.GroupService;\n import org.apache.syncope.common.rest.api.service.RealmService;\n+import org.apache.syncope.common.rest.api.service.RoleService;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.syncope.common.rest.api.service.SecurityQuestionService;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n@@ -149,6 +150,8 @@ public abstract class AbstractITCase {\n \n     protected static RealmService realmService;\n \n+    protected static RoleService roleService;\n+\n     protected static UserService userService;\n \n     protected static UserSelfService userSelfService;\n@@ -218,6 +221,7 @@ public static void restSetup() {\n \n         syncopeService = adminClient.getService(SyncopeService.class);\n         realmService = adminClient.getService(RealmService.class);\n+        roleService = adminClient.getService(RoleService.class);\n         userService = adminClient.getService(UserService.class);\n         userSelfService = adminClient.getService(UserSelfService.class);\n         userWorkflowService = adminClient.getService(UserWorkflowService.class);"},{"sha":"a39be364dfa119cf1fb6e60ffe267c1a07f549e4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/RoleITCase.java","status":"added","additions":124,"deletions":0,"changes":124,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRoleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRoleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRoleITCase.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.rest.api.service.RoleService;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class RoleITCase extends AbstractITCase {\n+\n+    @Test\n+    public void list() {\n+        List<RoleTO> roleTOs = roleService.list();\n+        assertNotNull(roleTOs);\n+        assertFalse(roleTOs.isEmpty());\n+        for (RoleTO instance : roleTOs) {\n+            assertNotNull(instance);\n+        }\n+    }\n+\n+    @Test\n+    public void read() {\n+        RoleTO roleTO = roleService.read(3L);\n+        assertNotNull(roleTO);\n+        assertTrue(roleTO.getEntitlements().contains(Entitlement.GROUP_READ));\n+    }\n+\n+    private RoleTO buildRoleTO(final String name) {\n+        RoleTO role = new RoleTO();\n+        role.setName(name + getUUIDString());\n+        role.setCriteria(SyncopeClient.getUserSearchConditionBuilder().inGroups(2L).query());\n+        role.getRealms().add(\"/even\");\n+        role.getEntitlements().add(Entitlement.LOG_SET_LEVEL);\n+\n+        return role;\n+    }\n+\n+    @Test\n+    public void create() {\n+        RoleTO role = new RoleTO();\n+        role.setName(\"new\" + getUUIDString());\n+        role.setCriteria(SyncopeClient.getUserSearchConditionBuilder().inGroups(2L).query());\n+        role.getRealms().add(\"/\");\n+        role.getRealms().add(\"/even/two\");\n+        role.getEntitlements().add(Entitlement.LOG_LIST);\n+        role.getEntitlements().add(Entitlement.LOG_SET_LEVEL);\n+\n+        Response response = roleService.create(role);\n+\n+        RoleTO actual = getObject(response.getLocation(), RoleService.class, RoleTO.class);\n+        assertNotNull(actual);\n+    }\n+\n+    @Test\n+    public void update() {\n+        RoleTO role = buildRoleTO(\"update\");\n+        Response response = roleService.create(role);\n+\n+        RoleTO actual = getObject(response.getLocation(), RoleService.class, RoleTO.class);\n+        assertNotNull(actual);\n+\n+        role = actual;\n+        assertFalse(role.getEntitlements().contains(Entitlement.WORKFLOW_TASK_LIST));\n+        assertFalse(role.getRealms().contains(\"/even/two\"));\n+\n+        role.getEntitlements().add(Entitlement.WORKFLOW_TASK_LIST);\n+        role.getRealms().add(\"/even/two\");\n+\n+        roleService.update(role.getKey(), role);\n+\n+        actual = roleService.read(role.getKey());\n+        assertTrue(actual.getEntitlements().contains(Entitlement.WORKFLOW_TASK_LIST));\n+        assertTrue(actual.getRealms().contains(\"/even/two\"));\n+    }\n+\n+    @Test\n+    public void delete() {\n+        RoleTO role = buildRoleTO(\"delete\");\n+        Response response = roleService.create(role);\n+\n+        RoleTO actual = getObject(response.getLocation(), RoleService.class, RoleTO.class);\n+        assertNotNull(actual);\n+\n+        roleService.delete(actual.getKey());\n+\n+        try {\n+            roleService.read(actual.getKey());\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+    }\n+}"}]}