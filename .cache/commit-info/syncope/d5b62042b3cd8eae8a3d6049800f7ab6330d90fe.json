{"sha":"d5b62042b3cd8eae8a3d6049800f7ab6330d90fe","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ1YjYyMDQyYjNjZDhlYWU4YTNkNjA0OTgwMGY3YWI2MzMwZDkwZmU=","commit":{"author":{"name":"Massimiliano Perrone","email":"massi@apache.org","date":"2012-09-21T14:35:33Z"},"committer":{"name":"Massimiliano Perrone","email":"massi@apache.org","date":"2012-09-21T14:35:33Z"},"message":"[SYNCOPE-134] reflection to use class fields in derived schema definition\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1388528 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"216dca40a89f9360a24eb7c10bbaffca67518283","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/216dca40a89f9360a24eb7c10bbaffca67518283"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d5b62042b3cd8eae8a3d6049800f7ab6330d90fe","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d5b62042b3cd8eae8a3d6049800f7ab6330d90fe","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d5b62042b3cd8eae8a3d6049800f7ab6330d90fe","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d5b62042b3cd8eae8a3d6049800f7ab6330d90fe/comments","author":null,"committer":null,"parents":[{"sha":"0809720e903a2fe5a47820dd1aa66a9428034e19","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0809720e903a2fe5a47820dd1aa66a9428034e19","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0809720e903a2fe5a47820dd1aa66a9428034e19"}],"stats":{"total":176,"additions":143,"deletions":33},"files":[{"sha":"91e877fc46084d74309c64ee6fbdb8a8548795ff","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractDerAttr.java","status":"modified","additions":34,"deletions":19,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b62042b3cd8eae8a3d6049800f7ab6330d90fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b62042b3cd8eae8a3d6049800f7ab6330d90fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java?ref=d5b62042b3cd8eae8a3d6049800f7ab6330d90fe","patch":"@@ -18,13 +18,17 @@\n  */\n package org.apache.syncope.core.persistence.beans;\n \n+import java.lang.reflect.Field;\n+import java.util.Arrays;\n import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n import org.apache.commons.jexl2.JexlContext;\n-import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.commons.lang.ArrayUtils;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n import org.apache.syncope.core.util.JexlUtil;\n import org.springframework.context.ConfigurableApplicationContext;\n@@ -34,6 +38,9 @@ public abstract class AbstractDerAttr extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 4740924251090424771L;\n \n+    private final List<String> ignoredFields = Arrays.asList(\n+            new String[]{\"password\", \"clearPassword\", \"serialVersionUID\"});\n+\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     protected Long id;\n@@ -55,29 +62,37 @@ public String getValue(final Collection<? extends AbstractAttr> attributes) {\n         // Prepare context using user attributes\n         final JexlContext jexlContext = jexlUtil.addAttrsToContext(attributes, null);\n \n-        final AbstractAttributable owner = getOwner();\n-        if (owner instanceof SyncopeUser) {\n-            jexlContext.set(\"username\", ((SyncopeUser) owner).getUsername() != null\n-                    ? ((SyncopeUser) owner).getUsername()\n-                    : \"\");\n-            jexlContext.set(\"creationDate\", ((SyncopeUser) owner).getCreationDate() != null\n-                    ? ((SyncopeUser) owner).getDateFormatter().format(((SyncopeUser) owner).getCreationDate())\n-                    : \"\");\n-            jexlContext.set(\"lastLoginDate\", ((SyncopeUser) owner).getLastLoginDate() != null\n-                    ? ((SyncopeUser) owner).getDateFormatter().format(((SyncopeUser) owner).getLastLoginDate())\n-                    : \"\");\n-            jexlContext.set(\"failedLogins\", ((SyncopeUser) owner).getFailedLogins() != null\n-                    ? ((SyncopeUser) owner).getFailedLogins()\n-                    : \"\");\n-            jexlContext.set(\"changePwdDate\", ((SyncopeUser) owner).getChangePwdDate() != null\n-                    ? ((SyncopeUser) owner).getDateFormatter().format(((SyncopeUser) owner).getChangePwdDate())\n-                    : \"\");\n-        }\n+        createJexlContext(jexlContext);\n \n         // Evaluate expression using the context prepared before\n         return jexlUtil.evaluate(getDerivedSchema().getExpression(), jexlContext);\n     }\n \n+    private void createJexlContext(final JexlContext jexlContext) {\n+        AbstractAttributable instance = getOwner();\n+        Field[] fields = instance.getClass().getDeclaredFields();\n+        for (int i = 0; i < fields.length; i++) {\n+            try {\n+                Field field = fields[i];\n+                field.setAccessible(true);\n+                if ((!field.isSynthetic()) && (!field.getName().startsWith(\"pc\"))\n+                        && (!ArrayUtils.contains(ignoredFields.toArray(), field.getName()))\n+                        && (!Iterable.class.isAssignableFrom(field.getType()))\n+                        && (!field.getType().isArray())) {\n+                    if (field.getType().equals(Date.class)) {\n+                        jexlContext.set(field.getName(), field.get(instance) != null\n+                                ? ((AbstractBaseBean) instance).getDateFormatter().format(field.get(instance)) : \"\");\n+                    } else {\n+                        jexlContext.set(field.getName(), field.get(instance) != null ? field.get(instance) : \"\");\n+                    }\n+                }\n+\n+            } catch (Exception ex) {\n+                LOG.error(\"Reading class attributes error\", ex);\n+            }\n+        }\n+    }\n+\n     public abstract <T extends AbstractAttributable> T getOwner();\n \n     public abstract <T extends AbstractAttributable> void setOwner(T owner);"},{"sha":"160937335c8879bd3c1bfc0ae0fa67b3c37eec95","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b62042b3cd8eae8a3d6049800f7ab6330d90fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b62042b3cd8eae8a3d6049800f7ab6330d90fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=d5b62042b3cd8eae8a3d6049800f7ab6330d90fe","patch":"@@ -422,12 +422,12 @@ public boolean hasTokenExpired() {\n         return tokenExpireTime.before(new Date());\n     }\n \n-    public CipherAlgorithm getCipherAlgoritm() {\n+    public CipherAlgorithm getCipherAlgorithm() {\n         return cipherAlgorithm;\n     }\n \n-    public void setCipherAlgoritm(final CipherAlgorithm cipherAlgoritm) {\n-        this.cipherAlgorithm = cipherAlgoritm;\n+    public void setCipherAlgorithm(final CipherAlgorithm cipherAlgorithm) {\n+        this.cipherAlgorithm = cipherAlgorithm;\n     }\n \n     public List<String> getPasswordHistory() {"},{"sha":"aa27b72c992068cd88122e22ab423a0745df83c5","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b62042b3cd8eae8a3d6049800f7ab6330d90fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b62042b3cd8eae8a3d6049800f7ab6330d90fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=d5b62042b3cd8eae8a3d6049800f7ab6330d90fe","patch":"@@ -103,7 +103,7 @@ public boolean verifyPassword(final String username, final String password)\n     public boolean verifyPassword(final SyncopeUser user, final String password)\n             throws NotFoundException, UnauthorizedRoleException {\n \n-        return PasswordEncoder.verifyPassword(password, user.getCipherAlgoritm(), user.getPassword());\n+        return PasswordEncoder.verifyPassword(password, user.getCipherAlgorithm(), user.getPassword());\n     }\n \n     @Transactional(readOnly = true)"},{"sha":"08d39d105f345eda9439f1047625f46c34e5fe2e","filename":"core/src/main/java/org/apache/syncope/core/security/SyncopeAuthenticationProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b62042b3cd8eae8a3d6049800f7ab6330d90fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b62042b3cd8eae8a3d6049800f7ab6330d90fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=d5b62042b3cd8eae8a3d6049800f7ab6330d90fe","patch":"@@ -130,7 +130,7 @@ public Authentication authenticate(final Authentication authentication)\n                 }\n                 authenticated = PasswordEncoder.verifyPassword(\n                         authentication.getCredentials().toString(),\n-                        user.getCipherAlgoritm(),\n+                        user.getCipherAlgorithm(),\n                         user.getPassword());\n             }\n         }"},{"sha":"903b840d621e40700d87060f435388ef38720866","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/DerAttrTest.java","status":"modified","additions":103,"deletions":8,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b62042b3cd8eae8a3d6049800f7ab6330d90fe/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b62042b3cd8eae8a3d6049800f7ab6330d90fe/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerAttrTest.java?ref=d5b62042b3cd8eae8a3d6049800f7ab6330d90fe","patch":"@@ -18,11 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.dao;\n \n-import org.apache.syncope.core.persistence.dao.DerAttrDAO;\n-import org.apache.syncope.core.persistence.dao.UserDAO;\n-import org.apache.syncope.core.persistence.dao.RoleDAO;\n-import org.apache.syncope.core.persistence.dao.DerSchemaDAO;\n-import org.apache.syncope.core.persistence.dao.MembershipDAO;\n import static org.junit.Assert.*;\n \n import java.util.List;\n@@ -74,7 +69,8 @@ public void findById() {\n     }\n \n     @Test\n-    public void saveUDerAttribute() throws ClassNotFoundException {\n+    public void saveUDerAttribute()\n+            throws ClassNotFoundException {\n         UDerSchema cnSchema = derSchemaDAO.find(\"cn\", UDerSchema.class);\n         assertNotNull(cnSchema);\n \n@@ -99,7 +95,8 @@ public void saveUDerAttribute() throws ClassNotFoundException {\n     }\n \n     @Test\n-    public void saveMDerAttribute() throws ClassNotFoundException {\n+    public void saveMDerAttribute()\n+            throws ClassNotFoundException {\n         MDerSchema deriveddata = derSchemaDAO.find(\"mderiveddata\", MDerSchema.class);\n         assertNotNull(deriveddata);\n \n@@ -123,7 +120,8 @@ public void saveMDerAttribute() throws ClassNotFoundException {\n     }\n \n     @Test\n-    public void saveRDerAttribute() throws ClassNotFoundException {\n+    public void saveRDerAttribute()\n+            throws ClassNotFoundException {\n         RDerSchema deriveddata = derSchemaDAO.find(\"rderiveddata\", RDerSchema.class);\n         assertNotNull(deriveddata);\n \n@@ -159,4 +157,101 @@ public void delete() {\n         UDerSchema attributeSchema = derSchemaDAO.find(attributeSchemaName, UDerSchema.class);\n         assertNotNull(\"user derived attribute schema deleted \" + \"when deleting values\", attributeSchema);\n     }\n+\n+    @Test\n+    public void issueSYNCOPE134User() {\n+        UDerSchema sderived = new UDerSchema();\n+        sderived.setName(\"sderived\");\n+        sderived.setExpression(\"status + ' - ' + username + ' - ' + creationDate + '[' + failedLogins + ']'\");\n+\n+        sderived = derSchemaDAO.save(sderived);\n+        derSchemaDAO.flush();\n+\n+        UDerSchema actual = derSchemaDAO.find(\"sderived\", UDerSchema.class);\n+        assertNotNull(\"expected save to work\", actual);\n+        assertEquals(sderived, actual);\n+\n+        SyncopeUser owner = userDAO.find(3L);\n+        assertNotNull(\"did not get expected user\", owner);\n+\n+        UDerAttr derAttr = new UDerAttr();\n+        derAttr.setOwner(owner);\n+        derAttr.setDerivedSchema(sderived);\n+\n+        derAttr = derAttrDAO.save(derAttr);\n+        derAttrDAO.flush();\n+\n+        derAttr = derAttrDAO.find(derAttr.getId(), UDerAttr.class);\n+        assertNotNull(\"expected save to work\", derAttr);\n+\n+        String value = derAttr.getValue(owner.getAttributes());\n+        assertNotNull(value);\n+        assertFalse(value.isEmpty());\n+        assertTrue(value.startsWith(\"active - user3 - 2010-10-20\"));\n+        assertTrue(value.endsWith(\"[]\"));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE134Role() {\n+        RDerSchema sderived = new RDerSchema();\n+        sderived.setName(\"sderived\");\n+        sderived.setExpression(\"name\");\n+\n+        sderived = derSchemaDAO.save(sderived);\n+        derSchemaDAO.flush();\n+\n+        RDerSchema actual = derSchemaDAO.find(\"sderived\", RDerSchema.class);\n+        assertNotNull(\"expected save to work\", actual);\n+        assertEquals(sderived, actual);\n+\n+        SyncopeRole owner = roleDAO.find(7L);\n+        assertNotNull(\"did not get expected user\", owner);\n+\n+        RDerAttr derAttr = new RDerAttr();\n+        derAttr.setOwner(owner);\n+        derAttr.setDerivedSchema(sderived);\n+\n+        derAttr = derAttrDAO.save(derAttr);\n+        derAttrDAO.flush();\n+\n+        derAttr = derAttrDAO.find(derAttr.getId(), RDerAttr.class);\n+        assertNotNull(\"expected save to work\", derAttr);\n+\n+        String value = derAttr.getValue(owner.getAttributes());\n+        assertNotNull(value);\n+        assertFalse(value.isEmpty());\n+        assertTrue(value.startsWith(\"managingDirector\"));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE134Memb() {\n+        MDerSchema sderived = new MDerSchema();\n+        sderived.setName(\"sderived\");\n+        sderived.setExpression(\"id\");\n+\n+        sderived = derSchemaDAO.save(sderived);\n+        derSchemaDAO.flush();\n+\n+        MDerSchema actual = derSchemaDAO.find(\"sderived\", MDerSchema.class);\n+        assertNotNull(\"expected save to work\", actual);\n+        assertEquals(sderived, actual);\n+\n+        Membership owner = membershipDAO.find(4L);\n+        assertNotNull(\"did not get expected user\", owner);\n+\n+        MDerAttr derAttr = new MDerAttr();\n+        derAttr.setOwner(owner);\n+        derAttr.setDerivedSchema(sderived);\n+\n+        derAttr = derAttrDAO.save(derAttr);\n+        derAttrDAO.flush();\n+\n+        derAttr = derAttrDAO.find(derAttr.getId(), MDerAttr.class);\n+        assertNotNull(\"expected save to work\", derAttr);\n+\n+        String value = derAttr.getValue(owner.getAttributes());\n+        assertNotNull(value);\n+        assertFalse(value.isEmpty());\n+        assertTrue(value.equalsIgnoreCase(\"4\"));\n+    }\n }"},{"sha":"0aab39c3d0c4d63e48bbc0835f60cb2e2e21386c","filename":"core/src/test/java/org/apache/syncope/core/persistence/relationships/AttrTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b62042b3cd8eae8a3d6049800f7ab6330d90fe/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b62042b3cd8eae8a3d6049800f7ab6330d90fe/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java?ref=d5b62042b3cd8eae8a3d6049800f7ab6330d90fe","patch":"@@ -153,6 +153,6 @@ public void derAttrFromSpecialAttrs() {\n         assertNotNull(value);\n         assertFalse(value.isEmpty());\n         assertTrue(value.startsWith(\"user3 - 2010-10-20T11:00:00\"));\n-        assertTrue(value.endsWith(\"[0]\"));\n+        assertTrue(value.endsWith(\"[]\"));\n     }\n }"}]}