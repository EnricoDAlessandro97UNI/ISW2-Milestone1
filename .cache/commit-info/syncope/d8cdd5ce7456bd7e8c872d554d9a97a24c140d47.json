{"sha":"d8cdd5ce7456bd7e8c872d554d9a97a24c140d47","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ4Y2RkNWNlNzQ1NmJkN2U4Yzg3MmQ1NTRkOWE5N2EyNGMxNDBkNDc=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-29T13:21:10Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-29T13:21:10Z"},"message":"[SYNCOPE-231]\n* Fixing LoggerService\n* Code Cleanup\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1439885 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8ad2ae3cf16ee4a8b8fc6964184b4b8cceef0a2c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8ad2ae3cf16ee4a8b8fc6964184b4b8cceef0a2c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d8cdd5ce7456bd7e8c872d554d9a97a24c140d47","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d8cdd5ce7456bd7e8c872d554d9a97a24c140d47","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d8cdd5ce7456bd7e8c872d554d9a97a24c140d47","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d8cdd5ce7456bd7e8c872d554d9a97a24c140d47/comments","author":null,"committer":null,"parents":[{"sha":"b01547753b1949658c63fa7d3a7cce3dda6c57db","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b01547753b1949658c63fa7d3a7cce3dda6c57db","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b01547753b1949658c63fa7d3a7cce3dda6c57db"}],"stats":{"total":105,"additions":54,"deletions":51},"files":[{"sha":"158a6c4b3fcad391d9385b6941995f094065230d","filename":"client/src/main/java/org/apache/syncope/client/rest/utils/RestClientExceptionMapper.java","status":"modified","additions":51,"deletions":50,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d8cdd5ce7456bd7e8c872d554d9a97a24c140d47/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d8cdd5ce7456bd7e8c872d554d9a97a24c140d47/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java?ref=d8cdd5ce7456bd7e8c872d554d9a97a24c140d47","patch":"@@ -39,67 +39,68 @@\n import org.slf4j.LoggerFactory;\r\n \r\n @Provider\r\n-public class RestClientExceptionMapper implements ExceptionMapper<Exception>,\r\n-\t\tResponseExceptionMapper<Exception> {\r\n+public class RestClientExceptionMapper implements ExceptionMapper<Exception>, ResponseExceptionMapper<Exception> {\r\n \r\n     private static final Logger LOG = LoggerFactory.getLogger(RestClientExceptionMapper.class);\r\n \r\n     @Override\r\n-\tpublic Response toResponse(Exception e) {\r\n-\t\tthrow new UnsupportedOperationException(\"Call of toResponse() method is not expected in RestClientExceptionnMapper\");\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic Exception fromResponse(Response response) {\r\n-\t\tException ex = null;\r\n-\t\tint statusCode = response.getStatus();\r\n-\t\t\r\n-\t\t// 1. Check for composite exception in HTTP header \r\n-\t\tSyncopeClientCompositeErrorException scce = checkCompositeException(response);\r\n-\t\tif (scce != null) {\r\n-\t\t\tex = scce;\r\n-\t\t\t\r\n-\t\t\t// TODO reduce SCCEE to really composite ones and use normal exception for others\r\n-//\t\t} else if (statusCode == HttpStatus.SC_FORBIDDEN) {\r\n-//\t\t\tex = new UnauthorizedRoleException(-1L);\r\n-\t\t\t\r\n-\t\t\t// 2. Map  SC_UNAUTHORIZED\r\n-\t\t} else if (statusCode == HttpStatus.SC_UNAUTHORIZED) {\r\n-\t\t\tex = new AccessControlException(\"Remote unauthorized exception\");\r\n-\t\t\t\r\n-            // 3. Map  SC_BAD_REQUEST\r\n+    public Response toResponse(final Exception e) {\r\n+        throw new UnsupportedOperationException(\r\n+                \"Call of toResponse() method is not expected in RestClientExceptionnMapper\");\r\n+    }\r\n+\r\n+    @Override\r\n+    public Exception fromResponse(final Response response) {\r\n+        Exception ex = null;\r\n+        int statusCode = response.getStatus();\r\n+\r\n+        // 1. Check for composite exception in HTTP header\r\n+        SyncopeClientCompositeErrorException scce = checkCompositeException(response);\r\n+        if (scce != null) {\r\n+            ex = scce;\r\n+\r\n+            // TODO reduce SCCEE to really composite ones and use normal exception for others\r\n+            // } else if (statusCode == HttpStatus.SC_FORBIDDEN) {\r\n+            // ex = new UnauthorizedRoleException(-1L);\r\n+\r\n+            // 2. Map SC_UNAUTHORIZED\r\n+        } else if (statusCode == HttpStatus.SC_UNAUTHORIZED) {\r\n+            ex = new AccessControlException(\"Remote unauthorized exception\");\r\n+\r\n+            // 3. Map SC_BAD_REQUEST\r\n         } else if (statusCode == HttpStatus.SC_BAD_REQUEST) {\r\n             ex = new BadRequestException();\r\n \r\n         } else {\r\n-\t\t\t// 4. All other codes are mapped to runtime exception with HTTP code information \r\n-\t\t\tex = new RuntimeException(String.format(\r\n-\t\t\t\t\t\"Remote exception with status code: %s\",\r\n-\t\t\t\t\tResponse.Status.fromStatusCode(statusCode).name()));\r\n-\t\t}\r\n+            // 4. All other codes are mapped to runtime exception with HTTP code information\r\n+            ex = new RuntimeException(String.format(\"Remote exception with status code: %s\", Response.Status\r\n+                    .fromStatusCode(statusCode).name()));\r\n+        }\r\n         LOG.error(\"Exception thrown by REST methods: \" + ex.getMessage(), ex);\r\n-\t\treturn ex;\r\n-\t}\r\n-\t\r\n-\tprivate SyncopeClientCompositeErrorException checkCompositeException(Response response) {\r\n-\t\tint statusCode = response.getStatus();\r\n-        List<Object> exceptionTypesInHeaders = response.getHeaders().get(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER);\r\n+        return ex;\r\n+    }\r\n+\r\n+    private SyncopeClientCompositeErrorException checkCompositeException(final Response response) {\r\n+        int statusCode = response.getStatus();\r\n+        List<Object> exceptionTypesInHeaders = response.getHeaders().get(\r\n+                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER);\r\n         if (exceptionTypesInHeaders == null) {\r\n             LOG.debug(\"No \" + SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER + \" provided\");\r\n             return null;\r\n         }\r\n \r\n-\t\tSyncopeClientCompositeErrorException compositeException = new SyncopeClientCompositeErrorException(\r\n-\t\t\t\torg.springframework.http.HttpStatus.valueOf(statusCode));\r\n+        SyncopeClientCompositeErrorException compositeException = new SyncopeClientCompositeErrorException(\r\n+                org.springframework.http.HttpStatus.valueOf(statusCode));\r\n \r\n         Set<String> handledExceptions = new HashSet<String>();\r\n         for (Object exceptionTypeValue : exceptionTypesInHeaders) {\r\n-        \tString exceptionTypeAsString = (String) exceptionTypeValue; \r\n+            String exceptionTypeAsString = (String) exceptionTypeValue;\r\n             SyncopeClientExceptionType exceptionType = null;\r\n             try {\r\n                 exceptionType = SyncopeClientExceptionType.getFromHeaderValue(exceptionTypeAsString);\r\n             } catch (IllegalArgumentException e) {\r\n-                LOG.error(\"Unexpected value of \" + SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER + \": \" + exceptionTypeAsString, e);\r\n+                LOG.error(\"Unexpected value of \" + SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER + \": \"\r\n+                        + exceptionTypeAsString, e);\r\n             }\r\n             if (exceptionType != null) {\r\n                 handledExceptions.add(exceptionTypeAsString);\r\n@@ -108,14 +109,14 @@ private SyncopeClientCompositeErrorException checkCompositeException(Response re\n                 clientException.setType(exceptionType);\r\n                 if (response.getHeaders().get(exceptionType.getElementHeaderName()) != null\r\n                         && !response.getHeaders().get(exceptionType.getElementHeaderName()).isEmpty()) {\r\n-                \t// TODO: update clientException to support list of objects\r\n-                \tList<Object> elementsObjectList = response.getHeaders().get(exceptionType.getElementHeaderName());\r\n-                \tList<String> elementsStringList = new ArrayList<String>();\r\n-                \tfor (Object elementObject : elementsObjectList) {\r\n-                \t\tif (elementObject instanceof String) {\r\n-                \t\t\telementsStringList.add((String) elementObject);\r\n-                \t\t}\r\n-                \t}\r\n+                    // TODO update clientException to support list of objects\r\n+                    List<Object> elementsObjectList = response.getHeaders().get(exceptionType.getElementHeaderName());\r\n+                    List<String> elementsStringList = new ArrayList<String>();\r\n+                    for (Object elementObject : elementsObjectList) {\r\n+                        if (elementObject instanceof String) {\r\n+                            elementsStringList.add((String) elementObject);\r\n+                        }\r\n+                    }\r\n                     clientException.setElements(elementsStringList);\r\n                 }\r\n                 compositeException.addException(clientException);\r\n@@ -130,7 +131,7 @@ private SyncopeClientCompositeErrorException checkCompositeException(Response re\n         if (compositeException.hasExceptions()) {\r\n             return compositeException;\r\n         }\r\n-        \r\n+\r\n         return null;\r\n-\t}\r\n+    }\r\n }\r"},{"sha":"6a52d81a88ef28b2d372425fcc21fa06fca81b49","filename":"core/src/main/java/org/apache/syncope/core/services/LoggerServiceImpl.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d8cdd5ce7456bd7e8c872d554d9a97a24c140d47/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d8cdd5ce7456bd7e8c872d554d9a97a24c140d47/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java?ref=d8cdd5ce7456bd7e8c872d554d9a97a24c140d47","patch":"@@ -90,12 +90,14 @@ public void delete(final LoggerType type, final String name) {\n             case NORMAL:\r\n                 loggerController.deleteLog(name);\r\n                 break;\r\n+\r\n             case AUDIT:\r\n                 try {\r\n                     loggerController.disableAudit(AuditLoggerName.fromLoggerName(name));\r\n                 } catch (Exception e) {\r\n                     throw new BadRequestException(e);\r\n                 }\r\n+                break;\r\n \r\n             default:\r\n                 throw new BadRequestException();\r"},{"sha":"b3ec55415b1262f970ad60b63a4290cb0dfacc59","filename":"core/src/main/java/org/apache/syncope/core/services/UserRequestServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d8cdd5ce7456bd7e8c872d554d9a97a24c140d47/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d8cdd5ce7456bd7e8c872d554d9a97a24c140d47/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java?ref=d8cdd5ce7456bd7e8c872d554d9a97a24c140d47","patch":"@@ -35,7 +35,7 @@\n public class UserRequestServiceImpl implements UserRequestService, ContextAware {\n \n     @Autowired\n-    UserRequestController userRequestController;\n+    private UserRequestController userRequestController;\n \n     private UriInfo uriInfo;\n "}]}