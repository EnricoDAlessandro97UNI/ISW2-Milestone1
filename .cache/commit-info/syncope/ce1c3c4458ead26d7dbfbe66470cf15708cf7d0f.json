{"sha":"ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNlMWMzYzQ0NThlYWQyNmQ3ZGJmYmU2NjQ3MGNmMTU3MDhjZjdkMGY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2021-07-13T07:23:25Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2021-07-13T07:23:25Z"},"message":"[SYNCOPE-1614] Spring Boot HealthIndicator and InfoContributor for al… (#277)","tree":{"sha":"537c820eb5424e08a3933f055791f409b96b0e95","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/537c820eb5424e08a3933f055791f409b96b0e95"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg7T9tCRBK7hj4Ov3rIwAAHuUIAHNUJHskjzkDDH+rPZZerjfK\ngHXVVGXf9gteDSBzTypmzi+jcQ+hkFOyJZyasEei5Y5BUrSMgXW9vGslhwwxlm8d\nJP4zseJ5wcf1q9EHWoORDXLaG9lm2s3eTsJ0Is2CLCVS7yy6fxLeWsAt+0YT/FOO\nP11pNKTYl385gefwzz3/LDppmCnBW8AN1/HdXhPrsGPzoLWZ+3xIx4hc1YrP9sEp\n3YUmLHkmHAjxs22If8PDhRQ48vDNov4eAw8hIlqibdDGhP3ALIUOctMYh75Cxlvb\nYcW9SGSSK+O64LMeXxoNIGnUiu53AfOg27AZd6EudRZhWVk0YMH8OkNB5mKlxKE=\n=Wsl6\n-----END PGP SIGNATURE-----\n","payload":"tree 537c820eb5424e08a3933f055791f409b96b0e95\nparent b805c8e9c2bfa1566123e3fab77f8f1c3f9663f8\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1626161005 +0200\ncommitter GitHub <noreply@github.com> 1626161005 +0200\n\n[SYNCOPE-1614] Spring Boot HealthIndicator and InfoContributor for al… (#277)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"b805c8e9c2bfa1566123e3fab77f8f1c3f9663f8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b805c8e9c2bfa1566123e3fab77f8f1c3f9663f8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b805c8e9c2bfa1566123e3fab77f8f1c3f9663f8"}],"stats":{"total":2586,"additions":1589,"deletions":997},"files":[{"sha":"c23170019ff4c02752e7fad51917a5b407002bbb","filename":"client/idrepo/common-ui/pom.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fcommon-ui%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fcommon-ui%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fpom.xml?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -37,10 +37,10 @@ under the License.\n   \n   <dependencies>\n     <dependency>\n-      <groupId>org.springframework</groupId>\n-      <artifactId>spring-context</artifactId>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-actuator</artifactId>\n     </dependency>\n-    \n+\n     <dependency>\n       <groupId>org.apache.wicket</groupId>\n       <artifactId>wicket</artifactId>"},{"sha":"589b8b8aba36eb92d3bdfdc313d92815e59df6b4","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/BaseSession.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FBaseSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FBaseSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FBaseSession.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -21,6 +21,7 @@\n import java.util.concurrent.Callable;\n import java.util.concurrent.Future;\n import org.apache.commons.lang3.time.FastDateFormat;\n+import org.apache.syncope.client.lib.SyncopeClient;\n \n public interface BaseSession {\n \n@@ -53,6 +54,8 @@ public String fallback() {\n \n     String getJWT();\n \n+    SyncopeClient getAnonymousClient();\n+\n     <T> T getAnonymousService(Class<T> serviceClass);\n \n     <T> T getService(Class<T> serviceClass);"},{"sha":"e7b6190a1483cef870fa5c3db969be8bdd5d718c","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/actuate/SyncopeCoreHealthIndicator.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Factuate%2FSyncopeCoreHealthIndicator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Factuate%2FSyncopeCoreHealthIndicator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Factuate%2FSyncopeCoreHealthIndicator.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.ui.commons.actuate;\n+\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n+import org.apache.syncope.common.rest.api.service.UserSelfService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.actuate.health.Health;\n+import org.springframework.boot.actuate.health.HealthIndicator;\n+import org.springframework.boot.actuate.health.Status;\n+\n+public class SyncopeCoreHealthIndicator implements HealthIndicator {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(SyncopeCoreHealthIndicator.class);\n+\n+    @Autowired\n+    protected ServiceOps serviceOps;\n+\n+    @Value(\"${anonymousUser}\")\n+    protected String anonymousUser;\n+\n+    @Value(\"${anonymousKey}\")\n+    protected String anonymousKey;\n+\n+    @Value(\"${useGZIPCompression:false}\")\n+    protected boolean useGZIPCompression;\n+\n+    @Override\n+    public Health health() {\n+        Health.Builder builder = new Health.Builder();\n+\n+        try {\n+            new SyncopeClientFactoryBean().\n+                    setAddress(serviceOps.get(NetworkService.Type.CORE).getAddress()).\n+                    setUseCompression(useGZIPCompression).\n+                    create(new AnonymousAuthenticationHandler(anonymousUser, anonymousKey)).\n+                    getService(UserSelfService.class).read();\n+            builder.status(Status.UP);\n+        } catch (Exception e) {\n+            LOG.debug(\"When attempting to connect to Syncope Core\", e);\n+            builder.status(Status.DOWN);\n+        }\n+\n+        return builder.build();\n+    }\n+}"},{"sha":"06e93913b066b0f2f36bfcd7c4185937c9177c92","filename":"client/idrepo/console/pom.xml","status":"modified","additions":33,"deletions":6,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fpom.xml?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -52,7 +52,15 @@ under the License.\n       <groupId>org.springframework.boot</groupId>\n       <artifactId>spring-boot-starter-log4j2</artifactId>\n     </dependency>\n-      \n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-actuator</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-security</artifactId>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.apache.wicket</groupId>\n       <artifactId>wicket-auth-roles</artifactId>\n@@ -137,11 +145,6 @@ under the License.\n   \n   <build>\n     <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-checkstyle-plugin</artifactId>\n-      </plugin>\n-      \n       <plugin>\n         <groupId>nl.geodienstencentrum.maven</groupId>\n         <artifactId>sass-maven-plugin</artifactId>\n@@ -167,6 +170,30 @@ under the License.\n           <skip>${sass.skip}</skip>\n         </configuration>\n       </plugin>\n+\n+      <plugin>\n+        <groupId>io.github.git-commit-id</groupId>\n+        <artifactId>git-commit-id-maven-plugin</artifactId>\n+        <configuration>\n+          <failOnNoGitDirectory>false</failOnNoGitDirectory>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-maven-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>build-info</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n     </plugins>\n     \n     <resources>"},{"sha":"075570bb4d4870bd2a578d3d54aea8390bea9790","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SecurityConfig.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSecurityConfig.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSecurityConfig.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSecurityConfig.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console;\n+\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.actuate.autoconfigure.security.servlet.EndpointRequest;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+\n+@EnableWebSecurity\n+@Configuration\n+public class SecurityConfig extends WebSecurityConfigurerAdapter {\n+\n+    @Value(\"${anonymousUser}\")\n+    private String anonymousUser;\n+\n+    @Value(\"${anonymousKey}\")\n+    private String anonymousKey;\n+\n+    @Override\n+    protected void configure(final AuthenticationManagerBuilder auth) throws Exception {\n+        auth.inMemoryAuthentication().\n+                withUser(anonymousUser).\n+                password(\"{noop}\" + anonymousKey).\n+                roles(IdRepoEntitlement.ANONYMOUS);\n+    }\n+\n+    @Override\n+    protected void configure(final HttpSecurity http) throws Exception {\n+        http.csrf().disable().\n+                authorizeRequests().\n+                requestMatchers(EndpointRequest.toAnyEndpoint()).\n+                authenticated().\n+                and().\n+                httpBasic();\n+    }\n+}"},{"sha":"9b4823e3581926481b4c3fa7e49f4b21b8b24333","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java","status":"modified","additions":19,"deletions":9,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -43,6 +43,7 @@\n import org.apache.syncope.client.console.wizards.any.UserFormFinalizerUtils;\n import org.apache.syncope.client.ui.commons.ApplicationContextProvider;\n import org.apache.syncope.client.ui.commons.MIMETypesLoader;\n+import org.apache.syncope.client.ui.commons.actuate.SyncopeCoreHealthIndicator;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStart;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n@@ -56,7 +57,10 @@\n import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.PropertySource;\n \n+@PropertySource(\"classpath:console.properties\")\n+@PropertySource(value = \"file:${console.directory}/console.properties\", ignoreResourceNotFound = true)\n @SpringBootApplication(exclude = {\n     ErrorMvcAutoConfiguration.class,\n     HttpMessageConvertersAutoConfiguration.class })\n@@ -76,18 +80,14 @@ protected SpringApplicationBuilder configure(final SpringApplicationBuilder buil\n     }\n \n     @Bean\n-    public KeymasterStart keymasterStart() {\n-        return new KeymasterStart(NetworkService.Type.CONSOLE);\n-    }\n-\n-    @Bean\n-    public KeymasterStop keymasterStop() {\n-        return new KeymasterStop(NetworkService.Type.CONSOLE);\n+    public ApplicationContextProvider applicationContextProvider() {\n+        return new ApplicationContextProvider();\n     }\n \n+    @ConditionalOnMissingBean\n     @Bean\n-    public ApplicationContextProvider applicationContextProvider() {\n-        return new ApplicationContextProvider();\n+    public SyncopeCoreHealthIndicator syncopeCoreHealthIndicator() {\n+        return new SyncopeCoreHealthIndicator();\n     }\n \n     @ConditionalOnMissingBean(name = \"classPathScanImplementationLookup\")\n@@ -171,4 +171,14 @@ public RealmPolicyProvider realmPolicyProvider() {\n     public PolicyTabProvider idRepoPolicyTabProvider() {\n         return new IdRepoPolicyTabProvider();\n     }\n+\n+    @Bean\n+    public KeymasterStart keymasterStart() {\n+        return new KeymasterStart(NetworkService.Type.CONSOLE);\n+    }\n+\n+    @Bean\n+    public KeymasterStop keymasterStop() {\n+        return new KeymasterStop(NetworkService.Type.CONSOLE);\n+    }\n }"},{"sha":"2ea6ef776816cc59641b345ab38dec0a88b3d979","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":20,"deletions":12,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -39,6 +39,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.commons.lang3.time.FastDateFormat;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.console.commons.RealmsUtils;\n@@ -54,7 +55,6 @@\n import org.apache.syncope.common.lib.info.SystemInfo;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n-import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.wicket.Session;\n import org.apache.wicket.authroles.authentication.AuthenticatedWebSession;\n import org.apache.wicket.authroles.authorization.strategies.role.Roles;\n@@ -97,6 +97,8 @@ public String fallback() {\n \n     protected final SyncopeClient anonymousClient;\n \n+    protected final Pair<String, String> gitAndBuildInfo;\n+\n     protected final PlatformInfo platformInfo;\n \n     protected final SystemInfo systemInfo;\n@@ -131,8 +133,9 @@ public SyncopeConsoleSession(final Request request) {\n                 SyncopeWebApplication.get().getAnonymousUser(),\n                 SyncopeWebApplication.get().getAnonymousKey()));\n \n-        platformInfo = anonymousClient.getService(SyncopeService.class).platform();\n-        systemInfo = anonymousClient.getService(SyncopeService.class).system();\n+        gitAndBuildInfo = anonymousClient.gitAndBuildInfo();\n+        platformInfo = anonymousClient.platform();\n+        systemInfo = anonymousClient.system();\n \n         executor = new ThreadPoolTaskExecutor();\n         executor.setWaitForTasksToCompleteOnShutdown(false);\n@@ -176,10 +179,6 @@ public MediaType getMediaType() {\n         return clientFactory.getContentType().getMediaType();\n     }\n \n-    public SyncopeClient getAnonymousClient() {\n-        return anonymousClient;\n-    }\n-\n     public void execute(final Runnable command) {\n         try {\n             executor.execute(command);\n@@ -199,6 +198,10 @@ public <T> Future<T> execute(final Callable<T> command) {\n         }\n     }\n \n+    public Pair<String, String> gitAndBuildInfo() {\n+        return gitAndBuildInfo;\n+    }\n+\n     public PlatformInfo getPlatformInfo() {\n         return platformInfo;\n     }\n@@ -381,6 +384,16 @@ public void refreshAuth(final String username) {\n         }\n     }\n \n+    @Override\n+    public SyncopeClient getAnonymousClient() {\n+        return anonymousClient;\n+    }\n+\n+    @Override\n+    public <T> T getAnonymousService(final Class<T> serviceClass) {\n+        return getAnonymousClient().getService(serviceClass);\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     protected <T> T getCachedService(final Class<T> serviceClass) {\n         T service;\n@@ -396,11 +409,6 @@ protected <T> T getCachedService(final Class<T> serviceClass) {\n         return service;\n     }\n \n-    @Override\n-    public <T> T getAnonymousService(final Class<T> serviceClass) {\n-        return getAnonymousClient().getService(serviceClass);\n-    }\n-\n     @Override\n     public <T> T getService(final Class<T> serviceClass) {\n         return getCachedService(serviceClass);"},{"sha":"6d1ec5b60f36d7562423d200b74e67b51621a446","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeWebApplication.java","status":"modified","additions":33,"deletions":80,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -56,7 +56,6 @@\n import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.request.resource.IResource;\n import org.apache.wicket.request.resource.ResourceReference;\n-import org.apache.wicket.util.lang.Args;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.apache.syncope.client.console.commons.ExternalResourceProvider;\n@@ -76,13 +75,14 @@\n import org.apache.wicket.request.cycle.IRequestCycleListener;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.ApplicationContext;\n import org.springframework.stereotype.Component;\n \n @Component\n public class SyncopeWebApplication extends WicketBootSecuredWebApplication {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWebApplication.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(SyncopeWebApplication.class);\n \n     private static final String CONSOLE_PROPERTIES = \"console.properties\";\n \n@@ -91,56 +91,65 @@ public static SyncopeWebApplication get() {\n     }\n \n     @Autowired\n-    private ClassPathScanImplementationLookup lookup;\n+    protected ClassPathScanImplementationLookup lookup;\n \n     @Autowired\n-    private ServiceOps serviceOps;\n+    protected ServiceOps serviceOps;\n \n-    private String anonymousUser;\n+    @Value(\"${anonymousUser}\")\n+    protected String anonymousUser;\n \n-    private String anonymousKey;\n+    @Value(\"${anonymousKey}\")\n+    protected String anonymousKey;\n \n-    private String reconciliationReportKey;\n+    @Value(\"${useGZIPCompression:false}\")\n+    protected boolean useGZIPCompression;\n \n-    private boolean useGZIPCompression;\n+    @Value(\"${maxUploadFileSizeMB:#{null}}\")\n+    protected Integer maxUploadFileSizeMB;\n \n-    private Integer maxUploadFileSizeMB;\n+    @Value(\"${maxWaitTime:30}\")\n+    protected Integer maxWaitTime;\n \n-    private Integer maxWaitTime;\n+    @Value(\"${corePoolSize:5}\")\n+    protected Integer corePoolSize;\n \n-    private Integer corePoolSize;\n+    @Value(\"${maxPoolSize:10}\")\n+    protected Integer maxPoolSize;\n \n-    private Integer maxPoolSize;\n+    @Value(\"${queueCapacity:50}\")\n+    protected Integer queueCapacity;\n \n-    private Integer queueCapacity;\n+    @Value(\"${reconciliationReportKey}\")\n+    protected String reconciliationReportKey;\n \n     @Autowired\n-    private ExternalResourceProvider resourceProvider;\n+    protected ExternalResourceProvider resourceProvider;\n \n     @Autowired\n-    private AnyDirectoryPanelAdditionalActionsProvider anyDirectoryPanelAdditionalActionsProvider;\n+    protected AnyDirectoryPanelAdditionalActionsProvider anyDirectoryPanelAdditionalActionsProvider;\n \n     @Autowired\n-    private AnyDirectoryPanelAdditionalActionLinksProvider anyDirectoryPanelAdditionalActionLinksProvider;\n+    protected AnyDirectoryPanelAdditionalActionLinksProvider anyDirectoryPanelAdditionalActionLinksProvider;\n \n     @Autowired\n-    private AnyWizardBuilderAdditionalSteps anyWizardBuilderAdditionalSteps;\n+    protected AnyWizardBuilderAdditionalSteps anyWizardBuilderAdditionalSteps;\n \n     @Autowired\n-    private StatusProvider statusProvider;\n+    protected StatusProvider statusProvider;\n \n     @Autowired\n-    private VirSchemaDetailsPanelProvider virSchemaDetailsPanelProvider;\n+    protected VirSchemaDetailsPanelProvider virSchemaDetailsPanelProvider;\n \n     @Autowired\n-    private ImplementationInfoProvider implementationInfoProvider;\n+    protected ImplementationInfoProvider implementationInfoProvider;\n \n     @Autowired\n-    private ApplicationContext ctx;\n+    protected ApplicationContext ctx;\n \n-    private Map<String, Class<? extends BasePage>> pageClasses;\n+    protected Map<String, Class<? extends BasePage>> pageClasses;\n \n-    private String defaultAnyLayoutClass;\n+    protected String defaultAnyLayoutClass;\n \n     @SuppressWarnings(\"unchecked\")\n     protected void populatePageClasses(final Properties props) {\n@@ -181,55 +190,6 @@ protected void init() {\n         // read console.properties\n         Properties props = PropertyUtils.read(getClass(), CONSOLE_PROPERTIES, \"console.directory\");\n \n-        anonymousUser = props.getProperty(\"anonymousUser\");\n-        Args.notNull(anonymousUser, \"<anonymousUser>\");\n-        anonymousKey = props.getProperty(\"anonymousKey\");\n-        Args.notNull(anonymousKey, \"<anonymousKey>\");\n-\n-        useGZIPCompression = BooleanUtils.toBoolean(props.getProperty(\"useGZIPCompression\"));\n-        Args.notNull(useGZIPCompression, \"<useGZIPCompression>\");\n-\n-        try {\n-            maxUploadFileSizeMB = props.getProperty(\"maxUploadFileSizeMB\") == null\n-                    ? null\n-                    : Integer.valueOf(props.getProperty(\"maxUploadFileSizeMB\"));\n-        } catch (NumberFormatException e) {\n-            LOG.error(\"Invalid value provided for 'maxUploadFileSizeMB': {}\",\n-                    props.getProperty(\"maxUploadFileSizeMB\"));\n-            maxUploadFileSizeMB = null;\n-        }\n-\n-        try {\n-            maxWaitTime = Integer.valueOf(props.getProperty(\"maxWaitTimeOnApplyChanges\", \"30\"));\n-        } catch (NumberFormatException e) {\n-            LOG.error(\"Invalid value provided for 'maxWaitTimeOnApplyChanges': {}\",\n-                    props.getProperty(\"maxWaitTimeOnApplyChanges\"));\n-            maxWaitTime = 30;\n-        }\n-\n-        // Resource connections check thread pool size\n-        try {\n-            corePoolSize = Integer.valueOf(props.getProperty(\"executor.corePoolSize\", \"5\"));\n-        } catch (NumberFormatException e) {\n-            LOG.error(\"Invalid value provided for 'executor.corePoolSize': {}\",\n-                    props.getProperty(\"executor.corePoolSize\"));\n-            corePoolSize = 5;\n-        }\n-        try {\n-            maxPoolSize = Integer.valueOf(props.getProperty(\"executor.maxPoolSize\", \"10\"));\n-        } catch (NumberFormatException e) {\n-            LOG.error(\"Invalid value provided for 'executor.maxPoolSize': {}\",\n-                    props.getProperty(\"executor.maxPoolSize\"));\n-            maxPoolSize = 10;\n-        }\n-        try {\n-            queueCapacity = Integer.valueOf(props.getProperty(\"executor.queueCapacity\", \"50\"));\n-        } catch (NumberFormatException e) {\n-            LOG.error(\"Invalid value provided for 'executor.queueCapacity': {}\",\n-                    props.getProperty(\"executor.queueCapacity\"));\n-            maxPoolSize = 50;\n-        }\n-\n         // process page properties\n         pageClasses = new HashMap<>();\n         populatePageClasses(props);\n@@ -315,21 +275,14 @@ public void onEndRequest(final RequestCycle cycle) {\n \n         mountPage(\"/login\", getSignInPageClass());\n \n-        try {\n-            reconciliationReportKey = props.getProperty(\"reconciliationReportKey\");\n-        } catch (NumberFormatException e) {\n-            LOG.error(\"While parsing reconciliationReportKey\", e);\n-        }\n-        Args.notNull(reconciliationReportKey, \"<reconciliationReportKey>\");\n-\n         for (Class<? extends AbstractResource> resource : lookup.getClasses(AbstractResource.class)) {\n             Resource annotation = resource.getAnnotation(Resource.class);\n             try {\n                 AbstractResource instance = resource.getDeclaredConstructor().newInstance();\n \n                 mountResource(annotation.path(), new ResourceReference(annotation.key()) {\n \n-                    private static final long serialVersionUID = -128426276529456602L;\n+                    protected static final long serialVersionUID = -128426276529456602L;\n \n                     @Override\n                     public IResource getResource() {"},{"sha":"94451e8b787e73afe855235442e263ea4684b51d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/BasePage.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -24,6 +24,7 @@\n import java.util.List;\n import java.util.stream.StreamSupport;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.SyncopeWebApplication;\n@@ -40,7 +41,6 @@\n import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n import org.apache.syncope.client.ui.commons.rest.ResponseHolder;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.lib.info.SystemInfo;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.AttributeModifier;\n@@ -98,13 +98,13 @@ public BasePage(final PageParameters parameters) {\n         body.add(new Label(\"username\", username));\n \n         // right sidebar\n-        PlatformInfo platformInfo = SyncopeConsoleSession.get().getPlatformInfo();\n-        Label version = new Label(\"version\", platformInfo.getVersion());\n-        String versionLink = StringUtils.isNotBlank(platformInfo.getBuildNumber())\n-                && platformInfo.getVersion().endsWith(\"-SNAPSHOT\")\n+        Pair<String, String> gitAndBuildInfo = SyncopeConsoleSession.get().gitAndBuildInfo();\n+        Label version = new Label(\"version\", gitAndBuildInfo.getRight());\n+        String versionLink = StringUtils.isNotBlank(gitAndBuildInfo.getLeft())\n+                && gitAndBuildInfo.getRight().endsWith(\"-SNAPSHOT\")\n                 ? \"https://gitbox.apache.org/repos/asf?p=syncope.git;a=commit;h=\"\n-                + platformInfo.getBuildNumber()\n-                : \"https://cwiki.apache.org/confluence/display/SYNCOPE/Fusion\";\n+                + gitAndBuildInfo.getLeft()\n+                : \"https://cwiki.apache.org/confluence/display/SYNCOPE/Maggiore\";\n         version.add(new AttributeModifier(\"onclick\", \"window.open('\" + versionLink + \"', '_blank')\"));\n         body.add(version);\n "},{"sha":"7f7e697d7fd36f5625b669fdf338f1378cec0934","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypesPanel.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -58,7 +58,6 @@ public class AnyTypesPanel extends TypesDirectoryPanel<AnyTypeTO, AnyTypesPanel.\n \n     public AnyTypesPanel(final String id, final PageReference pageRef) {\n         super(id, false, pageRef);\n-        this.restClient = new AnyTypeRestClient();\n         disableCheckBoxes();\n \n         this.addNewItemPanelBuilder(new AbstractModalPanelBuilder<AnyTypeTO>(new AnyTypeTO(), pageRef) {"},{"sha":"048349712edd8b5b11b71ca53ba9d63a60e848a7","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DashboardOverviewPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardOverviewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardOverviewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardOverviewPanel.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -21,7 +21,7 @@\n import java.time.Duration;\n import java.time.temporal.ChronoUnit;\n import org.apache.commons.lang3.tuple.Triple;\n-import org.apache.syncope.client.console.rest.SyncopeRestClient;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.wicket.ajax.IndicatorAjaxTimerBehavior;\n import org.apache.syncope.client.console.widgets.AnyByRealmWidget;\n import org.apache.syncope.client.console.widgets.CompletenessWidget;\n@@ -57,7 +57,7 @@ public class DashboardOverviewPanel extends Panel {\n     public DashboardOverviewPanel(final String id) {\n         super(id);\n \n-        NumbersInfo numbers = SyncopeRestClient.numbers();\n+        NumbersInfo numbers = SyncopeConsoleSession.get().getAnonymousClient().numbers();\n \n         WebMarkupContainer container = new WebMarkupContainer(\"container\");\n         container.setOutputMarkupId(true);\n@@ -97,7 +97,7 @@ public DashboardOverviewPanel(final String id) {\n                 numbers.getAny2ByRealm());\n         container.add(anyByRealm);\n \n-        load = new LoadWidget(\"load\", SyncopeRestClient.system());\n+        load = new LoadWidget(\"load\", SyncopeConsoleSession.get().getAnonymousClient().system());\n         container.add(load);\n \n         container.add(new IndicatorAjaxTimerBehavior(Duration.of(60, ChronoUnit.SECONDS)) {\n@@ -106,7 +106,7 @@ public DashboardOverviewPanel(final String id) {\n \n             @Override\n             protected void onTimer(final AjaxRequestTarget target) {\n-                NumbersInfo numbers = SyncopeRestClient.numbers();\n+                NumbersInfo numbers = SyncopeConsoleSession.get().getAnonymousClient().numbers();\n \n                 if (totalUsers.refresh(numbers.getTotalUsers())) {\n                     target.add(totalUsers);\n@@ -143,7 +143,7 @@ protected void onTimer(final AjaxRequestTarget target) {\n                     target.add(anyByRealm);\n                 }\n \n-                load.refresh(SyncopeRestClient.system());\n+                load.refresh(SyncopeConsoleSession.get().getAnonymousClient().system());\n                 target.add(load);\n             }\n         });"},{"sha":"fea07cfd7a3a7fb45e18918ab7e4212cabdd04dd","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DelegationDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDelegationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDelegationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDelegationDirectoryPanel.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -85,7 +85,7 @@ protected String paginatorRowsKey() {\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.emptyList();\n+        return List.of();\n     }\n \n     @Override"},{"sha":"1da79f47d2e95b9c8c9400255ed23d885bcfa573","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/UserDirectoryPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -42,6 +42,7 @@\n import org.apache.syncope.client.ui.commons.wizards.any.UserWrapper;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -190,9 +191,8 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n             }, ActionType.PASSWORD_MANAGEMENT, IdRepoEntitlement.USER_UPDATE).\n                     setRealms(realm, model.getObject().getDynRealms());\n \n-            if (SyncopeConsoleSession.get().getPlatformInfo().isPwdResetAllowed()\n-                    && !SyncopeConsoleSession.get().getPlatformInfo().isPwdResetRequiringSecurityQuestions()) {\n-\n+            PlatformInfo platformInfo = SyncopeConsoleSession.get().getAnonymousClient().platform();\n+            if (platformInfo.isPwdResetAllowed() && !platformInfo.isPwdResetRequiringSecurityQuestions()) {\n                 panel.add(new ActionLink<UserTO>() {\n \n                     private static final long serialVersionUID = -7978723352517770644L;"},{"sha":"8baa82d70000de7d476846ca408e6d0603e47eb9","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -20,7 +20,6 @@\n \n import java.io.Serializable;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.function.Function;\n@@ -220,7 +219,7 @@ public static String buildFIQL(\n             final List<SearchClause> clauses,\n             final AbstractFiqlSearchConditionBuilder<?, ?, ?> builder) {\n \n-        return buildFIQL(clauses, builder, Collections.emptyMap(), NO_CUSTOM_CONDITION);\n+        return buildFIQL(clauses, builder, Map.of(), NO_CUSTOM_CONDITION);\n     }\n \n     public static String buildFIQL("},{"sha":"22fb73f761b4b5c52dad889767a1e2875f1fdc72","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/AnyTypeRestClient.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -22,6 +22,7 @@\n import java.util.Comparator;\n import java.util.List;\n import org.apache.commons.lang3.ObjectUtils;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n@@ -60,7 +61,7 @@ public static List<AnyTypeTO> listAnyTypes() {\n     }\n \n     public static List<String> list() {\n-        List<String> types = getSyncopeService().platform().getAnyTypes();\n+        List<String> types = SyncopeConsoleSession.get().getAnonymousClient().platform().getAnyTypes();\n         types.sort(new AnyTypeKeyComparator());\n         return types;\n     }"},{"sha":"c0df66638669db0f9d74b06af2dfecf29c2dab29","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/RoleRestClient.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRoleRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRoleRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRoleRestClient.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -24,6 +24,7 @@\n import java.util.stream.Collectors;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.rest.api.service.RoleService;\n \n@@ -75,6 +76,7 @@ public static void removeAnyLayout(final String roleKey) {\n     }\n \n     public static List<String> getAllAvailableEntitlements() {\n-        return getSyncopeService().platform().getEntitlements().stream().sorted().collect(Collectors.toList());\n+        return SyncopeConsoleSession.get().getAnonymousClient().platform().getEntitlements().\n+                stream().sorted().collect(Collectors.toList());\n     }\n }"},{"sha":"47f7ef042f528ebf651c2658c46b26efc9a1de52","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/SyncopeRestClient.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSyncopeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSyncopeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSyncopeRestClient.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -20,23 +20,13 @@\n \n import javax.ws.rs.core.Response;\n import java.util.List;\n-import org.apache.syncope.common.lib.info.NumbersInfo;\n-import org.apache.syncope.common.lib.info.SystemInfo;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n \n public class SyncopeRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -9013241672773442286L;\n \n-    public static NumbersInfo numbers() {\n-        return getService(SyncopeService.class).numbers();\n-    }\n-\n-    public static SystemInfo system() {\n-        return getService(SyncopeService.class).system();\n-    }\n-\n     public static Response exportInternalStorageContent() {\n         return getService(SyncopeService.class).exportInternalStorageContent();\n     }"},{"sha":"8f4f239678dc94f8d2c0f0b998aec8974df3455c","filename":"client/idrepo/console/src/main/resources/application.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -24,6 +24,9 @@ server.servlet.encoding.force=true\n \n server.servlet.contextPath=/syncope-console\n \n+management.endpoints.web.exposure.include=info,health,loggers\n+management.endpoint.health.show-details=ALWAYS\n+\n service.discovery.address=http://localhost:8080/syncope-console/\n \n wicket.core.csrf.enabled=false"},{"sha":"6797501a16113b51aca35254990969726e9d4fd2","filename":"client/idrepo/console/src/test/java/org/apache/syncope/client/console/AbstractTest.java","status":"modified","additions":31,"deletions":11,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FAbstractTest.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -34,7 +34,7 @@\n import java.util.List;\n import java.util.Properties;\n import java.util.Set;\n-import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.cxf.jaxrs.client.Client;\n import org.apache.syncope.client.console.AbstractTest.TestSyncopeWebApplication.SyncopeServiceClient;\n@@ -64,11 +64,11 @@\n import org.apache.syncope.common.keymaster.client.api.DomainOps;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.info.NumbersInfo;\n import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.lib.info.SystemInfo;\n-import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -203,14 +203,6 @@ private SyncopeService getSyncopeService() {\n             when(service.type(anyString())).thenReturn(service);\n             when(service.accept(anyString())).thenReturn(service);\n \n-            when(service.platform()).thenReturn(new PlatformInfo());\n-            when(service.system()).thenReturn(new SystemInfo());\n-\n-            NumbersInfo numbersInfo = new NumbersInfo();\n-            Stream.of(NumbersInfo.ConfItem.values()).\n-                    forEach(item -> numbersInfo.getConfCompleteness().put(item.name(), true));\n-            when(service.numbers()).thenReturn(numbersInfo);\n-\n             return service;\n         }\n \n@@ -256,6 +248,34 @@ public SyncopeClientFactoryBean newClientFactory() {\n \n             when(client.self()).thenReturn(Triple.of(new HashMap<>(), List.of(), getUserTO()));\n \n+            when(client.gitAndBuildInfo()).thenReturn(Pair.of(\"\", \"\"));\n+            when(client.platform()).thenReturn(new PlatformInfo());\n+            when(client.numbers()).thenAnswer(ic -> {\n+                NumbersInfo numbersInfo = new NumbersInfo();\n+\n+                numbersInfo.getConfCompleteness().put(\n+                        NumbersInfo.ConfItem.RESOURCE.name(), numbersInfo.getTotalResources() > 0);\n+                numbersInfo.getConfCompleteness().put(\n+                        NumbersInfo.ConfItem.ACCOUNT_POLICY.name(), false);\n+                numbersInfo.getConfCompleteness().put(\n+                        NumbersInfo.ConfItem.PASSWORD_POLICY.name(), false);\n+                numbersInfo.getConfCompleteness().put(\n+                        NumbersInfo.ConfItem.NOTIFICATION.name(), false);\n+                numbersInfo.getConfCompleteness().put(\n+                        NumbersInfo.ConfItem.PULL_TASK.name(), false);\n+                numbersInfo.getConfCompleteness().put(\n+                        NumbersInfo.ConfItem.VIR_SCHEMA.name(), false);\n+                numbersInfo.getConfCompleteness().put(\n+                        NumbersInfo.ConfItem.ANY_TYPE.name(), false);\n+                numbersInfo.getConfCompleteness().put(\n+                        NumbersInfo.ConfItem.SECURITY_QUESTION.name(), false);\n+                numbersInfo.getConfCompleteness().put(\n+                        NumbersInfo.ConfItem.ROLE.name(), numbersInfo.getTotalRoles() > 0);\n+\n+                return numbersInfo;\n+            });\n+            when(client.system()).thenReturn(new SystemInfo());\n+\n             SyncopeService syncopeService = getSyncopeService();\n             when(client.getService(SyncopeService.class)).thenReturn(syncopeService);\n "},{"sha":"b1ca6730ba92151a9c18336c87bd6e0e32c02ea1","filename":"client/idrepo/enduser/pom.xml","status":"modified","additions":32,"deletions":5,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fpom.xml?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -52,6 +52,14 @@ under the License.\n       <groupId>org.springframework.boot</groupId>\n       <artifactId>spring-boot-starter-log4j2</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-actuator</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-security</artifactId>\n+    </dependency>\n     \n     <dependency>\n       <groupId>org.apache.syncope.client.idrepo</groupId>\n@@ -125,11 +133,6 @@ under the License.\n   \n   <build>\n     <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-checkstyle-plugin</artifactId>\n-      </plugin>\n-      \n       <plugin>\n         <groupId>nl.geodienstencentrum.maven</groupId>\n         <artifactId>sass-maven-plugin</artifactId>\n@@ -155,6 +158,30 @@ under the License.\n           <skip>${sass.skip}</skip>\n         </configuration>\n       </plugin>\n+\n+      <plugin>\n+        <groupId>io.github.git-commit-id</groupId>\n+        <artifactId>git-commit-id-maven-plugin</artifactId>\n+        <configuration>\n+          <failOnNoGitDirectory>false</failOnNoGitDirectory>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-maven-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>build-info</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n     </plugins>\n     \n     <resources>"},{"sha":"507bb6836504d53f28e8fb3e4da446ee4fd817a1","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/SecurityConfig.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSecurityConfig.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSecurityConfig.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSecurityConfig.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.enduser;\n+\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.actuate.autoconfigure.security.servlet.EndpointRequest;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+\n+@EnableWebSecurity\n+@Configuration\n+public class SecurityConfig extends WebSecurityConfigurerAdapter {\n+\n+    @Value(\"${anonymousUser}\")\n+    private String anonymousUser;\n+\n+    @Value(\"${anonymousKey}\")\n+    private String anonymousKey;\n+\n+    @Override\n+    protected void configure(final AuthenticationManagerBuilder auth) throws Exception {\n+        auth.inMemoryAuthentication().\n+                withUser(anonymousUser).\n+                password(\"{noop}\" + anonymousKey).\n+                roles(IdRepoEntitlement.ANONYMOUS);\n+    }\n+\n+    @Override\n+    protected void configure(final HttpSecurity http) throws Exception {\n+        http.csrf().disable().\n+                authorizeRequests().\n+                requestMatchers(EndpointRequest.toAnyEndpoint()).\n+                authenticated().\n+                and().\n+                httpBasic();\n+    }\n+}"},{"sha":"58556d75ac248f90489ed3f9948cfc301890c3cf","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserApplication.java","status":"modified","additions":19,"deletions":9,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -23,6 +23,7 @@\n import org.apache.syncope.client.enduser.init.ClassPathScanImplementationLookup;\n import org.apache.syncope.client.ui.commons.ApplicationContextProvider;\n import org.apache.syncope.client.ui.commons.MIMETypesLoader;\n+import org.apache.syncope.client.ui.commons.actuate.SyncopeCoreHealthIndicator;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStart;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n@@ -34,7 +35,10 @@\n import org.springframework.boot.builder.SpringApplicationBuilder;\n import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.PropertySource;\n \n+@PropertySource(\"classpath:enduser.properties\")\n+@PropertySource(value = \"file:${console.directory}/enduser.properties\", ignoreResourceNotFound = true)\n @SpringBootApplication(exclude = {\n     ErrorMvcAutoConfiguration.class,\n     HttpMessageConvertersAutoConfiguration.class })\n@@ -51,18 +55,14 @@ protected SpringApplicationBuilder configure(final SpringApplicationBuilder buil\n     }\n \n     @Bean\n-    public KeymasterStart keymasterStart() {\n-        return new KeymasterStart(NetworkService.Type.ENDUSER);\n-    }\n-\n-    @Bean\n-    public KeymasterStop keymasterStop() {\n-        return new KeymasterStop(NetworkService.Type.ENDUSER);\n+    public ApplicationContextProvider applicationContextProvider() {\n+        return new ApplicationContextProvider();\n     }\n \n+    @ConditionalOnMissingBean\n     @Bean\n-    public ApplicationContextProvider applicationContextProvider() {\n-        return new ApplicationContextProvider();\n+    public SyncopeCoreHealthIndicator syncopeCoreHealthIndicator() {\n+        return new SyncopeCoreHealthIndicator();\n     }\n \n     @ConditionalOnMissingBean(name = \"classPathScanImplementationLookup\")\n@@ -86,4 +86,14 @@ public MIMETypesLoader mimeTypesLoader() {\n     public PreviewUtils previewUtils() {\n         return new PreviewUtils();\n     }\n+\n+    @Bean\n+    public KeymasterStart keymasterStart() {\n+        return new KeymasterStart(NetworkService.Type.ENDUSER);\n+    }\n+\n+    @Bean\n+    public KeymasterStop keymasterStop() {\n+        return new KeymasterStop(NetworkService.Type.ENDUSER);\n+    }\n }"},{"sha":"cc15893a24f6efc451ee789d5db2bb444a86b1ef","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserSession.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -33,7 +33,6 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.wicket.Session;\n import org.apache.wicket.authroles.authentication.AuthenticatedWebSession;\n import org.apache.wicket.authroles.authorization.strategies.role.Roles;\n@@ -119,8 +118,8 @@ public SyncopeEnduserSession(final Request request) {\n                         SyncopeWebApplication.get().getAnonymousUser(),\n                         SyncopeWebApplication.get().getAnonymousKey()));\n \n-        platformInfo = getAnonymousService(SyncopeService.class).platform();\n-        systemInfo = getAnonymousService(SyncopeService.class).system();\n+        platformInfo = anonymousClient.platform();\n+        systemInfo = anonymousClient.system();\n \n         executor = new ThreadPoolTaskExecutor();\n         executor.setWaitForTasksToCompleteOnShutdown(false);\n@@ -177,10 +176,6 @@ public MediaType getMediaType() {\n         return clientFactory.getContentType().getMediaType();\n     }\n \n-    public SyncopeClient getAnonymousClient() {\n-        return anonymousClient;\n-    }\n-\n     public void execute(final Runnable command) {\n         try {\n             executor.execute(command);\n@@ -320,6 +315,16 @@ public UserTO getSelfTO(final boolean reload) {\n         return selfTO;\n     }\n \n+    @Override\n+    public SyncopeClient getAnonymousClient() {\n+        return anonymousClient;\n+    }\n+\n+    @Override\n+    public <T> T getAnonymousService(final Class<T> serviceClass) {\n+        return getService(serviceClass);\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     private <T> T getCachedService(final Class<T> serviceClass) {\n         T service;\n@@ -363,9 +368,4 @@ public <T> void resetClient(final Class<T> service) {\n     public FastDateFormat getDateFormat() {\n         return FastDateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, getLocale());\n     }\n-\n-    @Override\n-    public <T> T getAnonymousService(final Class<T> serviceClass) {\n-        return getAnonymousClient().getService(serviceClass);\n-    }\n }"},{"sha":"11e5e8a5635e05ec1423024457fca990940c7dee","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeWebApplication.java","status":"modified","additions":20,"deletions":62,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -76,10 +76,10 @@\n import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.request.resource.IResource;\n import org.apache.wicket.request.resource.ResourceReference;\n-import org.apache.wicket.util.lang.Args;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -106,25 +106,35 @@ public static SyncopeWebApplication get() {\n     @Autowired\n     private ServiceOps serviceOps;\n \n-    private boolean useGZIPCompression;\n-\n+    @Value(\"${adminUser}\")\n     private String adminUser;\n \n-    private String anonymousUser;\n+    @Value(\"${anonymousUser}\")\n+    protected String anonymousUser;\n+\n+    @Value(\"${anonymousKey}\")\n+    protected String anonymousKey;\n \n-    private String anonymousKey;\n+    @Value(\"${useGZIPCompression:false}\")\n+    protected boolean useGZIPCompression;\n \n+    @Value(\"${captchaEnabled:false}\")\n     private boolean captchaEnabled;\n \n-    private Integer maxWaitTime;\n+    @Value(\"${maxUploadFileSizeMB:#{null}}\")\n+    protected Integer maxUploadFileSizeMB;\n \n-    private Integer corePoolSize;\n+    @Value(\"${maxWaitTime:30}\")\n+    protected Integer maxWaitTime;\n \n-    private Integer maxPoolSize;\n+    @Value(\"${corePoolSize:5}\")\n+    protected Integer corePoolSize;\n \n-    private Integer queueCapacity;\n+    @Value(\"${maxPoolSize:10}\")\n+    protected Integer maxPoolSize;\n \n-    private Integer maxUploadFileSizeMB;\n+    @Value(\"${queueCapacity:50}\")\n+    protected Integer queueCapacity;\n \n     private FileAlterationMonitor customFormLayoutMonitor;\n \n@@ -173,58 +183,6 @@ protected void init() {\n         // read enduser.properties\n         Properties props = PropertyUtils.read(getClass(), ENDUSER_PROPERTIES, \"enduser.directory\");\n \n-        adminUser = props.getProperty(\"adminUser\");\n-        Args.notNull(adminUser, \"<adminUser>\");\n-        anonymousUser = props.getProperty(\"anonymousUser\");\n-        Args.notNull(anonymousUser, \"<anonymousUser>\");\n-        anonymousKey = props.getProperty(\"anonymousKey\");\n-        Args.notNull(anonymousKey, \"<anonymousKey>\");\n-\n-        captchaEnabled = Boolean.parseBoolean(props.getProperty(\"captcha\"));\n-        Args.notNull(captchaEnabled, \"<captcha>\");\n-\n-        useGZIPCompression = BooleanUtils.toBoolean(props.getProperty(\"useGZIPCompression\"));\n-        Args.notNull(useGZIPCompression, \"<useGZIPCompression>\");\n-\n-        try {\n-            maxUploadFileSizeMB = Integer.valueOf(props.getProperty(\"maxUploadFileSizeMB\", \"4\"));\n-        } catch (NumberFormatException e) {\n-            LOG.error(\"Invalid value provided for 'maxUploadFileSizeMB': {}\",\n-                    props.getProperty(\"maxUploadFileSizeMB\"));\n-            maxUploadFileSizeMB = 4;\n-        }\n-\n-        try {\n-            maxWaitTime = Integer.valueOf(props.getProperty(\"maxWaitTimeOnApplyChanges\", \"30\"));\n-        } catch (NumberFormatException e) {\n-            LOG.error(\"Invalid value provided for 'maxWaitTimeOnApplyChanges': {}\",\n-                    props.getProperty(\"maxWaitTimeOnApplyChanges\"));\n-            maxWaitTime = 30;\n-        }\n-\n-        // Resource connections check thread pool size\n-        try {\n-            corePoolSize = Integer.valueOf(props.getProperty(\"executor.corePoolSize\", \"5\"));\n-        } catch (NumberFormatException e) {\n-            LOG.error(\"Invalid value provided for 'executor.corePoolSize': {}\",\n-                    props.getProperty(\"executor.corePoolSize\"));\n-            corePoolSize = 5;\n-        }\n-        try {\n-            maxPoolSize = Integer.valueOf(props.getProperty(\"executor.maxPoolSize\", \"10\"));\n-        } catch (NumberFormatException e) {\n-            LOG.error(\"Invalid value provided for 'executor.maxPoolSize': {}\",\n-                    props.getProperty(\"executor.maxPoolSize\"));\n-            maxPoolSize = 10;\n-        }\n-        try {\n-            queueCapacity = Integer.valueOf(props.getProperty(\"executor.queueCapacity\", \"50\"));\n-        } catch (NumberFormatException e) {\n-            LOG.error(\"Invalid value provided for 'executor.queueCapacity': {}\",\n-                    props.getProperty(\"executor.queueCapacity\"));\n-            maxPoolSize = 50;\n-        }\n-\n         // read customFormLayout.json\n         try (InputStream is = SyncopeWebApplication.class.getResourceAsStream('/' + CUSTOM_FORM_LAYOUT_FILE)) {\n             customFormLayout = MAPPER.readValue(is, new TypeReference<UserFormLayoutInfo>() {"},{"sha":"5d9b6d706d5a79be4bc593f6866716fafbab0deb","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/pages/EditUser.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FEditUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FEditUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FEditUser.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -23,7 +23,6 @@\n import org.apache.syncope.client.enduser.layout.UserFormLayoutInfo;\n import org.apache.syncope.client.enduser.panels.UserFormPanel;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n \n@@ -48,7 +47,7 @@ public EditUser(final PageParameters parameters) {\n                 \"editUserPanel\",\n                 userTO,\n                 userTO,\n-                SyncopeEnduserSession.get().getService(SyncopeService.class).platform().getUserClasses(),\n+                SyncopeEnduserSession.get().getAnonymousClient().platform().getUserClasses(),\n                 buildFormLayout(),\n                 getPageReference());\n         editUserPanel.setOutputMarkupId(true);"},{"sha":"67096a38c11808c4a1633124082c1119a7b4a150","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/pages/SelfRegistration.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSelfRegistration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSelfRegistration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSelfRegistration.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -26,7 +26,6 @@\n import org.apache.syncope.client.enduser.panels.UserSelfFormPanel;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n \n@@ -54,7 +53,7 @@ public SelfRegistration(final PageParameters parameters) {\n                 \"selfRegistrationPanel\",\n                 buildNewUserTO(parameters),\n                 buildNewUserTO(parameters),\n-                SyncopeEnduserSession.get().getService(SyncopeService.class).platform().getUserClasses(),\n+                SyncopeEnduserSession.get().getAnonymousClient().platform().getUserClasses(),\n                 buildFormLayout(),\n                 getPageReference());\n         selfRegistrationPanel.setOutputMarkupId(true);"},{"sha":"865cda37d5c0aa71167c4effdf4cdc7e505034fd","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/panels/AnyFormPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2FAnyFormPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2FAnyFormPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2FAnyFormPanel.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -73,7 +73,7 @@ public AnyFormPanel(final String id,\n     }\n \n     protected Details<UserTO> addOptionalDetailsPanel(final UserWrapper modelObject) {\n-        Details<UserTO> details = new Details<>(EnduserConstants.CONTENT_PANEL, modelObject, false, true, pageRef);\n+        Details<UserTO> details = new Details<>(EnduserConstants.CONTENT_PANEL, pageRef);\n         details.setOutputMarkupId(true);\n         return details;\n     }\n@@ -85,7 +85,7 @@ protected void buildLayout(final UserWrapper modelObject) {\n                 .setComponent(addOptionalDetailsPanel(modelObject))\n                 .isVisible(formLayoutInfo.isDetailsManagement()).build(\"userDetailsPanelCard\"));\n \n-        Groups groups = new Groups(EnduserConstants.CONTENT_PANEL, modelObject, false);\n+        Groups groups = new Groups(EnduserConstants.CONTENT_PANEL, modelObject);\n         setOutputMarkupId(true);\n \n         form.add(new CardPanel.Builder<Groups>()"},{"sha":"0b5bb37c089b6e4f280752733db2378a738ed82b","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/panels/UserFormPanel.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2FUserFormPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2FUserFormPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2FUserFormPanel.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -84,8 +84,6 @@ protected Details<UserTO> addOptionalDetailsPanel(final UserWrapper modelObject)\n         return new UserDetails(\n                 EnduserConstants.CONTENT_PANEL,\n                 UserWrapper.class.cast(modelObject),\n-                false,\n-                false,\n                 pageRef);\n     }\n "},{"sha":"9d1583e53f386d5047d72d0a8fae5ebf228902fa","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/panels/UserSelfFormPanel.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2FUserSelfFormPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2FUserSelfFormPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2FUserSelfFormPanel.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -72,8 +72,6 @@ protected Details<UserTO> addOptionalDetailsPanel(final UserWrapper modelObject)\n         return new SelfUserDetails(\n                 EnduserConstants.CONTENT_PANEL,\n                 UserWrapper.class.cast(modelObject),\n-                false,\n-                false,\n                 UserFormLayoutInfo.class.cast(formLayoutInfo).isPasswordManagement(),\n                 pageRef);\n     }\n@@ -101,7 +99,7 @@ protected void onFormSubmit(final AjaxRequestTarget target) {\n                         ? UserWrapper.class.cast(updatedWarapper).isStorePasswordInSyncope()\n                         : StringUtils.isNotBlank(userTO.getPassword()));\n \n-                result = userSelfRestClient.create(req, true);\n+                result = userSelfRestClient.create(req);\n                 LOG.debug(\"User {} has been created\", result.getEntity().getUsername());\n \n                 parameters.add(EnduserConstants.STATUS, Constants.OPERATION_SUCCEEDED);"},{"sha":"0acd3bde1ced7b0613146a559153df69c35adf20","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/panels/any/AbstractAttrs.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FAbstractAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FAbstractAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FAbstractAttrs.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -38,7 +38,6 @@\n import org.apache.wicket.model.util.ListModel;\n import java.io.Serializable;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.Comparator;\n import java.util.LinkedHashMap;\n import java.util.List;\n@@ -74,8 +73,8 @@ public AbstractAttrs(\n             final Map<String, CustomizationOption> whichAttrs) {\n         super(id);\n         this.anyTypeClasses = anyTypeClasses;\n-        this.attrs = new ListModel<>(Collections.emptyList());\n-        this.membershipTOs = new ListModel<>(Collections.emptyList());\n+        this.attrs = new ListModel<>(List.of());\n+        this.membershipTOs = new ListModel<>(List.of());\n \n         this.setOutputMarkupId(true);\n \n@@ -102,8 +101,9 @@ private List<MembershipTO> loadMembershipAttrs() {\n \n             for (MembershipTO membership : (List<MembershipTO>) PropertyResolver.getPropertyField(\n                     \"memberships\", anyTO).get(anyTO)) {\n-                setSchemas(Pair.of(membership.getGroupKey(), membership.getGroupName()), getMembershipAuxClasses(\n-                        membership, anyTO.getType()));\n+                setSchemas(Pair.of(\n+                        membership.getGroupKey(), membership.getGroupName()),\n+                        getMembershipAuxClasses(membership));\n                 setAttrs(membership);\n \n                 if (AbstractAttrs.this instanceof PlainAttrs && !membership.getPlainAttrs().isEmpty()) {\n@@ -144,7 +144,7 @@ protected List<String> getDefaultValues(final String schema, final String groupN\n                 : groupName + '#')\n                 + schema;\n         return whichAttrs.get(schemaName) == null\n-                ? Collections.emptyList()\n+                ? List.of()\n                 : whichAttrs.get(schemaName).getDefaultValues();\n     }\n \n@@ -199,11 +199,11 @@ public boolean isPanelVisible() {\n \n     protected abstract List<Attr> getAttrsFromTO(MembershipTO membershipTO);\n \n-    protected static List<String> getMembershipAuxClasses(final MembershipTO membershipTO, final String anyType) {\n+    protected static List<String> getMembershipAuxClasses(final MembershipTO membershipTO) {\n         try {\n             return SyncopeRestClient.searchUserTypeExtensions(membershipTO.getGroupName());\n         } catch (Exception e) {\n-            return Collections.emptyList();\n+            return List.of();\n         }\n     }\n "},{"sha":"f53122893bd7acde4a4a340d0307079b7f17626b","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/panels/any/DerAttrs.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FDerAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FDerAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FDerAttrs.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.enduser.panels.any;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -37,7 +36,6 @@\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n-import org.apache.wicket.extensions.markup.html.tabs.ITab;\n import org.apache.wicket.markup.ComponentTag;\n import org.apache.wicket.markup.MarkupStream;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n@@ -69,8 +67,8 @@ public <T extends AnyTO> DerAttrs(\n \n             @Override\n             protected void populateItem(final ListItem<MembershipTO> item) {\n-                final MembershipTO membershipTO = item.getModelObject();\n-                item.add(new Accordion(\"membershipDerSchemas\", Collections.<ITab>singletonList(new AbstractTab(\n+                MembershipTO membershipTO = item.getModelObject();\n+                item.add(new Accordion(\"membershipDerSchemas\", List.of(new AbstractTab(\n                         new StringResourceModel(\n                                 \"attributes.membership.accordion\",\n                                 DerAttrs.this,\n@@ -151,7 +149,7 @@ protected void setAttrs(final MembershipTO membershipTO) {\n         membershipTO.getDerAttrs().addAll(derAttrs);\n     }\n \n-    public class DerSchemas extends Schemas {\n+    public static class DerSchemas extends Schemas {\n \n         private static final long serialVersionUID = -4730563859116024676L;\n "},{"sha":"1539c3b1fd39664d54f46fe1836c2cac0da0dff5","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/panels/any/Details.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FDetails.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.enduser.panels.any;\n \n-import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.markup.html.panel.Panel;\n@@ -33,12 +32,7 @@\n \n     protected final PageReference pageRef;\n \n-    public Details(\n-            final String id,\n-            final AnyWrapper<T> wrapper,\n-            final boolean templateMode,\n-            final boolean includeStatusPanel,\n-            final PageReference pageRef) {\n+    public Details(final String id, final PageReference pageRef) {\n         super(id);\n         this.pageRef = pageRef;\n     }"},{"sha":"1ee0cd22ce7661deee4e79bff144ed5b75e7e5fc","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/panels/any/Groups.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FGroups.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -30,7 +30,6 @@\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.util.ListModel;\n import java.io.Serializable;\n-import java.util.Collections;\n import java.util.List;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n@@ -61,10 +60,7 @@ public class Groups extends Panel {\n \n     protected WebMarkupContainer groupsContainer;\n \n-    public <T extends AnyTO> Groups(final String id,\n-            final AnyWrapper<T> modelObject,\n-            final boolean templateMode) {\n-\n+    public <T extends AnyTO> Groups(final String id, final AnyWrapper<T> modelObject) {\n         super(id);\n         this.anyTO = modelObject.getInnerObject();\n \n@@ -215,7 +211,7 @@ protected void reloadMemberships() {\n \n         @Override\n         public List<String> getDynMemberships() {\n-            return Collections.emptyList();\n+            return List.of();\n         }\n \n         /**"},{"sha":"0ceea6f47c7eeb01a353b3df732316577bc07336","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/panels/any/PlainAttrs.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FPlainAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FPlainAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FPlainAttrs.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.enduser.panels.any;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -39,7 +38,6 @@\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n-import org.apache.wicket.extensions.markup.html.tabs.ITab;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.IChoiceRenderer;\n@@ -94,8 +92,8 @@ public PlainAttrs(\n \n             @Override\n             protected void populateItem(final ListItem<MembershipTO> item) {\n-                final MembershipTO membershipTO = item.getModelObject();\n-                item.add(new Accordion(\"membershipPlainSchemas\", Collections.<ITab>singletonList(new AbstractTab(\n+                MembershipTO membershipTO = item.getModelObject();\n+                item.add(new Accordion(\"membershipPlainSchemas\", List.of(new AbstractTab(\n                         new StringResourceModel(\n                                 \"attributes.membership.accordion\",\n                                 PlainAttrs.this,"},{"sha":"f02bcd685ba5d523dc5c80cc24d6a14a944864cd","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/panels/any/Resources.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FResources.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FResources.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FResources.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -27,7 +27,6 @@\n import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import org.apache.syncope.client.ui.commons.wizards.any.UserWrapper;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.PropertyModel;\n@@ -77,11 +76,11 @@ public void setObject(final List<String> object) {\n     @Override\n     protected void onInitialize() {\n         super.onInitialize();\n-        available.setObject(SyncopeEnduserSession.get().getService(SyncopeService.class).platform().getResources());\n+        available.setObject(SyncopeEnduserSession.get().getAnonymousClient().platform().getResources());\n     }\n \n     public boolean evaluate() {\n-        available.setObject(SyncopeEnduserSession.get().getService(SyncopeService.class).platform().getResources());\n+        available.setObject(SyncopeEnduserSession.get().getAnonymousClient().platform().getResources());\n         return !available.getObject().isEmpty();\n     }\n }"},{"sha":"e5515a91a9986ed5c98404c1918c28e39ab1def0","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/panels/any/SelfUserDetails.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FSelfUserDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FSelfUserDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FSelfUserDetails.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -28,17 +28,15 @@ public class SelfUserDetails extends UserDetails {\n     public SelfUserDetails(\n             final String id,\n             final UserWrapper wrapper,\n-            final boolean templateMode,\n-            final boolean includeStatusPanel,\n             final boolean showPasswordManagement,\n             final PageReference pageRef) {\n \n-        super(id, wrapper, templateMode, includeStatusPanel, pageRef);\n+        super(id, wrapper, pageRef);\n \n         // ------------------------\n         // Password\n         // ------------------------\n-        EditUserPasswordPanel panel = new EditUserPasswordPanel(\"password\", wrapper, templateMode);\n+        EditUserPasswordPanel panel = new EditUserPasswordPanel(\"password\", wrapper);\n         panel.setVisible(showPasswordManagement);\n \n         add(panel);"},{"sha":"fed52d49d4977973f2fc28c1bfb57a2883a7c591","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/panels/any/UserDetails.java","status":"modified","additions":5,"deletions":20,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FUserDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FUserDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FUserDetails.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -47,15 +47,8 @@ public class UserDetails extends Details<UserTO> {\n \n     protected final UserTO userTO;\n \n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    public UserDetails(\n-            final String id,\n-            final UserWrapper wrapper,\n-            final boolean templateMode,\n-            final boolean includeStatusPanel,\n-            final PageReference pageRef) {\n-\n-        super(id, wrapper, templateMode, includeStatusPanel, pageRef);\n+    public UserDetails(final String id, final UserWrapper wrapper, final PageReference pageRef) {\n+        super(id, pageRef);\n \n         userTO = wrapper.getInnerObject();\n         // ------------------------\n@@ -68,11 +61,7 @@ public UserDetails(\n             username.showExternAction(new LabelInfo(\"externalAction\", wrapper.getPreviousUserTO().getUsername()));\n         }\n \n-        if (templateMode) {\n-            username.enableJexlHelp();\n-        } else {\n-            username.addRequiredLabel();\n-        }\n+        username.addRequiredLabel();\n         add(username);\n         // ------------------------\n \n@@ -91,18 +80,14 @@ protected static class EditUserPasswordPanel extends Panel {\n \n         private static final long serialVersionUID = -8198836979773590078L;\n \n-        protected EditUserPasswordPanel(\n-                final String id,\n-                final UserWrapper wrapper,\n-                final boolean templateMode) {\n-\n+        protected EditUserPasswordPanel(final String id, final UserWrapper wrapper) {\n             super(id);\n             setOutputMarkupId(true);\n             add(new Label(\"warning\", new ResourceModel(\"password.change.warning\")));\n             add(new PasswordPanel(\n                     \"passwordPanel\",\n                     wrapper,\n-                    templateMode,\n+                    false,\n                     wrapper.getInnerObject().getKey() == null,\n                     new PasswordStrengthBehavior(new PasswordStrengthConfig().\n                             withDebug(false)."},{"sha":"c9284e42083c5639bca1e99aafc42b0afc9f25b5","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/panels/any/VirAttrs.java","status":"modified","additions":14,"deletions":16,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FVirAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FVirAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FVirAttrs.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.enduser.panels.any;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -39,7 +38,6 @@\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n-import org.apache.wicket.extensions.markup.html.tabs.ITab;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n@@ -69,22 +67,22 @@ public <T extends AnyTO> VirAttrs(\n \n             @Override\n             protected void populateItem(final ListItem<MembershipTO> item) {\n-                final MembershipTO membershipTO = item.getModelObject();\n-                item.add(new Accordion(\"membershipVirSchemas\",\n-                        Collections.<ITab>singletonList(new AbstractTab(new StringResourceModel(\n+                MembershipTO membershipTO = item.getModelObject();\n+                item.add(new Accordion(\"membershipVirSchemas\", List.of(\n+                        new AbstractTab(new StringResourceModel(\n                                 \"attributes.membership.accordion\", VirAttrs.this, Model.of(membershipTO))) {\n \n-                            private static final long serialVersionUID = 1037272333056449378L;\n-\n-                            @Override\n-                            public WebMarkupContainer getPanel(final String panelId) {\n-                                return new VirAttrs.VirSchemas(\n-                                        panelId,\n-                                        membershipTO.getGroupName(),\n-                                        membershipSchemas.get(membershipTO.getGroupKey()),\n-                                        new ListModel<>(getAttrsFromTO(membershipTO)));\n-                            }\n-                        }), Model.of(-1)).setOutputMarkupId(true));\n+                    private static final long serialVersionUID = 1037272333056449378L;\n+\n+                    @Override\n+                    public WebMarkupContainer getPanel(final String panelId) {\n+                        return new VirAttrs.VirSchemas(\n+                                panelId,\n+                                membershipTO.getGroupName(),\n+                                membershipSchemas.get(membershipTO.getGroupKey()),\n+                                new ListModel<>(getAttrsFromTO(membershipTO)));\n+                    }\n+                }), Model.of(-1)).setOutputMarkupId(true));\n             }\n         }).setOutputMarkupId(true);\n     }"},{"sha":"50458629b1de3cb9dd27ae329a489ec5f973b37f","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/AnyTypeRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FAnyTypeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FAnyTypeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FAnyTypeRestClient.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -19,10 +19,10 @@\n package org.apache.syncope.client.enduser.rest;\n \n import java.io.Serializable;\n-import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n import org.apache.commons.lang3.ObjectUtils;\n+import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n@@ -48,7 +48,7 @@ public static AnyTypeTO read(final String key) {\n     }\n \n     public static List<AnyTypeTO> listAnyTypes() {\n-        List<AnyTypeTO> types = Collections.emptyList();\n+        List<AnyTypeTO> types = List.of();\n \n         try {\n             types = getService(AnyTypeService.class).list();\n@@ -61,7 +61,7 @@ public static List<AnyTypeTO> listAnyTypes() {\n     }\n \n     public static List<String> list() {\n-        List<String> types = getSyncopeService().platform().getAnyTypes();\n+        List<String> types = SyncopeEnduserSession.get().getAnonymousClient().platform().getAnyTypes();\n         types.sort(new AnyTypeKeyComparator());\n         return types;\n     }"},{"sha":"c89e35b8482e364196093b3f61daa6702eb6fe71","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/SchemaRestClient.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSchemaRestClient.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.enduser.rest;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n@@ -87,7 +86,7 @@ public static <T extends SchemaTO> List<T> getSchemas(\n     }\n \n     public static List<String> getSchemaNames(final SchemaType schemaType) {\n-        List<String> schemaNames = Collections.emptyList();\n+        List<String> schemaNames = List.of();\n \n         try {\n             schemaNames = getSchemas(schemaType, null, new String[0]).stream()."},{"sha":"ec5b7211e85b2d5855747c1bce3670fe0524ed3d","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/SyncopeRestClient.java","status":"modified","additions":1,"deletions":15,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSyncopeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSyncopeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSyncopeRestClient.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -18,29 +18,16 @@\n  */\n package org.apache.syncope.client.enduser.rest;\n \n-import java.util.Collections;\n import java.util.List;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n \n public class SyncopeRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -2211371717449597247L;\n \n-    public static List<String> listAnyTypeClasses() {\n-        List<String> types = Collections.emptyList();\n-\n-        try {\n-            types = getService(SyncopeService.class).platform().getAnyTypeClasses();\n-        } catch (SyncopeClientException e) {\n-            LOG.error(\"While reading all any type classes\", e);\n-        }\n-        return types;\n-    }\n-\n     public static List<String> searchUserTypeExtensions(final String groupName) {\n-        List<String> types = Collections.emptyList();\n+        List<String> types = List.of();\n         try {\n             TypeExtensionTO typeExtensionTO = getService(SyncopeService.class).readUserTypeExtension(groupName);\n             types = typeExtensionTO == null ? types : typeExtensionTO.getAuxClasses();\n@@ -49,5 +36,4 @@ public static List<String> searchUserTypeExtensions(final String groupName) {\n         }\n         return types;\n     }\n-\n }"},{"sha":"d1a7cef05080315daf51e46dae135c46f3d78ab2","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/UserSelfRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FUserSelfRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FUserSelfRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FUserSelfRestClient.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -37,7 +37,7 @@ public static void requestPasswordReset(final String username, final String secu\n         getService(UserSelfService.class).requestPasswordReset(username, securityAnswer);\n     }\n \n-    public ProvisioningResult<UserTO> create(final UserCR createReq, final boolean storePassword) {\n+    public ProvisioningResult<UserTO> create(final UserCR createReq) {\n         ProvisioningResult<UserTO> result;\n         result = getService(UserSelfService.class).create(createReq).readEntity(\n                 new GenericType<ProvisioningResult<UserTO>>() {"},{"sha":"719fd4be19587886e694196669d24ac47ae62b42","filename":"client/idrepo/enduser/src/main/resources/application.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -24,6 +24,9 @@ server.servlet.encoding.force=true\n \n server.servlet.contextPath=/syncope-enduser\n \n+management.endpoints.web.exposure.include=info,health,loggers\n+management.endpoint.health.show-details=ALWAYS\n+\n service.discovery.address=http://localhost:8080/syncope-enduser/\n \n wicket.core.csrf.enabled=false"},{"sha":"14cdd07ed488cf8938b37d9e6b75d67baf2dd123","filename":"client/idrepo/enduser/src/test/java/org/apache/syncope/client/enduser/AbstractTest.java","status":"modified","additions":29,"deletions":11,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FAbstractTest.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -33,7 +33,6 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Properties;\n-import java.util.stream.Stream;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.cxf.jaxrs.client.Client;\n import org.apache.syncope.client.enduser.init.ClassPathScanImplementationLookup;\n@@ -44,11 +43,11 @@\n import org.apache.syncope.common.keymaster.client.api.DomainOps;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.info.NumbersInfo;\n import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.lib.info.SystemInfo;\n-import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -133,14 +132,6 @@ private SyncopeService getSyncopeService() {\n             when(service.type(anyString())).thenReturn(service);\n             when(service.accept(anyString())).thenReturn(service);\n \n-            when(service.platform()).thenReturn(new PlatformInfo());\n-            when(service.system()).thenReturn(new SystemInfo());\n-\n-            NumbersInfo numbersInfo = new NumbersInfo();\n-            Stream.of(NumbersInfo.ConfItem.values()).\n-                    forEach(item -> numbersInfo.getConfCompleteness().put(item.name(), true));\n-            when(service.numbers()).thenReturn(numbersInfo);\n-\n             return service;\n         }\n \n@@ -187,6 +178,33 @@ public SyncopeClientFactoryBean newClientFactory() {\n \n             when(client.self()).thenReturn(Triple.of(new HashMap<>(), List.of(), getUserTO()));\n \n+            when(client.platform()).thenReturn(new PlatformInfo());\n+            when(client.numbers()).thenAnswer(ic -> {\n+                NumbersInfo numbersInfo = new NumbersInfo();\n+\n+                numbersInfo.getConfCompleteness().put(\n+                        NumbersInfo.ConfItem.RESOURCE.name(), numbersInfo.getTotalResources() > 0);\n+                numbersInfo.getConfCompleteness().put(\n+                        NumbersInfo.ConfItem.ACCOUNT_POLICY.name(), false);\n+                numbersInfo.getConfCompleteness().put(\n+                        NumbersInfo.ConfItem.PASSWORD_POLICY.name(), false);\n+                numbersInfo.getConfCompleteness().put(\n+                        NumbersInfo.ConfItem.NOTIFICATION.name(), false);\n+                numbersInfo.getConfCompleteness().put(\n+                        NumbersInfo.ConfItem.PULL_TASK.name(), false);\n+                numbersInfo.getConfCompleteness().put(\n+                        NumbersInfo.ConfItem.VIR_SCHEMA.name(), false);\n+                numbersInfo.getConfCompleteness().put(\n+                        NumbersInfo.ConfItem.ANY_TYPE.name(), false);\n+                numbersInfo.getConfCompleteness().put(\n+                        NumbersInfo.ConfItem.SECURITY_QUESTION.name(), false);\n+                numbersInfo.getConfCompleteness().put(\n+                        NumbersInfo.ConfItem.ROLE.name(), numbersInfo.getTotalRoles() > 0);\n+\n+                return numbersInfo;\n+            });\n+            when(client.system()).thenReturn(new SystemInfo());\n+\n             SyncopeService syncopeService = getSyncopeService();\n             when(client.getService(SyncopeService.class)).thenReturn(syncopeService);\n "},{"sha":"7c033fae9c33f3196e2b18cfd44924db25b61b7e","filename":"client/idrepo/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":64,"deletions":8,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -20,16 +20,21 @@\n \n import org.apache.syncope.client.lib.batch.BatchRequest;\n import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Base64;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import javax.ws.rs.core.EntityTag;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.cxf.configuration.jsse.TLSClientParameters;\n import org.apache.cxf.jaxrs.client.Client;\n@@ -41,6 +46,9 @@\n import org.apache.cxf.transport.http.HTTPConduit;\n import org.apache.cxf.transport.http.URLConnectionHTTPConduit;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.info.NumbersInfo;\n+import org.apache.syncope.common.lib.info.PlatformInfo;\n+import org.apache.syncope.common.lib.info.SystemInfo;\n import org.apache.syncope.common.lib.search.AnyObjectFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.ConnObjectTOFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.OrderByClauseBuilder;\n@@ -60,19 +68,19 @@\n  */\n public class SyncopeClient {\n \n-    private static final String HEADER_SPLIT_PROPERTY = \"org.apache.cxf.http.header.split\";\n+    protected static final String HEADER_SPLIT_PROPERTY = \"org.apache.cxf.http.header.split\";\n \n-    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+    protected static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n \n-    private final MediaType mediaType;\n+    protected final MediaType mediaType;\n \n-    private final JAXRSClientFactoryBean restClientFactory;\n+    protected final JAXRSClientFactoryBean restClientFactory;\n \n-    private final RestClientExceptionMapper exceptionMapper;\n+    protected final RestClientExceptionMapper exceptionMapper;\n \n-    private final boolean useCompression;\n+    protected final boolean useCompression;\n \n-    private final TLSClientParameters tlsClientParameters;\n+    protected final TLSClientParameters tlsClientParameters;\n \n     public SyncopeClient(\n             final MediaType mediaType,\n@@ -136,6 +144,54 @@ protected void cleanup() {\n         restClientFactory.setPassword(null);\n     }\n \n+    protected JsonNode info() throws IOException {\n+        WebClient webClient = WebClient.create(\n+                restClientFactory.getAddress().replace(\"/rest\", \"/actuator/info\")).\n+                accept(MediaType.APPLICATION_JSON_TYPE).\n+                header(RESTHeaders.DOMAIN, getDomain());\n+\n+        Optional.ofNullable(getJWT()).ifPresentOrElse(\n+                jwt -> webClient.header(HttpHeaders.AUTHORIZATION, \"Bearer \" + jwt),\n+                () -> webClient.header(HttpHeaders.AUTHORIZATION, \"Basic \" + Base64.getEncoder().encodeToString(\n+                        (restClientFactory.getUsername() + \":\" + restClientFactory.getPassword()).getBytes())));\n+\n+        return OBJECT_MAPPER.readTree((InputStream) webClient.get().getEntity());\n+    }\n+\n+    public Pair<String, String> gitAndBuildInfo() {\n+        try {\n+            return Pair.of(\n+                    info().get(\"git\").get(\"commit\").get(\"id\").asText(),\n+                    info().get(\"build\").get(\"version\").asText());\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"While getting build and git Info\", e);\n+        }\n+    }\n+\n+    public PlatformInfo platform() {\n+        try {\n+            return OBJECT_MAPPER.treeToValue(info().get(\"platform\"), PlatformInfo.class);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"While getting Platform Info\", e);\n+        }\n+    }\n+\n+    public SystemInfo system() {\n+        try {\n+            return OBJECT_MAPPER.treeToValue(info().get(\"system\"), SystemInfo.class);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"While getting System Info\", e);\n+        }\n+    }\n+\n+    public NumbersInfo numbers() {\n+        try {\n+            return OBJECT_MAPPER.treeToValue(info().get(\"numbers\"), NumbersInfo.class);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"While getting Numbers Info\", e);\n+        }\n+    }\n+\n     /**\n      * Gives the base address for REST calls.\n      *\n@@ -373,7 +429,7 @@ public static <T> T nullPriorityAsync(final T service, final boolean nullPriorit\n      * @param ifNot if true then {@code If-None-Match} is set, {@code If-Match} otherwise\n      * @return given service instance, with {@code If-Match} or {@code If-None-Match} set\n      */\n-    private static <T> T match(final T service, final EntityTag etag, final boolean ifNot) {\n+    protected static <T> T match(final T service, final EntityTag etag, final boolean ifNot) {\n         WebClient.client(service).match(etag, ifNot);\n         return service;\n     }"},{"sha":"a58ee1d070319bb9d43f7988233985f64fb9895c","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/info/PlatformInfo.java","status":"modified","additions":0,"deletions":20,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -227,10 +227,6 @@ public void setAnyObjectDAO(final String anyObjectDAO) {\n         }\n     }\n \n-    private String version;\n-\n-    private String buildNumber;\n-\n     private String keymasterConfParamOps;\n \n     private String keymasterServiceOps;\n@@ -265,14 +261,6 @@ public void setAnyObjectDAO(final String anyObjectDAO) {\n \n     private final Set<JavaImplInfo> javaImplInfos = new HashSet<>();\n \n-    public String getVersion() {\n-        return version;\n-    }\n-\n-    public String getBuildNumber() {\n-        return buildNumber;\n-    }\n-\n     public String getKeymasterConfParamOps() {\n         return keymasterConfParamOps;\n     }\n@@ -366,14 +354,6 @@ public Set<JavaImplInfo> getJavaImplInfos() {\n         return javaImplInfos;\n     }\n \n-    public void setVersion(final String version) {\n-        this.version = version;\n-    }\n-\n-    public void setBuildNumber(final String buildNumber) {\n-        this.buildNumber = buildNumber;\n-    }\n-\n     public void setKeymasterConfParamOps(final String keymasterConfParamOps) {\n         this.keymasterConfParamOps = keymasterConfParamOps;\n     }"},{"sha":"83fac13dc7efea04ffcfdc0768d51d5c11834905","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SyncopeService.java","status":"modified","additions":0,"deletions":35,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSyncopeService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSyncopeService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSyncopeService.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -41,9 +41,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.info.NumbersInfo;\n-import org.apache.syncope.common.lib.info.SystemInfo;\n-import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n@@ -59,38 +56,6 @@\n @Path(\"\")\n public interface SyncopeService extends JAXRSService {\n \n-    /**\n-     * Provides information summary about platform configuration (workflow adapters, provisioning managers, validators,\n-     * actions, correlation rules, reportlets, ...).\n-     *\n-     * @return information summary about platform configuration (workflow adapters, provisioning managers, validators,\n-     * actions, correlation rules, reportlets, ...)\n-     */\n-    @GET\n-    @Path(\"/platform\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    PlatformInfo platform();\n-\n-    /**\n-     * Provides information about the underlying system (Operating System, CPU / memory usage, ...).\n-     *\n-     * @return information about the underlying system (Operating System, CPU / memory usage, ...)\n-     */\n-    @GET\n-    @Path(\"/system\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    SystemInfo system();\n-\n-    /**\n-     * Provides some numbers about the managed entities (users, groups, any objects...).\n-     *\n-     * @return some numbers about the managed entities (users, groups, any objects...)\n-     */\n-    @GET\n-    @Path(\"/numbers\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    NumbersInfo numbers();\n-\n     /**\n      * Requests for batch execution.\n      *"},{"sha":"76d00776a83db0a2d59015cd9025205c41cf330c","filename":"core/am/logic/pom.xml","status":"modified","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fam%2Flogic%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fam%2Flogic%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fpom.xml?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -60,24 +60,6 @@ under the License.\n     </resources>\n         \n     <plugins>\n-      <plugin>\n-        <groupId>org.codehaus.mojo</groupId>\n-        <artifactId>buildnumber-maven-plugin</artifactId>\n-        <inherited>true</inherited>\n-        <configuration>\n-          <doCheck>false</doCheck>\n-          <doUpdate>false</doUpdate>\n-        </configuration>\n-        <executions>\n-          <execution>\n-            <phase>validate</phase>\n-            <goals>\n-              <goal>create</goal>\n-            </goals>\n-          </execution>\n-        </executions>\n-      </plugin>\n-\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-checkstyle-plugin</artifactId>"},{"sha":"9ea2854f260a5feb85c662e5e5f816ff9da880f8","filename":"core/idm/logic/pom.xml","status":"modified","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fidm%2Flogic%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fidm%2Flogic%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fpom.xml?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -118,24 +118,6 @@ under the License.\n     </testResources>\n         \n     <plugins>\n-      <plugin>\n-        <groupId>org.codehaus.mojo</groupId>\n-        <artifactId>buildnumber-maven-plugin</artifactId>\n-        <inherited>true</inherited>\n-        <configuration>\n-          <doCheck>false</doCheck>\n-          <doUpdate>false</doUpdate>\n-        </configuration>\n-        <executions>\n-          <execution>\n-            <phase>validate</phase>\n-            <goals>\n-              <goal>create</goal>\n-            </goals>\n-          </execution>\n-        </executions>\n-      </plugin>\n-\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-checkstyle-plugin</artifactId>"},{"sha":"6e4388835ae2f6e288648d01628820e9cedee03f","filename":"core/idrepo/logic/pom.xml","status":"modified","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fidrepo%2Flogic%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fidrepo%2Flogic%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fpom.xml?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -87,24 +87,6 @@ under the License.\n     </resources>\n         \n     <plugins>\n-      <plugin>\n-        <groupId>org.codehaus.mojo</groupId>\n-        <artifactId>buildnumber-maven-plugin</artifactId>\n-        <inherited>true</inherited>\n-        <configuration>\n-          <doCheck>false</doCheck>\n-          <doUpdate>false</doUpdate>\n-        </configuration>\n-        <executions>\n-          <execution>\n-            <phase>validate</phase>\n-            <goals>\n-              <goal>create</goal>\n-            </goals>\n-          </execution>\n-        </executions>\n-      </plugin>\n-\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-checkstyle-plugin</artifactId>"},{"sha":"8a9b8bcde9383d03e82a0d66f717347efcbf3e83","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":0,"deletions":383,"changes":383,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -19,89 +19,37 @@\n package org.apache.syncope.core.logic;\n \n import java.io.OutputStream;\n-import java.lang.management.ManagementFactory;\n-import java.lang.management.OperatingSystemMXBean;\n-import java.lang.management.RuntimeMXBean;\n import java.lang.reflect.Method;\n-import java.net.InetAddress;\n-import java.net.URI;\n-import java.net.UnknownHostException;\n-import java.util.Iterator;\n import java.util.List;\n-import java.util.Map;\n import java.util.Optional;\n-import java.util.Set;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n-import javax.annotation.Resource;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n-import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.info.JavaImplInfo;\n-import org.apache.syncope.common.lib.info.NumbersInfo;\n-import org.apache.syncope.common.lib.info.SystemInfo;\n-import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.EntitlementsHolder;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n-import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n-import org.apache.syncope.common.lib.types.TaskType;\n-import org.apache.syncope.core.spring.security.PasswordGenerator;\n-import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.content.ContentExporter;\n-import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n-import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n-import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n-import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n-import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n-import org.apache.syncope.core.persistence.api.entity.AnyType;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n-import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n-import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.AuditManager;\n-import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n-import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n-import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n-import org.springframework.aop.support.AopUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.PayloadApplicationEvent;\n-import org.springframework.context.event.EventListener;\n-import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n@@ -110,54 +58,12 @@\n @Component\n public class SyncopeLogic extends AbstractLogic<EntityTO> {\n \n-    private static final Pattern THREADPOOLTASKEXECUTOR_PATTERN = Pattern.compile(\n-            \".*, pool size = ([0-9]+), \"\n-            + \"active threads = ([0-9]+), \"\n-            + \"queued tasks = ([0-9]+), \"\n-            + \"completed tasks = ([0-9]+).*\");\n-\n-    private static final Object MONITOR = new Object();\n-\n-    private static PlatformInfo PLATFORM_INFO;\n-\n-    private static SystemInfo SYSTEM_INFO;\n-\n     @Autowired\n     private AnyTypeDAO anyTypeDAO;\n \n-    @Autowired\n-    private AnyTypeClassDAO anyTypeClassDAO;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n     @Autowired\n     private GroupDAO groupDAO;\n \n-    @Autowired\n-    private AnyObjectDAO anyObjectDAO;\n-\n-    @Autowired\n-    private ExternalResourceDAO resourceDAO;\n-\n-    @Autowired\n-    private PolicyDAO policyDAO;\n-\n-    @Autowired\n-    private NotificationDAO notificationDAO;\n-\n-    @Autowired\n-    private TaskDAO taskDAO;\n-\n-    @Autowired\n-    private VirSchemaDAO virSchemaDAO;\n-\n-    @Autowired\n-    private RoleDAO roleDAO;\n-\n-    @Autowired\n-    private SecurityQuestionDAO securityQuestionDAO;\n-\n     @Autowired\n     private AnySearchDAO searchDAO;\n \n@@ -167,21 +73,6 @@ public class SyncopeLogic extends AbstractLogic<EntityTO> {\n     @Autowired\n     private ConfParamOps confParamOps;\n \n-    @Autowired\n-    private ServiceOps serviceOps;\n-\n-    @Resource(name = \"version\")\n-    private String version;\n-\n-    @Resource(name = \"buildNumber\")\n-    private String buildNumber;\n-\n-    @Autowired\n-    private ConnIdBundleManager bundleManager;\n-\n-    @Autowired\n-    private PropagationTaskExecutor propagationTaskExecutor;\n-\n     @Autowired\n     private AnyObjectWorkflowAdapter awfAdapter;\n \n@@ -194,51 +85,6 @@ public class SyncopeLogic extends AbstractLogic<EntityTO> {\n     @Autowired\n     private GroupWorkflowAdapter gwfAdapter;\n \n-    @Autowired\n-    private AnyObjectProvisioningManager aProvisioningManager;\n-\n-    @Autowired\n-    private UserProvisioningManager uProvisioningManager;\n-\n-    @Autowired\n-    private GroupProvisioningManager gProvisioningManager;\n-\n-    @Autowired\n-    private VirAttrCache virAttrCache;\n-\n-    @Autowired\n-    private NotificationManager notificationManager;\n-\n-    @Autowired\n-    private AuditManager auditManager;\n-\n-    @Autowired\n-    private PasswordGenerator passwordGenerator;\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n-\n-    @Autowired\n-    private PlainAttrDAO plainAttrDAO;\n-\n-    @Autowired\n-    private PlainAttrValueDAO plainAttrValueDAO;\n-\n-    @Autowired\n-    private AnySearchDAO anySearchDAO;\n-\n-    @Autowired\n-    private ImplementationLookup implLookup;\n-\n-    @Resource(name = \"asyncConnectorFacadeExecutor\")\n-    private ThreadPoolTaskExecutor asyncConnectorFacadeExecutor;\n-\n-    @Resource(name = \"propagationTaskExecutorAsyncExecutor\")\n-    private ThreadPoolTaskExecutor propagationTaskExecutorAsyncExecutor;\n-\n     public boolean isSelfRegAllowed() {\n         return confParamOps.get(AuthContextUtils.getDomain(), \"selfRegistration.allowed\", false, Boolean.class);\n     }\n@@ -251,235 +97,6 @@ public boolean isPwdResetRequiringSecurityQuestions() {\n         return confParamOps.get(AuthContextUtils.getDomain(), \"passwordReset.securityQuestion\", true, Boolean.class);\n     }\n \n-    @PreAuthorize(\"isAuthenticated()\")\n-    public PlatformInfo platform() {\n-        synchronized (MONITOR) {\n-            if (PLATFORM_INFO == null) {\n-                PLATFORM_INFO = new PlatformInfo();\n-                PLATFORM_INFO.setVersion(version);\n-                PLATFORM_INFO.setBuildNumber(buildNumber);\n-                PLATFORM_INFO.setKeymasterConfParamOps(AopUtils.getTargetClass(confParamOps).getName());\n-                PLATFORM_INFO.setKeymasterServiceOps(AopUtils.getTargetClass(serviceOps).getName());\n-\n-                if (bundleManager.getLocations() != null) {\n-                    PLATFORM_INFO.getConnIdLocations().addAll(bundleManager.getLocations().stream().\n-                            map(URI::toASCIIString).collect(Collectors.toList()));\n-                }\n-\n-                PLATFORM_INFO.getWorkflowInfo().\n-                        setAnyObjectWorkflowAdapter(AopUtils.getTargetClass(awfAdapter).getName());\n-                PLATFORM_INFO.getWorkflowInfo().\n-                        setUserWorkflowAdapter(AopUtils.getTargetClass(uwfAdapter).getName());\n-                PLATFORM_INFO.getWorkflowInfo().\n-                        setGroupWorkflowAdapter(AopUtils.getTargetClass(gwfAdapter).getName());\n-\n-                PLATFORM_INFO.getProvisioningInfo().\n-                        setAnyObjectProvisioningManager(AopUtils.getTargetClass(aProvisioningManager).getName());\n-                PLATFORM_INFO.getProvisioningInfo().\n-                        setUserProvisioningManager(AopUtils.getTargetClass(uProvisioningManager).getName());\n-                PLATFORM_INFO.getProvisioningInfo().\n-                        setGroupProvisioningManager(AopUtils.getTargetClass(gProvisioningManager).getName());\n-                PLATFORM_INFO.getProvisioningInfo().\n-                        setPropagationTaskExecutor(AopUtils.getTargetClass(propagationTaskExecutor).getName());\n-                PLATFORM_INFO.getProvisioningInfo().\n-                        setVirAttrCache(AopUtils.getTargetClass(virAttrCache).getName());\n-                PLATFORM_INFO.getProvisioningInfo().\n-                        setNotificationManager(AopUtils.getTargetClass(notificationManager).getName());\n-                PLATFORM_INFO.getProvisioningInfo().\n-                        setAuditManager(AopUtils.getTargetClass(auditManager).getName());\n-\n-                PLATFORM_INFO.setPasswordGenerator(AopUtils.getTargetClass(passwordGenerator).getName());\n-\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setEntityFactory(AopUtils.getTargetClass(entityFactory).getName());\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setPlainSchemaDAO(AopUtils.getTargetClass(plainSchemaDAO).getName());\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setPlainAttrDAO(AopUtils.getTargetClass(plainAttrDAO).getName());\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setPlainAttrValueDAO(AopUtils.getTargetClass(plainAttrValueDAO).getName());\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setAnySearchDAO(AopUtils.getTargetClass(anySearchDAO).getName());\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setUserDAO(AopUtils.getTargetClass(userDAO).getName());\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setGroupDAO(AopUtils.getTargetClass(groupDAO).getName());\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setAnyObjectDAO(AopUtils.getTargetClass(anyObjectDAO).getName());\n-\n-                ImplementationTypesHolder.getInstance().getValues().forEach((typeName, typeInterface) -> {\n-                    Set<String> classNames = implLookup.getClassNames(typeName);\n-                    if (classNames != null) {\n-                        JavaImplInfo javaImplInfo = new JavaImplInfo();\n-                        javaImplInfo.setType(typeName);\n-                        javaImplInfo.getClasses().addAll(classNames);\n-\n-                        PLATFORM_INFO.getJavaImplInfos().add(javaImplInfo);\n-                    }\n-                });\n-            }\n-\n-            PLATFORM_INFO.setSelfRegAllowed(isSelfRegAllowed());\n-            PLATFORM_INFO.setPwdResetAllowed(isPwdResetAllowed());\n-            PLATFORM_INFO.setPwdResetRequiringSecurityQuestions(isPwdResetRequiringSecurityQuestions());\n-\n-            PLATFORM_INFO.getEntitlements().clear();\n-            PLATFORM_INFO.getEntitlements().addAll(EntitlementsHolder.getInstance().getValues());\n-\n-            PLATFORM_INFO.getImplementationTypes().clear();\n-            PLATFORM_INFO.getImplementationTypes().addAll(ImplementationTypesHolder.getInstance().getValues().keySet());\n-\n-            AuthContextUtils.callAsAdmin(AuthContextUtils.getDomain(), () -> {\n-                PLATFORM_INFO.getAnyTypes().clear();\n-                PLATFORM_INFO.getAnyTypes().addAll(anyTypeDAO.findAll().stream().\n-                        map(Entity::getKey).collect(Collectors.toList()));\n-\n-                PLATFORM_INFO.getUserClasses().clear();\n-                PLATFORM_INFO.getUserClasses().addAll(anyTypeDAO.findUser().getClasses().stream().\n-                        map(Entity::getKey).collect(Collectors.toList()));\n-\n-                PLATFORM_INFO.getAnyTypeClasses().clear();\n-                PLATFORM_INFO.getAnyTypeClasses().addAll(anyTypeClassDAO.findAll().stream().\n-                        map(Entity::getKey).collect(Collectors.toList()));\n-\n-                PLATFORM_INFO.getResources().clear();\n-                PLATFORM_INFO.getResources().addAll(resourceDAO.findAll().stream().\n-                        map(Entity::getKey).collect(Collectors.toList()));\n-                return null;\n-            });\n-        }\n-\n-        return PLATFORM_INFO;\n-    }\n-\n-    private static void initSystemInfo() {\n-        if (SYSTEM_INFO == null) {\n-            OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean();\n-            RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();\n-\n-            SYSTEM_INFO = new SystemInfo();\n-            try {\n-                SYSTEM_INFO.setHostname(InetAddress.getLocalHost().getHostName());\n-            } catch (UnknownHostException e) {\n-                LOG.error(\"Could not get host name\", e);\n-            }\n-\n-            SYSTEM_INFO.setOs(operatingSystemMXBean.getName()\n-                    + ' ' + operatingSystemMXBean.getVersion()\n-                    + ' ' + operatingSystemMXBean.getArch());\n-            SYSTEM_INFO.setAvailableProcessors(operatingSystemMXBean.getAvailableProcessors());\n-            SYSTEM_INFO.setJvm(\n-                    runtimeMXBean.getVmName()\n-                    + ' ' + System.getProperty(\"java.version\")\n-                    + ' ' + runtimeMXBean.getVmVendor());\n-            SYSTEM_INFO.setStartTime(runtimeMXBean.getStartTime());\n-        }\n-    }\n-\n-    @EventListener\n-    public static void addLoadInstant(final PayloadApplicationEvent<SystemInfo.LoadInstant> event) {\n-        synchronized (MONITOR) {\n-            initSystemInfo();\n-            SYSTEM_INFO.getLoad().add(event.getPayload());\n-        }\n-    }\n-\n-    @PreAuthorize(\"isAuthenticated()\")\n-    public static SystemInfo system() {\n-        synchronized (MONITOR) {\n-            initSystemInfo();\n-        }\n-\n-        return SYSTEM_INFO;\n-    }\n-\n-    private void setTaskExecutorInfo(final String toString, final NumbersInfo.TaskExecutorInfo info) {\n-        Matcher matcher = THREADPOOLTASKEXECUTOR_PATTERN.matcher(toString);\n-        if (matcher.matches() && matcher.groupCount() == 4) {\n-            try {\n-                info.setSize(Integer.valueOf(matcher.group(1)));\n-            } catch (NumberFormatException e) {\n-                LOG.error(\"While parsing thread pool size\", e);\n-            }\n-            try {\n-                info.setActive(Integer.valueOf(matcher.group(2)));\n-            } catch (NumberFormatException e) {\n-                LOG.error(\"While parsing active threads #\", e);\n-            }\n-            try {\n-                info.setQueued(Integer.valueOf(matcher.group(3)));\n-            } catch (NumberFormatException e) {\n-                LOG.error(\"While parsing queued threads #\", e);\n-            }\n-            try {\n-                info.setCompleted(Integer.valueOf(matcher.group(4)));\n-            } catch (NumberFormatException e) {\n-                LOG.error(\"While parsing completed threads #\", e);\n-            }\n-        }\n-    }\n-\n-    @PreAuthorize(\"isAuthenticated()\")\n-    public NumbersInfo numbers() {\n-        NumbersInfo numbersInfo = new NumbersInfo();\n-\n-        numbersInfo.setTotalUsers(userDAO.count());\n-        numbersInfo.getUsersByRealm().putAll(userDAO.countByRealm());\n-        numbersInfo.getUsersByStatus().putAll(userDAO.countByStatus());\n-\n-        numbersInfo.setTotalGroups(groupDAO.count());\n-        numbersInfo.getGroupsByRealm().putAll(groupDAO.countByRealm());\n-\n-        Map<AnyType, Integer> anyObjectNumbers = anyObjectDAO.countByType();\n-        int i = 0;\n-        for (Iterator<Map.Entry<AnyType, Integer>> itor = anyObjectNumbers.entrySet().iterator();\n-                i < 2 && itor.hasNext(); i++) {\n-\n-            Map.Entry<AnyType, Integer> entry = itor.next();\n-            if (i == 0) {\n-                numbersInfo.setAnyType1(entry.getKey().getKey());\n-                numbersInfo.setTotalAny1(entry.getValue());\n-                numbersInfo.getAny1ByRealm().putAll(anyObjectDAO.countByRealm(entry.getKey()));\n-            } else {\n-                numbersInfo.setAnyType2(entry.getKey().getKey());\n-                numbersInfo.setTotalAny2(entry.getValue());\n-                numbersInfo.getAny2ByRealm().putAll(anyObjectDAO.countByRealm(entry.getKey()));\n-            }\n-        }\n-\n-        numbersInfo.setTotalResources(resourceDAO.count());\n-\n-        numbersInfo.setTotalRoles(roleDAO.count());\n-\n-        numbersInfo.getConfCompleteness().put(\n-                NumbersInfo.ConfItem.RESOURCE.name(), numbersInfo.getTotalResources() > 0);\n-        numbersInfo.getConfCompleteness().put(\n-                NumbersInfo.ConfItem.ACCOUNT_POLICY.name(), !policyDAO.find(AccountPolicy.class).isEmpty());\n-        numbersInfo.getConfCompleteness().put(\n-                NumbersInfo.ConfItem.PASSWORD_POLICY.name(), !policyDAO.find(PasswordPolicy.class).isEmpty());\n-        numbersInfo.getConfCompleteness().put(\n-                NumbersInfo.ConfItem.NOTIFICATION.name(), !notificationDAO.findAll().isEmpty());\n-        numbersInfo.getConfCompleteness().put(\n-                NumbersInfo.ConfItem.PULL_TASK.name(), !taskDAO.findAll(TaskType.PULL).isEmpty());\n-        numbersInfo.getConfCompleteness().put(\n-                NumbersInfo.ConfItem.VIR_SCHEMA.name(), !virSchemaDAO.findAll().isEmpty());\n-        numbersInfo.getConfCompleteness().put(\n-                NumbersInfo.ConfItem.ANY_TYPE.name(), !anyObjectNumbers.isEmpty());\n-        numbersInfo.getConfCompleteness().put(\n-                NumbersInfo.ConfItem.SECURITY_QUESTION.name(), !securityQuestionDAO.findAll().isEmpty());\n-        numbersInfo.getConfCompleteness().put(\n-                NumbersInfo.ConfItem.ROLE.name(), numbersInfo.getTotalRoles() > 0);\n-\n-        setTaskExecutorInfo(\n-                asyncConnectorFacadeExecutor.getThreadPoolExecutor().toString(),\n-                numbersInfo.getAsyncConnectorExecutor());\n-        setTaskExecutorInfo(\n-                propagationTaskExecutorAsyncExecutor.getThreadPoolExecutor().toString(),\n-                numbersInfo.getPropagationTaskExecutor());\n-\n-        return numbersInfo;\n-    }\n-\n     @PreAuthorize(\"isAuthenticated()\")\n     public Pair<Integer, List<GroupTO>> searchAssignableGroups(\n             final String realm,"},{"sha":"635c0c74352be15a04e2e83fa5210bc04d2a5f0d","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SyncopeServiceImpl.java","status":"modified","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSyncopeServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSyncopeServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSyncopeServiceImpl.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -37,9 +37,6 @@\n import org.apache.cxf.transport.http.HTTPTransportFactory;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.info.NumbersInfo;\n-import org.apache.syncope.common.lib.info.SystemInfo;\n-import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n@@ -81,21 +78,6 @@ public class SyncopeServiceImpl extends AbstractServiceImpl implements SyncopeSe\n     @Autowired\n     private EntityFactory entityFactory;\n \n-    @Override\n-    public PlatformInfo platform() {\n-        return logic.platform();\n-    }\n-\n-    @Override\n-    public SystemInfo system() {\n-        return SyncopeLogic.system();\n-    }\n-\n-    @Override\n-    public NumbersInfo numbers() {\n-        return logic.numbers();\n-    }\n-\n     @Override\n     public PagedResult<GroupTO> searchAssignableGroups(\n             final String realm, final String term, final int page, final int size) {"},{"sha":"ca87a9d5fd9497dc17ecb7da773a10b86f6ed566","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -84,6 +84,7 @@ public class JPAExternalResourceDAO extends AbstractDAO<ExternalResource> implem\n     @Autowired\n     private RealmDAO realmDAO;\n \n+    @Transactional(readOnly = true)\n     @Override\n     public int count() {\n         Query query = entityManager().createQuery(\n@@ -173,9 +174,10 @@ public List<ExternalResource> findByPolicy(final Policy policy) {\n         return query.getResultList();\n     }\n \n+    @Transactional(readOnly = true)\n     @Override\n     public List<ExternalResource> findAll() {\n-        final Set<String> authRealms = AuthContextUtils.getAuthorizations().get(IdMEntitlement.RESOURCE_LIST);\n+        Set<String> authRealms = AuthContextUtils.getAuthorizations().get(IdMEntitlement.RESOURCE_LIST);\n         if (authRealms == null || authRealms.isEmpty()) {\n             return List.of();\n         }\n@@ -189,8 +191,8 @@ public List<ExternalResource> findAll() {\n                 collect(Collectors.toList());\n     }\n \n-    @Override\n     @Transactional(rollbackFor = { Throwable.class })\n+    @Override\n     public ExternalResource save(final ExternalResource resource) {\n         ExternalResource merged = entityManager().merge(resource);\n         try {"},{"sha":"0cee5ae656aaa30474b1664781295fd55e60efe8","filename":"core/starter/pom.xml","status":"modified","additions":24,"deletions":1,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fstarter%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fstarter%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fpom.xml?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -52,7 +52,11 @@ under the License.\n       <groupId>org.springframework.boot</groupId>\n       <artifactId>spring-boot-starter-log4j2</artifactId>\n     </dependency>\n-    \n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-actuator</artifactId>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.apache.syncope.core.idrepo</groupId>\n       <artifactId>syncope-core-idrepo-rest-cxf</artifactId>\n@@ -150,6 +154,25 @@ under the License.\n         </executions>\n       </plugin>\n \n+      <plugin>\n+        <groupId>io.github.git-commit-id</groupId>\n+        <artifactId>git-commit-id-maven-plugin</artifactId>\n+        <configuration>\n+          <failOnNoGitDirectory>false</failOnNoGitDirectory>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-maven-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>build-info</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-checkstyle-plugin</artifactId>"},{"sha":"83dcb4b009388e780b64eb21dcd7f2dc846bb361","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/SyncopeCoreApplication.java","status":"modified","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreApplication.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -22,8 +22,14 @@\n import org.apache.cxf.spring.boot.autoconfigure.openapi.OpenApiAutoConfiguration;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n+import org.apache.syncope.core.starter.actuate.DomainsHealthIndicator;\n+import org.apache.syncope.core.starter.actuate.ExternalResourcesHealthIndicator;\n+import org.apache.syncope.core.starter.actuate.SyncopeCoreInfoContributor;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.actuate.mail.MailHealthIndicator;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration;\n import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n@@ -34,6 +40,8 @@\n import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;\n+import org.springframework.mail.javamail.JavaMailSender;\n+import org.springframework.mail.javamail.JavaMailSenderImpl;\n import org.springframework.transaction.annotation.EnableTransactionManagement;\n \n @SpringBootApplication(exclude = {\n@@ -60,6 +68,34 @@ public static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderCon\n         return pspc;\n     }\n \n+    @Autowired\n+    protected JavaMailSender mailSender;\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public SyncopeCoreInfoContributor syncopeCoreInfoContributor() {\n+        return new SyncopeCoreInfoContributor();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public DomainsHealthIndicator domainsHealthIndicator() {\n+        return new DomainsHealthIndicator();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public MailHealthIndicator mailHealthIndicator() {\n+        return new MailHealthIndicator((JavaMailSenderImpl) mailSender);\n+    }\n+\n+    @ConditionalOnClass(name = { \"org.apache.syncope.core.logic.ResourceLogic\" })\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public ExternalResourcesHealthIndicator externalResourcesHealthIndicator() {\n+        return new ExternalResourcesHealthIndicator();\n+    }\n+\n     @Bean\n     public SyncopeCoreStart keymasterStart() {\n         return new SyncopeCoreStart();"},{"sha":"72c136c288f3b050a9959b89014b72fb9f83f543","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/actuate/DomainsHealthIndicator.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FDomainsHealthIndicator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FDomainsHealthIndicator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FDomainsHealthIndicator.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.starter.actuate;\n+\n+import java.sql.Connection;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.actuate.health.Health;\n+import org.springframework.boot.actuate.health.HealthIndicator;\n+import org.springframework.boot.actuate.health.Status;\n+import org.springframework.jdbc.datasource.DataSourceUtils;\n+\n+public class DomainsHealthIndicator implements HealthIndicator {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(DomainsHealthIndicator.class);\n+\n+    @Autowired\n+    protected DomainHolder domainHolder;\n+\n+    @Override\n+    public Health health() {\n+        Health.Builder builder = new Health.Builder();\n+\n+        AtomicReference<Boolean> anyDown = new AtomicReference<>(Boolean.FALSE);\n+\n+        domainHolder.getDomains().forEach((key, ds) -> {\n+            Status status;\n+\n+            Connection conn = null;\n+            try {\n+                conn = DataSourceUtils.getConnection(ds);\n+                status = conn.isValid(0) ? Status.UP : Status.OUT_OF_SERVICE;\n+            } catch (Exception e) {\n+                status = Status.DOWN;\n+                LOG.debug(\"When attempting to connect to Domain {}\", key, e);\n+            } finally {\n+                if (conn != null) {\n+                    DataSourceUtils.releaseConnection(conn, ds);\n+                }\n+            }\n+\n+            builder.withDetail(key, status);\n+            if (status != Status.UP) {\n+                anyDown.set(true);\n+            }\n+        });\n+\n+        builder.status(anyDown.get() ? Status.DOWN : Status.UP);\n+\n+        return builder.build();\n+    }\n+}"},{"sha":"b75da3197d60ad1398d4ac0c78943aab5521a372","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/actuate/ExternalResourcesHealthIndicator.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FExternalResourcesHealthIndicator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FExternalResourcesHealthIndicator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FExternalResourcesHealthIndicator.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.starter.actuate;\n+\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Stream;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n+import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.actuate.health.Health;\n+import org.springframework.boot.actuate.health.HealthIndicator;\n+import org.springframework.boot.actuate.health.Status;\n+\n+public class ExternalResourcesHealthIndicator implements HealthIndicator {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(ExternalResourcesHealthIndicator.class);\n+\n+    @Autowired\n+    protected DomainOps domainOps;\n+\n+    @Autowired\n+    protected ExternalResourceDAO resourceDAO;\n+\n+    @Autowired\n+    protected ConnInstanceDataBinder connInstanceDataBinder;\n+\n+    @Autowired\n+    protected ConnectorFactory connFactory;\n+\n+    @Override\n+    public Health health() {\n+        Health.Builder builder = new Health.Builder();\n+\n+        AtomicReference<Boolean> anyDown = new AtomicReference<>(Boolean.FALSE);\n+\n+        Stream.concat(Stream.of(SyncopeConstants.MASTER_DOMAIN), domainOps.list().stream().map(Domain::getKey)).\n+                forEach(domain -> AuthContextUtils.callAsAdmin(domain, () -> {\n+\n+            resourceDAO.findAll().forEach(resource -> {\n+                Status status;\n+                try {\n+                    connFactory.createConnector(\n+                            connFactory.buildConnInstanceOverride(\n+                                    connInstanceDataBinder.getConnInstanceTO(resource.getConnector()),\n+                                    resource.getConfOverride(),\n+                                    resource.isOverrideCapabilities()\n+                                    ? Optional.of(resource.getCapabilitiesOverride()) : Optional.empty())).\n+                            test();\n+                    status = Status.UP;\n+                } catch (Exception e) {\n+                    status = Status.DOWN;\n+                    LOG.debug(\"When checking {} in Domain {}\", resource.getKey(), domain, e);\n+                }\n+\n+                builder.withDetail(domain + \"#\" + resource.getKey(), status);\n+                if (status != Status.UP) {\n+                    anyDown.set(true);\n+                }\n+            });\n+            return null;\n+        }));\n+\n+        builder.status(anyDown.get() ? Status.DOWN : Status.UP);\n+\n+        return builder.build();\n+    }\n+}"},{"sha":"467c302a2bde26156989b17738853d765edf5b57","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/actuate/SyncopeCoreInfoContributor.java","status":"added","additions":465,"deletions":0,"changes":465,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FSyncopeCoreInfoContributor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FSyncopeCoreInfoContributor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FSyncopeCoreInfoContributor.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -0,0 +1,465 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.starter.actuate;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.OperatingSystemMXBean;\n+import java.lang.management.RuntimeMXBean;\n+import java.net.InetAddress;\n+import java.net.URI;\n+import java.net.UnknownHostException;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import javax.annotation.Resource;\n+import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.syncope.common.lib.info.JavaImplInfo;\n+import org.apache.syncope.common.lib.info.NumbersInfo;\n+import org.apache.syncope.common.lib.info.PlatformInfo;\n+import org.apache.syncope.common.lib.info.SystemInfo;\n+import org.apache.syncope.common.lib.types.EntitlementsHolder;\n+import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n+import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n+import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.AuditManager;\n+import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n+import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n+import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.PasswordGenerator;\n+import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n+import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n+import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.aop.support.AopUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.actuate.info.Info;\n+import org.springframework.boot.actuate.info.InfoContributor;\n+import org.springframework.context.PayloadApplicationEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class SyncopeCoreInfoContributor implements InfoContributor {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(SyncopeCoreInfoContributor.class);\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper().findAndRegisterModules();\n+\n+    protected static final Object MONITOR = new Object();\n+\n+    protected static PlatformInfo PLATFORM_INFO;\n+\n+    protected static SystemInfo SYSTEM_INFO;\n+\n+    protected static final Pattern THREADPOOLTASKEXECUTOR_PATTERN = Pattern.compile(\n+            \".*, pool size = ([0-9]+), \"\n+            + \"active threads = ([0-9]+), \"\n+            + \"queued tasks = ([0-9]+), \"\n+            + \"completed tasks = ([0-9]+).*\");\n+\n+    protected static void setTaskExecutorInfo(final String toString, final NumbersInfo.TaskExecutorInfo info) {\n+        Matcher matcher = THREADPOOLTASKEXECUTOR_PATTERN.matcher(toString);\n+        if (matcher.matches() && matcher.groupCount() == 4) {\n+            try {\n+                info.setSize(Integer.valueOf(matcher.group(1)));\n+            } catch (NumberFormatException e) {\n+                LOG.error(\"While parsing thread pool size\", e);\n+            }\n+            try {\n+                info.setActive(Integer.valueOf(matcher.group(2)));\n+            } catch (NumberFormatException e) {\n+                LOG.error(\"While parsing active threads #\", e);\n+            }\n+            try {\n+                info.setQueued(Integer.valueOf(matcher.group(3)));\n+            } catch (NumberFormatException e) {\n+                LOG.error(\"While parsing queued threads #\", e);\n+            }\n+            try {\n+                info.setCompleted(Integer.valueOf(matcher.group(4)));\n+            } catch (NumberFormatException e) {\n+                LOG.error(\"While parsing completed threads #\", e);\n+            }\n+        }\n+    }\n+\n+    protected static void initSystemInfo() {\n+        if (SYSTEM_INFO == null) {\n+            OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean();\n+            RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();\n+\n+            SYSTEM_INFO = new SystemInfo();\n+            try {\n+                SYSTEM_INFO.setHostname(InetAddress.getLocalHost().getHostName());\n+            } catch (UnknownHostException e) {\n+                LOG.error(\"Could not get host name\", e);\n+            }\n+\n+            SYSTEM_INFO.setOs(operatingSystemMXBean.getName()\n+                    + ' ' + operatingSystemMXBean.getVersion()\n+                    + ' ' + operatingSystemMXBean.getArch());\n+            SYSTEM_INFO.setAvailableProcessors(operatingSystemMXBean.getAvailableProcessors());\n+            SYSTEM_INFO.setJvm(\n+                    runtimeMXBean.getVmName()\n+                    + ' ' + System.getProperty(\"java.version\")\n+                    + ' ' + runtimeMXBean.getVmVendor());\n+            SYSTEM_INFO.setStartTime(runtimeMXBean.getStartTime());\n+        }\n+    }\n+\n+    @EventListener\n+    public void addLoadInstant(final PayloadApplicationEvent<SystemInfo.LoadInstant> event) {\n+        synchronized (MONITOR) {\n+            initSystemInfo();\n+            SYSTEM_INFO.getLoad().add(event.getPayload());\n+        }\n+    }\n+\n+    @Autowired\n+    protected AnyTypeDAO anyTypeDAO;\n+\n+    @Autowired\n+    protected AnyTypeClassDAO anyTypeClassDAO;\n+\n+    @Autowired\n+    protected UserDAO userDAO;\n+\n+    @Autowired\n+    protected GroupDAO groupDAO;\n+\n+    @Autowired\n+    protected AnyObjectDAO anyObjectDAO;\n+\n+    @Autowired\n+    protected ExternalResourceDAO resourceDAO;\n+\n+    @Autowired\n+    protected ConfParamOps confParamOps;\n+\n+    @Autowired\n+    protected ServiceOps serviceOps;\n+\n+    @Autowired\n+    protected ConnIdBundleManager bundleManager;\n+\n+    @Autowired\n+    protected PropagationTaskExecutor propagationTaskExecutor;\n+\n+    @Autowired\n+    protected AnyObjectWorkflowAdapter awfAdapter;\n+\n+    @Autowired\n+    protected UserWorkflowAdapter uwfAdapter;\n+\n+    @Autowired\n+    protected GroupWorkflowAdapter gwfAdapter;\n+\n+    @Autowired\n+    protected AnyObjectProvisioningManager aProvisioningManager;\n+\n+    @Autowired\n+    protected UserProvisioningManager uProvisioningManager;\n+\n+    @Autowired\n+    protected GroupProvisioningManager gProvisioningManager;\n+\n+    @Autowired\n+    protected VirAttrCache virAttrCache;\n+\n+    @Autowired\n+    protected NotificationManager notificationManager;\n+\n+    @Autowired\n+    protected AuditManager auditManager;\n+\n+    @Autowired\n+    protected PasswordGenerator passwordGenerator;\n+\n+    @Autowired\n+    protected EntityFactory entityFactory;\n+\n+    @Autowired\n+    protected PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    protected PlainAttrDAO plainAttrDAO;\n+\n+    @Autowired\n+    protected PlainAttrValueDAO plainAttrValueDAO;\n+\n+    @Autowired\n+    protected AnySearchDAO anySearchDAO;\n+\n+    @Autowired\n+    protected ImplementationLookup implLookup;\n+\n+    @Autowired\n+    protected PolicyDAO policyDAO;\n+\n+    @Autowired\n+    protected NotificationDAO notificationDAO;\n+\n+    @Autowired\n+    protected TaskDAO taskDAO;\n+\n+    @Autowired\n+    protected VirSchemaDAO virSchemaDAO;\n+\n+    @Autowired\n+    protected RoleDAO roleDAO;\n+\n+    @Autowired\n+    protected SecurityQuestionDAO securityQuestionDAO;\n+\n+    @Resource(name = \"asyncConnectorFacadeExecutor\")\n+    protected ThreadPoolTaskExecutor asyncConnectorFacadeExecutor;\n+\n+    @Resource(name = \"propagationTaskExecutorAsyncExecutor\")\n+    protected ThreadPoolTaskExecutor propagationTaskExecutorAsyncExecutor;\n+\n+    protected boolean isSelfRegAllowed() {\n+        return confParamOps.get(AuthContextUtils.getDomain(), \"selfRegistration.allowed\", false, Boolean.class);\n+    }\n+\n+    protected boolean isPwdResetAllowed() {\n+        return confParamOps.get(AuthContextUtils.getDomain(), \"passwordReset.allowed\", false, Boolean.class);\n+    }\n+\n+    protected boolean isPwdResetRequiringSecurityQuestions() {\n+        return confParamOps.get(AuthContextUtils.getDomain(), \"passwordReset.securityQuestion\", true, Boolean.class);\n+    }\n+\n+    protected void buildPlatform() {\n+        synchronized (this) {\n+            if (PLATFORM_INFO == null) {\n+                PLATFORM_INFO = new PlatformInfo();\n+                PLATFORM_INFO.setKeymasterConfParamOps(AopUtils.getTargetClass(confParamOps).getName());\n+                PLATFORM_INFO.setKeymasterServiceOps(AopUtils.getTargetClass(serviceOps).getName());\n+\n+                if (bundleManager.getLocations() != null) {\n+                    PLATFORM_INFO.getConnIdLocations().addAll(bundleManager.getLocations().stream().\n+                            map(URI::toASCIIString).collect(Collectors.toList()));\n+                }\n+\n+                PLATFORM_INFO.getWorkflowInfo().\n+                        setAnyObjectWorkflowAdapter(AopUtils.getTargetClass(awfAdapter).getName());\n+                PLATFORM_INFO.getWorkflowInfo().\n+                        setUserWorkflowAdapter(AopUtils.getTargetClass(uwfAdapter).getName());\n+                PLATFORM_INFO.getWorkflowInfo().\n+                        setGroupWorkflowAdapter(AopUtils.getTargetClass(gwfAdapter).getName());\n+\n+                PLATFORM_INFO.getProvisioningInfo().\n+                        setAnyObjectProvisioningManager(AopUtils.getTargetClass(aProvisioningManager).getName());\n+                PLATFORM_INFO.getProvisioningInfo().\n+                        setUserProvisioningManager(AopUtils.getTargetClass(uProvisioningManager).getName());\n+                PLATFORM_INFO.getProvisioningInfo().\n+                        setGroupProvisioningManager(AopUtils.getTargetClass(gProvisioningManager).getName());\n+                PLATFORM_INFO.getProvisioningInfo().\n+                        setPropagationTaskExecutor(AopUtils.getTargetClass(propagationTaskExecutor).getName());\n+                PLATFORM_INFO.getProvisioningInfo().\n+                        setVirAttrCache(AopUtils.getTargetClass(virAttrCache).getName());\n+                PLATFORM_INFO.getProvisioningInfo().\n+                        setNotificationManager(AopUtils.getTargetClass(notificationManager).getName());\n+                PLATFORM_INFO.getProvisioningInfo().\n+                        setAuditManager(AopUtils.getTargetClass(auditManager).getName());\n+\n+                PLATFORM_INFO.setPasswordGenerator(AopUtils.getTargetClass(passwordGenerator).getName());\n+\n+                PLATFORM_INFO.getPersistenceInfo().\n+                        setEntityFactory(AopUtils.getTargetClass(entityFactory).getName());\n+                PLATFORM_INFO.getPersistenceInfo().\n+                        setPlainSchemaDAO(AopUtils.getTargetClass(plainSchemaDAO).getName());\n+                PLATFORM_INFO.getPersistenceInfo().\n+                        setPlainAttrDAO(AopUtils.getTargetClass(plainAttrDAO).getName());\n+                PLATFORM_INFO.getPersistenceInfo().\n+                        setPlainAttrValueDAO(AopUtils.getTargetClass(plainAttrValueDAO).getName());\n+                PLATFORM_INFO.getPersistenceInfo().\n+                        setAnySearchDAO(AopUtils.getTargetClass(anySearchDAO).getName());\n+                PLATFORM_INFO.getPersistenceInfo().\n+                        setUserDAO(AopUtils.getTargetClass(userDAO).getName());\n+                PLATFORM_INFO.getPersistenceInfo().\n+                        setGroupDAO(AopUtils.getTargetClass(groupDAO).getName());\n+                PLATFORM_INFO.getPersistenceInfo().\n+                        setAnyObjectDAO(AopUtils.getTargetClass(anyObjectDAO).getName());\n+\n+                ImplementationTypesHolder.getInstance().getValues().forEach((typeName, typeInterface) -> {\n+                    Set<String> classNames = implLookup.getClassNames(typeName);\n+                    if (classNames != null) {\n+                        JavaImplInfo javaImplInfo = new JavaImplInfo();\n+                        javaImplInfo.setType(typeName);\n+                        javaImplInfo.getClasses().addAll(classNames);\n+\n+                        PLATFORM_INFO.getJavaImplInfos().add(javaImplInfo);\n+                    }\n+                });\n+            }\n+\n+            PLATFORM_INFO.setSelfRegAllowed(isSelfRegAllowed());\n+            PLATFORM_INFO.setPwdResetAllowed(isPwdResetAllowed());\n+            PLATFORM_INFO.setPwdResetRequiringSecurityQuestions(isPwdResetRequiringSecurityQuestions());\n+\n+            PLATFORM_INFO.getEntitlements().clear();\n+            PLATFORM_INFO.getEntitlements().addAll(EntitlementsHolder.getInstance().getValues());\n+\n+            PLATFORM_INFO.getImplementationTypes().clear();\n+            PLATFORM_INFO.getImplementationTypes().addAll(ImplementationTypesHolder.getInstance().getValues().keySet());\n+\n+            AuthContextUtils.callAsAdmin(AuthContextUtils.getDomain(), () -> {\n+                PLATFORM_INFO.getAnyTypes().clear();\n+                PLATFORM_INFO.getAnyTypes().addAll(anyTypeDAO.findAll().stream().\n+                        map(Entity::getKey).collect(Collectors.toList()));\n+\n+                PLATFORM_INFO.getUserClasses().clear();\n+                PLATFORM_INFO.getUserClasses().addAll(anyTypeDAO.findUser().getClasses().stream().\n+                        map(Entity::getKey).collect(Collectors.toList()));\n+\n+                PLATFORM_INFO.getAnyTypeClasses().clear();\n+                PLATFORM_INFO.getAnyTypeClasses().addAll(anyTypeClassDAO.findAll().stream().\n+                        map(Entity::getKey).collect(Collectors.toList()));\n+\n+                PLATFORM_INFO.getResources().clear();\n+                PLATFORM_INFO.getResources().addAll(resourceDAO.findAll().stream().\n+                        map(Entity::getKey).collect(Collectors.toList()));\n+                return null;\n+            });\n+        }\n+    }\n+\n+    protected NumbersInfo buildNumbers() {\n+        NumbersInfo numbersInfo = new NumbersInfo();\n+\n+        numbersInfo.setTotalUsers(userDAO.count());\n+        numbersInfo.getUsersByRealm().putAll(userDAO.countByRealm());\n+        numbersInfo.getUsersByStatus().putAll(userDAO.countByStatus());\n+\n+        numbersInfo.setTotalGroups(groupDAO.count());\n+        numbersInfo.getGroupsByRealm().putAll(groupDAO.countByRealm());\n+\n+        Map<AnyType, Integer> anyObjectNumbers = anyObjectDAO.countByType();\n+        int i = 0;\n+        for (Iterator<Map.Entry<AnyType, Integer>> itor = anyObjectNumbers.entrySet().iterator();\n+                i < 2 && itor.hasNext(); i++) {\n+\n+            Map.Entry<AnyType, Integer> entry = itor.next();\n+            if (i == 0) {\n+                numbersInfo.setAnyType1(entry.getKey().getKey());\n+                numbersInfo.setTotalAny1(entry.getValue());\n+                numbersInfo.getAny1ByRealm().putAll(anyObjectDAO.countByRealm(entry.getKey()));\n+            } else {\n+                numbersInfo.setAnyType2(entry.getKey().getKey());\n+                numbersInfo.setTotalAny2(entry.getValue());\n+                numbersInfo.getAny2ByRealm().putAll(anyObjectDAO.countByRealm(entry.getKey()));\n+            }\n+        }\n+\n+        numbersInfo.setTotalResources(resourceDAO.count());\n+\n+        numbersInfo.setTotalRoles(roleDAO.count());\n+\n+        numbersInfo.getConfCompleteness().put(\n+                NumbersInfo.ConfItem.RESOURCE.name(), numbersInfo.getTotalResources() > 0);\n+        numbersInfo.getConfCompleteness().put(\n+                NumbersInfo.ConfItem.ACCOUNT_POLICY.name(), !policyDAO.find(AccountPolicy.class).isEmpty());\n+        numbersInfo.getConfCompleteness().put(\n+                NumbersInfo.ConfItem.PASSWORD_POLICY.name(), !policyDAO.find(PasswordPolicy.class).isEmpty());\n+        numbersInfo.getConfCompleteness().put(\n+                NumbersInfo.ConfItem.NOTIFICATION.name(), !notificationDAO.findAll().isEmpty());\n+        numbersInfo.getConfCompleteness().put(\n+                NumbersInfo.ConfItem.PULL_TASK.name(), !taskDAO.findAll(TaskType.PULL).isEmpty());\n+        numbersInfo.getConfCompleteness().put(\n+                NumbersInfo.ConfItem.VIR_SCHEMA.name(), !virSchemaDAO.findAll().isEmpty());\n+        numbersInfo.getConfCompleteness().put(\n+                NumbersInfo.ConfItem.ANY_TYPE.name(), !anyObjectNumbers.isEmpty());\n+        numbersInfo.getConfCompleteness().put(\n+                NumbersInfo.ConfItem.SECURITY_QUESTION.name(), !securityQuestionDAO.findAll().isEmpty());\n+        numbersInfo.getConfCompleteness().put(\n+                NumbersInfo.ConfItem.ROLE.name(), numbersInfo.getTotalRoles() > 0);\n+\n+        setTaskExecutorInfo(\n+                asyncConnectorFacadeExecutor.getThreadPoolExecutor().toString(),\n+                numbersInfo.getAsyncConnectorExecutor());\n+        setTaskExecutorInfo(\n+                propagationTaskExecutorAsyncExecutor.getThreadPoolExecutor().toString(),\n+                numbersInfo.getPropagationTaskExecutor());\n+\n+        return numbersInfo;\n+    }\n+\n+    protected void buildSystem() {\n+        synchronized (MONITOR) {\n+            initSystemInfo();\n+        }\n+    }\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n+    @Transactional(readOnly = true)\n+    @Override\n+    public void contribute(final Info.Builder builder) {\n+        buildPlatform();\n+        builder.withDetail(\n+                \"platform\",\n+                MAPPER.convertValue(PLATFORM_INFO, new TypeReference<Map<String, Object>>() {\n+                }));\n+\n+        builder.withDetail(\n+                \"numbers\",\n+                MAPPER.convertValue(buildNumbers(), new TypeReference<Map<String, Object>>() {\n+                }));\n+\n+        buildSystem();\n+        builder.withDetail(\n+                \"system\",\n+                MAPPER.convertValue(SYSTEM_INFO, new TypeReference<Map<String, Object>>() {\n+                }));\n+    }\n+}"},{"sha":"0363a8df4822de19af030699016d0f59994b8bbe","filename":"core/starter/src/main/resources/application.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -27,4 +27,7 @@ conf.directory=${conf.directory}\n server.servlet.contextPath=/syncope\n cxf.path=/rest\n \n+management.endpoints.web.exposure.include=health,info,loggers\n+management.endpoint.health.show-details=ALWAYS\n+\n service.discovery.address=http://localhost:8080/syncope/rest/"},{"sha":"f50ca0c9498d1942148091f25619d70aa7e814d8","filename":"docker/console/src/main/resources/application.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -24,6 +24,9 @@ server.servlet.encoding.force=true\n \n server.servlet.contextPath=/syncope-console\n \n+management.endpoints.web.exposure.include=info,health,loggers\n+management.endpoint.health.show-details=ALWAYS\n+\n service.discovery.address=${SERVICE_DISCOVERY_ADDRESS}\n \n wicket.core.csrf.enabled=false"},{"sha":"6cb0197777069ac16b8bdef61e7e6a6cb0adbea4","filename":"docker/core/src/main/resources/application.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -27,4 +27,7 @@ conf.directory=${conf.directory}\n server.servlet.contextPath=/syncope\n cxf.path=/rest\n \n+management.endpoints.web.exposure.include=health,info,loggers\n+management.endpoint.health.show-details=ALWAYS\n+\n service.discovery.address=${SERVICE_DISCOVERY_ADDRESS}"},{"sha":"2b3c7b2d6822e22834d2cf7250bf2a8ce3f3ad60","filename":"docker/enduser/src/main/resources/application.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -24,6 +24,9 @@ server.servlet.encoding.force=true\n \n server.servlet.contextPath=/syncope-enduser\n \n+management.endpoints.web.exposure.include=info,health,loggers\n+management.endpoint.health.show-details=ALWAYS\n+\n service.discovery.address=${SERVICE_DISCOVERY_ADDRESS}\n \n wicket.core.csrf.enabled=false"},{"sha":"2e2da4405f4585966f2f93e256dcf62ee9f28fd2","filename":"docker/sra/src/main/resources/application.properties","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -20,8 +20,9 @@ spring.main.banner-mode=log\n \n server.port=8080\n \n-management.security.enabled=true\n management.endpoint.gateway.enabled=true\n-management.endpoints.web.exposure.include=health,loggers,metrics,gateway,sraSessions\n+management.endpoints.web.exposure.include=info,health,loggers,metrics,gateway,sraSessions\n+management.endpoint.health.show-details=ALWAYS\n+spring.cloud.discovery.client.health-indicator.enabled=false\n \n service.discovery.address=${SERVICE_DISCOVERY_ADDRESS}"},{"sha":"844699284b51870507e18093b7183a7312d48bb4","filename":"docker/wa/src/main/resources/application.properties","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/docker%2Fwa%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/docker%2Fwa%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fwa%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -34,7 +34,9 @@ spring.web.resources.static-locations=classpath:/thymeleaf/static,classpath:/syn\n \n cas.monitor.endpoints.endpoint.defaults.access=AUTHENTICATED\n management.endpoints.enabled-by-default=true\n-management.endpoints.web.exposure.include=*\n+management.endpoints.web.exposure.include=info,health,loggers,ssoSessions\n+management.endpoint.health.show-details=ALWAYS\n+spring.cloud.discovery.client.health-indicator.enabled=false\n \n # Cache service definitions for 5 minutes\n cas.service-registry.cache.duration=PT5M"},{"sha":"8f31e5611eb118b369c1189394c40c8abd7b1526","filename":"ext/flowable/client-enduser/src/main/java/org/apache/syncope/client/enduser/rest/UserRequestRestClient.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FUserRequestRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FUserRequestRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FUserRequestRestClient.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -49,11 +49,12 @@ public static List<UserRequest> listRequests(\n             final int size,\n             final String username,\n             final SortParam<String> sort) {\n+\n         return getService(UserRequestService.class).listRequests(new UserRequestQuery.Builder().\n                 user(StringUtils.isBlank(username)\n                         ? SyncopeEnduserSession.get().getSelfTO().getUsername()\n                         : username).\n-                page(page).size(size).build()).getResult();\n+                page(page).size(size).orderBy(toOrderBy(sort)).build()).getResult();\n     }\n \n     public static void cancelRequest(final String executionId, final String reason) {"},{"sha":"983c54605990c4682d0eba05c701c76280814770","filename":"fit/core-reference/pom.xml","status":"modified","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -216,24 +216,6 @@ under the License.\n \n   <build>\n     <plugins>\n-      <plugin>\n-        <groupId>org.codehaus.mojo</groupId>\n-        <artifactId>buildnumber-maven-plugin</artifactId>\n-        <inherited>true</inherited>\n-        <configuration>\n-          <doCheck>false</doCheck>\n-          <doUpdate>false</doUpdate>\n-        </configuration>\n-        <executions>\n-          <execution>\n-            <phase>validate</phase>\n-            <goals>\n-              <goal>create</goal>\n-            </goals>\n-          </execution>\n-        </executions>\n-      </plugin>\n-\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-dependency-plugin</artifactId>"},{"sha":"1f84ccdc51484286d9dd4c3c58d08670b6e55ee0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -440,18 +440,6 @@ public static void restSetup() {\n         impersonationService = anonymusClient.getService(ImpersonationService.class);\n     }\n \n-    @Autowired\n-    protected ConfParamOps confParamOps;\n-\n-    @Autowired\n-    protected ServiceOps serviceOps;\n-\n-    @Autowired\n-    protected DomainOps domainOps;\n-\n-    @Autowired\n-    protected DataSource testDataSource;\n-\n     protected static String getUUIDString() {\n         return UUID.randomUUID().toString().substring(0, 8);\n     }\n@@ -464,7 +452,7 @@ protected static AttrPatch attrAddReplacePatch(final String schema, final String\n         return new AttrPatch.Builder(attr(schema, value)).operation(PatchOperation.ADD_REPLACE).build();\n     }\n \n-    public static <T> T getObject(final URI location, final Class<?> serviceClass, final Class<T> resultClass) {\n+    protected static <T> T getObject(final URI location, final Class<?> serviceClass, final Class<T> resultClass) {\n         WebClient webClient = WebClient.fromClient(WebClient.client(adminClient.getService(serviceClass)));\n         webClient.accept(clientFactory.getContentType().getMediaType()).to(location.toASCIIString(), false);\n \n@@ -474,6 +462,18 @@ public static <T> T getObject(final URI location, final Class<?> serviceClass, f\n                 get(resultClass);\n     }\n \n+    @Autowired\n+    protected ConfParamOps confParamOps;\n+\n+    @Autowired\n+    protected ServiceOps serviceOps;\n+\n+    @Autowired\n+    protected DomainOps domainOps;\n+\n+    @Autowired\n+    protected DataSource testDataSource;\n+\n     @SuppressWarnings(\"unchecked\")\n     protected <T extends SchemaTO> T createSchema(final SchemaType type, final T schemaTO) {\n         Response response = schemaService.create(type, schemaTO);\n@@ -629,7 +629,7 @@ protected ProvisioningResult<GroupTO> deleteGroup(final String key) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    protected static <T extends PolicyTO> T createPolicy(final PolicyType type, final T policy) {\n+    protected <T extends PolicyTO> T createPolicy(final PolicyType type, final T policy) {\n         Response response = policyService.create(type, policy);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n             Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n@@ -776,7 +776,7 @@ protected <T> T queryForObject(\n         return object.get();\n     }\n \n-    protected static OIDCRPClientAppTO buildOIDCRP() {\n+    protected OIDCRPClientAppTO buildOIDCRP() {\n         AuthPolicyTO authPolicyTO = new AuthPolicyTO();\n         authPolicyTO.setKey(\"AuthPolicyTest_\" + getUUIDString());\n         authPolicyTO.setName(\"Authentication Policy\");\n@@ -805,7 +805,7 @@ protected static OIDCRPClientAppTO buildOIDCRP() {\n         return oidcrpTO;\n     }\n \n-    protected static SAML2SPClientAppTO buildSAML2SP() {\n+    protected SAML2SPClientAppTO buildSAML2SP() {\n         AuthPolicyTO authPolicyTO = new AuthPolicyTO();\n         authPolicyTO.setKey(\"AuthPolicyTest_\" + getUUIDString());\n         authPolicyTO.setName(\"Authentication Policy\");\n@@ -846,7 +846,7 @@ protected <T extends ClientAppTO> T createClientApp(final ClientAppType type, fi\n         return (T) getObject(response.getLocation(), ClientAppService.class, clientAppTO.getClass());\n     }\n \n-    protected static AuthPolicyTO buildAuthPolicyTO(final String authModuleKey) {\n+    protected AuthPolicyTO buildAuthPolicyTO(final String authModuleKey) {\n         AuthPolicyTO policy = new AuthPolicyTO();\n         policy.setName(\"Test Authentication policy\");\n \n@@ -857,7 +857,7 @@ protected static AuthPolicyTO buildAuthPolicyTO(final String authModuleKey) {\n         return policy;\n     }\n \n-    protected static AttrReleasePolicyTO buildAttrReleasePolicyTO() {\n+    protected AttrReleasePolicyTO buildAttrReleasePolicyTO() {\n         AttrReleasePolicyTO policy = new AttrReleasePolicyTO();\n         policy.setName(\"Test Attribute Release policy\");\n \n@@ -871,7 +871,7 @@ protected static AttrReleasePolicyTO buildAttrReleasePolicyTO() {\n         return policy;\n     }\n \n-    protected static AccessPolicyTO buildAccessPolicyTO() {\n+    protected AccessPolicyTO buildAccessPolicyTO() {\n         AccessPolicyTO policy = new AccessPolicyTO();\n         policy.setName(\"Test Access policy\");\n         policy.setEnabled(true);\n@@ -883,7 +883,7 @@ protected static AccessPolicyTO buildAccessPolicyTO() {\n         return policy;\n     }\n \n-    protected static List<AuditEntry> query(final AuditQuery query, final int maxWaitSeconds) {\n+    protected List<AuditEntry> query(final AuditQuery query, final int maxWaitSeconds) {\n         int i = 0;\n         List<AuditEntry> results = List.of();\n         do {"},{"sha":"ef79aa74c29ef882509f688442a9f8b237499462","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/ElasticsearchDetector.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FElasticsearchDetector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FElasticsearchDetector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FElasticsearchDetector.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.fit;\n \n-import org.apache.syncope.common.rest.api.service.SyncopeService;\n+import org.apache.syncope.common.lib.info.PlatformInfo;\n \n public class ElasticsearchDetector {\n \n-    public static boolean isElasticSearchEnabled(final SyncopeService syncopeService) {\n-        return syncopeService.platform().getPersistenceInfo().getAnySearchDAO().contains(\"Elasticsearch\");\n+    public static boolean isElasticSearchEnabled(final PlatformInfo platform) {\n+        return platform.getPersistenceInfo().getAnySearchDAO().contains(\"Elasticsearch\");\n     }\n }"},{"sha":"ff192421a8f0c8115f6dc72b9d7b3be157add9c7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/FlowableDetector.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FFlowableDetector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FFlowableDetector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FFlowableDetector.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.fit;\n \n-import org.apache.syncope.common.rest.api.service.SyncopeService;\n+import org.apache.syncope.common.lib.info.PlatformInfo;\n \n public class FlowableDetector {\n \n-    public static boolean isFlowableEnabledForUserWorkflow(final SyncopeService syncopeService) {\n-        return syncopeService.platform().getWorkflowInfo().getUserWorkflowAdapter().contains(\"Flowable\");\n+    public static boolean isFlowableEnabledForUserWorkflow(final PlatformInfo platform) {\n+        return platform.getWorkflowInfo().getUserWorkflowAdapter().contains(\"Flowable\");\n     }\n }"},{"sha":"000b3ebdd7ebdf34b32da3fbb62d5306951655d6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/AbstractConsoleITCase.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -49,10 +49,12 @@\n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n \n public abstract class AbstractConsoleITCase extends AbstractUITCase {\n \n     @ImportAutoConfiguration(classes = { SelfKeymasterClientContext.class, ZookeeperKeymasterClientContext.class })\n+    @PropertySource(\"classpath:console.properties\")\n     @Configuration\n     public static class SyncopeConsoleWebApplicationTestConfig {\n "},{"sha":"1d9acaa73367118a592ecd77775adb861f0aba9f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/AnyTypesITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAnyTypesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAnyTypesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAnyTypesITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -123,7 +123,7 @@ public void update() {\n \n     @Test\n     public void delete() {\n-        final String name = \"anyTypeDelete\";\n+        String name = \"anyTypeDelete\";\n         createAnyType(name);\n         browsingToAnyTypes();\n "},{"sha":"0afcaa47540840610f4934a39d0cc90dc30a5418","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuditITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -49,7 +49,7 @@\n \n public class AuditITCase extends AbstractITCase {\n \n-    private static AuditEntry queryWithFailure(final AuditQuery query, final int maxWaitSeconds) {\n+    private AuditEntry queryWithFailure(final AuditQuery query, final int maxWaitSeconds) {\n         List<AuditEntry> results = query(query, maxWaitSeconds);\n         if (results.isEmpty()) {\n             fail(\"Timeout when executing query for key \" + query.getEntityKey());"},{"sha":"062d6c1fb4a7e38dde0d1ff9d99f92c803b022ce","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -111,7 +111,7 @@ public void readEntitlements() {\n \n         // 3. as admin\n         self = adminClient.self();\n-        assertEquals(syncopeService.platform().getEntitlements().size(), self.getLeft().size());\n+        assertEquals(adminClient.platform().getEntitlements().size(), self.getLeft().size());\n         assertFalse(self.getLeft().keySet().contains(IdRepoEntitlement.ANONYMOUS));\n         assertEquals(List.of(), self.getMiddle());\n         assertEquals(ADMIN_UNAME, self.getRight().getUsername());\n@@ -415,7 +415,7 @@ public void anyTypeEntitlement() {\n         String anyTypeKey = \"FOLDER \" + getUUIDString();\n \n         // 1. no entitlement exists (yet) for the any type to be created\n-        assertFalse(syncopeService.platform().getEntitlements().stream().\n+        assertFalse(adminClient.platform().getEntitlements().stream().\n                 anyMatch(entitlement -> entitlement.contains(anyTypeKey)));\n \n         // 2. create plain schema, any type class and any type\n@@ -436,7 +436,7 @@ public void anyTypeEntitlement() {\n         anyTypeService.create(anyTypeTO);\n \n         // 2. now entitlement exists for the any type just created\n-        assertTrue(syncopeService.platform().getEntitlements().stream().\n+        assertTrue(adminClient.platform().getEntitlements().stream().\n                 anyMatch(entitlement -> entitlement.contains(anyTypeKey)));\n \n         // 3. attempt to create an instance of the type above: fail because no entitlement was assigned\n@@ -495,7 +495,7 @@ public void asGroupOwner() {\n         assertEquals(2, member.getMemberships().size());\n         String memberKey = member.getKey();\n \n-        if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+        if (ElasticsearchDetector.isElasticSearchEnabled(adminClient.platform())) {\n             try {\n                 Thread.sleep(2000);\n             } catch (InterruptedException ex) {\n@@ -580,7 +580,7 @@ public void asGroupOwner() {\n \n     @Test\n     public void issueSYNCOPE434() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(adminClient.platform()));\n \n         // 1. create user with group 'groupForWorkflowApproval' \n         // (users with group groupForWorkflowApproval are defined in workflow as subject to approval)"},{"sha":"d8910856b144de23033d607e117010b15ff5c54a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/BpmnProcessITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBpmnProcessITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBpmnProcessITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBpmnProcessITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -44,7 +44,7 @@ public class BpmnProcessITCase extends AbstractITCase {\n     @BeforeAll\n     public static void findDefault() {\n         assumeFalse(clientFactory.getContentType() == SyncopeClientFactoryBean.ContentType.YAML);\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(adminClient.platform()));\n \n         bpmnProcessService.list().stream().\n                 filter(BpmnProcess::isUserWorkflow).findAny().\n@@ -55,7 +55,7 @@ public static void findDefault() {\n     @BeforeEach\n     public void check() {\n         assumeFalse(clientFactory.getContentType() == SyncopeClientFactoryBean.ContentType.YAML);\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(adminClient.platform()));\n     }\n \n     @Test"},{"sha":"82bb9b73774b9dd40e764bd3d124392b24f1e304","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/CamelRouteITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -41,7 +41,7 @@ public class CamelRouteITCase extends AbstractITCase {\n \n     @BeforeEach\n     public void check() {\n-        assumeTrue(syncopeService.platform().getProvisioningInfo().getUserProvisioningManager().contains(\"Camel\"));\n+        assumeTrue(adminClient.platform().getProvisioningInfo().getUserProvisioningManager().contains(\"Camel\"));\n     }\n \n     @Test"},{"sha":"fdea1a5a39b872cc5fc1d0951eb78f54cae76f10","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ClientAppITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -186,7 +186,7 @@ public void deleteCASSP() {\n         }\n     }\n \n-    private static CASSPClientAppTO buildCASSP() {\n+    private CASSPClientAppTO buildCASSP() {\n         AuthPolicyTO authPolicyTO = new AuthPolicyTO();\n         authPolicyTO.setKey(\"AuthPolicyTest_\" + getUUIDString());\n         authPolicyTO.setName(\"Authentication Policy\");"},{"sha":"4259e94af2f4a0970fee0af4968b8a0482f34fae","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DynRealmITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -150,7 +150,7 @@ public void delegatedAdmin() {\n             assertNotNull(group);\n             final String groupKey = group.getKey();\n \n-            if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+            if (ElasticsearchDetector.isElasticSearchEnabled(adminClient.platform())) {\n                 try {\n                     Thread.sleep(2000);\n                 } catch (InterruptedException ex) {\n@@ -271,7 +271,7 @@ public void issueSYNCOPE1480() throws Exception {\n             assertNotNull(user.getKey());\n \n             // 4a. check that Elasticsearch index was updated correctly\n-            if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+            if (ElasticsearchDetector.isElasticSearchEnabled(adminClient.platform())) {\n                 try {\n                     Thread.sleep(2000);\n                 } catch (InterruptedException ex) {\n@@ -293,7 +293,7 @@ public void issueSYNCOPE1480() throws Exception {\n             dynRealmService.update(dynRealm);\n \n             // 6a. check that Elasticsearch index was updated correctly\n-            if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+            if (ElasticsearchDetector.isElasticSearchEnabled(adminClient.platform())) {\n                 try {\n                     Thread.sleep(2000);\n                 } catch (InterruptedException ex) {"},{"sha":"162f9aa44cfdab53a85419638ce76e5b96190c0c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/KeymasterITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -220,7 +220,7 @@ public void domainCRUD() throws Exception {\n \n         domainOps.create(new Domain.Builder(key).\n                 jdbcDriver(\"org.h2.Driver\").\n-                jdbcURL(\"jdbc:h2:mem:syncopetest;DB_CLOSE_DELAY=-1\").\n+                jdbcURL(\"jdbc:h2:mem:syncopetest\" + key + \";DB_CLOSE_DELAY=-1\").\n                 dbUsername(\"sa\").\n                 dbPassword(\"\").\n                 databasePlatform(\"org.apache.openjpa.jdbc.sql.H2Dictionary\").\n@@ -282,7 +282,7 @@ public void domainCRUD() throws Exception {\n         assertNotNull(user);\n         assertEquals(\"monteverdi\", user.getUsername());\n \n-        if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+        if (ElasticsearchDetector.isElasticSearchEnabled(adminClient.platform())) {\n             try {\n                 Thread.sleep(2000);\n             } catch (InterruptedException ex) {"},{"sha":"acb10d0823b3ae7cc069c69b8f32a969a5ad97e5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MembershipITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -279,7 +279,7 @@ public void pull() {\n             assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(execution.getStatus()));\n \n             // 5. verify that pulled user has\n-            if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+            if (ElasticsearchDetector.isElasticSearchEnabled(adminClient.platform())) {\n                 try {\n                     Thread.sleep(2000);\n                 } catch (InterruptedException ex) {"},{"sha":"8a368a223c936b590dae8a0794a7d7481c34973d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MultitenancyITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -223,7 +223,7 @@ public void createResourceAndPull() {\n             assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(status));\n \n             // verify that pulled user is found\n-            if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+            if (ElasticsearchDetector.isElasticSearchEnabled(anonymusClient.platform())) {\n                 try {\n                     Thread.sleep(2000);\n                 } catch (InterruptedException ex) {"},{"sha":"8693080cce175fd20e9ceb146aae8e0d3b88bb3f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PolicyITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -333,15 +333,15 @@ public void delete() throws IOException {\n \n     @Test\n     public void getPullCorrelationRuleJavaClasses() {\n-        Set<String> classes = syncopeService.platform().\n+        Set<String> classes = adminClient.platform().\n                 getJavaImplInfo(IdMImplementationType.PULL_CORRELATION_RULE).get().getClasses();\n         assertEquals(1, classes.size());\n         assertEquals(DummyPullCorrelationRule.class.getName(), classes.iterator().next());\n     }\n \n     @Test\n     public void getPushCorrelationRuleJavaClasses() {\n-        Set<String> classes = syncopeService.platform().\n+        Set<String> classes = adminClient.platform().\n                 getJavaImplInfo(IdMImplementationType.PUSH_CORRELATION_RULE).get().getClasses();\n         assertEquals(1, classes.size());\n         assertEquals(DummyPushCorrelationRule.class.getName(), classes.iterator().next());"},{"sha":"5c789859844620bbf710a56a4965ed888c2068c5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -141,7 +141,7 @@ public static void testPullActionsSetup() {\n \n     @Test\n     public void getPullActionsClasses() {\n-        Set<String> actions = syncopeService.platform().\n+        Set<String> actions = adminClient.platform().\n                 getJavaImplInfo(IdMImplementationType.PULL_ACTIONS).get().getClasses();\n         assertNotNull(actions);\n         assertFalse(actions.isEmpty());\n@@ -188,7 +188,7 @@ public void create() {\n \n     @Test\n     public void fromCSV() throws Exception {\n-        assumeFalse(ElasticsearchDetector.isElasticSearchEnabled(syncopeService));\n+        assumeFalse(ElasticsearchDetector.isElasticSearchEnabled(adminClient.platform()));\n \n         removeTestUsers();\n \n@@ -261,7 +261,7 @@ public void fromCSV() throws Exception {\n             UserTO userTO = userService.read(inUserTO.getKey());\n             assertNotNull(userTO);\n             assertEquals(userName, userTO.getUsername());\n-            assertEquals(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService)\n+            assertEquals(FlowableDetector.isFlowableEnabledForUserWorkflow(adminClient.platform())\n                     ? \"active\" : \"created\", userTO.getStatus());\n             assertEquals(\"test9@syncope.apache.org\", userTO.getPlainAttr(\"email\").get().getValues().get(0));\n             assertEquals(\"test9@syncope.apache.org\", userTO.getPlainAttr(\"userId\").get().getValues().get(0));\n@@ -563,7 +563,7 @@ public void reconcileFromScriptedSQL() throws IOException {\n             // 4. pull\n             execProvisioningTask(taskService, TaskType.PULL, pullTask.getKey(), MAX_WAIT_SECONDS, false);\n \n-            if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+            if (ElasticsearchDetector.isElasticSearchEnabled(adminClient.platform())) {\n                 try {\n                     Thread.sleep(2000);\n                 } catch (InterruptedException ex) {"},{"sha":"e7d705df6c294ea22d175b1f08a4096a20e90c9c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PushTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -68,7 +68,7 @@ public class PushTaskITCase extends AbstractTaskITCase {\n \n     @Test\n     public void getPushActionsClasses() {\n-        Set<String> actions = syncopeService.platform().\n+        Set<String> actions = adminClient.platform().\n                 getJavaImplInfo(IdMImplementationType.PUSH_ACTIONS).get().getClasses();\n         assertNotNull(actions);\n     }"},{"sha":"cd495510a0b6495c6d6f8bf83e139aeb03539f03","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReportITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -84,7 +84,7 @@ protected static String execReport(final String reportKey) {\n \n     @Test\n     public void getReportletConfs() {\n-        Set<String> reportletConfs = syncopeService.platform().\n+        Set<String> reportletConfs = adminClient.platform().\n                 getJavaImplInfo(IdRepoImplementationType.REPORTLET).get().getClasses();\n         assertNotNull(reportletConfs);\n         assertFalse(reportletConfs.isEmpty());"},{"sha":"5d21807b16d105b9756e627cc7510662a0fbac96","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ResourceITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -94,7 +94,7 @@ private static ResourceTO buildResourceTO(final String resourceKey) {\n \n     @Test\n     public void getPropagationActionsClasses() {\n-        Set<String> actions = syncopeService.platform().\n+        Set<String> actions = adminClient.platform().\n                 getJavaImplInfo(IdMImplementationType.PROPAGATION_ACTIONS).get().getClasses();\n         assertNotNull(actions);\n         assertFalse(actions.isEmpty());"},{"sha":"c91c08d493390f5d990b9f7d8553e554cdbfdb72","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SchedTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -56,7 +56,7 @@ public class SchedTaskITCase extends AbstractTaskITCase {\n \n     @Test\n     public void getJobClasses() {\n-        Set<String> jobClasses = syncopeService.platform().\n+        Set<String> jobClasses = adminClient.platform().\n                 getJavaImplInfo(IdRepoImplementationType.TASKJOB_DELEGATE).get().getClasses();\n         assertNotNull(jobClasses);\n         assertFalse(jobClasses.isEmpty());"},{"sha":"c70017b16c3ed1230e8ba686315d2a0d7f33bdbc","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -171,7 +171,7 @@ public void searchByDynGroup() {\n         GroupTO group = createGroup(groupCR).getEntity();\n         assertNotNull(group);\n \n-        if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+        if (ElasticsearchDetector.isElasticSearchEnabled(adminClient.platform())) {\n             try {\n                 Thread.sleep(2000);\n             } catch (InterruptedException ex) {\n@@ -229,7 +229,7 @@ public void searchByDynRole() {\n         role = getObject(response.getLocation(), RoleService.class, RoleTO.class);\n         assertNotNull(role);\n \n-        if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+        if (ElasticsearchDetector.isElasticSearchEnabled(adminClient.platform())) {\n             try {\n                 Thread.sleep(2000);\n             } catch (InterruptedException ex) {\n@@ -298,7 +298,7 @@ public void searchByBooleanAnyCond() {\n     public void searchByDate() {\n         clientFactory.create(\"bellini\", \"password\").self();\n \n-        if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+        if (ElasticsearchDetector.isElasticSearchEnabled(adminClient.platform())) {\n             try {\n                 Thread.sleep(2000);\n             } catch (InterruptedException ex) {\n@@ -649,7 +649,7 @@ public void issueSYNCOPE980() {\n                     build();\n             updateAnyObject(anyObjectUR);\n \n-            if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+            if (ElasticsearchDetector.isElasticSearchEnabled(adminClient.platform())) {\n                 try {\n                     Thread.sleep(2000);\n                 } catch (InterruptedException ex) {\n@@ -688,7 +688,7 @@ public void issueSYNCOPE1223() {\n         req.getPlainAttrs().add(new AttrPatch.Builder(attr(\"ctype\", \"ou=sample,o=isp\")).build());\n         userService.update(req);\n \n-        if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+        if (ElasticsearchDetector.isElasticSearchEnabled(adminClient.platform())) {\n             try {\n                 Thread.sleep(2000);\n             } catch (InterruptedException ex) {\n@@ -753,7 +753,7 @@ public void issueSYNCOPE1417() {\n             userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                     fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"userId\").equalTo(\"*@apache.org\").query()).\n                     orderBy(SyncopeClient.getOrderByClauseBuilder().asc(\"surname\").desc(\"firstname\").build()).build());\n-            if (!ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+            if (!ElasticsearchDetector.isElasticSearchEnabled(adminClient.platform())) {\n                 fail();\n             }\n         } catch (SyncopeClientException e) {"},{"sha":"0b865f59e27c184ceeed4c05a6b3f51ee13a709f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -703,7 +703,7 @@ public void verifyTaskRegistration() {\n \n     @Test\n     public void createActivate() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(adminClient.platform()));\n \n         UserCR userCR = getUniqueSample(\"createActivate@syncope.apache.org\");\n \n@@ -738,7 +738,7 @@ public void suspendReactivate() {\n         UserTO userTO = createUser(userCR).getEntity();\n \n         assertNotNull(userTO);\n-        assertEquals(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService)\n+        assertEquals(FlowableDetector.isFlowableEnabledForUserWorkflow(adminClient.platform())\n                 ? \"active\"\n                 : \"created\", userTO.getStatus());\n \n@@ -774,7 +774,7 @@ public void suspendReactivateOnResource() {\n         userCR.getResources().add(RESOURCE_NAME_LDAP);\n         UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n-        assertEquals(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService)\n+        assertEquals(FlowableDetector.isFlowableEnabledForUserWorkflow(adminClient.platform())\n                 ? \"active\"\n                 : \"created\", userTO.getStatus());\n         String userKey = userTO.getKey();"},{"sha":"a3a262ddb2d507c183c9b2f2bb40333363ed005d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -1065,7 +1065,7 @@ public void issueSYNCOPE505LDAP() throws Exception {\n \n     @Test\n     public void issueSYNCOPE391() {\n-        assumeFalse(ElasticsearchDetector.isElasticSearchEnabled(syncopeService));\n+        assumeFalse(ElasticsearchDetector.isElasticSearchEnabled(adminClient.platform()));\n \n         // 1. create user on Syncope with null password\n         UserCR userCR = UserITCase.getUniqueSample(\"syncope391@syncope.apache.org\");"},{"sha":"6919ad3adc43e588d5044b3b300d04ee5ec5d12f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserRequestITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserRequestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserRequestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserRequestITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -56,7 +56,7 @@ public class UserRequestITCase extends AbstractITCase {\n     @BeforeAll\n     public static void loadBpmnProcesses() throws IOException {\n         assumeFalse(clientFactory.getContentType() == SyncopeClientFactoryBean.ContentType.YAML);\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(adminClient.platform()));\n \n         WebClient.client(bpmnProcessService).type(MediaType.APPLICATION_XML_TYPE);\n         bpmnProcessService.set(\"directorGroupRequest\",\n@@ -70,7 +70,7 @@ public static void loadBpmnProcesses() throws IOException {\n     @BeforeEach\n     public void check() {\n         assumeFalse(clientFactory.getContentType() == SyncopeClientFactoryBean.ContentType.YAML);\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(adminClient.platform()));\n     }\n \n     @Test"},{"sha":"1ad768df7a8d38811b97a3c445013a45a908de5e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserSelfITCase.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -72,12 +72,12 @@ public class UserSelfITCase extends AbstractITCase {\n \n     @Test\n     public void selfRegistrationAllowed() {\n-        assertTrue(syncopeService.platform().isSelfRegAllowed());\n+        assertTrue(adminClient.platform().isSelfRegAllowed());\n     }\n \n     @Test\n     public void create() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(adminClient.platform()));\n \n         // 1. self-registration as admin: failure\n         try {\n@@ -99,7 +99,7 @@ public void create() {\n \n     @Test\n     public void createAndApprove() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(adminClient.platform()));\n \n         // 1. self-create user with membership: goes 'createApproval' with resources and membership but no propagation\n         UserCR userCR = UserITCase.getUniqueSample(\"anonymous@syncope.apache.org\");\n@@ -138,7 +138,7 @@ public void createAndApprove() {\n \n     @Test\n     public void createAndUnclaim() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(adminClient.platform()));\n \n         // 1. self-create user with membership: goes 'createApproval' with resources and membership but no propagation\n         UserCR userCR = UserITCase.getUniqueSample(\"anonymous@syncope.apache.org\");\n@@ -231,14 +231,14 @@ public void updateWithoutApproval() {\n                 readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n                 }).getEntity();\n         assertNotNull(updated);\n-        assertEquals(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService)\n+        assertEquals(FlowableDetector.isFlowableEnabledForUserWorkflow(adminClient.platform())\n                 ? \"active\" : \"created\", updated.getStatus());\n         assertTrue(updated.getUsername().endsWith(\"XX\"));\n     }\n \n     @Test\n     public void updateWithApproval() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(adminClient.platform()));\n \n         // 1. create user as admin\n         UserTO created = createUser(UserITCase.getUniqueSample(\"anonymous@syncope.apache.org\")).getEntity();\n@@ -302,7 +302,7 @@ public void delete() {\n                 new GenericType<ProvisioningResult<UserTO>>() {\n         }).getEntity();\n         assertNotNull(deleted);\n-        assertEquals(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService)\n+        assertEquals(FlowableDetector.isFlowableEnabledForUserWorkflow(adminClient.platform())\n                 ? \"deleteApproval\" : null, deleted.getStatus());\n     }\n \n@@ -343,7 +343,7 @@ public void passwordReset() {\n         anonClient.getService(UserSelfService.class).requestPasswordReset(user.getUsername(), \"Rossi\");\n \n         // SYNCOPE-1293:get users with token not null before requesting password reset\n-        if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+        if (ElasticsearchDetector.isElasticSearchEnabled(adminClient.platform())) {\n             try {\n                 Thread.sleep(2000);\n             } catch (InterruptedException ex) {\n@@ -462,7 +462,7 @@ public void mustChangePassword() {\n \n     @Test\n     public void createWithReject() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(adminClient.platform()));\n \n         UserCR userCR = UserITCase.getUniqueSample(\"createWithReject@syncope.apache.org\");\n         userCR.getResources().add(RESOURCE_NAME_TESTDB);\n@@ -538,7 +538,7 @@ public void createWithReject() {\n \n     @Test\n     public void createWithApproval() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(adminClient.platform()));\n \n         // read forms *before* any operation\n         PagedResult<UserRequestForm> forms = userRequestService.listForms(new UserRequestQuery.Builder().build());\n@@ -625,7 +625,7 @@ public void createWithApproval() {\n \n     @Test\n     public void updateApproval() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(adminClient.platform()));\n \n         // read forms *before* any operation\n         PagedResult<UserRequestForm> forms = userRequestService.listForms(\n@@ -688,7 +688,7 @@ public void updateApproval() {\n \n     @Test\n     public void availableTasks() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(adminClient.platform()));\n \n         UserTO user = createUser(UserITCase.getUniqueSample(\"availableTasks@apache.org\")).getEntity();\n         assertEquals(\"active\", user.getStatus());\n@@ -702,7 +702,7 @@ public void availableTasks() {\n \n     @Test\n     public void issueSYNCOPE15() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(adminClient.platform()));\n \n         // read forms *before* any operation\n         PagedResult<UserRequestForm> forms = userRequestService.listForms(new UserRequestQuery.Builder().build());"},{"sha":"080bdc6b60b89016331a317f2539449bc587f3cc","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/enduser/AbstractEnduserITCase.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FAbstractEnduserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FAbstractEnduserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FAbstractEnduserITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -53,10 +53,12 @@\n import java.util.Date;\n import java.util.List;\n import java.util.Locale;\n+import org.springframework.context.annotation.PropertySource;\n \n public abstract class AbstractEnduserITCase extends AbstractUITCase {\n \n     @ImportAutoConfiguration(classes = { SelfKeymasterClientContext.class, ZookeeperKeymasterClientContext.class })\n+    @PropertySource(\"classpath:enduser.properties\")\n     @Configuration\n     public static class SyncopeEnduserWebApplicationTestConfig {\n "},{"sha":"ffcb670f3d096e1f196567bb4074cb84e75c13e8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/enduser/AuthenticatedITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FAuthenticatedITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FAuthenticatedITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FAuthenticatedITCase.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -113,7 +113,7 @@ public void selfUpdate() {\n \n         TESTER.assertRenderedPage(SelfResult.class);\n \n-        assertEquals(FlowableDetector.isFlowableEnabledForUserWorkflow(SYNCOPE_SERVICE)\n+        assertEquals(FlowableDetector.isFlowableEnabledForUserWorkflow(adminClient.platform())\n                 ? \"active\" : \"created\", userService.read(username).getStatus());\n         assertEquals(newEmail, userService.read(username).getPlainAttr(\"email\").get().getValues().get(0));\n "},{"sha":"659fbb638d79c58e4276cfcf96c2670465887964","filename":"ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/service/SyncopeManagerService.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fservice%2FSyncopeManagerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fservice%2FSyncopeManagerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fservice%2FSyncopeManagerService.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -21,18 +21,16 @@\n import java.util.Set;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n-import org.apache.syncope.common.rest.api.service.SyncopeService;\n \n public class SyncopeManagerService {\n \n-    private final SyncopeService service;\n+    private final SyncopeClient syncopeClient;\n \n     public SyncopeManagerService(final String url, final String userName, final String password) {\n-        SyncopeClient syncopeClient = new SyncopeClientFactoryBean().setAddress(url).create(userName, password);\n-        service = syncopeClient.getService(SyncopeService.class);\n+        syncopeClient = new SyncopeClientFactoryBean().setAddress(url).create(userName, password);\n     }\n \n     public Set<String> getImplementationTypes() {\n-        return service.platform().getImplementationTypes();\n+        return syncopeClient.platform().getImplementationTypes();\n     }\n }"},{"sha":"8368e889e55564c4cfe67b36bff9c254b7cf76b1","filename":"pom.xml","status":"modified","additions":37,"deletions":8,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -406,7 +406,7 @@ under the License.\n \n     <cxf.version>3.4.4</cxf.version>\n     <bouncycastle.version>1.69</bouncycastle.version>\n-    <nimbus-jose-jwt.version>9.10.1</nimbus-jose-jwt.version>\n+    <nimbus-jose-jwt.version>9.11</nimbus-jose-jwt.version>\n \n     <jackson.version>2.12.4</jackson.version>\n \n@@ -473,7 +473,7 @@ under the License.\n     <chartjs.version>1.0.2</chartjs.version>\n \n     <wicket.version>9.4.0</wicket.version>\n-    <wicketstuff.version>9.3.0</wicketstuff.version>\n+    <wicketstuff.version>9.4.0</wicketstuff.version>\n     <wicket-jqueryui.version>9.3.2</wicket-jqueryui.version>\n     <wicket-bootstrap.version>5.0.5</wicket-bootstrap.version>\n     <wicket-spring-boot.version>3.0.4</wicket-spring-boot.version>\n@@ -906,6 +906,22 @@ under the License.\n         </exclusions>\n       </dependency>\n \n+      <dependency>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-actuator</artifactId>\n+        <version>${spring-boot.version}</version>\n+        <exclusions>\n+          <exclusion>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-logging</artifactId>\n+          </exclusion>\n+          <exclusion>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-tomcat</artifactId>\n+          </exclusion>\n+        </exclusions>\n+      </dependency>\n+\n       <dependency>\n         <groupId>org.springframework.boot</groupId>\n         <artifactId>spring-boot-starter-logging</artifactId>\n@@ -2154,6 +2170,25 @@ under the License.\n           <version>3.2.0</version>\n         </plugin>\n \n+        <plugin>\n+          <groupId>io.github.git-commit-id</groupId>\n+          <artifactId>git-commit-id-maven-plugin</artifactId>\n+          <version>5.0.0</version>\n+          <executions>\n+            <execution>\n+              <goals>\n+                <goal>revision</goal>\n+              </goals>\n+            </execution>\n+          </executions>\n+          <configuration>\n+            <verbose>true</verbose>\n+            <dateFormat>yyyy-MM-dd'T'HH:mm:ssZ</dateFormat>\n+            <generateGitPropertiesFile>true</generateGitPropertiesFile>\n+            <generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties</generateGitPropertiesFilename>\n+          </configuration>\n+        </plugin>\n+\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-javadoc-plugin</artifactId>\n@@ -2361,12 +2396,6 @@ under the License.\n           <version>3.3.0</version>\n         </plugin>\n \n-        <plugin>\n-          <groupId>org.codehaus.mojo</groupId>\n-          <artifactId>buildnumber-maven-plugin</artifactId>\n-          <version>1.4</version>\n-        </plugin>\n-\n         <plugin>\n           <groupId>org.codehaus.mojo</groupId>\n           <artifactId>nbm-maven-plugin</artifactId>"},{"sha":"15a34c1750d5b6c9fb449d1c4ad5063dbed65e1f","filename":"sra/pom.xml","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/sra%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/sra%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fpom.xml?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -187,6 +187,13 @@ under the License.\n         </configuration>\n       </plugin>\n \n+      <plugin>\n+        <groupId>io.github.git-commit-id</groupId>\n+        <artifactId>git-commit-id-maven-plugin</artifactId>\n+        <configuration>\n+          <failOnNoGitDirectory>false</failOnNoGitDirectory>\n+        </configuration>\n+      </plugin>\n       <plugin>\n         <groupId>org.springframework.boot</groupId>\n         <artifactId>spring-boot-maven-plugin</artifactId>\n@@ -196,6 +203,7 @@ under the License.\n         <executions>\n           <execution>\n             <goals>\n+              <goal>build-info</goal>\n               <goal>repackage</goal>\n             </goals>\n             <configuration>\n@@ -204,6 +212,11 @@ under the License.\n           </execution>\n         </executions>\n       </plugin>\n+\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n     </plugins>\n \n     <resources>"},{"sha":"131c2d8ee988800b47064d2d69ee0bf9ddd055bb","filename":"sra/src/main/java/org/apache/syncope/sra/SyncopeSRAApplication.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAApplication.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -21,7 +21,8 @@\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStart;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n-import org.apache.syncope.sra.actuator.SRASessions;\n+import org.apache.syncope.sra.actuate.SRASessions;\n+import org.apache.syncope.sra.actuate.SyncopeCoreHealthIndicator;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n@@ -59,6 +60,12 @@ public SRASessions sraSessionsActuatorEndpoint() {\n         return new SRASessions(cacheManager);\n     }\n \n+    @ConditionalOnMissingBean\n+    @Bean\n+    public SyncopeCoreHealthIndicator syncopeCoreHealthIndicator() {\n+        return new SyncopeCoreHealthIndicator();\n+    }\n+\n     @Bean\n     public KeymasterStart keymasterStart() {\n         return new KeymasterStart(NetworkService.Type.SRA);"},{"sha":"0c07877746555a0bf0efee54c9eb37980eb4d1da","filename":"sra/src/main/java/org/apache/syncope/sra/actuate/SRASessions.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Factuate%2FSRASessions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Factuate%2FSRASessions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Factuate%2FSRASessions.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.sra.actuator;\n+package org.apache.syncope.sra.actuate;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;","previous_filename":"sra/src/main/java/org/apache/syncope/sra/actuator/SRASessions.java"},{"sha":"8b679f88753cd4cdc09b9ed33d7aa5f30bd13116","filename":"sra/src/main/java/org/apache/syncope/sra/actuate/SyncopeCoreHealthIndicator.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Factuate%2FSyncopeCoreHealthIndicator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Factuate%2FSyncopeCoreHealthIndicator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Factuate%2FSyncopeCoreHealthIndicator.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.actuate;\n+\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n+import org.apache.syncope.common.rest.api.service.SRARouteService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.actuate.health.Health;\n+import org.springframework.boot.actuate.health.HealthIndicator;\n+import org.springframework.boot.actuate.health.Status;\n+\n+public class SyncopeCoreHealthIndicator implements HealthIndicator {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(SyncopeCoreHealthIndicator.class);\n+\n+    @Autowired\n+    protected ServiceOps serviceOps;\n+\n+    @Value(\"${anonymousUser}\")\n+    protected String anonymousUser;\n+\n+    @Value(\"${anonymousKey}\")\n+    protected String anonymousKey;\n+\n+    @Value(\"${useGZIPCompression:false}\")\n+    protected boolean useGZIPCompression;\n+\n+    @Override\n+    public Health health() {\n+        Health.Builder builder = new Health.Builder();\n+\n+        try {\n+            new SyncopeClientFactoryBean().\n+                    setAddress(serviceOps.get(NetworkService.Type.CORE).getAddress()).\n+                    setUseCompression(useGZIPCompression).\n+                    create(new AnonymousAuthenticationHandler(anonymousUser, anonymousKey)).\n+                    getService(SRARouteService.class).list();\n+            builder.status(Status.UP);\n+        } catch (Exception e) {\n+            LOG.debug(\"When attempting to connect to Syncope Core\", e);\n+            builder.status(Status.DOWN);\n+        }\n+\n+        return builder.build();\n+    }\n+}"},{"sha":"b0b438d6c776c9659fe1fba2e005c632ef282add","filename":"sra/src/main/resources/application.properties","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/sra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/sra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -20,8 +20,9 @@ spring.main.banner-mode=log\n \n server.port=8080\n \n-management.security.enabled=true\n management.endpoint.gateway.enabled=true\n-management.endpoints.web.exposure.include=health,loggers,metrics,gateway,sraSessions\n+management.endpoints.web.exposure.include=info,health,loggers,metrics,gateway,sraSessions\n+management.endpoint.health.show-details=ALWAYS\n+spring.cloud.discovery.client.health-indicator.enabled=false\n \n service.discovery.address=http://localhost:8080/"},{"sha":"9195bfdd461b4c34dab23e262e8555eba362e732","filename":"wa/starter/pom.xml","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/wa%2Fstarter%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/wa%2Fstarter%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fpom.xml?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -366,6 +366,25 @@ under the License.\n \n   <build>\n     <plugins>\n+      <plugin>\n+        <groupId>io.github.git-commit-id</groupId>\n+        <artifactId>git-commit-id-maven-plugin</artifactId>\n+        <configuration>\n+          <failOnNoGitDirectory>false</failOnNoGitDirectory>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-maven-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>build-info</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-checkstyle-plugin</artifactId>"},{"sha":"d2bf0a475e86a1ec837263fd88673cc873ecd312","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/actuate/SyncopeCoreHealthIndicator.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Factuate%2FSyncopeCoreHealthIndicator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Factuate%2FSyncopeCoreHealthIndicator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Factuate%2FSyncopeCoreHealthIndicator.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter.actuate;\n+\n+import org.apache.syncope.common.rest.api.service.UserSelfService;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.boot.actuate.health.Health;\n+import org.springframework.boot.actuate.health.HealthIndicator;\n+import org.springframework.boot.actuate.health.Status;\n+\n+public class SyncopeCoreHealthIndicator implements HealthIndicator {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(SyncopeCoreHealthIndicator.class);\n+\n+    protected final WARestClient waRestClient;\n+\n+    public SyncopeCoreHealthIndicator(final WARestClient waRestClient) {\n+        this.waRestClient = waRestClient;\n+    }\n+\n+    @Override\n+    public Health health() {\n+        Health.Builder builder = new Health.Builder();\n+\n+        try {\n+            waRestClient.getSyncopeClient().getService(UserSelfService.class).read();\n+            builder.status(Status.UP);\n+        } catch (Exception e) {\n+            LOG.debug(\"When attempting to connect to Syncope Core\", e);\n+            builder.status(Status.DOWN);\n+        }\n+\n+        return builder.build();\n+    }\n+}"},{"sha":"4283c0d2e3dcacaeb369cbbdd104eaa7aabb3690","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/SyncopeWAConfiguration.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -36,6 +36,7 @@\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n import org.apache.syncope.common.lib.types.JWSAlgorithm;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.apache.syncope.wa.starter.actuate.SyncopeCoreHealthIndicator;\n import org.apache.syncope.wa.starter.audit.SyncopeWAAuditTrailManager;\n import org.apache.syncope.wa.starter.events.SyncopeWAEventRepository;\n import org.apache.syncope.wa.starter.gauth.SyncopeWAGoogleMfaAuthCredentialRepository;\n@@ -305,6 +306,13 @@ public SurrogateAuthenticationService surrogateAuthenticationService(final WARes\n         return new SyncopeWASurrogateAuthenticationService(restClient);\n     }\n \n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public SyncopeCoreHealthIndicator syncopeCoreHealthIndicator(final WARestClient restClient) {\n+        return new SyncopeCoreHealthIndicator(restClient);\n+    }\n+\n     @Bean\n     public KeymasterStart keymasterStart() {\n         return new KeymasterStart(NetworkService.Type.WA);"},{"sha":"8a714d969e96f2c62f4584d3a66070e9e0575a12","filename":"wa/starter/src/main/resources/application.properties","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","patch":"@@ -34,7 +34,9 @@ spring.web.resources.static-locations=classpath:/thymeleaf/static,classpath:/syn\n \n cas.monitor.endpoints.endpoint.defaults.access=AUTHENTICATED\n management.endpoints.enabled-by-default=true\n-management.endpoints.web.exposure.include=*\n+management.endpoints.web.exposure.include=info,health,loggers,ssoSessions\n+management.endpoint.health.show-details=ALWAYS\n+spring.cloud.discovery.client.health-indicator.enabled=false\n \n # Cache service definitions for 5 minutes\n cas.service-registry.cache.duration=PT5M"}]}