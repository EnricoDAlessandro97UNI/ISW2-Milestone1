{"sha":"1ce48ff23ee08aa2a934b6d5b39ec0eac6dc6440","node_id":"C_kwDOJfYA1toAKDFjZTQ4ZmYyM2VlMDhhYTJhOTM0YjZkNWIzOWVjMGVhYzZkYzY0NDA","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-09-08T10:39:08Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-09-08T10:39:08Z"},"message":"Support for SyncDeltaType.CREATE and SyncDeltaType.UPDATE","tree":{"sha":"e1680a530e97357154bcc042716b7811db7c4ebb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e1680a530e97357154bcc042716b7811db7c4ebb"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1ce48ff23ee08aa2a934b6d5b39ec0eac6dc6440","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1ce48ff23ee08aa2a934b6d5b39ec0eac6dc6440","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1ce48ff23ee08aa2a934b6d5b39ec0eac6dc6440","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1ce48ff23ee08aa2a934b6d5b39ec0eac6dc6440/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"67472cffce57064d83a2ba45c084d7fb0c433bc6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/67472cffce57064d83a2ba45c084d7fb0c433bc6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/67472cffce57064d83a2ba45c084d7fb0c433bc6"}],"stats":{"total":357,"additions":194,"deletions":163},"files":[{"sha":"f9204488d59de087112ddeb2e3392d5871326bf7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":63,"deletions":54,"changes":117,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1ce48ff23ee08aa2a934b6d5b39ec0eac6dc6440/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1ce48ff23ee08aa2a934b6d5b39ec0eac6dc6440/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=1ce48ff23ee08aa2a934b6d5b39ec0eac6dc6440","patch":"@@ -68,7 +68,6 @@\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n-import org.identityconnectors.framework.common.objects.SyncDeltaType;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -784,68 +783,78 @@ protected void handleAnys(\n             return;\n         }\n \n-        if (SyncDeltaType.CREATE_OR_UPDATE == delta.getDeltaType()) {\n-            if (matches.get(0).getAny() == null) {\n-                switch (profile.getTask().getUnmatchingRule()) {\n-                    case ASSIGN:\n-                    case PROVISION:\n-                        profile.getResults().addAll(\n-                                provision(profile.getTask().getUnmatchingRule(), delta, anyTypeKind, provision));\n-                        break;\n-\n-                    case IGNORE:\n-                        profile.getResults().addAll(ignore(delta, null, provision, false));\n-                        break;\n-\n-                    default:\n-                    // do nothing\n+        switch (delta.getDeltaType()) {\n+            case CREATE:\n+            case UPDATE:\n+            case CREATE_OR_UPDATE:\n+                if (matches.get(0).getAny() == null) {\n+                    switch (profile.getTask().getUnmatchingRule()) {\n+                        case ASSIGN:\n+                        case PROVISION:\n+                            profile.getResults().addAll(\n+                                    provision(profile.getTask().getUnmatchingRule(), delta, anyTypeKind, provision));\n+                            break;\n+\n+                        case IGNORE:\n+                            profile.getResults().addAll(ignore(delta, null, provision, false));\n+                            break;\n+\n+                        default:\n+                        // do nothing\n                     }\n-            } else {\n-                // update VirAttrCache\n-                virSchemaDAO.find(profile.getTask().getResource().getKey(), matches.get(0).getAny().getType().getKey()).\n-                        forEach(vs -> {\n-                            Attribute attr = delta.getObject().getAttributeByName(vs.getExtAttrName());\n-                            matches.forEach(match -> {\n-                                VirAttrCacheKey cacheKey = new VirAttrCacheKey(\n-                                        provision.getAnyType(), match.getAny().getKey(),\n-                                        vs.getKey());\n-                                if (attr == null) {\n-                                    virAttrCache.expire(cacheKey);\n-                                } else {\n-                                    virAttrCache.put(cacheKey, new VirAttrCacheValue(attr.getValue()));\n-                                }\n+                } else {\n+                    // update VirAttrCache\n+                    virSchemaDAO.find(\n+                            profile.getTask().getResource().getKey(),\n+                            matches.get(0).getAny().getType().getKey()).\n+                            forEach(vs -> {\n+                                Attribute attr = delta.getObject().getAttributeByName(vs.getExtAttrName());\n+                                matches.forEach(match -> {\n+                                    VirAttrCacheKey cacheKey = new VirAttrCacheKey(\n+                                            provision.getAnyType(), match.getAny().getKey(),\n+                                            vs.getKey());\n+                                    if (attr == null) {\n+                                        virAttrCache.expire(cacheKey);\n+                                    } else {\n+                                        virAttrCache.put(cacheKey, new VirAttrCacheValue(attr.getValue()));\n+                                    }\n+                                });\n                             });\n-                        });\n \n-                switch (profile.getTask().getMatchingRule()) {\n-                    case UPDATE:\n-                        profile.getResults().addAll(update(delta, matches, provision));\n-                        break;\n+                    switch (profile.getTask().getMatchingRule()) {\n+                        case UPDATE:\n+                            profile.getResults().addAll(update(delta, matches, provision));\n+                            break;\n \n-                    case DEPROVISION:\n-                    case UNASSIGN:\n-                        profile.getResults().addAll(\n-                                deprovision(profile.getTask().getMatchingRule(), delta, matches, provision));\n-                        break;\n+                        case DEPROVISION:\n+                        case UNASSIGN:\n+                            profile.getResults().addAll(\n+                                    deprovision(profile.getTask().getMatchingRule(), delta, matches, provision));\n+                            break;\n \n-                    case LINK:\n-                        profile.getResults().addAll(link(delta, matches, provision, false));\n-                        break;\n+                        case LINK:\n+                            profile.getResults().addAll(link(delta, matches, provision, false));\n+                            break;\n \n-                    case UNLINK:\n-                        profile.getResults().addAll(link(delta, matches, provision, true));\n-                        break;\n+                        case UNLINK:\n+                            profile.getResults().addAll(link(delta, matches, provision, true));\n+                            break;\n \n-                    case IGNORE:\n-                        profile.getResults().addAll(ignore(delta, matches, provision, true));\n-                        break;\n+                        case IGNORE:\n+                            profile.getResults().addAll(ignore(delta, matches, provision, true));\n+                            break;\n \n-                    default:\n-                    // do nothing\n+                        default:\n+                        // do nothing\n                     }\n-            }\n-        } else if (SyncDeltaType.DELETE == delta.getDeltaType()) {\n-            profile.getResults().addAll(delete(delta, matches, provision));\n+                }\n+                break;\n+\n+            case DELETE:\n+                profile.getResults().addAll(delete(delta, matches, provision));\n+                break;\n+\n+            default:\n         }\n     }\n "},{"sha":"f7847e44addeb9242e4fb7a9a5feb4779bbed988","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java","status":"modified","additions":61,"deletions":54,"changes":115,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1ce48ff23ee08aa2a934b6d5b39ec0eac6dc6440/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1ce48ff23ee08aa2a934b6d5b39ec0eac6dc6440/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java?ref=1ce48ff23ee08aa2a934b6d5b39ec0eac6dc6440","patch":"@@ -55,7 +55,6 @@\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n-import org.identityconnectors.framework.common.objects.SyncDeltaType;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -676,61 +675,69 @@ private void doHandle(final SyncDelta delta, final OrgUnit orgUnit) throws JobEx\n         }\n \n         try {\n-            if (SyncDeltaType.CREATE_OR_UPDATE == finalDelta.getDeltaType()) {\n-                if (realms.isEmpty()) {\n-                    switch (profile.getTask().getUnmatchingRule()) {\n-                        case ASSIGN:\n-                            profile.getResults().addAll(assign(finalDelta, orgUnit));\n-                            break;\n-\n-                        case PROVISION:\n-                            profile.getResults().addAll(provision(finalDelta, orgUnit));\n-                            break;\n-\n-                        case IGNORE:\n-                            profile.getResults().add(ignore(finalDelta, false));\n-                            break;\n-\n-                        default:\n-                        // do nothing\n+            switch (delta.getDeltaType()) {\n+                case CREATE:\n+                case UPDATE:\n+                case CREATE_OR_UPDATE:\n+                    if (realms.isEmpty()) {\n+                        switch (profile.getTask().getUnmatchingRule()) {\n+                            case ASSIGN:\n+                                profile.getResults().addAll(assign(finalDelta, orgUnit));\n+                                break;\n+\n+                            case PROVISION:\n+                                profile.getResults().addAll(provision(finalDelta, orgUnit));\n+                                break;\n+\n+                            case IGNORE:\n+                                profile.getResults().add(ignore(finalDelta, false));\n+                                break;\n+\n+                            default:\n+                            // do nothing\n+                        }\n+                    } else {\n+                        switch (profile.getTask().getMatchingRule()) {\n+                            case UPDATE:\n+                                profile.getResults().addAll(update(finalDelta, realms, false));\n+                                break;\n+\n+                            case DEPROVISION:\n+                                profile.getResults().addAll(deprovision(finalDelta, realms, false));\n+                                break;\n+\n+                            case UNASSIGN:\n+                                profile.getResults().addAll(deprovision(finalDelta, realms, true));\n+                                break;\n+\n+                            case LINK:\n+                                profile.getResults().addAll(link(finalDelta, realms, false));\n+                                break;\n+\n+                            case UNLINK:\n+                                profile.getResults().addAll(link(finalDelta, realms, true));\n+                                break;\n+\n+                            case IGNORE:\n+                                profile.getResults().add(ignore(finalDelta, true));\n+                                break;\n+\n+                            default:\n+                            // do nothing\n+                        }\n                     }\n-                } else {\n-                    switch (profile.getTask().getMatchingRule()) {\n-                        case UPDATE:\n-                            profile.getResults().addAll(update(finalDelta, realms, false));\n-                            break;\n-\n-                        case DEPROVISION:\n-                            profile.getResults().addAll(deprovision(finalDelta, realms, false));\n-                            break;\n-\n-                        case UNASSIGN:\n-                            profile.getResults().addAll(deprovision(finalDelta, realms, true));\n-                            break;\n-\n-                        case LINK:\n-                            profile.getResults().addAll(link(finalDelta, realms, false));\n-                            break;\n-\n-                        case UNLINK:\n-                            profile.getResults().addAll(link(finalDelta, realms, true));\n-                            break;\n-\n-                        case IGNORE:\n-                            profile.getResults().add(ignore(finalDelta, true));\n-                            break;\n-\n-                        default:\n-                        // do nothing\n+                    break;\n+\n+                case DELETE:\n+                    if (realms.isEmpty()) {\n+                        finalize(ResourceOperation.DELETE.name().toLowerCase(), Result.SUCCESS, null, null, finalDelta);\n+                        LOG.debug(\"No match found for deletion\");\n+                    } else {\n+                        profile.getResults().addAll(delete(finalDelta, realms));\n                     }\n-                }\n-            } else if (SyncDeltaType.DELETE == finalDelta.getDeltaType()) {\n-                if (realms.isEmpty()) {\n-                    finalize(ResourceOperation.DELETE.name().toLowerCase(), Result.SUCCESS, null, null, finalDelta);\n-                    LOG.debug(\"No match found for deletion\");\n-                } else {\n-                    profile.getResults().addAll(delete(finalDelta, realms));\n-                }\n+                    break;\n+\n+                default:\n             }\n         } catch (IllegalStateException | IllegalArgumentException e) {\n             LOG.warn(e.getMessage());"},{"sha":"9232e4b011c66d206e45830f251f5db2ff32343c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultUserPullResultHandler.java","status":"modified","additions":70,"deletions":55,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1ce48ff23ee08aa2a934b6d5b39ec0eac6dc6440/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1ce48ff23ee08aa2a934b6d5b39ec0eac6dc6440/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java?ref=1ce48ff23ee08aa2a934b6d5b39ec0eac6dc6440","patch":"@@ -60,7 +60,6 @@\n import org.apache.syncope.core.provisioning.api.pushpull.UserPullResultHandler;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n-import org.identityconnectors.framework.common.objects.SyncDeltaType;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n \n@@ -158,62 +157,78 @@ protected void handleLinkedAccounts(\n             if (found.isPresent()) {\n                 LinkedAccount account = found.get();\n \n-                if (SyncDeltaType.CREATE_OR_UPDATE == delta.getDeltaType()) {\n-                    switch (profile.getTask().getMatchingRule()) {\n-                        case UPDATE:\n-                            update(delta, account, provision).ifPresent(profile.getResults()::add);\n-                            break;\n-\n-                        case DEPROVISION:\n-                        case UNASSIGN:\n-                            deprovision(profile.getTask().getMatchingRule(), delta, account).\n-                                    ifPresent(profile.getResults()::add);\n-                            break;\n-\n-                        case LINK:\n-                        case UNLINK:\n-                            LOG.warn(\"{} not applicable to linked accounts, ignoring\",\n-                                    profile.getTask().getMatchingRule());\n-                            break;\n-\n-                        case IGNORE:\n-                            profile.getResults().add(ignore(delta, account, true));\n-                            break;\n-\n-                        default:\n-                        // do nothing\n-                    }\n-                } else if (SyncDeltaType.DELETE == delta.getDeltaType()) {\n-                    delete(delta, account, provision).ifPresent(profile.getResults()::add);\n+                switch (delta.getDeltaType()) {\n+                    case CREATE:\n+                    case UPDATE:\n+                    case CREATE_OR_UPDATE:\n+                        switch (profile.getTask().getMatchingRule()) {\n+                            case UPDATE:\n+                                update(delta, account, provision).ifPresent(profile.getResults()::add);\n+                                break;\n+\n+                            case DEPROVISION:\n+                            case UNASSIGN:\n+                                deprovision(profile.getTask().getMatchingRule(), delta, account).\n+                                        ifPresent(profile.getResults()::add);\n+                                break;\n+\n+                            case LINK:\n+                            case UNLINK:\n+                                LOG.warn(\"{} not applicable to linked accounts, ignoring\",\n+                                        profile.getTask().getMatchingRule());\n+                                break;\n+\n+                            case IGNORE:\n+                                profile.getResults().add(ignore(delta, account, true));\n+                                break;\n+\n+                            default:\n+                            // do nothing\n+                        }\n+                        break;\n+\n+                    case DELETE:\n+                        delete(delta, account, provision).ifPresent(profile.getResults()::add);\n+                        break;\n+\n+                    default:\n                 }\n             } else {\n-                if (SyncDeltaType.CREATE_OR_UPDATE == delta.getDeltaType()) {\n-                    LinkedAccountTO accountTO = new LinkedAccountTO();\n-                    accountTO.setConnObjectKeyValue(delta.getUid().getUidValue());\n-                    accountTO.setResource(profile.getTask().getResource().getKey());\n-\n-                    switch (profile.getTask().getUnmatchingRule()) {\n-                        case ASSIGN:\n-                        case PROVISION:\n-                            provision(profile.getTask().getUnmatchingRule(), delta, user, accountTO, provision).\n-                                    ifPresent(profile.getResults()::add);\n-                            break;\n-\n-                        case IGNORE:\n-                            profile.getResults().add(ignore(delta, null, false));\n-                            break;\n-\n-                        default:\n-                        // do nothing\n-                    }\n-                } else if (SyncDeltaType.DELETE == delta.getDeltaType()) {\n-                    end(AnyTypeKind.USER.name(),\n-                            ResourceOperation.DELETE.name().toLowerCase(),\n-                            AuditElements.Result.SUCCESS,\n-                            null,\n-                            null,\n-                            delta);\n-                    LOG.debug(\"No match found for deletion\");\n+                switch (delta.getDeltaType()) {\n+                    case CREATE:\n+                    case UPDATE:\n+                    case CREATE_OR_UPDATE:\n+                        LinkedAccountTO accountTO = new LinkedAccountTO();\n+                        accountTO.setConnObjectKeyValue(delta.getUid().getUidValue());\n+                        accountTO.setResource(profile.getTask().getResource().getKey());\n+\n+                        switch (profile.getTask().getUnmatchingRule()) {\n+                            case ASSIGN:\n+                            case PROVISION:\n+                                provision(profile.getTask().getUnmatchingRule(), delta, user, accountTO, provision).\n+                                        ifPresent(profile.getResults()::add);\n+                                break;\n+\n+                            case IGNORE:\n+                                profile.getResults().add(ignore(delta, null, false));\n+                                break;\n+\n+                            default:\n+                            // do nothing\n+                        }\n+                        break;\n+\n+                    case DELETE:\n+                        end(AnyTypeKind.USER.name(),\n+                                ResourceOperation.DELETE.name().toLowerCase(),\n+                                AuditElements.Result.SUCCESS,\n+                                null,\n+                                null,\n+                                delta);\n+                        LOG.debug(\"No match found for deletion\");\n+                        break;\n+\n+                    default:\n                 }\n             }\n         }"}]}