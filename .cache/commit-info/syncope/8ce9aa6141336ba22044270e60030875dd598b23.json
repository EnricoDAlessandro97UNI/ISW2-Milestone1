{"sha":"8ce9aa6141336ba22044270e60030875dd598b23","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjhjZTlhYTYxNDEzMzZiYTIyMDQ0MjcwZTYwMDMwODc1ZGQ1OThiMjM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-08-11T12:55:35Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-08-11T12:55:35Z"},"message":"[SYNCOPE-1579] Finalizing SAML 2.0 logout","tree":{"sha":"b561c58efcb56db2f2d9a61cd2e24ce89e9701d3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b561c58efcb56db2f2d9a61cd2e24ce89e9701d3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8ce9aa6141336ba22044270e60030875dd598b23","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8ce9aa6141336ba22044270e60030875dd598b23","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8ce9aa6141336ba22044270e60030875dd598b23","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8ce9aa6141336ba22044270e60030875dd598b23/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"5fc27bf56f26a91a223b637090b9119822b3d0d5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5fc27bf56f26a91a223b637090b9119822b3d0d5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5fc27bf56f26a91a223b637090b9119822b3d0d5"}],"stats":{"total":405,"additions":279,"deletions":126},"files":[{"sha":"2beae45bb20cbb7c3ebf1e332e9af03115c026ee","filename":".travis.yml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8ce9aa6141336ba22044270e60030875dd598b23/.travis.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8ce9aa6141336ba22044270e60030875dd598b23/.travis.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.travis.yml?ref=8ce9aa6141336ba22044270e60030875dd598b23","patch":"@@ -120,6 +120,6 @@ jobs:\n       name: \"Integration Tests: SRA and WA\"\n       script: mvn -f fit/wa-reference/pom.xml verify -Dinvoker.streamLogs=true -Dmodernizer.skip=true -Dianal.skip=true -Drat.skip=true -Dcheckstyle.skip=true -Djacoco.skip=true\n       after_failure:\n+       - cat fit/wa-reference/target/log/*\n        - cat fit/core-reference/target/log/*\n-       - cat fit/core-reference/target/failsafe-reports/org.apache.syncope.fit.*-output.txt\n     #####################################################"},{"sha":"2f1ff7c7401b975fc6215ebb36fc229d98314db2","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/SAML2SRAITCase.java","status":"modified","additions":1,"deletions":12,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8ce9aa6141336ba22044270e60030875dd598b23/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8ce9aa6141336ba22044270e60030875dd598b23/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java?ref=8ce9aa6141336ba22044270e60030875dd598b23","patch":"@@ -22,7 +22,6 @@\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n@@ -265,17 +264,7 @@ public void web() throws IOException {\n         get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n         response = httpclient.execute(get, context);\n \n-        // 3b. post SAML response\n-        // this is missing as currently WA does not responde with form for SP's SingleLogoutService\n+        // 3b. check logout\n         checkLogout(response);\n     }\n-\n-    @Override\n-    protected void checkLogout(final CloseableHttpResponse response) throws IOException {\n-        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n-\n-        String responseBody = EntityUtils.toString(response.getEntity());\n-        assertTrue(responseBody.contains(\"Logout successful\"));\n-        assertTrue(responseBody.contains(\"have successfully logged out of the Central Authentication Service\"));\n-    }\n }"},{"sha":"70fd4d696f6c5cd0df5fd3e936b5b7bc626ae1f6","filename":"fit/wa-reference/src/test/resources/application-saml2.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8ce9aa6141336ba22044270e60030875dd598b23/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Fapplication-saml2.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8ce9aa6141336ba22044270e60030875dd598b23/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Fapplication-saml2.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Fapplication-saml2.properties?ref=8ce9aa6141336ba22044270e60030875dd598b23","patch":"@@ -17,7 +17,7 @@\n am.type=SAML2\n am.saml2.sp.authnrequest.binding=POST\n am.saml2.sp.logout.request.binding=POST\n-am.saml2.sp.logout.response.binding=POST\n+am.saml2.sp.logout.response.binding=REDIRECT\n am.saml2.sp.entityId=http://localhost:8080\n am.saml2.sp.skew=300\n am.saml2.idp=http://localhost:9080/syncope-wa/idp/metadata"},{"sha":"eeacaefdfb36aea2bea012c855b9c6d0a2485cfc","filename":"sra/src/main/java/org/apache/syncope/sra/SecurityConfig.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java?ref=8ce9aa6141336ba22044270e60030875dd598b23","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.sra.security.oauth2.OAuth2SecurityConfigUtils;\n import org.apache.syncope.sra.security.PublicRouteMatcher;\n import org.apache.syncope.sra.security.cas.CASSecurityConfigUtils;\n+import org.apache.syncope.sra.security.pac4j.NoOpLogoutHandler;\n import org.apache.syncope.sra.security.saml2.SAML2BindingType;\n import org.apache.syncope.sra.security.saml2.SAML2MetadataEndpoint;\n import org.apache.syncope.sra.security.saml2.SAML2SecurityConfigUtils;\n@@ -229,11 +230,12 @@ public SAML2Client saml2Client() {\n         cfg.setAuthnRequestSigned(true);\n         cfg.setSpLogoutRequestSigned(true);\n         cfg.setAcceptedSkew(env.getProperty(\"am.saml2.sp.skew\", int.class));\n+        cfg.setLogoutHandler(new NoOpLogoutHandler());\n \n         SAML2Client saml2Client = new SAML2Client(cfg);\n         saml2Client.setName(AMType.SAML2.name());\n         saml2Client.setCallbackUrl(env.getProperty(\"am.saml2.sp.entityId\")\n-                + SAML2WebSsoAuthenticationWebFilter.DEFAULT_FILTER_PROCESSES_URI);\n+                + SAML2WebSsoAuthenticationWebFilter.FILTER_PROCESSES_URI);\n         saml2Client.setCallbackUrlResolver(new NoParameterCallbackUrlResolver());\n         saml2Client.init();\n "},{"sha":"e37082645a528335c59de63ad52a827de0f5cfe8","filename":"sra/src/main/java/org/apache/syncope/sra/security/pac4j/NoOpLogoutHandler.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FNoOpLogoutHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FNoOpLogoutHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FNoOpLogoutHandler.java?ref=8ce9aa6141336ba22044270e60030875dd598b23","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security.pac4j;\n+\n+import org.pac4j.core.logout.handler.LogoutHandler;\n+\n+public class NoOpLogoutHandler implements LogoutHandler<ServerWebExchangeContext> {\n+\n+}"},{"sha":"e9629f40404a18a25b7529566d9e3d1496741833","filename":"sra/src/main/java/org/apache/syncope/sra/security/pac4j/NoOpSessionStore.java","status":"renamed","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FNoOpSessionStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FNoOpSessionStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FNoOpSessionStore.java?ref=8ce9aa6141336ba22044270e60030875dd598b23","patch":"@@ -20,43 +20,44 @@\n \n import java.util.Optional;\n import org.pac4j.core.context.session.SessionStore;\n-import org.springframework.web.server.WebSession;\n \n-public class WebSessionStore implements SessionStore<ServerWebExchangeContext> {\n+public final class NoOpSessionStore implements SessionStore<ServerWebExchangeContext> {\n \n-    private final WebSession webSession;\n+    public static final NoOpSessionStore INSTANCE = new NoOpSessionStore();\n \n-    public WebSessionStore(final WebSession webSession) {\n-        this.webSession = webSession;\n+    private NoOpSessionStore() {\n+        // private constructor for singleton\n     }\n \n     @Override\n     public String getOrCreateSessionId(final ServerWebExchangeContext context) {\n-        return this.webSession.getId();\n+        return \"<NO_KEY>\";\n     }\n \n     @Override\n     public Optional<Object> get(final ServerWebExchangeContext context, final String key) {\n-        return Optional.ofNullable(this.webSession.getAttribute(key));\n+        return Optional.empty();\n     }\n \n     @Override\n     public void set(final ServerWebExchangeContext context, final String key, final Object value) {\n+        // nothing to do\n     }\n \n     @Override\n     public boolean destroySession(final ServerWebExchangeContext context) {\n-        return false;\n+        return true;\n     }\n \n     @Override\n-    public Optional<WebSession> getTrackableSession(final ServerWebExchangeContext context) {\n-        return Optional.ofNullable(this.webSession);\n+    public Optional<?> getTrackableSession(final ServerWebExchangeContext context) {\n+        return Optional.empty();\n     }\n \n     @Override\n     public Optional<SessionStore<ServerWebExchangeContext>> buildFromTrackableSession(\n-            final ServerWebExchangeContext context, final Object trackableSession) {\n+            final ServerWebExchangeContext context,\n+            final Object trackableSession) {\n \n         return Optional.empty();\n     }","previous_filename":"sra/src/main/java/org/apache/syncope/sra/security/pac4j/WebSessionStore.java"},{"sha":"c56c23f701104f43bc471d6a521d8108d7b69b94","filename":"sra/src/main/java/org/apache/syncope/sra/security/pac4j/RedirectionActionUtils.java","status":"renamed","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FRedirectionActionUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FRedirectionActionUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FRedirectionActionUtils.java?ref=8ce9aa6141336ba22044270e60030875dd598b23","patch":"@@ -16,27 +16,19 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.sra.security.saml2;\n+package org.apache.syncope.sra.security.pac4j;\n \n-import org.apache.syncope.sra.security.pac4j.ServerWebExchangeContext;\n import java.net.URI;\n import org.pac4j.core.exception.http.RedirectionAction;\n import org.pac4j.core.exception.http.WithContentAction;\n import org.pac4j.core.exception.http.WithLocationAction;\n-import org.pac4j.saml.client.SAML2Client;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n import reactor.core.publisher.Mono;\n \n-abstract class SAML2RequestGenerator {\n+public final class RedirectionActionUtils {\n \n-    protected final SAML2Client saml2Client;\n-\n-    protected SAML2RequestGenerator(final SAML2Client saml2Client) {\n-        this.saml2Client = saml2Client;\n-    }\n-\n-    protected Mono<Void> handle(\n+    public static Mono<Void> handle(\n             final RedirectionAction action,\n             final ServerWebExchangeContext swec) {\n \n@@ -62,4 +54,8 @@ protected Mono<Void> handle(\n             throw new IllegalArgumentException(\"Unsupported Action: \" + action.getClass().getName());\n         }\n     }\n+\n+    private RedirectionActionUtils() {\n+        // private constructor for static utility class\n+    }\n }","previous_filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2RequestGenerator.java"},{"sha":"a5ed2338fd97ae0af394011085807f15dd029f2d","filename":"sra/src/main/java/org/apache/syncope/sra/security/pac4j/ServerWebExchangeContext.java","status":"modified","additions":3,"deletions":26,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FServerWebExchangeContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FServerWebExchangeContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FServerWebExchangeContext.java?ref=8ce9aa6141336ba22044270e60030875dd598b23","patch":"@@ -33,52 +33,29 @@\n import org.springframework.http.ResponseCookie;\n import org.springframework.util.MultiValueMap;\n import org.springframework.web.server.ServerWebExchange;\n-import org.springframework.web.server.WebSession;\n import org.springframework.web.util.UriComponentsBuilder;\n \n public class ServerWebExchangeContext implements WebContext {\n \n     private final ServerWebExchange exchange;\n \n-    private WebSessionStore sessionStore;\n-\n     private MultiValueMap<String, String> form;\n \n     private String body;\n \n     /**\n-     * Build a WebFlux context from the current exchange and web session.\n-     *\n-     * @param exchange the current exchange\n-     * @param webSession the current web session\n-     */\n-    public ServerWebExchangeContext(final ServerWebExchange exchange, final WebSession webSession) {\n-        this(exchange, new WebSessionStore(webSession));\n-    }\n-\n-    /**\n-     * Build a WebFlux context from the current exhange and from a session store.\n+     * Build a WebFlux context from the current exchange.\n      *\n      * @param exchange the current exchange\n-     * @param sessionStore the session store to use\n      */\n-    public ServerWebExchangeContext(\n-            final ServerWebExchange exchange,\n-            final WebSessionStore sessionStore) {\n-\n+    public ServerWebExchangeContext(final ServerWebExchange exchange) {\n         CommonHelper.assertNotNull(\"exchange\", exchange);\n-        CommonHelper.assertNotNull(\"sessionStore\", sessionStore);\n         this.exchange = exchange;\n-        this.sessionStore = sessionStore;\n-    }\n-\n-    public WebSessionStore getNativeSessionStore() {\n-        return this.sessionStore;\n     }\n \n     @Override\n     public SessionStore<ServerWebExchangeContext> getSessionStore() {\n-        return this.sessionStore;\n+        return NoOpSessionStore.INSTANCE;\n     }\n \n     @Override"},{"sha":"b5f10c41d24d30301ceb0f0f43861077d4814e50","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2AnonymousWebFilter.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2AnonymousWebFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2AnonymousWebFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2AnonymousWebFilter.java?ref=8ce9aa6141336ba22044270e60030875dd598b23","patch":"@@ -36,7 +36,8 @@ public class SAML2AnonymousWebFilter implements WebFilter {\n     public SAML2AnonymousWebFilter(final PublicRouteMatcher publicRouteMatcher) {\n         this.matcher = ServerWebExchangeMatchers.matchers(\n                 publicRouteMatcher,\n-                SessionUtils.authInSession());\n+                SessionUtils.authInSession(),\n+                SAML2LogoutResponseWebFilter.MATCHER);\n     }\n \n     @Override"},{"sha":"79733ef10dc386db5eb7de0b9082807803424711","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2LogoutResponseWebFilter.java","status":"added","additions":152,"deletions":0,"changes":152,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2LogoutResponseWebFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2LogoutResponseWebFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2LogoutResponseWebFilter.java?ref=8ce9aa6141336ba22044270e60030875dd598b23","patch":"@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security.saml2;\n+\n+import java.util.Optional;\n+import org.apache.syncope.sra.SessionConfig;\n+import org.apache.syncope.sra.security.pac4j.RedirectionActionUtils;\n+import org.apache.syncope.sra.security.pac4j.ServerWebExchangeContext;\n+import org.pac4j.core.exception.http.OkAction;\n+import org.pac4j.core.exception.http.RedirectionAction;\n+import org.pac4j.core.util.Pac4jConstants;\n+import org.pac4j.saml.client.SAML2Client;\n+import org.pac4j.saml.context.SAML2MessageContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.cache.CacheManager;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.security.web.server.WebFilterExchange;\n+import org.springframework.security.web.server.authentication.logout.ServerLogoutSuccessHandler;\n+import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n+import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult;\n+import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers;\n+import org.springframework.web.server.ServerWebExchange;\n+import org.springframework.web.server.WebFilter;\n+import org.springframework.web.server.WebFilterChain;\n+import reactor.core.publisher.Mono;\n+\n+public class SAML2LogoutResponseWebFilter implements WebFilter {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SAML2LogoutResponseWebFilter.class);\n+\n+    public static final ServerWebExchangeMatcher MATCHER =\n+            ServerWebExchangeMatchers.pathMatchers(\"/logout/saml2/sso\");\n+\n+    private static class ServerWebExchangeLogoutContext extends ServerWebExchangeContext {\n+\n+        ServerWebExchangeLogoutContext(final ServerWebExchange exchange) {\n+            super(exchange);\n+        }\n+\n+        @Override\n+        public Optional<String> getRequestParameter(final String name) {\n+            return Pac4jConstants.LOGOUT_ENDPOINT_PARAMETER.equals(name)\n+                    ? Optional.of(\"true\")\n+                    : super.getRequestParameter(name);\n+        }\n+    }\n+\n+    private final SAML2Client saml2Client;\n+\n+    private final ServerLogoutSuccessHandler logoutSuccessHandler;\n+\n+    private final CacheManager cacheManager;\n+\n+    public SAML2LogoutResponseWebFilter(\n+            final SAML2Client saml2Client,\n+            final SAML2ServerLogoutSuccessHandler logoutSuccessHandler,\n+            final CacheManager cacheManager) {\n+\n+        this.saml2Client = saml2Client;\n+        this.logoutSuccessHandler = logoutSuccessHandler;\n+        this.cacheManager = cacheManager;\n+    }\n+\n+    private Mono<Void> handleLogoutResponse(\n+            final ServerWebExchange exchange, final WebFilterChain chain, final ServerWebExchangeContext swec) {\n+\n+        try {\n+            SAML2MessageContext ctx = saml2Client.getContextProvider().buildContext(swec);\n+            saml2Client.getLogoutProfileHandler().receive(ctx);\n+        } catch (OkAction e) {\n+            LOG.debug(\"LogoutResponse was actually validated but no postLogoutURL was set\", e);\n+        } catch (Exception e) {\n+            LOG.error(\"Could not validate LogoutResponse\", e);\n+        }\n+\n+        return logoutSuccessHandler.onLogoutSuccess(new WebFilterExchange(exchange, chain), null);\n+    }\n+\n+    private Mono<Void> handleLogoutRequest(\n+            final ServerWebExchange exchange, final WebFilterChain chain, final ServerWebExchangeContext swec) {\n+\n+        return exchange.getSession().\n+                switchIfEmpty(chain.filter(exchange).then(Mono.empty())).\n+                flatMap(session -> {\n+                    cacheManager.getCache(SessionConfig.DEFAULT_CACHE).evictIfPresent(session.getId());\n+\n+                    return session.invalidate().then(Mono.defer(() -> {\n+                        try {\n+                            saml2Client.getCredentialsExtractor().extract(swec);\n+                        } catch (RedirectionAction action) {\n+                            return RedirectionActionUtils.handle(action, swec);\n+                        }\n+\n+                        return chain.filter(exchange).then(Mono.empty());\n+                    }));\n+                });\n+    }\n+\n+    private Mono<Void> handleGET(final ServerWebExchange exchange, final WebFilterChain chain) {\n+        if (exchange.getRequest().getQueryParams().getFirst(\"SAMLResponse\") != null) {\n+            return handleLogoutResponse(exchange, chain, new ServerWebExchangeContext(exchange));\n+        } else if (exchange.getRequest().getQueryParams().getFirst(\"SAMLRequest\") != null) {\n+            return handleLogoutRequest(exchange, chain, new ServerWebExchangeLogoutContext(exchange));\n+        }\n+\n+        return chain.filter(exchange).then(Mono.empty());\n+    }\n+\n+    private Mono<Void> handlePOST(final ServerWebExchange exchange, final WebFilterChain chain) {\n+        return exchange.getFormData().flatMap(form -> {\n+            if (form.containsKey(\"SAMLResponse\")) {\n+                return handleLogoutResponse(exchange, chain, new ServerWebExchangeContext(exchange).setForm(form));\n+            } else if (form.containsKey(\"SAMLRequest\")) {\n+                return handleLogoutRequest(exchange, chain, new ServerWebExchangeLogoutContext(exchange).setForm(form));\n+            }\n+\n+            return chain.filter(exchange).then(Mono.empty());\n+        });\n+    }\n+\n+    @Override\n+    public Mono<Void> filter(final ServerWebExchange exchange, final WebFilterChain chain) {\n+        return MATCHER.matches(exchange).\n+                filter(MatchResult::isMatch).\n+                switchIfEmpty(chain.filter(exchange).then(Mono.empty())).\n+                flatMap(matchResult -> {\n+                    return exchange.getRequest().getMethod() == HttpMethod.GET\n+                            ? handleGET(exchange, chain)\n+                            : exchange.getRequest().getMethod() == HttpMethod.POST\n+                            ? handlePOST(exchange, chain)\n+                            : Mono.error(() -> new UnsupportedOperationException(\n+                            \"Unsupported HTTP method: \" + exchange.getRequest().getMethod()));\n+                });\n+    }\n+}"},{"sha":"6c8efa602ede223323f5a4daf4e0bba33c594ffa","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2MetadataEndpoint.java","status":"modified","additions":20,"deletions":3,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2MetadataEndpoint.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2MetadataEndpoint.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2MetadataEndpoint.java?ref=8ce9aa6141336ba22044270e60030875dd598b23","patch":"@@ -19,8 +19,12 @@\n package org.apache.syncope.sra.security.saml2;\n \n import com.google.common.net.HttpHeaders;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.sra.SecurityConfig;\n+import org.opensaml.saml.common.xml.SAMLConstants;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n import org.pac4j.saml.client.SAML2Client;\n+import org.pac4j.saml.exceptions.SAMLException;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n@@ -38,17 +42,30 @@ public class SAML2MetadataEndpoint {\n \n     public static final String METADATA_URL = \"/saml2/metadata\";\n \n-    private final SAML2Client saml2Client;\n+    private final String metadata;\n \n     public SAML2MetadataEndpoint(final SAML2Client saml2Client) {\n-        this.saml2Client = saml2Client;\n+        EntityDescriptor entityDescriptor = (EntityDescriptor) saml2Client.getServiceProviderMetadataResolver().\n+                getEntityDescriptorElement();\n+        entityDescriptor.getSPSSODescriptor(SAMLConstants.SAML20P_NS).getSingleLogoutServices().\n+                removeIf(slo -> !saml2Client.getConfiguration().\n+                getSpLogoutResponseBindingType().equals(slo.getBinding()));\n+        entityDescriptor.getSPSSODescriptor(SAMLConstants.SAML20P_NS).getSingleLogoutServices().\n+                forEach(slo -> slo.setLocation(\n+                StringUtils.substringBefore(slo.getLocation(), \"?\").replace(\"login\", \"logout\")));\n+\n+        try {\n+            this.metadata = saml2Client.getConfiguration().toMetadataGenerator().getMetadata(entityDescriptor);\n+        } catch (Exception e) {\n+            throw new SAMLException(\"Unable to fetch metadata\", e);\n+        }\n     }\n \n     @GetMapping(produces = { MediaType.APPLICATION_XML_VALUE })\n     @ResponseBody\n     public Mono<ResponseEntity<String>> metadata(final ServerHttpRequest request) {\n         return Mono.just(ResponseEntity.ok().\n                 header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML_VALUE).\n-                body(saml2Client.getServiceProviderMetadataResolver().getMetadata()));\n+                body(metadata));\n     }\n }"},{"sha":"973bd20432c4bbcfe31c8287d5882f5016662615","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2RequestServerLogoutHandler.java","status":"renamed","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2RequestServerLogoutHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2RequestServerLogoutHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2RequestServerLogoutHandler.java?ref=8ce9aa6141336ba22044270e60030875dd598b23","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.sra.security.saml2;\n \n+import org.apache.syncope.sra.security.pac4j.RedirectionActionUtils;\n import org.apache.syncope.sra.SessionConfig;\n import org.apache.syncope.sra.security.pac4j.ServerWebExchangeContext;\n import org.pac4j.saml.client.SAML2Client;\n@@ -30,14 +31,16 @@\n import org.springframework.security.web.server.authentication.logout.ServerLogoutHandler;\n import reactor.core.publisher.Mono;\n \n-public class SAML2ServerLogoutHandler extends SAML2RequestGenerator implements ServerLogoutHandler {\n+public class SAML2RequestServerLogoutHandler implements ServerLogoutHandler {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SAML2ServerLogoutHandler.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(SAML2RequestServerLogoutHandler.class);\n+\n+    private final SAML2Client saml2Client;\n \n     private final CacheManager cacheManager;\n \n-    public SAML2ServerLogoutHandler(final SAML2Client saml2Client, final CacheManager cacheManager) {\n-        super(saml2Client);\n+    public SAML2RequestServerLogoutHandler(final SAML2Client saml2Client, final CacheManager cacheManager) {\n+        this.saml2Client = saml2Client;\n         this.cacheManager = cacheManager;\n     }\n \n@@ -50,12 +53,12 @@ public Mono<Void> logout(final WebFilterExchange exchange, final Authentication\n                     LOG.debug(\"Creating SAML2 SP Logout Request for IDP[{}] and Profile[{}]\",\n                             saml2Client.getIdentityProviderResolvedEntityId(), credentials.getUserProfile());\n \n-                    ServerWebExchangeContext swec = new ServerWebExchangeContext(exchange.getExchange(), session);\n+                    ServerWebExchangeContext swec = new ServerWebExchangeContext(exchange.getExchange());\n \n                     cacheManager.getCache(SessionConfig.DEFAULT_CACHE).evictIfPresent(session.getId());\n                     return session.invalidate().then(\n                             saml2Client.getLogoutAction(swec, credentials.getUserProfile(), null).\n-                                    map(action -> handle(action, swec)).\n+                                    map(action -> RedirectionActionUtils.handle(action, swec)).\n                                     orElseThrow(() -> new IllegalStateException(\"No action generated\")));\n                 }).onErrorResume(Mono::error);\n     }","previous_filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2ServerLogoutHandler.java"},{"sha":"a7be69c990b8aa6914dc2e75e30f5bcdbdcb8322","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2SecurityConfigUtils.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2SecurityConfigUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2SecurityConfigUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2SecurityConfigUtils.java?ref=8ce9aa6141336ba22044270e60030875dd598b23","patch":"@@ -74,14 +74,18 @@ public static void forLogout(\n \n         LogoutWebFilter logoutWebFilter = new LogoutWebFilter();\n         logoutWebFilter.setRequiresLogoutMatcher(logoutRouteMatcher);\n-\n-        logoutWebFilter.setLogoutHandler(new SAML2ServerLogoutHandler(saml2Client, cacheManager));\n+        logoutWebFilter.setLogoutHandler(new SAML2RequestServerLogoutHandler(saml2Client, cacheManager));\n+        logoutWebFilter.setLogoutSuccessHandler((exchange, authentication) -> Mono.empty());\n \n         try {\n-            SAML2ServerLogoutSuccessHandler handler = ApplicationContextUtils.getOrCreateBean(ctx,\n+            SAML2ServerLogoutSuccessHandler logoutSuccessHandler = ApplicationContextUtils.getOrCreateBean(\n+                    ctx,\n                     SAML2ServerLogoutSuccessHandler.class.getName(),\n                     SAML2ServerLogoutSuccessHandler.class);\n-            logoutWebFilter.setLogoutSuccessHandler(handler);\n+\n+            SAML2LogoutResponseWebFilter logoutResponseWebFilter =\n+                    new SAML2LogoutResponseWebFilter(saml2Client, logoutSuccessHandler, cacheManager);\n+            builder.and().addFilterAt(logoutResponseWebFilter, SecurityWebFiltersOrder.LOGOUT);\n         } catch (ClassNotFoundException e) {\n             LOG.error(\"While creating instance of {}\", SAML2ServerLogoutSuccessHandler.class.getName(), e);\n         }"},{"sha":"f10e388207d8b2fbffe57159f935c3763244f4ca","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2ServerLogoutSuccessHandler.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2ServerLogoutSuccessHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2ServerLogoutSuccessHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2ServerLogoutSuccessHandler.java?ref=8ce9aa6141336ba22044270e60030875dd598b23","patch":"@@ -27,7 +27,6 @@ public class SAML2ServerLogoutSuccessHandler extends AbstractServerLogoutSuccess\n \n     @Override\n     public Mono<Void> onLogoutSuccess(final WebFilterExchange exchange, final Authentication authentication) {\n-        return Mono.just(authentication).\n-                flatMap(auth -> redirectStrategy.sendRedirect(exchange.getExchange(), getPostLogout(exchange)));\n+        return redirectStrategy.sendRedirect(exchange.getExchange(), getPostLogout(exchange));\n     }\n }"},{"sha":"14a5b8dc4caa64a585a4ef4467f5e4a8edf70574","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2WebSsoAuthenticationRequestWebFilter.java","status":"modified","additions":13,"deletions":15,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationRequestWebFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationRequestWebFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationRequestWebFilter.java?ref=8ce9aa6141336ba22044270e60030875dd598b23","patch":"@@ -18,49 +18,47 @@\n  */\n package org.apache.syncope.sra.security.saml2;\n \n+import org.apache.syncope.sra.security.pac4j.RedirectionActionUtils;\n import org.apache.syncope.sra.security.pac4j.ServerWebExchangeContext;\n import org.pac4j.saml.client.SAML2Client;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n+import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult;\n import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers;\n-import org.springframework.util.Assert;\n import org.springframework.web.server.ServerWebExchange;\n import org.springframework.web.server.WebFilter;\n import org.springframework.web.server.WebFilterChain;\n import reactor.core.publisher.Mono;\n \n-public class SAML2WebSsoAuthenticationRequestWebFilter extends SAML2RequestGenerator implements WebFilter {\n+public class SAML2WebSsoAuthenticationRequestWebFilter implements WebFilter {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SAML2WebSsoAuthenticationRequestWebFilter.class);\n \n     public static final String AUTHENTICATE_URL = \"/saml2/authenticate\";\n \n-    private ServerWebExchangeMatcher redirectMatcher = ServerWebExchangeMatchers.pathMatchers(AUTHENTICATE_URL);\n+    private static final ServerWebExchangeMatcher MATCHER =\n+            ServerWebExchangeMatchers.pathMatchers(AUTHENTICATE_URL);\n \n-    public SAML2WebSsoAuthenticationRequestWebFilter(final SAML2Client saml2Client) {\n-        super(saml2Client);\n-    }\n+    private final SAML2Client saml2Client;\n \n-    public void setRedirectMatcher(final ServerWebExchangeMatcher redirectMatcher) {\n-        Assert.notNull(redirectMatcher, \"redirectMatcher cannot be null\");\n-        this.redirectMatcher = redirectMatcher;\n+    public SAML2WebSsoAuthenticationRequestWebFilter(final SAML2Client saml2Client) {\n+        this.saml2Client = saml2Client;\n     }\n \n     @Override\n     public Mono<Void> filter(final ServerWebExchange exchange, final WebFilterChain chain) {\n-        return redirectMatcher.matches(exchange).\n-                filter(matchResult -> matchResult.isMatch()).\n+        return MATCHER.matches(exchange).\n+                filter(MatchResult::isMatch).\n                 switchIfEmpty(chain.filter(exchange).then(Mono.empty())).\n-                flatMap(matchResult -> exchange.getSession()).\n-                flatMap(session -> {\n+                flatMap(matchResult -> {\n                     LOG.debug(\"Creating SAML2 SP Authentication Request for IDP[{}]\",\n                             saml2Client.getIdentityProviderResolvedEntityId());\n \n-                    ServerWebExchangeContext swec = new ServerWebExchangeContext(exchange, session);\n+                    ServerWebExchangeContext swec = new ServerWebExchangeContext(exchange);\n \n                     return saml2Client.getRedirectionAction(swec).\n-                            map(action -> handle(action, swec)).\n+                            map(action -> RedirectionActionUtils.handle(action, swec)).\n                             orElseThrow(() -> new IllegalStateException(\"No action generated\"));\n                 }).onErrorResume(Mono::error);\n     }"},{"sha":"5dc59b391a4cd46f902a060cb9e84368339be2c8","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2WebSsoAuthenticationWebFilter.java","status":"modified","additions":7,"deletions":18,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationWebFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationWebFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationWebFilter.java?ref=8ce9aa6141336ba22044270e60030875dd598b23","patch":"@@ -22,7 +22,6 @@\n import org.apache.syncope.sra.security.pac4j.ServerWebExchangeContext;\n import org.apache.syncope.sra.security.web.server.DoNothingIfCommittedServerRedirectStrategy;\n import org.apache.syncope.sra.session.SessionUtils;\n-import org.pac4j.core.util.Pac4jConstants;\n import org.pac4j.saml.client.SAML2Client;\n import org.pac4j.saml.credentials.SAML2Credentials;\n import org.springframework.security.authentication.ReactiveAuthenticationManager;\n@@ -32,7 +31,6 @@\n import org.springframework.security.web.server.authentication.AuthenticationWebFilter;\n import org.springframework.security.web.server.authentication.ServerAuthenticationConverter;\n import org.springframework.security.web.server.authentication.ServerAuthenticationSuccessHandler;\n-import org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher;\n import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers;\n import org.springframework.web.server.ServerWebExchange;\n@@ -41,16 +39,12 @@\n \n public class SAML2WebSsoAuthenticationWebFilter extends AuthenticationWebFilter {\n \n-    public static final String DEFAULT_FILTER_PROCESSES_URI = \"/login/saml2/sso\";\n+    public static final String FILTER_PROCESSES_URI = \"/login/saml2/sso\";\n \n-    private final SAML2Client saml2Client;\n+    private static final ServerWebExchangeMatcher MATCHER =\n+            ServerWebExchangeMatchers.pathMatchers(FILTER_PROCESSES_URI);\n \n-    private ServerWebExchangeMatcher matcher = new AndServerWebExchangeMatcher(\n-            ServerWebExchangeMatchers.pathMatchers(DEFAULT_FILTER_PROCESSES_URI),\n-            exchange -> exchange.getRequest().getQueryParams().\n-                    containsKey(Pac4jConstants.LOGOUT_ENDPOINT_PARAMETER)\n-            ? ServerWebExchangeMatcher.MatchResult.notMatch()\n-            : ServerWebExchangeMatcher.MatchResult.match());\n+    private final SAML2Client saml2Client;\n \n     public SAML2WebSsoAuthenticationWebFilter(\n             final ReactiveAuthenticationManager authenticationManager,\n@@ -67,10 +61,6 @@ public SAML2WebSsoAuthenticationWebFilter(\n         setAuthenticationSuccessHandler(redirectToInitialRequestURI());\n     }\n \n-    public void setMatcher(final ServerWebExchangeMatcher matcher) {\n-        this.matcher = matcher;\n-    }\n-\n     @Override\n     public Mono<Void> filter(final ServerWebExchange exchange, final WebFilterChain chain) {\n         return super.filter(exchange, chain).then(Mono.defer(exchange.getResponse()::setComplete));\n@@ -85,10 +75,9 @@ private ServerWebExchangeMatcher matchSamlResponse() {\n \n     private ServerAuthenticationConverter convertSamlResponse() {\n         return exchange -> exchange.getFormData().\n-                flatMap(form -> this.matcher.matches(exchange).\n-                flatMap(matchResult -> exchange.getSession()).\n-                flatMap(session -> {\n-                    ServerWebExchangeContext swec = new ServerWebExchangeContext(exchange, session).setForm(form);\n+                flatMap(form -> this.MATCHER.matches(exchange).\n+                flatMap(matchResult -> {\n+                    ServerWebExchangeContext swec = new ServerWebExchangeContext(exchange).setForm(form);\n \n                     SAML2Credentials credentials = saml2Client.getCredentialsExtractor().extract(swec).\n                             orElseThrow(() -> new IllegalStateException(\"No AuthnResponse found\"));"},{"sha":"c0293374ac6ea3f9830005e72bac0020cdfb4d27","filename":"sra/src/test/resources/debug/application-debug.properties","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fapplication-debug.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8ce9aa6141336ba22044270e60030875dd598b23/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fapplication-debug.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fapplication-debug.properties?ref=8ce9aa6141336ba22044270e60030875dd598b23","patch":"@@ -30,20 +30,20 @@\n #am.oauth2.client.id=oauth2TestClientId\n #am.oauth2.client.secret=oauth2TestClientSecret\n \n-#am.type=SAML2\n-#am.saml2.sp.authnrequest.binding=POST\n-#am.saml2.sp.logout.request.binding=POST\n-#am.saml2.sp.logout.response.binding=POST\n-#am.saml2.sp.entityId=http://localhost:8080\n-#am.saml2.sp.skew=300\n-#am.saml2.idp=http://localhost:9080/syncope-wa/idp/metadata\n-#am.saml2.keystore=classpath:/saml.keystore.jks\n-#am.saml2.keystore.type=jks\n-#am.saml2.keystore.storepass=changeit\n-#am.saml2.keystore.keypass=changeit\n+am.type=SAML2\n+am.saml2.sp.authnrequest.binding=POST\n+am.saml2.sp.logout.request.binding=POST\n+am.saml2.sp.logout.response.binding=REDIRECT\n+am.saml2.sp.entityId=http://localhost:8080\n+am.saml2.sp.skew=300\n+am.saml2.idp=http://localhost:9080/syncope-wa/idp/metadata\n+am.saml2.keystore=classpath:/saml.keystore.jks\n+am.saml2.keystore.type=jks\n+am.saml2.keystore.storepass=changeit\n+am.saml2.keystore.keypass=changeit\n \n-am.type=CAS\n-am.cas.server.name=http://localhost:80\n-am.cas.url.prefix=http://localhost:9080/syncope-wa/\n+#am.type=CAS\n+#am.cas.server.name=http://localhost:80\n+#am.cas.url.prefix=http://localhost:9080/syncope-wa/\n \n global.postLogout=http://localhost:8080/logout"}]}