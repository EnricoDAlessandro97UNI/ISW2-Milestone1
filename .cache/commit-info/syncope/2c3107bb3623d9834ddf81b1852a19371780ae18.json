{"sha":"2c3107bb3623d9834ddf81b1852a19371780ae18","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjJjMzEwN2JiMzYyM2Q5ODM0ZGRmODFiMTg1MmExOTM3MTc4MGFlMTg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-09-02T10:55:28Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-09-02T10:55:28Z"},"message":"Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/syncope","tree":{"sha":"6c5d79e3e63d620e37c43255fc7c0d1225957653","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/6c5d79e3e63d620e37c43255fc7c0d1225957653"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2c3107bb3623d9834ddf81b1852a19371780ae18","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2c3107bb3623d9834ddf81b1852a19371780ae18","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2c3107bb3623d9834ddf81b1852a19371780ae18","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2c3107bb3623d9834ddf81b1852a19371780ae18/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"1fe1c4b0a3d4ded482d669bbd435672992a4c141","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1fe1c4b0a3d4ded482d669bbd435672992a4c141","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1fe1c4b0a3d4ded482d669bbd435672992a4c141"},{"sha":"8a1abd4e7c8dd70b01dbbc050f6b5fe680ae7554","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8a1abd4e7c8dd70b01dbbc050f6b5fe680ae7554","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8a1abd4e7c8dd70b01dbbc050f6b5fe680ae7554"}],"stats":{"total":337,"additions":251,"deletions":86},"files":[{"sha":"6649524d6da25af1734daa0a4fd5dfb073bdbf64","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/RestClientExceptionMapper.java","status":"modified","additions":59,"deletions":31,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c3107bb3623d9834ddf81b1852a19371780ae18/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c3107bb3623d9834ddf81b1852a19371780ae18/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java?ref=2c3107bb3623d9834ddf81b1852a19371780ae18","patch":"@@ -19,10 +19,12 @@\n package org.apache.syncope.client.lib;\n \n import java.security.AccessControlException;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.ext.ExceptionMapper;\n import javax.ws.rs.ext.Provider;\n@@ -31,6 +33,7 @@\n import org.apache.cxf.jaxrs.client.ResponseExceptionMapper;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.ErrorTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.slf4j.Logger;\n@@ -55,11 +58,9 @@ public Exception fromResponse(final Response response) {\n         SyncopeClientCompositeException scce = checkSyncopeClientCompositeException(response);\n         if (scce != null) {\n             // 1. Check for client (possibly composite) exception in HTTP header\n-            if (scce.getExceptions().size() == 1) {\n-                ex = scce.getExceptions().iterator().next();\n-            } else {\n-                ex = scce;\n-            }\n+            ex = scce.getExceptions().size() == 1\n+                    ? scce.getExceptions().iterator().next()\n+                    : scce;\n         } else if (statusCode == Response.Status.UNAUTHORIZED.getStatusCode()) {\n             // 2. Map SC_UNAUTHORIZED\n             ex = new AccessControlException(\"Remote unauthorized exception\");\n@@ -76,42 +77,69 @@ public Exception fromResponse(final Response response) {\n     }\n \n     private SyncopeClientCompositeException checkSyncopeClientCompositeException(final Response response) {\n-        List<String> exTypesInHeaders = response.getStringHeaders().get(RESTHeaders.ERROR_CODE);\n-        if (exTypesInHeaders == null) {\n-            LOG.debug(\"No \" + RESTHeaders.ERROR_CODE + \" provided\");\n-            return null;\n-        }\n-        List<String> exInfos = response.getStringHeaders().get(RESTHeaders.ERROR_INFO);\n+        SyncopeClientCompositeException compException = SyncopeClientException.buildComposite();\n \n-        final SyncopeClientCompositeException compException = SyncopeClientException.buildComposite();\n-\n-        Set<String> handledExceptions = new HashSet<>();\n-        for (String exTypeAsString : exTypesInHeaders) {\n-            ClientExceptionType exceptionType = null;\n+        // Attempts to read ErrorTO or List<ErrorTO> as entity...\n+        List<ErrorTO> errors = null;\n+        try {\n+            ErrorTO error = response.readEntity(ErrorTO.class);\n+            if (error != null) {\n+                errors = Collections.singletonList(error);\n+            }\n+        } catch (Exception e) {\n+            LOG.debug(\"Could not read {}, attempting to read composite...\", ErrorTO.class.getName(), e);\n+        }\n+        if (errors == null) {\n             try {\n-                exceptionType = ClientExceptionType.fromHeaderValue(exTypeAsString);\n-            } catch (IllegalArgumentException e) {\n-                LOG.error(\"Unexpected value of \" + RESTHeaders.ERROR_CODE + \": \" + exTypeAsString, e);\n+                errors = response.readEntity(new GenericType<List<ErrorTO>>() {\n+                });\n+            } catch (Exception e) {\n+                LOG.debug(\"Could not read {} list, attempting to read headers...\", ErrorTO.class.getName(), e);\n             }\n-            if (exceptionType != null) {\n-                handledExceptions.add(exTypeAsString);\n+        }\n \n-                final SyncopeClientException clientException = SyncopeClientException.build(exceptionType);\n+        // ...if not possible, attempts to parse response headers\n+        if (errors == null) {\n+            List<String> exTypesInHeaders = response.getStringHeaders().get(RESTHeaders.ERROR_CODE);\n+            if (exTypesInHeaders == null) {\n+                LOG.debug(\"No \" + RESTHeaders.ERROR_CODE + \" provided\");\n+                return null;\n+            }\n+            List<String> exInfos = response.getStringHeaders().get(RESTHeaders.ERROR_INFO);\n \n-                if (exInfos != null && !exInfos.isEmpty()) {\n-                    for (String element : exInfos) {\n-                        if (element.startsWith(exceptionType.getHeaderValue())) {\n-                            clientException.getElements().add(StringUtils.substringAfter(element, \":\"));\n+            Set<String> handledExceptions = new HashSet<>();\n+            for (String exTypeAsString : exTypesInHeaders) {\n+                ClientExceptionType exceptionType = null;\n+                try {\n+                    exceptionType = ClientExceptionType.fromHeaderValue(exTypeAsString);\n+                } catch (IllegalArgumentException e) {\n+                    LOG.error(\"Unexpected value of \" + RESTHeaders.ERROR_CODE + \": \" + exTypeAsString, e);\n+                }\n+                if (exceptionType != null) {\n+                    handledExceptions.add(exTypeAsString);\n+\n+                    SyncopeClientException clientException = SyncopeClientException.build(exceptionType);\n+                    if (exInfos != null && !exInfos.isEmpty()) {\n+                        for (String element : exInfos) {\n+                            if (element.startsWith(exceptionType.name())) {\n+                                clientException.getElements().add(StringUtils.substringAfter(element, \":\"));\n+                            }\n                         }\n                     }\n+                    compException.addException(clientException);\n                 }\n-                compException.addException(clientException);\n             }\n-        }\n \n-        exTypesInHeaders.removeAll(handledExceptions);\n-        if (!exTypesInHeaders.isEmpty()) {\n-            LOG.error(\"Unmanaged exceptions: \" + exTypesInHeaders);\n+            exTypesInHeaders.removeAll(handledExceptions);\n+            if (!exTypesInHeaders.isEmpty()) {\n+                LOG.error(\"Unmanaged exceptions: \" + exTypesInHeaders);\n+            }\n+        } else {\n+            for (ErrorTO error : errors) {\n+                SyncopeClientException clientException = SyncopeClientException.build(error.getType());\n+                clientException.getElements().addAll(error.getElements());\n+                compException.addException(clientException);\n+            }\n         }\n \n         if (compException.hasExceptions()) {"},{"sha":"d85d1b648b98de7fbd3630491b8e23a07f1650ad","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c3107bb3623d9834ddf81b1852a19371780ae18/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c3107bb3623d9834ddf81b1852a19371780ae18/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=2c3107bb3623d9834ddf81b1852a19371780ae18","patch":"@@ -80,7 +80,7 @@ private ClientExceptionType(final Response.Status responseStatus) {\n     public static ClientExceptionType fromHeaderValue(final String exceptionTypeHeaderValue) {\n         ClientExceptionType result = null;\n         for (ClientExceptionType type : values()) {\n-            if (exceptionTypeHeaderValue.equals(type.getHeaderValue())) {\n+            if (exceptionTypeHeaderValue.equals(type.name())) {\n                 result = type;\n             }\n         }\n@@ -92,12 +92,8 @@ public static ClientExceptionType fromHeaderValue(final String exceptionTypeHead\n         return result;\n     }\n \n-    public String getHeaderValue() {\n-        return name();\n-    }\n-\n     public String getInfoHeaderValue(final String value) {\n-        return getHeaderValue() + \":\" + value;\n+        return name() + \":\" + value;\n     }\n \n     public Response.Status getResponseStatus() {"},{"sha":"c4c192869d849c69312ab9711bd2ae178abda9d4","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c3107bb3623d9834ddf81b1852a19371780ae18/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c3107bb3623d9834ddf81b1852a19371780ae18/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java?ref=2c3107bb3623d9834ddf81b1852a19371780ae18","patch":"@@ -37,7 +37,6 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.jdbc.datasource.DataSourceUtils;\n import org.springframework.stereotype.Component;\n-import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class LoggerLoader implements SyncopeLoader {\n@@ -53,7 +52,6 @@ public Integer getPriority() {\n         return 300;\n     }\n \n-    @Transactional\n     @Override\n     public void load() {\n         final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);"},{"sha":"e67dcd69d6150bdd3d887926cc42fd8f6f1498f9","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/spring/ApplicationContextProvider.java","status":"modified","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c3107bb3623d9834ddf81b1852a19371780ae18/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fspring%2FApplicationContextProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c3107bb3623d9834ddf81b1852a19371780ae18/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fspring%2FApplicationContextProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fspring%2FApplicationContextProvider.java?ref=2c3107bb3623d9834ddf81b1852a19371780ae18","patch":"@@ -18,12 +18,10 @@\n  */\n package org.apache.syncope.core.misc.spring;\n \n-import org.springframework.beans.factory.config.BeanDefinition;\n import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.ApplicationContextAware;\n import org.springframework.context.ConfigurableApplicationContext;\n-import org.springframework.transaction.interceptor.TransactionInterceptor;\n \n public class ApplicationContextProvider implements ApplicationContextAware {\n \n@@ -43,16 +41,8 @@ public static DefaultListableBeanFactory getBeanFactory() {\n                 : BEAN_FACTORY;\n     }\n \n-    private static void enableDomainTransactionInterceptor() {\n-        for (String name : getBeanFactory().getBeanNamesForType(TransactionInterceptor.class)) {\n-            BeanDefinition bd = getBeanFactory().getBeanDefinition(name);\n-            bd.setBeanClassName(DomainTransactionInterceptor.class.getName());\n-        }\n-    }\n-\n     public static void setBeanFactory(final DefaultListableBeanFactory beanFactory) {\n         BEAN_FACTORY = beanFactory;\n-        enableDomainTransactionInterceptor();\n     }\n \n     /**\n@@ -63,6 +53,5 @@ public static void setBeanFactory(final DefaultListableBeanFactory beanFactory)\n     @Override\n     public void setApplicationContext(final ApplicationContext ctx) {\n         CTX = (ConfigurableApplicationContext) ctx;\n-        enableDomainTransactionInterceptor();\n     }\n }"},{"sha":"d9d772b07ff70245a57d402543be6e9a6db517eb","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/spring/DomainTransactionInterceptorInjector.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c3107bb3623d9834ddf81b1852a19371780ae18/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fspring%2FDomainTransactionInterceptorInjector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c3107bb3623d9834ddf81b1852a19371780ae18/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fspring%2FDomainTransactionInterceptorInjector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fspring%2FDomainTransactionInterceptorInjector.java?ref=2c3107bb3623d9834ddf81b1852a19371780ae18","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.misc.spring;\n+\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.beans.factory.config.BeanFactoryPostProcessor;\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n+import org.springframework.transaction.interceptor.TransactionInterceptor;\n+\n+/**\n+ * Replaces Spring's {@link TransactionInterceptor} with {@link DomainTransactionInterceptor}.\n+ */\n+public class DomainTransactionInterceptorInjector implements BeanFactoryPostProcessor {\n+\n+    @Override\n+    public void postProcessBeanFactory(final ConfigurableListableBeanFactory beanFactory) throws BeansException {\n+        BeanDefinition bd = beanFactory.getBeanDefinition(TransactionInterceptor.class.getName() + \"#0\");\n+        bd.setBeanClassName(DomainTransactionInterceptor.class.getName());\n+    }\n+\n+}"},{"sha":"5d6b5abacc3fe50f88d15ddfcbf2ecb50395262e","filename":"core/persistence-jpa/src/main/resources/domains.xml","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c3107bb3623d9834ddf81b1852a19371780ae18/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c3107bb3623d9834ddf81b1852a19371780ae18/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains.xml?ref=2c3107bb3623d9834ddf81b1852a19371780ae18","patch":"@@ -23,7 +23,9 @@ under the License.\n                            http://www.springframework.org/schema/beans/spring-beans.xsd\">\n   \n   <import resource=\"classpath*:domains/*Domain.xml\"/>\n-    \n+  \n+  <bean class=\"org.apache.syncope.core.misc.spring.DomainTransactionInterceptorInjector\"/>\n+  \n   <bean id=\"commonEMFConf\" class=\"org.apache.syncope.core.persistence.jpa.spring.CommonEntityManagerFactoryConf\">\n     <property name=\"packagesToScan\" value=\"org.apache.syncope.core.persistence.jpa.entity\"/>\n     <property name=\"validationMode\" value=\"NONE\"/>"},{"sha":"3307f664c7436bd91f0b9feb5cb8b6f1f80d0a76","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c3107bb3623d9834ddf81b1852a19371780ae18/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c3107bb3623d9834ddf81b1852a19371780ae18/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java?ref=2c3107bb3623d9834ddf81b1852a19371780ae18","patch":"@@ -133,7 +133,7 @@ public Response toResponse(final Exception ex) {\n                 // process JAX-RS validation errors\n                 if (builder == null && ex instanceof ValidationException) {\n                     builder = builder(validationEM.toResponse((ValidationException) ex)).\n-                            header(RESTHeaders.ERROR_CODE, ClientExceptionType.RESTValidation.getHeaderValue()).\n+                            header(RESTHeaders.ERROR_CODE, ClientExceptionType.RESTValidation.name()).\n                             header(RESTHeaders.ERROR_INFO, ClientExceptionType.RESTValidation.getInfoHeaderValue(\n                                             ExceptionUtils.getRootCauseMessage(ex)));\n \n@@ -171,7 +171,7 @@ public Exception fromResponse(final Response response) {\n \n     private ResponseBuilder getSyncopeClientExceptionResponse(final SyncopeClientException ex) {\n         ResponseBuilder builder = Response.status(ex.getType().getResponseStatus());\n-        builder.header(RESTHeaders.ERROR_CODE, ex.getType().getHeaderValue());\n+        builder.header(RESTHeaders.ERROR_CODE, ex.getType().name());\n \n         ErrorTO error = new ErrorTO();\n         error.setStatus(ex.getType().getResponseStatus().getStatusCode());\n@@ -194,7 +194,7 @@ private ResponseBuilder getSyncopeClientCompositeExceptionResponse(final Syncope\n \n         List<ErrorTO> errors = new ArrayList<>();\n         for (SyncopeClientException sce : ex.getExceptions()) {\n-            builder.header(RESTHeaders.ERROR_CODE, sce.getType().getHeaderValue());\n+            builder.header(RESTHeaders.ERROR_CODE, sce.getType().name());\n \n             ErrorTO error = new ErrorTO();\n             error.setStatus(sce.getType().getResponseStatus().getStatusCode());\n@@ -237,7 +237,7 @@ private ResponseBuilder processInvalidEntityExceptions(final Exception ex) {\n                     : ClientExceptionType.valueOf(\"Invalid\" + iee.getEntityClassSimpleName());\n \n             ResponseBuilder builder = Response.status(Response.Status.BAD_REQUEST);\n-            builder.header(RESTHeaders.ERROR_CODE, exType.getHeaderValue());\n+            builder.header(RESTHeaders.ERROR_CODE, exType.name());\n \n             ErrorTO error = new ErrorTO();\n             error.setStatus(exType.getResponseStatus().getStatusCode());\n@@ -295,7 +295,7 @@ private ResponseBuilder processBadRequestExceptions(final Exception ex) {\n \n     private ResponseBuilder builder(final ClientExceptionType hType, final String msg) {\n         ResponseBuilder builder = Response.status(hType.getResponseStatus()).\n-                header(RESTHeaders.ERROR_CODE, hType.getHeaderValue()).\n+                header(RESTHeaders.ERROR_CODE, hType.name()).\n                 header(RESTHeaders.ERROR_INFO, hType.getInfoHeaderValue(msg));\n \n         ErrorTO error = new ErrorTO();"},{"sha":"4ee6c508f325652dfb2f690f035f5f53ffa69aaa","filename":"ext/camel/logic/src/main/java/org/apache/syncope/core/logic/init/CamelRouteLoader.java","status":"modified","additions":11,"deletions":28,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c3107bb3623d9834ddf81b1852a19371780ae18/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c3107bb3623d9834ddf81b1852a19371780ae18/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java?ref=2c3107bb3623d9834ddf81b1852a19371780ae18","patch":"@@ -19,23 +19,19 @@\n package org.apache.syncope.core.logic.init;\n \n import java.io.StringWriter;\n-import java.util.List;\n import java.util.Map;\n import javax.sql.DataSource;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader;\n import org.apache.syncope.core.persistence.api.DomainsHolder;\n import org.apache.syncope.core.persistence.api.SyncopeLoader;\n-import org.apache.syncope.core.persistence.api.entity.CamelEntityFactory;\n import org.apache.syncope.core.persistence.api.entity.CamelRoute;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.core.io.Resource;\n-import org.springframework.dao.DataAccessException;\n import org.springframework.jdbc.core.JdbcTemplate;\n import org.springframework.stereotype.Component;\n-import org.springframework.transaction.annotation.Transactional;\n import org.w3c.dom.Element;\n import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n@@ -63,17 +59,13 @@ public class CamelRouteLoader implements SyncopeLoader {\n     @Autowired\n     private DomainsHolder domainsHolder;\n \n-    @Autowired\n-    private CamelEntityFactory entityFactory;\n-\n     private boolean loaded = false;\n \n     @Override\n     public Integer getPriority() {\n         return 1000;\n     }\n \n-    @Transactional\n     @Override\n     public void load() {\n         synchronized (this) {\n@@ -91,13 +83,6 @@ public void load() {\n         }\n     }\n \n-    private boolean loadRoutesFor(final DataSource dataSource, final AnyTypeKind anyTypeKind) {\n-        final String sql = String.format(\"SELECT * FROM %s WHERE ANYTYPEKIND = ?\", CamelRoute.class.getSimpleName());\n-        final JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n-        final List<Map<String, Object>> rows = jdbcTemplate.queryForList(sql, new Object[] { anyTypeKind.name() });\n-        return rows.isEmpty();\n-    }\n-\n     private String nodeToString(final Node content, final DOMImplementationLS domImpl) {\n         StringWriter writer = new StringWriter();\n         try {\n@@ -115,11 +100,13 @@ private String nodeToString(final Node content, final DOMImplementationLS domImp\n     private void loadRoutes(\n             final String domain, final DataSource dataSource, final Resource resource, final AnyTypeKind anyTypeKind) {\n \n-        if (loadRoutesFor(dataSource, anyTypeKind)) {\n-            String query = String.format(\"INSERT INTO %s(NAME, ANYTYPEKIND, CONTENT) VALUES (?, ?, ?)\",\n-                    CamelRoute.class.getSimpleName());\n-            JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n+        boolean shouldLoadRoutes = jdbcTemplate.queryForList(\n+                String.format(\"SELECT * FROM %s WHERE ANYTYPEKIND = ?\", CamelRoute.class.getSimpleName()),\n+                new Object[] { anyTypeKind.name() }).\n+                isEmpty();\n \n+        if (shouldLoadRoutes) {\n             try {\n                 DOMImplementationRegistry reg = DOMImplementationRegistry.newInstance();\n                 DOMImplementationLS domImpl = (DOMImplementationLS) reg.getDOMImplementation(\"LS\");\n@@ -134,18 +121,14 @@ private void loadRoutes(\n                     String routeContent = nodeToString(routeNodes.item(s), domImpl);\n                     String routeId = ((Element) routeElement).getAttribute(\"id\");\n \n-                    CamelRoute route = entityFactory.newCamelRoute();\n-                    route.setAnyTypeKind(anyTypeKind);\n-                    route.setKey(routeId);\n-                    route.setContent(routeContent);\n-\n-                    jdbcTemplate.update(query, new Object[] { routeId, anyTypeKind.name(), routeContent });\n+                    jdbcTemplate.update(\n+                            String.format(\"INSERT INTO %s(NAME, ANYTYPEKIND, CONTENT) VALUES (?, ?, ?)\",\n+                                    CamelRoute.class.getSimpleName()),\n+                            new Object[] { routeId, anyTypeKind.name(), routeContent });\n                     LOG.info(\"[{}] Route successfully loaded: {}\", domain, routeId);\n                 }\n-            } catch (DataAccessException e) {\n-                LOG.error(\"[{}] While trying to store queries\", domain, e);\n             } catch (Exception e) {\n-                LOG.error(\"[{}] Route load failed {}\", domain, e.getMessage());\n+                LOG.error(\"[{}] Route load failed\", domain, e);\n             }\n         }\n     }"},{"sha":"e11e928bdbbfaa00ad35e1abaf56cef1a9cd2b84","filename":"fit/core-reference/src/main/resources/jboss/domains/MasterDomain.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c3107bb3623d9834ddf81b1852a19371780ae18/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2Fdomains%2FMasterDomain.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c3107bb3623d9834ddf81b1852a19371780ae18/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2Fdomains%2FMasterDomain.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2Fdomains%2FMasterDomain.xml?ref=2c3107bb3623d9834ddf81b1852a19371780ae18","patch":"@@ -116,7 +116,7 @@ under the License.\n     <property name=\"jpaPropertyMap\">\n       <map>\n         <entry key=\"openjpa.MetaDataFactory\" \n-               value=\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly8x/deployments/syncope.war/WEB-INF/classes, Resources=${Master.orm)\"/>\n+               value=\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly9x/deployments/syncope.war/WEB-INF/classes, Resources=${Master.orm})\"/>\n       </map>\n     </property>\n   </bean>\n@@ -128,4 +128,4 @@ under the License.\n   \n   <tx:annotation-driven transaction-manager=\"MasterTransactionManager\"/>\n   \n-</beans>\n\\ No newline at end of file\n+</beans>"},{"sha":"205553f610d69f5ae1953d3d16ae50ebaf9cb93e","filename":"fit/core-reference/src/main/resources/jboss/domains/TwoDomain.xml","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c3107bb3623d9834ddf81b1852a19371780ae18/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2Fdomains%2FTwoDomain.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c3107bb3623d9834ddf81b1852a19371780ae18/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2Fdomains%2FTwoDomain.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2Fdomains%2FTwoDomain.xml?ref=2c3107bb3623d9834ddf81b1852a19371780ae18","patch":"@@ -0,0 +1,131 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n+       xmlns:util=\"http://www.springframework.org/schema/util\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+                           http://www.springframework.org/schema/beans/spring-beans.xsd                           \n+                           http://www.springframework.org/schema/tx\n+                           http://www.springframework.org/schema/tx/spring-tx.xsd\n+                           http://www.springframework.org/schema/util\n+                           http://www.springframework.org/schema/util/spring-util.xsd\">\n+  \n+  <bean id=\"TwoContentXML\" class=\"org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader\">\n+    <property name=\"primary\" value=\"file:${content.directory}/domains/TwoContent.xml\"/>\n+    <property name=\"fallback\" value=\"classpath:domains/TwoContent.xml\"/>\n+  </bean>\n+  <bean id=\"TwoProperties\" class=\"org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader\">\n+    <property name=\"primary\" value=\"file:${content.directory}/domains/Two.properties\"/>\n+    <property name=\"fallback\" value=\"classpath:domains/Two.properties\"/>\n+  </bean>\n+  <bean id=\"TwoDatabaseSchema\" class=\"java.lang.String\">\n+    <constructor-arg value=\"${Two.schema}\"/>\n+  </bean>\n+\n+  <!-- Use JNDI datasource as default but, when not available, revert to\n+  local datasource, with different properties for execution and testing. \n+  In any case, get all JDBC connections with a determined isolation level. -->\n+  <bean id=\"TwoDataSource\" class=\"org.springframework.jndi.JndiObjectFactoryBean\">\n+    <property name=\"jndiName\" value=\"java:comp/env/jdbc/syncopeTwoDataSource\"/>\n+    <property name=\"defaultObject\" ref=\"localTwoDataSource\"/>\n+  </bean>\n+\n+  <bean id=\"localTwoDataSource\" class=\"org.apache.commons.dbcp2.BasicDataSource\" destroy-method=\"close\">\n+    <property name=\"driverClassName\" value=\"${Two.driverClassName}\"/>\n+    <property name=\"url\" value=\"${Two.url}\"/>\n+    <property name=\"username\" value=\"${Two.username}\"/>\n+    <property name=\"password\" value=\"${Two.password}\"/>\n+    <!-- connection pool configuration - transaction isolation, default READ_COMMITTED (see SYNCOPE-202) -->\n+    <property name=\"defaultTransactionIsolation\">\n+      <util:constant static-field=\"${Two.pool.defaultTransactionIsolation:java.sql.Connection.TRANSACTION_READ_COMMITTED}\"/>\n+    </property>\n+    <!-- connection pool configuration - default values taken from BasicDataSource default values -->\n+    <property name=\"initialSize\" value=\"${Two.pool.initialSize:0}\"/>\n+    <property name=\"maxTotal\" value=\"${Two.pool.maxActive:8}\"/>\n+    <property name=\"maxIdle\" value=\"${Two.pool.maxIdle:8}\"/>\n+    <property name=\"minIdle\" value=\"${Two.pool.minIdle:0}\"/>\n+    <property name=\"maxWaitMillis\" value=\"${Two.pool.maxWait:-1}\"/>\n+    <property name=\"validationQuery\" value=\"${Two.pool.validationQuery}\"/>\n+    <property name=\"validationQueryTimeout\" value=\"${Two.pool.validationQueryTimeout:-1}\"/>\n+    <property name=\"testOnBorrow\" value=\"${Two.pool.testOnBorrow:true}\"/>\n+    <property name=\"testOnReturn\" value=\"${Two.pool.testOnReturn:false}\"/>\n+    <property name=\"testWhileIdle\" value=\"${Two.pool.testWhileIdle:false}\"/>\n+    <property name=\"timeBetweenEvictionRunsMillis\" value=\"${Two.pool.timeBetweenEvictionRunsMillis:-1}\"/>\n+    <property name=\"numTestsPerEvictionRun\" value=\"${Two.pool.numTestsPerEvictionRun:3}\"/>\n+    <property name=\"minEvictableIdleTimeMillis\" value=\"${Two.pool.minEvictableIdleTimeMillis:1800000}\"/>\n+    <property name=\"removeAbandonedOnBorrow\" value=\"${Two.pool.removeAbandoned:false}\"/>\n+    <property name=\"removeAbandonedOnMaintenance\" value=\"${Two.pool.removeAbandoned:false}\"/>\n+    <property name=\"removeAbandonedTimeout\" value=\"${Two.pool.removeAbandonedTimeout:300}\"/>\n+    <property name=\"logAbandoned\" value=\"${Two.pool.logAbandoned:false}\"/>\n+  </bean>\n+  \n+  <bean class=\"org.springframework.jdbc.datasource.init.DataSourceInitializer\">\n+    <property name=\"dataSource\" ref=\"TwoDataSource\"/>\n+    <property name=\"enabled\" value=\"true\"/>\n+    <property name=\"databasePopulator\">\n+      <bean class=\"org.springframework.jdbc.datasource.init.ResourceDatabasePopulator\">\n+        <property name=\"continueOnError\" value=\"true\"/>\n+        <property name=\"ignoreFailedDrops\" value=\"true\"/>\n+        <property name=\"sqlScriptEncoding\" value=\"UTF-8\"/>\n+        <property name=\"scripts\">\n+          <array>\n+            <value type=\"org.springframework.core.io.Resource\">\n+              classpath:/audit/${Two.audit.sql}\n+            </value>\n+          </array>\n+        </property>\n+      </bean>\n+    </property>\n+  </bean>\n+  \n+  <bean id=\"TwoEntityManagerFactory\"\n+        class=\"org.apache.syncope.core.persistence.jpa.spring.DomainEntityManagerFactoryBean\">\n+    <property name=\"mappingResources\">\n+      <list>\n+        <value>${Two.orm}</value>\n+      </list>\n+    </property>\n+    <property name=\"persistenceUnitName\" value=\"Two\"/>\n+    <property name=\"dataSource\" ref=\"TwoDataSource\"/>\n+    <property name=\"jpaVendorAdapter\">\n+      <bean class=\"org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter\">\n+        <property name=\"showSql\" value=\"false\"/>\n+        <property name=\"generateDdl\" value=\"true\"/>\n+        <property name=\"databasePlatform\" value=\"${Two.databasePlatform}\"/>\n+      </bean>\n+    </property>\n+    <property name=\"commonEntityManagerFactoryConf\" ref=\"commonEMFConf\"/>\n+    <property name=\"jpaPropertyMap\">\n+      <map>\n+        <entry key=\"openjpa.MetaDataFactory\" \n+               value=\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly9x/deployments/syncope.war/WEB-INF/classes, Resources=${Two.orm})\"/>\n+      </map>\n+    </property>\n+  </bean>\n+\n+  <bean id=\"TwoTransactionManager\" class=\"org.springframework.orm.jpa.JpaTransactionManager\">\n+    <property name=\"entityManagerFactory\" ref=\"TwoEntityManagerFactory\"/>\n+    <qualifier value=\"Two\"/>\n+  </bean>\n+  \n+  <tx:annotation-driven transaction-manager=\"TwoTransactionManager\"/>\n+  \n+</beans>"}]}