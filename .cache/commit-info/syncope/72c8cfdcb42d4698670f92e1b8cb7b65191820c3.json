{"sha":"72c8cfdcb42d4698670f92e1b8cb7b65191820c3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjcyYzhjZmRjYjQyZDQ2OTg2NzBmOTJlMWI4Y2I3YjY1MTkxODIwYzM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-07-16T08:41:51Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-07-16T08:41:51Z"},"message":"Attempting to make IT run more stable","tree":{"sha":"34427678aea9f00c19c1798c4d75ee9281534d04","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/34427678aea9f00c19c1798c4d75ee9281534d04"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/72c8cfdcb42d4698670f92e1b8cb7b65191820c3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/72c8cfdcb42d4698670f92e1b8cb7b65191820c3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/72c8cfdcb42d4698670f92e1b8cb7b65191820c3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"9b4db284a40c4025bf111217f3a9effc778d0fc9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9b4db284a40c4025bf111217f3a9effc778d0fc9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9b4db284a40c4025bf111217f3a9effc778d0fc9"}],"stats":{"total":664,"additions":278,"deletions":386},"files":[{"sha":"25bcb63bea768d9d353e222d62d1a78b5a306a50","filename":"fit/core-reference/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=72c8cfdcb42d4698670f92e1b8cb7b65191820c3","patch":"@@ -202,6 +202,11 @@ under the License.\n       <version>${project.version}</version>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.awaitility</groupId>\n+      <artifactId>awaitility</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-test</artifactId>"},{"sha":"44e6922648edc37c85cd50b7a46904ea0392b13b","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestNotificationRecipientsProvider.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestNotificationRecipientsProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestNotificationRecipientsProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestNotificationRecipientsProvider.java?ref=72c8cfdcb42d4698670f92e1b8cb7b65191820c3","patch":"@@ -30,5 +30,4 @@ public class TestNotificationRecipientsProvider implements RecipientsProvider {\n     public Set<String> provideRecipients(final Notification notification) {\n         return Set.of(getClass().getSimpleName() + \"@syncope.apache.org\");\n     }\n-\n }"},{"sha":"a77e4753c3f8b318e5b02f42f16ba731bb524425","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":10,"deletions":21,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=72c8cfdcb42d4698670f92e1b8cb7b65191820c3","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.fit;\n \n+import static org.awaitility.Awaitility.await;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.fail;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n@@ -35,6 +35,8 @@\n import java.util.Properties;\n import java.util.Set;\n import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n import javax.naming.Context;\n import javax.naming.NamingException;\n import javax.naming.directory.BasicAttribute;\n@@ -794,30 +796,17 @@ protected <T> T queryForObject(\n             final int maxWaitSeconds,\n             final String sql, final Class<T> requiredType, final Object... args) {\n \n-        int i = 0;\n-        int maxit = maxWaitSeconds;\n-\n-        T object = null;\n-\n-        do {\n-            try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n-            }\n-\n+        AtomicReference<T> object = new AtomicReference<>();\n+        await().atMost(maxWaitSeconds, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n             try {\n-                object = jdbcTemplate.queryForObject(sql, requiredType, args);\n+                object.set(jdbcTemplate.queryForObject(sql, requiredType, args));\n+                return object.get() != null;\n             } catch (Exception e) {\n-                LOG.warn(\"While executing query {}\", sql, e);\n+                return false;\n             }\n+        });\n \n-            i++;\n-        } while (object == null && i < maxit);\n-        if (object == null) {\n-            fail(\"Timeout when executing query \" + sql);\n-        }\n-\n-        return object;\n+        return object.get();\n     }\n \n     protected OIDCRPTO buildOIDCRP() {"},{"sha":"454c54f97db18af471ee32fefdc5655a5897a9d3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AbstractNotificationTaskITCase.java","status":"modified","additions":15,"deletions":24,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractNotificationTaskITCase.java?ref=72c8cfdcb42d4698670f92e1b8cb7b65191820c3","patch":"@@ -18,11 +18,13 @@\n  */\n package org.apache.syncope.fit.core;\n \n+import static org.awaitility.Awaitility.await;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.fail;\n \n import java.io.InputStream;\n import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n import javax.mail.Flags;\n import javax.mail.Folder;\n import javax.mail.Message;\n@@ -77,31 +79,20 @@ private static boolean pop3(final String sender, final String subject, final Str\n         return found;\n     }\n \n-    protected static boolean verifyMail(\n-        final String sender,\n-        final String subject,\n-        final String mailAddress,\n-        final int maxWaitSeconds) throws Exception {\n+    protected static void verifyMail(\n+            final String sender,\n+            final String subject,\n+            final String mailAddress,\n+            final int maxWaitSeconds) throws Exception {\n \n-        boolean read = false;\n-\n-        int i = 0;\n-\n-        // wait for completion (executions incremented)\n-        do {\n+        AtomicReference<Boolean> read = new AtomicReference<>(false);\n+        await().atMost(MAX_WAIT_SECONDS, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n             try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n+                read.set(pop3(sender, subject, mailAddress));\n+                return read.get();\n+            } catch (Exception e) {\n+                return false;\n             }\n-\n-            read = pop3(sender, subject, mailAddress);\n-\n-            i++;\n-        } while (!read && i < maxWaitSeconds);\n-        if (i == maxWaitSeconds) {\n-            fail(\"Timeout when attempting to read e-mail to  \" + mailAddress);\n-        }\n-\n-        return read;\n+        });\n     }\n }"},{"sha":"8b483cf6406c75d21c72389910b2918d0772f538","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AbstractTaskITCase.java","status":"modified","additions":59,"deletions":85,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java?ref=72c8cfdcb42d4698670f92e1b8cb7b65191820c3","patch":"@@ -18,18 +18,18 @@\n  */\n package org.apache.syncope.fit.core;\n \n+import static org.awaitility.Awaitility.await;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.ArrayList;\n import java.util.List;\n import java.util.Set;\n-import java.util.concurrent.Callable;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.request.ResourceDR;\n@@ -38,6 +38,7 @@\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n@@ -53,35 +54,6 @@ public abstract class AbstractTaskITCase extends AbstractITCase {\n \n     protected static final String SCHED_TASK_KEY = \"e95555d2-1b09-42c8-b25b-f4c4ec597979\";\n \n-    protected static class ThreadExec implements Callable<ExecTO> {\n-\n-        private final TaskService taskService;\n-\n-        private final TaskType type;\n-\n-        private final String taskKey;\n-\n-        private final int maxWaitSeconds;\n-\n-        private final boolean dryRun;\n-\n-        public ThreadExec(\n-                final TaskService taskService, final TaskType type, final String taskKey,\n-                final int maxWaitSeconds, final boolean dryRun) {\n-\n-            this.taskService = taskService;\n-            this.type = type;\n-            this.taskKey = taskKey;\n-            this.maxWaitSeconds = maxWaitSeconds;\n-            this.dryRun = dryRun;\n-        }\n-\n-        @Override\n-        public ExecTO call() throws Exception {\n-            return execProvisioningTask(taskService, type, taskKey, maxWaitSeconds, dryRun);\n-        }\n-    }\n-\n     /**\n      * Remove initial and synchronized users to make test re-runnable.\n      */\n@@ -118,39 +90,29 @@ protected void ldapCleanup() {\n     }\n \n     protected static ExecTO execTask(\n-            final TaskService taskService, final TaskType type, final String taskKey,\n-            final String initialStatus, final int maxWaitSeconds, final boolean dryRun) {\n-\n-        TaskTO taskTO = taskService.read(type, taskKey, true);\n-        assertNotNull(taskTO);\n-        assertNotNull(taskTO.getExecutions());\n-\n-        int preSyncSize = taskTO.getExecutions().size();\n-        ExecuteQuery query = new ExecuteQuery.Builder().key(taskTO.getKey()).dryRun(dryRun).build();\n-        ExecTO execution = taskService.execute(query);\n+            final TaskService taskService,\n+            final TaskType type,\n+            final String taskKey,\n+            final String initialStatus,\n+            final int maxWaitSeconds,\n+            final boolean dryRun) {\n+\n+        AtomicReference<TaskTO> taskTO = new AtomicReference<>(taskService.read(type, taskKey, true));\n+        int preSyncSize = taskTO.get().getExecutions().size();\n+        ExecTO execution = taskService.execute(new ExecuteQuery.Builder().key(taskKey).dryRun(dryRun).build());\n         assertEquals(initialStatus, execution.getStatus());\n         assertNotNull(execution.getExecutor());\n-        \n-        int i = 0;\n \n-        // wait for completion (executions incremented)\n-        do {\n+        await().atMost(maxWaitSeconds, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n             try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n+                taskTO.set(taskService.read(type, taskKey, true));\n+                return preSyncSize < taskTO.get().getExecutions().size();\n+            } catch (Exception e) {\n+                return false;\n             }\n+        });\n \n-            taskTO = taskService.read(type, taskTO.getKey(), true);\n-\n-            assertNotNull(taskTO);\n-            assertNotNull(taskTO.getExecutions());\n-\n-            i++;\n-        } while (preSyncSize == taskTO.getExecutions().size() && i < maxWaitSeconds);\n-        if (i == maxWaitSeconds) {\n-            fail(\"Timeout when executing task \" + taskKey);\n-        }\n-        return taskTO.getExecutions().get(taskTO.getExecutions().size() - 1);\n+        return taskTO.get().getExecutions().get(taskTO.get().getExecutions().size() - 1);\n     }\n \n     public static ExecTO execProvisioningTask(\n@@ -167,51 +129,63 @@ protected static ExecTO execNotificationTask(\n                 NotificationJob.Status.SENT.name(), maxWaitSeconds, false);\n     }\n \n-    protected void execProvisioningTasks(final TaskService taskService, final TaskType type, final Set<String> taskKeys,\n-            final int maxWaitSeconds, final boolean dryRun) throws Exception {\n+    protected void execProvisioningTasks(\n+            final TaskService taskService,\n+            final TaskType type,\n+            final Set<String> taskKeys,\n+            final int maxWaitSeconds,\n+            final boolean dryRun) throws Exception {\n \n         ExecutorService service = Executors.newFixedThreadPool(taskKeys.size());\n         List<Future<ExecTO>> futures = new ArrayList<>();\n \n-        taskKeys.forEach(key -> {\n-            futures.add(service.submit(new ThreadExec(taskService, type, key, maxWaitSeconds, dryRun)));\n+        taskKeys.forEach(taskKey -> {\n+            futures.add(service.submit(() -> {\n+                try {\n+                    return execProvisioningTask(taskService, type, taskKey, maxWaitSeconds, dryRun);\n+                } catch (Exception e) {\n+                    ExecTO failure = new ExecTO();\n+                    failure.setRefKey(taskKey);\n+                    failure.setStatus(ExecStatus.FAILURE.name());\n+                    failure.setMessage(e.getMessage());\n+                    return failure;\n+                }\n+            }));\n+\n             // avoid flooding the test server\n             try {\n                 Thread.sleep(2000);\n             } catch (InterruptedException e) {\n+                // ignore\n             }\n         });\n \n-        for (Future<ExecTO> future : futures) {\n-            future.get(100, TimeUnit.SECONDS);\n-        }\n+        futures.forEach(future -> {\n+            try {\n+                future.get(maxWaitSeconds, TimeUnit.SECONDS);\n+            } catch (Exception e) {\n+                LOG.error(\"While getting futures\", e);\n+            }\n+        });\n \n         service.shutdownNow();\n     }\n \n     protected NotificationTaskTO findNotificationTask(final String notification, final int maxWaitSeconds) {\n-        int i = 0;\n-        int maxit = maxWaitSeconds;\n-\n-        NotificationTaskTO notificationTask = null;\n-        do {\n+        AtomicReference<NotificationTaskTO> notificationTask = new AtomicReference<>();\n+        await().atMost(maxWaitSeconds, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n             try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n-            }\n-\n-            PagedResult<NotificationTaskTO> tasks =\n-                    taskService.search(new TaskQuery.Builder(TaskType.NOTIFICATION).notification(notification).build());\n-            if (!tasks.getResult().isEmpty()) {\n-                notificationTask = tasks.getResult().get(0);\n+                PagedResult<NotificationTaskTO> tasks = taskService.search(\n+                        new TaskQuery.Builder(TaskType.NOTIFICATION).notification(notification).build());\n+                if (!tasks.getResult().isEmpty()) {\n+                    notificationTask.set(tasks.getResult().get(0));\n+                }\n+            } catch (Exception e) {\n+                // ignore\n             }\n+            return notificationTask.get() != null;\n+        });\n \n-            i++;\n-        } while (notificationTask == null && i < maxit);\n-        if (notificationTask == null) {\n-            fail(\"Timeout when looking for notification tasks from notification \" + notification);\n-        }\n-\n-        return notificationTask;\n+        return notificationTask.get();\n     }\n }"},{"sha":"31304d2b2a257ea547eb5ace49a5122bf6d09970","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuditITCase.java","status":"modified","additions":12,"deletions":10,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java?ref=72c8cfdcb42d4698670f92e1b8cb7b65191820c3","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.fit.core;\n \n+import static org.awaitility.Awaitility.await;\n import static org.junit.jupiter.api.Assertions.fail;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n@@ -28,6 +29,8 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -59,17 +62,16 @@ private static AuditEntry query(final AuditQuery query, final int maxWaitSeconds\n     }\n \n     private static List<AuditEntry> query(final AuditQuery query, final int maxWaitSeconds) {\n-        int i = 0;\n-        List<AuditEntry> results = List.of();\n-        do {\n+        AtomicReference<List<AuditEntry>> holder = new AtomicReference<>();\n+        await().atMost(maxWaitSeconds, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n             try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n+                holder.set(loggerService.search(query).getResult());\n+                return !holder.get().isEmpty();\n+            } catch (Exception e) {\n+                return false;\n             }\n-            results = loggerService.search(query).getResult();\n-            i++;\n-        } while (results.isEmpty() && i < maxWaitSeconds);\n-        return results;\n+        });\n+        return holder.get();\n     }\n \n     @Test\n@@ -201,7 +203,7 @@ public void findByConnector() throws JsonProcessingException {\n                 event(\"update\").\n                 result(AuditElements.Result.SUCCESS).\n                 build();\n-        List<AuditEntry> entries = query(query, 0);\n+        List<AuditEntry> entries = loggerService.search(query).getResult();\n         int pre = entries.size();\n \n         ConnInstanceTO ldapConn = connectorService.read(connectorKey, null);"},{"sha":"8ba55388e250069b6853cb830b9de6da4e2e2d28","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/BatchITCase.java","status":"modified","additions":11,"deletions":9,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java?ref=72c8cfdcb42d4698670f92e1b8cb7b65191820c3","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.fit.core;\n \n+import static org.awaitility.Awaitility.await;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -34,6 +35,8 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n import javax.ws.rs.HttpMethod;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n@@ -228,17 +231,16 @@ public void webClientAsync() throws IOException {\n                 header(HttpHeaders.AUTHORIZATION, \"Bearer \" + adminClient.getJWT()).\n                 type(RESTHeaders.multipartMixedWith(boundary.substring(2)));\n \n-        int i = 0;\n-        do {\n+        AtomicReference<Response> holder = new AtomicReference<>();\n+        await().atMost(MAX_WAIT_SECONDS, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n             try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n+                holder.set(client.get());\n+                return holder.get().getStatus() != Response.Status.ACCEPTED.getStatusCode();\n+            } catch (Exception e) {\n+                return false;\n             }\n-\n-            response = client.get();\n-\n-            i++;\n-        } while (response.getStatus() == Response.Status.ACCEPTED.getStatusCode() && i < MAX_WAIT_SECONDS);\n+        });\n+        response = holder.get();\n         assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n         assertTrue(response.getMediaType().toString().\n                 startsWith(RESTHeaders.multipartMixedWith(boundary.substring(2))));"},{"sha":"bceccc7c45bf2f519fe1d6a1ff01c7cb21f0b976","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":13,"deletions":17,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=72c8cfdcb42d4698670f92e1b8cb7b65191820c3","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.fit.core;\n \n+import static org.awaitility.Awaitility.await;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n@@ -31,6 +32,8 @@\n import java.util.List;\n import java.util.Map;\n import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n import javax.naming.NamingEnumeration;\n import javax.naming.NamingException;\n import javax.naming.directory.DirContext;\n@@ -74,7 +77,6 @@\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n-import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -963,22 +965,16 @@ public void provisionMembers() throws InterruptedException {\n             ExecTO exec = groupService.provisionMembers(groupTO.getKey(), ProvisionAction.PROVISION);\n             assertNotNull(exec.getRefKey());\n \n-            int i = 0;\n-\n-            // wait for task exec completion (executions incremented)\n-            SchedTaskTO taskTO;\n-            do {\n-                Thread.sleep(1000);\n-\n-                taskTO = taskService.read(TaskType.SCHEDULED, exec.getRefKey(), true);\n-\n-                assertNotNull(taskTO);\n-                assertNotNull(taskTO.getExecutions());\n-                i++;\n-            } while (taskTO.getExecutions().isEmpty() && i < MAX_WAIT_SECONDS);\n-            assertFalse(taskTO.getExecutions().isEmpty());\n-\n-            assertEquals(TaskJob.Status.SUCCESS.name(), taskTO.getExecutions().get(0).getStatus());\n+            AtomicReference<List<ExecTO>> execs = new AtomicReference<>();\n+            await().atMost(MAX_WAIT_SECONDS, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n+                try {\n+                    execs.set(taskService.read(TaskType.SCHEDULED, exec.getRefKey(), true).getExecutions());\n+                    return !execs.get().isEmpty();\n+                } catch (Exception e) {\n+                    return false;\n+                }\n+            });\n+            assertEquals(TaskJob.Status.SUCCESS.name(), execs.get().get(0).getStatus());\n \n             // 6. verify that the user above is now fond on LDAP\n             ConnObjectTO userOnLdap ="},{"sha":"0deb7bd9e9456f2a8b4f426c0c095f50e450126b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/KeymasterITCase.java","status":"modified","additions":11,"deletions":17,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java?ref=72c8cfdcb42d4698670f92e1b8cb7b65191820c3","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.fit.core;\n \n+import static org.awaitility.Awaitility.await;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -33,6 +34,8 @@\n import java.util.List;\n import java.util.Map;\n import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Function;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n@@ -152,25 +155,16 @@ private List<NetworkService> findNetworkServices(\n             final Function<List<NetworkService>, Boolean> check,\n             final int maxWaitSeconds) {\n \n-        int i = 0;\n-        int maxit = maxWaitSeconds;\n-\n-        List<NetworkService> list = List.of();\n-        do {\n+        AtomicReference<List<NetworkService>> holder = new AtomicReference<>();\n+        await().atMost(maxWaitSeconds, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n             try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n+                holder.set(serviceOps.list(type));\n+                return !check.apply(holder.get());\n+            } catch (Exception e) {\n+                return false;\n             }\n-\n-            list = serviceOps.list(type);\n-\n-            i++;\n-        } while (check.apply(list) && i < maxit);\n-        if (check.apply(list)) {\n-            fail(\"Timeout when looking for network services of type \" + type);\n-        }\n-\n-        return list;\n+        });\n+        return holder.get();\n     }\n \n     @Test"},{"sha":"70171ffbdde0bfd367bf41169d73048506571378","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LoggerITCase.java","status":"modified","additions":24,"deletions":19,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java?ref=72c8cfdcb42d4698670f92e1b8cb7b65191820c3","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.fit.core;\n \n+import static org.awaitility.Awaitility.await;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n@@ -38,6 +39,8 @@\n import java.util.List;\n import java.util.Properties;\n import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n import javax.ws.rs.core.Response;\n import javax.xml.ws.WebServiceException;\n import org.apache.commons.lang3.StringUtils;\n@@ -254,23 +257,19 @@ public void listAuditEvents() {\n         assertTrue(found);\n     }\n \n-    private static boolean logFileContains(final Path path, final String message, final int maxWaitSeconds)\n+    private static void checkLogFileFor(\n+            final Path path,\n+            final Function<String, Boolean> checker,\n+            final int maxWaitSeconds)\n             throws IOException {\n \n-        int i = 0;\n-        boolean messagePresent = false;\n-        do {\n+        await().atMost(maxWaitSeconds, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n             try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n+                return checker.apply(Files.readString(path, StandardCharsets.UTF_8));\n+            } catch (Exception e) {\n+                return false;\n             }\n-\n-            String auditLog = Files.readString(path, StandardCharsets.UTF_8);\n-            messagePresent = auditLog.contains(message);\n-\n-            i++;\n-        } while (!messagePresent && i < maxWaitSeconds);\n-        return messagePresent;\n+        });\n     }\n \n     @Test\n@@ -352,14 +351,20 @@ public void customAuditAppender() throws IOException, InterruptedException {\n             connectorService.update(connector);\n \n             // check audit_for_Master_file.log, it should contain only a static message\n-            assertTrue(logFileContains(auditFilePath,\n-                    \"DEBUG Master.syncope.audit.[LOGIC]:[ResourceLogic]:[]:[update]:[SUCCESS]\"\n-                    + \" - This is a static test message\", 10));\n+            checkLogFileFor(\n+                    auditFilePath,\n+                    content -> content.contains(\n+                            \"DEBUG Master.syncope.audit.[LOGIC]:[ResourceLogic]:[]:[update]:[SUCCESS]\"\n+                            + \" - This is a static test message\"),\n+                    10);\n \n             // nothing expected in audit_for_Master_norewrite_file.log instead\n-            assertFalse(logFileContains(auditNoRewriteFilePath,\n-                    \"DEBUG Master.syncope.audit.[LOGIC]:[ResourceLogic]:[]:[update]:[SUCCESS]\"\n-                    + \" - This is a static test message\", 10));\n+            checkLogFileFor(\n+                    auditNoRewriteFilePath,\n+                    content -> !content.contains(\n+                            \"DEBUG Master.syncope.audit.[LOGIC]:[ResourceLogic]:[]:[update]:[SUCCESS]\"\n+                            + \" - This is a static test message\"),\n+                    10);\n \n             // clean audit_for_Master_file.log\n             Files.write(auditFilePath, new byte[0], StandardOpenOption.TRUNCATE_EXISTING);"},{"sha":"5c7b501bc51fa0a0849ea12fff26b466d265e589","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/NotificationTaskITCase.java","status":"modified","additions":19,"deletions":27,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java?ref=72c8cfdcb42d4698670f92e1b8cb7b65191820c3","patch":"@@ -56,14 +56,13 @@ public void notifyByMail() throws Exception {\n         String sender = \"syncopetest-\" + getUUIDString() + \"@syncope.apache.org\";\n         String subject = \"Test notification \" + getUUIDString();\n         Pair<String, String> created = createNotificationTask(true, true, TraceLevel.ALL, sender, subject);\n-        NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), 50);\n+        NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), MAX_WAIT_SECONDS);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getNotification());\n-        assertTrue(taskTO.getExecutions().isEmpty());\n \n-        execNotificationTask(taskService, taskTO.getKey(), 50);\n+        execNotificationTask(taskService, taskTO.getKey(), MAX_WAIT_SECONDS);\n \n-        assertTrue(verifyMail(sender, subject, created.getRight(), 50));\n+        verifyMail(sender, subject, created.getRight(), MAX_WAIT_SECONDS);\n \n         // verify message body\n         taskTO = taskService.read(TaskType.NOTIFICATION, taskTO.getKey(), true);\n@@ -80,13 +79,12 @@ public void notifyByMailEmptyAbout() throws Exception {\n         String sender = \"syncopetest-\" + getUUIDString() + \"@syncope.apache.org\";\n         String subject = \"Test notification \" + getUUIDString();\n         Pair<String, String> created = createNotificationTask(true, false, TraceLevel.ALL, sender, subject);\n-        NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), 50);\n+        NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), MAX_WAIT_SECONDS);\n         assertNotNull(taskTO);\n-        assertTrue(taskTO.getExecutions().isEmpty());\n \n-        execNotificationTask(taskService, taskTO.getKey(), 50);\n+        execNotificationTask(taskService, taskTO.getKey(), MAX_WAIT_SECONDS);\n \n-        assertTrue(verifyMail(sender, subject, created.getRight(), 50));\n+        verifyMail(sender, subject, created.getRight(), MAX_WAIT_SECONDS);\n     }\n \n     @Test\n@@ -105,7 +103,7 @@ public void notifyByMailWithRetry() throws Exception {\n             String sender = \"syncopetest-\" + getUUIDString() + \"@syncope.apache.org\";\n             String subject = \"Test notification \" + getUUIDString();\n             Pair<String, String> created = createNotificationTask(true, true, TraceLevel.ALL, sender, subject);\n-            NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), 50);\n+            NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), MAX_WAIT_SECONDS);\n             assertNotNull(taskTO);\n             assertNotNull(taskTO.getNotification());\n             int preExecs = taskTO.getExecutions().size();\n@@ -134,13 +132,13 @@ public void notifyByMailWithRetry() throws Exception {\n     public void issueSYNCOPE81() {\n         String sender = \"syncope81@syncope.apache.org\";\n         Pair<String, String> created = createNotificationTask(true, true, TraceLevel.ALL, sender, \"Test notification\");\n-        NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), 50);\n+        NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), MAX_WAIT_SECONDS);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getNotification());\n         assertTrue(taskTO.getExecutions().isEmpty());\n \n         // generate an execution in order to verify the deletion of a notification task with one or more executions\n-        execNotificationTask(taskService, taskTO.getKey(), 50);\n+        execNotificationTask(taskService, taskTO.getKey(), MAX_WAIT_SECONDS);\n \n         taskTO = taskService.read(TaskType.NOTIFICATION, taskTO.getKey(), true);\n         assertTrue(taskTO.isExecuted());\n@@ -156,14 +154,14 @@ public void issueSYNCOPE86() {\n         Pair<String, String> created = createNotificationTask(true, true, TraceLevel.ALL, sender, \"Test notification\");\n \n         // 2. get NotificationTaskTO for user just created\n-        NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), 50);\n+        NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), MAX_WAIT_SECONDS);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getNotification());\n         assertTrue(taskTO.getExecutions().isEmpty());\n \n         try {\n             // 3. execute the generated NotificationTask\n-            execNotificationTask(taskService, taskTO.getKey(), 50);\n+            execNotificationTask(taskService, taskTO.getKey(), MAX_WAIT_SECONDS);\n \n             // 4. verify\n             taskTO = taskService.read(TaskType.NOTIFICATION, taskTO.getKey(), true);\n@@ -183,7 +181,7 @@ public void issueSYNCOPE192() throws Exception {\n         String sender = \"syncopetest-\" + getUUIDString() + \"@syncope.apache.org\";\n         String subject = \"Test notification \" + getUUIDString();\n         Pair<String, String> created = createNotificationTask(true, true, TraceLevel.NONE, sender, subject);\n-        NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), 50);\n+        NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), MAX_WAIT_SECONDS);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getNotification());\n         assertTrue(taskTO.getExecutions().isEmpty());\n@@ -195,7 +193,7 @@ public void issueSYNCOPE192() throws Exception {\n         } catch (InterruptedException e) {\n         }\n \n-        assertTrue(verifyMail(sender, subject, created.getRight(), 50));\n+        verifyMail(sender, subject, created.getRight(), MAX_WAIT_SECONDS);\n \n         // verify that last exec status was updated\n         taskTO = taskService.read(TaskType.NOTIFICATION, taskTO.getKey(), true);\n@@ -211,14 +209,14 @@ public void issueSYNCOPE445() throws Exception {\n         String subject = \"Test notification \" + getUUIDString();\n         Pair<String, String> created = createNotificationTask(\n                 true, true, TraceLevel.ALL, sender, subject, \"syncope445@syncope.apache.org\");\n-        NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), 50);\n+        NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), MAX_WAIT_SECONDS);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getNotification());\n         assertTrue(taskTO.getExecutions().isEmpty());\n \n-        execNotificationTask(taskService, taskTO.getKey(), 50);\n+        execNotificationTask(taskService, taskTO.getKey(), MAX_WAIT_SECONDS);\n \n-        assertTrue(verifyMail(sender, subject, created.getRight(), 50));\n+        verifyMail(sender, subject, created.getRight(), MAX_WAIT_SECONDS);\n \n         // verify task\n         taskTO = taskService.read(TaskType.NOTIFICATION, taskTO.getKey(), true);\n@@ -275,20 +273,15 @@ public void issueSYNCOPE446() throws Exception {\n         assertNotNull(groupTO);\n \n         // 3. verify\n-        NotificationTaskTO taskTO = findNotificationTask(notification.getKey(), 50);\n+        NotificationTaskTO taskTO = findNotificationTask(notification.getKey(), MAX_WAIT_SECONDS);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getNotification());\n         assertTrue(taskTO.getRecipients().containsAll(\n                 new TestNotificationRecipientsProvider().provideRecipients(null)));\n \n-        NotificationTaskTO foundViaList = taskService.<NotificationTaskTO>search(\n-                new TaskQuery.Builder(TaskType.NOTIFICATION).notification(notification.getKey()).build()).\n-                getResult().get(0);\n-        assertEquals(taskTO, foundViaList);\n+        execNotificationTask(taskService, taskTO.getKey(), MAX_WAIT_SECONDS);\n \n-        execNotificationTask(taskService, taskTO.getKey(), 50);\n-\n-        assertTrue(verifyMail(sender, subject, \"notificationtest@syncope.apache.org\", 50));\n+        verifyMail(sender, subject, \"notificationtest@syncope.apache.org\", MAX_WAIT_SECONDS);\n     }\n \n     @Test\n@@ -303,5 +296,4 @@ public void issueSYNCOPE492() throws Exception {\n                 taskService.search(new TaskQuery.Builder(TaskType.NOTIFICATION).notification(created.getLeft()).build());\n         assertEquals(0, tasks.getSize());\n     }\n-\n }"},{"sha":"f63272a2d5c7f4a5ef03f9755eb620005704f4f3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":28,"deletions":43,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=72c8cfdcb42d4698670f92e1b8cb7b65191820c3","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.fit.core;\n \n+import static org.awaitility.Awaitility.await;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n@@ -35,13 +36,14 @@\n import java.nio.charset.StandardCharsets;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.HashSet;\n import java.util.Locale;\n import java.util.Map;\n import java.util.Optional;\n import java.util.Properties;\n import java.util.Set;\n import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.SerializationUtils;\n@@ -71,7 +73,6 @@\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RemediationTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -305,9 +306,9 @@ public void fromCSV() throws Exception {\n             assertNotNull(userTO);\n             assertEquals(\"active\", userTO.getStatus());\n \n-            Set<String> otherPullTaskKeys = new HashSet<>();\n-            otherPullTaskKeys.add(\"feae4e57-15ca-40d9-b973-8b9015efca49\");\n-            otherPullTaskKeys.add(\"55d5e74b-497e-4bc0-9156-73abef4b9adc\");\n+            Set<String> otherPullTaskKeys = Set.of(\n+                    \"feae4e57-15ca-40d9-b973-8b9015efca49\",\n+                    \"55d5e74b-497e-4bc0-9156-73abef4b9adc\");\n             execProvisioningTasks(taskService, TaskType.PULL, otherPullTaskKeys, MAX_WAIT_SECONDS, false);\n \n             // Matching --> UNLINK\n@@ -432,25 +433,20 @@ public void reconcileFromLDAP() {\n                 taskService, TaskType.PULL, \"1e419ca4-ea81-4493-a14f-28b90113686d\", MAX_WAIT_SECONDS, false);\n \n         // 4. verify that LDAP group membership is pulled as Syncope membership\n-        int i = 0;\n-        PagedResult<UserTO> members;\n-        do {\n+        AtomicReference<Integer> numMembers = new AtomicReference<>();\n+        await().atMost(MAX_WAIT_SECONDS, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n             try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n+                PagedResult<UserTO> members = userService.search(\n+                        new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                                fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(groupTO.getKey()).query()).\n+                                build());\n+                numMembers.set(members.getResult().size());\n+                return !members.getResult().isEmpty();\n+            } catch (Exception e) {\n+                return false;\n             }\n-\n-            members = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                    fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(groupTO.getKey()).query()).\n-                    build());\n-            assertNotNull(members);\n-\n-            i++;\n-        } while (members.getResult().isEmpty() && i < MAX_WAIT_SECONDS);\n-        if (i == MAX_WAIT_SECONDS) {\n-            fail(\"Timeout while checking for memberships of \" + groupTO.getName());\n-        }\n-        assertEquals(1, members.getResult().size());\n+        });\n+        assertEquals(1, numMembers.get());\n \n         // SYNCOPE-1343, verify that the title attribute has been reset\n         matchingUsers = userService.search(\n@@ -471,24 +467,16 @@ public void reconcileFromLDAP() {\n         execProvisioningTask(\n                 taskService, TaskType.PULL, \"1e419ca4-ea81-4493-a14f-28b90113686d\", MAX_WAIT_SECONDS, false);\n \n-        i = 0;\n-        do {\n+        await().atMost(MAX_WAIT_SECONDS, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n             try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n+                return userService.search(\n+                        new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                                fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(groupTO.getKey()).query()).\n+                                build()).getResult().isEmpty();\n+            } catch (Exception e) {\n+                return false;\n             }\n-\n-            members = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                    fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(groupTO.getKey()).query()).\n-                    build());\n-            assertNotNull(members);\n-\n-            i++;\n-        } while (!members.getResult().isEmpty() && i < MAX_WAIT_SECONDS);\n-        if (i == MAX_WAIT_SECONDS) {\n-            fail(\"Timeout while checking for memberships of \" + groupTO.getName());\n-        }\n-        assertEquals(0, members.getResult().size());\n+        });\n     }\n \n     @Test\n@@ -1059,14 +1047,11 @@ public void issueSYNCOPE307() {\n         taskService.update(TaskType.PULL, task);\n \n         // exec task: one user from CSV will match the user created above and template will be applied\n-        execProvisioningTask(taskService, TaskType.PULL, task.getKey(), MAX_WAIT_SECONDS, false);\n+        ExecTO exec = execProvisioningTask(taskService, TaskType.PULL, task.getKey(), MAX_WAIT_SECONDS, false);\n \n         // check that template was successfully applied\n         // 1. propagation to db\n-        PagedResult<PropagationTaskTO> tasks = taskService.search(new TaskQuery.Builder(TaskType.PROPAGATION).\n-                anyTypeKind(AnyTypeKind.USER).entityKey(userTO.getKey()).resource(RESOURCE_NAME_DBVIRATTR).build());\n-        assertFalse(tasks.getResult().isEmpty());\n-        assertEquals(ExecStatus.SUCCESS.name(), tasks.getResult().get(0).getLatestExecStatus());\n+        assertEquals(ExecStatus.SUCCESS.name(), exec.getStatus());\n \n         JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n         String value = queryForObject(jdbcTemplate,"},{"sha":"5c4406d90874061ecdcc8a03241870e13cb99e4f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PushTaskITCase.java","status":"modified","additions":12,"deletions":15,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java?ref=72c8cfdcb42d4698670f92e1b8cb7b65191820c3","patch":"@@ -26,7 +26,6 @@\n import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n import javax.ws.rs.core.Response;\n@@ -157,11 +156,11 @@ public void pushUnmatchingUsers() throws Exception {\n                 getResources().contains(RESOURCE_NAME_TESTDB2));\n         // ------------------------------------------\n \n-        Set<String> pushTaskKeys = new HashSet<>();\n-        pushTaskKeys.add(\"af558be4-9d2f-4359-bf85-a554e6e90be1\");\n-        pushTaskKeys.add(\"97f327b6-2eff-4d35-85e8-d581baaab855\");\n-        pushTaskKeys.add(\"03aa2a04-4881-4573-9117-753f81b04865\");\n-        pushTaskKeys.add(\"5e5f7c7e-9de7-4c6a-99f1-4df1af959807\");\n+        Set<String> pushTaskKeys = Set.of(\n+                \"af558be4-9d2f-4359-bf85-a554e6e90be1\",\n+                \"97f327b6-2eff-4d35-85e8-d581baaab855\",\n+                \"03aa2a04-4881-4573-9117-753f81b04865\",\n+                \"5e5f7c7e-9de7-4c6a-99f1-4df1af959807\");\n         execProvisioningTasks(taskService, TaskType.PUSH, pushTaskKeys, MAX_WAIT_SECONDS, false);\n \n         // ------------------------------------------\n@@ -220,11 +219,10 @@ public void pushMatchingUser() throws Exception {\n         assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='rossini'\").size());\n         // ------------------------------------------\n \n-        Set<String> pushTaskKeys = new HashSet<>();\n-        pushTaskKeys.add(\"ec674143-480a-4816-98ad-b61fa090821e\");\n-        pushTaskKeys.add(\"c46edc3a-a18b-4af2-b707-f4a415507496\");\n-        pushTaskKeys.add(\"5e5f7c7e-9de7-4c6a-99f1-4df1af959807\");\n-\n+        Set<String> pushTaskKeys = Set.of(\n+                \"ec674143-480a-4816-98ad-b61fa090821e\",\n+                \"c46edc3a-a18b-4af2-b707-f4a415507496\",\n+                \"5e5f7c7e-9de7-4c6a-99f1-4df1af959807\");\n         execProvisioningTasks(taskService, TaskType.PUSH, pushTaskKeys, MAX_WAIT_SECONDS, false);\n \n         // ------------------------------------------\n@@ -255,10 +253,9 @@ public void pushMatchingUser() throws Exception {\n         assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='verdi'\").size());\n         // ------------------------------------------\n \n-        pushTaskKeys.clear();\n-        pushTaskKeys.add(\"24b1be9c-7e3b-443a-86c9-798ebce5eaf2\");\n-        pushTaskKeys.add(\"375c7b7f-9e3a-4833-88c9-b7787b0a69f2\");\n-\n+        pushTaskKeys = Set.of(\n+                \"24b1be9c-7e3b-443a-86c9-798ebce5eaf2\",\n+                \"375c7b7f-9e3a-4833-88c9-b7787b0a69f2\");\n         execProvisioningTasks(taskService, TaskType.PUSH, pushTaskKeys, MAX_WAIT_SECONDS, false);\n \n         // ------------------------------------------"},{"sha":"6832e643557409b088dda2b7c0e9ee5cf37f503e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReportITCase.java","status":"modified","additions":25,"deletions":56,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java?ref=72c8cfdcb42d4698670f92e1b8cb7b65191820c3","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.fit.core;\n \n+import static org.awaitility.Awaitility.await;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -30,6 +31,8 @@\n import java.util.Date;\n import java.util.List;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n@@ -61,36 +64,20 @@\n public class ReportITCase extends AbstractITCase {\n \n     protected static String execReport(final String reportKey) {\n-        ReportTO reportTO = reportService.read(reportKey);\n-        assertNotNull(reportTO);\n-        assertNotNull(reportTO.getExecutions());\n-\n-        int preExecSize = reportTO.getExecutions().size();\n-        ExecuteQuery query = new ExecuteQuery.Builder().key(reportKey).build();\n-        ExecTO exec = reportService.execute(query);\n-        assertNotNull(exec);\n-        assertNotNull(exec.getExecutor());\n+        AtomicReference<ReportTO> reportTO = new AtomicReference<>(reportService.read(reportKey));\n+        int preExecSize = reportTO.get().getExecutions().size();\n+        ExecTO execution = reportService.execute(new ExecuteQuery.Builder().key(reportKey).build());\n+        assertNotNull(execution.getExecutor());\n \n-        int i = 0;\n-\n-        // wait for completion (executions incremented)\n-        do {\n+        await().atMost(MAX_WAIT_SECONDS, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n             try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n+                reportTO.set(reportService.read(reportKey));\n+                return preExecSize < reportTO.get().getExecutions().size();\n+            } catch (Exception e) {\n+                return false;\n             }\n-\n-            reportTO = reportService.read(reportKey);\n-\n-            assertNotNull(reportTO);\n-            assertNotNull(reportTO.getExecutions());\n-\n-            i++;\n-        } while (preExecSize == reportTO.getExecutions().size() && i < MAX_WAIT_SECONDS);\n-        if (i == MAX_WAIT_SECONDS) {\n-            fail(\"Timeout when executing report \" + reportKey);\n-        }\n-        exec = reportTO.getExecutions().get(reportTO.getExecutions().size() - 1);\n+        });\n+        ExecTO exec = reportTO.get().getExecutions().get(reportTO.get().getExecutions().size() - 1);\n         assertEquals(ReportExecStatus.SUCCESS.name(), exec.getStatus());\n         return exec.getKey();\n     }\n@@ -353,23 +340,10 @@ public void issueSYNCOPE43() {\n         reportTO.setActive(true);\n         reportTO.setTemplate(\"sample\");\n         reportTO = createReport(reportTO);\n-        assertNotNull(reportTO);\n-\n-        ExecTO execution = reportService.execute(new ExecuteQuery.Builder().key(reportTO.getKey()).build());\n-        assertNotNull(execution);\n-\n-        int maxit = MAX_WAIT_SECONDS;\n-        do {\n-            try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n-            }\n-\n-            reportTO = reportService.read(reportTO.getKey());\n-\n-            maxit--;\n-        } while (reportTO.getExecutions().isEmpty() && maxit > 0);\n+        assertNotNull(reportTO.getKey());\n \n+        execReport(reportTO.getKey());\n+        reportTO = reportService.read(reportTO.getKey());\n         assertEquals(1, reportTO.getExecutions().size());\n     }\n \n@@ -379,26 +353,21 @@ public void issueSYNCOPE102() throws IOException {\n         ReportTO reportTO = reportService.read(\"0062ea9c-924d-4ecf-9961-4492a8cc6d1b\");\n         reportTO.setName(\"issueSYNCOPE102\" + getUUIDString());\n         reportTO = createReport(reportTO);\n-        assertNotNull(reportTO);\n+        assertNotNull(reportTO.getKey());\n+        String reportKey = reportTO.getKey();\n \n         // Execute (multiple requests)\n         for (int i = 0; i < 10; i++) {\n-            ExecTO execution = reportService.execute(new ExecuteQuery.Builder().key(reportTO.getKey()).build());\n-            assertNotNull(execution);\n+            assertNotNull(reportService.execute(new ExecuteQuery.Builder().key(reportKey).build()));\n         }\n \n         // Wait for one execution\n-        int maxit = MAX_WAIT_SECONDS;\n-        do {\n+        await().atMost(MAX_WAIT_SECONDS, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n             try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n+                return !reportService.read(reportKey).getExecutions().isEmpty();\n+            } catch (Exception e) {\n+                return false;\n             }\n-\n-            reportTO = reportService.read(reportTO.getKey());\n-\n-            maxit--;\n-        } while (reportTO.getExecutions().isEmpty() && maxit > 0);\n-        assertFalse(reportTO.getExecutions().isEmpty());\n+        });\n     }\n }"},{"sha":"deb2d64a40d24b1df46d6c3d710b65ebc1366f7c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SchedTaskITCase.java","status":"modified","additions":34,"deletions":42,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java?ref=72c8cfdcb42d4698670f92e1b8cb7b65191820c3","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.fit.core;\n \n+import static org.awaitility.Awaitility.await;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -28,6 +29,8 @@\n import java.util.Date;\n import java.util.List;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n import java.util.stream.Collectors;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.time.DateUtils;\n@@ -38,6 +41,7 @@\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -99,28 +103,25 @@ public void deferred() {\n         Response response = taskService.create(TaskType.SCHEDULED, task);\n         task = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n         assertNotNull(task);\n+        String taskKey = task.getKey();\n+        assertNotNull(task);\n \n         Date initial = new Date();\n         Date later = DateUtils.addSeconds(initial, 2);\n \n-        taskService.execute(new ExecuteQuery.Builder().key(task.getKey()).startAt(later).build());\n-\n-        int i = 0;\n+        AtomicReference<TaskTO> taskTO = new AtomicReference<>(task);\n+        int preSyncSize = taskTO.get().getExecutions().size();\n+        ExecTO execution = taskService.execute(new ExecuteQuery.Builder().key(task.getKey()).startAt(later).build());\n+        assertNotNull(execution.getExecutor());\n \n-        // wait for completion (executions incremented)\n-        do {\n+        await().atMost(MAX_WAIT_SECONDS, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n             try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n+                taskTO.set(taskService.read(TaskType.SCHEDULED, taskKey, true));\n+                return preSyncSize < taskTO.get().getExecutions().size();\n+            } catch (Exception e) {\n+                return false;\n             }\n-\n-            task = taskService.read(TaskType.SCHEDULED, task.getKey(), true);\n-\n-            assertNotNull(task);\n-            assertNotNull(task.getExecutions());\n-\n-            i++;\n-        } while (task.getExecutions().isEmpty() && i < MAX_WAIT_SECONDS);\n+        });\n \n         PagedResult<ExecTO> execs =\n                 taskService.listExecutions(new ExecQuery.Builder().key(task.getKey()).build());\n@@ -165,7 +166,7 @@ public void issueSYNCOPE144() {\n     @Test\n     public void issueSYNCOPE660() {\n         List<JobTO> jobs = taskService.listJobs();\n-        int old_size = jobs.size();\n+        int oldSize = jobs.size();\n \n         ImplementationTO taskJobDelegate = implementationService.read(\n                 IdRepoImplementationType.TASKJOB_DELEGATE, TestSampleJobDelegate.class.getSimpleName());\n@@ -180,41 +181,32 @@ public void issueSYNCOPE660() {\n         task = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n \n         jobs = taskService.listJobs();\n-        assertEquals(old_size + 1, jobs.size());\n+        assertEquals(oldSize + 1, jobs.size());\n \n         taskService.actionJob(task.getKey(), JobAction.START);\n \n-        int i = 0;\n-\n-        do {\n+        AtomicReference<List<JobTO>> run = new AtomicReference<>();\n+        await().atMost(MAX_WAIT_SECONDS, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n             try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n-                // ignore\n+                run.set(taskService.listJobs().stream().filter(JobTO::isRunning).collect(Collectors.toList()));\n+                return !run.get().isEmpty();\n+            } catch (Exception e) {\n+                return false;\n             }\n-\n-            jobs = taskService.listJobs().stream().filter(JobTO::isRunning).collect(Collectors.toList());\n-            i++;\n-        } while (jobs.size() < 1 && i < MAX_WAIT_SECONDS);\n-\n-        assertEquals(1, jobs.size());\n-        assertEquals(task.getKey(), jobs.get(0).getRefKey());\n+        });\n+        assertEquals(1, run.get().size());\n+        assertEquals(task.getKey(), run.get().get(0).getRefKey());\n \n         taskService.actionJob(task.getKey(), JobAction.STOP);\n \n-        i = 0;\n-\n-        do {\n+        run.set(List.of());\n+        await().atMost(MAX_WAIT_SECONDS, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n             try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n-                // ignore\n+                run.set(taskService.listJobs().stream().filter(JobTO::isRunning).collect(Collectors.toList()));\n+                return run.get().isEmpty();\n+            } catch (Exception e) {\n+                return false;\n             }\n-\n-            jobs = taskService.listJobs().stream().filter(JobTO::isRunning).collect(Collectors.toList());\n-            i++;\n-        } while (jobs.size() >= 1 && i < MAX_WAIT_SECONDS);\n-\n-        assertTrue(jobs.isEmpty());\n+        });\n     }\n }"}]}