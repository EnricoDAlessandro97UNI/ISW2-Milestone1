{"sha":"3ff71d74363f119a4378a152d5125348dc79060f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjNmZjcxZDc0MzYzZjExOWE0Mzc4YTE1MmQ1MTI1MzQ4ZGM3OTA2MGY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-11-12T08:55:31Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-11-12T08:55:31Z"},"message":"[SYNCOPE-435] Merge from 1_1_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1540975 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e300ff954363d2d75a782dbb8c616bf4f3ac17dc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e300ff954363d2d75a782dbb8c616bf4f3ac17dc"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3ff71d74363f119a4378a152d5125348dc79060f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3ff71d74363f119a4378a152d5125348dc79060f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3ff71d74363f119a4378a152d5125348dc79060f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3ff71d74363f119a4378a152d5125348dc79060f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d271417ac044d74714579ac0674dd8c0fe2a0b84","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d271417ac044d74714579ac0674dd8c0fe2a0b84","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d271417ac044d74714579ac0674dd8c0fe2a0b84"}],"stats":{"total":309,"additions":191,"deletions":118},"files":[{"sha":"e165669956a6e57e4596e1943910e07f71d52952","filename":"common/src/main/java/org/apache/syncope/common/types/ResourceOperation.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3ff71d74363f119a4378a152d5125348dc79060f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FResourceOperation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3ff71d74363f119a4378a152d5125348dc79060f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FResourceOperation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FResourceOperation.java?ref=3ff71d74363f119a4378a152d5125348dc79060f","patch":"@@ -18,16 +18,10 @@\n  */\r\n package org.apache.syncope.common.types;\r\n \r\n-import javax.xml.bind.annotation.XmlEnum;\r\n-\r\n-@XmlEnum\r\n public enum ResourceOperation {\r\n \r\n     CREATE,\r\n     UPDATE,\r\n-    DELETE;\r\n+    DELETE\r\n \r\n-    public static ResourceOperation fromString(final String value) {\r\n-        return ResourceOperation.valueOf(value.toUpperCase());\r\n-    }\r\n }\r"},{"sha":"08d0e14d40fddc374429b8dec76448125803ab43","filename":"core/src/main/java/org/apache/syncope/core/connid/ConnObjectUtil.java","status":"modified","additions":5,"deletions":11,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java?ref=3ff71d74363f119a4378a152d5125348dc79060f","patch":"@@ -85,12 +85,6 @@ public class ConnObjectUtil {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(ConnObjectUtil.class);\n \n-    /**\n-     * JEXL engine for evaluating connector's account link.\n-     */\n-    @Autowired\n-    private JexlUtil jexlUtil;\n-\n     /**\n      * User data binder.\n      */\n@@ -350,14 +344,14 @@ private <T extends AbstractAttributableTO> T getAttributableTOFromConnObject(fin\n         if (template != null) {\n             if (template instanceof UserTO) {\n                 if (StringUtils.isNotBlank(((UserTO) template).getUsername())) {\n-                    String evaluated = jexlUtil.evaluate(((UserTO) template).getUsername(), attributableTO);\n+                    String evaluated = JexlUtil.evaluate(((UserTO) template).getUsername(), attributableTO);\n                     if (StringUtils.isNotBlank(evaluated)) {\n                         ((UserTO) attributableTO).setUsername(evaluated);\n                     }\n                 }\n \n                 if (StringUtils.isNotBlank(((UserTO) template).getPassword())) {\n-                    String evaluated = jexlUtil.evaluate(((UserTO) template).getPassword(), attributableTO);\n+                    String evaluated = JexlUtil.evaluate(((UserTO) template).getPassword(), attributableTO);\n                     if (StringUtils.isNotBlank(evaluated)) {\n                         ((UserTO) attributableTO).setPassword(evaluated);\n                     }\n@@ -378,7 +372,7 @@ private <T extends AbstractAttributableTO> T getAttributableTOFromConnObject(fin\n             }\n             if (template instanceof RoleTO) {\n                 if (StringUtils.isNotBlank(((RoleTO) template).getName())) {\n-                    String evaluated = jexlUtil.evaluate(((RoleTO) template).getName(), attributableTO);\n+                    String evaluated = JexlUtil.evaluate(((RoleTO) template).getName(), attributableTO);\n                     if (StringUtils.isNotBlank(evaluated)) {\n                         ((RoleTO) attributableTO).setName(evaluated);\n                     }\n@@ -543,7 +537,7 @@ private void retrieveVirAttrValue(\n                         final String accountId = attrUtil.getAccountIdItem(resource) == null\n                                 ? null\n                                 : MappingUtil.getAccountIdValue(\n-                                owner, resource, attrUtil.getAccountIdItem(resource));\n+                                        owner, resource, attrUtil.getAccountIdItem(resource));\n \n                         if (StringUtils.isBlank(accountId)) {\n                             throw new IllegalArgumentException(\"No AccountId found for \" + resource.getName());\n@@ -643,7 +637,7 @@ private AttributeTO evaluateAttrTemplate(final AbstractAttributableTO attributab\n \n         if (template.getValues() != null && !template.getValues().isEmpty()) {\n             for (String value : template.getValues()) {\n-                String evaluated = jexlUtil.evaluate(value, attributableTO);\n+                String evaluated = JexlUtil.evaluate(value, attributableTO);\n                 if (StringUtils.isNotBlank(evaluated)) {\n                     result.getValues().add(evaluated);\n                 }"},{"sha":"8c70d6557637b0a38cc30e3a04016bceee40b381","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractDerAttr.java","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java?ref=3ff71d74363f119a4378a152d5125348dc79060f","patch":"@@ -25,9 +25,7 @@\n import javax.persistence.MappedSuperclass;\n import org.apache.commons.jexl2.JexlContext;\n import org.apache.commons.jexl2.MapContext;\n-import org.apache.syncope.core.util.ApplicationContextProvider;\n import org.apache.syncope.core.util.JexlUtil;\n-import org.springframework.context.ConfigurableApplicationContext;\n \n @MappedSuperclass\n public abstract class AbstractDerAttr extends AbstractBaseBean {\n@@ -48,16 +46,13 @@ public Long getId() {\n      * @return the value of this derived attribute\n      */\n     public String getValue(final Collection<? extends AbstractAttr> attributes) {\n-        final ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n-        final JexlUtil jexlUtil = context.getBean(JexlUtil.class);\n-\n         // Prepare context using user attributes\n         final JexlContext jexlContext = new MapContext();\n-        jexlUtil.addAttrsToContext(attributes, jexlContext);\n-        jexlUtil.addFieldsToContext(getOwner(), jexlContext);\n+        JexlUtil.addAttrsToContext(attributes, jexlContext);\n+        JexlUtil.addFieldsToContext(getOwner(), jexlContext);\n \n         // Evaluate expression using the context prepared before\n-        return jexlUtil.evaluate(getSchema().getExpression(), jexlContext);\n+        return JexlUtil.evaluate(getSchema().getExpression(), jexlContext);\n     }\n \n     public abstract <T extends AbstractAttributable> T getOwner();"},{"sha":"47fb9c696b3a827b2e3341386174721bfed47c33","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=3ff71d74363f119a4378a152d5125348dc79060f","patch":"@@ -72,7 +72,7 @@ public class SyncopeUser extends AbstractAttributable {\n     @Id\n     private Long id;\n \n-    @NotNull\n+    @NotNull(message = \"Blank password\")\n     private String password;\n \n     @Transient\n@@ -122,7 +122,7 @@ public class SyncopeUser extends AbstractAttributable {\n      * Username/Login.\n      */\n     @Column(unique = true)\n-    @NotNull\n+    @NotNull(message = \"Blank username\")\n     private String username;\n \n     /**"},{"sha":"97fe79d561c0d86464417ebf976b9aa1e7bdf05b","filename":"core/src/main/java/org/apache/syncope/core/propagation/PropagationTaskExecutor.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationTaskExecutor.java?ref=3ff71d74363f119a4378a152d5125348dc79060f","patch":"@@ -30,6 +30,18 @@\n  */\n public interface PropagationTaskExecutor {\n \n+    /**\n+     * Name for special propagation attribute used to indicate whether there are attributes, marked as mandatory in the\n+     * mapping but not to be propagated.\n+     */\n+    String MANDATORY_MISSING_ATTR_NAME = \"__MANDATORY_MISSING__\";\n+\n+    /**\n+     * Name for special propagation attribute used to indicate whether there are attributes, marked as mandatory in the\n+     * mapping but about to be propagated as null or empty.\n+     */\n+    String MANDATORY_NULL_OR_EMPTY_ATTR_NAME = \"__MANDATORY_NULL_OR_EMPTY__\";\n+\n     /**\n      * Execute the given PropagationTask and returns the generated TaskExec.\n      *"},{"sha":"b62169f5d93f3f46b723388fcc5956a74a9d6ff6","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/AbstractPropagationTaskExecutor.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java?ref=3ff71d74363f119a4378a152d5125348dc79060f","patch":"@@ -18,10 +18,12 @@\n  */\n package org.apache.syncope.core.propagation.impl;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n@@ -125,6 +127,27 @@ protected void createOrUpdate(final PropagationTask task, final ConnectorObject\n         // set of attributes to be propagated\n         final Set<Attribute> attributes = new HashSet<Attribute>(task.getAttributes());\n \n+        // check if there is any missing or null / empty mandatory attribute\n+        List<Object> mandatoryAttrNames = new ArrayList<Object>();\n+        Attribute mandatoryMissing = AttributeUtil.find(MANDATORY_MISSING_ATTR_NAME, task.getAttributes());\n+        if (mandatoryMissing != null) {\n+            attributes.remove(mandatoryMissing);\n+\n+            if (beforeObj == null) {\n+                mandatoryAttrNames.addAll(mandatoryMissing.getValue());\n+            }\n+        }\n+        Attribute mandatoryNullOrEmpty = AttributeUtil.find(MANDATORY_NULL_OR_EMPTY_ATTR_NAME, task.getAttributes());\n+        if (mandatoryNullOrEmpty != null) {\n+            attributes.remove(mandatoryNullOrEmpty);\n+\n+            mandatoryAttrNames.addAll(mandatoryNullOrEmpty.getValue());\n+        }\n+        if (!mandatoryAttrNames.isEmpty()) {\n+            throw new IllegalArgumentException(\n+                    \"Not attempted because there are mandatory attributes without value(s): \" + mandatoryAttrNames);\n+        }\n+\n         if (beforeObj == null) {\n             // 1. get accountId\n             final String accountId = task.getAccountId();"},{"sha":"ff7cfed2e68aa609bc25690e9ab70b6772091212","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/LDAPMembershipPropagationActions.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FLDAPMembershipPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FLDAPMembershipPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FLDAPMembershipPropagationActions.java?ref=3ff71d74363f119a4378a152d5125348dc79060f","patch":"@@ -55,9 +55,6 @@ public class LDAPMembershipPropagationActions extends DefaultPropagationActions\n     @Autowired\n     protected UserDAO userDAO;\n \n-    @Autowired\n-    protected JexlUtil jexlUtil;\n-\n     /**\n      * Allows easy subclassing for the ConnId AD connector bundle.\n      *\n@@ -83,11 +80,11 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n                         LOG.debug(\"Evaluating accountLink for {}\", role);\n \n                         final JexlContext jexlContext = new MapContext();\n-                        jexlUtil.addFieldsToContext(role, jexlContext);\n-                        jexlUtil.addAttrsToContext(role.getAttrs(), jexlContext);\n-                        jexlUtil.addDerAttrsToContext(role.getDerAttrs(), role.getAttrs(), jexlContext);\n+                        JexlUtil.addFieldsToContext(role, jexlContext);\n+                        JexlUtil.addAttrsToContext(role.getAttrs(), jexlContext);\n+                        JexlUtil.addDerAttrsToContext(role.getDerAttrs(), role.getAttrs(), jexlContext);\n                         final String roleAccountLink =\n-                                jexlUtil.evaluate(task.getResource().getRmapping().getAccountLink(), jexlContext);\n+                                JexlUtil.evaluate(task.getResource().getRmapping().getAccountLink(), jexlContext);\n                         LOG.debug(\"AccountLink for {} is '{}'\", role, roleAccountLink);\n                         if (StringUtils.isNotBlank(roleAccountLink)) {\n                             roleAccountLinks.add(roleAccountLink);"},{"sha":"cb0a4df864e1211292dad537e3fbf86cc517391c","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/PropagationManager.java","status":"modified","additions":36,"deletions":7,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java?ref=3ff71d74363f119a4378a152d5125348dc79060f","patch":"@@ -46,11 +46,13 @@\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n import org.apache.syncope.core.propagation.PropagationByResource;\n+import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.apache.syncope.core.rest.data.AbstractAttributableDataBinder;\n import org.apache.syncope.core.rest.data.RoleDataBinder;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.util.AttributableUtil;\n+import org.apache.syncope.core.util.JexlUtil;\n import org.apache.syncope.core.util.MappingUtil;\n import org.apache.syncope.core.util.VirAttrCache;\n import org.apache.syncope.core.workflow.WorkflowResult;\n@@ -488,6 +490,7 @@ protected List<PropagationTask> getDeleteTaskIds(final AbstractAttributable attr\n      * Prepare attributes for sending to a connector instance.\n      *\n      * @param <T> user / role\n+     * @param attrUtil user / role\n      * @param subject given user / role\n      * @param password clear-text password\n      * @param vAttrsToBeRemoved virtual attributes to be removed\n@@ -496,17 +499,17 @@ protected List<PropagationTask> getDeleteTaskIds(final AbstractAttributable attr\n      * @param resource target resource\n      * @return account link + prepared attributes\n      */\n-    protected <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> prepareAttributes(final T subject,\n-            final String password, final Set<String> vAttrsToBeRemoved,\n-            final Map<String, AttributeMod> vAttrsToBeUpdated, final Boolean enable, final ExternalResource resource) {\n+    protected <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> prepareAttributes(\n+            final AttributableUtil attrUtil, final T subject, final String password,\n+            final Set<String> vAttrsToBeRemoved, final Map<String, AttributeMod> vAttrsToBeUpdated,\n+            final Boolean enable, final ExternalResource resource) {\n \n         LOG.debug(\"Preparing resource attributes for {} on resource {} with attributes {}\",\n                 subject, resource, subject.getAttrs());\n \n         Set<Attribute> attributes = new HashSet<Attribute>();\n         String accountId = null;\n \n-        final AttributableUtil attrUtil = AttributableUtil.getInstance(subject);\n         for (AbstractMappingItem mapping : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n             LOG.debug(\"Processing schema {}\", mapping.getIntAttrName());\n \n@@ -515,6 +518,7 @@ protected <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> pre\n                         && mapping.getIntMappingType() == IntMappingType.UserVirtualSchema)\n                         || (attrUtil.getType() == AttributableType.ROLE\n                         && mapping.getIntMappingType() == IntMappingType.RoleVirtualSchema)) {\n+\n                     LOG.debug(\"Expire entry cache {}-{}\", subject.getId(), mapping.getIntAttrName());\n                     virAttrCache.expire(attrUtil.getType(), subject.getId(), mapping.getIntAttrName());\n                 }\n@@ -527,8 +531,7 @@ protected <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> pre\n                 }\n \n                 if (preparedAttribute.getValue() != null) {\n-                    final Attribute alreadyAdded = AttributeUtil.find(preparedAttribute.getValue().getName(),\n-                            attributes);\n+                    Attribute alreadyAdded = AttributeUtil.find(preparedAttribute.getValue().getName(), attributes);\n \n                     if (alreadyAdded == null) {\n                         attributes.add(preparedAttribute.getValue());\n@@ -620,9 +623,35 @@ protected <T extends AbstractAttributable> List<PropagationTask> createTasks(fin\n                     task.setPropagationMode(resource.getPropagationMode());\n                     task.setOldAccountId(propByRes.getOldAccountId(resource.getName()));\n \n-                    Map.Entry<String, Set<Attribute>> preparedAttrs = prepareAttributes(subject, password,\n+                    Map.Entry<String, Set<Attribute>> preparedAttrs = prepareAttributes(attrUtil, subject, password,\n                             vAttrsToBeRemoved, vAttrsToBeUpdated, enable, resource);\n                     task.setAccountId(preparedAttrs.getKey());\n+\n+                    // Check if any of mandatory attributes (in the mapping) is missing or not received any value: \n+                    // if so, add special attributes that will be evaluated by PropagationTaskExecutor\n+                    List<String> mandatoryMissing = new ArrayList<String>();\n+                    List<String> mandatoryNullOrEmpty = new ArrayList<String>();\n+                    for (AbstractMappingItem item : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n+                        if (!item.isAccountid()\n+                                && JexlUtil.evaluateMandatoryCondition(item.getMandatoryCondition(), subject)) {\n+\n+                            Attribute attr = AttributeUtil.find(item.getExtAttrName(), preparedAttrs.getValue());\n+                            if (attr == null) {\n+                                mandatoryMissing.add(item.getExtAttrName());\n+                            } else if (attr.getValue() == null || attr.getValue().isEmpty()) {\n+                                mandatoryNullOrEmpty.add(item.getExtAttrName());\n+                            }\n+                        }\n+                    }\n+                    if (!mandatoryMissing.isEmpty()) {\n+                        preparedAttrs.getValue().add(AttributeBuilder.build(\n+                                PropagationTaskExecutor.MANDATORY_MISSING_ATTR_NAME, mandatoryMissing));\n+                    }\n+                    if (!mandatoryNullOrEmpty.isEmpty()) {\n+                        preparedAttrs.getValue().add(AttributeBuilder.build(\n+                                PropagationTaskExecutor.MANDATORY_NULL_OR_EMPTY_ATTR_NAME, mandatoryNullOrEmpty));\n+                    }\n+\n                     task.setAttributes(preparedAttrs.getValue());\n \n                     tasks.add(task);"},{"sha":"b5f7e018c6c22839a584d7a2dd0d88cf326da75c","filename":"core/src/main/java/org/apache/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":5,"deletions":22,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=3ff71d74363f119a4378a152d5125348dc79060f","patch":"@@ -25,8 +25,6 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n-import org.apache.commons.jexl2.JexlContext;\n-import org.apache.commons.jexl2.MapContext;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.mod.AbstractAttributableMod;\n import org.apache.syncope.common.mod.AttributeMod;\n@@ -138,9 +136,6 @@ public abstract class AbstractAttributableDataBinder {\n     @Autowired\n     protected PolicyDAO policyDAO;\n \n-    @Autowired\n-    private JexlUtil jexlUtil;\n-\n     @SuppressWarnings(\"unchecked\")\n     protected <T extends AbstractSchema> T getSchema(final String schemaName, final Class<T> reference) {\n         T result = null;\n@@ -239,17 +234,6 @@ protected void fillAttribute(final List<String> values, final AttributableUtil a\n         }\n     }\n \n-    private boolean evaluateMandatoryCondition(final String mandatoryCondition,\n-            final AbstractAttributable attributable) {\n-\n-        JexlContext jexlContext = new MapContext();\n-        jexlUtil.addAttrsToContext(attributable.getAttrs(), jexlContext);\n-        jexlUtil.addDerAttrsToContext(attributable.getDerAttrs(), attributable.getAttrs(), jexlContext);\n-        jexlUtil.addVirAttrsToContext(attributable.getVirAttrs(), jexlContext);\n-\n-        return Boolean.parseBoolean(jexlUtil.evaluate(mandatoryCondition, jexlContext));\n-    }\n-\n     private boolean evaluateMandatoryCondition(final AttributableUtil attrUtil, final ExternalResource resource,\n             final AbstractAttributable attributable, final String intAttrName, final IntMappingType intMappingType) {\n \n@@ -259,7 +243,7 @@ private boolean evaluateMandatoryCondition(final AttributableUtil attrUtil, fina\n                 attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION), intAttrName, intMappingType);\n         for (Iterator<AbstractMappingItem> itor = mappings.iterator(); itor.hasNext() && !result;) {\n             final AbstractMappingItem mapping = itor.next();\n-            result |= evaluateMandatoryCondition(mapping.getMandatoryCondition(), attributable);\n+            result |= JexlUtil.evaluateMandatoryCondition(mapping.getMandatoryCondition(), attributable);\n         }\n \n         return result;\n@@ -307,9 +291,9 @@ private SyncopeClientException checkMandatory(final AttributableUtil attrUtil,\n         for (AbstractNormalSchema schema : normalSchemas) {\n             if (attributable.getAttr(schema.getName()) == null\n                     && !schema.isReadonly()\n-                    && (evaluateMandatoryCondition(schema.getMandatoryCondition(), attributable)\n+                    && (JexlUtil.evaluateMandatoryCondition(schema.getMandatoryCondition(), attributable)\n                     || evaluateMandatoryCondition(attrUtil, attributable, schema.getName(),\n-                    attrUtil.intMappingType()))) {\n+                            attrUtil.intMappingType()))) {\n \n                 LOG.error(\"Mandatory schema \" + schema.getName() + \" not provided with values\");\n \n@@ -335,7 +319,7 @@ private SyncopeClientException checkMandatory(final AttributableUtil attrUtil,\n         for (AbstractDerSchema derSchema : derSchemas) {\n             if (attributable.getDerAttr(derSchema.getName()) == null\n                     && evaluateMandatoryCondition(attrUtil, attributable, derSchema.getName(),\n-                    attrUtil.derIntMappingType())) {\n+                            attrUtil.derIntMappingType())) {\n \n                 LOG.error(\"Mandatory derived schema \" + derSchema.getName() + \" does not evaluate to any value\");\n \n@@ -362,7 +346,7 @@ && evaluateMandatoryCondition(attrUtil, attributable, derSchema.getName(),\n             if (attributable.getVirAttr(virSchema.getName()) == null\n                     && !virSchema.isReadonly()\n                     && evaluateMandatoryCondition(attrUtil, attributable, virSchema.getName(),\n-                    attrUtil.virIntMappingType())) {\n+                            attrUtil.virIntMappingType())) {\n \n                 LOG.error(\"Mandatory virtual schema \" + virSchema.getName() + \" not provided with values\");\n \n@@ -622,7 +606,6 @@ protected PropagationByResource fill(final AbstractAttributable attributable,\n                     }\n                 }\n \n-\n                 // 1.1 remove values\n                 Set<Long> valuesToBeRemoved = new HashSet<Long>();\n                 for (String valueToBeRemoved : attributeMod.getValuesToBeRemoved()) {"},{"sha":"0fa97ae73a1037eee7e8e2a8b0787518cef976ed","filename":"core/src/main/java/org/apache/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=3ff71d74363f119a4378a152d5125348dc79060f","patch":"@@ -63,14 +63,11 @@ public class ResourceDataBinder {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(ResourceDataBinder.class);\n \n-    private static final String[] MAPPINGITEM_IGNORE_PROPERTIES = {\"id\", \"mapping\"};\n+    private static final String[] MAPPINGITEM_IGNORE_PROPERTIES = { \"id\", \"mapping\" };\n \n     @Autowired\n     private ConnInstanceDAO connInstanceDAO;\n \n-    @Autowired\n-    private JexlUtil jexlUtil;\n-\n     @Autowired\n     private PolicyDAO policyDAO;\n \n@@ -203,7 +200,7 @@ private AbstractMappingItem getMappingItem(final MappingItemTO itemTO, final Abs\n         }\n \n         // no mandatory condition implies mandatory condition false\n-        if (!jexlUtil.isExpressionValid(itemTO.getMandatoryCondition() == null\n+        if (!JexlUtil.isExpressionValid(itemTO.getMandatoryCondition() == null\n                 ? \"false\" : itemTO.getMandatoryCondition())) {\n \n             SyncopeClientException invalidMandatoryCondition = SyncopeClientException.build("},{"sha":"ad0f1d58c75e3d616751869cd80cd5feb187587c","filename":"core/src/main/java/org/apache/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=3ff71d74363f119a4378a152d5125348dc79060f","patch":"@@ -43,12 +43,9 @@ public class SchemaDataBinder {\n     @Autowired\n     private SchemaDAO schemaDAO;\n \n-    @Autowired\n-    private JexlUtil jexlUtil;\n-\n     // --------------- NORMAL -----------------\n     private <T extends AbstractNormalSchema> void fill(final T schema, final SchemaTO schemaTO) {\n-        if (!jexlUtil.isExpressionValid(schemaTO.getMandatoryCondition())) {\n+        if (!JexlUtil.isExpressionValid(schemaTO.getMandatoryCondition())) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n             sce.getElements().add(schemaTO.getMandatoryCondition());\n             throw sce;\n@@ -108,7 +105,7 @@ private <T extends AbstractDerSchema> T populate(final T derSchema, final DerSch\n             requiredValuesMissing.getElements().add(\"expression\");\n \n             scce.addException(requiredValuesMissing);\n-        } else if (!jexlUtil.isExpressionValid(derSchemaTO.getExpression())) {\n+        } else if (!JexlUtil.isExpressionValid(derSchemaTO.getExpression())) {\n             SyncopeClientException invalidMandatoryCondition = SyncopeClientException.build(\n                     ClientExceptionType.InvalidValues);\n             invalidMandatoryCondition.getElements().add(derSchemaTO.getExpression());"},{"sha":"be4ccc32d457efad6b9df6973bcbf12b5d6608ad","filename":"core/src/main/java/org/apache/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=3ff71d74363f119a4378a152d5125348dc79060f","patch":"@@ -64,9 +64,9 @@ public class TaskDataBinder {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(TaskDataBinder.class);\n \n-    private static final String[] IGNORE_TASK_PROPERTIES = {\"executions\", \"resource\",};\n+    private static final String[] IGNORE_TASK_PROPERTIES = { \"executions\", \"resource\", };\n \n-    private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = {\"id\", \"task\"};\n+    private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = { \"id\", \"task\" };\n \n     @Autowired\n     private ResourceDAO resourceDAO;\n@@ -77,17 +77,14 @@ public class TaskDataBinder {\n     @Autowired\n     private SchedulerFactoryBean scheduler;\n \n-    @Autowired\n-    private JexlUtil jexlUtil;\n-\n     private void checkJexl(final AbstractAttributableTO attributableTO, final SyncopeClientException sce) {\n         for (AttributeTO attrTO : attributableTO.getAttrs()) {\n-            if (!attrTO.getValues().isEmpty() && !jexlUtil.isExpressionValid(attrTO.getValues().get(0))) {\n+            if (!attrTO.getValues().isEmpty() && !JexlUtil.isExpressionValid(attrTO.getValues().get(0))) {\n                 sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n             }\n         }\n         for (AttributeTO attrTO : attributableTO.getVirAttrs()) {\n-            if (!attrTO.getValues().isEmpty() && !jexlUtil.isExpressionValid(attrTO.getValues().get(0))) {\n+            if (!attrTO.getValues().isEmpty() && !JexlUtil.isExpressionValid(attrTO.getValues().get(0))) {\n                 sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n             }\n         }\n@@ -100,10 +97,10 @@ private void fill(final SyncTask task, final SyncTaskTO taskTO) {\n         if (taskTO.getUserTemplate() != null) {\n             UserTO template = taskTO.getUserTemplate();\n \n-            if (StringUtils.isNotBlank(template.getUsername()) && !jexlUtil.isExpressionValid(template.getUsername())) {\n+            if (StringUtils.isNotBlank(template.getUsername()) && !JexlUtil.isExpressionValid(template.getUsername())) {\n                 sce.getElements().add(\"Invalid JEXL: \" + template.getUsername());\n             }\n-            if (StringUtils.isNotBlank(template.getPassword()) && !jexlUtil.isExpressionValid(template.getPassword())) {\n+            if (StringUtils.isNotBlank(template.getPassword()) && !JexlUtil.isExpressionValid(template.getPassword())) {\n                 sce.getElements().add(\"Invalid JEXL: \" + template.getPassword());\n             }\n \n@@ -116,7 +113,7 @@ private void fill(final SyncTask task, final SyncTaskTO taskTO) {\n         if (taskTO.getRoleTemplate() != null) {\n             RoleTO template = taskTO.getRoleTemplate();\n \n-            if (StringUtils.isNotBlank(template.getName()) && !jexlUtil.isExpressionValid(template.getName())) {\n+            if (StringUtils.isNotBlank(template.getName()) && !JexlUtil.isExpressionValid(template.getName())) {\n                 sce.getElements().add(\"Invalid JEXL: \" + template.getName());\n             }\n "},{"sha":"df0f69b294ed0f74b605541ecc1619c07c754445","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=3ff71d74363f119a4378a152d5125348dc79060f","patch":"@@ -304,7 +304,6 @@ public PropagationByResource update(final SyncopeUser toBeUpdated, final UserMod\n             if (membership == null) {\n                 LOG.debug(\"Invalid membership id specified to be removed: {}\", membershipId);\n             } else {\n-\n                 if (!membershipToBeAddedRoleIds.contains(membership.getSyncopeRole().getId())) {\n                     toBeDeprovisioned.addAll(membership.getSyncopeRole().getResourceNames());\n                 }\n@@ -315,7 +314,6 @@ public PropagationByResource update(final SyncopeUser toBeUpdated, final UserMod\n                 // some modifications compared to the one stored in the DB\n                 membership = user.getMembership(membership.getSyncopeRole().getId());\n                 if (membershipToBeAddedRoleIds.contains(membership.getSyncopeRole().getId())) {\n-\n                     Set<Long> attributeIds = new HashSet<Long>(membership.getAttrs().size());\n                     for (AbstractAttr attribute : membership.getAttrs()) {\n                         attributeIds.add(attribute.getId());\n@@ -327,7 +325,6 @@ public PropagationByResource update(final SyncopeUser toBeUpdated, final UserMod\n \n                     // remove derived attributes\n                     for (AbstractDerAttr derAttr : membership.getDerAttrs()) {\n-\n                         attributeIds.add(derAttr.getId());\n                     }\n                     for (Long derAttrId : attributeIds) {"},{"sha":"ee9f6fd110e7b19ab77d7ef2259ad83f9391be0c","filename":"core/src/main/java/org/apache/syncope/core/util/AttributableUtil.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java?ref=3ff71d74363f119a4378a152d5125348dc79060f","patch":"@@ -240,14 +240,17 @@ public <T extends AbstractMappingItem> List<T> getMappingItems(\n                     }\n                 }\n                 break;\n+\n             case PROPAGATION:\n                 for (T item : items) {\n                     if (MappingPurpose.SYNCHRONIZATION != item.getPurpose()) {\n                         result.add(item);\n                     }\n                 }\n                 break;\n+\n             case BOTH:\n+            default:\n                 result.addAll(items);\n         }\n "},{"sha":"43a5aece3f410cdd47184463a418412f398072d0","filename":"core/src/main/java/org/apache/syncope/core/util/JexlUtil.java","status":"modified","additions":41,"deletions":14,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java?ref=3ff71d74363f119a4378a152d5125348dc79060f","patch":"@@ -37,32 +37,41 @@\n import org.apache.syncope.common.to.AbstractAttributableTO;\n import org.apache.syncope.common.to.AttributeTO;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n+import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractDerAttr;\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * @see http://commons.apache.org/jexl/reference/index.html\n  */\n-public class JexlUtil {\n+public final class JexlUtil {\n \n     /**\n      * Logger.\n      *\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(JexlUtil.class);\n \n-    private static final String[] IGNORE_FIELDS = {\"password\", \"clearPassword\", \"serialVersionUID\", \"class\"};\n+    private static final String[] IGNORE_FIELDS = { \"password\", \"clearPassword\", \"serialVersionUID\", \"class\" };\n \n-    @Autowired\n-    private JexlEngine jexlEngine;\n+    private static JexlEngine jexlEngine;\n \n-    public boolean isExpressionValid(final String expression) {\n+    private static JexlEngine getEngine() {\n+        synchronized (LOG) {\n+            if (jexlEngine == null) {\n+                jexlEngine = ApplicationContextProvider.getApplicationContext().getBean(JexlEngine.class);\n+            }\n+        }\n+\n+        return jexlEngine;\n+    }\n+\n+    public static boolean isExpressionValid(final String expression) {\n         boolean result;\n         try {\n-            jexlEngine.createExpression(expression);\n+            getEngine().createExpression(expression);\n             result = true;\n         } catch (JexlException e) {\n             LOG.error(\"Invalid jexl expression: \" + expression, e);\n@@ -72,12 +81,12 @@ public boolean isExpressionValid(final String expression) {\n         return result;\n     }\n \n-    public String evaluate(final String expression, final JexlContext jexlContext) {\n+    public static String evaluate(final String expression, final JexlContext jexlContext) {\n         String result = \"\";\n \n         if (StringUtils.isNotBlank(expression) && jexlContext != null) {\n             try {\n-                Expression jexlExpression = jexlEngine.createExpression(expression);\n+                Expression jexlExpression = getEngine().createExpression(expression);\n                 Object evaluated = jexlExpression.evaluate(jexlContext);\n                 if (evaluated != null) {\n                     result = evaluated.toString();\n@@ -92,7 +101,7 @@ public String evaluate(final String expression, final JexlContext jexlContext) {\n         return result;\n     }\n \n-    public JexlContext addFieldsToContext(final Object attributable, final JexlContext jexlContext) {\n+    public static JexlContext addFieldsToContext(final Object attributable, final JexlContext jexlContext) {\n         JexlContext context = jexlContext == null ? new MapContext() : jexlContext;\n \n         try {\n@@ -137,7 +146,7 @@ public JexlContext addFieldsToContext(final Object attributable, final JexlConte\n         return context;\n     }\n \n-    public JexlContext addAttrsToContext(final Collection<? extends AbstractAttr> attrs,\n+    public static JexlContext addAttrsToContext(final Collection<? extends AbstractAttr> attrs,\n             final JexlContext jexlContext) {\n \n         JexlContext context = jexlContext == null\n@@ -160,7 +169,7 @@ public JexlContext addAttrsToContext(final Collection<? extends AbstractAttr> at\n         return context;\n     }\n \n-    public JexlContext addDerAttrsToContext(final Collection<? extends AbstractDerAttr> derAttrs,\n+    public static JexlContext addDerAttrsToContext(final Collection<? extends AbstractDerAttr> derAttrs,\n             final Collection<? extends AbstractAttr> attrs, final JexlContext jexlContext) {\n \n         JexlContext context = jexlContext == null\n@@ -183,7 +192,7 @@ public JexlContext addDerAttrsToContext(final Collection<? extends AbstractDerAt\n         return context;\n     }\n \n-    public JexlContext addVirAttrsToContext(final Collection<? extends AbstractVirAttr> virAttrs,\n+    public static JexlContext addVirAttrsToContext(final Collection<? extends AbstractVirAttr> virAttrs,\n             final JexlContext jexlContext) {\n \n         JexlContext context = jexlContext == null\n@@ -206,7 +215,7 @@ public JexlContext addVirAttrsToContext(final Collection<? extends AbstractVirAt\n         return context;\n     }\n \n-    public String evaluate(final String expression, final AbstractAttributableTO attributableTO) {\n+    public static String evaluate(final String expression, final AbstractAttributableTO attributableTO) {\n         final JexlContext context = new MapContext();\n \n         addFieldsToContext(attributableTO, context);\n@@ -245,4 +254,22 @@ public String evaluate(final String expression, final AbstractAttributableTO att\n         // Evaluate expression using the context prepared before\n         return evaluate(expression, context);\n     }\n+\n+    public static boolean evaluateMandatoryCondition(final String mandatoryCondition,\n+            final AbstractAttributable attributable) {\n+\n+        JexlContext jexlContext = new MapContext();\n+        addAttrsToContext(attributable.getAttrs(), jexlContext);\n+        addDerAttrsToContext(attributable.getDerAttrs(), attributable.getAttrs(), jexlContext);\n+        addVirAttrsToContext(attributable.getVirAttrs(), jexlContext);\n+\n+        return Boolean.parseBoolean(evaluate(mandatoryCondition, jexlContext));\n+    }\n+\n+    /**\n+     * Private default constructor, for static-only classes.\n+     */\n+    private JexlUtil() {\n+    }\n+\n }"},{"sha":"ee6a653c3973efcac3d3336495df63848531d97c","filename":"core/src/main/java/org/apache/syncope/core/util/MappingUtil.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java?ref=3ff71d74363f119a4378a152d5125348dc79060f","patch":"@@ -124,7 +124,6 @@ public static <T extends AbstractMappingItem> Set<T> getMatchingMappingItems(fin\n      * @param vAttrsToBeRemoved virtual attributes to be removed\n      * @param vAttrsToBeUpdated virtual attributes to be added\n      * @return account link + prepared attribute\n-     * @throws ClassNotFoundException if schema type for given mapping does not exists in current class loader\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T extends AbstractAttributable> Map.Entry<String, Attribute> prepareAttribute(\n@@ -266,14 +265,11 @@ public static <T extends AbstractAttributable> Name evaluateNAME(final T subject\n         // Evaluate AccountLink expression\n         String evalAccountLink = null;\n         if (StringUtils.isNotBlank(attrUtil.getAccountLink(resource))) {\n-            final ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n-            final JexlUtil jexlUtil = context.getBean(JexlUtil.class);\n-\n             final JexlContext jexlContext = new MapContext();\n-            jexlUtil.addFieldsToContext(subject, jexlContext);\n-            jexlUtil.addAttrsToContext(subject.getAttrs(), jexlContext);\n-            jexlUtil.addDerAttrsToContext(subject.getDerAttrs(), subject.getAttrs(), jexlContext);\n-            evalAccountLink = jexlUtil.evaluate(attrUtil.getAccountLink(resource), jexlContext);\n+            JexlUtil.addFieldsToContext(subject, jexlContext);\n+            JexlUtil.addAttrsToContext(subject.getAttrs(), jexlContext);\n+            JexlUtil.addDerAttrsToContext(subject.getDerAttrs(), subject.getAttrs(), jexlContext);\n+            evalAccountLink = JexlUtil.evaluate(attrUtil.getAccountLink(resource), jexlContext);\n         }\n \n         // If AccountLink evaluates to an empty string, just use the provided AccountId as Name(),"},{"sha":"be6ce8b9508fbb148ddfefe9efe779df7dd14963","filename":"core/src/main/resources/syncopeContext.xml","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml?ref=3ff71d74363f119a4378a152d5125348dc79060f","patch":"@@ -96,8 +96,6 @@ under the License.\n     <property name=\"silent\" value=\"false\"/>\n   </bean>\n   \n-  <bean id=\"jexlUtil\" class=\"org.apache.syncope.core.util.JexlUtil\"/>\n-  \n   <bean id=\"virAttrCache\" class=\"org.apache.syncope.core.util.VirAttrCache\" scope=\"singleton\">\n     <constructor-arg value=\"60\"/>\n     <constructor-arg value=\"5000\"/>"},{"sha":"f98a50317d675f9e28279ff7d371e027978f5695","filename":"core/src/test/java/org/apache/syncope/core/notification/NotificationTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java?ref=3ff71d74363f119a4378a152d5125348dc79060f","patch":"@@ -33,7 +33,7 @@\n import javax.mail.Message;\n import javax.mail.Session;\n import javax.mail.Store;\n-import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.search.MembershipCond;\n import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.to.MembershipTO;"},{"sha":"835a740aa0213e4f1d65ed2858ff9f56d04de05c","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":40,"deletions":6,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3ff71d74363f119a4378a152d5125348dc79060f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=3ff71d74363f119a4378a152d5125348dc79060f","patch":"@@ -34,6 +34,7 @@\n import java.util.List;\n \n import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.SerializationUtils;\n \n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.mod.MembershipMod;\n@@ -49,6 +50,7 @@\n import org.apache.syncope.common.to.ConfigurationTO;\n import org.apache.syncope.common.to.ConnObjectTO;\n import org.apache.syncope.common.to.MappingItemTO;\n+import org.apache.syncope.common.to.MappingTO;\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n import org.apache.syncope.common.to.PropagationStatusTO;\n@@ -1990,7 +1992,7 @@ public void issueSYNCOPE357() {\n \n     @Test\n     public void issueSYNCOPE383() {\n-        // 1. create user on testdb and testdb2\n+        // 1. create user without resources\n         UserTO userTO = getUniqueSampleTO(\"syncope383@apache.org\");\n         userTO.getResources().clear();\n         userTO = createUser(userTO);\n@@ -2022,6 +2024,8 @@ public void issueSYNCOPE383() {\n     public void issueSYNCOPE397() {\n         ResourceTO csv = resourceService.read(RESOURCE_NAME_CSV);\n         // change mapping of resource-csv\n+        MappingTO origMapping = SerializationUtils.clone(csv.getUmapping());\n+        assertNotNull(origMapping);\n         for (MappingItemTO item : csv.getUmapping().getItems()) {\n             if (\"email\".equals(item.getIntAttrName())) {\n                 // unset internal attribute mail and set virtual attribute virtualdata as mapped to external email\n@@ -2072,20 +2076,22 @@ public void issueSYNCOPE397() {\n         //modify virtual attribute\n         userMod.getVirAttrsToRemove().add(\"virtualdata\");\n         userMod.getVirAttrsToUpdate().add(attributeMod(\"virtualdata\", \"test@testoneone.com\"));\n-        // check Syncope change password\n \n+        // check Syncope change password\n         StatusMod pwdPropRequest = new StatusMod();\n-        //change pwd on external resource\n-        pwdPropRequest.getResourceNames().add(\"ws-target-resource-2\");\n-        //change pwd on Syncope\n         pwdPropRequest.setOnSyncope(true);\n+        pwdPropRequest.getResourceNames().add(\"ws-target-resource-2\");\n         userMod.setPwdPropRequest(pwdPropRequest);\n+\n         toBeUpdated = updateUser(userMod);\n         assertNotNull(toBeUpdated);\n         assertEquals(\"test@testoneone.com\", toBeUpdated.getVirAttrs().get(0).getValues().get(0));\n         // check if propagates correctly with assertEquals on size of tasks list\n-\n         assertEquals(2, toBeUpdated.getPropagationStatusTOs().size());\n+\n+        // restore mapping of resource-csv\n+        csv.setUmapping(origMapping);\n+        resourceService.update(csv.getName(), csv);\n     }\n \n     @Test\n@@ -2252,4 +2258,32 @@ public void issueSYNCOPE426() {\n         assertNotNull(userTO);\n     }\n \n+    @Test\n+    public void issueSYNCOPE435() {\n+        // 1. try to create user without password - fail\n+        UserTO userTO = getUniqueSampleTO(\"syncope435@syncope.apache.org\");\n+        userTO.setPassword(null);\n+\n+        try {\n+            createUser(userTO);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidSyncopeUser, e.getType());\n+        }\n+\n+        userTO.setPassword(\"password123\");\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        // 2. try to update user by subscribing a resource - works but propagation is not even attempted\n+        UserMod userMod = new UserMod();\n+        userMod.getResourcesToAdd().add(\"ws-target-resource-1\");\n+\n+        userTO = userService.update(userTO.getId(), userMod).readEntity(UserTO.class);\n+        assertEquals(Collections.singleton(\"ws-target-resource-1\"), userTO.getResources());\n+        assertFalse(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n+        assertTrue(userTO.getPropagationStatusTOs().get(0).getFailureReason().\n+                startsWith(\"Not attempted because there are mandatory attributes without value(s): [__PASSWORD__]\"));\n+    }\n+\n }"}]}