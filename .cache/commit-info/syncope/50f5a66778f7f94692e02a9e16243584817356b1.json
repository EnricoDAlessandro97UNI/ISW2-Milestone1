{"sha":"50f5a66778f7f94692e02a9e16243584817356b1","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjUwZjVhNjY3NzhmN2Y5NDY5MmUwMmE5ZTE2MjQzNTg0ODE3MzU2YjE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-06-01T16:52:42Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-06-14T16:21:53Z"},"message":"Fixing OpenJPA warnings about 'Supplied parameters do not match expected parameters'","tree":{"sha":"2ee2d3ecd742ffdc7488a78968ab459215dafab4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2ee2d3ecd742ffdc7488a78968ab459215dafab4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/50f5a66778f7f94692e02a9e16243584817356b1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/50f5a66778f7f94692e02a9e16243584817356b1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/50f5a66778f7f94692e02a9e16243584817356b1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/50f5a66778f7f94692e02a9e16243584817356b1/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0f738186c95c51e3aa861babc34f28d0627e773a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0f738186c95c51e3aa861babc34f28d0627e773a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0f738186c95c51e3aa861babc34f28d0627e773a"}],"stats":{"total":143,"additions":115,"deletions":28},"files":[{"sha":"c527a153720511c3ecbefa48251b6b0bda93590e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":24,"deletions":6,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/50f5a66778f7f94692e02a9e16243584817356b1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/50f5a66778f7f94692e02a9e16243584817356b1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=50f5a66778f7f94692e02a9e16243584817356b1","patch":"@@ -56,6 +56,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n+import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n@@ -211,12 +212,29 @@ public void delete(final AnyObject any) {\n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public List<Group> findDynGroupMemberships(final AnyObject anyObject) {\n-        TypedQuery<Group> query = entityManager().createQuery(\n-                \"SELECT e.group FROM \" + JPAADynGroupMembership.class.getSimpleName()\n-                + \" e WHERE :anyObject MEMBER OF e.anyObjects\", Group.class);\n-        query.setParameter(\"anyObject\", anyObject);\n-\n-        return query.getResultList();\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT t2.id FROM \" + JPAADynGroupMembership.TABLE + \" t0 \"\n+                + \"INNER JOIN ADynGroupMembership_AnyObject t1 \"\n+                + \"ON t0.id = t1.aDynGroupMembership_id \"\n+                + \"LEFT OUTER JOIN \" + JPAGroup.TABLE + \" t2 \"\n+                + \"ON t0.GROUP_ID = t2.id \"\n+                + \"WHERE t1.anyObject_id = ?1\");\n+        query.setParameter(1, anyObject.getKey());\n+\n+        List<Group> result = new ArrayList<>();\n+        for (Object key : query.getResultList()) {\n+            String actualKey = key instanceof Object[]\n+                    ? (String) ((Object[]) key)[0]\n+                    : ((String) key);\n+\n+            Group group = groupDAO.find(actualKey);\n+            if (group == null) {\n+                LOG.error(\"Could not find group with id {}, even though returned by the native query\", actualKey);\n+            } else if (!result.contains(group)) {\n+                result.add(group);\n+            }\n+        }\n+        return result;\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)"},{"sha":"0cd53a0c8ec1ed8ac781e3a7e92721bf506ee96d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":48,"deletions":12,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/50f5a66778f7f94692e02a9e16243584817356b1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/50f5a66778f7f94692e02a9e16243584817356b1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=50f5a66778f7f94692e02a9e16243584817356b1","patch":"@@ -66,6 +66,8 @@\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n+import org.apache.syncope.core.persistence.jpa.entity.JPARole;\n+import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n@@ -418,23 +420,57 @@ public void delete(final User user) {\n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public List<Role> findDynRoleMemberships(final User user) {\n-        TypedQuery<Role> query = entityManager().createQuery(\n-                \"SELECT e.role FROM \" + JPADynRoleMembership.class.getSimpleName()\n-                + \" e WHERE :user MEMBER OF e.users\", Role.class);\n-        query.setParameter(\"user\", user);\n-\n-        return query.getResultList();\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT t2.id FROM \" + JPADynRoleMembership.TABLE + \" t0 \"\n+                + \"INNER JOIN \" + JPADynRoleMembership.TABLE + \"_User t1 \"\n+                + \"ON t0.id = t1.dynRoleMembership_id \"\n+                + \"LEFT OUTER JOIN \" + JPARole.TABLE + \" t2 \"\n+                + \"ON t0.ROLE_ID = t2.id \"\n+                + \"WHERE (t1.user_id = ?1)\");\n+        query.setParameter(1, user.getKey());\n+\n+        List<Role> result = new ArrayList<>();\n+        for (Object key : query.getResultList()) {\n+            String actualKey = key instanceof Object[]\n+                    ? (String) ((Object[]) key)[0]\n+                    : ((String) key);\n+\n+            Role role = roleDAO.find(actualKey);\n+            if (role == null) {\n+                LOG.error(\"Could not find role with id {}, even though returned by the native query\", actualKey);\n+            } else if (!result.contains(role)) {\n+                result.add(role);\n+            }\n+        }\n+        return result;\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public List<Group> findDynGroupMemberships(final User user) {\n-        TypedQuery<Group> query = entityManager().createQuery(\n-                \"SELECT e.group FROM \" + JPAUDynGroupMembership.class.getSimpleName()\n-                + \" e WHERE :user MEMBER OF e.users\", Group.class);\n-        query.setParameter(\"user\", user);\n-\n-        return query.getResultList();\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT t2.id FROM \" + JPAUDynGroupMembership.TABLE + \" t0 \"\n+                + \"INNER JOIN \" + JPAUDynGroupMembership.TABLE + \"_User t1 \"\n+                + \"ON t0.id = t1.uDynGroupMembership_id \"\n+                + \"LEFT OUTER JOIN \" + JPAGroup.TABLE + \" t2 \"\n+                + \"ON t0.GROUP_ID = t2.id \"\n+                + \"WHERE (t1.user_id = ?1)\");\n+        query.setParameter(1, user.getKey());\n+\n+        List<Group> result = new ArrayList<>();\n+        for (Object key : query.getResultList()) {\n+            String actualKey = key instanceof Object[]\n+                    ? (String) ((Object[]) key)[0]\n+                    : ((String) key);\n+\n+            Group group = groupDAO.find(actualKey);\n+            if (group == null) {\n+                LOG.error(\"Could not find group with id {}, even though returned by the native query\", actualKey);\n+            } else if (!result.contains(group)) {\n+                result.add(group);\n+            }\n+        }\n+        return result;\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)"},{"sha":"61db7b3e35744206ad15ed39e8be7fdceef0544a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java","status":"modified","additions":39,"deletions":6,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/50f5a66778f7f94692e02a9e16243584817356b1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/50f5a66778f7f94692e02a9e16243584817356b1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java?ref=50f5a66778f7f94692e02a9e16243584817356b1","patch":"@@ -18,8 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n+import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -29,8 +31,17 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAnyTypeClass;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAConnInstance;\n import org.apache.syncope.core.persistence.jpa.entity.JPAVirSchema;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPullPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMapping;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n \n@@ -62,12 +73,34 @@ public List<VirSchema> findByAnyTypeClasses(final Collection<AnyTypeClass> anyTy\n \n     @Override\n     public List<VirSchema> findByProvision(final Provision provision) {\n-        TypedQuery<VirSchema> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAVirSchema.class.getSimpleName()\n-                + \" e WHERE e.provision=:provision\", VirSchema.class);\n-        query.setParameter(\"provision\", provision);\n-\n-        return query.getResultList();\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT t0.id FROM VirSchema t0 \"\n+                + \"LEFT OUTER JOIN \" + JPAAnyTypeClass.TABLE + \" t1 ON t0.ANYTYPECLASS_ID = t1.id \"\n+                + \"LEFT OUTER JOIN \" + JPAProvision.TABLE + \" t2 ON t0.PROVISION_ID = t2.id \"\n+                + \"LEFT OUTER JOIN \" + JPAAnyType.TABLE + \" t3 ON t2.ANYTYPE_ID = t3.id \"\n+                + \"LEFT OUTER JOIN \" + JPAMapping.TABLE + \" t4 ON t2.id = t4.PROVISION_ID \"\n+                + \"LEFT OUTER JOIN \" + JPAExternalResource.TABLE + \" t5 ON t2.RESOURCE_ID = t5.id \"\n+                + \"LEFT OUTER JOIN \" + JPAAccountPolicy.TABLE + \" t6 ON t5.ACCOUNTPOLICY_ID = t6.id \"\n+                + \"LEFT OUTER JOIN \" + JPAConnInstance.TABLE + \" t7 ON t5.CONNECTOR_ID = t7.id \"\n+                + \"LEFT OUTER JOIN \" + JPAPasswordPolicy.TABLE + \" t8 ON t5.PASSWORDPOLICY_ID = t8.id \"\n+                + \"LEFT OUTER JOIN \" + JPAPullPolicy.TABLE + \" t9 ON t5.PULLPOLICY_ID = t9.id \"\n+                + \"WHERE t0.PROVISION_ID = ?1\");\n+        query.setParameter(1, provision.getKey());\n+\n+        List<VirSchema> result = new ArrayList<>();\n+        for (Object key : query.getResultList()) {\n+            String actualKey = key instanceof Object[]\n+                    ? (String) ((Object[]) key)[0]\n+                    : ((String) key);\n+\n+            VirSchema virSchema = find(actualKey);\n+            if (virSchema == null) {\n+                LOG.error(\"Could not find schema with id {}, even though returned by the native query\", actualKey);\n+            } else if (!result.contains(virSchema)) {\n+                result.add(virSchema);\n+            }\n+        }\n+        return result;\n     }\n \n     @Override"},{"sha":"a8540bd4f3043a0b9998108efc6db8f2a58d3a1a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/50f5a66778f7f94692e02a9e16243584817356b1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/50f5a66778f7f94692e02a9e16243584817356b1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java?ref=50f5a66778f7f94692e02a9e16243584817356b1","patch":"@@ -266,6 +266,9 @@ public void emptyMapping() {\n         assertNotNull(ldap.getProvision(anyTypeDAO.findUser()).getMapping());\n         assertNotNull(ldap.getProvision(anyTypeDAO.findGroup()).getMapping());\n \n+        // need to avoid any class not defined in this Maven module\n+        ldap.getPropagationActionsClassNames().clear();\n+\n         List<? extends MappingItem> items = ldap.getProvision(anyTypeDAO.findGroup()).getMapping().getItems();\n         assertNotNull(items);\n         assertFalse(items.isEmpty());\n@@ -275,13 +278,10 @@ public void emptyMapping() {\n         }\n \n         Provision groupProvision = ldap.getProvision(anyTypeDAO.findGroup());\n-        ldap.getProvisions().remove(groupProvision);\n         for (VirSchema schema : virSchemaDAO.findByProvision(groupProvision)) {\n             virSchemaDAO.delete(schema.getKey());\n         }\n-\n-        // need to avoid any class not defined in this Maven module\n-        ldap.getPropagationActionsClassNames().clear();\n+        ldap.getProvisions().remove(groupProvision);\n \n         resourceDAO.save(ldap);\n         resourceDAO.flush();"}]}