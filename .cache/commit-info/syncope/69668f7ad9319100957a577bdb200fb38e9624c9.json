{"sha":"69668f7ad9319100957a577bdb200fb38e9624c9","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY5NjY4ZjdhZDkzMTkxMDA5NTdhNTc3YmRiMjAwZmIzOGU5NjI0Yzk=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-12-27T09:16:20Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-12-27T09:16:20Z"},"message":"Merge from 0_7_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247298 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3684738bdaead5ad251b98a884c18fab22911a89","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3684738bdaead5ad251b98a884c18fab22911a89"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/69668f7ad9319100957a577bdb200fb38e9624c9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/69668f7ad9319100957a577bdb200fb38e9624c9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/69668f7ad9319100957a577bdb200fb38e9624c9","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/69668f7ad9319100957a577bdb200fb38e9624c9/comments","author":null,"committer":null,"parents":[{"sha":"845af41c04512ffaed59c12e4412e7ee52a9cb6e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/845af41c04512ffaed59c12e4412e7ee52a9cb6e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/845af41c04512ffaed59c12e4412e7ee52a9cb6e"}],"stats":{"total":340,"additions":208,"deletions":132},"files":[{"sha":"9e0b96245247aff5ee756f51af9449b1e8d78284","filename":"client/src/main/java/org/syncope/client/to/SchemaTO.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/69668f7ad9319100957a577bdb200fb38e9624c9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/69668f7ad9319100957a577bdb200fb38e9624c9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java?ref=69668f7ad9319100957a577bdb200fb38e9624c9","patch":"@@ -14,11 +14,14 @@\n  */\n package org.syncope.client.to;\n \n+import org.apache.commons.lang.StringUtils;\n import org.syncope.client.AbstractBaseBean;\n import org.syncope.types.SchemaType;\n \n public class SchemaTO extends AbstractBaseBean {\n \n+    private static final long serialVersionUID = -8133983392476990308L;\n+\n     private String name;\n \n     private SchemaType type;\n@@ -38,7 +41,7 @@ public class SchemaTO extends AbstractBaseBean {\n     private String validatorClass;\n \n     public SchemaTO() {\n-        mandatoryCondition = \"false\";\n+        type = SchemaType.String;\n     }\n \n     public String getConversionPattern() {\n@@ -50,7 +53,8 @@ public void setConversionPattern(String conversionPattern) {\n     }\n \n     public String getMandatoryCondition() {\n-        return mandatoryCondition;\n+        return StringUtils.isNotBlank(mandatoryCondition)\n+                ? mandatoryCondition : \"false\";\n     }\n \n     public void setMandatoryCondition(String mandatoryCondition) {"},{"sha":"58067e0affbedfe9d5b3d981fd9f8ca7dd2cd9f7","filename":"client/src/main/java/org/syncope/client/util/AttributableOperations.java","status":"modified","additions":16,"deletions":13,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/69668f7ad9319100957a577bdb200fb38e9624c9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Futil%2FAttributableOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/69668f7ad9319100957a577bdb200fb38e9624c9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Futil%2FAttributableOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Futil%2FAttributableOperations.java?ref=69668f7ad9319100957a577bdb200fb38e9624c9","patch":"@@ -63,20 +63,23 @@ private static void populate(final Map<String, AttributeTO> updatedAttrs,\n                     originalAttrs.get(entry.getKey()).getValues())\n                     : Collections.EMPTY_SET;\n \n-            // avoid unwanted inputs\n-            updatedValues.remove(\"\");\n-            if (!entry.getValue().isReadonly()) {\n-                attrMod.setValuesToBeAdded(\n-                        new ArrayList<String>(updatedValues));\n-                if (!attrMod.isEmpty()) {\n-                    result.addAttributeToBeRemoved(attrMod.getSchema());\n+            if (!updatedValues.equals(originalValues)) {\n+                // avoid unwanted inputs\n+                updatedValues.remove(\"\");\n+                if (!entry.getValue().isReadonly()) {\n+                    attrMod.setValuesToBeAdded(\n+                            new ArrayList<String>(updatedValues));\n+                    if (!attrMod.isEmpty()) {\n+                        result.addAttributeToBeRemoved(attrMod.getSchema());\n+                    }\n                 }\n-            }\n \n-            attrMod.setValuesToBeRemoved(new ArrayList<String>(originalValues));\n+                attrMod.setValuesToBeRemoved(new ArrayList<String>(\n+                        originalValues));\n \n-            if (!attrMod.isEmpty()) {\n-                result.addAttributeToBeUpdated(attrMod);\n+                if (!attrMod.isEmpty()) {\n+                    result.addAttributeToBeUpdated(attrMod);\n+                }\n             }\n         }\n     }\n@@ -197,7 +200,7 @@ public static UserMod diff(final UserTO updated, final UserTO original) {\n \n                     if (!attrMod.isEmpty()) {\n                         membMod.addAttributeToBeUpdated(attrMod);\n-                        result.addAttributeToBeRemoved(attrMod.getSchema());\n+                        membMod.addAttributeToBeRemoved(attrMod.getSchema());\n                     }\n                 }\n                 for (AttributeTO attr :\n@@ -214,7 +217,7 @@ public static UserMod diff(final UserTO updated, final UserTO original) {\n \n                     if (!attrMod.isEmpty()) {\n                         membMod.addVirtualAttributeToBeUpdated(attrMod);\n-                        result.addAttributeToBeRemoved(attrMod.getSchema());\n+                        membMod.addAttributeToBeRemoved(attrMod.getSchema());\n                     }\n                 }\n                 membMod.setResourcesToBeAdded(entry.getValue().getResources());"},{"sha":"b86b8c6daafd1a69f5d137cea5b0b1450b06a6da","filename":"console/src/main/java/org/syncope/console/pages/SchemaModalPage.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/69668f7ad9319100957a577bdb200fb38e9624c9/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/69668f7ad9319100957a577bdb200fb38e9624c9/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java?ref=69668f7ad9319100957a577bdb200fb38e9624c9","patch":"@@ -205,6 +205,7 @@ protected void onSubmit(final AjaxRequestTarget target,\n \n                 if (schemaTO.isMultivalue() && schemaTO.isUniqueConstraint()) {\n                     error(getString(\"multivalueAndUniqueConstr.validation\"));\n+                    target.add(feedbackPanel);\n                     return;\n                 }\n "},{"sha":"c7c05c79fc104526393304d73e87bb99b10dec35","filename":"console/src/main/resources/org/syncope/console/pages/BaseModalPage.html","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/69668f7ad9319100957a577bdb200fb38e9624c9/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBaseModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/69668f7ad9319100957a577bdb200fb38e9624c9/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBaseModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBaseModalPage.html?ref=69668f7ad9319100957a577bdb200fb38e9624c9","patch":"@@ -14,7 +14,6 @@\n -->\n <html>\n     <head>\n-        <title>Syncope Modal Window</title>\n         <link rel=\"shortcut icon\" type=\"image/png\" href=\"img/favicon.png\" />\n \n         <link rel=\"stylesheet\" type=\"text/css\" href=\"css/jquery.ui.button.css\" />\n@@ -58,4 +57,4 @@\n \n     <wicket:child />\n </body>\n-</html>\n\\ No newline at end of file\n+</html>"},{"sha":"580c9f6ba65cea719204cad24d31d939cd8ad679","filename":"console/src/main/resources/org/syncope/console/pages/BasePage.html","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/69668f7ad9319100957a577bdb200fb38e9624c9/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBasePage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/69668f7ad9319100957a577bdb200fb38e9624c9/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBasePage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBasePage.html?ref=69668f7ad9319100957a577bdb200fb38e9624c9","patch":"@@ -23,6 +23,11 @@\n \n         <link rel=\"shortcut icon\" type=\"image/png\" href=\"img/favicon.png\" />\n \n+        <style type=\"text/css\">\n+            div.wicket-modal div.w_caption {\n+                height: 16px !important;\n+            }\n+        </style>\n         <link rel=\"stylesheet\" type=\"text/css\" href=\"css/jquery.ui.button.css\" />\n         <link rel=\"stylesheet\" type=\"text/css\" href=\"css/jquery.ui.core.css\" />\n         <link rel=\"stylesheet\" type=\"text/css\" href=\"css/jquery.ui.dialog.css\" />"},{"sha":"6fc04fa39f2996b495fae7b0697ff252985342a6","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractBaseBean.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/69668f7ad9319100957a577bdb200fb38e9624c9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/69668f7ad9319100957a577bdb200fb38e9624c9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java?ref=69668f7ad9319100957a577bdb200fb38e9624c9","patch":"@@ -97,7 +97,7 @@ private String[] getExcludeFields() {\n     }\n \n     @Override\n-    public boolean equals(Object obj) {\n+    public boolean equals(final Object obj) {\n         return EqualsBuilder.reflectionEquals(this, obj, getExcludeFields());\n     }\n "},{"sha":"145f50a4da0ac9ba5764774e3209b102d1c151a9","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UAttr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/69668f7ad9319100957a577bdb200fb38e9624c9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/69668f7ad9319100957a577bdb200fb38e9624c9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java?ref=69668f7ad9319100957a577bdb200fb38e9624c9","patch":"@@ -99,7 +99,7 @@ public <T extends AbstractSchema> T getSchema() {\n     }\n \n     @Override\n-    public <T extends AbstractSchema> void setSchema(T schema) {\n+    public <T extends AbstractSchema> void setSchema(final T schema) {\n         this.schema = (USchema) schema;\n     }\n "},{"sha":"24ac578acd7b73aec3fd009a71137b4175b5d045","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/69668f7ad9319100957a577bdb200fb38e9624c9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/69668f7ad9319100957a577bdb200fb38e9624c9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=69668f7ad9319100957a577bdb200fb38e9624c9","patch":"@@ -26,7 +26,6 @@\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.syncope.client.to.SchemaTO;\n-import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.core.rest.data.SchemaDataBinder;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.SchemaDAO;\n@@ -47,12 +46,10 @@ public class SchemaController extends AbstractController {\n     value = \"/{kind}/create\")\n     public SchemaTO create(final HttpServletResponse response,\n             @RequestBody final SchemaTO schemaTO,\n-            @PathVariable(\"kind\") final String kind)\n-            throws SyncopeClientCompositeErrorException {\n-\n-        AbstractSchema schema = schemaDataBinder.create(\n-                schemaTO, getAttributableUtil(kind).newSchema());\n+            @PathVariable(\"kind\") final String kind) {\n \n+        AbstractSchema schema = getAttributableUtil(kind).newSchema();\n+        schemaDataBinder.create(schemaTO, schema);\n         schema = schemaDAO.save(schema);\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n@@ -72,9 +69,9 @@ public void delete(@PathVariable(\"kind\") final String kind,\n             LOG.error(\"Could not find schema '\" + schemaName + \"'\");\n \n             throw new NotFoundException(schemaName);\n-        } else {\n-            schemaDAO.delete(schemaName, getAttributableUtil(kind));\n         }\n+\n+        schemaDAO.delete(schemaName, getAttributableUtil(kind));\n     }\n \n     @RequestMapping(method = RequestMethod.GET,\n@@ -116,7 +113,7 @@ public SchemaTO read(@PathVariable(\"kind\") final String kind,\n     value = \"/{kind}/update\")\n     public SchemaTO update(@RequestBody final SchemaTO schemaTO,\n             @PathVariable(\"kind\") final String kind)\n-            throws SyncopeClientCompositeErrorException, NotFoundException {\n+            throws NotFoundException {\n \n         AttributableUtil attributableUtil = getAttributableUtil(kind);\n         AbstractSchema schema = schemaDAO.find(schemaTO.getName(),\n@@ -126,7 +123,7 @@ public SchemaTO update(@RequestBody final SchemaTO schemaTO,\n             throw new NotFoundException(\"Schema '\" + schemaTO.getName() + \"'\");\n         }\n \n-        schema = schemaDataBinder.update(schemaTO, schema, attributableUtil);\n+        schemaDataBinder.update(schemaTO, schema, attributableUtil);\n         schema = schemaDAO.save(schema);\n \n         return schemaDataBinder.getSchemaTO(schema, attributableUtil);"},{"sha":"f8b001981d8e239d60974d2be49ecbae6d9fee7f","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/69668f7ad9319100957a577bdb200fb38e9624c9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/69668f7ad9319100957a577bdb200fb38e9624c9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=69668f7ad9319100957a577bdb200fb38e9624c9","patch":"@@ -475,8 +475,7 @@ protected PropagationByResource fill(\n                             getAttributesToBeUpdated()) {\n \n                         if (schema.getName().equals(mod.getSchema())) {\n-                            newValue = mod.getValuesToBeAdded().\n-                                    iterator().next();\n+                            newValue = mod.getValuesToBeAdded().get(0);\n                         }\n                     }\n "},{"sha":"eebabfa64fc1bd661232756c23eab5a16cab6ecf","filename":"core/src/main/java/org/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":39,"deletions":66,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/69668f7ad9319100957a577bdb200fb38e9624c9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/69668f7ad9319100957a577bdb200fb38e9624c9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=69668f7ad9319100957a577bdb200fb38e9624c9","patch":"@@ -14,8 +14,7 @@\n  */\n package org.syncope.core.rest.data;\n \n-import java.util.Iterator;\n-import org.apache.commons.lang.StringUtils;\n+import java.util.List;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n@@ -26,7 +25,6 @@\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.beans.AbstractAttr;\n-import org.syncope.core.persistence.beans.AbstractAttrValue;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.SchemaDAO;\n@@ -52,99 +50,74 @@ public class SchemaDataBinder {\n     @Autowired\n     private JexlUtil jexlUtil;\n \n-    private <T extends AbstractDerSchema> AbstractSchema populate(\n+    private <T extends AbstractDerSchema> void populate(\n             final AbstractSchema schema,\n-            final SchemaTO schemaTO,\n-            final SyncopeClientCompositeErrorException scce)\n+            final SchemaTO schemaTO)\n             throws SyncopeClientCompositeErrorException {\n \n-        if (StringUtils.isBlank(schemaTO.getMandatoryCondition())) {\n-            SyncopeClientException requiredValuesMissing =\n+        if (!jexlUtil.isExpressionValid(schemaTO.getMandatoryCondition())) {\n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n+\n+            SyncopeClientException invalidMandatoryCondition =\n                     new SyncopeClientException(\n-                    SyncopeClientExceptionType.RequiredValuesMissing);\n-            requiredValuesMissing.addElement(\"mandatoryCondition\");\n-\n-            scce.addException(requiredValuesMissing);\n-        } else {\n-            if (!jexlUtil.isExpressionValid(schemaTO.getMandatoryCondition())) {\n-                SyncopeClientException invalidMandatoryCondition =\n-                        new SyncopeClientException(\n-                        SyncopeClientExceptionType.InvalidValues);\n-                invalidMandatoryCondition.addElement(\n-                        schemaTO.getMandatoryCondition());\n-\n-                scce.addException(invalidMandatoryCondition);\n-            }\n-        }\n+                    SyncopeClientExceptionType.InvalidValues);\n+            invalidMandatoryCondition.addElement(\n+                    schemaTO.getMandatoryCondition());\n \n-        if (scce.hasExceptions()) {\n+            scce.addException(invalidMandatoryCondition);\n             throw scce;\n         }\n \n         BeanUtils.copyProperties(schemaTO, schema, IGNORE_SCHEMA_PROPERTIES);\n-\n-        return schema;\n     }\n \n-    public <T extends AbstractDerSchema> AbstractSchema create(\n-            final SchemaTO schemaTO,\n-            AbstractSchema schema)\n+    public void create(final SchemaTO schemaTO, final AbstractSchema schema)\n             throws SyncopeClientCompositeErrorException {\n \n-        return populate(schema, schemaTO,\n-                new SyncopeClientCompositeErrorException(\n-                HttpStatus.BAD_REQUEST));\n+        populate(schema, schemaTO);\n     }\n \n-    public <T extends AbstractDerSchema> AbstractSchema update(\n-            final SchemaTO schemaTO,\n-            AbstractSchema schema,\n+    public void update(final SchemaTO schemaTO, final AbstractSchema schema,\n             final AttributableUtil attributableUtil)\n             throws SyncopeClientCompositeErrorException {\n \n         SyncopeClientCompositeErrorException scce =\n                 new SyncopeClientCompositeErrorException(\n                 HttpStatus.BAD_REQUEST);\n \n-        schema = populate(schema, schemaTO, scce);\n-\n-        boolean validationExceptionFound = false;\n-        AbstractAttr attribute;\n-        AbstractAttrValue attributeValue;\n-        for (Iterator<? extends AbstractAttr> aItor = schemaDAO.getAttributes(\n-                schema, attributableUtil.attributeClass()).iterator();\n-                aItor.hasNext() && !validationExceptionFound;) {\n-\n-            attribute = aItor.next();\n-            for (Iterator<? extends AbstractAttrValue> avItor =\n-                    attribute.getValues().iterator();\n-                    avItor.hasNext() && !validationExceptionFound;) {\n-\n-                attributeValue = avItor.next();\n-                try {\n-                    schema.getValidator().getValue(\n-                            attributeValue.getValueAsString(),\n-                            attributeValue);\n-                } catch (Exception e) {\n-                    validationExceptionFound = true;\n-                }\n+        List<AbstractAttr> attrs = schemaDAO.getAttributes(\n+                schema, attributableUtil.attributeClass());\n+        if (!attrs.isEmpty()) {\n+            if (schema.getType() != schemaTO.getType()) {\n+                SyncopeClientException e = new SyncopeClientException(\n+                        SyncopeClientExceptionType.valueOf(\n+                        \"Invalid\" + schema.getClass().getSimpleName()));\n+                e.addElement(\"Cannot change type since \" + schema.getName()\n+                        + \" has attributes\");\n+\n+                scce.addException(e);\n+            }\n+            if (schema.isUniqueConstraint() != schemaTO.isUniqueConstraint()) {\n+                SyncopeClientException e = new SyncopeClientException(\n+                        SyncopeClientExceptionType.valueOf(\n+                        \"Invalid\" + schema.getClass().getSimpleName()));\n+                e.addElement(\"Cannot alter unique contraint since \"\n+                        + schema.getName() + \" has attributes\");\n+\n+                scce.addException(e);\n             }\n         }\n \n-        if (validationExceptionFound) {\n-            SyncopeClientException e = new SyncopeClientException(\n-                    SyncopeClientExceptionType.valueOf(\n-                    \"Invalid\" + schema.getClass().getSimpleName()));\n-            e.addElement(schema.getName());\n-\n-            scce.addException(e);\n+        if (scce.hasExceptions()) {\n             throw scce;\n         }\n \n-        return schema;\n+        populate(schema, schemaTO);\n     }\n \n-    public <T extends AbstractSchema> SchemaTO getSchemaTO(T schema,\n+    public <T extends AbstractSchema> SchemaTO getSchemaTO(final T schema,\n             final AttributableUtil attributableUtil) {\n \n         SchemaTO schemaTO = new SchemaTO();"},{"sha":"666ff7c63d9311af1753e7cc960ac2096ab2bbbb","filename":"core/src/test/java/org/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":126,"deletions":32,"changes":158,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/69668f7ad9319100957a577bdb200fb38e9624c9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/69668f7ad9319100957a577bdb200fb38e9624c9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=69668f7ad9319100957a577bdb200fb38e9624c9","patch":"@@ -14,6 +14,10 @@\n  */\n package org.syncope.core.rest;\n \n+import org.syncope.client.to.MembershipTO;\n+import org.syncope.client.util.AttributableOperations;\n+import org.syncope.client.to.AttributeTO;\n+import org.syncope.client.to.UserTO;\n import org.syncope.types.EntityViolationType;\n import java.util.Arrays;\n import java.util.List;\n@@ -22,6 +26,7 @@\n import org.syncope.client.validation.SyncopeClientException;\n import org.springframework.web.client.HttpClientErrorException;\n import org.springframework.http.HttpStatus;\n+import org.syncope.client.mod.UserMod;\n import org.syncope.client.to.SchemaTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.types.SchemaType;\n@@ -51,23 +56,19 @@ public final void createWithNotPermittedName() {\n         schemaTO.setName(\"failedLogins\");\n         schemaTO.setType(SchemaType.String);\n \n-        SyncopeClientException syncopeClientException = null;\n-\n         try {\n             restTemplate.postForObject(BASE_URL\n                     + \"schema/user/create\", schemaTO, SchemaTO.class);\n+            fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n-            syncopeClientException = scce.getException(\n+            SyncopeClientException sce = scce.getException(\n                     SyncopeClientExceptionType.InvalidUSchema);\n \n-            assertNotNull(syncopeClientException.getElements());\n-            assertEquals(1, syncopeClientException.getElements().size());\n-            assertTrue(syncopeClientException.getElements().iterator().next().\n-                    contains(\n-                    EntityViolationType.InvalidUSchema.toString()));\n+            assertNotNull(sce.getElements());\n+            assertEquals(1, sce.getElements().size());\n+            assertTrue(sce.getElements().iterator().next().\n+                    contains(EntityViolationType.InvalidUSchema.name()));\n         }\n-\n-        assertNotNull(syncopeClientException);\n     }\n \n     @Test\n@@ -76,23 +77,20 @@ public final void createREnumWithoutEnumeration() {\n         schemaTO.setName(\"enumcheck\");\n         schemaTO.setType(SchemaType.Enum);\n \n-        SyncopeClientException syncopeClientException = null;\n-\n         try {\n             restTemplate.postForObject(BASE_URL\n                     + \"schema/role/create\", schemaTO, SchemaTO.class);\n+            fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n-            syncopeClientException = scce.getException(\n+            SyncopeClientException sce = scce.getException(\n                     SyncopeClientExceptionType.InvalidRSchema);\n \n-            assertNotNull(syncopeClientException.getElements());\n-            assertEquals(1, syncopeClientException.getElements().size());\n-            assertTrue(syncopeClientException.getElements().iterator().next().\n+            assertNotNull(sce.getElements());\n+            assertEquals(1, sce.getElements().size());\n+            assertTrue(sce.getElements().iterator().next().\n                     contains(\n-                    EntityViolationType.InvalidSchemaTypeSpecification.toString()));\n+                    EntityViolationType.InvalidSchemaTypeSpecification.name()));\n         }\n-\n-        assertNotNull(syncopeClientException);\n     }\n \n     @Test\n@@ -101,23 +99,20 @@ public final void createUEnumWithoutEnumeration() {\n         schemaTO.setName(\"enumcheck\");\n         schemaTO.setType(SchemaType.Enum);\n \n-        SyncopeClientException syncopeClientException = null;\n-\n         try {\n             restTemplate.postForObject(BASE_URL\n                     + \"schema/user/create\", schemaTO, SchemaTO.class);\n+            fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n-            syncopeClientException = scce.getException(\n+            SyncopeClientException sce = scce.getException(\n                     SyncopeClientExceptionType.InvalidUSchema);\n \n-            assertNotNull(syncopeClientException.getElements());\n-            assertEquals(1, syncopeClientException.getElements().size());\n-            assertTrue(syncopeClientException.getElements().iterator().next().\n+            assertNotNull(sce.getElements());\n+            assertEquals(1, sce.getElements().size());\n+            assertTrue(sce.getElements().iterator().next().\n                     contains(\n-                    EntityViolationType.InvalidSchemaTypeSpecification.toString()));\n+                    EntityViolationType.InvalidSchemaTypeSpecification.name()));\n         }\n-\n-        assertNotNull(syncopeClientException);\n     }\n \n     @Test\n@@ -171,16 +166,115 @@ public void update() {\n         assertEquals(schemaTO, updatedTO);\n \n         updatedTO.setType(SchemaType.Date);\n-        SyncopeClientException syncopeClientException = null;\n-\n         try {\n             restTemplate.postForObject(BASE_URL\n                     + \"schema/role/update\", updatedTO, SchemaTO.class);\n+            fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n-            syncopeClientException = scce.getException(\n+            SyncopeClientException sce = scce.getException(\n                     SyncopeClientExceptionType.InvalidRSchema);\n+            assertNotNull(sce);\n         }\n+    }\n+\n+    @Test\n+    public void issue258() {\n+        SchemaTO schemaTO = new SchemaTO();\n+        schemaTO.setName(\"schema_issue258\");\n+        schemaTO.setType(SchemaType.Double);\n \n-        assertNotNull(syncopeClientException);\n+        schemaTO = restTemplate.postForObject(BASE_URL\n+                + \"schema/user/create\", schemaTO, SchemaTO.class);\n+        assertNotNull(schemaTO);\n+\n+        UserTO userTO = UserTestITCase.getSampleTO(\n+                \"issue258@syncope-idm.org\");\n+        AttributeTO attrTO = new AttributeTO();\n+        attrTO.setSchema(schemaTO.getName());\n+        attrTO.addValue(\"1.2\");\n+        userTO.addAttribute(attrTO);\n+\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n+                userTO, UserTO.class);\n+        assertNotNull(userTO);\n+\n+        schemaTO.setType(SchemaType.Long);\n+        try {\n+            restTemplate.postForObject(BASE_URL\n+                    + \"schema/user/update\", schemaTO, SchemaTO.class);\n+            fail(\"This should not be reacheable\");\n+        } catch (SyncopeClientCompositeErrorException scce) {\n+            SyncopeClientException sce = scce.getException(\n+                    SyncopeClientExceptionType.InvalidUSchema);\n+            assertNotNull(sce);\n+        }\n+    }\n+\n+    @Test\n+    public void issue259() {\n+        SchemaTO schemaTO = new SchemaTO();\n+        schemaTO.setName(\"schema_issue259\");\n+        schemaTO.setUniqueConstraint(true);\n+        schemaTO.setType(SchemaType.Long);\n+\n+        schemaTO = restTemplate.postForObject(BASE_URL\n+                + \"schema/user/create\", schemaTO, SchemaTO.class);\n+        assertNotNull(schemaTO);\n+\n+        UserTO userTO = UserTestITCase.getSampleTO(\n+                \"issue259@syncope-idm.org\");\n+        AttributeTO attrTO = new AttributeTO();\n+        attrTO.setSchema(schemaTO.getName());\n+        attrTO.addValue(\"1\");\n+        userTO.addAttribute(attrTO);\n+\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n+                userTO, UserTO.class);\n+        assertNotNull(userTO);\n+\n+        UserTO newUserTO = AttributableOperations.clone(userTO);\n+        MembershipTO membership = new MembershipTO();\n+        membership.setRoleId(2L);\n+        newUserTO.addMembership(membership);\n+\n+        UserMod userMod = AttributableOperations.diff(newUserTO, userTO);\n+\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/update\",\n+                userMod, UserTO.class);\n+        assertNotNull(userTO);\n+    }\n+\n+    @Test\n+    public void issue260() {\n+        SchemaTO schemaTO = new SchemaTO();\n+        schemaTO.setName(\"schema_issue260\");\n+        schemaTO.setType(SchemaType.Double);\n+        schemaTO.setUniqueConstraint(true);\n+\n+        schemaTO = restTemplate.postForObject(BASE_URL\n+                + \"schema/user/create\", schemaTO, SchemaTO.class);\n+        assertNotNull(schemaTO);\n+\n+        UserTO userTO = UserTestITCase.getSampleTO(\n+                \"issue260@syncope-idm.org\");\n+        AttributeTO attrTO = new AttributeTO();\n+        attrTO.setSchema(schemaTO.getName());\n+        attrTO.addValue(\"1.2\");\n+        userTO.addAttribute(attrTO);\n+\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n+                userTO, UserTO.class);\n+        assertNotNull(userTO);\n+\n+        schemaTO.setUniqueConstraint(false);\n+        try {\n+            restTemplate.postForObject(BASE_URL\n+                    + \"schema/user/update\", schemaTO, SchemaTO.class);\n+            fail(\"This should not be reacheable\");\n+        } catch (SyncopeClientCompositeErrorException scce) {\n+            SyncopeClientException sce = scce.getException(\n+                    SyncopeClientExceptionType.InvalidUSchema);\n+            assertNotNull(sce);\n+        }\n     }\n }"},{"sha":"a143556e07792dd916cb051ec237f93a56e482c5","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/69668f7ad9319100957a577bdb200fb38e9624c9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/69668f7ad9319100957a577bdb200fb38e9624c9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=69668f7ad9319100957a577bdb200fb38e9624c9","patch":"@@ -1143,6 +1143,7 @@ public final void update() {\n \n         userTO = restTemplate.postForObject(BASE_URL + \"user/update\",\n                 userMod, UserTO.class);\n+        assertNotNull(userTO);\n \n         SyncopeUser passwordTestUser = new SyncopeUser();\n         passwordTestUser.setPassword(\"newPassword\", CipherAlgorithm.MD5, 0);"},{"sha":"0d0f0ee82e38a91108f573a7885e63a800098bb5","filename":"pom.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/69668f7ad9319100957a577bdb200fb38e9624c9/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/69668f7ad9319100957a577bdb200fb38e9624c9/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=69668f7ad9319100957a577bdb200fb38e9624c9","patch":"@@ -81,7 +81,7 @@\n         <connid.csvdir.version>0.1</connid.csvdir.version>\n         <connid.ldap.version>1.2</connid.ldap.version>\n \n-        <commons-jexl.version>2.1</commons-jexl.version>\n+        <commons-jexl.version>2.1.1</commons-jexl.version>\n         <commons-lang.version>2.6</commons-lang.version>\n         <commons-httpclient.version>3.1</commons-httpclient.version>\n \n@@ -92,8 +92,8 @@\n \n         <activiti.version>5.8</activiti.version>\n \n-        <spring.version>3.0.6.RELEASE</spring.version>\n-        <jackson.version>1.9.2</jackson.version>\n+        <spring.version>3.0.7.RELEASE</spring.version>\n+        <jackson.version>1.9.3</jackson.version>\n         <xstream.version>1.4.2</xstream.version>\n         <velocity.version>1.7</velocity.version>\n         <quartz.version>1.8.5</quartz.version>"}]}