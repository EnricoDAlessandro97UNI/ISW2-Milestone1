{"sha":"e60ec59c065133ea272ddf55be93c15ba3117e4f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmU2MGVjNTljMDY1MTMzZWEyNzJkZGY1NWJlOTNjMTViYTMxMTdlNGY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-12-17T07:16:49Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-12-17T11:16:48Z"},"message":"[SYNCOPE-1527] Code refactoring to allow for custom search conditions, including Console support","tree":{"sha":"4fadc0c597e385e13c19c2f49dbea7f1867e823c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4fadc0c597e385e13c19c2f49dbea7f1867e823c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e60ec59c065133ea272ddf55be93c15ba3117e4f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e60ec59c065133ea272ddf55be93c15ba3117e4f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e60ec59c065133ea272ddf55be93c15ba3117e4f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e60ec59c065133ea272ddf55be93c15ba3117e4f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"7f11c508e45c41d619941e56802a0e55e4e269a3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7f11c508e45c41d619941e56802a0e55e4e269a3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7f11c508e45c41d619941e56802a0e55e4e269a3"}],"stats":{"total":3669,"additions":1932,"deletions":1737},"files":[{"sha":"abeea09f9aa7ad1a37533033ce79e79d2341606f","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ConnInstanceHistoryConfDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -89,7 +89,7 @@ protected List<IColumn<ConnInstanceHistoryConfTO, String>> getColumns() {\n         final List<IColumn<ConnInstanceHistoryConfTO, String>> columns = new ArrayList<>();\n \n         columns.add(new KeyPropertyColumn<>(\n-                new StringResourceModel(\"key\", this), \"key\"));\n+                new StringResourceModel(Constants.KEY_FIELD_NAME, this), Constants.KEY_FIELD_NAME));\n \n         columns.add(new PropertyColumn<>(new StringResourceModel(\n                 \"creator\", this), \"creator\", \"creator\"));"},{"sha":"3e959c039a2fcdb9bee2c8e93698c6a2131392f9","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ConnObjectListViewPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -319,6 +319,7 @@ private String getFiql() {\n         return SearchUtils.buildFIQL(\n                 searchPanel.getModel().getObject(),\n                 SyncopeClient.getConnObjectTOFiqlSearchConditionBuilder(),\n-                searchPanel.getAvailableSchemaTypes());\n+                searchPanel.getAvailableSchemaTypes(),\n+                SearchUtils.NO_CUSTOM_CONDITION);\n     }\n }"},{"sha":"d40369e16587041e8df3c17d3871dc22fa475940","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/HistoryConfDetails.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FHistoryConfDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FHistoryConfDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FHistoryConfDetails.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -168,7 +168,7 @@ private Form<?> initDropdownDiffConfForm() {\n         final AjaxDropDownChoicePanel<String> dropdownElem = new AjaxDropDownChoicePanel<>(\n                 \"compareDropdown\",\n                 getString(\"compare\"),\n-                new PropertyModel<>(selectedHistoryConfTO, \"key\"),\n+                new PropertyModel<>(selectedHistoryConfTO, Constants.KEY_FIELD_NAME),\n                 false);\n         dropdownElem.setChoices(keys);\n         dropdownElem.setChoiceRenderer(new IChoiceRenderer<String>() {"},{"sha":"71ac2eb6337cc5f71647224b97290ac392600cf2","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/RemediationDirectoryPanel.java","status":"modified","additions":21,"deletions":21,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -29,8 +29,8 @@\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n import org.apache.syncope.client.console.commons.IdMConstants;\n+import org.apache.syncope.client.console.layout.AnyLayoutUtils;\n import org.apache.syncope.client.console.layout.AnyObjectFormLayoutInfo;\n-import org.apache.syncope.client.console.layout.FormLayoutInfoUtils;\n import org.apache.syncope.client.console.layout.GroupFormLayoutInfo;\n import org.apache.syncope.client.console.layout.UserFormLayoutInfo;\n import org.apache.syncope.client.console.pages.BasePage;\n@@ -105,7 +105,7 @@ protected List<IColumn<RemediationTO, String>> getColumns() {\n         List<IColumn<RemediationTO, String>> columns = new ArrayList<>();\n \n         columns.add(new KeyPropertyColumn<>(\n-                new StringResourceModel(\"key\", this), \"key\"));\n+                new StringResourceModel(Constants.KEY_FIELD_NAME, this), Constants.KEY_FIELD_NAME));\n         columns.add(new PropertyColumn<>(\n                 new ResourceModel(\"operation\"), \"operation\", \"operation\"));\n         columns.add(new PropertyColumn<>(\n@@ -208,12 +208,12 @@ public void onClick(final AjaxRequestTarget target, final RemediationTO ignore)\n                             AjaxWizard.EditItemActionEvent<UserTO> userEvent =\n                                     new AjaxWizard.EditItemActionEvent<>(newUserTO, target);\n                             userEvent.forceModalPanel(new RemediationUserWizardBuilder(\n-                                model.getObject(),\n-                                previousUserTO,\n-                                newUserTO,\n-                                AnyTypeRestClient.read(remediationTO.getAnyType()).getClasses(),\n-                                FormLayoutInfoUtils.fetch(List.of(remediationTO.getAnyType())).getLeft(),\n-                                pageRef\n+                                    model.getObject(),\n+                                    previousUserTO,\n+                                    newUserTO,\n+                                    AnyTypeRestClient.read(remediationTO.getAnyType()).getClasses(),\n+                                    AnyLayoutUtils.fetch(List.of(remediationTO.getAnyType())).getUser(),\n+                                    pageRef\n                             ).build(BaseModal.CONTENT_ID, AjaxWizard.Mode.EDIT));\n                             send(RemediationDirectoryPanel.this, Broadcast.EXACT, userEvent);\n                             break;\n@@ -235,12 +235,12 @@ public void onClick(final AjaxRequestTarget target, final RemediationTO ignore)\n                             AjaxWizard.EditItemActionEvent<GroupTO> groupEvent =\n                                     new AjaxWizard.EditItemActionEvent<>(newGroupTO, target);\n                             groupEvent.forceModalPanel(new RemediationGroupWizardBuilder(\n-                                model.getObject(),\n-                                previousGroupTO,\n-                                newGroupTO,\n-                                AnyTypeRestClient.read(remediationTO.getAnyType()).getClasses(),\n-                                FormLayoutInfoUtils.fetch(List.of(remediationTO.getAnyType())).getMiddle(),\n-                                pageRef\n+                                    model.getObject(),\n+                                    previousGroupTO,\n+                                    newGroupTO,\n+                                    AnyTypeRestClient.read(remediationTO.getAnyType()).getClasses(),\n+                                    AnyLayoutUtils.fetch(List.of(remediationTO.getAnyType())).getGroup(),\n+                                    pageRef\n                             ).build(BaseModal.CONTENT_ID, AjaxWizard.Mode.EDIT));\n                             send(RemediationDirectoryPanel.this, Broadcast.EXACT, groupEvent);\n                             break;\n@@ -262,13 +262,13 @@ public void onClick(final AjaxRequestTarget target, final RemediationTO ignore)\n                             AjaxWizard.EditItemActionEvent<AnyObjectTO> anyObjectEvent =\n                                     new AjaxWizard.EditItemActionEvent<>(newAnyObjectTO, target);\n                             anyObjectEvent.forceModalPanel(new RemediationAnyObjectWizardBuilder(\n-                                model.getObject(),\n-                                previousAnyObjectTO,\n-                                newAnyObjectTO,\n-                                AnyTypeRestClient.read(remediationTO.getAnyType()).getClasses(),\n-                                FormLayoutInfoUtils.fetch(List.of(remediationTO.getAnyType())).\n-                                    getRight().values().iterator().next(),\n-                                pageRef\n+                                    model.getObject(),\n+                                    previousAnyObjectTO,\n+                                    newAnyObjectTO,\n+                                    AnyTypeRestClient.read(remediationTO.getAnyType()).getClasses(),\n+                                    AnyLayoutUtils.fetch(List.of(remediationTO.getAnyType())).getAnyObjects().\n+                                            get(remediationTO.getAnyType()),\n+                                    pageRef\n                             ).build(BaseModal.CONTENT_ID, AjaxWizard.Mode.EDIT));\n                             send(RemediationDirectoryPanel.this, Broadcast.EXACT, anyObjectEvent);\n                     }"},{"sha":"4e6746756c658374d01dd0b797ed4367d7b7105c","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ResourceHistoryConfDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -90,7 +90,7 @@ protected List<IColumn<ResourceHistoryConfTO, String>> getColumns() {\n         final List<IColumn<ResourceHistoryConfTO, String>> columns = new ArrayList<>();\n \n         columns.add(new KeyPropertyColumn<>(\n-                new StringResourceModel(\"key\", this), \"key\"));\n+                new StringResourceModel(Constants.KEY_FIELD_NAME, this), Constants.KEY_FIELD_NAME));\n \n         columns.add(new PropertyColumn<>(new StringResourceModel(\n                 \"creator\", this), \"creator\", \"creator\"));"},{"sha":"833baf16d14fcae31c19c4ed799510b87ac60d8a","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/search/ConnObjectSearchPanel.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FConnObjectSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FConnObjectSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FConnObjectSearchPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -34,22 +34,26 @@ public class ConnObjectSearchPanel extends AbstractSearchPanel {\n \n     private static final long serialVersionUID = 21020550706646L;\n \n-    private final ConnectorRestClient connectorRestClient = new ConnectorRestClient();\n+    protected final ConnectorRestClient connectorRestClient = new ConnectorRestClient();\n \n     protected final ResourceTO resource;\n \n     public static class Builder extends AbstractSearchPanel.Builder<ConnObjectSearchPanel> {\n \n         private static final long serialVersionUID = 6308997285778809578L;\n \n-        protected final ResourceTO resource;\n+        private final ResourceTO resource;\n \n         private final AnyTypeKind anyType;\n \n         private final String typeName;\n \n-        public Builder(final ResourceTO resource, final AnyTypeKind anyType, final String type,\n+        public Builder(\n+                final ResourceTO resource,\n+                final AnyTypeKind anyType,\n+                final String type,\n                 final IModel<List<SearchClause>> model) {\n+\n             super(model);\n             this.resource = resource;\n             this.anyType = anyType;"},{"sha":"5f0b2f938e15bc8978a7950d96013e9e66f8d439","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -324,7 +324,7 @@ private List<String> getSchemas(final CorrelationRule rule) {\n                             ? AnyTypeKind.GROUP\n                             : AnyTypeKind.ANY_OBJECT).stream().map(EntityTO::getKey).\n                             collect(Collectors.toList());\n-            choices.add(\"key\");\n+            choices.add(Constants.KEY_FIELD_NAME);\n             choices.add(rule.getAnyType().equals(AnyTypeKind.USER.name()) ? \"username\" : \"name\");\n             Collections.sort(choices);\n             return choices;"},{"sha":"c85f4888ff7074a3b8e43b0e9be33c434dc8785c","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusDirectoryPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -40,6 +40,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.panels.ModalPanel;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n@@ -255,7 +256,7 @@ public ResourceStatusDataProvider(final int paginatorRows) {\n                         bld = SyncopeClient.getAnyObjectSearchConditionBuilder(type);\n                         restClient = new AnyObjectRestClient();\n                 }\n-                fiql = bld.isNotNull(\"key\").query();\n+                fiql = bld.isNotNull(Constants.KEY_FIELD_NAME).query();\n             }\n         }\n "},{"sha":"edfbed73c6296cf27e18be6de4c4fbfb54f31d80","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/any/LinkedAccountPlainAttrsPanel.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountPlainAttrsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountPlainAttrsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountPlainAttrsPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -30,7 +30,6 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n-import org.apache.syncope.client.console.layout.FormLayoutInfoUtils;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n import org.apache.syncope.common.lib.EntityTOUtils;\n@@ -46,6 +45,7 @@\n import org.apache.syncope.client.ui.commons.wicket.markup.html.bootstrap.tabs.Accordion;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.client.console.layout.AnyLayoutUtils;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n@@ -80,7 +80,7 @@ public <T extends AnyTO> LinkedAccountPlainAttrsPanel(\n         super(userTO,\n                 AjaxWizard.Mode.EDIT,\n                 new AnyTypeRestClient().read(userTO.getType()).getClasses(),\n-                FormLayoutInfoUtils.fetch(Arrays.asList(userTO.getType())).getLeft().getWhichPlainAttrs(),\n+                AnyLayoutUtils.fetch(Arrays.asList(userTO.getType())).getUser().getWhichPlainAttrs(),\n                 modelObject);\n \n         this.linkedAccountTO = modelObject.getInnerObject();\n@@ -251,5 +251,4 @@ protected void populateItem(final ListItem<Attr> item) {\n             });\n         }\n     }\n-\n }"},{"sha":"f326f762f150dbe6e8d59c1611447bc56740422e","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceDetailsPanel.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceDetailsPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -22,6 +22,7 @@\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.rest.ImplementationRestClient;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n@@ -65,10 +66,9 @@ public ResourceDetailsPanel(final ResourceTO resourceTO, final boolean createFla\n         add(container);\n \n         container.add(new AjaxTextFieldPanel(\n-                \"key\",\n-                new ResourceModel(\"key\", \"key\").\n-                        getObject(),\n-                new PropertyModel<>(resourceTO, \"key\"),\n+                Constants.KEY_FIELD_NAME,\n+                new ResourceModel(Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME).getObject(),\n+                new PropertyModel<>(resourceTO, Constants.KEY_FIELD_NAME),\n                 false).addRequiredLabel().setEnabled(createFlag));\n \n         container.add(new AjaxCheckBoxPanel(\n@@ -81,7 +81,7 @@ public ResourceDetailsPanel(final ResourceTO resourceTO, final boolean createFla\n                 \"propagationPriority\",\n                 \"propagationPriority\",\n                 Integer.class,\n-                new PropertyModel<Integer>(resourceTO, \"propagationPriority\")));\n+                new PropertyModel<>(resourceTO, \"propagationPriority\")));\n \n         container.add(new AjaxCheckBoxPanel(\"randomPwdIfNotProvided\",\n                 new ResourceModel(\"randomPwdIfNotProvided\", \"randomPwdIfNotProvided\").getObject(),\n@@ -91,7 +91,7 @@ public ResourceDetailsPanel(final ResourceTO resourceTO, final boolean createFla\n         container.add(new AjaxPalettePanel.Builder<String>().\n                 setAllowMoveAll(true).setAllowOrder(true).\n                 build(\"propagationActions\",\n-                        new PropertyModel<List<String>>(resourceTO, \"propagationActions\"),\n+                        new PropertyModel<>(resourceTO, \"propagationActions\"),\n                         new ListModel<>(propagationActions.getObject())).\n                 setOutputMarkupId(true));\n "},{"sha":"c7381ed4d6a97929c067503893f53fa3acf253ad","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceMappingPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceMappingPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -27,6 +27,7 @@\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.rest.ConnectorRestClient;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n@@ -125,7 +126,7 @@ protected void setAttrNames(final AjaxTextFieldPanel toBeUpdated) {\n \n         Set<String> choices = new HashSet<>();\n         if (SyncopeConstants.REALM_ANYTYPE.equals(provision.getAnyType())) {\n-            choices.add(\"key\");\n+            choices.add(Constants.KEY_FIELD_NAME);\n             choices.add(\"name\");\n             choices.add(\"fullpath\");\n         } else {"},{"sha":"7a0e0ac411306f3c6108836fa47d6f526cc6def5","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/Constants.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FConstants.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -105,6 +105,8 @@ public final class Constants {\n \n     public static final String NOTIFICATION_LEVEL_PARAM = \"notificationLevel\";\n \n+    public static final String ENDUSER_ANYLAYOUT = \"enduser.anylayout\";\n+\n     public static Component getJEXLPopover(final Component caller, final TooltipConfig.Placement placement) {\n         return getJEXLPopover(caller, placement, caller.getString(\"jexl_ex1\"), caller.getString(\"jexl_ex2\"));\n     }"},{"sha":"49c5d9da1e5b93f55793950c3607749e1a1226f7","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/DirectoryDataProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FDirectoryDataProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FDirectoryDataProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FDirectoryDataProvider.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -33,6 +33,6 @@ public DirectoryDataProvider(final int paginatorRows) {\n         this.paginatorRows = paginatorRows;\n \n         // default sorting\n-        setSort(\"key\", SortOrder.ASCENDING);\n+        setSort(Constants.KEY_FIELD_NAME, SortOrder.ASCENDING);\n     }\n }"},{"sha":"cdf465ecf54dfc1285675d8cf1503bd2a07e0d21","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/layout/AbstractAnyFormBaseLayout.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Flayout%2FAbstractAnyFormBaseLayout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Flayout%2FAbstractAnyFormBaseLayout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Flayout%2FAbstractAnyFormBaseLayout.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -97,5 +97,4 @@ public boolean isResources() {\n     public void setResources(final boolean resources) {\n         this.resources = resources;\n     }\n-\n }"},{"sha":"4ad45e66a261ff565c7f621cd330c5136d7931e1","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeWebApplication.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -146,18 +146,18 @@ public static SyncopeWebApplication get() {\n     protected void populatePageClasses(final Properties props) {\n         Enumeration<String> propNames = (Enumeration<String>) props.propertyNames();\n         while (propNames.hasMoreElements()) {\n-            String name = propNames.nextElement();\n-            if (name.startsWith(\"page.\")) {\n+            String className = propNames.nextElement();\n+            if (className.startsWith(\"page.\")) {\n                 try {\n-                    Class<?> clazz = ClassUtils.getClass(props.getProperty(name));\n+                    Class<?> clazz = ClassUtils.getClass(props.getProperty(className));\n                     if (BasePage.class.isAssignableFrom(clazz)) {\n                         pageClasses.put(\n-                                StringUtils.substringAfter(\"page.\", name), (Class<? extends BasePage>) clazz);\n+                                StringUtils.substringAfter(\"page.\", className), (Class<? extends BasePage>) clazz);\n                     } else {\n                         LOG.warn(\"{} does not extend {}, ignoring...\", clazz.getName(), BasePage.class.getName());\n                     }\n                 } catch (ClassNotFoundException e) {\n-                    LOG.error(\"While looking for class identified by property '{}'\", name, e);\n+                    LOG.error(\"While looking for class identified by property '{}'\", className, e);\n                 }\n             }\n         }"},{"sha":"ee1d4b23d6d95ed3bfcbc65fd978c6fc0159c2d4","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/audit/HistoryAuditDetails.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FHistoryAuditDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FHistoryAuditDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FHistoryAuditDetails.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -165,7 +165,7 @@ private Form<?> initDropdownDiffConfForm() {\n         final AjaxDropDownChoicePanel<String> dropdownElem = new AjaxDropDownChoicePanel<>(\n                 \"compareDropdown\",\n                 getString(\"compare\"),\n-                new PropertyModel<>(selected, \"key\"),\n+                new PropertyModel<>(selected, Constants.KEY_FIELD_NAME),\n                 false);\n         dropdownElem.setChoices(keys);\n         dropdownElem.setChoiceRenderer(new IChoiceRenderer<String>() {"},{"sha":"61a723d2e392fdbc05af8cf0dec6ec1268b53941","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/AnyDataProvider.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -27,6 +27,7 @@\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.rest.AbstractAnyRestClient;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -82,7 +83,7 @@ public AnyDataProvider(\n                 break;\n \n             default:\n-                setSort(\"key\", SortOrder.ASCENDING);\n+                setSort(Constants.KEY_FIELD_NAME, SortOrder.ASCENDING);\n         }\n \n         this.comparator = new SortableAnyProviderComparator<>(this);"},{"sha":"2e9bc285783f8b2dede7a09e873df9dd73f138d2","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/SortableAnyProviderComparator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAnyProviderComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAnyProviderComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAnyProviderComparator.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.types.SchemaType;\n@@ -32,7 +33,7 @@\n     private static final long serialVersionUID = 1775967163571699258L;\n \n     private static final Set<String> INLINE_PROPS = Set.of(\n-            new String[] { \"key\", \"status\", \"token\", \"username\", \"name\" });\n+            Constants.KEY_FIELD_NAME, \"status\", \"token\", \"username\", \"name\");\n \n     public SortableAnyProviderComparator(final SortableDataProvider<T, String> provider) {\n         super(provider);"},{"sha":"1978f7802bc5ab68fae8110b5fc2e2c11aa1d9f8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/layout/AnyLayout.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FAnyLayout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FAnyLayout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FAnyLayout.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.layout;\n+\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.syncope.client.console.panels.AnyPanel;\n+\n+public class AnyLayout implements Serializable {\n+\n+    private static final long serialVersionUID = 488645029994410970L;\n+\n+    private String anyPanelClass = AnyPanel.class.getName();\n+\n+    @JsonProperty(\"USER\")\n+    private UserFormLayoutInfo user;\n+\n+    @JsonProperty(\"GROUP\")\n+    private GroupFormLayoutInfo group;\n+\n+    private final Map<String, AnyObjectFormLayoutInfo> anyObjects = new HashMap<>();\n+\n+    public String getAnyPanelClass() {\n+        return anyPanelClass;\n+    }\n+\n+    public void setAnyPanelClass(final String anyPanelClass) {\n+        this.anyPanelClass = anyPanelClass;\n+    }\n+\n+    public UserFormLayoutInfo getUser() {\n+        return user;\n+    }\n+\n+    public void setUser(final UserFormLayoutInfo user) {\n+        this.user = user;\n+    }\n+\n+    public GroupFormLayoutInfo getGroup() {\n+        return group;\n+    }\n+\n+    public void setGroup(final GroupFormLayoutInfo group) {\n+        this.group = group;\n+    }\n+\n+    @JsonAnyGetter\n+    public Map<String, AnyObjectFormLayoutInfo> getAnyObjects() {\n+        return anyObjects;\n+    }\n+}"},{"sha":"daf329fcfd4c41f0774bedc8d87dab3055fe0bdb","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/layout/AnyLayoutUtils.java","status":"added","additions":207,"deletions":0,"changes":207,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FAnyLayoutUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FAnyLayoutUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FAnyLayoutUtils.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.layout;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.panels.AnyPanel;\n+import org.apache.syncope.client.console.rest.RoleRestClient;\n+import org.apache.syncope.client.ui.commons.layout.AbstractAnyFormLayout;\n+import org.apache.syncope.client.ui.commons.wizards.any.AnyForm;\n+import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.AnyTypeTO;\n+import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.wicket.PageReference;\n+import org.springframework.util.ClassUtils;\n+\n+public final class AnyLayoutUtils {\n+\n+    private static final RoleRestClient ROLE_REST_CLIENT = new RoleRestClient();\n+\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private static void setUserIfEmpty(final AnyLayout anyLayout) {\n+        if (anyLayout.getUser() == null) {\n+            anyLayout.setUser(new UserFormLayoutInfo());\n+        }\n+    }\n+\n+    private static void setGroupIfEmpty(final AnyLayout anyLayout) {\n+        if (anyLayout.getGroup() == null) {\n+            anyLayout.setGroup(new GroupFormLayoutInfo());\n+        }\n+    }\n+\n+    private static void setAnyObjectsIfEmpty(final AnyLayout anyLayout, final List<String> anyTypes) {\n+        if (anyLayout.getAnyObjects().isEmpty()) {\n+            anyLayout.getAnyObjects().putAll(anyTypes.stream().filter(\n+                    anyType -> !anyType.equals(AnyTypeKind.USER.name()) && !anyType.equals(AnyTypeKind.GROUP.name())).\n+                    collect(Collectors.toMap(Function.identity(), anyType -> new AnyObjectFormLayoutInfo())));\n+        }\n+    }\n+\n+    private static AnyLayout empty(final List<String> anyTypes) {\n+        AnyLayout anyLayout = new AnyLayout();\n+        setUserIfEmpty(anyLayout);\n+        setGroupIfEmpty(anyLayout);\n+        setAnyObjectsIfEmpty(anyLayout, anyTypes);\n+        return anyLayout;\n+    }\n+\n+    public static AnyLayout fetch(final List<String> anyTypes) {\n+        List<String> ownedRoles = SyncopeConsoleSession.get().getSelfTO().getRoles();\n+        try {\n+            AnyLayout anyLayout = null;\n+            for (int i = 0; i < ownedRoles.size() && anyLayout == null; i++) {\n+                String anyLayoutJSON = ROLE_REST_CLIENT.readAnyLayout(ownedRoles.get(i));\n+                if (StringUtils.isNotBlank(anyLayoutJSON)) {\n+                    anyLayout = MAPPER.readValue(anyLayoutJSON, AnyLayout.class);\n+                }\n+            }\n+\n+            if (anyLayout == null) {\n+                anyLayout = empty(anyTypes);\n+            }\n+            setUserIfEmpty(anyLayout);\n+            setGroupIfEmpty(anyLayout);\n+            setAnyObjectsIfEmpty(anyLayout, anyTypes);\n+\n+            return anyLayout;\n+        } catch (IOException e) {\n+            throw new IllegalArgumentException(\"While parsing console layout for \"\n+                    + SyncopeConsoleSession.get().getSelfTO().getUsername(), e);\n+        }\n+    }\n+\n+    public static String defaultIfEmpty(final String content, final List<String> anyTypes) {\n+        String result;\n+\n+        if (StringUtils.isBlank(content)) {\n+            AnyLayout anyLayout = empty(anyTypes);\n+\n+            try {\n+                result = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(anyLayout);\n+            } catch (IOException e) {\n+                throw new IllegalArgumentException(\"While generating default console layout for \"\n+                        + SyncopeConsoleSession.get().getSelfTO().getUsername(), e);\n+            }\n+        } else {\n+            try {\n+                result = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(MAPPER.readTree(content));\n+            } catch (IOException e) {\n+                result = content;\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    public static <A extends AnyTO, F extends AnyForm<A>, FL extends AbstractAnyFormLayout<A, F>> F newLayoutInfo(\n+            final A anyTO,\n+            final List<String> anyTypeClasses,\n+            final FL anyFormLayout,\n+            final PageReference pageRef) {\n+\n+        try {\n+            if (anyTO instanceof UserTO) {\n+                return anyFormLayout.getFormClass().getConstructor(\n+                        anyTO.getClass(), // previous\n+                        anyTO.getClass(), // actual\n+                        List.class,\n+                        anyFormLayout.getClass(),\n+                        pageRef.getClass()).\n+                        newInstance(null, anyTO, anyTypeClasses, anyFormLayout, pageRef);\n+            } else {\n+                return anyFormLayout.getFormClass().getConstructor(\n+                        anyTO.getClass(), // actual\n+                        List.class,\n+                        anyFormLayout.getClass(),\n+                        pageRef.getClass()).\n+                        newInstance(anyTO, anyTypeClasses, anyFormLayout, pageRef);\n+            }\n+        } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException\n+                | IllegalArgumentException | InvocationTargetException e) {\n+            throw new IllegalArgumentException(\"Could not instantiate \" + anyFormLayout.getFormClass().getName(), e);\n+        }\n+    }\n+\n+    public static <AP extends AnyPanel> AP newAnyPanel(\n+            final String panelClass,\n+            final String id,\n+            final AnyTypeTO anyTypeTO,\n+            final RealmTO realmTO,\n+            final AnyLayout anyLayout,\n+            final boolean enableSearch,\n+            final PageReference pageRef) {\n+\n+        try {\n+            @SuppressWarnings(\"unchecked\")\n+            Class<AP> clazz = (Class<AP>) ClassUtils.forName(panelClass, ClassUtils.getDefaultClassLoader());\n+            return clazz.getConstructor(\n+                    String.class,\n+                    AnyTypeTO.class,\n+                    RealmTO.class,\n+                    AnyLayout.class,\n+                    boolean.class,\n+                    PageReference.class).\n+                    newInstance(id, anyTypeTO, realmTO, anyLayout, enableSearch, pageRef);\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(\"Could not instantiate \" + panelClass, e);\n+        }\n+    }\n+\n+    public static <AP extends AnyPanel> AP newAnyPanel(\n+            final String panelClass,\n+            final String id,\n+            final AnyTypeTO anyTypeTO,\n+            final RealmTO realmTO,\n+            final AnyLayout anyLayout,\n+            final boolean enableSearch,\n+            final AnyPanel.DirectoryPanelSupplier directoryPanelSupplier,\n+            final PageReference pageRef) {\n+\n+        try {\n+            @SuppressWarnings(\"unchecked\")\n+            Class<AP> clazz = (Class<AP>) ClassUtils.forName(panelClass, ClassUtils.getDefaultClassLoader());\n+            return clazz.getConstructor(\n+                    String.class,\n+                    AnyTypeTO.class,\n+                    RealmTO.class,\n+                    AnyLayout.class,\n+                    boolean.class,\n+                    AnyPanel.DirectoryPanelSupplier.class,\n+                    PageReference.class).\n+                    newInstance(id, anyTypeTO, realmTO, anyLayout, enableSearch, directoryPanelSupplier, pageRef);\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(\"Could not instantiate \" + panelClass, e);\n+        }\n+    }\n+\n+    private AnyLayoutUtils() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"e3d7e86481374b42770df676ee7730d283b34b79","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/layout/AnyLayoutWrapper.java","status":"renamed","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FAnyLayoutWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FAnyLayoutWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FAnyLayoutWrapper.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -19,18 +19,18 @@\n package org.apache.syncope.client.console.layout;\n \n import java.io.Serializable;\n-import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n \n-public class ConsoleLayoutInfo implements Serializable {\n+public class AnyLayoutWrapper implements Serializable {\n \n     private static final long serialVersionUID = 961267717148831831L;\n \n     private final String key;\n \n-    private String content;\n+    private final String content;\n \n-    public ConsoleLayoutInfo(final String key) {\n+    public AnyLayoutWrapper(final String key, final String content) {\n         this.key = key;\n+        this.content = content;\n     }\n \n     public String getKey() {\n@@ -40,8 +40,4 @@ public String getKey() {\n     public String getContent() {\n         return content;\n     }\n-\n-    public void setContent(final String content) {\n-        this.content = FormLayoutInfoUtils.defaultConsoleLayoutInfoIfEmpty(content, AnyTypeRestClient.list());\n-    }\n }","previous_filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/layout/ConsoleLayoutInfo.java"},{"sha":"c34c901c278d3650478d0a620e2828c71053a2d0","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/layout/FormLayoutInfoUtils.java","status":"removed","additions":0,"deletions":154,"changes":154,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7f11c508e45c41d619941e56802a0e55e4e269a3/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FFormLayoutInfoUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7f11c508e45c41d619941e56802a0e55e4e269a3/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FFormLayoutInfoUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FFormLayoutInfoUtils.java?ref=7f11c508e45c41d619941e56802a0e55e4e269a3","patch":"@@ -1,154 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.layout;\n-\n-import org.apache.syncope.client.ui.commons.layout.AbstractAnyFormLayout;\n-import org.apache.syncope.client.ui.commons.wizards.any.AnyForm;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n-import java.io.IOException;\n-import java.lang.reflect.InvocationTargetException;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.tuple.Triple;\n-import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.syncope.client.console.rest.RoleRestClient;\n-import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.wicket.PageReference;\n-\n-/**\n- * Utility methods for dealing with form layout information.\n- */\n-public final class FormLayoutInfoUtils {\n-\n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n-\n-    public static Triple<UserFormLayoutInfo, GroupFormLayoutInfo, Map<String, AnyObjectFormLayoutInfo>> fetch(\n-            final Collection<String> anyTypes) {\n-\n-        List<String> ownedRoles = SyncopeConsoleSession.get().getSelfTO().getRoles();\n-        try {\n-            JsonNode tree = null;\n-            for (int i = 0; i < ownedRoles.size() && tree == null; i++) {\n-                String consoleLayoutInfo = RoleRestClient.readConsoleLayoutInfo(ownedRoles.get(i));\n-                if (StringUtils.isNotBlank(consoleLayoutInfo)) {\n-                    tree = MAPPER.readTree(consoleLayoutInfo);\n-                }\n-            }\n-            if (tree == null) {\n-                tree = MAPPER.createObjectNode();\n-            }\n-\n-            UserFormLayoutInfo userFormLayoutInfo = tree.has(AnyTypeKind.USER.name())\n-                    ? MAPPER.treeToValue(tree.get(AnyTypeKind.USER.name()), UserFormLayoutInfo.class)\n-                    : new UserFormLayoutInfo();\n-\n-            GroupFormLayoutInfo groupFormLayoutInfo = tree.has(AnyTypeKind.USER.name())\n-                    ? MAPPER.treeToValue(tree.get(AnyTypeKind.GROUP.name()), GroupFormLayoutInfo.class)\n-                    : new GroupFormLayoutInfo();\n-\n-            Map<String, AnyObjectFormLayoutInfo> anyObjectFormLayoutInfos = new HashMap<>();\n-            for (String anyType : anyTypes) {\n-                if (!anyType.equals(AnyTypeKind.USER.name()) && !anyType.equals(AnyTypeKind.GROUP.name())) {\n-\n-                    anyObjectFormLayoutInfos.put(\n-                            anyType,\n-                            tree.has(anyType)\n-                            ? MAPPER.treeToValue(tree.get(anyType), AnyObjectFormLayoutInfo.class)\n-                            : new AnyObjectFormLayoutInfo());\n-                }\n-            }\n-\n-            return Triple.of(userFormLayoutInfo, groupFormLayoutInfo, anyObjectFormLayoutInfos);\n-        } catch (IOException e) {\n-            throw new IllegalArgumentException(\"While parsing console layout info for \"\n-                    + SyncopeConsoleSession.get().getSelfTO().getUsername(), e);\n-        }\n-    }\n-\n-    public static String defaultConsoleLayoutInfoIfEmpty(final String content, final List<String> anyTypes) {\n-        String result;\n-\n-        if (StringUtils.isBlank(content)) {\n-            try {\n-                ObjectNode tree = MAPPER.createObjectNode();\n-\n-                tree.set(AnyTypeKind.USER.name(), MAPPER.valueToTree(new UserFormLayoutInfo()));\n-                tree.set(AnyTypeKind.GROUP.name(), MAPPER.valueToTree(new GroupFormLayoutInfo()));\n-                for (String anyType : anyTypes) {\n-                    if (!anyType.equals(AnyTypeKind.USER.name()) && !anyType.equals(AnyTypeKind.GROUP.name())) {\n-                        tree.set(anyType, MAPPER.valueToTree(new AnyObjectFormLayoutInfo()));\n-                    }\n-                }\n-\n-                result = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(tree);\n-            } catch (IOException e) {\n-                throw new IllegalArgumentException(\"While generating default console layout info for \"\n-                        + SyncopeConsoleSession.get().getSelfTO().getUsername(), e);\n-            }\n-        } else {\n-            try {\n-                result = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(MAPPER.readTree(content));\n-            } catch (IOException e) {\n-                result = content;\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n-    public static <A extends AnyTO, F extends AnyForm<A>, FL extends AbstractAnyFormLayout<A, F>> F instantiate(\n-            final A anyTO,\n-            final List<String> anyTypeClasses,\n-            final FL anyFormLayout,\n-            final PageReference pageRef) {\n-\n-        try {\n-            if (anyTO instanceof UserTO) {\n-                return anyFormLayout.getFormClass().getConstructor(\n-                        anyTO.getClass(), // previous\n-                        anyTO.getClass(), // actual\n-                        List.class,\n-                        anyFormLayout.getClass(),\n-                        pageRef.getClass()).\n-                        newInstance(null, anyTO, anyTypeClasses, anyFormLayout, pageRef);\n-            } else {\n-                return anyFormLayout.getFormClass().getConstructor(\n-                        anyTO.getClass(), // actual\n-                        List.class,\n-                        anyFormLayout.getClass(),\n-                        pageRef.getClass()).\n-                        newInstance(anyTO, anyTypeClasses, anyFormLayout, pageRef);\n-            }\n-        } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException\n-                | IllegalArgumentException | InvocationTargetException e) {\n-            throw new IllegalArgumentException(\"Could not instantiate \" + anyFormLayout.getFormClass().getName(), e);\n-        }\n-    }\n-\n-    private FormLayoutInfoUtils() {\n-        // private constructor for static utility class\n-    }\n-}"},{"sha":"fa8b9428d52a9eb2341a59093a564ab9d5813d07","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/notifications/MailTemplateDirectoryPanel.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FMailTemplateDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FMailTemplateDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FMailTemplateDirectoryPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -109,7 +109,9 @@ public WizardModalPanel<MailTemplateTO> build(\n     @Override\n     protected List<IColumn<MailTemplateTO, String>> getColumns() {\n         List<IColumn<MailTemplateTO, String>> columns = new ArrayList<>();\n-        columns.add(new PropertyColumn<>(new StringResourceModel(\"key\", this), \"key\", \"key\"));\n+        columns.add(new PropertyColumn<>(\n+                new StringResourceModel(Constants.KEY_FIELD_NAME, this),\n+                Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME));\n         return columns;\n     }\n \n@@ -198,7 +200,7 @@ protected final class MailTemplateProvider extends DirectoryDataProvider<MailTem\n \n         public MailTemplateProvider(final int paginatorRows) {\n             super(paginatorRows);\n-            setSort(\"key\", SortOrder.ASCENDING);\n+            setSort(Constants.KEY_FIELD_NAME, SortOrder.ASCENDING);\n             comparator = new SortableDataProviderComparator<>(this);\n         }\n "},{"sha":"ec111886b2ab0a745c79933fb87a980bcd3f232f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationDirectoryPanel.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationDirectoryPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -84,7 +84,8 @@ public NotificationDirectoryPanel(final String id, final PageReference pageRef)\n     @Override\n     protected List<IColumn<NotificationTO, String>> getColumns() {\n         List<IColumn<NotificationTO, String>> columns = new ArrayList<>();\n-        columns.add(new KeyPropertyColumn<>(new StringResourceModel(\"key\", this), \"key\"));\n+        columns.add(new KeyPropertyColumn<>(\n+                new StringResourceModel(Constants.KEY_FIELD_NAME, this), Constants.KEY_FIELD_NAME));\n         columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"sender\", this), \"sender\", \"sender\"));\n         columns.add(new PropertyColumn<>(\n@@ -175,7 +176,7 @@ protected static class NotificationProvider extends DirectoryDataProvider<Notifi\n         public NotificationProvider(final int paginatorRows) {\n             super(paginatorRows);\n \n-            setSort(\"key\", SortOrder.ASCENDING);\n+            setSort(Constants.KEY_FIELD_NAME, SortOrder.ASCENDING);\n             comparator = new SortableDataProviderComparator<>(this);\n         }\n "},{"sha":"0e407c56f8d1baa2b8f0afa803241d1d9051c0d9","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationWrapper.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWrapper.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -19,10 +19,10 @@\n package org.apache.syncope.client.console.notifications;\n \n import java.io.Serializable;\n-import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.panels.search.SearchClause;\n@@ -51,9 +51,8 @@ public final String getKey() {\n \n     public List<Pair<String, List<SearchClause>>> getAboutClauses() {\n         if (this.aboutClauses == null) {\n-            this.aboutClauses = new ArrayList<>();\n-            SearchUtils.getSearchClauses(this.notificationTO.getAbouts()).entrySet().\n-                    forEach(entry -> this.aboutClauses.add(Pair.of(entry.getKey(), (entry.getValue()))));\n+            this.aboutClauses = SearchUtils.getSearchClauses(this.notificationTO.getAbouts()).entrySet().stream().\n+                    map(entry -> Pair.of(entry.getKey(), entry.getValue())).collect(Collectors.toList());\n         }\n \n         return this.aboutClauses;"},{"sha":"4b145f9385752f9279425e52ffbacb9b9e83cabd","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/notifications/TemplateModal.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FTemplateModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FTemplateModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FTemplateModal.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -50,7 +50,9 @@ public TemplateModal(\n         this.templateTO = templateTO;\n \n         AjaxTextFieldPanel key = new AjaxTextFieldPanel(\n-                \"key\", \"key\", new PropertyModel<>(templateTO, \"key\"), false);\n+                Constants.KEY_FIELD_NAME,\n+                Constants.KEY_FIELD_NAME,\n+                new PropertyModel<>(templateTO, Constants.KEY_FIELD_NAME), false);\n         key.setOutputMarkupPlaceholderTag(true);\n         add(key.setRenderBodyOnly(true));\n     }"},{"sha":"0c01695e4699166bd61b2713a18d529ed5bd7f5f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AbstractLogsPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractLogsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractLogsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractLogsPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -102,7 +102,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n         builder.setItems(loggerTOs).\n                 setModel(new ListModel<>(loggerTOs)).\n-                includes(\"key\", \"level\").\n+                includes(Constants.KEY_FIELD_NAME, \"level\").\n                 withChecks(ListViewPanel.CheckAvailability.NONE).\n                 setReuseItem(false);\n "},{"sha":"ad420c6068c1eed41501771a9a8af26e032b3d18","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AbstractSchemaDetailsPanel.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSchemaDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSchemaDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSchemaDetailsPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.wicket.markup.html.panel.Panel;\n@@ -34,7 +35,10 @@ public abstract class AbstractSchemaDetailsPanel extends Panel {\n     public AbstractSchemaDetailsPanel(final String id, final SchemaTO schemaTO) {\n         super(id);\n \n-        AjaxTextFieldPanel key = new AjaxTextFieldPanel(\"key\", getString(\"key\"), new PropertyModel<>(schemaTO, \"key\"));\n+        AjaxTextFieldPanel key = new AjaxTextFieldPanel(\n+                Constants.KEY_FIELD_NAME,\n+                getString(Constants.KEY_FIELD_NAME),\n+                new PropertyModel<>(schemaTO, Constants.KEY_FIELD_NAME));\n         key.addRequiredLabel();\n         key.setEnabled(schemaTO == null || schemaTO.getKey() == null || schemaTO.getKey().isEmpty());\n         add(key);"},{"sha":"e185e692b603bec60c57e0b08b551257680e818e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyPanel.java","status":"modified","additions":149,"deletions":120,"changes":269,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -22,13 +22,9 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.tuple.Triple;\n-import org.apache.syncope.client.console.layout.AnyObjectFormLayoutInfo;\n-import org.apache.syncope.client.console.layout.FormLayoutInfoUtils;\n-import org.apache.syncope.client.console.layout.GroupFormLayoutInfo;\n-import org.apache.syncope.client.console.layout.UserFormLayoutInfo;\n+import org.apache.syncope.client.console.layout.AnyLayout;\n+import org.apache.syncope.client.console.layout.AnyLayoutUtils;\n import org.apache.syncope.client.console.panels.search.AbstractSearchPanel;\n import org.apache.syncope.client.console.panels.search.AnyObjectSearchPanel;\n import org.apache.syncope.client.console.panels.search.GroupSearchPanel;\n@@ -39,6 +35,7 @@\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n import org.apache.syncope.client.ui.commons.wicket.markup.html.bootstrap.tabs.Accordion;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.panels.ModalPanel;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n@@ -72,43 +69,63 @@ public class AnyPanel extends Panel implements ModalPanel {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AnyPanel.class);\n \n-    private final AnyTypeTO anyTypeTO;\n+    @FunctionalInterface\n+    public interface DirectoryPanelSupplier {\n \n-    private final RealmTO realmTO;\n+        Panel supply(\n+                String id,\n+                AnyTypeTO anyTypeTO,\n+                RealmTO realmTO,\n+                AnyLayout anyLayout,\n+                PageReference pageRef);\n+    }\n+\n+    protected final AnyTypeTO anyTypeTO;\n+\n+    protected final RealmTO realmTO;\n \n-    private final AnyTypeClassRestClient anyTypeClassRestClient = new AnyTypeClassRestClient();\n+    protected final AnyLayout anyLayout;\n \n-    private final Triple<UserFormLayoutInfo, GroupFormLayoutInfo, Map<String, AnyObjectFormLayoutInfo>> formLayoutInfo;\n+    protected final PageReference pageRef;\n \n-    private final PageReference pageRef;\n+    protected AbstractSearchPanel searchPanel;\n \n-    private AbstractSearchPanel searchPanel;\n+    protected final Panel directoryPanel;\n+\n+    public AnyPanel(\n+            final String id,\n+            final AnyTypeTO anyTypeTO,\n+            final RealmTO realmTO,\n+            final AnyLayout anyLayout,\n+            final boolean enableSearch,\n+            final PageReference pageRef) {\n \n-    private final Panel directoryPanel;\n+        this(id, anyTypeTO, realmTO, anyLayout, enableSearch, DEFAULT_DIRECTORYPANEL_SUPPLIER, pageRef);\n+    }\n \n     public AnyPanel(\n             final String id,\n             final AnyTypeTO anyTypeTO,\n             final RealmTO realmTO,\n-            final Triple<UserFormLayoutInfo, GroupFormLayoutInfo, Map<String, AnyObjectFormLayoutInfo>> formLayoutInfo,\n+            final AnyLayout anyLayout,\n             final boolean enableSearch,\n+            final DirectoryPanelSupplier directoryPanelSupplier,\n             final PageReference pageRef) {\n \n         super(id);\n         this.anyTypeTO = anyTypeTO;\n         this.realmTO = realmTO;\n-        this.formLayoutInfo = formLayoutInfo;\n+        this.anyLayout = anyLayout;\n         this.pageRef = pageRef;\n         // ------------------------\n         // Accordion\n         // ------------------------\n         final Model<Integer> model = Model.of(-1);\n-        final StringResourceModel res = new StringResourceModel(\"search.result\", this, new Model<>(anyTypeTO));\n-\n+        final StringResourceModel searchResult = new StringResourceModel(\"search.result\", this, new Model<>(anyTypeTO));\n         final Accordion accordion = new Accordion(\"accordionPanel\",\n-                Collections.<ITab>singletonList(new AbstractTab(res) {\n+                Collections.<ITab>singletonList(new AbstractTab(searchResult) {\n \n-                    private static final long serialVersionUID = 1037272333056449377L;\n+                    protected static final long serialVersionUID = 1037272333056449377L;\n \n                     @Override\n                     public WebMarkupContainer getPanel(final String panelId) {\n@@ -118,13 +135,13 @@ public WebMarkupContainer getPanel(final String panelId) {\n \n                 }), model) {\n \n-            private static final long serialVersionUID = 1L;\n+            protected static final long serialVersionUID = -3056452800492734900L;\n \n             @Override\n             protected Component newTitle(final String markupId, final ITab tab, final Accordion.State state) {\n                 return new AjaxLink<Integer>(markupId) {\n \n-                    private static final long serialVersionUID = 1L;\n+                    protected static final long serialVersionUID = 6250423506463465679L;\n \n                     @Override\n                     protected void onComponentTag(final ComponentTag tag) {\n@@ -136,66 +153,70 @@ protected void onComponentTag(final ComponentTag tag) {\n                     public void onClick(final AjaxRequestTarget target) {\n                         model.setObject(model.getObject() == 0 ? -1 : 0);\n                     }\n-                }.setBody(res);\n+                }.setBody(searchResult);\n             }\n         };\n         accordion.setOutputMarkupId(true);\n         add(accordion.setEnabled(enableSearch).setVisible(enableSearch));\n \n-        directoryPanel = getDirectoryPanel(\"searchResult\");\n+        directoryPanel = directoryPanelSupplier.supply(\"searchResult\", anyTypeTO, realmTO, anyLayout, pageRef);\n         add(directoryPanel);\n         // ------------------------\n     }\n \n     @Override\n     public void onEvent(final IEvent<?> event) {\n         if (event.getPayload() instanceof SearchClausePanel.SearchEvent) {\n-            final AjaxRequestTarget target = SearchClausePanel.SearchEvent.class.cast(event.getPayload()).getTarget();\n+            AjaxRequestTarget target = SearchClausePanel.SearchEvent.class.cast(event.getPayload()).getTarget();\n \n-            final String precond;\n-\n-            if (realmTO.getFullPath().startsWith(SyncopeConstants.ROOT_REALM)) {\n-                precond = StringUtils.EMPTY;\n-            } else {\n-                precond = String.format(\"$dynRealms=~%s;\", realmTO.getKey());\n-            }\n+            String precond = realmTO.getFullPath().startsWith(SyncopeConstants.ROOT_REALM)\n+                    ? StringUtils.EMPTY\n+                    : String.format(\"$dynRealms=~%s;\", realmTO.getKey());\n \n             switch (anyTypeTO.getKind()) {\n                 case USER:\n                     UserDirectoryPanel.class.cast(AnyPanel.this.directoryPanel).search(\n                             precond + SearchUtils.buildFIQL(\n                                     AnyPanel.this.searchPanel.getModel().getObject(),\n                                     SyncopeClient.getUserSearchConditionBuilder(),\n-                                    AnyPanel.this.searchPanel.getAvailableSchemaTypes()), target);\n+                                    AnyPanel.this.searchPanel.getAvailableSchemaTypes(),\n+                                    SearchUtils.NO_CUSTOM_CONDITION),\n+                            target);\n                     break;\n+\n                 case GROUP:\n                     GroupDirectoryPanel.class.cast(AnyPanel.this.directoryPanel).search(\n                             precond + SearchUtils.buildFIQL(\n                                     AnyPanel.this.searchPanel.getModel().getObject(),\n                                     SyncopeClient.getGroupSearchConditionBuilder(),\n-                                    AnyPanel.this.searchPanel.getAvailableSchemaTypes()), target);\n+                                    AnyPanel.this.searchPanel.getAvailableSchemaTypes(),\n+                                    SearchUtils.NO_CUSTOM_CONDITION),\n+                            target);\n                     break;\n+\n                 case ANY_OBJECT:\n                     AnyObjectDirectoryPanel.class.cast(AnyPanel.this.directoryPanel).search(\n                             precond + SearchUtils.buildFIQL(\n                                     AnyPanel.this.searchPanel.getModel().getObject(),\n                                     SyncopeClient.getAnyObjectSearchConditionBuilder(anyTypeTO.getKey()),\n-                                    AnyPanel.this.searchPanel.getAvailableSchemaTypes()), target);\n+                                    AnyPanel.this.searchPanel.getAvailableSchemaTypes(),\n+                                    SearchUtils.NO_CUSTOM_CONDITION),\n+                            target);\n                     break;\n+\n                 default:\n             }\n         } else {\n             super.onEvent(event);\n         }\n     }\n \n-    private AbstractSearchPanel getSearchPanel(final String id) {\n-        final AbstractSearchPanel panel;\n-\n-        final List<SearchClause> clauses = new ArrayList<>();\n-        final SearchClause clause = new SearchClause();\n+    protected AbstractSearchPanel getSearchPanel(final String id) {\n+        List<SearchClause> clauses = new ArrayList<>();\n+        SearchClause clause = new SearchClause();\n         clauses.add(clause);\n \n+        AbstractSearchPanel panel;\n         switch (anyTypeTO.getKind()) {\n             case USER:\n                 clause.setComparator(SearchClause.Comparator.EQUALS);\n@@ -205,6 +226,7 @@ private AbstractSearchPanel getSearchPanel(final String id) {\n                 panel = new UserSearchPanel.Builder(\n                         new ListModel<>(clauses)).required(true).enableSearch().build(id);\n                 break;\n+\n             case GROUP:\n                 clause.setComparator(SearchClause.Comparator.EQUALS);\n                 clause.setType(SearchClause.Type.ATTRIBUTE);\n@@ -213,6 +235,7 @@ private AbstractSearchPanel getSearchPanel(final String id) {\n                 panel = new GroupSearchPanel.Builder(\n                         new ListModel<>(clauses)).required(true).enableSearch().build(id);\n                 break;\n+\n             case ANY_OBJECT:\n                 clause.setComparator(SearchClause.Comparator.EQUALS);\n                 clause.setType(SearchClause.Type.ATTRIBUTE);\n@@ -221,92 +244,98 @@ private AbstractSearchPanel getSearchPanel(final String id) {\n                 panel = new AnyObjectSearchPanel.Builder(anyTypeTO.getKey(),\n                         new ListModel<>(clauses)).required(true).enableSearch().build(id);\n                 break;\n+\n             default:\n                 panel = null;\n         }\n         return panel;\n     }\n \n-    protected Panel getDirectoryPanel(final String id) {\n-        final Panel panel;\n-        String fiql;\n-\n-        final String realm;\n-        final String dynRealm;\n-        if (realmTO.getFullPath().startsWith(SyncopeConstants.ROOT_REALM)) {\n-            realm = realmTO.getFullPath();\n-            dynRealm = null;\n-        } else {\n-            realm = SyncopeConstants.ROOT_REALM;\n-            dynRealm = realmTO.getKey();\n-        }\n-\n-        switch (anyTypeTO.getKind()) {\n-            case USER:\n-                fiql = dynRealm == null\n-                        ? SyncopeClient.getUserSearchConditionBuilder().is(\"key\").notNullValue().query()\n-                        : SyncopeClient.getUserSearchConditionBuilder().inDynRealms(dynRealm).query();\n-\n-                final UserTO userTO = new UserTO();\n-                userTO.setRealm(realmTO.getFullPath());\n-                panel = new UserDirectoryPanel.Builder(\n-                        AnyTypeClassRestClient.list(anyTypeTO.getClasses()),\n-                        anyTypeTO.getKey(),\n-                        pageRef).setRealm(realm).setDynRealm(dynRealm).setFiltered(true).\n-                        setFiql(fiql).setWizardInModal(true).addNewItemPanelBuilder(FormLayoutInfoUtils.instantiate(\n-                        userTO,\n-                        anyTypeTO.getClasses(),\n-                        formLayoutInfo.getLeft(),\n-                        pageRef)).build(id);\n-                MetaDataRoleAuthorizationStrategy.authorize(panel, WebPage.RENDER, IdRepoEntitlement.USER_SEARCH);\n-                break;\n-\n-            case GROUP:\n-                fiql = dynRealm == null\n-                        ? SyncopeClient.getGroupSearchConditionBuilder().is(\"key\").notNullValue().query()\n-                        : SyncopeClient.getGroupSearchConditionBuilder().inDynRealms(dynRealm).query();\n-\n-                final GroupTO groupTO = new GroupTO();\n-                groupTO.setRealm(realmTO.getFullPath());\n-                panel = new GroupDirectoryPanel.Builder(\n-                        AnyTypeClassRestClient.list(anyTypeTO.getClasses()),\n-                        anyTypeTO.getKey(),\n-                        pageRef).setRealm(realm).setDynRealm(dynRealm).setFiltered(true).\n-                        setFiql(fiql).setWizardInModal(true).addNewItemPanelBuilder(FormLayoutInfoUtils.instantiate(\n-                        groupTO,\n-                        anyTypeTO.getClasses(),\n-                        formLayoutInfo.getMiddle(),\n-                        pageRef)).build(id);\n-                // list of group is available to all authenticated users\n-                break;\n-\n-            case ANY_OBJECT:\n-                fiql = dynRealm == null\n-                        ? SyncopeClient.getAnyObjectSearchConditionBuilder(anyTypeTO.getKey()).is(\"key\").notNullValue()\n-                                .query()\n-                        : SyncopeClient.getAnyObjectSearchConditionBuilder(anyTypeTO.getKey()).inDynRealms(dynRealm)\n-                                .query();\n-\n-                final AnyObjectTO anyObjectTO = new AnyObjectTO();\n-                anyObjectTO.setRealm(realmTO.getFullPath());\n-                anyObjectTO.setType(anyTypeTO.getKey());\n-                panel = new AnyObjectDirectoryPanel.Builder(\n-                        AnyTypeClassRestClient.list(anyTypeTO.getClasses()),\n-                        anyTypeTO.getKey(),\n-                        pageRef).setRealm(realm).setDynRealm(dynRealm).setFiltered(true).\n-                        setFiql(fiql).setWizardInModal(true).addNewItemPanelBuilder(FormLayoutInfoUtils.instantiate(\n-                        anyObjectTO,\n-                        anyTypeTO.getClasses(),\n-                        formLayoutInfo.getRight().get(anyTypeTO.getKey()),\n-                        pageRef)).build(id);\n-                MetaDataRoleAuthorizationStrategy.authorize(\n-                        panel, WebPage.RENDER, AnyEntitlement.SEARCH.getFor(anyTypeTO.getKey()));\n-                break;\n-\n-            default:\n-                panel = new LabelPanel(id, null);\n-        }\n-        return panel;\n-    }\n+    protected static DirectoryPanelSupplier DEFAULT_DIRECTORYPANEL_SUPPLIER =\n+            (id, anyType, realmTO, anyLayout, pageRef) -> {\n+\n+                AnyTypeClassRestClient anyTypeClassRestClient = new AnyTypeClassRestClient();\n+\n+                final Panel panel;\n+                String fiql;\n+\n+                final String realm;\n+                final String dynRealm;\n+                if (realmTO.getFullPath().startsWith(SyncopeConstants.ROOT_REALM)) {\n+                    realm = realmTO.getFullPath();\n+                    dynRealm = null;\n+                } else {\n+                    realm = SyncopeConstants.ROOT_REALM;\n+                    dynRealm = realmTO.getKey();\n+                }\n+\n+                switch (anyType.getKind()) {\n+                    case USER:\n+                        fiql = dynRealm == null\n+                                ? SyncopeClient.getUserSearchConditionBuilder().\n+                                        is(Constants.KEY_FIELD_NAME).notNullValue().query()\n+                                : SyncopeClient.getUserSearchConditionBuilder().\n+                                        inDynRealms(dynRealm).query();\n+\n+                        UserTO userTO = new UserTO();\n+                        userTO.setRealm(realmTO.getFullPath());\n+                        panel = new UserDirectoryPanel.Builder(\n+                                anyTypeClassRestClient.list(anyType.getClasses()),\n+                                anyType.getKey(),\n+                                pageRef).setRealm(realm).setDynRealm(dynRealm).setFiltered(true).\n+                                setFiql(fiql).setWizardInModal(true).addNewItemPanelBuilder(\n+                                AnyLayoutUtils.newLayoutInfo(\n+                                        userTO, anyType.getClasses(), anyLayout.getUser(), pageRef)).\n+                                build(id);\n+                        MetaDataRoleAuthorizationStrategy.authorize(panel, WebPage.RENDER,\n+                                IdRepoEntitlement.USER_SEARCH);\n+                        break;\n+\n+                    case GROUP:\n+                        fiql = dynRealm == null\n+                                ? SyncopeClient.getGroupSearchConditionBuilder().\n+                                        is(Constants.KEY_FIELD_NAME).notNullValue().query()\n+                                : SyncopeClient.getGroupSearchConditionBuilder().inDynRealms(dynRealm).query();\n+\n+                        GroupTO groupTO = new GroupTO();\n+                        groupTO.setRealm(realmTO.getFullPath());\n+                        panel = new GroupDirectoryPanel.Builder(\n+                                anyTypeClassRestClient.list(anyType.getClasses()),\n+                                anyType.getKey(),\n+                                pageRef).setRealm(realm).setDynRealm(dynRealm).setFiltered(true).\n+                                setFiql(fiql).setWizardInModal(true).addNewItemPanelBuilder(\n+                                AnyLayoutUtils.newLayoutInfo(\n+                                        groupTO, anyType.getClasses(), anyLayout.getGroup(), pageRef)).\n+                                build(id);\n+                        // list of group is available to all authenticated users\n+                        break;\n+\n+                    case ANY_OBJECT:\n+                        fiql = dynRealm == null\n+                                ? SyncopeClient.getAnyObjectSearchConditionBuilder(anyType.getKey()).\n+                                        is(Constants.KEY_FIELD_NAME).notNullValue().query()\n+                                : SyncopeClient.getAnyObjectSearchConditionBuilder(anyType.getKey()).\n+                                        inDynRealms(dynRealm).query();\n+\n+                        AnyObjectTO anyObjectTO = new AnyObjectTO();\n+                        anyObjectTO.setRealm(realmTO.getFullPath());\n+                        anyObjectTO.setType(anyType.getKey());\n+                        panel = new AnyObjectDirectoryPanel.Builder(\n+                                anyTypeClassRestClient.list(anyType.getClasses()),\n+                                anyType.getKey(),\n+                                pageRef).setRealm(realm).setDynRealm(dynRealm).setFiltered(true).\n+                                setFiql(fiql).setWizardInModal(true).addNewItemPanelBuilder(\n+                                AnyLayoutUtils.newLayoutInfo(anyObjectTO, anyType.getClasses(),\n+                                        anyLayout.getAnyObjects().get(anyType.getKey()), pageRef)).\n+                                build(id);\n+                        MetaDataRoleAuthorizationStrategy.authorize(\n+                                panel, WebPage.RENDER, AnyEntitlement.SEARCH.getFor(anyType.getKey()));\n+                        break;\n+\n+                    default:\n+                        panel = new LabelPanel(id, null);\n+                }\n+                return panel;\n+            };\n \n }"},{"sha":"5fc699988f256f2099802b4b45ca9be46d169efd","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypeClassDetailsPanel.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassDetailsPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n import org.apache.syncope.client.console.rest.SchemaRestClient;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n@@ -43,9 +44,7 @@ public class AnyTypeClassDetailsPanel extends Panel {\n \n     private final List<String> availableVirSchemas = SchemaRestClient.getVirSchemaNames();\n \n-    private static final List<String> LAYOUT_PARAMETERS =\n-            List.of(\"admin.user.layout\", \"self.user.layout\",\n-        \"admin.group.layout\", \"self.group.layout\", \"admin.membership.layout\", \"self.membership.layout\");\n+    private static final List<String> LAYOUT_PARAMETERS = List.of(Constants.ENDUSER_ANYLAYOUT);\n \n     public AnyTypeClassDetailsPanel(final String id, final AnyTypeClassTO anyTypeClassTO) {\n         super(id);\n@@ -58,8 +57,10 @@ public AnyTypeClassDetailsPanel(final String id, final AnyTypeClassTO anyTypeCla\n         antTypeClassForm.setOutputMarkupId(true);\n         add(antTypeClassForm);\n \n-        final AjaxTextFieldPanel key = new AjaxTextFieldPanel(\"key\", getString(\"key\"), new PropertyModel<>(\n-                this.anyTypeClassTO, \"key\"));\n+        final AjaxTextFieldPanel key = new AjaxTextFieldPanel(\n+                Constants.KEY_FIELD_NAME,\n+                getString(Constants.KEY_FIELD_NAME),\n+                new PropertyModel<>(this.anyTypeClassTO, Constants.KEY_FIELD_NAME));\n         key.addRequiredLabel();\n         key.setEnabled(anyTypeClassTO.getKey() == null || this.anyTypeClassTO.getKey().isEmpty());\n         antTypeClassForm.add(key);"},{"sha":"29f29373445a81386c33796ea6cf65182b30acd6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypeClassesPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -140,7 +140,7 @@ protected List<IColumn<AnyTypeClassTO, String>> getColumns() {\n                         @Override\n                         public String getCssClass() {\n                             String css = super.getCssClass();\n-                            if (\"key\".equals(fieldName)) {\n+                            if (Constants.KEY_FIELD_NAME.equals(fieldName)) {\n                                 css = StringUtils.isBlank(css)\n                                         ? \"col-xs-1\"\n                                         : css + \" col-xs-1\";"},{"sha":"0b55628caccaa1222ad435c3e68d452b50508098","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypeDetailsPanel.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n@@ -49,8 +50,10 @@ public AnyTypeDetailsPanel(final String id, final AnyTypeTO anyTypeTO) {\n         form.setModel(new CompoundPropertyModel<>(anyTypeTO));\n         container.add(form);\n \n-        final AjaxTextFieldPanel key =\n-                new AjaxTextFieldPanel(\"key\", getString(\"key\"), new PropertyModel<>(anyTypeTO, \"key\"));\n+        final AjaxTextFieldPanel key = new AjaxTextFieldPanel(\n+                Constants.KEY_FIELD_NAME,\n+                getString(Constants.KEY_FIELD_NAME),\n+                new PropertyModel<>(anyTypeTO, Constants.KEY_FIELD_NAME));\n         key.addRequiredLabel();\n         key.setEnabled(key.getModelObject() == null || key.getModelObject().isEmpty());\n         form.add(key);\n@@ -66,7 +69,7 @@ public AnyTypeDetailsPanel(final String id, final AnyTypeTO anyTypeTO) {\n         form.add(kind);\n \n         form.add(new AjaxPalettePanel.Builder<String>().setAllowOrder(true).build(\"classes\",\n-                new PropertyModel<List<String>>(anyTypeTO, \"classes\"),\n+                new PropertyModel<>(anyTypeTO, \"classes\"),\n                 new ListModel<>(getAvailableAnyTypeClasses())).hideLabel().setOutputMarkupId(true));\n     }\n "},{"sha":"9cfd12ff3ee114d02276433c90b354f179b2e30c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypesPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -139,7 +139,7 @@ protected List<IColumn<AnyTypeTO, String>> getColumns() {\n                         @Override\n                         public String getCssClass() {\n                             String css = super.getCssClass();\n-                            if (\"key\".equals(fieldName)) {\n+                            if (Constants.KEY_FIELD_NAME.equals(fieldName)) {\n                                 css = StringUtils.isBlank(css)\n                                         ? \"col-xs-1\"\n                                         : css + \" col-xs-1\";"},{"sha":"a4f1a28eea2b6fcf60c54bebf500e086c3a4baac","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ApplicationDirectoryPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationDirectoryPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -131,7 +131,8 @@ protected String paginatorRowsKey() {\n     protected List<IColumn<ApplicationTO, String>> getColumns() {\n         final List<IColumn<ApplicationTO, String>> columns = new ArrayList<>();\n \n-        columns.add(new PropertyColumn<>(new ResourceModel(\"key\"), \"key\", \"key\"));\n+        columns.add(new PropertyColumn<>(\n+                new ResourceModel(Constants.KEY_FIELD_NAME), Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME));\n         columns.add(new PropertyColumn<>(new ResourceModel(\"description\"), \"description\", \"description\"));\n         columns.add(new AbstractColumn<ApplicationTO, String>(new ResourceModel(\"privileges\")) {\n "},{"sha":"9e4953ca6f3c8b221db2cf45950bccf5d9a364f4","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ApplicationModalPanel.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationModalPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -51,7 +51,9 @@ public ApplicationModalPanel(\n         modal.setFormModel(application);\n \n         AjaxTextFieldPanel key = new AjaxTextFieldPanel(\n-                \"key\", \"key\", new PropertyModel<>(application, \"key\"), false);\n+                Constants.KEY_FIELD_NAME,\n+                Constants.KEY_FIELD_NAME,\n+                new PropertyModel<>(application, Constants.KEY_FIELD_NAME), false);\n         key.setReadOnly(!create);\n         key.setRequired(true);\n         add(key);"},{"sha":"b38d0ccd7f2ece28b488f38cce5b90e5e6796c90","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DynRealmDirectoryPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmDirectoryPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -111,7 +111,8 @@ protected String paginatorRowsKey() {\n     protected List<IColumn<DynRealmTO, String>> getColumns() {\n         final List<IColumn<DynRealmTO, String>> columns = new ArrayList<>();\n \n-        columns.add(new PropertyColumn<>(new ResourceModel(\"key\"), \"key\", \"key\"));\n+        columns.add(new PropertyColumn<>(\n+                new ResourceModel(Constants.KEY_FIELD_NAME), Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME));\n \n         return columns;\n     }"},{"sha":"b0270879f7745a4a78a65249fd527ea49bc71bf1","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DynRealmModalPanel.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmModalPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -66,7 +66,9 @@ public DynRealmModalPanel(\n         modal.setFormModel(dynRealmWrapper);\n \n         AjaxTextFieldPanel key = new AjaxTextFieldPanel(\n-                \"key\", \"key\", new PropertyModel<>(dynRealmWrapper.getInnerObject(), \"key\"), false);\n+                Constants.KEY_FIELD_NAME,\n+                Constants.KEY_FIELD_NAME,\n+                new PropertyModel<>(dynRealmWrapper.getInnerObject(), Constants.KEY_FIELD_NAME), false);\n         key.setReadOnly(!create);\n         key.setRequired(true);\n         add(key);"},{"sha":"869f3d940a8e3ee83fc84e6cdb5e8f01b84ee61f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/GroupDirectoryPanel.java","status":"modified","additions":66,"deletions":65,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -24,12 +24,12 @@\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.syncope.client.console.commons.IdRepoConstants;\n-import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.audit.AuditHistoryModal;\n-import org.apache.syncope.client.console.layout.FormLayoutInfoUtils;\n+import org.apache.syncope.client.console.commons.IdRepoConstants;\n+import org.apache.syncope.client.console.layout.AnyLayout;\n+import org.apache.syncope.client.console.layout.AnyLayoutUtils;\n import org.apache.syncope.client.console.notifications.NotificationTasks;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n@@ -40,23 +40,23 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink.ActionType;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n-import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n-import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import org.apache.syncope.client.console.wizards.any.GroupWrapper;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.panels.ModalPanel;\n+import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n+import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n-import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyEntitlement;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.ProvisionAction;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.common.lib.types.ProvisionAction;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -98,69 +98,70 @@ protected GroupDirectoryPanel(final String id, final Builder builder, final bool\n             protected Serializable onApplyInternal(\n                     final GroupTO groupTO, final String type, final AjaxRequestTarget target) {\n \n-                AnyTypeTO anyTypeTO = AnyTypeRestClient.read(type);\n-\n-                ModalPanel panel = new AnyPanel(BaseModal.CONTENT_ID, anyTypeTO, null, null, false, pageRef) {\n-\n-                    private static final long serialVersionUID = 7980820232811890502L;\n-\n-                    @Override\n-                    protected Panel getDirectoryPanel(final String id) {\n-\n-                        final Panel panel;\n-\n-                        if (AnyTypeKind.USER.name().equals(type)) {\n-                            String query = SyncopeClient.getUserSearchConditionBuilder().and(\n-                                    SyncopeClient.getUserSearchConditionBuilder().inGroups(groupTO.getKey()),\n-                                    SyncopeClient.getUserSearchConditionBuilder().is(\"key\").notNullValue()).query();\n-\n-                            panel = new UserDirectoryPanel.Builder(\n-                                    AnyTypeClassRestClient.list(anyTypeTO.getClasses()), anyTypeTO.getKey(), pageRef).\n-                                    setRealm(SyncopeConstants.ROOT_REALM).\n-                                    setFiltered(true).\n-                                    setFiql(query).\n-                                    disableCheckBoxes().\n-                                    addNewItemPanelBuilder(FormLayoutInfoUtils.instantiate(\n-                                            new UserTO(),\n-                                            anyTypeTO.getClasses(),\n-                                            FormLayoutInfoUtils.fetch(AnyTypeRestClient.list()).getLeft(),\n-                                            pageRef), false).\n-                                    setWizardInModal(false).build(id);\n-\n-                            MetaDataRoleAuthorizationStrategy.authorize(\n-                                    panel, WebPage.RENDER, IdRepoEntitlement.USER_SEARCH);\n-                        } else {\n-                            String query = SyncopeClient.getAnyObjectSearchConditionBuilder(type).and(\n-                                    SyncopeClient.getUserSearchConditionBuilder().inGroups(groupTO.getKey()),\n-                                    SyncopeClient.getUserSearchConditionBuilder().is(\"key\").notNullValue()).query();\n-\n-                            panel = new AnyObjectDirectoryPanel.Builder(\n-                                    AnyTypeClassRestClient.list(anyTypeTO.getClasses()), anyTypeTO.getKey(), pageRef).\n-                                    setRealm(SyncopeConstants.ROOT_REALM).\n-                                    setFiltered(true).\n-                                    setFiql(query).\n-                                    disableCheckBoxes().\n-                                    addNewItemPanelBuilder(FormLayoutInfoUtils.instantiate(\n-                                            new AnyObjectTO(),\n-                                            anyTypeTO.getClasses(),\n-                                            FormLayoutInfoUtils.fetch(AnyTypeRestClient.list()).getRight().get(type),\n-                                            pageRef), false).\n-                                    setWizardInModal(false).build(id);\n-\n-                            MetaDataRoleAuthorizationStrategy.authorize(\n-                                    panel, WebPage.RENDER, AnyEntitlement.SEARCH.getFor(anyTypeTO.getKey()));\n-                        }\n-\n-                        return panel;\n-                    }\n-                };\n+                AnyTypeRestClient anyTypeRestClient = new AnyTypeRestClient();\n+                AnyTypeClassRestClient classRestClient = new AnyTypeClassRestClient();\n+\n+                AnyLayout layout = AnyLayoutUtils.fetch(anyTypeRestClient.list());\n+                ModalPanel anyPanel = AnyLayoutUtils.newAnyPanel(\n+                        layout.getAnyPanelClass(),\n+                        BaseModal.CONTENT_ID, anyTypeRestClient.read(type), null, layout, false,\n+                        (id, anyTypeTO, realmTO, anyLayout, pageRef) -> {\n+                            final Panel panel;\n+                            if (AnyTypeKind.USER.name().equals(type)) {\n+                                String query = SyncopeClient.getUserSearchConditionBuilder().and(\n+                                        SyncopeClient.getUserSearchConditionBuilder().inGroups(groupTO.getKey()),\n+                                        SyncopeClient.getUserSearchConditionBuilder().\n+                                                is(Constants.KEY_FIELD_NAME).notNullValue()).query();\n+\n+                                panel = new UserDirectoryPanel.Builder(\n+                                        classRestClient.list(anyTypeTO.getClasses()), anyTypeTO.getKey(), pageRef).\n+                                        setRealm(SyncopeConstants.ROOT_REALM).\n+                                        setFiltered(true).\n+                                        setFiql(query).\n+                                        disableCheckBoxes().\n+                                        addNewItemPanelBuilder(\n+                                                AnyLayoutUtils.newLayoutInfo(\n+                                                        new UserTO(),\n+                                                        anyTypeTO.getClasses(),\n+                                                        anyLayout.getUser(),\n+                                                        pageRef), false).\n+                                        setWizardInModal(false).build(id);\n+\n+                                MetaDataRoleAuthorizationStrategy.authorize(\n+                                        panel, WebPage.RENDER, IdRepoEntitlement.USER_SEARCH);\n+                            } else {\n+                                String query = SyncopeClient.getAnyObjectSearchConditionBuilder(type).and(\n+                                        SyncopeClient.getUserSearchConditionBuilder().inGroups(groupTO.getKey()),\n+                                        SyncopeClient.getUserSearchConditionBuilder().\n+                                                is(Constants.KEY_FIELD_NAME).notNullValue()).query();\n+\n+                                panel = new AnyObjectDirectoryPanel.Builder(\n+                                        classRestClient.list(anyTypeTO.getClasses()), anyTypeTO.getKey(), pageRef).\n+                                        setRealm(SyncopeConstants.ROOT_REALM).\n+                                        setFiltered(true).\n+                                        setFiql(query).\n+                                        disableCheckBoxes().\n+                                        addNewItemPanelBuilder(AnyLayoutUtils.newLayoutInfo(\n+                                                new AnyObjectTO(),\n+                                                anyTypeTO.getClasses(),\n+                                                layout.getAnyObjects().get(type),\n+                                                pageRef), false).\n+                                        setWizardInModal(false).build(id);\n+\n+                                MetaDataRoleAuthorizationStrategy.authorize(\n+                                        panel, WebPage.RENDER, AnyEntitlement.SEARCH.getFor(anyTypeTO.getKey()));\n+                            }\n+\n+                            return panel;\n+                        },\n+                        pageRef);\n \n                 membersModal.header(new StringResourceModel(\n                         \"group.members\",\n                         GroupDirectoryPanel.this,\n                         Model.of(Pair.of(groupTO, type))));\n \n-                membersModal.setContent(panel);\n+                membersModal.setContent(anyPanel);\n                 membersModal.show(true);\n                 target.add(membersModal);\n "},{"sha":"b5006c5ecee1363c563c4c2855fbe104de3a7d2d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ImplementationDirectoryPanel.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationDirectoryPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -128,7 +128,9 @@ public void onClick(final AjaxRequestTarget target) {\n     protected List<IColumn<ImplementationTO, String>> getColumns() {\n         List<IColumn<ImplementationTO, String>> columns = new ArrayList<>();\n \n-        columns.add(new PropertyColumn<>(new StringResourceModel(\"key\", this), \"key\", \"key\"));\n+        columns.add(new PropertyColumn<>(\n+                new StringResourceModel(Constants.KEY_FIELD_NAME, this),\n+                Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME));\n         columns.add(new PropertyColumn<>(new StringResourceModel(\"engine\", this), \"engine\", \"engine\"));\n \n         return columns;\n@@ -197,7 +199,7 @@ protected class ImplementationProvider extends DirectoryDataProvider<Implementat\n         public ImplementationProvider(final int paginatorRows) {\n             super(paginatorRows);\n \n-            setSort(\"key\", SortOrder.ASCENDING);\n+            setSort(Constants.KEY_FIELD_NAME, SortOrder.ASCENDING);\n             comparator = new SortableDataProviderComparator<>(this);\n         }\n "},{"sha":"667af626122e9b774f3afa1a58e6e15b1acb5e1a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ImplementationModalPanel.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationModalPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -68,7 +68,9 @@ public ImplementationModalPanel(\n         this.create = implementation.getKey() == null;\n \n         add(new AjaxTextFieldPanel(\n-                \"key\", \"key\", new PropertyModel<>(implementation, \"key\"), false).\n+                Constants.KEY_FIELD_NAME,\n+                Constants.KEY_FIELD_NAME,\n+                new PropertyModel<>(implementation, Constants.KEY_FIELD_NAME), false).\n                 addRequiredLabel().setEnabled(create));\n \n         List<String> classes = SyncopeWebApplication.get().getImplementationInfoProvider()."},{"sha":"6c19ef5d3ddf2b407bc79e594999086cdbd3cbd3","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/PrivilegeDirectoryPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeDirectoryPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -84,7 +84,8 @@ protected PrivilegeDirectoryPanel(\n     protected List<IColumn<PrivilegeTO, String>> getColumns() {\n         final List<IColumn<PrivilegeTO, String>> columns = new ArrayList<>();\n \n-        columns.add(new PropertyColumn<>(new ResourceModel(\"key\"), \"key\", \"key\"));\n+        columns.add(new PropertyColumn<>(\n+                new ResourceModel(Constants.KEY_FIELD_NAME), Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME));\n         columns.add(new PropertyColumn<>(new ResourceModel(\"description\"), \"description\", \"description\"));\n \n         return columns;"},{"sha":"a3800e5b46e8608e4bc2f7ad2da762c6184f29b0","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/PrivilegeWizardBuilder.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeWizardBuilder.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -20,6 +20,7 @@\n \n import java.io.Serializable;\n import org.apache.syncope.client.console.rest.ApplicationRestClient;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.JsonEditorPanel;\n import org.apache.syncope.client.console.wizards.BaseAjaxWizardBuilder;\n@@ -72,7 +73,8 @@ public Profile(final PrivilegeTO privilege) {\n                     : new StringResourceModel(\"privilege.edit\", Model.of(privilege)));\n \n             AjaxTextFieldPanel key = new AjaxTextFieldPanel(\n-                    \"key\", \"key\", new PropertyModel<>(privilege, \"key\"), false);\n+                    Constants.KEY_FIELD_NAME,\n+                    Constants.KEY_FIELD_NAME, new PropertyModel<>(privilege, Constants.KEY_FIELD_NAME), false);\n             key.setReadOnly(privilege.getKey() != null);\n             key.setRequired(true);\n             add(key);"},{"sha":"541bbe3ce5d963bcc9c5c50f963cd815434599a7","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/Realm.java","status":"modified","additions":8,"deletions":13,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -23,20 +23,16 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.commons.ConnIdSpecialName;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.console.commons.ITabComponent;\n import org.apache.syncope.client.ui.commons.status.StatusUtils;\n-import org.apache.syncope.client.console.layout.AnyObjectFormLayoutInfo;\n-import org.apache.syncope.client.console.layout.FormLayoutInfoUtils;\n-import org.apache.syncope.client.console.layout.GroupFormLayoutInfo;\n-import org.apache.syncope.client.console.layout.UserFormLayoutInfo;\n+import org.apache.syncope.client.console.layout.AnyLayout;\n+import org.apache.syncope.client.console.layout.AnyLayoutUtils;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n@@ -168,18 +164,17 @@ public boolean isVisible() {\n             }\n         });\n \n-        final Triple<UserFormLayoutInfo, GroupFormLayoutInfo, Map<String, AnyObjectFormLayoutInfo>> formLayoutInfo =\n-                FormLayoutInfoUtils.fetch(anyTypes.stream().map(EntityTO::getKey).collect(Collectors.toList()));\n-\n-        for (final AnyTypeTO anyType : anyTypes) {\n-            tabs.add(new ITabComponent(\n-                    new Model<>(anyType.getKey()), String.format(\"%s_SEARCH\", anyType.getKey())) {\n+        AnyLayout anyLayout = AnyLayoutUtils.fetch(\n+                anyTypes.stream().map(EntityTO::getKey).collect(Collectors.toList()));\n+        for (AnyTypeTO anyType : anyTypes) {\n+            tabs.add(new ITabComponent(new Model<>(anyType.getKey()), String.format(\"%s_SEARCH\", anyType.getKey())) {\n \n                 private static final long serialVersionUID = 1169585538404171118L;\n \n                 @Override\n                 public WebMarkupContainer getPanel(final String panelId) {\n-                    return new AnyPanel(panelId, anyType, realmTO, formLayoutInfo, true, pageRef);\n+                    return AnyLayoutUtils.newAnyPanel(\n+                            anyLayout.getAnyPanelClass(), panelId, anyType, realmTO, anyLayout, true, pageRef);\n                 }\n \n                 @Override"},{"sha":"d8782108cff4fb2c8aa8eebae0703da52cf6c46e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RelationshipTypeDetailsPanel.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypeDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypeDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypeDetailsPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.to.RelationshipTypeTO;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n@@ -43,8 +44,9 @@ public RelationshipTypeDetailsPanel(\n         form.setModel(new CompoundPropertyModel<>(relationshipTypeTO));\n         container.add(form);\n \n-        final AjaxTextFieldPanel key = new AjaxTextFieldPanel(\"key\", getString(\"key\"),\n-                new PropertyModel<>(relationshipTypeTO, \"key\"));\n+        final AjaxTextFieldPanel key = new AjaxTextFieldPanel(\n+                Constants.KEY_FIELD_NAME, getString(Constants.KEY_FIELD_NAME),\n+                new PropertyModel<>(relationshipTypeTO, Constants.KEY_FIELD_NAME));\n         key.addRequiredLabel();\n         key.setEnabled(key.getModelObject() == null || key.getModelObject().isEmpty());\n         form.add(key);"},{"sha":"9a7b8b83ec3df9dae68e8cc7a50e0031f0bfc003","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RelationshipTypesPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypesPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -143,7 +143,7 @@ protected List<IColumn<RelationshipTypeTO, String>> getColumns() {\n                         @Override\n                         public String getCssClass() {\n                             String css = super.getCssClass();\n-                            if (\"key\".equals(fieldName)) {\n+                            if (Constants.KEY_FIELD_NAME.equals(fieldName)) {\n                                 css = StringUtils.isBlank(css)\n                                         ? \"col-xs-1\"\n                                         : css + \" col-xs-1\";"},{"sha":"077a11be2e7a41d3cf845e12939a9d445e610fa2","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RoleDirectoryPanel.java","status":"modified","additions":46,"deletions":42,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -32,8 +32,9 @@\n import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n import org.apache.syncope.client.console.commons.IdRepoConstants;\n import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n-import org.apache.syncope.client.console.layout.ConsoleLayoutInfo;\n-import org.apache.syncope.client.console.layout.FormLayoutInfoUtils;\n+import org.apache.syncope.client.console.layout.AnyLayout;\n+import org.apache.syncope.client.console.layout.AnyLayoutWrapper;\n+import org.apache.syncope.client.console.layout.AnyLayoutUtils;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.RoleDirectoryPanel.RoleDataProvider;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n@@ -112,7 +113,7 @@ protected List<IColumn<RoleTO, String>> getColumns() {\n         final List<IColumn<RoleTO, String>> columns = new ArrayList<>();\n \n         columns.add(new PropertyColumn<>(\n-                new ResourceModel(\"key\"), \"key\", \"key\"));\n+                new ResourceModel(Constants.KEY_FIELD_NAME), Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME));\n         columns.add(new PropertyColumn<>(\n                 new ResourceModel(\"entitlements\", \"Entitlements\"), null, \"entitlements\"));\n         columns.add(new PropertyColumn<>(\n@@ -161,42 +162,43 @@ public void onClick(final AjaxRequestTarget target, final RoleTO ignore) {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target, final RoleTO ignore) {\n-                String query = SyncopeClient.getUserSearchConditionBuilder().and(\n-                        SyncopeClient.getUserSearchConditionBuilder().inRoles(model.getObject().getKey()),\n-                        SyncopeClient.getUserSearchConditionBuilder().is(\"key\").notNullValue()).query();\n-\n-                AnyTypeTO anyTypeTO = AnyTypeRestClient.read(AnyTypeKind.USER.name());\n-\n-                ModalPanel panel = new AnyPanel(BaseModal.CONTENT_ID, anyTypeTO, null, null, false, pageRef) {\n-\n-                    private static final long serialVersionUID = -7514498203393023415L;\n-\n-                    @Override\n-                    protected Panel getDirectoryPanel(final String id) {\n-                        Panel panel = new UserDirectoryPanel.Builder(\n-                            AnyTypeClassRestClient.list(anyTypeTO.getClasses()), anyTypeTO.getKey(), pageRef).\n-                                setRealm(SyncopeConstants.ROOT_REALM).\n-                                setFiltered(true).\n-                                setFiql(query).\n-                                disableCheckBoxes().\n-                                addNewItemPanelBuilder(FormLayoutInfoUtils.instantiate(\n-                                        new UserTO(),\n-                                        anyTypeTO.getClasses(),\n-                                        FormLayoutInfoUtils.fetch(AnyTypeRestClient.list()).getLeft(),\n-                                        pageRef), false).\n-                                setWizardInModal(false).build(id);\n-\n-                        MetaDataRoleAuthorizationStrategy.authorize(\n-                                panel,\n-                                WebPage.RENDER,\n-                                IdRepoEntitlement.USER_SEARCH);\n-\n-                        return panel;\n-                    }\n-                };\n+                AnyTypeTO userType = AnyTypeRestClient.read(AnyTypeKind.USER.name());\n+\n+                AnyLayout layout = AnyLayoutUtils.fetch(AnyTypeRestClient.list());\n+                ModalPanel anyPanel = AnyLayoutUtils.newAnyPanel(\n+                        layout.getAnyPanelClass(),\n+                        BaseModal.CONTENT_ID, userType, null, layout, false,\n+                        (id, anyTypeTO, realmTO, anyLayout, pageRef) -> {\n+                            String query = SyncopeClient.getUserSearchConditionBuilder().and(\n+                                    SyncopeClient.getUserSearchConditionBuilder().inRoles(model.getObject().getKey()),\n+                                    SyncopeClient.getUserSearchConditionBuilder().\n+                                            is(Constants.KEY_FIELD_NAME).notNullValue()).\n+                                    query();\n+\n+                            Panel panel = new UserDirectoryPanel.Builder(\n+                                    AnyTypeClassRestClient.list(anyTypeTO.getClasses()), anyTypeTO.getKey(), pageRef).\n+                                    setRealm(SyncopeConstants.ROOT_REALM).\n+                                    setFiltered(true).\n+                                    setFiql(query).\n+                                    disableCheckBoxes().\n+                                    addNewItemPanelBuilder(AnyLayoutUtils.newLayoutInfo(\n+                                            new UserTO(),\n+                                            anyTypeTO.getClasses(),\n+                                            anyLayout.getUser(),\n+                                            pageRef), false).\n+                                    setWizardInModal(false).build(id);\n+\n+                            MetaDataRoleAuthorizationStrategy.authorize(\n+                                    panel,\n+                                    WebPage.RENDER,\n+                                    IdRepoEntitlement.USER_SEARCH);\n+\n+                            return panel;\n+                        },\n+                        pageRef);\n \n                 membersModal.header(new StringResourceModel(\"role.members\", RoleDirectoryPanel.this, model));\n-                membersModal.setContent(panel);\n+                membersModal.setContent(anyPanel);\n                 membersModal.show(true);\n                 target.add(membersModal);\n             }\n@@ -208,24 +210,26 @@ protected Panel getDirectoryPanel(final String id) {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target, final RoleTO ignore) {\n-                ConsoleLayoutInfo info = new ConsoleLayoutInfo(model.getObject().getKey());\n-                info.setContent(RoleRestClient.readConsoleLayoutInfo(model.getObject().getKey()));\n+                AnyLayoutWrapper wrapper = new AnyLayoutWrapper(\n+                        model.getObject().getKey(),\n+                        AnyLayoutUtils.defaultIfEmpty(\n+                                RoleRestClient.readAnyLayout(model.getObject().getKey()), AnyTypeRestClient.list()));\n \n                 utilityModal.header(new ResourceModel(\"console.layout.info\", \"JSON Content\"));\n                 utilityModal.setContent(new JsonEditorPanel(\n-                        utilityModal, new PropertyModel<String>(info, \"content\"), false, pageRef) {\n+                        utilityModal, new PropertyModel<String>(wrapper, \"content\"), false, pageRef) {\n \n                     private static final long serialVersionUID = -8927036362466990179L;\n \n                     @Override\n                     public void onSubmit(final AjaxRequestTarget target) {\n                         try {\n-                            RoleRestClient.setConsoleLayoutInfo(info.getKey(), info.getContent());\n+                            RoleRestClient.setAnyLayout(wrapper.getKey(), wrapper.getContent());\n                             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                             modal.show(false);\n                             modal.close(target);\n                         } catch (Exception e) {\n-                            LOG.error(\"While updating console layout info for role {}\", info.getKey(), e);\n+                            LOG.error(\"While updating console layout for role {}\", wrapper.getKey(), e);\n                             SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage())\n                                     ? e.getClass().getName() : e.getMessage());\n                         }"},{"sha":"f67d3ba4dd405d551bee2f07bdd2af2e35ad1bf8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/SchemaTypePanel.java","status":"modified","additions":10,"deletions":14,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -22,7 +22,6 @@\n import java.lang.reflect.Field;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n@@ -60,17 +59,14 @@ public class SchemaTypePanel extends TypesDirectoryPanel<SchemaTO, SchemaProvide\n \n     private static final long serialVersionUID = 3905038169553185171L;\n \n-    private static final Map<SchemaType, List<String>> COL_NAMES = new HashMap<SchemaType, List<String>>() {\n-\n-        private static final long serialVersionUID = 3109256773218160485L;\n-\n-        {\n-            put(SchemaType.PLAIN,\n-                List.of(\"key\", \"type\", \"mandatoryCondition\", \"uniqueConstraint\", \"multivalue\", \"readonly\"));\n-            put(SchemaType.DERIVED, List.of(\"key\", \"expression\"));\n-            put(SchemaType.VIRTUAL, List.of(\"key\", \"resource\", \"anyType\", \"extAttrName\", \"readonly\"));\n-        }\n-    };\n+    private static final Map<SchemaType, List<String>> COL_NAMES = Map.of(\n+            SchemaType.PLAIN,\n+            List.of(Constants.KEY_FIELD_NAME,\n+                    \"type\", \"mandatoryCondition\", \"uniqueConstraint\", \"multivalue\", \"readonly\"),\n+            SchemaType.DERIVED,\n+            List.of(Constants.KEY_FIELD_NAME, \"expression\"),\n+            SchemaType.VIRTUAL,\n+            List.of(Constants.KEY_FIELD_NAME, \"resource\", \"anyType\", \"extAttrName\", \"readonly\"));\n \n     private final SchemaType schemaType;\n \n@@ -137,7 +133,7 @@ protected List<IColumn<SchemaTO, String>> getColumns() {\n                         @Override\n                         public String getCssClass() {\n                             String css = super.getCssClass();\n-                            if (\"key\".equals(field)) {\n+                            if (Constants.KEY_FIELD_NAME.equals(field)) {\n                                 css = StringUtils.isBlank(css)\n                                         ? \"col-xs-1\"\n                                         : css + \" col-xs-1\";\n@@ -213,7 +209,7 @@ private SchemaProvider(final int paginatorRows, final SchemaType schemaType) {\n             super(paginatorRows);\n \n             this.schemaType = schemaType;\n-            setSort(\"key\", SortOrder.ASCENDING);\n+            setSort(Constants.KEY_FIELD_NAME, SortOrder.ASCENDING);\n             comparator = new SortableDataProviderComparator<>(this);\n         }\n "},{"sha":"dd5a09146c3788b9eb26d4affbec342ef41ffa22","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/SecurityQuestionsPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -129,7 +129,7 @@ protected List<IColumn<SecurityQuestionTO, String>> getColumns() {\n         List<IColumn<SecurityQuestionTO, String>> columns = new ArrayList<>();\n \n         columns.add(new KeyPropertyColumn<>(\n-                new StringResourceModel(\"key\", this), \"key\"));\n+                new StringResourceModel(Constants.KEY_FIELD_NAME, this), Constants.KEY_FIELD_NAME));\n         columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"content\", this), \"content\", \"content\"));\n "},{"sha":"2d80d2227c5a5bc8205103f7a1f9ab61d4364b22","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -84,6 +84,9 @@ public abstract class AbstractSearchPanel extends Panel {\n \n         protected boolean enableSearch = false;\n \n+        protected SearchClausePanel.Customizer customizer = new SearchClausePanel.Customizer() {\n+        };\n+\n         protected IEventSink resultContainer;\n \n         public Builder(final IModel<List<SearchClause>> model) {\n@@ -100,6 +103,11 @@ public Builder<T> enableSearch() {\n             return this;\n         }\n \n+        public Builder<T> customizer(final SearchClausePanel.Customizer customizer) {\n+            this.customizer = customizer;\n+            return this;\n+        }\n+\n         public Builder<T> required(final boolean required) {\n             this.required = required;\n             return this;\n@@ -134,10 +142,12 @@ protected AbstractSearchPanel(\n         searchFormContainer.setOutputMarkupId(true);\n         add(searchFormContainer);\n \n-        final SearchClausePanel searchClausePanel = new SearchClausePanel(\"panel\", \"panel\",\n+        SearchClausePanel searchClausePanel = new SearchClausePanel(\"panel\", \"panel\",\n                 Model.of(new SearchClause()),\n                 required,\n-                types, anames, dnames, groupInfo, roleNames, privilegeNames, resourceNames);\n+                types,\n+                builder.customizer,\n+                anames, dnames, groupInfo, roleNames, privilegeNames, resourceNames);\n \n         if (enableSearch) {\n             searchClausePanel.enableSearch(builder.resultContainer);"},{"sha":"23b5363855ccf622b0755e6328d2f38109b5432d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/GroupSearchPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -32,7 +32,7 @@\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n \n-public final class GroupSearchPanel extends AbstractSearchPanel {\n+public class GroupSearchPanel extends AbstractSearchPanel {\n \n     private static final long serialVersionUID = 5757183539269316263L;\n \n@@ -50,7 +50,7 @@ public GroupSearchPanel build(final String id) {\n         }\n     }\n \n-    private GroupSearchPanel(final String id, final GroupSearchPanel.Builder builder) {\n+    protected GroupSearchPanel(final String id, final GroupSearchPanel.Builder builder) {\n         super(id, AnyTypeKind.GROUP, builder);\n     }\n "},{"sha":"69f2d153c5c90f809d9f587622c6c7d80a623606","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClause.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClause.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClause.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClause.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -42,7 +42,8 @@ public enum Type {\n         ROLE_MEMBERSHIP,\n         PRIVILEGE,\n         RESOURCE,\n-        RELATIONSHIP;\n+        RELATIONSHIP,\n+        CUSTOM;\n \n     }\n "},{"sha":"db6441d654d6420959a445ed63a2e5fb5fced608","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java","status":"modified","additions":108,"deletions":39,"changes":147,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -22,9 +22,9 @@\n import de.agilecoders.wicket.extensions.markup.html.bootstrap.form.checkbox.bootstraptoggle.BootstrapToggleConfig;\n import java.io.Serializable;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -57,6 +57,7 @@\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.form.CheckBox;\n+import org.apache.wicket.markup.html.form.ChoiceRenderer;\n import org.apache.wicket.markup.html.form.FormComponent;\n import org.apache.wicket.markup.html.form.IChoiceRenderer;\n import org.apache.wicket.markup.html.list.ListItem;\n@@ -70,10 +71,49 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {\n \n     private static final long serialVersionUID = -527351923968737757L;\n \n+    public interface Customizer extends Serializable {\n+\n+        default IChoiceRenderer<SearchClause.Type> typeRenderer() {\n+            return new ChoiceRenderer<>();\n+        }\n+\n+        default List<Comparator> comparators() {\n+            return List.of();\n+        }\n+\n+        default String comparatorDisplayValue(Comparator object) {\n+            return object.toString();\n+        }\n+\n+        default Optional<SearchClause.Comparator> comparatorGetObject(String id) {\n+            return Optional.empty();\n+        }\n+\n+        default List<String> properties() {\n+            return List.of();\n+        }\n+\n+        default void setFieldAccess(\n+                AjaxTextFieldPanel value,\n+                AjaxTextFieldPanel property,\n+                LoadableDetachableModel<List<String>> properties) {\n+\n+            value.setEnabled(true);\n+            value.setModelObject(StringUtils.EMPTY);\n+            property.setEnabled(true);\n+\n+            // reload properties list\n+            properties.detach();\n+            property.setChoices(properties.getObject());\n+        }\n+    }\n+\n     private final boolean required;\n \n     private final IModel<List<SearchClause.Type>> types;\n \n+    private final Customizer customizer;\n+\n     private final IModel<Map<String, PlainSchemaTO>> anames;\n \n     private final IModel<List<String>> dnames;\n@@ -108,6 +148,7 @@ public SearchClausePanel(\n             final Model<SearchClause> clause,\n             final boolean required,\n             final IModel<List<SearchClause.Type>> types,\n+            final Customizer customizer,\n             final IModel<Map<String, PlainSchemaTO>> anames,\n             final IModel<List<String>> dnames,\n             final Pair<IModel<Map<String, String>>, Integer> groupInfo,\n@@ -121,6 +162,7 @@ public SearchClausePanel(\n \n         this.required = required;\n         this.types = types;\n+        this.customizer = customizer;\n         this.anames = anames;\n         this.dnames = dnames;\n         this.groupInfo = groupInfo;\n@@ -162,7 +204,7 @@ protected void onSubmit(final AjaxRequestTarget target) {\n             @Override\n             protected List<Comparator> load() {\n                 if (field.getModel().getObject() == null || field.getModel().getObject().getType() == null) {\n-                    return Collections.<Comparator>emptyList();\n+                    return List.of();\n                 }\n \n                 switch (field.getModel().getObject().getType()) {\n@@ -184,6 +226,10 @@ protected List<Comparator> load() {\n                                 SearchClause.Comparator.IS_NULL,\n                                 SearchClause.Comparator.EQUALS,\n                                 SearchClause.Comparator.NOT_EQUALS);\n+\n+                    case CUSTOM:\n+                        return customizer.comparators();\n+\n                     default:\n                         return List.of();\n                 }\n@@ -202,37 +248,34 @@ protected List<String> load() {\n \n                 switch (field.getModel().getObject().getType()) {\n                     case ATTRIBUTE:\n-                        final List<String> names = new ArrayList<>(dnames.getObject());\n+                        List<String> names = new ArrayList<>(dnames.getObject());\n                         if (anames != null && anames.getObject() != null && !anames.getObject().isEmpty()) {\n                             names.addAll(anames.getObject().keySet());\n                         }\n                         return names.stream().sorted().collect(Collectors.toList());\n \n                     case GROUP_MEMBERSHIP:\n-                        final List<String> groups = groupInfo.getLeft().getObject().values().\n-                                stream().collect(Collectors.toList());\n-                        Collections.sort(groups);\n-                        return groups;\n+                        return groupInfo.getLeft().getObject().values().stream().\n+                                sorted().collect(Collectors.toList());\n \n                     case ROLE_MEMBERSHIP:\n-                        final List<String> roles = new ArrayList<>(roleNames.getObject());\n-                        Collections.sort(roles);\n-                        return roles;\n+                        return roleNames.getObject().stream().\n+                                sorted().collect(Collectors.toList());\n \n                     case PRIVILEGE:\n-                        final List<String> privileges = new ArrayList<>(privilegeNames.getObject());\n-                        Collections.sort(privileges);\n-                        return privileges;\n+                        return privilegeNames.getObject().stream().\n+                                sorted().collect(Collectors.toList());\n \n                     case RESOURCE:\n-                        final List<String> resources = new ArrayList<>(resourceNames.getObject());\n-                        Collections.sort(resources);\n-                        return resources;\n+                        return resourceNames.getObject().stream().\n+                                sorted().collect(Collectors.toList());\n \n                     case RELATIONSHIP:\n-                        final List<String> relations = RelationshipTypeRestClient.list().stream().\n+                        return RelationshipTypeRestClient.list().stream().\n                                 map(RelationshipTypeTO::getKey).collect(Collectors.toList());\n-                        return relations;\n+\n+                    case CUSTOM:\n+                        return customizer.properties();\n \n                     default:\n                         return List.of();\n@@ -487,9 +530,10 @@ public CharSequence getPrecondition(final Component component) {\n             }\n         });\n \n-        final AjaxDropDownChoicePanel<SearchClause.Type> type = new AjaxDropDownChoicePanel<>(\n+        AjaxDropDownChoicePanel<SearchClause.Type> type = new AjaxDropDownChoicePanel<>(\n                 \"type\", \"type\", new PropertyModel<>(searchClause, \"type\"));\n-        type.setChoices(types).hideLabel().setRequired(required).setOutputMarkupId(true);\n+        type.setChoices(types).setChoiceRenderer(customizer.typeRenderer()).\n+                hideLabel().setRequired(required).setOutputMarkupId(true);\n         type.setNullValid(false);\n         type.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n@@ -523,8 +567,10 @@ protected void onUpdate(final AjaxRequestTarget target) {\n             protected void onUpdate(final AjaxRequestTarget target) {\n                 if (type.getModelObject() == SearchClause.Type.ATTRIBUTE\n                         || type.getModelObject() == SearchClause.Type.RELATIONSHIP) {\n+\n                     if (comparator.getModelObject() == SearchClause.Comparator.IS_NULL\n                             || comparator.getModelObject() == SearchClause.Comparator.IS_NOT_NULL) {\n+\n                         value.setModelObject(StringUtils.EMPTY);\n                         value.setEnabled(false);\n                     } else {\n@@ -536,7 +582,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 if (type.getModelObject() == SearchClause.Type.RELATIONSHIP) {\n                     property.setEnabled(true);\n \n-                    final SearchClause searchClause = new SearchClause();\n+                    SearchClause searchClause = new SearchClause();\n                     searchClause.setType(Type.valueOf(type.getDefaultModelObjectAsString()));\n                     searchClause.setComparator(comparator.getModelObject());\n                     SearchClausePanel.this.clause.setObject(searchClause);\n@@ -555,7 +601,7 @@ private void setFieldAccess(\n             final Type type,\n             final AjaxTextFieldPanel property,\n             final FieldPanel<Comparator> comparator,\n-            final FieldPanel<String> value) {\n+            final AjaxTextFieldPanel value) {\n \n         if (type != null) {\n             property.setEnabled(true);\n@@ -632,20 +678,23 @@ private void setFieldAccess(\n                     property.setChoices(properties.getObject());\n                     break;\n \n+                case CUSTOM:\n+                    customizer.setFieldAccess(value, property, properties);\n+                    break;\n+\n                 default:\n                     break;\n             }\n         }\n     }\n \n-    private static IChoiceRenderer<SearchClause.Comparator> getComparatorRender(final IModel<SearchClause> clause) {\n+    private IChoiceRenderer<SearchClause.Comparator> getComparatorRender(final IModel<SearchClause> clause) {\n         return new IChoiceRenderer<SearchClause.Comparator>() {\n \n             private static final long serialVersionUID = -9086043750227867686L;\n \n             @Override\n             public Object getDisplayValue(final SearchClause.Comparator object) {\n-\n                 if (clause == null || clause.getObject() == null || clause.getObject().getType() == null) {\n                     return object.toString();\n                 }\n@@ -691,6 +740,7 @@ public Object getDisplayValue(final SearchClause.Comparator object) {\n                                 display = StringUtils.EMPTY;\n                         }\n                         break;\n+\n                     case GROUP_MEMBERSHIP:\n                         switch (object) {\n                             case EQUALS:\n@@ -705,6 +755,7 @@ public Object getDisplayValue(final SearchClause.Comparator object) {\n                                 display = StringUtils.EMPTY;\n                         }\n                         break;\n+\n                     case GROUP_MEMBER:\n                         switch (object) {\n                             case EQUALS:\n@@ -719,6 +770,7 @@ public Object getDisplayValue(final SearchClause.Comparator object) {\n                                 display = StringUtils.EMPTY;\n                         }\n                         break;\n+\n                     case ROLE_MEMBERSHIP:\n                     case PRIVILEGE:\n                     case RESOURCE:\n@@ -735,6 +787,7 @@ public Object getDisplayValue(final SearchClause.Comparator object) {\n                                 display = StringUtils.EMPTY;\n                         }\n                         break;\n+\n                     case RELATIONSHIP:\n                         switch (object) {\n                             case IS_NOT_NULL:\n@@ -757,6 +810,11 @@ public Object getDisplayValue(final SearchClause.Comparator object) {\n                                 display = StringUtils.EMPTY;\n                         }\n                         break;\n+\n+                    case CUSTOM:\n+                        display = customizer.comparatorDisplayValue(object);\n+                        break;\n+\n                     default:\n                         display = object.toString();\n                 }\n@@ -776,58 +834,69 @@ public SearchClause.Comparator getObject(\n                     return SearchClause.Comparator.EQUALS;\n                 }\n \n-                final SearchClause.Comparator res;\n+                final SearchClause.Comparator comparator;\n                 switch (id) {\n                     case \"HAS\":\n                     case \"IN\":\n                     case \"WITH\":\n-                        res = SearchClause.Comparator.EQUALS;\n+                        comparator = SearchClause.Comparator.EQUALS;\n                         break;\n+\n                     case \"HAS NOT\":\n                     case \"NOT IN\":\n                     case \"WITHOUT\":\n-                        res = SearchClause.Comparator.NOT_EQUALS;\n+                        comparator = SearchClause.Comparator.NOT_EQUALS;\n                         break;\n+\n                     case \"NULL\":\n                     case \"NOT EXIST\":\n-                        res = SearchClause.Comparator.IS_NULL;\n+                        comparator = SearchClause.Comparator.IS_NULL;\n                         break;\n+\n                     case \"NOT NULL\":\n                     case \"EXIST\":\n-                        res = SearchClause.Comparator.IS_NOT_NULL;\n+                        comparator = SearchClause.Comparator.IS_NOT_NULL;\n                         break;\n+\n                     case \"==\":\n-                        res = SearchClause.Comparator.EQUALS;\n+                        comparator = SearchClause.Comparator.EQUALS;\n                         break;\n+\n                     case \"!=\":\n-                        res = SearchClause.Comparator.NOT_EQUALS;\n+                        comparator = SearchClause.Comparator.NOT_EQUALS;\n                         break;\n+\n                     case \"<\":\n-                        res = SearchClause.Comparator.LESS_THAN;\n+                        comparator = SearchClause.Comparator.LESS_THAN;\n                         break;\n+\n                     case \"<=\":\n-                        res = SearchClause.Comparator.LESS_OR_EQUALS;\n+                        comparator = SearchClause.Comparator.LESS_OR_EQUALS;\n                         break;\n+\n                     case \">\":\n-                        res = SearchClause.Comparator.GREATER_THAN;\n+                        comparator = SearchClause.Comparator.GREATER_THAN;\n                         break;\n+\n                     case \">=\":\n-                        res = SearchClause.Comparator.GREATER_OR_EQUALS;\n+                        comparator = SearchClause.Comparator.GREATER_OR_EQUALS;\n                         break;\n+\n                     default:\n                         // EQUALS to be used as default value\n-                        res = SearchClause.Comparator.EQUALS;\n+                        comparator = customizer.comparatorGetObject(id).orElse(SearchClause.Comparator.EQUALS);\n                         break;\n                 }\n-                return res;\n+\n+                return comparator;\n             }\n         };\n     }\n \n     @Override\n     public FieldPanel<SearchClause> clone() {\n-        final SearchClausePanel panel = new SearchClausePanel(\n-                getId(), name, null, required, types, anames, dnames, groupInfo,\n+        SearchClausePanel panel = new SearchClausePanel(\n+                getId(), name, null, required, types, customizer, anames, dnames, groupInfo,\n                 roleNames, privilegeNames, resourceNames);\n         panel.setReadOnly(this.isReadOnly());\n         panel.setRequired(this.isRequired());"},{"sha":"4b9c9911265350e8c546270f12412c9e8cb1a1fe","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java","status":"modified","additions":37,"deletions":24,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -20,12 +20,12 @@\n \n import java.io.Serializable;\n import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.function.Function;\n import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.math.NumberUtils;\n@@ -51,17 +51,16 @@ public final class SearchUtils implements Serializable {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SearchUtils.class);\n \n+    public static final Function<SearchClause, CompleteCondition> NO_CUSTOM_CONDITION = clause -> null;\n+\n     private static Pattern getTypeConditionPattern(final String type) {\n         return Pattern.compile(String.format(\";\\\\$type==%s|\\\\$type==%s;\", type, type));\n     }\n \n     public static Map<String, List<SearchClause>> getSearchClauses(final Map<String, String> fiql) {\n-        Map<String, List<SearchClause>> clauses = new HashMap<>();\n-        for (Map.Entry<String, String> entry : fiql.entrySet()) {\n-            clauses.put(entry.getKey(), getSearchClauses(\n-                    entry.getValue().replaceAll(getTypeConditionPattern(entry.getKey()).pattern(), \"\")));\n-        }\n-        return clauses;\n+        return fiql.entrySet().stream().collect(Collectors.toMap(\n+                Map.Entry::getKey,\n+                e -> getSearchClauses(e.getValue().replaceAll(getTypeConditionPattern(e.getKey()).pattern(), \"\"))));\n     }\n \n     public static List<SearchClause> getSearchClauses(final String fiql) {\n@@ -93,7 +92,7 @@ private static List<SearchClause> getSearchClauses(final SearchCondition<SearchB\n     private static List<SearchClause> getCompoundSearchClauses(final SearchCondition<SearchBean> sc) {\n         List<SearchClause> clauses = new ArrayList<>();\n \n-        for (SearchCondition<SearchBean> searchCondition : sc.getSearchConditions()) {\n+        sc.getSearchConditions().forEach(searchCondition -> {\n             if (searchCondition.getStatement() == null) {\n                 clauses.addAll(getCompoundSearchClauses(searchCondition));\n             } else {\n@@ -106,7 +105,7 @@ private static List<SearchClause> getCompoundSearchClauses(final SearchCondition\n                 }\n                 clauses.add(clause);\n             }\n-        }\n+        });\n \n         return clauses;\n     }\n@@ -142,6 +141,9 @@ private static SearchClause getPrimitiveSearchClause(final SearchCondition<Searc\n         } else if (SpecialAttr.MEMBER.toString().equals(property)) {\n             clause.setType(SearchClause.Type.GROUP_MEMBER);\n             clause.setProperty(value);\n+        } else if (property.startsWith(\"$\")) {\n+            clause.setType(SearchClause.Type.CUSTOM);\n+            clause.setProperty(value);\n         } else {\n             clause.setType(SearchClause.Type.ATTRIBUTE);\n         }\n@@ -200,14 +202,16 @@ private static SearchClause getPrimitiveSearchClause(final SearchCondition<Searc\n     }\n \n     public static String buildFIQL(final List<SearchClause> clauses, final AbstractFiqlSearchConditionBuilder builder) {\n-        return buildFIQL(clauses, builder, Collections.<String, PlainSchemaTO>emptyMap());\n+        return buildFIQL(clauses, builder, Map.of(), NO_CUSTOM_CONDITION);\n     }\n \n     public static String buildFIQL(\n             final List<SearchClause> clauses,\n             final AbstractFiqlSearchConditionBuilder builder,\n-            final Map<String, PlainSchemaTO> availableSchemaTypes) {\n-        LOG.debug(\"Generating FIQL from List<SearchClause>: {}\", clauses);\n+            final Map<String, PlainSchemaTO> availableSchemaTypes,\n+            final Function<SearchClause, CompleteCondition> customCondition) {\n+\n+        LOG.debug(\"Generating FIQL from {}\", clauses);\n \n         CompleteCondition prevCondition;\n         CompleteCondition condition = null;\n@@ -224,16 +228,18 @@ public static String buildFIQL(\n \n                 switch (clause.getType()) {\n                     case GROUP_MEMBER:\n-                        switch (clause.getComparator()) {\n-                            case EQUALS:\n-                                condition = ((GroupFiqlSearchConditionBuilder) builder).withMembers(value);\n-                                break;\n+                        if (builder instanceof GroupFiqlSearchConditionBuilder) {\n+                            switch (clause.getComparator()) {\n+                                case EQUALS:\n+                                    condition = ((GroupFiqlSearchConditionBuilder) builder).withMembers(value);\n+                                    break;\n \n-                            case NOT_EQUALS:\n-                                condition = ((GroupFiqlSearchConditionBuilder) builder).withoutMembers(value);\n-                                break;\n+                                case NOT_EQUALS:\n+                                    condition = ((GroupFiqlSearchConditionBuilder) builder).withoutMembers(value);\n+                                    break;\n \n-                            default:\n+                                default:\n+                            }\n                         }\n                         break;\n \n@@ -356,7 +362,9 @@ public static String buildFIQL(\n                         break;\n \n                     case ROLE_MEMBERSHIP:\n-                        if (StringUtils.isNotBlank(clause.getProperty())) {\n+                        if (StringUtils.isNotBlank(clause.getProperty())\n+                                && builder instanceof UserFiqlSearchConditionBuilder) {\n+\n                             switch (clause.getComparator()) {\n                                 case EQUALS:\n                                     condition = ((UserFiqlSearchConditionBuilder) builder).\n@@ -373,7 +381,9 @@ public static String buildFIQL(\n                         break;\n \n                     case PRIVILEGE:\n-                        if (StringUtils.isNotBlank(clause.getProperty())) {\n+                        if (StringUtils.isNotBlank(clause.getProperty())\n+                                && builder instanceof UserFiqlSearchConditionBuilder) {\n+\n                             switch (clause.getComparator()) {\n                                 case EQUALS:\n                                     condition = ((UserFiqlSearchConditionBuilder) builder).\n@@ -437,6 +447,10 @@ public static String buildFIQL(\n                         }\n                         break;\n \n+                    case CUSTOM:\n+                        condition = customCondition.apply(clause);\n+                        break;\n+\n                     default:\n                         break;\n                 }\n@@ -463,5 +477,4 @@ public static String buildFIQL(\n     private SearchUtils() {\n         // private constructor for static utility class\n     }\n-\n }"},{"sha":"1f8f982766a0a7b107cb943e317ccb0fcc7ce836","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/UserSearchPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -28,7 +28,7 @@\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n \n-public final class UserSearchPanel extends AnyObjectSearchPanel {\n+public class UserSearchPanel extends AnyObjectSearchPanel {\n \n     private static final long serialVersionUID = -1769527800450203738L;\n \n@@ -46,7 +46,7 @@ public UserSearchPanel build(final String id) {\n         }\n     }\n \n-    private UserSearchPanel(final String id, final Builder builder) {\n+    protected UserSearchPanel(final String id, final Builder builder) {\n         super(id, AnyTypeKind.USER, builder);\n     }\n "},{"sha":"e4c6fb3b043bd33bf40fbf5779033f96980a378d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -119,7 +119,7 @@ protected List<IColumn<T, String>> getColumns() {\n         final List<IColumn<T, String>> columns = new ArrayList<>();\n \n         columns.add(new KeyPropertyColumn<>(\n-                new StringResourceModel(\"key\", this), \"key\"));\n+                new StringResourceModel(Constants.KEY_FIELD_NAME, this), Constants.KEY_FIELD_NAME));\n         columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"description\", this), \"description\", \"description\"));\n         columns.add(new CollectionPropertyColumn<>("},{"sha":"c8b09cf609320a94e795eadd233933cf38840320","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportDirectoryPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -106,7 +106,8 @@ protected void onTimer(final AjaxRequestTarget target) {\n     protected List<IColumn<ReportTO, String>> getColumns() {\n         final List<IColumn<ReportTO, String>> columns = new ArrayList<>();\n \n-        columns.add(new KeyPropertyColumn<>(new StringResourceModel(\"key\", this), \"key\"));\n+        columns.add(new KeyPropertyColumn<>(\n+                new StringResourceModel(Constants.KEY_FIELD_NAME, this), Constants.KEY_FIELD_NAME));\n         columns.add(new PropertyColumn<>(new StringResourceModel(\"name\", this), \"name\", \"name\"));\n \n         columns.add(new DatePropertyColumn<>("},{"sha":"53f2a815d0aa1b6c249a6146edd41a47a626b12e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportTemplateDirectoryPanel.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportTemplateDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportTemplateDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportTemplateDirectoryPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -110,7 +110,9 @@ public WizardModalPanel<ReportTemplateTO> build(\n     @Override\n     protected List<IColumn<ReportTemplateTO, String>> getColumns() {\n         List<IColumn<ReportTemplateTO, String>> columns = new ArrayList<>();\n-        columns.add(new PropertyColumn<>(new StringResourceModel(\"key\", this), \"key\", \"key\"));\n+        columns.add(new PropertyColumn<>(\n+                new StringResourceModel(Constants.KEY_FIELD_NAME, this),\n+                Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME));\n         return columns;\n     }\n \n@@ -218,7 +220,7 @@ protected final class ReportTemplateProvider extends DirectoryDataProvider<Repor\n \n         public ReportTemplateProvider(final int paginatorRows) {\n             super(paginatorRows);\n-            setSort(\"key\", SortOrder.ASCENDING);\n+            setSort(Constants.KEY_FIELD_NAME, SortOrder.ASCENDING);\n             comparator = new SortableDataProviderComparator<>(this);\n         }\n "},{"sha":"5c536618558cab925a012e8afc69ed0142af5e5b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/RoleRestClient.java","status":"modified","additions":8,"deletions":11,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRoleRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRoleRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRoleRestClient.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -20,9 +20,8 @@\n \n import java.io.InputStream;\n import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n+import java.util.stream.Collectors;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.RoleTO;\n@@ -55,29 +54,27 @@ public static List<RoleTO> list() {\n         return getService(RoleService.class).list();\n     }\n \n-    public static String readConsoleLayoutInfo(final String roleKey) {\n+    public static String readAnyLayout(final String roleKey) {\n         try {\n             return IOUtils.toString(InputStream.class.cast(\n-                    getService(RoleService.class).getConsoleLayoutInfo(roleKey).getEntity()),\n+                    getService(RoleService.class).getAnyLayout(roleKey).getEntity()),\n                     StandardCharsets.UTF_8);\n         } catch (Exception e) {\n             LOG.error(\"Error retrieving console layout info for role {}\", roleKey, e);\n             return StringUtils.EMPTY;\n         }\n     }\n \n-    public static void setConsoleLayoutInfo(final String roleKey, final String content) {\n-        getService(RoleService.class).setConsoleLayoutInfo(\n+    public static void setAnyLayout(final String roleKey, final String content) {\n+        getService(RoleService.class).setAnyLayout(\n                 roleKey, IOUtils.toInputStream(content, StandardCharsets.UTF_8));\n     }\n \n-    public static void removeConsoleLayoutInfo(final String roleKey) {\n-        getService(RoleService.class).removeConsoleLayoutInfo(roleKey);\n+    public static void removeAnyLayout(final String roleKey) {\n+        getService(RoleService.class).removeAnyLayout(roleKey);\n     }\n \n     public static List<String> getAllAvailableEntitlements() {\n-        List<String> entitlements = new ArrayList<>(getSyncopeService().platform().getEntitlements());\n-        Collections.sort(entitlements);\n-        return entitlements;\n+        return getSyncopeService().platform().getEntitlements().stream().sorted().collect(Collectors.toList());\n     }\n }"},{"sha":"8514a3449b2c790c3885f8133a190f55ab957238","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/ExecutionsDirectoryPanel.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -95,9 +95,10 @@ protected void resultTableCustomChanges(final AjaxDataTablePanel.Builder<ExecTO,\n     protected List<IColumn<ExecTO, String>> getColumns() {\n         final List<IColumn<ExecTO, String>> columns = new ArrayList<>();\n \n-        columns.add(new KeyPropertyColumn<>(new StringResourceModel(\"key\", this), \"key\", \"key\"));\n-        columns.add(new PropertyColumn<>(new StringResourceModel(\"executor\", this), \"executor\", \"executor\"));\n-        \n+        columns.add(new KeyPropertyColumn<>(\n+                new StringResourceModel(Constants.KEY_FIELD_NAME, this),\n+                Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME));\n+\n         columns.add(new DatePropertyColumn<>(new StringResourceModel(\"start\", this), \"start\", \"start\"));\n \n         columns.add(new DatePropertyColumn<>(new StringResourceModel(\"end\", this), \"end\", \"end\"));"},{"sha":"a9775e342ebf08fe3eccbe20f881de1b109b472b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/NotificationTaskDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FNotificationTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FNotificationTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FNotificationTaskDirectoryPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -82,7 +82,7 @@ protected List<IColumn<NotificationTaskTO, String>> getColumns() {\n         final List<IColumn<NotificationTaskTO, String>> columns = new ArrayList<>();\n \n         columns.add(new KeyPropertyColumn<>(\n-                new StringResourceModel(\"key\", this), \"key\"));\n+                new StringResourceModel(Constants.KEY_FIELD_NAME, this), Constants.KEY_FIELD_NAME));\n \n         columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"sender\", this), \"sender\", \"sender\"));"},{"sha":"71cd42cd2720826f7da0befa58e30a411ede80b4","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/PropagationTaskDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTaskDirectoryPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -72,7 +72,7 @@ protected List<IColumn<PropagationTaskTO, String>> getColumns() {\n         final List<IColumn<PropagationTaskTO, String>> columns = new ArrayList<>();\n \n         columns.add(new KeyPropertyColumn<>(\n-                new StringResourceModel(\"key\", this), \"key\"));\n+                new StringResourceModel(Constants.KEY_FIELD_NAME, this), Constants.KEY_FIELD_NAME));\n \n         columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"operation\", this), \"operation\", \"operation\"));"},{"sha":"6b6fd0c389409824840ed50f0ce6f56bed369147","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/ProvisioningTaskDirectoryPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.console.panels.MultilevelPanel;\n import org.apache.syncope.client.console.rest.TaskRestClient;\n import org.apache.syncope.client.console.wicket.ajax.IndicatorAjaxTimerBehavior;\n@@ -102,7 +103,7 @@ protected List<IColumn<T, String>> getFieldColumns() {\n         List<IColumn<T, String>> columns = new ArrayList<>();\n \n         columns.add(new KeyPropertyColumn<>(\n-                new StringResourceModel(\"key\", this), \"key\"));\n+                new StringResourceModel(Constants.KEY_FIELD_NAME, this), Constants.KEY_FIELD_NAME));\n \n         columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"name\", this), \"name\", \"name\"));"},{"sha":"5c4f0c4fefd92b4f328f2a49c98417ddb82cdd28","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -132,7 +132,7 @@ protected List<IColumn<T, String>> getFieldColumns() {\n         final List<IColumn<T, String>> columns = new ArrayList<>();\n \n         columns.add(new KeyPropertyColumn<>(\n-                new StringResourceModel(\"key\", this), \"key\"));\n+                new StringResourceModel(Constants.KEY_FIELD_NAME, this), Constants.KEY_FIELD_NAME));\n \n         columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"name\", this), \"name\", \"name\"));"},{"sha":"2c941797d3cb4e730ca8ca12cc928c7a6bda34ec","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/TaskDirectoryPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskDirectoryPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -25,6 +25,7 @@\n import org.apache.syncope.client.console.panels.MultilevelPanel;\n import org.apache.syncope.client.console.rest.TaskRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.panels.ModalPanel;\n import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -74,7 +75,7 @@ protected void resultTableCustomChanges(final AjaxDataTablePanel.Builder<T, Stri\n         public TasksProvider(final int paginatorRows, final TaskType id) {\n             super(paginatorRows);\n \n-            setSort(\"key\", SortOrder.ASCENDING);\n+            setSort(Constants.KEY_FIELD_NAME, SortOrder.ASCENDING);\n             this.id = id;\n         }\n "},{"sha":"3f11ced66a6f0d388eab52582ee6f47080d69e4c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/ReconDetailsModalPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconDetailsModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconDetailsModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconDetailsModalPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -110,7 +110,7 @@ protected Collection<ActionLink.ActionType> getBatches() {\n         protected List<IColumn<Misaligned, String>> getColumns() {\n             List<IColumn<Misaligned, String>> columns = new ArrayList<>();\n \n-            columns.add(new PropertyColumn<>(new ResourceModel(\"key\"), \"name\", \"name\"));\n+            columns.add(new PropertyColumn<>(new ResourceModel(Constants.KEY_FIELD_NAME), \"name\", \"name\"));\n \n             columns.add(new AbstractColumn<Misaligned, String>(Model.of(Constants.SYNCOPE)) {\n "},{"sha":"7387fba1026b1844fe26958b44e7b64550bf292d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/ReconciliationWidget.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -356,7 +356,7 @@ protected Collection<ActionLink.ActionType> getBatches() {\n         protected List<IColumn<Any, String>> getColumns() {\n             List<IColumn<Any, String>> columns = new ArrayList<>();\n \n-            columns.add(new AbstractColumn<Any, String>(new ResourceModel(\"reference\"), \"key\") {\n+            columns.add(new AbstractColumn<Any, String>(new ResourceModel(\"reference\"), Constants.KEY_FIELD_NAME) {\n \n                 private static final long serialVersionUID = -1822504503325964706L;\n \n@@ -452,7 +452,7 @@ protected static final class AnysReconciliationProvider extends DirectoryDataPro\n         private AnysReconciliationProvider(final Anys anys) {\n             super(ROWS);\n             this.anys = anys;\n-            setSort(\"key\", SortOrder.ASCENDING);\n+            setSort(Constants.KEY_FIELD_NAME, SortOrder.ASCENDING);\n             comparator = new SortableDataProviderComparator<>(this);\n         }\n "},{"sha":"a945c3adc7cd1451677199b29b7079d6f0921d13","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/reconciliation/ReconciliationReportParser.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2Freconciliation%2FReconciliationReportParser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2Freconciliation%2FReconciliationReportParser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2Freconciliation%2FReconciliationReportParser.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -28,6 +28,7 @@\n import javax.xml.stream.XMLInputFactory;\n import javax.xml.stream.XMLStreamException;\n import javax.xml.stream.XMLStreamReader;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n public final class ReconciliationReportParser {\n@@ -68,7 +69,7 @@ public static ReconciliationReport parse(final Date run, final InputStream in) t\n                     case \"user\":\n                         user = new Any();\n                         user.setType(AnyTypeKind.USER.name());\n-                        user.setKey(streamReader.getAttributeValue(\"\", \"key\"));\n+                        user.setKey(streamReader.getAttributeValue(\"\", Constants.KEY_FIELD_NAME));\n                         user.setName(streamReader.getAttributeValue(\"\", \"username\"));\n                         report.getUsers().getAnys().add(user);\n                         break;\n@@ -82,7 +83,7 @@ public static ReconciliationReport parse(final Date run, final InputStream in) t\n                     case \"group\":\n                         group = new Any();\n                         group.setType(AnyTypeKind.GROUP.name());\n-                        group.setKey(streamReader.getAttributeValue(\"\", \"key\"));\n+                        group.setKey(streamReader.getAttributeValue(\"\", Constants.KEY_FIELD_NAME));\n                         group.setName(streamReader.getAttributeValue(\"\", \"groupName\"));\n                         report.getGroups().getAnys().add(group);\n                         break;\n@@ -98,7 +99,7 @@ public static ReconciliationReport parse(final Date run, final InputStream in) t\n                     case \"anyObject\":\n                         anyObject = new Any();\n                         anyObject.setType(lastAnyType);\n-                        anyObject.setKey(streamReader.getAttributeValue(\"\", \"key\"));\n+                        anyObject.setKey(streamReader.getAttributeValue(\"\", Constants.KEY_FIELD_NAME));\n                         final String anyType = lastAnyType;\n                         Optional<Anys> anyReport = report.getAnyObjects().stream().\n                                 filter(anys -> anyType.equals(anys.getAnyType()))."},{"sha":"96d479246778b6b2f63b9b22f0e9b130fccef3c8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -30,6 +30,7 @@\n import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.rest.GroupRestClient;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.ui.commons.wizards.any.AbstractGroups;\n import org.apache.syncope.client.ui.commons.wizards.any.AbstractGroupsModel;\n@@ -63,12 +64,12 @@ public class Groups extends AbstractGroups {\n \n     private final List<DynRealmTO> allDynRealms = new ArrayList<>();\n \n+    private final boolean templateMode;\n+\n     protected WebMarkupContainer dyngroupsContainer;\n \n     protected WebMarkupContainer dynrealmsContainer;\n \n-    private boolean templateMode;\n-\n     public <T extends AnyTO> Groups(final AnyWrapper<T> modelObject, final boolean templateMode) {\n         super(modelObject);\n         this.templateMode = templateMode;\n@@ -242,8 +243,8 @@ protected void reloadMemberships() {\n             GroupFiqlSearchConditionBuilder searchConditionBuilder = SyncopeClient.getGroupSearchConditionBuilder();\n \n             List<CompleteCondition> conditions = GroupableRelatableTO.class.cast(anyTO).getMemberships().\n-                    stream().map(membership\n-                            -> searchConditionBuilder.is(\"key\").equalTo(membership.getGroupKey()).wrap()).\n+                    stream().map(membership -> searchConditionBuilder.is(Constants.KEY_FIELD_NAME).\n+                    equalTo(membership.getGroupKey()).wrap()).\n                     collect(Collectors.toList());\n \n             Map<String, GroupTO> assignedGroups = new HashMap<>();\n@@ -285,8 +286,8 @@ protected void reloadDynMemberships() {\n             GroupFiqlSearchConditionBuilder searchConditionBuilder = SyncopeClient.getGroupSearchConditionBuilder();\n \n             List<CompleteCondition> conditions = GroupableRelatableTO.class.cast(anyTO).getDynMemberships().\n-                    stream().map(membership\n-                            -> searchConditionBuilder.is(\"key\").equalTo(membership.getGroupKey()).wrap()).\n+                    stream().map(membership -> searchConditionBuilder.is(Constants.KEY_FIELD_NAME).\n+                    equalTo(membership.getGroupKey()).wrap()).\n                     collect(Collectors.toList());\n \n             dynMemberships = new ArrayList<>();"},{"sha":"8ec3b29937fc5588fe6356f44304299f55db4d2f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -346,7 +346,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                                 anyType.getKey(),\n                                 pageRef).\n                                 setFiql(SyncopeClient.getAnyObjectSearchConditionBuilder(anyType.getKey()).\n-                                        is(\"key\").notNullValue().query()).\n+                                        is(Constants.KEY_FIELD_NAME).notNullValue().query()).\n                                 setWizardInModal(true).build(\"searchResultPanel\");\n                         fragment.add(anyObjectDirectoryPanel.setRenderBodyOnly(true));\n                     }"},{"sha":"3084490fe37d150a9d5b4a50e1f75670ad204784","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/role/RoleWizardBuilder.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Frole%2FRoleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Frole%2FRoleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Frole%2FRoleWizardBuilder.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.client.console.rest.DynRealmRestClient;\n import org.apache.syncope.client.console.rest.RealmRestClient;\n import org.apache.syncope.client.console.rest.RoleRestClient;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.wicket.markup.html.bootstrap.tabs.Accordion;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.console.wizards.BaseAjaxWizardBuilder;\n@@ -104,7 +105,9 @@ public static class Details extends WizardStep {\n \n         public Details(final RoleWrapper modelObject) {\n             add(new AjaxTextFieldPanel(\n-                    \"key\", \"key\", new PropertyModel<>(modelObject.getInnerObject(), \"key\"), false).\n+                    Constants.KEY_FIELD_NAME,\n+                    Constants.KEY_FIELD_NAME,\n+                    new PropertyModel<>(modelObject.getInnerObject(), Constants.KEY_FIELD_NAME), false).\n                     setEnabled(StringUtils.isEmpty(modelObject.getInnerObject().getKey())));\n \n             // ------------------------\n@@ -194,5 +197,4 @@ public Privileges(final RoleTO modelObject) {\n                     hideLabel().setOutputMarkupId(true));\n         }\n     }\n-\n }"},{"sha":"4b18d5a5013b0872561761b7a0e8286c0c7e368d","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/JsonDiffPanel.html","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FJsonDiffPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FJsonDiffPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FJsonDiffPanel.html?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -60,9 +60,9 @@\n   </wicket:head>\n   <wicket:panel>\n     <div style=\"padding: 1%;\">\n-      <textarea wicket:id=\"jsonEditorInfo1\" id=\"consoleLayoutInfo\" name=\"jsonEditorInfo1\" style=\"display: none;\">\n+      <textarea wicket:id=\"jsonEditorInfo1\" id=\"jsonEditorInfo1\" name=\"jsonEditorInfo1\" style=\"display: none;\">\n       </textarea>\n-      <textarea wicket:id=\"jsonEditorInfo2\" id=\"consoleLayoutInfo\" name=\"jsonEditorInfo2\" style=\"display: none;\">\n+      <textarea wicket:id=\"jsonEditorInfo2\" id=\"jsonEditorInfo2\" name=\"jsonEditorInfo2\" style=\"display: none;\">\n       </textarea> \n       <div class=\"w_content_3\" id=\"jsonDiffEditorInfoDefForm\">\n "},{"sha":"718fd0ad831ec3cf09565cb4a5b3048daa9e749d","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/JsonEditorPanel.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FJsonEditorPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FJsonEditorPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FJsonEditorPanel.html?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -60,7 +60,7 @@\n   <wicket:panel>\n     <div style=\"padding: 1%;\">\n       <div class=\"w_content_3\" id=\"jsonEditorInfoDefForm\">\n-        <textarea wicket:id=\"jsonEditorInfo\" id=\"consoleLayoutInfo\" name=\"jsonEditorInfo\" style=\"width: 100%; height: 550px;\">\n+        <textarea wicket:id=\"jsonEditorInfo\" id=\"jsonEditorInfo\" name=\"jsonEditorInfo\" style=\"width: 100%; height: 550px;\">\n         </textarea>\n       </div>\n     </div>"},{"sha":"d0e8224216f78b63678cbb352b221d87b17b1d83","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/XMLEditorPanel.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FXMLEditorPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FXMLEditorPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FXMLEditorPanel.html?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -46,7 +46,7 @@\n   <wicket:panel>\n     <div style=\"padding: 1%;\">\n       <div class=\"w_content_3\" id=\"xmlEditorInfoDefForm\">\n-        <textarea wicket:id=\"xmlEditorInfo\" id=\"consoleLayoutInfo\" name=\"xmlEditorInfo\" style=\"width: 100%; height: 350px;\">\n+        <textarea wicket:id=\"xmlEditorInfo\" id=\"xmlEditorInfo\" name=\"xmlEditorInfo\" style=\"width: 100%; height: 350px;\">\n         </textarea>\n       </div>\n     </div>"},{"sha":"49299014713662d298a43b5d86f246e4ba035fa6","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/layout/AnyLayoutUtils.java","status":"renamed","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Flayout%2FAnyLayoutUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Flayout%2FAnyLayoutUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Flayout%2FAnyLayoutUtils.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -34,7 +34,7 @@\n /**\n  * Utility methods for dealing with form layout information.\n  */\n-public final class FormLayoutInfoUtils {\n+public final class AnyLayoutUtils {\n \n     private static final ObjectMapper MAPPER;\n \n@@ -88,28 +88,29 @@ public static String defaultConsoleLayoutInfoIfEmpty(final String content, final\n         return result;\n     }\n \n-    public static ModalPanelBuilder<AnyWrapper<UserTO>> instantiate(\n+    public static ModalPanelBuilder<AnyWrapper<UserTO>> newUserWizardBuilder(\n             final UserTO userTO,\n             final List<String> anyTypeClasses,\n-            final UserFormLayoutInfo anyFormLayout,\n+            final UserFormLayoutInfo userFormLayoutInfo,\n             final PageReference pageRef) {\n \n         try {\n-            return anyFormLayout.getFormClass().getConstructor(\n+            return userFormLayoutInfo.getFormClass().getConstructor(\n                     userTO.getClass(), // previous\n                     userTO.getClass(), // actual\n                     List.class,\n-                    anyFormLayout.getClass(),\n+                    userFormLayoutInfo.getClass(),\n                     pageRef.getClass()).\n-                    newInstance(null, userTO, anyTypeClasses, anyFormLayout, pageRef);\n+                    newInstance(null, userTO, anyTypeClasses, userFormLayoutInfo, pageRef);\n \n         } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException\n                 | IllegalArgumentException | InvocationTargetException e) {\n-            throw new IllegalArgumentException(\"Could not instantiate \" + anyFormLayout.getFormClass().getName(), e);\n+            throw new IllegalArgumentException(\n+                    \"Could not instantiate \" + userFormLayoutInfo.getFormClass().getName(), e);\n         }\n     }\n \n-    private FormLayoutInfoUtils() {\n+    private AnyLayoutUtils() {\n         // private constructor for static utility class\n     }\n }","previous_filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/layout/FormLayoutInfoUtils.java"},{"sha":"ea4c219b41a7a4ee1a6d921c2f1389c003c7fac8","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/pages/Self.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSelf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSelf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSelf.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -21,7 +21,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.SyncopeWebApplication;\n-import org.apache.syncope.client.enduser.layout.FormLayoutInfoUtils;\n+import org.apache.syncope.client.enduser.layout.AnyLayoutUtils;\n import org.apache.syncope.client.enduser.layout.UserFormLayoutInfo;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n@@ -92,18 +92,18 @@ protected void onBeforeRender() {\n     }\n \n     protected final AjaxWizard<AnyWrapper<UserTO>> buildWizard(final UserTO userTO, final AjaxWizard.Mode mode) {\n-        final String formLayoutConfParam = confParamOps.get(\n+        String formLayoutConfParam = confParamOps.get(\n                 SyncopeEnduserSession.get().getDomain(),\n-                \"enduser.form.layout.info\",\n-                FormLayoutInfoUtils.getDefaultValue(),\n+                Constants.ENDUSER_ANYLAYOUT,\n+                AnyLayoutUtils.getDefaultValue(),\n                 String.class);\n \n-        final UserFormLayoutInfo formLayoutInfo =\n+        UserFormLayoutInfo formLayoutInfo =\n                 StringUtils.isBlank(formLayoutConfParam)\n                 ? new UserFormLayoutInfo()\n-                : FormLayoutInfoUtils.fromJsonString(formLayoutConfParam);\n+                : AnyLayoutUtils.fromJsonString(formLayoutConfParam);\n \n-        wizardBuilder = (AjaxWizardBuilder<AnyWrapper<UserTO>>) FormLayoutInfoUtils.instantiate(\n+        wizardBuilder = (AjaxWizardBuilder<AnyWrapper<UserTO>>) AnyLayoutUtils.newUserWizardBuilder(\n                 userTO,\n                 SyncopeEnduserSession.get().getService(SyncopeService.class).platform().getUserClasses(),\n                 formLayoutInfo,"},{"sha":"6b3aea3c2d0c4e995808dfd6b754f287ca60bfc2","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/RoleRestClient.java","status":"modified","additions":8,"deletions":11,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FRoleRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FRoleRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FRoleRestClient.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -20,9 +20,8 @@\n \n import java.io.InputStream;\n import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n+import java.util.stream.Collectors;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.RoleTO;\n@@ -55,29 +54,27 @@ public static List<RoleTO> list() {\n         return getService(RoleService.class).list();\n     }\n \n-    public static String readConsoleLayoutInfo(final String roleKey) {\n+    public static String readAnyLayout(final String roleKey) {\n         try {\n             return IOUtils.toString(InputStream.class.cast(\n-                    getService(RoleService.class).getConsoleLayoutInfo(roleKey).getEntity()),\n+                    getService(RoleService.class).getAnyLayout(roleKey).getEntity()),\n                     StandardCharsets.UTF_8);\n         } catch (Exception e) {\n             LOG.error(\"Error retrieving console layout info for role {}\", roleKey, e);\n             return StringUtils.EMPTY;\n         }\n     }\n \n-    public static void setConsoleLayoutInfo(final String roleKey, final String content) {\n-        getService(RoleService.class).setConsoleLayoutInfo(\n+    public static void setAnyLayout(final String roleKey, final String content) {\n+        getService(RoleService.class).setAnyLayout(\n                 roleKey, IOUtils.toInputStream(content, StandardCharsets.UTF_8));\n     }\n \n-    public static void removeConsoleLayoutInfo(final String roleKey) {\n-        getService(RoleService.class).removeConsoleLayoutInfo(roleKey);\n+    public static void removeAnyLayout(final String roleKey) {\n+        getService(RoleService.class).removeAnyLayout(roleKey);\n     }\n \n     public static List<String> getAllAvailableEntitlements() {\n-        List<String> entitlements = new ArrayList<>(getSyncopeService().platform().getEntitlements());\n-        Collections.sort(entitlements);\n-        return entitlements;\n+        return getSyncopeService().platform().getEntitlements().stream().sorted().collect(Collectors.toList());\n     }\n }"},{"sha":"e6d34140beaf2081c7e16a471d0a1d7eb268f0e3","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/SpecialAttr.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -82,5 +82,4 @@ public String toString() {\n     public static Optional<SpecialAttr> fromString(final String value) {\n         return Arrays.stream(values()).filter(specialAttr -> specialAttr.literal.equals(value)).findFirst();\n     }\n-\n }"},{"sha":"5b4002c43b6e2b425dcb1fc800254ce26c5d8ba2","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -128,23 +128,23 @@ public interface RoleService extends JAXRSService {\n      * @return console layout information as JSON string for the role with the given key, if available\n      */\n     @GET\n-    @Path(\"{key}/consoleLayout\")\n+    @Path(\"{key}/anyLayout\")\n     @Produces({ MediaType.APPLICATION_JSON })\n-    Response getConsoleLayoutInfo(@NotNull @PathParam(\"key\") String key);\n+    Response getAnyLayout(@NotNull @PathParam(\"key\") String key);\n \n     /**\n      * Sets the console layout information as JSON string for the role with the given key, if available.\n      *\n      * @param key role key\n-     * @param consoleLayoutInfoIn console layout information to be set\n+     * @param anyLayoutIn console layout information to be set\n      */\n     @ApiResponses(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n-    @Path(\"{key}/consoleLayout\")\n+    @Path(\"{key}/anyLayout\")\n     @Consumes({ MediaType.APPLICATION_JSON })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void setConsoleLayoutInfo(@NotNull @PathParam(\"key\") String key, InputStream consoleLayoutInfoIn);\n+    void setAnyLayout(@NotNull @PathParam(\"key\") String key, InputStream anyLayoutIn);\n \n     /**\n      * Removes the console layout information for the role with the given key, if available.\n@@ -154,7 +154,7 @@ public interface RoleService extends JAXRSService {\n     @ApiResponses(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n-    @Path(\"{key}/consoleLayout\")\n+    @Path(\"{key}/anyLayout\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void removeConsoleLayoutInfo(@NotNull @PathParam(\"key\") String key);\n+    void removeAnyLayout(@NotNull @PathParam(\"key\") String key);\n }"},{"sha":"4a55cde745931ab365f6b83cf6765d1aadb5bfcb","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -37,7 +37,7 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.provisioning.api.data.RealmDataBinder;\n@@ -166,9 +166,9 @@ public ProvisioningResult<RealmTO> delete(final String fullPath) {\n         }\n \n         Set<String> adminRealms = Set.of(realm.getFullPath());\n-        AnyCond keyCond = new AnyCond(AttributeCond.Type.ISNOTNULL);\n+        AnyCond keyCond = new AnyCond(AttrCond.Type.ISNOTNULL);\n         keyCond.setSchema(\"key\");\n-        SearchCond allMatchingCond = SearchCond.getLeafCond(keyCond);\n+        SearchCond allMatchingCond = SearchCond.getLeaf(keyCond);\n         int users = searchDAO.count(adminRealms, allMatchingCond, AnyTypeKind.USER);\n         int groups = searchDAO.count(adminRealms, allMatchingCond, AnyTypeKind.GROUP);\n         int anyObjects = searchDAO.count(adminRealms, allMatchingCond, AnyTypeKind.ANY_OBJECT);"},{"sha":"3576a150df3477446f9bbbae488e765f7cbf2966","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RoleLogic.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -93,15 +93,15 @@ public RoleTO delete(final String key) {\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    public String getConsoleLayoutInfo(final String key) {\n+    public String getAnyLayout(final String key) {\n         Role role = roleDAO.find(key);\n         if (role == null) {\n             LOG.error(\"Could not find role '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n \n-        String consoleLayout = role.getConsoleLayoutInfo();\n+        String consoleLayout = role.getAnyLayout();\n         if (StringUtils.isBlank(consoleLayout)) {\n             LOG.error(\"Could not find console layout for Role '\" + key + '\\'');\n \n@@ -112,15 +112,15 @@ public String getConsoleLayoutInfo(final String key) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ROLE_UPDATE + \"')\")\n-    public void setConsoleLayoutInfo(final String key, final String consoleLayout) {\n+    public void setAnyLayout(final String key, final String consoleLayout) {\n         Role role = roleDAO.find(key);\n         if (role == null) {\n             LOG.error(\"Could not find role '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n \n-        role.setConsoleLayoutInfo(consoleLayout);\n+        role.setAnyLayout(consoleLayout);\n         roleDAO.save(role);\n     }\n "},{"sha":"d2ef20b8ca5db5c366e3a95b58a6210859260ecb","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -72,7 +72,7 @@\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n@@ -444,7 +444,7 @@ public Pair<Integer, List<GroupTO>> searchAssignableGroups(\n \n         SearchCond searchCond;\n         if (StringUtils.isNotBlank(term)) {\n-            AnyCond termCond = new AnyCond(AttributeCond.Type.ILIKE);\n+            AnyCond termCond = new AnyCond(AttrCond.Type.ILIKE);\n             termCond.setSchema(\"name\");\n \n             String termSearchableValue = (term.startsWith(\"*\") && !term.endsWith(\"*\"))\n@@ -455,11 +455,11 @@ public Pair<Integer, List<GroupTO>> searchAssignableGroups(\n                     ? term : '%' + term + '%');\n             termCond.setExpression(termSearchableValue);\n \n-            searchCond = SearchCond.getAndCond(\n-                    SearchCond.getLeafCond(assignableCond),\n-                    SearchCond.getLeafCond(termCond));\n+            searchCond = SearchCond.getAnd(\n+                    SearchCond.getLeaf(assignableCond),\n+                    SearchCond.getLeaf(termCond));\n         } else {\n-            searchCond = SearchCond.getLeafCond(assignableCond);\n+            searchCond = SearchCond.getLeaf(assignableCond);\n         }\n \n         int count = searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, searchCond, AnyTypeKind.GROUP);"},{"sha":"7fe01c3e13d54fa481f9defeb0c58755bd6035f2","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -48,6 +48,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n abstract class AbstractServiceImpl implements JAXRSService {\n \n@@ -64,6 +65,9 @@ abstract class AbstractServiceImpl implements JAXRSService {\n     @Context\n     protected SearchContext searchContext;\n \n+    @Autowired\n+    protected SearchCondVisitor searchCondVisitor;\n+\n     protected String getActualKey(final AnyDAO<?> dao, final String pretendingKey) {\n         String actualKey = pretendingKey;\n         if (!SyncopeConstants.UUID_PATTERN.matcher(pretendingKey).matches()) {\n@@ -161,12 +165,11 @@ protected void checkETag(final String etag) {\n \n     protected SearchCond getSearchCond(final String fiql, final String realm) {\n         try {\n-            SearchCondVisitor visitor = new SearchCondVisitor();\n-            visitor.setRealm(realm);\n+            searchCondVisitor.setRealm(realm);\n             SearchCondition<SearchBean> sc = searchContext.getCondition(fiql, SearchBean.class);\n-            sc.accept(visitor);\n+            sc.accept(searchCondVisitor);\n \n-            return visitor.getQuery();\n+            return searchCondVisitor.getQuery();\n         } catch (Exception e) {\n             LOG.error(\"Invalid FIQL expression: {}\", fiql, e);\n "},{"sha":"961ba63cc8c3167355ebee02e235bfbc151daf79","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RoleServiceImpl.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRoleServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRoleServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRoleServiceImpl.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -71,8 +71,8 @@ public void delete(final String key) {\n     }\n \n     @Override\n-    public Response getConsoleLayoutInfo(final String key) {\n-        String template = logic.getConsoleLayoutInfo(key);\n+    public Response getAnyLayout(final String key) {\n+        String template = logic.getAnyLayout(key);\n         StreamingOutput sout = (os) -> os.write(template.getBytes());\n \n         return Response.ok(sout).\n@@ -81,18 +81,17 @@ public Response getConsoleLayoutInfo(final String key) {\n     }\n \n     @Override\n-    public void setConsoleLayoutInfo(final String key, final InputStream consoleLayoutIn) {\n+    public void setAnyLayout(final String key, final InputStream anyLayoutIn) {\n         try {\n-            logic.setConsoleLayoutInfo(key, IOUtils.toString(consoleLayoutIn, StandardCharsets.UTF_8.name()));\n+            logic.setAnyLayout(key, IOUtils.toString(anyLayoutIn, StandardCharsets.UTF_8.name()));\n         } catch (final IOException e) {\n             LOG.error(\"While setting console layout info for role {}\", key, e);\n             throw new InternalServerErrorException(\"Could not read entity\", e);\n         }\n     }\n \n     @Override\n-    public void removeConsoleLayoutInfo(final String key) {\n-        logic.setConsoleLayoutInfo(key, null);\n+    public void removeAnyLayout(final String key) {\n+        logic.setAnyLayout(key, null);\n     }\n-\n }"},{"sha":"c7200eb273e22e2fab6f10f3299ce802f17e9b98","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AnyCond.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAnyCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAnyCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAnyCond.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -23,7 +23,7 @@\n /**\n  * Search condition to be applied when comparing bean field values.\n  */\n-public class AnyCond extends AttributeCond {\n+public class AnyCond extends AttrCond {\n \n     private static final long serialVersionUID = -1880319220462653955L;\n "},{"sha":"73d8a1f3c2d02a8a5361ca225878617324d5661b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AttrCond.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAttrCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAttrCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAttrCond.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -25,7 +25,7 @@\n /**\n  * Search condition to be applied when comparing attribute values.\n  */\n-public class AttributeCond extends AbstractSearchCond {\n+public class AttrCond extends AbstractSearchCond {\n \n     private static final long serialVersionUID = 3275277728404021417L;\n \n@@ -50,11 +50,11 @@ public enum Type {\n \n     private String expression;\n \n-    public AttributeCond() {\n+    public AttrCond() {\n         super();\n     }\n \n-    public AttributeCond(final Type conditionType) {\n+    public AttrCond(final Type conditionType) {\n         super();\n         this.type = conditionType;\n     }\n@@ -108,7 +108,7 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        final AttributeCond other = (AttributeCond) obj;\n+        final AttrCond other = (AttrCond) obj;\n         return new EqualsBuilder().\n                 append(type, other.type).\n                 append(schema, other.schema).","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AttributeCond.java"},{"sha":"8d7730156c66dd1f1744d9023a3f80eed90a62f1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/SearchCond.java","status":"modified","additions":61,"deletions":298,"changes":359,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.api.dao.search;\n \n import java.util.List;\n+import java.util.Optional;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.commons.lang3.builder.ToStringBuilder;\n@@ -38,232 +39,78 @@ public enum Type {\n \n     private Type type;\n \n-    private AnyTypeCond anyTypeCond;\n+    private AbstractSearchCond leaf;\n \n-    private AnyCond anyCond;\n+    private SearchCond left;\n \n-    private AttributeCond attributeCond;\n+    private SearchCond right;\n \n-    private RelationshipCond relationshipCond;\n-\n-    private RelationshipTypeCond relationshipTypeCond;\n-\n-    private MembershipCond membershipCond;\n-\n-    private RoleCond roleCond;\n-\n-    private PrivilegeCond privilegeCond;\n-\n-    private DynRealmCond dynRealmCond;\n-\n-    private ResourceCond resourceCond;\n-\n-    private AssignableCond assignableCond;\n-\n-    private MemberCond memberCond;\n-\n-    private SearchCond leftSearchCond;\n-\n-    private SearchCond rightSearchCond;\n-\n-    public static SearchCond getLeafCond(final AnyTypeCond anyTypeCond) {\n-        SearchCond nodeCond = new SearchCond();\n-\n-        nodeCond.type = Type.LEAF;\n-        nodeCond.anyTypeCond = anyTypeCond;\n-\n-        return nodeCond;\n-    }\n-\n-    public static SearchCond getLeafCond(final AttributeCond attributeCond) {\n-        SearchCond nodeCond = new SearchCond();\n-\n-        nodeCond.type = Type.LEAF;\n-        if (attributeCond instanceof AnyCond) {\n-            nodeCond.anyCond = (AnyCond) attributeCond;\n+    public static SearchCond getLeaf(final AbstractSearchCond leaf) {\n+        SearchCond cond;\n+        if (leaf instanceof SearchCond) {\n+            cond = (SearchCond) leaf;\n         } else {\n-            nodeCond.attributeCond = attributeCond;\n+            cond = new SearchCond();\n+            cond.leaf = leaf;\n         }\n \n-        return nodeCond;\n-    }\n-\n-    public static SearchCond getLeafCond(final RelationshipCond relationshipCond) {\n-        SearchCond nodeCond = new SearchCond();\n-\n-        nodeCond.type = Type.LEAF;\n-        nodeCond.relationshipCond = relationshipCond;\n-\n-        return nodeCond;\n-    }\n-\n-    public static SearchCond getLeafCond(final RelationshipTypeCond relationshipTypeCond) {\n-        SearchCond nodeCond = new SearchCond();\n-\n-        nodeCond.type = Type.LEAF;\n-        nodeCond.relationshipTypeCond = relationshipTypeCond;\n-\n-        return nodeCond;\n-    }\n-\n-    public static SearchCond getLeafCond(final MembershipCond membershipCond) {\n-        SearchCond nodeCond = new SearchCond();\n-\n-        nodeCond.type = Type.LEAF;\n-        nodeCond.membershipCond = membershipCond;\n-\n-        return nodeCond;\n-    }\n-\n-    public static SearchCond getLeafCond(final RoleCond roleCond) {\n-        SearchCond nodeCond = new SearchCond();\n-\n-        nodeCond.type = Type.LEAF;\n-        nodeCond.roleCond = roleCond;\n-\n-        return nodeCond;\n-    }\n-\n-    public static SearchCond getLeafCond(final PrivilegeCond privilegeCond) {\n-        SearchCond nodeCond = new SearchCond();\n-\n-        nodeCond.type = Type.LEAF;\n-        nodeCond.privilegeCond = privilegeCond;\n-\n-        return nodeCond;\n-    }\n-\n-    public static SearchCond getLeafCond(final DynRealmCond dynRealmCond) {\n-        SearchCond nodeCond = new SearchCond();\n-\n-        nodeCond.type = Type.LEAF;\n-        nodeCond.dynRealmCond = dynRealmCond;\n-\n-        return nodeCond;\n-    }\n-\n-    public static SearchCond getLeafCond(final ResourceCond resourceCond) {\n-        SearchCond nodeCond = new SearchCond();\n-\n-        nodeCond.type = Type.LEAF;\n-        nodeCond.resourceCond = resourceCond;\n+        cond.type = Type.LEAF;\n \n-        return nodeCond;\n+        return cond;\n     }\n \n-    public static SearchCond getLeafCond(final AssignableCond assignableCond) {\n-        SearchCond nodeCond = new SearchCond();\n+    public static SearchCond getNotLeaf(final AbstractSearchCond leaf) {\n+        SearchCond cond = getLeaf(leaf);\n \n-        nodeCond.type = Type.LEAF;\n-        nodeCond.assignableCond = assignableCond;\n+        cond.type = Type.NOT_LEAF;\n \n-        return nodeCond;\n+        return cond;\n     }\n \n-    public static SearchCond getLeafCond(final MemberCond memberCond) {\n-        SearchCond nodeCond = new SearchCond();\n+    public static SearchCond getAnd(final SearchCond left, final SearchCond right) {\n+        SearchCond cond = new SearchCond();\n \n-        nodeCond.type = Type.LEAF;\n-        nodeCond.memberCond = memberCond;\n+        cond.type = Type.AND;\n+        cond.left = left;\n+        cond.right = right;\n \n-        return nodeCond;\n+        return cond;\n     }\n \n-    public static SearchCond getNotLeafCond(final AttributeCond attributeCond) {\n-        SearchCond nodeCond = getLeafCond(attributeCond);\n-        nodeCond.type = Type.NOT_LEAF;\n-        return nodeCond;\n-    }\n-\n-    public static SearchCond getNotLeafCond(final RelationshipCond relationshipCond) {\n-        SearchCond nodeCond = getLeafCond(relationshipCond);\n-        nodeCond.type = Type.NOT_LEAF;\n-        return nodeCond;\n-    }\n-\n-    public static SearchCond getNotLeafCond(final MembershipCond membershipCond) {\n-        SearchCond nodeCond = getLeafCond(membershipCond);\n-        nodeCond.type = Type.NOT_LEAF;\n-        return nodeCond;\n-    }\n-\n-    public static SearchCond getNotLeafCond(final RoleCond roleCond) {\n-        SearchCond nodeCond = getLeafCond(roleCond);\n-        nodeCond.type = Type.NOT_LEAF;\n-        return nodeCond;\n-    }\n-\n-    public static SearchCond getNotLeafCond(final PrivilegeCond privilegeCond) {\n-        SearchCond nodeCond = getLeafCond(privilegeCond);\n-        nodeCond.type = Type.NOT_LEAF;\n-        return nodeCond;\n-    }\n-\n-    public static SearchCond getNotLeafCond(final ResourceCond resourceCond) {\n-        SearchCond nodeCond = getLeafCond(resourceCond);\n-        nodeCond.type = Type.NOT_LEAF;\n-        return nodeCond;\n-    }\n-\n-    public static SearchCond getNotLeafCond(final MemberCond memberCond) {\n-        SearchCond nodeCond = getLeafCond(memberCond);\n-        nodeCond.type = Type.NOT_LEAF;\n-        return nodeCond;\n-    }\n-\n-    public static SearchCond getNotLeafCond(final SearchCond nodeCond) {\n-        nodeCond.type = Type.NOT_LEAF;\n-        return nodeCond;\n-    }\n-\n-    public static SearchCond getAndCond(final SearchCond leftCond, final SearchCond rightCond) {\n-        SearchCond nodeCond = new SearchCond();\n-\n-        nodeCond.type = Type.AND;\n-        nodeCond.leftSearchCond = leftCond;\n-        nodeCond.rightSearchCond = rightCond;\n-\n-        return nodeCond;\n-    }\n-\n-    public static SearchCond getAndCond(final List<SearchCond> conditions) {\n+    public static SearchCond getAnd(final List<SearchCond> conditions) {\n         if (conditions.size() == 1) {\n             return conditions.get(0);\n         } else if (conditions.size() > 2) {\n             SearchCond removed = conditions.remove(0);\n-            return getAndCond(removed, getAndCond(conditions));\n+            return getAnd(removed, getAnd(conditions));\n         } else {\n-            return getAndCond(conditions.get(0), conditions.get(1));\n+            return getAnd(conditions.get(0), conditions.get(1));\n         }\n     }\n \n-    public static SearchCond getOrCond(final SearchCond leftCond, final SearchCond rightCond) {\n-        SearchCond nodeCond = new SearchCond();\n+    public static SearchCond getOr(final SearchCond left, final SearchCond right) {\n+        SearchCond cond = new SearchCond();\n \n-        nodeCond.type = Type.OR;\n-        nodeCond.leftSearchCond = leftCond;\n-        nodeCond.rightSearchCond = rightCond;\n+        cond.type = Type.OR;\n+        cond.left = left;\n+        cond.right = right;\n \n-        return nodeCond;\n+        return cond;\n     }\n \n-    public static SearchCond getOrCond(final List<SearchCond> conditions) {\n+    public static SearchCond getOr(final List<SearchCond> conditions) {\n         if (conditions.size() == 1) {\n             return conditions.get(0);\n         } else if (conditions.size() > 2) {\n             SearchCond removed = conditions.remove(0);\n-            return getOrCond(removed, getOrCond(conditions));\n+            return getOr(removed, getOr(conditions));\n         } else {\n-            return getOrCond(conditions.get(0), conditions.get(1));\n+            return getOr(conditions.get(0), conditions.get(1));\n         }\n     }\n \n-    public AnyTypeCond getAnyTypeCond() {\n-        return anyTypeCond;\n-    }\n-\n-    public void setAnyTypeCond(final AnyTypeCond anyTypeCond) {\n-        this.anyTypeCond = anyTypeCond;\n+    public Optional<AnyTypeCond> getAnyTypeCond() {\n+        return Optional.ofNullable(leaf instanceof AnyTypeCond ? (AnyTypeCond) leaf : null);\n     }\n \n     /**\n@@ -281,18 +128,18 @@ public String hasAnyTypeCond() {\n         switch (type) {\n             case LEAF:\n             case NOT_LEAF:\n-                if (anyTypeCond != null) {\n-                    anyTypeName = anyTypeCond.getAnyTypeKey();\n+                if (leaf instanceof AnyTypeCond) {\n+                    anyTypeName = ((AnyTypeCond) leaf).getAnyTypeKey();\n                 }\n                 break;\n \n             case AND:\n             case OR:\n-                if (leftSearchCond != null) {\n-                    anyTypeName = leftSearchCond.hasAnyTypeCond();\n+                if (left != null) {\n+                    anyTypeName = left.hasAnyTypeCond();\n                 }\n-                if (anyTypeName == null && rightSearchCond != null) {\n-                    anyTypeName = rightSearchCond.hasAnyTypeCond();\n+                if (anyTypeName == null && right != null) {\n+                    anyTypeName = right.hasAnyTypeCond();\n                 }\n                 break;\n \n@@ -302,56 +149,17 @@ public String hasAnyTypeCond() {\n         return anyTypeName;\n     }\n \n-    public AnyCond getAnyCond() {\n-        return anyCond;\n-    }\n-\n-    public AttributeCond getAttributeCond() {\n-        return attributeCond;\n-    }\n-\n-    public RelationshipCond getRelationshipCond() {\n-        return relationshipCond;\n-    }\n-\n-    public RelationshipTypeCond getRelationshipTypeCond() {\n-        return relationshipTypeCond;\n-    }\n-\n-    public MembershipCond getMembershipCond() {\n-        return membershipCond;\n-    }\n-\n-    public RoleCond getRoleCond() {\n-        return roleCond;\n-    }\n-\n-    public PrivilegeCond getPrivilegeCond() {\n-        return privilegeCond;\n-    }\n-\n-    public DynRealmCond getDynRealmCond() {\n-        return dynRealmCond;\n-    }\n-\n-    public ResourceCond getResourceCond() {\n-        return resourceCond;\n-    }\n-\n-    public AssignableCond getAssignableCond() {\n-        return assignableCond;\n-    }\n-\n-    public MemberCond getMemberCond() {\n-        return memberCond;\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends AbstractSearchCond> Optional<T> getLeaf(final Class<T> clazz) {\n+        return Optional.ofNullable((T) (clazz.isInstance(leaf) ? leaf : null));\n     }\n \n-    public SearchCond getLeftSearchCond() {\n-        return leftSearchCond;\n+    public SearchCond getLeft() {\n+        return left;\n     }\n \n-    public SearchCond getRightSearchCond() {\n-        return rightSearchCond;\n+    public SearchCond getRight() {\n+        return right;\n     }\n \n     public Type getType() {\n@@ -369,25 +177,13 @@ public boolean isValid() {\n         switch (type) {\n             case LEAF:\n             case NOT_LEAF:\n-                isValid = (anyTypeCond != null || anyCond != null || attributeCond != null || dynRealmCond != null\n-                        || relationshipCond != null || relationshipTypeCond != null || membershipCond != null\n-                        || roleCond != null || privilegeCond != null || resourceCond != null\n-                        || assignableCond != null || memberCond != null)\n-                        && (anyTypeCond == null || anyTypeCond.isValid())\n-                        && (anyCond == null || anyCond.isValid())\n-                        && (attributeCond == null || attributeCond.isValid())\n-                        && (membershipCond == null || membershipCond.isValid())\n-                        && (roleCond == null || roleCond.isValid())\n-                        && (privilegeCond == null || privilegeCond.isValid())\n-                        && (resourceCond == null || resourceCond.isValid())\n-                        && (memberCond == null || memberCond.isValid());\n+                isValid = leaf != null && leaf.isValid();\n                 break;\n \n             case AND:\n             case OR:\n-                isValid = (leftSearchCond == null || rightSearchCond == null)\n-                        ? false\n-                        : leftSearchCond.isValid() && rightSearchCond.isValid();\n+                isValid = left != null && right != null\n+                        && left.isValid() && right.isValid();\n                 break;\n \n             default:\n@@ -400,20 +196,9 @@ public boolean isValid() {\n     public int hashCode() {\n         return new HashCodeBuilder().\n                 append(type).\n-                append(anyTypeCond).\n-                append(anyCond).\n-                append(attributeCond).\n-                append(relationshipCond).\n-                append(relationshipTypeCond).\n-                append(membershipCond).\n-                append(roleCond).\n-                append(privilegeCond).\n-                append(dynRealmCond).\n-                append(resourceCond).\n-                append(assignableCond).\n-                append(memberCond).\n-                append(leftSearchCond).\n-                append(rightSearchCond).\n+                append(leaf).\n+                append(left).\n+                append(right).\n                 build();\n     }\n \n@@ -431,41 +216,19 @@ public boolean equals(final Object obj) {\n         final SearchCond other = (SearchCond) obj;\n         return new EqualsBuilder().\n                 append(type, other.type).\n-                append(anyTypeCond, other.anyTypeCond).\n-                append(anyCond, other.anyCond).\n-                append(attributeCond, other.attributeCond).\n-                append(relationshipCond, other.relationshipCond).\n-                append(relationshipTypeCond, other.relationshipTypeCond).\n-                append(membershipCond, other.membershipCond).\n-                append(roleCond, other.roleCond).\n-                append(privilegeCond, other.privilegeCond).\n-                append(dynRealmCond, other.dynRealmCond).\n-                append(resourceCond, other.resourceCond).\n-                append(assignableCond, other.assignableCond).\n-                append(memberCond, other.memberCond).\n-                append(leftSearchCond, other.leftSearchCond).\n-                append(rightSearchCond, other.rightSearchCond).\n+                append(leaf, other.leaf).\n+                append(left, other.left).\n+                append(right, other.right).\n                 build();\n     }\n \n     @Override\n     public String toString() {\n         return new ToStringBuilder(this).\n                 append(type).\n-                append(anyTypeCond).\n-                append(anyCond).\n-                append(attributeCond).\n-                append(relationshipCond).\n-                append(relationshipTypeCond).\n-                append(membershipCond).\n-                append(roleCond).\n-                append(privilegeCond).\n-                append(dynRealmCond).\n-                append(resourceCond).\n-                append(assignableCond).\n-                append(memberCond).\n-                append(leftSearchCond).\n-                append(rightSearchCond).\n+                append(leaf).\n+                append(left).\n+                append(right).\n                 build();\n     }\n }"},{"sha":"20e1521b16406003a83e622d387a5f7f4a97357e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Role.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -38,9 +38,9 @@ public interface Role extends ProvidedKeyEntity {\n \n     void setDynMembership(DynRoleMembership dynMembership);\n \n-    String getConsoleLayoutInfo();\n+    String getAnyLayout();\n \n-    void setConsoleLayoutInfo(String consoleLayoutInfo);\n+    void setAnyLayout(String anyLayout);\n \n     boolean add(Privilege privilege);\n "},{"sha":"da4095c0c44d9554cd56d15ee24d69bde6cd4713","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondConverter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverter.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -37,16 +37,16 @@ public final class SearchCondConverter {\n     /**\n      * Parses a FIQL expression into Syncope's {@link SearchCond}, using {@link SyncopeFiqlParser}.\n      *\n+     * @param visitor visitor instance\n      * @param fiql FIQL string\n      * @param realms optional realm to provide to {@link SearchCondVisitor}\n      * @return {@link SearchCond} instance for given FIQL expression\n      */\n-    public static SearchCond convert(final String fiql, final String... realms) {\n+    public static SearchCond convert(final SearchCondVisitor visitor, final String fiql, final String... realms) {\n         SyncopeFiqlParser<SearchBean> parser = new SyncopeFiqlParser<>(\n                 SearchBean.class, AbstractFiqlSearchConditionBuilder.CONTEXTUAL_PROPERTIES);\n \n         try {\n-            SearchCondVisitor visitor = new SearchCondVisitor();\n             if (realms != null && realms.length > 0) {\n                 visitor.setRealm(realms[0]);\n             }"},{"sha":"bdf9d211ae81710b6613bf876ffc2315980d2ef1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java","status":"modified","additions":81,"deletions":76,"changes":157,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -33,14 +33,14 @@\n import org.apache.syncope.common.lib.search.SpecialAttr;\n import org.apache.syncope.common.lib.search.SyncopeFiqlParser;\n import org.apache.syncope.common.lib.search.SyncopeFiqlSearchCondition;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n import org.apache.syncope.core.persistence.api.dao.search.ResourceCond;\n import org.apache.syncope.core.persistence.api.dao.search.RoleCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.PrivilegeCond;\n@@ -52,33 +52,29 @@\n  */\n public class SearchCondVisitor extends AbstractSearchConditionVisitor<SearchBean, SearchCond> {\n \n-    private static final Pattern TIMEZONE = Pattern.compile(\".* [0-9]{4}$\");\n+    protected static final Pattern TIMEZONE = Pattern.compile(\".* [0-9]{4}$\");\n \n-    private String realm;\n+    protected static final ThreadLocal<String> REALM = new ThreadLocal<>();\n \n-    private SearchCond searchCond;\n+    protected static final ThreadLocal<SearchCond> SEARCH_COND = new ThreadLocal<>();\n \n     public SearchCondVisitor() {\n         super(null);\n     }\n \n     public void setRealm(final String realm) {\n-        this.realm = realm;\n+        REALM.set(realm);\n     }\n \n-    private static AttributeCond createAttributeCond(final String schema) {\n-        AttributeCond attributeCond = SearchableFields.contains(schema)\n+    protected static AttrCond createAttrCond(final String schema) {\n+        AttrCond attrCond = SearchableFields.contains(schema)\n                 ? new AnyCond()\n-                : new AttributeCond();\n-        attributeCond.setSchema(schema);\n-        return attributeCond;\n+                : new AttrCond();\n+        attrCond.setSchema(schema);\n+        return attrCond;\n     }\n \n-    @SuppressWarnings(\"ConvertToStringSwitch\")\n-    private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n-        String name = getRealPropertyName(sc.getStatement().getProperty());\n-        Optional<SpecialAttr> specialAttrName = SpecialAttr.fromString(name);\n-\n+    protected static String getValue(final SearchCondition<SearchBean> sc) {\n         String value = SearchUtils.toSqlWildcardString(\n                 URLDecoder.decode(sc.getStatement().getValue().toString(), StandardCharsets.UTF_8), false).\n                 replaceAll(\"\\\\\\\\_\", \"_\");\n@@ -90,11 +86,10 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n             value = new String(valueAsArray);\n         }\n \n-        Optional<SpecialAttr> specialAttrValue = SpecialAttr.fromString(value);\n-\n-        AttributeCond attributeCond = createAttributeCond(name);\n-        attributeCond.setExpression(value);\n+        return value;\n+    }\n \n+    protected static ConditionType getConditionType(final SearchCondition<SearchBean> sc) {\n         ConditionType ct = sc.getConditionType();\n         if (sc instanceof SyncopeFiqlSearchCondition && sc.getConditionType() == ConditionType.CUSTOM) {\n             SyncopeFiqlSearchCondition<SearchBean> sfsc = (SyncopeFiqlSearchCondition<SearchBean>) sc;\n@@ -113,85 +108,101 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n             }\n         }\n \n+        return ct;\n+    }\n+\n+    @SuppressWarnings(\"ConvertToStringSwitch\")\n+    protected SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n+        String name = getRealPropertyName(sc.getStatement().getProperty());\n+        Optional<SpecialAttr> specialAttrName = SpecialAttr.fromString(name);\n+\n+        String value = getValue(sc);\n+        Optional<SpecialAttr> specialAttrValue = SpecialAttr.fromString(value);\n+\n+        AttrCond attrCond = createAttrCond(name);\n+        attrCond.setExpression(value);\n+\n+        ConditionType ct = getConditionType(sc);\n+\n         SearchCond leaf;\n         switch (ct) {\n             case EQUALS:\n             case NOT_EQUALS:\n-                if (specialAttrName.isEmpty()) {\n+                if (!specialAttrName.isPresent()) {\n                     if (specialAttrValue.isPresent() && specialAttrValue.get() == SpecialAttr.NULL) {\n-                        attributeCond.setType(AttributeCond.Type.ISNULL);\n-                        attributeCond.setExpression(null);\n+                        attrCond.setType(AttrCond.Type.ISNULL);\n+                        attrCond.setExpression(null);\n                     } else if (value.indexOf('%') == -1) {\n-                        attributeCond.setType(sc.getConditionType() == ConditionType.CUSTOM\n-                                ? AttributeCond.Type.IEQ\n-                                : AttributeCond.Type.EQ);\n+                        attrCond.setType(sc.getConditionType() == ConditionType.CUSTOM\n+                                ? AttrCond.Type.IEQ\n+                                : AttrCond.Type.EQ);\n                     } else {\n-                        attributeCond.setType(sc.getConditionType() == ConditionType.CUSTOM\n-                                ? AttributeCond.Type.ILIKE\n-                                : AttributeCond.Type.LIKE);\n+                        attrCond.setType(sc.getConditionType() == ConditionType.CUSTOM\n+                                ? AttrCond.Type.ILIKE\n+                                : AttrCond.Type.LIKE);\n                     }\n \n-                    leaf = SearchCond.getLeafCond(attributeCond);\n+                    leaf = SearchCond.getLeaf(attrCond);\n                 } else {\n                     switch (specialAttrName.get()) {\n                         case TYPE:\n                             AnyTypeCond typeCond = new AnyTypeCond();\n                             typeCond.setAnyTypeKey(value);\n-                            leaf = SearchCond.getLeafCond(typeCond);\n+                            leaf = SearchCond.getLeaf(typeCond);\n                             break;\n \n                         case RESOURCES:\n                             ResourceCond resourceCond = new ResourceCond();\n                             resourceCond.setResourceKey(value);\n-                            leaf = SearchCond.getLeafCond(resourceCond);\n+                            leaf = SearchCond.getLeaf(resourceCond);\n                             break;\n \n                         case GROUPS:\n                             MembershipCond groupCond = new MembershipCond();\n                             groupCond.setGroup(value);\n-                            leaf = SearchCond.getLeafCond(groupCond);\n+                            leaf = SearchCond.getLeaf(groupCond);\n                             break;\n \n                         case RELATIONSHIPS:\n                             RelationshipCond relationshipCond = new RelationshipCond();\n                             relationshipCond.setAnyObject(value);\n-                            leaf = SearchCond.getLeafCond(relationshipCond);\n+                            leaf = SearchCond.getLeaf(relationshipCond);\n                             break;\n \n                         case RELATIONSHIP_TYPES:\n                             RelationshipTypeCond relationshipTypeCond = new RelationshipTypeCond();\n                             relationshipTypeCond.setRelationshipTypeKey(value);\n-                            leaf = SearchCond.getLeafCond(relationshipTypeCond);\n+                            leaf = SearchCond.getLeaf(relationshipTypeCond);\n                             break;\n \n                         case ROLES:\n                             RoleCond roleCond = new RoleCond();\n                             roleCond.setRole(value);\n-                            leaf = SearchCond.getLeafCond(roleCond);\n+                            leaf = SearchCond.getLeaf(roleCond);\n                             break;\n \n                         case PRIVILEGES:\n                             PrivilegeCond privilegeCond = new PrivilegeCond();\n                             privilegeCond.setPrivilege(value);\n-                            leaf = SearchCond.getLeafCond(privilegeCond);\n+                            leaf = SearchCond.getLeaf(privilegeCond);\n                             break;\n \n                         case DYNREALMS:\n                             DynRealmCond dynRealmCond = new DynRealmCond();\n                             dynRealmCond.setDynRealm(value);\n-                            leaf = SearchCond.getLeafCond(dynRealmCond);\n+                            leaf = SearchCond.getLeaf(dynRealmCond);\n                             break;\n \n                         case ASSIGNABLE:\n                             AssignableCond assignableCond = new AssignableCond();\n-                            assignableCond.setRealmFullPath(realm);\n-                            leaf = SearchCond.getLeafCond(assignableCond);\n+                            assignableCond.setRealmFullPath(REALM.get());\n+                            leaf = SearchCond.getLeaf(assignableCond);\n                             break;\n \n                         case MEMBER:\n                             MemberCond memberCond = new MemberCond();\n                             memberCond.setMember(value);\n-                            leaf = SearchCond.getLeafCond(memberCond);\n+                            leaf = SearchCond.getLeaf(memberCond);\n                             break;\n \n                         default:\n@@ -200,75 +211,71 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n                     }\n                 }\n                 if (ct == ConditionType.NOT_EQUALS) {\n-                    if (leaf.getAttributeCond() != null\n-                            && leaf.getAttributeCond().getType() == AttributeCond.Type.ISNULL) {\n-\n-                        leaf.getAttributeCond().setType(AttributeCond.Type.ISNOTNULL);\n-                    } else if (leaf.getAnyCond() != null\n-                            && leaf.getAnyCond().getType() == AttributeCond.Type.ISNULL) {\n-\n-                        leaf.getAnyCond().setType(AttributeCond.Type.ISNOTNULL);\n+                    Optional<AttrCond> notEquals = leaf.getLeaf(AttrCond.class);\n+                    if (notEquals.isPresent() && notEquals.get().getType() == AttrCond.Type.ISNULL) {\n+                        notEquals.get().setType(AttrCond.Type.ISNOTNULL);\n                     } else {\n-                        leaf = SearchCond.getNotLeafCond(leaf);\n+                        leaf = SearchCond.getNotLeaf(leaf);\n                     }\n                 }\n                 break;\n \n             case GREATER_OR_EQUALS:\n-                attributeCond.setType(AttributeCond.Type.GE);\n-                leaf = SearchCond.getLeafCond(attributeCond);\n+                attrCond.setType(AttrCond.Type.GE);\n+                leaf = SearchCond.getLeaf(attrCond);\n                 break;\n \n             case GREATER_THAN:\n-                attributeCond.setType(AttributeCond.Type.GT);\n-                leaf = SearchCond.getLeafCond(attributeCond);\n+                attrCond.setType(AttrCond.Type.GT);\n+                leaf = SearchCond.getLeaf(attrCond);\n                 break;\n \n             case LESS_OR_EQUALS:\n-                attributeCond.setType(AttributeCond.Type.LE);\n-                leaf = SearchCond.getLeafCond(attributeCond);\n+                attrCond.setType(AttrCond.Type.LE);\n+                leaf = SearchCond.getLeaf(attrCond);\n                 break;\n \n             case LESS_THAN:\n-                attributeCond.setType(AttributeCond.Type.LT);\n-                leaf = SearchCond.getLeafCond(attributeCond);\n+                attrCond.setType(AttrCond.Type.LT);\n+                leaf = SearchCond.getLeaf(attrCond);\n                 break;\n \n             default:\n                 throw new IllegalArgumentException(String.format(\"Condition type %s is not supported\", ct.name()));\n         }\n \n         // SYNCOPE-1293: explicitly re-process to allow 'token==$null' or 'token!=$null'\n-        if (leaf.getAttributeCond() != null\n-                && \"token\".equals(leaf.getAttributeCond().getSchema())\n-                && (leaf.getAttributeCond().getType() == AttributeCond.Type.ISNULL\n-                || leaf.getAttributeCond().getType() == AttributeCond.Type.ISNOTNULL)\n-                && leaf.getAttributeCond().getExpression() == null) {\n-\n+        Optional<AttrCond> reprocess = leaf.getLeaf(AttrCond.class).\n+                filter(cond -> \"token\".equals(cond.getSchema())\n+                && (cond.getType() == AttrCond.Type.ISNULL || cond.getType() == AttrCond.Type.ISNOTNULL)\n+                && cond.getExpression() == null);\n+        if (reprocess.isPresent()) {\n             AnyCond tokenCond = new AnyCond();\n-            tokenCond.setSchema(leaf.getAttributeCond().getSchema());\n-            tokenCond.setType(leaf.getAttributeCond().getType());\n+            tokenCond.setSchema(reprocess.get().getSchema());\n+            tokenCond.setType(reprocess.get().getType());\n             tokenCond.setExpression(null);\n-            leaf = SearchCond.getLeafCond(tokenCond);\n+            leaf = SearchCond.getLeaf(tokenCond);\n         }\n \n         return leaf;\n     }\n \n-    private SearchCond visitCompount(final SearchCondition<SearchBean> sc) {\n+    protected SearchCond visitCompount(final SearchCondition<SearchBean> sc) {\n         List<SearchCond> searchConds = new ArrayList<>();\n-        sc.getSearchConditions().forEach(searchCond -> searchConds.add(searchCond.getStatement() == null\n-                ? visitCompount(searchCond)\n-                : visitPrimitive(searchCond)));\n+        sc.getSearchConditions().forEach(searchCond -> {\n+            searchConds.add(searchCond.getStatement() == null\n+                    ? visitCompount(searchCond)\n+                    : visitPrimitive(searchCond));\n+        });\n \n         SearchCond compound;\n         switch (sc.getConditionType()) {\n             case AND:\n-                compound = SearchCond.getAndCond(searchConds);\n+                compound = SearchCond.getAnd(searchConds);\n                 break;\n \n             case OR:\n-                compound = SearchCond.getOrCond(searchConds);\n+                compound = SearchCond.getOr(searchConds);\n                 break;\n \n             default:\n@@ -281,13 +288,11 @@ private SearchCond visitCompount(final SearchCondition<SearchBean> sc) {\n \n     @Override\n     public void visit(final SearchCondition<SearchBean> sc) {\n-        searchCond = sc.getStatement() == null\n-                ? visitCompount(sc)\n-                : visitPrimitive(sc);\n+        SEARCH_COND.set(sc.getStatement() == null ? visitCompount(sc) : visitPrimitive(sc));\n     }\n \n     @Override\n     public SearchCond getQuery() {\n-        return searchCond;\n+        return SEARCH_COND.get();\n     }\n }"},{"sha":"eafb313fa4083c9180e44020740521d2fbb10a91","filename":"core/persistence-api/src/test/java/org/apache/syncope/core/persistence/api/search/SearchCondConverterTest.java","status":"modified","additions":65,"deletions":64,"changes":129,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -25,14 +25,14 @@\n import org.apache.syncope.common.lib.search.GroupFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.SpecialAttr;\n import org.apache.syncope.common.lib.search.UserFiqlSearchConditionBuilder;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n import org.apache.syncope.core.persistence.api.dao.search.ResourceCond;\n import org.apache.syncope.core.persistence.api.dao.search.RoleCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.PrivilegeCond;\n@@ -42,106 +42,108 @@\n \n public class SearchCondConverterTest {\n \n+    private static final SearchCondVisitor VISITOR = new SearchCondVisitor();\n+\n     @Test\n     public void eq() {\n         String fiql = new UserFiqlSearchConditionBuilder().is(\"username\").equalTo(\"rossini\").query();\n         assertEquals(\"username==rossini\", fiql);\n \n-        AnyCond attrCond = new AnyCond(AttributeCond.Type.EQ);\n+        AnyCond attrCond = new AnyCond(AttrCond.Type.EQ);\n         attrCond.setSchema(\"username\");\n         attrCond.setExpression(\"rossini\");\n-        SearchCond simpleCond = SearchCond.getLeafCond(attrCond);\n+        SearchCond leaf = SearchCond.getLeaf(attrCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n+        assertEquals(leaf, SearchCondConverter.convert(VISITOR, fiql));\n     }\n \n     @Test\n     public void ieq() {\n         String fiql = new UserFiqlSearchConditionBuilder().is(\"username\").equalToIgnoreCase(\"rossini\").query();\n         assertEquals(\"username=~rossini\", fiql);\n \n-        AnyCond attrCond = new AnyCond(AttributeCond.Type.IEQ);\n+        AnyCond attrCond = new AnyCond(AttrCond.Type.IEQ);\n         attrCond.setSchema(\"username\");\n         attrCond.setExpression(\"rossini\");\n-        SearchCond simpleCond = SearchCond.getLeafCond(attrCond);\n+        SearchCond leaf = SearchCond.getLeaf(attrCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n+        assertEquals(leaf, SearchCondConverter.convert(VISITOR, fiql));\n     }\n \n     @Test\n     public void nieq() {\n         String fiql = new UserFiqlSearchConditionBuilder().is(\"username\").notEqualTolIgnoreCase(\"rossini\").query();\n         assertEquals(\"username!~rossini\", fiql);\n \n-        AnyCond attrCond = new AnyCond(AttributeCond.Type.IEQ);\n-        attrCond.setSchema(\"username\");\n-        attrCond.setExpression(\"rossini\");\n-        SearchCond simpleCond = SearchCond.getNotLeafCond(attrCond);\n+        AnyCond anyCond = new AnyCond(AttrCond.Type.IEQ);\n+        anyCond.setSchema(\"username\");\n+        anyCond.setExpression(\"rossini\");\n+        SearchCond leaf = SearchCond.getNotLeaf(anyCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n+        assertEquals(leaf, SearchCondConverter.convert(VISITOR, fiql));\n     }\n \n     @Test\n     public void like() {\n         String fiql = new UserFiqlSearchConditionBuilder().is(\"username\").equalTo(\"ros*\").query();\n         assertEquals(\"username==ros*\", fiql);\n \n-        AttributeCond attrCond = new AnyCond(AttributeCond.Type.LIKE);\n+        AttrCond attrCond = new AnyCond(AttrCond.Type.LIKE);\n         attrCond.setSchema(\"username\");\n         attrCond.setExpression(\"ros%\");\n-        SearchCond simpleCond = SearchCond.getLeafCond(attrCond);\n+        SearchCond leaf = SearchCond.getLeaf(attrCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n+        assertEquals(leaf, SearchCondConverter.convert(VISITOR, fiql));\n     }\n \n     @Test\n     public void ilike() {\n         String fiql = new UserFiqlSearchConditionBuilder().is(\"username\").equalToIgnoreCase(\"ros*\").query();\n         assertEquals(\"username=~ros*\", fiql);\n \n-        AttributeCond attrCond = new AnyCond(AttributeCond.Type.ILIKE);\n+        AttrCond attrCond = new AnyCond(AttrCond.Type.ILIKE);\n         attrCond.setSchema(\"username\");\n         attrCond.setExpression(\"ros%\");\n-        SearchCond simpleCond = SearchCond.getLeafCond(attrCond);\n+        SearchCond leaf = SearchCond.getLeaf(attrCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n+        assertEquals(leaf, SearchCondConverter.convert(VISITOR, fiql));\n     }\n \n     @Test\n     public void nilike() {\n         String fiql = new UserFiqlSearchConditionBuilder().is(\"username\").notEqualTolIgnoreCase(\"ros*\").query();\n         assertEquals(\"username!~ros*\", fiql);\n \n-        AttributeCond attrCond = new AnyCond(AttributeCond.Type.ILIKE);\n+        AttrCond attrCond = new AnyCond(AttrCond.Type.ILIKE);\n         attrCond.setSchema(\"username\");\n         attrCond.setExpression(\"ros%\");\n-        SearchCond simpleCond = SearchCond.getNotLeafCond(attrCond);\n+        SearchCond leaf = SearchCond.getNotLeaf(attrCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n+        assertEquals(leaf, SearchCondConverter.convert(VISITOR, fiql));\n     }\n \n     @Test\n     public void isNull() {\n         String fiql = new UserFiqlSearchConditionBuilder().is(\"loginDate\").nullValue().query();\n         assertEquals(\"loginDate==\" + SpecialAttr.NULL, fiql);\n \n-        AttributeCond attrCond = new AttributeCond(AttributeCond.Type.ISNULL);\n+        AttrCond attrCond = new AttrCond(AttrCond.Type.ISNULL);\n         attrCond.setSchema(\"loginDate\");\n-        SearchCond simpleCond = SearchCond.getLeafCond(attrCond);\n+        SearchCond leaf = SearchCond.getLeaf(attrCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n+        assertEquals(leaf, SearchCondConverter.convert(VISITOR, fiql));\n     }\n \n     @Test\n     public void isNotNull() {\n         String fiql = new UserFiqlSearchConditionBuilder().is(\"loginDate\").notNullValue().query();\n         assertEquals(\"loginDate!=\" + SpecialAttr.NULL, fiql);\n \n-        AttributeCond attrCond = new AttributeCond(AttributeCond.Type.ISNOTNULL);\n+        AttrCond attrCond = new AttrCond(AttrCond.Type.ISNOTNULL);\n         attrCond.setSchema(\"loginDate\");\n-        SearchCond simpleCond = SearchCond.getLeafCond(attrCond);\n+        SearchCond leaf = SearchCond.getLeaf(attrCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n+        assertEquals(leaf, SearchCondConverter.convert(VISITOR, fiql));\n     }\n \n     @Test\n@@ -152,9 +154,9 @@ public void relationships() {\n \n         RelationshipCond relationshipCond = new RelationshipCond();\n         relationshipCond.setAnyObject(\"ca20ffca-1305-442f-be9a-3723a0cd88ca\");\n-        SearchCond simpleCond = SearchCond.getLeafCond(relationshipCond);\n+        SearchCond leaf = SearchCond.getLeaf(relationshipCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n+        assertEquals(leaf, SearchCondConverter.convert(VISITOR, fiql));\n     }\n \n     @Test\n@@ -164,9 +166,9 @@ public void relationshipTypes() {\n \n         RelationshipTypeCond relationshipCond = new RelationshipTypeCond();\n         relationshipCond.setRelationshipTypeKey(\"type1\");\n-        SearchCond simpleCond = SearchCond.getLeafCond(relationshipCond);\n+        SearchCond leaf = SearchCond.getLeaf(relationshipCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n+        assertEquals(leaf, SearchCondConverter.convert(VISITOR, fiql));\n \n         fiql = new AnyObjectFiqlSearchConditionBuilder(\"PRINTER\").inRelationshipTypes(\"neighborhood\").query();\n         assertEquals(\n@@ -182,9 +184,9 @@ public void groups() {\n \n         MembershipCond groupCond = new MembershipCond();\n         groupCond.setGroup(\"e7ff94e8-19c9-4f0a-b8b7-28327edbf6ed\");\n-        SearchCond simpleCond = SearchCond.getLeafCond(groupCond);\n+        SearchCond leaf = SearchCond.getLeaf(groupCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n+        assertEquals(leaf, SearchCondConverter.convert(VISITOR, fiql));\n     }\n \n     @Test\n@@ -194,9 +196,9 @@ public void roles() {\n \n         RoleCond roleCond = new RoleCond();\n         roleCond.setRole(\"User reviewer\");\n-        SearchCond simpleCond = SearchCond.getLeafCond(roleCond);\n+        SearchCond leaf = SearchCond.getLeaf(roleCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n+        assertEquals(leaf, SearchCondConverter.convert(VISITOR, fiql));\n     }\n \n     @Test\n@@ -206,9 +208,9 @@ public void privileges() {\n \n         PrivilegeCond privilegeCond = new PrivilegeCond();\n         privilegeCond.setPrivilege(\"postMighty\");\n-        SearchCond simpleCond = SearchCond.getLeafCond(privilegeCond);\n+        SearchCond leaf = SearchCond.getLeaf(privilegeCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n+        assertEquals(leaf, SearchCondConverter.convert(VISITOR, fiql));\n     }\n \n     @Test\n@@ -219,9 +221,9 @@ public void dynRealms() {\n \n         DynRealmCond dynRealmCond = new DynRealmCond();\n         dynRealmCond.setDynRealm(dynRealm);\n-        SearchCond simpleCond = SearchCond.getLeafCond(dynRealmCond);\n+        SearchCond leaf = SearchCond.getLeaf(dynRealmCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n+        assertEquals(leaf, SearchCondConverter.convert(VISITOR, fiql));\n     }\n \n     @Test\n@@ -231,9 +233,9 @@ public void resources() {\n \n         ResourceCond resCond = new ResourceCond();\n         resCond.setResourceKey(\"resource-ldap\");\n-        SearchCond simpleCond = SearchCond.getLeafCond(resCond);\n+        SearchCond leaf = SearchCond.getLeaf(resCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n+        assertEquals(leaf, SearchCondConverter.convert(VISITOR, fiql));\n     }\n \n     @Test\n@@ -243,9 +245,9 @@ public void assignable() {\n \n         AssignableCond assignableCond = new AssignableCond();\n         assignableCond.setRealmFullPath(\"/even/two\");\n-        SearchCond simpleCond = SearchCond.getLeafCond(assignableCond);\n+        SearchCond leaf = SearchCond.getLeaf(assignableCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiql, \"/even/two\"));\n+        assertEquals(leaf, SearchCondConverter.convert(VISITOR, fiql, \"/even/two\"));\n     }\n \n     @Test\n@@ -255,9 +257,9 @@ public void type() {\n \n         AnyTypeCond acond = new AnyTypeCond();\n         acond.setAnyTypeKey(\"PRINTER\");\n-        SearchCond simpleCond = SearchCond.getLeafCond(acond);\n+        SearchCond leaf = SearchCond.getLeaf(acond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n+        assertEquals(leaf, SearchCondConverter.convert(VISITOR, fiql));\n     }\n \n     @Test\n@@ -267,9 +269,9 @@ public void member() {\n \n         MemberCond mcond = new MemberCond();\n         mcond.setMember(\"rossini\");\n-        SearchCond simpleCond = SearchCond.getLeafCond(mcond);\n+        SearchCond leaf = SearchCond.getLeaf(mcond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n+        assertEquals(leaf, SearchCondConverter.convert(VISITOR, fiql));\n     }\n \n     @Test\n@@ -278,17 +280,17 @@ public void and() {\n                 is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query();\n         assertEquals(\"fullname==*o*;fullname==*i*\", fiql);\n \n-        AttributeCond fullnameLeafCond1 = new AttributeCond(AttributeCond.Type.LIKE);\n+        AttrCond fullnameLeafCond1 = new AttrCond(AttrCond.Type.LIKE);\n         fullnameLeafCond1.setSchema(\"fullname\");\n         fullnameLeafCond1.setExpression(\"%o%\");\n-        AttributeCond fullnameLeafCond2 = new AttributeCond(AttributeCond.Type.LIKE);\n+        AttrCond fullnameLeafCond2 = new AttrCond(AttrCond.Type.LIKE);\n         fullnameLeafCond2.setSchema(\"fullname\");\n         fullnameLeafCond2.setExpression(\"%i%\");\n-        SearchCond andCond = SearchCond.getAndCond(\n-                SearchCond.getLeafCond(fullnameLeafCond1),\n-                SearchCond.getLeafCond(fullnameLeafCond2));\n+        SearchCond andCond = SearchCond.getAnd(\n+                SearchCond.getLeaf(fullnameLeafCond1),\n+                SearchCond.getLeaf(fullnameLeafCond2));\n \n-        assertEquals(andCond, SearchCondConverter.convert(fiql));\n+        assertEquals(andCond, SearchCondConverter.convert(VISITOR, fiql));\n     }\n \n     @Test\n@@ -300,33 +302,32 @@ public void or() {\n                 is(\"fullname\").equalTo(\"*o*\").or(\"fullname\").equalTo(\"*i*\").or(\"fullname\").equalTo(\"*ini\").query();\n         assertEquals(\"fullname==*o*,fullname==*i*,fullname==*ini\", fiql);\n \n-        AttributeCond fullnameLeafCond1 = new AttributeCond(AttributeCond.Type.LIKE);\n+        AttrCond fullnameLeafCond1 = new AttrCond(AttrCond.Type.LIKE);\n         fullnameLeafCond1.setSchema(\"fullname\");\n         fullnameLeafCond1.setExpression(\"%o%\");\n-        AttributeCond fullnameLeafCond2 = new AttributeCond(AttributeCond.Type.LIKE);\n+        AttrCond fullnameLeafCond2 = new AttrCond(AttrCond.Type.LIKE);\n         fullnameLeafCond2.setSchema(\"fullname\");\n         fullnameLeafCond2.setExpression(\"%i%\");\n-        AttributeCond fullnameLeafCond3 = new AttributeCond(AttributeCond.Type.LIKE);\n+        AttrCond fullnameLeafCond3 = new AttrCond(AttrCond.Type.LIKE);\n         fullnameLeafCond3.setSchema(\"fullname\");\n         fullnameLeafCond3.setExpression(\"%ini\");\n-        SearchCond orCond = SearchCond.getOrCond(\n-                SearchCond.getLeafCond(fullnameLeafCond1),\n-                SearchCond.getOrCond(\n-                        SearchCond.getLeafCond(fullnameLeafCond2),\n-                        SearchCond.getLeafCond(fullnameLeafCond3)));\n+        SearchCond orCond = SearchCond.getOr(SearchCond.getLeaf(fullnameLeafCond1),\n+                SearchCond.getOr(\n+                        SearchCond.getLeaf(fullnameLeafCond2),\n+                        SearchCond.getLeaf(fullnameLeafCond3)));\n \n-        assertEquals(orCond, SearchCondConverter.convert(fiql));\n+        assertEquals(orCond, SearchCondConverter.convert(VISITOR, fiql));\n     }\n \n     @Test\n     public void issueSYNCOPE1223() {\n         String fiql = new UserFiqlSearchConditionBuilder().is(\"ctype\").equalTo(\"ou=sample%252Co=isp\").query();\n \n-        AttributeCond cond = new AttributeCond(AttributeCond.Type.EQ);\n+        AttrCond cond = new AttrCond(AttrCond.Type.EQ);\n         cond.setSchema(\"ctype\");\n         cond.setExpression(\"ou=sample,o=isp\");\n \n-        assertEquals(SearchCond.getLeafCond(cond), SearchCondConverter.convert(fiql));\n+        assertEquals(SearchCond.getLeaf(cond), SearchCondConverter.convert(VISITOR, fiql));\n     }\n \n }"},{"sha":"92e4e3e51c4dc7dc3ebbc593dca21987c4c913dd","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractJPAJSONAnySearchDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnySearchDAO.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n \n abstract class AbstractJPAJSONAnySearchDAO extends JPAAnySearchDAO {\n \n@@ -28,7 +28,7 @@ SearchSupport buildSearchSupport(final AnyTypeKind kind) {\n         return new SearchSupport(kind);\n     }\n \n-    protected void appendOp(final StringBuilder query, final AttributeCond.Type condType, final boolean not) {\n+    protected void appendOp(final StringBuilder query, final AttrCond.Type condType, final boolean not) {\n         switch (condType) {\n             case LIKE:\n             case ILIKE:"},{"sha":"c58854906df9c31edef0c9fd1800d8d43ab23fbb","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAJSONPlainSchemaDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONPlainSchemaDAO.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -33,7 +33,7 @@ public <T extends PlainAttr<?>> List<T> findAttrs(final PlainSchema schema, fina\n     @Override\n     public <T extends PlainAttr<?>> boolean hasAttrs(final PlainSchema schema, final Class<T> plainAttrTable) {\n         // not possible\n-        return false;\n+        return true;\n     }\n \n     @Override"},{"sha":"bc843fe0c80ffed6c32b2c158e42c8b48249c7f1","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONAnySearchDAO.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -24,7 +24,7 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n@@ -143,22 +143,22 @@ private void fillAttrQuery(\n             final StringBuilder query,\n             final PlainAttrValue attrValue,\n             final PlainSchema schema,\n-            final AttributeCond cond,\n+            final AttrCond cond,\n             final boolean not,\n             final List<Object> parameters,\n             final SearchSupport svs) {\n \n         // This first branch is required for handling with not conditions given on multivalue fields (SYNCOPE-1419)\n         if (not && schema.isMultivalue()\n                 && !(cond instanceof AnyCond)\n-                && cond.getType() != AttributeCond.Type.ISNULL && cond.getType() != AttributeCond.Type.ISNOTNULL) {\n+                && cond.getType() != AttrCond.Type.ISNULL && cond.getType() != AttrCond.Type.ISNOTNULL) {\n \n             query.append(\"id NOT IN (SELECT DISTINCT any_id FROM \");\n             query.append(svs.field().name).append(\" WHERE \");\n             fillAttrQuery(anyUtils, query, attrValue, schema, cond, false, parameters, svs);\n             query.append(')');\n         } else {\n-            if (!not && cond.getType() == AttributeCond.Type.EQ) {\n+            if (!not && cond.getType() == AttrCond.Type.EQ) {\n                 PlainAttr<?> container = anyUtils.newPlainAttr();\n                 container.setSchema(schema);\n                 if (attrValue instanceof PlainAttrUniqueValue) {\n@@ -173,7 +173,7 @@ private void fillAttrQuery(\n             } else {\n                 String key = key(schema.getType());\n                 boolean lower = (schema.getType() == AttrSchemaType.String || schema.getType() == AttrSchemaType.Enum)\n-                        && (cond.getType() == AttributeCond.Type.IEQ || cond.getType() == AttributeCond.Type.ILIKE);\n+                        && (cond.getType() == AttrCond.Type.IEQ || cond.getType() == AttrCond.Type.ILIKE);\n \n                 query.append(\"plainSchema = ?\").append(setParameter(parameters, cond.getSchema())).\n                         append(\" AND \").\n@@ -194,7 +194,7 @@ private void fillAttrQuery(\n \n     @Override\n     protected String getQuery(\n-            final AttributeCond cond,\n+            final AttrCond cond,\n             final boolean not,\n             final List<Object> parameters,\n             final SearchSupport svs) {\n@@ -208,10 +208,10 @@ protected String getQuery(\n \n         // normalize NULL / NOT NULL checks\n         if (not) {\n-            if (cond.getType() == AttributeCond.Type.ISNULL) {\n-                cond.setType(AttributeCond.Type.ISNOTNULL);\n-            } else if (cond.getType() == AttributeCond.Type.ISNOTNULL) {\n-                cond.setType(AttributeCond.Type.ISNULL);\n+            if (cond.getType() == AttrCond.Type.ISNULL) {\n+                cond.setType(AttrCond.Type.ISNOTNULL);\n+            } else if (cond.getType() == AttrCond.Type.ISNOTNULL) {\n+                cond.setType(AttrCond.Type.ISNULL);\n             }\n         }\n "},{"sha":"972a7af2bed3e2d1bc0aa593d1c2b886de20b8f4","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnySearchDAO.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -25,7 +25,7 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n@@ -112,22 +112,22 @@ private void fillAttrQuery(\n             final StringBuilder query,\n             final PlainAttrValue attrValue,\n             final PlainSchema schema,\n-            final AttributeCond cond,\n+            final AttrCond cond,\n             final boolean not,\n             final List<Object> parameters,\n             final SearchSupport svs) {\n \n         // This first branch is required for handling with not conditions given on multivalue fields (SYNCOPE-1419)\n         if (not && schema.isMultivalue()\n                 && !(cond instanceof AnyCond)\n-                && cond.getType() != AttributeCond.Type.ISNULL && cond.getType() != AttributeCond.Type.ISNOTNULL) {\n+                && cond.getType() != AttrCond.Type.ISNULL && cond.getType() != AttrCond.Type.ISNOTNULL) {\n \n             query.append(\"id NOT IN (SELECT DISTINCT any_id FROM \");\n             query.append(svs.field().name).append(\" WHERE \");\n             fillAttrQuery(anyUtils, query, attrValue, schema, cond, false, parameters, svs);\n             query.append(')');\n         } else {\n-            if (!not && cond.getType() == AttributeCond.Type.EQ) {\n+            if (!not && cond.getType() == AttrCond.Type.EQ) {\n                 PlainAttr<?> container = anyUtils.newPlainAttr();\n                 container.setSchema(schema);\n                 if (attrValue instanceof PlainAttrUniqueValue) {\n@@ -142,7 +142,7 @@ private void fillAttrQuery(\n             } else {\n                 String key = key(schema.getType());\n                 boolean lower = (schema.getType() == AttrSchemaType.String || schema.getType() == AttrSchemaType.Enum)\n-                        && (cond.getType() == AttributeCond.Type.IEQ || cond.getType() == AttributeCond.Type.ILIKE);\n+                        && (cond.getType() == AttrCond.Type.IEQ || cond.getType() == AttrCond.Type.ILIKE);\n \n                 query.append(\"attrs ->> 'schema' = ?\").append(setParameter(parameters, cond.getSchema())).\n                         append(\" AND \").\n@@ -171,7 +171,7 @@ private void fillAttrQuery(\n \n     @Override\n     protected String getQuery(\n-            final AttributeCond cond,\n+            final AttrCond cond,\n             final boolean not,\n             final List<Object> parameters,\n             final SearchSupport svs) {\n@@ -185,10 +185,10 @@ protected String getQuery(\n \n         // normalize NULL / NOT NULL checks\n         if (not) {\n-            if (cond.getType() == AttributeCond.Type.ISNULL) {\n-                cond.setType(AttributeCond.Type.ISNOTNULL);\n-            } else if (cond.getType() == AttributeCond.Type.ISNOTNULL) {\n-                cond.setType(AttributeCond.Type.ISNULL);\n+            if (cond.getType() == AttrCond.Type.ISNULL) {\n+                cond.setType(AttrCond.Type.ISNOTNULL);\n+            } else if (cond.getType() == AttrCond.Type.ISNOTNULL) {\n+                cond.setType(AttrCond.Type.ISNULL);\n             }\n         }\n "},{"sha":"d4b0495345dd55c90972cd41be88cf164fac3de2","filename":"core/persistence-jpa-json/src/main/resources/myjson/persistence.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fpersistence.properties?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -20,6 +20,7 @@ plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainSchemaDA\n plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainAttrDAO\n plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainAttrValueDAO\n any.search.dao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAnySearchDAO\n+any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisitor\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO"},{"sha":"89f9e0db58ced395559fe10e377dc37bb5e10621","filename":"core/persistence-jpa-json/src/main/resources/pgjsonb/persistence.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fpersistence.properties?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -20,6 +20,7 @@ plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainSchemaDA\n plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainAttrDAO\n plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainAttrValueDAO\n any.search.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONAnySearchDAO\n+any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisitor\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO"},{"sha":"1a6e0f2aa9171b8f7ef710013785e90e20c041aa","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":12,"deletions":39,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -2339,62 +2339,28 @@ $$ }&#10;\n \n   <SecurityQuestion id=\"887028ea-66fc-41e7-b397-620d7ea6dfbb\" content=\"What's your mother's maiden name?\"/>\n \n-  <SyncopeLogger logName=\"syncope.audit.[LOGIC]:[SyncopeLogic]:[]:[isSelfRegAllowed]:[SUCCESS]\" logLevel=\"DEBUG\" logType=\"AUDIT\"/>\n+  <GatewayRoute id=\"ec7bada2-3dd6-460c-8441-65521d005ffa\" name=\"basic1\" target=\"http://httpbin.org:80\" status=\"PUBLISHED\"\n+                predicates=\"[{&quot;cond&quot;:null,&quot;factory&quot;:&quot;METHOD&quot;,&quot;args&quot;:&quot;GET&quot;}]\"/>\n \n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[assign]:[FAILURE]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[assign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[create]:[FAILURE]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[create]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[delete]:[FAILURE]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[delete]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[deprovision]:[FAILURE]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[deprovision]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[link]:[FAILURE]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[link]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[provision]:[FAILURE]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[provision]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unassign]:[FAILURE]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unassign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unlink]:[FAILURE]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unlink]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[update]:[FAILURE]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n+  <SyncopeLogger logName=\"syncope.audit.[LOGIC]:[SyncopeLogic]:[]:[isSelfRegAllowed]:[SUCCESS]\" logLevel=\"DEBUG\" logType=\"AUDIT\"/>\n \n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[assign]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[assign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[confirmPasswordReset]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[confirmPasswordReset]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[create]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[create]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[delete]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[delete]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[deprovision]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[deprovision]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[link]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[link]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[mustChangePassword]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[mustChangePassword]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[provision]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[provision]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[requestPasswordReset]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[requestPasswordReset]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfCreate]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfCreate]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfDelete]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfDelete]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfRead]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfRead]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfStatus]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfStatus]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfUpdate]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfUpdate]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[status]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[status]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[unassign]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[unassign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[unlink]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[unlink]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[update]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n \n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[assign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n@@ -2409,6 +2375,13 @@ $$ }&#10;\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[unlink]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n \n-  <GatewayRoute id=\"ec7bada2-3dd6-460c-8441-65521d005ffa\" name=\"basic1\" target=\"http://httpbin.org:80\" status=\"PUBLISHED\"\n-                predicates=\"[{&quot;cond&quot;:null,&quot;factory&quot;:&quot;METHOD&quot;,&quot;args&quot;:&quot;GET&quot;}]\"/>\n+  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[assign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n+  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[create]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n+  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[delete]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n+  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[deprovision]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n+  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[link]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n+  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[provision]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n+  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unassign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n+  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unlink]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n+  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n </dataset>"},{"sha":"91bd97ad58fb74ff19d602746bcd55594cac5ac1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/PersistenceContext.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n import org.apache.syncope.core.persistence.jpa.spring.CommonEntityManagerFactoryConf;\n import org.apache.syncope.core.persistence.jpa.spring.DomainTransactionInterceptorInjector;\n import org.apache.syncope.core.persistence.jpa.spring.MultiJarAwarePersistenceUnitPostProcessor;\n@@ -145,6 +146,15 @@ public AnySearchDAO anySearchDAO()\n         return (AnySearchDAO) Class.forName(env.getProperty(\"any.search.dao\")).getConstructor().newInstance();\n     }\n \n+    @ConditionalOnMissingBean(name = \"anySearchVisitor\")\n+    @Bean\n+    public SearchCondVisitor anySearchVisitor()\n+            throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n+            IllegalArgumentException, InvocationTargetException {\n+\n+        return (SearchCondVisitor) Class.forName(env.getProperty(\"any.search.visitor\")).getConstructor().newInstance();\n+    }\n+\n     @ConditionalOnMissingBean(name = \"userDAO\")\n     @Bean\n     public UserDAO userDAO()"},{"sha":"05d6a34c7015174df1f18dcbb61c436a1f31d0fc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -44,7 +44,7 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n@@ -456,9 +456,9 @@ public List<A> findByResource(final ExternalResource resource) {\n \n     @Override\n     public SearchCond getAllMatchingCond() {\n-        AnyCond idCond = new AnyCond(AttributeCond.Type.ISNOTNULL);\n+        AnyCond idCond = new AnyCond(AttrCond.Type.ISNOTNULL);\n         idCond.setSchema(\"id\");\n-        return SearchCond.getLeafCond(idCond);\n+        return SearchCond.getLeaf(idCond);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)"},{"sha":"28cd299861dc27f90c7d08e3f474270479ea9569","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -42,7 +42,7 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n@@ -98,11 +98,11 @@ protected static SearchCond buildEffectiveCond(final SearchCond cond, final Set<\n         List<SearchCond> effectiveConds = dynRealmKeys.stream().map(dynRealmKey -> {\n             DynRealmCond dynRealmCond = new DynRealmCond();\n             dynRealmCond.setDynRealm(dynRealmKey);\n-            return SearchCond.getLeafCond(dynRealmCond);\n+            return SearchCond.getLeaf(dynRealmCond);\n         }).collect(Collectors.toList());\n         effectiveConds.add(cond);\n \n-        return SearchCond.getAndCond(effectiveConds);\n+        return SearchCond.getAnd(effectiveConds);\n     }\n \n     protected abstract int doCount(Set<String> adminRealms, SearchCond cond, AnyTypeKind kind);\n@@ -143,7 +143,7 @@ protected abstract <T extends Any<?>> List<T> doSearch(\n             List<OrderByClause> orderBy,\n             AnyTypeKind kind);\n \n-    protected Pair<PlainSchema, PlainAttrValue> check(final AttributeCond cond, final AnyTypeKind kind) {\n+    protected Pair<PlainSchema, PlainAttrValue> check(final AttrCond cond, final AnyTypeKind kind) {\n         AnyUtils anyUtils = anyUtilsFactory.getInstance(kind);\n \n         PlainSchema schema = schemaDAO.find(cond.getSchema());\n@@ -156,10 +156,10 @@ protected Pair<PlainSchema, PlainAttrValue> check(final AttributeCond cond, fina\n                 ? anyUtils.newPlainAttrUniqueValue()\n                 : anyUtils.newPlainAttrValue();\n         try {\n-            if (cond.getType() != AttributeCond.Type.LIKE\n-                    && cond.getType() != AttributeCond.Type.ILIKE\n-                    && cond.getType() != AttributeCond.Type.ISNULL\n-                    && cond.getType() != AttributeCond.Type.ISNOTNULL) {\n+            if (cond.getType() != AttrCond.Type.LIKE\n+                    && cond.getType() != AttrCond.Type.ILIKE\n+                    && cond.getType() != AttrCond.Type.ISNULL\n+                    && cond.getType() != AttrCond.Type.ISNOTNULL) {\n \n                 ((JPAPlainSchema) schema).validator().validate(cond.getExpression(), attrValue);\n             }\n@@ -219,10 +219,10 @@ protected Triple<PlainSchema, PlainAttrValue, AnyCond> check(final AnyCond cond,\n         }\n \n         PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n-        if (computed.getType() != AttributeCond.Type.LIKE\n-                && computed.getType() != AttributeCond.Type.ILIKE\n-                && computed.getType() != AttributeCond.Type.ISNULL\n-                && computed.getType() != AttributeCond.Type.ISNOTNULL) {\n+        if (computed.getType() != AttrCond.Type.LIKE\n+                && computed.getType() != AttrCond.Type.ILIKE\n+                && computed.getType() != AttrCond.Type.ISNULL\n+                && computed.getType() != AttrCond.Type.ISNOTNULL) {\n \n             try {\n                 ((JPAPlainSchema) schema).validator().validate(computed.getExpression(), attrValue);"},{"sha":"23caa5a220ad20f5ec4a7b5d3e679ef790054def","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPullCorrelationRule.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPullCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPullCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPullCorrelationRule.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf;\n import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n@@ -68,33 +68,33 @@ public SearchCond getSearchCond(final SyncDelta syncDelta, final Provision provi\n                         \"Connector object does not contains the attributes to perform the search: \" + schema);\n             }\n \n-            AttributeCond.Type type;\n+            AttrCond.Type type;\n             String expression = null;\n \n             if (attr.getValue() == null || attr.getValue().isEmpty()\n                     || (attr.getValue().size() == 1 && attr.getValue().get(0) == null)) {\n \n-                type = AttributeCond.Type.ISNULL;\n+                type = AttrCond.Type.ISNULL;\n             } else {\n-                type = AttributeCond.Type.EQ;\n+                type = AttrCond.Type.EQ;\n                 expression = attr.getValue().size() > 1\n                         ? attr.getValue().toString()\n                         : attr.getValue().get(0).toString();\n             }\n \n-            AttributeCond cond = \"key\".equalsIgnoreCase(schema)\n+            AttrCond cond = \"key\".equalsIgnoreCase(schema)\n                     || \"username\".equalsIgnoreCase(schema) || \"name\".equalsIgnoreCase(schema)\n                     ? new AnyCond()\n-                    : new AttributeCond();\n+                    : new AttrCond();\n             cond.setSchema(schema);\n             cond.setType(type);\n             cond.setExpression(expression);\n \n-            searchConds.add(SearchCond.getLeafCond(cond));\n+            searchConds.add(SearchCond.getLeaf(cond));\n         });\n \n         return conf.isOrSchemas()\n-                ? SearchCond.getOrCond(searchConds)\n-                : SearchCond.getAndCond(searchConds);\n+                ? SearchCond.getOr(searchConds)\n+                : SearchCond.getAnd(searchConds);\n     }\n }"},{"sha":"0e818933ab8400c050b22b275b104ece188e45cf","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyMatchDAO.java","status":"modified","additions":93,"deletions":40,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -30,6 +30,7 @@\n import javax.validation.ValidationException;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n+import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -41,7 +42,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n@@ -104,36 +105,88 @@ public <T extends Any<?>> boolean matches(final T any, final SearchCond cond) {\n         switch (cond.getType()) {\n             case LEAF:\n             case NOT_LEAF:\n-                if (cond.getAnyTypeCond() != null && AnyTypeKind.ANY_OBJECT == any.getType().getKind()) {\n-                    return matches(any, cond.getAnyTypeCond(), not);\n-                } else if (cond.getRelationshipTypeCond() != null && any instanceof GroupableRelatable) {\n-                    return matches((GroupableRelatable) any, cond.getRelationshipTypeCond(), not);\n-                } else if (cond.getRelationshipCond() != null && any instanceof GroupableRelatable) {\n-                    return matches((GroupableRelatable) any, cond.getRelationshipCond(), not);\n-                } else if (cond.getMembershipCond() != null && any instanceof GroupableRelatable) {\n-                    return matches((GroupableRelatable) any, cond.getMembershipCond(), not);\n-                } else if (cond.getAssignableCond() != null) {\n-                    return matches(any, cond.getAssignableCond(), not);\n-                } else if (cond.getRoleCond() != null && any instanceof User) {\n-                    return matches((User) any, cond.getRoleCond(), not);\n-                } else if (cond.getDynRealmCond() != null) {\n-                    return matches(any, cond.getDynRealmCond(), not);\n-                } else if (cond.getMemberCond() != null && any instanceof Group) {\n-                    return matches((Group) any, cond.getMemberCond(), not);\n-                } else if (cond.getResourceCond() != null) {\n-                    return matches(any, cond.getResourceCond(), not);\n-                } else if (cond.getAttributeCond() != null) {\n-                    return matches(any, cond.getAttributeCond(), not);\n-                } else if (cond.getAnyCond() != null) {\n-                    return matches(any, cond.getAnyCond(), not);\n+                Boolean match = cond.getLeaf(AnyTypeCond.class).\n+                        filter(leaf -> AnyTypeKind.ANY_OBJECT == any.getType().getKind()).\n+                        map(leaf -> matches(any, leaf, not)).\n+                        orElse(null);\n+\n+                if (match == null) {\n+                    match = cond.getLeaf(RelationshipTypeCond.class).\n+                            filter(leaf -> any instanceof GroupableRelatable).\n+                            map(leaf -> matches((GroupableRelatable) any, leaf, not)).\n+                            orElse(null);\n                 }\n-                break;\n+\n+                if (match == null) {\n+                    match = cond.getLeaf(RelationshipCond.class).\n+                            filter(leaf -> any instanceof GroupableRelatable).\n+                            map(leaf -> matches((GroupableRelatable) any, leaf, not)).\n+                            orElse(null);\n+                }\n+\n+                if (match == null) {\n+                    match = cond.getLeaf(MembershipCond.class).\n+                            filter(leaf -> any instanceof GroupableRelatable).\n+                            map(leaf -> matches((GroupableRelatable) any, leaf, not)).\n+                            orElse(null);\n+                }\n+\n+                if (match == null) {\n+                    match = cond.getLeaf(AssignableCond.class).\n+                            map(leaf -> matches(any, leaf, not)).\n+                            orElse(null);\n+                }\n+\n+                if (match == null) {\n+                    match = cond.getLeaf(RoleCond.class).\n+                            filter(leaf -> any instanceof User).\n+                            map(leaf -> matches((User) any, leaf, not)).\n+                            orElse(null);\n+                }\n+\n+                if (match == null) {\n+                    match = cond.getLeaf(DynRealmCond.class).\n+                            map(leaf -> matches(any, leaf, not)).\n+                            orElse(null);\n+                }\n+\n+                if (match == null) {\n+                    match = cond.getLeaf(MemberCond.class).\n+                            filter(leaf -> any instanceof Group).\n+                            map(leaf -> matches((Group) any, leaf, not)).\n+                            orElse(null);\n+                }\n+\n+                if (match == null) {\n+                    match = cond.getLeaf(ResourceCond.class).\n+                            map(leaf -> matches(any, leaf, not)).\n+                            orElse(null);\n+                }\n+\n+                if (match == null) {\n+                    Optional<AnyCond> anyCond = cond.getLeaf(AnyCond.class);\n+                    if (anyCond.isPresent()) {\n+                        match = matches(any, anyCond.get(), not);\n+                    } else {\n+                        match = cond.getLeaf(AttrCond.class).\n+                                map(leaf -> matches(any, leaf, not)).\n+                                orElse(null);\n+                    }\n+                }\n+\n+                if (match == null) {\n+                    match = cond.getLeaf(AttrCond.class).\n+                            map(leaf -> matches(any, leaf, not)).\n+                            orElse(null);\n+                }\n+\n+                return BooleanUtils.toBoolean(match);\n \n             case AND:\n-                return matches(any, cond.getLeftSearchCond()) && matches(any, cond.getRightSearchCond());\n+                return matches(any, cond.getLeft()) && matches(any, cond.getRight());\n \n             case OR:\n-                return matches(any, cond.getLeftSearchCond()) || matches(any, cond.getRightSearchCond());\n+                return matches(any, cond.getLeft()) || matches(any, cond.getRight());\n \n             default:\n         }\n@@ -228,10 +281,10 @@ private boolean matches(final Any<?> any, final ResourceCond cond, final boolean\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     private static boolean matches(\n-        final List<? extends PlainAttrValue> anyAttrValues,\n-        final PlainAttrValue attrValue,\n-        final PlainSchema schema,\n-        final AttributeCond cond) {\n+            final List<? extends PlainAttrValue> anyAttrValues,\n+            final PlainAttrValue attrValue,\n+            final PlainSchema schema,\n+            final AttrCond cond) {\n \n         return anyAttrValues.stream().anyMatch(item -> {\n             switch (cond.getType()) {\n@@ -262,7 +315,7 @@ private static boolean matches(\n                                 output.append(c);\n                             }\n                         }\n-                        return (cond.getType() == AttributeCond.Type.LIKE\n+                        return (cond.getType() == AttrCond.Type.LIKE\n                                 ? Pattern.compile(output.toString())\n                                 : Pattern.compile(output.toString(), Pattern.CASE_INSENSITIVE)).\n                                 matcher(item.getStringValue()).matches();\n@@ -289,7 +342,7 @@ private static boolean matches(\n         });\n     }\n \n-    private boolean matches(final Any<?> any, final AttributeCond cond, final boolean not) {\n+    private boolean matches(final Any<?> any, final AttrCond cond, final boolean not) {\n         PlainSchema schema = plainSchemaDAO.find(cond.getSchema());\n         if (schema == null) {\n             LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n@@ -312,10 +365,10 @@ private boolean matches(final Any<?> any, final AttributeCond cond, final boolea\n             default:\n                 PlainAttrValue attrValue = anyUtilsFactory.getInstance(any).newPlainAttrValue();\n                 try {\n-                    if (cond.getType() != AttributeCond.Type.LIKE\n-                            && cond.getType() != AttributeCond.Type.ILIKE\n-                            && cond.getType() != AttributeCond.Type.ISNULL\n-                            && cond.getType() != AttributeCond.Type.ISNOTNULL) {\n+                    if (cond.getType() != AttrCond.Type.LIKE\n+                            && cond.getType() != AttrCond.Type.ILIKE\n+                            && cond.getType() != AttrCond.Type.ISNULL\n+                            && cond.getType() != AttrCond.Type.ISNOTNULL) {\n \n                         ((JPAPlainSchema) schema).validator().validate(cond.getExpression(), attrValue);\n                     }\n@@ -403,10 +456,10 @@ private boolean matches(final Any<?> any, final AnyCond cond, final boolean not)\n                 AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n \n                 PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n-                if (cond.getType() != AttributeCond.Type.LIKE\n-                        && cond.getType() != AttributeCond.Type.ILIKE\n-                        && cond.getType() != AttributeCond.Type.ISNULL\n-                        && cond.getType() != AttributeCond.Type.ISNOTNULL) {\n+                if (cond.getType() != AttrCond.Type.LIKE\n+                        && cond.getType() != AttrCond.Type.ILIKE\n+                        && cond.getType() != AttrCond.Type.ISNULL\n+                        && cond.getType() != AttrCond.Type.ISNOTNULL) {\n \n                     try {\n                         ((JPAPlainSchema) schema).validator().validate(cond.getExpression(), attrValue);"},{"sha":"3bf81da68717431e469807a5f323465c86cd3ecc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":102,"deletions":74,"changes":176,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -22,6 +22,7 @@\n import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.persistence.Query;\n@@ -34,10 +35,10 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n@@ -439,6 +440,16 @@ private OrderBySupport parseOrderBy(\n         return obs;\n     }\n \n+    protected void getQueryForCustomConds(\n+            final SearchCond cond,\n+            final List<Object> parameters,\n+            final SearchSupport svs,\n+            final boolean not,\n+            final StringBuilder query) {\n+\n+        // do nothing by default, leave it open for subclasses\n+    }\n+\n     private Pair<StringBuilder, Set<String>> getQuery(\n             final SearchCond cond, final List<Object> parameters, final SearchSupport svs) {\n \n@@ -450,49 +461,66 @@ private Pair<StringBuilder, Set<String>> getQuery(\n         switch (cond.getType()) {\n             case LEAF:\n             case NOT_LEAF:\n-                if (cond.getAnyTypeCond() != null && AnyTypeKind.ANY_OBJECT == svs.anyTypeKind) {\n-                    query.append(getQuery(cond.getAnyTypeCond(), not, parameters, svs));\n-                } else if (cond.getRelationshipTypeCond() != null\n-                        && (AnyTypeKind.USER == svs.anyTypeKind || AnyTypeKind.ANY_OBJECT == svs.anyTypeKind)) {\n-\n-                    query.append(getQuery(cond.getRelationshipTypeCond(), not, parameters, svs));\n-                } else if (cond.getRelationshipCond() != null\n-                        && (AnyTypeKind.USER == svs.anyTypeKind || AnyTypeKind.ANY_OBJECT == svs.anyTypeKind)) {\n-\n-                    query.append(getQuery(cond.getRelationshipCond(), not, parameters, svs));\n-                } else if (cond.getMembershipCond() != null\n-                        && (AnyTypeKind.USER == svs.anyTypeKind || AnyTypeKind.ANY_OBJECT == svs.anyTypeKind)) {\n-\n-                    query.append(getQuery(cond.getMembershipCond(), not, parameters, svs));\n-                } else if (cond.getAssignableCond() != null) {\n-                    query.append(getQuery(cond.getAssignableCond(), parameters, svs));\n-                } else if (cond.getRoleCond() != null && AnyTypeKind.USER == svs.anyTypeKind) {\n-                    query.append(getQuery(cond.getRoleCond(), not, parameters, svs));\n-                } else if (cond.getPrivilegeCond() != null && AnyTypeKind.USER == svs.anyTypeKind) {\n-                    query.append(getQuery(cond.getPrivilegeCond(), not, parameters, svs));\n-                } else if (cond.getDynRealmCond() != null) {\n-                    query.append(getQuery(cond.getDynRealmCond(), not, parameters, svs));\n-                } else if (cond.getMemberCond() != null && AnyTypeKind.GROUP == svs.anyTypeKind) {\n-                    query.append(getQuery(cond.getMemberCond(), not, parameters, svs));\n-                } else if (cond.getResourceCond() != null) {\n-                    query.append(getQuery(cond.getResourceCond(), not, parameters, svs));\n-                } else if (cond.getAttributeCond() != null) {\n-                    query.append(getQuery(cond.getAttributeCond(), not, parameters, svs));\n-                    try {\n-                        involvedPlainAttrs.add(check(cond.getAttributeCond(), svs.anyTypeKind).getLeft().getKey());\n-                    } catch (IllegalArgumentException e) {\n-                        // ignore\n-                    }\n-                } else if (cond.getAnyCond() != null) {\n-                    query.append(getQuery(cond.getAnyCond(), not, parameters, svs));\n+                cond.getLeaf(AnyTypeCond.class).\n+                        filter(leaf -> AnyTypeKind.ANY_OBJECT == svs.anyTypeKind).\n+                        ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n+\n+                cond.getLeaf(RelationshipTypeCond.class).\n+                        filter(leaf -> AnyTypeKind.GROUP != svs.anyTypeKind).\n+                        ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n+\n+                cond.getLeaf(RelationshipCond.class).\n+                        filter(leaf -> AnyTypeKind.GROUP != svs.anyTypeKind).\n+                        ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n+\n+                cond.getLeaf(MembershipCond.class).\n+                        filter(leaf -> AnyTypeKind.GROUP != svs.anyTypeKind).\n+                        ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n+\n+                cond.getLeaf(MemberCond.class).\n+                        filter(leaf -> AnyTypeKind.GROUP == svs.anyTypeKind).\n+                        ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n+\n+                cond.getLeaf(AssignableCond.class).\n+                        ifPresent(leaf -> query.append(getQuery(leaf, parameters, svs)));\n+\n+                cond.getLeaf(RoleCond.class).\n+                        filter(leaf -> AnyTypeKind.USER == svs.anyTypeKind).\n+                        ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n+\n+                cond.getLeaf(PrivilegeCond.class).\n+                        filter(leaf -> AnyTypeKind.USER == svs.anyTypeKind).\n+                        ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n+\n+                cond.getLeaf(DynRealmCond.class).\n+                        ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n+\n+                cond.getLeaf(ResourceCond.class).\n+                        ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n+\n+                Optional<AnyCond> anyCond = cond.getLeaf(AnyCond.class);\n+                if (anyCond.isPresent()) {\n+                    query.append(getQuery(anyCond.get(), not, parameters, svs));\n+                } else {\n+                    cond.getLeaf(AttrCond.class).ifPresent(leaf -> {\n+                        query.append(getQuery(leaf, not, parameters, svs));\n+                        try {\n+                            involvedPlainAttrs.add(check(leaf, svs.anyTypeKind).getLeft().getKey());\n+                        } catch (IllegalArgumentException e) {\n+                            // ignore\n+                        }\n+                    });\n                 }\n+\n+                // allow for additional search conditions\n+                getQueryForCustomConds(cond, parameters, svs, not, query);\n                 break;\n \n             case AND:\n-                Pair<StringBuilder, Set<String>> leftAndInfo = getQuery(cond.getLeftSearchCond(), parameters, svs);\n+                Pair<StringBuilder, Set<String>> leftAndInfo = getQuery(cond.getLeft(), parameters, svs);\n                 involvedPlainAttrs.addAll(leftAndInfo.getRight());\n \n-                Pair<StringBuilder, Set<String>> rigthAndInfo = getQuery(cond.getRightSearchCond(), parameters, svs);\n+                Pair<StringBuilder, Set<String>> rigthAndInfo = getQuery(cond.getRight(), parameters, svs);\n                 involvedPlainAttrs.addAll(rigthAndInfo.getRight());\n \n                 String andSubQuery = leftAndInfo.getKey().toString();\n@@ -505,10 +533,10 @@ private Pair<StringBuilder, Set<String>> getQuery(\n                 break;\n \n             case OR:\n-                Pair<StringBuilder, Set<String>> leftOrInfo = getQuery(cond.getLeftSearchCond(), parameters, svs);\n+                Pair<StringBuilder, Set<String>> leftOrInfo = getQuery(cond.getLeft(), parameters, svs);\n                 involvedPlainAttrs.addAll(leftOrInfo.getRight());\n \n-                Pair<StringBuilder, Set<String>> rigthOrInfo = getQuery(cond.getRightSearchCond(), parameters, svs);\n+                Pair<StringBuilder, Set<String>> rigthOrInfo = getQuery(cond.getRight(), parameters, svs);\n                 involvedPlainAttrs.addAll(rigthOrInfo.getRight());\n \n                 String orSubQuery = leftOrInfo.getKey().toString();\n@@ -527,10 +555,10 @@ private Pair<StringBuilder, Set<String>> getQuery(\n     }\n \n     protected static String getQuery(\n-        final AnyTypeCond cond,\n-        final boolean not,\n-        final List<Object> parameters,\n-        final SearchSupport svs) {\n+            final AnyTypeCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE type_id\");\n@@ -547,10 +575,10 @@ protected static String getQuery(\n     }\n \n     protected static String getQuery(\n-        final RelationshipTypeCond cond,\n-        final boolean not,\n-        final List<Object> parameters,\n-        final SearchSupport svs) {\n+            final RelationshipTypeCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE \");\n@@ -644,10 +672,10 @@ protected String getQuery(\n     }\n \n     protected static String getQuery(\n-        final RoleCond cond,\n-        final boolean not,\n-        final List<Object> parameters,\n-        final SearchSupport svs) {\n+            final RoleCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE (\");\n@@ -678,10 +706,10 @@ protected static String getQuery(\n     }\n \n     protected static String getQuery(\n-        final PrivilegeCond cond,\n-        final boolean not,\n-        final List<Object> parameters,\n-        final SearchSupport svs) {\n+            final PrivilegeCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE (\");\n@@ -712,10 +740,10 @@ protected static String getQuery(\n     }\n \n     protected static String getQuery(\n-        final DynRealmCond cond,\n-        final boolean not,\n-        final List<Object> parameters,\n-        final SearchSupport svs) {\n+            final DynRealmCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE (\");\n@@ -735,10 +763,10 @@ protected static String getQuery(\n     }\n \n     protected static String getQuery(\n-        final ResourceCond cond,\n-        final boolean not,\n-        final List<Object> parameters,\n-        final SearchSupport svs) {\n+            final ResourceCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE \");\n@@ -837,18 +865,18 @@ protected String getQuery(\n     }\n \n     private static void fillAttrQuery(\n-        final StringBuilder query,\n-        final PlainAttrValue attrValue,\n-        final PlainSchema schema,\n-        final AttributeCond cond,\n-        final boolean not,\n-        final List<Object> parameters,\n-        final SearchSupport svs) {\n+            final StringBuilder query,\n+            final PlainAttrValue attrValue,\n+            final PlainSchema schema,\n+            final AttrCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n \n         // This first branch is required for handling with not conditions given on multivalue fields (SYNCOPE-1419)\n         if (not && schema.isMultivalue()\n                 && !(cond instanceof AnyCond)\n-                && cond.getType() != AttributeCond.Type.ISNULL && cond.getType() != AttributeCond.Type.ISNOTNULL) {\n+                && cond.getType() != AttrCond.Type.ISNULL && cond.getType() != AttrCond.Type.ISNOTNULL) {\n \n             query.append(\"any_id NOT IN (SELECT DISTINCT any_id FROM \");\n             if (schema.isUniqueConstraint()) {\n@@ -861,7 +889,7 @@ private static void fillAttrQuery(\n             query.append(')');\n         } else {\n             // activate ignoreCase only for EQ and LIKE operators\n-            boolean ignoreCase = AttributeCond.Type.ILIKE == cond.getType() || AttributeCond.Type.IEQ == cond.getType();\n+            boolean ignoreCase = AttrCond.Type.ILIKE == cond.getType() || AttrCond.Type.IEQ == cond.getType();\n \n             String column = (cond instanceof AnyCond) ? cond.getSchema() : key(schema.getType());\n             if ((schema.getType() == AttrSchemaType.String || schema.getType() == AttrSchemaType.Enum) && ignoreCase) {\n@@ -969,7 +997,7 @@ private static void fillAttrQuery(\n     }\n \n     protected String getQuery(\n-            final AttributeCond cond,\n+            final AttrCond cond,\n             final boolean not,\n             final List<Object> parameters,\n             final SearchSupport svs) {"},{"sha":"837e04360cf7c438a09a07c24f645b5ceb951ac4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -38,6 +38,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n \n @Repository\n public class JPADynRealmDAO extends AbstractDAO<DynRealm> implements DynRealmDAO {\n@@ -62,6 +63,9 @@ public class JPADynRealmDAO extends AbstractDAO<DynRealm> implements DynRealmDAO\n     @Autowired\n     private AnyMatchDAO anyMatchDAO;\n \n+    @Autowired\n+    private SearchCondVisitor searchCondVisitor;\n+\n     @Override\n     public DynRealm find(final String key) {\n         return entityManager().find(JPADynRealm.class, key);\n@@ -121,7 +125,7 @@ public DynRealm saveAndRefreshDynMemberships(final DynRealm dynRealm) {\n         List<String> cleared = clearDynMembers(merged);\n \n         merged.getDynMemberships().stream().map(memb -> searchDAO.search(\n-                SearchCondConverter.convert(memb.getFIQLCond()), memb.getAnyType().getKind())).\n+                SearchCondConverter.convert(searchCondVisitor, memb.getFIQLCond()), memb.getAnyType().getKind())).\n                 forEach(matching -> matching.forEach(any -> {\n \n             Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n@@ -154,7 +158,8 @@ public void delete(final String key) {\n     @Override\n     public void refreshDynMemberships(final Any<?> any) {\n         findAll().forEach(dynRealm -> dynRealm.getDynMembership(any.getType()).ifPresent(memb -> {\n-            boolean matches = anyMatchDAO.matches(any, SearchCondConverter.convert(memb.getFIQLCond()));\n+            boolean matches = anyMatchDAO.matches(\n+                    any, SearchCondConverter.convert(searchCondVisitor, memb.getFIQLCond()));\n \n             Query find = entityManager().createNativeQuery(\n                     \"SELECT dynRealm_id FROM \" + DYNMEMB_TABLE + \" WHERE any_id=?\");"},{"sha":"0e2999003cbe6c9f4335c47ca04e96c94c0f091b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -56,6 +56,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n@@ -91,6 +92,9 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {\n     @Autowired\n     private AnySearchDAO searchDAO;\n \n+    @Autowired\n+    private SearchCondVisitor searchCondVisitor;\n+\n     @Override\n     protected AnyUtils init() {\n         return anyUtilsFactory.getInstance(AnyTypeKind.GROUP);\n@@ -232,12 +236,14 @@ public List<String> findAllKeys(final int page, final int itemsPerPage) {\n         return findAllKeys(JPAGroup.TABLE, page, itemsPerPage);\n     }\n \n-    private static SearchCond buildDynMembershipCond(final String baseCondFIQL, final Realm groupRealm) {\n+    private SearchCond buildDynMembershipCond(final String baseCondFIQL, final Realm groupRealm) {\n         AssignableCond cond = new AssignableCond();\n         cond.setRealmFullPath(groupRealm.getFullPath());\n         cond.setFromGroup(true);\n \n-        return SearchCond.getAndCond(SearchCond.getLeafCond(cond), SearchCondConverter.convert(baseCondFIQL));\n+        return SearchCond.getAnd(\n+                SearchCond.getLeaf(cond),\n+                SearchCondConverter.convert(searchCondVisitor, baseCondFIQL));\n     }\n \n     @Override"},{"sha":"27928cd40b884c8d56ea228d0f21dc8329d4754f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n import org.apache.syncope.core.persistence.jpa.entity.JPARole;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n@@ -54,6 +55,9 @@ public class JPARoleDAO extends AbstractDAO<Role> implements RoleDAO {\n     @Autowired\n     private AnySearchDAO searchDAO;\n \n+    @Autowired\n+    private SearchCondVisitor searchCondVisitor;\n+\n     @Override\n     public int count() {\n         Query query = entityManager().createQuery(\n@@ -103,7 +107,8 @@ public Role saveAndRefreshDynMemberships(final Role role) {\n         clearDynMembers(merged);\n         if (merged.getDynMembership() != null) {\n             List<User> matching = searchDAO.search(\n-                    SearchCondConverter.convert(merged.getDynMembership().getFIQLCond()), AnyTypeKind.USER);\n+                    SearchCondConverter.convert(searchCondVisitor, merged.getDynMembership().getFIQLCond()),\n+                    AnyTypeKind.USER);\n \n             matching.forEach((user) -> {\n                 Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n@@ -177,8 +182,8 @@ public void refreshDynMemberships(final User user) {\n         query.setParameter(1, user.getKey());\n \n         findAll().stream().filter(role -> role.getDynMembership() != null).forEach(role -> {\n-            boolean matches =\n-                    anyMatchDAO.matches(user, SearchCondConverter.convert(role.getDynMembership().getFIQLCond()));\n+            boolean matches = anyMatchDAO.matches(\n+                    user, SearchCondConverter.convert(searchCondVisitor, role.getDynMembership().getFIQLCond()));\n \n             Query find = entityManager().createNativeQuery(\n                     \"SELECT any_id FROM \" + DYNMEMB_TABLE + \" WHERE role_id=?\");"},{"sha":"1101039b566a878d7104a5c792f1d215e3c7e0ec","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARole.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -89,7 +89,7 @@ public class JPARole extends AbstractProvidedKeyEntity implements Role {\n     private JPADynRoleMembership dynMembership;\n \n     @Lob\n-    private String consoleLayoutInfo;\n+    private String anyLayout;\n \n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(joinColumns =\n@@ -140,13 +140,13 @@ public void setDynMembership(final DynRoleMembership dynMembership) {\n     }\n \n     @Override\n-    public String getConsoleLayoutInfo() {\n-        return consoleLayoutInfo;\n+    public String getAnyLayout() {\n+        return anyLayout;\n     }\n \n     @Override\n-    public void setConsoleLayoutInfo(final String consoleLayoutInfo) {\n-        this.consoleLayoutInfo = consoleLayoutInfo;\n+    public void setAnyLayout(final String anyLayout) {\n+        this.anyLayout = anyLayout;\n     }\n \n     @Override"},{"sha":"ac6d8a8182cc61758e0577f2b96f79ab3095c2f1","filename":"core/persistence-jpa/src/main/resources/persistence.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -20,6 +20,7 @@ plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainSchemaDAO\n plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrDAO\n plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrValueDAO\n any.search.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnySearchDAO\n+any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisitor\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO"},{"sha":"8c60f6eaea43cbfd4acf0c7d952313fb70b83ac2","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyMatchTest.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyMatchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyMatchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyMatchTest.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n@@ -64,10 +64,10 @@ public void byResourceCond() {\n \n         ResourceCond resourceCond = new ResourceCond();\n         resourceCond.setResourceKey(\"resource-testdb2\");\n-        assertTrue(anyMatcher.matches(user, SearchCond.getLeafCond(resourceCond)));\n+        assertTrue(anyMatcher.matches(user, SearchCond.getLeaf(resourceCond)));\n \n         resourceCond.setResourceKey(\"ws-target-resource-delete\");\n-        assertFalse(anyMatcher.matches(user, SearchCond.getLeafCond(resourceCond)));\n+        assertFalse(anyMatcher.matches(user, SearchCond.getLeaf(resourceCond)));\n     }\n \n     @Test\n@@ -77,11 +77,11 @@ public void anyObjectMatch() {\n \n         RelationshipCond relationshipCond = new RelationshipCond();\n         relationshipCond.setAnyObject(\"Canon MF 8030cn\");\n-        assertTrue(anyMatcher.matches(anyObject, SearchCond.getLeafCond(relationshipCond)));\n+        assertTrue(anyMatcher.matches(anyObject, SearchCond.getLeaf(relationshipCond)));\n \n         RelationshipTypeCond relationshipTypeCond = new RelationshipTypeCond();\n         relationshipTypeCond.setRelationshipTypeKey(\"neighborhood\");\n-        assertTrue(anyMatcher.matches(anyObject, SearchCond.getLeafCond(relationshipTypeCond)));\n+        assertTrue(anyMatcher.matches(anyObject, SearchCond.getLeaf(relationshipTypeCond)));\n     }\n \n     @Test\n@@ -91,25 +91,25 @@ public void userMatch() {\n \n         MembershipCond groupCond = new MembershipCond();\n         groupCond.setGroup(\"secretary\");\n-        assertFalse(anyMatcher.matches(user, SearchCond.getLeafCond(groupCond)));\n+        assertFalse(anyMatcher.matches(user, SearchCond.getLeaf(groupCond)));\n \n         groupCond.setGroup(\"root\");\n-        assertTrue(anyMatcher.matches(user, SearchCond.getLeafCond(groupCond)));\n+        assertTrue(anyMatcher.matches(user, SearchCond.getLeaf(groupCond)));\n \n         RoleCond roleCond = new RoleCond();\n         roleCond.setRole(\"Other\");\n-        assertTrue(anyMatcher.matches(user, SearchCond.getLeafCond(roleCond)));\n+        assertTrue(anyMatcher.matches(user, SearchCond.getLeaf(roleCond)));\n \n         user = userDAO.find(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\");\n         assertNotNull(user);\n \n         RelationshipCond relationshipCond = new RelationshipCond();\n         relationshipCond.setAnyObject(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\");\n-        assertTrue(anyMatcher.matches(user, SearchCond.getLeafCond(relationshipCond)));\n+        assertTrue(anyMatcher.matches(user, SearchCond.getLeaf(relationshipCond)));\n \n         RelationshipTypeCond relationshipTypeCond = new RelationshipTypeCond();\n         relationshipTypeCond.setRelationshipTypeKey(\"neighborhood\");\n-        assertTrue(anyMatcher.matches(user, SearchCond.getLeafCond(relationshipTypeCond)));\n+        assertTrue(anyMatcher.matches(user, SearchCond.getLeaf(relationshipTypeCond)));\n     }\n \n     @Test\n@@ -120,12 +120,12 @@ public void groupMatch() {\n         AnyCond anyCond = new AnyCond();\n         anyCond.setSchema(\"name\");\n         anyCond.setExpression(\"root\");\n-        anyCond.setType(AttributeCond.Type.EQ);\n-        assertTrue(anyMatcher.matches(group, SearchCond.getLeafCond(anyCond)));\n+        anyCond.setType(AttrCond.Type.EQ);\n+        assertTrue(anyMatcher.matches(group, SearchCond.getLeaf(anyCond)));\n \n-        AttributeCond attrCond = new AttributeCond();\n+        AttrCond attrCond = new AttrCond();\n         attrCond.setSchema(\"show\");\n-        attrCond.setType(AttributeCond.Type.ISNOTNULL);\n-        assertTrue(anyMatcher.matches(group, SearchCond.getLeafCond(attrCond)));\n+        attrCond.setType(AttrCond.Type.ISNOTNULL);\n+        assertTrue(anyMatcher.matches(group, SearchCond.getLeaf(attrCond)));\n     }\n }"},{"sha":"733233fde997a4b01c800ff02daec505898fa380","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":89,"deletions":89,"changes":178,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -34,7 +34,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.ResourceCond;\n@@ -77,23 +77,23 @@ public class AnySearchTest extends AbstractTest {\n \n     @Test\n     public void searchWithLikeCondition() {\n-        AttributeCond fullnameLeafCond = new AttributeCond(AttributeCond.Type.LIKE);\n+        AttrCond fullnameLeafCond = new AttrCond(AttrCond.Type.LIKE);\n         fullnameLeafCond.setSchema(\"fullname\");\n         fullnameLeafCond.setExpression(\"%o%\");\n \n         MembershipCond groupCond = new MembershipCond();\n         groupCond.setGroup(\"root\");\n \n-        AttributeCond loginDateCond = new AttributeCond(AttributeCond.Type.EQ);\n+        AttrCond loginDateCond = new AttrCond(AttrCond.Type.EQ);\n         loginDateCond.setSchema(\"loginDate\");\n         loginDateCond.setExpression(\"2009-05-26\");\n \n-        SearchCond subCond = SearchCond.getAndCond(\n-                SearchCond.getLeafCond(fullnameLeafCond), SearchCond.getLeafCond(groupCond));\n+        SearchCond subCond = SearchCond.getAnd(\n+                SearchCond.getLeaf(fullnameLeafCond), SearchCond.getLeaf(groupCond));\n \n         assertTrue(subCond.isValid());\n \n-        SearchCond cond = SearchCond.getAndCond(subCond, SearchCond.getLeafCond(loginDateCond));\n+        SearchCond cond = SearchCond.getAnd(subCond, SearchCond.getLeaf(loginDateCond));\n \n         assertTrue(cond.isValid());\n \n@@ -104,23 +104,23 @@ public void searchWithLikeCondition() {\n \n     @Test\n     public void searchCaseInsensitiveWithLikeCondition() {\n-        AttributeCond fullnameLeafCond = new AttributeCond(AttributeCond.Type.ILIKE);\n+        AttrCond fullnameLeafCond = new AttrCond(AttrCond.Type.ILIKE);\n         fullnameLeafCond.setSchema(\"fullname\");\n         fullnameLeafCond.setExpression(\"%O%\");\n \n         MembershipCond groupCond = new MembershipCond();\n         groupCond.setGroup(\"root\");\n \n-        AttributeCond loginDateCond = new AttributeCond(AttributeCond.Type.EQ);\n+        AttrCond loginDateCond = new AttrCond(AttrCond.Type.EQ);\n         loginDateCond.setSchema(\"loginDate\");\n         loginDateCond.setExpression(\"2009-05-26\");\n \n-        SearchCond subCond = SearchCond.getAndCond(\n-                SearchCond.getLeafCond(fullnameLeafCond), SearchCond.getLeafCond(groupCond));\n+        SearchCond subCond = SearchCond.getAnd(\n+                SearchCond.getLeaf(fullnameLeafCond), SearchCond.getLeaf(groupCond));\n \n         assertTrue(subCond.isValid());\n \n-        SearchCond cond = SearchCond.getAndCond(subCond, SearchCond.getLeafCond(loginDateCond));\n+        SearchCond cond = SearchCond.getAnd(subCond, SearchCond.getLeaf(loginDateCond));\n \n         assertTrue(cond.isValid());\n \n@@ -131,11 +131,11 @@ public void searchCaseInsensitiveWithLikeCondition() {\n \n     @Test\n     public void searchWithNotCondition() {\n-        AttributeCond fullnameLeafCond = new AttributeCond(AttributeCond.Type.EQ);\n+        AttrCond fullnameLeafCond = new AttrCond(AttrCond.Type.EQ);\n         fullnameLeafCond.setSchema(\"fullname\");\n         fullnameLeafCond.setExpression(\"Giuseppe Verdi\");\n \n-        SearchCond cond = SearchCond.getNotLeafCond(fullnameLeafCond);\n+        SearchCond cond = SearchCond.getNotLeaf(fullnameLeafCond);\n         assertTrue(cond.isValid());\n \n         List<User> users = searchDAO.search(cond, AnyTypeKind.USER);\n@@ -149,11 +149,11 @@ public void searchWithNotCondition() {\n \n     @Test\n     public void searchCaseInsensitiveWithNotCondition() {\n-        AttributeCond fullnameLeafCond = new AttributeCond(AttributeCond.Type.IEQ);\n+        AttrCond fullnameLeafCond = new AttrCond(AttrCond.Type.IEQ);\n         fullnameLeafCond.setSchema(\"fullname\");\n         fullnameLeafCond.setExpression(\"giuseppe verdi\");\n \n-        SearchCond cond = SearchCond.getNotLeafCond(fullnameLeafCond);\n+        SearchCond cond = SearchCond.getNotLeaf(fullnameLeafCond);\n         assertTrue(cond.isValid());\n \n         List<User> users = searchDAO.search(cond, AnyTypeKind.USER);\n@@ -167,11 +167,11 @@ public void searchCaseInsensitiveWithNotCondition() {\n \n     @Test\n     public void searchByBoolean() {\n-        AttributeCond coolLeafCond = new AttributeCond(AttributeCond.Type.EQ);\n+        AttrCond coolLeafCond = new AttrCond(AttrCond.Type.EQ);\n         coolLeafCond.setSchema(\"cool\");\n         coolLeafCond.setExpression(\"true\");\n \n-        SearchCond cond = SearchCond.getLeafCond(coolLeafCond);\n+        SearchCond cond = SearchCond.getLeaf(coolLeafCond);\n         assertTrue(cond.isValid());\n \n         List<User> users = searchDAO.search(cond, AnyTypeKind.USER);\n@@ -183,23 +183,23 @@ public void searchByBoolean() {\n \n     @Test\n     public void searchByPageAndSize() {\n-        AttributeCond fullnameLeafCond = new AttributeCond(AttributeCond.Type.LIKE);\n+        AttrCond fullnameLeafCond = new AttrCond(AttrCond.Type.LIKE);\n         fullnameLeafCond.setSchema(\"fullname\");\n         fullnameLeafCond.setExpression(\"%o%\");\n \n         MembershipCond groupCond = new MembershipCond();\n         groupCond.setGroup(\"root\");\n \n-        AttributeCond loginDateCond = new AttributeCond(AttributeCond.Type.EQ);\n+        AttrCond loginDateCond = new AttrCond(AttrCond.Type.EQ);\n         loginDateCond.setSchema(\"loginDate\");\n         loginDateCond.setExpression(\"2009-05-26\");\n \n-        SearchCond subCond = SearchCond.getAndCond(\n-                SearchCond.getLeafCond(fullnameLeafCond), SearchCond.getLeafCond(groupCond));\n+        SearchCond subCond = SearchCond.getAnd(\n+                SearchCond.getLeaf(fullnameLeafCond), SearchCond.getLeaf(groupCond));\n \n         assertTrue(subCond.isValid());\n \n-        SearchCond cond = SearchCond.getAndCond(subCond, SearchCond.getLeafCond(loginDateCond));\n+        SearchCond cond = SearchCond.getAnd(subCond, SearchCond.getLeaf(loginDateCond));\n \n         assertTrue(cond.isValid());\n \n@@ -221,14 +221,14 @@ public void searchByGroup() {\n         MembershipCond groupCond = new MembershipCond();\n         groupCond.setGroup(\"root\");\n \n-        List<User> users = searchDAO.search(SearchCond.getLeafCond(groupCond), AnyTypeKind.USER);\n+        List<User> users = searchDAO.search(SearchCond.getLeaf(groupCond), AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(2, users.size());\n \n         groupCond = new MembershipCond();\n         groupCond.setGroup(\"secretary\");\n \n-        users = searchDAO.search(SearchCond.getNotLeafCond(groupCond), AnyTypeKind.USER);\n+        users = searchDAO.search(SearchCond.getNotLeaf(groupCond), AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(5, users.size());\n     }\n@@ -238,7 +238,7 @@ public void searchByRole() {\n         RoleCond roleCond = new RoleCond();\n         roleCond.setRole(\"Other\");\n \n-        List<User> users = searchDAO.search(SearchCond.getLeafCond(roleCond), AnyTypeKind.USER);\n+        List<User> users = searchDAO.search(SearchCond.getLeaf(roleCond), AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n     }\n@@ -248,24 +248,24 @@ public void searchByPrivilege() {\n         PrivilegeCond privilegeCond = new PrivilegeCond();\n         privilegeCond.setPrivilege(\"postMighty\");\n \n-        List<User> users = searchDAO.search(SearchCond.getLeafCond(privilegeCond), AnyTypeKind.USER);\n+        List<User> users = searchDAO.search(SearchCond.getLeaf(privilegeCond), AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n     }\n \n     @Test\n     public void searchByIsNull() {\n-        AttributeCond coolLeafCond = new AttributeCond(AttributeCond.Type.ISNULL);\n+        AttrCond coolLeafCond = new AttrCond(AttrCond.Type.ISNULL);\n         coolLeafCond.setSchema(\"cool\");\n \n-        List<User> users = searchDAO.search(SearchCond.getLeafCond(coolLeafCond), AnyTypeKind.USER);\n+        List<User> users = searchDAO.search(SearchCond.getLeaf(coolLeafCond), AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(4, users.size());\n \n-        coolLeafCond = new AttributeCond(AttributeCond.Type.ISNOTNULL);\n+        coolLeafCond = new AttrCond(AttrCond.Type.ISNOTNULL);\n         coolLeafCond.setSchema(\"cool\");\n \n-        users = searchDAO.search(SearchCond.getLeafCond(coolLeafCond), AnyTypeKind.USER);\n+        users = searchDAO.search(SearchCond.getLeaf(coolLeafCond), AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n     }\n@@ -278,7 +278,7 @@ public void searchByResource() {\n         ResourceCond ws1 = new ResourceCond();\n         ws1.setResourceKey(\"ws-target-resource-list-mappings-2\");\n \n-        SearchCond searchCondition = SearchCond.getAndCond(SearchCond.getNotLeafCond(ws2), SearchCond.getLeafCond(ws1));\n+        SearchCond searchCondition = SearchCond.getAnd(SearchCond.getNotLeaf(ws2), SearchCond.getLeaf(ws1));\n         assertTrue(searchCondition.isValid());\n \n         List<User> users = searchDAO.search(searchCondition, AnyTypeKind.USER);\n@@ -288,11 +288,11 @@ public void searchByResource() {\n \n     @Test\n     public void searchByBooleanAnyCond() {\n-        AttributeCond booleanCond = new AttributeCond(AnyCond.Type.EQ);\n+        AttrCond booleanCond = new AttrCond(AnyCond.Type.EQ);\n         booleanCond.setSchema(\"show\");\n         booleanCond.setExpression(\"true\");\n \n-        List<Group> matchingGroups = searchDAO.search(SearchCond.getLeafCond(booleanCond), AnyTypeKind.GROUP);\n+        List<Group> matchingGroups = searchDAO.search(SearchCond.getLeaf(booleanCond), AnyTypeKind.GROUP);\n         assertNotNull(matchingGroups);\n         assertFalse(matchingGroups.isEmpty());\n     }\n@@ -307,9 +307,9 @@ public void searchByUsernameAndKey() {\n         idRightCond.setSchema(\"key\");\n         idRightCond.setExpression(\"2\");\n \n-        SearchCond searchCondition = SearchCond.getAndCond(\n-                SearchCond.getLeafCond(usernameLeafCond),\n-                SearchCond.getLeafCond(idRightCond));\n+        SearchCond searchCondition = SearchCond.getAnd(\n+                SearchCond.getLeaf(usernameLeafCond),\n+                SearchCond.getLeaf(idRightCond));\n \n         List<User> matching = searchDAO.search(searchCondition, AnyTypeKind.USER);\n         assertNotNull(matching);\n@@ -328,9 +328,9 @@ public void searchByGroupNameAndKey() {\n         idRightCond.setSchema(\"key\");\n         idRightCond.setExpression(\"37d15e4c-cdc1-460b-a591-8505c8133806\");\n \n-        SearchCond searchCondition = SearchCond.getAndCond(\n-                SearchCond.getLeafCond(groupNameLeafCond),\n-                SearchCond.getLeafCond(idRightCond));\n+        SearchCond searchCondition = SearchCond.getAnd(\n+                SearchCond.getLeaf(groupNameLeafCond),\n+                SearchCond.getLeaf(idRightCond));\n \n         assertTrue(searchCondition.isValid());\n \n@@ -347,13 +347,13 @@ public void searchByUsernameAndFullname() {\n         usernameLeafCond.setSchema(\"username\");\n         usernameLeafCond.setExpression(\"rossini\");\n \n-        AttributeCond idRightCond = new AttributeCond(AttributeCond.Type.LIKE);\n+        AttrCond idRightCond = new AttrCond(AttrCond.Type.LIKE);\n         idRightCond.setSchema(\"fullname\");\n         idRightCond.setExpression(\"Giuseppe V%\");\n \n-        SearchCond searchCondition = SearchCond.getOrCond(\n-                SearchCond.getLeafCond(usernameLeafCond),\n-                SearchCond.getLeafCond(idRightCond));\n+        SearchCond searchCondition = SearchCond.getOr(\n+                SearchCond.getLeaf(usernameLeafCond),\n+                SearchCond.getLeaf(idRightCond));\n \n         List<User> matchingUsers = searchDAO.search(\n                 searchCondition, AnyTypeKind.USER);\n@@ -367,13 +367,13 @@ public void searchByUsernameAndFullnameIgnoreCase() {\n         usernameLeafCond.setSchema(\"username\");\n         usernameLeafCond.setExpression(\"RoSsini\");\n \n-        AttributeCond idRightCond = new AttributeCond(AttributeCond.Type.ILIKE);\n+        AttrCond idRightCond = new AttrCond(AttrCond.Type.ILIKE);\n         idRightCond.setSchema(\"fullname\");\n         idRightCond.setExpression(\"gIuseppe v%\");\n \n-        SearchCond searchCondition = SearchCond.getOrCond(\n-                SearchCond.getLeafCond(usernameLeafCond),\n-                SearchCond.getLeafCond(idRightCond));\n+        SearchCond searchCondition = SearchCond.getOr(\n+                SearchCond.getLeaf(usernameLeafCond),\n+                SearchCond.getLeaf(idRightCond));\n \n         List<User> matchingUsers = searchDAO.search(\n                 searchCondition, AnyTypeKind.USER);\n@@ -387,7 +387,7 @@ public void searchByKey() {\n         idLeafCond.setSchema(\"key\");\n         idLeafCond.setExpression(\"74cd8ece-715a-44a4-a736-e17b46c4e7e6\");\n \n-        SearchCond searchCondition = SearchCond.getLeafCond(idLeafCond);\n+        SearchCond searchCondition = SearchCond.getLeaf(idLeafCond);\n         assertTrue(searchCondition.isValid());\n \n         List<User> users = searchDAO.search(searchCondition, AnyTypeKind.USER);\n@@ -401,7 +401,7 @@ public void searchByType() {\n         AnyTypeCond tcond = new AnyTypeCond();\n         tcond.setAnyTypeKey(\"PRINTER\");\n \n-        SearchCond searchCondition = SearchCond.getLeafCond(tcond);\n+        SearchCond searchCondition = SearchCond.getLeaf(tcond);\n         assertTrue(searchCondition.isValid());\n \n         List<AnyObject> printers = searchDAO.search(searchCondition, AnyTypeKind.ANY_OBJECT);\n@@ -423,8 +423,8 @@ public void searchByRelationshipType() {\n         AnyTypeCond tcond = new AnyTypeCond();\n         tcond.setAnyTypeKey(\"PRINTER\");\n \n-        SearchCond searchCondition = SearchCond.getAndCond(\n-                SearchCond.getLeafCond(relationshipTypeCond), SearchCond.getLeafCond(tcond));\n+        SearchCond searchCondition = SearchCond.getAnd(\n+                SearchCond.getLeaf(relationshipTypeCond), SearchCond.getLeaf(tcond));\n         assertTrue(searchCondition.isValid());\n \n         List<AnyObject> anyObjects = searchDAO.search(searchCondition, AnyTypeKind.ANY_OBJECT);\n@@ -434,7 +434,7 @@ public void searchByRelationshipType() {\n         assertTrue(anyObjects.stream().anyMatch(any -> \"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\".equals(any.getKey())));\n \n         // 2. search for users involved in \"neighborhood\" relationship\n-        searchCondition = SearchCond.getLeafCond(relationshipTypeCond);\n+        searchCondition = SearchCond.getLeaf(relationshipTypeCond);\n         List<User> users = searchDAO.search(searchCondition, AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n@@ -446,11 +446,11 @@ public void userOrderBy() {\n         AnyCond usernameLeafCond = new AnyCond(AnyCond.Type.EQ);\n         usernameLeafCond.setSchema(\"username\");\n         usernameLeafCond.setExpression(\"rossini\");\n-        AttributeCond idRightCond = new AttributeCond(AttributeCond.Type.LIKE);\n+        AttrCond idRightCond = new AttrCond(AttrCond.Type.LIKE);\n         idRightCond.setSchema(\"fullname\");\n         idRightCond.setExpression(\"Giuseppe V%\");\n-        SearchCond searchCondition = SearchCond.getOrCond(\n-                SearchCond.getLeafCond(usernameLeafCond), SearchCond.getLeafCond(idRightCond));\n+        SearchCond searchCondition = SearchCond.getOr(\n+                SearchCond.getLeaf(usernameLeafCond), SearchCond.getLeaf(idRightCond));\n \n         List<OrderByClause> orderByClauses = new ArrayList<>();\n         OrderByClause orderByClause = new OrderByClause();\n@@ -473,7 +473,7 @@ public void groupOrderBy() {\n         AnyCond idLeafCond = new AnyCond(AnyCond.Type.LIKE);\n         idLeafCond.setSchema(\"name\");\n         idLeafCond.setExpression(\"%r\");\n-        SearchCond searchCondition = SearchCond.getLeafCond(idLeafCond);\n+        SearchCond searchCondition = SearchCond.getLeaf(idLeafCond);\n         assertTrue(searchCondition.isValid());\n \n         OrderByClause orderByClause = new OrderByClause();\n@@ -490,7 +490,7 @@ public void groupOrderBy() {\n     public void assignable() {\n         AssignableCond assignableCond = new AssignableCond();\n         assignableCond.setRealmFullPath(\"/even/two\");\n-        SearchCond searchCondition = SearchCond.getLeafCond(assignableCond);\n+        SearchCond searchCondition = SearchCond.getLeaf(assignableCond);\n         assertTrue(searchCondition.isValid());\n \n         List<Group> groups = searchDAO.search(searchCondition, AnyTypeKind.GROUP);\n@@ -499,7 +499,7 @@ public void assignable() {\n \n         assignableCond = new AssignableCond();\n         assignableCond.setRealmFullPath(\"/odd\");\n-        searchCondition = SearchCond.getLeafCond(assignableCond);\n+        searchCondition = SearchCond.getLeaf(assignableCond);\n         assertTrue(searchCondition.isValid());\n \n         List<AnyObject> anyObjects = searchDAO.search(searchCondition, AnyTypeKind.ANY_OBJECT);\n@@ -511,7 +511,7 @@ public void assignable() {\n     public void member() {\n         MemberCond memberCond = new MemberCond();\n         memberCond.setMember(\"1417acbe-cbf6-4277-9372-e75e04f97000\");\n-        SearchCond searchCondition = SearchCond.getLeafCond(memberCond);\n+        SearchCond searchCondition = SearchCond.getLeaf(memberCond);\n         assertTrue(searchCondition.isValid());\n \n         List<Group> groups = searchDAO.search(searchCondition, AnyTypeKind.GROUP);\n@@ -529,7 +529,7 @@ public void issue202() {\n         ws1.setResourceKey(\"ws-target-resource-list-mappings-1\");\n \n         SearchCond searchCondition =\n-                SearchCond.getAndCond(SearchCond.getNotLeafCond(ws2), SearchCond.getNotLeafCond(ws1));\n+                SearchCond.getAnd(SearchCond.getNotLeaf(ws2), SearchCond.getNotLeaf(ws1));\n         assertTrue(searchCondition.isValid());\n \n         List<User> users = searchDAO.search(searchCondition, AnyTypeKind.USER);\n@@ -540,11 +540,11 @@ public void issue202() {\n \n     @Test\n     public void issue242() {\n-        AnyCond cond = new AnyCond(AttributeCond.Type.LIKE);\n+        AnyCond cond = new AnyCond(AttrCond.Type.LIKE);\n         cond.setSchema(\"key\");\n         cond.setExpression(\"test%\");\n \n-        SearchCond searchCondition = SearchCond.getLeafCond(cond);\n+        SearchCond searchCondition = SearchCond.getLeaf(cond);\n         assertTrue(searchCondition.isValid());\n \n         List<User> users = searchDAO.search(searchCondition, AnyTypeKind.USER);\n@@ -554,11 +554,11 @@ public void issue242() {\n \n     @Test\n     public void issueSYNCOPE46() {\n-        AnyCond cond = new AnyCond(AttributeCond.Type.LIKE);\n+        AnyCond cond = new AnyCond(AttrCond.Type.LIKE);\n         cond.setSchema(\"username\");\n         cond.setExpression(\"%ossin%\");\n \n-        SearchCond searchCondition = SearchCond.getLeafCond(cond);\n+        SearchCond searchCondition = SearchCond.getLeaf(cond);\n         assertTrue(searchCondition.isValid());\n \n         List<User> users = searchDAO.search(searchCondition, AnyTypeKind.USER);\n@@ -568,15 +568,15 @@ public void issueSYNCOPE46() {\n \n     @Test\n     public void issueSYNCOPE433() {\n-        AttributeCond isNullCond = new AttributeCond(AttributeCond.Type.ISNULL);\n+        AttrCond isNullCond = new AttrCond(AttrCond.Type.ISNULL);\n         isNullCond.setSchema(\"loginDate\");\n \n-        AnyCond likeCond = new AnyCond(AttributeCond.Type.LIKE);\n+        AnyCond likeCond = new AnyCond(AttrCond.Type.LIKE);\n         likeCond.setSchema(\"username\");\n         likeCond.setExpression(\"%ossin%\");\n \n-        SearchCond searchCond = SearchCond.getOrCond(\n-                SearchCond.getLeafCond(isNullCond), SearchCond.getLeafCond(likeCond));\n+        SearchCond searchCond = SearchCond.getOr(\n+                SearchCond.getLeaf(isNullCond), SearchCond.getLeaf(likeCond));\n \n         Integer count = searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, searchCond, AnyTypeKind.USER);\n         assertNotNull(count);\n@@ -585,24 +585,24 @@ public void issueSYNCOPE433() {\n \n     @Test\n     public void issueSYNCOPE929() {\n-        AttributeCond rossiniCond = new AttributeCond(AttributeCond.Type.EQ);\n+        AttrCond rossiniCond = new AttrCond(AttrCond.Type.EQ);\n         rossiniCond.setSchema(\"surname\");\n         rossiniCond.setExpression(\"Rossini\");\n \n-        AttributeCond genderCond = new AttributeCond(AttributeCond.Type.EQ);\n+        AttrCond genderCond = new AttrCond(AttrCond.Type.EQ);\n         genderCond.setSchema(\"gender\");\n         genderCond.setExpression(\"M\");\n \n         SearchCond orCond =\n-                SearchCond.getOrCond(SearchCond.getLeafCond(rossiniCond),\n-                        SearchCond.getLeafCond(genderCond));\n+                SearchCond.getOr(SearchCond.getLeaf(rossiniCond),\n+                        SearchCond.getLeaf(genderCond));\n \n-        AttributeCond belliniCond = new AttributeCond(AttributeCond.Type.EQ);\n+        AttrCond belliniCond = new AttrCond(AttrCond.Type.EQ);\n         belliniCond.setSchema(\"surname\");\n         belliniCond.setExpression(\"Bellini\");\n \n         SearchCond searchCond =\n-                SearchCond.getAndCond(orCond, SearchCond.getLeafCond(belliniCond));\n+                SearchCond.getAnd(orCond, SearchCond.getLeaf(belliniCond));\n \n         List<User> users = searchDAO.search(searchCond, AnyTypeKind.USER);\n         assertNotNull(users);\n@@ -643,24 +643,24 @@ public void issueSYNCOPE980() {\n         MembershipCond groupCond = new MembershipCond();\n         groupCond.setGroup(\"citizen\");\n \n-        SearchCond searchCondition = SearchCond.getLeafCond(groupCond);\n+        SearchCond searchCondition = SearchCond.getLeaf(groupCond);\n \n         List<AnyObject> matching = searchDAO.search(searchCondition, AnyTypeKind.ANY_OBJECT);\n         assertEquals(2, matching.size());\n \n         AnyTypeCond anyTypeCond = new AnyTypeCond();\n         anyTypeCond.setAnyTypeKey(service.getKey());\n \n-        searchCondition = SearchCond.getAndCond(\n-                SearchCond.getLeafCond(groupCond), SearchCond.getLeafCond(anyTypeCond));\n+        searchCondition = SearchCond.getAnd(\n+                SearchCond.getLeaf(groupCond), SearchCond.getLeaf(anyTypeCond));\n \n         matching = searchDAO.search(searchCondition, AnyTypeKind.ANY_OBJECT);\n         assertEquals(1, matching.size());\n     }\n \n     @Test\n     public void issueSYNCOPE983() {\n-        AttributeCond fullnameLeafCond = new AttributeCond(AttributeCond.Type.LIKE);\n+        AttrCond fullnameLeafCond = new AttrCond(AttrCond.Type.LIKE);\n         fullnameLeafCond.setSchema(\"surname\");\n         fullnameLeafCond.setExpression(\"%o%\");\n \n@@ -676,7 +676,7 @@ public void issueSYNCOPE983() {\n \n         List<User> users = searchDAO.search(\n                 SyncopeConstants.FULL_ADMIN_REALMS,\n-                SearchCond.getLeafCond(fullnameLeafCond),\n+                SearchCond.getLeaf(fullnameLeafCond),\n                 -1,\n                 -1,\n                 orderByClauses,\n@@ -686,14 +686,14 @@ public void issueSYNCOPE983() {\n \n     @Test\n     public void issueSYNCOPE1416() {\n-        AttributeCond idLeftCond = new AttributeCond(AttributeCond.Type.ISNOTNULL);\n+        AttrCond idLeftCond = new AttrCond(AttrCond.Type.ISNOTNULL);\n         idLeftCond.setSchema(\"surname\");\n \n-        AttributeCond idRightCond = new AttributeCond(AttributeCond.Type.ISNOTNULL);\n+        AttrCond idRightCond = new AttrCond(AttrCond.Type.ISNOTNULL);\n         idRightCond.setSchema(\"firstname\");\n \n-        SearchCond searchCondition = SearchCond.getAndCond(\n-                SearchCond.getLeafCond(idLeftCond), SearchCond.getLeafCond(idRightCond));\n+        SearchCond searchCondition = SearchCond.getAnd(\n+                SearchCond.getLeaf(idLeftCond), SearchCond.getLeaf(idRightCond));\n \n         List<OrderByClause> orderByClauses = new ArrayList<>();\n         OrderByClause orderByClause = new OrderByClause();\n@@ -707,19 +707,19 @@ public void issueSYNCOPE1416() {\n                 users.size());\n \n         // search by attribute with unique constraint\n-        AttributeCond fullnameCond = new AttributeCond(AttributeCond.Type.ISNOTNULL);\n+        AttrCond fullnameCond = new AttrCond(AttrCond.Type.ISNOTNULL);\n         fullnameCond.setSchema(\"fullname\");\n \n-        SearchCond cond = SearchCond.getLeafCond(fullnameCond);\n+        SearchCond cond = SearchCond.getLeaf(fullnameCond);\n         assertTrue(cond.isValid());\n \n         users = searchDAO.search(cond, AnyTypeKind.USER);\n         assertEquals(5, users.size());\n \n-        fullnameCond = new AttributeCond(AttributeCond.Type.ISNULL);\n+        fullnameCond = new AttrCond(AttrCond.Type.ISNULL);\n         fullnameCond.setSchema(\"fullname\");\n \n-        cond = SearchCond.getLeafCond(fullnameCond);\n+        cond = SearchCond.getLeaf(fullnameCond);\n         assertTrue(cond.isValid());\n \n         users = searchDAO.search(cond, AnyTypeKind.USER);\n@@ -728,11 +728,11 @@ public void issueSYNCOPE1416() {\n \n     @Test\n     public void issueSYNCOPE1419() {\n-        AttributeCond loginDateCond = new AttributeCond(AttributeCond.Type.EQ);\n+        AttrCond loginDateCond = new AttrCond(AttrCond.Type.EQ);\n         loginDateCond.setSchema(\"loginDate\");\n         loginDateCond.setExpression(\"2009-05-26\");\n \n-        SearchCond cond = SearchCond.getNotLeafCond(loginDateCond);\n+        SearchCond cond = SearchCond.getNotLeaf(loginDateCond);\n         assertTrue(cond.isValid());\n \n         List<User> users = searchDAO.search(cond, AnyTypeKind.USER);"},{"sha":"a1d4f4c2c10e66e913a92df2383e9f6786915bce","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnySearchTest.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -35,7 +35,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.RoleCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n@@ -92,7 +92,7 @@ public void searchByDynMembership() {\n         RoleCond roleCond = new RoleCond();\n         roleCond.setRole(role.getKey());\n \n-        List<User> users = searchDAO.search(SearchCond.getLeafCond(roleCond), AnyTypeKind.USER);\n+        List<User> users = searchDAO.search(SearchCond.getLeaf(roleCond), AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n         assertEquals(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\", users.get(0).getKey());\n@@ -103,11 +103,11 @@ public void issueSYNCOPE95() {\n         groupDAO.findAll(1, 100).forEach(group -> groupDAO.delete(group.getKey()));\n         entityManager().flush();\n \n-        AttributeCond coolLeafCond = new AttributeCond(AttributeCond.Type.EQ);\n+        AttrCond coolLeafCond = new AttrCond(AttrCond.Type.EQ);\n         coolLeafCond.setSchema(\"cool\");\n         coolLeafCond.setExpression(\"true\");\n \n-        SearchCond cond = SearchCond.getLeafCond(coolLeafCond);\n+        SearchCond cond = SearchCond.getLeaf(coolLeafCond);\n         assertTrue(cond.isValid());\n \n         List<User> users = searchDAO.search(cond, AnyTypeKind.USER);\n@@ -122,11 +122,11 @@ public void issueSYNCOPE1417() {\n         AnyCond usernameLeafCond = new AnyCond(AnyCond.Type.EQ);\n         usernameLeafCond.setSchema(\"username\");\n         usernameLeafCond.setExpression(\"rossini\");\n-        AttributeCond idRightCond = new AttributeCond(AttributeCond.Type.LIKE);\n+        AttrCond idRightCond = new AttrCond(AttrCond.Type.LIKE);\n         idRightCond.setSchema(\"fullname\");\n         idRightCond.setExpression(\"Giuseppe V%\");\n-        SearchCond searchCondition = SearchCond.getOrCond(\n-                SearchCond.getLeafCond(usernameLeafCond), SearchCond.getLeafCond(idRightCond));\n+        SearchCond searchCondition = SearchCond.getOr(\n+                SearchCond.getLeaf(usernameLeafCond), SearchCond.getLeaf(idRightCond));\n \n         List<OrderByClause> orderByClauses = new ArrayList<>();\n         OrderByClause orderByClause = new OrderByClause();\n@@ -169,19 +169,19 @@ public void issueSYNCOPE1512() {\n \n         entityManager().flush();\n \n-        AttributeCond titleCond = new AttributeCond(AttributeCond.Type.EQ);\n+        AttrCond titleCond = new AttrCond(AttrCond.Type.EQ);\n         titleCond.setSchema(\"title\");\n         titleCond.setExpression(\"syncope's group\");\n \n-        List<Group> matching = searchDAO.search(SearchCond.getLeafCond(titleCond), AnyTypeKind.GROUP);\n+        List<Group> matching = searchDAO.search(SearchCond.getLeaf(titleCond), AnyTypeKind.GROUP);\n         assertEquals(1, matching.size());\n         assertEquals(group.getKey(), matching.get(0).getKey());\n \n-        AttributeCond originalNameCond = new AttributeCond(AttributeCond.Type.EQ);\n+        AttrCond originalNameCond = new AttrCond(AttrCond.Type.EQ);\n         originalNameCond.setSchema(\"originalName\");\n         originalNameCond.setExpression(\"syncope's group\");\n \n-        matching = searchDAO.search(SearchCond.getLeafCond(originalNameCond), AnyTypeKind.GROUP);\n+        matching = searchDAO.search(SearchCond.getLeaf(originalNameCond), AnyTypeKind.GROUP);\n         assertEquals(1, matching.size());\n         assertEquals(group.getKey(), matching.get(0).getKey());\n     }"},{"sha":"912aea2dd2551af36de6959749d4152082af71ba","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/DynRealmTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FDynRealmTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FDynRealmTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FDynRealmTest.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -87,12 +87,12 @@ public void misc() {\n \n         DynRealmCond dynRealmCond = new DynRealmCond();\n         dynRealmCond.setDynRealm(actual.getKey());\n-        List<User> matching = searchDAO.search(SearchCond.getLeafCond(dynRealmCond), AnyTypeKind.USER);\n+        List<User> matching = searchDAO.search(SearchCond.getLeaf(dynRealmCond), AnyTypeKind.USER);\n         assertNotNull(matching);\n         assertFalse(matching.isEmpty());\n \n         User user = matching.get(0);\n-        assertTrue(anyMatcher.matches(user, SearchCond.getLeafCond(dynRealmCond)));\n+        assertTrue(anyMatcher.matches(user, SearchCond.getLeaf(dynRealmCond)));\n \n         assertTrue(userDAO.findDynRealms(user.getKey()).contains(actual.getKey()));\n     }"},{"sha":"3e8e6c8349591d95680554b6041a377ad2471745","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":11,"deletions":39,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -2426,62 +2426,27 @@ $$ }&#10;\n   \n   <SecurityQuestion id=\"887028ea-66fc-41e7-b397-620d7ea6dfbb\" content=\"What's your mother's maiden name?\"/>\n \n-  <SyncopeLogger logName=\"syncope.audit.[LOGIC]:[SyncopeLogic]:[]:[isSelfRegAllowed]:[SUCCESS]\" logLevel=\"DEBUG\" logType=\"AUDIT\"/>\n+  <GatewayRoute id=\"ec7bada2-3dd6-460c-8441-65521d005ffa\" name=\"basic1\" target=\"http://httpbin.org:80\" status=\"PUBLISHED\"                predicates=\"[{&quot;cond&quot;:null,&quot;factory&quot;:&quot;METHOD&quot;,&quot;args&quot;:&quot;GET&quot;}]\"/>\n \n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[assign]:[FAILURE]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[assign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[create]:[FAILURE]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[create]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[delete]:[FAILURE]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[delete]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[deprovision]:[FAILURE]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[deprovision]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[link]:[FAILURE]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[link]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[provision]:[FAILURE]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[provision]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unassign]:[FAILURE]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unassign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unlink]:[FAILURE]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unlink]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[update]:[FAILURE]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n+  <SyncopeLogger logName=\"syncope.audit.[LOGIC]:[SyncopeLogic]:[]:[isSelfRegAllowed]:[SUCCESS]\" logLevel=\"DEBUG\" logType=\"AUDIT\"/>\n \n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[assign]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[assign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[confirmPasswordReset]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[confirmPasswordReset]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[create]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[create]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[delete]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[delete]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[deprovision]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[deprovision]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[link]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[link]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[mustChangePassword]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[mustChangePassword]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[provision]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[provision]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[requestPasswordReset]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[requestPasswordReset]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfCreate]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfCreate]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfDelete]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfDelete]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfRead]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfRead]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfStatus]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfStatus]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfUpdate]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfUpdate]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[status]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[status]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[unassign]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[unassign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[unlink]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[unlink]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[update]:[FAILURE]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n \n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[assign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n@@ -2496,6 +2461,13 @@ $$ }&#10;\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[unlink]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n \n-  <GatewayRoute id=\"ec7bada2-3dd6-460c-8441-65521d005ffa\" name=\"basic1\" target=\"http://httpbin.org:80\" status=\"PUBLISHED\"\n-                predicates=\"[{&quot;cond&quot;:null,&quot;factory&quot;:&quot;METHOD&quot;,&quot;args&quot;:&quot;GET&quot;}]\"/>\n+  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[assign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n+  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[create]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n+  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[delete]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n+  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[deprovision]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n+  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[link]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n+  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[provision]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n+  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unassign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n+  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unlink]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n+  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n </dataset>"},{"sha":"4a5c4c9bedb727b4f2ac6e443e3765c92b1ef31b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/DynRealmDataBinderImpl.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -30,6 +30,7 @@\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n import org.apache.syncope.core.persistence.api.entity.DynRealmMembership;\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n import org.apache.syncope.core.provisioning.api.data.DynRealmDataBinder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -50,8 +51,11 @@ public class DynRealmDataBinderImpl implements DynRealmDataBinder {\n     @Autowired\n     private EntityFactory entityFactory;\n \n+    @Autowired\n+    private SearchCondVisitor searchCondVisitor;\n+\n     private void setDynMembership(final DynRealm dynRealm, final AnyType anyType, final String dynMembershipFIQL) {\n-        SearchCond dynMembershipCond = SearchCondConverter.convert(dynMembershipFIQL);\n+        SearchCond dynMembershipCond = SearchCondConverter.convert(searchCondVisitor, dynMembershipFIQL);\n         if (!dynMembershipCond.isValid()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n             sce.getElements().add(dynMembershipFIQL);"},{"sha":"7368bef73caf8624e8eaee37a2b2ed716919579e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -53,6 +53,7 @@\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n@@ -64,8 +65,11 @@ public class GroupDataBinderImpl extends AbstractAnyDataBinder implements GroupD\n     @Autowired\n     private AnyTypeDAO anyTypeDAO;\n \n+    @Autowired\n+    private SearchCondVisitor searchCondVisitor;\n+\n     private void setDynMembership(final Group group, final AnyType anyType, final String dynMembershipFIQL) {\n-        SearchCond dynMembershipCond = SearchCondConverter.convert(dynMembershipFIQL);\n+        SearchCond dynMembershipCond = SearchCondConverter.convert(searchCondVisitor, dynMembershipFIQL);\n         if (!dynMembershipCond.isValid()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n             sce.getElements().add(dynMembershipFIQL);"},{"sha":"bfe305943d9f71a3f409f3e68281e52b663226d1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RoleDataBinderImpl.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.user.DynRoleMembership;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n import org.apache.syncope.core.provisioning.api.data.RoleDataBinder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -61,8 +62,11 @@ public class RoleDataBinderImpl implements RoleDataBinder {\n     @Autowired\n     private EntityFactory entityFactory;\n \n+    @Autowired\n+    private SearchCondVisitor searchCondVisitor;\n+\n     private void setDynMembership(final Role role, final String dynMembershipFIQL) {\n-        SearchCond dynMembershipCond = SearchCondConverter.convert(dynMembershipFIQL);\n+        SearchCond dynMembershipCond = SearchCondConverter.convert(searchCondVisitor, dynMembershipFIQL);\n         if (!dynMembershipCond.isValid()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n             sce.getElements().add(dynMembershipFIQL);"},{"sha":"6bce3fc193e5a1fc619f9bd3e604bcbdf5cd8abf","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/GroupMemberProvisionTaskJobDelegate.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -86,7 +86,7 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n \n         MembershipCond membershipCond = new MembershipCond();\n         membershipCond.setGroup(groupKey);\n-        List<User> users = searchDAO.search(SearchCond.getLeafCond(membershipCond), AnyTypeKind.USER);\n+        List<User> users = searchDAO.search(SearchCond.getLeaf(membershipCond), AnyTypeKind.USER);\n         Collection<String> groupResourceKeys = groupDAO.findAllResourceKeys(groupKey);\n         status.set(\"About to \"\n                 + (action == ProvisionAction.DEPROVISION ? \"de\" : \"\") + \"provision \"\n@@ -115,7 +115,7 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n \n         membershipCond = new MembershipCond();\n         membershipCond.setGroup(groupKey);\n-        List<AnyObject> anyObjects = searchDAO.search(SearchCond.getLeafCond(membershipCond), AnyTypeKind.ANY_OBJECT);\n+        List<AnyObject> anyObjects = searchDAO.search(SearchCond.getLeaf(membershipCond), AnyTypeKind.ANY_OBJECT);\n         status.set(\"About to \"\n                 + (action == ProvisionAction.DEPROVISION ? \"de\" : \"\") + \"provision \"\n                 + anyObjects.size() + \" any objects from \" + groupResourceKeys);"},{"sha":"55db10701f980189cf080b792bad78bb3baabf10","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/GroupReportlet.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FGroupReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FGroupReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FGroupReportlet.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -39,6 +39,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.xml.sax.ContentHandler;\n@@ -57,6 +58,9 @@ public class GroupReportlet extends AbstractReportlet {\n     @Autowired\n     private GroupDataBinder groupDataBinder;\n \n+    @Autowired\n+    private SearchCondVisitor searchCondVisitor;\n+\n     private GroupReportletConf conf;\n \n     private static void doExtractResources(final ContentHandler handler, final AnyTO anyTO)\n@@ -284,7 +288,7 @@ private int count() {\n         return StringUtils.isBlank(conf.getMatchingCond())\n                 ? groupDAO.count()\n                 : searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS,\n-                        SearchCondConverter.convert(conf.getMatchingCond()), AnyTypeKind.GROUP);\n+                        SearchCondConverter.convert(searchCondVisitor, conf.getMatchingCond()), AnyTypeKind.GROUP);\n     }\n \n     @Override\n@@ -316,7 +320,7 @@ protected void doExtract(\n             } else {\n                 groups = searchDAO.search(\n                         SyncopeConstants.FULL_ADMIN_REALMS,\n-                        SearchCondConverter.convert(this.conf.getMatchingCond()),\n+                        SearchCondConverter.convert(searchCondVisitor, this.conf.getMatchingCond()),\n                         page,\n                         AnyDAO.DEFAULT_PAGE_SIZE,\n                         List.of(),"},{"sha":"de53da9727518121192ed3d6a1343601304a4666","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReconciliationReportlet.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -52,6 +52,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n@@ -96,6 +97,9 @@ public class ReconciliationReportlet extends AbstractReportlet {\n     @Autowired\n     private AnyUtilsFactory anyUtilsFactory;\n \n+    @Autowired\n+    private SearchCondVisitor searchCondVisitor;\n+\n     private ReconciliationReportletConf conf;\n \n     private static String getAnyElementName(final AnyTypeKind anyTypeKind) {\n@@ -382,7 +386,7 @@ protected void doExtract(\n                 doExtract(handler, userDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE));\n             }\n         } else {\n-            SearchCond cond = SearchCondConverter.convert(this.conf.getUserMatchingCond());\n+            SearchCond cond = SearchCondConverter.convert(searchCondVisitor, this.conf.getUserMatchingCond());\n \n             int total = searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, cond, AnyTypeKind.USER);\n             int pages = (total / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n@@ -422,7 +426,7 @@ protected void doExtract(\n                 doExtract(handler, groupDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE));\n             }\n         } else {\n-            SearchCond cond = SearchCondConverter.convert(this.conf.getUserMatchingCond());\n+            SearchCond cond = SearchCondConverter.convert(searchCondVisitor, this.conf.getUserMatchingCond());\n \n             int total = searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, cond, AnyTypeKind.GROUP);\n             int pages = (total / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n@@ -451,10 +455,10 @@ protected void doExtract(\n                 AnyTypeCond anyTypeCond = new AnyTypeCond();\n                 anyTypeCond.setAnyTypeKey(anyType.getKey());\n                 SearchCond cond = StringUtils.isBlank(this.conf.getAnyObjectMatchingCond())\n-                        ? SearchCond.getLeafCond(anyTypeCond)\n-                        : SearchCond.getAndCond(\n-                                SearchCond.getLeafCond(anyTypeCond),\n-                                SearchCondConverter.convert(this.conf.getAnyObjectMatchingCond()));\n+                        ? SearchCond.getLeaf(anyTypeCond)\n+                        : SearchCond.getAnd(\n+                                SearchCond.getLeaf(anyTypeCond),\n+                                SearchCondConverter.convert(searchCondVisitor, this.conf.getAnyObjectMatchingCond()));\n \n                 int total = searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, cond, AnyTypeKind.ANY_OBJECT);\n                 int pages = (total / AnyDAO.DEFAULT_PAGE_SIZE) + 1;"},{"sha":"7b5c1cddf9fa76a82014e7070156075b51ffae52","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/UserReportlet.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FUserReportlet.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -43,6 +43,7 @@\n import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n@@ -69,6 +70,9 @@ public class UserReportlet extends AbstractReportlet {\n     @Autowired\n     private AnyObjectDataBinder anyObjectDataBinder;\n \n+    @Autowired\n+    private SearchCondVisitor searchCondVisitor;\n+\n     private UserReportletConf conf;\n \n     private static void doExtractResources(final ContentHandler handler, final AnyTO anyTO)\n@@ -345,7 +349,7 @@ private int count() {\n         return StringUtils.isBlank(conf.getMatchingCond())\n                 ? userDAO.count()\n                 : searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS,\n-                        SearchCondConverter.convert(conf.getMatchingCond()), AnyTypeKind.USER);\n+                        SearchCondConverter.convert(searchCondVisitor, this.conf.getMatchingCond()), AnyTypeKind.USER);\n     }\n \n     @Override\n@@ -377,7 +381,7 @@ protected void doExtract(\n             } else {\n                 users = searchDAO.search(\n                         SyncopeConstants.FULL_ADMIN_REALMS,\n-                        SearchCondConverter.convert(this.conf.getMatchingCond()),\n+                        SearchCondConverter.convert(searchCondVisitor, this.conf.getMatchingCond()),\n                         page,\n                         AnyDAO.DEFAULT_PAGE_SIZE,\n                         List.of(),"},{"sha":"37a13e783adc4a60c3e4996206a233870e5650fe","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/DefaultNotificationManager.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -63,6 +63,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n@@ -154,6 +155,9 @@ public class DefaultNotificationManager implements NotificationManager {\n     @Autowired\n     private IntAttrNameParser intAttrNameParser;\n \n+    @Autowired\n+    private SearchCondVisitor searchCondVisitor;\n+\n     @Transactional(readOnly = true)\n     @Override\n     public long getMaxRetries() {\n@@ -181,7 +185,7 @@ private NotificationTask getNotificationTask(\n \n         if (notification.getRecipientsFIQL() != null) {\n             recipients.addAll(searchDAO.<User>search(\n-                    SearchCondConverter.convert(notification.getRecipientsFIQL()),\n+                    SearchCondConverter.convert(searchCondVisitor, notification.getRecipientsFIQL()),\n                     List.of(), AnyTypeKind.USER));\n         }\n \n@@ -338,9 +342,9 @@ public List<NotificationTask> createTasks(\n                 if (!notification.getEvents().contains(currentEvent)) {\n                     LOG.debug(\"No events found about {}\", any);\n                 } else if (anyType == null || any == null\n-                        || notification.getAbout(anyType).isEmpty()\n-                        || anyMatchDAO.matches(\n-                                any, SearchCondConverter.convert(notification.getAbout(anyType).get().get()))) {\n+                        || !notification.getAbout(anyType).isPresent()\n+                        || anyMatchDAO.matches(any, SearchCondConverter.convert(\n+                                searchCondVisitor, notification.getAbout(anyType).get().get()))) {\n \n                     LOG.debug(\"Creating notification task for event {} about {}\", currentEvent, any);\n "},{"sha":"f94a7d8c9f121b3532ca53fd3ab4171c3668a856","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -35,7 +35,7 @@\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n@@ -553,9 +553,9 @@ private List<ProvisioningReport> delete(final SyncDelta delta, final List<Realm>\n                         }\n \n                         Set<String> adminRealms = Set.of(realm.getFullPath());\n-                        AnyCond keyCond = new AnyCond(AttributeCond.Type.ISNOTNULL);\n+                        AnyCond keyCond = new AnyCond(AttrCond.Type.ISNOTNULL);\n                         keyCond.setSchema(\"key\");\n-                        SearchCond allMatchingCond = SearchCond.getLeafCond(keyCond);\n+                        SearchCond allMatchingCond = SearchCond.getLeaf(keyCond);\n                         int users = searchDAO.count(adminRealms, allMatchingCond, AnyTypeKind.USER);\n                         int groups = searchDAO.count(adminRealms, allMatchingCond, AnyTypeKind.GROUP);\n                         int anyObjects = searchDAO.count(adminRealms, allMatchingCond, AnyTypeKind.ANY_OBJECT);"},{"sha":"a7ec5f3221479af92e1da42bbb175f6cfcc302cf","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/InboundMatcher.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -46,7 +46,7 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n@@ -240,30 +240,30 @@ public List<PullMatch> matchByConnObjectKeyValue(\n \n                 case \"username\":\n                     if (anyTypeKind == AnyTypeKind.USER && ignoreCaseMatch) {\n-                        AnyCond cond = new AnyCond(AttributeCond.Type.IEQ);\n+                        AnyCond cond = new AnyCond(AttrCond.Type.IEQ);\n                         cond.setSchema(\"username\");\n                         cond.setExpression(finalConnObjectKeyValue);\n-                        anys.addAll(searchDAO.search(SearchCond.getLeafCond(cond), AnyTypeKind.USER));\n+                        anys.addAll(searchDAO.search(SearchCond.getLeaf(cond), AnyTypeKind.USER));\n                     } else {\n                         Optional.ofNullable(userDAO.findByUsername(finalConnObjectKeyValue)).ifPresent(anys::add);\n                     }\n                     break;\n \n                 case \"name\":\n                     if (anyTypeKind == AnyTypeKind.GROUP && ignoreCaseMatch) {\n-                        AnyCond cond = new AnyCond(AttributeCond.Type.IEQ);\n+                        AnyCond cond = new AnyCond(AttrCond.Type.IEQ);\n                         cond.setSchema(\"name\");\n                         cond.setExpression(finalConnObjectKeyValue);\n-                        anys.addAll(searchDAO.search(SearchCond.getLeafCond(cond), AnyTypeKind.GROUP));\n+                        anys.addAll(searchDAO.search(SearchCond.getLeaf(cond), AnyTypeKind.GROUP));\n                     } else {\n                         Optional.ofNullable(groupDAO.findByName(finalConnObjectKeyValue)).ifPresent(anys::add);\n                     }\n \n                     if (anyTypeKind == AnyTypeKind.ANY_OBJECT && ignoreCaseMatch) {\n-                        AnyCond cond = new AnyCond(AttributeCond.Type.IEQ);\n+                        AnyCond cond = new AnyCond(AttrCond.Type.IEQ);\n                         cond.setSchema(\"name\");\n                         cond.setExpression(finalConnObjectKeyValue);\n-                        anys.addAll(searchDAO.search(SearchCond.getLeafCond(cond), AnyTypeKind.ANY_OBJECT));\n+                        anys.addAll(searchDAO.search(SearchCond.getLeaf(cond), AnyTypeKind.ANY_OBJECT));\n                     } else {\n                         Optional.ofNullable(anyObjectDAO.findByName(finalConnObjectKeyValue)).ifPresent(anys::add);\n                     }"},{"sha":"2638b96ce6843212dc9c9cb5425b324f6a075f56","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushJobDelegate.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -45,6 +45,7 @@\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTaskAnyFilter;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.pushpull.AnyObjectPushResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.GroupPushResultHandler;\n@@ -72,6 +73,9 @@ public class PushJobDelegate extends AbstractProvisioningJobDelegate<PushTask> {\n     @Autowired\n     protected AnyUtilsFactory anyUtilsFactory;\n \n+    @Autowired\n+    protected SearchCondVisitor searchCondVisitor;\n+\n     protected ProvisioningProfile<PushTask, PushActions> profile;\n \n     protected final Map<String, MutablePair<Integer, String>> handled = new HashMap<>();\n@@ -224,7 +228,7 @@ protected String doExecuteProvisioning(\n                 String filter = anyFilter.map(PushTaskAnyFilter::getFIQLCond).orElse(null);\n                 SearchCond cond = StringUtils.isBlank(filter)\n                         ? anyDAO.getAllMatchingCond()\n-                        : SearchCondConverter.convert(filter);\n+                        : SearchCondConverter.convert(searchCondVisitor, filter);\n                 int count = searchDAO.count(\n                         Set.of(profile.getTask().getSourceRealm().getFullPath()),\n                         cond,"},{"sha":"38d5e0bd579580829dd846fb112729fe80e61fa5","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -43,7 +43,7 @@\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n@@ -168,10 +168,10 @@ public Pair<User, Boolean> authenticate(final String domain, final Authenticatio\n             if (\"username\".equals(authAttrValues.get(i))) {\n                 user = userDAO.findByUsername(authentication.getName());\n             } else {\n-                AttributeCond attrCond = new AttributeCond(AttributeCond.Type.EQ);\n+                AttrCond attrCond = new AttrCond(AttrCond.Type.EQ);\n                 attrCond.setSchema(authAttrValues.get(i));\n                 attrCond.setExpression(authentication.getName());\n-                List<User> users = searchDAO.search(SearchCond.getLeafCond(attrCond), AnyTypeKind.USER);\n+                List<User> users = searchDAO.search(SearchCond.getLeaf(attrCond), AnyTypeKind.USER);\n                 if (users.size() == 1) {\n                     user = users.get(0);\n                 } else {"},{"sha":"583c689490922fe4e44cb3f7cc6c5619fca3cf8e","filename":"docker/core/src/main/resources/persistence.properties.all","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.all","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.all","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.all?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -20,6 +20,7 @@ plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainSchemaDAO\n plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrDAO\n plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrValueDAO\n any.search.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnySearchDAO\n+any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisitor\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO"},{"sha":"59be9e33e39df5e7d93047ffb26737813cab56f9","filename":"docker/core/src/main/resources/persistence.properties.myjson","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.myjson","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.myjson","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.myjson?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -20,6 +20,7 @@ plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainSchemaDA\n plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainAttrDAO\n plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainAttrValueDAO\n any.search.dao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAnySearchDAO\n+any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisitor\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO"},{"sha":"c13cac9151408cc5d92442ed859ab27110209bd1","filename":"docker/core/src/main/resources/persistence.properties.pgjsonb","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.pgjsonb","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.pgjsonb","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.pgjsonb?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -20,6 +20,7 @@ plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainSchemaDA\n plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainAttrDAO\n plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainAttrValueDAO\n any.search.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONAnySearchDAO\n+any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisitor\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO"},{"sha":"92cb77a4c4584f614594b2c9362b45354e9e52c2","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":90,"deletions":41,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -24,6 +24,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n@@ -38,7 +39,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n@@ -213,59 +214,107 @@ protected <T extends Any<?>> List<T> doSearch(\n         return ArrayUtils.isEmpty(esResult)\n                 ? List.of()\n                 : buildResult(Stream.of(Objects.requireNonNull(esResult))\n-                    .map(SearchHit::getId).collect(Collectors.toList()), kind);\n+                        .map(SearchHit::getId).collect(Collectors.toList()), kind);\n     }\n \n     private QueryBuilder getQueryBuilder(final SearchCond cond, final AnyTypeKind kind) {\n-        QueryBuilder builder = EMPTY_QUERY_BUILDER;\n+        QueryBuilder builder = null;\n \n         switch (cond.getType()) {\n             case LEAF:\n             case NOT_LEAF:\n-                if (cond.getAnyTypeCond() != null && AnyTypeKind.ANY_OBJECT == kind) {\n-                    builder = getQueryBuilder(cond.getAnyTypeCond());\n-                } else if (cond.getRelationshipTypeCond() != null\n-                        && (AnyTypeKind.USER == kind || AnyTypeKind.ANY_OBJECT == kind)) {\n-\n-                    builder = getQueryBuilder(cond.getRelationshipTypeCond());\n-                } else if (cond.getRelationshipCond() != null\n-                        && (AnyTypeKind.USER == kind || AnyTypeKind.ANY_OBJECT == kind)) {\n-\n-                    builder = getQueryBuilder(cond.getRelationshipCond());\n-                } else if (cond.getMembershipCond() != null\n-                        && (AnyTypeKind.USER == kind || AnyTypeKind.ANY_OBJECT == kind)) {\n-\n-                    builder = getQueryBuilder(cond.getMembershipCond());\n-                } else if (cond.getAssignableCond() != null) {\n-                    builder = getQueryBuilder(cond.getAssignableCond());\n-                } else if (cond.getRoleCond() != null && AnyTypeKind.USER == kind) {\n-                    builder = getQueryBuilder(cond.getRoleCond());\n-                } else if (cond.getPrivilegeCond() != null && AnyTypeKind.USER == kind) {\n-                    builder = getQueryBuilder(cond.getPrivilegeCond());\n-                } else if (cond.getDynRealmCond() != null) {\n-                    builder = getQueryBuilder(cond.getDynRealmCond());\n-                } else if (cond.getMemberCond() != null && AnyTypeKind.GROUP == kind) {\n-                    builder = getQueryBuilder(cond.getMemberCond());\n-                } else if (cond.getResourceCond() != null) {\n-                    builder = getQueryBuilder(cond.getResourceCond());\n-                } else if (cond.getAttributeCond() != null) {\n-                    builder = getQueryBuilder(cond.getAttributeCond(), kind);\n-                } else if (cond.getAnyCond() != null) {\n-                    builder = getQueryBuilder(cond.getAnyCond(), kind);\n+                builder = cond.getLeaf(AnyTypeCond.class).\n+                        filter(leaf -> AnyTypeKind.ANY_OBJECT == kind).\n+                        map(leaf -> getQueryBuilder(leaf)).\n+                        orElse(null);\n+\n+                if (builder == null) {\n+                    builder = cond.getLeaf(RelationshipTypeCond.class).\n+                            filter(leaf -> AnyTypeKind.GROUP != kind).\n+                            map(leaf -> getQueryBuilder(leaf)).\n+                            orElse(null);\n+                }\n+\n+                if (builder == null) {\n+                    builder = cond.getLeaf(RelationshipCond.class).\n+                            filter(leaf -> AnyTypeKind.GROUP != kind).\n+                            map(leaf -> getQueryBuilder(leaf)).\n+                            orElse(null);\n+                }\n+\n+                if (builder == null) {\n+                    builder = cond.getLeaf(MembershipCond.class).\n+                            filter(leaf -> AnyTypeKind.GROUP != kind).\n+                            map(leaf -> getQueryBuilder(leaf)).\n+                            orElse(null);\n+                }\n+\n+                if (builder == null) {\n+                    builder = cond.getLeaf(MemberCond.class).\n+                            filter(leaf -> AnyTypeKind.GROUP == kind).\n+                            map(leaf -> getQueryBuilder(leaf)).\n+                            orElse(null);\n+                }\n+\n+                if (builder == null) {\n+                    builder = cond.getLeaf(AssignableCond.class).\n+                            map(leaf -> getQueryBuilder(leaf)).\n+                            orElse(null);\n+                }\n+\n+                if (builder == null) {\n+                    builder = cond.getLeaf(RoleCond.class).\n+                            filter(leaf -> AnyTypeKind.USER == kind).\n+                            map(leaf -> getQueryBuilder(leaf)).\n+                            orElse(null);\n+                }\n+\n+                if (builder == null) {\n+                    builder = cond.getLeaf(PrivilegeCond.class).\n+                            filter(leaf -> AnyTypeKind.USER == kind).\n+                            map(leaf -> getQueryBuilder(leaf)).\n+                            orElse(null);\n+                }\n+\n+                if (builder == null) {\n+                    builder = cond.getLeaf(DynRealmCond.class).\n+                            map(leaf -> getQueryBuilder(leaf)).\n+                            orElse(null);\n+                }\n+\n+                if (builder == null) {\n+                    builder = cond.getLeaf(ResourceCond.class).\n+                            map(leaf -> getQueryBuilder(leaf)).\n+                            orElse(null);\n+                }\n+\n+                if (builder == null) {\n+                    Optional<AnyCond> anyCond = cond.getLeaf(AnyCond.class);\n+                    if (anyCond.isPresent()) {\n+                        builder = getQueryBuilder(anyCond.get(), kind);\n+                    } else {\n+                        builder = cond.getLeaf(AttrCond.class).\n+                                map(leaf -> getQueryBuilder(leaf, kind)).\n+                                orElse(null);\n+                    }\n+                }\n+\n+                if (builder == null) {\n+                    builder = EMPTY_QUERY_BUILDER;\n                 }\n                 builder = checkNot(builder, cond.getType() == SearchCond.Type.NOT_LEAF);\n                 break;\n \n             case AND:\n                 builder = QueryBuilders.boolQuery().\n-                        must(getQueryBuilder(cond.getLeftSearchCond(), kind)).\n-                        must(getQueryBuilder(cond.getRightSearchCond(), kind));\n+                        must(getQueryBuilder(cond.getLeft(), kind)).\n+                        must(getQueryBuilder(cond.getRight(), kind));\n                 break;\n \n             case OR:\n                 builder = QueryBuilders.disMaxQuery().\n-                        add(getQueryBuilder(cond.getLeftSearchCond(), kind)).\n-                        add(getQueryBuilder(cond.getRightSearchCond(), kind));\n+                        add(getQueryBuilder(cond.getLeft(), kind)).\n+                        add(getQueryBuilder(cond.getRight(), kind));\n                 break;\n \n             default:\n@@ -360,9 +409,9 @@ private static QueryBuilder getQueryBuilder(final ResourceCond cond) {\n     }\n \n     private static QueryBuilder fillAttrQuery(\n-        final PlainSchema schema,\n-        final PlainAttrValue attrValue,\n-        final AttributeCond cond) {\n+            final PlainSchema schema,\n+            final PlainAttrValue attrValue,\n+            final AttrCond cond) {\n \n         Object value = schema.getType() == AttrSchemaType.Date && attrValue.getDateValue() != null\n                 ? attrValue.getDateValue().getTime()\n@@ -430,7 +479,7 @@ private static QueryBuilder fillAttrQuery(\n         return builder;\n     }\n \n-    private QueryBuilder getQueryBuilder(final AttributeCond cond, final AnyTypeKind kind) {\n+    private QueryBuilder getQueryBuilder(final AttrCond cond, final AnyTypeKind kind) {\n         Pair<PlainSchema, PlainAttrValue> checked;\n         try {\n             checked = check(cond, kind);"},{"sha":"82b0b51a64a428b75d2a5d223fb2c7db2b9f1a33","filename":"ext/elasticsearch/persistence-jpa/src/main/resources/persistence.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -20,6 +20,7 @@ plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainSchemaDAO\n plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrDAO\n plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrValueDAO\n any.search.dao=org.apache.syncope.core.persistence.jpa.dao.ElasticsearchAnySearchDAO\n+any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisitor\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO"},{"sha":"833edd60eeffb2a6d153c5840099232b8c4eb0d5","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestFormDirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestFormDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestFormDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestFormDirectoryPanel.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n import org.apache.syncope.client.console.rest.UserRequestRestClient;\n import org.apache.syncope.client.console.panels.UserRequestFormDirectoryPanel.UserRequestFormProvider;\n-import org.apache.syncope.client.console.layout.FormLayoutInfoUtils;\n+import org.apache.syncope.client.console.layout.AnyLayoutUtils;\n import org.apache.syncope.client.console.layout.UserFormLayoutInfo;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n@@ -248,7 +248,7 @@ public void onClick(final AjaxRequestTarget target, final UserRequestForm ignore\n                         previousUserTO,\n                         newUserTO,\n                         AnyTypeRestClient.read(AnyTypeKind.USER.name()).getClasses(),\n-                        FormLayoutInfoUtils.fetch(List.of(AnyTypeKind.USER.name())).getLeft(),\n+                        AnyLayoutUtils.fetch(List.of(AnyTypeKind.USER.name())).getUser(),\n                         pageRef\n                 ).build(BaseModal.CONTENT_ID, AjaxWizard.Mode.EDIT));\n "},{"sha":"e5f837f870b88a6d15645bc5564a20d3da518478","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -631,7 +631,7 @@ public SCIMGroup toSCIMGroup(\n \n         MembershipCond membCond = new MembershipCond();\n         membCond.setGroup(groupTO.getKey());\n-        SearchCond searchCond = SearchCond.getLeafCond(membCond);\n+        SearchCond searchCond = SearchCond.getLeaf(membCond);\n \n         if (output(attributes, excludedAttributes, \"members\")) {\n             int count = userLogic.search(searchCond,"},{"sha":"926ba0ae057773121f326db1d4a9f947f6b02ccb","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondConverter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondConverter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondConverter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondConverter.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -34,8 +34,8 @@ public final class SearchCondConverter {\n     private static final Logger LOG = LoggerFactory.getLogger(SearchCondConverter.class);\n \n     public static SearchCond convert(final SearchCondVisitor visitor, final String filter) {\n-        SCIMFilterParser parser = new SCIMFilterParser(new CommonTokenStream(\n-                new SCIMFilterLexer(CharStreams.fromString(filter))));\n+        SCIMFilterParser parser = new SCIMFilterParser(\n+                new CommonTokenStream(new SCIMFilterLexer(CharStreams.fromString(filter))));\n         parser.setBuildParseTree(true);\n         parser.setTrimParseTree(true);\n         parser.setProfile(true);"},{"sha":"890e208381b585f84e5dd9c56f1747e6c22ef8fd","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondVisitor.java","status":"modified","additions":80,"deletions":78,"changes":158,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondVisitor.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.common.lib.scim.SCIMUserAddressConf;\n import org.apache.syncope.common.lib.scim.SCIMUserConf;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.ext.scimv2.api.type.Resource;\n \n@@ -55,54 +55,53 @@ public SearchCond visitScimFilter(final SCIMFilterParser.ScimFilterContext ctx)\n     }\n \n     private static boolean schemaEquals(final Resource resource, final String value, final String schema) {\n-        return Optional.ofNullable(resource)\n-            .map(resource1 -> value.equalsIgnoreCase(schema)\n-                || (resource1.schema() + ':' + value).equalsIgnoreCase(schema))\n-            .orElseGet(() -> value.contains(\":\")\n-            ? StringUtils.substringAfterLast(value, \":\").equalsIgnoreCase(schema)\n-            : value.equalsIgnoreCase(schema));\n+        return resource == null\n+                ? value.contains(\":\")\n+                ? StringUtils.substringAfterLast(value, \":\").equalsIgnoreCase(schema)\n+                : value.equalsIgnoreCase(schema)\n+                : value.equalsIgnoreCase(schema) || (resource.schema() + \":\" + value).equalsIgnoreCase(schema);\n     }\n \n-    public AttributeCond createAttributeCond(final String schema) {\n-        AttributeCond attributeCond = null;\n+    public AttrCond createAttrCond(final String schema) {\n+        AttrCond attrCond = null;\n \n         if (schemaEquals(Resource.User, \"userName\", schema)) {\n-            attributeCond = new AnyCond();\n-            attributeCond.setSchema(\"username\");\n+            attrCond = new AnyCond();\n+            attrCond.setSchema(\"username\");\n         } else if (resource == Resource.Group && schemaEquals(Resource.Group, \"displayName\", schema)) {\n-            attributeCond = new AnyCond();\n-            attributeCond.setSchema(\"name\");\n+            attrCond = new AnyCond();\n+            attrCond.setSchema(\"name\");\n         } else if (schemaEquals(null, \"meta.created\", schema)) {\n-            attributeCond = new AnyCond();\n-            attributeCond.setSchema(\"creationDate\");\n+            attrCond = new AnyCond();\n+            attrCond.setSchema(\"creationDate\");\n         } else if (schemaEquals(null, \"meta.lastModified\", schema)) {\n-            attributeCond = new AnyCond();\n-            attributeCond.setSchema(\"lastChangeDate\");\n+            attrCond = new AnyCond();\n+            attrCond.setSchema(\"lastChangeDate\");\n         }\n \n         if (resource == Resource.User) {\n             if (conf.getUserConf() != null) {\n                 if (conf.getUserConf().getName() != null) {\n                     for (Map.Entry<String, String> entry : conf.getUserConf().getName().asMap().entrySet()) {\n                         if (schemaEquals(Resource.User, \"name.\" + entry.getKey(), schema)) {\n-                            attributeCond = new AttributeCond();\n-                            attributeCond.setSchema(entry.getValue());\n+                            attrCond = new AttrCond();\n+                            attrCond.setSchema(entry.getValue());\n                         }\n                     }\n                 }\n \n                 for (Map.Entry<String, String> entry : conf.getUserConf().asMap().entrySet()) {\n                     if (schemaEquals(Resource.User, entry.getKey(), schema)) {\n-                        attributeCond = new AttributeCond();\n-                        attributeCond.setSchema(entry.getValue());\n+                        attrCond = new AttrCond();\n+                        attrCond.setSchema(entry.getValue());\n                     }\n                 }\n \n                 for (SCIMUserAddressConf address : conf.getUserConf().getAddresses()) {\n                     for (Map.Entry<String, String> entry : address.asMap().entrySet()) {\n                         if (schemaEquals(Resource.User, \"addresses.\" + entry.getKey(), schema)) {\n-                            attributeCond = new AttributeCond();\n-                            attributeCond.setSchema(entry.getValue());\n+                            attrCond = new AttrCond();\n+                            attrCond.setSchema(entry.getValue());\n                         }\n                     }\n                 }\n@@ -111,73 +110,73 @@ public AttributeCond createAttributeCond(final String schema) {\n             if (conf.getEnterpriseUserConf() != null) {\n                 for (Map.Entry<String, String> entry : conf.getEnterpriseUserConf().asMap().entrySet()) {\n                     if (schemaEquals(Resource.EnterpriseUser, entry.getKey(), schema)) {\n-                        attributeCond = new AttributeCond();\n-                        attributeCond.setSchema(entry.getValue());\n+                        attrCond = new AttrCond();\n+                        attrCond.setSchema(entry.getValue());\n                     }\n                 }\n \n                 if (conf.getEnterpriseUserConf().getManager() != null\n                         && conf.getEnterpriseUserConf().getManager().getKey() != null) {\n \n-                    attributeCond = new AttributeCond();\n-                    attributeCond.setSchema(conf.getEnterpriseUserConf().getManager().getKey());\n+                    attrCond = new AttrCond();\n+                    attrCond.setSchema(conf.getEnterpriseUserConf().getManager().getKey());\n                 }\n             }\n         }\n \n-        if (attributeCond == null) {\n+        if (attrCond == null) {\n             throw new IllegalArgumentException(\"Could not match \" + schema + \" for \" + resource);\n         }\n \n-        return attributeCond;\n+        return attrCond;\n     }\n \n-    private static SearchCond setOperator(final AttributeCond attributeCond, final String operator) {\n+    private static SearchCond setOperator(final AttrCond attrCond, final String operator) {\n         switch (operator) {\n             case \"eq\":\n             default:\n-                attributeCond.setType(AttributeCond.Type.IEQ);\n+                attrCond.setType(AttrCond.Type.IEQ);\n                 break;\n \n             case \"ne\":\n-                attributeCond.setType(AttributeCond.Type.IEQ);\n+                attrCond.setType(AttrCond.Type.IEQ);\n                 break;\n \n             case \"sw\":\n-                attributeCond.setType(AttributeCond.Type.ILIKE);\n-                attributeCond.setExpression(attributeCond.getExpression() + '%');\n+                attrCond.setType(AttrCond.Type.ILIKE);\n+                attrCond.setExpression(attrCond.getExpression() + \"%\");\n                 break;\n \n             case \"co\":\n-                attributeCond.setType(AttributeCond.Type.ILIKE);\n-                attributeCond.setExpression('%' + attributeCond.getExpression() + '%');\n+                attrCond.setType(AttrCond.Type.ILIKE);\n+                attrCond.setExpression(\"%\" + attrCond.getExpression() + \"%\");\n                 break;\n \n             case \"ew\":\n-                attributeCond.setType(AttributeCond.Type.ILIKE);\n-                attributeCond.setExpression('%' + attributeCond.getExpression());\n+                attrCond.setType(AttrCond.Type.ILIKE);\n+                attrCond.setExpression(\"%\" + attrCond.getExpression());\n                 break;\n \n             case \"gt\":\n-                attributeCond.setType(AttributeCond.Type.GT);\n+                attrCond.setType(AttrCond.Type.GT);\n                 break;\n \n             case \"ge\":\n-                attributeCond.setType(AttributeCond.Type.GE);\n+                attrCond.setType(AttrCond.Type.GE);\n                 break;\n \n             case \"lt\":\n-                attributeCond.setType(AttributeCond.Type.LT);\n+                attrCond.setType(AttrCond.Type.LT);\n                 break;\n \n             case \"le\":\n-                attributeCond.setType(AttributeCond.Type.LE);\n+                attrCond.setType(AttrCond.Type.LE);\n                 break;\n         }\n \n         return \"ne\".equals(operator)\n-                ? SearchCond.getNotLeafCond(attributeCond)\n-                : SearchCond.getLeafCond(attributeCond);\n+                ? SearchCond.getNotLeaf(attrCond)\n+                : SearchCond.getLeaf(attrCond);\n     }\n \n     private <E extends Enum<?>> SearchCond complex(\n@@ -187,23 +186,23 @@ private <E extends Enum<?>> SearchCond complex(\n             Optional<SCIMComplexConf<E>> item = items.stream().\n                     filter(object -> object.getType().name().equals(StringUtils.strip(right, \"\\\"\"))).findFirst();\n             if (item.isPresent()) {\n-                AttributeCond attributeCond = new AttributeCond();\n-                attributeCond.setSchema(item.get().getValue());\n-                attributeCond.setType(AttributeCond.Type.ISNOTNULL);\n-                return SearchCond.getLeafCond(attributeCond);\n+                AttrCond attrCond = new AttrCond();\n+                attrCond.setSchema(item.get().getValue());\n+                attrCond.setType(AttrCond.Type.ISNOTNULL);\n+                return SearchCond.getLeaf(attrCond);\n             }\n         } else if (!conf.getUserConf().getEmails().isEmpty()\n                 && (MULTIVALUE.contains(left) || left.endsWith(\".value\"))) {\n \n             List<SearchCond> orConds = new ArrayList<>();\n             items.forEach(item -> {\n-                AttributeCond cond = new AttributeCond();\n+                AttrCond cond = new AttrCond();\n                 cond.setSchema(item.getValue());\n                 cond.setExpression(StringUtils.strip(right, \"\\\"\"));\n                 orConds.add(setOperator(cond, operator));\n             });\n             if (!orConds.isEmpty()) {\n-                return SearchCond.getOrCond(orConds);\n+                return SearchCond.getOr(orConds);\n             }\n         }\n \n@@ -217,23 +216,23 @@ private SearchCond addresses(\n             Optional<SCIMUserAddressConf> item = items.stream().\n                     filter(object -> object.getType().name().equals(StringUtils.strip(right, \"\\\"\"))).findFirst();\n             if (item.isPresent()) {\n-                AttributeCond attributeCond = new AttributeCond();\n-                attributeCond.setSchema(item.get().getFormatted());\n-                attributeCond.setType(AttributeCond.Type.ISNOTNULL);\n-                return SearchCond.getLeafCond(attributeCond);\n+                AttrCond attrCond = new AttrCond();\n+                attrCond.setSchema(item.get().getFormatted());\n+                attrCond.setType(AttrCond.Type.ISNOTNULL);\n+                return SearchCond.getLeaf(attrCond);\n             }\n         } else if (!conf.getUserConf().getEmails().isEmpty()\n                 && (MULTIVALUE.contains(left) || left.endsWith(\".value\"))) {\n \n             List<SearchCond> orConds = new ArrayList<>();\n             items.forEach(item -> {\n-                AttributeCond cond = new AttributeCond();\n+                AttrCond cond = new AttrCond();\n                 cond.setSchema(item.getFormatted());\n                 cond.setExpression(StringUtils.strip(right, \"\\\"\"));\n                 orConds.add(setOperator(cond, operator));\n             });\n             if (!orConds.isEmpty()) {\n-                return SearchCond.getOrCond(orConds);\n+                return SearchCond.getOr(orConds);\n             }\n         }\n \n@@ -274,14 +273,14 @@ private SearchCond transform(final String operator, final String left, final Str\n         }\n \n         if (result == null) {\n-            AttributeCond attributeCond = createAttributeCond(left);\n-            attributeCond.setExpression(StringUtils.strip(right, \"\\\"\"));\n-            result = setOperator(attributeCond, operator);\n+            AttrCond attrCond = createAttrCond(left);\n+            attrCond.setExpression(StringUtils.strip(right, \"\\\"\"));\n+            result = setOperator(attrCond, operator);\n         }\n \n         if (result == null) {\n             throw new IllegalArgumentException(\n-                    \"Could not handle (\" + left + ' ' + operator + ' ' + right + \") for \" + resource);\n+                    \"Could not handle (\" + left + \" \" + operator + \" \" + right + \") for \" + resource);\n         }\n         return result;\n     }\n@@ -303,9 +302,9 @@ public SearchCond visitATTR_OPER_EXPR(final SCIMFilterParser.ATTR_OPER_EXPRConte\n \n     @Override\n     public SearchCond visitATTR_PR(final SCIMFilterParser.ATTR_PRContext ctx) {\n-        AttributeCond cond = createAttributeCond(ctx.ATTRNAME().getText());\n-        cond.setType(AttributeCond.Type.ISNOTNULL);\n-        return SearchCond.getLeafCond(cond);\n+        AttrCond cond = createAttrCond(ctx.ATTRNAME().getText());\n+        cond.setType(AttrCond.Type.ISNOTNULL);\n+        return SearchCond.getLeaf(cond);\n     }\n \n     @Override\n@@ -316,33 +315,36 @@ public SearchCond visitLPAREN_EXPR_RPAREN(final SCIMFilterParser.LPAREN_EXPR_RPA\n     @Override\n     public SearchCond visitNOT_EXPR(final SCIMFilterParser.NOT_EXPRContext ctx) {\n         SearchCond cond = visit(ctx.expression());\n-        if (cond.getAttributeCond() != null) {\n-            if (cond.getAttributeCond().getType() == AttributeCond.Type.ISNULL) {\n-                cond.getAttributeCond().setType(AttributeCond.Type.ISNOTNULL);\n-            } else if (cond.getAttributeCond().getType() == AttributeCond.Type.ISNOTNULL) {\n-                cond.getAttributeCond().setType(AttributeCond.Type.ISNULL);\n-            }\n-        } else if (cond.getAnyCond() != null) {\n-            if (cond.getAnyCond().getType() == AnyCond.Type.ISNULL) {\n-                cond.getAnyCond().setType(AnyCond.Type.ISNOTNULL);\n-            } else if (cond.getAnyCond().getType() == AnyCond.Type.ISNOTNULL) {\n-                cond.getAnyCond().setType(AnyCond.Type.ISNULL);\n+        Optional<AnyCond> anyCond = cond.getLeaf(AnyCond.class);\n+        if (anyCond.isPresent()) {\n+            if (anyCond.get().getType() == AttrCond.Type.ISNULL) {\n+                anyCond.get().setType(AttrCond.Type.ISNOTNULL);\n+            } else if (anyCond.get().getType() == AttrCond.Type.ISNOTNULL) {\n+                anyCond.get().setType(AttrCond.Type.ISNULL);\n             }\n         } else {\n-            cond = SearchCond.getNotLeafCond(cond);\n+            Optional<AttrCond> attrCond = cond.getLeaf(AttrCond.class);\n+            if (attrCond.isPresent()) {\n+                if (attrCond.get().getType() == AnyCond.Type.ISNULL) {\n+                    attrCond.get().setType(AnyCond.Type.ISNOTNULL);\n+                } else if (attrCond.get().getType() == AnyCond.Type.ISNOTNULL) {\n+                    attrCond.get().setType(AnyCond.Type.ISNULL);\n+                }\n+            } else {\n+                cond = SearchCond.getNotLeaf(cond);\n+            }\n         }\n \n         return cond;\n     }\n \n     @Override\n     public SearchCond visitEXPR_AND_EXPR(final SCIMFilterParser.EXPR_AND_EXPRContext ctx) {\n-        return SearchCond.getAndCond(visit(ctx.expression(0)), visit(ctx.expression(1)));\n+        return SearchCond.getAnd(visit(ctx.expression(0)), visit(ctx.expression(1)));\n     }\n \n     @Override\n     public SearchCond visitEXPR_OR_EXPR(final SCIMFilterParser.EXPR_OR_EXPRContext ctx) {\n-        return SearchCond.getOrCond(visit(ctx.expression(0)), visit(ctx.expression(1)));\n+        return SearchCond.getOr(visit(ctx.expression(0)), visit(ctx.expression(1)));\n     }\n-\n }"},{"sha":"d29d38396e252d91959eb136f6a89ffb9fc20e86","filename":"ext/scimv2/logic/src/test/java/org/apache/syncope/core/logic/scim/SCIMFilterTest.java","status":"modified","additions":76,"deletions":74,"changes":150,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/ext%2Fscimv2%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMFilterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/ext%2Fscimv2%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMFilterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMFilterTest.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -21,13 +21,15 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import org.apache.syncope.common.lib.scim.SCIMComplexConf;\n import org.apache.syncope.common.lib.scim.SCIMConf;\n import org.apache.syncope.common.lib.scim.SCIMUserConf;\n import org.apache.syncope.common.lib.scim.SCIMUserNameConf;\n import org.apache.syncope.common.lib.scim.types.EmailCanonicalType;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.ext.scimv2.api.type.Resource;\n import org.junit.jupiter.api.BeforeAll;\n@@ -64,20 +66,20 @@ public static void setup() {\n     public void eq() {\n         SearchCond cond = SearchCondConverter.convert(VISITOR, \"userName eq \\\"bjensen\\\"\");\n         assertNotNull(cond);\n-        assertNotNull(cond.getAnyCond());\n-        assertEquals(\"username\", cond.getAnyCond().getSchema());\n-        assertEquals(AttributeCond.Type.IEQ, cond.getAnyCond().getType());\n-        assertEquals(\"bjensen\", cond.getAnyCond().getExpression());\n+        assertTrue(cond.getLeaf(AnyCond.class).isPresent());\n+        assertEquals(\"username\", cond.getLeaf(AnyCond.class).get().getSchema());\n+        assertEquals(AttrCond.Type.IEQ, cond.getLeaf(AnyCond.class).get().getType());\n+        assertEquals(\"bjensen\", cond.getLeaf(AnyCond.class).get().getExpression());\n     }\n \n     @Test\n     public void sw() {\n         SearchCond cond = SearchCondConverter.convert(VISITOR, \"userName sw \\\"J\\\"\");\n         assertNotNull(cond);\n-        assertNotNull(cond.getAnyCond());\n-        assertEquals(\"username\", cond.getAnyCond().getSchema());\n-        assertEquals(AttributeCond.Type.ILIKE, cond.getAnyCond().getType());\n-        assertEquals(\"J%\", cond.getAnyCond().getExpression());\n+        assertTrue(cond.getLeaf(AnyCond.class).isPresent());\n+        assertEquals(\"username\", cond.getLeaf(AnyCond.class).get().getSchema());\n+        assertEquals(AttrCond.Type.ILIKE, cond.getLeaf(AnyCond.class).get().getType());\n+        assertEquals(\"J%\", cond.getLeaf(AnyCond.class).get().getExpression());\n \n         SearchCond fqn = SearchCondConverter.convert(\n                 VISITOR, \"urn:ietf:params:scim:schemas:core:2.0:User:userName sw \\\"J\\\"\");\n@@ -88,30 +90,30 @@ public void sw() {\n     public void pr() {\n         SearchCond cond = SearchCondConverter.convert(VISITOR, \"title pr\");\n         assertNotNull(cond);\n-        assertNotNull(cond.getAttributeCond());\n-        assertEquals(\"title\", cond.getAttributeCond().getSchema());\n-        assertEquals(AttributeCond.Type.ISNOTNULL, cond.getAttributeCond().getType());\n-        assertNull(cond.getAttributeCond().getExpression());\n+        assertTrue(cond.getLeaf(AttrCond.class).isPresent());\n+        assertEquals(\"title\", cond.getLeaf(AttrCond.class).get().getSchema());\n+        assertEquals(AttrCond.Type.ISNOTNULL, cond.getLeaf(AttrCond.class).get().getType());\n+        assertNull(cond.getLeaf(AttrCond.class).get().getExpression());\n     }\n \n     @Test\n     public void gt() {\n         SearchCond cond = SearchCondConverter.convert(VISITOR, \"meta.lastModified gt \\\"2011-05-13T04:42:34Z\\\"\");\n         assertNotNull(cond);\n-        assertNotNull(cond.getAnyCond());\n-        assertEquals(\"lastChangeDate\", cond.getAnyCond().getSchema());\n-        assertEquals(AttributeCond.Type.GT, cond.getAnyCond().getType());\n-        assertEquals(\"2011-05-13T04:42:34Z\", cond.getAnyCond().getExpression());\n+        assertTrue(cond.getLeaf(AnyCond.class).isPresent());\n+        assertEquals(\"lastChangeDate\", cond.getLeaf(AnyCond.class).get().getSchema());\n+        assertEquals(AttrCond.Type.GT, cond.getLeaf(AnyCond.class).get().getType());\n+        assertEquals(\"2011-05-13T04:42:34Z\", cond.getLeaf(AnyCond.class).get().getExpression());\n     }\n \n     @Test\n     public void not() {\n         SearchCond cond = SearchCondConverter.convert(VISITOR, \"not (title pr)\");\n         assertNotNull(cond);\n-        assertNotNull(cond.getAttributeCond());\n-        assertEquals(\"title\", cond.getAttributeCond().getSchema());\n-        assertEquals(AttributeCond.Type.ISNULL, cond.getAttributeCond().getType());\n-        assertNull(cond.getAttributeCond().getExpression());\n+        assertTrue(cond.getLeaf(AttrCond.class).isPresent());\n+        assertEquals(\"title\", cond.getLeaf(AttrCond.class).get().getSchema());\n+        assertEquals(AttrCond.Type.ISNULL, cond.getLeaf(AttrCond.class).get().getType());\n+        assertNull(cond.getLeaf(AttrCond.class).get().getExpression());\n     }\n \n     @Test\n@@ -120,19 +122,19 @@ public void and() {\n         assertNotNull(cond);\n         assertEquals(SearchCond.Type.AND, cond.getType());\n \n-        SearchCond left = cond.getLeftSearchCond();\n+        SearchCond left = cond.getLeft();\n         assertNotNull(left);\n-        assertNotNull(left.getAttributeCond());\n-        assertEquals(\"title\", left.getAttributeCond().getSchema());\n-        assertEquals(AttributeCond.Type.ISNOTNULL, left.getAttributeCond().getType());\n-        assertNull(left.getAttributeCond().getExpression());\n+        assertTrue(left.getLeaf(AttrCond.class).isPresent());\n+        assertEquals(\"title\", left.getLeaf(AttrCond.class).get().getSchema());\n+        assertEquals(AttrCond.Type.ISNOTNULL, left.getLeaf(AttrCond.class).get().getType());\n+        assertNull(left.getLeaf(AttrCond.class).get().getExpression());\n \n-        SearchCond right = cond.getRightSearchCond();\n+        SearchCond right = cond.getRight();\n         assertNotNull(right);\n-        assertNotNull(right.getAnyCond());\n-        assertEquals(\"username\", right.getAnyCond().getSchema());\n-        assertEquals(AttributeCond.Type.ILIKE, right.getAnyCond().getType());\n-        assertEquals(\"J%\", right.getAnyCond().getExpression());\n+        assertTrue(right.getLeaf(AnyCond.class).isPresent());\n+        assertEquals(\"username\", right.getLeaf(AnyCond.class).get().getSchema());\n+        assertEquals(AttrCond.Type.ILIKE, right.getLeaf(AnyCond.class).get().getType());\n+        assertEquals(\"J%\", right.getLeaf(AnyCond.class).get().getExpression());\n     }\n \n     @Test\n@@ -141,19 +143,19 @@ public void or() {\n         assertNotNull(cond);\n         assertEquals(SearchCond.Type.OR, cond.getType());\n \n-        SearchCond left = cond.getLeftSearchCond();\n+        SearchCond left = cond.getLeft();\n         assertNotNull(left);\n-        assertNotNull(left.getAttributeCond());\n-        assertEquals(\"title\", left.getAttributeCond().getSchema());\n-        assertEquals(AttributeCond.Type.ISNOTNULL, left.getAttributeCond().getType());\n-        assertNull(left.getAttributeCond().getExpression());\n+        assertTrue(left.getLeaf(AttrCond.class).isPresent());\n+        assertEquals(\"title\", left.getLeaf(AttrCond.class).get().getSchema());\n+        assertEquals(AttrCond.Type.ISNOTNULL, left.getLeaf(AttrCond.class).get().getType());\n+        assertNull(left.getLeaf(AttrCond.class).get().getExpression());\n \n-        SearchCond right = cond.getRightSearchCond();\n+        SearchCond right = cond.getRight();\n         assertNotNull(right);\n-        assertNotNull(right.getAttributeCond());\n-        assertEquals(\"cn\", right.getAttributeCond().getSchema());\n-        assertEquals(AttributeCond.Type.IEQ, right.getAttributeCond().getType());\n-        assertEquals(\"Other\", right.getAttributeCond().getExpression());\n+        assertTrue(right.getLeaf(AttrCond.class).isPresent());\n+        assertEquals(\"cn\", right.getLeaf(AttrCond.class).get().getSchema());\n+        assertEquals(AttrCond.Type.IEQ, right.getLeaf(AttrCond.class).get().getType());\n+        assertEquals(\"Other\", right.getLeaf(AttrCond.class).get().getExpression());\n     }\n \n     @Test\n@@ -162,18 +164,18 @@ public void type() {\n         assertNotNull(cond);\n         assertEquals(SearchCond.Type.AND, cond.getType());\n \n-        SearchCond left = cond.getLeftSearchCond();\n+        SearchCond left = cond.getLeft();\n         assertNotNull(left);\n-        assertNotNull(left.getAttributeCond());\n-        assertEquals(\"userType\", left.getAttributeCond().getSchema());\n-        assertEquals(AttributeCond.Type.IEQ, left.getAttributeCond().getType());\n-        assertEquals(\"Employee\", left.getAttributeCond().getExpression());\n+        assertTrue(left.getLeaf(AttrCond.class).isPresent());\n+        assertEquals(\"userType\", left.getLeaf(AttrCond.class).get().getSchema());\n+        assertEquals(AttrCond.Type.IEQ, left.getLeaf(AttrCond.class).get().getType());\n+        assertEquals(\"Employee\", left.getLeaf(AttrCond.class).get().getExpression());\n \n-        SearchCond right = cond.getRightSearchCond();\n+        SearchCond right = cond.getRight();\n         assertNotNull(right);\n-        assertNotNull(right.getAttributeCond());\n-        assertEquals(\"email\", right.getAttributeCond().getSchema());\n-        assertEquals(AttributeCond.Type.ISNOTNULL, right.getAttributeCond().getType());\n+        assertTrue(right.getLeaf(AttrCond.class).isPresent());\n+        assertEquals(\"email\", right.getLeaf(AttrCond.class).get().getSchema());\n+        assertEquals(AttrCond.Type.ISNOTNULL, right.getLeaf(AttrCond.class).get().getType());\n     }\n \n     @Test\n@@ -182,10 +184,10 @@ public void name() {\n         assertNotNull(cond);\n         assertEquals(SearchCond.Type.LEAF, cond.getType());\n \n-        AttributeCond leaf = cond.getAttributeCond();\n+        AttrCond leaf = cond.getLeaf(AttrCond.class).get();\n         assertNotNull(leaf);\n         assertEquals(\"surname\", leaf.getSchema());\n-        assertEquals(AttributeCond.Type.ILIKE, leaf.getType());\n+        assertEquals(AttrCond.Type.ILIKE, leaf.getType());\n         assertEquals(\"%O'Malley%\", leaf.getExpression());\n     }\n \n@@ -196,40 +198,40 @@ public void emails() {\n         assertNotNull(cond);\n         assertEquals(SearchCond.Type.OR, cond.getType());\n \n-        SearchCond left = cond.getLeftSearchCond();\n+        SearchCond left = cond.getLeft();\n         assertNotNull(left);\n         assertEquals(SearchCond.Type.OR, left.getType());\n \n-        SearchCond left1 = left.getLeftSearchCond();\n+        SearchCond left1 = left.getLeft();\n         assertNotNull(left1);\n-        assertNotNull(left1.getAttributeCond());\n-        assertEquals(\"email\", left1.getAttributeCond().getSchema());\n-        assertEquals(AttributeCond.Type.ILIKE, left1.getAttributeCond().getType());\n-        assertEquals(\"%example.com%\", left1.getAttributeCond().getExpression());\n+        assertTrue(left1.getLeaf(AttrCond.class).isPresent());\n+        assertEquals(\"email\", left1.getLeaf(AttrCond.class).get().getSchema());\n+        assertEquals(AttrCond.Type.ILIKE, left1.getLeaf(AttrCond.class).get().getType());\n+        assertEquals(\"%example.com%\", left1.getLeaf(AttrCond.class).get().getExpression());\n \n-        SearchCond left2 = left.getRightSearchCond();\n+        SearchCond left2 = left.getRight();\n         assertNotNull(left2);\n-        assertNotNull(left2.getAttributeCond());\n-        assertEquals(\"gmail\", left2.getAttributeCond().getSchema());\n-        assertEquals(AttributeCond.Type.ILIKE, left2.getAttributeCond().getType());\n-        assertEquals(\"%example.com%\", left2.getAttributeCond().getExpression());\n+        assertTrue(left2.getLeaf(AttrCond.class).isPresent());\n+        assertEquals(\"gmail\", left2.getLeaf(AttrCond.class).get().getSchema());\n+        assertEquals(AttrCond.Type.ILIKE, left2.getLeaf(AttrCond.class).get().getType());\n+        assertEquals(\"%example.com%\", left2.getLeaf(AttrCond.class).get().getExpression());\n \n-        SearchCond right = cond.getRightSearchCond();\n+        SearchCond right = cond.getRight();\n         assertNotNull(right);\n         assertEquals(SearchCond.Type.OR, right.getType());\n \n-        SearchCond right1 = right.getLeftSearchCond();\n+        SearchCond right1 = right.getLeft();\n         assertNotNull(right1);\n-        assertNotNull(right1.getAttributeCond());\n-        assertEquals(\"email\", right1.getAttributeCond().getSchema());\n-        assertEquals(AttributeCond.Type.ILIKE, right1.getAttributeCond().getType());\n-        assertEquals(\"%example.org%\", right1.getAttributeCond().getExpression());\n+        assertTrue(right1.getLeaf(AttrCond.class).isPresent());\n+        assertEquals(\"email\", right1.getLeaf(AttrCond.class).get().getSchema());\n+        assertEquals(AttrCond.Type.ILIKE, right1.getLeaf(AttrCond.class).get().getType());\n+        assertEquals(\"%example.org%\", right1.getLeaf(AttrCond.class).get().getExpression());\n \n-        SearchCond right2 = right.getRightSearchCond();\n+        SearchCond right2 = right.getRight();\n         assertNotNull(right2);\n-        assertNotNull(right2.getAttributeCond());\n-        assertEquals(\"gmail\", right2.getAttributeCond().getSchema());\n-        assertEquals(AttributeCond.Type.ILIKE, right2.getAttributeCond().getType());\n-        assertEquals(\"%example.org%\", right2.getAttributeCond().getExpression());\n+        assertTrue(right2.getLeaf(AttrCond.class).isPresent());\n+        assertEquals(\"gmail\", right2.getLeaf(AttrCond.class).get().getSchema());\n+        assertEquals(AttrCond.Type.ILIKE, right2.getLeaf(AttrCond.class).get().getType());\n+        assertEquals(\"%example.org%\", right2.getLeaf(AttrCond.class).get().getExpression());\n     }\n }"},{"sha":"72222a5d719a67faf0427fdd3fc60eebfc323805","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -205,7 +205,7 @@ protected ListResponse<R> doSearch(\n             sort = List.of();\n         } else {\n             OrderByClause clause = new OrderByClause();\n-            clause.setField(visitor.createAttributeCond(request.getSortBy()).getSchema());\n+            clause.setField(visitor.createAttrCond(request.getSortBy()).getSchema());\n             clause.setDirection(request.getSortOrder() == null || request.getSortOrder() == SortOrder.ascending\n                     ? OrderByClause.Direction.ASC\n                     : OrderByClause.Direction.DESC);"},{"sha":"4ef3c11c637730f0f46a00ab47fc42eb4242f298","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -109,7 +109,7 @@ public Response replace(final String id, final SCIMGroup group) {\n \n         MembershipCond membCond = new MembershipCond();\n         membCond.setGroup(id);\n-        SearchCond searchCond = SearchCond.getLeafCond(membCond);\n+        SearchCond searchCond = SearchCond.getLeaf(membCond);\n         int count = userLogic().search(searchCond,\n                 1, 1, List.of(),\n                 SyncopeConstants.ROOT_REALM, false).getLeft();"},{"sha":"ae56169404ed6cf70cdb9a4fc231f70a62978a3a","filename":"fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/PrintersValueProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FPrintersValueProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FPrintersValueProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FPrintersValueProvider.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -43,7 +43,7 @@ public class PrintersValueProvider implements DropdownValueProvider {\n     static {\n         AnyTypeCond anyTypeCond = new AnyTypeCond();\n         anyTypeCond.setAnyTypeKey(\"PRINTER\");\n-        PRINTER_COND = SearchCond.getLeafCond(anyTypeCond);\n+        PRINTER_COND = SearchCond.getLeaf(anyTypeCond);\n \n         OrderByClause orderByNameAsc = new OrderByClause();\n         orderByNameAsc.setField(\"name\");"},{"sha":"379d30590b39d8d60825f6775187313e9cbe322f","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/CustomJWTSSOProvider.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCustomJWTSSOProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCustomJWTSSOProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCustomJWTSSOProvider.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -29,7 +29,7 @@\n import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.spring.security.AuthDataAccessor;\n@@ -82,12 +82,12 @@ public JwsVerificationSignature createJwsVerificationSignature(final JwsHeaders\n     @Transactional(readOnly = true)\n     @Override\n     public Pair<User, Set<SyncopeGrantedAuthority>> resolve(final JwtClaims jwtClaims) {\n-        AttributeCond userIdCond = new AttributeCond();\n+        AttrCond userIdCond = new AttrCond();\n         userIdCond.setSchema(\"userId\");\n-        userIdCond.setType(AttributeCond.Type.EQ);\n+        userIdCond.setType(AttrCond.Type.EQ);\n         userIdCond.setExpression(jwtClaims.getSubject());\n \n-        List<User> matching = searchDAO.search(SearchCond.getLeafCond(userIdCond), AnyTypeKind.USER);\n+        List<User> matching = searchDAO.search(SearchCond.getLeaf(userIdCond), AnyTypeKind.USER);\n         if (matching.size() == 1) {\n             User user = matching.get(0);\n             Set<SyncopeGrantedAuthority> authorities = authDataAccessor.getAuthorities(user.getUsername());"},{"sha":"3c0b86f9eed5f06e649e37187868b3e6b1b48bfd","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/LinkedAccountSamplePullCorrelationRule.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FLinkedAccountSamplePullCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FLinkedAccountSamplePullCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FLinkedAccountSamplePullCorrelationRule.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -24,7 +24,7 @@\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRuleConfClass;\n import org.apache.syncope.core.persistence.api.dao.PullMatch;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n@@ -44,18 +44,18 @@ public class LinkedAccountSamplePullCorrelationRule implements PullCorrelationRu\n \n     @Override\n     public SearchCond getSearchCond(final SyncDelta syncDelta, final Provision provision) {\n-        AttributeCond cond = new AttributeCond();\n+        AttrCond cond = new AttrCond();\n \n         Attribute email = syncDelta.getObject().getAttributeByName(\"email\");\n         if (email != null && !CollectionUtils.isEmpty(email.getValue())) {\n             cond.setSchema(\"email\");\n-            cond.setType(AttributeCond.Type.EQ);\n+            cond.setType(AttrCond.Type.EQ);\n             cond.setExpression(email.getValue().get(0).toString());\n         } else {\n             cond.setSchema(\"\");\n         }\n \n-        return SearchCond.getLeafCond(cond);\n+        return SearchCond.getLeaf(cond);\n     }\n \n     @Transactional(readOnly = true)"},{"sha":"82b0b51a64a428b75d2a5d223fb2c7db2b9f1a33","filename":"fit/core-reference/src/main/resources/elasticsearch/persistence.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fpersistence.properties?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -20,6 +20,7 @@ plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainSchemaDAO\n plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrDAO\n plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrValueDAO\n any.search.dao=org.apache.syncope.core.persistence.jpa.dao.ElasticsearchAnySearchDAO\n+any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisitor\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO"},{"sha":"6711c74cc2c44855244a48961104458d4c4bcc33","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -116,18 +116,18 @@\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.syncope.common.rest.api.service.UserService;\n-import org.apache.syncope.fit.core.UserITCase;\n-import org.identityconnectors.common.security.Encryptor;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.jdbc.core.JdbcTemplate;\n import org.apache.syncope.common.rest.api.service.UserRequestService;\n import org.apache.syncope.common.rest.api.service.BpmnProcessService;\n import org.apache.syncope.common.rest.api.service.GatewayRouteService;\n import org.apache.syncope.common.rest.api.service.UserWorkflowTaskService;\n import org.apache.syncope.fit.core.CoreITContext;\n+import org.apache.syncope.fit.core.UserITCase;\n+import org.identityconnectors.common.security.Encryptor;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.core.JdbcTemplate;\n import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n \n @SpringJUnitConfig({ CoreITContext.class, SelfKeymasterClientContext.class, ZookeeperKeymasterClientContext.class })"},{"sha":"47d4807fa2ea30263c58b74d9724cb6bf005a829","filename":"fit/core-reference/src/test/resources/TestPullRule.groovy","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPullRule.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPullRule.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPullRule.groovy?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -19,7 +19,7 @@\n  */\n import groovy.transform.CompileStatic\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision\n import org.identityconnectors.framework.common.objects.SyncDelta\n@@ -32,11 +32,11 @@ class TestPullRule implements PullCorrelationRule {\n \n   @Override\n   SearchCond getSearchCond(final SyncDelta syncDelta, final Provision provision) {\n-    AttributeCond cond = new AttributeCond();\n+    AttrCond cond = new AttrCond();\n     cond.setSchema(\"email\");\n-    cond.setType(AttributeCond.Type.EQ);\n+    cond.setType(AttrCond.Type.EQ);\n     cond.setExpression(syncDelta.getObject().getName().getNameValue());\n \n-    return SearchCond.getLeafCond(cond);\n+    return SearchCond.getLeaf(cond);\n   }\n }"},{"sha":"30f102e9fc6be6ea07e06e7d886374404676a680","filename":"src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbms.adoc","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60ec59c065133ea272ddf55be93c15ba3117e4f/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fdbms.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60ec59c065133ea272ddf55be93c15ba3117e4f/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fdbms.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fdbms.adoc?ref=e60ec59c065133ea272ddf55be93c15ba3117e4f","patch":"@@ -87,6 +87,7 @@ plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainSchemaDA\n plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainAttrDAO\n plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainAttrValueDAO\n any.search.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONAnySearchDAO\n+any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisitor\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO\n@@ -219,6 +220,7 @@ plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainSchemaDA\n plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainAttrDAO\n plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainAttrValueDAO\n any.search.dao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAnySearchDAO\n+any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisitor\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO"}]}