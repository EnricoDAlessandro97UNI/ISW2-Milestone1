{"sha":"30189cba6fd5a8bbe52d69f319fa7d94bda7b532","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjMwMTg5Y2JhNmZkNWE4YmJlNTJkNjlmMzE5ZmE3ZDk0YmRhN2I1MzI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-10-14T14:45:20Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-10-14T14:45:20Z"},"message":"[SYNCOPE-420] Implementation provided for users and roles, either when acting via REST or via SyncJob\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_1_X@1531921 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ec7302819294c88cafda5ad5e9faf86ff4c02e94","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ec7302819294c88cafda5ad5e9faf86ff4c02e94"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/30189cba6fd5a8bbe52d69f319fa7d94bda7b532","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/30189cba6fd5a8bbe52d69f319fa7d94bda7b532","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/30189cba6fd5a8bbe52d69f319fa7d94bda7b532","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"da16c1c0858ad730132f72917e5cba3c1988529a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/da16c1c0858ad730132f72917e5cba3c1988529a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/da16c1c0858ad730132f72917e5cba3c1988529a"}],"stats":{"total":1438,"additions":834,"deletions":604},"files":[{"sha":"4f72781a66106628eb613610d991a90dcb476816","filename":"common/src/main/java/org/apache/syncope/common/mod/AbstractAttributableMod.java","status":"modified","additions":13,"deletions":5,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FAbstractAttributableMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FAbstractAttributableMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FAbstractAttributableMod.java?ref=30189cba6fd5a8bbe52d69f319fa7d94bda7b532","patch":"@@ -36,14 +36,23 @@\n public abstract class AbstractAttributableMod extends AbstractBaseBean {\r\n \r\n     private static final long serialVersionUID = 3241118574016303198L;\r\n+\r\n     protected long id;\r\n+\r\n     protected Set<AttributeMod> attributesToBeUpdated;\r\n+\r\n     protected Set<String> attributesToBeRemoved;\r\n+\r\n     protected Set<String> derivedAttributesToBeAdded;\r\n+\r\n     protected Set<String> derivedAttributesToBeRemoved;\r\n+\r\n     protected Set<AttributeMod> virtualAttributesToBeUpdated;\r\n+\r\n     protected Set<String> virtualAttributesToBeRemoved;\r\n+\r\n     protected Set<String> resourcesToBeAdded;\r\n+\r\n     protected Set<String> resourcesToBeRemoved;\r\n \r\n     /**\r\n@@ -71,19 +80,19 @@ public void setId(long id) {\n     }\r\n \r\n     /**\r\n-     * Convenience method for removing entire attribute instead removing each value in an AttributeMod object\r\n+     * Convenience method for removing entire attribute instead removing each value in an AttributeMod object.\r\n      *\r\n-     * @param name (schema) of attribute to be removed.\r\n+     * @param attribute (schema) of attribute to be removed.\r\n      * @return true on success.\r\n      */\r\n     public boolean addAttributeToBeRemoved(String attribute) {\r\n         return attributesToBeRemoved.add(attribute);\r\n     }\r\n \r\n     /**\r\n-     * Convenience method for removing entire attribute instead removing each value in an AttributeMod object\r\n+     * Convenience method for removing entire attribute instead removing each value in an AttributeMod object.\r\n      *\r\n-     * @param name (schema) of attribute to be removed.\r\n+     * @param attribute (schema) of attribute to be removed.\r\n      * @return true on success.\r\n      */\r\n     public boolean removeAttributeToBeRemoved(String attribute) {\r\n@@ -160,7 +169,6 @@ public Set<String> getDerivedAttributesToBeAdded() {\n     }\r\n \r\n     public void setDerivedAttributesToBeAdded(Set<String> derivedAttributesToBeAdded) {\r\n-\r\n         this.derivedAttributesToBeAdded = derivedAttributesToBeAdded;\r\n     }\r\n \r"},{"sha":"c3d6738962454a47042149141d79c8690797e00f","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractAttributableTO.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractAttributableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractAttributableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractAttributableTO.java?ref=30189cba6fd5a8bbe52d69f319fa7d94bda7b532","patch":"@@ -111,8 +111,10 @@ public List<AttributeTO> getDerivedAttributes() {\n     }\r\n \r\n     public void setDerivedAttributes(final List<AttributeTO> derivedAttributes) {\r\n-\r\n-        this.derivedAttributes = derivedAttributes;\r\n+        this.derivedAttributes.clear();\r\n+        if (derivedAttributes != null && !derivedAttributes.isEmpty()) {\r\n+            this.derivedAttributes.addAll(derivedAttributes);\r\n+        }\r\n     }\r\n \r\n     public boolean addVirtualAttribute(final AttributeTO virtualAttribute) {\r\n@@ -130,7 +132,10 @@ public List<AttributeTO> getVirtualAttributes() {\n     }\r\n \r\n     public void setVirtualAttributes(final List<AttributeTO> virtualAttributes) {\r\n-        this.virtualAttributes = virtualAttributes;\r\n+        this.virtualAttributes.clear();\r\n+        if (virtualAttributes != null && !virtualAttributes.isEmpty()) {\r\n+            this.virtualAttributes.addAll(virtualAttributes);\r\n+        }\r\n     }\r\n \r\n     public boolean addResource(final String resource) {\r"},{"sha":"fae2fec76071dd8ebb8b552578a6432e9696134a","filename":"core/pom.xml","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=30189cba6fd5a8bbe52d69f319fa7d94bda7b532","patch":"@@ -425,8 +425,13 @@ under the License.\n             <configuration>\n               <target>\n                 <unzip src=\"${project.build.directory}/${project.build.finalName}.war\" dest=\"${cargo.run.dir}\" />\n-                <copy file=\"${project.build.directory}/test-classes/org/apache/syncope/core/sync/TestSyncActions.class\" todir=\"${cargo.run.dir}/WEB-INF/classes/org/apache/syncope/core/sync\" />\n-                <copy file=\"${project.build.directory}/test-classes/org/apache/syncope/core/sync/TestSyncRule.class\" todir=\"${cargo.run.dir}/WEB-INF/classes/org/apache/syncope/core/sync\" />\n+                <copy file=\"${project.build.directory}/test-classes/org/apache/syncope/core/sync/TestSyncActions.class\" \n+                      todir=\"${cargo.run.dir}/WEB-INF/classes/org/apache/syncope/core/sync\" />\n+                <copy file=\"${project.build.directory}/test-classes/org/apache/syncope/core/sync/TestSyncRule.class\" \n+                      todir=\"${cargo.run.dir}/WEB-INF/classes/org/apache/syncope/core/sync\" />\n+                <copy file=\"${project.build.directory}/test-classes/org/apache/syncope/core/rest/data/DefaultAttributableTransformer.class\" \n+                      todir=\"${cargo.run.dir}/WEB-INF/classes/org/apache/syncope/core/rest/data\" \n+                      overwrite=\"true\"/>\n                 <copy file=\"${project.build.directory}/test-classes/db.jsp\" todir=\"${cargo.run.dir}\" />\n                 <copy todir=\"${cargo.run.dir}/WEB-INF/classes\" includeEmptyDirs=\"false\">\n                   <fileset dir=\"${project.build.directory}/test-classes\">"},{"sha":"cfe107f1344b05e584bb8f2a91cbe7091c244074","filename":"core/src/main/java/org/apache/syncope/core/propagation/PropagationReporter.java","status":"renamed","additions":22,"deletions":5,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationReporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationReporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationReporter.java?ref=30189cba6fd5a8bbe52d69f319fa7d94bda7b532","patch":"@@ -18,24 +18,41 @@\n  */\n package org.apache.syncope.core.propagation;\n \n+import java.util.List;\n+import org.apache.syncope.common.to.PropagationStatusTO;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n \n /**\n- * Handle propagation executions.\n+ * Report propagation status after executions.\n  */\n-public interface PropagationHandler {\n+public interface PropagationReporter {\n \n     /**\n-     *\n-     * Handle propagation executions.\n+     * Report propagation status after executions in case of success or non-blocking failure\n+     * (e.g. on secondary resources).\n      *\n      * @param resourceName resource name.\n      * @param execStatus propagation execution status.\n      * @param failureReason propagation execution failure message.\n      * @param beforeObj retrieved connector object before operation execution.\n      * @param afterObj retrieved connector object after operation execution.\n      */\n-    void handle(String resourceName, PropagationTaskExecStatus execStatus,\n+    void onSuccessOrSecondaryResourceFailures(String resourceName, PropagationTaskExecStatus execStatus,\n             String failureReason, ConnectorObject beforeObj, ConnectorObject afterObj);\n+\n+    /**\n+     * Report propagation status after executions in case blocking failure (e.g. on primary resources).\n+     * \n+     * @param tasks propagation tasks performed before failure\n+     */\n+    void onPrimaryResourceFailure(List<PropagationTask> tasks);\n+\n+    /**\n+     * Returns the list of propagation statuses.\n+     *\n+     * @return the list of propagation statuses\n+     */\n+    List<PropagationStatusTO> getStatuses();\n }","previous_filename":"core/src/main/java/org/apache/syncope/core/propagation/PropagationHandler.java"},{"sha":"adbe4029b74e252bf5fe7a36cf6393f87a048d81","filename":"core/src/main/java/org/apache/syncope/core/propagation/PropagationTaskExecutor.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationTaskExecutor.java?ref=30189cba6fd5a8bbe52d69f319fa7d94bda7b532","patch":"@@ -42,10 +42,10 @@ public interface PropagationTaskExecutor {\n      * Execute the given PropagationTask, invoke the given handler and returns the generated TaskExec.\n      *\n      * @param task to be executed\n-     * @param handler to be invoked\n+     * @param reporter to report propagation execution status\n      * @return the generated TaskExec\n      */\n-    TaskExec execute(PropagationTask task, PropagationHandler handler);\n+    TaskExec execute(PropagationTask task, PropagationReporter reporter);\n \n     /**\n      * Execute a collection of PropagationTask objects.\n@@ -60,7 +60,7 @@ public interface PropagationTaskExecutor {\n      * The process is interrupted as soon as the result of the communication with a primary resource is in error.\n      *\n      * @param tasks to be execute, in given order\n-     * @param handler propagation handler\n+     * @param reporter to report propagation execution status\n      */\n-    void execute(Collection<PropagationTask> tasks, PropagationHandler handler);\n+    void execute(Collection<PropagationTask> tasks, PropagationReporter reporter);\n }"},{"sha":"d0290fe7ff3893fcd614eb182b6955fad68e353b","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/AbstractPropagationTaskExecutor.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java?ref=30189cba6fd5a8bbe52d69f319fa7d94bda7b532","patch":"@@ -40,7 +40,7 @@\n import org.apache.syncope.core.propagation.ConnectorFactory;\n import org.apache.syncope.core.propagation.DefaultPropagationActions;\n import org.apache.syncope.core.propagation.PropagationActions;\n-import org.apache.syncope.core.propagation.PropagationHandler;\n+import org.apache.syncope.core.propagation.PropagationReporter;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.propagation.Connector;\n import org.apache.syncope.core.propagation.TimeoutException;\n@@ -266,7 +266,7 @@ protected void delete(final PropagationTask task, final ConnectorObject beforeOb\n     }\n \n     @Override\n-    public TaskExec execute(final PropagationTask task, final PropagationHandler handler) {\n+    public TaskExec execute(final PropagationTask task, final PropagationReporter reporter) {\n         final PropagationActions actions = getPropagationActions(task.getResource());\n \n         final Date startDate = new Date();\n@@ -321,10 +321,10 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n                 exceptionWriter.write(e.getMessage() + \"\\n\\n\");\n                 e.printStackTrace(new PrintWriter(exceptionWriter));\n                 taskExecutionMessage = exceptionWriter.toString();\n-                if (e.getCause() != null) {\n-                    failureReason = e.getMessage() + \"\\n\\n Cause: \" + e.getCause().getMessage().split(\"\\n\")[0];\n-                } else {\n+                if (e.getCause() == null) {\n                     failureReason = e.getMessage();\n+                } else {\n+                    failureReason = e.getMessage() + \"\\n\\n Cause: \" + e.getCause().getMessage().split(\"\\n\")[0];\n                 }\n             }\n \n@@ -370,8 +370,8 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n                 taskDAO.flush();\n             }\n \n-            if (handler != null) {\n-                handler.handle(\n+            if (reporter != null) {\n+                reporter.onSuccessOrSecondaryResourceFailures(\n                         task.getResource().getName(),\n                         PropagationTaskExecStatus.valueOf(execution.getStatus()),\n                         failureReason,\n@@ -391,7 +391,7 @@ public void execute(final Collection<PropagationTask> tasks) {\n     }\n \n     @Override\n-    public abstract void execute(Collection<PropagationTask> tasks, PropagationHandler handler);\n+    public abstract void execute(Collection<PropagationTask> tasks, final PropagationReporter reporter);\n \n     /**\n      * Check whether an execution has to be stored, for a given task."},{"sha":"8619383258a805aa53b5b08cb68ab57203bd508f","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/DefaultPropagationReporter.java","status":"renamed","additions":27,"deletions":26,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FDefaultPropagationReporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FDefaultPropagationReporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FDefaultPropagationReporter.java?ref=30189cba6fd5a8bbe52d69f319fa7d94bda7b532","patch":"@@ -18,33 +18,30 @@\n  */\n package org.apache.syncope.core.propagation.impl;\n \n+import java.util.ArrayList;\n import java.util.List;\n import org.apache.syncope.common.to.PropagationStatusTO;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n-import org.apache.syncope.core.propagation.PropagationHandler;\n+import org.apache.syncope.core.propagation.PropagationReporter;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n-public class DefaultPropagationHandler implements PropagationHandler {\n+public class DefaultPropagationReporter implements PropagationReporter {\n \n-    protected static final Logger LOG = LoggerFactory.getLogger(DefaultPropagationHandler.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(DefaultPropagationReporter.class);\n \n-    private final ConnObjectUtil connObjectUtil;\n+    @Autowired\n+    protected ConnObjectUtil connObjectUtil;\n \n-    private final List<PropagationStatusTO> propagations;\n-\n-    public DefaultPropagationHandler(final ConnObjectUtil connObjectUtil,\n-            final List<PropagationStatusTO> propagations) {\n-\n-        this.connObjectUtil = connObjectUtil;\n-        this.propagations = propagations;\n-    }\n+    protected final List<PropagationStatusTO> statuses = new ArrayList<PropagationStatusTO>();\n \n     @Override\n-    public void handle(final String resource, final PropagationTaskExecStatus executionStatus,\n+    public void onSuccessOrSecondaryResourceFailures(final String resource,\n+            final PropagationTaskExecStatus executionStatus,\n             final String failureReason, final ConnectorObject beforeObj, final ConnectorObject afterObj) {\n \n         final PropagationStatusTO propagation = new PropagationStatusTO();\n@@ -60,34 +57,38 @@ public void handle(final String resource, final PropagationTaskExecStatus execut\n             propagation.setAfterObj(connObjectUtil.getConnObjectTO(afterObj));\n         }\n \n-        propagations.add(propagation);\n+        statuses.add(propagation);\n     }\n \n-    public void completeWhenPrimaryResourceErrored(\n-            final List<PropagationStatusTO> propagations, final List<PropagationTask> tasks) {\n+    private boolean containsPropagationStatusTO(final String resourceName) {\n+        for (PropagationStatusTO status : statuses) {\n+            if (resourceName.equals(status.getResource())) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n \n-        final String failedResource = propagations.get(propagations.size() - 1).getResource();\n+    @Override\n+    public void onPrimaryResourceFailure(final List<PropagationTask> tasks) {\n+        final String failedResource = statuses.get(statuses.size() - 1).getResource();\n \n         LOG.debug(\"Propagation error: {} primary resource failed to propagate\", failedResource);\n \n         for (PropagationTask propagationTask : tasks) {\n-            if (!containsPropagationStatusTO(propagationTask.getResource().getName(), propagations)) {\n+            if (!containsPropagationStatusTO(propagationTask.getResource().getName())) {\n                 final PropagationStatusTO propagationStatusTO = new PropagationStatusTO();\n                 propagationStatusTO.setResource(propagationTask.getResource().getName());\n                 propagationStatusTO.setStatus(PropagationTaskExecStatus.FAILURE);\n                 propagationStatusTO.setFailureReason(\n                         \"Propagation error: \" + failedResource + \" primary resource failed to propagate.\");\n-                propagations.add(propagationStatusTO);\n+                statuses.add(propagationStatusTO);\n             }\n         }\n     }\n \n-    private boolean containsPropagationStatusTO(final String resource, final List<PropagationStatusTO> propagations) {\n-        for (PropagationStatusTO status : propagations) {\n-            if (resource.equals(status.getResource())) {\n-                return true;\n-            }\n-        }\n-        return false;\n+    @Override\n+    public List<PropagationStatusTO> getStatuses() {\n+        return statuses;\n     }\n }","previous_filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/DefaultPropagationHandler.java"},{"sha":"5ea5faeffa31f7ad8224e01dc4ba9efbf9601f7e","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/PriorityPropagationTaskExecutor.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPriorityPropagationTaskExecutor.java?ref=30189cba6fd5a8bbe52d69f319fa7d94bda7b532","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.TaskExec;\n import org.apache.syncope.core.propagation.PropagationException;\n-import org.apache.syncope.core.propagation.PropagationHandler;\n+import org.apache.syncope.core.propagation.PropagationReporter;\n \n public class PriorityPropagationTaskExecutor extends AbstractPropagationTaskExecutor {\n \n@@ -37,14 +37,14 @@ public class PriorityPropagationTaskExecutor extends AbstractPropagationTaskExec\n      * {@inheritDoc}\n      */\n     @Override\n-    public void execute(final Collection<PropagationTask> tasks, final PropagationHandler handler) {\n+    public void execute(final Collection<PropagationTask> tasks, final PropagationReporter reporter) {\n         final List<PropagationTask> prioritizedTasks = new ArrayList<PropagationTask>(tasks);\n         Collections.sort(prioritizedTasks, new PriorityComparator());\n \n         for (PropagationTask task : prioritizedTasks) {\n             LOG.debug(\"Execution started for {}\", task);\n \n-            TaskExec execution = execute(task, handler);\n+            TaskExec execution = execute(task, reporter);\n \n             LOG.debug(\"Execution finished for {}, {}\", task, execution);\n "},{"sha":"9067a20f1572c69593bc48edff771801ee627a1d","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/PropagationManager.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java?ref=30189cba6fd5a8bbe52d69f319fa7d94bda7b532","patch":"@@ -20,6 +20,7 @@\n \n import java.util.AbstractMap.SimpleEntry;\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n@@ -133,7 +134,7 @@ public List<PropagationTask> getUserCreateTaskIds(final WorkflowResult<Map.Entry\n      * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given user\n      */\n     public List<PropagationTask> getUserCreateTaskIds(final WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n-            final String password, final List<AttributeTO> vAttrs, final Set<String> noPropResourceNames)\n+            final String password, final Collection<AttributeTO> vAttrs, final Set<String> noPropResourceNames)\n             throws NotFoundException, UnauthorizedRoleException {\n \n         SyncopeUser user = userDataBinder.getUserFromId(wfResult.getResult().getKey());\n@@ -171,7 +172,7 @@ public List<PropagationTask> getRoleCreateTaskIds(final WorkflowResult<Long> wfR\n      * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given role\n      */\n     public List<PropagationTask> getRoleCreateTaskIds(final WorkflowResult<Long> wfResult,\n-            final List<AttributeTO> vAttrs, final Set<String> noPropResourceNames)\n+            final Collection<AttributeTO> vAttrs, final Set<String> noPropResourceNames)\n             throws NotFoundException, UnauthorizedRoleException {\n \n         SyncopeRole role = roleDataBinder.getRoleFromId(wfResult.getResult());\n@@ -182,7 +183,7 @@ public List<PropagationTask> getRoleCreateTaskIds(final WorkflowResult<Long> wfR\n     }\n \n     protected List<PropagationTask> getCreateTaskIds(final AbstractAttributable attributable,\n-            final String password, final List<AttributeTO> vAttrs, final Boolean enable,\n+            final String password, final Collection<AttributeTO> vAttrs, final Boolean enable,\n             final PropagationByResource propByRes, final Set<String> noPropResourceNames) {\n \n         if (propByRes == null || propByRes.isEmpty()) {"},{"sha":"3257604d40d280422c630756f75d88dc5307e29a","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RoleController.java","status":"modified","additions":49,"deletions":36,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=30189cba6fd5a8bbe52d69f319fa7d94bda7b532","patch":"@@ -26,15 +26,13 @@\n import org.apache.syncope.common.mod.RoleMod;\n import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.services.InvalidSearchConditionException;\n-import org.apache.syncope.common.to.PropagationStatusTO;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.AuditElements.RoleSubCategory;\n import org.apache.syncope.core.audit.AuditManager;\n-import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -43,10 +41,12 @@\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.propagation.PropagationException;\n+import org.apache.syncope.core.propagation.PropagationReporter;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.propagation.impl.DefaultPropagationHandler;\n import org.apache.syncope.core.propagation.impl.PropagationManager;\n+import org.apache.syncope.core.rest.data.AttributableTransformer;\n import org.apache.syncope.core.rest.data.RoleDataBinder;\n+import org.apache.syncope.core.util.ApplicationContextProvider;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.apache.syncope.core.workflow.WorkflowResult;\n@@ -74,34 +74,31 @@ public class RoleController {\n     protected static final Logger LOG = LoggerFactory.getLogger(RoleController.class);\n \n     @Autowired\n-    private AuditManager auditManager;\n+    protected AuditManager auditManager;\n \n     @Autowired\n-    private RoleDAO roleDAO;\n+    protected RoleDAO roleDAO;\n \n     @Autowired\n-    private UserDAO userDAO;\n+    protected UserDAO userDAO;\n \n     @Autowired\n-    private AttributableSearchDAO searchDAO;\n+    protected AttributableSearchDAO searchDAO;\n \n     @Autowired\n-    private RoleDataBinder binder;\n+    protected RoleDataBinder binder;\n \n     @Autowired\n-    private RoleWorkflowAdapter rwfAdapter;\n+    protected RoleWorkflowAdapter rwfAdapter;\n \n     @Autowired\n-    private PropagationManager propagationManager;\n+    protected PropagationManager propagationManager;\n \n     @Autowired\n-    private PropagationTaskExecutor taskExecutor;\n+    protected PropagationTaskExecutor taskExecutor;\n \n-    /**\n-     * ConnectorObject util.\n-     */\n     @Autowired\n-    private ConnObjectUtil connObjectUtil;\n+    protected AttributableTransformer attrTransformer;\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{roleId}\")\n@@ -270,28 +267,36 @@ public List<RoleTO> list() {\n     public RoleTO create(final HttpServletResponse response, @RequestBody final RoleTO roleTO) {\n         LOG.debug(\"Role create called with parameters {}\", roleTO);\n \n+        // Check that this operation is allowed to be performed by caller\n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n         if (roleTO.getParent() != 0 && !allowedRoleIds.contains(roleTO.getParent())) {\n             throw new UnauthorizedRoleException(roleTO.getParent());\n         }\n \n-        WorkflowResult<Long> created = rwfAdapter.create(roleTO);\n+        // Attributable transformation (if configured)\n+        RoleTO actual = attrTransformer.transform(roleTO);\n+        LOG.debug(\"Transformed: {}\", actual);\n \n-        EntitlementUtil.extendAuthContext(created.getResult());\n+        /*\n+         * Actual operations: workflow, propagation\n+         */\n+\n+        WorkflowResult<Long> created = rwfAdapter.create(actual);\n \n-        List<PropagationTask> tasks = propagationManager.getRoleCreateTaskIds(created, roleTO.getVirtualAttributes());\n+        EntitlementUtil.extendAuthContext(created.getResult());\n \n-        final List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n-        final DefaultPropagationHandler propHanlder = new DefaultPropagationHandler(connObjectUtil, propagations);\n+        List<PropagationTask> tasks = propagationManager.getRoleCreateTaskIds(created, actual.getVirtualAttributes());\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n-            taskExecutor.execute(tasks, new DefaultPropagationHandler(connObjectUtil, propagations));\n+            taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n             LOG.error(\"Error propagation primary resource\", e);\n-            propHanlder.completeWhenPrimaryResourceErrored(propagations, tasks);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n         final RoleTO savedTO = binder.getRoleTO(created.getResult());\n-        savedTO.setPropagationStatusTOs(propagations);\n+        savedTO.setPropagationStatusTOs(propagationReporter.getStatuses());\n \n         LOG.debug(\"About to return created role\\n{}\", savedTO);\n \n@@ -307,23 +312,31 @@ public RoleTO create(final HttpServletResponse response, @RequestBody final Role\n     public RoleTO update(@RequestBody final RoleMod roleMod) {\n         LOG.debug(\"Role update called with {}\", roleMod);\n \n+        // Check that this operation is allowed to be performed by caller\n         SyncopeRole role = binder.getRoleFromId(roleMod.getId());\n \n-        WorkflowResult<Long> updated = rwfAdapter.update(roleMod);\n+        // Attribute value transformation (if configured)\n+        RoleMod actual = attrTransformer.transform(roleMod);\n+        LOG.debug(\"Transformed: {}\", actual);\n \n-        List<PropagationTask> tasks = propagationManager.getRoleUpdateTaskIds(updated,\n-                roleMod.getVirtualAttributesToBeRemoved(), roleMod.getVirtualAttributesToBeUpdated());\n+        /*\n+         * Actual operations: workflow, propagation\n+         */\n \n-        final List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n-        final DefaultPropagationHandler propHanlder = new DefaultPropagationHandler(connObjectUtil, propagations);\n+        WorkflowResult<Long> updated = rwfAdapter.update(actual);\n+\n+        List<PropagationTask> tasks = propagationManager.getRoleUpdateTaskIds(updated,\n+                actual.getVirtualAttributesToBeRemoved(), actual.getVirtualAttributesToBeUpdated());\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n-            taskExecutor.execute(tasks, new DefaultPropagationHandler(connObjectUtil, propagations));\n+            taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n             LOG.error(\"Error propagation primary resource\", e);\n-            propHanlder.completeWhenPrimaryResourceErrored(propagations, tasks);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n         final RoleTO updatedTO = binder.getRoleTO(updated.getResult());\n-        updatedTO.setPropagationStatusTOs(propagations);\n+        updatedTO.setPropagationStatusTOs(propagationReporter.getStatuses());\n \n         auditManager.audit(Category.role, RoleSubCategory.update, Result.success,\n                 \"Successfully updated role: \" + role.getId());\n@@ -351,15 +364,15 @@ public RoleTO delete(@PathVariable(\"roleId\") final Long roleId) {\n         RoleTO roleTO = new RoleTO();\n         roleTO.setId(roleId);\n \n-        final List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n-        final DefaultPropagationHandler propHanlder = new DefaultPropagationHandler(connObjectUtil, propagations);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n-            taskExecutor.execute(tasks, new DefaultPropagationHandler(connObjectUtil, propagations));\n+            taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n             LOG.error(\"Error propagation primary resource\", e);\n-            propHanlder.completeWhenPrimaryResourceErrored(propagations, tasks);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n-        roleTO.setPropagationStatusTOs(propagations);\n+        roleTO.setPropagationStatusTOs(propagationReporter.getStatuses());\n \n         rwfAdapter.delete(roleId);\n "},{"sha":"1eea4ee04bc7460c7dc7976860f3b72e0708bf01","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":202,"deletions":194,"changes":396,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=30189cba6fd5a8bbe52d69f319fa7d94bda7b532","patch":"@@ -34,7 +34,6 @@\n import org.apache.syncope.common.to.BulkActionRes.Status;\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.PropagationRequestTO;\n-import org.apache.syncope.common.to.PropagationStatusTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.to.WorkflowFormTO;\n import org.apache.syncope.common.types.AttributableType;\n@@ -46,7 +45,6 @@\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.audit.AuditManager;\n-import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.notification.NotificationManager;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n@@ -56,10 +54,12 @@\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.propagation.PropagationByResource;\n import org.apache.syncope.core.propagation.PropagationException;\n+import org.apache.syncope.core.propagation.PropagationReporter;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.propagation.impl.DefaultPropagationHandler;\n import org.apache.syncope.core.propagation.impl.PropagationManager;\n+import org.apache.syncope.core.rest.data.AttributableTransformer;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n+import org.apache.syncope.core.util.ApplicationContextProvider;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.apache.syncope.core.workflow.WorkflowResult;\n@@ -93,546 +93,554 @@ public class UserController {\n      * Logger.\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(UserController.class);\n-    \n+\n     @Autowired\n     protected AuditManager auditManager;\n-    \n+\n     @Autowired\n     protected UserDAO userDAO;\n-    \n+\n     @Autowired\n     protected RoleDAO roleDAO;\n-    \n+\n     @Autowired\n     protected AttributableSearchDAO searchDAO;\n-    \n+\n     @Autowired\n     protected UserDataBinder binder;\n-    \n+\n     @Autowired\n     protected UserWorkflowAdapter uwfAdapter;\n-    \n+\n     @Autowired\n     protected PropagationManager propagationManager;\n-    \n+\n     @Autowired\n     protected PropagationTaskExecutor taskExecutor;\n-    \n+\n     @Autowired\n     protected NotificationManager notificationManager;\n \n-    /**\n-     * ConnectorObject util.\n-     */\n     @Autowired\n-    protected ConnObjectUtil connObjectUtil;\n-    \n+    protected AttributableTransformer attrTransformer;\n+\n     @RequestMapping(method = RequestMethod.GET, value = \"/verifyPassword/{username}\")\n     public ModelAndView verifyPassword(@PathVariable(\"username\") String username,\n             @RequestParam(\"password\") final String password) {\n-        \n+\n         return new ModelAndView().addObject(verifyPasswordInternal(username, password));\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @Transactional(readOnly = true)\n     public Boolean verifyPasswordInternal(final String username, final String password) {\n         auditManager.audit(Category.user, UserSubCategory.create, Result.success,\n                 \"Verified password for: \" + username);\n         return binder.verifyPassword(username, password);\n     }\n-    \n+\n     @RequestMapping(method = RequestMethod.GET, value = \"/count\")\n     public ModelAndView count() {\n         return new ModelAndView().addObject(countInternal());\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_LIST')\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public int countInternal() {\n         return userDAO.count(EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()));\n     }\n-    \n+\n     @RequestMapping(method = RequestMethod.POST, value = \"/search/count\")\n     public ModelAndView searchCount(@RequestBody final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n-        \n+\n         return new ModelAndView().addObject(searchCountInternal(searchCondition));\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public int searchCountInternal(final NodeCond searchCondition) throws InvalidSearchConditionException {\n         if (!searchCondition.isValid()) {\n             LOG.error(\"Invalid search condition: {}\", searchCondition);\n             throw new InvalidSearchConditionException();\n         }\n-        \n+\n         return searchDAO.count(EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()),\n                 searchCondition, AttributableUtil.getInstance(AttributableType.USER));\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public List<UserTO> list() {\n         List<SyncopeUser> users =\n                 userDAO.findAll(EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()));\n-        \n+\n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n         for (SyncopeUser user : users) {\n             userTOs.add(binder.getUserTO(user));\n         }\n-        \n+\n         auditManager.audit(Category.user, UserSubCategory.list, Result.success,\n                 \"Successfully listed all users: \" + userTOs.size());\n-        \n+\n         return userTOs;\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/list/{page}/{size}\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public List<UserTO> list(@PathVariable(\"page\") final int page, @PathVariable(\"size\") final int size) {\n         Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n-        \n+\n         List<SyncopeUser> users = userDAO.findAll(adminRoleIds, page, size);\n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n         for (SyncopeUser user : users) {\n             userTOs.add(binder.getUserTO(user));\n         }\n-        \n+\n         auditManager.audit(Category.user, UserSubCategory.list, Result.success,\n                 \"Successfully listed all users (page=\" + page + \", size=\" + size + \"): \" + userTOs.size());\n-        \n+\n         return userTOs;\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{userId}\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public UserTO read(@PathVariable(\"userId\") final Long userId) {\n         UserTO result = binder.getUserTO(userId);\n-        \n+\n         auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n                 \"Successfully read user: \" + userId);\n-        \n+\n         return result;\n     }\n-    \n+\n     @PreAuthorize(\"#username == authentication.name or hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/readByUsername/{username}\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public UserTO read(@PathVariable final String username) {\n         UserTO result = binder.getUserTO(username);\n-        \n+\n         auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n                 \"Successfully read user: \" + username);\n-        \n+\n         return result;\n     }\n-    \n+\n     @PreAuthorize(\"isAuthenticated()\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/self\")\n     @Transactional(readOnly = true)\n     public UserTO read() {\n         UserTO userTO = binder.getAuthenticatedUserTO();\n-        \n+\n         auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n                 \"Successfully read own data: \" + userTO.getUsername());\n-        \n+\n         return userTO;\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/search\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public List<UserTO> search(@RequestBody final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n-        \n+\n         return search(searchCondition, -1, -1);\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/search/{page}/{size}\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public List<UserTO> search(@RequestBody final NodeCond searchCondition, @PathVariable(\"page\") final int page,\n             @PathVariable(\"size\") final int size)\n             throws InvalidSearchConditionException {\n-        \n+\n         LOG.debug(\"User search called with condition {}\", searchCondition);\n-        \n+\n         if (!searchCondition.isValid()) {\n             LOG.error(\"Invalid search condition: {}\", searchCondition);\n             throw new InvalidSearchConditionException();\n         }\n-        \n+\n         final List<SyncopeUser> matchingUsers = searchDAO.search(EntitlementUtil.getRoleIds(EntitlementUtil.\n                 getOwnedEntitlementNames()), searchCondition, page, size,\n                 AttributableUtil.getInstance(AttributableType.USER));\n-        \n+\n         final List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {\n             result.add(binder.getUserTO(user));\n         }\n-        \n+\n         auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n                 \"Successfully searched for users (page=\" + page + \", size=\" + size + \"): \" + result.size());\n-        \n+\n         return result;\n     }\n-    \n+\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n     public UserTO create(final HttpServletResponse response, @RequestBody final UserTO userTO) {\n         UserTO savedTO = createInternal(userTO);\n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return savedTO;\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_CREATE')\")\n     public UserTO createInternal(final UserTO userTO) {\n         LOG.debug(\"User create called with {}\", userTO);\n-        \n+\n+        // Check that this operation is allowed to be performed by caller\n         Set<Long> requestRoleIds = new HashSet<Long>(userTO.getMemberships().size());\n         for (MembershipTO membership : userTO.getMemberships()) {\n             requestRoleIds.add(membership.getRoleId());\n         }\n-        \n         Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n         requestRoleIds.removeAll(adminRoleIds);\n         if (!requestRoleIds.isEmpty()) {\n             throw new UnauthorizedRoleException(requestRoleIds);\n         }\n-        \n-        WorkflowResult<Map.Entry<Long, Boolean>> created = uwfAdapter.create(userTO);\n-        \n+\n+        // Attributable transformation (if configured)\n+        UserTO actual = attrTransformer.transform(userTO);\n+        LOG.debug(\"Transformed: {}\", actual);\n+\n+        /*\n+         * Actual operations: workflow, propagation, notification\n+         */\n+\n+        WorkflowResult<Map.Entry<Long, Boolean>> created = uwfAdapter.create(actual);\n+\n         List<PropagationTask> tasks = propagationManager.getUserCreateTaskIds(\n-                created, userTO.getPassword(), userTO.getVirtualAttributes());\n-        \n-        final List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n-        final DefaultPropagationHandler propHanlder = new DefaultPropagationHandler(connObjectUtil, propagations);\n+                created, actual.getPassword(), actual.getVirtualAttributes());\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n-            taskExecutor.execute(tasks, propHanlder);\n+            taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n             LOG.error(\"Error propagation primary resource\", e);\n-            propHanlder.completeWhenPrimaryResourceErrored(propagations, tasks);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n-        \n+\n         notificationManager.createTasks(created.getResult().getKey(), created.getPerformedTasks());\n-        \n+\n         final UserTO savedTO = binder.getUserTO(created.getResult().getKey());\n-        savedTO.setPropagationStatusTOs(propagations);\n-        \n+        savedTO.setPropagationStatusTOs(propagationReporter.getStatuses());\n+\n         LOG.debug(\"About to return created user\\n{}\", savedTO);\n-        \n+\n         auditManager.audit(Category.user, UserSubCategory.create, Result.success,\n                 \"Successfully created user: \" + savedTO.getUsername());\n-        \n+\n         return savedTO;\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n     public UserTO update(@RequestBody final UserMod userMod) {\n         LOG.debug(\"User update called with {}\", userMod);\n-        \n-        final String changedPwd = userMod.getPassword();\n+\n+        // AttributableMod transformation (if configured)\n+        UserMod actual = attrTransformer.transform(userMod);\n+        LOG.debug(\"Transformed: {}\", actual);\n+\n+        final String changedPwd = actual.getPassword();\n \n         // 1. update password internally only if required\n-        if (userMod.getPwdPropRequest() != null && !userMod.getPwdPropRequest().isOnSyncope()) {\n-            userMod.setPassword(null);\n+        if (actual.getPwdPropRequest() != null && !actual.getPwdPropRequest().isOnSyncope()) {\n+            actual.setPassword(null);\n         }\n-        WorkflowResult<Map.Entry<Long, Boolean>> updated = uwfAdapter.update(userMod);\n+        WorkflowResult<Map.Entry<Long, Boolean>> updated = uwfAdapter.update(actual);\n \n         // 2. propagate password update only to requested resources\n         List<PropagationTask> tasks = new ArrayList<PropagationTask>();\n-        if (userMod.getPwdPropRequest() == null) {\n+        if (actual.getPwdPropRequest() == null) {\n             // 2a. no specific password propagation request: generate propagation tasks for any resource associated\n             tasks = propagationManager.getUserUpdateTaskIds(updated, changedPwd,\n-                    userMod.getVirtualAttributesToBeRemoved(), userMod.getVirtualAttributesToBeUpdated());\n+                    actual.getVirtualAttributesToBeRemoved(), actual.getVirtualAttributesToBeUpdated());\n         } else {\n             // 2b. generate the propagation task list in two phases: first the ones containing password,\n             // the the rest (with no password)\n             final PropagationByResource origPropByRes = new PropagationByResource();\n             origPropByRes.merge(updated.getPropByRes());\n-            \n-            Set<String> pwdResourceNames = userMod.getPwdPropRequest().getResources();\n+\n+            Set<String> pwdResourceNames = actual.getPwdPropRequest().getResources();\n             SyncopeUser user = binder.getUserFromId(updated.getResult().getKey());\n             pwdResourceNames.retainAll(user.getResourceNames());\n             final PropagationByResource pwdPropByRes = new PropagationByResource();\n             pwdPropByRes.addAll(ResourceOperation.UPDATE, pwdResourceNames);\n             updated.setPropByRes(pwdPropByRes);\n-            \n+\n             if (!pwdPropByRes.isEmpty()) {\n                 Set<String> toBeExcluded = new HashSet<String>(user.getResourceNames());\n-                toBeExcluded.addAll(userMod.getResourcesToBeAdded());\n+                toBeExcluded.addAll(actual.getResourcesToBeAdded());\n                 toBeExcluded.removeAll(pwdResourceNames);\n                 tasks.addAll(propagationManager.getUserUpdateTaskIds(\n                         updated,\n                         changedPwd,\n-                        userMod.getVirtualAttributesToBeRemoved(),\n-                        userMod.getVirtualAttributesToBeUpdated(),\n+                        actual.getVirtualAttributesToBeRemoved(),\n+                        actual.getVirtualAttributesToBeUpdated(),\n                         toBeExcluded));\n             }\n-            \n+\n             final PropagationByResource nonPwdPropByRes = new PropagationByResource();\n             nonPwdPropByRes.merge(origPropByRes);\n             nonPwdPropByRes.removeAll(pwdResourceNames);\n             nonPwdPropByRes.purge();\n             updated.setPropByRes(nonPwdPropByRes);\n-            \n+\n             if (!nonPwdPropByRes.isEmpty()) {\n                 tasks.addAll(propagationManager.getUserUpdateTaskIds(\n                         updated,\n                         null,\n-                        userMod.getVirtualAttributesToBeRemoved(),\n-                        userMod.getVirtualAttributesToBeUpdated(),\n+                        actual.getVirtualAttributesToBeRemoved(),\n+                        actual.getVirtualAttributesToBeUpdated(),\n                         pwdResourceNames));\n             }\n-            \n+\n             updated.setPropByRes(origPropByRes);\n         }\n-        \n-        final List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n-        final DefaultPropagationHandler propHanlder = new DefaultPropagationHandler(connObjectUtil, propagations);\n+\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n-            taskExecutor.execute(tasks, propHanlder);\n+            taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n             LOG.error(\"Error propagation primary resource\", e);\n-            propHanlder.completeWhenPrimaryResourceErrored(propagations, tasks);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n         // 3. create notification tasks\n         notificationManager.createTasks(updated.getResult().getKey(), updated.getPerformedTasks());\n \n         // 4. prepare result, including propagation status on external resources\n         final UserTO updatedTO = binder.getUserTO(updated.getResult().getKey());\n-        updatedTO.setPropagationStatusTOs(propagations);\n-        \n+        updatedTO.setPropagationStatusTOs(propagationReporter.getStatuses());\n+\n         auditManager.audit(Category.user, UserSubCategory.update, Result.success,\n                 \"Successfully updated user: \" + updatedTO.getUsername());\n-        \n+\n         LOG.debug(\"About to return updated user\\n{}\", updatedTO);\n-        \n+\n         return updatedTO;\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/activate/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n     public UserTO activate(@PathVariable(\"userId\") final Long userId,\n             @RequestParam(required = true) final String token) {\n-        \n+\n         return activate(userId, token, null);\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/activate/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n     public UserTO activate(@PathVariable(\"userId\") final Long userId,\n             @RequestParam(required = true) final String token,\n             @RequestBody final PropagationRequestTO propagationRequestTO) {\n-        \n+\n         LOG.debug(\"About to activate \" + userId);\n-        \n+\n         SyncopeUser user = binder.getUserFromId(userId);\n-        \n+\n         return setStatus(user, token, propagationRequestTO, true, \"activate\");\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/activateByUsername/{username}\")\n     @Transactional(rollbackFor = {Throwable.class})\n     public UserTO activate(@PathVariable(\"username\") final String username,\n             @RequestParam(required = true) final String token) {\n-        \n+\n         return activate(username, token, null);\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/activateByUsername/{username}\")\n     @Transactional(rollbackFor = {Throwable.class})\n     public UserTO activate(@PathVariable(\"username\") final String username,\n             @RequestParam(required = true) final String token,\n             @RequestBody final PropagationRequestTO propagationRequestTO) {\n-        \n+\n         LOG.debug(\"About to activate \" + username);\n-        \n+\n         SyncopeUser user = binder.getUserFromUsername(username);\n-        \n+\n         return setStatus(user, token, propagationRequestTO, true, \"activate\");\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/suspend/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n     public UserTO suspend(@PathVariable(\"userId\") final Long userId) {\n-        \n+\n         return suspend(userId, null);\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/suspend/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n     public UserTO suspend(@PathVariable(\"userId\") final Long userId,\n             @RequestBody final PropagationRequestTO propagationRequestTO) {\n-        \n+\n         LOG.debug(\"About to suspend \" + userId);\n-        \n+\n         SyncopeUser user = binder.getUserFromId(userId);\n-        \n+\n         return setStatus(user, null, propagationRequestTO, false, \"suspend\");\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/suspendByUsername/{username}\")\n     @Transactional(rollbackFor = {Throwable.class})\n     public UserTO suspend(@PathVariable(\"username\") final String username) {\n-        \n+\n         return suspend(username, null);\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/suspendByUsername/{username}\")\n     @Transactional(rollbackFor = {Throwable.class})\n     public UserTO suspend(@PathVariable(\"username\") final String username,\n             @RequestBody final PropagationRequestTO propagationRequestTO) {\n-        \n+\n         LOG.debug(\"About to suspend \" + username);\n-        \n+\n         SyncopeUser user = binder.getUserFromUsername(username);\n-        \n+\n         return setStatus(user, null, propagationRequestTO, false, \"suspend\");\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/reactivate/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n     public UserTO reactivate(@PathVariable(\"userId\") final Long userId) {\n-        \n+\n         return reactivate(userId, null);\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/reactivate/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n     public UserTO reactivate(@PathVariable(\"userId\") final Long userId,\n             @RequestBody final PropagationRequestTO propagationRequestTO) {\n-        \n+\n         LOG.debug(\"About to reactivate \" + userId);\n-        \n+\n         SyncopeUser user = binder.getUserFromId(userId);\n-        \n+\n         return setStatus(user, null, propagationRequestTO, true, \"reactivate\");\n     }\n-    \n+\n     @RequestMapping(method = RequestMethod.GET, value = \"/reactivateByUsername/{username}\")\n     @Transactional(rollbackFor = {Throwable.class})\n     public UserTO reactivate(@PathVariable(\"username\") final String username) {\n         return reactivate(username, null);\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/reactivateByUsername/{username}\")\n     @Transactional(rollbackFor = {Throwable.class})\n     public UserTO reactivate(@PathVariable(\"username\") final String username,\n             @RequestBody final PropagationRequestTO propagationRequestTO) {\n-        \n+\n         LOG.debug(\"About to reactivate \" + username);\n-        \n+\n         SyncopeUser user = binder.getUserFromUsername(username);\n-        \n+\n         return setStatus(user, null, propagationRequestTO, true, \"reactivate\");\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/delete/{userId}\")\n     public UserTO delete(@PathVariable(\"userId\") final Long userId) {\n         LOG.debug(\"User delete called with {}\", userId);\n-        \n+\n         return doDelete(userId);\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/deleteByUsername/{username}\")\n     public UserTO delete(@PathVariable final String username) {\n         LOG.debug(\"User delete called with {}\", username);\n-        \n+\n         UserTO result = binder.getUserTO(username);\n         long userId = result.getId();\n-        \n+\n         return doDelete(userId);\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/execute/workflow/{taskId}\")\n     public UserTO executeWorkflow(@RequestBody final UserTO userTO, @PathVariable(\"taskId\") final String taskId) {\n         LOG.debug(\"About to execute {} on {}\", taskId, userTO.getId());\n-        \n+\n         WorkflowResult<Long> updated = uwfAdapter.execute(userTO, taskId);\n-        \n+\n         List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n                 new WorkflowResult<Map.Entry<Long, Boolean>>(new SimpleEntry<Long, Boolean>(updated.getResult(), null),\n                 updated.getPropByRes(), updated.getPerformedTasks()));\n-        \n+\n         taskExecutor.execute(tasks);\n-        \n+\n         notificationManager.createTasks(updated.getResult(), updated.getPerformedTasks());\n-        \n+\n         final UserTO savedTO = binder.getUserTO(updated.getResult());\n-        \n+\n         LOG.debug(\"About to return updated user\\n{}\", savedTO);\n-        \n+\n         auditManager.audit(Category.user, UserSubCategory.executeWorkflow, Result.success,\n                 \"Successfully executed workflow action \" + taskId + \" on user: \" + userTO.getUsername());\n-        \n+\n         return savedTO;\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/workflow/form/list\")\n     @Transactional(rollbackFor = {Throwable.class})\n     public List<WorkflowFormTO> getForms() {\n         List<WorkflowFormTO> forms = uwfAdapter.getForms();\n-        \n+\n         auditManager.audit(Category.user, UserSubCategory.getForms, Result.success,\n                 \"Successfully list workflow forms: \" + forms.size());\n-        \n+\n         return forms;\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_READ') and hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/workflow/form/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n     public WorkflowFormTO getFormForUser(@PathVariable(\"userId\") final Long userId) {\n         SyncopeUser user = binder.getUserFromId(userId);\n         WorkflowFormTO result = uwfAdapter.getForm(user.getWorkflowId());\n-        \n+\n         auditManager.audit(Category.user, UserSubCategory.getFormForUser, Result.success,\n                 \"Successfully read workflow form for user: \" + user.getUsername());\n-        \n+\n         return result;\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_CLAIM')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/workflow/form/claim/{taskId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n     public WorkflowFormTO claimForm(@PathVariable(\"taskId\") final String taskId) {\n         WorkflowFormTO result = uwfAdapter.claimForm(taskId,\n                 SecurityContextHolder.getContext().getAuthentication().getName());\n-        \n+\n         auditManager.audit(Category.user, UserSubCategory.claimForm, Result.success,\n                 \"Successfully claimed workflow form: \" + taskId);\n-        \n+\n         return result;\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_SUBMIT')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/workflow/form/submit\")\n     @Transactional(rollbackFor = {Throwable.class})\n     public UserTO submitForm(@RequestBody final WorkflowFormTO form) {\n         LOG.debug(\"About to process form {}\", form);\n-        \n+\n         WorkflowResult<Map.Entry<Long, String>> updated = uwfAdapter.submitForm(form,\n                 SecurityContextHolder.getContext().getAuthentication().getName());\n \n@@ -650,22 +658,22 @@ public UserTO submitForm(@RequestBody final WorkflowFormTO form) {\n                     null);\n             taskExecutor.execute(tasks);\n         }\n-        \n+\n         final UserTO savedTO = binder.getUserTO(updated.getResult().getKey());\n-        \n+\n         auditManager.audit(Category.user, UserSubCategory.submitForm, Result.success,\n                 \"Successfully submitted workflow form for user: \" + savedTO.getUsername());\n-        \n+\n         LOG.debug(\"About to return user after form processing\\n{}\", savedTO);\n-        \n+\n         return savedTO;\n     }\n-    \n+\n     protected UserTO setStatus(final SyncopeUser user, final String token,\n             final PropagationRequestTO propagationRequestTO, final boolean status, final String task) {\n-        \n+\n         LOG.debug(\"About to set status of {}\" + user);\n-        \n+\n         WorkflowResult<Long> updated;\n         if (propagationRequestTO == null || propagationRequestTO.isOnSyncope()) {\n             updated = setStatusOnWfAdapter(user, token, task);\n@@ -678,22 +686,22 @@ protected UserTO setStatus(final SyncopeUser user, final String token,\n         if (propagationRequestTO != null) {\n             resourcesToBeExcluded.removeAll(propagationRequestTO.getResources());\n         }\n-        \n+\n         List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(user, status, resourcesToBeExcluded);\n         taskExecutor.execute(tasks);\n-        \n+\n         notificationManager.createTasks(updated.getResult(), updated.getPerformedTasks());\n-        \n+\n         final UserTO savedTO = binder.getUserTO(updated.getResult());\n-        \n+\n         auditManager.audit(Category.user, UserSubCategory.setStatus, Result.success,\n                 \"Successfully changed status to \" + savedTO.getStatus() + \" for user: \" + savedTO.getUsername());\n-        \n+\n         LOG.debug(\"About to return updated user\\n{}\", savedTO);\n-        \n+\n         return savedTO;\n     }\n-    \n+\n     protected WorkflowResult<Long> setStatusOnWfAdapter(final SyncopeUser user, final String token, final String task) {\n         WorkflowResult<Long> updated;\n         if (\"suspend\".equals(task)) {\n@@ -705,25 +713,25 @@ protected WorkflowResult<Long> setStatusOnWfAdapter(final SyncopeUser user, fina\n         }\n         return updated;\n     }\n-    \n+\n     protected UserTO doDelete(final Long userId) {\n         List<SyncopeRole> ownedRoles = roleDAO.findOwned(binder.getUserFromId(userId));\n         if (!ownedRoles.isEmpty()) {\n             List<String> owned = new ArrayList<String>(ownedRoles.size());\n             for (SyncopeRole role : ownedRoles) {\n                 owned.add(role.getId() + \" \" + role.getName());\n             }\n-            \n+\n             auditManager.audit(Category.user, UserSubCategory.delete, Result.failure,\n                     \"Could not delete user: \" + userId + \" because of role(s) ownership \" + owned);\n-            \n+\n             SyncopeClientCompositeErrorException sccee =\n                     new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n-            \n+\n             SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.RoleOwnership);\n             sce.setElements(owned);\n             sccee.addException(sce);\n-            \n+\n             throw sccee;\n         }\n \n@@ -733,43 +741,43 @@ protected UserTO doDelete(final Long userId) {\n         // will also effectively remove user from db, thus making virtually\n         // impossible by NotificationManager to fetch required user information\n         notificationManager.createTasks(userId, Collections.singleton(\"delete\"));\n-        \n+\n         List<PropagationTask> tasks = propagationManager.getUserDeleteTaskIds(userId);\n-        \n+\n         final UserTO userTO = new UserTO();\n         userTO.setId(userId);\n-        \n-        final List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n-        final DefaultPropagationHandler propHanlder = new DefaultPropagationHandler(connObjectUtil, propagations);\n+\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n-            taskExecutor.execute(tasks, new DefaultPropagationHandler(connObjectUtil, propagations));\n+            taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n             LOG.error(\"Error propagation primary resource\", e);\n-            propHanlder.completeWhenPrimaryResourceErrored(propagations, tasks);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n-        \n-        userTO.setPropagationStatusTOs(propagations);\n-        \n+\n+        userTO.setPropagationStatusTOs(propagationReporter.getStatuses());\n+\n         uwfAdapter.delete(userId);\n-        \n+\n         auditManager.audit(Category.user, UserSubCategory.delete, Result.success,\n                 \"Successfully deleted user: \" + userId);\n-        \n+\n         LOG.debug(\"User successfully deleted: {}\", userId);\n-        \n+\n         return userTO;\n     }\n-    \n+\n     @PreAuthorize(\"(hasRole('USER_DELETE') and #bulkAction.operation == #bulkAction.operation.DELETE) or \"\n             + \"(hasRole('USER_UPDATE') and \"\n             + \"(#bulkAction.operation == #bulkAction.operation.REACTIVATE or \"\n             + \"#bulkAction.operation == #bulkAction.operation.SUSPEND))\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/bulk\")\n     public BulkActionRes bulkAction(@RequestBody final BulkAction bulkAction) {\n         LOG.debug(\"Bulk action '{}' called on '{}'\", bulkAction.getOperation(), bulkAction.getTargets());\n-        \n+\n         BulkActionRes res = new BulkActionRes();\n-        \n+\n         switch (bulkAction.getOperation()) {\n             case DELETE:\n                 for (String userId : bulkAction.getTargets()) {\n@@ -803,7 +811,7 @@ public BulkActionRes bulkAction(@RequestBody final BulkAction bulkAction) {\n                 break;\n             default:\n         }\n-        \n+\n         return res;\n     }\n }"},{"sha":"86e62cc9bf4aa38fcbe0849fdb4a1cbb9ac26400","filename":"core/src/main/java/org/apache/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=30189cba6fd5a8bbe52d69f319fa7d94bda7b532","patch":"@@ -594,7 +594,7 @@ protected PropagationByResource fill(final AbstractAttributable attributable,\n      * @param vAttrs virtual attributes to be added.\n      * @param attrUtil attributable util.\n      */\n-    public void fillVirtual(final AbstractAttributable attributable, final List<AttributeTO> vAttrs,\n+    public void fillVirtual(final AbstractAttributable attributable, final Collection<AttributeTO> vAttrs,\n             final AttributableUtil attrUtil) {\n \n         for (AttributeTO attributeTO : vAttrs) {"},{"sha":"77987b967396c4882d00c2d7d7bc80eb2ee6a67b","filename":"core/src/main/java/org/apache/syncope/core/rest/data/AttributableTransformer.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAttributableTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAttributableTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAttributableTransformer.java?ref=30189cba6fd5a8bbe52d69f319fa7d94bda7b532","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.data;\n+\n+import org.apache.syncope.common.mod.AbstractAttributableMod;\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+\n+/**\n+ * Provides logic for transforming user or role, received as input by RESTful methods, before any internal\n+ * processing logic takes place.\n+ */\n+public interface AttributableTransformer {\n+\n+    <T extends AbstractAttributableTO> T transform(T input);\n+\n+    <T extends AbstractAttributableMod> T transform(T input);\n+}"},{"sha":"cf04f651cc5592eebeca3b0f233808baf55c791b","filename":"core/src/main/java/org/apache/syncope/core/rest/data/DefaultAttributableTransformer.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FDefaultAttributableTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FDefaultAttributableTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FDefaultAttributableTransformer.java?ref=30189cba6fd5a8bbe52d69f319fa7d94bda7b532","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.data;\n+\n+import org.apache.syncope.common.mod.AbstractAttributableMod;\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+\n+/**\n+ * Default empty implementation returning received input as result.\n+ */\n+public class DefaultAttributableTransformer implements AttributableTransformer {\n+\n+    @Override\n+    public <T extends AbstractAttributableTO> T transform(final T input) {\n+        return input;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributableMod> T transform(final T input) {\n+        return input;\n+    }\n+}"},{"sha":"43f9a445ee9347d0a1249c71091f348d102c6f91","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopeSyncResultHandler.java","status":"modified","additions":38,"deletions":22,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java?ref=30189cba6fd5a8bbe52d69f319fa7d94bda7b532","patch":"@@ -68,6 +68,7 @@\n import org.apache.syncope.core.propagation.Connector;\n import org.apache.syncope.core.propagation.impl.PropagationManager;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n+import org.apache.syncope.core.rest.data.AttributableTransformer;\n import org.apache.syncope.core.rest.data.RoleDataBinder;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.sync.SyncActions;\n@@ -184,6 +185,9 @@ public class SyncopeSyncResultHandler implements SyncResultsHandler {\n     @Autowired\n     protected NotificationManager notificationManager;\n \n+    @Autowired\n+    protected AttributableTransformer attrTransformer;\n+\n     /**\n      * Syncing connector.\n      */\n@@ -518,52 +522,56 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n \n         delta = actions.beforeCreate(this, delta, subjectTO);\n \n+        // Attributable transformation (if configured)\n+        AbstractAttributableTO actual = attrTransformer.transform(subjectTO);\n+        LOG.debug(\"Transformed: {}\", actual);\n+\n         if (dryRun) {\n             result.setId(0L);\n-            if (subjectTO instanceof UserTO) {\n-                result.setName(((UserTO) subjectTO).getUsername());\n+            if (actual instanceof UserTO) {\n+                result.setName(((UserTO) actual).getUsername());\n             }\n-            if (subjectTO instanceof RoleTO) {\n-                result.setName(((RoleTO) subjectTO).getName());\n+            if (actual instanceof RoleTO) {\n+                result.setName(((RoleTO) actual).getName());\n             }\n         } else {\n             try {\n                 if (AttributableType.USER == attrUtil.getType()) {\n                     Boolean enabled = readEnabled(delta.getObject());\n                     WorkflowResult<Map.Entry<Long, Boolean>> created =\n-                            uwfAdapter.create((UserTO) subjectTO, true, enabled);\n+                            uwfAdapter.create((UserTO) actual, true, enabled);\n \n                     List<PropagationTask> tasks = propagationManager.getUserCreateTaskIds(created,\n-                            ((UserTO) subjectTO).getPassword(), subjectTO.getVirtualAttributes(),\n+                            ((UserTO) actual).getPassword(), actual.getVirtualAttributes(),\n                             Collections.singleton(syncTask.getResource().getName()));\n \n                     taskExecutor.execute(tasks);\n \n                     notificationManager.createTasks(created.getResult().getKey(), created.getPerformedTasks());\n \n-                    subjectTO = userDataBinder.getUserTO(created.getResult().getKey());\n+                    actual = userDataBinder.getUserTO(created.getResult().getKey());\n \n                     result.setId(created.getResult().getKey());\n-                    result.setName(((UserTO) subjectTO).getUsername());\n+                    result.setName(((UserTO) actual).getUsername());\n                 }\n                 if (AttributableType.ROLE == attrUtil.getType()) {\n-                    WorkflowResult<Long> created = rwfAdapter.create((RoleTO) subjectTO);\n-                    AttributeTO roleOwner = subjectTO.getAttributeMap().get(StringUtils.EMPTY);\n+                    WorkflowResult<Long> created = rwfAdapter.create((RoleTO) actual);\n+                    AttributeTO roleOwner = actual.getAttributeMap().get(StringUtils.EMPTY);\n                     if (roleOwner != null) {\n                         roleOwnerMap.put(created.getResult(), roleOwner.getValues().iterator().next());\n                     }\n \n                     EntitlementUtil.extendAuthContext(created.getResult());\n \n                     List<PropagationTask> tasks = propagationManager.getRoleCreateTaskIds(created,\n-                            subjectTO.getVirtualAttributes(), Collections.singleton(syncTask.getResource().getName()));\n+                            actual.getVirtualAttributes(), Collections.singleton(syncTask.getResource().getName()));\n \n                     taskExecutor.execute(tasks);\n \n-                    subjectTO = roleDataBinder.getRoleTO(created.getResult());\n+                    actual = roleDataBinder.getRoleTO(created.getResult());\n \n                     result.setId(created.getResult());\n-                    result.setName(((RoleTO) subjectTO).getName());\n+                    result.setName(((RoleTO) actual).getName());\n                 }\n \n             } catch (PropagationException e) {\n@@ -577,7 +585,7 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n             }\n         }\n \n-        actions.after(this, delta, subjectTO, result);\n+        actions.after(this, delta, actual, result);\n         return Collections.singletonList(result);\n     }\n \n@@ -594,9 +602,13 @@ protected UserTO updateUser(final Long id, SyncDelta delta, final boolean dryRun\n             return userTO;\n         }\n \n+        // Attribute value transformation (if configured)\n+        UserMod actual = attrTransformer.transform(userMod);\n+        LOG.debug(\"Transformed: {}\", actual);\n+\n         WorkflowResult<Map.Entry<Long, Boolean>> updated;\n         try {\n-            updated = uwfAdapter.update(userMod);\n+            updated = uwfAdapter.update(actual);\n         } catch (Exception e) {\n             LOG.error(\"Update of user {} failed, trying to sync its status anyway (if configured)\", id, e);\n \n@@ -631,9 +643,9 @@ protected UserTO updateUser(final Long id, SyncDelta delta, final boolean dryRun\n         }\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated,\n-                userMod.getPassword(),\n-                userMod.getVirtualAttributesToBeRemoved(),\n-                userMod.getVirtualAttributesToBeUpdated(),\n+                actual.getPassword(),\n+                actual.getVirtualAttributesToBeRemoved(),\n+                actual.getVirtualAttributesToBeUpdated(),\n                 Collections.singleton(syncTask.getResource().getName()));\n \n         taskExecutor.execute(tasks);\n@@ -660,9 +672,13 @@ protected RoleTO updateRole(final Long id, SyncDelta delta, final boolean dryRun\n             return roleTO;\n         }\n \n-        WorkflowResult<Long> updated = rwfAdapter.update(roleMod);\n+        // Attribute value transformation (if configured)\n+        RoleMod actual = attrTransformer.transform(roleMod);\n+        LOG.debug(\"Transformed: {}\", actual);\n+\n+        WorkflowResult<Long> updated = rwfAdapter.update(actual);\n         String roleOwner = null;\n-        for (AttributeMod attrMod : roleMod.getAttributesToBeUpdated()) {\n+        for (AttributeMod attrMod : actual.getAttributesToBeUpdated()) {\n             if (attrMod.getSchema().isEmpty()) {\n                 roleOwner = attrMod.getValuesToBeAdded().iterator().next();\n             }\n@@ -672,8 +688,8 @@ protected RoleTO updateRole(final Long id, SyncDelta delta, final boolean dryRun\n         }\n \n         List<PropagationTask> tasks = propagationManager.getRoleUpdateTaskIds(updated,\n-                roleMod.getVirtualAttributesToBeRemoved(),\n-                roleMod.getVirtualAttributesToBeUpdated(),\n+                actual.getVirtualAttributesToBeRemoved(),\n+                actual.getVirtualAttributesToBeUpdated(),\n                 Collections.singleton(syncTask.getResource().getName()));\n \n         taskExecutor.execute(tasks);"},{"sha":"b4bf6a81dbc39f991734451b0de1ec033fcfccfd","filename":"core/src/main/resources/restContext.xml","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml?ref=30189cba6fd5a8bbe52d69f319fa7d94bda7b532","patch":"@@ -55,7 +55,9 @@ under the License.\n     <property name=\"collectionWrapperMap\">\n       <map>\n         <entry>\n-          <key><value>org.apache.syncope.common.to.PolicyTO</value></key>\n+          <key>\n+            <value>org.apache.syncope.common.to.PolicyTO</value>\n+          </key>\n           <value>policies</value>\n         </entry>\n       </map>\n@@ -161,4 +163,7 @@ under the License.\n \n     <property name=\"ignoreAcceptHeader\" value=\"false\"/>\n   </bean>\n+  \n+  <!-- Attribute transformer for internal storage -->\n+  <bean id=\"attrTransformer\" class=\"org.apache.syncope.core.rest.data.DefaultAttributableTransformer\"/>\n </beans>"},{"sha":"6c97878258af4f9852a515c20a59f53269f8fad5","filename":"core/src/main/resources/syncopeContext.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml?ref=30189cba6fd5a8bbe52d69f319fa7d94bda7b532","patch":"@@ -73,6 +73,7 @@ under the License.\n \n   <bean id=\"propagationManager\" class=\"org.apache.syncope.core.propagation.impl.PropagationManager\"/>\n   <bean id=\"propagationTaskExecutor\" class=\"org.apache.syncope.core.propagation.impl.PriorityPropagationTaskExecutor\"/>\n+  <bean id=\"propagationReporter\" class=\"org.apache.syncope.core.propagation.impl.DefaultPropagationReporter\" scope=\"prototype\"/>\n \n   <bean id=\"notificationManager\" class=\"org.apache.syncope.core.notification.NotificationManager\"/>\n "},{"sha":"376f3d285b1ba02f899cc4cb82f45b7933c1d5f9","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/SchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java?ref=30189cba6fd5a8bbe52d69f319fa7d94bda7b532","patch":"@@ -49,7 +49,7 @@ public class SchemaTest extends AbstractDAOTest {\n     @Test\n     public void findAll() {\n         List<USchema> userList = schemaDAO.findAll(USchema.class);\n-        assertEquals(12, userList.size());\n+        assertEquals(13, userList.size());\n \n         List<RSchema> roleList = schemaDAO.findAll(RSchema.class);\n         assertEquals(5, roleList.size());"},{"sha":"6a23758e23fad6aa3f8dbe09d0c2f8218d24bc1d","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":21,"deletions":6,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=30189cba6fd5a8bbe52d69f319fa7d94bda7b532","patch":"@@ -33,6 +33,7 @@\n import java.security.AccessControlException;\n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n@@ -52,7 +53,6 @@\n import org.apache.syncope.common.to.ConfigurationTO;\n import org.apache.syncope.common.to.ConnObjectTO;\n import org.apache.syncope.common.to.MappingItemTO;\n-import org.apache.syncope.common.to.MappingTO;\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n import org.apache.syncope.common.to.PolicyTO;\n@@ -486,7 +486,7 @@ public void create() {\n         assertNotNull(sce);\n     }\n \n-    private AttributeTO getManadatoryAttrByName(List<AttributeTO> attributes, String attrName) {\n+    private AttributeTO getManadatoryAttrByName(Collection<AttributeTO> attributes, String attrName) {\n         for (AttributeTO attr : attributes) {\n             if (attrName.equals(attr.getSchema())) {\n                 return attr;\n@@ -593,7 +593,7 @@ public void createWithReject() {\n         Exception exception = null;\n         try {\n             jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\",\n-                    new String[]{userTO.getUsername()}, Integer.class);\n+                    new String[] {userTO.getUsername()}, Integer.class);\n         } catch (EmptyResultDataAccessException e) {\n             exception = e;\n         }\n@@ -1264,7 +1264,7 @@ public void issue270() {\n         // 1. create a new user without virtual attributes\n         UserTO original = getUniqueSampleTO(\"issue270@syncope.apache.org\");\n         // be sure to remove all virtual attributes\n-        original.setVirtualAttributes(Collections.<AttributeTO>emptyList());\n+        original.getVirtualAttributes().clear();\n \n         original = createUser(original);\n \n@@ -2231,8 +2231,6 @@ public void issueSYNCOPE383() {\n     @Test\n     public void issueSYNCOPE397() {\n         ResourceTO csv = resourceService.read(RESOURCE_NAME_CSV);\n-        // change mapping of resource-csv\n-        MappingTO mappingTO = csv.getUmapping();\n \n         for (MappingItemTO item : csv.getUmapping().getItems()) {\n             if (\"email\".equals(item.getIntAttrName())) {\n@@ -2329,6 +2327,23 @@ public void issueSYNCOPE402() {\n         assertEquals(PropagationTaskExecStatus.UNSUBMITTED, userTO.getPropagationStatusTOs().get(1).getStatus());\n     }\n \n+    @Test\n+    public void issueSYNCOPE420() {\n+        UserTO userTO = getUniqueSampleTO(\"syncope420@syncope.apache.org\");\n+        userTO.getAttributes().add(attributeTO(\"makeItDouble\", \"3\"));\n+\n+        userTO = createUser(userTO);\n+        assertEquals(\"6\", userTO.getAttributeMap().get(\"makeItDouble\").getValues().get(0));\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.getAttributesToBeRemoved().add(\"makeItDouble\");\n+        userMod.getAttributesToBeUpdated().add(attributeMod(\"makeItDouble\", \"7\"));\n+\n+        userTO = userService.update(userMod.getId(), userMod);\n+        assertEquals(\"14\", userTO.getAttributeMap().get(\"makeItDouble\").getValues().get(0));\n+    }\n+\n     private boolean getBooleanAttribute(ConnObjectTO connObjectTO, String attrName) {\n         return Boolean.parseBoolean(getStringAttribute(connObjectTO, attrName));\n     }"},{"sha":"23984edaaee5ef397fb1f190e67f5972b211768d","filename":"core/src/test/java/org/apache/syncope/core/rest/data/DefaultAttributableTransformer.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FDefaultAttributableTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FDefaultAttributableTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FDefaultAttributableTransformer.java?ref=30189cba6fd5a8bbe52d69f319fa7d94bda7b532","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.data;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.common.mod.AbstractAttributableMod;\n+import org.apache.syncope.common.mod.AttributeMod;\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.common.to.AttributeTO;\n+\n+/**\n+ * Class for integration tests: transform (by making it double) any attribute value for defined schema.\n+ */\n+public class DefaultAttributableTransformer implements AttributableTransformer {\n+\n+    private static final String NAME = \"makeItDouble\";\n+\n+    @Override\n+    public <T extends AbstractAttributableTO> T transform(final T input) {\n+        for (AttributeTO attr : input.getAttributes()) {\n+            if (NAME.equals(attr.getSchema())) {\n+                List<String> values = new ArrayList<String>(attr.getValues().size());\n+                for (String value : attr.getValues()) {\n+                    values.add(String.valueOf(2 * Long.valueOf(value)));\n+                }\n+                attr.getValues().clear();\n+                attr.getValues().addAll(values);\n+            }\n+        }\n+\n+        return input;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributableMod> T transform(final T input) {\n+        for (AttributeMod attr : input.getAttributesToBeUpdated()) {\n+            if (NAME.equals(attr.getSchema())) {\n+                List<String> values = new ArrayList<String>(attr.getValuesToBeAdded().size());\n+                for (String value : attr.getValuesToBeAdded()) {\n+                    values.add(String.valueOf(2 * Long.valueOf(value)));\n+                }\n+                attr.getValuesToBeAdded().clear();\n+                attr.getValuesToBeAdded().addAll(values);\n+            }\n+        }\n+\n+        return input;\n+    }\n+}"},{"sha":"bb6cac18939d841dafa8c118c788eddca908d7c5","filename":"core/src/test/resources/content.xml","status":"modified","additions":279,"deletions":284,"changes":563,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=30189cba6fd5a8bbe52d69f319fa7d94bda7b532"},{"sha":"cba4524174b88ed191e98522269e62c45cd7b51d","filename":"core/src/test/resources/persistenceTestEnv.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Ftest%2Fresources%2FpersistenceTestEnv.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/30189cba6fd5a8bbe52d69f319fa7d94bda7b532/core%2Fsrc%2Ftest%2Fresources%2FpersistenceTestEnv.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2FpersistenceTestEnv.xml?ref=30189cba6fd5a8bbe52d69f319fa7d94bda7b532","patch":"@@ -32,6 +32,9 @@ under the License.\n                            http://www.springframework.org/schema/aop\n                            http://www.springframework.org/schema/aop/spring-aop.xsd\">\n \n+  <!-- Uncomment to enable single unit test execution via -Dtest=... -->\n+  <!--<bean class=\"org.apache.syncope.core.util.ApplicationContextProvider\"/>-->\n+\n   <bean class=\"org.apache.syncope.core.persistence.dao.impl.TestDbInitializer\"/>\n   <bean class=\"org.apache.syncope.core.persistence.dao.DummyConnectorRegistry\"/> \n   <bean class=\"org.apache.syncope.core.persistence.dao.impl.ContentLoader\"/>"}]}