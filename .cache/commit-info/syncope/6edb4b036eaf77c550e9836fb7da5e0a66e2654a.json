{"sha":"6edb4b036eaf77c550e9836fb7da5e0a66e2654a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjZlZGI0YjAzNmVhZjc3YzU1MGU5ODM2ZmI3ZGE1ZTBhNjZlMjY1NGE=","commit":{"author":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2019-06-13T12:36:36Z"},"committer":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2019-06-13T14:46:20Z"},"message":"[SYNCOPE-1421] enabled enduser UI tests, fit with all other IT tests","tree":{"sha":"8e994bd750c4f682598456f9a3a34d7d3f302d61","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8e994bd750c4f682598456f9a3a34d7d3f302d61"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6edb4b036eaf77c550e9836fb7da5e0a66e2654a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6edb4b036eaf77c550e9836fb7da5e0a66e2654a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6edb4b036eaf77c550e9836fb7da5e0a66e2654a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6edb4b036eaf77c550e9836fb7da5e0a66e2654a/comments","author":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"committer":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"082f9786ac0c656faed3bfd1be17af1bcfc80005","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/082f9786ac0c656faed3bfd1be17af1bcfc80005","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/082f9786ac0c656faed3bfd1be17af1bcfc80005"}],"stats":{"total":275,"additions":227,"deletions":48},"files":[{"sha":"bdec2a5586d86064029d27d144ab27522c4870a5","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/panels/SelfPwdResetPanel.java","status":"modified","additions":14,"deletions":8,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6edb4b036eaf77c550e9836fb7da5e0a66e2654a/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2FSelfPwdResetPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6edb4b036eaf77c550e9836fb7da5e0a66e2654a/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2FSelfPwdResetPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2FSelfPwdResetPanel.java?ref=6edb4b036eaf77c550e9836fb7da5e0a66e2654a","patch":"@@ -28,7 +28,6 @@\n import org.apache.syncope.client.enduser.wizards.any.CaptchaPanel;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.DomainDropDown;\n-import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.keymaster.client.api.DomainOps;\n import org.apache.syncope.common.keymaster.client.api.model.Domain;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -77,12 +76,12 @@ protected List<String> load() {\n \n     private String usernameText;\n \n+    private String securityAnswerText;\n+\n     private final TextField<String> securityQuestion;\n \n     private final CaptchaPanel<Void> captcha;\n \n-    protected final Model<String> securityAnswerModel = new Model<>();\n-\n     public SelfPwdResetPanel(final String id, final PageReference pageRef) {\n         super(id);\n \n@@ -137,10 +136,17 @@ public void onClick(final AjaxRequestTarget target) {\n         };\n         add(reloadLink);\n \n-        AjaxTextFieldPanel securityAnswer =\n-                new AjaxTextFieldPanel(\"securityAnswer\", \"securityAnswer\", securityAnswerModel);\n-        securityAnswer.setOutputMarkupId(true);\n-        securityAnswer.setOutputMarkupPlaceholderTag(true);\n+        TextField<String> securityAnswer =\n+                new TextField<>(\"securityAnswer\", new PropertyModel<>(this, \"securityAnswerText\"), String.class);\n+        securityAnswer.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                // do nothing\n+            }\n+        });\n         securityAnswer.setRequired(true);\n         add(securityAnswer);\n \n@@ -166,7 +172,7 @@ protected void onSubmit(final AjaxRequestTarget target) {\n                 } else {\n                     try {\n                         SyncopeEnduserSession.get().getService(UserSelfService.class).\n-                                requestPasswordReset(usernameText, securityAnswerModel.getObject());\n+                                requestPasswordReset(usernameText, securityAnswerText);\n                         final PageParameters parameters = new PageParameters();\n                         parameters.add(Constants.NOTIFICATION_MSG_PARAM, getString(\"self.pwd.reset.success\"));\n                         setResponsePage(getApplication().getHomePage(), parameters);"},{"sha":"848159172f0ff7b38843689c1d2babd598a30525","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/PlainAttrs.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6edb4b036eaf77c550e9836fb7da5e0a66e2654a/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FPlainAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6edb4b036eaf77c550e9836fb7da5e0a66e2654a/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FPlainAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FPlainAttrs.java?ref=6edb4b036eaf77c550e9836fb7da5e0a66e2654a","patch":"@@ -377,7 +377,8 @@ protected PageReference getPageReference() {\n         }\n \n         panel.setReadOnly(readOnly);\n-\n+        panel.setMarkupId(StringUtils.isBlank(groupName) ? schemaTO.getKey() : groupName + \".\" + schemaTO.getKey());\n+        \n         return panel;\n     }\n "},{"sha":"a1c884b7cecc667e93ab2ccb4cdea2a234ad7f37","filename":"client/idrepo/enduser/src/main/resources/org/apache/syncope/client/enduser/panels/SelfPwdResetPanel.html","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6edb4b036eaf77c550e9836fb7da5e0a66e2654a/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2FSelfPwdResetPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6edb4b036eaf77c550e9836fb7da5e0a66e2654a/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2FSelfPwdResetPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2FSelfPwdResetPanel.html?ref=6edb4b036eaf77c550e9836fb7da5e0a66e2654a","patch":"@@ -41,7 +41,10 @@\n           </wicket:message><a wicket:id=\"reloadLink\"> <wicket:message key=\"reload\"></wicket:message></a>)</div>\n       </div>\n       <div class=\"form-group input-md\">\n-        <span wicket:id=\"securityAnswer\">[SECURITY ANSWER]</span>\n+        <label for=\"securityAnswer\"><wicket:message key=\"securityAnswer\"/></label>\n+        <input id=\"securityAnswer\" type=\"text\" wicket:id=\"securityAnswer\" class=\"form-control\" \n+               wicket:message=\"placeholder:securityAnswer\" \n+               autofocus=\"autofocus\" />\n       </div>\n       <div class=\"form-group input-md\">\n         <span wicket:id=\"captchaPanel\">[CAPTCHA]</span>"},{"sha":"b40a68bfafd7a8f09e6a3e94d71b20b466cccaf0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/enduser/AbstractEnduserITCase.java","status":"modified","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6edb4b036eaf77c550e9836fb7da5e0a66e2654a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FAbstractEnduserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6edb4b036eaf77c550e9836fb7da5e0a66e2654a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FAbstractEnduserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FAbstractEnduserITCase.java?ref=6edb4b036eaf77c550e9836fb7da5e0a66e2654a","patch":"@@ -24,8 +24,10 @@\n import com.giffing.wicket.spring.boot.starter.configuration.extensions.core.settings.general.GeneralSettingsProperties;\n import com.giffing.wicket.spring.boot.starter.configuration.extensions.external.spring.boot.actuator.WicketEndpointRepositoryDefault;\n import java.util.Collections;\n+import java.util.Date;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.time.DateFormatUtils;\n import org.apache.syncope.client.enduser.SyncopeWebApplication;\n import org.apache.syncope.client.enduser.commons.PreviewUtils;\n import org.apache.syncope.client.enduser.init.ClassPathScanImplementationLookup;\n@@ -41,6 +43,10 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.apache.syncope.common.keymaster.client.self.SelfKeymasterClientContext;\n+import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.request.UserCR;\n+import org.apache.syncope.common.rest.api.service.SecurityQuestionService;\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.fit.ui.AbstractUITCase;\n import org.apache.syncope.fit.ui.UtilityUIT;\n@@ -56,6 +62,8 @@ public abstract class AbstractEnduserITCase extends AbstractUITCase {\n \n     protected static UserService userService;\n \n+    protected static SecurityQuestionService securityQuestionService;\n+\n     protected static UtilityUIT UTILITY_UI;\n \n     @ImportAutoConfiguration(classes = { SelfKeymasterClientContext.class })\n@@ -135,6 +143,39 @@ public static void restSetup() {\n         adminClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n \n         userService = adminClient.getService(UserService.class);\n+        securityQuestionService = adminClient.getService(SecurityQuestionService.class);\n+        // create test user for must change password\n+        userService.create(new UserCR.Builder(SyncopeConstants.ROOT_REALM, \"mustchangepassword\").\n+                password(\"password123\").\n+                mustChangePassword(true).\n+                plainAttr(attr(\"fullname\", \"mustchangepassword@apache.org\")).\n+                plainAttr(attr(\"firstname\", \"mustchangepassword@apache.org\")).\n+                plainAttr(attr(\"surname\", \"surname\")).\n+                plainAttr(attr(\"ctype\", \"a type\")).\n+                plainAttr(attr(\"userId\", \"mustchangepassword@apache.org\")).\n+                plainAttr(attr(\"email\", \"mustchangepassword@apache.org\")).\n+                plainAttr(attr(\"loginDate\", DateFormatUtils.ISO_8601_EXTENDED_DATETIME_FORMAT.format(new Date()))).\n+                build());\n+        // create test user for self password reset\n+        userService.create(new UserCR.Builder(SyncopeConstants.ROOT_REALM, \"selfpwdreset\").\n+                password(\"password123\").\n+                plainAttr(attr(\"fullname\", \"selfpwdreset@apache.org\")).\n+                plainAttr(attr(\"firstname\", \"selfpwdreset@apache.org\")).\n+                plainAttr(attr(\"surname\", \"surname\")).\n+                plainAttr(attr(\"ctype\", \"a type\")).\n+                plainAttr(attr(\"userId\", \"selfpwdreset@apache.org\")).\n+                plainAttr(attr(\"email\", \"selfpwdreset@apache.org\")).\n+                plainAttr(attr(\"loginDate\", DateFormatUtils.ISO_8601_EXTENDED_DATETIME_FORMAT.format(new Date()))).\n+                build());\n+        // create test user for self update\n+        userService.create(new UserCR.Builder(SyncopeConstants.ROOT_REALM, \"selfupdate\").\n+                password(\"password123\").\n+                plainAttr(attr(\"fullname\", \"selfupdate@apache.org\")).\n+                plainAttr(attr(\"firstname\", \"selfupdate@apache.org\")).\n+                plainAttr(attr(\"surname\", \"surname\")).\n+                plainAttr(attr(\"ctype\", \"a type\")).\n+                plainAttr(attr(\"userId\", \"selfupdate@apache.org\")).\n+                build());\n     }\n \n     protected void doLogin(final String user, final String passwd) {\n@@ -146,4 +187,8 @@ protected void doLogin(final String user, final String passwd) {\n         formTester.setValue(\"password\", passwd);\n         formTester.submit(\"submit\");\n     }\n+\n+    protected static Attr attr(final String schema, final String value) {\n+        return new Attr.Builder(schema).value(value).build();\n+    }\n }"},{"sha":"bfa2ff670ceb56448a4c4f4473c896642367c8bf","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/enduser/SelfRegistrationITCase.java","status":"modified","additions":152,"deletions":38,"changes":190,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6edb4b036eaf77c550e9836fb7da5e0a66e2654a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FSelfRegistrationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6edb4b036eaf77c550e9836fb7da5e0a66e2654a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FSelfRegistrationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FSelfRegistrationITCase.java?ref=6edb4b036eaf77c550e9836fb7da5e0a66e2654a","patch":"@@ -18,23 +18,29 @@\n  */\n package org.apache.syncope.fit.enduser;\n \n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.enduser.pages.Login;\n+import org.apache.syncope.client.enduser.pages.SelfPasswordReset;\n+import org.apache.syncope.client.enduser.pages.MustChangePassword;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.request.BooleanReplacePatchItem;\n+import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.request.UserUR;\n+import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.wicket.extensions.markup.html.form.palette.component.Choices;\n import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.Button;\n+import org.apache.wicket.markup.html.form.PasswordTextField;\n import org.apache.wicket.markup.html.form.TextField;\n import org.apache.wicket.util.tester.FormTester;\n-import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n-@Disabled(\"WIP\")\n public class SelfRegistrationITCase extends AbstractEnduserITCase {\n \n     private static final String WIZARD_FORM = \"body:wizard:form\";\n@@ -50,7 +56,7 @@ public void selfCreate() {\n \n         UTILITY_UI.getTester().assertComponent(WIZARD_FORM + \":view:username:textField\", TextField.class);\n         FormTester formTester = UTILITY_UI.getTester().newFormTester(WIZARD_FORM);\n-        assertNotNull(formTester);\n+        Assertions.assertNotNull(formTester);\n         formTester.setValue(\"view:username:textField\", username);\n         UTILITY_UI.getTester().executeAjaxEvent(WIZARD_FORM + \":buttons:next\", Constants.ON_CLICK);\n \n@@ -65,23 +71,32 @@ public void selfCreate() {\n                 TextField.class);\n         UTILITY_UI.getTester().executeAjaxEvent(WIZARD_FORM + \":buttons:next\", Constants.ON_CLICK);\n \n-        UTILITY_UI.getTester().assertComponent(WIZARD_FORM\n-                + \":view:plainSchemas:tabs:0:body:content:schemas:6:panel:textField\",\n+        UTILITY_UI.getTester().assertComponent(UTILITY_UI.findComponentByMarkupId(\n+                WIZARD_FORM + \":view:plainSchemas:tabs:0:body:content:schemas\", \"fullname\").getPageRelativePath()\n+                + \":textField\",\n                 TextField.class);\n-        UTILITY_UI.getTester().assertComponent(WIZARD_FORM\n-                + \":view:plainSchemas:tabs:0:body:content:schemas:12:panel:textField\",\n+        UTILITY_UI.getTester().assertComponent(UTILITY_UI.findComponentByMarkupId(\n+                WIZARD_FORM + \":view:plainSchemas:tabs:0:body:content:schemas\", \"surname\").getPageRelativePath()\n+                + \":textField\",\n                 TextField.class);\n-        UTILITY_UI.getTester().assertComponent(WIZARD_FORM\n-                + \":view:plainSchemas:tabs:0:body:content:schemas:14:panel:textField\",\n+        UTILITY_UI.getTester().assertComponent(UTILITY_UI.findComponentByMarkupId(\n+                WIZARD_FORM + \":view:plainSchemas:tabs:0:body:content:schemas\", \"userId\").getPageRelativePath()\n+                + \":textField\",\n                 TextField.class);\n \n         formTester = UTILITY_UI.getTester().newFormTester(WIZARD_FORM);\n-        assertNotNull(formTester);\n-        formTester.setValue(\"view:plainSchemas:tabs:0:body:content:schemas:6:panel:textField\",\n+        Assertions.assertNotNull(formTester);\n+        formTester.setValue(UTILITY_UI.findComponentByMarkupId(WIZARD_FORM\n+                + \":view:plainSchemas:tabs:0:body:content:schemas\",\n+                \"fullname\").getPageRelativePath().replace(WIZARD_FORM + \":\", StringUtils.EMPTY) + \":textField\",\n                 \"User fullname\");\n-        formTester.setValue(\"view:plainSchemas:tabs:0:body:content:schemas:12:panel:textField\",\n+        formTester.setValue(UTILITY_UI.findComponentByMarkupId(WIZARD_FORM\n+                + \":view:plainSchemas:tabs:0:body:content:schemas\",\n+                \"surname\").getPageRelativePath().replace(WIZARD_FORM + \":\", StringUtils.EMPTY) + \":textField\",\n                 \"User surname\");\n-        formTester.setValue(\"view:plainSchemas:tabs:0:body:content:schemas:14:panel:textField\",\n+        formTester.setValue(UTILITY_UI.\n+                findComponentByMarkupId(WIZARD_FORM + \":view:plainSchemas:tabs:0:body:content:schemas\", \"userId\").\n+                getPageRelativePath().replace(WIZARD_FORM + \":\", StringUtils.EMPTY) + \":textField\",\n                 \"test@email.com\");\n \n         UTILITY_UI.getTester().executeAjaxEvent(WIZARD_FORM + \":buttons:next\", Constants.ON_CLICK);\n@@ -107,30 +122,125 @@ public void selfCreate() {\n         UTILITY_UI.getTester().assertRenderedPage(Login.class);\n         UTILITY_UI.getTester().assertComponent(\"login:username\", TextField.class);\n \n-        assertFalse(userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        Assertions.assertFalse(userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(username).query()).\n                 build()).getResult().isEmpty());\n-        \n-        assertNotNull(userService.read(username));\n+\n+        Assertions.assertNotNull(userService.read(username));\n \n         UTILITY_UI.getTester().cleanupFeedbackMessages();\n+\n+        // cleanup\n+        userService.delete(username);\n     }\n \n     @Test\n     public void selfPasswordReset() {\n+        SecurityQuestionTO question = securityQuestionService.read(\"887028ea-66fc-41e7-b397-620d7ea6dfbb\");\n+        UserTO selfpwdreset = userService.read(\"selfpwdreset\");\n+        userService.update(new UserUR.Builder(selfpwdreset.getKey())\n+                .securityQuestion(new StringReplacePatchItem.Builder()\n+                        .operation(PatchOperation.ADD_REPLACE)\n+                        .value(question.getKey())\n+                        .build())\n+                .securityAnswer(new StringReplacePatchItem.Builder()\n+                        .operation(PatchOperation.ADD_REPLACE)\n+                        .value(\"ananswer\")\n+                        .build())\n+                .build());\n+\n+        final String pwdResetForm = \"body:content:selfPwdResetForm\";\n         UTILITY_UI.getTester().startPage(Login.class);\n         UTILITY_UI.getTester().assertRenderedPage(Login.class);\n \n         UTILITY_UI.getTester().clickLink(\"self-pwd-reset\");\n+\n+        UTILITY_UI.getTester().assertRenderedPage(SelfPasswordReset.class);\n+\n+        UTILITY_UI.getTester().assertComponent(pwdResetForm + \":selfPwdResetPanel:username\", TextField.class);\n+        UTILITY_UI.getTester().assertComponent(pwdResetForm + \":selfPwdResetPanel:securityQuestion\", TextField.class);\n+\n+        FormTester formTester = UTILITY_UI.getTester().newFormTester(pwdResetForm);\n+        Assertions.assertNotNull(formTester);\n+        // 1. set username to selfpwdreset\n+        formTester.setValue(UTILITY_UI.findComponentById(pwdResetForm + \":selfPwdResetPanel\", \"username\"),\n+                \"selfpwdreset\");\n+        // 2. check that the question has been populated\n+        UTILITY_UI.getTester().executeAjaxEvent(pwdResetForm + \":selfPwdResetPanel:username\", Constants.ON_BLUR);\n+        UTILITY_UI.getTester().assertModelValue(pwdResetForm + \":selfPwdResetPanel:securityQuestion\", question.\n+                getContent());\n+        // 3. submit form and receive an error\n+        formTester = UTILITY_UI.getTester().newFormTester(pwdResetForm);\n+        Assertions.assertNotNull(formTester);\n+        UTILITY_UI.getTester().executeAjaxEvent(pwdResetForm + \":selfPwdResetPanel:submit\", Constants.ON_CLICK);\n+        UTILITY_UI.getTester().assertErrorMessages(\"InvalidSecurityAnswer []\");\n+        UTILITY_UI.getTester().cleanupFeedbackMessages();\n+        // 3.1 set the correct answer\n+        formTester = UTILITY_UI.getTester().newFormTester(pwdResetForm);\n+        Assertions.assertNotNull(formTester);\n+        UTILITY_UI.getTester().assertComponent(pwdResetForm + \":selfPwdResetPanel:securityAnswer\", TextField.class);\n+        formTester.setValue(\"selfPwdResetPanel:securityAnswer\", \"ananswer\");\n+        UTILITY_UI.getTester().executeAjaxEvent(pwdResetForm + \":selfPwdResetPanel:securityAnswer\", Constants.ON_CHANGE);\n+        UTILITY_UI.getTester().assertComponent(pwdResetForm + \":selfPwdResetPanel:securityAnswer\",\n+                TextField.class);\n+        // 4. submit form\n+        UTILITY_UI.getTester().assertNoFeedbackMessage(0);\n+        UTILITY_UI.getTester().assertNoErrorMessage();\n+        UTILITY_UI.getTester().assertComponent(pwdResetForm + \":selfPwdResetPanel:submit\", Button.class);\n+        UTILITY_UI.getTester().executeAjaxEvent(pwdResetForm + \":selfPwdResetPanel:submit\", Constants.ON_CLICK);\n+        UTILITY_UI.getTester().assertRenderedPage(Login.class);\n+        UTILITY_UI.getTester().assertComponent(\"login:username\", TextField.class);\n+\n+        UTILITY_UI.getTester().cleanupFeedbackMessages();\n+    }\n+\n+    @Test\n+    public void mustChangePassword() {\n+        UserTO mustchangepassword = userService.read(\"mustchangepassword\");\n+        userService.update(new UserUR.Builder(mustchangepassword.getKey())\n+                .mustChangePassword(new BooleanReplacePatchItem.Builder()\n+                        .operation(PatchOperation.ADD_REPLACE)\n+                        .value(Boolean.TRUE).build()).build());\n+\n+        UTILITY_UI.getTester().startPage(Login.class);\n+        doLogin(\"mustchangepassword\", \"password123\");\n+\n+        UTILITY_UI.getTester().assertRenderedPage(MustChangePassword.class);\n+\n+        final String changePwdForm = \"changePassword\";\n+        UTILITY_UI.getTester().assertComponent(changePwdForm + \":username\", TextField.class);\n+        UTILITY_UI.getTester().assertComponent(changePwdForm + \":password:passwordField\", PasswordTextField.class);\n+        UTILITY_UI.getTester().\n+                assertComponent(changePwdForm + \":confirmPassword:passwordField\", PasswordTextField.class);\n+        UTILITY_UI.getTester().assertModelValue(changePwdForm + \":username\", \"mustchangepassword\");\n+\n+        FormTester formTester = UTILITY_UI.getTester().newFormTester(changePwdForm);\n+\n+        Assertions.assertNotNull(formTester);\n+        // 1. set new password\n+        formTester.setValue(UTILITY_UI.findComponentById(changePwdForm + \":password\", \"passwordField\"), \"password124\");\n+        // 2. confirm password\n+        formTester.setValue(UTILITY_UI.findComponentById(changePwdForm + \":confirmPassword\", \"passwordField\"),\n+                \"password124\");\n+        // 3. submit form\n+        UTILITY_UI.getTester().executeAjaxEvent(changePwdForm + \":submit\", Constants.ON_CLICK);\n+\n+        UTILITY_UI.getTester().assertRenderedPage(Login.class);\n+        UTILITY_UI.getTester().assertComponent(\"login:username\", TextField.class);\n+\n+        UTILITY_UI.getTester().cleanupFeedbackMessages();\n+\n+        doLogin(\"mustchangepassword\", \"password124\");\n+        UTILITY_UI.getTester().assertComponent(WIZARD_FORM + \":view:username:textField\", TextField.class);\n     }\n \n     @Test\n     public void selfUpdate() {\n-        String username = \"puccini\";\n-        String newEmail = \"giacomo.puccini@email.com\";\n+        String username = \"selfupdate\";\n+        String newEmail = \"selfupdate@email.com\";\n \n         UTILITY_UI.getTester().startPage(Login.class);\n-        doLogin(username, \"password\");\n+        doLogin(username, \"password123\");\n \n         UTILITY_UI.getTester().assertComponent(WIZARD_FORM + \":view:username:textField\", TextField.class);\n         UTILITY_UI.getTester().executeAjaxEvent(WIZARD_FORM + \":buttons:next\", Constants.ON_CLICK);\n@@ -142,22 +252,29 @@ public void selfUpdate() {\n                 TextField.class);\n         UTILITY_UI.getTester().executeAjaxEvent(WIZARD_FORM + \":buttons:next\", Constants.ON_CLICK);\n \n-        UTILITY_UI.getTester().assertComponent(WIZARD_FORM\n-                + \":view:plainSchemas:tabs:0:body:content:schemas:6:panel:textField\",\n+        UTILITY_UI.getTester().assertComponent(UTILITY_UI.findComponentByMarkupId(\n+                WIZARD_FORM + \":view:plainSchemas:tabs:0:body:content:schemas\", \"fullname\").getPageRelativePath()\n+                + \":textField\",\n                 TextField.class);\n-        UTILITY_UI.getTester().assertComponent(WIZARD_FORM\n-                + \":view:plainSchemas:tabs:0:body:content:schemas:12:panel:textField\",\n+        UTILITY_UI.getTester().assertComponent(UTILITY_UI.findComponentByMarkupId(\n+                WIZARD_FORM + \":view:plainSchemas:tabs:0:body:content:schemas\", \"surname\").getPageRelativePath()\n+                + \":textField\",\n                 TextField.class);\n-        UTILITY_UI.getTester().assertComponent(WIZARD_FORM\n-                + \":view:plainSchemas:tabs:0:body:content:schemas:14:panel:textField\",\n+        UTILITY_UI.getTester().assertComponent(UTILITY_UI.findComponentByMarkupId(\n+                WIZARD_FORM + \":view:plainSchemas:tabs:0:body:content:schemas\", \"userId\").getPageRelativePath()\n+                + \":textField\",\n                 TextField.class);\n \n         FormTester formTester = UTILITY_UI.getTester().newFormTester(WIZARD_FORM);\n-        assertNotNull(formTester);\n-        UTILITY_UI.getTester().assertComponent(WIZARD_FORM\n-                + \":view:plainSchemas:tabs:0:body:content:schemas:4:panel:textField\",\n+        Assertions.assertNotNull(formTester);\n+        UTILITY_UI.getTester().assertComponent(UTILITY_UI.findComponentByMarkupId(\n+                WIZARD_FORM + \":view:plainSchemas:tabs:0:body:content:schemas\", \"email\").getPageRelativePath()\n+                + \":textField\",\n                 TextField.class);\n-        formTester.setValue(\"view:plainSchemas:tabs:0:body:content:schemas:4:panel:textField\", newEmail);\n+        formTester.setValue(UTILITY_UI.findComponentByMarkupId(WIZARD_FORM\n+                + \":view:plainSchemas:tabs:0:body:content:schemas\",\n+                \"email\").getPageRelativePath().replace(WIZARD_FORM + \":\", StringUtils.EMPTY) + \":textField\",\n+                newEmail);\n \n         UTILITY_UI.getTester().executeAjaxEvent(WIZARD_FORM + \":buttons:next\", Constants.ON_CLICK);\n \n@@ -181,13 +298,10 @@ public void selfUpdate() {\n         UTILITY_UI.getTester().assertRenderedPage(Login.class);\n         UTILITY_UI.getTester().assertComponent(\"login:username\", TextField.class);\n \n-        assertTrue(userService.read(username).getPlainAttr(\"email\").get().getValues().get(0).equals(newEmail));\n+        Assertions.assertEquals(\"active\", userService.read(username).getStatus());\n+        Assertions.assertEquals(newEmail, userService.read(username).getPlainAttr(\"email\").get().getValues().get(0));\n \n         UTILITY_UI.getTester().cleanupFeedbackMessages();\n     }\n \n-    @Test\n-    public void mustChangePassword() {\n-\n-    }\n }"},{"sha":"342d0c620d2c419077932647b381e2aa83210a71","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/ui/UtilityUIT.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6edb4b036eaf77c550e9836fb7da5e0a66e2654a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FUtilityUIT.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6edb4b036eaf77c550e9836fb7da5e0a66e2654a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FUtilityUIT.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FUtilityUIT.java?ref=6edb4b036eaf77c550e9836fb7da5e0a66e2654a","patch":"@@ -83,6 +83,16 @@ public Component findComponentById(final String searchPath, final String id) {\n                     }\n                 });\n     }\n+    \n+    public Component findComponentByMarkupId(final String searchPath, final String markupId) {\n+        Component component = tester.getComponentFromLastRenderedPage(searchPath);\n+        return (component instanceof MarkupContainer ? MarkupContainer.class.cast(component) : component.getPage()).\n+                visitChildren(Component.class, (final Component object, final IVisit<Component> visit) -> {\n+                    if (object.getMarkupId().equals(markupId)) {\n+                        visit.stop(object);\n+                    }\n+                });\n+    }\n \n     public void closeCallBack(final Component modal) {\n         modal.getBehaviors().stream()."}]}