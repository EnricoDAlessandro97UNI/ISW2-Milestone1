{"sha":"f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmYyYmM3MjBiZmMwODcxMzk2YTRmYjg1OTJiMDVhNDJkNWEwYTNkZmI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-04-17T12:26:07Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-04-17T12:47:54Z"},"message":"White noise: cleanup and small improvements","tree":{"sha":"7ab98ea7362603a9b10ad780753fd761ee10d4a9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7ab98ea7362603a9b10ad780753fd761ee10d4a9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"3b4f59f2109b7665fa1350f266680e824a33391c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3b4f59f2109b7665fa1350f266680e824a33391c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3b4f59f2109b7665fa1350f266680e824a33391c"}],"stats":{"total":243,"additions":132,"deletions":111},"files":[{"sha":"8872e092b94f34fc7c82236c3b89688ce12c4792","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java?ref=f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb","patch":"@@ -240,7 +240,7 @@ public ResourceStatusDataProvider(final int paginatorRows) {\n                 fiql = null;\n                 restClient = null;\n             } else {\n-                AbstractFiqlSearchConditionBuilder bld;\n+                AbstractFiqlSearchConditionBuilder<?, ?, ?> bld;\n                 switch (type) {\n                     case \"USER\":\n                         bld = SyncopeClient.getUserSearchConditionBuilder();"},{"sha":"339bea7439f4013f42a19e79d1a4aff037539c17","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/AjaxPalettePanel.java","status":"modified","additions":108,"deletions":85,"changes":193,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java?ref=f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb","patch":"@@ -21,11 +21,13 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.function.Function;\n import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n import org.apache.commons.collections4.ListUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.ui.commons.Constants;\n@@ -52,24 +54,24 @@\n \n     protected Palette<T> palette;\n \n-    private final Model<String> queryFilter = new Model<>(StringUtils.EMPTY);\n+    protected final Model<String> queryFilter = new Model<>(StringUtils.EMPTY);\n \n-    private final List<T> availableBefore = new ArrayList<>();\n+    protected final List<T> availableBefore = new ArrayList<>();\n \n     private final LoadableDetachableModel<List<T>> choicesModel;\n \n     public AjaxPalettePanel(\n-            final String id, final IModel<List<T>> model, final Builder.Query<T> choices, final Builder<T> builder) {\n+            final String id, final IModel<List<T>> model, final Builder.Query<T> query, final Builder<T> builder) {\n \n         super(id, builder.name == null ? id : builder.name, model);\n \n-        choicesModel = new PaletteLoadableDetachableModel() {\n+        choicesModel = new PaletteLoadableDetachableModel(builder) {\n \n             private static final long serialVersionUID = -108100712154481840L;\n \n             @Override\n             protected List<T> getChoices() {\n-                return choices.execute(queryFilter.getObject());\n+                return query.execute(queryFilter.getObject());\n             }\n         };\n         initialize(model, builder);\n@@ -79,7 +81,7 @@ public AjaxPalettePanel(\n             final String id, final IModel<List<T>> model, final IModel<List<T>> choices, final Builder<T> builder) {\n         super(id, builder.name == null ? id : builder.name, model);\n \n-        choicesModel = new PaletteLoadableDetachableModel() {\n+        choicesModel = new PaletteLoadableDetachableModel(builder) {\n \n             private static final long serialVersionUID = -108100712154481840L;\n \n@@ -93,10 +95,39 @@ protected List<T> getChoices() {\n         initialize(model, builder);\n     }\n \n-    private void initialize(final IModel<List<T>> model, final Builder<T> builder) {\n+    protected void initialize(final IModel<List<T>> model, final Builder<T> builder) {\n         setOutputMarkupId(true);\n \n-        this.palette = new NonI18nPalette<T>(\n+        palette = buildPalette(model, builder);\n+        add(palette.setLabel(new ResourceModel(name)).setOutputMarkupId(true));\n+\n+        Form<?> form = new Form<>(\"form\");\n+        add(form.setEnabled(builder.filtered).setVisible(builder.filtered));\n+\n+        queryFilter.setObject(builder.filter);\n+        AjaxTextFieldPanel filter = new AjaxTextFieldPanel(\"filter\", \"filter\", queryFilter, false);\n+        form.add(filter.hideLabel().setOutputMarkupId(true));\n+\n+        AjaxButton search = new AjaxButton(\"search\") {\n+\n+            private static final long serialVersionUID = 8390605330558248736L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target) {\n+                if (builder.warnIfEmptyFilter && StringUtils.isEmpty(queryFilter.getObject())) {\n+                    Session.get().info(getString(\"nomatch\"));\n+                    ((BaseWebPage) getPage()).getNotificationPanel().refresh(target);\n+                }\n+\n+                target.add(palette);\n+            }\n+        };\n+        search.setOutputMarkupId(true);\n+        form.add(search);\n+    }\n+\n+    protected Palette<T> buildPalette(final IModel<List<T>> model, final Builder<T> builder) {\n+        return new NonI18nPalette<T>(\n                 \"paletteField\", model, choicesModel, builder.renderer, 8, builder.allowOrder, builder.allowMoveAll) {\n \n             private static final long serialVersionUID = -3074655279011678437L;\n@@ -119,14 +150,13 @@ protected Recorder<T> newRecorderComponent() {\n \n                     @Override\n                     public List<T> getUnselectedList() {\n-                        final IChoiceRenderer<? super T> renderer = getPalette().getChoiceRenderer();\n-                        final Collection<? extends T> choices = getPalette().getChoices();\n-                        final List<T> unselected = new ArrayList<>(choices.size());\n-                        final List<String> ids = List.of(getValue().split(\",\"));\n+                        IChoiceRenderer<? super T> renderer = getChoiceRenderer();\n+                        Collection<? extends T> choices = getChoices();\n \n+                        List<String> ids = builder.idExtractor.apply(getValue()).collect(Collectors.toList());\n+                        List<T> unselected = new ArrayList<>(choices.size());\n                         choices.forEach(choice -> {\n-                            final String choiceId = renderer.getIdValue(choice, 0);\n-                            if (!ids.contains(choiceId)) {\n+                            if (!ids.contains(renderer.getIdValue(choice, 0))) {\n                                 unselected.add(choice);\n                             }\n                         });\n@@ -136,26 +166,22 @@ public List<T> getUnselectedList() {\n \n                     @Override\n                     public List<T> getSelectedList() {\n-                        final IChoiceRenderer<? super T> renderer = getPalette().getChoiceRenderer();\n-                        final Collection<? extends T> choices = getPalette().getChoices();\n-                        final List<T> selected = new ArrayList<>(choices.size());\n+                        IChoiceRenderer<? super T> renderer = getChoiceRenderer();\n+                        Collection<? extends T> choices = getChoices();\n \n                         // reduce number of method calls by building a lookup table\n-                        final Map<T, String> idForChoice = new HashMap<>(choices.size());\n-                        choices.forEach(choice -> idForChoice.put(choice, renderer.getIdValue(choice, 0)));\n+                        Map<T, String> idForChoice = choices.stream().collect(Collectors.toMap(\n+                                Function.identity(), choice -> renderer.getIdValue(choice, 0), (c1, c2) -> c1));\n \n-                        final String value = getValue();\n-                        int start = value.indexOf(';') + 1;\n-\n-                        for (final String id : Strings.split(value.substring(start), ',')) {\n-                            for (final T choice : choices) {\n-                                final String idValue = idForChoice.get(choice);\n-                                if (id.equals(idValue)) {\n+                        List<T> selected = new ArrayList<>(choices.size());\n+                        builder.idExtractor.apply(getValue()).forEach(id -> {\n+                            for (T choice : choices) {\n+                                if (id.equals(idForChoice.get(choice))) {\n                                     selected.add(choice);\n                                     break;\n                                 }\n                             }\n-                        }\n+                        });\n \n                         return selected;\n                     }\n@@ -172,33 +198,18 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n                 return recorder;\n             }\n-        };\n-\n-        add(palette.setLabel(new ResourceModel(name)).setOutputMarkupId(true));\n-\n-        Form<?> form = new Form<>(\"form\");\n-        add(form.setEnabled(builder.filtered).setVisible(builder.filtered));\n-\n-        queryFilter.setObject(builder.filter);\n-        AjaxTextFieldPanel filter = new AjaxTextFieldPanel(\"filter\", \"filter\", queryFilter, false);\n-        form.add(filter.hideLabel().setOutputMarkupId(true).setRenderBodyOnly(true));\n-\n-        AjaxButton search = new AjaxButton(\"search\") {\n-\n-            private static final long serialVersionUID = 8390605330558248736L;\n \n             @Override\n-            protected void onSubmit(final AjaxRequestTarget target) {\n-                if (builder.warnIfEmptyFilter && StringUtils.isEmpty(queryFilter.getObject())) {\n-                    Session.get().info(getString(\"nomatch\"));\n-                    ((BaseWebPage) getPage()).getNotificationPanel().refresh(target);\n-                }\n-\n-                target.add(palette);\n+            protected Map<String, String> getAdditionalAttributes(final Object choice) {\n+                return builder.additionalAttributes == null\n+                        ? super.getAdditionalAttributes(choice)\n+                        : builder.additionalAttributes.apply(choice);\n             }\n         };\n-        search.setOutputMarkupId(true);\n-        form.add(search);\n+    }\n+\n+    public Recorder<T> getRecorderComponent() {\n+        return palette.getRecorderComponent();\n     }\n \n     public LoadableDetachableModel<List<T>> getChoicesModel() {\n@@ -235,30 +246,28 @@ public AbstractFieldPanel<List<T>> setRequired(final boolean required) {\n \n         private static final long serialVersionUID = 991248996001040352L;\n \n-        private IChoiceRenderer<T> renderer;\n+        protected String name;\n \n-        private boolean allowOrder;\n+        protected IChoiceRenderer<T> renderer = new SelectChoiceRenderer<>();\n \n-        private boolean allowMoveAll;\n+        protected boolean allowOrder;\n \n-        private String selectedLabel;\n+        protected boolean allowMoveAll;\n \n-        private String availableLabel;\n+        protected String selectedLabel;\n \n-        private boolean filtered;\n+        protected String availableLabel;\n \n-        private String filter = \"*\";\n+        protected boolean filtered;\n \n-        private boolean warnIfEmptyFilter = true;\n+        protected String filter = \"*\";\n \n-        private String name;\n+        protected boolean warnIfEmptyFilter = true;\n \n-        public Builder() {\n-            this.allowMoveAll = false;\n-            this.allowOrder = false;\n-            this.filtered = false;\n-            this.renderer = new SelectChoiceRenderer<>();\n-        }\n+        protected Function<String, Stream<String>> idExtractor =\n+                (Function<String, Stream<String>> & Serializable) input -> Stream.of(Strings.split(input, ','));\n+\n+        protected Function<Object, Map<String, String>> additionalAttributes;\n \n         public Builder<T> setName(final String name) {\n             this.name = name;\n@@ -306,6 +315,16 @@ public Builder<T> warnIfEmptyFilter(final boolean warnIfEmptyFilter) {\n             return this;\n         }\n \n+        public Builder<T> idExtractor(final Function<String, Stream<String>> idExtractor) {\n+            this.idExtractor = idExtractor;\n+            return this;\n+        }\n+\n+        public Builder<T> additionalAttributes(final Function<Object, Map<String, String>> additionalAttributes) {\n+            this.additionalAttributes = additionalAttributes;\n+            return this;\n+        }\n+\n         public AjaxPalettePanel<T> build(final String id, final IModel<List<T>> model, final IModel<List<T>> choices) {\n             return new AjaxPalettePanel<>(id, model, choices, this);\n         }\n@@ -322,63 +341,67 @@ public AjaxPalettePanel<T> build(final String id, final IModel<List<T>> model, f\n         }\n     }\n \n-    private abstract class PaletteLoadableDetachableModel extends LoadableDetachableModel<List<T>> {\n+    protected abstract class PaletteLoadableDetachableModel extends LoadableDetachableModel<List<T>> {\n \n         private static final long serialVersionUID = -7745220313769774616L;\n \n+        protected final Builder<T> builder;\n+\n+        public PaletteLoadableDetachableModel(final Builder<T> builder) {\n+            this.builder = builder;\n+        }\n+\n         protected abstract List<T> getChoices();\n \n         @Override\n         protected List<T> load() {\n-            final List<T> selected = availableBefore.isEmpty()\n+            List<T> selected = availableBefore.isEmpty()\n                     ? new ArrayList<>(palette.getModelCollection())\n-                    : getSelectedList(availableBefore, palette.getRecorderComponent().getValue());\n+                    : getSelectedList(availableBefore);\n \n             availableBefore.clear();\n             availableBefore.addAll(ListUtils.sum(selected, getChoices()));\n             return availableBefore;\n         }\n \n-        private List<T> getSelectedList(final Collection<T> choices, final String selection) {\n+        protected List<T> getSelectedList(final Collection<T> choices) {\n             IChoiceRenderer<? super T> renderer = palette.getChoiceRenderer();\n-            List<T> selected = new ArrayList<>();\n \n-            Map<T, String> idForChoice = new HashMap<>();\n-            choices.forEach(choice -> idForChoice.put(choice, renderer.getIdValue(choice, 0)));\n+            Map<T, String> idForChoice = choices.stream().collect(Collectors.toMap(\n+                    Function.identity(), choice -> renderer.getIdValue(choice, 0), (c1, c2) -> c1));\n \n-            for (String id : Strings.split(selection, ',')) {\n+            List<T> selected = new ArrayList<>();\n+            builder.idExtractor.apply(palette.getRecorderComponent().getValue()).forEach(id -> {\n                 Iterator<T> iter = choices.iterator();\n                 boolean found = false;\n                 while (!found && iter.hasNext()) {\n-                    final T choice = iter.next();\n-                    final String idValue = idForChoice.get(choice);\n-                    if (id.equals(idValue)) {\n+                    T choice = iter.next();\n+                    if (id.equals(idForChoice.get(choice))) {\n                         selected.add(choice);\n                         found = true;\n                     }\n                 }\n-            }\n+            });\n \n             return selected;\n         }\n \n         protected List<T> getFilteredList(final Collection<T> choices, final String filter) {\n             IChoiceRenderer<? super T> renderer = palette.getChoiceRenderer();\n-            List<T> selected = new ArrayList<>(choices.size());\n \n-            Map<T, String> idForChoice = new HashMap<>();\n-            choices.forEach(choice -> idForChoice.put(choice, renderer.getIdValue(choice, 0)));\n+            Map<T, String> idForChoice = choices.stream().collect(Collectors.toMap(\n+                    Function.identity(), choice -> renderer.getIdValue(choice, 0), (c1, c2) -> c1));\n \n             Pattern pattern = Pattern.compile(filter, Pattern.CASE_INSENSITIVE);\n \n+            List<T> filtered = new ArrayList<>(choices.size());\n             choices.forEach(choice -> {\n-                String idValue = idForChoice.get(choice);\n-                if (pattern.matcher(idValue).matches()) {\n-                    selected.add(choice);\n+                if (pattern.matcher(idForChoice.get(choice)).matches()) {\n+                    filtered.add(choice);\n                 }\n             });\n \n-            return selected;\n+            return filtered;\n         }\n     }\n }"},{"sha":"84dbd8a0917b1a4030e40bab993a777e3ade0c99","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/NonI18nPalette.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FNonI18nPalette.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FNonI18nPalette.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FNonI18nPalette.java?ref=f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.ui.commons.markup.html.form;\n \n import java.util.Collection;\n-import java.util.LinkedHashMap;\n import java.util.Map;\n import org.apache.wicket.extensions.markup.html.form.palette.Palette;\n import org.apache.wicket.markup.html.form.IChoiceRenderer;\n@@ -43,17 +42,17 @@ protected boolean localizeDisplayValues() {\n         return false;\n     }\n \n+    protected Map<String, String> getAdditionalAttributes(final Object choice) {\n+        return Map.of(\"title\", choice.toString());\n+    }\n+\n     @Override\n     protected Map<String, String> getAdditionalAttributesForChoices(final Object choice) {\n-        Map<String, String> map = new LinkedHashMap<>();\n-        map.put(\"title\", choice.toString());\n-        return map;\n+        return getAdditionalAttributes(choice);\n     }\n \n     @Override\n     protected Map<String, String> getAdditionalAttributesForSelection(final Object choice) {\n-        Map<String, String> map = new LinkedHashMap<>();\n-        map.put(\"title\", choice.toString());\n-        return map;\n+        return getAdditionalAttributes(choice);\n     }\n }"},{"sha":"148c74b824a7589059bc25fd988bd768b3209ed4","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationWrapper.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWrapper.java?ref=f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb","patch":"@@ -79,7 +79,7 @@ public Map<String, String> getAboutFIQLs() {\n         } else {\n             Map<String, String> res = new HashMap<>();\n             for (Pair<String, List<SearchClause>> pair : this.aboutClauses) {\n-                AbstractFiqlSearchConditionBuilder builder;\n+                AbstractFiqlSearchConditionBuilder<?, ?, ?> builder;\n                 switch (pair.getLeft()) {\n                     case \"USER\":\n                         builder = SyncopeClient.getUserSearchConditionBuilder();"},{"sha":"82d1ba27ce79cdca4ba45e73e38e184771a31e06","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java?ref=f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb","patch":"@@ -75,7 +75,7 @@\n \n     private final List<String> excluded;\n \n-    private final Map<String, Pair<AbstractFiqlSearchConditionBuilder, List<SearchClause>>> sCondWrapper;\n+    private final Map<String, Pair<AbstractFiqlSearchConditionBuilder<?, ?, ?>, List<SearchClause>>> sCondWrapper;\n \n     public BeanPanel(final String id, final IModel<T> bean, final String... excluded) {\n         this(id, bean, null, excluded);\n@@ -84,7 +84,7 @@ public BeanPanel(final String id, final IModel<T> bean, final String... excluded\n     public BeanPanel(\n             final String id,\n             final IModel<T> bean,\n-            final Map<String, Pair<AbstractFiqlSearchConditionBuilder, List<SearchClause>>> sCondWrapper,\n+            final Map<String, Pair<AbstractFiqlSearchConditionBuilder<?, ?, ?>, List<SearchClause>>> sCondWrapper,\n             final String... excluded) {\n         super(id, bean);\n         setOutputMarkupId(true);\n@@ -147,8 +147,7 @@ protected void populateItem(final ListItem<String> item) {\n                         clauses = SearchUtils.getSearchClauses(fiql);\n                     }\n \n-                    final AbstractFiqlSearchConditionBuilder builder;\n-\n+                    final AbstractFiqlSearchConditionBuilder<?, ?, ?> builder;\n                     switch (scondAnnot.type()) {\n                         case \"USER\":\n                             panel = new UserSearchPanel.Builder("},{"sha":"9c8d7556280de964952f5a9489c00aac06a925f4","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java?ref=f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb","patch":"@@ -216,13 +216,16 @@ private static SearchClause getPrimitiveSearchClause(final SearchCondition<Searc\n         return clause;\n     }\n \n-    public static String buildFIQL(final List<SearchClause> clauses, final AbstractFiqlSearchConditionBuilder builder) {\n+    public static String buildFIQL(\n+            final List<SearchClause> clauses,\n+            final AbstractFiqlSearchConditionBuilder<?, ?, ?> builder) {\n+\n         return buildFIQL(clauses, builder, Map.of(), NO_CUSTOM_CONDITION);\n     }\n \n     public static String buildFIQL(\n             final List<SearchClause> clauses,\n-            final AbstractFiqlSearchConditionBuilder builder,\n+            final AbstractFiqlSearchConditionBuilder<?, ?, ?> builder,\n             final Map<String, PlainSchemaTO> availableSchemaTypes,\n             final Function<SearchClause, CompleteCondition> customCondition) {\n "},{"sha":"574804ab73a9bd9e0b94b450dce3c8d88666f229","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportletWrapper.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWrapper.java?ref=f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb","patch":"@@ -40,7 +40,7 @@ public class ReportletWrapper implements Serializable {\n \n     private ReportletConf conf;\n \n-    private final Map<String, Pair<AbstractFiqlSearchConditionBuilder, List<SearchClause>>> scondWrapper;\n+    private final Map<String, Pair<AbstractFiqlSearchConditionBuilder<?, ?, ?>, List<SearchClause>>> scondWrapper;\n \n     public ReportletWrapper(final boolean isNew) {\n         this.isNew = isNew;\n@@ -78,7 +78,7 @@ public ReportletWrapper setConf(final ReportletConf conf) {\n         return this;\n     }\n \n-    public Map<String, Pair<AbstractFiqlSearchConditionBuilder, List<SearchClause>>> getSCondWrapper() {\n+    public Map<String, Pair<AbstractFiqlSearchConditionBuilder<?, ?, ?>, List<SearchClause>>> getSCondWrapper() {\n         return scondWrapper;\n     }\n }"},{"sha":"69e3e170faf9c55616cdd0eacbdae3abbb597eb4","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/PushTaskWrapper.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskWrapper.java?ref=f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb","patch":"@@ -57,7 +57,7 @@ public Map<String, String> getFilters() {\n \n         for (Map.Entry<String, List<SearchClause>> entry : getFilterClauses().entrySet()) {\n             if (!entry.getValue().isEmpty()) {\n-                AbstractFiqlSearchConditionBuilder bld;\n+                AbstractFiqlSearchConditionBuilder<?, ?, ?> bld;\n                 switch (entry.getKey()) {\n                     case \"USER\":\n                         bld = SyncopeClient.getUserSearchConditionBuilder();"},{"sha":"13caee27d649d0ec35da666ade6969a3b7268d4e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/DynRealmWrapper.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FDynRealmWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FDynRealmWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FDynRealmWrapper.java?ref=f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb","patch":"@@ -61,7 +61,8 @@ public Map<String, String> getDynMembershipConds() {\n             this.dynClauses.entrySet().stream().\n                     filter(entry -> (CollectionUtils.isNotEmpty(entry.getValue()))).\n                     forEachOrdered(entry -> {\n-                        AbstractFiqlSearchConditionBuilder builder = AnyTypeKind.USER.name().equals(entry.getKey())\n+                        AbstractFiqlSearchConditionBuilder<?, ?, ?> builder =\n+                                AnyTypeKind.USER.name().equals(entry.getKey())\n                                 ? SyncopeClient.getUserSearchConditionBuilder()\n                                 : AnyTypeKind.GROUP.name().equals(entry.getKey())\n                                 ? SyncopeClient.getGroupSearchConditionBuilder()"},{"sha":"bcd3911433ec272e1ea8184347c6a1cb0a211141","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java?ref=f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.wizards.any;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -146,7 +145,7 @@ public List<MembershipTO> getObject() {\n                 @Override\n                 public List<MembershipTO> execute(final String filter) {\n                     return StringUtils.isEmpty(filter)\n-                            ? Collections.emptyList()\n+                            ? List.of()\n                             : (\"*\".equals(filter)\n                                     ? groupsModel.getObject()\n                                     : groupRestClient.search(\n@@ -172,11 +171,8 @@ public List<String> getObject() {\n                     return Groups.this.groupsModel.getDynMemberships();\n                 }\n \n-            }, new ListModel<>(groupsModel.getObject().stream()\n-                            .map(GroupTO::getName).collect(Collectors.toList()))).\n+            }, new ListModel<>(groupsModel.getObject().stream().map(GroupTO::getName).collect(Collectors.toList()))).\n                     hideLabel().setEnabled(false).setOutputMarkupId(true));\n-\n-            // ---------------------------------\n         }\n     }\n "},{"sha":"5eebcdbea34ef96a75d6d8b9fde794dd5b42478d","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPushActions.groovy","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPushActions.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPushActions.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPushActions.groovy?ref=f2bc720bfc0871396a4fb8592b05a42d5a0a3dfb","patch":"@@ -19,9 +19,9 @@\n  */\n import groovy.transform.CompileStatic\n import java.util.Set\n+import org.apache.syncope.common.lib.to.ProvisioningReport\n import org.apache.syncope.core.persistence.api.entity.Entity\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport\n import org.apache.syncope.core.provisioning.api.pushpull.PushActions\n import org.quartz.JobExecutionException\n "}]}