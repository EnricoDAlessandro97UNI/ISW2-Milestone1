{"sha":"bf2dcae39cedec28ba2551834339ae96429a33c6","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmJmMmRjYWUzOWNlZGVjMjhiYTI1NTE4MzQzMzlhZTk2NDI5YTMzYzY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-20T16:01:13Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-20T16:01:13Z"},"message":"Follow-up CXF-6688","tree":{"sha":"28773f6d16d204590c33579e9ab4df9a348cad65","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/28773f6d16d204590c33579e9ab4df9a348cad65"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/bf2dcae39cedec28ba2551834339ae96429a33c6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bf2dcae39cedec28ba2551834339ae96429a33c6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bf2dcae39cedec28ba2551834339ae96429a33c6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bf2dcae39cedec28ba2551834339ae96429a33c6/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"986f2085d36a272737d852912456e2cb97356191","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/986f2085d36a272737d852912456e2cb97356191","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/986f2085d36a272737d852912456e2cb97356191"}],"stats":{"total":213,"additions":108,"deletions":105},"files":[{"sha":"92f9bf37adbd5bf650dd5e225d0ea600fab57f2a","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaSyncopeOperations.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf2dcae39cedec28ba2551834339ae96429a33c6/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf2dcae39cedec28ba2551834339ae96429a33c6/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaSyncopeOperations.java?ref=bf2dcae39cedec28ba2551834339ae96429a33c6","patch":"@@ -34,19 +34,19 @@ public <T extends AbstractSchemaTO> T read(final String schemaTypeString, final\n     }\n \n     public <T extends AbstractSchemaTO> List<T> list(final String schemaTypeString) {\n-        return schemaService.list(SchemaType.valueOf(schemaTypeString), new SchemaQuery.Builder().build());\n+        return schemaService.list(new SchemaQuery.Builder().type(SchemaType.valueOf(schemaTypeString)).build());\n     }\n \n     public <T extends AbstractSchemaTO> List<T> listPlain() {\n-        return schemaService.list(SchemaType.PLAIN, new SchemaQuery.Builder().build());\n+        return schemaService.list(new SchemaQuery.Builder().type(SchemaType.PLAIN).build());\n     }\n \n     public <T extends AbstractSchemaTO> List<T> listDerived() {\n-        return schemaService.list(SchemaType.DERIVED, new SchemaQuery.Builder().build());\n+        return schemaService.list(new SchemaQuery.Builder().type(SchemaType.DERIVED).build());\n     }\n \n     public <T extends AbstractSchemaTO> List<T> listVirtual() {\n-        return schemaService.list(SchemaType.VIRTUAL, new SchemaQuery.Builder().build());\n+        return schemaService.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n     }\n \n     public void delete(final String schemaTypeString, final String schemaName) {"},{"sha":"8937e71744a4ba20bb64bb320480ef83fba98642","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskSyncopeOperations.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf2dcae39cedec28ba2551834339ae96429a33c6/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf2dcae39cedec28ba2551834339ae96429a33c6/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java?ref=bf2dcae39cedec28ba2551834339ae96429a33c6","patch":"@@ -48,7 +48,7 @@ public void delete(final String taskId) {\n     }\n \n     public List<AbstractTaskTO> list(final String type) {\n-        return taskService.list(TaskType.valueOf(type), new TaskQuery()).getResult();\n+        return taskService.list(new TaskQuery.Builder().type(TaskType.valueOf(type)).build()).getResult();\n     }\n \n     public TaskExecTO readExecution(final String executionId) {"},{"sha":"10c2fa2ae6ea66524c6c076847e8d8e975e981f5","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/SchemaRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf2dcae39cedec28ba2551834339ae96429a33c6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf2dcae39cedec28ba2551834339ae96429a33c6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java?ref=bf2dcae39cedec28ba2551834339ae96429a33c6","patch":"@@ -64,10 +64,10 @@ public <T extends AbstractSchemaTO> List<T> getSchemas(final SchemaType schemaTy\n         try {\n             if (kind == null || kind.length == 0) {\n                 schemas.addAll(getService(SchemaService.class).\n-                        <T>list(schemaType, new SchemaQuery.Builder().build()));\n+                        <T>list(new SchemaQuery.Builder().type(schemaType).build()));\n             } else {\n                 schemas.addAll(getService(SchemaService.class).\n-                        <T>list(schemaType, new SchemaQuery.Builder().anyTypeClasses(kind).build()));\n+                        <T>list(new SchemaQuery.Builder().type(schemaType).anyTypeClasses(kind).build()));\n             }\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While getting all {} schemas for {}\", schemaType, kind, e);"},{"sha":"67813901c0ae0d4749ad77bb85ac6938407beeb1","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf2dcae39cedec28ba2551834339ae96429a33c6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf2dcae39cedec28ba2551834339ae96429a33c6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=bf2dcae39cedec28ba2551834339ae96429a33c6","patch":"@@ -63,7 +63,7 @@ public Set<String> getPushActionsClasses() {\n      */\n     public int count(final String kind) {\n         return getService(TaskService.class).\n-                list(TaskType.fromString(kind), new TaskQuery.Builder().page(1).size(1).build()).\n+                list(new TaskQuery.Builder().type(TaskType.valueOf(kind)).page(1).size(1).build()).\n                 getTotalCount();\n     }\n \n@@ -72,7 +72,7 @@ public <T extends AbstractTaskTO> List<T> list(\n             final Class<T> reference, final int page, final int size, final SortParam<String> sort) {\n \n         return (List<T>) getService(TaskService.class).\n-                list(getTaskType(reference), new TaskQuery.Builder().page(page).size(size).\n+                list(new TaskQuery.Builder().type(getTaskType(reference)).page(page).size(size).\n                         orderBy(toOrderBy(sort)).build()).\n                 getResult();\n     }"},{"sha":"db6a7e4a084b5ef919a2da9c2422e6655c768dc4","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SchemaResource.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf2dcae39cedec28ba2551834339ae96429a33c6/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf2dcae39cedec28ba2551834339ae96429a33c6/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java?ref=bf2dcae39cedec28ba2551834339ae96429a33c6","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n-import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n import org.apache.syncope.common.rest.api.service.AnyTypeService;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n@@ -48,13 +47,10 @@ public class SchemaResource extends AbstractBaseResource {\n \n     private final AnyTypeService anyTypeService;\n \n-    private final AnyTypeClassService anyTypeClassService;\n-\n     private final SchemaService schemaService;\n \n     public SchemaResource() {\n         anyTypeService = SyncopeEnduserSession.get().getService(AnyTypeService.class);\n-        anyTypeClassService = SyncopeEnduserSession.get().getService(AnyTypeClassService.class);\n         schemaService = SyncopeEnduserSession.get().getService(SchemaService.class);\n     }\n \n@@ -71,11 +67,14 @@ protected AbstractResource.ResourceResponse newResourceResponse(final IResource.\n             final AnyTypeTO anyTypeUserTO = anyTypeService.read(AnyTypeKind.USER.name());\n \n             final List<PlainSchemaTO> plainSchemas = schemaService.list(\n-                    SchemaType.PLAIN, new SchemaQuery.Builder().anyTypeClasses(anyTypeUserTO.getClasses()).build());\n+                    new SchemaQuery.Builder().type(SchemaType.PLAIN).\n+                    anyTypeClasses(anyTypeUserTO.getClasses()).build());\n             final List<DerSchemaTO> derSchemas = schemaService.list(\n-                    SchemaType.DERIVED, new SchemaQuery.Builder().anyTypeClasses(anyTypeUserTO.getClasses()).build());\n+                    new SchemaQuery.Builder().type(SchemaType.DERIVED).\n+                    anyTypeClasses(anyTypeUserTO.getClasses()).build());\n             final List<VirSchemaTO> virSchemas = schemaService.list(\n-                    SchemaType.VIRTUAL, new SchemaQuery.Builder().anyTypeClasses(anyTypeUserTO.getClasses()).build());\n+                    new SchemaQuery.Builder().type(SchemaType.VIRTUAL).\n+                    anyTypeClasses(anyTypeUserTO.getClasses()).build());\n \n             response.setWriteCallback(new AbstractResource.WriteCallback() {\n "},{"sha":"d17ecc7e2d8d3f7233163b861cc721b3f72fc92a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/TaskType.java","status":"modified","additions":5,"deletions":27,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf2dcae39cedec28ba2551834339ae96429a33c6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FTaskType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf2dcae39cedec28ba2551834339ae96429a33c6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FTaskType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FTaskType.java?ref=bf2dcae39cedec28ba2551834339ae96429a33c6","patch":"@@ -23,32 +23,10 @@\n @XmlEnum\n public enum TaskType {\n \n-    PROPAGATION(\"propagation\"),\n-    NOTIFICATION(\"notification\"),\n-    SCHEDULED(\"sched\"),\n-    SYNCHRONIZATION(\"sync\"),\n-    PUSH(\"push\");\n+    PROPAGATION,\n+    NOTIFICATION,\n+    SCHEDULED,\n+    SYNCHRONIZATION,\n+    PUSH;\n \n-    private final String name;\n-\n-    TaskType(final String name) {\n-        this.name = name;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return name;\n-    }\n-\n-    public static TaskType fromString(final String name) {\n-        if (name != null) {\n-            for (TaskType t : TaskType.values()) {\n-                if (t.name.equalsIgnoreCase(name)) {\n-                    return t;\n-                }\n-            }\n-        }\n-\n-        return null;\n-    }\n }"},{"sha":"8893c9cb8955f8e6add4f51fb08f39b09eaf16ff","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/SchemaQuery.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf2dcae39cedec28ba2551834339ae96429a33c6/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf2dcae39cedec28ba2551834339ae96429a33c6/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java?ref=bf2dcae39cedec28ba2551834339ae96429a33c6","patch":"@@ -22,8 +22,10 @@\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n+import javax.ws.rs.PathParam;\n import javax.ws.rs.QueryParam;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.types.SchemaType;\n \n public class SchemaQuery extends AbstractBaseBean {\n \n@@ -33,6 +35,11 @@ public static class Builder {\n \n         private final SchemaQuery instance = new SchemaQuery();\n \n+        public Builder type(final SchemaType type) {\n+            instance.setType(type);\n+            return this;\n+        }\n+\n         public Builder anyTypeClass(final String anyTypeClass) {\n             if (instance.getAnyTypeClasses() == null) {\n                 instance.setAnyTypeClasses(new ArrayList<String>());\n@@ -54,12 +61,26 @@ public Builder anyTypeClasses(final String... anyTypeClasses) {\n         }\n \n         public SchemaQuery build() {\n+            if (instance.type == null) {\n+                throw new IllegalArgumentException(\"type is required\");\n+            }\n             return instance;\n         }\n     }\n \n+    private SchemaType type;\n+\n     private List<String> anyTypeClasses;\n \n+    public SchemaType getType() {\n+        return type;\n+    }\n+\n+    @PathParam(\"type\")\n+    public void setType(final SchemaType type) {\n+        this.type = type;\n+    }\n+\n     public List<String> getAnyTypeClasses() {\n         return anyTypeClasses;\n     }"},{"sha":"523da5340c79a576d81540711bc9cce55f192e1e","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/TaskQuery.java","status":"modified","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf2dcae39cedec28ba2551834339ae96429a33c6/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf2dcae39cedec28ba2551834339ae96429a33c6/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java?ref=bf2dcae39cedec28ba2551834339ae96429a33c6","patch":"@@ -19,8 +19,10 @@\n package org.apache.syncope.common.rest.api.beans;\n \n import javax.validation.constraints.Min;\n+import javax.ws.rs.MatrixParam;\n import javax.ws.rs.QueryParam;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n public class TaskQuery extends AbstractQuery {\n@@ -34,6 +36,11 @@ protected TaskQuery newInstance() {\n             return new TaskQuery();\n         }\n \n+        public Builder type(final TaskType type) {\n+            getInstance().setType(type);\n+            return this;\n+        }\n+\n         public Builder resource(final String resource) {\n             getInstance().setResource(resource);\n             return this;\n@@ -49,14 +56,33 @@ public Builder anyTypeKey(final Long anyTypeKey) {\n             return this;\n         }\n \n+        @Override\n+        public TaskQuery build() {\n+            if (getInstance().type == null) {\n+                throw new IllegalArgumentException(\"type is required\");\n+            }\n+            return super.build();\n+        }\n+\n     }\n \n+    private TaskType type;\n+\n     private String resource;\n \n     private AnyTypeKind anyTypeKind;\n \n     private Long anyTypeKey;\n \n+    public TaskType getType() {\n+        return type;\n+    }\n+\n+    @MatrixParam(\"type\")\n+    public void setType(final TaskType type) {\n+        this.type = type;\n+    }\n+\n     public String getResource() {\n         return resource;\n     }"},{"sha":"bdb11eec66578112f727d91a0ee84d789370b744","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf2dcae39cedec28ba2551834339ae96429a33c6/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf2dcae39cedec28ba2551834339ae96429a33c6/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java?ref=bf2dcae39cedec28ba2551834339ae96429a33c6","patch":"@@ -56,18 +56,15 @@ <T extends AbstractSchemaTO> T read(\n             @NotNull @PathParam(\"type\") SchemaType type, @NotNull @PathParam(\"key\") String key);\n \n     /**\n-     * Returns a list of schemas matching type and the given query.\n+     * Returns a list of schemas matching the given query.\n      *\n      * @param <T> actual SchemaTO\n-     * @param type type for schemas to be listed\n      * @param query query conditions\n      * @return list of schemas with matching type, for the given anyTypeClass if provided\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractSchemaTO> List<T> list(\n-            @NotNull @PathParam(\"type\") SchemaType type,\n-            @BeanParam SchemaQuery query);\n+    <T extends AbstractSchemaTO> List<T> list(@BeanParam SchemaQuery query);\n \n     /**\n      * Creates a new schema."},{"sha":"5aacaae405889312d81b803c21c23ef1da9122cb","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf2dcae39cedec28ba2551834339ae96429a33c6/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf2dcae39cedec28ba2551834339ae96429a33c6/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=bf2dcae39cedec28ba2551834339ae96429a33c6","patch":"@@ -42,7 +42,6 @@\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n-import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n \n /**\n@@ -75,18 +74,15 @@ public interface TaskService extends JAXRSService {\n     TaskExecTO readExecution(@NotNull @PathParam(\"executionKey\") Long executionKey);\n \n     /**\n-     * Returns a paged list of existing tasks matching type and the given query.\n+     * Returns a paged list of existing tasks matching the given query.\n      *\n-     * @param type type of tasks to be listed\n      * @param query query conditions\n      * @param <T> type of taskTO\n      * @return paged list of existing tasks matching type and the given query\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractTaskTO> PagedResult<T> list(\n-            @NotNull @MatrixParam(\"type\") TaskType type,\n-            @BeanParam TaskQuery query);\n+    <T extends AbstractTaskTO> PagedResult<T> list(@BeanParam TaskQuery query);\n \n     /**\n      * Creates a new task."},{"sha":"810c520277cbd6f7d719480965b1cae6c0180994","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SchemaServiceImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf2dcae39cedec28ba2551834339ae96429a33c6/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf2dcae39cedec28ba2551834339ae96429a33c6/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java?ref=bf2dcae39cedec28ba2551834339ae96429a33c6","patch":"@@ -52,8 +52,8 @@ public void delete(final SchemaType schemaType, final String key) {\n     }\n \n     @Override\n-    public <T extends AbstractSchemaTO> List<T> list(final SchemaType schemaType, final SchemaQuery query) {\n-        return logic.list(schemaType, query.getAnyTypeClasses());\n+    public <T extends AbstractSchemaTO> List<T> list(final SchemaQuery query) {\n+        return logic.list(query.getType(), query.getAnyTypeClasses());\n     }\n \n     @Override"},{"sha":"17bceb8759a9b8842b4893e51dbbeb49523ec197","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf2dcae39cedec28ba2551834339ae96429a33c6/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf2dcae39cedec28ba2551834339ae96429a33c6/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=bf2dcae39cedec28ba2551834339ae96429a33c6","patch":"@@ -32,7 +32,6 @@\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n-import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n@@ -78,10 +77,10 @@ public TaskExecTO execute(final Long key, final boolean dryRun) {\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public <T extends AbstractTaskTO> PagedResult<T> list(final TaskType type, final TaskQuery query) {\n+    public <T extends AbstractTaskTO> PagedResult<T> list(final TaskQuery query) {\n         return (PagedResult<T>) buildPagedResult(\n                 logic.list(\n-                        type,\n+                        query.getType(),\n                         query.getResource(),\n                         query.getAnyTypeKind(),\n                         query.getAnyTypeKey(),\n@@ -91,7 +90,7 @@ public <T extends AbstractTaskTO> PagedResult<T> list(final TaskType type, final\n                 query.getPage(),\n                 query.getSize(),\n                 logic.count(\n-                        type,\n+                        query.getType(),\n                         query.getResource(),\n                         query.getAnyTypeKind(),\n                         query.getAnyTypeKey()));"},{"sha":"41f287a5d3a2a0046d45d615ac522a6cf3a9352e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf2dcae39cedec28ba2551834339ae96429a33c6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf2dcae39cedec28ba2551834339ae96429a33c6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java?ref=bf2dcae39cedec28ba2551834339ae96429a33c6","patch":"@@ -166,7 +166,7 @@ protected Map<Long, TaskExecTO> execProvisioningTasks(final TaskService taskServ\n \n     protected NotificationTaskTO findNotificationTaskBySender(final String sender) {\n         PagedResult<NotificationTaskTO> tasks =\n-                taskService.list(TaskType.NOTIFICATION, new TaskQuery.Builder().build());\n+                taskService.list(new TaskQuery.Builder().type(TaskType.NOTIFICATION).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n "},{"sha":"6221f4500c2609619c8bb83ca537531484447a2e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/DerSchemaITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf2dcae39cedec28ba2551834339ae96429a33c6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDerSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf2dcae39cedec28ba2551834339ae96429a33c6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDerSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDerSchemaITCase.java?ref=bf2dcae39cedec28ba2551834339ae96429a33c6","patch":"@@ -41,7 +41,7 @@ public class DerSchemaITCase extends AbstractITCase {\n \n     @Test\n     public void list() {\n-        List<DerSchemaTO> derSchemas = schemaService.list(SchemaType.DERIVED, new SchemaQuery.Builder().build());\n+        List<DerSchemaTO> derSchemas = schemaService.list(new SchemaQuery.Builder().type(SchemaType.DERIVED).build());\n         assertFalse(derSchemas.isEmpty());\n         for (DerSchemaTO derivedSchemaTO : derSchemas) {\n             assertNotNull(derivedSchemaTO);"},{"sha":"8d456ff68e304ceffdda53d6a14e26439f68b2bb","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/MultitenancyITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf2dcae39cedec28ba2551834339ae96429a33c6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf2dcae39cedec28ba2551834339ae96429a33c6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java?ref=bf2dcae39cedec28ba2551834339ae96429a33c6","patch":"@@ -104,7 +104,7 @@ public void masterOnly() {\n     @Test\n     public void readPlainSchemas() {\n         assertEquals(17, adminClient.getService(SchemaService.class).\n-                list(SchemaType.PLAIN, new SchemaQuery.Builder().build()).size());\n+                list(new SchemaQuery.Builder().type(SchemaType.PLAIN).build()).size());\n     }\n \n     @Test"},{"sha":"6a697b9698ece2f3a44d7c5301149d6941c9a513","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PlainSchemaITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf2dcae39cedec28ba2551834339ae96429a33c6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf2dcae39cedec28ba2551834339ae96429a33c6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java?ref=bf2dcae39cedec28ba2551834339ae96429a33c6","patch":"@@ -158,7 +158,7 @@ public void delete() {\n \n     @Test\n     public void list() {\n-        List<PlainSchemaTO> schemas = schemaService.list(SchemaType.PLAIN, new SchemaQuery.Builder().build());\n+        List<PlainSchemaTO> schemas = schemaService.list(new SchemaQuery.Builder().type(SchemaType.PLAIN).build());\n         assertFalse(schemas.isEmpty());\n         for (PlainSchemaTO schemaTO : schemas) {\n             assertNotNull(schemaTO);\n@@ -170,7 +170,7 @@ public void listByAnyTypeClass() {\n         final String clazz = anyTypeService.read(AnyTypeKind.USER.name()).getClasses().get(0);\n \n         List<PlainSchemaTO> userSchemas = schemaService.list(\n-                SchemaType.PLAIN, new SchemaQuery.Builder().anyTypeClass(clazz).build());\n+                new SchemaQuery.Builder().type(SchemaType.PLAIN).anyTypeClass(clazz).build());\n \n         assertTrue(CollectionUtils.exists(userSchemas, new Predicate<PlainSchemaTO>() {\n "},{"sha":"5b65496f44f76ee27cc0b69f381b38954ce70dc0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PropagationTaskITCase.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf2dcae39cedec28ba2551834339ae96429a33c6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf2dcae39cedec28ba2551834339ae96429a33c6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java?ref=bf2dcae39cedec28ba2551834339ae96429a33c6","patch":"@@ -43,8 +43,7 @@ public class PropagationTaskITCase extends AbstractTaskITCase {\n     @Test\n     public void paginatedList() {\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n-                TaskType.PROPAGATION,\n-                new TaskQuery.Builder().page(1).size(2).build());\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(2).build());\n         assertNotNull(tasks);\n         assertEquals(2, tasks.getResult().size());\n \n@@ -53,8 +52,7 @@ public void paginatedList() {\n         }\n \n         tasks = taskService.list(\n-                TaskType.PROPAGATION,\n-                new TaskQuery.Builder().page(2).size(2).build());\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(2).size(2).build());\n         assertNotNull(tasks);\n         assertEquals(2, tasks.getPage());\n         assertEquals(2, tasks.getResult().size());\n@@ -64,8 +62,7 @@ public void paginatedList() {\n         }\n \n         tasks = taskService.list(\n-                TaskType.PROPAGATION,\n-                new TaskQuery.Builder().page(1000).size(2).build());\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1000).size(2).build());\n         assertNotNull(tasks);\n         assertTrue(tasks.getResult().isEmpty());\n     }\n@@ -87,15 +84,15 @@ public void readExecution() {\n     @Test\n     public void bulkAction() {\n         PagedResult<PropagationTaskTO> before = taskService.list(\n-                TaskType.PROPAGATION, new TaskQuery.Builder().build());\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).build());\n \n         // create user with testdb resource\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"taskBulk@apache.org\");\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n         createUser(userTO);\n \n         List<PropagationTaskTO> after = new ArrayList<>(\n-                taskService.<PropagationTaskTO>list(TaskType.PROPAGATION, new TaskQuery.Builder().build()).\n+                taskService.<PropagationTaskTO>list(new TaskQuery.Builder().type(TaskType.PROPAGATION).build()).\n                 getResult());\n         after.removeAll(before.getResult());\n         assertFalse(after.isEmpty());\n@@ -109,7 +106,7 @@ public void bulkAction() {\n \n         taskService.bulk(bulkAction);\n \n-        assertFalse(taskService.list(TaskType.PROPAGATION, new TaskQuery.Builder().build()).getResult().\n+        assertFalse(taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).build()).getResult().\n                 containsAll(after));\n     }\n }"},{"sha":"1371d6940cd51c20741b2d8c316e8579fa5ebe4b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PushTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf2dcae39cedec28ba2551834339ae96429a33c6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf2dcae39cedec28ba2551834339ae96429a33c6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java?ref=bf2dcae39cedec28ba2551834339ae96429a33c6","patch":"@@ -80,7 +80,7 @@ public void read() {\n \n     @Test\n     public void list() {\n-        PagedResult<PushTaskTO> tasks = taskService.list(TaskType.PUSH, new TaskQuery.Builder().build());\n+        PagedResult<PushTaskTO> tasks = taskService.list(new TaskQuery.Builder().type(TaskType.PUSH).build());\n         assertFalse(tasks.getResult().isEmpty());\n         for (AbstractTaskTO task : tasks.getResult()) {\n             if (!(task instanceof PushTaskTO)) {"},{"sha":"884ff9abcc2e8532a4aad13d4537ac99248577b8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SchedTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf2dcae39cedec28ba2551834339ae96429a33c6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf2dcae39cedec28ba2551834339ae96429a33c6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java?ref=bf2dcae39cedec28ba2551834339ae96429a33c6","patch":"@@ -56,7 +56,7 @@ public void getJobClasses() {\n     @Test\n     public void list() {\n         PagedResult<SchedTaskTO> tasks =\n-                taskService.list(TaskType.SCHEDULED, new TaskQuery.Builder().build());\n+                taskService.list(new TaskQuery.Builder().type(TaskType.SCHEDULED).build());\n         assertFalse(tasks.getResult().isEmpty());\n         for (AbstractTaskTO task : tasks.getResult()) {\n             if (!(task instanceof SchedTaskTO) || task instanceof SyncTaskTO || task instanceof PushTaskTO) {"},{"sha":"75631e7a74092c9bb96c1c1fcb36d3b82228babc","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SyncTaskITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf2dcae39cedec28ba2551834339ae96429a33c6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf2dcae39cedec28ba2551834339ae96429a33c6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java?ref=bf2dcae39cedec28ba2551834339ae96429a33c6","patch":"@@ -97,7 +97,8 @@ public void getSyncActionsClasses() {\n \n     @Test\n     public void list() {\n-        PagedResult<SyncTaskTO> tasks = taskService.list(TaskType.SYNCHRONIZATION, new TaskQuery.Builder().build());\n+        PagedResult<SyncTaskTO> tasks = taskService.list(\n+                new TaskQuery.Builder().type(TaskType.SYNCHRONIZATION).build());\n         assertFalse(tasks.getResult().isEmpty());\n         for (AbstractTaskTO task : tasks.getResult()) {\n             if (!(task instanceof SyncTaskTO)) {"},{"sha":"54589c60c8df71c99be3d04d7cd459fef6aebdca","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":13,"deletions":24,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf2dcae39cedec28ba2551834339ae96429a33c6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf2dcae39cedec28ba2551834339ae96429a33c6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=bf2dcae39cedec28ba2551834339ae96429a33c6","patch":"@@ -150,8 +150,7 @@ public static UserTO getSampleTO(final String email) {\n     public void createUserWithNoPropagation() {\n         // get task list\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n-                TaskType.PROPAGATION,\n-                new TaskQuery.Builder().page(1).size(1).build());\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -166,8 +165,7 @@ public void createUserWithNoPropagation() {\n \n         // get the new task list\n         tasks = taskService.list(\n-                TaskType.PROPAGATION,\n-                new TaskQuery.Builder().page(1).size(1).build());\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -356,8 +354,7 @@ public void createWithException() {\n     public void create() {\n         // get task list\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n-                TaskType.PROPAGATION,\n-                new TaskQuery.Builder().page(1).size(1).build());\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -397,9 +394,7 @@ public void create() {\n         assertNotNull(newUserTO.getCreationDate());\n \n         // get the new task list\n-        tasks = taskService.list(\n-                TaskType.PROPAGATION,\n-                new TaskQuery.Builder().page(1).size(1).build());\n+        tasks = taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -693,8 +688,8 @@ public void update() {\n \n     @Test\n     public void updatePasswordOnly() {\n-        int beforeTasks = taskService.list(TaskType.PROPAGATION,\n-                new TaskQuery.Builder().page(1).size(1).build()).getTotalCount();\n+        int beforeTasks = taskService.list(\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build()).getTotalCount();\n         assertFalse(beforeTasks <= 0);\n \n         UserTO userTO = getUniqueSampleTO(\"pwdonly@t.com\");\n@@ -711,8 +706,8 @@ public void updatePasswordOnly() {\n         // check for changePwdDate\n         assertNotNull(userTO.getChangePwdDate());\n \n-        int afterTasks = taskService.list(TaskType.PROPAGATION,\n-                new TaskQuery.Builder().page(1).size(1).build()).getTotalCount();\n+        int afterTasks = taskService.list(\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build()).getTotalCount();\n         assertFalse(beforeTasks <= 0);\n \n         assertTrue(beforeTasks < afterTasks);\n@@ -723,8 +718,7 @@ public void updatePasswordOnly() {\n     public void verifyTaskRegistration() {\n         // get task list\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n-                TaskType.PROPAGATION,\n-                new TaskQuery.Builder().page(1).size(1).build());\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -743,9 +737,7 @@ public void verifyTaskRegistration() {\n         assertNotNull(userTO);\n \n         // get the new task list\n-        tasks = taskService.list(\n-                TaskType.PROPAGATION,\n-                new TaskQuery.Builder().page(1).size(1).build());\n+        tasks = taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -769,9 +761,7 @@ public void verifyTaskRegistration() {\n         assertNotNull(userTO);\n \n         // get the new task list\n-        tasks = taskService.list(\n-                TaskType.PROPAGATION,\n-                new TaskQuery.Builder().page(1).size(1).build());\n+        tasks = taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n \n         maxKey = newMaxKey;\n         newMaxKey = tasks.getResult().iterator().next().getKey();\n@@ -791,9 +781,7 @@ public void verifyTaskRegistration() {\n         userService.delete(userTO.getKey());\n \n         // get the new task list\n-        tasks = taskService.list(\n-                TaskType.PROPAGATION,\n-                new TaskQuery.Builder().page(1).size(1).build());\n+        tasks = taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n \n         maxKey = newMaxKey;\n         newMaxKey = tasks.getResult().iterator().next().getKey();\n@@ -1529,6 +1517,7 @@ public void isseSYNCOPE136AES() {\n             ProvisioningResult<UserTO> result = updateUser(userPatch);\n             assertNotNull(result);\n             userTO = result.getAny();\n+            assertNotNull(userTO);\n \n             // 5. verify that propagation was successful\n             List<PropagationStatus> props = result.getPropagationStatuses();"},{"sha":"f2515255815aafa19102e59b38d60d3148118e10","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/VirSchemaITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf2dcae39cedec28ba2551834339ae96429a33c6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf2dcae39cedec28ba2551834339ae96429a33c6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java?ref=bf2dcae39cedec28ba2551834339ae96429a33c6","patch":"@@ -45,7 +45,7 @@ public class VirSchemaITCase extends AbstractITCase {\n \n     @Test\n     public void list() {\n-        List<VirSchemaTO> vSchemas = schemaService.list(SchemaType.VIRTUAL, new SchemaQuery.Builder().build());\n+        List<VirSchemaTO> vSchemas = schemaService.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n         assertFalse(vSchemas.isEmpty());\n         for (VirSchemaTO vSchemaTO : vSchemas) {\n             assertNotNull(vSchemaTO);\n@@ -95,14 +95,14 @@ public void crud() {\n     public void anonymous() {\n         SchemaService unauthenticated = clientFactory.create().getService(SchemaService.class);\n         try {\n-            unauthenticated.list(SchemaType.VIRTUAL, new SchemaQuery.Builder().build());\n+            unauthenticated.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n             fail();\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n \n         SchemaService anonymous = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).getService(SchemaService.class);\n-        assertFalse(anonymous.list(SchemaType.VIRTUAL, new SchemaQuery.Builder().build()).isEmpty());\n+        assertFalse(anonymous.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build()).isEmpty());\n     }\n \n     @Test"},{"sha":"2c764685e18ef9336640f912d2d121f2fbce099f","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf2dcae39cedec28ba2551834339ae96429a33c6/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf2dcae39cedec28ba2551834339ae96429a33c6/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=bf2dcae39cedec28ba2551834339ae96429a33c6","patch":"@@ -326,7 +326,7 @@ under the License.\n     <connid.ldap.version>1.5.0-SNAPSHOT</connid.ldap.version>\n     <connid.ad.version>1.3.0-SNAPSHOT</connid.ad.version>\n \n-    <cxf.version>3.1.4</cxf.version>\n+    <cxf.version>3.1.5-SNAPSHOT</cxf.version>\n \n     <camel.version>2.16.0</camel.version>\t\n "}]}