{"sha":"f2648c51c3f6168095fb67007618e8eff59f38c7","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmYyNjQ4YzUxYzNmNjE2ODA5NWZiNjcwMDc2MThlOGVmZjU5ZjM4Yzc=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-12-04T11:29:09Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-12-04T11:29:09Z"},"message":"Fixes SYNCOPE-455 on 1.1.X\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_1_X@1547766 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ad9b61d58a943fe6ebd0b15929216df0e4a8e853","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ad9b61d58a943fe6ebd0b15929216df0e4a8e853"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f2648c51c3f6168095fb67007618e8eff59f38c7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f2648c51c3f6168095fb67007618e8eff59f38c7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f2648c51c3f6168095fb67007618e8eff59f38c7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f2648c51c3f6168095fb67007618e8eff59f38c7/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"ef13ac604ad5adb55a36b4e8da959598e5bd21ff","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ef13ac604ad5adb55a36b4e8da959598e5bd21ff","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ef13ac604ad5adb55a36b4e8da959598e5bd21ff"}],"stats":{"total":118,"additions":107,"deletions":11},"files":[{"sha":"89fadf7d7366de1bef70566b70e56a94361b0b02","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/PropagationManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2648c51c3f6168095fb67007618e8eff59f38c7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2648c51c3f6168095fb67007618e8eff59f38c7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java?ref=f2648c51c3f6168095fb67007618e8eff59f38c7","patch":"@@ -416,7 +416,7 @@ public List<PropagationTask> getRoleDeleteTaskIds(final Long roleId)\n     }\n \n     /**\n-     * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for\n+     * Perform delete on each resource associated to the role. It is possible to ask for a mandatory provisioning for\n      * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n      * the creation fails onto a mandatory resource.\n      *"},{"sha":"a856119d051d2751b82471b82a63ff579cb93b65","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RoleController.java","status":"modified","additions":26,"deletions":10,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2648c51c3f6168095fb67007618e8eff59f38c7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2648c51c3f6168095fb67007618e8eff59f38c7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=f2648c51c3f6168095fb67007618e8eff59f38c7","patch":"@@ -173,7 +173,7 @@ public List<RoleTO> children(@PathVariable(\"roleId\") final Long roleId) {\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/search\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public List<RoleTO> search(@RequestBody final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n@@ -182,7 +182,7 @@ public List<RoleTO> search(@RequestBody final NodeCond searchCondition)\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/search/{page}/{size}\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public List<RoleTO> search(@RequestBody final NodeCond searchCondition, @PathVariable(\"page\") final int page,\n             @PathVariable(\"size\") final int size)\n             throws InvalidSearchConditionException {\n@@ -206,7 +206,7 @@ public List<RoleTO> search(@RequestBody final NodeCond searchCondition, @PathVar\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/search/count\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public ModelAndView searchCount(@RequestBody final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n@@ -303,15 +303,31 @@ public RoleTO update(@RequestBody final RoleMod roleMod) {\n     @PreAuthorize(\"hasRole('ROLE_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/delete/{roleId}\")\n     public RoleTO delete(@PathVariable(\"roleId\") final Long roleId) {\n-        // Generate propagation tasks for deleting users from role resources, if they are on those resources only\n-        // because of the reason being deleted (see SYNCOPE-357)\n-        List<PropagationTask> tasks = new ArrayList<PropagationTask>();\n-        for (WorkflowResult<Long> wfResult : binder.getUsersOnResourcesOnlyBecauseOfRole(roleId)) {\n-            tasks.addAll(propagationManager.getUserDeleteTaskIds(wfResult));\n+        final List<SyncopeRole> toBeDeprovisioned = new ArrayList<SyncopeRole>();\n+\n+        final SyncopeRole syncopeRole = roleDAO.find(roleId);\n+        \n+        if (syncopeRole != null) {\n+            toBeDeprovisioned.add(syncopeRole);\n+\n+            final List<SyncopeRole> descendants = roleDAO.findDescendants(toBeDeprovisioned.get(0));\n+            if (descendants != null) {\n+                toBeDeprovisioned.addAll(descendants);\n+            }\n         }\n \n-        // Generate propagation tasks for deleting this role from resources\n-        tasks.addAll(propagationManager.getRoleDeleteTaskIds(roleId));\n+        final List<PropagationTask> tasks = new ArrayList<PropagationTask>();\n+\n+        for (SyncopeRole role : toBeDeprovisioned) {\n+            // Generate propagation tasks for deleting users from role resources, if they are on those resources only\n+            // because of the reason being deleted (see SYNCOPE-357)\n+            for (WorkflowResult<Long> wfResult : binder.getUsersOnResourcesOnlyBecauseOfRole(role.getId())) {\n+                tasks.addAll(propagationManager.getUserDeleteTaskIds(wfResult));\n+            }\n+\n+            // Generate propagation tasks for deleting this role from resources\n+            tasks.addAll(propagationManager.getRoleDeleteTaskIds(role.getId()));\n+        }\n \n         RoleTO roleTO = new RoleTO();\n         roleTO.setId(roleId);"},{"sha":"41e08d8be456529c42fd7b199f7ec72a1b0dad65","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2648c51c3f6168095fb67007618e8eff59f38c7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2648c51c3f6168095fb67007618e8eff59f38c7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=f2648c51c3f6168095fb67007618e8eff59f38c7","patch":"@@ -27,17 +27,24 @@\n \n import java.security.AccessControlException;\n import java.util.ArrayList;\n+import java.util.Hashtable;\n import java.util.List;\n+import java.util.Map;\n+import javax.naming.Context;\n+import javax.naming.directory.InitialDirContext;\n \n import org.apache.syncope.common.mod.RoleMod;\n import org.apache.syncope.common.services.RoleService;\n import org.apache.syncope.common.to.ConnObjectTO;\n+import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.identityconnectors.framework.common.objects.Name;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -370,4 +377,77 @@ public void issueSYNCOPE228() {\n         assertNotNull(roleTO);\n         assertTrue(roleTO.getEntitlements().isEmpty());\n     }\n+\n+    @Test\n+    public void issueSYNCOPE455() {\n+        final String parentName = \"issueSYNCOPE455-PRole\";\n+        final String childName = \"issueSYNCOPE455-CRole\";\n+\n+        // 1. create parent role\n+        RoleTO parent = buildBasicRoleTO(parentName);\n+        parent.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        parent = createRole(roleService, parent);\n+        assertTrue(parent.getResources().contains(RESOURCE_NAME_LDAP));\n+\n+        final ConnObjectTO parentRemoteObject =\n+                readConnectorObject(RESOURCE_NAME_LDAP, parent.getId(), AttributableType.ROLE);\n+        assertNotNull(parentRemoteObject);\n+        assertNotNull(getLdapRemoteObject(parentRemoteObject.getAttributeMap().get(Name.NAME).getValues().get(0)));\n+\n+        // 2. create child role\n+        RoleTO child = buildBasicRoleTO(childName);\n+        child.getResources().add(RESOURCE_NAME_LDAP);\n+        child.setParent(parent.getId());\n+\n+        child = createRole(roleService, child);\n+        assertTrue(child.getResources().contains(RESOURCE_NAME_LDAP));\n+\n+        final ConnObjectTO childRemoteObject =\n+                readConnectorObject(RESOURCE_NAME_LDAP, child.getId(), AttributableType.ROLE);\n+        assertNotNull(childRemoteObject);\n+        assertNotNull(getLdapRemoteObject(childRemoteObject.getAttributeMap().get(Name.NAME).getValues().get(0)));\n+\n+        // 3. remove parent role\n+        roleService.delete(parent.getId());\n+\n+        // 4. asserts for issue 455\n+        try {\n+            roleService.read(parent.getId());\n+            fail();\n+        } catch (SyncopeClientCompositeErrorException scce) {\n+            // ignore\n+        }\n+\n+        try {\n+            roleService.read(child.getId());\n+            fail();\n+        } catch (SyncopeClientCompositeErrorException scce) {\n+            // ignore\n+        }\n+\n+        assertNull(getLdapRemoteObject(parentRemoteObject.getAttributeMap().get(Name.NAME).getValues().get(0)));\n+        assertNull(getLdapRemoteObject(childRemoteObject.getAttributeMap().get(Name.NAME).getValues().get(0)));\n+    }\n+\n+    private Object getLdapRemoteObject(final String name) {\n+        ResourceTO ldapRes = resourceService.read(RESOURCE_NAME_LDAP);\n+        final Map<String, ConnConfProperty> ldapConnConf =\n+                connectorService.read(ldapRes.getConnectorId()).getConfigurationMap();\n+\n+        Hashtable env = new Hashtable();\n+        env.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n+        env.put(Context.PROVIDER_URL, \"ldap://\" + ldapConnConf.get(\"host\").getValues().get(0)\n+                + \":\" + ldapConnConf.get(\"port\").getValues().get(0) + \"/\");\n+        env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n+        env.put(Context.SECURITY_PRINCIPAL, ldapConnConf.get(\"principal\").getValues().get(0));\n+        env.put(Context.SECURITY_CREDENTIALS, ldapConnConf.get(\"credentials\").getValues().get(0));\n+\n+        try {\n+            final InitialDirContext ctx = new InitialDirContext(env);\n+            return ctx.lookup(name);\n+        } catch (Exception e) {\n+            return null;\n+        }\n+    }\n }"}]}