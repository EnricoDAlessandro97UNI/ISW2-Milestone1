{"sha":"535e958a29f42e3d7a7e3ff956001e44a83210d2","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjUzNWU5NThhMjlmNDJlM2Q3YTdlM2ZmOTU2MDAxZTQ0YTgzMjEwZDI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-07-16T09:57:04Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-07-16T09:57:14Z"},"message":"Use only java.util.Base64","tree":{"sha":"172e9d3a4fd0428941ba50c0bc2669a2543c30d2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/172e9d3a4fd0428941ba50c0bc2669a2543c30d2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/535e958a29f42e3d7a7e3ff956001e44a83210d2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/535e958a29f42e3d7a7e3ff956001e44a83210d2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/535e958a29f42e3d7a7e3ff956001e44a83210d2","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/535e958a29f42e3d7a7e3ff956001e44a83210d2/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"6fc42652b2bd0844e9fbd4410143c746c6c038b1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6fc42652b2bd0844e9fbd4410143c746c6c038b1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6fc42652b2bd0844e9fbd4410143c746c6c038b1"}],"stats":{"total":26,"additions":14,"deletions":12},"files":[{"sha":"5f3fcc1af159498aa47e64406395364f17180aaa","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/535e958a29f42e3d7a7e3ff956001e44a83210d2/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/535e958a29f42e3d7a7e3ff956001e44a83210d2/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=535e958a29f42e3d7a7e3ff956001e44a83210d2","patch":"@@ -20,6 +20,7 @@\n \n import java.text.ParseException;\n import java.util.ArrayList;\n+import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n@@ -98,7 +99,6 @@\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n-import org.identityconnectors.common.Base64;\n import org.identityconnectors.framework.common.objects.Name;\n \n @Component\n@@ -784,7 +784,7 @@ public void setIntValues(final Item mapItem, final Attribute attr, final AnyTO a\n                         AttrSchemaType schemaType = schema == null ? AttrSchemaType.String : schema.getType();\n                         if (value != null) {\n                             if (schemaType == AttrSchemaType.Binary) {\n-                                attrTO.getValues().add(Base64.encode((byte[]) value));\n+                                attrTO.getValues().add(Base64.getEncoder().encodeToString((byte[]) value));\n                             } else {\n                                 attrTO.getValues().add(value.toString());\n                             }"},{"sha":"26b1156e159956f52dcd2f620d288685d5ff2adf","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/535e958a29f42e3d7a7e3ff956001e44a83210d2/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/535e958a29f42e3d7a7e3ff956001e44a83210d2/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java?ref=535e958a29f42e3d7a7e3ff956001e44a83210d2","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.provisioning.java.utils;\n \n import java.util.ArrayList;\n+import java.util.Base64;\n import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n@@ -47,7 +48,6 @@\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.utils.policy.InvalidPasswordRuleConf;\n-import org.identityconnectors.common.Base64;\n import org.identityconnectors.common.security.GuardedByteArray;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.common.security.SecurityUtil;\n@@ -134,7 +134,7 @@ public static ConnObjectTO getConnObjectTO(final Set<Attribute> attrs) {\n                         if (value instanceof GuardedString || value instanceof GuardedByteArray) {\n                             attrTO.getValues().add(getPassword(value));\n                         } else if (value instanceof byte[]) {\n-                            attrTO.getValues().add(Base64.encode((byte[]) value));\n+                            attrTO.getValues().add(Base64.getEncoder().encodeToString((byte[]) value));\n                         } else if (value != null) {\n                             attrTO.getValues().add(value.toString());\n                         }"},{"sha":"8bdedf96ade06faa21d99e41c4712ba6db90c5e3","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/jws/AccessTokenJwsSignatureProvider.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/535e958a29f42e3d7a7e3ff956001e44a83210d2/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2Fjws%2FAccessTokenJwsSignatureProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/535e958a29f42e3d7a7e3ff956001e44a83210d2/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2Fjws%2FAccessTokenJwsSignatureProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2Fjws%2FAccessTokenJwsSignatureProvider.java?ref=535e958a29f42e3d7a7e3ff956001e44a83210d2","patch":"@@ -20,6 +20,7 @@\n \n import java.security.KeyFactory;\n import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.Base64;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm;\n import org.apache.cxf.rs.security.jose.jws.HmacJwsSignatureProvider;\n@@ -28,7 +29,6 @@\n import org.apache.cxf.rs.security.jose.jws.JwsSignatureProvider;\n import org.apache.cxf.rs.security.jose.jws.PrivateKeyJwsSignatureProvider;\n import org.springframework.beans.factory.InitializingBean;\n-import org.springframework.security.crypto.codec.Base64;\n \n public class AccessTokenJwsSignatureProvider implements JwsSignatureProvider, InitializingBean {\n \n@@ -63,7 +63,7 @@ public void afterPropertiesSet() throws Exception {\n \n             KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n             PKCS8EncodedKeySpec keySpecPKCS8 = new PKCS8EncodedKeySpec(\n-                    Base64.decode(StringUtils.substringBefore(jwsKey, \":\").getBytes()));\n+                    Base64.getDecoder().decode(StringUtils.substringBefore(jwsKey, \":\").getBytes()));\n             delegate = new PrivateKeyJwsSignatureProvider(kf.generatePrivate(keySpecPKCS8), jwsAlgorithm);\n         } else {\n             if (jwsKey == null) {"},{"sha":"0a6f6b952c198696debbf39ab4cb0c28c853ede8","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/jws/AccessTokenJwsSignatureVerifier.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/535e958a29f42e3d7a7e3ff956001e44a83210d2/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2Fjws%2FAccessTokenJwsSignatureVerifier.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/535e958a29f42e3d7a7e3ff956001e44a83210d2/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2Fjws%2FAccessTokenJwsSignatureVerifier.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2Fjws%2FAccessTokenJwsSignatureVerifier.java?ref=535e958a29f42e3d7a7e3ff956001e44a83210d2","patch":"@@ -20,6 +20,7 @@\n \n import java.security.KeyFactory;\n import java.security.spec.X509EncodedKeySpec;\n+import java.util.Base64;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm;\n import org.apache.cxf.rs.security.jose.jws.HmacJwsSignatureVerifier;\n@@ -28,7 +29,6 @@\n import org.apache.cxf.rs.security.jose.jws.JwsVerificationSignature;\n import org.apache.cxf.rs.security.jose.jws.PublicKeyJwsSignatureVerifier;\n import org.springframework.beans.factory.InitializingBean;\n-import org.springframework.security.crypto.codec.Base64;\n \n public class AccessTokenJwsSignatureVerifier implements JwsSignatureVerifier, InitializingBean {\n \n@@ -63,7 +63,7 @@ public void afterPropertiesSet() throws Exception {\n \n             KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n             X509EncodedKeySpec keySpecX509 = new X509EncodedKeySpec(\n-                    Base64.decode(StringUtils.substringAfter(jwsKey, \":\").getBytes()));\n+                    Base64.getDecoder().decode(StringUtils.substringAfter(jwsKey, \":\").getBytes()));\n             delegate = new PublicKeyJwsSignatureVerifier(kf.generatePublic(keySpecX509), jwsAlgorithm);\n         } else {\n             if (jwsKey == null) {"},{"sha":"02ba14284b12c1685b8a893dccd517b222ee37ae","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SCIMConfManager.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/535e958a29f42e3d7a7e3ff956001e44a83210d2/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMConfManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/535e958a29f42e3d7a7e3ff956001e44a83210d2/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMConfManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMConfManager.java?ref=535e958a29f42e3d7a7e3ff956001e44a83210d2","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.logic.scim;\n \n+import java.util.Base64;\n import java.util.Date;\n import javax.ws.rs.core.MediaType;\n import org.apache.syncope.common.lib.scim.SCIMConf;\n@@ -31,7 +32,6 @@\n import org.apache.syncope.core.logic.SchemaLogic;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n-import org.identityconnectors.common.Base64;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -61,7 +61,8 @@ public SCIMConf get() {\n         SCIMConf conf = null;\n         if (confTO != null) {\n             try {\n-                conf = POJOHelper.deserialize(new String(Base64.decode(confTO.getValues().get(0))), SCIMConf.class);\n+                conf = POJOHelper.deserialize(\n+                        new String(Base64.getDecoder().decode(confTO.getValues().get(0))), SCIMConf.class);\n             } catch (Exception e) {\n                 LOG.error(\"Could not deserialize, reverting to default\", e);\n             }\n@@ -89,7 +90,8 @@ public void set(final SCIMConf conf) {\n         conf.getGeneralConf().setLastChangeDate(new Date());\n \n         configurationLogic.set(new AttrTO.Builder().\n-                schema(SCIMConf.KEY).value(Base64.encode(POJOHelper.serialize(conf).getBytes())).build());\n+                schema(SCIMConf.KEY).\n+                value(Base64.getEncoder().encodeToString(POJOHelper.serialize(conf).getBytes())).\n+                build());\n     }\n-\n }"}]}