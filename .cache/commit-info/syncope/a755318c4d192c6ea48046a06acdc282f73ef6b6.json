{"sha":"a755318c4d192c6ea48046a06acdc282f73ef6b6","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE3NTUzMThjNGQxOTJjNmVhNDgwNDZhMDZhY2RjMjgyZjczZWY2YjY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-07-02T15:59:26Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-07-02T15:59:26Z"},"message":"[SYNCOPE-1455] Adding Route statistics to Console","tree":{"sha":"c6fb6c2725fd3010a2ecce9c3593ae417690bb9c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c6fb6c2725fd3010a2ecce9c3593ae417690bb9c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a755318c4d192c6ea48046a06acdc282f73ef6b6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a755318c4d192c6ea48046a06acdc282f73ef6b6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a755318c4d192c6ea48046a06acdc282f73ef6b6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a755318c4d192c6ea48046a06acdc282f73ef6b6/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"43847ba32e82ee310e51da3b81e763210e875720","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/43847ba32e82ee310e51da3b81e763210e875720","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/43847ba32e82ee310e51da3b81e763210e875720"}],"stats":{"total":468,"additions":421,"deletions":47},"files":[{"sha":"45f23a28201163ce71936274378d860a53b09db3","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/pages/SRA.java","status":"modified","additions":9,"deletions":11,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a755318c4d192c6ea48046a06acdc282f73ef6b6/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a755318c4d192c6ea48046a06acdc282f73ef6b6/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA.java?ref=a755318c4d192c6ea48046a06acdc282f73ef6b6","patch":"@@ -25,20 +25,18 @@\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.annotations.AMPage;\n import org.apache.syncope.client.console.panels.SRARouteDirectoryPanel;\n+import org.apache.syncope.client.console.panels.SRAStatisticsPanel;\n import org.apache.syncope.client.console.rest.SRARouteRestClient;\n import org.apache.syncope.client.ui.commons.Constants;\n-import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n import org.apache.wicket.extensions.markup.html.tabs.ITab;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.panel.Panel;\n-import org.apache.wicket.model.Model;\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n@@ -57,35 +55,36 @@ public SRA(final PageParameters parameters) {\n         body.add(BookmarkablePageLinkBuilder.build(\"dashboard\", \"dashboardBr\", Dashboard.class));\n         body.setOutputMarkupId(true);\n \n+        List<NetworkService> instances = serviceOps.list(NetworkService.Type.SRA);\n+\n         AjaxLink<?> push = new AjaxLink<>(\"push\") {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n                 try {\n                     SRARouteRestClient.push();\n                     SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n-                    target.add(body);\n                 } catch (Exception e) {\n                     LOG.error(\"While pushing to SRA\", e);\n                     SyncopeConsoleSession.get().onException(e);\n                 }\n                 ((BasePage) getPageReference().getPage()).getNotificationPanel().refresh(target);\n             }\n         };\n-        push.setEnabled(!serviceOps.list(NetworkService.Type.SRA).isEmpty()\n-                && SyncopeConsoleSession.get().owns(AMEntitlement.SRA_ROUTE_PUSH, SyncopeConstants.ROOT_REALM));\n+        push.setEnabled(!instances.isEmpty() && SyncopeConsoleSession.get().owns(AMEntitlement.SRA_ROUTE_PUSH));\n         body.add(push);\n \n         WebMarkupContainer content = new WebMarkupContainer(\"content\");\n         content.setOutputMarkupId(true);\n-        AjaxBootstrapTabbedPanel<ITab> tabbedPanel = new AjaxBootstrapTabbedPanel<>(\"tabbedPanel\", buildTabList());\n+        AjaxBootstrapTabbedPanel<ITab> tabbedPanel =\n+                new AjaxBootstrapTabbedPanel<>(\"tabbedPanel\", buildTabList(instances));\n         content.add(tabbedPanel);\n \n         body.add(content);\n     }\n \n-    private List<ITab> buildTabList() {\n-        List<ITab> tabs = new ArrayList<>(2);\n+    private List<ITab> buildTabList(final List<NetworkService> instances) {\n+        List<ITab> tabs = new ArrayList<>();\n \n         tabs.add(new AbstractTab(new ResourceModel(\"routes\")) {\n \n@@ -97,15 +96,14 @@ public Panel getPanel(final String panelId) {\n             }\n         });\n \n-        List<NetworkService> instances = serviceOps.list(NetworkService.Type.SRA);\n         if (!instances.isEmpty()) {\n             tabs.add(new AbstractTab(new ResourceModel(\"metrics\")) {\n \n                 private static final long serialVersionUID = 5211692813425391144L;\n \n                 @Override\n                 public Panel getPanel(final String panelId) {\n-                    return new AjaxTextFieldPanel(panelId, panelId, Model.of(instances.get(0).getAddress()));\n+                    return new SRAStatisticsPanel(panelId, instances, getPageReference());\n                 }\n             });\n         }"},{"sha":"6287b1993c6194c8f9dd4ece4ea1040dff1dbe52","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/pages/WA.java","status":"modified","additions":9,"deletions":11,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a755318c4d192c6ea48046a06acdc282f73ef6b6/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a755318c4d192c6ea48046a06acdc282f73ef6b6/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA.java?ref=a755318c4d192c6ea48046a06acdc282f73ef6b6","patch":"@@ -74,7 +74,7 @@ public WA(final PageParameters parameters) {\n         body.add(BookmarkablePageLinkBuilder.build(\"dashboard\", \"dashboardBr\", Dashboard.class));\n         body.setOutputMarkupId(true);\n \n-        List<NetworkService> waInstances = serviceOps.list(NetworkService.Type.WA);\n+        List<NetworkService> instances = serviceOps.list(NetworkService.Type.WA);\n \n         AjaxLink<?> push = new AjaxLink<>(\"push\") {\n \n@@ -83,28 +83,26 @@ public void onClick(final AjaxRequestTarget target) {\n                 try {\n                     WAConfigRestClient.push();\n                     SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n-                    target.add(body);\n                 } catch (Exception e) {\n                     LOG.error(\"While pushing to WA\", e);\n                     SyncopeConsoleSession.get().onException(e);\n                 }\n                 ((BaseWebPage) getPageReference().getPage()).getNotificationPanel().refresh(target);\n             }\n         };\n-        push.setEnabled(!waInstances.isEmpty()\n-                && SyncopeConsoleSession.get().owns(AMEntitlement.WA_CONFIG_PUSH));\n+        push.setEnabled(!instances.isEmpty() && SyncopeConsoleSession.get().owns(AMEntitlement.WA_CONFIG_PUSH));\n         body.add(push);\n \n         WebMarkupContainer content = new WebMarkupContainer(\"content\");\n         content.setOutputMarkupId(true);\n         AjaxBootstrapTabbedPanel<ITab> tabbedPanel =\n-                new AjaxBootstrapTabbedPanel<>(\"tabbedPanel\", buildTabList(waInstances));\n+                new AjaxBootstrapTabbedPanel<>(\"tabbedPanel\", buildTabList(instances));\n         content.add(tabbedPanel);\n \n         body.add(content);\n \n-        if (!waInstances.isEmpty()) {\n-            String actuatorEndpoint = waInstances.get(0).getAddress() + \"/actuator/env\";\n+        if (!instances.isEmpty()) {\n+            String actuatorEndpoint = instances.get(0).getAddress() + \"actuator/env\";\n             try {\n                 Response response = WebClient.create(\n                         actuatorEndpoint,\n@@ -134,8 +132,8 @@ public void onClick(final AjaxRequestTarget target) {\n         }\n     }\n \n-    private List<ITab> buildTabList(final List<NetworkService> waInstances) {\n-        List<ITab> tabs = new ArrayList<>(0);\n+    private List<ITab> buildTabList(final List<NetworkService> instances) {\n+        List<ITab> tabs = new ArrayList<>();\n \n         if (SyncopeConsoleSession.get().owns(AMEntitlement.AUTH_MODULE_LIST)) {\n             tabs.add(new AbstractTab(new ResourceModel(\"authModules\")) {\n@@ -205,14 +203,14 @@ public Panel getPanel(final String panelId) {\n             });\n         }\n \n-        if (!waInstances.isEmpty() && SyncopeConsoleSession.get().owns(AMEntitlement.WA_SESSION_LIST)) {\n+        if (!instances.isEmpty() && SyncopeConsoleSession.get().owns(AMEntitlement.WA_SESSION_LIST)) {\n             tabs.add(new AbstractTab(new ResourceModel(\"sessions\")) {\n \n                 private static final long serialVersionUID = 5211692813425391144L;\n \n                 @Override\n                 public Panel getPanel(final String panelId) {\n-                    return new WASessionPanel(panelId, waInstances, getPageReference());\n+                    return new WASessionPanel(panelId, instances, getPageReference());\n                 }\n             });\n         }"},{"sha":"5c6e2b7ec16621b8597e4b49907f8aa34bd6f0a8","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/SRAStatisticsPanel.java","status":"added","additions":151,"deletions":0,"changes":151,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a755318c4d192c6ea48046a06acdc282f73ef6b6/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRAStatisticsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a755318c4d192c6ea48046a06acdc282f73ef6b6/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRAStatisticsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRAStatisticsPanel.java?ref=a755318c4d192c6ea48046a06acdc282f73ef6b6","patch":"@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import de.agilecoders.wicket.core.markup.html.bootstrap.button.Buttons;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.client.console.rest.SRARouteRestClient;\n+import org.apache.syncope.client.console.rest.SRAStatistics;\n+import org.apache.syncope.client.console.rest.SRAStatisticsRestClient;\n+import org.apache.syncope.client.console.widgets.NumberWidget;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n+import org.apache.syncope.common.lib.to.SRARouteTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.markup.ComponentTag;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.Model;\n+\n+public class SRAStatisticsPanel extends Panel {\n+\n+    private static final long serialVersionUID = 23816535591360L;\n+\n+    private static final List<Buttons.Type> TYPES = List.of(\n+            Buttons.Type.Info, Buttons.Type.Success, Buttons.Type.Warning, Buttons.Type.Danger, Buttons.Type.Dark);\n+\n+    private final NumberWidget count;\n+\n+    private final NumberWidget totalTime;\n+\n+    private final NumberWidget max;\n+\n+    private final List<Pair<String, String>> selected = new ArrayList<>();\n+\n+    private final LoadableDetachableModel<Map<String, String>> routes =\n+            new LoadableDetachableModel<Map<String, String>>() {\n+\n+        @Override\n+        protected Map<String, String> load() {\n+            return SRARouteRestClient.list().stream().\n+                    collect(Collectors.toMap(SRARouteTO::getKey, SRARouteTO::getName));\n+        }\n+    };\n+\n+    private int current;\n+\n+    public SRAStatisticsPanel(final String id, final List<NetworkService> instances, final PageReference pageRef) {\n+        super(id);\n+\n+        SRAStatistics stats = SRAStatisticsRestClient.get(instances, selected);\n+\n+        count = new NumberWidget(\"count\", \"bg-green\", stats.getMeasurement(\"COUNT\").orElse(0F),\n+                \"count\", \"fas fa-pen-nib\");\n+        add(count);\n+\n+        totalTime = new NumberWidget(\"totalTime\", \"bg-info\", stats.getMeasurement(\"TOTAL_TIME\").orElse(0F),\n+                \"total time\", \"fas fa-stopwatch\");\n+        add(totalTime);\n+\n+        max = new NumberWidget(\"max\", \"bg-yellow\", stats.getMeasurement(\"MAX\").orElse(0F),\n+                \"max\", \"fas fa-greater-than\");\n+        add(max);\n+\n+        ListView<SRAStatistics.Tag> availableTags = new ListView<>(\"availableTags\", stats.getAvailableTags()) {\n+\n+            @Override\n+            protected void populateItem(final ListItem<SRAStatistics.Tag> tag) {\n+                String btnCss = next().cssClassName();\n+                tag.add(new Label(\"label\", tag.getModelObject().getTag()));\n+                tag.add(new ListView<String>(\"tag\", tag.getModelObject().getValues()) {\n+\n+                    @Override\n+                    protected void populateItem(final ListItem<String> value) {\n+                        AjaxLink<String> valueLink = new AjaxLink<>(\"valueLink\") {\n+\n+                            @Override\n+                            public void onClick(final AjaxRequestTarget target) {\n+                                Pair<String, String> selection =\n+                                        Pair.of(tag.getModelObject().getTag(), value.getModelObject());\n+                                if (selected.contains(selection)) {\n+                                    selected.remove(selection);\n+                                } else {\n+                                    selected.add(selection);\n+                                }\n+\n+                                SRAStatistics refresh = SRAStatisticsRestClient.get(instances, selected);\n+\n+                                count.refresh(refresh.getMeasurement(\"COUNT\").orElse(0F));\n+                                totalTime.refresh(refresh.getMeasurement(\"TOTAL_TIME\").orElse(0F));\n+                                max.refresh(refresh.getMeasurement(\"MAX\").orElse(0F));\n+\n+                                target.add(count);\n+                                target.add(totalTime);\n+                                target.add(max);\n+                            }\n+\n+                            @Override\n+                            protected void onComponentTag(final ComponentTag tag) {\n+                                super.onComponentTag(tag);\n+                                tag.append(\"class\", btnCss, \" \");\n+                            }\n+                        };\n+\n+                        IModel<String> valueLabel = routes.getObject().containsKey(value.getModelObject())\n+                                ? Model.of(routes.getObject().get(value.getModelObject()))\n+                                : value.getModel();\n+                        valueLink.add(new Label(\"valueLabel\", valueLabel));\n+                        value.add(valueLink);\n+                    }\n+                });\n+            }\n+        };\n+        add(availableTags);\n+    }\n+\n+    private Buttons.Type next() {\n+        if (current < TYPES.size()) {\n+            Buttons.Type type = TYPES.get(current);\n+            current++;\n+            return type;\n+        }\n+\n+        current = 0;\n+        return next();\n+    }\n+}"},{"sha":"407de1a03eaa5ede79c478b5c43269131b38fdc9","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/WASessionPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a755318c4d192c6ea48046a06acdc282f73ef6b6/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FWASessionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a755318c4d192c6ea48046a06acdc282f73ef6b6/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FWASessionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FWASessionPanel.java?ref=a755318c4d192c6ea48046a06acdc282f73ef6b6","patch":"@@ -36,15 +36,15 @@ public class WASessionPanel extends Panel {\n \n     private static final long serialVersionUID = 30189416462011L;\n \n-    public WASessionPanel(final String id, final List<NetworkService> waInstances, final PageReference pageRef) {\n+    public WASessionPanel(final String id, final List<NetworkService> instances, final PageReference pageRef) {\n         super(id);\n \n         Model<String> keywordModel = new Model<>(StringUtils.EMPTY);\n \n         WebMarkupContainer searchBoxContainer = new WebMarkupContainer(\"searchBox\");\n         add(searchBoxContainer);\n \n-        WASessionDirectoryPanel directoryPanel = new WASessionDirectoryPanel(\"directoryPanel\", waInstances, pageRef);\n+        WASessionDirectoryPanel directoryPanel = new WASessionDirectoryPanel(\"directoryPanel\", instances, pageRef);\n         add(directoryPanel);\n \n         Form<?> form = new Form<>(\"form\");"},{"sha":"7d265f3bda82d33efce1823e8af438aad737e443","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/rest/SRAStatistics.java","status":"added","additions":124,"deletions":0,"changes":124,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a755318c4d192c6ea48046a06acdc282f73ef6b6/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSRAStatistics.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a755318c4d192c6ea48046a06acdc282f73ef6b6/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSRAStatistics.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSRAStatistics.java?ref=a755318c4d192c6ea48046a06acdc282f73ef6b6","patch":"@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.rest;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public class SRAStatistics implements Serializable {\n+\n+    private static final long serialVersionUID = 25070367703725L;\n+\n+    public static class Measurement implements Serializable {\n+\n+        private static final long serialVersionUID = 24933964529045L;\n+\n+        private String statistic;\n+\n+        private Float value;\n+\n+        public String getStatistic() {\n+            return statistic;\n+        }\n+\n+        public void setStatistic(final String statistic) {\n+            this.statistic = statistic;\n+        }\n+\n+        public Float getValue() {\n+            return value;\n+        }\n+\n+        public void setValue(final Float value) {\n+            this.value = value;\n+        }\n+    }\n+\n+    public static class Tag implements Serializable {\n+\n+        private static final long serialVersionUID = 25010610267446L;\n+\n+        private String tag;\n+\n+        private final List<String> values = new ArrayList<>();\n+\n+        public String getTag() {\n+            return tag;\n+        }\n+\n+        public void setTag(final String tag) {\n+            this.tag = tag;\n+        }\n+\n+        public List<String> getValues() {\n+            return values;\n+        }\n+    }\n+\n+    private String name;\n+\n+    private String description;\n+\n+    private String baseUnit;\n+\n+    private final List<Measurement> measurements = new ArrayList<>();\n+\n+    private final List<Tag> availableTags = new ArrayList<>();\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(final String description) {\n+        this.description = description;\n+    }\n+\n+    public String getBaseUnit() {\n+        return baseUnit;\n+    }\n+\n+    public void setBaseUnit(final String baseUnit) {\n+        this.baseUnit = baseUnit;\n+    }\n+\n+    @JsonIgnore\n+    public Optional<Float> getMeasurement(final String statistic) {\n+        return measurements.stream().filter(m -> statistic.equals(m.getStatistic())).\n+                findFirst().map(Measurement::getValue);\n+    }\n+\n+    public List<Measurement> getMeasurements() {\n+        return measurements;\n+    }\n+\n+    public List<Tag> getAvailableTags() {\n+        return availableTags;\n+    }\n+}"},{"sha":"cd56204cb33601375b04851c8d5a698ecb33e9e6","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/rest/SRAStatisticsRestClient.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a755318c4d192c6ea48046a06acdc282f73ef6b6/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSRAStatisticsRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a755318c4d192c6ea48046a06acdc282f73ef6b6/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSRAStatisticsRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSRAStatisticsRestClient.java?ref=a755318c4d192c6ea48046a06acdc282f73ef6b6","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.rest;\n+\n+import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n+import java.util.List;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.client.console.SyncopeWebApplication;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class SRAStatisticsRestClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SRAStatisticsRestClient.class);\n+\n+    private static final List<?> JAX_RS_PROVIDERS = List.of(new JacksonJsonProvider());\n+\n+    private static String getActuatorEndpoint(final List<NetworkService> instances) {\n+        return instances.get(0).getAddress() + \"actuator/metrics/spring.cloud.gateway.requests\";\n+    }\n+\n+    public static SRAStatistics get(final List<NetworkService> waInstances, final List<Pair<String, String>> selected) {\n+        try {\n+            WebClient client = WebClient.create(\n+                    getActuatorEndpoint(waInstances),\n+                    JAX_RS_PROVIDERS,\n+                    SyncopeWebApplication.get().getAnonymousUser(),\n+                    SyncopeWebApplication.get().getAnonymousKey(),\n+                    null).\n+                    accept(MediaType.APPLICATION_JSON_TYPE);\n+\n+            if (!selected.isEmpty()) {\n+                client.query(\"tag\", selected.stream().map(s -> s.getKey() + \":\" + s.getValue()).toArray());\n+            }\n+\n+            Response response = client.get();\n+            if (response.getStatus() == Response.Status.OK.getStatusCode()) {\n+                return response.readEntity(SRAStatistics.class);\n+            }\n+\n+            LOG.error(\"Unexpected response for SRA statistics from {}: {}\",\n+                    getActuatorEndpoint(waInstances), response.getStatus());\n+        } catch (Exception e) {\n+            LOG.error(\"Could not fetch SRA statistics from {}\", getActuatorEndpoint(waInstances), e);\n+        }\n+\n+        return new SRAStatistics();\n+    }\n+\n+    private SRAStatisticsRestClient() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"d903b349189234017d4d58c0ca72477baf85ed53","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/rest/WASessionRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a755318c4d192c6ea48046a06acdc282f73ef6b6/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FWASessionRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a755318c4d192c6ea48046a06acdc282f73ef6b6/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FWASessionRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FWASessionRestClient.java?ref=a755318c4d192c6ea48046a06acdc282f73ef6b6","patch":"@@ -42,8 +42,8 @@ public final class WASessionRestClient implements RestClient {\n \n     private static final ObjectMapper MAPPER = new ObjectMapper();\n \n-    private static String getActuatorEndpoint(final List<NetworkService> waInstances) {\n-        return waInstances.get(0).getAddress() + \"/actuator/ssoSessions\";\n+    private static String getActuatorEndpoint(final List<NetworkService> instances) {\n+        return instances.get(0).getAddress() + \"actuator/ssoSessions\";\n     }\n \n     public static List<WASession> list(final List<NetworkService> waInstances) {"},{"sha":"e3bc608c9457080bd6fb4278e19b213a93c94759","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SRAStatisticsPanel.html","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a755318c4d192c6ea48046a06acdc282f73ef6b6/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRAStatisticsPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a755318c4d192c6ea48046a06acdc282f73ef6b6/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRAStatisticsPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRAStatisticsPanel.html?ref=a755318c4d192c6ea48046a06acdc282f73ef6b6","patch":"@@ -0,0 +1,42 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div class=\"row\">\n+      <div class=\"col-lg-4 col-xs-4\" wicket:id=\"count\"/>\n+      <div class=\"col-lg-4 col-xs-4\" wicket:id=\"totalTime\"/>\n+      <div class=\"col-lg-4 col-xs-4\" wicket:id=\"max\"/>\n+    </div>\n+\n+\n+    <span wicket:id=\"availableTags\">\n+      <div class=\"row mt-1\">\n+        <div class=\"col-md-2\">\n+          <label wicket:id=\"label\"/>\n+        </div>\n+        <div class=\"col-md-10\">\n+          <span wicket:id=\"tag\">\n+            <a href=\"#\" wicket:id=\"valueLink\" class=\"btn\" data-toggle=\"button\" aria-pressed=\"false\">\n+              <span wicket:id=\"valueLabel\"/></a>\n+          </span>\n+        </div>\n+      </div>\n+    </span>\n+  </wicket:panel>\n+</html>"},{"sha":"e6e577f7a43d39af0d067be0c1250b3191220dd5","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/NumberWidget.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a755318c4d192c6ea48046a06acdc282f73ef6b6/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a755318c4d192c6ea48046a06acdc282f73ef6b6/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java?ref=a755318c4d192c6ea48046a06acdc282f73ef6b6","patch":"@@ -36,11 +36,11 @@ public class NumberWidget extends BaseWidget {\n \n     private static final long serialVersionUID = -816175678514035085L;\n \n-    private int number;\n+    private Number number;\n \n     private final Label numberLabel;\n \n-    public NumberWidget(final String id, final String bg, final int number, final String label, final String icon) {\n+    public NumberWidget(final String id, final String bg, final Number number, final String label, final String icon) {\n         super(id);\n         this.number = number;\n         setOutputMarkupId(true);\n@@ -49,8 +49,8 @@ public NumberWidget(final String id, final String bg, final int number, final St\n         box.add(new AttributeAppender(\"class\", ' ' + bg));\n \n         boolean isAuthorized = true;\n-        final PageParameters pageParameters = new PageParameters();\n-        final Class<? extends IRequestablePage> responsePage;\n+        PageParameters pageParameters = new PageParameters();\n+        Class<? extends IRequestablePage> responsePage;\n         List<String> anyTypes = AnyTypeRestClient.list();\n         switch (id) {\n             case \"totalUsers\":\n@@ -124,7 +124,7 @@ protected void onEvent(final AjaxRequestTarget target) {\n         box.add(iconLabel);\n     }\n \n-    public boolean refresh(final int number) {\n+    public boolean refresh(final Number number) {\n         if (this.number != number) {\n             this.number = number;\n             numberLabel.setDefaultModelObject(number);"},{"sha":"92fcc3c9587047e7afa9117ae85b04796de02657","filename":"docker/sra/src/main/resources/application.properties","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a755318c4d192c6ea48046a06acdc282f73ef6b6/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a755318c4d192c6ea48046a06acdc282f73ef6b6/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=a755318c4d192c6ea48046a06acdc282f73ef6b6","patch":"@@ -20,12 +20,8 @@ spring.main.banner-mode=log\n \n server.port=8080\n \n-spring.cloud.gateway.metrics.enabled=true\n- \n management.security.enabled=true\n management.endpoint.gateway.enabled=true\n-management.endpoints.web.exposure.include=health,loggers,metrics,prometheus,gateway\n-management.endpoint.health.show-details=always\n-management.endpoint.metrics.enabled=true\n+management.endpoints.web.exposure.include=health,loggers,metrics,gateway\n \n service.discovery.address=${SERVICE_DISCOVERY_ADDRESS}"},{"sha":"6d19811bbde4d8a55d555692045a53eb5eb1aede","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/OIDCSRAITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a755318c4d192c6ea48046a06acdc282f73ef6b6/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a755318c4d192c6ea48046a06acdc282f73ef6b6/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java?ref=a755318c4d192c6ea48046a06acdc282f73ef6b6","patch":"@@ -76,7 +76,8 @@ public class OIDCSRAITCase extends AbstractSRAITCase {\n     public static void startSRA() throws IOException, InterruptedException, TimeoutException {\n         assumeTrue(OIDCSRAITCase.class.equals(MethodHandles.lookup().lookupClass()));\n \n-        doStartSRA(\"oidc\");\n+        // doStartSRA(\"oidc\");\n+        sraRouteService.pushToSRA();\n     }\n \n     protected static void oidcClientAppSetup("},{"sha":"3daf441fd3410a2d2666f455a20c177a0542d976","filename":"sra/pom.xml","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a755318c4d192c6ea48046a06acdc282f73ef6b6/sra%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a755318c4d192c6ea48046a06acdc282f73ef6b6/sra%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fpom.xml?ref=a755318c4d192c6ea48046a06acdc282f73ef6b6","patch":"@@ -93,11 +93,6 @@ under the License.\n       <artifactId>spring-boot-starter-log4j2</artifactId>\n     </dependency>\n \n-    <dependency>\n-      <groupId>io.micrometer</groupId>\n-      <artifactId>micrometer-registry-prometheus</artifactId>\n-    </dependency>\n-\n     <dependency>\n       <groupId>org.jsoup</groupId>\n       <artifactId>jsoup</artifactId>"},{"sha":"145bfccbb3384abe954cb667dd65f6a9c9d7585e","filename":"sra/src/main/resources/application.properties","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a755318c4d192c6ea48046a06acdc282f73ef6b6/sra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a755318c4d192c6ea48046a06acdc282f73ef6b6/sra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=a755318c4d192c6ea48046a06acdc282f73ef6b6","patch":"@@ -20,12 +20,8 @@ spring.main.banner-mode=log\n \n server.port=8080\n \n-spring.cloud.gateway.metrics.enabled=true\n- \n management.security.enabled=true\n management.endpoint.gateway.enabled=true\n-management.endpoints.web.exposure.include=health,loggers,metrics,prometheus,gateway\n-management.endpoint.health.show-details=always\n-management.endpoint.metrics.enabled=true\n+management.endpoints.web.exposure.include=health,loggers,metrics,gateway\n \n service.discovery.address=http://localhost:8080/"}]}