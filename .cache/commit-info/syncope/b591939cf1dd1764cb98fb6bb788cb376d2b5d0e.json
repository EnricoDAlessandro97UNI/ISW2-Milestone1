{"sha":"b591939cf1dd1764cb98fb6bb788cb376d2b5d0e","node_id":"C_kwDOJfYA1toAKGI1OTE5MzljZjFkZDE3NjRjYjk4ZmI2YmI3ODhjYjM3NmQyYjVkMGU","commit":{"author":{"name":"mdisabatino","email":"mdisabatino@apache.org","date":"2023-02-24T12:32:43Z"},"committer":{"name":"Marco Di Sabatino Di Diodoro","email":"mdisabatino@apache.org","date":"2023-02-24T13:42:05Z"},"message":"[SYNCOPE-1733] Added OAuth20 AuthModule (#414)\n\n* [SYNCOPE-1733] Added OAuth20 AuthModule\r\n\r\n* [SYNCOPE-1733] Fix code scanning\r\n\r\n* [SYNCOPE-1733] Fix code scanning","tree":{"sha":"0bf5fd26832742a06ab67513c46106d03451211c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0bf5fd26832742a06ab67513c46106d03451211c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b591939cf1dd1764cb98fb6bb788cb376d2b5d0e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b591939cf1dd1764cb98fb6bb788cb376d2b5d0e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b591939cf1dd1764cb98fb6bb788cb376d2b5d0e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b591939cf1dd1764cb98fb6bb788cb376d2b5d0e/comments","author":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"committer":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"parents":[{"sha":"1ece2b2c55db31e84098065ded1e2a8f7b31e97e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1ece2b2c55db31e84098065ded1e2a8f7b31e97e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1ece2b2c55db31e84098065ded1e2a8f7b31e97e"}],"stats":{"total":409,"additions":331,"deletions":78},"files":[{"sha":"9d4b5774378598d98a5cd8514003c8001ad11963","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/AbstractOIDCAuthModuleConf.java","status":"added","additions":121,"deletions":0,"changes":121,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b591939cf1dd1764cb98fb6bb788cb376d2b5d0e/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAbstractOIDCAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b591939cf1dd1764cb98fb6bb788cb376d2b5d0e/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAbstractOIDCAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAbstractOIDCAuthModuleConf.java?ref=b591939cf1dd1764cb98fb6bb788cb376d2b5d0e","patch":"@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.auth;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+public abstract class AbstractOIDCAuthModuleConf extends Pac4jAuthModuleConf {\n+    \n+    protected String clientId;\n+\n+    protected String clientSecret;\n+\n+    protected String clientName;\n+\n+    protected boolean enabled;\n+    \n+    protected Map<String, String> customParams = new LinkedHashMap<>();\n+\n+    protected String tokenUrl;\n+\n+    protected String responseType = \"code\";\n+\n+    protected String scope;\n+\n+    protected String userIdAttribute;\n+\n+    public String getClientId() {\n+        return clientId;\n+    }\n+\n+    public void setId(final String clientId) {\n+        this.clientId = clientId;\n+    }\n+\n+    public String getClientSecret() {\n+        return clientSecret;\n+    }\n+\n+    public void setClientSecret(final String clientSecret) {\n+        this.clientSecret = clientSecret;\n+    }\n+\n+    @Override\n+    public String getClientName() {\n+        return clientName;\n+    }\n+\n+    @Override\n+    public void setClientName(final String clientName) {\n+        this.clientName = clientName;\n+    }\n+\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    public void setEnabled(final boolean enabled) {\n+        this.enabled = enabled;\n+    }\n+\n+    public Map<String, String> getCustomParams() {\n+        return customParams;\n+    }\n+\n+    public void setCustomParams(final Map<String, String> customParams) {\n+        this.customParams = customParams;\n+    }\n+\n+    public String getTokenUrl() {\n+        return tokenUrl;\n+    }\n+\n+    public void setTokenUrl(final String tokenUrl) {\n+        this.tokenUrl = tokenUrl;\n+    }\n+\n+    public String getResponseType() {\n+        return responseType;\n+    }\n+\n+    public void setResponseType(final String responseType) {\n+        this.responseType = responseType;\n+    }\n+\n+    public String getScope() {\n+        return scope;\n+    }\n+\n+    public void setScope(final String scope) {\n+        this.scope = scope;\n+    }\n+\n+    public void setClientId(final String clientId) {\n+        this.clientId = clientId;\n+    }\n+\n+    public String getUserIdAttribute() {\n+        return userIdAttribute;\n+    }\n+\n+    public void setUserIdAttribute(final String userIdAttribute) {\n+        this.userIdAttribute = userIdAttribute;\n+    }\n+}"},{"sha":"c41588b85d806e1201c85f6ebdf3e5f9d2b2c2f7","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/AuthModuleConf.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b591939cf1dd1764cb98fb6bb788cb376d2b5d0e/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b591939cf1dd1764cb98fb6bb788cb376d2b5d0e/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAuthModuleConf.java?ref=b591939cf1dd1764cb98fb6bb788cb376d2b5d0e","patch":"@@ -49,6 +49,8 @@ interface Mapper {\n         Map<String, Object> map(AuthModuleTO authModule, U2FAuthModuleConf conf);\n \n         Map<String, Object> map(AuthModuleTO authModule, SimpleMfaAuthModuleConf conf);\n+\n+        Map<String, Object> map(AuthModuleTO authModule, OAuth20AuthModuleConf conf);\n     }\n \n     Map<String, Object> map(AuthModuleTO authModule, Mapper mapper);"},{"sha":"097016a9954e73f12ba4f8d7511f38573a5d7783","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/OAuth20AuthModuleConf.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b591939cf1dd1764cb98fb6bb788cb376d2b5d0e/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOAuth20AuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b591939cf1dd1764cb98fb6bb788cb376d2b5d0e/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOAuth20AuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOAuth20AuthModuleConf.java?ref=b591939cf1dd1764cb98fb6bb788cb376d2b5d0e","patch":"@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.auth;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.syncope.common.lib.to.AuthModuleTO;\n+\n+public class OAuth20AuthModuleConf extends AbstractOIDCAuthModuleConf implements AuthModuleConf {\n+\n+    private static final long serialVersionUID = 299820485764241682L;\n+\n+    protected String authUrl;\n+    \n+    protected String profileUrl;\n+    \n+    protected Map<String, String> profileAttrs = new LinkedHashMap<>();\n+\n+    protected boolean withState;\n+\n+    protected String profilePath;\n+\n+    protected String profileVerb = \"POST\";\n+\n+    public String getAuthUrl() {\n+        return authUrl;\n+    }\n+\n+    public void setAuthUrl(final String authUrl) {\n+        this.authUrl = authUrl;\n+    }\n+\n+    public Map<String, String> getProfileAttrs() {\n+        return profileAttrs;\n+    }\n+\n+    public void setProfileAttrs(final Map<String, String> profileAttrs) {\n+        this.profileAttrs = profileAttrs;\n+    }\n+\n+    public boolean isWithState() {\n+        return withState;\n+    }\n+\n+    public void setWithState(final boolean withState) {\n+        this.withState = withState;\n+    }\n+\n+    public String getProfilePath() {\n+        return profilePath;\n+    }\n+\n+    public void setProfilePath(final String profilePath) {\n+        this.profilePath = profilePath;\n+    }\n+\n+    public String getProfileUrl() {\n+        return profileUrl;\n+    }\n+\n+    public void setProfileUrl(final String profileUrl) {\n+        this.profileUrl = profileUrl;\n+    }\n+\n+    public String getProfileVerb() {\n+        return profileVerb;\n+    }\n+\n+    public void setProfileVerb(final String profileVerb) {\n+        this.profileVerb = profileVerb;\n+    }\n+\n+    @Override\n+    public Map<String, Object> map(final AuthModuleTO authModule, final Mapper mapper) {\n+        return mapper.map(authModule, this);\n+    }\n+}"},{"sha":"1419e87730a3ac59b6c572fcb1b628333a904b81","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/OIDCAuthModuleConf.java","status":"modified","additions":1,"deletions":77,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b591939cf1dd1764cb98fb6bb788cb376d2b5d0e/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOIDCAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b591939cf1dd1764cb98fb6bb788cb376d2b5d0e/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOIDCAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOIDCAuthModuleConf.java?ref=b591939cf1dd1764cb98fb6bb788cb376d2b5d0e","patch":"@@ -18,29 +18,13 @@\n  */\n package org.apache.syncope.common.lib.auth;\n \n-import java.util.HashMap;\n import java.util.Map;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n \n-public class OIDCAuthModuleConf extends Pac4jAuthModuleConf implements AuthModuleConf {\n+public class OIDCAuthModuleConf extends AbstractOIDCAuthModuleConf implements AuthModuleConf {\n \n     private static final long serialVersionUID = -471527731042579422L;\n \n-    /**\n-     * The client id.\n-     */\n-    protected String clientId;\n-\n-    /**\n-     * The client secret.\n-     */\n-    protected String clientSecret;\n-\n-    /**\n-     * The attribute value that should be used for the authenticated username, upon a successful authentication attempt.\n-     */\n-    protected String userIdAttribute;\n-\n     protected String discoveryUri;\n \n     /**\n@@ -49,11 +33,6 @@ public class OIDCAuthModuleConf extends Pac4jAuthModuleConf implements AuthModul\n      */\n     protected boolean useNonce;\n \n-    /**\n-     * Requested scope(s).\n-     */\n-    protected String scope;\n-\n     /**\n      * The JWS algorithm to use forcefully when validating ID tokens.\n      * If none is defined, the first algorithm from metadata will be used.\n@@ -65,47 +44,12 @@ public class OIDCAuthModuleConf extends Pac4jAuthModuleConf implements AuthModul\n      */\n     protected String maxClockSkew;\n \n-    /**\n-     * Custom parameters to send along in authZ requests, etc.\n-     */\n-    protected final Map<String, String> customParams = new HashMap<>(0);\n-\n     /**\n      * The response mode specifies how the result of the authorization request is formatted.\n      * Possible values includes \"query\", \"fragment\", \"form_post\", or \"web_message\"\n      */\n     protected String responseMode;\n \n-    /**\n-     * The response type tells the authorization server which grant to execute.\n-     * Possibles values includes \"code\", \"token\" or \"id_token\".\n-     */\n-    protected String responseType;\n-\n-    public String getClientId() {\n-        return clientId;\n-    }\n-\n-    public void setClientId(final String clientId) {\n-        this.clientId = clientId;\n-    }\n-\n-    public String getClientSecret() {\n-        return clientSecret;\n-    }\n-\n-    public void setClientSecret(final String clientSecret) {\n-        this.clientSecret = clientSecret;\n-    }\n-\n-    public String getUserIdAttribute() {\n-        return userIdAttribute;\n-    }\n-\n-    public void setUserIdAttribute(final String userIdAttribute) {\n-        this.userIdAttribute = userIdAttribute;\n-    }\n-\n     public String getDiscoveryUri() {\n         return discoveryUri;\n     }\n@@ -122,14 +66,6 @@ public void setUseNonce(final boolean useNonce) {\n         this.useNonce = useNonce;\n     }\n \n-    public String getScope() {\n-        return scope;\n-    }\n-\n-    public void setScope(final String scope) {\n-        this.scope = scope;\n-    }\n-\n     public String getPreferredJwsAlgorithm() {\n         return preferredJwsAlgorithm;\n     }\n@@ -146,10 +82,6 @@ public void setMaxClockSkew(final String maxClockSkew) {\n         this.maxClockSkew = maxClockSkew;\n     }\n \n-    public Map<String, String> getCustomParams() {\n-        return customParams;\n-    }\n-\n     public String getResponseMode() {\n         return responseMode;\n     }\n@@ -158,14 +90,6 @@ public void setResponseMode(final String responseMode) {\n         this.responseMode = responseMode;\n     }\n \n-    public String getResponseType() {\n-        return responseType;\n-    }\n-\n-    public void setResponseType(final String responseType) {\n-        this.responseType = responseType;\n-    }\n-\n     @Override\n     public Map<String, Object> map(final AuthModuleTO authModule, final Mapper mapper) {\n         return mapper.map(authModule, this);"},{"sha":"d778a528c71e4d35f4853fc0e2031cad91a7b1ad","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b591939cf1dd1764cb98fb6bb788cb376d2b5d0e/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b591939cf1dd1764cb98fb6bb788cb376d2b5d0e/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=b591939cf1dd1764cb98fb6bb788cb376d2b5d0e","patch":"@@ -87,6 +87,9 @@ under the License.\n               items='[{\"intAttrName\":\"syncopeUserAttr_surname\",\"extAttrName\":\"family_name\",\"connObjectKey\":false,\"password\":false,\"mandatoryCondition\":\"false\",\"purpose\":\"NONE\",\"propagationJEXLTransformer\":null,\"pullJEXLTransformer\":null,\"transformers\":[]},{\"intAttrName\":\"syncopeUserAttr_fullname\",\"extAttrName\":\"name\",\"connObjectKey\":false,\"password\":false,\"mandatoryCondition\":\"false\",\"purpose\":\"NONE\",\"propagationJEXLTransformer\":null,\"pullJEXLTransformer\":null,\"transformers\":[]},{\"intAttrName\":\"syncopeUserAttr_firstname\",\"extAttrName\":\"given_name\",\"connObjectKey\":false,\"password\":false,\"mandatoryCondition\":\"false\",\"purpose\":\"NONE\",\"propagationJEXLTransformer\":null,\"pullJEXLTransformer\":null,\"transformers\":[]},{\"intAttrName\":\"syncopeUserAttr_email\",\"extAttrName\":\"email\",\"connObjectKey\":false,\"password\":false,\"mandatoryCondition\":\"false\",\"purpose\":\"NONE\",\"propagationJEXLTransformer\":null,\"pullJEXLTransformer\":null,\"transformers\":[]},{\"intAttrName\":\"syncopeUserMemberships\",\"extAttrName\":\"groups\",\"connObjectKey\":false,\"password\":false,\"mandatoryCondition\":\"false\",\"purpose\":\"NONE\",\"propagationJEXLTransformer\":null,\"pullJEXLTransformer\":null,\"transformers\":[]}]'/>\n   <AuthModule id=\"DefaultU2FAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"U2F auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.U2FAuthModuleConf\",\"expireDevices\":40}'/>\n+  <AuthModule id=\"DefaultOAuth20AuthModule\" description=\"OAuth20 auth module\" authModuleOrder=\"0\" \n+              jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.OAuth20AuthModuleConf\",\"clientName\":\"oauth20\",\"clientId\":\"OAUTH20\",\"clientSecret\":\"secret\",\"enabled\":true,\"customParams\":{},\"tokenUrl\":\"https://localhost/oauth2/token\",\"responseType\":\"code\",\"scope\":\"oauth test\",\"userIdAttribute\":\"username\",\"authUrl\":\"https://localhost/oauth2/auth\",\"profileUrl\":\"https://localhost/oauth2/profile\",\"profileAttrs\":{},\"withState\":false,\"profilePath\":null,\"profileVerb\":\"POST\"}' authModuleState=\"ACTIVE\"/>\n+\n \n   <!-- Attribute repositories -->\n   <AttrRepo id=\"DefaultLDAPAttrRepo\" attrRepoState=\"ACTIVE\""},{"sha":"f804bf8eda5c25128c84a438dbecd0c701189de0","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b591939cf1dd1764cb98fb6bb788cb376d2b5d0e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b591939cf1dd1764cb98fb6bb788cb376d2b5d0e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=b591939cf1dd1764cb98fb6bb788cb376d2b5d0e","patch":"@@ -87,6 +87,8 @@ under the License.\n               items='[{\"intAttrName\":\"syncopeUserAttr_surname\",\"extAttrName\":\"family_name\",\"connObjectKey\":false,\"password\":false,\"mandatoryCondition\":\"false\",\"purpose\":\"NONE\",\"propagationJEXLTransformer\":null,\"pullJEXLTransformer\":null,\"transformers\":[]},{\"intAttrName\":\"syncopeUserAttr_fullname\",\"extAttrName\":\"name\",\"connObjectKey\":false,\"password\":false,\"mandatoryCondition\":\"false\",\"purpose\":\"NONE\",\"propagationJEXLTransformer\":null,\"pullJEXLTransformer\":null,\"transformers\":[]},{\"intAttrName\":\"syncopeUserAttr_firstname\",\"extAttrName\":\"given_name\",\"connObjectKey\":false,\"password\":false,\"mandatoryCondition\":\"false\",\"purpose\":\"NONE\",\"propagationJEXLTransformer\":null,\"pullJEXLTransformer\":null,\"transformers\":[]},{\"intAttrName\":\"syncopeUserAttr_email\",\"extAttrName\":\"email\",\"connObjectKey\":false,\"password\":false,\"mandatoryCondition\":\"false\",\"purpose\":\"NONE\",\"propagationJEXLTransformer\":null,\"pullJEXLTransformer\":null,\"transformers\":[]},{\"intAttrName\":\"syncopeUserMemberships\",\"extAttrName\":\"groups\",\"connObjectKey\":false,\"password\":false,\"mandatoryCondition\":\"false\",\"purpose\":\"NONE\",\"propagationJEXLTransformer\":null,\"pullJEXLTransformer\":null,\"transformers\":[]}]'/>\n   <AuthModule id=\"DefaultU2FAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"U2F auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.U2FAuthModuleConf\",\"expireDevices\":40}'/>\n+  <AuthModule id=\"DefaultOAuth20AuthModule\" description=\"OAuth20 auth module\" authModuleOrder=\"0\"\n+              jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.OAuth20AuthModuleConf\",\"clientName\":\"oauth20\",\"clientId\":\"OAUTH20\",\"clientSecret\":\"secret\",\"enabled\":true,\"customParams\":{},\"tokenUrl\":\"https://localhost/oauth2/token\",\"responseType\":\"code\",\"scope\":\"oauth test\",\"userIdAttribute\":\"username\",\"authUrl\":\"https://localhost/oauth2/auth\",\"profileUrl\":\"https://localhost/oauth2/profile\",\"profileAttrs\":{},\"withState\":false,\"profilePath\":null,\"profileVerb\":\"POST\"}' authModuleState=\"ACTIVE\"/>\n \n   <!-- Attribute repositories -->\n   <AttrRepo id=\"DefaultLDAPAttrRepo\" attrRepoState=\"ACTIVE\""},{"sha":"c3ead959f2daf17d26662696b8f4e96e92023203","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthModuleITCase.java","status":"modified","additions":58,"deletions":1,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b591939cf1dd1764cb98fb6bb788cb376d2b5d0e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b591939cf1dd1764cb98fb6bb788cb376d2b5d0e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java?ref=b591939cf1dd1764cb98fb6bb788cb376d2b5d0e","patch":"@@ -28,6 +28,7 @@\n import java.io.IOException;\n import java.util.EnumSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.UUID;\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -39,6 +40,7 @@\n import org.apache.syncope.common.lib.auth.JDBCAuthModuleConf;\n import org.apache.syncope.common.lib.auth.JaasAuthModuleConf;\n import org.apache.syncope.common.lib.auth.LDAPAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.OAuth20AuthModuleConf;\n import org.apache.syncope.common.lib.auth.OIDCAuthModuleConf;\n import org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf;\n import org.apache.syncope.common.lib.auth.StaticAuthModuleConf;\n@@ -62,7 +64,8 @@ private enum AuthModuleSupportedType {\n         JAAS,\n         JDBC,\n         U2F,\n-        OIDC;\n+        OIDC,\n+        OAUTH20;\n \n     };\n \n@@ -138,6 +141,24 @@ private static AuthModuleTO buildAuthModuleTO(final AuthModuleSupportedType type\n                 OIDCAuthModuleConf.class.cast(conf).setScope(\"openid email profile\");\n                 break;\n \n+            case OAUTH20:\n+                conf = new OAuth20AuthModuleConf();\n+                OAuth20AuthModuleConf.class.cast(conf).setClientId(\"OAUTH20TestId\");\n+                OAuth20AuthModuleConf.class.cast(conf).setClientSecret(\"secret\");\n+                OAuth20AuthModuleConf.class.cast(conf).setClientName(\"oauth20\");\n+                OAuth20AuthModuleConf.class.cast(conf).setEnabled(true);\n+                OAuth20AuthModuleConf.class.cast(conf).setCustomParams(Map.of(\"param1\", \"param1\"));\n+                OAuth20AuthModuleConf.class.cast(conf).setAuthUrl(\"https://localhost/oauth2/auth\");\n+                OAuth20AuthModuleConf.class.cast(conf).setProfileAttrs(Map.of(\"uid\", \"id\"));\n+                OAuth20AuthModuleConf.class.cast(conf).setProfileUrl(\"https://localhost/oauth2/profile\");\n+                OAuth20AuthModuleConf.class.cast(conf).setProfilePath(\"/info\");\n+                OAuth20AuthModuleConf.class.cast(conf).setTokenUrl(\"https://localhost/oauth2/token\");\n+                OAuth20AuthModuleConf.class.cast(conf).setResponseType(\"code\");\n+                OAuth20AuthModuleConf.class.cast(conf).setScope(\"oauth test\");\n+                OAuth20AuthModuleConf.class.cast(conf).setUserIdAttribute(\"username\");\n+                OAuth20AuthModuleConf.class.cast(conf).setWithState(true);\n+                break;\n+\n             case SAML2_IDP:\n                 conf = new SAML2IdPAuthModuleConf();\n                 SAML2IdPAuthModuleConf.class.cast(conf).setServiceProviderEntityId(\"testEntityId\");\n@@ -216,6 +237,9 @@ public void list() {\n         assertTrue(authModuleTOs.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), U2FAuthModuleConf.class)\n                 && authModule.getKey().equals(\"DefaultU2FAuthModule\")));\n+        assertTrue(authModuleTOs.stream().anyMatch(\n+                authModule -> isSpecificConf(authModule.getConf(), OAuth20AuthModuleConf.class)\n+                        && authModule.getKey().equals(\"DefaultOAuth20AuthModule\")));\n     }\n \n     @Test\n@@ -267,6 +291,16 @@ public void getOIDCAuthModule() {\n         assertFalse(isSpecificConf(authModuleTO.getConf(), SAML2IdPAuthModuleConf.class));\n     }\n \n+    @Test\n+    public void getOAuth20AuthModule() {\n+        AuthModuleTO authModuleTO = AUTH_MODULE_SERVICE.read(\"DefaultOAuth20AuthModule\");\n+\n+        assertNotNull(authModuleTO);\n+        assertTrue(StringUtils.isNotBlank(authModuleTO.getDescription()));\n+        assertTrue(isSpecificConf(authModuleTO.getConf(), OAuth20AuthModuleConf.class));\n+        assertFalse(isSpecificConf(authModuleTO.getConf(), SAML2IdPAuthModuleConf.class));\n+    }\n+\n     @Test\n     public void getSAML2IdPAuthModule() {\n         AuthModuleTO authModuleTO = AUTH_MODULE_SERVICE.read(\"DefaultSAML2IdPAuthModule\");\n@@ -443,6 +477,29 @@ public void updateOIDCAuthModule() {\n         assertEquals(\"newCode\", OIDCAuthModuleConf.class.cast(conf).getResponseType());\n     }\n \n+    @Test\n+    public void updateOAuth20AuthModule() {\n+        AuthModuleTO oauth20AuthModuleTO = AUTH_MODULE_SERVICE.read(\"DefaultOAuth20AuthModule\");\n+        assertNotNull(oauth20AuthModuleTO);\n+\n+        AuthModuleTO newoauth20AuthModuleTO = buildAuthModuleTO(AuthModuleSupportedType.OAUTH20);\n+        newoauth20AuthModuleTO = createAuthModule(newoauth20AuthModuleTO);\n+        assertNotNull(newoauth20AuthModuleTO);\n+\n+        AuthModuleConf conf = oauth20AuthModuleTO.getConf();\n+        assertNotNull(conf);\n+        OAuth20AuthModuleConf.class.cast(conf).setClientName(\"OAUTH APP\");\n+        newoauth20AuthModuleTO.setConf(conf);\n+\n+        // update new auth module\n+        AUTH_MODULE_SERVICE.update(newoauth20AuthModuleTO);\n+        newoauth20AuthModuleTO = AUTH_MODULE_SERVICE.read(newoauth20AuthModuleTO.getKey());\n+        assertNotNull(newoauth20AuthModuleTO);\n+\n+        conf = newoauth20AuthModuleTO.getConf();\n+        assertEquals(\"OAUTH APP\", OAuth20AuthModuleConf.class.cast(conf).getClientName());\n+    }\n+\n     @Test\n     public void updateJDBCAuthModule() {\n         AuthModuleTO jdbcAuthModuleTO = AUTH_MODULE_SERVICE.read(\"DefaultJDBCAuthModule\");"},{"sha":"a5348fb32b6231f61a16ffb6e269048040236b76","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/AuthModulePropertySourceMapper.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b591939cf1dd1764cb98fb6bb788cb376d2b5d0e/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b591939cf1dd1764cb98fb6bb788cb376d2b5d0e/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapper.java?ref=b591939cf1dd1764cb98fb6bb788cb376d2b5d0e","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.common.lib.auth.JDBCAuthModuleConf;\n import org.apache.syncope.common.lib.auth.JaasAuthModuleConf;\n import org.apache.syncope.common.lib.auth.LDAPAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.OAuth20AuthModuleConf;\n import org.apache.syncope.common.lib.auth.OIDCAuthModuleConf;\n import org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf;\n import org.apache.syncope.common.lib.auth.SimpleMfaAuthModuleConf;\n@@ -51,6 +52,7 @@\n import org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties;\n import org.apereo.cas.configuration.model.support.mfa.simple.CasSimpleMultifactorAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.mfa.u2f.U2FMultifactorAuthenticationProperties;\n+import org.apereo.cas.configuration.model.support.pac4j.oauth.Pac4jOAuth20ClientProperties;\n import org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jGenericOidcClientProperties;\n import org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jOidcClientProperties;\n import org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties;\n@@ -148,6 +150,27 @@ public Map<String, Object> map(final AuthModuleTO authModuleTO, final OIDCAuthMo\n         return prefix(\"cas.authn.pac4j.oidc[].generic.\", CasCoreConfigurationUtils.asMap(props));\n     }\n \n+    @Override\n+    public Map<String, Object> map(final AuthModuleTO authModuleTO, final OAuth20AuthModuleConf conf) {\n+        Pac4jOAuth20ClientProperties props = new Pac4jOAuth20ClientProperties();\n+        props.setId(conf.getClientId());\n+        props.setSecret(conf.getClientSecret());\n+        props.setClientName(Optional.ofNullable(conf.getClientName()).orElse(authModuleTO.getKey()));\n+        props.setEnabled(authModuleTO.getState() == AuthModuleState.ACTIVE);\n+        props.setCustomParams(conf.getCustomParams());\n+        props.setAuthUrl(conf.getAuthUrl());\n+        props.setProfileAttrs(conf.getProfileAttrs());\n+        props.setProfilePath(conf.getProfilePath());\n+        props.setProfileUrl(conf.getProfileUrl());\n+        props.setTokenUrl(conf.getTokenUrl());\n+        props.setResponseType(conf.getResponseType());\n+        props.setScope(conf.getScope());\n+        props.setPrincipalAttributeId(conf.getUserIdAttribute());\n+        props.setWithState(conf.isWithState());\n+        \n+        return prefix(\"cas.authn.pac4j.oauth2[].\", CasCoreConfigurationUtils.asMap(props));\n+    }\n+\n     @Override\n     public Map<String, Object> map(final AuthModuleTO authModuleTO, final SAML2IdPAuthModuleConf conf) {\n         Pac4jSamlClientProperties props = new Pac4jSamlClientProperties();"},{"sha":"37d61653239db796f23c86984d93e457335664d1","filename":"wa/bootstrap/src/test/java/org/apache/syncope/wa/bootstrap/AuthModulePropertySourceMapperTest.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b591939cf1dd1764cb98fb6bb788cb376d2b5d0e/wa%2Fbootstrap%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapperTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b591939cf1dd1764cb98fb6bb788cb376d2b5d0e/wa%2Fbootstrap%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapperTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapperTest.java?ref=b591939cf1dd1764cb98fb6bb788cb376d2b5d0e","patch":"@@ -21,6 +21,7 @@\n import static org.junit.jupiter.api.Assertions.assertFalse;\n \n import java.util.Map;\n+import org.apache.syncope.common.lib.auth.OAuth20AuthModuleConf;\n import org.apache.syncope.common.lib.auth.SimpleMfaAuthModuleConf;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n import org.junit.jupiter.api.Test;\n@@ -46,4 +47,31 @@ public void mapSimpleMfaAuthModuleConf() {\n         Map<String, Object> map = new AuthModulePropertySourceMapper(null).map(authModuleTO, conf);\n         assertFalse(map.keySet().stream().anyMatch(k -> k.endsWith(\"defined\")));\n     }\n+\n+    @Test\n+    public void mapOAuth20AuthModuleConf() {\n+        AuthModuleTO authModuleTO = new AuthModuleTO();\n+        authModuleTO.setKey(\"oauth20\");\n+        authModuleTO.setOrder(0);\n+\n+        OAuth20AuthModuleConf conf = new OAuth20AuthModuleConf();\n+\n+        conf.setClientId(\"1000\");\n+        conf.setClientSecret(\"secret\");\n+        conf.setClientName(\"oauth20\");\n+        conf.setEnabled(true);\n+        conf.setCustomParams(Map.of(\"param1\", \"param1\"));\n+        conf.setAuthUrl(\"https://localhost/oauth2/auth\");\n+        conf.setProfileAttrs(Map.of(\"uid\", \"id\"));\n+        conf.setProfileUrl(\"https://localhost/oauth2/profile\");\n+        conf.setProfilePath(\"/info\");\n+        conf.setTokenUrl(\"https://localhost/oauth2/token\");\n+        conf.setResponseType(\"code\");\n+        conf.setScope(\"cns\");\n+        conf.setUserIdAttribute(\"uid\");\n+        conf.setWithState(true);\n+\n+        Map<String, Object> map = new AuthModulePropertySourceMapper(null).map(authModuleTO, conf);\n+        assertFalse(map.keySet().stream().anyMatch(k -> k.endsWith(\"defined\")));\n+    }\n }"}]}