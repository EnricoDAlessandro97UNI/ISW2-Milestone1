{"sha":"44a906fe8dcf2225c7f49c736987fe557beb26d4","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ0YTkwNmZlOGRjZjIyMjVjN2Y0OWM3MzY5ODdmZTU1N2JlYjI2ZDQ=","commit":{"author":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2019-04-26T13:06:21Z"},"committer":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2019-04-30T15:36:15Z"},"message":"[SYnCOPE-1421] enabled enduser extensions, first draft of User Requests mgmt","tree":{"sha":"5b7f7134c948a65ee0b4f54bea4f13d20773bff3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5b7f7134c948a65ee0b4f54bea4f13d20773bff3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/44a906fe8dcf2225c7f49c736987fe557beb26d4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/44a906fe8dcf2225c7f49c736987fe557beb26d4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/44a906fe8dcf2225c7f49c736987fe557beb26d4","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/44a906fe8dcf2225c7f49c736987fe557beb26d4/comments","author":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"committer":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"578bc5eea7e61fc5c2bfa6519c9225502ee37040","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/578bc5eea7e61fc5c2bfa6519c9225502ee37040","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/578bc5eea7e61fc5c2bfa6519c9225502ee37040"}],"stats":{"total":1318,"additions":600,"deletions":718},"files":[{"sha":"9e7a3171db08e1c398e7f164ab1dad7cb7897d70","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/widgets/RemediationsWidget.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FRemediationsWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FRemediationsWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FRemediationsWidget.java?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -25,7 +25,7 @@\n import java.util.List;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.syncope.client.console.annotations.ExtWidget;\n+import org.apache.syncope.client.ui.commons.annotations.ExtWidget;\n import org.apache.syncope.client.console.pages.Remediations;\n import org.apache.syncope.client.console.rest.RemediationRestClient;\n import org.apache.syncope.client.console.wicket.ajax.IndicatorAjaxTimerBehavior;"},{"sha":"4e1d1465c496b5f619e8387146fb9d16d5357350","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/annotations/ExtPage.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fannotations%2FExtPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fannotations%2FExtPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fannotations%2FExtPage.java?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.console.annotations;\n+package org.apache.syncope.client.ui.commons.annotations;\n \n import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;","previous_filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/annotations/ExtPage.java"},{"sha":"edeec5d200b87348268252da3b7be4460ffdc772","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/annotations/ExtWidget.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fannotations%2FExtWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fannotations%2FExtWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fannotations%2FExtWidget.java?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.console.annotations;\n+package org.apache.syncope.client.ui.commons.annotations;\n \n import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;","previous_filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/annotations/ExtWidget.java"},{"sha":"09b69eb2cea007f5ee691e59bf591cd9125a455a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/init/ClassPathScanImplementationLookup.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -32,8 +32,8 @@\n import org.apache.commons.lang3.ObjectUtils;\n import org.apache.syncope.client.console.pages.BaseExtPage;\n import org.apache.syncope.client.ui.commons.annotations.BinaryPreview;\n-import org.apache.syncope.client.console.annotations.ExtPage;\n-import org.apache.syncope.client.console.annotations.ExtWidget;\n+import org.apache.syncope.client.ui.commons.annotations.ExtPage;\n+import org.apache.syncope.client.ui.commons.annotations.ExtWidget;\n import org.apache.syncope.client.console.annotations.IdMPage;\n import org.apache.syncope.client.console.annotations.Resource;\n import org.apache.syncope.client.console.commons.AnyDirectoryPanelAditionalActionLinksProvider;\n@@ -195,9 +195,9 @@ public void load() {\n             try {\n                 Class<?> clazz = ClassUtils.resolveClassName(\n                         bd.getBeanClassName(), ClassUtils.getDefaultClassLoader());\n-                boolean isAbsractClazz = Modifier.isAbstract(clazz.getModifiers());\n+                boolean isAbstractClazz = Modifier.isAbstract(clazz.getModifiers());\n \n-                if (!isAbsractClazz) {\n+                if (!isAbstractClazz) {\n                     if (BaseExtPage.class.isAssignableFrom(clazz)) {\n                         if (clazz.isAnnotationPresent(ExtPage.class)) {\n                             extPages.add((Class<? extends BaseExtPage>) clazz);"},{"sha":"654fe778e33f8d327fc200f80256df9c073c0246","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/BasePage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -24,7 +24,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.syncope.client.console.annotations.ExtPage;\n+import org.apache.syncope.client.ui.commons.annotations.ExtPage;\n import org.apache.syncope.client.console.annotations.IdMPage;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.ui.commons.HttpResourceStream;"},{"sha":"1d0532775685d96cad372ee073cb038ca514d4dc","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DashboardExtensionsPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardExtensionsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardExtensionsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardExtensionsPanel.java?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -21,7 +21,7 @@\n import java.lang.reflect.Constructor;\n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.client.console.annotations.ExtWidget;\n+import org.apache.syncope.client.ui.commons.annotations.ExtWidget;\n import org.apache.syncope.client.console.widgets.BaseExtWidget;\n import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.PageReference;"},{"sha":"678e472ef10b0126fdfb29545805e804017597d1","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserSession.java","status":"modified","additions":22,"deletions":2,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -32,6 +32,7 @@\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n@@ -55,14 +56,16 @@ public class SyncopeEnduserSession extends WebSession {\n \n     private final SyncopeClient anonymousClient;\n \n+    private final SyncopeClientFactoryBean clientFactory;\n+\n     private SyncopeClient client;\n \n     private final PlatformInfo platformInfo;\n \n     private UserTO selfTO;\n \n     private final Map<Class<?>, Object> services = Collections.synchronizedMap(new HashMap<>());\n-    \n+\n     private final ThreadPoolTaskExecutor executor;\n \n     public static SyncopeEnduserSession get() {\n@@ -71,12 +74,14 @@ public static SyncopeEnduserSession get() {\n \n     public SyncopeEnduserSession(final Request request) {\n         super(request);\n+\n+        clientFactory = SyncopeWebApplication.get().newClientFactory();\n         anonymousClient = SyncopeWebApplication.get().getClientFactory().\n                 create(new AnonymousAuthenticationHandler(\n                         SyncopeWebApplication.get().getAnonymousUser(),\n                         SyncopeWebApplication.get().getAnonymousKey()));\n         platformInfo = anonymousClient.getService(SyncopeService.class).platform();\n-        \n+\n         executor = new ThreadPoolTaskExecutor();\n         executor.setWaitForTasksToCompleteOnShutdown(false);\n         executor.setCorePoolSize(SyncopeWebApplication.get().getCorePoolSize());\n@@ -179,6 +184,21 @@ public <T> T getService(final String etag, final Class<T> serviceClass) {\n         return serviceInstance;\n     }\n \n+    public <T> T getService(final MediaType mediaType, final Class<T> serviceClass) {\n+        T service;\n+\n+        synchronized (clientFactory) {\n+            SyncopeClientFactoryBean.ContentType preType = clientFactory.getContentType();\n+\n+            clientFactory.setContentType(SyncopeClientFactoryBean.ContentType.fromString(mediaType.toString()));\n+            service = clientFactory.create(getJWT()).getService(serviceClass);\n+\n+            clientFactory.setContentType(preType);\n+        }\n+\n+        return service;\n+    }\n+\n     public PlatformInfo getPlatformInfo() {\n         return platformInfo;\n     }"},{"sha":"90466927c3c7989cb29cd730dc45149d5ea75954","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeWebApplication.java","status":"modified","additions":27,"deletions":10,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -95,6 +95,16 @@ public static SyncopeWebApplication get() {\n     @Autowired\n     private ClassPathScanImplementationLookup lookup;\n \n+    private String scheme;\n+\n+    private String host;\n+\n+    private String port;\n+\n+    private String rootPath;\n+\n+    private String useGZIPCompression;\n+\n     private String domain;\n \n     private String adminUser;\n@@ -130,6 +140,17 @@ protected void init() {\n         // read enduser.properties\n         Properties props = PropertyUtils.read(getClass(), ENDUSER_PROPERTIES, \"enduser.directory\");\n \n+        scheme = props.getProperty(\"scheme\");\n+        Args.notNull(scheme, \"<scheme>\");\n+        host = props.getProperty(\"host\");\n+        Args.notNull(host, \"<host>\");\n+        port = props.getProperty(\"port\");\n+        Args.notNull(port, \"<port>\");\n+        rootPath = props.getProperty(\"rootPath\");\n+        Args.notNull(rootPath, \"<rootPath>\");\n+        useGZIPCompression = props.getProperty(\"useGZIPCompression\");\n+        Args.notNull(useGZIPCompression, \"<useGZIPCompression>\");\n+\n         domain = props.getProperty(\"domain\", SyncopeConstants.MASTER_DOMAIN);\n         adminUser = props.getProperty(\"adminUser\");\n         Args.notNull(adminUser, \"<adminUser>\");\n@@ -144,16 +165,6 @@ protected void init() {\n         xsrfEnabled = Boolean.parseBoolean(props.getProperty(\"xsrf\"));\n         Args.notNull(xsrfEnabled, \"<xsrf>\");\n \n-        String scheme = props.getProperty(\"scheme\");\n-        Args.notNull(scheme, \"<scheme>\");\n-        String host = props.getProperty(\"host\");\n-        Args.notNull(host, \"<host>\");\n-        String port = props.getProperty(\"port\");\n-        Args.notNull(port, \"<port>\");\n-        String rootPath = props.getProperty(\"rootPath\");\n-        Args.notNull(rootPath, \"<rootPath>\");\n-        String useGZIPCompression = props.getProperty(\"useGZIPCompression\");\n-        Args.notNull(useGZIPCompression, \"<useGZIPCompression>\");\n         maxUploadFileSizeMB = props.getProperty(\"maxUploadFileSizeMB\") == null\n                 ? null\n                 : Integer.valueOf(props.getProperty(\"maxUploadFileSizeMB\"));\n@@ -327,6 +338,12 @@ public Session newSession(final Request request, final Response response) {\n         return new SyncopeEnduserSession(request);\n     }\n \n+    public SyncopeClientFactoryBean newClientFactory() {\n+        return new SyncopeClientFactoryBean().\n+                setAddress(scheme + \"://\" + host + \":\" + port + StringUtils.prependIfMissing(rootPath, \"/\")).\n+                setUseCompression(BooleanUtils.toBoolean(useGZIPCompression));\n+    }\n+\n     protected Class<? extends WebPage> getSignInPageClass() {\n         return Login.class;\n     }"},{"sha":"78b2c0fc90160808a1f63bbe1311197b7ecf104a","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/init/ClassPathScanImplementationLookup.java","status":"modified","additions":22,"deletions":10,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Finit%2FClassPathScanImplementationLookup.java?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -24,7 +24,9 @@\n import java.util.List;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.client.enduser.annotations.Resource;\n+import org.apache.syncope.client.enduser.pages.BaseExtPage;\n import org.apache.syncope.client.ui.commons.annotations.BinaryPreview;\n+import org.apache.syncope.client.ui.commons.annotations.ExtPage;\n import org.apache.syncope.client.ui.commons.markup.html.form.preview.AbstractBinaryPreviewer;\n import org.apache.syncope.client.ui.commons.panels.SSOLoginFormPanel;\n import org.apache.wicket.request.resource.AbstractResource;\n@@ -39,13 +41,15 @@ public class ClassPathScanImplementationLookup {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ClassPathScanImplementationLookup.class);\n \n-    private static final String DEFAULT_BASE_PACKAGE = \"org.apache.syncope.client.enduser\";\n+    private static final String DEFAULT_BASE_PACKAGE = \"org.apache.syncope\";\n \n-    private List<Class<? extends SSOLoginFormPanel>> ssoLoginFormPanels = new ArrayList<>();\n+    private final List<Class<? extends SSOLoginFormPanel>> ssoLoginFormPanels = new ArrayList<>();\n \n     private List<Class<? extends AbstractResource>> resources = new ArrayList<>();\n \n-    private List<Class<? extends AbstractBinaryPreviewer>> previewers = new ArrayList<>();\n+    private final List<Class<? extends AbstractBinaryPreviewer>> previewers = new ArrayList<>();\n+\n+    private final List<Class<? extends BaseExtPage>> extPages = new ArrayList<>();\n \n     /**\n      * This method can be overridden by subclasses to customize classpath scan.\n@@ -58,19 +62,23 @@ protected String getBasePackage() {\n \n     @SuppressWarnings(\"unchecked\")\n     public void load() {\n-        resources = new ArrayList<>();\n-        previewers = new ArrayList<>();\n-\n         ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n         scanner.addIncludeFilter(new AssignableTypeFilter(AbstractResource.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(BaseExtPage.class));\n \n         for (BeanDefinition bd : scanner.findCandidateComponents(getBasePackage())) {\n             try {\n                 Class<?> clazz = ClassUtils.resolveClassName(bd.getBeanClassName(), ClassUtils.getDefaultClassLoader());\n-                boolean isAbsractClazz = Modifier.isAbstract(clazz.getModifiers());\n-\n-                if (!isAbsractClazz) {\n-                    if (AbstractResource.class.isAssignableFrom(clazz)) {\n+                boolean isAbstractClazz = Modifier.isAbstract(clazz.getModifiers());\n+                if (!isAbstractClazz) {\n+                    if (BaseExtPage.class.isAssignableFrom(clazz)) {\n+                        if (clazz.isAnnotationPresent(ExtPage.class)) {\n+                            extPages.add((Class<? extends BaseExtPage>) clazz);\n+                        } else {\n+                            LOG.error(\"Could not find annotation {} in {}, ignoring\",\n+                                    ExtPage.class.getName(), clazz.getName());\n+                        }\n+                    } else if (AbstractResource.class.isAssignableFrom(clazz)) {\n                         if (clazz.isAnnotationPresent(Resource.class)) {\n                             resources.add((Class<? extends AbstractResource>) clazz);\n                         } else if (AbstractBinaryPreviewer.class.isAssignableFrom(clazz)) {\n@@ -110,4 +118,8 @@ public List<Class<? extends SSOLoginFormPanel>> getSSOLoginFormPanels() {\n         return this.ssoLoginFormPanels;\n     }\n \n+    public List<Class<? extends BaseExtPage>> getExtPageClasses() {\n+        return extPages;\n+    }\n+\n }"},{"sha":"fafa87f93e0a9679183ed00ea13c9fa7d20fce39","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/navigation/Navbar.java","status":"modified","additions":62,"deletions":1,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fnavigation%2FNavbar.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fnavigation%2FNavbar.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fnavigation%2FNavbar.java?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -18,15 +18,76 @@\n  */\n package org.apache.syncope.client.enduser.navigation;\n \n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.enduser.pages.BaseEnduserWebPage;\n+import org.apache.syncope.client.enduser.pages.BaseExtPage;\n+import org.apache.syncope.client.ui.commons.annotations.ExtPage;\n+import org.apache.wicket.AttributeModifier;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.Page;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.behavior.Behavior;\n+import org.apache.wicket.markup.ComponentTag;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.WebPage;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.link.BookmarkablePageLink;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n import org.apache.wicket.markup.html.panel.Panel;\n \n public class Navbar extends Panel {\n \n     private static final long serialVersionUID = 1323251762654401168L;\n \n-    public Navbar(final String id) {\n+    private final ListView<Class<? extends BaseExtPage>> extPages;\n+\n+    public Navbar(final String id, final List<Class<? extends BaseExtPage>> extPageClasses) {\n         super(id);\n         setOutputMarkupId(true);\n+\n+        extPages = new ListView<Class<? extends BaseExtPage>>(\"extPages\", extPageClasses) {\n+\n+            private static final long serialVersionUID = 4949588177564901031L;\n+\n+            @Override\n+            protected void populateItem(final ListItem<Class<? extends BaseExtPage>> item) {\n+                WebMarkupContainer containingLI = new WebMarkupContainer(\"extPageLI\");\n+                item.add(containingLI);\n+                if (item.getModelObject().equals(BaseEnduserWebPage.class)) {\n+                    containingLI.add(new Behavior() {\n+\n+                        private static final long serialVersionUID = 1469628524240283489L;\n+\n+                        @Override\n+                        public void onComponentTag(final Component component, final ComponentTag tag) {\n+                            tag.put(\"class\", \"active\");\n+                        }\n+                    });\n+                }\n+\n+                ExtPage ann = item.getModelObject().getAnnotation(ExtPage.class);\n+\n+                BookmarkablePageLink<Page> link = new BookmarkablePageLink<>(\"extPage\", item.getModelObject());\n+                link.add(new Label(\"extPageLabel\", ann.label()));\n+                if (StringUtils.isNotBlank(ann.listEntitlement())) {\n+                    MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, ann.listEntitlement());\n+                }\n+                containingLI.add(link);\n+\n+                Label extPageIcon = new Label(\"extPageIcon\");\n+                extPageIcon.add(new AttributeModifier(\"class\", \"fa \" + ann.icon()));\n+                link.add(extPageIcon);\n+            }\n+        };\n+        extPages.setOutputMarkupId(true);\n+        extPages.setVisible(!extPageClasses.isEmpty());\n+        add(extPages);\n+    }\n+\n+    public ListView<Class<? extends BaseExtPage>> getExtPages() {\n+        return extPages;\n     }\n \n }"},{"sha":"bc7edc4667714d6627278279a3ee94fbdf758bd8","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/pages/BaseEnduserWebPage.java","status":"modified","additions":24,"deletions":1,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FBaseEnduserWebPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FBaseEnduserWebPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FBaseEnduserWebPage.java?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -18,16 +18,24 @@\n  */\n package org.apache.syncope.client.enduser.pages;\n \n+import org.apache.syncope.client.enduser.init.ClassPathScanImplementationLookup;\n import org.apache.syncope.client.enduser.navigation.Navbar;\n import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.behavior.Behavior;\n+import org.apache.wicket.markup.ComponentTag;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n \n public class BaseEnduserWebPage extends BaseWebPage {\n \n     private static final long serialVersionUID = 5760583420031293480L;\n \n     protected final Navbar navbar;\n \n+    @SpringBean\n+    protected ClassPathScanImplementationLookup lookup;\n+\n     public BaseEnduserWebPage() {\n         this(null);\n \n@@ -37,8 +45,23 @@ public BaseEnduserWebPage() {\n     public BaseEnduserWebPage(final PageParameters parameters) {\n         super(parameters);\n \n-        navbar = new Navbar(\"navbar\");\n+        navbar = new Navbar(\"navbar\", lookup.getExtPageClasses());\n         body.add(navbar);\n+\n+        if (getPage() instanceof BaseExtPage) {\n+            navbar.getExtPages().add(new Behavior() {\n+\n+                private static final long serialVersionUID = 1469628524240283489L;\n+\n+                @Override\n+                public void onComponentTag(final Component component, final ComponentTag tag) {\n+                    tag.put(\"class\", \"treeview-menu menu-open\");\n+                    tag.put(\"style\", \"display: block;\");\n+                }\n+\n+            });\n+\n+        }\n     }\n \n }"},{"sha":"ace1d2fa9f3f456580e34e6b7776741344edcebf","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/pages/BaseExtPage.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FBaseExtPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FBaseExtPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FBaseExtPage.java?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.enduser.pages;\n+\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+\n+public abstract class BaseExtPage extends BaseEnduserWebPage {\n+\n+    private static final long serialVersionUID = 4627828052717627159L;\n+\n+    public BaseExtPage() {\n+        super();\n+    }\n+\n+    public BaseExtPage(final PageParameters parameters) {\n+        super(parameters);\n+    }\n+}"},{"sha":"aaf3d620a290ecaf1ad923b2d60115f049c295ec","filename":"client/idrepo/enduser/src/main/resources/org/apache/syncope/client/enduser/SyncopeWebApplication.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.properties?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -50,6 +50,7 @@ key=Key\n types=Types\n self-registration-link=Self Registration\n self-pwd-reset-link=Self Password Reset\n+user-requests-link=User Requests\n realms=Realms\n roles=Roles\n policies=Policies"},{"sha":"cced63593e24e7ab6c02ff0306b85883a62d986f","filename":"client/idrepo/enduser/src/main/resources/org/apache/syncope/client/enduser/navigation/Navbar.html","status":"modified","additions":6,"deletions":26,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fnavigation%2FNavbar.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fnavigation%2FNavbar.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fnavigation%2FNavbar.html?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -45,7 +45,7 @@\n           </a>\n         </div>\n \n-        <div id=\"navbar\" class=\"navbar-collapse collapse in\" aria-expanded=\"true\">\n+        <div id=\"navbarDetails\" class=\"navbar-collapse collapse in\" aria-expanded=\"true\">\n           <ul class=\"nav navbar-nav\">\n             <li class=\"active\">\n               <a href=\"#\"\n@@ -55,31 +55,11 @@\n                 <span class=\"sr-only\">(current)</span>\n               </a>\n             </li>\n-\n-            <li class=\"dropdown\">\n-              <a href=\"#\" class=\"dropdown-toggle\" \n-                 data-toggle=\"dropdown\" \n-                 role=\"button\" \n-                 aria-label=\"'User requests' menu element\"\n-                 tabindex=\"2\"\n-                 aria-haspopup=\"true\" \n-                 aria-expanded=\"false\">\n-                User Requests\n-                <span class=\"caret\"></span>\n-              </a>\n-              <ul class=\"dropdown-menu\">\n-                <li>\n-                  <a href=\"#\" aria-label=\"'Start new requests' menu element\" tabindex=\"3\">\n-                    Start new requests\n-                  </a>\n-                </li>\n-                <li>\n-                  <a href=\"#\" aria-label=\"'View ongoing requests' menu element\" tabindex=\"4\">\n-                    View ongoing requests\n-                  </a>\n-                </li>\n-              </ul>\n-            </li>\n+            <ul wicket:id=\"extPages\" class=\"nav navbar-nav\">\n+              <li wicket:id=\"extPageLI\" class=\"active\">\n+                <a href=\"#\" wicket:id=\"extPage\"><i wicket:id=\"extPageIcon\"></i><span wicket:id=\"extPageLabel\"/></a>\n+              </li>\n+            </ul>\n           </ul>\n         </div>\n       </div>"},{"sha":"3f6150dd166a1de5be112630446580ec0dbb210d","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/pages/CamelRoutes.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes.java?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.common.lib.types.CamelEntitlement;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n-import org.apache.syncope.client.console.annotations.ExtPage;\n+import org.apache.syncope.client.ui.commons.annotations.ExtPage;\n import org.apache.syncope.client.console.panels.CamelRoutesDirectoryPanel;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n import org.apache.wicket.extensions.markup.html.tabs.ITab;"},{"sha":"e948bfc6c708c32ac4da409473a27ae1d6a1a3cf","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/widgets/CamelMetricsWidget.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.java?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -21,7 +21,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.stream.Collectors;\n-import org.apache.syncope.client.console.annotations.ExtWidget;\n+import org.apache.syncope.client.ui.commons.annotations.ExtWidget;\n import org.apache.syncope.client.console.chartjs.Bar;\n import org.apache.syncope.client.console.chartjs.BarDataSet;\n import org.apache.syncope.client.console.chartjs.ChartJSPanel;"},{"sha":"7e972ab307ffeb307000cf4109790df11c589ec2","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/Flowable.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FFlowable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FFlowable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FFlowable.java?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.client.console.pages;\n \n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n-import org.apache.syncope.client.console.annotations.ExtPage;\n+import org.apache.syncope.client.ui.commons.annotations.ExtPage;\n import org.apache.syncope.client.console.panels.BpmnProcessDirectoryPanel;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n import org.apache.syncope.common.lib.to.BpmnProcess;"},{"sha":"d8d13190d21898e8ca347ae37e618c5f6d9a3e55","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/widgets/UserRequestFormsWidget.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FUserRequestFormsWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FUserRequestFormsWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FUserRequestFormsWidget.java?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -25,7 +25,7 @@\n import java.util.List;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.syncope.client.console.annotations.ExtWidget;\n+import org.apache.syncope.client.ui.commons.annotations.ExtWidget;\n import org.apache.syncope.client.console.pages.UserRequests;\n import org.apache.syncope.client.console.rest.UserRequestRestClient;\n import org.apache.syncope.client.console.wicket.ajax.IndicatorAjaxTimerBehavior;"},{"sha":"83a77cb2dc02253a92e5690ab584a105deb8736d","filename":"ext/flowable/client-enduser/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fflowable%2Fclient-enduser%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fflowable%2Fclient-enduser%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-enduser%2Fpom.xml?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -50,8 +50,8 @@ under the License.\n     </dependency>\n     \n     <dependency>\n-      <groupId>org.apache.syncope.client</groupId>\n-      <artifactId>syncope-client-enduser</artifactId>\n+      <groupId>org.apache.syncope.client.idrepo</groupId>\n+      <artifactId>syncope-client-idrepo-enduser</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n  "},{"sha":"7ad531d88861756de7aed4ed3126c1b9e95ac790","filename":"ext/flowable/client-enduser/src/main/java/org/apache/syncope/client/enduser/markup/html/form/BpmnProcessesAjaxPanel.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmarkup%2Fhtml%2Fform%2FBpmnProcessesAjaxPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmarkup%2Fhtml%2Fform%2FBpmnProcessesAjaxPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmarkup%2Fhtml%2Fform%2FBpmnProcessesAjaxPanel.java?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.enduser.markup.html.form;\n+\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.wicket.behavior.Behavior;\n+import org.apache.wicket.model.IModel;\n+\n+public class BpmnProcessesAjaxPanel extends AjaxTextFieldPanel {\n+\n+    private static final long serialVersionUID = 9082907182704884397L;\n+\n+    public BpmnProcessesAjaxPanel(\n+            final String id, final String name, final IModel<String> model) {\n+        this(id, name, model, null);\n+    }\n+\n+    public BpmnProcessesAjaxPanel(\n+            final String id, final String name, final IModel<String> model, final Behavior behavior) {\n+        super(id, name, model, false);\n+        if (behavior != null) {\n+            field.add(behavior);\n+        }\n+    }\n+\n+}"},{"sha":"2a33195c3bdbfe8261bf6533103d1c6ad7f1912b","filename":"ext/flowable/client-enduser/src/main/java/org/apache/syncope/client/enduser/pages/Flowable.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FFlowable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FFlowable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FFlowable.java?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.enduser.pages;\n+\n+import java.util.stream.Collectors;\n+import org.apache.syncope.client.enduser.markup.html.form.BpmnProcessesAjaxPanel;\n+import org.apache.syncope.client.enduser.rest.BpmnProcessRestClient;\n+import org.apache.syncope.client.enduser.rest.UserRequestRestClient;\n+import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n+import org.apache.syncope.client.ui.commons.annotations.ExtPage;\n+import org.apache.syncope.common.lib.types.FlowableEntitlement;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+\n+@ExtPage(label = \"User Requests\", icon = \"fa-briefcase\",\n+        listEntitlement = FlowableEntitlement.BPMN_PROCESS_GET, priority = 200)\n+public class Flowable extends BaseExtPage {\n+\n+    private static final long serialVersionUID = -8781434495150074529L;\n+\n+    private final Model<String> bpmnProcessModel = new Model<>();\n+\n+    private final BpmnProcessRestClient restClient = new BpmnProcessRestClient();\n+\n+    private final UserRequestRestClient userRequestRestClient = new UserRequestRestClient();\n+\n+    public Flowable(final PageParameters parameters) {\n+        super(parameters);\n+\n+        final WebMarkupContainer content = new WebMarkupContainer(\"content\");\n+        content.setOutputMarkupId(true);\n+        // autocomplete select with bpmnProcesses\n+        final BpmnProcessesAjaxPanel bpmnProcesses =\n+                new BpmnProcessesAjaxPanel(\"bpmnProcesses\", \"bpmnProcesses\", bpmnProcessModel,\n+                        new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+                    private static final long serialVersionUID = -1107858522700306810L;\n+\n+                    @Override\n+                    protected void onUpdate(final AjaxRequestTarget target) {\n+                        userRequestRestClient.start(bpmnProcessModel.getObject(), null);\n+                    }\n+                });\n+        bpmnProcesses.setChoices(restClient.getDefinitions().stream()\n+                .filter(definition -> !definition.isUserWorkflow())\n+                .map(definition -> definition.getKey()).collect(Collectors.toList()));\n+        content.add(bpmnProcesses);\n+\n+        body.add(content);\n+    }\n+}"},{"sha":"e629754b85ef48743d850eb013a6739ca1582918","filename":"ext/flowable/client-enduser/src/main/java/org/apache/syncope/client/enduser/resources/BpmnProcessList.java","status":"removed","additions":0,"deletions":84,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/578bc5eea7e61fc5c2bfa6519c9225502ee37040/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FBpmnProcessList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/578bc5eea7e61fc5c2bfa6519c9225502ee37040/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FBpmnProcessList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FBpmnProcessList.java?ref=578bc5eea7e61fc5c2bfa6519c9225502ee37040","patch":"@@ -1,84 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.enduser.resources;\n-\n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n-import org.apache.syncope.client.enduser.annotations.Resource;\n-import org.apache.syncope.common.lib.to.BpmnProcess;\n-import org.apache.syncope.common.rest.api.service.BpmnProcessService;\n-import org.apache.wicket.request.resource.AbstractResource;\n-import org.apache.wicket.request.resource.IResource;\n-\n-@Resource(key = \"bpmnProcessesList\", path = \"/api/flowable/bpmnProcesses/\")\n-public class BpmnProcessList extends BaseResource {\n-\n-    private static final long serialVersionUID = 7273151109078469253L;\n-\n-    @Override\n-    protected ResourceResponse newResourceResponse(final IResource.Attributes attributes) {\n-        LOG.debug(\"List available Flowable BPMN processes definitions [{}] useful to start User Requests\");\n-\n-        ResourceResponse response = new AbstractResource.ResourceResponse();\n-        response.setContentType(MediaType.APPLICATION_JSON);\n-        try {\n-            HttpServletRequest request = (HttpServletRequest) attributes.getRequest().getContainerRequest();\n-            if (!xsrfCheck(request)) {\n-                LOG.error(\"XSRF TOKEN does not match\");\n-                response.setError(Response.Status.BAD_REQUEST.getStatusCode(), \"XSRF TOKEN does not match\");\n-                return response;\n-            }\n-\n-            final List<BpmnProcess> bpmnProcesses = SyncopeEnduserSession.get().\n-                    getService(BpmnProcessService.class).list();\n-\n-            response.setWriteCallback(new AbstractResource.WriteCallback() {\n-\n-                @Override\n-                public void writeData(final IResource.Attributes attributes) throws IOException {\n-                    // retain also not userWorkflow processes\n-                    attributes.getResponse().write(MAPPER.writeValueAsString(bpmnProcesses == null\n-                            ? Collections.<BpmnProcess>emptyList()\n-                            : bpmnProcesses.stream().filter(bpmnProcess -> !bpmnProcess.isUserWorkflow()).collect(\n-                                    Collectors.toList())));\n-                }\n-            });\n-\n-            response.setContentType(MediaType.APPLICATION_JSON);\n-            response.setTextEncoding(StandardCharsets.UTF_8.name());\n-            response.setStatusCode(Response.Status.OK.getStatusCode());\n-        } catch (Exception e) {\n-            LOG.error(\"Error retrieving BPMN processes\", e);\n-            response.setError(Response.Status.BAD_REQUEST.getStatusCode(), new StringBuilder()\n-                    .append(\"ErrorMessage{{ \")\n-                    .append(e.getMessage())\n-                    .append(\" }}\")\n-                    .toString());\n-        }\n-\n-        return response;\n-    }\n-}"},{"sha":"3e1116b0990088d36db72a2b350fd6089b2e7c78","filename":"ext/flowable/client-enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserRequestCancelResource.java","status":"removed","additions":0,"deletions":99,"changes":99,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/578bc5eea7e61fc5c2bfa6519c9225502ee37040/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserRequestCancelResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/578bc5eea7e61fc5c2bfa6519c9225502ee37040/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserRequestCancelResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserRequestCancelResource.java?ref=578bc5eea7e61fc5c2bfa6519c9225502ee37040","patch":"@@ -1,99 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.enduser.resources;\n-\n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.ws.rs.HttpMethod;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n-import org.apache.syncope.client.enduser.annotations.Resource;\n-import org.apache.syncope.common.rest.api.service.UserRequestService;\n-import org.apache.wicket.request.IRequestParameters;\n-import org.apache.wicket.request.mapper.parameter.PageParameters;\n-import org.apache.wicket.request.resource.AbstractResource;\n-import org.apache.wicket.request.resource.IResource;\n-import org.apache.wicket.util.string.StringValue;\n-\n-@Resource(key = \"userRequestCancel\", path = \"/api/flowable/userRequests/${executionId}\")\n-public class UserRequestCancelResource extends BaseResource {\n-\n-    private static final long serialVersionUID = 7273151109078469253L;\n-\n-    @Override\n-    protected ResourceResponse newResourceResponse(final IResource.Attributes attributes) {\n-\n-        ResourceResponse response = new AbstractResource.ResourceResponse();\n-        response.setContentType(MediaType.APPLICATION_JSON);\n-        StringValue executionId;\n-        try {\n-            HttpServletRequest request = (HttpServletRequest) attributes.getRequest().getContainerRequest();\n-            if (!xsrfCheck(request)) {\n-                LOG.error(\"XSRF TOKEN does not match\");\n-                response.setError(Response.Status.BAD_REQUEST.getStatusCode(), \"XSRF TOKEN does not match\");\n-                return response;\n-            }\n-\n-            if (!HttpMethod.DELETE.equals(request.getMethod())) {\n-                throw new UnsupportedOperationException(\"Unsupported operation, only DELETE allowed\");\n-            }\n-\n-            PageParameters parameters = attributes.getParameters();\n-            executionId = parameters.get(\"executionId\");\n-            IRequestParameters requestParameters = attributes.getRequest().getQueryParameters();\n-            StringValue reason = requestParameters.getParameterValue(\"reason\");\n-            LOG.debug(\"Cancel Flowable User Request with execution id [{}] for user [{}] with reason [{}]\", executionId,\n-                    SyncopeEnduserSession.get().getSelfTO().getUsername(), reason);\n-            if (executionId.isEmpty()) {\n-                throw new IllegalArgumentException(\"Empty executionId, please provide a value\");\n-            }\n-\n-            SyncopeEnduserSession.get().getService(UserRequestService.class).cancel(executionId.toString(),\n-                    reason.toString());\n-\n-            final String outcomeMessage = String.format(\n-                    \"User Request with execution id [%s] successfully canceled for User [%s]\", executionId.\n-                            toString(), SyncopeEnduserSession.get().getSelfTO().getUsername());\n-\n-            response.setWriteCallback(new AbstractResource.WriteCallback() {\n-\n-                @Override\n-                public void writeData(final IResource.Attributes attributes) throws IOException {\n-                    attributes.getResponse().write(outcomeMessage);\n-                }\n-            });\n-\n-            response.setContentType(MediaType.APPLICATION_JSON);\n-            response.setTextEncoding(StandardCharsets.UTF_8.name());\n-            response.setStatusCode(Response.Status.OK.getStatusCode());\n-        } catch (Exception e) {\n-            LOG.error(\"Error cancelling User Request for [{}]\", SyncopeEnduserSession.get().getSelfTO().getUsername(),\n-                    e);\n-            response.setError(Response.Status.BAD_REQUEST.getStatusCode(), new StringBuilder()\n-                    .append(\"ErrorMessage{{ \")\n-                    .append(e.getMessage())\n-                    .append(\" }}\")\n-                    .toString());\n-        }\n-\n-        return response;\n-    }\n-}"},{"sha":"f7b94207f509638f462a5e2937030b94a7cc92ac","filename":"ext/flowable/client-enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserRequestFormClaimResource.java","status":"removed","additions":0,"deletions":88,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/578bc5eea7e61fc5c2bfa6519c9225502ee37040/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserRequestFormClaimResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/578bc5eea7e61fc5c2bfa6519c9225502ee37040/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserRequestFormClaimResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserRequestFormClaimResource.java?ref=578bc5eea7e61fc5c2bfa6519c9225502ee37040","patch":"@@ -1,88 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.enduser.resources;\n-\n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n-import org.apache.syncope.client.enduser.annotations.Resource;\n-import org.apache.syncope.common.lib.to.UserRequestForm;\n-import org.apache.syncope.common.rest.api.service.UserRequestService;\n-import org.apache.wicket.request.mapper.parameter.PageParameters;\n-import org.apache.wicket.request.resource.AbstractResource;\n-import org.apache.wicket.request.resource.IResource;\n-import org.apache.wicket.util.string.StringValue;\n-\n-@Resource(key = \"userRequestCancelByUsername\", path = \"/api/flowable/userRequests/forms/${taskId}/claim\")\n-public class UserRequestFormClaimResource extends BaseResource {\n-\n-    private static final long serialVersionUID = 7273151109078469253L;\n-\n-    @Override\n-    protected ResourceResponse newResourceResponse(final IResource.Attributes attributes) {\n-\n-        ResourceResponse response = new AbstractResource.ResourceResponse();\n-        response.setContentType(MediaType.APPLICATION_JSON);\n-        StringValue taskId;\n-        try {\n-            HttpServletRequest request = (HttpServletRequest) attributes.getRequest().getContainerRequest();\n-            if (!xsrfCheck(request)) {\n-                LOG.error(\"XSRF TOKEN does not match\");\n-                response.setError(Response.Status.BAD_REQUEST.getStatusCode(), \"XSRF TOKEN does not match\");\n-                return response;\n-            }\n-\n-            PageParameters parameters = attributes.getParameters();\n-            taskId = parameters.get(\"taskId\");\n-            LOG.debug(\"Claim Flowable User Request Form with task id [{}] for user [{}] with reason [{}]\", taskId,\n-                    SyncopeEnduserSession.get().getSelfTO().getUsername());\n-            if (taskId.isEmpty()) {\n-                throw new IllegalArgumentException(\"Empty taskId, please provide a value\");\n-            }\n-            UserRequestForm requestForm = SyncopeEnduserSession.get().getService(UserRequestService.class).claimForm(\n-                    taskId.toString());\n-\n-            response.setWriteCallback(new AbstractResource.WriteCallback() {\n-\n-                @Override\n-                public void writeData(final IResource.Attributes attributes) throws IOException {\n-                    attributes.getResponse().write(MAPPER.writeValueAsString(requestForm));\n-                }\n-            });\n-\n-            response.setContentType(MediaType.APPLICATION_JSON);\n-            response.setTextEncoding(StandardCharsets.UTF_8.name());\n-            response.setStatusCode(Response.Status.OK.getStatusCode());\n-        } catch (Exception e) {\n-            LOG.\n-                    error(\"Error claiming User Request Form for [{}]\", SyncopeEnduserSession.get().getSelfTO().\n-                            getUsername(), e);\n-            response.setError(Response.Status.BAD_REQUEST.getStatusCode(), new StringBuilder()\n-                    .append(\"ErrorMessage{{ \")\n-                    .append(e.getMessage())\n-                    .append(\" }}\")\n-                    .toString());\n-        }\n-\n-        return response;\n-    }\n-}"},{"sha":"c51027b9dc13c09dd3bb0faa0c5482471e2ce9ac","filename":"ext/flowable/client-enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserRequestsFormsResource.java","status":"removed","additions":0,"deletions":162,"changes":162,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/578bc5eea7e61fc5c2bfa6519c9225502ee37040/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserRequestsFormsResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/578bc5eea7e61fc5c2bfa6519c9225502ee37040/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserRequestsFormsResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserRequestsFormsResource.java?ref=578bc5eea7e61fc5c2bfa6519c9225502ee37040","patch":"@@ -1,162 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.enduser.resources;\n-\n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-import java.text.ParseException;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.ws.rs.HttpMethod;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.time.FastDateFormat;\n-import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n-import org.apache.syncope.client.enduser.annotations.Resource;\n-import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.lib.to.UserRequestForm;\n-import org.apache.syncope.common.lib.types.UserRequestFormPropertyType;\n-import org.apache.syncope.common.rest.api.beans.UserRequestFormQuery;\n-import org.apache.syncope.common.rest.api.service.UserRequestService;\n-import org.apache.wicket.request.IRequestParameters;\n-import org.apache.wicket.request.resource.AbstractResource;\n-import org.apache.wicket.request.resource.IResource;\n-import org.apache.wicket.util.string.StringValue;\n-\n-@Resource(key = \"userRequestsForms\", path = \"/api/flowable/userRequests/forms\")\n-public class UserRequestsFormsResource extends BaseResource {\n-\n-    private static final long serialVersionUID = 7273151109078469253L;\n-\n-    @Override\n-    protected ResourceResponse newResourceResponse(final IResource.Attributes attributes) {\n-\n-        ResourceResponse response = new AbstractResource.ResourceResponse();\n-        response.setContentType(MediaType.APPLICATION_JSON);\n-        response.setTextEncoding(StandardCharsets.UTF_8.name());\n-        StringValue username = StringValue.valueOf(SyncopeEnduserSession.get().getSelfTO().getUsername());\n-        try {\n-            HttpServletRequest request = (HttpServletRequest) attributes.getRequest().getContainerRequest();\n-            if (!xsrfCheck(request)) {\n-                LOG.error(\"XSRF TOKEN does not match\");\n-                response.setError(Response.Status.BAD_REQUEST.getStatusCode(), \"XSRF TOKEN does not match\");\n-                return response;\n-            }\n-\n-            switch (request.getMethod()) {\n-                case HttpMethod.GET:\n-                    IRequestParameters requestParameters = attributes.getRequest().getQueryParameters();\n-                    StringValue page = requestParameters.getParameterValue(\"page\");\n-                    StringValue size = requestParameters.getParameterValue(\"size\");\n-                    LOG.debug(\"List available Flowable User Requests Forms by user [{}]\", username);\n-                    final PagedResult<UserRequestForm> userRequestForms = SyncopeEnduserSession.get().\n-                            getService(UserRequestService.class).getForms(\n-                            new UserRequestFormQuery.Builder()\n-                                    .user(username.isEmpty()\n-                                            ? SyncopeEnduserSession.get().getSelfTO().getUsername()\n-                                            : username.toString())\n-                                    .page(page.isEmpty()\n-                                            ? 1\n-                                            : Integer.parseInt(page.toString()))\n-                                    .size(size.isEmpty()\n-                                            ? 10\n-                                            : Integer.parseInt(size.toString())).build());\n-\n-                    // Date -> millis conversion for Date properties of the form\n-                    userRequestForms.getResult().stream().forEach(form\n-                            -> form.getProperties().stream()\n-                                    .filter(prop -> UserRequestFormPropertyType.Date == prop.getType()\n-                                    && StringUtils.isNotBlank(prop.getValue()))\n-                                    .forEach(prop -> {\n-                                        try {\n-                                            prop.setValue(String.valueOf(FastDateFormat.getInstance(prop.\n-                                                    getDatePattern()).parse(prop.getValue()).getTime()));\n-                                        } catch (ParseException e) {\n-                                            LOG.error(\"Unable to parse date\", e);\n-                                        }\n-                                    }));\n-\n-                    response.setWriteCallback(new AbstractResource.WriteCallback() {\n-\n-                        @Override\n-                        public void writeData(final IResource.Attributes attributes) throws IOException {\n-                            attributes.getResponse().write(MAPPER.writeValueAsString(userRequestForms));\n-                        }\n-                    });\n-                    break;\n-                case HttpMethod.POST:\n-                    UserRequestForm requestForm = MAPPER.\n-                            readValue(request.getReader().readLine(), UserRequestForm.class);\n-                    if (requestForm == null) {\n-                        throw new IllegalArgumentException(\"Empty userRequestForm, please provide a valid one\");\n-                    }\n-\n-                    UserRequestService userRequestService = SyncopeEnduserSession.get().getService(\n-                            UserRequestService.class);\n-                    // 1. claim form as logged user\n-                    userRequestService.claimForm(requestForm.getTaskId());\n-                    // millis -> Date conversion for Date properties of the form\n-                    requestForm.getProperties().stream()\n-                            .filter(prop -> UserRequestFormPropertyType.Date == prop.getType()\n-                            && StringUtils.isNotBlank(prop.getValue()))\n-                            .forEach(prop -> {\n-                                try {\n-                                    prop.setValue(FastDateFormat.getInstance(prop.getDatePattern()).format(Long.valueOf(\n-                                            prop.getValue())));\n-                                } catch (NumberFormatException e) {\n-                                    LOG.error(\"Unable to format date\", e);\n-                                }\n-                            });\n-                    // 2. Submit form\n-                    LOG.debug(\"Submit Flowable User Request Form for user [{}]\", requestForm.getUsername());\n-                    userRequestService.submitForm(requestForm);\n-\n-                    response.setStatusCode(Response.Status.NO_CONTENT.getStatusCode());\n-                    response.setWriteCallback(new AbstractResource.WriteCallback() {\n-\n-                        @Override\n-                        public void writeData(final IResource.Attributes attributes) throws IOException {\n-                            // DO NOTHING\n-                        }\n-                    });\n-                    break;\n-                default:\n-                    LOG.error(\"Method [{}] not supported\", request.getMethod());\n-                    response.setError(Response.Status.BAD_REQUEST.getStatusCode(), new StringBuilder()\n-                            .append(\"ErrorMessage{{ \")\n-                            .append(\"Method not supported\")\n-                            .append(\" }}\")\n-                            .toString());\n-                    break;\n-            }\n-            response.setContentType(MediaType.APPLICATION_JSON);\n-            response.setTextEncoding(StandardCharsets.UTF_8.name());\n-            response.setStatusCode(Response.Status.OK.getStatusCode());\n-        } catch (Exception e) {\n-            LOG.error(\"Error dealing with forms of user [{}]\", username, e);\n-            response.setError(Response.Status.BAD_REQUEST.getStatusCode(), new StringBuilder()\n-                    .append(\"ErrorMessage{{ \")\n-                    .append(e.getMessage())\n-                    .append(\" }}\")\n-                    .toString());\n-        }\n-\n-        return response;\n-    }\n-}"},{"sha":"812e408845a212304a214a5bd8f2329c56beb225","filename":"ext/flowable/client-enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserRequestsResource.java","status":"removed","additions":0,"deletions":130,"changes":130,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/578bc5eea7e61fc5c2bfa6519c9225502ee37040/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserRequestsResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/578bc5eea7e61fc5c2bfa6519c9225502ee37040/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserRequestsResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserRequestsResource.java?ref=578bc5eea7e61fc5c2bfa6519c9225502ee37040","patch":"@@ -1,130 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.enduser.resources;\n-\n-import static org.apache.syncope.client.enduser.resources.BaseResource.LOG;\n-\n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.ws.rs.HttpMethod;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n-import org.apache.syncope.client.enduser.annotations.Resource;\n-import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.lib.to.UserRequest;\n-import org.apache.syncope.common.rest.api.beans.UserRequestQuery;\n-import org.apache.syncope.common.rest.api.service.UserRequestService;\n-import org.apache.wicket.request.IRequestParameters;\n-import org.apache.wicket.request.resource.AbstractResource;\n-import org.apache.wicket.request.resource.IResource;\n-import org.apache.wicket.util.string.StringValue;\n-\n-@Resource(key = \"userRequests\", path = \"/api/flowable/userRequests\")\n-public class UserRequestsResource extends BaseResource {\n-\n-    private static final long serialVersionUID = 7273151109078469253L;\n-\n-    @Override\n-    protected ResourceResponse newResourceResponse(final IResource.Attributes attributes) {\n-\n-        ResourceResponse response = new AbstractResource.ResourceResponse();\n-        response.setContentType(MediaType.APPLICATION_JSON);\n-        StringValue username = StringValue.valueOf(SyncopeEnduserSession.get().getSelfTO().getUsername());\n-        try {\n-            HttpServletRequest request = (HttpServletRequest) attributes.getRequest().getContainerRequest();\n-            if (!xsrfCheck(request)) {\n-                LOG.error(\"XSRF TOKEN does not match\");\n-                response.setError(Response.Status.BAD_REQUEST.getStatusCode(), \"XSRF TOKEN does not match\");\n-                return response;\n-            }\n-\n-            IRequestParameters requestParameters = attributes.getRequest().getQueryParameters();\n-            switch (request.getMethod()) {\n-                case HttpMethod.DELETE:\n-                    StringValue executionId = requestParameters.getParameterValue(\"executionId\");\n-                    StringValue reason = requestParameters.getParameterValue(\"reason\");\n-                    LOG.debug(\"Cancel Flowable User Request with execution id [{}] for user [{}] with reason [{}]\",\n-                            executionId, SyncopeEnduserSession.get().getSelfTO().getUsername(), reason);\n-                    if (executionId.isEmpty()) {\n-                        throw new IllegalArgumentException(\"Empty executionId, please provide a value\");\n-                    }\n-                    SyncopeEnduserSession.get().getService(UserRequestService.class).cancel(executionId.toString(),\n-                            reason.toString());\n-                    response.setStatusCode(Response.Status.NO_CONTENT.getStatusCode());\n-                    response.setWriteCallback(new AbstractResource.WriteCallback() {\n-\n-                        @Override\n-                        public void writeData(final IResource.Attributes attributes) throws IOException {\n-                            // DO NOTHING\n-                        }\n-                    });\n-                    break;\n-\n-                case HttpMethod.GET:\n-                    StringValue page = requestParameters.getParameterValue(\"page\");\n-                    StringValue size = requestParameters.getParameterValue(\"size\");\n-                    LOG.debug(\"List available Flowable User Requests for user [{}]\", username);\n-                    final PagedResult<UserRequest> userRequests = SyncopeEnduserSession.get().\n-                            getService(UserRequestService.class).list(\n-                            new UserRequestQuery.Builder()\n-                                    .user(username.isEmpty()\n-                                            ? SyncopeEnduserSession.get().getSelfTO().getUsername()\n-                                            : username.toString())\n-                                    .page(page.isEmpty()\n-                                            ? 1\n-                                            : Integer.parseInt(\n-                                                    page.toString()))\n-                                    .size(size.isEmpty()\n-                                            ? 10\n-                                            : Integer.parseInt(\n-                                                    size.toString())).build());\n-                    response.setWriteCallback(new AbstractResource.WriteCallback() {\n-\n-                        @Override\n-                        public void writeData(final IResource.Attributes attributes) throws IOException {\n-                            attributes.getResponse().write(MAPPER.writeValueAsString(userRequests));\n-                        }\n-                    });\n-                    break;\n-                default:\n-                    LOG.error(\"Method [{}] not supported\", request.getMethod());\n-                    response.setError(Response.Status.BAD_REQUEST.getStatusCode(), new StringBuilder()\n-                            .append(\"ErrorMessage{{ \")\n-                            .append(\"Method not supported\")\n-                            .append(\" }}\")\n-                            .toString());\n-                    break;\n-            }\n-            response.setContentType(MediaType.APPLICATION_JSON);\n-            response.setTextEncoding(StandardCharsets.UTF_8.name());\n-            response.setStatusCode(Response.Status.OK.getStatusCode());\n-        } catch (Exception e) {\n-            LOG.error(\"Error retrieving user requests for [{}]\", username, e);\n-            response.setError(Response.Status.BAD_REQUEST.getStatusCode(), new StringBuilder()\n-                    .append(\"ErrorMessage{{ \")\n-                    .append(e.getMessage())\n-                    .append(\" }}\")\n-                    .toString());\n-        }\n-\n-        return response;\n-    }\n-}"},{"sha":"4c657684169e6c3b5bbb073f92ae2277a7a3942e","filename":"ext/flowable/client-enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserRequestsStartResource.java","status":"removed","additions":0,"deletions":86,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/578bc5eea7e61fc5c2bfa6519c9225502ee37040/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserRequestsStartResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/578bc5eea7e61fc5c2bfa6519c9225502ee37040/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserRequestsStartResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserRequestsStartResource.java?ref=578bc5eea7e61fc5c2bfa6519c9225502ee37040","patch":"@@ -1,86 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.enduser.resources;\n-\n-import static org.apache.syncope.client.enduser.resources.BaseResource.LOG;\n-\n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n-import org.apache.syncope.client.enduser.annotations.Resource;\n-import org.apache.syncope.common.rest.api.service.UserRequestService;\n-import org.apache.wicket.request.mapper.parameter.PageParameters;\n-import org.apache.wicket.request.resource.AbstractResource;\n-import org.apache.wicket.request.resource.IResource;\n-import org.apache.wicket.util.string.StringValue;\n-\n-@Resource(key = \"userRequests\", path = \"/api/flowable/userRequests/start/${bpmnProcess}\")\n-public class UserRequestsStartResource extends BaseResource {\n-\n-    private static final long serialVersionUID = 7273151109078469253L;\n-\n-    @Override\n-    protected ResourceResponse newResourceResponse(final IResource.Attributes attributes) {\n-        ResourceResponse response = new AbstractResource.ResourceResponse();\n-        response.setContentType(MediaType.APPLICATION_JSON);\n-        StringValue bpmnProcess = null;\n-        try {\n-            HttpServletRequest request = (HttpServletRequest) attributes.getRequest().getContainerRequest();\n-            if (!xsrfCheck(request)) {\n-                LOG.error(\"XSRF TOKEN does not match\");\n-                response.setError(Response.Status.BAD_REQUEST.getStatusCode(), \"XSRF TOKEN does not match\");\n-                return response;\n-            }\n-\n-            PageParameters parameters = attributes.getParameters();\n-            bpmnProcess = parameters.get(\"bpmnProcess\");\n-\n-            LOG.debug(\"Start Flowable User Request from process [{}] for user [{}]\",\n-                    bpmnProcess, SyncopeEnduserSession.get().getSelfTO().getUsername());\n-            if (bpmnProcess.isEmpty()) {\n-                throw new IllegalArgumentException(\"Empty bpmnProcess, please provide a value\");\n-            }\n-            SyncopeEnduserSession.get().getService(UserRequestService.class).start(bpmnProcess.toString(), null);\n-            response.setStatusCode(Response.Status.NO_CONTENT.getStatusCode());\n-            response.setWriteCallback(new AbstractResource.WriteCallback() {\n-\n-                @Override\n-                public void writeData(final IResource.Attributes attributes) throws IOException {\n-                    // DO NOTHING\n-                }\n-            });\n-\n-            response.setContentType(MediaType.APPLICATION_JSON);\n-            response.setTextEncoding(StandardCharsets.UTF_8.name());\n-            response.setStatusCode(Response.Status.OK.getStatusCode());\n-        } catch (Exception e) {\n-            LOG.error(\"Error starting user request from [{}]\", bpmnProcess, e);\n-            response.setError(Response.Status.BAD_REQUEST.getStatusCode(), new StringBuilder()\n-                    .append(\"ErrorMessage{{ \")\n-                    .append(e.getMessage())\n-                    .append(\" }}\")\n-                    .toString());\n-        }\n-\n-        return response;\n-    }\n-}"},{"sha":"bb6462eb2af3e18914f8998f033d273955b52851","filename":"ext/flowable/client-enduser/src/main/java/org/apache/syncope/client/enduser/rest/BpmnProcessRestClient.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FBpmnProcessRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FBpmnProcessRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FBpmnProcessRestClient.java?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.enduser.rest;\n+\n+import java.io.InputStream;\n+import java.util.List;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.helpers.IOUtils;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n+import org.apache.syncope.common.lib.to.BpmnProcess;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.BpmnProcessService;\n+\n+public class BpmnProcessRestClient extends BaseRestClient {\n+\n+    private static final long serialVersionUID = 5049285686167071017L;\n+\n+    private BpmnProcessService getService(final MediaType mediaType) {\n+        return SyncopeEnduserSession.get().getService(mediaType, BpmnProcessService.class);\n+    }\n+\n+    public List<BpmnProcess> getDefinitions() {\n+        return getService(BpmnProcessService.class).list();\n+    }\n+\n+    public InputStream getDefinition(final MediaType mediaType, final String key) {\n+        Response response = getService(mediaType).get(key);\n+\n+        return (InputStream) response.getEntity();\n+    }\n+\n+    public byte[] getDiagram(final String key) {\n+        BpmnProcessService service = getService(BpmnProcessService.class);\n+        WebClient.client(service).accept(RESTHeaders.MEDIATYPE_IMAGE_PNG);\n+        Response response = service.exportDiagram(key);\n+\n+        byte[] diagram;\n+        try {\n+            diagram = IOUtils.readBytesFromStream((InputStream) response.getEntity());\n+        } catch (Exception e) {\n+            LOG.error(\"Could not get workflow diagram\", e);\n+            diagram = new byte[0];\n+        }\n+        return diagram;\n+    }\n+\n+}"},{"sha":"9a844ff5fd6880fd646dfe48e87efdefe87d9730","filename":"ext/flowable/client-enduser/src/main/java/org/apache/syncope/client/enduser/rest/UserRequestRestClient.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FUserRequestRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FUserRequestRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FUserRequestRestClient.java?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.enduser.rest;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.UserRequest;\n+import org.apache.syncope.common.lib.to.UserRequestForm;\n+import org.apache.syncope.common.rest.api.beans.UserRequestFormQuery;\n+import org.apache.syncope.common.rest.api.beans.UserRequestQuery;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n+import org.apache.syncope.common.rest.api.service.UserRequestService;\n+\n+public class UserRequestRestClient extends BaseRestClient {\n+\n+    private static final long serialVersionUID = -4785231164900813921L;\n+\n+    public int countUserRequests() {\n+        return getService(UserRequestService.class).\n+                list(new UserRequestQuery.Builder().page(1).size(1).build()).\n+                getTotalCount();\n+    }\n+\n+    public List<UserRequest> getUserRequests(\n+            final int page,\n+            final int size,\n+            final String username,\n+            final SortParam<String> sort) {\n+        return getService(UserRequestService.class).list(\n+                new UserRequestQuery.Builder()\n+                        .user(StringUtils.isBlank(username)\n+                                ? SyncopeEnduserSession.get().getSelfTO().getUsername()\n+                                : username)\n+                        .page(page).size(size).build()).getResult();\n+    }\n+\n+    public void cancelRequest(final String executionId, final String reason) {\n+        getService(UserRequestService.class).cancel(executionId, reason);\n+    }\n+\n+    public int countForms() {\n+        return getService(UserRequestService.class).\n+                getForms(new UserRequestFormQuery.Builder().page(1).size(1).build()).\n+                getTotalCount();\n+    }\n+\n+    public List<UserRequestForm> getForms(final int page, final int size, final SortParam<String> sort) {\n+        return getService(UserRequestService.class).\n+                getForms(new UserRequestFormQuery.Builder().page(page).size(size).orderBy(toOrderBy(sort)).build()).\n+                getResult();\n+    }\n+\n+    public Optional<UserRequestForm> getForm(final String userKey) {\n+        PagedResult<UserRequestForm> forms = getService(UserRequestService.class).\n+                getForms(new UserRequestFormQuery.Builder().user(userKey).page(1).size(1).build());\n+        UserRequestForm form = forms.getResult().isEmpty()\n+                ? null\n+                : forms.getResult().get(0);\n+        return Optional.ofNullable(form);\n+    }\n+\n+    public void submitForm(final UserRequestForm form) {\n+        getService(UserRequestService.class).submitForm(form);\n+    }\n+\n+    public void start(final String bpmnProcess, final String user) {\n+        getService(UserRequestService.class).start(bpmnProcess, user);\n+    }\n+\n+}"},{"sha":"9349c1894a2e8abdc727771895cb223ee88a9984","filename":"ext/flowable/client-enduser/src/main/resources/org/apache/syncope/client/enduser/pages/Flowable.html","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FFlowable.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FFlowable.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FFlowable.html?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -0,0 +1,33 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:extend>\n+    <section class=\"content-header\">\n+      <h1>&nbsp;</h1>\n+      <ol class=\"breadcrumb\">\n+        <li class=\"active\"><wicket:message key=\"extensions\"/></li>\n+        <li class=\"active\">Flowable</li>\n+      </ol>\n+    </section>\n+\n+    <section class=\"content\" wicket:id=\"content\">\n+      <span wicket:id=\"bpmnProcesses\">[BPMN PROCESSES]</span>\n+    </section>\n+  </wicket:extend>\n+</html>\n\\ No newline at end of file"},{"sha":"463bfa8a88694d2b89aae58cf990e0fabc1be4e6","filename":"ext/flowable/client-enduser/src/main/resources/org/apache/syncope/client/enduser/pages/Flowable.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FFlowable.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FFlowable.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FFlowable.properties?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+user.requests.accordion=${bpmnProcess}\n+"},{"sha":"a89d7624149f9f745db6ec0f3d0a4dd50896a5c7","filename":"ext/flowable/client-enduser/src/main/resources/org/apache/syncope/client/enduser/pages/UserRequestForms.html","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FUserRequestForms.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FUserRequestForms.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FUserRequestForms.html?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -0,0 +1,32 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:extend>\n+    <section class=\"content-header\">\n+      <h1>&nbsp;</h1>\n+      <ol class=\"breadcrumb\">\n+        <li class=\"active\"><wicket:message key=\"extensions\"/></li>\n+        <li class=\"active\">Flowable</li>\n+      </ol>\n+    </section>\n+\n+    <section class=\"content\" wicket:id=\"content\">\n+    </section>\n+  </wicket:extend>\n+</html>\n\\ No newline at end of file"},{"sha":"7e267016fd570938002ad324b3856cdb81de7a01","filename":"ext/flowable/client-enduser/src/main/resources/org/apache/syncope/client/enduser/pages/UserRequestForms.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FUserRequestForms.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FUserRequestForms.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FUserRequestForms.properties?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+xmlEditorTitle=Workflow XML Editor"},{"sha":"d335c4ba04677bc8ece84f737fa173e4a442730e","filename":"ext/oidcclient/client-console/src/main/java/org/apache/syncope/client/console/pages/OIDCClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient.java?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -22,7 +22,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n-import org.apache.syncope.client.console.annotations.ExtPage;\n+import org.apache.syncope.client.ui.commons.annotations.ExtPage;\n import org.apache.syncope.client.console.panels.OIDCProvidersDirectoryPanel;\n import org.apache.syncope.common.lib.types.OIDCClientEntitlement;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;"},{"sha":"9f020ddb301dcc715ac5c6f099f45b3880c0c536","filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/pages/SAML2SP.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SP.java?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -22,7 +22,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n-import org.apache.syncope.client.console.annotations.ExtPage;\n+import org.apache.syncope.client.ui.commons.annotations.ExtPage;\n import org.apache.syncope.client.console.panels.SAML2IdPsDirectoryPanel;\n import org.apache.syncope.client.console.panels.SAML2SPPanel;\n import org.apache.syncope.common.lib.types.SAML2SPEntitlement;"},{"sha":"230b66b3887ca8e81c7024c4bc8a4ff6967197c0","filename":"ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/pages/SCIMConfPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage.java?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -23,7 +23,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.syncope.client.console.annotations.ExtPage;\n+import org.apache.syncope.client.ui.commons.annotations.ExtPage;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.panels.SCIMConfPanel;\n import org.apache.syncope.client.console.rest.SCIMConfRestClient;"},{"sha":"0ec716a1b2510650e8ee0abc9049ff8e05d8598b","filename":"fit/console-reference/pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/fit%2Fconsole-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/fit%2Fconsole-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fpom.xml?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -61,6 +61,12 @@ under the License.\n       <version>${project.version}</version>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.apache.syncope.ext.flowable</groupId>\n+      <artifactId>syncope-ext-flowable-client-enduser</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.apache.syncope.ext.camel</groupId>\n       <artifactId>syncope-ext-camel-client-console</artifactId>"},{"sha":"244f387a1664c1eb72964f72176fa83ef66d305f","filename":"fit/core-reference/pom.xml","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -137,7 +137,13 @@ under the License.\n       <artifactId>syncope-ext-flowable-client-console</artifactId>\n       <version>${project.version}</version>\n       <scope>test</scope>\n-    </dependency>  \n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.flowable</groupId>\n+      <artifactId>syncope-ext-flowable-client-enduser</artifactId>\n+      <version>${project.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.apache.syncope.ext.camel</groupId>\n       <artifactId>syncope-ext-camel-rest-cxf</artifactId>"},{"sha":"084c95b23ec3ef6a56349b869a6fdf420c87f221","filename":"fit/enduser-reference/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a906fe8dcf2225c7f49c736987fe557beb26d4/fit%2Fenduser-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a906fe8dcf2225c7f49c736987fe557beb26d4/fit%2Fenduser-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fpom.xml?ref=44a906fe8dcf2225c7f49c736987fe557beb26d4","patch":"@@ -54,6 +54,11 @@ under the License.\n       <artifactId>syncope-common-keymaster-client-zookeeper</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.flowable</groupId>\n+      <artifactId>syncope-ext-flowable-client-enduser</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n     \n     <!-- TEST -->\n     <dependency>"}]}