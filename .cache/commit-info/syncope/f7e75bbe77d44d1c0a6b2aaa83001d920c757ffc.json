{"sha":"f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY3ZTc1YmJlNzdkNDRkMWMwYTZiMmFhYTgzMDAxZDkyMGM3NTdmZmM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-04-10T07:18:41Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2020-04-10T08:27:53Z"},"message":"[SYNCOPE-160] Adding missing support for AuthModule items","tree":{"sha":"e24d4045500cc7b5874e40121a3929adece87601","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e24d4045500cc7b5874e40121a3929adece87601"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"2a1d9e8c131cea6c4276e49e951657326fb2c0eb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2a1d9e8c131cea6c4276e49e951657326fb2c0eb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2a1d9e8c131cea6c4276e49e951657326fb2c0eb"}],"stats":{"total":682,"additions":332,"deletions":350},"files":[{"sha":"3a7196eea6cd760bba225435af870e908896d18a","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/commons/IdMImplementationInfoProvider.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMImplementationInfoProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMImplementationInfoProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMImplementationInfoProvider.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -71,10 +71,6 @@ public String getGroovyTemplateClassName(final String implementationType) {\n         String templateClassName;\n \n         switch (implementationType) {\n-            case IdMImplementationType.ITEM_TRANSFORMER:\n-                templateClassName = \"MyItemTransformer\";\n-                break;\n-\n             case IdMImplementationType.RECON_FILTER_BUILDER:\n                 templateClassName = \"MyReconFilterBuilder\";\n                 break;\n@@ -100,9 +96,9 @@ public String getGroovyTemplateClassName(final String implementationType) {\n                 break;\n \n             case IdMImplementationType.PROVISION_SORTER:\n-                templateClassName = \"MyProvisionSorter\";                \n+                templateClassName = \"MyProvisionSorter\";\n                 break;\n-                \n+\n             default:\n                 templateClassName = super.getGroovyTemplateClassName(implementationType);\n         }"},{"sha":"bf77409f7b3dbaac331e9ec8ef353a567d9f87a8","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ItemTransformersTogglePanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ItemTO;\n-import org.apache.syncope.common.lib.types.IdMImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink;\n@@ -64,7 +64,7 @@ protected List<String> load() {\n         Form<?> form = new Form<>(\"form\");\n         addInnerObject(form);\n \n-        List<String> choices = ImplementationRestClient.list(IdMImplementationType.ITEM_TRANSFORMER).stream().\n+        List<String> choices = ImplementationRestClient.list(IdRepoImplementationType.ITEM_TRANSFORMER).stream().\n                 map(EntityTO::getKey).sorted().collect(Collectors.toList());\n \n         form.add(new AjaxPalettePanel.Builder<String>().setAllowOrder(true).setRenderer(new IChoiceRenderer<String>() {"},{"sha":"6b4d2f19104236720d141511e0ed86cd36121c33","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/IdRepoImplementationInfoProvider.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoImplementationInfoProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoImplementationInfoProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoImplementationInfoProvider.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -114,6 +114,10 @@ public String getGroovyTemplateClassName(final String implementationType) {\n                 templateClassName = \"MyRecipientsProvider\";\n                 break;\n \n+            case IdRepoImplementationType.ITEM_TRANSFORMER:\n+                templateClassName = \"MyItemTransformer\";\n+                break;\n+\n             default:\n         }\n "},{"sha":"3f499bd9cc7affd61019aa5bf753463f4cfcab99","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/AuthModuleTO.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthModuleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthModuleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthModuleTO.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -22,6 +22,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n+import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n@@ -43,15 +44,16 @@ public class AuthModuleTO extends BaseBean implements EntityTO {\n \n     private String description;\n \n-    private final List<ItemTO> profileItems = new ArrayList<>();\n-\n     private AuthModuleConf conf;\n \n+    private final List<ItemTO> items = new ArrayList<>();\n+\n     @Override\n     public String getKey() {\n         return key;\n     }\n \n+    @PathParam(\"key\")\n     @Override\n     public void setKey(final String key) {\n         this.key = key;\n@@ -81,20 +83,19 @@ public void setConf(final AuthModuleConf conf) {\n         this.conf = conf;\n     }\n \n-    @XmlElementWrapper(name = \"profileItems\")\n-    @XmlElement(name = \"profileItem\")\n-    @JsonProperty(\"profileItems\")\n-    public List<ItemTO> getProfileItems() {\n-        return profileItems;\n+    @XmlElementWrapper(name = \"items\")\n+    @XmlElement(name = \"item\")\n+    @JsonProperty(\"items\")\n+    public List<ItemTO> getItems() {\n+        return items;\n     }\n \n     public boolean add(final ItemTO item) {\n-        return Optional.ofNullable(item)\n-                .filter(itemTO -> this.profileItems.contains(itemTO) || this.profileItems.add(itemTO)).isPresent();\n+        return Optional.ofNullable(item).filter(itemTO -> items.contains(itemTO) || items.add(itemTO)).isPresent();\n     }\n \n     public boolean remove(final ItemTO item) {\n-        return this.profileItems.remove(item);\n+        return this.items.remove(item);\n     }\n \n     @Override\n@@ -113,7 +114,7 @@ public boolean equals(final Object obj) {\n                 append(key, other.key).\n                 append(name, other.name).\n                 append(description, other.description).\n-                append(profileItems, other.profileItems).\n+                append(items, other.items).\n                 append(conf, other.conf).\n                 build();\n     }\n@@ -124,9 +125,8 @@ public int hashCode() {\n                 append(key).\n                 append(name).\n                 append(description).\n-                append(profileItems).\n+                append(items).\n                 append(conf).\n                 build();\n     }\n-\n }"},{"sha":"1a6a7a03011ec5212c086b49b86228abdd88d5f2","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/AMImplementationType.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMImplementationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMImplementationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMImplementationType.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -23,23 +23,20 @@\n \n public final class AMImplementationType {\n \n-    public static final String AUTH_POLICY_CONFIGURATIONS = \"AUTH_POLICY_CONFIGURATIONS\";\n+    public static final String AUTH_POLICY_CONF = \"AUTH_POLICY_CONF\";\n \n-    public static final String ACCESS_POLICY_CONFIGURATIONS = \"ACCESS_POLICY_CONFIGURATIONS\";\n+    public static final String ACCESS_POLICY_CONF = \"ACCESS_POLICY_CONF\";\n \n-    public static final String ATTR_RELEASE_POLICY_CONFIGURATIONS = \"ATTR_RELEASE_CONFIGURATIONS\";\n+    public static final String ATTR_RELEASE_POLICY_CONF = \"ATTR_RELEASE_POLICY_CONF\";\n \n     private AMImplementationType() {\n         // private constructor for static utility class\n     }\n \n     private static final Map<String, String> VALUES = Map.ofEntries(\n-            Pair.of(AUTH_POLICY_CONFIGURATIONS,\n-                    \"org.apache.syncope.common.lib.policy.AuthPolicyConf\"),\n-            Pair.of(ATTR_RELEASE_POLICY_CONFIGURATIONS,\n-                    \"org.apache.syncope.common.lib.policy.AttrReleasePolicyConf\"),\n-            Pair.of(ACCESS_POLICY_CONFIGURATIONS,\n-                    \"org.apache.syncope.common.lib.policy.AccessPolicyConf\"));\n+            Pair.of(AUTH_POLICY_CONF, \"org.apache.syncope.common.lib.policy.AuthPolicyConf\"),\n+            Pair.of(ACCESS_POLICY_CONF, \"org.apache.syncope.common.lib.policy.AccessPolicyConf\"),\n+            Pair.of(ATTR_RELEASE_POLICY_CONF, \"org.apache.syncope.common.lib.policy.AttrReleasePolicyConf\"));\n \n     public static Map<String, String> values() {\n         return VALUES;"},{"sha":"d617b42dfdb7be1784bb46d6fc2edc0c84c243c2","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AuthModuleService.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthModuleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthModuleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthModuleService.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -62,8 +62,7 @@ public interface AuthModuleService extends JAXRSService {\n     @GET\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    AuthModuleTO read(\n-            @NotNull @PathParam(\"key\") String key);\n+    AuthModuleTO read(@NotNull @PathParam(\"key\") String key);\n \n     /**\n      * Returns a list of authentication modules of the matching type.\n@@ -92,8 +91,7 @@ AuthModuleTO read(\n     @POST\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response create(\n-            @NotNull AuthModuleTO authModuleTO);\n+    Response create(@NotNull AuthModuleTO authModuleTO);\n \n     /**\n      * Updates authentication module matching the given key.\n@@ -108,8 +106,7 @@ Response create(\n     @Path(\"{key}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void update(\n-            @NotNull AuthModuleTO authModuleTO);\n+    void update(@NotNull AuthModuleTO authModuleTO);\n \n     /**\n      * Delete authentication module matching the given key.\n@@ -121,6 +118,5 @@ void update(\n     @DELETE\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void delete(\n-            @NotNull @PathParam(\"key\") String key);\n+    void delete(@NotNull @PathParam(\"key\") String key);\n }"},{"sha":"37765b236222b66f3641033c9b40c07372e80042","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/types/IdMImplementationType.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdMImplementationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdMImplementationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdMImplementationType.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -23,8 +23,6 @@\n \n public final class IdMImplementationType {\n \n-    public static final String ITEM_TRANSFORMER = \"ITEM_TRANSFORMER\";\n-\n     public static final String RECON_FILTER_BUILDER = \"RECON_FILTER_BUILDER\";\n \n     public static final String PROPAGATION_ACTIONS = \"PROPAGATION_ACTIONS\";\n@@ -40,13 +38,12 @@ public final class IdMImplementationType {\n     public static final String PROVISION_SORTER = \"PROVISION_SORTER\";\n \n     private static final Map<String, String> VALUES = Map.ofEntries(\n-            Pair.of(ITEM_TRANSFORMER, \"org.apache.syncope.core.spring.security.JWTSSOProvider\"),\n             Pair.of(RECON_FILTER_BUILDER, \"org.apache.syncope.core.persistence.api.dao.Reportlet\"),\n-            Pair.of(PROPAGATION_ACTIONS, \"org.apache.syncope.core.persistence.api.dao.AccountRule\"),\n-            Pair.of(PULL_ACTIONS, \"org.apache.syncope.core.persistence.api.dao.PasswordRule\"),\n-            Pair.of(PUSH_ACTIONS, \"org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate\"),\n-            Pair.of(PULL_CORRELATION_RULE, \"org.apache.syncope.core.provisioning.api.LogicActions\"),\n-            Pair.of(PUSH_CORRELATION_RULE, \"org.apache.syncope.core.persistence.api.attrvalue.validation.Validator\"),\n+            Pair.of(PROPAGATION_ACTIONS, \"org.apache.syncope.core.provisioning.api.propagation.PropagationActions\"),\n+            Pair.of(PULL_ACTIONS, \"org.apache.syncope.core.provisioning.api.pushpull.PullActions\"),\n+            Pair.of(PUSH_ACTIONS, \"org.apache.syncope.core.provisioning.api.pushpull.PushActions\"),\n+            Pair.of(PULL_CORRELATION_RULE, \"org.apache.syncope.common.lib.policy.PullCorrelationRuleConf\"),\n+            Pair.of(PUSH_CORRELATION_RULE, \"org.apache.syncope.common.lib.policy.PushCorrelationRuleConf\"),\n             Pair.of(PROVISION_SORTER, \"org.apache.syncope.core.provisioning.api.ProvisionSorter\"));\n \n     public static Map<String, String> values() {"},{"sha":"eb374be2718ab7b853a0c87bd5753f0c5914dfeb","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/IdRepoImplementationType.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoImplementationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoImplementationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoImplementationType.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -41,6 +41,8 @@ public final class IdRepoImplementationType {\n \n     public static final String AUDIT_APPENDER = \"AUDIT_APPENDER\";\n \n+    public static final String ITEM_TRANSFORMER = \"ITEM_TRANSFORMER\";\n+\n     private static final Map<String, String> VALUES = Map.ofEntries(\n             Pair.of(JWT_SSO_PROVIDER, \"org.apache.syncope.core.spring.security.JWTSSOProvider\"),\n             Pair.of(REPORTLET, \"org.apache.syncope.core.persistence.api.dao.Reportlet\"),\n@@ -50,7 +52,8 @@ public final class IdRepoImplementationType {\n             Pair.of(LOGIC_ACTIONS, \"org.apache.syncope.core.provisioning.api.LogicActions\"),\n             Pair.of(VALIDATOR, \"org.apache.syncope.core.persistence.api.attrvalue.validation.Validator\"),\n             Pair.of(RECIPIENTS_PROVIDER, \"org.apache.syncope.core.provisioning.api.notification.RecipientsProvider\"),\n-            Pair.of(AUDIT_APPENDER, \"org.apache.syncope.core.logic.audit.AuditAppender\"));\n+            Pair.of(AUDIT_APPENDER, \"org.apache.syncope.core.logic.audit.AuditAppender\"),\n+            Pair.of(ITEM_TRANSFORMER, \"org.apache.syncope.core.provisioning.api.data.ItemTransformer\"));\n \n     public static Map<String, String> values() {\n         return VALUES;"},{"sha":"04f4463697a5361886f50ded09d6a982255b8e64","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -92,10 +92,10 @@ public void load() {\n                 boolean isAbstractClazz = Modifier.isAbstract(clazz.getModifiers());\n \n                 if (AuthPolicyConf.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n-                    classNames.get(AMImplementationType.AUTH_POLICY_CONFIGURATIONS).add(bd.getBeanClassName());\n+                    classNames.get(AMImplementationType.AUTH_POLICY_CONF).add(bd.getBeanClassName());\n                 }\n                 if (AccessPolicyConf.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n-                    classNames.get(AMImplementationType.ACCESS_POLICY_CONFIGURATIONS).add(bd.getBeanClassName());\n+                    classNames.get(AMImplementationType.ACCESS_POLICY_CONF).add(bd.getBeanClassName());\n                 }\n             } catch (Throwable t) {\n                 LOG.warn(\"Could not inspect class {}\", bd.getBeanClassName(), t);"},{"sha":"a2fd3d9b36c0fcf3f425fd0ef9f6dce9bc8c5019","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ImplementationLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -179,7 +179,7 @@ public void delete(final String type, final String key) {\n                 inUse = !policyDAO.findByPasswordRule(implementation).isEmpty();\n                 break;\n \n-            case IdMImplementationType.ITEM_TRANSFORMER:\n+            case IdRepoImplementationType.ITEM_TRANSFORMER:\n                 inUse = !resourceDAO.findByTransformer(implementation).isEmpty();\n                 break;\n "},{"sha":"6b626dbb68d311bc1b2705e55c84048ca87a7a7a","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -194,7 +194,7 @@ public void load() {\n                 if (ItemTransformer.class.isAssignableFrom(clazz) && !isAbstractClazz\n                         && !clazz.equals(JEXLItemTransformerImpl.class)) {\n \n-                    classNames.get(IdMImplementationType.ITEM_TRANSFORMER).add(clazz.getName());\n+                    classNames.get(IdRepoImplementationType.ITEM_TRANSFORMER).add(clazz.getName());\n                 }\n \n                 if (SchedTaskJobDelegate.class.isAssignableFrom(clazz) && !isAbstractClazz"},{"sha":"8ba362ce3da09090077e14dc8a23d2fa9137dc43","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/AuthModule.java","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthModule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthModule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthModule.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -21,7 +21,6 @@\n import java.util.List;\n import org.apache.syncope.common.lib.auth.AuthModuleConf;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n \n public interface AuthModule extends Entity {\n \n@@ -33,16 +32,11 @@ public interface AuthModule extends Entity {\n \n     void setDescription(String description);\n \n-    /**\n-     * Specify the mapping items for the attributes fetched from the source.\n-     *\n-     * @return list of mapping items\n-     */\n-    List<? extends Item> getProfileItems();\n-\n-    boolean add(Item profileItem);\n-\n     AuthModuleConf getConf();\n \n     void setConf(AuthModuleConf description);\n+\n+    List<? extends AuthModuleItem> getItems();\n+\n+    boolean add(AuthModuleItem item);\n }"},{"sha":"2754b026eb5f5238d0e9a3122eaa6886831d15a3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/AuthModuleItem.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthModuleItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthModuleItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthModuleItem.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -22,4 +22,7 @@\n \n public interface AuthModuleItem extends Item {\n \n+    AuthModule getAuthModule();\n+\n+    void setAuthModule(AuthModule authModule);\n }"},{"sha":"d58f29ae8a8db21ec685b8539132f400eb069a2e","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -45,22 +45,22 @@ under the License.\n   <PasswordPolicyRule policy_id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" implementation_id=\"DefaultPasswordRuleConf3\"/>\n   \n   <!-- authentication policies -->\n-  <Implementation id=\"MyDefaultAuthPolicyConf\" type=\"AUTH_POLICY_CONFIGURATIONS\" engine=\"JAVA\"\n+  <Implementation id=\"MyDefaultAuthPolicyConf\" type=\"AUTH_POLICY_CONF\" engine=\"JAVA\"\n                   body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf\",\"authModules\":[\"LdapAuthenticationTest\"]}'/>\n   <AuthPolicy id=\"659b9906-4b6e-4bc0-aca0-6809dff346d4\" name=\"MyDefaultAuthPolicyConf\" description=\"an authentication policy\"/>\n   <AuthPolicy id=\"b912a0d4-a890-416f-9ab8-84ab077eb028\" name=\"DefaultAuthPolicy\" description=\"Default authentication policy\"/>\n \n   <!-- access policies -->\n-  <Implementation id=\"MyDefaultAccessPolicyConf\" type=\"ACCESS_POLICY_CONFIGURATIONS\" engine=\"JAVA\"\n+  <Implementation id=\"MyDefaultAccessPolicyConf\" type=\"ACCESS_POLICY_CONF\" engine=\"JAVA\"\n                   body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf\",\"name\":\"MyDefaultAccessPolicyConf\",\"enabled\":true,\"ssoEnabled\":true}'/>\n   <AccessPolicy id=\"419935c7-deb3-40b3-8a9a-683037e523a2\" name=\"MyDefaultAccessPolicyConf\" description=\"an access policy\"/>\n \n   <!-- Attr Release Policies -->\n-  <Implementation id=\"AllowedAttrReleasePolicyConf\" type=\"ATTR_RELEASE_CONFIGURATIONS\" engine=\"JAVA\"\n+  <Implementation id=\"AllowedAttrReleasePolicyConf\" type=\"ATTR_RELEASE_CONF\" engine=\"JAVA\"\n                   body='{\"@class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"AllowedAttrReleasePolicy\",\"allowedAttributes\":[\"cn\",\"givenName\",\"uid\"]}'/>\n   <AttrReleasePolicy id=\"319935c7-deb3-40b3-8a9a-683037e523a2\" name=\"AllowedAttrReleasePolicy\" description=\"allowed attribute release policy policy\"/>\n \n-  <Implementation id=\"DenyAttrReleasePolicyConf\" type=\"ATTR_RELEASE_CONFIGURATIONS\" engine=\"JAVA\"\n+  <Implementation id=\"DenyAttrReleasePolicyConf\" type=\"ATTR_RELEASE_CONF\" engine=\"JAVA\"\n                   body='{\"@class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"DenyAttrReleasePolicyConf\"}'/>\n   <AttrReleasePolicy id=\"219935c7-deb3-40b3-8a9a-683037e523a2\" name=\"DenyAttrReleasePolicy\" description=\"deny attribute release policy policy\"/>\n   "},{"sha":"81062222a0bd23239a4102c706aecbdfd4346a16","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPAAuthModuleDAO.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthModuleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthModuleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthModuleDAO.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -18,18 +18,19 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao.auth;\n \n-import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n-import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n-import javax.persistence.TypedQuery;\n import java.util.List;\n+import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.api.dao.auth.AuthModuleDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthModule;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n public class JPAAuthModuleDAO extends AbstractDAO<AuthModule> implements AuthModuleDAO {\n \n+    @Transactional(readOnly = true)\n     @Override\n     public AuthModule find(final String key) {\n         return entityManager().find(JPAAuthModule.class, key);\n@@ -38,13 +39,11 @@ public AuthModule find(final String key) {\n     @Transactional(readOnly = true)\n     @Override\n     public List<AuthModule> findAll() {\n-        TypedQuery<AuthModule> query = entityManager().createQuery(\"SELECT e FROM \" + JPAAuthModule.class.\n-                getSimpleName() + \" e\", AuthModule.class);\n-\n+        TypedQuery<AuthModule> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAAuthModule.class.getSimpleName() + \" e\", AuthModule.class);\n         return query.getResultList();\n     }\n \n-    @Transactional(readOnly = true)\n     @Override\n     public AuthModule save(final AuthModule authModule) {\n         return entityManager().merge(authModule);\n@@ -64,5 +63,4 @@ public void delete(final String key) {\n     public void delete(final AuthModule authModule) {\n         entityManager().remove(authModule);\n     }\n-\n }"},{"sha":"cbbb96bc282fae4bc4f41bb749165f4b0f495a77","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAAuthModule.java","status":"modified","additions":8,"deletions":10,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthModule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthModule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthModule.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -30,7 +30,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.auth.AuthModuleConf;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthModuleItem;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n \n@@ -48,8 +48,8 @@ public class JPAAuthModule extends AbstractGeneratedKeyEntity implements AuthMod\n     @Column(nullable = false)\n     private String description;\n \n-    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"mapping\")\n-    private final List<JPAAuthModuleItem> profileItems = new ArrayList<>();\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"authModule\")\n+    private List<JPAAuthModuleItem> items = new ArrayList<>();\n \n     @Lob\n     private String jsonConf;\n@@ -75,15 +75,14 @@ public void setName(final String name) {\n     }\n \n     @Override\n-    public List<? extends Item> getProfileItems() {\n-        return profileItems;\n+    public List<? extends AuthModuleItem> getItems() {\n+        return items;\n     }\n \n     @Override\n-    public boolean add(final Item profileItem) {\n-        checkType(profileItem, JPAAuthModuleItem.class);\n-        return profileItems.contains((JPAAuthModuleItem) profileItem)\n-                || profileItems.add((JPAAuthModuleItem) profileItem);\n+    public boolean add(final AuthModuleItem item) {\n+        checkType(item, JPAAuthModuleItem.class);\n+        return items.contains((JPAAuthModuleItem) item) || items.add((JPAAuthModuleItem) item);\n     }\n \n     @Override\n@@ -100,5 +99,4 @@ public AuthModuleConf getConf() {\n     public void setConf(final AuthModuleConf conf) {\n         jsonConf = POJOHelper.serialize(conf);\n     }\n-\n }"},{"sha":"c851289422c45584c53a420026f17e31f07e53e5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAAuthModuleItem.java","status":"modified","additions":28,"deletions":3,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthModuleItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthModuleItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthModuleItem.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -26,10 +26,13 @@\n import javax.persistence.JoinColumn;\n import javax.persistence.JoinTable;\n import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n-import org.apache.syncope.common.lib.types.IdMImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModuleItem;\n import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n import org.apache.syncope.core.persistence.jpa.entity.resource.AbstractItem;\n@@ -43,6 +46,9 @@ public class JPAAuthModuleItem extends AbstractItem implements AuthModuleItem {\n \n     private static final long serialVersionUID = 3165440920144995781L;\n \n+    @ManyToOne\n+    private JPAAuthModule authModule;\n+\n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(name = TABLE + \"Transformer\",\n             joinColumns =\n@@ -53,10 +59,30 @@ public class JPAAuthModuleItem extends AbstractItem implements AuthModuleItem {\n             @UniqueConstraint(columnNames = { \"item_id\", \"implementation_id\" }))\n     private final List<JPAImplementation> transformers = new ArrayList<>();\n \n+    public JPAAuthModuleItem() {\n+        super.setPurpose(MappingPurpose.NONE);\n+    }\n+\n+    @Override\n+    public void setPurpose(final MappingPurpose purpose) {\n+        // cannot be changed\n+    }\n+\n+    @Override\n+    public AuthModule getAuthModule() {\n+        return authModule;\n+    }\n+\n+    @Override\n+    public void setAuthModule(final AuthModule authModule) {\n+        checkType(authModule, JPAAuthModule.class);\n+        this.authModule = (JPAAuthModule) authModule;\n+    }\n+\n     @Override\n     public boolean add(final Implementation transformer) {\n         checkType(transformer, JPAImplementation.class);\n-        checkImplementationType(transformer, IdMImplementationType.ITEM_TRANSFORMER);\n+        checkImplementationType(transformer, IdRepoImplementationType.ITEM_TRANSFORMER);\n         return transformers.contains((JPAImplementation) transformer)\n                 || this.transformers.add((JPAImplementation) transformer);\n     }\n@@ -65,5 +91,4 @@ public boolean add(final Implementation transformer) {\n     public List<? extends Implementation> getTransformers() {\n         return transformers;\n     }\n-\n }"},{"sha":"b5843a9e0bc29ddd94c34102a088064041c19a43","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAccessPolicy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccessPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccessPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccessPolicy.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -61,7 +61,7 @@ public Implementation getConfiguration() {\n     @Override\n     public void setConfiguration(final Implementation configuration) {\n         checkType(configuration, JPAImplementation.class);\n-        checkImplementationType(configuration, AMImplementationType.ACCESS_POLICY_CONFIGURATIONS);\n+        checkImplementationType(configuration, AMImplementationType.ACCESS_POLICY_CONF);\n         this.configuration = (JPAImplementation) configuration;\n     }\n "},{"sha":"d6d0ba3cce478f4f085a486d0c91d034c44f5be5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAttrReleasePolicy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAttrReleasePolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAttrReleasePolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAttrReleasePolicy.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -62,7 +62,7 @@ public Implementation getConfiguration() {\n     @Override\n     public void setConfiguration(final Implementation configuration) {\n         checkType(configuration, JPAImplementation.class);\n-        checkImplementationType(configuration, AMImplementationType.ATTR_RELEASE_POLICY_CONFIGURATIONS);\n+        checkImplementationType(configuration, AMImplementationType.ATTR_RELEASE_POLICY_CONF);\n         this.configuration = (JPAImplementation) configuration;\n     }\n }"},{"sha":"59263c2e7e20dc801a239cd1f0e475bba1a83927","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAuthPolicy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAuthPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAuthPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAuthPolicy.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -61,7 +61,7 @@ public Implementation getConfiguration() {\n     @Override\n     public void setConfiguration(final Implementation configuration) {\n         checkType(configuration, JPAImplementation.class);\n-        checkImplementationType(configuration, AMImplementationType.AUTH_POLICY_CONFIGURATIONS);\n+        checkImplementationType(configuration, AMImplementationType.AUTH_POLICY_CONF);\n         this.configuration = (JPAImplementation) configuration;\n     }\n "},{"sha":"a197e1128e422a8b32d988151dc4606ddbd69d08","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAMappingItem.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -28,8 +28,8 @@\n import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n-import org.apache.syncope.common.lib.types.IdMImplementationType;\n import javax.persistence.UniqueConstraint;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n@@ -71,7 +71,7 @@ public void setMapping(final Mapping mapping) {\n     @Override\n     public boolean add(final Implementation transformer) {\n         checkType(transformer, JPAImplementation.class);\n-        checkImplementationType(transformer, IdMImplementationType.ITEM_TRANSFORMER);\n+        checkImplementationType(transformer, IdRepoImplementationType.ITEM_TRANSFORMER);\n         return transformers.contains((JPAImplementation) transformer)\n                 || transformers.add((JPAImplementation) transformer);\n     }"},{"sha":"1882a13492dafd72fcac1b72c5cd45a59571f1fd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAOrgUnitItem.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnitItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnitItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnitItem.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -28,8 +28,8 @@\n import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n-import org.apache.syncope.common.lib.types.IdMImplementationType;\n import javax.persistence.UniqueConstraint;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n@@ -76,7 +76,7 @@ public boolean isPassword() {\n     @Override\n     public boolean add(final Implementation transformer) {\n         checkType(transformer, JPAImplementation.class);\n-        checkImplementationType(transformer, IdMImplementationType.ITEM_TRANSFORMER);\n+        checkImplementationType(transformer, IdRepoImplementationType.ITEM_TRANSFORMER);\n         return transformers.contains((JPAImplementation) transformer)\n                 || transformers.add((JPAImplementation) transformer);\n     }"},{"sha":"c4ea282caad18aaabde896d7a5131b6b37f5e53c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AbstractClientAppTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAbstractClientAppTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAbstractClientAppTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAbstractClientAppTest.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -56,7 +56,7 @@ protected AttrReleasePolicy buildAndSaveAttrRelPolicy() {\n         Implementation type = entityFactory.newEntity(Implementation.class);\n         type.setKey(\"AttrRelPolicyTest\");\n         type.setEngine(ImplementationEngine.JAVA);\n-        type.setType(AMImplementationType.ATTR_RELEASE_POLICY_CONFIGURATIONS);\n+        type.setType(AMImplementationType.ATTR_RELEASE_POLICY_CONF);\n         type.setBody(POJOHelper.serialize(conf));\n         type = implementationDAO.save(type);\n         attrRelPolicy.setConfiguration(type);\n@@ -78,7 +78,7 @@ protected AccessPolicy buildAndSaveAccessPolicy() {\n         Implementation type = entityFactory.newEntity(Implementation.class);\n         type.setKey(\"AccessPolicyConfKey\");\n         type.setEngine(ImplementationEngine.JAVA);\n-        type.setType(AMImplementationType.ACCESS_POLICY_CONFIGURATIONS);\n+        type.setType(AMImplementationType.ACCESS_POLICY_CONF);\n         type.setBody(POJOHelper.serialize(conf));\n         type = implementationDAO.save(type);\n \n@@ -98,7 +98,7 @@ protected AuthPolicy buildAndSaveAuthPolicy() {\n         Implementation type = entityFactory.newEntity(Implementation.class);\n         type.setKey(\"AuthPolicyConfKey\");\n         type.setEngine(ImplementationEngine.JAVA);\n-        type.setType(AMImplementationType.AUTH_POLICY_CONFIGURATIONS);\n+        type.setType(AMImplementationType.AUTH_POLICY_CONF);\n         type.setBody(POJOHelper.serialize(conf));\n         type = implementationDAO.save(type);\n "},{"sha":"8bd2c133e9bbebe2f467a7be3e9f0cd51480c614","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AuthModuleTest.java","status":"modified","additions":20,"deletions":24,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -303,6 +303,7 @@ public void updateWithLDAPModule() {\n         module = authModuleDAO.save(module);\n         assertNotNull(module);\n         assertNotNull(module.getKey());\n+\n         AuthModule found = authModuleDAO.find(module.getKey());\n         assertNotNull(found);\n         assertEquals(\"dc=example2,dc=org\", LDAPAuthModuleConf.class.cast(found.getConf()).getBaseDn());\n@@ -322,8 +323,7 @@ public void updateWithJDBCModule() {\n         assertNotNull(module.getKey());\n         AuthModule found = authModuleDAO.find(module.getKey());\n         assertNotNull(found);\n-        assertEquals(\"SELECT * FROM otherTable WHERE name=?\",\n-                JDBCAuthModuleConf.class.cast(found.getConf()).getSql());\n+        assertEquals(\"SELECT * FROM otherTable WHERE name=?\", JDBCAuthModuleConf.class.cast(found.getConf()).getSql());\n     }\n \n     @Test\n@@ -443,6 +443,7 @@ public void updateWithU2fModule() {\n     public void updateWithSyncopeModule() {\n         AuthModule module = authModuleDAO.find(\"4c3edd60-7008-11ea-bc55-0242ac130003\");\n         assertNotNull(module);\n+\n         AuthModuleConf conf = module.getConf();\n         SyncopeAuthModuleConf.class.cast(conf).setDomain(\"Two\");\n         module.setConf(conf);\n@@ -457,46 +458,41 @@ public void updateWithSyncopeModule() {\n \n     @Test\n     public void delete() {\n-        testDelete(\"be456831-593d-4003-b273-4c3fb61700df\");\n-        testDelete(\"4c3ed8f6-7008-11ea-bc55-0242ac130003\");\n-        testDelete(\"4c3edbbc-7008-11ea-bc55-0242ac130003\");\n-        testDelete(\"4c3ed7e8-7008-11ea-bc55-0242ac130003\");\n-        testDelete(\"4c3ed4e6-7008-11ea-bc55-0242ac130003\");\n-        testDelete(\"4c3edc98-7008-11ea-bc55-0242ac130003\");\n-        testDelete(\"4c3ed9d2-7008-11ea-bc55-0242ac130003\");\n-        testDelete(\"4c3edd60-7008-11ea-bc55-0242ac130003\");\n-        testDelete(\"07c528f3-63b4-4dc1-a4da-87f35b8bdec8\");\n-        testDelete(\"f6e1288d-50d9-45fe-82ee-597c42242205\");\n+        AuthModule authModule = authModuleDAO.find(\"be456831-593d-4003-b273-4c3fb61700df\");\n+        assertNotNull(authModule);\n+\n+        authModuleDAO.delete(\"be456831-593d-4003-b273-4c3fb61700df\");\n+\n+        authModule = authModuleDAO.find(\"be456831-593d-4003-b273-4c3fb61700df\");\n+        assertNull(authModule);\n     }\n \n     private void saveAuthModule(final String name, final AuthModuleConf conf) {\n         AuthModule module = entityFactory.newEntity(AuthModule.class);\n         module.setName(name);\n         module.setDescription(\"An authentication module\");\n         module.setConf(conf);\n+\n         AuthModuleItem keyMapping = entityFactory.newEntity(AuthModuleItem.class);\n         keyMapping.setIntAttrName(\"uid\");\n         keyMapping.setExtAttrName(\"username\");\n+        keyMapping.setAuthModule(module);\n+        module.add(keyMapping);\n+\n         AuthModuleItem fullnameMapping = entityFactory.newEntity(AuthModuleItem.class);\n         fullnameMapping.setIntAttrName(\"cn\");\n         fullnameMapping.setExtAttrName(\"fullname\");\n-        module.add(keyMapping);\n+        fullnameMapping.setAuthModule(module);\n         module.add(fullnameMapping);\n-        authModuleDAO.save(module);\n+\n+        module = authModuleDAO.save(module);\n         assertNotNull(module);\n         assertNotNull(module.getKey());\n-        assertNotNull(authModuleDAO.find(module.getKey()));\n-    }\n-\n-    private void testDelete(final String key) {\n-        AuthModule authModule = authModuleDAO.find(key);\n-        assertNotNull(authModule);\n-        authModuleDAO.delete(key);\n-        authModule = authModuleDAO.find(key);\n-        assertNull(authModule);\n+        assertEquals(module, authModuleDAO.find(module.getKey()));\n+        assertEquals(2, module.getItems().size());\n     }\n \n-    private boolean isSpecificConf(final AuthModuleConf conf, final Class<? extends AuthModuleConf> clazz) {\n+    private static boolean isSpecificConf(final AuthModuleConf conf, final Class<? extends AuthModuleConf> clazz) {\n         return ClassUtils.isAssignable(clazz, conf.getClass());\n     }\n }"},{"sha":"bf6ff38f8fca9c886b793e3427ede3c2ef41bea4","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ImplementationTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -74,10 +74,10 @@ public void findAll() {\n         implementations = implementationDAO.findByType(IdMImplementationType.PUSH_CORRELATION_RULE);\n         assertEquals(1, implementations.size());\n \n-        implementations = implementationDAO.findByType(AMImplementationType.AUTH_POLICY_CONFIGURATIONS);\n+        implementations = implementationDAO.findByType(AMImplementationType.AUTH_POLICY_CONF);\n         assertEquals(1, implementations.size());\n \n-        implementations = implementationDAO.findByType(AMImplementationType.ACCESS_POLICY_CONFIGURATIONS);\n+        implementations = implementationDAO.findByType(AMImplementationType.ACCESS_POLICY_CONF);\n         assertEquals(1, implementations.size());\n     }\n "},{"sha":"1ebc7c37389aaaebf6c041ecbc8cd2b8c19af4e8","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PolicyTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -213,7 +213,7 @@ public void create() {\n         Implementation type = entityFactory.newEntity(Implementation.class);\n         type.setKey(\"AttrReleasePolicyAllowEverything\");\n         type.setEngine(ImplementationEngine.JAVA);\n-        type.setType(AMImplementationType.ACCESS_POLICY_CONFIGURATIONS);\n+        type.setType(AMImplementationType.ACCESS_POLICY_CONF);\n         type.setBody(POJOHelper.serialize(conf));\n         type = implementationDAO.save(type);\n \n@@ -240,7 +240,7 @@ public void create() {\n         Implementation authPolicyType = entityFactory.newEntity(Implementation.class);\n         authPolicyType.setKey(\"AuthPolicyConfKey\");\n         authPolicyType.setEngine(ImplementationEngine.JAVA);\n-        authPolicyType.setType(AMImplementationType.AUTH_POLICY_CONFIGURATIONS);\n+        authPolicyType.setType(AMImplementationType.AUTH_POLICY_CONF);\n         authPolicyType.setBody(POJOHelper.serialize(authPolicyConf));\n         authPolicyType = implementationDAO.save(authPolicyType);\n \n@@ -265,7 +265,7 @@ public void create() {\n         Implementation attrReleasePolicyType = entityFactory.newEntity(Implementation.class);\n         attrReleasePolicyType.setKey(\"AttrReleasePolicyAllowEverything\");\n         attrReleasePolicyType.setEngine(ImplementationEngine.JAVA);\n-        attrReleasePolicyType.setType(AMImplementationType.ATTR_RELEASE_POLICY_CONFIGURATIONS);\n+        attrReleasePolicyType.setType(AMImplementationType.ATTR_RELEASE_POLICY_CONF);\n         attrReleasePolicyType.setBody(POJOHelper.serialize(attrReleasePolicyConf));\n         attrReleasePolicyType = implementationDAO.save(attrReleasePolicyType);\n "},{"sha":"a22299434bb6531acfe996256153036489854be3","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -45,22 +45,22 @@ under the License.\n   <PasswordPolicyRule policy_id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" implementation_id=\"DefaultPasswordRuleConf3\"/>\n   \n   <!-- Authentication policies -->\n-  <Implementation id=\"MyDefaultAuthPolicyConf\" type=\"AUTH_POLICY_CONFIGURATIONS\" engine=\"JAVA\"\n+  <Implementation id=\"MyDefaultAuthPolicyConf\" type=\"AUTH_POLICY_CONF\" engine=\"JAVA\"\n                   body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf\",\"authModules\":[\"LdapAuthenticationTest\"]}'/>\n   <AuthPolicy id=\"659b9906-4b6e-4bc0-aca0-6809dff346d4\" name=\"MyDefaultAuthPolicyConf\" description=\"an authentication policy\"/>\n   <AuthPolicy id=\"b912a0d4-a890-416f-9ab8-84ab077eb028\" name=\"DefaultAuthPolicy\" description=\"Default authentication policy\"/>\n \n   <!-- Access policies -->\n-  <Implementation id=\"MyDefaultAccessPolicyConf\" type=\"ACCESS_POLICY_CONFIGURATIONS\" engine=\"JAVA\"\n+  <Implementation id=\"MyDefaultAccessPolicyConf\" type=\"ACCESS_POLICY_CONF\" engine=\"JAVA\"\n                   body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf\",\"name\":\"MyDefaultAccessPolicyConf\",\"enabled\":true,\"ssoEnabled\":true}'/>\n   <AccessPolicy id=\"419935c7-deb3-40b3-8a9a-683037e523a2\" name=\"MyDefaultAccessPolicyConf\" description=\"an access policy\"/>\n \n   <!-- Attr Release Policies -->\n-  <Implementation id=\"AllowedAttrReleasePolicyConf\" type=\"ATTR_RELEASE_CONFIGURATIONS\" engine=\"JAVA\"\n+  <Implementation id=\"AllowedAttrReleasePolicyConf\" type=\"ATTR_RELEASE_CONF\" engine=\"JAVA\"\n                   body='{\"@class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"AllowedAttrReleasePolicy\",\"allowedAttributes\":[\"cn\",\"givenName\",\"uid\"]}'/>\n   <AttrReleasePolicy id=\"319935c7-deb3-40b3-8a9a-683037e523a2\" name=\"AllowedAttrReleasePolicy\" description=\"allowed attribute release policy policy\"/>\n \n-  <Implementation id=\"DenyAttrReleasePolicyConf\" type=\"ATTR_RELEASE_CONFIGURATIONS\" engine=\"JAVA\"\n+  <Implementation id=\"DenyAttrReleasePolicyConf\" type=\"ATTR_RELEASE_CONF\" engine=\"JAVA\"\n                   body='{\"@class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"DenyAttrReleasePolicyConf\"}'/>\n   <AttrReleasePolicy id=\"219935c7-deb3-40b3-8a9a-683037e523a2\" name=\"DenyAttrReleasePolicy\" description=\"deny attribute release policy policy\"/>\n   "},{"sha":"058e58d3c654735bc3711595b8edb6ee76d8dcb5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AuthModuleDataBinderImpl.java","status":"modified","additions":79,"deletions":20,"changes":99,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthModuleDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthModuleDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthModuleDataBinderImpl.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -18,48 +18,108 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthModuleItem;\n import org.apache.syncope.core.provisioning.api.data.AuthModuleDataBinder;\n+import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n @Component\n public class AuthModuleDataBinderImpl implements AuthModuleDataBinder {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(AuthModuleDataBinder.class);\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n-    private AuthModule getAuthModule(final AuthModule authModule, final AuthModuleTO authModuleTO) {\n-        AuthModule result = authModule;\n+    private void populateItems(final AuthModuleTO authModuleTO, final AuthModule authModule) {\n+        SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n+        SyncopeClientException invalidMapping =\n+                SyncopeClientException.build(ClientExceptionType.InvalidMapping);\n+        SyncopeClientException requiredValuesMissing =\n+                SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n-        if (result == null) {\n-            result = entityFactory.newEntity(AuthModule.class);\n-        }\n+        authModuleTO.getItems().forEach(itemTO -> {\n+            if (itemTO == null) {\n+                LOG.error(\"Null {}\", ItemTO.class.getSimpleName());\n+                invalidMapping.getElements().add(\"Null \" + ItemTO.class.getSimpleName());\n+            } else if (itemTO.getIntAttrName() == null) {\n+                requiredValuesMissing.getElements().add(\"intAttrName\");\n+                scce.addException(requiredValuesMissing);\n+            } else {\n+                // no mandatory condition implies mandatory condition false\n+                if (!JexlUtils.isExpressionValid(itemTO.getMandatoryCondition() == null\n+                        ? \"false\" : itemTO.getMandatoryCondition())) {\n \n-        AuthModule authenticationModule = AuthModule.class.cast(result);\n-        AuthModuleTO authenticationModuleTO = AuthModuleTO.class.cast(authModuleTO);\n+                    SyncopeClientException invalidMandatoryCondition =\n+                            SyncopeClientException.build(ClientExceptionType.InvalidValues);\n+                    invalidMandatoryCondition.getElements().add(itemTO.getMandatoryCondition());\n+                    scce.addException(invalidMandatoryCondition);\n+                }\n \n-        authenticationModule.setName(authenticationModuleTO.getName());\n-        authenticationModule.setConf(authenticationModuleTO.getConf());\n-        authenticationModule.setDescription(authenticationModuleTO.getDescription());\n-        // remove all profile items not contained in the TO\n-        authenticationModule.getProfileItems().\n-                removeIf(item -> !authenticationModuleTO.getProfileItems().stream().\n-                anyMatch(otherItem -> item.getKey().equals(otherItem.getKey())));\n+                AuthModuleItem item = entityFactory.newEntity(AuthModuleItem.class);\n+                item.setIntAttrName(itemTO.getIntAttrName());\n+                item.setExtAttrName(itemTO.getExtAttrName());\n+                item.setMandatoryCondition(itemTO.getMandatoryCondition());\n+                item.setConnObjectKey(itemTO.isConnObjectKey());\n+                item.setPassword(itemTO.isPassword());\n+                item.setPropagationJEXLTransformer(itemTO.getPropagationJEXLTransformer());\n+                item.setPullJEXLTransformer(itemTO.getPullJEXLTransformer());\n+                item.setAuthModule(authModule);\n+                authModule.add(item);\n+            }\n+        });\n \n-        return result;\n+        if (!invalidMapping.getElements().isEmpty()) {\n+            scce.addException(invalidMapping);\n+        }\n+        if (scce.hasExceptions()) {\n+            throw scce;\n+        }\n     }\n \n     @Override\n     public AuthModule create(final AuthModuleTO authModuleTO) {\n-        return getAuthModule(null, authModuleTO);\n+        return update(entityFactory.newEntity(AuthModule.class), authModuleTO);\n     }\n \n     @Override\n     public AuthModule update(final AuthModule authModule, final AuthModuleTO authModuleTO) {\n-        return getAuthModule(authModule, authModuleTO);\n+        authModule.setName(authModuleTO.getName());\n+        authModule.setDescription(authModuleTO.getDescription());\n+        authModule.setConf(authModuleTO.getConf());\n+\n+        authModule.getItems().clear();\n+        populateItems(authModuleTO, authModule);\n+\n+        return authModule;\n+    }\n+\n+    private static void populateItems(final AuthModule authModule, final AuthModuleTO authModuleTO) {\n+        authModule.getItems().forEach(item -> {\n+            ItemTO itemTO = new ItemTO();\n+            itemTO.setKey(item.getKey());\n+            itemTO.setIntAttrName(item.getIntAttrName());\n+            itemTO.setExtAttrName(item.getExtAttrName());\n+            itemTO.setMandatoryCondition(item.getMandatoryCondition());\n+            itemTO.setConnObjectKey(item.isConnObjectKey());\n+            itemTO.setPassword(item.isPassword());\n+            itemTO.setPropagationJEXLTransformer(item.getPropagationJEXLTransformer());\n+            itemTO.setPullJEXLTransformer(item.getPullJEXLTransformer());\n+            itemTO.setPurpose(MappingPurpose.NONE);\n+\n+            authModuleTO.add(itemTO);\n+        });\n     }\n \n     @Override\n@@ -70,9 +130,8 @@ public AuthModuleTO getAuthModuleTO(final AuthModule authModule) {\n         authModuleTO.setKey(authModule.getKey());\n         authModuleTO.setDescription(authModule.getDescription());\n         authModuleTO.setConf(authModule.getConf());\n-        authModuleTO.getProfileItems().forEach(item -> {\n-            authModuleTO.add(item);\n-        });\n+\n+        populateItems(authModule, authModuleTO);\n \n         return authModuleTO;\n     }"},{"sha":"5de0f1371bb46926eb57f6314704696989acddae","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ImplementationDataBinderImpl.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -108,7 +108,7 @@ public void update(final Implementation implementation, final ImplementationTO i\n                     base = PasswordRule.class;\n                     break;\n \n-                case IdMImplementationType.ITEM_TRANSFORMER:\n+                case IdRepoImplementationType.ITEM_TRANSFORMER:\n                     base = ItemTransformer.class;\n                     break;\n \n@@ -156,15 +156,15 @@ public void update(final Implementation implementation, final ImplementationTO i\n                     base = ProvisionSorter.class;\n                     break;\n \n-                case AMImplementationType.ACCESS_POLICY_CONFIGURATIONS:\n+                case AMImplementationType.ACCESS_POLICY_CONF:\n                     base = AccessPolicy.class;\n                     break;\n \n-                case AMImplementationType.AUTH_POLICY_CONFIGURATIONS:\n+                case AMImplementationType.AUTH_POLICY_CONF:\n                     base = AuthPolicy.class;\n                     break;\n \n-                case AMImplementationType.ATTR_RELEASE_POLICY_CONFIGURATIONS:\n+                case AMImplementationType.ATTR_RELEASE_POLICY_CONF:\n                     base = AttrReleasePolicy.class;\n                     break;\n                 default:\n@@ -176,23 +176,23 @@ public void update(final Implementation implementation, final ImplementationTO i\n             }\n \n             switch (implementation.getType()) {\n-                case AMImplementationType.ACCESS_POLICY_CONFIGURATIONS:\n+                case AMImplementationType.ACCESS_POLICY_CONF:\n                     AccessPolicyConf accessPolicyConf =\n                             POJOHelper.deserialize(implementation.getBody(), AccessPolicyConf.class);\n                     if (accessPolicyConf == null) {\n                         sce.getElements().add(\"Could not deserialize as AccessPolicy\");\n                         throw sce;\n                     }\n                     break;\n-                case AMImplementationType.ATTR_RELEASE_POLICY_CONFIGURATIONS:\n+                case AMImplementationType.ATTR_RELEASE_POLICY_CONF:\n                     AttrReleasePolicyConf policyConf =\n                             POJOHelper.deserialize(implementation.getBody(), AttrReleasePolicyConf.class);\n                     if (policyConf == null) {\n                         sce.getElements().add(\"Could not deserialize as AttrReleasePolicy\");\n                         throw sce;\n                     }\n                     break;\n-                case AMImplementationType.AUTH_POLICY_CONFIGURATIONS:\n+                case AMImplementationType.AUTH_POLICY_CONF:\n                     AuthPolicyConf authPolicyConf =\n                             POJOHelper.deserialize(implementation.getBody(), AuthPolicyConf.class);\n                     if (authPolicyConf == null) {"},{"sha":"f2afe3a83a604ae90625b45499755c80c901b880","filename":"ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAOIDCProviderItem.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCProviderItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCProviderItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCProviderItem.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -28,8 +28,8 @@\n import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n-import org.apache.syncope.common.lib.types.IdMImplementationType;\n import javax.persistence.UniqueConstraint;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.OIDCProvider;\n import org.apache.syncope.core.persistence.api.entity.OIDCProviderItem;\n@@ -71,7 +71,7 @@ public void setOP(final OIDCProvider op) {\n     @Override\n     public boolean add(final Implementation transformer) {\n         checkType(transformer, JPAImplementation.class);\n-        checkImplementationType(transformer, IdMImplementationType.ITEM_TRANSFORMER);\n+        checkImplementationType(transformer, IdRepoImplementationType.ITEM_TRANSFORMER);\n         return transformers.contains((JPAImplementation) transformer)\n                 || this.transformers.add((JPAImplementation) transformer);\n     }"},{"sha":"c978a979f54768ac850703c2952b2998695c03ef","filename":"ext/oidcclient/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/OIDCProviderDataBinderImpl.java","status":"modified","additions":32,"deletions":73,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCProviderDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCProviderDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCProviderDataBinderImpl.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -22,7 +22,6 @@\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.OIDCProviderTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -71,21 +70,16 @@ public class OIDCProviderDataBinderImpl implements OIDCProviderDataBinder {\n     @Override\n     public OIDCProvider create(final OIDCProviderTO opTO) {\n         return update(entityFactory.newEntity(OIDCProvider.class), opTO);\n-\n     }\n \n-    private void populateItems(\n-            final OIDCProviderTO opTO,\n-            final OIDCProvider op,\n-            final AnyTypeClassTO allowedSchemas) {\n-\n+    private void populateItems(final OIDCProviderTO opTO, final OIDCProvider op) {\n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n         SyncopeClientException invalidMapping =\n                 SyncopeClientException.build(ClientExceptionType.InvalidMapping);\n         SyncopeClientException requiredValuesMissing =\n                 SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n-        for (ItemTO itemTO : opTO.getItems()) {\n+        opTO.getItems().forEach(itemTO -> {\n             if (itemTO == null) {\n                 LOG.error(\"Null {}\", ItemTO.class.getSimpleName());\n                 invalidMapping.getElements().add(\"Null \" + ItemTO.class.getSimpleName());\n@@ -104,69 +98,43 @@ private void populateItems(\n                     LOG.error(\"'{}' not existing\", itemTO.getIntAttrName());\n                     invalidMapping.getElements().add('\\'' + itemTO.getIntAttrName() + \"' not existing\");\n                 } else {\n-                    boolean allowed = true;\n-                    if (intAttrName.getSchemaType() != null\n-                            && intAttrName.getEnclosingGroup() == null\n-                            && intAttrName.getRelatedAnyObject() == null) {\n-                        switch (intAttrName.getSchemaType()) {\n-                            case PLAIN:\n-                                allowed = allowedSchemas.getPlainSchemas().contains(intAttrName.getSchema().getKey());\n-                                break;\n-\n-                            case DERIVED:\n-                                allowed = allowedSchemas.getDerSchemas().contains(intAttrName.getSchema().getKey());\n-                                break;\n-\n-                            case VIRTUAL:\n-                                allowed = allowedSchemas.getVirSchemas().contains(intAttrName.getSchema().getKey());\n-                                break;\n-\n-                            default:\n-                        }\n+                    // no mandatory condition implies mandatory condition false\n+                    if (!JexlUtils.isExpressionValid(itemTO.getMandatoryCondition() == null\n+                            ? \"false\" : itemTO.getMandatoryCondition())) {\n+\n+                        SyncopeClientException invalidMandatoryCondition = SyncopeClientException.build(\n+                                ClientExceptionType.InvalidValues);\n+                        invalidMandatoryCondition.getElements().add(itemTO.getMandatoryCondition());\n+                        scce.addException(invalidMandatoryCondition);\n                     }\n \n-                    if (allowed) {\n-                        // no mandatory condition implies mandatory condition false\n-                        if (!JexlUtils.isExpressionValid(itemTO.getMandatoryCondition() == null\n-                                ? \"false\" : itemTO.getMandatoryCondition())) {\n-\n-                            SyncopeClientException invalidMandatoryCondition = SyncopeClientException.build(\n-                                    ClientExceptionType.InvalidValues);\n-                            invalidMandatoryCondition.getElements().add(itemTO.getMandatoryCondition());\n-                            scce.addException(invalidMandatoryCondition);\n+                    OIDCProviderItem item = entityFactory.newEntity(OIDCProviderItem.class);\n+                    item.setIntAttrName(itemTO.getIntAttrName());\n+                    item.setExtAttrName(itemTO.getExtAttrName());\n+                    item.setMandatoryCondition(itemTO.getMandatoryCondition());\n+                    item.setConnObjectKey(itemTO.isConnObjectKey());\n+                    item.setPassword(itemTO.isPassword());\n+                    item.setPropagationJEXLTransformer(itemTO.getPropagationJEXLTransformer());\n+                    item.setPullJEXLTransformer(itemTO.getPullJEXLTransformer());\n+                    item.setOP(op);\n+                    item.setPurpose(MappingPurpose.NONE);\n+                    if (item.isConnObjectKey()) {\n+                        if (intAttrName.getSchemaType() == SchemaType.VIRTUAL) {\n+                            invalidMapping.getElements().\n+                                    add(\"Virtual attributes cannot be set as ConnObjectKey\");\n                         }\n-\n-                        OIDCProviderItem item = entityFactory.newEntity(OIDCProviderItem.class);\n-                        item.setIntAttrName(itemTO.getIntAttrName());\n-                        item.setExtAttrName(itemTO.getExtAttrName());\n-                        item.setMandatoryCondition(itemTO.getMandatoryCondition());\n-                        item.setConnObjectKey(itemTO.isConnObjectKey());\n-                        item.setPassword(itemTO.isPassword());\n-                        item.setPropagationJEXLTransformer(itemTO.getPropagationJEXLTransformer());\n-                        item.setPullJEXLTransformer(itemTO.getPullJEXLTransformer());\n-                        item.setOP(op);\n-                        item.setPurpose(MappingPurpose.NONE);\n-                        if (item.isConnObjectKey()) {\n-                            if (intAttrName.getSchemaType() == SchemaType.VIRTUAL) {\n-                                invalidMapping.getElements().\n-                                        add(\"Virtual attributes cannot be set as ConnObjectKey\");\n-                            }\n-                            if (\"password\".equals(intAttrName.getField())) {\n-                                invalidMapping.getElements().add(\n-                                        \"Password attributes cannot be set as ConnObjectKey\");\n-                            }\n-\n-                            op.setConnObjectKeyItem(item);\n-                        } else {\n-                            op.add(item);\n+                        if (\"password\".equals(intAttrName.getField())) {\n+                            invalidMapping.getElements().add(\n+                                    \"Password attributes cannot be set as ConnObjectKey\");\n                         }\n+\n+                        op.setConnObjectKeyItem(item);\n                     } else {\n-                        LOG.error(\"'{}' not allowed\", itemTO.getIntAttrName());\n-                        invalidMapping.getElements().add('\\'' + itemTO.getIntAttrName() + \"' not allowed\");\n+                        op.add(item);\n                     }\n                 }\n             }\n-        }\n+        });\n \n         if (!invalidMapping.getElements().isEmpty()) {\n             scce.addException(invalidMapping);\n@@ -206,16 +174,7 @@ public OIDCProvider update(final OIDCProvider op, final OIDCProviderTO opTO) {\n         }\n \n         op.getItems().clear();\n-        AnyTypeClassTO allowedSchemas = new AnyTypeClassTO();\n-        anyTypeDAO.findUser().getClasses().forEach(anyTypeClass -> {\n-            allowedSchemas.getPlainSchemas().addAll(anyTypeClass.getPlainSchemas().stream().\n-                    map(Entity::getKey).collect(Collectors.toList()));\n-            allowedSchemas.getDerSchemas().addAll(anyTypeClass.getDerSchemas().stream().\n-                    map(Entity::getKey).collect(Collectors.toList()));\n-            allowedSchemas.getVirSchemas().addAll(anyTypeClass.getVirSchemas().stream().\n-                    map(Entity::getKey).collect(Collectors.toList()));\n-        });\n-        populateItems(opTO, op, allowedSchemas);\n+        populateItems(opTO, op);\n \n         opTO.getActions().forEach(action -> {\n             Implementation implementation = implementationDAO.find(action);"},{"sha":"0a2fbeff0bbb3072fc025f2e51e8284dfd0409ad","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPASAML2IdPDAO.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2IdPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2IdPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2IdPDAO.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -73,5 +73,4 @@ public void delete(final String key) {\n             entityManager().remove(idp);\n         }\n     }\n-\n }"},{"sha":"cb029e65f2fbec0d88a171c8b7faae0c3cbb49e8","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2IdPItem.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdPItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdPItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdPItem.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -28,8 +28,8 @@\n import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n-import org.apache.syncope.common.lib.types.IdMImplementationType;\n import javax.persistence.UniqueConstraint;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n@@ -71,7 +71,7 @@ public void setIdP(final SAML2IdP idp) {\n     @Override\n     public boolean add(final Implementation transformer) {\n         checkType(transformer, JPAImplementation.class);\n-        checkImplementationType(transformer, IdMImplementationType.ITEM_TRANSFORMER);\n+        checkImplementationType(transformer, IdRepoImplementationType.ITEM_TRANSFORMER);\n         return transformers.contains((JPAImplementation) transformer)\n                 || this.transformers.add((JPAImplementation) transformer);\n     }"},{"sha":"93bb396e5cc3d940d8c699bda75a45df367f402f","filename":"ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java","status":"modified","additions":32,"deletions":72,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -23,7 +23,6 @@\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.SAML2IdPTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -74,18 +73,14 @@ public SAML2IdP create(final SAML2IdPTO idpTO) {\n         return update(entityFactory.newEntity(SAML2IdP.class), idpTO);\n     }\n \n-    private void populateItems(\n-            final SAML2IdPTO idpTO,\n-            final SAML2IdP idp,\n-            final AnyTypeClassTO allowedSchemas) {\n-\n+    private void populateItems(final SAML2IdPTO idpTO, final SAML2IdP idp) {\n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n         SyncopeClientException invalidMapping =\n                 SyncopeClientException.build(ClientExceptionType.InvalidMapping);\n         SyncopeClientException requiredValuesMissing =\n                 SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n-        for (ItemTO itemTO : idpTO.getItems()) {\n+        idpTO.getItems().forEach(itemTO -> {\n             if (itemTO == null) {\n                 LOG.error(\"Null {}\", ItemTO.class.getSimpleName());\n                 invalidMapping.getElements().add(\"Null \" + ItemTO.class.getSimpleName());\n@@ -104,69 +99,43 @@ private void populateItems(\n                     LOG.error(\"'{}' not existing\", itemTO.getIntAttrName());\n                     invalidMapping.getElements().add('\\'' + itemTO.getIntAttrName() + \"' not existing\");\n                 } else {\n-                    boolean allowed = true;\n-                    if (intAttrName.getSchemaType() != null\n-                            && intAttrName.getEnclosingGroup() == null\n-                            && intAttrName.getRelatedAnyObject() == null) {\n-                        switch (intAttrName.getSchemaType()) {\n-                            case PLAIN:\n-                                allowed = allowedSchemas.getPlainSchemas().contains(intAttrName.getSchema().getKey());\n-                                break;\n-\n-                            case DERIVED:\n-                                allowed = allowedSchemas.getDerSchemas().contains(intAttrName.getSchema().getKey());\n-                                break;\n-\n-                            case VIRTUAL:\n-                                allowed = allowedSchemas.getVirSchemas().contains(intAttrName.getSchema().getKey());\n-                                break;\n-\n-                            default:\n-                        }\n+                    // no mandatory condition implies mandatory condition false\n+                    if (!JexlUtils.isExpressionValid(itemTO.getMandatoryCondition() == null\n+                            ? \"false\" : itemTO.getMandatoryCondition())) {\n+\n+                        SyncopeClientException invalidMandatoryCondition = SyncopeClientException.build(\n+                                ClientExceptionType.InvalidValues);\n+                        invalidMandatoryCondition.getElements().add(itemTO.getMandatoryCondition());\n+                        scce.addException(invalidMandatoryCondition);\n                     }\n \n-                    if (allowed) {\n-                        // no mandatory condition implies mandatory condition false\n-                        if (!JexlUtils.isExpressionValid(itemTO.getMandatoryCondition() == null\n-                                ? \"false\" : itemTO.getMandatoryCondition())) {\n-\n-                            SyncopeClientException invalidMandatoryCondition = SyncopeClientException.build(\n-                                    ClientExceptionType.InvalidValues);\n-                            invalidMandatoryCondition.getElements().add(itemTO.getMandatoryCondition());\n-                            scce.addException(invalidMandatoryCondition);\n+                    SAML2IdPItem item = entityFactory.newEntity(SAML2IdPItem.class);\n+                    item.setIntAttrName(itemTO.getIntAttrName());\n+                    item.setExtAttrName(itemTO.getExtAttrName());\n+                    item.setMandatoryCondition(itemTO.getMandatoryCondition());\n+                    item.setConnObjectKey(itemTO.isConnObjectKey());\n+                    item.setPassword(itemTO.isPassword());\n+                    item.setPropagationJEXLTransformer(itemTO.getPropagationJEXLTransformer());\n+                    item.setPullJEXLTransformer(itemTO.getPullJEXLTransformer());\n+                    item.setIdP(idp);\n+                    item.setPurpose(MappingPurpose.NONE);\n+                    if (item.isConnObjectKey()) {\n+                        if (intAttrName.getSchemaType() == SchemaType.VIRTUAL) {\n+                            invalidMapping.getElements().\n+                                    add(\"Virtual attributes cannot be set as ConnObjectKey\");\n                         }\n-\n-                        SAML2IdPItem item = entityFactory.newEntity(SAML2IdPItem.class);\n-                        item.setIntAttrName(itemTO.getIntAttrName());\n-                        item.setExtAttrName(itemTO.getExtAttrName());\n-                        item.setMandatoryCondition(itemTO.getMandatoryCondition());\n-                        item.setConnObjectKey(itemTO.isConnObjectKey());\n-                        item.setPassword(itemTO.isPassword());\n-                        item.setPropagationJEXLTransformer(itemTO.getPropagationJEXLTransformer());\n-                        item.setPullJEXLTransformer(itemTO.getPullJEXLTransformer());\n-                        item.setIdP(idp);\n-                        item.setPurpose(MappingPurpose.NONE);\n-                        if (item.isConnObjectKey()) {\n-                            if (intAttrName.getSchemaType() == SchemaType.VIRTUAL) {\n-                                invalidMapping.getElements().\n-                                        add(\"Virtual attributes cannot be set as ConnObjectKey\");\n-                            }\n-                            if (\"password\".equals(intAttrName.getField())) {\n-                                invalidMapping.getElements().add(\n-                                        \"Password attributes cannot be set as ConnObjectKey\");\n-                            }\n-\n-                            idp.setConnObjectKeyItem(item);\n-                        } else {\n-                            idp.add(item);\n+                        if (\"password\".equals(intAttrName.getField())) {\n+                            invalidMapping.getElements().add(\n+                                    \"Password attributes cannot be set as ConnObjectKey\");\n                         }\n+\n+                        idp.setConnObjectKeyItem(item);\n                     } else {\n-                        LOG.error(\"'{}' not allowed\", itemTO.getIntAttrName());\n-                        invalidMapping.getElements().add('\\'' + itemTO.getIntAttrName() + \"' not allowed\");\n+                        idp.add(item);\n                     }\n                 }\n             }\n-        }\n+        });\n \n         if (!invalidMapping.getElements().isEmpty()) {\n             scce.addException(invalidMapping);\n@@ -202,16 +171,7 @@ public SAML2IdP update(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n         }\n \n         idp.getItems().clear();\n-        AnyTypeClassTO allowedSchemas = new AnyTypeClassTO();\n-        anyTypeDAO.findUser().getClasses().forEach(anyTypeClass -> {\n-            allowedSchemas.getPlainSchemas().addAll(anyTypeClass.getPlainSchemas().stream().\n-                    map(Entity::getKey).collect(Collectors.toList()));\n-            allowedSchemas.getDerSchemas().addAll(anyTypeClass.getDerSchemas().stream().\n-                    map(Entity::getKey).collect(Collectors.toList()));\n-            allowedSchemas.getVirSchemas().addAll(anyTypeClass.getVirSchemas().stream().\n-                    map(Entity::getKey).collect(Collectors.toList()));\n-        });\n-        populateItems(idpTO, idp, allowedSchemas);\n+        populateItems(idpTO, idp);\n \n         idpTO.getActions().forEach(action -> {\n             Implementation implementation = implementationDAO.find(action);"},{"sha":"dcebb972a42274a5ee3bc164536b3279ae456a84","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -184,7 +184,7 @@ public class ITImplementationLookup implements ImplementationLookup {\n             classNames = new HashSet<>();\n             classNames.add(DateToDateItemTransformer.class.getName());\n             classNames.add(DateToLongItemTransformer.class.getName());\n-            put(IdMImplementationType.ITEM_TRANSFORMER, classNames);\n+            put(IdRepoImplementationType.ITEM_TRANSFORMER, classNames);\n \n             classNames = new HashSet<>();\n             classNames.add(TestSampleJobDelegate.class.getName());"},{"sha":"ab51c1fe671872609ba330fc4b01d96c129261a2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthModuleITCase.java","status":"modified","additions":19,"deletions":16,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -45,6 +45,7 @@\n import org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf;\n import org.apache.syncope.common.lib.auth.U2FAuthModuleConf;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n \n public class AuthModuleITCase extends AbstractITCase {\n \n@@ -66,8 +67,8 @@ private static AuthModuleTO buildAuthModuleTO(final AuthModuleSupportedType type\n         AuthModuleTO authModuleTO = new AuthModuleTO();\n         authModuleTO.setName(\"Test\" + type + \"AuthenticationModule\" + getUUIDString());\n         authModuleTO.setDescription(\"A test \" + type + \" Authentication Module\");\n-        AuthModuleConf conf;\n \n+        AuthModuleConf conf;\n         switch (type) {\n             case LDAP:\n                 conf = new LDAPAuthModuleConf();\n@@ -161,19 +162,21 @@ private static AuthModuleTO buildAuthModuleTO(final AuthModuleSupportedType type\n         }\n         authModuleTO.setConf(conf);\n \n-        return authModuleTO;\n-    }\n+        ItemTO keyMapping = new ItemTO();\n+        keyMapping.setIntAttrName(\"uid\");\n+        keyMapping.setExtAttrName(\"username\");\n+        authModuleTO.add(keyMapping);\n \n-    @Test\n-    public void findAll() {\n-        List<AuthModuleTO> authModuleTOs = authModuleService.list();\n-        assertNotNull(authModuleTOs);\n-        assertFalse(authModuleTOs.isEmpty());\n-        assertTrue(authModuleTOs.size() >= 10);\n+        ItemTO fullnameMapping = new ItemTO();\n+        fullnameMapping.setIntAttrName(\"cn\");\n+        fullnameMapping.setExtAttrName(\"fullname\");\n+        authModuleTO.add(fullnameMapping);\n+\n+        return authModuleTO;\n     }\n \n     @Test\n-    public void listByType() {\n+    public void list() {\n         List<AuthModuleTO> authModuleTOs = authModuleService.list();\n         assertNotNull(authModuleTOs);\n         assertFalse(authModuleTOs.isEmpty());\n@@ -564,17 +567,17 @@ public void delete() throws IOException {\n     private void testCreate(final AuthModuleSupportedType type) {\n         AuthModuleTO authModuleTO = createAuthModule(buildAuthModuleTO(type));\n         assertNotNull(authModuleTO);\n-        assertTrue(authModuleTO.getName().contains(\n-                \"Test\" + type + \"AuthenticationModule\"));\n-        assertTrue(authModuleTO.getDescription().contains(\n-                \"A test \" + type + \" Authentication Module\"));\n+        assertTrue(authModuleTO.getName().contains(\"Test\" + type + \"AuthenticationModule\"));\n+        assertTrue(authModuleTO.getDescription().contains(\"A test \" + type + \" Authentication Module\"));\n+        assertEquals(2, authModuleTO.getItems().size());\n     }\n \n     private void testDelete(final AuthModuleSupportedType type) {\n-        AuthModuleTO authModuleTO = buildAuthModuleTO(type);\n-        AuthModuleTO read = createAuthModule(authModuleTO);\n+        AuthModuleTO read = createAuthModule(buildAuthModuleTO(type));\n         assertNotNull(read);\n+\n         authModuleService.delete(read.getKey());\n+\n         try {\n             authModuleService.read(read.getKey());\n             fail(\"This should not happen\");"},{"sha":"817e121a7096073d3cd4874e301c80ed37d3fd8d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PolicyITCase.java","status":"modified","additions":9,"deletions":15,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -66,14 +66,13 @@ private static AuthPolicyTO buildAuthPolicyTO() {\n         String authPolicyName = \"TestAuthPolicy\" + getUUIDString();\n         ImplementationTO implementationTO = null;\n         try {\n-            implementationTO = implementationService.read(\n-                    AMImplementationType.AUTH_POLICY_CONFIGURATIONS, authPolicyName);\n+            implementationTO = implementationService.read(AMImplementationType.AUTH_POLICY_CONF, authPolicyName);\n         } catch (SyncopeClientException e) {\n             if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n                 implementationTO = new ImplementationTO();\n                 implementationTO.setKey(authPolicyName);\n                 implementationTO.setEngine(ImplementationEngine.JAVA);\n-                implementationTO.setType(AMImplementationType.AUTH_POLICY_CONFIGURATIONS);\n+                implementationTO.setType(AMImplementationType.AUTH_POLICY_CONF);\n \n                 DefaultAuthPolicyConf conf = new DefaultAuthPolicyConf();\n                 conf.getAuthModules().addAll(List.of(\"LdapAuthentication1\"));\n@@ -97,14 +96,13 @@ private static AuthPolicyTO buildAuthPolicyTO() {\n     private static AttrReleasePolicyTO buildAttributeReleasePolicyTO(final String policyName) {\n         ImplementationTO implementationTO = null;\n         try {\n-            implementationTO = implementationService.read(\n-                    AMImplementationType.ATTR_RELEASE_POLICY_CONFIGURATIONS, policyName);\n+            implementationTO = implementationService.read(AMImplementationType.ATTR_RELEASE_POLICY_CONF, policyName);\n         } catch (SyncopeClientException e) {\n             if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n                 implementationTO = new ImplementationTO();\n                 implementationTO.setKey(policyName);\n                 implementationTO.setEngine(ImplementationEngine.JAVA);\n-                implementationTO.setType(AMImplementationType.ATTR_RELEASE_POLICY_CONFIGURATIONS);\n+                implementationTO.setType(AMImplementationType.ATTR_RELEASE_POLICY_CONF);\n \n                 AllowedAttrReleasePolicyConf conf = new AllowedAttrReleasePolicyConf();\n                 conf.setName(\"MyDefaultAttrReleasePolicyConf\");\n@@ -131,14 +129,13 @@ private static AccessPolicyTO buildAccessPolicyTO() {\n \n         ImplementationTO implementationTO = null;\n         try {\n-            implementationTO = implementationService.read(\n-                    AMImplementationType.ACCESS_POLICY_CONFIGURATIONS, accessPolicyName);\n+            implementationTO = implementationService.read(AMImplementationType.ACCESS_POLICY_CONF, accessPolicyName);\n         } catch (SyncopeClientException e) {\n             if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n                 implementationTO = new ImplementationTO();\n                 implementationTO.setKey(accessPolicyName);\n                 implementationTO.setEngine(ImplementationEngine.JAVA);\n-                implementationTO.setType(AMImplementationType.ACCESS_POLICY_CONFIGURATIONS);\n+                implementationTO.setType(AMImplementationType.ACCESS_POLICY_CONF);\n \n                 DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n                 conf.setEnabled(true);\n@@ -332,8 +329,7 @@ public void updateAuthPolicy() {\n         assertNotNull(newAuthPolicyTO);\n         newAuthPolicyTO = createPolicy(PolicyType.AUTH, newAuthPolicyTO);\n \n-        ImplementationTO authPolicyImplementationTO = implementationService.read(\n-                AMImplementationType.AUTH_POLICY_CONFIGURATIONS, \"MyDefaultAuthPolicyConf\");\n+        ImplementationTO authPolicyImplementationTO = implementationService.read(AMImplementationType.AUTH_POLICY_CONF, \"MyDefaultAuthPolicyConf\");\n         assertNotNull(authPolicyImplementationTO);\n         assertFalse(StringUtils.isBlank(authPolicyImplementationTO.getBody()));\n \n@@ -365,8 +361,7 @@ public void updateAccessPolicy() {\n         newAccessPolicyTO = createPolicy(PolicyType.ACCESS, newAccessPolicyTO);\n         assertNotNull(newAccessPolicyTO);\n \n-        ImplementationTO accessPolicyImplementationTO = implementationService.read(\n-                AMImplementationType.ACCESS_POLICY_CONFIGURATIONS, \"MyDefaultAccessPolicyConf\");\n+        ImplementationTO accessPolicyImplementationTO = implementationService.read(AMImplementationType.ACCESS_POLICY_CONF, \"MyDefaultAccessPolicyConf\");\n         assertNotNull(accessPolicyImplementationTO);\n         assertFalse(StringUtils.isBlank(accessPolicyImplementationTO.getBody()));\n \n@@ -400,8 +395,7 @@ public void updateAttrReleasePolicy() {\n         newPolicyTO = createPolicy(PolicyType.ATTR_RELEASE, newPolicyTO);\n         assertNotNull(newPolicyTO);\n \n-        ImplementationTO implementationTO = implementationService.read(\n-                AMImplementationType.ATTR_RELEASE_POLICY_CONFIGURATIONS, policyName);\n+        ImplementationTO implementationTO = implementationService.read(AMImplementationType.ATTR_RELEASE_POLICY_CONF, policyName);\n         assertNotNull(implementationTO);\n         assertFalse(StringUtils.isBlank(implementationTO.getBody()));\n "},{"sha":"0a109acd70b096fe10677d91df8bb3c40fad7d70","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -62,9 +62,9 @@\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n@@ -91,15 +91,15 @@ public static void testItemTransformersSetup() {\n         ImplementationTO dateToDate = null;\n         try {\n             dateToLong = implementationService.read(\n-                    IdMImplementationType.ITEM_TRANSFORMER, DateToLongItemTransformer.class.getSimpleName());\n+                    IdRepoImplementationType.ITEM_TRANSFORMER, DateToLongItemTransformer.class.getSimpleName());\n             dateToDate = implementationService.read(\n-                    IdMImplementationType.ITEM_TRANSFORMER, DateToDateItemTransformer.class.getSimpleName());\n+                    IdRepoImplementationType.ITEM_TRANSFORMER, DateToDateItemTransformer.class.getSimpleName());\n         } catch (SyncopeClientException e) {\n             if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n                 dateToLong = new ImplementationTO();\n                 dateToLong.setKey(DateToLongItemTransformer.class.getSimpleName());\n                 dateToLong.setEngine(ImplementationEngine.JAVA);\n-                dateToLong.setType(IdMImplementationType.ITEM_TRANSFORMER);\n+                dateToLong.setType(IdRepoImplementationType.ITEM_TRANSFORMER);\n                 dateToLong.setBody(DateToLongItemTransformer.class.getName());\n                 Response response = implementationService.create(dateToLong);\n                 dateToLong = implementationService.read(\n@@ -109,7 +109,7 @@ public static void testItemTransformersSetup() {\n                 dateToDate = new ImplementationTO();\n                 dateToDate.setKey(DateToDateItemTransformer.class.getSimpleName());\n                 dateToDate.setEngine(ImplementationEngine.JAVA);\n-                dateToDate.setType(IdMImplementationType.ITEM_TRANSFORMER);\n+                dateToDate.setType(IdRepoImplementationType.ITEM_TRANSFORMER);\n                 dateToDate.setBody(DateToDateItemTransformer.class.getName());\n                 response = implementationService.create(dateToDate);\n                 dateToDate = implementationService.read("},{"sha":"d1146f4a42b5bd7c8d9c3e485036156c54e3bad9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -83,6 +83,7 @@\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -497,13 +498,13 @@ public void reconcileFromScriptedSQL() throws IOException {\n         ImplementationTO transformer = null;\n         try {\n             transformer = implementationService.read(\n-                    IdMImplementationType.ITEM_TRANSFORMER, \"PrefixItemTransformer\");\n+                    IdRepoImplementationType.ITEM_TRANSFORMER, \"PrefixItemTransformer\");\n         } catch (SyncopeClientException e) {\n             if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n                 transformer = new ImplementationTO();\n                 transformer.setKey(\"PrefixItemTransformer\");\n                 transformer.setEngine(ImplementationEngine.GROOVY);\n-                transformer.setType(IdMImplementationType.ITEM_TRANSFORMER);\n+                transformer.setType(IdRepoImplementationType.ITEM_TRANSFORMER);\n                 transformer.setBody(IOUtils.toString(\n                         getClass().getResourceAsStream(\"/PrefixItemTransformer.groovy\"), StandardCharsets.UTF_8));\n                 Response response = implementationService.create(transformer);"},{"sha":"884eaeed82306f869c5ff7cac2367bcf96a272a6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RealmITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -220,7 +220,7 @@ public void deletingAuthPolicy() {\n         ImplementationTO rule = new ImplementationTO();\n         rule.setKey(\"TestAuthPolicy\" + getUUIDString());\n         rule.setEngine(ImplementationEngine.JAVA);\n-        rule.setType(AMImplementationType.AUTH_POLICY_CONFIGURATIONS);\n+        rule.setType(AMImplementationType.AUTH_POLICY_CONF);\n         rule.setBody(POJOHelper.serialize(ruleConf));\n         Response response = implementationService.create(rule);\n         rule.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n@@ -271,7 +271,7 @@ public void deletingAccessPolicy() {\n         ImplementationTO rule = new ImplementationTO();\n         rule.setKey(\"TestAccessPolicy\" + getUUIDString());\n         rule.setEngine(ImplementationEngine.JAVA);\n-        rule.setType(AMImplementationType.ACCESS_POLICY_CONFIGURATIONS);\n+        rule.setType(AMImplementationType.ACCESS_POLICY_CONF);\n         rule.setBody(POJOHelper.serialize(ruleConf));\n         Response response = implementationService.create(rule);\n         rule.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n@@ -321,7 +321,7 @@ public void deletingAttributeReleasePolicy() {\n         ImplementationTO rule = new ImplementationTO();\n         rule.setKey(\"TestAttrReleasePolicy\" + getUUIDString());\n         rule.setEngine(ImplementationEngine.JAVA);\n-        rule.setType(AMImplementationType.ATTR_RELEASE_POLICY_CONFIGURATIONS);\n+        rule.setType(AMImplementationType.ATTR_RELEASE_POLICY_CONF);\n         rule.setBody(POJOHelper.serialize(ruleConf));\n         Response response = implementationService.create(rule);\n         rule.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));"},{"sha":"dc9c7cf13c6dd6e8044e9a004d5a10b1524d7983","filename":"ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/view/ResourceExplorerTopComponent.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fview%2FResourceExplorerTopComponent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fview%2FResourceExplorerTopComponent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fview%2FResourceExplorerTopComponent.java?ref=f7e75bbe77d44d1c0a6b2aaa83001d920c757ffc","patch":"@@ -402,7 +402,7 @@ private void folderRightClickAction(final MouseEvent evt, final DefaultMutableTr\n                                 templateClassName = \"MyPasswordRule\";\n                                 break;\n \n-                            case IdMImplementationType.ITEM_TRANSFORMER:\n+                            case IdRepoImplementationType.ITEM_TRANSFORMER:\n                                 templateClassName = \"MyItemTransformer\";\n                                 break;\n "}]}