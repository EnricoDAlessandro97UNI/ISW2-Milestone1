{"sha":"dace282e2c26851928e9b81bab423e74a3f277ed","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRhY2UyODJlMmMyNjg1MTkyOGU5YjgxYmFiNDIzZTc0YTNmMjc3ZWQ=","commit":{"author":{"name":"Marco Di Sabatino Di Diodoro","email":"mdisabatino@apache.org","date":"2014-09-08T10:59:22Z"},"committer":{"name":"Marco Di Sabatino Di Diodoro","email":"mdisabatino@apache.org","date":"2014-09-08T10:59:22Z"},"message":"[SYNCOPE-543] Merge from 1_1_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_2_X@1623357 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9ac9008411099ca3d6ba9620b596cdf60d49dcd2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9ac9008411099ca3d6ba9620b596cdf60d49dcd2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/dace282e2c26851928e9b81bab423e74a3f277ed","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dace282e2c26851928e9b81bab423e74a3f277ed","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dace282e2c26851928e9b81bab423e74a3f277ed","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dace282e2c26851928e9b81bab423e74a3f277ed/comments","author":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"committer":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"parents":[{"sha":"78ac7ca0843925465097180c11acf02b529919ce","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/78ac7ca0843925465097180c11acf02b529919ce","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/78ac7ca0843925465097180c11acf02b529919ce"},{"sha":"3903b84ed72cfc05c276761c3b03737d4b925709","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3903b84ed72cfc05c276761c3b03737d4b925709","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3903b84ed72cfc05c276761c3b03737d4b925709"}],"stats":{"total":234,"additions":97,"deletions":137},"files":[{"sha":"59b4d34c59b5d52e82f8d4f54bae5f9a2681e873","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":30,"deletions":46,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dace282e2c26851928e9b81bab423e74a3f277ed/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dace282e2c26851928e9b81bab423e74a3f277ed/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=dace282e2c26851928e9b81bab423e74a3f277ed","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.beans.role;\n \n import java.util.ArrayList;\n-import java.util.Collection;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n@@ -448,27 +447,23 @@ public void setInheritAttrs(final boolean inheritAttrs) {\n      * @return a list of inherited and only inherited attributes.\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public List<RAttr> findInheritedAttrs() {\n+    public List<RAttr> findLastInheritedAncestorAttributes() {\n         final Map<RSchema, RAttr> result = new HashMap<RSchema, RAttr>();\n \n+        if (!isInheritAttrs()) {\n+            return attrs;\n+        }\n         if (isInheritAttrs() && getParent() != null) {\n             final Map<AbstractNormalSchema, AbstractAttr> attrMap = getAttrMap();\n \n-            // Add attributes not specialized\n-            for (RAttr attr : (Collection<RAttr>) getParent().getAttrs()) {\n-                if (!attrMap.containsKey(attr.getSchema())) {\n-                    result.put((RSchema) attr.getSchema(), attr);\n-                }\n-            }\n-\n-            // Add attributes not specialized and not already added\n-            for (RAttr attr : getParent().findInheritedAttrs()) {\n-                if (!attrMap.containsKey(attr.getSchema()) && !result.containsKey((RSchema) attr.getSchema())) {\n-                    result.put((RSchema) attr.getSchema(), attr);\n+            // Add inherit attributes\n+            for (RAttr attr : getParent().findLastInheritedAncestorAttributes()) {\n+                if (attrMap.containsKey(attr.getSchema())) {\n+                    result.remove((RSchema) attr.getSchema());\n                 }\n+                result.put((RSchema) attr.getSchema(), attr);\n             }\n         }\n-\n         return new ArrayList<RAttr>(result.values());\n     }\n \n@@ -487,29 +482,23 @@ public void setInheritDerAttrs(final boolean inheritDerAttrs) {\n      * @return a list of inherited and only inherited attributes.\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public List<RDerAttr> findInheritedDerAttrs() {\n+    public List<RDerAttr> findLastInheritedAncestorDerivedAttributes() {\n         final Map<RDerSchema, RDerAttr> result = new HashMap<RDerSchema, RDerAttr>();\n \n+        if (!isInheritDerAttrs()) {\n+            return derAttrs;\n+        }\n         if (isInheritDerAttrs() && getParent() != null) {\n-            final Map<AbstractDerSchema, AbstractDerAttr> attrMap = getDerAttrMap();\n-\n-            // Add attributes not specialized\n-            for (RDerAttr attr : (Collection<RDerAttr>) getParent().getDerAttrs()) {\n-                if (!attrMap.containsKey(attr.getSchema())) {\n-                    result.put((RDerSchema) attr.getSchema(), attr);\n-                }\n-            }\n+            final Map<AbstractDerSchema, AbstractDerAttr> attrDerMap = getDerAttrMap();\n \n-            // Add attributes not specialized and not already added\n-            for (RDerAttr attr : getParent().findInheritedDerAttrs()) {\n-                if (!attrMap.containsKey(attr.getSchema())\n-                        && !result.containsKey((RDerSchema) attr.getSchema())) {\n-\n-                    result.put((RDerSchema) attr.getSchema(), attr);\n+            // Add inherit derived attributes\n+            for (RDerAttr attr : getParent().findLastInheritedAncestorDerivedAttributes()) {\n+                if (attrDerMap.containsKey(attr.getSchema())) {\n+                    result.remove((RDerSchema) attr.getSchema());\n                 }\n+                result.put((RDerSchema) attr.getSchema(), attr);\n             }\n         }\n-\n         return new ArrayList<RDerAttr>(result.values());\n     }\n \n@@ -528,29 +517,24 @@ public void setInheritVirAttrs(final boolean inheritVirAttrs) {\n      * @return a list of inherited and only inherited attributes.\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public List<RVirAttr> findInheritedVirAttrs() {\n+    public List<RVirAttr> findLastInheritedAncestorVirtualAttributes() {\n         final Map<RVirSchema, RVirAttr> result = new HashMap<RVirSchema, RVirAttr>();\n \n-        if (isInheritVirAttrs() && getParent() != null) {\n-            final Map<AbstractVirSchema, AbstractVirAttr> attrMap = getVirAttrMap();\n-\n-            // Add attributes not specialized\n-            for (RVirAttr attr : (Collection<RVirAttr>) getParent().getVirAttrs()) {\n-                if (!attrMap.containsKey(attr.getSchema())) {\n-                    result.put((RVirSchema) attr.getSchema(), attr);\n-                }\n-            }\n+        if (!isInheritVirAttrs()) {\n+            return virAttrs;\n+        }\n \n-            // Add attributes not specialized and not already added\n-            for (RVirAttr attr : getParent().findInheritedVirAttrs()) {\n-                if (!attrMap.containsKey(attr.getSchema())\n-                        && !result.containsKey((RVirSchema) attr.getSchema())) {\n+        if (isInheritVirAttrs() && getParent() != null) {\n+            final Map<AbstractVirSchema, AbstractVirAttr> attrVirMap = getVirAttrMap();\n \n-                    result.put((RVirSchema) attr.getSchema(), attr);\n+            // Add inherit virtual attributes\n+            for (RVirAttr attr : getParent().findLastInheritedAncestorVirtualAttributes()) {\n+                if (attrVirMap.containsKey(attr.getSchema())) {\n+                    result.remove((RVirSchema) attr.getSchema());\n                 }\n+                result.put((RVirSchema) attr.getSchema(), attr);\n             }\n         }\n-\n         return new ArrayList<RVirAttr>(result.values());\n     }\n "},{"sha":"e3fe43373805d97c0394477a95fb6fccf3a3b7b6","filename":"core/src/main/java/org/apache/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dace282e2c26851928e9b81bab423e74a3f277ed/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dace282e2c26851928e9b81bab423e74a3f277ed/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=dace282e2c26851928e9b81bab423e74a3f277ed","patch":"@@ -397,15 +397,12 @@ public RoleTO getRoleTO(final SyncopeRole role) {\n \n         // -------------------------\n         // Retrieve all [derived/virtual] attributes (inherited and not)\n-        // -------------------------\n-        final List<RAttr> allAttributes = role.findInheritedAttrs();\n-        allAttributes.addAll((List<RAttr>) role.getAttrs());\n+        // -------------------------        \n+        final List<RAttr> allAttributes = role.findLastInheritedAncestorAttributes();\n \n-        final List<RDerAttr> allDerAttributes = role.findInheritedDerAttrs();\n-        allDerAttributes.addAll((List<RDerAttr>) role.getDerAttrs());\n+        final List<RDerAttr> allDerAttributes = role.findLastInheritedAncestorDerivedAttributes();\n \n-        final List<RVirAttr> allVirAttributes = role.findInheritedVirAttrs();\n-        allVirAttributes.addAll((List<RVirAttr>) role.getVirAttrs());\n+        final List<RVirAttr> allVirAttributes = role.findLastInheritedAncestorVirtualAttributes();\n         // -------------------------\n \n         fillTO(roleTO, allAttributes, allDerAttributes, allVirAttributes, role.getResources());"},{"sha":"429a7b78f0f3e2946094a9ca3e67a7bacfe068d8","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/RoleTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dace282e2c26851928e9b81bab423e74a3f277ed/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dace282e2c26851928e9b81bab423e74a3f277ed/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java?ref=dace282e2c26851928e9b81bab423e74a3f277ed","patch":"@@ -63,21 +63,21 @@ public void find() {\n     public void inheritedAttributes() {\n         SyncopeRole director = roleDAO.find(7L);\n \n-        assertEquals(1, director.findInheritedAttrs().size());\n+        assertEquals(1, director.findLastInheritedAncestorAttributes().size());\n     }\n \n     @Test\n     public void inheritedDerivedAttributes() {\n         SyncopeRole director = roleDAO.find(7L);\n \n-        assertEquals(1, director.findInheritedDerAttrs().size());\n+        assertEquals(1, director.findLastInheritedAncestorDerivedAttributes().size());\n     }\n \n     @Test\n     public void inheritedVirtualAttributes() {\n         SyncopeRole director = roleDAO.find(7L);\n \n-        assertEquals(1, director.findInheritedVirAttrs().size());\n+        assertEquals(1, director.findLastInheritedAncestorVirtualAttributes().size());\n     }\n \n     @Test"},{"sha":"a6a6009e7946a42b7fb721d642e5d00f11c3a735","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":60,"deletions":81,"changes":141,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dace282e2c26851928e9b81bab423e74a3f277ed/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dace282e2c26851928e9b81bab423e74a3f277ed/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=dace282e2c26851928e9b81bab423e74a3f277ed","patch":"@@ -28,29 +28,23 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.security.AccessControlException;\n-import java.util.Collection;\n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.SyncopeClient;\n import org.apache.syncope.common.SyncopeClientException;\n-import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.mod.ReferenceMod;\n import org.apache.syncope.common.mod.RoleMod;\n import org.apache.syncope.common.reqres.BulkActionResult;\n import org.apache.syncope.common.reqres.PagedResult;\n import org.apache.syncope.common.services.RoleService;\n import org.apache.syncope.common.to.ConnObjectTO;\n-import org.apache.syncope.common.to.MappingItemTO;\n-import org.apache.syncope.common.to.MappingTO;\n-import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.SchemaTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.ClientExceptionType;\n-import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.common.types.Preference;\n import org.apache.syncope.common.types.RESTHeaders;\n import org.apache.syncope.common.types.ResourceAssociationActionType;\n@@ -738,81 +732,66 @@ public void issueSYNCOPE455() {\n     }\n \n     @Test\n-    public void issueSYNCOPE493() {\n-        // 1.  create role and check that title is propagated on resource with mapping for title set to BOTH\n-        RoleTO roleTO = buildBasicRoleTO(\"issueSYNCOPE493-Role\");\n-        roleTO.getResources().add(RESOURCE_NAME_LDAP);\n-        roleTO.getRAttrTemplates().add(\"title\");\n-        roleTO.getAttrs().add(attributeTO(\"title\", \"TITLE\"));\n-\n-        roleTO = createRole(roleTO);\n-        assertTrue(roleTO.getResources().contains(RESOURCE_NAME_LDAP));\n-\n-        ConnObjectTO actual = resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.ROLE,\n-                roleTO.getId());\n-        assertNotNull(actual);\n-\n-        // check if mapping attribute with purpose BOTH has really been propagated\n-        assertNotNull(actual.getAttrMap().get(\"description\"));\n-        assertEquals(\"TITLE\", actual.getAttrMap().get(\"description\").getValues().get(0));\n-\n-        // 2.  update resource LDAP\n-        ResourceTO ldap = resourceService.read(RESOURCE_NAME_LDAP);\n-        assertNotNull(ldap);\n-\n-        MappingTO ldapNewRMapping = ldap.getRmapping();\n-        // change purpose from BOTH to NONE\n-        for (MappingItemTO itemTO : ldapNewRMapping.getItems()) {\n-            if (\"title\".equals(itemTO.getIntAttrName())) {\n-                itemTO.setPurpose(MappingPurpose.NONE);\n-            }\n-        }\n-\n-        ldap.setRmapping(ldapNewRMapping);\n-        ldap.setUmapping(ldap.getUmapping());\n-\n-        resourceService.update(RESOURCE_NAME_LDAP, ldap);\n-        ResourceTO newLdap = resourceService.read(ldap.getName());\n-        assertNotNull(newLdap);\n-\n-        // check for existence\n-        Collection<MappingItemTO> mapItems = newLdap.getRmapping().getItems();\n-        assertNotNull(mapItems);\n-        assertEquals(4, mapItems.size());\n-\n-        // 3.  update role and check that title han not been propagated, external attribute description must not be present\n-        // in role mapping\n-        RoleMod roleMod = new RoleMod();\n-        roleMod.setId(roleTO.getId());\n-\n-        AttributeMod attr = attributeMod(\"title\", \"TITLENEW\");\n-        attr.getValuesToBeRemoved().add(\"TITLE\");\n-        roleMod.getAttrsToUpdate().add(attr);\n-        roleTO = updateRole(roleMod);\n-        assertNotNull(roleTO);\n-        assertEquals(1, roleTO.getPropagationStatusTOs().size());\n-        assertTrue(roleTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n-        // check update on Syncope\n-        assertEquals(\"TITLENEW\", roleTO.getAttrMap().get(\"title\").getValues().get(0));\n-\n-        final ConnObjectTO newRole = resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.ROLE,\n-                roleTO.getId());\n-\n-        // due to NONE mapping for attribute title external attribute description must not be present\n-        assertNull(newRole.getAttrMap().get(\"description\"));\n-\n-        // 4.  restore resource LDAP mapping\n-        ldapNewRMapping = newLdap.getRmapping();\n-        // restore purpose from NONE to BOTH\n-        for (MappingItemTO itemTO : ldapNewRMapping.getItems()) {\n-            if (\"title\".equals(itemTO.getIntAttrName())) {\n-                itemTO.setPurpose(MappingPurpose.BOTH);\n-            }\n-        }\n-\n-        newLdap.setRmapping(ldapNewRMapping);\n-        newLdap.setUmapping(newLdap.getUmapping());\n+    public void issueSYNCOPE543() {\n+        final String ancestorName = \"issueSYNCOPE543-ARole\";\n+        final String parentName = \"issueSYNCOPE543-PRole\";\n+        final String childName = \"issueSYNCOPE543-CRole\";\n+\n+        // 1. create ancestor role\n+        RoleTO ancestor = buildBasicRoleTO(ancestorName);\n+        ancestor.setParent(0L);\n+        ancestor.getRAttrTemplates().add(\"icon\");\n+        ancestor.getAttrs().add(attributeTO(\"icon\", \"ancestorIcon\"));\n+        ancestor = createRole(ancestor);\n+        assertEquals(\"ancestorIcon\", ancestor.getAttrMap().get(\"icon\").getValues().get(0));\n+\n+        // 2. create parent role\n+        RoleTO parent = buildBasicRoleTO(parentName);\n+        parent.setParent(ancestor.getId());\n+        parent.getRAttrTemplates().add(\"icon\");\n+        parent.getAttrs().add(attributeTO(\"icon\", \"parentIcon\"));\n+        parent = createRole(parent);\n+        assertEquals(\"parentIcon\", parent.getAttrMap().get(\"icon\").getValues().get(0));\n \n-        resourceService.update(RESOURCE_NAME_LDAP, newLdap);\n+        // 3. create child role\n+        RoleTO child = buildBasicRoleTO(childName);\n+        child.setParent(parent.getId());\n+        child.getRAttrTemplates().add(\"icon\");\n+        child.getAttrs().add(attributeTO(\"icon\", \"childIcon\"));\n+        child = createRole(child);\n+        assertEquals(\"childIcon\", child.getAttrMap().get(\"icon\").getValues().get(0));\n+\n+        final RoleMod roleChildMod = new RoleMod();\n+        roleChildMod.setId(child.getId());\n+        roleChildMod.setInheritAttributes(Boolean.TRUE);\n+        updateRole(roleChildMod);\n+\n+        child = roleService.read(child.getId());\n+        assertNotNull(child);\n+        assertNotNull(child.getAttrMap().get(\"icon\").getValues());\n+        assertEquals(\"parentIcon\", child.getAttrMap().get(\"icon\").getValues().get(0));\n+\n+        final RoleMod roleParentMod = new RoleMod();\n+        roleParentMod.setId(parent.getId());\n+        roleParentMod.setInheritAttributes(Boolean.TRUE);\n+        updateRole(roleParentMod);\n+\n+        child = roleService.read(child.getId());\n+        assertNotNull(child);\n+        assertNotNull(child.getAttrMap().get(\"icon\").getValues());\n+        assertEquals(\"ancestorIcon\", child.getAttrMap().get(\"icon\").getValues().get(0));\n+\n+        parent = roleService.read(parent.getId());\n+        assertNotNull(parent);\n+        assertNotNull(parent.getAttrMap().get(\"icon\").getValues());\n+        assertEquals(\"ancestorIcon\", parent.getAttrMap().get(\"icon\").getValues().get(0));\n+\n+        roleParentMod.setInheritAttributes(Boolean.FALSE);\n+        updateRole(roleParentMod);\n+\n+        child = roleService.read(child.getId());\n+        assertNotNull(child);\n+        assertNotNull(child.getAttrMap().get(\"icon\").getValues());\n+        assertEquals(\"parentIcon\", child.getAttrMap().get(\"icon\").getValues().get(0));\n     }\n }"}]}