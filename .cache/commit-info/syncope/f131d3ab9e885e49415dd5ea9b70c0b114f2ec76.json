{"sha":"f131d3ab9e885e49415dd5ea9b70c0b114f2ec76","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmYxMzFkM2FiOWU4ODVlNDk0MTVkZDVlYTliNzBjMGIxMTRmMmVjNzY=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-23T13:36:55Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-23T13:36:55Z"},"message":"Aynchronous propagation via @Async\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246642 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"db9e9b59afcee1f83a4d7f2e0fef356d00cdea27","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/db9e9b59afcee1f83a4d7f2e0fef356d00cdea27"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f131d3ab9e885e49415dd5ea9b70c0b114f2ec76","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f131d3ab9e885e49415dd5ea9b70c0b114f2ec76","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f131d3ab9e885e49415dd5ea9b70c0b114f2ec76","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f131d3ab9e885e49415dd5ea9b70c0b114f2ec76/comments","author":null,"committer":null,"parents":[{"sha":"856dfaa059216368c8840b2b255cd5bfacdab7ce","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/856dfaa059216368c8840b2b255cd5bfacdab7ce","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/856dfaa059216368c8840b2b255cd5bfacdab7ce"}],"stats":{"total":166,"additions":95,"deletions":71},"files":[{"sha":"31ba42de42d6d38ecf882c17840d6bc051cbdbe7","filename":"core/src/main/java/org/syncope/core/persistence/ConnectorInstanceLoader.java","status":"modified","additions":4,"deletions":14,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f131d3ab9e885e49415dd5ea9b70c0b114f2ec76/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f131d3ab9e885e49415dd5ea9b70c0b114f2ec76/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java?ref=f131d3ab9e885e49415dd5ea9b70c0b114f2ec76","patch":"@@ -90,9 +90,7 @@ public static ConnectorInfoManager getConnectorManager()\n             throw new NotFoundException(\"Bundles from dir \"\n                     + connectorBundleDir.getConfValue());\n         }\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Bundle file URLs: \" + bundleFileURLs);\n-        }\n+        LOG.debug(\"Bundle file URLs: {}\", bundleFileURLs);\n \n         // 3. Get connector info manager\n         ConnectorInfoManager manager =\n@@ -125,21 +123,13 @@ public static void registerConnector(final ConnectorInstance instance)\n             removeConnector(instance.getId().toString());\n         }\n \n-        ConfigurableApplicationContext context =\n-                ApplicationContextManager.getApplicationContext();\n-\n         ConnectorFacadeProxy connector = new ConnectorFacadeProxy(instance);\n-\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Connector \" + connector);\n-        }\n+        LOG.debug(\"Connector to be registered: {}\", connector);\n \n         getBeanFactory().registerSingleton(\n                 instance.getId().toString(), connector);\n-\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Registered bean \" + instance.getId().toString());\n-        }\n+        LOG.debug(\"Successfully registered bean {}\",\n+                instance.getId().toString());\n     }\n \n     public static void removeConnector(final String id) {"},{"sha":"330c7961856b0bbe0033a17e690171ba743cd04f","filename":"core/src/main/java/org/syncope/core/persistence/beans/Task.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f131d3ab9e885e49415dd5ea9b70c0b114f2ec76/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f131d3ab9e885e49415dd5ea9b70c0b114f2ec76/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java?ref=f131d3ab9e885e49415dd5ea9b70c0b114f2ec76","patch":"@@ -26,7 +26,6 @@\n import javax.persistence.Entity;\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n-import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n@@ -52,42 +51,48 @@ public class Task extends AbstractBaseBean {\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private Long id;\n+\n     /**\n      * @see PropagationMode\n      */\n     @Enumerated(EnumType.STRING)\n     @Column(nullable = false)\n     private PropagationMode propagationMode;\n+\n     /**\n      * @see ResourceOperationType\n      */\n     @Enumerated(EnumType.STRING)\n     @Column(nullable = false)\n     private ResourceOperationType resourceOperationType;\n+\n     /**\n      * The accountId on the target resource.\n      */\n     private String accountId;\n+\n     /**\n      * The (optional) former accountId on the target resource.\n      */\n     private String oldAccountId;\n+\n     /**\n      * Attributes to be propagated.\n      */\n     @Lob\n     @Column(nullable = false)\n     private String xmlAttributes;\n+\n     /**\n      * TargetResource to which the propagation happens.\n      */\n     @ManyToOne\n     private TargetResource resource;\n+\n     /**\n      * When this task has been (or will be) executed, what its result was.\n      */\n-    @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"task\",\n-    fetch = FetchType.LAZY)\n+    @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"task\")\n     @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n     private List<TaskExecution> executions;\n "},{"sha":"5ef8d09060bd48be33c385e2953eb39c4d909f2b","filename":"core/src/main/java/org/syncope/core/persistence/beans/TaskExecution.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f131d3ab9e885e49415dd5ea9b70c0b114f2ec76/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExecution.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f131d3ab9e885e49415dd5ea9b70c0b114f2ec76/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExecution.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExecution.java?ref=f131d3ab9e885e49415dd5ea9b70c0b114f2ec76","patch":"@@ -41,26 +41,31 @@ public class TaskExecution extends AbstractBaseBean {\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private Long id;\n+\n     /**\n      * Start instant of this execution.\n      */\n     @Temporal(TemporalType.TIMESTAMP)\n     private Date startDate;\n+\n     /**\n      * End instant of this execution.\n      */\n     @Temporal(TemporalType.TIMESTAMP)\n     private Date endDate;\n+\n     /**\n      * Did this execution completed with success?\n      */\n     @Enumerated(EnumType.STRING)\n     private TaskExecutionStatus status;\n+\n     /**\n      * Any information to be accompained to this execution's result.\n      */\n     @Lob\n     private String message;\n+\n     /**\n      * The referred task.\n      */"},{"sha":"0a725d3c7bbe13043b6d6db4efaac0aeb52a085f","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/TaskDAOImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f131d3ab9e885e49415dd5ea9b70c0b114f2ec76/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f131d3ab9e885e49415dd5ea9b70c0b114f2ec76/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java?ref=f131d3ab9e885e49415dd5ea9b70c0b114f2ec76","patch":"@@ -31,8 +31,7 @@ public Task find(final Long id) {\n \n     @Override\n     public List<Task> findAll() {\n-        Query query = entityManager.createQuery(\n-                \"SELECT e FROM Task e\");\n+        Query query = entityManager.createQuery(\"SELECT e FROM Task e\");\n         return query.getResultList();\n     }\n "},{"sha":"7832d27482bdaab8adb7d95e76e77f99d3e51dab","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":40,"deletions":36,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f131d3ab9e885e49415dd5ea9b70c0b114f2ec76/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f131d3ab9e885e49415dd5ea9b70c0b114f2ec76/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=f131d3ab9e885e49415dd5ea9b70c0b114f2ec76","patch":"@@ -32,7 +32,8 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.scheduling.annotation.Async;\n+import org.springframework.stereotype.Component;\n import org.syncope.core.persistence.ConnectorInstanceLoader;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n@@ -46,6 +47,7 @@\n import org.syncope.core.persistence.beans.user.UserAttributeValue;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.TaskDAO;\n+import org.syncope.core.rest.data.TaskDataBinder;\n import org.syncope.types.PropagationMode;\n import org.syncope.types.ResourceOperationType;\n import org.syncope.types.SchemaType;\n@@ -55,9 +57,7 @@\n /**\n  * Manage the data propagation to target resources.\n  */\n-@Transactional(rollbackFor = {\n-    Throwable.class\n-})\n+@Component\n public class PropagationManager {\n \n     /**\n@@ -78,10 +78,14 @@ public class PropagationManager {\n     @Autowired\n     private TaskDAO taskDAO;\n \n+    @Autowired\n+    private TaskDataBinder taskDataBinder;\n+\n     /**\n      * Create the user on every associated resource.\n      * Exceptions will be ignored.\n      * @param user to be created.\n+     * @param password to be set.\n      * @throws PropagationException\n      */\n     public void create(final SyncopeUser user, final String password)\n@@ -97,6 +101,7 @@ public void create(final SyncopeUser user, final String password)\n      * Exceptions won't be ignored and the process will be stopped if the\n      * creation fails onto a synchronous resource.\n      * @param user to be created.\n+     * @param password to be set.\n      * @param syncResourceNames to ask for a synchronous or\n      * asynchronous provisioning.\n      * @throws PropagationException\n@@ -130,6 +135,7 @@ public void create(final SyncopeUser user,\n      * Exceptions won't be ignored and the process will be stoppend if the\n      * provisioning fails onto a synchronous resource.\n      * @param user to be updated.\n+     * @param password to be updated.\n      * @param affectedResources resources affected by this update\n      * @param syncResourceNames to ask for a synchronous or asynchronous update.\n      * @throws PropagationException\n@@ -190,7 +196,7 @@ private void provision(\n         LOG.debug(\"After purge: {}\", resourceOperations);\n \n         Task task;\n-        TaskExecution taskExecution;\n+        TaskExecution execution;\n         for (ResourceOperationType type : ResourceOperationType.values()) {\n             for (TargetResource resource : resourceOperations.get(type)) {\n                 Map<String, Set<Attribute>> preparedAttributes =\n@@ -209,31 +215,32 @@ private void provision(\n                 task.setAttributes(\n                         preparedAttributes.values().iterator().next());\n \n-                taskExecution = new TaskExecution();\n-                taskExecution.setTask(task);\n-                task.addExecution(taskExecution);\n+                execution = new TaskExecution();\n+                execution.setTask(task);\n+                task.addExecution(execution);\n \n                 task = taskDAO.save(task);\n                 // re-read it after saving\n-                taskExecution = task.getExecutions().get(0);\n+                execution = task.getExecutions().get(0);\n+\n+                LOG.debug(\"Execution started for {}\", task);\n \n-                LOG.debug(\"Start propagation ...\");\n+                if (PropagationMode.SYNC\n+                        == execution.getTask().getPropagationMode()) {\n \n-                if (PropagationMode.SYNC.equals(\n-                        taskExecution.getTask().getPropagationMode())) {\n-                    propagate(taskExecution);\n+                    syncPropagate(execution);\n                 } else {\n-                    asyncPropagate(taskExecution);\n+                    asyncPropagate(execution);\n                 }\n \n-                LOG.debug(\"Returned from propagation...\");\n+                LOG.debug(\"Execution finished for {}\", task);\n \n                 if (syncResourceNames.contains(resource.getName())\n-                        && taskExecution.getStatus()\n+                        && execution.getStatus()\n                         != TaskExecutionStatus.SUCCESS) {\n \n                     throw new PropagationException(resource.getName(),\n-                            taskExecution.getMessage());\n+                            execution.getMessage());\n                 }\n             }\n         }\n@@ -400,16 +407,15 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n         return Collections.singletonMap(accountId, attributes);\n     }\n \n-    public void propagate(final TaskExecution execution) {\n+    private void propagate(final TaskExecution execution) {\n         execution.setStartDate(new Date());\n \n         try {\n             ConnectorInstance connectorInstance = execution.getTask().\n-                    getResource().\n-                    getConnector();\n+                    getResource().getConnector();\n \n-            ConnectorFacadeProxy connector = ConnectorInstanceLoader.getConnector(\n-                    connectorInstance.getId().toString());\n+            ConnectorFacadeProxy connector = ConnectorInstanceLoader.\n+                    getConnector(connectorInstance.getId().toString());\n \n             if (connector == null) {\n                 LOG.error(\"Connector instance bean \"\n@@ -463,10 +469,8 @@ public void propagate(final TaskExecution execution) {\n                 default:\n             }\n \n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Succesfully propagated to resource \"\n-                        + execution.getTask().getResource().getName());\n-            }\n+            LOG.debug(\"Succesfully propagated to resource {}\",\n+                    execution.getTask().getResource().getName());\n \n             execution.setStatus(execution.getTask().getPropagationMode()\n                     == PropagationMode.SYNC\n@@ -489,17 +493,17 @@ public void propagate(final TaskExecution execution) {\n         }\n     }\n \n-    public void asyncPropagate(final TaskExecution execution) {\n-        LOG.debug(\"Asynchronous task execution\");\n+    public void syncPropagate(final TaskExecution execution) {\n+        LOG.debug(\"Synchronous execution {}\", execution);\n \n-        // @Async doesn't work so we go on, temporary, with a simple thread\n-        \n-        new Thread() {\n+        propagate(execution);\n+    }\n \n-            @Override\n-            public void run() {\n-                propagate(execution);\n-            }\n-        }.start();\n+    @Async\n+    public void asyncPropagate(final TaskExecution execution) {\n+        LOG.debug(\"Asynchronous execution {}\", execution);\n+\n+        propagate(execution);\n+        taskDataBinder.storeTaskExecution(execution);\n     }\n }"},{"sha":"40f95018133fb746c226b6ee1be01b5e5cc9adbc","filename":"core/src/main/java/org/syncope/core/rest/controller/TaskController.java","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f131d3ab9e885e49415dd5ea9b70c0b114f2ec76/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f131d3ab9e885e49415dd5ea9b70c0b114f2ec76/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=f131d3ab9e885e49415dd5ea9b70c0b114f2ec76","patch":"@@ -44,10 +44,13 @@ public class TaskController extends AbstractController {\n \n     @Autowired\n     private TaskDAO taskDAO;\n+\n     @Autowired\n     private TaskExecutionDAO taskExecutionDAO;\n+\n     @Autowired\n     private TaskDataBinder taskDataBinder;\n+\n     @Autowired\n     private PropagationManager propagationManager;\n \n@@ -116,8 +119,20 @@ public TaskExecutionTO execute(@PathVariable(\"taskId\") final Long taskId)\n         TaskExecution execution = new TaskExecution();\n         execution.setTask(task);\n         task.addExecution(execution);\n+        execution = taskExecutionDAO.save(execution);\n+\n+        LOG.debug(\"Execution started for {}\", task);\n+\n+        if (PropagationMode.SYNC\n+                == execution.getTask().getPropagationMode()) {\n+\n+            propagationManager.syncPropagate(execution);\n+        } else {\n+            propagationManager.asyncPropagate(execution);\n+        }\n+\n+        LOG.debug(\"Execution finished for {}\", task);\n \n-        propagationManager.propagate(execution);\n         execution = taskExecutionDAO.save(execution);\n \n         return taskDataBinder.getTaskExecutionTO(execution);"},{"sha":"ff1ead170de33b8e557c8db901544d0dbfaddddb","filename":"core/src/main/java/org/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":11,"deletions":8,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f131d3ab9e885e49415dd5ea9b70c0b114f2ec76/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f131d3ab9e885e49415dd5ea9b70c0b114f2ec76/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=f131d3ab9e885e49415dd5ea9b70c0b114f2ec76","patch":"@@ -14,36 +14,39 @@\n  */\n package org.syncope.core.rest.data;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.client.to.TaskExecutionTO;\n import org.syncope.client.to.TaskTO;\n import org.syncope.core.persistence.beans.Task;\n import org.syncope.core.persistence.beans.TaskExecution;\n+import org.syncope.core.persistence.dao.TaskExecutionDAO;\n \n @Component\n @Transactional(rollbackFor = {\n     Throwable.class\n })\n public class TaskDataBinder {\n \n-    /**\n-     * Logger.\n-     */\n-    private static final Logger LOG = LoggerFactory.getLogger(\n-            TaskDataBinder.class);\n     private static final String[] IGNORE_TASK_PROPERTIES = {\n         \"executions\", \"resource\"};\n+\n     private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = {\n         \"task\"};\n \n+    @Autowired\n+    private TaskExecutionDAO taskExecutionDAO;\n+\n+    public TaskExecution storeTaskExecution(final TaskExecution execution) {\n+        return taskExecutionDAO.save(execution);\n+    }\n+\n     public TaskExecutionTO getTaskExecutionTO(final TaskExecution execution) {\n         TaskExecutionTO executionTO = new TaskExecutionTO();\n         BeanUtils.copyProperties(execution, executionTO,\n-                                 IGNORE_TASK_EXECUTION_PROPERTIES);\n+                IGNORE_TASK_EXECUTION_PROPERTIES);\n         executionTO.setTask(execution.getTask().getId());\n \n         return executionTO;"},{"sha":"24ae2b82783a8f77f1a057a21ad8879879585335","filename":"core/src/main/resources/persistenceContext.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f131d3ab9e885e49415dd5ea9b70c0b114f2ec76/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f131d3ab9e885e49415dd5ea9b70c0b114f2ec76/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=f131d3ab9e885e49415dd5ea9b70c0b114f2ec76","patch":"@@ -16,6 +16,7 @@\n        xmlns:context=\"http://www.springframework.org/schema/context\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xmlns:p=\"http://www.springframework.org/schema/p\"\n+       xmlns:task=\"http://www.springframework.org/schema/task\"\n        xmlns:tx=\"http://www.springframework.org/schema/tx\"\n        xmlns:aop=\"http://www.springframework.org/schema/aop\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n@@ -24,6 +25,8 @@\n        http://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/p\n        http://www.springframework.org/schema/p/spring-p.xsd\n+       http://www.springframework.org/schema/task\n+       http://www.springframework.org/schema/task/spring-task.xsd\n        http://www.springframework.org/schema/tx\n        http://www.springframework.org/schema/tx/spring-tx.xsd\n        http://www.springframework.org/schema/aop\n@@ -111,6 +114,7 @@\n         <property name=\"silent\" value=\"false\"/>\n     </bean>\n \n+    <task:annotation-driven/>\n     <bean id=\"propagationManager\"\n           class=\"org.syncope.core.persistence.propagation.PropagationManager\"/>\n </beans>"},{"sha":"38c41b1e925d2a52d91f91dbc496fcffc93f9773","filename":"core/src/test/java/org/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f131d3ab9e885e49415dd5ea9b70c0b114f2ec76/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f131d3ab9e885e49415dd5ea9b70c0b114f2ec76/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=f131d3ab9e885e49415dd5ea9b70c0b114f2ec76","patch":"@@ -71,18 +71,18 @@ public final void readExecution() {\n         assertNotNull(taskTO);\n     }\n \n-        @Test\n+    @Test\n     public final void deal() {\n         try {\n             restTemplate.delete(BASE_URL + \"task/delete/{taskId}\", 0);\n         } catch (HttpStatusCodeException e) {\n-            assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n+            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n \n         TaskExecutionTO execution = restTemplate.getForObject(\n                 BASE_URL + \"task/execute/{taskId}\",\n                 TaskExecutionTO.class, 1);\n-        assertEquals(execution.getStatus(), TaskExecutionStatus.SUBMITTED);\n+        assertEquals(TaskExecutionStatus.CREATED, execution.getStatus());\n \n         Exception exception = null;\n         try {\n@@ -98,17 +98,16 @@ public final void deal() {\n                 BASE_URL + \"task/execution/report/{executionId}\"\n                 + \"?executionStatus=SUCCESS&message=OK\",\n                 TaskExecutionTO.class, execution.getId());\n-        assertEquals(execution.getStatus(), TaskExecutionStatus.SUCCESS);\n-        assertEquals(execution.getMessage(), \"OK\");\n+        assertEquals(TaskExecutionStatus.SUCCESS, execution.getStatus());\n+        assertEquals(\"OK\", execution.getMessage());\n \n         restTemplate.delete(BASE_URL + \"task/delete/{taskId}\", 1);\n         try {\n             restTemplate.getForObject(\n                     BASE_URL + \"task/execution/read/{executionId}\",\n                     TaskExecutionTO.class, execution.getId());\n         } catch (HttpStatusCodeException e) {\n-            assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n+            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n     }\n-\n }"}]}