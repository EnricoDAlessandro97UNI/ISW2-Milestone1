{"sha":"a70bcca0d323a3291e84eb2f1f83a9543e0790da","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE3MGJjY2EwZDMyM2EzMjkxZTg0ZWIyZjFmODNhOTU0M2UwNzkwZGE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-02-12T06:05:48Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-02-12T06:05:48Z"},"message":"Moving test mail server to build-tools (avoid noisy logging messages in embedded mode)","tree":{"sha":"a72f8768c0c48ef8a3a4ba2b6cfe8c822a1fdefc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a72f8768c0c48ef8a3a4ba2b6cfe8c822a1fdefc"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a70bcca0d323a3291e84eb2f1f83a9543e0790da","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a70bcca0d323a3291e84eb2f1f83a9543e0790da","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a70bcca0d323a3291e84eb2f1f83a9543e0790da","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a70bcca0d323a3291e84eb2f1f83a9543e0790da/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"6744112dfa3d0f90891e8dc6a3819cdbe86acb8f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6744112dfa3d0f90891e8dc6a3819cdbe86acb8f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6744112dfa3d0f90891e8dc6a3819cdbe86acb8f"}],"stats":{"total":713,"additions":639,"deletions":74},"files":[{"sha":"c8aca8d618087d8151c3c50ee09aeedf85f4eba2","filename":"fit/build-tools/pom.xml","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fbuild-tools%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fbuild-tools%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fpom.xml?ref=a70bcca0d323a3291e84eb2f1f83a9543e0790da","patch":"@@ -191,7 +191,12 @@ under the License.\n       <groupId>org.codehaus.groovy</groupId>\n       <artifactId>groovy-sql</artifactId>\n     </dependency>\n-    \n+\n+    <dependency>\n+      <groupId>com.icegreen</groupId>\n+      <artifactId>greenmail</artifactId>\n+    </dependency>\n+\n     <dependency>\n       <groupId>commons-logging</groupId>\n       <artifactId>commons-logging</artifactId>"},{"sha":"133cec8df8b38082588e98cf17914c7533d47abe","filename":"fit/build-tools/src/main/java/com/icegreen/greenmail/smtp/InterruptableGreenMail.java","status":"added","additions":330,"deletions":0,"changes":330,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Ficegreen%2Fgreenmail%2Fsmtp%2FInterruptableGreenMail.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Ficegreen%2Fgreenmail%2Fsmtp%2FInterruptableGreenMail.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Ficegreen%2Fgreenmail%2Fsmtp%2FInterruptableGreenMail.java?ref=a70bcca0d323a3291e84eb2f1f83a9543e0790da","patch":"@@ -0,0 +1,330 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.icegreen.greenmail.smtp;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.mail.MessagingException;\n+import javax.mail.internet.MimeMessage;\n+\n+import com.icegreen.greenmail.Managers;\n+import com.icegreen.greenmail.configuration.ConfiguredGreenMail;\n+import com.icegreen.greenmail.configuration.GreenMailConfiguration;\n+import com.icegreen.greenmail.imap.ImapHostManager;\n+import com.icegreen.greenmail.imap.ImapServer;\n+import com.icegreen.greenmail.pop3.Pop3Server;\n+import com.icegreen.greenmail.server.AbstractServer;\n+import com.icegreen.greenmail.store.FolderException;\n+import com.icegreen.greenmail.store.InMemoryStore;\n+import com.icegreen.greenmail.store.MailFolder;\n+import com.icegreen.greenmail.store.StoredMessage;\n+import com.icegreen.greenmail.user.GreenMailUser;\n+import com.icegreen.greenmail.user.UserException;\n+import com.icegreen.greenmail.util.GreenMailUtil;\n+import com.icegreen.greenmail.util.ServerSetup;\n+import com.icegreen.greenmail.util.ServerSetupTest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Utility class that manages a greenmail server with support for multiple protocols.\n+ */\n+public class InterruptableGreenMail extends ConfiguredGreenMail {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(InterruptableGreenMail.class);\n+\n+    protected Managers managers;\n+\n+    protected Map<String, AbstractServer> services;\n+\n+    protected ServerSetup[] config;\n+\n+    /**\n+     * Creates a SMTP, SMTPS, POP3, POP3S, IMAP, and IMAPS server binding onto non-default ports.\n+     * The ports numbers are defined in {@link ServerSetupTest}\n+     */\n+    public InterruptableGreenMail() {\n+        this(ServerSetupTest.ALL);\n+    }\n+\n+    /**\n+     * Call this constructor if you want to run one of the email servers only\n+     *\n+     * @param config Server setup to use\n+     */\n+    public InterruptableGreenMail(final ServerSetup config) {\n+        this(new ServerSetup[] { config });\n+    }\n+\n+    /**\n+     * Call this constructor if you want to run more than one of the email servers\n+     *\n+     * @param config Server setup to use\n+     */\n+    public InterruptableGreenMail(final ServerSetup[] config) {\n+        this.config = config;\n+        init();\n+    }\n+\n+    /**\n+     * Initialize\n+     */\n+    protected void init() {\n+        if (managers == null) {\n+            managers = new Managers();\n+        }\n+        if (services == null) {\n+            services = createServices(config, managers);\n+        }\n+    }\n+\n+    @Override\n+    public synchronized void start() {\n+        init();\n+\n+        final Collection<AbstractServer> servers = services.values();\n+        servers.forEach(service -> {\n+            service.startService();\n+        });\n+\n+        // Wait till all services are up and running\n+        servers.forEach(service -> {\n+            try {\n+                service.waitTillRunning(service.getServerSetup().getServerStartupTimeout());\n+            } catch (InterruptedException ex) {\n+                Thread.currentThread().interrupt();\n+                throw new IllegalStateException(\"Could not start mail service \" + service, ex);\n+            }\n+        });\n+\n+        LOG.debug(\"Started services, performing check if all up\");\n+        // Make sure if all services are up in a second loop, giving slow services more time.\n+        servers.stream().\n+                filter(service -> (!service.isRunning())).\n+                forEach((service) -> {\n+                    throw new IllegalStateException(\"Could not start mail server \" + service\n+                            + \", try to set server startup timeout > \"\n+                            + service.getServerSetup().getServerStartupTimeout()\n+                            + \" via \" + ServerSetup.class.getSimpleName() + \".setServerStartupTimeout(timeoutInMs) or \"\n+                            + \"-Dgreenmail.startup.timeout\");\n+                });\n+\n+        doConfigure();\n+    }\n+\n+    @Override\n+    public synchronized void stop() {\n+        LOG.debug(\"Stopping GreenMail ...\");\n+\n+        if (services != null) {\n+            services.values().forEach(service -> {\n+                LOG.debug(\"Stopping service {}\", service);\n+                service.stopService();\n+            });\n+        }\n+        managers = new Managers();\n+        services = null;\n+    }\n+\n+    @Override\n+    public void reset() {\n+        stop();\n+        start();\n+    }\n+\n+    /**\n+     * Create the required services according to the server setup\n+     *\n+     * @param config Service configuration\n+     * @param mgr Service managers\n+     * @return Services map\n+     */\n+    protected Map<String, AbstractServer> createServices(final ServerSetup[] config, final Managers mgr) {\n+        Map<String, AbstractServer> srvc = new HashMap<>();\n+        for (ServerSetup setup : config) {\n+            if (srvc.containsKey(setup.getProtocol())) {\n+                throw new IllegalArgumentException(\"Server '\" + setup.getProtocol()\n+                        + \"' was found at least twice in the array\");\n+            }\n+            final String protocol = setup.getProtocol();\n+            if (protocol.startsWith(ServerSetup.PROTOCOL_SMTP)) {\n+                srvc.put(protocol, new InterruptableSmtpServer(setup, mgr));\n+            } else if (protocol.startsWith(ServerSetup.PROTOCOL_POP3)) {\n+                srvc.put(protocol, new Pop3Server(setup, mgr));\n+            } else if (protocol.startsWith(ServerSetup.PROTOCOL_IMAP)) {\n+                srvc.put(protocol, new ImapServer(setup, mgr));\n+            }\n+        }\n+        return srvc;\n+    }\n+\n+    @Override\n+    public SmtpServer getSmtp() {\n+        return (SmtpServer) services.get(ServerSetup.PROTOCOL_SMTP);\n+    }\n+\n+    @Override\n+    public ImapServer getImap() {\n+        return (ImapServer) services.get(ServerSetup.PROTOCOL_IMAP);\n+\n+    }\n+\n+    @Override\n+    public Pop3Server getPop3() {\n+        return (Pop3Server) services.get(ServerSetup.PROTOCOL_POP3);\n+    }\n+\n+    @Override\n+    public SmtpServer getSmtps() {\n+        return (SmtpServer) services.get(ServerSetup.PROTOCOL_SMTPS);\n+    }\n+\n+    @Override\n+    public ImapServer getImaps() {\n+        return (ImapServer) services.get(ServerSetup.PROTOCOL_IMAPS);\n+\n+    }\n+\n+    @Override\n+    public Pop3Server getPop3s() {\n+        return (Pop3Server) services.get(ServerSetup.PROTOCOL_POP3S);\n+    }\n+\n+    @Override\n+    public Managers getManagers() {\n+        return managers;\n+    }\n+\n+    //~ Convenience Methods, often needed while testing ---------------------------------------------------------------\n+    @Override\n+    public boolean waitForIncomingEmail(final long timeout, final int emailCount) {\n+        final CountDownLatch waitObject = managers.getSmtpManager().createAndAddNewWaitObject(emailCount);\n+        final long endTime = System.currentTimeMillis() + timeout;\n+        while (waitObject.getCount() > 0) {\n+            final long waitTime = endTime - System.currentTimeMillis();\n+            if (waitTime < 0L) {\n+                return waitObject.getCount() == 0;\n+            }\n+            try {\n+                waitObject.await(waitTime, TimeUnit.MILLISECONDS);\n+            } catch (InterruptedException e) {\n+                // Continue loop, in case of premature interruption\n+            }\n+        }\n+        return waitObject.getCount() == 0;\n+    }\n+\n+    @Override\n+    public boolean waitForIncomingEmail(final int emailCount) {\n+        return waitForIncomingEmail(5000L, emailCount);\n+    }\n+\n+    @Override\n+    public MimeMessage[] getReceivedMessages() {\n+        List<StoredMessage> msgs = managers.getImapHostManager().getAllMessages();\n+        MimeMessage[] ret = new MimeMessage[msgs.size()];\n+        for (int i = 0; i < msgs.size(); i++) {\n+            StoredMessage storedMessage = msgs.get(i);\n+            ret[i] = storedMessage.getMimeMessage();\n+        }\n+        return ret;\n+    }\n+\n+    @Deprecated\n+    @Override\n+    public MimeMessage[] getReceviedMessagesForDomain(final String domain) {\n+        return getReceivedMessagesForDomain(domain);\n+    }\n+\n+    @Override\n+    public MimeMessage[] getReceivedMessagesForDomain(final String domain) {\n+        List<StoredMessage> msgs = managers.getImapHostManager().getAllMessages();\n+        List<MimeMessage> ret = new ArrayList<>();\n+        try {\n+            for (StoredMessage msg : msgs) {\n+                String tos = GreenMailUtil.getAddressList(msg.getMimeMessage().getAllRecipients());\n+                if (tos.toLowerCase().contains(domain)) {\n+                    ret.add(msg.getMimeMessage());\n+                }\n+            }\n+        } catch (MessagingException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return ret.toArray(new MimeMessage[ret.size()]);\n+    }\n+\n+    @Override\n+    public GreenMailUser setUser(final String login, final String password) {\n+        return setUser(login, login, password);\n+    }\n+\n+    @Override\n+    public GreenMailUser setUser(final String email, final String login, final String password) {\n+        GreenMailUser user = managers.getUserManager().getUser(login);\n+        if (null == user) {\n+            try {\n+                user = managers.getUserManager().createUser(email, login, password);\n+            } catch (UserException e) {\n+                throw new RuntimeException(e);\n+            }\n+        } else {\n+            user.setPassword(password);\n+        }\n+        return user;\n+    }\n+\n+    @Override\n+    public void setQuotaSupported(final boolean isEnabled) {\n+        managers.getImapHostManager().getStore().setQuotaSupported(isEnabled);\n+    }\n+\n+    @Override\n+    public void setUsers(final Properties users) {\n+        users.keySet().stream().\n+                map(String.class::cast).\n+                forEach(email -> {\n+                    String password = users.getProperty(email);\n+                    setUser(email, email, password);\n+                });\n+    }\n+\n+    @Override\n+    public InterruptableGreenMail withConfiguration(final GreenMailConfiguration config) {\n+        // Just overriding to return more specific type\n+        super.withConfiguration(config);\n+        return this;\n+    }\n+\n+    @Override\n+    public void purgeEmailFromAllMailboxes() throws FolderException {\n+        ImapHostManager imaphost = getManagers().getImapHostManager();\n+        InMemoryStore store = (InMemoryStore) imaphost.getStore();\n+        Collection<MailFolder> mailboxes = store.listMailboxes(\"*\");\n+        mailboxes.forEach(folder -> {\n+            folder.deleteAllMessages();\n+        });\n+    }\n+}"},{"sha":"ca9e0af10ba08073cfa505bf037ebddfd9dde629","filename":"fit/build-tools/src/main/java/com/icegreen/greenmail/smtp/InterruptableSmtpServer.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Ficegreen%2Fgreenmail%2Fsmtp%2FInterruptableSmtpServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Ficegreen%2Fgreenmail%2Fsmtp%2FInterruptableSmtpServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Ficegreen%2Fgreenmail%2Fsmtp%2FInterruptableSmtpServer.java?ref=a70bcca0d323a3291e84eb2f1f83a9543e0790da","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.icegreen.greenmail.smtp;\n+\n+import com.icegreen.greenmail.Managers;\n+import com.icegreen.greenmail.server.ProtocolHandler;\n+import com.icegreen.greenmail.util.ServerSetup;\n+import java.io.IOException;\n+import java.net.Socket;\n+\n+public class InterruptableSmtpServer extends SmtpServer {\n+\n+    private boolean rejectRequests = false;\n+\n+    public InterruptableSmtpServer(final ServerSetup setup, final Managers managers) {\n+        super(setup, managers);\n+    }\n+\n+    @Override\n+    protected ProtocolHandler createProtocolHandler(final Socket clientSocket) {\n+        synchronized (this) {\n+            if (rejectRequests) {\n+                try {\n+                    clientSocket.close();\n+                } catch (IOException e) {\n+                    // ignore\n+                }\n+                return null;\n+            } else {\n+                return super.createProtocolHandler(clientSocket);\n+            }\n+        }\n+    }\n+\n+    public void setRejectRequests(final boolean rejectRequests) {\n+        this.rejectRequests = rejectRequests;\n+    }\n+}"},{"sha":"b853101cab62b301d7c53e32f42df4fc7cf38dea","filename":"fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/GreenMailStartStopListener.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FGreenMailStartStopListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FGreenMailStartStopListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FGreenMailStartStopListener.java?ref=a70bcca0d323a3291e84eb2f1f83a9543e0790da","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.buildtools;\n+\n+import com.icegreen.greenmail.smtp.InterruptableGreenMail;\n+import com.icegreen.greenmail.util.ServerSetup;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+import javax.servlet.annotation.WebListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.context.WebApplicationContext;\n+import org.springframework.web.context.support.WebApplicationContextUtils;\n+\n+/**\n+ * Utility servlet context listener managing GreenMail test server instance.\n+ */\n+@WebListener\n+public class GreenMailStartStopListener implements ServletContextListener {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(GreenMailStartStopListener.class);\n+\n+    public static final String GREENMAIL = \"greenMail\";\n+\n+    @Override\n+    public void contextInitialized(final ServletContextEvent sce) {\n+        ServletContext sc = sce.getServletContext();\n+        WebApplicationContext ctx = WebApplicationContextUtils.getWebApplicationContext(sc);\n+\n+        InterruptableGreenMail greenMail = (InterruptableGreenMail) sc.getAttribute(GREENMAIL);\n+        if (greenMail == null) {\n+            ServerSetup[] config = new ServerSetup[2];\n+            config[0] = new ServerSetup(\n+                    ctx.getEnvironment().getProperty(\"testmail.smtpport\", Integer.class),\n+                    \"localhost\", ServerSetup.PROTOCOL_SMTP);\n+            config[1] = new ServerSetup(\n+                    ctx.getEnvironment().getProperty(\"testmail.pop3port\", Integer.class),\n+                    \"localhost\", ServerSetup.PROTOCOL_POP3);\n+            greenMail = new InterruptableGreenMail(config);\n+            greenMail.start();\n+\n+            sc.setAttribute(GREENMAIL, greenMail);\n+        }\n+\n+        LOG.info(\"SMTP and POP3 servers successfully (re)started\");\n+    }\n+\n+    @Override\n+    public void contextDestroyed(final ServletContextEvent sce) {\n+        ServletContext sc = sce.getServletContext();\n+\n+        InterruptableGreenMail greenMail = (InterruptableGreenMail) sc.getAttribute(GREENMAIL);\n+        if (greenMail != null) {\n+            greenMail.stop();\n+\n+            LOG.info(\"SMTP and POP3 servers successfully stopped\");\n+        }\n+    }\n+}"},{"sha":"d89e14140820a6ba3698321d60f81b93c0ea2927","filename":"fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/SyncopeBuildToolsApplication.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FSyncopeBuildToolsApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FSyncopeBuildToolsApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FSyncopeBuildToolsApplication.java?ref=a70bcca0d323a3291e84eb2f1f83a9543e0790da","patch":"@@ -108,6 +108,7 @@ public void onStartup(final ServletContext sc) throws ServletException {\n         sc.addListener(new ConnectorServerStartStopListener());\n         sc.addListener(new ApacheDSStartStopListener());\n         sc.addListener(new H2StartStopListener());\n+        sc.addListener(new GreenMailStartStopListener());\n \n         ServletRegistration.Dynamic apacheDS = sc.addServlet(\"ApacheDSRootDseServlet\", ApacheDSRootDseServlet.class);\n         apacheDS.addMapping(\"/apacheDS\");"},{"sha":"ff009c06449f89669b43c7fc549ce6b9f77c3de2","filename":"fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/cxf/GreenMailService.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FGreenMailService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FGreenMailService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FGreenMailService.java?ref=a70bcca0d323a3291e84eb2f1f83a9543e0790da","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.buildtools.cxf;\n+\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+\n+@Path(\"greenMail\")\n+public interface GreenMailService {\n+\n+    @POST\n+    @Path(\"start\")\n+    void start();\n+\n+    @POST\n+    @Path(\"stop\")\n+    void stop();\n+}"},{"sha":"e7a34be8091a16fa13ff403cc0d067238cc8ecbe","filename":"fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/cxf/GreenMailServiceImpl.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FGreenMailServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FGreenMailServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FGreenMailServiceImpl.java?ref=a70bcca0d323a3291e84eb2f1f83a9543e0790da","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.buildtools.cxf;\n+\n+import javax.ws.rs.core.Context;\n+import org.apache.cxf.jaxrs.ext.MessageContext;\n+import com.icegreen.greenmail.smtp.InterruptableGreenMail;\n+import org.apache.syncope.fit.buildtools.GreenMailStartStopListener;\n+import com.icegreen.greenmail.smtp.InterruptableSmtpServer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class GreenMailServiceImpl implements GreenMailService {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(GreenMailService.class);\n+\n+    @Context\n+    private MessageContext messageContext;\n+\n+    @Override\n+    public void start() {\n+        InterruptableGreenMail greenMail = (InterruptableGreenMail) messageContext.getServletContext().\n+                getAttribute(GreenMailStartStopListener.GREENMAIL);\n+        if (greenMail != null) {\n+            ((InterruptableSmtpServer) greenMail.getSmtp()).setRejectRequests(false);\n+            LOG.info(\"SMTP server is accepting requests\");\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        InterruptableGreenMail greenMail = (InterruptableGreenMail) messageContext.getServletContext().\n+                getAttribute(GreenMailStartStopListener.GREENMAIL);\n+        if (greenMail != null) {\n+            ((InterruptableSmtpServer) greenMail.getSmtp()).setRejectRequests(true);\n+            LOG.info(\"SMTP server is rejecting requests\");\n+        }\n+    }\n+}"},{"sha":"84a93299f2373f56e356b0fcf71d60ac32bf7225","filename":"fit/build-tools/src/main/resources/application.properties","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=a70bcca0d323a3291e84eb2f1f83a9543e0790da","patch":"@@ -30,6 +30,11 @@ testdb.url=${testdb.url}\n testdb.username=${testdb.username}\n testdb.password=${testdb.password}\n testdb.webport=${testdb.webport}\n+\n testds.port=${testds.port}\n+\n testconnectorserver.port=${testconnectorserver.port}\n testconnectorserver.key=${testconnectorserver.key}\n+\n+testmail.smtpport=${testmail.smtpport}\n+testmail.pop3port=${testmail.pop3port}"},{"sha":"8ea9779214f49970f04e6703465413064c78d60a","filename":"fit/core-reference/pom.xml","status":"modified","additions":7,"deletions":12,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=a70bcca0d323a3291e84eb2f1f83a9543e0790da","patch":"@@ -65,11 +65,6 @@ under the License.\n       <type>war</type>\n       <scope>test</scope>\n     </dependency>\n-    <dependency>\n-      <groupId>com.icegreen</groupId>\n-      <artifactId>greenmail</artifactId>\n-      <scope>test</scope>\n-    </dependency>\n     <dependency>\n       <groupId>org.apache.syncope.client.idm</groupId>\n       <artifactId>syncope-client-idm-lib</artifactId>\n@@ -265,7 +260,7 @@ under the License.\n             <properties>\n               <cargo.jvmargs>\n                 -Dspring.profiles.active=embedded\n-                -XX:+CMSClassUnloadingEnabled -Xmx1024m -Xms512m</cargo.jvmargs>\n+                -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -Xmx1024m -Xms512m</cargo.jvmargs>\n             </properties>\n           </configuration>\n           <deployables>\n@@ -1151,7 +1146,7 @@ under the License.\n               <configuration>\n                 <properties>\n                   <cargo.jvmargs>-Dspring.profiles.active=embedded\n-                    -XX:+CMSClassUnloadingEnabled -Xmx2048m -Xms1024m</cargo.jvmargs>\n+                    -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -Xmx2048m -Xms1024m</cargo.jvmargs>\n                 </properties>\n               </configuration>\n             </configuration>\n@@ -1191,7 +1186,7 @@ under the License.\n               <configuration>\n                 <properties>\n                   <cargo.jvmargs>-Dspring.profiles.active=embedded\n-                    -XX:+CMSClassUnloadingEnabled -Xmx2048m -Xms1024m</cargo.jvmargs>\n+                    -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -Xmx2048m -Xms1024m</cargo.jvmargs>\n                 </properties>\n               </configuration>\n             </configuration>\n@@ -1263,7 +1258,7 @@ under the License.\n               <configuration>\n                 <properties>\n                   <cargo.jvmargs>-Dspring.profiles.active=wildfly,embedded\n-                    -XX:+CMSClassUnloadingEnabled -Xmx2048m -Xms1024m</cargo.jvmargs>\n+                    -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -Xmx2048m -Xms1024m</cargo.jvmargs>\n                 </properties>\n               </configuration>\n             </configuration>\n@@ -1310,7 +1305,7 @@ under the License.\n                   <cargo.jvmargs>\n                     -Dspring.profiles.active=embedded\n                     -Xdebug -Djaxb.debug=true -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n\n-                    -XX:+CMSClassUnloadingEnabled -Xmx1024m -Xms512m</cargo.jvmargs>\n+                    -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -Xmx1024m -Xms512m</cargo.jvmargs>\n                 </properties>\n               </configuration>\n             </configuration>\n@@ -1347,9 +1342,9 @@ under the License.\n                 <properties>\n                   <cargo.jvmargs>\n                     -Dspring.profiles.active=embedded\n-                    -XXaltjvm=dcevm -javaagent:${settings.localRepository}/org/hotswapagent/hotswap-agent/${hotswap.version}/hotswap-agent-${hotswap.version}.jar=autoHotswap=true,disablePlugin=Spring\n+                    -javaagent:${settings.localRepository}/org/hotswapagent/hotswap-agent/${hotswap.version}/hotswap-agent-${hotswap.version}.jar=autoHotswap=true,disablePlugin=Spring\n                     -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000\n-                    -XX:+CMSClassUnloadingEnabled -Xmx1024m -Xms512m</cargo.jvmargs>\n+                    -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -Xmx1024m -Xms512m</cargo.jvmargs>\n                 </properties>\n               </configuration>\n             </configuration>"},{"sha":"09300feecea1d1695a68a0c127f3e26d117b49a1","filename":"fit/core-reference/src/main/resources/mail.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmail.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmail.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmail.properties?ref=a70bcca0d323a3291e84eb2f1f83a9543e0790da","patch":"@@ -17,7 +17,7 @@\n conf.directory=${conf.directory}\n \n smtpHost=localhost\n-smtpPort=2525\n+smtpPort=${testmail.smtpport}\n smtpUser=\n smtpPassword=\n smtpProtocol=smtp"},{"sha":"1e75b5566ead6178624deec00947950832a5e205","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=a70bcca0d323a3291e84eb2f1f83a9543e0790da","patch":"@@ -131,6 +131,8 @@ public abstract class AbstractITCase {\n \n     protected static final String ADDRESS = \"http://localhost:9080/syncope/rest\";\n \n+    protected static final String BUILD_TOOLS_ADDRESS = \"http://localhost:9080/syncope-fit-build-tools/cxf\";\n+\n     protected static final String ENV_KEY_CONTENT_TYPE = \"jaxrsContentType\";\n \n     protected static final String RESOURCE_NAME_WS1 = \"ws-target-resource-1\";"},{"sha":"49d46ad5d5319f67284f5f36a1591f43720b3eb5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AbstractNotificationTaskITCase.java","status":"modified","additions":36,"deletions":34,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractNotificationTaskITCase.java?ref=a70bcca0d323a3291e84eb2f1f83a9543e0790da","patch":"@@ -19,63 +19,37 @@\n package org.apache.syncope.fit.core;\n \n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n-import com.icegreen.greenmail.util.GreenMail;\n-import com.icegreen.greenmail.util.ServerSetup;\n import java.io.InputStream;\n import java.util.Properties;\n import javax.mail.Flags;\n import javax.mail.Folder;\n import javax.mail.Message;\n import javax.mail.Session;\n import javax.mail.Store;\n-import org.junit.jupiter.api.AfterAll;\n import org.junit.jupiter.api.BeforeAll;\n \n public abstract class AbstractNotificationTaskITCase extends AbstractTaskITCase {\n \n     private static final String POP3_HOST = \"localhost\";\n \n-    private static final int POP3_PORT = 1110;\n-\n-    private static String SMTP_HOST;\n-\n-    private static int SMTP_PORT;\n-\n-    private static GreenMail greenMail;\n+    private static int POP3_PORT;\n \n     @BeforeAll\n-    public static void startGreenMail() {\n+    public static void conf() {\n         Properties props = new Properties();\n-        try (InputStream propStream = ExceptionMapperITCase.class.getResourceAsStream(\"/mail.properties\")) {\n+        try (InputStream propStream = ExceptionMapperITCase.class.getResourceAsStream(\"/test.properties\")) {\n             props.load(propStream);\n         } catch (Exception e) {\n-            LOG.error(\"Could not load /mail.properties\", e);\n+            LOG.error(\"Could not load /test.properties\", e);\n         }\n \n-        SMTP_HOST = props.getProperty(\"smtpHost\");\n-        assertNotNull(SMTP_HOST);\n-        SMTP_PORT = Integer.parseInt(props.getProperty(\"smtpPort\"));\n-        assertNotNull(SMTP_PORT);\n-\n-        ServerSetup[] config = new ServerSetup[2];\n-        config[0] = new ServerSetup(SMTP_PORT, SMTP_HOST, ServerSetup.PROTOCOL_SMTP);\n-        config[1] = new ServerSetup(POP3_PORT, POP3_HOST, ServerSetup.PROTOCOL_POP3);\n-        greenMail = new GreenMail(config);\n-        greenMail.start();\n+        POP3_PORT = Integer.parseInt(props.getProperty(\"testmail.pop3port\"));\n+        assertNotNull(POP3_PORT);\n     }\n \n-    @AfterAll\n-    public static void stopGreenMail() {\n-        if (greenMail != null) {\n-            greenMail.stop();\n-        }\n-    }\n-\n-    protected boolean verifyMail(final String sender, final String subject, final String mailAddress) throws Exception {\n-        LOG.info(\"Waiting for notification to be sent...\");\n-        greenMail.waitForIncomingEmail(1);\n-\n+    private boolean pop3(final String sender, final String subject, final String mailAddress) throws Exception {\n         boolean found = false;\n         try (Store store = Session.getDefaultInstance(System.getProperties()).getStore(\"pop3\")) {\n             store.connect(POP3_HOST, POP3_PORT, mailAddress, mailAddress);\n@@ -96,4 +70,32 @@ protected boolean verifyMail(final String sender, final String subject, final St\n         }\n         return found;\n     }\n+\n+    protected boolean verifyMail(\n+            final String sender,\n+            final String subject,\n+            final String mailAddress,\n+            final int maxWaitSeconds) throws Exception {\n+\n+        boolean read = false;\n+\n+        int i = 0;\n+\n+        // wait for completion (executions incremented)\n+        do {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            read = pop3(sender, subject, mailAddress);\n+\n+            i++;\n+        } while (!read && i < maxWaitSeconds);\n+        if (i == maxWaitSeconds) {\n+            fail(\"Timeout when attempting to read e-mail to  \" + mailAddress);\n+        }\n+\n+        return read;\n+    }\n }"},{"sha":"41634dd75da391b7931467bcc4d2b692ab545467","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AbstractTaskITCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java?ref=a70bcca0d323a3291e84eb2f1f83a9543e0790da","patch":"@@ -131,7 +131,6 @@ protected static ExecTO execTask(\n         assertEquals(initialStatus, execution.getStatus());\n \n         int i = 0;\n-        int maxit = maxWaitSeconds;\n \n         // wait for completion (executions incremented)\n         do {\n@@ -146,8 +145,8 @@ protected static ExecTO execTask(\n             assertNotNull(taskTO.getExecutions());\n \n             i++;\n-        } while (preSyncSize == taskTO.getExecutions().size() && i < maxit);\n-        if (i == maxit) {\n+        } while (preSyncSize == taskTO.getExecutions().size() && i < maxWaitSeconds);\n+        if (i == maxWaitSeconds) {\n             fail(\"Timeout when executing task \" + taskKey);\n         }\n         return taskTO.getExecutions().get(taskTO.getExecutions().size() - 1);"},{"sha":"71deb1ade800db98fb317eb73d0a4d6fd8b36b09","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ConnectorITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java?ref=a70bcca0d323a3291e84eb2f1f83a9543e0790da","patch":"@@ -712,7 +712,7 @@ public void issueSYNCOPE112() {\n \n             conf = new HashSet<>();\n             endpoint.getValues().clear();\n-            endpoint.getValues().add(\"http://localhost:9080/syncope-fit-build-tools/cxf/soap/provisioning\");\n+            endpoint.getValues().add(BUILD_TOOLS_ADDRESS + \"/soap/provisioning\");\n             conf.add(endpoint);\n \n             resourceTO.getConfOverride().addAll(conf);"},{"sha":"c574788d757accf8db03f5c523b4b35da8f2fa14","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/NotificationTaskITCase.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java?ref=a70bcca0d323a3291e84eb2f1f83a9543e0790da","patch":"@@ -26,6 +26,7 @@\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.Attr;\n@@ -62,7 +63,7 @@ public void notifyByMail() throws Exception {\n \n         execNotificationTask(taskService, taskTO.getKey(), 50);\n \n-        assertTrue(verifyMail(sender, subject, created.getRight()));\n+        assertTrue(verifyMail(sender, subject, created.getRight(), 50));\n \n         // verify message body\n         taskTO = taskService.read(TaskType.NOTIFICATION, taskTO.getKey(), true);\n@@ -85,7 +86,7 @@ public void notifyByMailEmptyAbout() throws Exception {\n \n         execNotificationTask(taskService, taskTO.getKey(), 50);\n \n-        assertTrue(verifyMail(sender, subject, created.getRight()));\n+        assertTrue(verifyMail(sender, subject, created.getRight(), 50));\n     }\n \n     @Test\n@@ -96,7 +97,7 @@ public void notifyByMailWithRetry() throws Exception {\n         configurationService.set(attr(origMaxRetries.getSchema(), \"10\"));\n \n         // 2. Stop mail server to force errors while sending out e-mails\n-        stopGreenMail();\n+        WebClient.create(BUILD_TOOLS_ADDRESS + \"/rest/greenMail/stop\").post(null);\n \n         try {\n             // 3. create notification and user\n@@ -122,7 +123,7 @@ public void notifyByMailWithRetry() throws Exception {\n             }\n         } finally {\n             // start mail server again\n-            startGreenMail();\n+            WebClient.create(BUILD_TOOLS_ADDRESS + \"/rest/greenMail/start\").post(null);\n             // reset number of retries\n             configurationService.set(origMaxRetries);\n         }\n@@ -193,7 +194,7 @@ public void issueSYNCOPE192() throws Exception {\n         } catch (InterruptedException e) {\n         }\n \n-        assertTrue(verifyMail(sender, subject, created.getRight()));\n+        assertTrue(verifyMail(sender, subject, created.getRight(), 50));\n \n         // verify that last exec status was updated\n         taskTO = taskService.read(TaskType.NOTIFICATION, taskTO.getKey(), true);\n@@ -216,7 +217,7 @@ public void issueSYNCOPE445() throws Exception {\n \n         execNotificationTask(taskService, taskTO.getKey(), 50);\n \n-        assertTrue(verifyMail(sender, subject, created.getRight()));\n+        assertTrue(verifyMail(sender, subject, created.getRight(), 50));\n \n         // verify task\n         taskTO = taskService.read(TaskType.NOTIFICATION, taskTO.getKey(), true);\n@@ -286,7 +287,7 @@ public void issueSYNCOPE446() throws Exception {\n \n         execNotificationTask(taskService, taskTO.getKey(), 50);\n \n-        assertTrue(verifyMail(sender, subject, \"notificationtest@syncope.apache.org\"));\n+        assertTrue(verifyMail(sender, subject, \"notificationtest@syncope.apache.org\", 50));\n     }\n \n     @Test"},{"sha":"9bfbc831fc364edad28bf30330f28df146bec90b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=a70bcca0d323a3291e84eb2f1f83a9543e0790da","patch":"@@ -1320,8 +1320,7 @@ public void restResource() {\n         assertEquals(\"surname\", result.getEntity().getPlainAttr(\"surname\").get().getValues().get(0));\n \n         // verify user exists on the backend REST service\n-        WebClient webClient = WebClient.create(\n-                \"http://localhost:9080/syncope-fit-build-tools/cxf/rest/users/\" + result.getEntity().getKey());\n+        WebClient webClient = WebClient.create(BUILD_TOOLS_ADDRESS + \"/rest/users/\" + result.getEntity().getKey());\n         Response response = webClient.get();\n         assertEquals(200, response.getStatus());\n         assertNotNull(response.getEntity());"},{"sha":"076b92a01b616864198f4121e409ceec9c9eebee","filename":"fit/core-reference/src/test/resources/test.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ftest.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a70bcca0d323a3291e84eb2f1f83a9543e0790da/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ftest.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ftest.properties?ref=a70bcca0d323a3291e84eb2f1f83a9543e0790da","patch":"@@ -15,3 +15,5 @@\n # specific language governing permissions and limitations\n # under the License.\n basedir=${basedir}\n+testmail.smtpport=${testmail.smtpport}\n+testmail.pop3port=${testmail.pop3port}"},{"sha":"9313b9f09f8eef9126fe01d57cd7dc4b5129a872","filename":"pom.xml","status":"modified","additions":16,"deletions":13,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a70bcca0d323a3291e84eb2f1f83a9543e0790da/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a70bcca0d323a3291e84eb2f1f83a9543e0790da/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=a70bcca0d323a3291e84eb2f1f83a9543e0790da","patch":"@@ -503,6 +503,9 @@ under the License.\n     <testconnectorserver.port>4554</testconnectorserver.port>\n     <testconnectorserver.key>testconnectorserver</testconnectorserver.key>\n \n+    <testmail.smtpport>2525</testmail.smtpport>\n+    <testmail.pop3port>1110</testmail.pop3port>\n+\n     <test.csvdir.path>${project.build.directory}/test-csvdir</test.csvdir.path>\n \n     <cargo.servlet.port>9080</cargo.servlet.port>\n@@ -1228,6 +1231,18 @@ under the License.\n         <artifactId>apacheds-service</artifactId>\n         <version>${apacheds.version}</version>\n       </dependency>\n+\n+      <dependency>\n+        <groupId>com.icegreen</groupId>\n+        <artifactId>greenmail</artifactId>\n+        <version>1.5.9</version>\n+        <exclusions>\n+          <exclusion>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+          </exclusion>\n+        </exclusions>\n+      </dependency>\n       \n       <dependency>\n         <groupId>org.jasypt</groupId>\n@@ -1764,18 +1779,6 @@ under the License.\n       </dependency>\n \n       <!-- TEST -->\n-      <dependency>\n-        <groupId>com.icegreen</groupId>\n-        <artifactId>greenmail</artifactId>\n-        <version>1.5.9</version>\n-        <scope>test</scope>\n-        <exclusions>\n-          <exclusion>\n-            <groupId>junit</groupId>\n-            <artifactId>junit</artifactId>\n-          </exclusion>\n-        </exclusions>\n-      </dependency>\n       <dependency>\n         <groupId>org.bouncycastle</groupId>\n         <artifactId>bcpkix-jdk15on</artifactId>\n@@ -2180,7 +2183,7 @@ under the License.\n         <version>0.8.3</version>\n         <configuration>\n           <append>true</append>\n-\t  <skip>${skipTests}</skip>\n+          <skip>${skipTests}</skip>\n         </configuration>\n         <executions>\n           <execution>"}]}