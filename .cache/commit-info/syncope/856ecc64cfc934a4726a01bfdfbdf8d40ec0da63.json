{"sha":"856ecc64cfc934a4726a01bfdfbdf8d40ec0da63","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg1NmVjYzY0Y2ZjOTM0YTQ3MjZhMDFiZmRmYmRmOGQ0MGVjMGRhNjM=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-19T16:20:44Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-19T16:20:44Z"},"message":"final methods and Spring injection are not very good friends...\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246634 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ee1e0b140b402ea74b32b8603cc0902576df4452","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ee1e0b140b402ea74b32b8603cc0902576df4452"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/856ecc64cfc934a4726a01bfdfbdf8d40ec0da63","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/856ecc64cfc934a4726a01bfdfbdf8d40ec0da63","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/856ecc64cfc934a4726a01bfdfbdf8d40ec0da63","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/856ecc64cfc934a4726a01bfdfbdf8d40ec0da63/comments","author":null,"committer":null,"parents":[{"sha":"56883437c0066fc74f899b3e9a8205e0e9e9fd17","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/56883437c0066fc74f899b3e9a8205e0e9e9fd17","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/56883437c0066fc74f899b3e9a8205e0e9e9fd17"}],"stats":{"total":24,"additions":12,"deletions":12},"files":[{"sha":"9f1d1beaa102c7ec819a60b819d53ee09e3b53c3","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ConnectorInstanceDAOImpl.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856ecc64cfc934a4726a01bfdfbdf8d40ec0da63/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnectorInstanceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856ecc64cfc934a4726a01bfdfbdf8d40ec0da63/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnectorInstanceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnectorInstanceDAOImpl.java?ref=856ecc64cfc934a4726a01bfdfbdf8d40ec0da63","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -32,20 +32,20 @@ public class ConnectorInstanceDAOImpl extends AbstractDAOImpl\n \n     @Override\n     @Transactional(readOnly = true)\n-    public final ConnectorInstance find(final Long id) {\n+    public ConnectorInstance find(final Long id) {\n         return entityManager.find(ConnectorInstance.class, id);\n     }\n \n     @Override\n     @Transactional(readOnly = true)\n-    public final List<ConnectorInstance> findAll() {\n+    public List<ConnectorInstance> findAll() {\n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM ConnectorInstance e\");\n         return query.getResultList();\n     }\n \n     @Override\n-    public final ConnectorInstance save(final ConnectorInstance connector) {\n+    public ConnectorInstance save(final ConnectorInstance connector) {\n         ConnectorInstance actual = entityManager.merge(connector);\n         try {\n             ConnectorInstanceLoader.registerConnector(actual);\n@@ -58,7 +58,7 @@ public final ConnectorInstance save(final ConnectorInstance connector) {\n     }\n \n     @Override\n-    public final void delete(final Long id) {\n+    public void delete(final Long id) {\n         entityManager.remove(find(id));\n \n         ConnectorInstanceLoader.removeConnector(id.toString());"},{"sha":"da0ec0bb69fd7202d3b6190dbd0c7def138bdfab","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/856ecc64cfc934a4726a01bfdfbdf8d40ec0da63/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/856ecc64cfc934a4726a01bfdfbdf8d40ec0da63/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=856ecc64cfc934a4726a01bfdfbdf8d40ec0da63","patch":"@@ -49,7 +49,7 @@ public class SyncopeUserDAOImpl extends AbstractDAOImpl\n \n     @Override\n     @Transactional(readOnly = true)\n-    public final SyncopeUser find(final Long id) {\n+    public SyncopeUser find(final Long id) {\n         Query query = entityManager.createNamedQuery(\"SyncopeUser.find\");\n         query.setParameter(\"id\", id);\n \n@@ -62,7 +62,7 @@ public final SyncopeUser find(final Long id) {\n \n     @Override\n     @Transactional(readOnly = true)\n-    public final SyncopeUser findByWorkflowId(final Long workflowId) {\n+    public SyncopeUser findByWorkflowId(final Long workflowId) {\n         Query query = entityManager.createNamedQuery(\n                 \"SyncopeUser.findByWorkflowId\");\n         query.setParameter(\"workflowId\", workflowId);\n@@ -72,7 +72,7 @@ public final SyncopeUser findByWorkflowId(final Long workflowId) {\n \n     @Override\n     @Transactional(readOnly = true)\n-    public final List<SyncopeUser> findByAttributeValue(\n+    public List<SyncopeUser> findByAttributeValue(\n             final UserAttributeValue attributeValue) {\n \n         Query query = entityManager.createQuery(\n@@ -100,7 +100,7 @@ public final List<SyncopeUser> findByAttributeValue(\n \n     @Override\n     @Transactional(readOnly = true)\n-    public final List<SyncopeUser> findAll() {\n+    public List<SyncopeUser> findAll() {\n         Query query = entityManager.createQuery(\"SELECT e FROM SyncopeUser e\");\n         return query.getResultList();\n     }\n@@ -111,7 +111,7 @@ public SyncopeUser save(final SyncopeUser syncopeUser) {\n     }\n \n     @Override\n-    public void delete(Long id) {\n+    public void delete(final Long id) {\n         SyncopeUser user = find(id);\n         if (user == null) {\n             return;\n@@ -136,7 +136,7 @@ public void delete(Long id) {\n \n     @Override\n     @Transactional(readOnly = true)\n-    public final List<SyncopeUser> search(final NodeCond searchCondition) {\n+    public List<SyncopeUser> search(final NodeCond searchCondition) {\n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Search condition:\\n\" + searchCondition);\n         }"}]}