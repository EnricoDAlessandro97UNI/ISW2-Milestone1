{"sha":"820a9916913e58c33ed1816a5313585b701fef6d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjgyMGE5OTE2OTEzZTU4YzMzZWQxODE2YTUzMTM1ODViNzAxZmVmNmQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-26T17:13:18Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-26T17:13:18Z"},"message":"[SYNCOPE-630] Merge from master","tree":{"sha":"b1e6cf0b2af9ca71e483b41d21145187f7df7261","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b1e6cf0b2af9ca71e483b41d21145187f7df7261"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/820a9916913e58c33ed1816a5313585b701fef6d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/820a9916913e58c33ed1816a5313585b701fef6d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/820a9916913e58c33ed1816a5313585b701fef6d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/820a9916913e58c33ed1816a5313585b701fef6d/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"556fdb332f7cee0808dbb9ff161446965e65db4c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/556fdb332f7cee0808dbb9ff161446965e65db4c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/556fdb332f7cee0808dbb9ff161446965e65db4c"}],"stats":{"total":181,"additions":18,"deletions":163},"files":[{"sha":"b0580c380dd70ac494fb8895434310a951e57b81","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java","status":"modified","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/820a9916913e58c33ed1816a5313585b701fef6d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/820a9916913e58c33ed1816a5313585b701fef6d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java?ref=820a9916913e58c33ed1816a5313585b701fef6d","patch":"@@ -23,7 +23,6 @@\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n-import javax.ws.rs.MatrixParam;\n import javax.ws.rs.POST;\n import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n@@ -82,16 +81,6 @@ ConnObjectTO getConnectorObject(@NotNull @PathParam(\"resourceKey\") String resour\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     List<ResourceTO> list();\n \n-    /**\n-     * Returns a list of resources using matching connector instance id.\n-     *\n-     * @param connInstanceId Connector id to filter for resources\n-     * @return resources using matching connector instance id\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<ResourceTO> list(@NotNull @MatrixParam(\"connectorId\") Long connInstanceId);\n-\n     /**\n      * Creates a new resource.\n      *"},{"sha":"f426526beb9b71941c8adb6e76b2bda2107cccca","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/ConnectorITCase.java","status":"modified","additions":15,"deletions":4,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/820a9916913e58c33ed1816a5313585b701fef6d/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FConnectorITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/820a9916913e58c33ed1816a5313585b701fef6d/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FConnectorITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FConnectorITCase.java?ref=820a9916913e58c33ed1816a5313585b701fef6d","patch":"@@ -27,6 +27,7 @@\n \n import java.io.IOException;\n import java.io.InputStream;\n+import java.util.ArrayList;\n import java.util.EnumSet;\n import java.util.HashSet;\n import java.util.Iterator;\n@@ -265,6 +266,18 @@ public void update() {\n         assertEquals(Integer.valueOf(20), actual.getConnRequestTimeout());\n     }\n \n+    private List<ResourceTO> filter(final List<ResourceTO> input, final Long connectorKey) {\n+        List<ResourceTO> result = new ArrayList<>();\n+\n+        for (ResourceTO resource : input) {\n+            if (connectorKey.equals(resource.getConnectorId())) {\n+                result.add(resource);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n     @Test\n     public void issueSYNCOPE10() {\n         // ----------------------------------\n@@ -276,8 +289,7 @@ public void issueSYNCOPE10() {\n         assertNotNull(connInstanceTO);\n \n         // check for resource\n-        List<ResourceTO> resources = resourceService.list(Long.valueOf(103));\n-\n+        List<ResourceTO> resources = filter(resourceService.list(), 103L);\n         assertEquals(4, resources.size());\n \n         // Retrieve a resource TO template.\n@@ -317,8 +329,7 @@ public void issueSYNCOPE10() {\n \n         assertNotNull(resourceTO);\n \n-        resources = resourceService.list(connId);\n-\n+        resources = filter(resourceService.list(), connId);\n         assertEquals(1, resources.size());\n         // ----------------------------------\n "},{"sha":"4b701c4dcbad4d73a416e440906846d661a2f17a","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/ResourceITCase.java","status":"modified","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/820a9916913e58c33ed1816a5313585b701fef6d/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/820a9916913e58c33ed1816a5313585b701fef6d/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FResourceITCase.java?ref=820a9916913e58c33ed1816a5313585b701fef6d","patch":"@@ -402,17 +402,6 @@ public void list() {\n         }\n     }\n \n-    @Test\n-    public void listByType() {\n-        List<ResourceTO> actuals = resourceService.list(105L);\n-        assertNotNull(actuals);\n-\n-        for (ResourceTO resourceTO : actuals) {\n-            assertNotNull(resourceTO);\n-            assertEquals(105L, resourceTO.getConnectorId().longValue());\n-        }\n-    }\n-\n     @Test\n     public void read() {\n         ResourceTO actual = resourceService.read(RESOURCE_NAME_TESTDB);"},{"sha":"18c1f580b44a5bb7ab4658829aeda4af96e34f9e","filename":"syncope620/server/logic/src/main/java/org/apache/syncope/server/logic/ResourceLogic.java","status":"modified","additions":2,"deletions":15,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/820a9916913e58c33ed1816a5313585b701fef6d/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/820a9916913e58c33ed1816a5313585b701fef6d/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FResourceLogic.java?ref=820a9916913e58c33ed1816a5313585b701fef6d","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.SubjectType;\n-import org.apache.syncope.server.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.server.persistence.api.dao.DuplicateException;\n import org.apache.syncope.server.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.server.persistence.api.dao.NotFoundException;\n@@ -65,9 +64,6 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n-    @Autowired\n-    private ConnInstanceDAO connInstanceDAO;\n-\n     @Autowired\n     private UserDAO userDAO;\n \n@@ -160,17 +156,8 @@ public ResourceTO read(final String resourceName) {\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n-    public List<ResourceTO> list(final Long connInstanceId) {\n-        List<? extends ExternalResource> resources;\n-\n-        if (connInstanceId == null) {\n-            resources = resourceDAO.findAll();\n-        } else {\n-            ConnInstance connInstance = connInstanceDAO.find(connInstanceId);\n-            resources = connInstance.getResources();\n-        }\n-\n-        return binder.getResourceTOs(resources);\n+    public List<ResourceTO> list() {\n+        return binder.getResourceTOs(resourceDAO.findAll());\n     }\n \n     @PreAuthorize(\"hasRole('RESOURCE_GETCONNECTOROBJECT')\")"},{"sha":"7c879c8172589d2a819997d512c1f4bb234933be","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/QueryResourceInfoComparator.java","status":"removed","additions":0,"deletions":113,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556fdb332f7cee0808dbb9ff161446965e65db4c/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2FQueryResourceInfoComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556fdb332f7cee0808dbb9ff161446965e65db4c/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2FQueryResourceInfoComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2FQueryResourceInfoComparator.java?ref=556fdb332f7cee0808dbb9ff161446965e65db4c","patch":"@@ -1,113 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.server.rest.cxf;\n-\n-import java.util.List;\n-import java.util.Map;\n-import org.apache.cxf.jaxrs.ext.ResourceComparator;\n-import org.apache.cxf.jaxrs.model.ClassResourceInfo;\n-import org.apache.cxf.jaxrs.model.OperationResourceInfo;\n-import org.apache.cxf.jaxrs.model.OperationResourceInfoComparator;\n-import org.apache.cxf.jaxrs.model.Parameter;\n-import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n-import org.apache.cxf.message.Message;\n-\n-public class QueryResourceInfoComparator extends OperationResourceInfoComparator implements ResourceComparator {\n-\n-    public QueryResourceInfoComparator() {\n-        super(null, null);\n-    }\n-\n-    @Override\n-    public int compare(final ClassResourceInfo cri1, final ClassResourceInfo cri2, final Message message) {\n-        // Leave Class selection to CXF\n-        return 0;\n-    }\n-\n-    @Override\n-    public int compare(final OperationResourceInfo oper1, final OperationResourceInfo oper2, final Message message) {\n-        // Check if CXF can make a decision\n-        int cxfResult = super.compare(oper1, oper2);\n-        if (cxfResult != 0) {\n-            return cxfResult;\n-        }\n-\n-        int op1Counter = getMatchingRate(oper1, message);\n-        int op2Counter = getMatchingRate(oper2, message);\n-\n-        return op1Counter == op2Counter\n-                ? 0\n-                : op1Counter < op2Counter\n-                        ? 1\n-                        : -1;\n-    }\n-\n-    /**\n-     * This method calculates a number indicating a good or bad match between values provided within the request and\n-     * expected method parameters. A higher number means a better match.\n-     *\n-     * @param operation The operation to be rated, based on contained parameterInfo values.\n-     * @param message A message containing query and header values from user request\n-     * @return A positive or negative number, indicating a good match between query and method\n-     */\n-    protected int getMatchingRate(final OperationResourceInfo operation, final Message message) {\n-        List<Parameter> params = operation.getParameters();\n-        if (params == null || params.isEmpty()) {\n-            return 0;\n-        }\n-\n-        // Get Request QueryParams\n-        String query = (String) message.get(Message.QUERY_STRING);\n-        String path = (String) message.get(Message.REQUEST_URI);\n-        Map<String, List<String>> qParams = JAXRSUtils.getStructuredParams(query, \"&\", true, false);\n-        Map<String, List<String>> mParams = JAXRSUtils.getMatrixParams(path, true);\n-        // Get Request Headers\n-        Map<?, ?> qHeader = (java.util.Map<?, ?>) message.get(Message.PROTOCOL_HEADERS);\n-\n-        int rate = 0;\n-        for (Parameter p : params) {\n-            switch (p.getType()) {\n-                case QUERY:\n-                    if (qParams.containsKey(p.getName())) {\n-                        rate += 2;\n-                    } else if (p.getDefaultValue() == null) {\n-                        rate -= 1;\n-                    }\n-                    break;\n-                case MATRIX:\n-                    if (mParams.containsKey(p.getName())) {\n-                        rate += 2;\n-                    } else if (p.getDefaultValue() == null) {\n-                        rate -= 1;\n-                    }\n-                    break;\n-                case HEADER:\n-                    if (qHeader.containsKey(p.getName())) {\n-                        rate += 2;\n-                    } else if (p.getDefaultValue() == null) {\n-                        rate -= 1;\n-                    }\n-                    break;\n-                default:\n-                    break;\n-            }\n-        }\n-        return rate;\n-    }\n-}"},{"sha":"b8bdd0af5008574451b9fa7499a78bbfcbd2404c","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/ResourceServiceImpl.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/820a9916913e58c33ed1816a5313585b701fef6d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/820a9916913e58c33ed1816a5313585b701fef6d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java?ref=820a9916913e58c33ed1816a5313585b701fef6d","patch":"@@ -79,12 +79,7 @@ public ResourceTO read(final String resourceKey) {\n \n     @Override\n     public List<ResourceTO> list() {\n-        return logic.list(null);\n-    }\n-\n-    @Override\n-    public List<ResourceTO> list(final Long connInstanceId) {\n-        return logic.list(connInstanceId);\n+        return logic.list();\n     }\n \n     @Override"},{"sha":"f98fcefb71ab981ab5b9b16e760610cb5c723755","filename":"syncope620/server/rest-cxf/src/main/resources/restCXFContext.xml","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/820a9916913e58c33ed1816a5313585b701fef6d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/820a9916913e58c33ed1816a5313585b701fef6d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml?ref=820a9916913e58c33ed1816a5313585b701fef6d","patch":"@@ -93,9 +93,6 @@ under the License.\n   <jaxrs:server id=\"restContainer\" address=\"/\" \n                 basePackages=\"org.apache.syncope.common.rest.api.service, org.apache.syncope.server.rest.cxf.service\" \n                 staticSubresourceResolution=\"true\">\n-    <jaxrs:resourceComparator>\n-      <bean class=\"org.apache.syncope.server.rest.cxf.QueryResourceInfoComparator\"/>\n-    </jaxrs:resourceComparator>\n     <jaxrs:properties> \n       <entry key=\"search.lax.property.match\" value=\"true\"/> \n     </jaxrs:properties> "}]}