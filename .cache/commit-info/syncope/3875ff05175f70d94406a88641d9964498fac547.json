{"sha":"3875ff05175f70d94406a88641d9964498fac547","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM4NzVmZjA1MTc1ZjcwZDk0NDA2YTg4NjQxZDk5NjQ0OThmYWM1NDc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-10-20T10:28:05Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-10-20T11:11:00Z"},"message":"[SYNCOPE-1594] Adding top search bar for user requests and forms","tree":{"sha":"da0d8e63e2b0b5b6018344a469e65f30b1563c60","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/da0d8e63e2b0b5b6018344a469e65f30b1563c60"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3875ff05175f70d94406a88641d9964498fac547","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3875ff05175f70d94406a88641d9964498fac547","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3875ff05175f70d94406a88641d9964498fac547","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3875ff05175f70d94406a88641d9964498fac547/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"52b925e251209bb51e664b0604eacb2b17ed9413","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/52b925e251209bb51e664b0604eacb2b17ed9413","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/52b925e251209bb51e664b0604eacb2b17ed9413"}],"stats":{"total":624,"additions":365,"deletions":259},"files":[{"sha":"f587c29677447e564bc127707246ec2575bcb6cd","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/FieldPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3875ff05175f70d94406a88641d9964498fac547/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3875ff05175f70d94406a88641d9964498fac547/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java?ref=3875ff05175f70d94406a88641d9964498fac547","patch":"@@ -100,6 +100,7 @@ public FieldPanel<T> setRequired(final boolean required) {\n         return this;\n     }\n \n+    @Override\n     public FieldPanel<T> setReadOnly(final boolean readOnly) {\n         field.setEnabled(!readOnly);\n         return this;\n@@ -150,7 +151,7 @@ public void setObject(final Serializable object) {\n                 }\n             }\n         });\n-        \n+\n         return this;\n     }\n "},{"sha":"401d0853bf6144836e1feb2a9d1a93819dc8c9a4","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/UserRequests.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FUserRequests.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FUserRequests.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FUserRequests.java?ref=3875ff05175f70d94406a88641d9964498fac547","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n import org.apache.syncope.client.console.panels.UserRequestFormDirectoryPanel;\n import org.apache.syncope.client.console.panels.UserRequestDirectoryPanel;\n+import org.apache.syncope.client.console.panels.UserRequestsPanel;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n import org.apache.wicket.extensions.markup.html.tabs.ITab;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n@@ -48,15 +49,15 @@ public UserRequests(final PageParameters parameters) {\n     }\n \n     private List<ITab> buildTabList() {\n-        final List<ITab> tabs = new ArrayList<>();\n+        List<ITab> tabs = new ArrayList<>();\n \n         tabs.add(new AbstractTab(new ResourceModel(\"userRequestForms\")) {\n \n             private static final long serialVersionUID = -6815067322125799251L;\n \n             @Override\n             public Panel getPanel(final String panelId) {\n-                return new UserRequestFormDirectoryPanel(panelId, getPageReference());\n+                return new UserRequestsPanel(panelId, new UserRequestFormDirectoryPanel(\"inner\", getPageReference()));\n             }\n         });\n \n@@ -66,9 +67,10 @@ public Panel getPanel(final String panelId) {\n \n             @Override\n             public Panel getPanel(final String panelId) {\n-                return new UserRequestDirectoryPanel(panelId, getPageReference());\n+                return new UserRequestsPanel(panelId, new UserRequestDirectoryPanel(\"inner\", getPageReference()));\n             }\n         });\n+\n         return tabs;\n     }\n }"},{"sha":"f1dafe98922619892d01a2266d9fe8797919ef82","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestDirectoryPanel.java","status":"modified","additions":24,"deletions":15,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestDirectoryPanel.java?ref=3875ff05175f70d94406a88641d9964498fac547","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.UserRequestDirectoryPanel.UserRequestProvider;\n+import org.apache.syncope.client.console.panels.UserRequestsPanel.UserRequestSearchEvent;\n import org.apache.syncope.client.console.rest.UserRequestRestClient;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n@@ -38,10 +39,12 @@\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.event.IEvent;\n import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n import org.apache.wicket.model.ResourceModel;\n \n public class UserRequestDirectoryPanel\n@@ -51,8 +54,10 @@\n \n     private static final String PREF_USER_REQUEST_PAGINATOR_ROWS = \"userrequest.paginator.rows\";\n \n-    public UserRequestDirectoryPanel(final String id, final PageReference pageReference) {\n-        super(id, pageReference, true);\n+    private String keyword;\n+\n+    public UserRequestDirectoryPanel(final String id, final PageReference pageRef) {\n+        super(id, pageRef, true);\n         disableCheckBoxes();\n         setFooterVisibility(false);\n         modal.size(Modal.Size.Large);\n@@ -121,7 +126,19 @@ protected Collection<ActionLink.ActionType> getBatches() {\n         return List.of();\n     }\n \n-    protected static class UserRequestProvider extends DirectoryDataProvider<UserRequest> {\n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        if (event.getPayload() instanceof UserRequestSearchEvent) {\n+            UserRequestSearchEvent payload = UserRequestSearchEvent.class.cast(event.getPayload());\n+            keyword = payload.getKeyword();\n+\n+            updateResultTable(payload.getTarget());\n+        } else {\n+            super.onEvent(event);\n+        }\n+    }\n+\n+    protected final class UserRequestProvider extends DirectoryDataProvider<UserRequest> {\n \n         private static final long serialVersionUID = -1392420250782313734L;\n \n@@ -134,26 +151,18 @@ public UserRequestProvider(final int paginatorRows) {\n         @Override\n         public Iterator<UserRequest> iterator(final long first, final long count) {\n             int page = ((int) first / paginatorRows);\n-            return UserRequestRestClient.getUserRequests((page < 0 ? 0 : page) + 1,\n-                paginatorRows, getSort()).iterator();\n+            return UserRequestRestClient.listRequests(\n+                    keyword, (page < 0 ? 0 : page) + 1, paginatorRows, getSort()).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return UserRequestRestClient.countUserRequests();\n+            return UserRequestRestClient.countRequests(keyword);\n         }\n \n         @Override\n         public IModel<UserRequest> model(final UserRequest request) {\n-            return new IModel<UserRequest>() {\n-\n-                private static final long serialVersionUID = -2566070996511906708L;\n-\n-                @Override\n-                public UserRequest getObject() {\n-                    return request;\n-                }\n-            };\n+            return Model.of(request);\n         }\n     }\n }"},{"sha":"f7ec01103f0f9b6d2535b14b02ec5a87f5363cdd","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestFormDirectoryPanel.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestFormDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestFormDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestFormDirectoryPanel.java?ref=3875ff05175f70d94406a88641d9964498fac547","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.client.console.panels.UserRequestFormDirectoryPanel.UserRequestFormProvider;\n import org.apache.syncope.client.console.layout.AnyLayoutUtils;\n import org.apache.syncope.client.console.pages.BasePage;\n+import org.apache.syncope.client.console.panels.UserRequestsPanel.UserRequestSearchEvent;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n@@ -51,6 +52,7 @@\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.event.IEvent;\n import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n@@ -66,7 +68,7 @@\n \n     private static final String PREF_USER_REQUEST_FORM_PAGINATOR_ROWS = \"userrequestform.paginator.rows\";\n \n-    protected final BaseModal<UserRequestForm> manageFormModal = new BaseModal<UserRequestForm>(\"outer\") {\n+    private final BaseModal<UserRequestForm> manageFormModal = new BaseModal<UserRequestForm>(\"outer\") {\n \n         private static final long serialVersionUID = 389935548143327858L;\n \n@@ -76,11 +78,12 @@ protected void onConfigure() {\n             addSubmitButton();\n             size(Modal.Size.Large);\n         }\n-\n     };\n \n-    public UserRequestFormDirectoryPanel(final String id, final PageReference pageReference) {\n-        super(id, pageReference, true);\n+    private String keyword;\n+\n+    public UserRequestFormDirectoryPanel(final String id, final PageReference pageRef) {\n+        super(id, pageRef, true);\n         disableCheckBoxes();\n         setFooterVisibility(false);\n         modal.size(Modal.Size.Large);\n@@ -159,10 +162,14 @@ public ActionsPanel<UserRequestForm> getActions(final IModel<UserRequestForm> mo\n \n             @Override\n             public void onClick(final AjaxRequestTarget target, final UserRequestForm ignore) {\n-                claimForm(model.getObject().getTaskId());\n-                SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n+                try {\n+                    UserRequestRestClient.claimForm(model.getObject().getTaskId());\n+                    SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n+                    target.add(container);\n+                } catch (Exception e) {\n+                    SyncopeConsoleSession.get().onException(e);\n+                }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n-                target.add(container);\n             }\n \n         }, ActionLink.ActionType.CLAIM, FlowableEntitlement.USER_REQUEST_FORM_CLAIM);\n@@ -173,10 +180,14 @@ public void onClick(final AjaxRequestTarget target, final UserRequestForm ignore\n \n             @Override\n             public void onClick(final AjaxRequestTarget target, final UserRequestForm ignore) {\n-                unclaimForm(model.getObject().getTaskId());\n-                SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n-                UserRequestFormDirectoryPanel.this.getTogglePanel().close(target);\n-                target.add(container);\n+                try {\n+                    UserRequestRestClient.unclaimForm(model.getObject().getTaskId());\n+                    SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n+                    UserRequestFormDirectoryPanel.this.getTogglePanel().close(target);\n+                    target.add(container);\n+                } catch (Exception e) {\n+                    SyncopeConsoleSession.get().onException(e);\n+                }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n \n@@ -287,7 +298,24 @@ protected String paginatorRowsKey() {\n         return PREF_USER_REQUEST_FORM_PAGINATOR_ROWS;\n     }\n \n-    protected static class UserRequestFormProvider extends DirectoryDataProvider<UserRequestForm> {\n+    @Override\n+    protected Collection<ActionLink.ActionType> getBatches() {\n+        return List.of();\n+    }\n+\n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        if (event.getPayload() instanceof UserRequestSearchEvent) {\n+            UserRequestSearchEvent payload = UserRequestSearchEvent.class.cast(event.getPayload());\n+            keyword = payload.getKeyword();\n+\n+            updateResultTable(payload.getTarget());\n+        } else {\n+            super.onEvent(event);\n+        }\n+    }\n+\n+    protected final class UserRequestFormProvider extends DirectoryDataProvider<UserRequestForm> {\n \n         private static final long serialVersionUID = -2311716167583335852L;\n \n@@ -300,46 +328,18 @@ public UserRequestFormProvider(final int paginatorRows) {\n         @Override\n         public Iterator<UserRequestForm> iterator(final long first, final long count) {\n             int page = ((int) first / paginatorRows);\n-            return UserRequestRestClient.getForms((page < 0 ? 0 : page) + 1, paginatorRows, getSort()).iterator();\n+            return UserRequestRestClient.listForms(\n+                    keyword, (page < 0 ? 0 : page) + 1, paginatorRows, getSort()).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return UserRequestRestClient.countForms();\n+            return UserRequestRestClient.countForms(keyword);\n         }\n \n         @Override\n         public IModel<UserRequestForm> model(final UserRequestForm form) {\n-            return new IModel<UserRequestForm>() {\n-\n-                private static final long serialVersionUID = -2566070996511906708L;\n-\n-                @Override\n-                public UserRequestForm getObject() {\n-                    return form;\n-                }\n-            };\n-        }\n-    }\n-\n-    @Override\n-    protected Collection<ActionLink.ActionType> getBatches() {\n-        return List.of();\n-    }\n-\n-    private void claimForm(final String taskId) {\n-        try {\n-            UserRequestRestClient.claimForm(taskId);\n-        } catch (SyncopeClientException scee) {\n-            SyncopeConsoleSession.get().onException(scee);\n-        }\n-    }\n-\n-    private void unclaimForm(final String taskId) {\n-        try {\n-            UserRequestRestClient.unclaimForm(taskId);\n-        } catch (SyncopeClientException scee) {\n-            SyncopeConsoleSession.get().onException(scee);\n+            return Model.of(form);\n         }\n     }\n }"},{"sha":"fa9a58b3d1b087ad5709e40b39e6c21d83210bfb","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestsPanel.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestsPanel.java?ref=3875ff05175f70d94406a88641d9964498fac547","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.io.Serializable;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.Model;\n+\n+public class UserRequestsPanel extends Panel {\n+\n+    private static final long serialVersionUID = -896040867024301443L;\n+\n+    public UserRequestsPanel(final String id, final DirectoryPanel<?, ?, ?, ?> directoryPanel) {\n+        super(id);\n+\n+        Model<String> keywordModel = new Model<>(StringUtils.EMPTY);\n+\n+        WebMarkupContainer searchBoxContainer = new WebMarkupContainer(\"searchBox\");\n+        add(searchBoxContainer);\n+\n+        Form<?> form = new Form<>(\"form\");\n+        searchBoxContainer.add(form);\n+\n+        AjaxTextFieldPanel filter = new AjaxTextFieldPanel(\"filter\", \"filter\", keywordModel, true);\n+        form.add(filter.setPlaceholder(\"username / key\").hideLabel().setOutputMarkupId(true));\n+\n+        AjaxButton search = new AjaxButton(\"search\") {\n+\n+            private static final long serialVersionUID = 8390605330558248736L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target) {\n+                send(UserRequestsPanel.this, Broadcast.DEPTH,\n+                        new UserRequestSearchEvent(target, keywordModel.getObject()));\n+            }\n+        };\n+        search.setOutputMarkupId(true);\n+        form.add(search);\n+        form.setDefaultButton(search);\n+\n+        add(directoryPanel);\n+    }\n+\n+    public static class UserRequestSearchEvent implements Serializable {\n+\n+        private static final long serialVersionUID = 5063826346823013424L;\n+\n+        private final transient AjaxRequestTarget target;\n+\n+        private final String keyword;\n+\n+        UserRequestSearchEvent(final AjaxRequestTarget target, final String keyword) {\n+            this.target = target;\n+            this.keyword = keyword;\n+        }\n+\n+        public AjaxRequestTarget getTarget() {\n+            return target;\n+        }\n+\n+        public String getKeyword() {\n+            return keyword;\n+        }\n+    }\n+}"},{"sha":"a9e6b439232ec25eab9229613ba5e5db8a734513","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/rest/UserRequestRestClient.java","status":"modified","additions":41,"deletions":19,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRequestRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRequestRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRequestRestClient.java?ref=3875ff05175f70d94406a88641d9964498fac547","patch":"@@ -20,10 +20,10 @@\n \n import java.util.List;\n import java.util.Optional;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.UserRequest;\n import org.apache.syncope.common.lib.to.UserRequestForm;\n-import org.apache.syncope.common.rest.api.beans.UserRequestFormQuery;\n import org.apache.syncope.common.rest.api.beans.UserRequestQuery;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.apache.syncope.common.rest.api.service.UserRequestService;\n@@ -32,37 +32,59 @@ public class UserRequestRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -4785231164900813921L;\n \n-    public static int countUserRequests() {\n-        return getService(UserRequestService.class).\n-                list(new UserRequestQuery.Builder().page(1).size(0).build()).\n-                getTotalCount();\n+    public static int countRequests(final String keyword) {\n+        try {\n+            return getService(UserRequestService.class).\n+                    listRequests(new UserRequestQuery.Builder().user(keyword).page(1).size(0).build()).\n+                    getTotalCount();\n+        } catch (Exception e) {\n+            return 0;\n+        }\n     }\n \n-    public static List<UserRequest> getUserRequests(final int page, final int size, final SortParam<String> sort) {\n-        return getService(UserRequestService.class).\n-                list(new UserRequestQuery.Builder().page(page).size(size).orderBy(toOrderBy(sort)).build()).\n-                getResult();\n+    public static List<UserRequest> listRequests(\n+            final String keyword, final int page, final int size, final SortParam<String> sort) {\n+\n+        try {\n+            return getService(UserRequestService.class).listRequests(\n+                    new UserRequestQuery.Builder().user(keyword).page(page).size(size).\n+                            orderBy(toOrderBy(sort)).build()).\n+                    getResult();\n+        } catch (SyncopeClientException e) {\n+            return List.of();\n+        }\n     }\n \n     public static void cancelRequest(final String executionId, final String reason) {\n-        getService(UserRequestService.class).cancel(executionId, reason);\n+        getService(UserRequestService.class).cancelRequest(executionId, reason);\n     }\n \n-    public static int countForms() {\n-        return getService(UserRequestService.class).\n-                getForms(new UserRequestFormQuery.Builder().page(1).size(0).build()).\n-                getTotalCount();\n+    public static int countForms(final String keyword) {\n+        try {\n+            return getService(UserRequestService.class).\n+                    listForms(new UserRequestQuery.Builder().user(keyword).page(1).size(0).build()).\n+                    getTotalCount();\n+        } catch (SyncopeClientException e) {\n+            return 0;\n+        }\n     }\n \n-    public static List<UserRequestForm> getForms(final int page, final int size, final SortParam<String> sort) {\n-        return getService(UserRequestService.class).\n-                getForms(new UserRequestFormQuery.Builder().page(page).size(size).orderBy(toOrderBy(sort)).build()).\n-                getResult();\n+    public static List<UserRequestForm> listForms(\n+            final String keyword, final int page, final int size, final SortParam<String> sort) {\n+\n+        try {\n+            return getService(UserRequestService.class).listForms(\n+                    new UserRequestQuery.Builder().user(keyword).page(page).size(size).\n+                            orderBy(toOrderBy(sort)).build()).\n+                    getResult();\n+        } catch (SyncopeClientException e) {\n+            return List.of();\n+        }\n     }\n \n     public static Optional<UserRequestForm> getForm(final String userKey) {\n         PagedResult<UserRequestForm> forms = getService(UserRequestService.class).\n-                getForms(new UserRequestFormQuery.Builder().user(userKey).page(1).size(1).build());\n+                listForms(new UserRequestQuery.Builder().user(userKey).page(1).size(1).build());\n         UserRequestForm form = forms.getResult().isEmpty()\n                 ? null\n                 : forms.getResult().get(0);"},{"sha":"1bf5e18c3aa487e609741c33fca31849dd42f01c","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/widgets/UserRequestFormsWidget.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FUserRequestFormsWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FUserRequestFormsWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FUserRequestFormsWidget.java?ref=3875ff05175f70d94406a88641d9964498fac547","patch":"@@ -87,7 +87,7 @@ public final void refreshLatestAlerts(final AjaxRequestTarget target) {\n     @Override\n     protected int getLatestAlertsSize() {\n         return SyncopeConsoleSession.get().owns(FlowableEntitlement.USER_REQUEST_FORM_LIST)\n-                ? UserRequestRestClient.countForms()\n+                ? UserRequestRestClient.countForms(null)\n                 : 0;\n     }\n \n@@ -101,9 +101,10 @@ protected IModel<List<UserRequestForm>> getLatestAlerts() {\n             public List<UserRequestForm> getObject() {\n                 List<UserRequestForm> updatedForms;\n                 if (SyncopeConsoleSession.get().owns(FlowableEntitlement.USER_REQUEST_FORM_LIST)) {\n-                    updatedForms = UserRequestRestClient.getForms(1, MAX_SIZE, new SortParam<>(\"createTime\", true));\n+                    updatedForms = UserRequestRestClient.listForms(\n+                            null, 1, MAX_SIZE, new SortParam<>(\"createTime\", true));\n                 } else {\n-                    updatedForms = Collections.<UserRequestForm>emptyList();\n+                    updatedForms = Collections.emptyList();\n                 }\n \n                 return updatedForms;"},{"sha":"ec0a3f449df1c24d4f6b755a3cfe069c52ae7c7c","filename":"ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestsPanel.html","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestsPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestsPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestsPanel.html?ref=3875ff05175f70d94406a88641d9964498fac547","patch":"@@ -0,0 +1,36 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div wicket:id=\"searchBox\">\n+      <form wicket:id=\"form\">\n+        <div class=\"input-group margin-bottom\">\n+          <span wicket:id=\"filter\">[FILTER]</span>\n+          <span class=\"input-group-btn\">\n+            <button type=\"button\" class=\"btn btn-default btn-flat\" wicket:id=\"search\">\n+              <span class=\"glyphicon glyphicon-search\" aria-hidden=\"true\"></span>\n+            </button>\n+          </span>\n+        </div>\n+      </form>\n+    </div>\n+\n+    <span wicket:id=\"inner\"/>\n+  </wicket:panel>\n+</html>"},{"sha":"9e30828bf120754fd7e7b70f909d91d3e1b8f419","filename":"ext/flowable/client-enduser/src/main/java/org/apache/syncope/client/enduser/pages/Flowable.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FFlowable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FFlowable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FFlowable.java?ref=3875ff05175f70d94406a88641d9964498fac547","patch":"@@ -240,15 +240,15 @@ public URDataProvider(final int paginatorRows, final String sortParam) {\n         @Override\n         public Iterator<UserRequest> iterator(final long first, final long count) {\n             final int page = ((int) first / paginatorRows);\n-            return UserRequestRestClient.getUserRequests((page < 0 ? 0 : page) + 1,\n+            return UserRequestRestClient.listRequests((page < 0 ? 0 : page) + 1,\n                     paginatorRows,\n                     SyncopeEnduserSession.get().getSelfTO().getUsername(),\n                     new SortParam<>(sortParam, true)).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return UserRequestRestClient.countUserRequests();\n+            return UserRequestRestClient.countRequests();\n         }\n \n         @Override"},{"sha":"f3d0faa42ba5b95d7b4191fa9a8ad71edd1e0705","filename":"ext/flowable/client-enduser/src/main/java/org/apache/syncope/client/enduser/rest/UserRequestRestClient.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FUserRequestRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FUserRequestRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FUserRequestRestClient.java?ref=3875ff05175f70d94406a88641d9964498fac547","patch":"@@ -24,7 +24,6 @@\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.common.lib.to.UserRequest;\n import org.apache.syncope.common.lib.to.UserRequestForm;\n-import org.apache.syncope.common.rest.api.beans.UserRequestFormQuery;\n import org.apache.syncope.common.rest.api.beans.UserRequestQuery;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.apache.syncope.common.rest.api.service.UserRequestService;\n@@ -33,40 +32,41 @@ public class UserRequestRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -4785231164900813921L;\n \n-    public static int countUserRequests() {\n+    public static int countRequests() {\n         return getService(UserRequestService.class).\n-                list(new UserRequestQuery.Builder()\n+                listRequests(new UserRequestQuery.Builder()\n                         .user(SyncopeEnduserSession.get().getSelfTO().getUsername())\n                         .page(1)\n                         .size(0)\n                         .build()).getTotalCount();\n     }\n \n-    public static List<UserRequest> getUserRequests(\n-        final int page,\n-        final int size,\n-        final String username,\n-        final SortParam<String> sort) {\n-        return getService(UserRequestService.class).list(new UserRequestQuery.Builder().\n+    public static List<UserRequest> listRequests(\n+            final int page,\n+            final int size,\n+            final String username,\n+            final SortParam<String> sort) {\n+\n+        return getService(UserRequestService.class).listRequests(new UserRequestQuery.Builder().\n                 user(StringUtils.isBlank(username)\n                         ? SyncopeEnduserSession.get().getSelfTO().getUsername()\n                         : username).\n                 page(page).size(size).build()).getResult();\n     }\n \n     public static void cancelRequest(final String executionId, final String reason) {\n-        getService(UserRequestService.class).cancel(executionId, reason);\n+        getService(UserRequestService.class).cancelRequest(executionId, reason);\n     }\n \n     public static int countForms() {\n         return getService(UserRequestService.class).\n-                getForms(new UserRequestFormQuery.Builder().page(1).size(0).build()).\n+                listForms(new UserRequestQuery.Builder().page(1).size(0).build()).\n                 getTotalCount();\n     }\n \n     public static List<UserRequestForm> getForms(final int page, final int size, final SortParam<String> sort) {\n         return getService(UserRequestService.class).\n-                getForms(new UserRequestFormQuery.Builder().page(page).size(size).orderBy(toOrderBy(sort)).build()).\n+                listForms(new UserRequestQuery.Builder().page(page).size(size).orderBy(toOrderBy(sort)).build()).\n                 getResult();\n     }\n \n@@ -82,7 +82,7 @@ public static void submitForm(final UserRequestForm form) {\n     }\n \n     public static void start(final String bpmnProcess, final String user) {\n-        getService(UserRequestService.class).start(bpmnProcess, user, null);\n+        getService(UserRequestService.class).startRequest(bpmnProcess, user, null);\n     }\n \n     public static UserRequestForm claimForm(final String taskKey) {"},{"sha":"0ed2be179c30d1611cc7c42864a56e69024d8af8","filename":"ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/UserRequestLogic.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java?ref=3875ff05175f70d94406a88641d9964498fac547","patch":"@@ -73,7 +73,7 @@ public class UserRequestLogic extends AbstractTransactionalLogic<EntityTO> {\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n-    public Pair<Integer, List<UserRequest>> list(\n+    public Pair<Integer, List<UserRequest>> listRequests(\n             final String userKey,\n             final int page,\n             final int size,\n@@ -109,12 +109,12 @@ protected UserRequest doStart(\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    public UserRequest start(final String bpmnProcess, final WorkflowTaskExecInput inputVariables) {\n+    public UserRequest startRequest(final String bpmnProcess, final WorkflowTaskExecInput inputVariables) {\n         return doStart(bpmnProcess, userDAO.findByUsername(AuthContextUtils.getUsername()), inputVariables);\n     }\n \n     @PreAuthorize(\"hasRole('\" + FlowableEntitlement.USER_REQUEST_START + \"')\")\n-    public UserRequest start(\n+    public UserRequest startRequest(\n             final String bpmnProcess,\n             final String userKey,\n             final WorkflowTaskExecInput inputVariables) {\n@@ -133,7 +133,7 @@ protected static void securityChecks(final String username, final String entitle\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    public void cancel(final String executionId, final String reason) {\n+    public void cancelRequest(final String executionId, final String reason) {\n         Pair<ProcessInstance, String> parsed = userRequestHandler.parse(executionId);\n \n         securityChecks(userDAO.find(parsed.getRight()).getUsername(),\n@@ -187,11 +187,12 @@ public UserRequestForm getForm(final String userKey, final String taskId) {\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n-    public Pair<Integer, List<UserRequestForm>> getForms(\n+    public Pair<Integer, List<UserRequestForm>> listForms(\n             final String userKey,\n             final int page,\n             final int size,\n             final List<OrderByClause> orderByClauses) {\n+\n         evaluateKey(userKey);\n \n         return userRequestHandler.getForms(userKey, page, size, orderByClauses);"},{"sha":"f5a507b13ae0dcb9d2d5f73025ddffc4c296ba1b","filename":"ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/UserRequestFormQuery.java","status":"removed","additions":0,"deletions":55,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52b925e251209bb51e664b0604eacb2b17ed9413/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FUserRequestFormQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52b925e251209bb51e664b0604eacb2b17ed9413/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FUserRequestFormQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FUserRequestFormQuery.java?ref=52b925e251209bb51e664b0604eacb2b17ed9413","patch":"@@ -1,55 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.rest.api.beans;\n-\n-import io.swagger.v3.oas.annotations.Parameter;\n-import io.swagger.v3.oas.annotations.media.Schema;\n-import javax.ws.rs.QueryParam;\n-import org.apache.syncope.common.rest.api.service.JAXRSService;\n-\n-public class UserRequestFormQuery extends AbstractQuery {\n-\n-    private static final long serialVersionUID = -4762457303770028554L;\n-\n-    public static class Builder extends AbstractQuery.Builder<UserRequestFormQuery, Builder> {\n-\n-        @Override\n-        protected UserRequestFormQuery newInstance() {\n-            return new UserRequestFormQuery();\n-        }\n-\n-        public Builder user(final String user) {\n-            getInstance().setUser(user);\n-            return this;\n-        }\n-    }\n-\n-    private String user;\n-\n-    @Parameter(name = JAXRSService.PARAM_USER, description = \"user to match either by key or username\", schema =\n-            @Schema(implementation = String.class, example = \"50592942-73ec-44c4-a377-e859524245e4\"))\n-    public String getUser() {\n-        return user;\n-    }\n-\n-    @QueryParam(JAXRSService.PARAM_USER)\n-    public void setUser(final String user) {\n-        this.user = user;\n-    }\n-}"},{"sha":"812e55c9b011f88e7c73a0ad3a1bcef9ed5b692e","filename":"ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserRequestService.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserRequestService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserRequestService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserRequestService.java?ref=3875ff05175f70d94406a88641d9964498fac547","patch":"@@ -40,7 +40,6 @@\n import org.apache.syncope.common.lib.to.UserRequestForm;\n import org.apache.syncope.common.lib.to.WorkflowTaskExecInput;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.beans.UserRequestFormQuery;\n import org.apache.syncope.common.rest.api.beans.UserRequestQuery;\n \n /**\n@@ -61,7 +60,7 @@ public interface UserRequestService extends JAXRSService {\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    PagedResult<UserRequest> list(@BeanParam UserRequestQuery query);\n+    PagedResult<UserRequest> listRequests(@BeanParam UserRequestQuery query);\n \n     /**\n      * Starts a new request for the given BPMN Process and user (if provided) or requesting user (if not provided).\n@@ -74,7 +73,7 @@ public interface UserRequestService extends JAXRSService {\n     @POST\n     @Path(\"start/{bpmnProcess}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    UserRequest start(\n+    UserRequest startRequest(\n             @NotNull @PathParam(\"bpmnProcess\") String bpmnProcess,\n             @QueryParam(JAXRSService.PARAM_USER) String user,\n             WorkflowTaskExecInput inputVariables);\n@@ -90,7 +89,7 @@ UserRequest start(\n     @DELETE\n     @Path(\"{executionId}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void cancel(\n+    void cancelRequest(\n             @NotNull @PathParam(\"executionId\") String executionId,\n             @QueryParam(\"reason\") String reason);\n \n@@ -117,7 +116,7 @@ UserRequestForm getForm(\n     @GET\n     @Path(\"forms\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    PagedResult<UserRequestForm> getForms(@BeanParam UserRequestFormQuery query);\n+    PagedResult<UserRequestForm> listForms(@BeanParam UserRequestQuery query);\n \n     /**\n      * Requests to manage the form for the given task id."},{"sha":"23ff8c5ee92013f256fe1d60161bf5b4925a22a2","filename":"ext/flowable/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserRequestServiceImpl.java","status":"modified","additions":14,"deletions":12,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserRequestServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3875ff05175f70d94406a88641d9964498fac547/ext%2Fflowable%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserRequestServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserRequestServiceImpl.java?ref=3875ff05175f70d94406a88641d9964498fac547","patch":"@@ -19,13 +19,13 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import java.util.List;\n+import java.util.Optional;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.UserRequest;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.UserRequestForm;\n import org.apache.syncope.common.lib.to.WorkflowTaskExecInput;\n-import org.apache.syncope.common.rest.api.beans.UserRequestFormQuery;\n import org.apache.syncope.common.rest.api.beans.UserRequestQuery;\n import org.apache.syncope.core.logic.UserRequestLogic;\n import org.apache.syncope.common.rest.api.service.UserRequestService;\n@@ -43,26 +43,28 @@ public class UserRequestServiceImpl extends AbstractServiceImpl implements UserR\n     private UserDAO userDAO;\n \n     @Override\n-    public PagedResult<UserRequest> list(final UserRequestQuery query) {\n+    public PagedResult<UserRequest> listRequests(final UserRequestQuery query) {\n         if (query.getUser() != null) {\n-            query.setUser(getActualKey(userDAO, query.getUser()));\n+            query.setUser(Optional.ofNullable(getActualKey(userDAO, query.getUser())).orElse(query.getUser()));\n         }\n \n-        Pair<Integer, List<UserRequest>> result = logic.list(\n+        Pair<Integer, List<UserRequest>> result = logic.listRequests(\n                 query.getUser(), query.getPage(), query.getSize(), getOrderByClauses(query.getOrderBy()));\n         return buildPagedResult(result.getRight(), query.getPage(), query.getSize(), result.getLeft());\n     }\n \n     @Override\n-    public UserRequest start(final String bpmnProcess, final String user, final WorkflowTaskExecInput inputVariables) {\n+    public UserRequest startRequest(\n+            final String bpmnProcess, final String user, final WorkflowTaskExecInput inputVariables) {\n+\n         return user == null\n-                ? logic.start(bpmnProcess, inputVariables)\n-                : logic.start(bpmnProcess, getActualKey(userDAO, user), inputVariables);\n+                ? logic.startRequest(bpmnProcess, inputVariables)\n+                : logic.startRequest(bpmnProcess, getActualKey(userDAO, user), inputVariables);\n     }\n \n     @Override\n-    public void cancel(final String executionId, final String reason) {\n-        logic.cancel(executionId, reason);\n+    public void cancelRequest(final String executionId, final String reason) {\n+        logic.cancelRequest(executionId, reason);\n     }\n \n     @Override\n@@ -81,12 +83,12 @@ public UserRequestForm getForm(final String username, final String taskId) {\n     }\n \n     @Override\n-    public PagedResult<UserRequestForm> getForms(final UserRequestFormQuery query) {\n+    public PagedResult<UserRequestForm> listForms(final UserRequestQuery query) {\n         if (query.getUser() != null) {\n-            query.setUser(getActualKey(userDAO, query.getUser()));\n+            query.setUser(Optional.ofNullable(getActualKey(userDAO, query.getUser())).orElse(query.getUser()));\n         }\n \n-        Pair<Integer, List<UserRequestForm>> result = logic.getForms(\n+        Pair<Integer, List<UserRequestForm>> result = logic.listForms(\n                 query.getUser(), query.getPage(), query.getSize(), getOrderByClauses(query.getOrderBy()));\n         return buildPagedResult(result.getRight(), query.getPage(), query.getSize(), result.getLeft());\n     }"},{"sha":"25393f6f0c08bc1c1888125f82f47017a8abf47c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3875ff05175f70d94406a88641d9964498fac547/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3875ff05175f70d94406a88641d9964498fac547/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=3875ff05175f70d94406a88641d9964498fac547","patch":"@@ -67,7 +67,7 @@\n import org.apache.syncope.common.lib.types.StatusRType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n-import org.apache.syncope.common.rest.api.beans.UserRequestFormQuery;\n+import org.apache.syncope.common.rest.api.beans.UserRequestQuery;\n import org.apache.syncope.common.rest.api.service.AnyObjectService;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.syncope.common.rest.api.service.UserService;\n@@ -490,8 +490,8 @@ public void issueSYNCOPE434() {\n         }\n \n         // 3. approve user\n-        UserRequestForm form = userRequestService.getForms(\n-                new UserRequestFormQuery.Builder().user(userTO.getKey()).build()).getResult().get(0);\n+        UserRequestForm form = userRequestService.listForms(\n+                new UserRequestQuery.Builder().user(userTO.getKey()).build()).getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         form.getProperty(\"approveCreate\").get().setValue(Boolean.TRUE.toString());\n         userTO = userRequestService.submitForm(form);"},{"sha":"c703e67e717bdc2cfd03cd272b14a3830592515d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserRequestITCase.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3875ff05175f70d94406a88641d9964498fac547/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserRequestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3875ff05175f70d94406a88641d9964498fac547/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserRequestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserRequestITCase.java?ref=3875ff05175f70d94406a88641d9964498fac547","patch":"@@ -41,7 +41,6 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowTaskExecInput;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.rest.api.beans.UserRequestFormQuery;\n import org.apache.syncope.common.rest.api.beans.UserRequestQuery;\n import org.apache.syncope.common.rest.api.service.UserRequestService;\n import org.apache.syncope.fit.AbstractITCase;\n@@ -79,7 +78,7 @@ public void twoLevelsApproval() {\n         assertFalse(user.getMembership(\"ebf97068-aa4b-4a85-9f01-680e8c4cf227\").isPresent());\n \n         // start request\n-        UserRequest req = userRequestService.start(\"directorGroupRequest\", user.getKey(), null);\n+        UserRequest req = userRequestService.startRequest(\"directorGroupRequest\", user.getKey(), null);\n         assertNotNull(req);\n         assertEquals(\"directorGroupRequest\", req.getBpmnProcess());\n         assertNotNull(req.getExecutionId());\n@@ -88,59 +87,59 @@ public void twoLevelsApproval() {\n         // check that user can see the ongoing request\n         SyncopeClient client = clientFactory.create(user.getUsername(), \"password123\");\n         PagedResult<UserRequest> requests = client.getService(UserRequestService.class).\n-                list(new UserRequestQuery.Builder().user(user.getKey()).build());\n+                listRequests(new UserRequestQuery.Builder().user(user.getKey()).build());\n         assertEquals(1, requests.getTotalCount());\n         assertEquals(\"directorGroupRequest\", requests.getResult().get(0).getBpmnProcess());\n \n         // 1st approval -> reject\n-        UserRequestForm form = userRequestService.getForms(\n-                new UserRequestFormQuery.Builder().user(user.getKey()).build()).getResult().get(0);\n+        UserRequestForm form = userRequestService.listForms(\n+                new UserRequestQuery.Builder().user(user.getKey()).build()).getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         form.getProperty(\"firstLevelApprove\").get().setValue(Boolean.FALSE.toString());\n         userRequestService.submitForm(form);\n \n         // no more forms, group not assigned\n-        assertTrue(userRequestService.getForms(\n-                new UserRequestFormQuery.Builder().user(user.getKey()).build()).getResult().isEmpty());\n+        assertTrue(userRequestService.listForms(\n+                new UserRequestQuery.Builder().user(user.getKey()).build()).getResult().isEmpty());\n         assertFalse(userService.read(user.getKey()).getMembership(\"ebf97068-aa4b-4a85-9f01-680e8c4cf227\").isPresent());\n \n         // start request again\n-        req = userRequestService.start(\"directorGroupRequest\", user.getKey(), null);\n+        req = userRequestService.startRequest(\"directorGroupRequest\", user.getKey(), null);\n         assertNotNull(req);\n \n         // 1st approval -> accept\n-        form = userRequestService.getForms(\n-                new UserRequestFormQuery.Builder().user(user.getKey()).build()).getResult().get(0);\n+        form = userRequestService.listForms(\n+                new UserRequestQuery.Builder().user(user.getKey()).build()).getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         form.getProperty(\"firstLevelApprove\").get().setValue(Boolean.TRUE.toString());\n         userRequestService.submitForm(form);\n \n         // 2nd approval -> reject\n-        form = userRequestService.getForms(\n-                new UserRequestFormQuery.Builder().user(user.getKey()).build()).getResult().get(0);\n+        form = userRequestService.listForms(\n+                new UserRequestQuery.Builder().user(user.getKey()).build()).getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         form.getProperty(\"secondLevelApprove\").get().setValue(Boolean.FALSE.toString());\n         user = userRequestService.submitForm(form);\n \n         // no more forms, group not assigned\n-        assertTrue(userRequestService.getForms(\n-                new UserRequestFormQuery.Builder().user(user.getKey()).build()).getResult().isEmpty());\n+        assertTrue(userRequestService.listForms(\n+                new UserRequestQuery.Builder().user(user.getKey()).build()).getResult().isEmpty());\n         assertFalse(userService.read(user.getKey()).getMembership(\"ebf97068-aa4b-4a85-9f01-680e8c4cf227\").isPresent());\n \n         // start request again\n-        req = userRequestService.start(\"directorGroupRequest\", user.getKey(), null);\n+        req = userRequestService.startRequest(\"directorGroupRequest\", user.getKey(), null);\n         assertNotNull(req);\n \n         // 1st approval -> accept\n-        form = userRequestService.getForms(\n-                new UserRequestFormQuery.Builder().user(user.getKey()).build()).getResult().get(0);\n+        form = userRequestService.listForms(\n+                new UserRequestQuery.Builder().user(user.getKey()).build()).getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         form.getProperty(\"firstLevelApprove\").get().setValue(Boolean.TRUE.toString());\n         userRequestService.submitForm(form);\n \n         // 2nd approval -> accept\n-        form = userRequestService.getForms(\n-                new UserRequestFormQuery.Builder().user(user.getKey()).build()).getResult().get(0);\n+        form = userRequestService.listForms(\n+                new UserRequestQuery.Builder().user(user.getKey()).build()).getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         form.getProperty(\"secondLevelApprove\").get().setValue(Boolean.TRUE.toString());\n         user = userRequestService.submitForm(form);\n@@ -153,39 +152,39 @@ public void twoLevelsApproval() {\n     @Test\n     public void cancel() {\n         PagedResult<UserRequestForm> forms =\n-                userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n+                userRequestService.listForms(new UserRequestQuery.Builder().build());\n         int preForms = forms.getTotalCount();\n \n         UserTO user = createUser(UserITCase.getUniqueSample(\"twoLevelsApproval@tirasa.net\")).getEntity();\n         assertNotNull(user);\n         assertFalse(user.getMembership(\"ebf97068-aa4b-4a85-9f01-680e8c4cf227\").isPresent());\n \n         // start request\n-        UserRequest req = userRequestService.start(\"directorGroupRequest\", user.getKey(), null);\n+        UserRequest req = userRequestService.startRequest(\"directorGroupRequest\", user.getKey(), null);\n         assertNotNull(req);\n \n         // check that form was generated\n-        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n+        forms = userRequestService.listForms(new UserRequestQuery.Builder().build());\n         assertEquals(preForms + 1, forms.getTotalCount());\n \n-        assertEquals(1, userRequestService.getForms(\n-                new UserRequestFormQuery.Builder().user(user.getKey()).build()).getResult().size());\n+        assertEquals(1, userRequestService.listForms(\n+                new UserRequestQuery.Builder().user(user.getKey()).build()).getResult().size());\n \n         // cancel request\n-        userRequestService.cancel(req.getExecutionId(), \"nothing in particular\");\n+        userRequestService.cancelRequest(req.getExecutionId(), \"nothing in particular\");\n \n         // check that form was removed\n-        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n+        forms = userRequestService.listForms(new UserRequestQuery.Builder().build());\n         assertEquals(preForms, forms.getTotalCount());\n \n-        assertTrue(userRequestService.getForms(\n-                new UserRequestFormQuery.Builder().user(user.getKey()).build()).getResult().isEmpty());\n+        assertTrue(userRequestService.listForms(\n+                new UserRequestQuery.Builder().user(user.getKey()).build()).getResult().isEmpty());\n     }\n \n     @Test\n     public void userSelection() {\n         PagedResult<UserRequestForm> forms =\n-                userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n+                userRequestService.listForms(new UserRequestQuery.Builder().build());\n         int preForms = forms.getTotalCount();\n \n         UserTO user = createUser(UserITCase.getUniqueSample(\"userSelection@tirasa.net\")).getEntity();\n@@ -196,16 +195,16 @@ public void userSelection() {\n         SyncopeClient client = clientFactory.create(user.getUsername(), \"password123\");\n \n         // start request as user\n-        UserRequest req = client.getService(UserRequestService.class).start(\"assignPrinterRequest\", null, null);\n+        UserRequest req = client.getService(UserRequestService.class).startRequest(\"assignPrinterRequest\", null, null);\n         assertNotNull(req);\n \n         // check (as admin) that a new form is available\n-        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n+        forms = userRequestService.listForms(new UserRequestQuery.Builder().build());\n         assertEquals(preForms + 1, forms.getTotalCount());\n \n         // get (as user) the form, claim and submit\n         PagedResult<UserRequestForm> userForms = client.getService(UserRequestService.class).\n-                getForms(new UserRequestFormQuery.Builder().user(user.getKey()).build());\n+                listForms(new UserRequestQuery.Builder().user(user.getKey()).build());\n         assertEquals(1, userForms.getTotalCount());\n \n         UserRequestForm form = userForms.getResult().get(0);\n@@ -220,19 +219,19 @@ public void userSelection() {\n \n         client.getService(UserRequestService.class).submitForm(form);\n \n-        userForms = client.getService(UserRequestService.class).getForms(\n-                new UserRequestFormQuery.Builder().user(user.getKey()).build());\n+        userForms = client.getService(UserRequestService.class).listForms(\n+                new UserRequestQuery.Builder().user(user.getKey()).build());\n         assertEquals(0, userForms.getTotalCount());\n \n         // check that user can see the ongoing request\n         PagedResult<UserRequest> requests = client.getService(UserRequestService.class).\n-                list(new UserRequestQuery.Builder().user(user.getKey()).build());\n+                listRequests(new UserRequestQuery.Builder().user(user.getKey()).build());\n         assertEquals(1, requests.getTotalCount());\n         assertEquals(\"assignPrinterRequest\", requests.getResult().get(0).getBpmnProcess());\n \n         // get (as admin) the new form, claim and submit\n-        form = userRequestService.getForms(\n-                new UserRequestFormQuery.Builder().user(user.getKey()).build()).getResult().get(0);\n+        form = userRequestService.listForms(\n+                new UserRequestQuery.Builder().user(user.getKey()).build()).getResult().get(0);\n         assertEquals(\"assignPrinterRequest\", form.getBpmnProcess());\n         form = userRequestService.claimForm(form.getTaskId());\n \n@@ -242,11 +241,11 @@ public void userSelection() {\n         userRequestService.submitForm(form);\n \n         // no more forms available\n-        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n+        forms = userRequestService.listForms(new UserRequestQuery.Builder().build());\n         assertEquals(preForms, forms.getTotalCount());\n \n         assertTrue(client.getService(UserRequestService.class).\n-                list(new UserRequestQuery.Builder().user(user.getKey()).build()).getResult().isEmpty());\n+                listRequests(new UserRequestQuery.Builder().user(user.getKey()).build()).getResult().isEmpty());\n \n         // check that relationship was made effective by approval\n         relationships = userService.read(user.getKey()).getRelationships();\n@@ -258,7 +257,7 @@ public void userSelection() {\n     @Test\n     public void addVariablesToUserRequestAtStart() {\n         PagedResult<UserRequestForm> forms =\n-                userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n+                userRequestService.listForms(new UserRequestQuery.Builder().build());\n         int preForms = forms.getTotalCount();\n \n         UserTO user = createUser(UserITCase.getUniqueSample(\"addVariables@tirasa.net\")).getEntity();\n@@ -270,31 +269,32 @@ public void addVariablesToUserRequestAtStart() {\n         testInput.getVariables().put(\"providedVariable\", \"test\");\n \n         // start request as user\n-        UserRequest req = client.getService(UserRequestService.class).start(\"verifyAddedVariables\", null, testInput);\n+        UserRequest req = client.getService(UserRequestService.class).\n+                startRequest(\"verifyAddedVariables\", null, testInput);\n         assertNotNull(req);\n \n         // check that a new form is available\n-        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n+        forms = userRequestService.listForms(new UserRequestQuery.Builder().build());\n         assertEquals(preForms + 1, forms.getTotalCount());\n \n         // get the form and verify the property value\n-        PagedResult<UserRequestForm> userForms = userRequestService.\n-                getForms(new UserRequestFormQuery.Builder().user(user.getKey()).build());\n+        PagedResult<UserRequestForm> userForms = userRequestService.listForms(\n+                new UserRequestQuery.Builder().user(user.getKey()).build());\n         assertEquals(1, userForms.getTotalCount());\n \n         UserRequestForm form = userForms.getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         assertEquals(form.getProperty(\"providedVariable\").get().getValue(), \"test\");\n \n         // cancel request\n-        userRequestService.cancel(req.getExecutionId(), \"nothing in particular\");\n+        userRequestService.cancelRequest(req.getExecutionId(), \"nothing in particular\");\n \n         // no more forms available\n-        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n+        forms = userRequestService.listForms(new UserRequestQuery.Builder().build());\n         assertEquals(preForms, forms.getTotalCount());\n \n         assertTrue(client.getService(UserRequestService.class).\n-                list(new UserRequestQuery.Builder().user(user.getKey()).build()).getResult().isEmpty());\n+                listRequests(new UserRequestQuery.Builder().user(user.getKey()).build()).getResult().isEmpty());\n     }\n \n     @Test"},{"sha":"781539ddd62cc1d82c044ec5917133ce28c15d88","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserSelfITCase.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3875ff05175f70d94406a88641d9964498fac547/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3875ff05175f70d94406a88641d9964498fac547/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java?ref=3875ff05175f70d94406a88641d9964498fac547","patch":"@@ -56,7 +56,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n-import org.apache.syncope.common.rest.api.beans.UserRequestFormQuery;\n+import org.apache.syncope.common.rest.api.beans.UserRequestQuery;\n import org.apache.syncope.common.rest.api.service.AccessTokenService;\n import org.apache.syncope.common.rest.api.service.UserRequestService;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n@@ -125,8 +125,8 @@ public void createAndApprove() {\n         }\n \n         // 2. now approve and verify that propagation has happened\n-        UserRequestForm form = userRequestService.getForms(\n-                new UserRequestFormQuery.Builder().user(userTO.getKey()).build()).getResult().get(0);\n+        UserRequestForm form = userRequestService.listForms(\n+                new UserRequestQuery.Builder().user(userTO.getKey()).build()).getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         form.getProperty(\"approveCreate\").get().setValue(Boolean.TRUE.toString());\n         userTO = userRequestService.submitForm(form);\n@@ -161,8 +161,8 @@ public void createAndUnclaim() {\n         }\n \n         // 2. unclaim and verify that propagation has NOT happened\n-        UserRequestForm form = userRequestService.getForms(\n-                new UserRequestFormQuery.Builder().user(userTO.getKey()).build()).getResult().get(0);\n+        UserRequestForm form = userRequestService.listForms(\n+                new UserRequestQuery.Builder().user(userTO.getKey()).build()).getResult().get(0);\n         form = userRequestService.unclaimForm(form.getTaskId());\n         assertNull(form.getAssignee());\n         assertNotNull(userTO);\n@@ -175,8 +175,8 @@ public void createAndUnclaim() {\n         }\n \n         // 3. approve and verify that propagation has happened\n-        form = userRequestService.getForms(\n-                new UserRequestFormQuery.Builder().user(userTO.getKey()).build()).getResult().get(0);\n+        form = userRequestService.listForms(\n+                new UserRequestQuery.Builder().user(userTO.getKey()).build()).getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         form.getProperty(\"approveCreate\").get().setValue(Boolean.TRUE.toString());\n         userTO = userRequestService.submitForm(form);\n@@ -273,8 +273,8 @@ public void updateWithApproval() {\n         }\n \n         // 3. approve self-update as admin\n-        UserRequestForm form = userRequestService.getForms(\n-                new UserRequestFormQuery.Builder().user(updated.getKey()).build()).getResult().get(0);\n+        UserRequestForm form = userRequestService.listForms(\n+                new UserRequestQuery.Builder().user(updated.getKey()).build()).getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         form.getProperty(\"approveUpdate\").get().setValue(Boolean.TRUE.toString());\n         updated = userRequestService.submitForm(form);\n@@ -473,8 +473,8 @@ public void createWithReject() {\n         assertEquals(\"createApproval\", userTO.getStatus());\n \n         // 2. request if there is any pending task for user just created\n-        UserRequestForm form = userRequestService.getForms(\n-                new UserRequestFormQuery.Builder().user(userTO.getKey()).build()).getResult().get(0);\n+        UserRequestForm form = userRequestService.listForms(\n+                new UserRequestQuery.Builder().user(userTO.getKey()).build()).getResult().get(0);\n         assertNotNull(form);\n         assertNotNull(form.getUsername());\n         assertEquals(userTO.getUsername(), form.getUsername());\n@@ -505,8 +505,8 @@ public void createWithReject() {\n         // 4. claim task from bellini, with role \"User manager\" and in groupForWorkflowApproval\n         UserRequestService userService3 = clientFactory.create(\"bellini\", ADMIN_PWD).\n                 getService(UserRequestService.class);\n-        assertEquals(1, userService3.getForms(\n-                new UserRequestFormQuery.Builder().user(userTO.getKey()).build()).getTotalCount());\n+        assertEquals(1, userService3.listForms(\n+                new UserRequestQuery.Builder().user(userTO.getKey()).build()).getTotalCount());\n         form = userService3.claimForm(form.getTaskId());\n         assertNotNull(form);\n         assertNotNull(form.getTaskId());\n@@ -536,7 +536,7 @@ public void createWithApproval() {\n         assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n \n         // read forms *before* any operation\n-        PagedResult<UserRequestForm> forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n+        PagedResult<UserRequestForm> forms = userRequestService.listForms(new UserRequestQuery.Builder().build());\n         int preForms = forms.getTotalCount();\n \n         UserCR userCR = UserITCase.getUniqueSample(\"createWithApproval@syncope.apache.org\");\n@@ -569,7 +569,7 @@ public void createWithApproval() {\n         assertNotNull(exception);\n \n         // 2. request if there is any pending form for user just created\n-        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n+        forms = userRequestService.listForms(new UserRequestQuery.Builder().build());\n         assertEquals(preForms + 1, forms.getTotalCount());\n \n         // 3. as admin, update user: still pending approval\n@@ -579,8 +579,8 @@ public void createWithApproval() {\n         userUR.setUsername(new StringReplacePatchItem.Builder().value(updatedUsername).build());\n         updateUser(userUR);\n \n-        UserRequestForm form = userRequestService.getForms(\n-                new UserRequestFormQuery.Builder().user(userTO.getKey()).build()).getResult().get(0);\n+        UserRequestForm form = userRequestService.listForms(\n+                new UserRequestQuery.Builder().user(userTO.getKey()).build()).getResult().get(0);\n         assertNotNull(form);\n         assertNotNull(form.getTaskId());\n         assertNotNull(form.getUserTO());\n@@ -623,8 +623,8 @@ public void updateApproval() {\n         assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n \n         // read forms *before* any operation\n-        PagedResult<UserRequestForm> forms = userRequestService.getForms(\n-                new UserRequestFormQuery.Builder().build());\n+        PagedResult<UserRequestForm> forms = userRequestService.listForms(\n+                new UserRequestQuery.Builder().build());\n         int preForms = forms.getTotalCount();\n \n         UserTO created = createUser(UserITCase.getUniqueSample(\"updateApproval@syncope.apache.org\")).getEntity();\n@@ -641,11 +641,11 @@ public void updateApproval() {\n         assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n         assertEquals(\"updateApproval\", userService.read(created.getKey()).getStatus());\n \n-        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n+        forms = userRequestService.listForms(new UserRequestQuery.Builder().build());\n         assertEquals(preForms + 1, forms.getTotalCount());\n \n-        UserRequestForm form = userRequestService.getForms(\n-                new UserRequestFormQuery.Builder().user(created.getKey()).build()).getResult().get(0);\n+        UserRequestForm form = userRequestService.listForms(\n+                new UserRequestQuery.Builder().user(created.getKey()).build()).getResult().get(0);\n         assertNotNull(form);\n         assertNotNull(form.getTaskId());\n         assertNull(form.getAssignee());\n@@ -664,8 +664,8 @@ public void updateApproval() {\n         assertEquals(0, updated.getMemberships().size());\n \n         // the patch is not updated in the approval form\n-        form = userRequestService.getForms(\n-                new UserRequestFormQuery.Builder().user(created.getKey()).build()).getResult().get(0);\n+        form = userRequestService.listForms(\n+                new UserRequestQuery.Builder().user(created.getKey()).build()).getResult().get(0);\n         assertEquals(req, form.getUserUR());\n \n         // approve the user\n@@ -700,7 +700,7 @@ public void issueSYNCOPE15() {\n         assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n \n         // read forms *before* any operation\n-        PagedResult<UserRequestForm> forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n+        PagedResult<UserRequestForm> forms = userRequestService.listForms(new UserRequestQuery.Builder().build());\n         int preForms = forms.getTotalCount();\n \n         UserCR userCR = UserITCase.getUniqueSample(\"issueSYNCOPE15@syncope.apache.org\");\n@@ -722,11 +722,11 @@ public void issueSYNCOPE15() {\n         assertEquals(userTO.getCreationDate(), userTO.getLastChangeDate());\n \n         // 2. request if there is any pending form for user just created\n-        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n+        forms = userRequestService.listForms(new UserRequestQuery.Builder().build());\n         assertEquals(preForms + 1, forms.getTotalCount());\n \n-        UserRequestForm form = userRequestService.getForms(\n-                new UserRequestFormQuery.Builder().user(userTO.getKey()).build()).getResult().get(0);\n+        UserRequestForm form = userRequestService.listForms(\n+                new UserRequestQuery.Builder().user(userTO.getKey()).build()).getResult().get(0);\n         assertNotNull(form);\n \n         // 3. first claim by bellini ....\n@@ -748,12 +748,12 @@ public void issueSYNCOPE15() {\n         userTO = userRequestService.submitForm(form);\n         assertNotNull(userTO);\n         assertEquals(preForms,\n-                userRequestService.getForms(new UserRequestFormQuery.Builder().build()).getTotalCount());\n-        assertTrue(userRequestService.getForms(\n-                new UserRequestFormQuery.Builder().user(userTO.getKey()).build()).getResult().isEmpty());\n+                userRequestService.listForms(new UserRequestQuery.Builder().build()).getTotalCount());\n+        assertTrue(userRequestService.listForms(\n+                new UserRequestQuery.Builder().user(userTO.getKey()).build()).getResult().isEmpty());\n \n         // 7.check that no more forms are still to be processed\n-        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n+        forms = userRequestService.listForms(new UserRequestQuery.Builder().build());\n         assertEquals(preForms, forms.getTotalCount());\n     }\n "}]}