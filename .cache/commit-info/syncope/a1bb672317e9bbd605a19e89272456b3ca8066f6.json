{"sha":"a1bb672317e9bbd605a19e89272456b3ca8066f6","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmExYmI2NzIzMTdlOWJiZDYwNWExOWU4OTI3MjQ1NmIzY2E4MDY2ZjY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-08T15:54:45Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-08T15:54:58Z"},"message":"[SYNCOPE-1067] Core modifications","tree":{"sha":"aabe9764699c542bb107987baceef97bcf1faf37","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/aabe9764699c542bb107987baceef97bcf1faf37"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a1bb672317e9bbd605a19e89272456b3ca8066f6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a1bb672317e9bbd605a19e89272456b3ca8066f6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a1bb672317e9bbd605a19e89272456b3ca8066f6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a1bb672317e9bbd605a19e89272456b3ca8066f6/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"6816f17ec3a1324b28bbd0c8fc3baae88d28fe7d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6816f17ec3a1324b28bbd0c8fc3baae88d28fe7d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6816f17ec3a1324b28bbd0c8fc3baae88d28fe7d"}],"stats":{"total":1806,"additions":1652,"deletions":154},"files":[{"sha":"1251b6d483c5d5613fb376b65b5b3285ec16c93a","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/RoleDirectoryPanel.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -115,6 +115,8 @@ protected List<IColumn<RoleTO, String>> getColumns() {\n                 new ResourceModel(\"entitlements\", \"Entitlements\"), null, \"entitlements\"));\n         columns.add(new PropertyColumn<RoleTO, String>(\n                 new ResourceModel(\"realms\"), null, \"realms\"));\n+        columns.add(new PropertyColumn<RoleTO, String>(\n+                new ResourceModel(\"dynRealms\"), null, \"dynRealms\"));\n \n         return columns;\n     }"},{"sha":"d656ca52ece9900f9a9aa630d869f367424c624c","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/RoleDirectoryPanel.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.properties?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -17,3 +17,4 @@\n any.edit=Edit role ${roleTO.key}\n any.new=New role\n role.members=Role '${key}' members\n+dynRealms=Dynamic Realms"},{"sha":"34ba4ef31752a3d8c5ab3f13c446d02b943b735d","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/RoleDirectoryPanel_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel_it.properties?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -17,3 +17,4 @@\n any.edit=Modifica ruolo ${roleTO.key}\n any.new=Nuovo ruolo\n role.members=Utenti membri del rulo '${key}'\n+dynRealms=Realm dinamici"},{"sha":"4e55e7e6d203152ea3ab6277b9ff5e2060eefc6c","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/RoleDirectoryPanel_pt_BR.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel_pt_BR.properties?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -17,3 +17,4 @@\n any.edit=Alterar fun\\u00e7\\u00e3o ${roleTO.key}\n any.new=Novo fun\\u00e7\\u00e3o\n role.members=Role '${key}' members\n+dynRealms=Dynamic Realms"},{"sha":"61dd82138d08d61b0f5f0e9c100c3a41bdc8e3ad","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/RoleDirectoryPanel_ru.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel_ru.properties?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -18,3 +18,4 @@\n any.edit=\\u0418\\u0437\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c \\u0440\\u043e\\u043b\\u044c ${roleTO.key}\n any.new=\\u0421\\u043e\\u0437\\u0434\\u0430\\u0442\\u044c \\u0440\\u043e\\u043b\\u044c\n role.members=\\u0423\\u0447\\u0430\\u0441\\u0442\\u043d\\u0438\\u043a\\u0438 \\u0440\\u043e\\u043b\\u0438 '${key}'\n+dynRealms=Dynamic Realms"},{"sha":"18fee5931c8d016d1ba5eb6a63ff164542597fea","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/AbstractFiqlSearchConditionBuilder.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAbstractFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAbstractFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAbstractFiqlSearchConditionBuilder.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -65,6 +65,18 @@ public CompleteCondition isNotNull(final String property) {\n         return newBuilderInstance().is(property).notNullValue();\n     }\n \n+    public CompleteCondition inDynRealms(final String dynRealm, final String... moreDynRealms) {\n+        return newBuilderInstance().\n+                is(SpecialAttr.DYNREALMS.toString()).\n+                inDynRealms(dynRealm, moreDynRealms);\n+    }\n+\n+    public CompleteCondition notInDynRealms(final String dynRealm, final String... moreDynRealms) {\n+        return newBuilderInstance().\n+                is(SpecialAttr.DYNREALMS.toString()).\n+                notInDynRealms(dynRealm, moreDynRealms);\n+    }\n+\n     public CompleteCondition hasResources(final String resource, final String... moreResources) {\n         return newBuilderInstance().is(SpecialAttr.RESOURCES.toString()).hasResources(resource, moreResources);\n     }\n@@ -122,5 +134,18 @@ public CompleteCondition equalToIgnoreCase(final String value, final String... m\n         public CompleteCondition notEqualTolIgnoreCase(final String literalOrPattern) {\n             return condition(SyncopeFiqlParser.NIEQ, literalOrPattern);\n         }\n+\n+        @Override\n+        public CompleteCondition inDynRealms(final String dynRealm, final String... moreDynRealms) {\n+            this.result = SpecialAttr.DYNREALMS.toString();\n+            return condition(FiqlParser.EQ, dynRealm, (Object[]) moreDynRealms);\n+        }\n+\n+        @Override\n+        public CompleteCondition notInDynRealms(final String dynRealm, final String... moreDynRealms) {\n+            this.result = SpecialAttr.DYNREALMS.toString();\n+            return condition(FiqlParser.NEQ, dynRealm, (Object[]) moreDynRealms);\n+        }\n+\n     }\n }"},{"sha":"c74416974730e16a5e1eafbaa1b9f94872f2c6e9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/SpecialAttr.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -55,6 +55,10 @@ public enum SpecialAttr {\n      * Applies to users.\n      */\n     ROLES(\"$roles\"),\n+    /**\n+     * Applies to users, groups and any objects.\n+     */\n+    DYNREALMS(\"$dynRealms\"),\n     /**\n      * Applies to groups.\n      */"},{"sha":"fe2d47e06191cacc8bcbd173d9b2b18b9b7228be","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/SyncopeProperty.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeProperty.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -70,4 +70,8 @@ public interface SyncopeProperty extends Property {\n      */\n     CompleteCondition hasNotResources(String resource, String... moreResources);\n \n+    CompleteCondition inDynRealms(String dynRealm, String... moreDynRealms);\n+\n+    CompleteCondition notInDynRealms(String dynRealm, String... moreDynRealms);\n+\n }"},{"sha":"8cd74218423f676bcd90f5d899f3006c5c4e26a8","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/UserFiqlSearchConditionBuilder.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserFiqlSearchConditionBuilder.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -88,18 +88,6 @@ public CompleteCondition notInRoles(final String role, final String... moreRoles\n                 notInRoles(role, moreRoles);\n     }\n \n-    @Override\n-    public CompleteCondition hasResources(final String resource, final String... moreResources) {\n-        return newBuilderInstance().\n-                is(SpecialAttr.RESOURCES.toString()).\n-                hasResources(resource, moreResources);\n-    }\n-\n-    @Override\n-    public CompleteCondition hasNotResources(final String resource, final String... moreResources) {\n-        return newBuilderInstance().is(SpecialAttr.RESOURCES.toString()).hasNotResources(resource, moreResources);\n-    }\n-\n     protected static class Builder extends AbstractFiqlSearchConditionBuilder.Builder\n             implements UserProperty, CompleteCondition {\n "},{"sha":"47f1d9b5b176e9b8e1a84559abbc516381e6a2f1","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyTO.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -46,6 +46,8 @@ public abstract class AnyTO extends AbstractAnnotatedBean implements EntityTO, A\n \n     private String realm;\n \n+    private List<String> dynRealms = new ArrayList<>();\n+\n     private String status;\n \n     private final List<String> auxClasses = new ArrayList<>();\n@@ -84,6 +86,13 @@ public void setRealm(final String realm) {\n         this.realm = realm;\n     }\n \n+    @XmlElementWrapper(name = \"dynRealms\")\n+    @XmlElement(name = \"dynRealmF\")\n+    @JsonProperty(\"dynRealms\")\n+    public List<String> getDynRealms() {\n+        return dynRealms;\n+    }\n+\n     public String getStatus() {\n         return status;\n     }"},{"sha":"c218ec63d4325fe31f6df100d2108c1e19c47699","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/DynRealmTO.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDynRealmTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDynRealmTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDynRealmTO.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import javax.ws.rs.PathParam;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"dynRealm\")\n+@XmlType\n+public class DynRealmTO extends AbstractBaseBean implements EntityTO {\n+\n+    private static final long serialVersionUID = 4560822655754800031L;\n+\n+    private String key;\n+\n+    private String cond;\n+\n+    @Override\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    @PathParam(\"key\")\n+    @Override\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public String getCond() {\n+        return cond;\n+    }\n+\n+    public void setCond(final String cond) {\n+        this.cond = cond;\n+    }\n+\n+}"},{"sha":"93133495dff66088d78bdc023e8f4a8905bc4a54","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RoleTO.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -42,6 +42,8 @@ public class RoleTO extends AbstractBaseBean implements EntityTO {\n \n     private final List<String> realms = new ArrayList<>();\n \n+    private final List<String> dynRealms = new ArrayList<>();\n+\n     private String dynMembershipCond;\n \n     @Override\n@@ -69,6 +71,13 @@ public List<String> getRealms() {\n         return realms;\n     }\n \n+    @XmlElementWrapper(name = \"dynRealms\")\n+    @XmlElement(name = \"dynRealm\")\n+    @JsonProperty(\"dynRealms\")\n+    public List<String> getDynRealms() {\n+        return dynRealms;\n+    }\n+\n     public String getDynMembershipCond() {\n         return dynMembershipCond;\n     }"},{"sha":"1927737bf1035b5ae8ab30dea06ad13d8a42fff3","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -58,6 +58,7 @@ public enum ClientExceptionType {\n     InvalidMapping(Response.Status.BAD_REQUEST),\n     InvalidMembership(Response.Status.BAD_REQUEST),\n     InvalidRealm(Response.Status.BAD_REQUEST),\n+    InvalidDynRealm(Response.Status.BAD_REQUEST),\n     InvalidRole(Response.Status.BAD_REQUEST),\n     InvalidUser(Response.Status.BAD_REQUEST),\n     InvalidExternalResource(Response.Status.BAD_REQUEST),"},{"sha":"6cc7e7c0ad36db4763bc909d550c4c9028408894","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/EntityViolationType.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -35,6 +35,7 @@ public enum EntityViolationType {\n     InvalidPolicy(\"org.apache.syncope.core.persistence.validation.policy\"),\n     InvalidPropagationTask(\"org.apache.syncope.core.persistence.validation.propagationtask\"),\n     InvalidRealm(\"org.apache.syncope.core.persistence.validation.realm\"),\n+    InvalidDynRealm(\"org.apache.syncope.core.persistence.validation.dynrealm\"),\n     InvalidReport(\"org.apache.syncope.core.persistence.validation.report\"),\n     InvalidResource(\"org.apache.syncope.core.persistence.validation.externalresource\"),\n     InvalidGroupOwner(\"org.apache.syncope.core.persistence.validation.group.owner\"),"},{"sha":"81709f6f4fba0c4d6c0199c62db12ba7579a1fc7","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/StandardEntitlement.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -78,6 +78,16 @@ public final class StandardEntitlement {\n \n     public static final String ROLE_DELETE = \"ROLE_DELETE\";\n \n+    public static final String DYNREALM_LIST = \"DYNREALM_LIST\";\n+\n+    public static final String DYNREALM_CREATE = \"DYNREALM_CREATE\";\n+\n+    public static final String DYNREALM_READ = \"DYNREALM_READ\";\n+\n+    public static final String DYNREALM_UPDATE = \"DYNREALM_UPDATE\";\n+\n+    public static final String DYNREALM_DELETE = \"DYNREALM_DELETE\";\n+\n     public static final String SCHEMA_LIST = \"SCHEMA_LIST\";\n \n     public static final String SCHEMA_CREATE = \"SCHEMA_CREATE\";"},{"sha":"dc9836d17322a05dd6b15b7e421af30db4f7a236","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DynRealmService.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDynRealmService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDynRealmService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDynRealmService.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.DynRealmTO;\n+\n+/**\n+ * REST operations for dynamic realms.\n+ */\n+@Path(\"dynRealms\")\n+public interface DynRealmService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of all dynamic realms.\n+     *\n+     * @return list of all dynamic realms.\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    List<DynRealmTO> list();\n+\n+    /**\n+     * Returns dynamic realm with matching key.\n+     *\n+     * @param key dynamic realm key to be read\n+     * @return dynamic realm with matching key\n+     */\n+    @GET\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    DynRealmTO read(@NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Creates a new dynamic realm.\n+     *\n+     * @param dynDynRealmTO dynamic realm to be created\n+     * @return Response object featuring Location header of created dynamic realm\n+     */\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    Response create(@NotNull DynRealmTO dynDynRealmTO);\n+\n+    /**\n+     * Updates the dynamic realm matching the provided key.\n+     *\n+     * @param dynDynRealmTO dynamic realm to be stored\n+     */\n+    @PUT\n+    @Path(\"{key}\")\n+    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    void update(@NotNull DynRealmTO dynDynRealmTO);\n+\n+    /**\n+     * Deletes the dynamic realm matching the provided key.\n+     *\n+     * @param key dynamic realm key to be deleted\n+     */\n+    @DELETE\n+    @Path(\"{key}\")\n+    void delete(@NotNull @PathParam(\"key\") String key);\n+\n+}"},{"sha":"066b3d2257a17308eac8d70da9395931c1bf482c","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":35,"deletions":7,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -38,12 +38,16 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n@@ -54,6 +58,15 @@\n \n public abstract class AbstractAnyLogic<TO extends AnyTO, P extends AnyPatch> extends AbstractResourceAssociator<TO> {\n \n+    @Autowired\n+    protected UserDAO userDAO;\n+\n+    @Autowired\n+    protected GroupDAO groupDAO;\n+\n+    @Autowired\n+    protected AnyObjectDAO anyObjectDAO;\n+\n     @Autowired\n     private RealmDAO realmDAO;\n \n@@ -191,9 +204,7 @@ public boolean evaluate(final String target) {\n \n     }\n \n-    protected Set<String> getEffectiveRealms(\n-            final Set<String> allowedRealms, final String requestedRealm) {\n-\n+    protected Set<String> getEffectiveRealms(final Set<String> allowedRealms, final String requestedRealm) {\n         Set<String> allowed = RealmUtils.normalize(allowedRealms);\n         Set<String> requested = new HashSet<>();\n         requested.add(requestedRealm);\n@@ -202,18 +213,35 @@ protected Set<String> getEffectiveRealms(\n         CollectionUtils.select(requested, new StartsWithPredicate(allowed), effective);\n         CollectionUtils.select(allowed, new StartsWithPredicate(requested), effective);\n \n+        // includes dynamic realms\n+        CollectionUtils.select(allowedRealms, new Predicate<String>() {\n+\n+            @Override\n+            public boolean evaluate(final String realm) {\n+                return !realm.startsWith(\"/\");\n+            }\n+        }, effective);\n+\n         return effective;\n     }\n \n     protected void securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n-        if (!IterableUtils.matchesAny(effectiveRealms, new Predicate<String>() {\n+        boolean authorized = IterableUtils.matchesAny(effectiveRealms, new Predicate<String>() {\n \n             @Override\n             public boolean evaluate(final String ownedRealm) {\n                 return realm.startsWith(ownedRealm);\n             }\n-        })) {\n-\n+        });\n+        if (!authorized) {\n+            AnyDAO<?> anyDAO = this instanceof UserLogic\n+                    ? userDAO\n+                    : this instanceof GroupLogic\n+                            ? groupDAO\n+                            : anyObjectDAO;\n+            authorized = !CollectionUtils.intersection(anyDAO.findDynRealms(key), effectiveRealms).isEmpty();\n+        }\n+        if (!authorized) {\n             throw new DelegatedAdministrationException(\n                     this instanceof UserLogic\n                             ? AnyTypeKind.USER\n@@ -225,7 +253,7 @@ public boolean evaluate(final String ownedRealm) {\n     }\n \n     public abstract Date findLastChange(String key);\n-    \n+\n     public abstract TO read(String key);\n \n     public abstract int count(String realm);"},{"sha":"c585dd05509625d3b909676efb67967976eff79a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -39,7 +39,6 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n-import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n@@ -61,9 +60,6 @@\n @Component\n public class AnyObjectLogic extends AbstractAnyLogic<AnyObjectTO, AnyObjectPatch> {\n \n-    @Autowired\n-    protected AnyObjectDAO anyObjectDAO;\n-\n     @Autowired\n     protected AnySearchDAO searchDAO;\n "},{"sha":"bed7028bd6c368be20cf28524867a1a29bde5b2d","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/DynRealmLogic.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDynRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDynRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDynRealmLogic.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.to.DynRealmTO;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+import org.apache.syncope.core.provisioning.api.data.DynRealmDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DynRealmLogic extends AbstractTransactionalLogic<DynRealmTO> {\n+\n+    @Autowired\n+    private DynRealmDataBinder binder;\n+\n+    @Autowired\n+    private DynRealmDAO dynRealmDAO;\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.DYNREALM_READ + \"')\")\n+    public DynRealmTO read(final String key) {\n+        DynRealm dynRealm = dynRealmDAO.find(key);\n+        if (dynRealm == null) {\n+            LOG.error(\"Could not find dynamic realm '\" + key + \"'\");\n+\n+            throw new NotFoundException(key);\n+        }\n+\n+        return binder.getDynRealmTO(dynRealm);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.DYNREALM_LIST + \"')\")\n+    public List<DynRealmTO> list() {\n+        return CollectionUtils.collect(dynRealmDAO.findAll(), new Transformer<DynRealm, DynRealmTO>() {\n+\n+            @Override\n+            public DynRealmTO transform(final DynRealm input) {\n+                return binder.getDynRealmTO(input);\n+            }\n+        }, new ArrayList<DynRealmTO>());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.DYNREALM_CREATE + \"')\")\n+    public DynRealmTO create(final DynRealmTO dynRealmTO) {\n+        return binder.getDynRealmTO(dynRealmDAO.save(binder.create(dynRealmTO)));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.DYNREALM_UPDATE + \"')\")\n+    public DynRealmTO update(final DynRealmTO dynRealmTO) {\n+        DynRealm dynRealm = dynRealmDAO.find(dynRealmTO.getKey());\n+        if (dynRealm == null) {\n+            LOG.error(\"Could not find dynamic realm '\" + dynRealmTO.getKey() + \"'\");\n+            throw new NotFoundException(dynRealmTO.getKey());\n+        }\n+\n+        return binder.getDynRealmTO(dynRealmDAO.save(binder.update(dynRealm, dynRealmTO)));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.DYNREALM_DELETE + \"')\")\n+    public DynRealmTO delete(final String key) {\n+        DynRealm dynRealm = dynRealmDAO.find(key);\n+        if (dynRealm == null) {\n+            LOG.error(\"Could not find dynamic realm '\" + key + \"'\");\n+\n+            throw new NotFoundException(key);\n+        }\n+\n+        DynRealmTO deleted = binder.getDynRealmTO(dynRealm);\n+        dynRealmDAO.delete(key);\n+        return deleted;\n+    }\n+\n+    @Override\n+    protected DynRealmTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n+        String key = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof DynRealmTO) {\n+                    key = ((DynRealmTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (key != null) {\n+            try {\n+                return binder.getDynRealmTO(dynRealmDAO.find(key));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+\n+}"},{"sha":"1ddc1087786d9882194fdaaf052a24926d452d28","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -49,10 +49,8 @@\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n@@ -83,12 +81,6 @@\n @Component\n public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupPatch> {\n \n-    @Autowired\n-    protected GroupDAO groupDAO;\n-\n-    @Autowired\n-    protected UserDAO userDAO;\n-\n     @Autowired\n     protected AnySearchDAO searchDAO;\n "},{"sha":"02d88cb6b9f5d6f32542f27947b0d0e04278ac7b","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -45,9 +45,7 @@\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -69,12 +67,6 @@\n @Component\n public class UserLogic extends AbstractAnyLogic<UserTO, UserPatch> {\n \n-    @Autowired\n-    protected UserDAO userDAO;\n-\n-    @Autowired\n-    protected GroupDAO groupDAO;\n-\n     @Autowired\n     protected AnySearchDAO searchDAO;\n "},{"sha":"75b0411f96d8977de83cc912e0f28f14f7a499f2","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -93,4 +93,5 @@\n \n     void delete(A any);\n \n+    List<String> findDynRealms(String key);\n }"},{"sha":"8a10f0bb8c1c220847afee9b82108cb4fb12103c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -43,7 +43,7 @@ public interface AnyObjectDAO extends AnyDAO<AnyObject> {\n \n     AnyObject authFindByName(String name);\n \n-    List<Group> findDynGroups(AnyObject anyObject);\n+    List<Group> findDynGroups(String key);\n \n     List<ARelationship> findAllRelationships(AnyObject anyObject);\n "},{"sha":"a782ea8fde6c9d0f290e996498e3b9aa7b38d78f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/DynRealmDAO.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDynRealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDynRealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDynRealmDAO.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+\n+public interface DynRealmDAO extends DAO<DynRealm> {\n+\n+    DynRealm find(String key);\n+\n+    List<DynRealm> findAll();\n+\n+    DynRealm save(DynRealm dynRealm);\n+\n+    void delete(String key);\n+\n+    void clearDynMembers(DynRealm dynRealm);\n+\n+    void refreshDynMemberships(Any<?> any);\n+\n+    void removeDynMemberships(String key);\n+\n+}"},{"sha":"cc29852bb3c66ce825f3968382bdd96b128902e9","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RoleDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -45,6 +45,6 @@ public interface RoleDAO extends DAO<Role> {\n \n     void refreshDynMemberships(User user);\n \n-    void removeDynMemberships(User user);\n+    void removeDynMemberships(String key);\n \n }"},{"sha":"2a5d76d12ea9717bd23c1dcea47b2bc1f1fd1b48","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/UserDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -42,11 +42,11 @@ public interface UserDAO extends AnyDAO<User> {\n \n     List<User> findBySecurityQuestion(SecurityQuestion securityQuestion);\n \n-    List<Role> findDynRoles(User user);\n+    List<Role> findDynRoles(String key);\n \n     Collection<Role> findAllRoles(User user);\n \n-    List<Group> findDynGroups(User user);\n+    List<Group> findDynGroups(String key);\n \n     Collection<Group> findAllGroups(User user);\n "},{"sha":"e3f3590edede10cc3807cd0ea5b419a4467a7191","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/DynRealmCond.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FDynRealmCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FDynRealmCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FDynRealmCond.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao.search;\n+\n+public class DynRealmCond extends AbstractSearchCond {\n+\n+    private static final long serialVersionUID = 9110213614796095482L;\n+\n+    private String dynRealm;\n+\n+    public String getDynRealm() {\n+        return dynRealm;\n+    }\n+\n+    public void setDynRealm(final String dynRealm) {\n+        this.dynRealm = dynRealm;\n+    }\n+\n+    @Override\n+    public final boolean isValid() {\n+        return dynRealm != null;\n+    }\n+}"},{"sha":"08972fa261680b11adb94afc00081541a20f0204","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RoleCond.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRoleCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRoleCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRoleCond.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -22,18 +22,18 @@ public class RoleCond extends AbstractSearchCond {\n \n     private static final long serialVersionUID = 3581958527829522490L;\n \n-    private String roleKey;\n+    private String role;\n \n-    public String getRoleKey() {\n-        return roleKey;\n+    public String getRole() {\n+        return role;\n     }\n \n-    public void setRoleKey(final String roleKey) {\n-        this.roleKey = roleKey;\n+    public void setRole(final String role) {\n+        this.role = role;\n     }\n \n     @Override\n     public final boolean isValid() {\n-        return roleKey != null;\n+        return role != null;\n     }\n }"},{"sha":"520fc5876aec61524229f6d3016140e9a6213d28","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/SearchCond.java","status":"modified","additions":22,"deletions":3,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -49,6 +49,8 @@ public enum Type {\n \n     private RoleCond roleCond;\n \n+    private DynRealmCond dynRealmCond;\n+\n     private ResourceCond resourceCond;\n \n     private AssignableCond assignableCond;\n@@ -117,6 +119,15 @@ public static SearchCond getLeafCond(final RoleCond roleCond) {\n         return nodeCond;\n     }\n \n+    public static SearchCond getLeafCond(final DynRealmCond dynRealmCond) {\n+        SearchCond nodeCond = new SearchCond();\n+\n+        nodeCond.type = Type.LEAF;\n+        nodeCond.dynRealmCond = dynRealmCond;\n+\n+        return nodeCond;\n+    }\n+\n     public static SearchCond getLeafCond(final ResourceCond resourceCond) {\n         SearchCond nodeCond = new SearchCond();\n \n@@ -196,7 +207,9 @@ public static SearchCond getAndCond(final SearchCond leftCond, final SearchCond\n     }\n \n     public static SearchCond getAndCond(final List<SearchCond> conditions) {\n-        if (conditions.size() > 2) {\n+        if (conditions.size() == 1) {\n+            return conditions.get(0);\n+        } else if (conditions.size() > 2) {\n             SearchCond removed = conditions.remove(0);\n             return getAndCond(removed, getAndCond(conditions));\n         } else {\n@@ -215,7 +228,9 @@ public static SearchCond getOrCond(final SearchCond leftCond, final SearchCond r\n     }\n \n     public static SearchCond getOrCond(final List<SearchCond> conditions) {\n-        if (conditions.size() > 2) {\n+        if (conditions.size() == 1) {\n+            return conditions.get(0);\n+        } else if (conditions.size() > 2) {\n             SearchCond removed = conditions.remove(0);\n             return getOrCond(removed, getOrCond(conditions));\n         } else {\n@@ -291,6 +306,10 @@ public RoleCond getRoleCond() {\n         return roleCond;\n     }\n \n+    public DynRealmCond getDynRealmCond() {\n+        return dynRealmCond;\n+    }\n+\n     public ResourceCond getResourceCond() {\n         return resourceCond;\n     }\n@@ -326,7 +345,7 @@ public boolean isValid() {\n         switch (type) {\n             case LEAF:\n             case NOT_LEAF:\n-                isValid = (anyTypeCond != null || anyCond != null || attributeCond != null\n+                isValid = (anyTypeCond != null || anyCond != null || attributeCond != null || dynRealmCond != null\n                         || relationshipCond != null || relationshipTypeCond != null || membershipCond != null\n                         || roleCond != null || resourceCond != null || assignableCond != null || memberCond != null)\n                         && (anyTypeCond == null || anyTypeCond.isValid())"},{"sha":"e8be2aa809a4cd41df471251b62289df43588b98","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/DynRealm.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynRealm.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+public interface DynRealm extends DynMembership<Any<?>>, ProvidedKeyEntity {\n+\n+}"},{"sha":"68a1e9c01bb875230d2415691f635ff00d6a67cf","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Role.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -30,6 +30,10 @@ public interface Role extends ProvidedKeyEntity {\n \n     List<? extends Realm> getRealms();\n \n+    boolean add(DynRealm dynRealm);\n+\n+    List<? extends DynRealm> getDynRealms();\n+\n     DynRoleMembership getDynMembership();\n \n     void setDynMembership(DynRoleMembership dynMembership);"},{"sha":"ce607bf42c4d634fbea7fffbe3857474293155b8","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -37,6 +37,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n+import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n@@ -143,10 +144,16 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n \n                         case ROLES:\n                             RoleCond roleCond = new RoleCond();\n-                            roleCond.setRoleKey(value);\n+                            roleCond.setRole(value);\n                             leaf = SearchCond.getLeafCond(roleCond);\n                             break;\n \n+                        case DYNREALMS:\n+                            DynRealmCond dynRealmCond = new DynRealmCond();\n+                            dynRealmCond.setDynRealm(value);\n+                            leaf = SearchCond.getLeafCond(dynRealmCond);\n+                            break;\n+\n                         case ASSIGNABLE:\n                             AssignableCond assignableCond = new AssignableCond();\n                             assignableCond.setRealmFullPath(realm);"},{"sha":"08b2f12f312d4fae4987e064b314391ccf3338de","filename":"core/persistence-api/src/test/java/org/apache/syncope/core/persistence/api/search/SearchCondConverterTest.java","status":"modified","additions":18,"deletions":2,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -20,6 +20,7 @@\n \n import static org.junit.Assert.assertEquals;\n \n+import java.util.UUID;\n import org.apache.syncope.common.lib.search.AnyObjectFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.GroupFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.SpecialAttr;\n@@ -32,6 +33,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n+import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n@@ -109,7 +111,8 @@ public void ilike() {\n \n     @Test\n     public void nilike() {\n-        String fiqlExpression = new UserFiqlSearchConditionBuilder().is(\"username\").notEqualTolIgnoreCase(\"ros*\").query();\n+        String fiqlExpression = new UserFiqlSearchConditionBuilder().is(\"username\").notEqualTolIgnoreCase(\"ros*\").\n+                query();\n         assertEquals(\"username!~ros*\", fiqlExpression);\n \n         AttributeCond attrCond = new AnyCond(AttributeCond.Type.ILIKE);\n@@ -193,12 +196,25 @@ public void roles() {\n         assertEquals(SpecialAttr.ROLES + \"==User reviewer\", fiqlExpression);\n \n         RoleCond roleCond = new RoleCond();\n-        roleCond.setRoleKey(\"User reviewer\");\n+        roleCond.setRole(\"User reviewer\");\n         SearchCond simpleCond = SearchCond.getLeafCond(roleCond);\n \n         assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n     }\n \n+    @Test\n+    public void dynRealms() {\n+        String dynRealm = UUID.randomUUID().toString();\n+        String fiqlExpression = new UserFiqlSearchConditionBuilder().inDynRealms(dynRealm).query();\n+        assertEquals(SpecialAttr.DYNREALMS + \"==\" + dynRealm, fiqlExpression);\n+\n+        DynRealmCond dynRealmCond = new DynRealmCond();\n+        dynRealmCond.setDynRealm(dynRealm);\n+        SearchCond simpleCond = SearchCond.getLeafCond(dynRealmCond);\n+\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+    }\n+\n     @Test\n     public void resources() {\n         String fiqlExpression = new UserFiqlSearchConditionBuilder().hasResources(\"resource-ldap\").query();"},{"sha":"9b2a5e47a920af07b20ed261ae3df472c7c628fe","filename":"core/persistence-jpa/pom.xml","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fpom.xml?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -140,6 +140,24 @@ under the License.\n       <artifactId>junit</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.seleniumhq.selenium</groupId>\n+      <artifactId>selenium-java</artifactId>\n+      <scope>test</scope>\n+      <version>2.44.0</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.opera</groupId>\n+      <artifactId>operadriver</artifactId>\n+      <scope>test</scope>\n+      <version>1.5</version>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.seleniumhq.selenium</groupId>\n+          <artifactId>selenium-remote-driver</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n   </dependencies>\n \n   <build>"},{"sha":"89d27e9a4917656faa60562981a48c96ebbd3d6e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import static org.apache.syncope.core.persistence.jpa.dao.AbstractDAO.LOG;\n+\n import java.io.StringReader;\n import java.util.ArrayList;\n import java.util.Collection;\n@@ -41,6 +43,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n@@ -51,6 +54,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.DynRealm;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n@@ -80,6 +84,8 @@\n \n     private AnySearchDAO searchDAO;\n \n+    private DynRealmDAO dynRealmDAO;\n+\n     private AnyUtils anyUtils;\n \n     private PlainSchemaDAO plainSchemaDAO() {\n@@ -109,6 +115,15 @@ protected AnySearchDAO searchDAO() {\n         return searchDAO;\n     }\n \n+    protected DynRealmDAO dynRealmDAO() {\n+        synchronized (this) {\n+            if (dynRealmDAO == null) {\n+                dynRealmDAO = ApplicationContextProvider.getApplicationContext().getBean(DynRealmDAO.class);\n+            }\n+        }\n+        return dynRealmDAO;\n+    }\n+\n     protected abstract AnyUtils init();\n \n     protected AnyUtils anyUtils() {\n@@ -539,4 +554,28 @@ public void delete(final String key) {\n \n         delete(any);\n     }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<String> findDynRealms(final String key) {\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT dynRealm_id FROM \" + JPADynRealmDAO.DYNMEMB_TABLE + \" WHERE any_id=?\");\n+        query.setParameter(1, key);\n+\n+        List<String> result = new ArrayList<>();\n+        for (Object resultKey : query.getResultList()) {\n+            String actualKey = resultKey instanceof Object[]\n+                    ? (String) ((Object[]) resultKey)[0]\n+                    : ((String) resultKey);\n+\n+            DynRealm dynRealm = dynRealmDAO().find(actualKey);\n+            if (dynRealm == null) {\n+                LOG.error(\"Could not find dynRealm with id {}, even though returned by the native query\", actualKey);\n+            } else if (!result.contains(dynRealm)) {\n+                result.add(actualKey);\n+            }\n+        }\n+        return result;\n+    }\n+\n }"},{"sha":"7c1a1b0bb64da6e80660b9b68872b1298e1c33b9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -29,6 +29,8 @@\n import javax.validation.ValidationException;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -38,13 +40,15 @@\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n@@ -69,6 +73,9 @@ public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implement\n     @Autowired\n     protected RealmDAO realmDAO;\n \n+    @Autowired\n+    protected DynRealmDAO dynRealmDAO;\n+\n     @Autowired\n     protected AnyObjectDAO anyObjectDAO;\n \n@@ -92,6 +99,21 @@ public <T extends Any<?>> List<T> searchAssignable(final String realmFullPath, f\n         return search(SearchCond.getLeafCond(assignableCond), kind);\n     }\n \n+    protected SearchCond buildEffectiveCond(final SearchCond cond, final Set<String> dynRealmKeys) {\n+        List<SearchCond> effectiveConds = CollectionUtils.collect(dynRealmKeys, new Transformer<String, SearchCond>() {\n+\n+            @Override\n+            public SearchCond transform(final String input) {\n+                DynRealmCond dynRealmCond = new DynRealmCond();\n+                dynRealmCond.setDynRealm(input);\n+                return SearchCond.getLeafCond(dynRealmCond);\n+            }\n+        }, new ArrayList<SearchCond>());\n+        effectiveConds.add(cond);\n+\n+        return SearchCond.getAndCond(effectiveConds);\n+    }\n+\n     protected abstract int doCount(Set<String> adminRealms, SearchCond cond, AnyTypeKind kind);\n \n     @Override"},{"sha":"e0545d283f8d7c677ba291f9818ba873ea044b5a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":12,"deletions":7,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -143,6 +143,9 @@ public boolean evaluate(final String realm) {\n                 return anyObject.getRealm().getFullPath().startsWith(realm);\n             }\n         });\n+        if (!authorized) {\n+            authorized = !CollectionUtils.intersection(findDynRealms(anyObject.getKey()), authRealms).isEmpty();\n+        }\n         if (authRealms == null || authRealms.isEmpty() || !authorized) {\n             throw new DelegatedAdministrationException(AnyTypeKind.ANY_OBJECT, anyObject.getKey());\n         }\n@@ -213,6 +216,7 @@ public AnyObject save(final AnyObject anyObject) {\n         publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, merged, AuthContextUtils.getDomain()));\n \n         groupDAO().refreshDynMemberships(merged);\n+        dynRealmDAO().refreshDynMemberships(merged);\n \n         return merged;\n     }\n@@ -238,6 +242,7 @@ private List<URelationship> findURelationships(final AnyObject anyObject) {\n     @Override\n     public void delete(final AnyObject anyObject) {\n         groupDAO().removeDynMemberships(anyObject);\n+        dynRealmDAO().removeDynMemberships(anyObject.getKey());\n \n         for (ARelationship relationship : findARelationships(anyObject)) {\n             relationship.getLeftEnd().getRelationships().remove(relationship);\n@@ -259,16 +264,16 @@ public void delete(final AnyObject anyObject) {\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n-    public List<Group> findDynGroups(final AnyObject anyObject) {\n+    public List<Group> findDynGroups(final String key) {\n         Query query = entityManager().createNativeQuery(\n                 \"SELECT group_id FROM \" + JPAGroupDAO.ADYNMEMB_TABLE + \" WHERE any_id=?\");\n-        query.setParameter(1, anyObject.getKey());\n+        query.setParameter(1, key);\n \n         List<Group> result = new ArrayList<>();\n-        for (Object key : query.getResultList()) {\n-            String actualKey = key instanceof Object[]\n-                    ? (String) ((Object[]) key)[0]\n-                    : ((String) key);\n+        for (Object resultKey : query.getResultList()) {\n+            String actualKey = resultKey instanceof Object[]\n+                    ? (String) ((Object[]) resultKey)[0]\n+                    : ((String) resultKey);\n \n             Group group = groupDAO().find(actualKey);\n             if (group == null) {\n@@ -291,7 +296,7 @@ public Group transform(final AMembership input) {\n                         return input.getRightEnd();\n                     }\n                 }, new ArrayList<Group>()),\n-                findDynGroups(anyObject));\n+                findDynGroups(anyObject.getKey()));\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)"},{"sha":"cc44ef80049e78b8b2382ace942ba1348cd336f0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":59,"deletions":15,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -44,11 +44,13 @@\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n+import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.DynRealm;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -61,21 +63,34 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {\n \n     private static final String EMPTY_QUERY = \"SELECT any_id FROM user_search_attr WHERE 1=2\";\n \n-    private String getAdminRealmsFilter(\n+    private Pair<String, Set<String>> getAdminRealmsFilter(\n             final Set<String> adminRealms,\n             final SearchSupport svs,\n             final List<Object> parameters) {\n \n         Set<String> realmKeys = new HashSet<>();\n+        Set<String> dynRealmKeys = new HashSet<>();\n         for (String realmPath : RealmUtils.normalize(adminRealms)) {\n-            Realm realm = realmDAO.findByFullPath(realmPath);\n-            if (realm == null) {\n-                LOG.warn(\"Ignoring invalid realm {}\", realmPath);\n+            if (realmPath.startsWith(\"/\")) {\n+                Realm realm = realmDAO.findByFullPath(realmPath);\n+                if (realm == null) {\n+                    LOG.warn(\"Ignoring invalid realm {}\", realmPath);\n+                } else {\n+                    CollectionUtils.collect(\n+                            realmDAO.findDescendants(realm), EntityUtils.<Realm>keyTransformer(), realmKeys);\n+                }\n             } else {\n-                CollectionUtils.collect(\n-                        realmDAO.findDescendants(realm), EntityUtils.<Realm>keyTransformer(), realmKeys);\n+                DynRealm dynRealm = dynRealmDAO.find(realmPath);\n+                if (dynRealm == null) {\n+                    LOG.warn(\"Ignoring invalid dynamic realm {}\", realmPath);\n+                } else {\n+                    dynRealmKeys.add(dynRealm.getKey());\n+                }\n             }\n         }\n+        if (!dynRealmKeys.isEmpty()) {\n+            CollectionUtils.collect(realmDAO.findAll(), EntityUtils.keyTransformer(), realmKeys);\n+        }\n \n         StringBuilder adminRealmFilter = new StringBuilder(\"u.any_id IN (\").\n                 append(\"SELECT any_id FROM \").append(svs.field().name).\n@@ -94,20 +109,23 @@ private String getAdminRealmsFilter(\n \n         adminRealmFilter.append(\"))\");\n \n-        return adminRealmFilter.toString();\n+        return Pair.of(adminRealmFilter.toString(), dynRealmKeys);\n     }\n \n     @Override\n     protected int doCount(final Set<String> adminRealms, final SearchCond cond, final AnyTypeKind kind) {\n         List<Object> parameters = Collections.synchronizedList(new ArrayList<>());\n \n-        // 1. get the query string from the search condition\n         SearchSupport svs = new SearchSupport(kind);\n-        StringBuilder queryString = getQuery(cond, parameters, svs);\n+\n+        Pair<String, Set<String>> filter = getAdminRealmsFilter(adminRealms, svs, parameters);\n+\n+        // 1. get the query string from the search condition\n+        StringBuilder queryString = getQuery(buildEffectiveCond(cond, filter.getRight()), parameters, svs);\n \n         // 2. take into account administrative realms\n         queryString.insert(0, \"SELECT u.any_id FROM (\");\n-        queryString.append(\") u WHERE \").append(getAdminRealmsFilter(adminRealms, svs, parameters));\n+        queryString.append(\") u WHERE \").append(filter.getLeft());\n \n         // 3. prepare the COUNT query\n         queryString.insert(0, \"SELECT COUNT(any_id) FROM (\");\n@@ -132,9 +150,12 @@ protected <T extends Any<?>> List<T> doSearch(\n         try {\n             List<Object> parameters = Collections.synchronizedList(new ArrayList<>());\n \n-            // 1. get the query string from the search condition\n             SearchSupport svs = new SearchSupport(kind);\n-            StringBuilder queryString = getQuery(cond, parameters, svs);\n+\n+            Pair<String, Set<String>> filter = getAdminRealmsFilter(adminRealms, svs, parameters);\n+\n+            // 1. get the query string from the search condition\n+            StringBuilder queryString = getQuery(buildEffectiveCond(cond, filter.getRight()), parameters, svs);\n \n             // 2. take into account realms and ordering\n             OrderBySupport obs = parseOrderBy(kind, svs, orderBy);\n@@ -146,7 +167,7 @@ protected <T extends Any<?>> List<T> doSearch(\n                 queryString.append(')').append(buildWhere(svs, obs));\n             }\n             queryString.\n-                    append(getAdminRealmsFilter(adminRealms, svs, parameters)).\n+                    append(filter.getLeft()).\n                     append(buildOrderBy(obs));\n \n             // 3. prepare the search query\n@@ -340,6 +361,9 @@ private StringBuilder getQuery(final SearchCond cond, final List<Object> paramet\n                 } else if (cond.getRoleCond() != null && AnyTypeKind.USER == svs.anyTypeKind) {\n                     query.append(getQuery(cond.getRoleCond(),\n                             cond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n+                } else if (cond.getDynRealmCond() != null) {\n+                    query.append(getQuery(cond.getDynRealmCond(),\n+                            cond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n                 } else if (cond.getMemberCond() != null && AnyTypeKind.GROUP == svs.anyTypeKind) {\n                     query.append(getQuery(cond.getMemberCond(),\n                             cond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n@@ -503,7 +527,7 @@ private String getQuery(\n \n         query.append(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.role().name).append(\" WHERE \").\n-                append(\"role_id=?\").append(setParameter(parameters, cond.getRoleKey())).\n+                append(\"role_id=?\").append(setParameter(parameters, cond.getRole())).\n                 append(\") \");\n \n         if (not) {\n@@ -514,7 +538,27 @@ private String getQuery(\n \n         query.append(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.dynrolemembership().name).append(\" WHERE \").\n-                append(\"role_id=?\").append(setParameter(parameters, cond.getRoleKey())).\n+                append(\"role_id=?\").append(setParameter(parameters, cond.getRole())).\n+                append(\"))\");\n+\n+        return query.toString();\n+    }\n+\n+    private String getQuery(\n+            final DynRealmCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n+\n+        StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n+                append(svs.field().name).append(\" WHERE (\");\n+\n+        if (not) {\n+            query.append(\"any_id NOT IN (\");\n+        } else {\n+            query.append(\"any_id IN (\");\n+        }\n+\n+        query.append(\"SELECT DISTINCT any_id FROM \").\n+                append(svs.dynrealmmembership().name).append(\" WHERE \").\n+                append(\"dynRealm_id=?\").append(setParameter(parameters, cond.getDynRealm())).\n                 append(\"))\");\n \n         return query.toString();"},{"sha":"874f0d3c6f3eb7378da4f2b7e2c911ef20fa87c4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java","status":"added","additions":162,"deletions":0,"changes":162,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.Query;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n+import org.apache.syncope.core.persistence.jpa.entity.JPADynRealm;\n+import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Repository\n+public class JPADynRealmDAO extends AbstractDAO<DynRealm> implements DynRealmDAO {\n+\n+    public static final String DYNMEMB_TABLE = \"DynRealmMembers\";\n+\n+    @Autowired\n+    private ApplicationEventPublisher publisher;\n+\n+    private AnySearchDAO searchDAO;\n+\n+    private AnySearchDAO searchDAO() {\n+        synchronized (this) {\n+            if (searchDAO == null) {\n+                searchDAO = ApplicationContextProvider.getApplicationContext().getBean(AnySearchDAO.class);\n+            }\n+        }\n+        return searchDAO;\n+    }\n+\n+    @Override\n+    public DynRealm find(final String key) {\n+        return entityManager().find(JPADynRealm.class, key);\n+    }\n+\n+    @Override\n+    public List<DynRealm> findAll() {\n+        TypedQuery<DynRealm> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPADynRealm.class.getSimpleName() + \" e \", DynRealm.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public DynRealm save(final DynRealm dynRealm) {\n+        DynRealm merged = entityManager().merge(dynRealm);\n+\n+        // refresh dynamic memberships\n+        if (merged.getFIQLCond() != null) {\n+            clearDynMembers(merged);\n+\n+            List<Any<?>> matching = searchDAO().search(\n+                    SearchCondConverter.convert(merged.getFIQLCond()), AnyTypeKind.USER);\n+            for (Any<?> any : matching) {\n+                Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n+                insert.setParameter(1, any.getKey());\n+                insert.setParameter(2, merged.getKey());\n+                insert.executeUpdate();\n+\n+                publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, any, AuthContextUtils.getDomain()));\n+            }\n+\n+            matching = searchDAO().search(\n+                    SearchCondConverter.convert(merged.getFIQLCond()), AnyTypeKind.GROUP);\n+            for (Any<?> any : matching) {\n+                Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n+                insert.setParameter(1, any.getKey());\n+                insert.setParameter(2, merged.getKey());\n+                insert.executeUpdate();\n+\n+                publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, any, AuthContextUtils.getDomain()));\n+            }\n+\n+            matching = searchDAO().search(\n+                    SearchCondConverter.convert(merged.getFIQLCond()), AnyTypeKind.ANY_OBJECT);\n+            for (Any<?> any : matching) {\n+                Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n+                insert.setParameter(1, any.getKey());\n+                insert.setParameter(2, merged.getKey());\n+                insert.executeUpdate();\n+\n+                publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, any, AuthContextUtils.getDomain()));\n+            }\n+        }\n+\n+        return merged;\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        DynRealm dynRealm = find(key);\n+        if (dynRealm == null) {\n+            return;\n+        }\n+\n+        clearDynMembers(dynRealm);\n+\n+        entityManager().remove(dynRealm);\n+    }\n+\n+    @Override\n+    public void clearDynMembers(final DynRealm dynRealm) {\n+        Query delete = entityManager().createNativeQuery(\"DELETE FROM \" + DYNMEMB_TABLE + \" WHERE dynRealm_id=?\");\n+        delete.setParameter(1, dynRealm.getKey());\n+        delete.executeUpdate();\n+    }\n+\n+    @Transactional\n+    @Override\n+    public void refreshDynMemberships(final Any<?> any) {\n+        for (DynRealm dynRealm : findAll()) {\n+            if (dynRealm.getFIQLCond() != null) {\n+                Query delete = entityManager().createNativeQuery(\n+                        \"DELETE FROM \" + DYNMEMB_TABLE + \" WHERE dynRealm_id=? AND any_id=?\");\n+                delete.setParameter(1, dynRealm.getKey());\n+                delete.setParameter(2, any.getKey());\n+                delete.executeUpdate();\n+\n+                if (searchDAO().matches(any, SearchCondConverter.convert(dynRealm.getFIQLCond()))) {\n+                    Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n+                    insert.setParameter(1, any.getKey());\n+                    insert.setParameter(2, dynRealm.getKey());\n+                    insert.executeUpdate();\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void removeDynMemberships(final String key) {\n+        Query delete = entityManager().createNativeQuery(\"DELETE FROM \" + DYNMEMB_TABLE + \" WHERE any_id=?\");\n+        delete.setParameter(1, key);\n+        delete.executeUpdate();\n+    }\n+\n+}"},{"sha":"6cec27a84dbd01e1ec7bcb6113161758bb85192e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -28,6 +28,7 @@\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -165,6 +166,10 @@ public boolean evaluate(final String realm) {\n                         || realm.equals(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey()));\n             }\n         });\n+        if (!authorized) {\n+            authorized = !CollectionUtils.intersection(findDynRealms(group.getKey()), authRealms).isEmpty();\n+        }\n+\n         if (authRealms == null || authRealms.isEmpty() || !authorized) {\n             throw new DelegatedAdministrationException(AnyTypeKind.GROUP, group.getKey());\n         }\n@@ -315,11 +320,15 @@ public Group save(final Group group) {\n             }\n         }\n \n+        dynRealmDAO().refreshDynMemberships(merged);\n+\n         return merged;\n     }\n \n     @Override\n     public void delete(final Group group) {\n+        dynRealmDAO().removeDynMemberships(group.getKey());\n+\n         for (AMembership membership : findAMemberships(group)) {\n             AnyObject leftEnd = membership.getLeftEnd();\n             leftEnd.getMemberships().remove(membership);\n@@ -349,6 +358,9 @@ public void delete(final Group group) {\n             publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, leftEnd, AuthContextUtils.getDomain()));\n         }\n \n+        clearUDynMembers(group);\n+        clearADynMembers(group);\n+\n         entityManager().remove(group);\n         publisher.publishEvent(\n                 new AnyDeletedEvent(this, AnyTypeKind.GROUP, group.getKey(), AuthContextUtils.getDomain()));\n@@ -427,7 +439,7 @@ public void refreshDynMemberships(final AnyObject anyObject) {\n \n     @Override\n     public void removeDynMemberships(final AnyObject anyObject) {\n-        List<Group> dynGroups = anyObjectDAO().findDynGroups(anyObject);\n+        List<Group> dynGroups = anyObjectDAO().findDynGroups(anyObject.getKey());\n \n         Query delete = entityManager().createNativeQuery(\"DELETE FROM \" + ADYNMEMB_TABLE + \" WHERE any_id=?\");\n         delete.setParameter(1, anyObject.getKey());\n@@ -501,7 +513,7 @@ public void refreshDynMemberships(final User user) {\n \n     @Override\n     public void removeDynMemberships(final User user) {\n-        List<Group> dynGroups = userDAO().findDynGroups(user);\n+        List<Group> dynGroups = userDAO().findDynGroups(user.getKey());\n \n         Query delete = entityManager().createNativeQuery(\"DELETE FROM \" + UDYNMEMB_TABLE + \" WHERE any_id=?\");\n         delete.setParameter(1, user.getKey());"},{"sha":"367ee8d84c3adfe34c1ebe61d6a41f469dc8fef4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -121,6 +121,8 @@ public void delete(final Role role) {\n             publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, user, AuthContextUtils.getDomain()));\n         }\n \n+        clearDynMembers(role);\n+\n         entityManager().remove(role);\n     }\n \n@@ -183,9 +185,9 @@ public void refreshDynMemberships(final User user) {\n     }\n \n     @Override\n-    public void removeDynMemberships(final User user) {\n+    public void removeDynMemberships(final String key) {\n         Query delete = entityManager().createNativeQuery(\"DELETE FROM \" + DYNMEMB_TABLE + \" WHERE any_id=?\");\n-        delete.setParameter(1, user.getKey());\n+        delete.setParameter(1, key);\n         delete.executeUpdate();\n     }\n "},{"sha":"afa83f4cb0b650eec4708fabb96cc922e4f45a68","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":21,"deletions":16,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -186,6 +186,9 @@ public boolean evaluate(final String realm) {\n                     return user.getRealm().getFullPath().startsWith(realm);\n                 }\n             });\n+            if (!authorized) {\n+                authorized = !CollectionUtils.intersection(findDynRealms(user.getKey()), authRealms).isEmpty();\n+            }\n             if (authRealms == null || authRealms.isEmpty() || !authorized) {\n                 throw new DelegatedAdministrationException(AnyTypeKind.USER, user.getKey());\n             }\n@@ -448,14 +451,16 @@ public User save(final User user) {\n \n         roleDAO.refreshDynMemberships(merged);\n         groupDAO().refreshDynMemberships(merged);\n+        dynRealmDAO().refreshDynMemberships(merged);\n \n         return merged;\n     }\n \n     @Override\n     public void delete(final User user) {\n-        roleDAO.removeDynMemberships(user);\n-        groupDAO.removeDynMemberships(user);\n+        roleDAO.removeDynMemberships(user.getKey());\n+        groupDAO().removeDynMemberships(user);\n+        dynRealmDAO().removeDynMemberships(user.getKey());\n \n         AccessToken accessToken = accessTokenDAO.findByOwner(user.getUsername());\n         if (accessToken != null) {\n@@ -470,21 +475,21 @@ public void delete(final User user) {\n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public Collection<Role> findAllRoles(final User user) {\n-        return CollectionUtils.union(user.getRoles(), findDynRoles(user));\n+        return CollectionUtils.union(user.getRoles(), findDynRoles(user.getKey()));\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n-    public List<Role> findDynRoles(final User user) {\n+    public List<Role> findDynRoles(final String key) {\n         Query query = entityManager().createNativeQuery(\n                 \"SELECT role_id FROM \" + JPARoleDAO.DYNMEMB_TABLE + \" WHERE any_id=?\");\n-        query.setParameter(1, user.getKey());\n+        query.setParameter(1, key);\n \n         List<Role> result = new ArrayList<>();\n-        for (Object key : query.getResultList()) {\n-            String actualKey = key instanceof Object[]\n-                    ? (String) ((Object[]) key)[0]\n-                    : ((String) key);\n+        for (Object resultKey : query.getResultList()) {\n+            String actualKey = resultKey instanceof Object[]\n+                    ? (String) ((Object[]) resultKey)[0]\n+                    : ((String) resultKey);\n \n             Role role = roleDAO.find(actualKey);\n             if (role == null) {\n@@ -498,16 +503,16 @@ public List<Role> findDynRoles(final User user) {\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n-    public List<Group> findDynGroups(final User user) {\n+    public List<Group> findDynGroups(final String key) {\n         Query query = entityManager().createNativeQuery(\n                 \"SELECT group_id FROM \" + JPAGroupDAO.UDYNMEMB_TABLE + \" WHERE any_id=?\");\n-        query.setParameter(1, user.getKey());\n+        query.setParameter(1, key);\n \n         List<Group> result = new ArrayList<>();\n-        for (Object key : query.getResultList()) {\n-            String actualKey = key instanceof Object[]\n-                    ? (String) ((Object[]) key)[0]\n-                    : ((String) key);\n+        for (Object resultKey : query.getResultList()) {\n+            String actualKey = resultKey instanceof Object[]\n+                    ? (String) ((Object[]) resultKey)[0]\n+                    : ((String) resultKey);\n \n             Group group = groupDAO().find(actualKey);\n             if (group == null) {\n@@ -530,7 +535,7 @@ public Group transform(final UMembership input) {\n                         return input.getRightEnd();\n                     }\n                 }, new ArrayList<Group>()),\n-                findDynGroups(user));\n+                findDynGroups(user.getKey()));\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)"},{"sha":"5cac5bb668a78a191a6ab4d44c109372e17e7946","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchSupport.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -135,6 +135,10 @@ public SearchView dynrolemembership() {\n         return new SearchView(\"svdr\", JPARoleDAO.DYNMEMB_TABLE);\n     }\n \n+    public SearchView dynrealmmembership() {\n+        return new SearchView(\"svdrealm\", JPADynRealmDAO.DYNMEMB_TABLE);\n+    }\n+\n     public SearchView nullAttr() {\n         return new SearchView(\"svna\", field().name + \"_null_attr\");\n     }"},{"sha":"3a0aaa1a70896a70d0889b1f5819a99b7baacfa8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPADynRealm.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADynRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADynRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADynRealm.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import javax.persistence.Cacheable;\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+import org.apache.syncope.core.persistence.jpa.validation.entity.DynRealmCheck;\n+\n+@Entity\n+@Table(name = JPADynRealm.TABLE)\n+@Cacheable\n+@DynRealmCheck\n+public class JPADynRealm extends AbstractProvidedKeyEntity implements DynRealm {\n+\n+    private static final long serialVersionUID = -6851035842423560341L;\n+\n+    public static final String TABLE = \"DynRealm\";\n+\n+    @NotNull\n+    private String fiql;\n+\n+    @Override\n+    public String getFIQLCond() {\n+        return fiql;\n+    }\n+\n+    @Override\n+    public void setFIQLCond(final String fiql) {\n+        this.fiql = fiql;\n+    }\n+}"},{"sha":"daea67a3586e73dd50a061e7c09be6f4e26e4ba4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -124,6 +124,7 @@\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAOrgUnit;\n+import org.apache.syncope.core.persistence.api.entity.DynRealm;\n \n @Component\n public class JPAEntityFactory implements EntityFactory {\n@@ -137,6 +138,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPADomain();\n         } else if (reference.equals(Realm.class)) {\n             result = (E) new JPARealm();\n+        } else if (reference.equals(DynRealm.class)) {\n+            result = (E) new JPADynRealm();\n         } else if (reference.equals(AnyTemplateRealm.class)) {\n             result = (E) new JPAAnyTemplateRealm();\n         } else if (reference.equals(AccountPolicy.class)) {"},{"sha":"30a1f4767fce44b4230e0d20bad20a6e67b3e42d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARole.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -41,6 +41,7 @@\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership;\n import org.apache.syncope.core.persistence.jpa.validation.entity.RoleCheck;\n+import org.apache.syncope.core.persistence.api.entity.DynRealm;\n \n @Entity\n @Table(name = JPARole.TABLE)\n@@ -67,6 +68,14 @@ public class JPARole extends AbstractProvidedKeyEntity implements Role {\n     @Valid\n     private List<JPARealm> realms = new ArrayList<>();\n \n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(joinColumns =\n+            @JoinColumn(name = \"role_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"dynamicRealm_id\"))\n+    @Valid\n+    private List<JPADynRealm> dynRealms = new ArrayList<>();\n+\n     @OneToOne(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"role\")\n     @Valid\n     private JPADynRoleMembership dynMembership;\n@@ -90,6 +99,17 @@ public List<? extends Realm> getRealms() {\n         return realms;\n     }\n \n+    @Override\n+    public boolean add(final DynRealm dynamicRealm) {\n+        checkType(dynamicRealm, JPADynRealm.class);\n+        return dynRealms.add((JPADynRealm) dynamicRealm);\n+    }\n+\n+    @Override\n+    public List<? extends DynRealm> getDynRealms() {\n+        return dynRealms;\n+    }\n+\n     @Override\n     public DynRoleMembership getDynMembership() {\n         return dynMembership;"},{"sha":"567dc746db377251647a31942303b9a548353a76","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/DynRealmCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDynRealmCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDynRealmCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDynRealmCheck.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = DynRealmValidator.class)\n+@Documented\n+public @interface DynRealmCheck {\n+\n+    String message() default \"{org.apache.syncope.core.persistence.validation.dynrealm}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"e97c12262ec4c1be7ede71cd2eef6b20fa5d4f86","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/DynRealmValidator.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDynRealmValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDynRealmValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDynRealmValidator.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import java.util.regex.Pattern;\n+import javax.validation.ConstraintValidatorContext;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+\n+public class DynRealmValidator extends AbstractValidator<DynRealmCheck, DynRealm> {\n+\n+    private static final Pattern REALM_KEY_PATTERN = Pattern.compile(\"^[A-Za-z0-9]+\");\n+\n+    @Override\n+    public boolean isValid(final DynRealm dynRealm, final ConstraintValidatorContext context) {\n+        context.disableDefaultConstraintViolation();\n+\n+        boolean isValid = true;\n+\n+        if (dynRealm.getKey().startsWith(\"/\") || !REALM_KEY_PATTERN.matcher(dynRealm.getKey()).matches()) {\n+            isValid = false;\n+\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidDynRealm,\n+                            \"Only letters and numbers are allowed in dynamic realm key, and must not start with /\")).\n+                    addPropertyNode(\"key\").addConstraintViolation();\n+        }\n+\n+        return isValid;\n+    }\n+}"},{"sha":"3b46f629b4142e6b638bfbbc1e5ad0af587366a6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/EntityValidationListener.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.AnnotatedEntity;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.DynMembership;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.GroupableRelatable;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n@@ -62,6 +63,7 @@ public void validate(final Object object) {\n                         && !Policy.class.equals(interf)\n                         && !GroupableRelatable.class.equals(interf)\n                         && !Any.class.equals(interf)\n+                        && !DynMembership.class.equals(interf)\n                         && Entity.class.isAssignableFrom(interf)) {\n \n                     entityInt = interf;"},{"sha":"ded4d526d43714aa1d25e410fdf93e8ee7428aec","filename":"core/persistence-jpa/src/main/resources/indexes.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -29,6 +29,9 @@ under the License.\n   <entry key=\"DynRoleMembers_any_id\">CREATE INDEX DynRoleMembers_any_id ON DynRoleMembers(any_id)</entry>\n   <entry key=\"DynRoleMembers_role_id\">CREATE INDEX DynRoleMembers_role_id ON DynRoleMembers(role_id)</entry>\n \n+  <entry key=\"DynRealmMembers_any_id\">CREATE INDEX DynRealmMembers_any_id ON DynRealmMembers(any_id)</entry>\n+  <entry key=\"DynRealmMembers_realm_id\">CREATE INDEX DynRealmMembers_dynRealm_id ON DynRealmMembers(dynRealm_id)</entry>\n+\n   <entry key=\"UPlainAttrValue_stringvalueIndex\">CREATE INDEX UAttrValue_stringvalueIndex ON UPlainAttrValue(stringvalue)</entry>\n   <entry key=\"UPlainAttrValue_datevalueIndex\">CREATE INDEX UAttrValue_datevalueIndex ON UPlainAttrValue(datevalue)</entry>\n   <entry key=\"UPlainAttrValue_longvalueIndex\">CREATE INDEX UAttrValue_longvalueIndex ON UPlainAttrValue(longvalue)</entry>"},{"sha":"bcff6b901af3ac9095f7935597d46ceac505e3f7","filename":"core/persistence-jpa/src/main/resources/views.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -39,6 +39,12 @@ under the License.\n     role_id CHAR(36),\n     UNIQUE(any_id, role_id))\n   </entry>\n+  <entry key=\"DynRealmMembers\">\n+    CREATE TABLE DynRealmMembers(\n+    any_id CHAR(36),\n+    dynRealm_id CHAR(36),\n+    UNIQUE(any_id, dynRealm_id))\n+  </entry>\n \n   <!-- user -->\n   <entry key=\"user_search\">"},{"sha":"1ba991306b4cbd3a8135ee9ada4cad37c6c6ec99","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -109,7 +109,7 @@ public void userMatch() {\n         assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(groupCond)));\n \n         RoleCond roleCond = new RoleCond();\n-        roleCond.setRoleKey(\"Other\");\n+        roleCond.setRole(\"Other\");\n         assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(roleCond)));\n \n         user = userDAO.find(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\");\n@@ -303,7 +303,7 @@ public void searchByGroup() {\n     @Test\n     public void searchByRole() {\n         RoleCond roleCond = new RoleCond();\n-        roleCond.setRoleKey(\"Other\");\n+        roleCond.setRole(\"Other\");\n \n         List<User> users = searchDAO.search(SearchCond.getLeafCond(roleCond), AnyTypeKind.USER);\n         assertNotNull(users);"},{"sha":"55fbb1985326219358dee0e93f3f4b143253cf07","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RoleTest.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRoleTest.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;"},{"sha":"f3d320326a12bc8249040b6ea737a146563863d7","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnySearchTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -100,7 +100,7 @@ public void searchByDynMembership() {\n \n         // 2. search user by this dynamic role\n         RoleCond roleCond = new RoleCond();\n-        roleCond.setRoleKey(role.getKey());\n+        roleCond.setRole(role.getKey());\n \n         List<User> users = searchDAO.search(SearchCond.getLeafCond(roleCond), AnyTypeKind.USER);\n         assertNotNull(users);"},{"sha":"307b86511baae46b7fcd38e3037d2b67b4a7498a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/DynRealmTest.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FDynRealmTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FDynRealmTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FDynRealmTest.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.outer;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(\"Master\")\n+public class DynRealmTest extends AbstractTest {\n+\n+    @Autowired\n+    private DynRealmDAO dynRealmDAO;\n+\n+    @Autowired\n+    private AnySearchDAO searchDAO;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Test\n+    public void misc() {\n+        DynRealm dynRealm = entityFactory.newEntity(DynRealm.class);\n+        dynRealm.setKey(\"/name\");\n+        dynRealm.setFIQLCond(\"cool==true\");\n+\n+        // invalid key (starts with /)\n+        try {\n+            dynRealmDAO.save(dynRealm);\n+            fail();\n+        } catch (Exception e) {\n+            assertNotNull(e);\n+        }\n+\n+        dynRealm.setKey(\"name\");\n+        DynRealm actual = dynRealmDAO.save(dynRealm);\n+        assertNotNull(actual);\n+\n+        dynRealmDAO.flush();\n+\n+        DynRealmCond dynRealmCond = new DynRealmCond();\n+        dynRealmCond.setDynRealm(actual.getKey());\n+        List<User> matching = searchDAO.search(SearchCond.getLeafCond(dynRealmCond), AnyTypeKind.USER);\n+        assertNotNull(matching);\n+        assertFalse(matching.isEmpty());\n+\n+        User user = matching.get(0);\n+        assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(dynRealmCond)));\n+\n+        assertTrue(userDAO.findDynRealms(user.getKey()).contains(actual.getKey()));\n+    }\n+\n+}"},{"sha":"5244b65702669d390e2ac8e8b97926a63f01739c","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/DynRealmDataBinder.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FDynRealmDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FDynRealmDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FDynRealmDataBinder.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.to.DynRealmTO;\n+import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+\n+public interface DynRealmDataBinder {\n+\n+    DynRealm create(DynRealmTO dynRealmTO);\n+\n+    DynRealm update(DynRealm dynRealm, DynRealmTO dynRealmTO);\n+\n+    DynRealmTO getDynRealmTO(DynRealm dynRealm);\n+}"},{"sha":"550f1835e3d49290bd12159509dd011028ddc2e1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -102,6 +102,9 @@ public AnyObjectTO getAnyObjectTO(final AnyObject anyObject, final boolean detai\n                 details);\n \n         if (details) {\n+            // dynamic realms\n+            anyObjectTO.getDynRealms().addAll(userDAO.findDynRealms(anyObject.getKey()));\n+\n             // relationships\n             CollectionUtils.collect(anyObject.getRelationships(), new Transformer<ARelationship, RelationshipTO>() {\n \n@@ -126,7 +129,7 @@ public MembershipTO transform(final AMembership membership) {\n             }, anyObjectTO.getMemberships());\n \n             // dynamic memberships\n-            CollectionUtils.collect(anyObjectDAO.findDynGroups(anyObject),\n+            CollectionUtils.collect(anyObjectDAO.findDynGroups(anyObject.getKey()),\n                     EntityUtils.<Group>keyTransformer(), anyObjectTO.getDynGroups());\n         }\n "},{"sha":"56d7903261431f40566afc2d312ca0a22282c2be","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/DynRealmDataBinderImpl.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.DynRealmTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n+import org.apache.syncope.core.provisioning.api.data.DynRealmDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DynRealmDataBinderImpl implements DynRealmDataBinder {\n+\n+    @Autowired\n+    private DynRealmDAO dynRealmDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Override\n+    public DynRealm create(final DynRealmTO dynRealmTO) {\n+        return update(entityFactory.newEntity(DynRealm.class), dynRealmTO);\n+    }\n+\n+    @Override\n+    public DynRealm update(final DynRealm dynRealm, final DynRealmTO dynRealmTO) {\n+        dynRealm.setKey(dynRealmTO.getKey());\n+\n+        SearchCond cond = SearchCondConverter.convert(dynRealmTO.getCond());\n+        if (!cond.isValid()) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+            sce.getElements().add(dynRealmTO.getCond());\n+            throw sce;\n+        }\n+        dynRealm.setFIQLCond(dynRealmTO.getCond());\n+\n+        return dynRealmDAO.save(dynRealm);\n+    }\n+\n+    @Override\n+    public DynRealmTO getDynRealmTO(final DynRealm dynRealm) {\n+        DynRealmTO dynRealmTO = new DynRealmTO();\n+\n+        dynRealmTO.setKey(dynRealm.getKey());\n+        dynRealmTO.setCond(dynRealm.getFIQLCond());\n+\n+        return dynRealmTO;\n+    }\n+\n+}"},{"sha":"c4f8c509cac18b84562a97edd73178442b1aa66a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -231,7 +231,7 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n         }\n \n         group = groupDAO.save(group);\n-        \n+\n         // dynamic membership\n         if (groupPatch.getUDynMembershipCond() == null) {\n             if (group.getUDynMembership() != null) {\n@@ -345,6 +345,11 @@ public GroupTO getGroupTO(final Group group, final boolean details) {\n                 group.getResources(),\n                 details);\n \n+        if (details) {\n+            // dynamic realms\n+            groupTO.getDynRealms().addAll(groupDAO.findDynRealms(group.getKey()));\n+        }\n+\n         if (group.getUDynMembership() != null) {\n             groupTO.setUDynMembershipCond(group.getUDynMembership().getFIQLCond());\n         }"},{"sha":"b907051a1d0dc5eb7bf4b5e077331e04d1131a3b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RoleDataBinderImpl.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -23,15 +23,18 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.DynRealm;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.user.DynRoleMembership;\n import org.apache.syncope.core.provisioning.api.data.RoleDataBinder;\n+import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -45,6 +48,9 @@ public class RoleDataBinderImpl implements RoleDataBinder {\n     @Autowired\n     private RealmDAO realmDAO;\n \n+    @Autowired\n+    private DynRealmDAO dynRealmDAO;\n+\n     @Autowired\n     private RoleDAO roleDAO;\n \n@@ -93,6 +99,16 @@ public Role update(final Role toBeUpdated, final RoleTO roleTO) {\n             }\n         }\n \n+        role.getDynRealms().clear();\n+        for (String key : roleTO.getDynRealms()) {\n+            DynRealm dynRealm = dynRealmDAO.find(key);\n+            if (dynRealm == null) {\n+                LOG.debug(\"Invalid dynamic ream {}, ignoring\", key);\n+            } else {\n+                role.add(dynRealm);\n+            }\n+        }\n+\n         role = roleDAO.save(role);\n \n         // dynamic membership\n@@ -127,6 +143,8 @@ public String transform(final Realm input) {\n             }\n         }, roleTO.getRealms());\n \n+        CollectionUtils.collect(role.getDynRealms(), EntityUtils.keyTransformer(), roleTO.getDynRealms());\n+\n         if (role.getDynMembership() != null) {\n             roleTO.setDynMembershipCond(role.getDynMembership().getFIQLCond());\n         }"},{"sha":"54c99832b5ff6b640f2e10060759a21247b0698a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -606,6 +606,9 @@ public UserTO getUserTO(final User user, final boolean details) {\n                 details);\n \n         if (details) {\n+            // dynamic realms\n+            userTO.getDynRealms().addAll(userDAO.findDynRealms(user.getKey()));\n+\n             // roles\n             CollectionUtils.collect(user.getRoles(),\n                     EntityUtils.<Role>keyTransformer(), userTO.getRoles());\n@@ -634,9 +637,9 @@ public MembershipTO transform(final UMembership membership) {\n             }, userTO.getMemberships());\n \n             // dynamic memberships\n-            CollectionUtils.collect(userDAO.findDynRoles(user),\n+            CollectionUtils.collect(userDAO.findDynRoles(user.getKey()),\n                     EntityUtils.<Role>keyTransformer(), userTO.getDynRoles());\n-            CollectionUtils.collect(userDAO.findDynGroups(user),\n+            CollectionUtils.collect(userDAO.findDynGroups(user.getKey()),\n                     EntityUtils.<Group>keyTransformer(), userTO.getDynGroups());\n         }\n "},{"sha":"41e3bad4fb8190ac031714318cd2c4747c602958","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/DynRealmServiceImpl.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FDynRealmServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FDynRealmServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FDynRealmServiceImpl.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.net.URI;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.DynRealmTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.DynRealmService;\n+import org.apache.syncope.core.logic.DynRealmLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class DynRealmServiceImpl extends AbstractServiceImpl implements DynRealmService {\n+\n+    @Autowired\n+    private DynRealmLogic logic;\n+\n+    @Override\n+    public List<DynRealmTO> list() {\n+        return logic.list();\n+    }\n+\n+    @Override\n+    public DynRealmTO read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public Response create(final DynRealmTO roleTO) {\n+        DynRealmTO created = logic.create(roleTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(created.getKey()).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_KEY, created.getKey()).\n+                build();\n+    }\n+\n+    @Override\n+    public void update(final DynRealmTO roleTO) {\n+        logic.update(roleTO);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        logic.delete(key);\n+    }\n+\n+}"},{"sha":"79ba01bfeb698d60df2596e1b4188f99ce1fbdd8","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":32,"deletions":37,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.spring.security;\n \n import com.fasterxml.jackson.core.type.TypeReference;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n@@ -29,11 +28,10 @@\n import java.util.Map;\n import java.util.Set;\n import javax.annotation.Resource;\n-import org.apache.commons.collections4.Closure;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.SetUtils;\n import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -65,6 +63,7 @@\n import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -92,6 +91,10 @@ public class AuthDataAccessor {\n     protected static final Set<SyncopeGrantedAuthority> ANONYMOUS_AUTHORITIES =\n             Collections.singleton(new SyncopeGrantedAuthority(StandardEntitlement.ANONYMOUS));\n \n+    protected static final String[] GROUP_OWNER_ENTITLEMENTS = new String[] {\n+        StandardEntitlement.GROUP_READ, StandardEntitlement.GROUP_UPDATE, StandardEntitlement.GROUP_DELETE\n+    };\n+\n     @Resource(name = \"adminUser\")\n     protected String adminUser;\n \n@@ -282,39 +285,35 @@ protected Set<SyncopeGrantedAuthority> getUserAuthorities(final User user) {\n         if (user.isMustChangePassword()) {\n             authorities.add(new SyncopeGrantedAuthority(StandardEntitlement.MUST_CHANGE_PASSWORD));\n         } else {\n-            final Map<String, Set<String>> entForRealms = new HashMap<>();\n-\n-            // Give entitlements as assigned by roles (with realms, where applicable) - assigned either\n-            // statically and dynamically\n-            for (final Role role : userDAO.findAllRoles(user)) {\n-                IterableUtils.forEach(role.getEntitlements(), new Closure<String>() {\n-\n-                    @Override\n-                    public void execute(final String entitlement) {\n-                        Set<String> realms = entForRealms.get(entitlement);\n-                        if (realms == null) {\n-                            realms = new HashSet<>();\n-                            entForRealms.put(entitlement, realms);\n-                        }\n+            Map<String, Set<String>> entForRealms = new HashMap<>();\n+\n+            // Give entitlements as assigned by roles (with static or dynamic realms, where applicable) - assigned\n+            // either statically and dynamically\n+            for (Role role : userDAO.findAllRoles(user)) {\n+                for (String entitlement : role.getEntitlements()) {\n+                    Set<String> realms = entForRealms.get(entitlement);\n+                    if (realms == null) {\n+                        realms = new HashSet<>();\n+                        entForRealms.put(entitlement, realms);\n+                    }\n+\n+                    CollectionUtils.collect(role.getRealms(), new Transformer<Realm, String>() {\n \n-                        CollectionUtils.collect(role.getRealms(), new Transformer<Realm, String>() {\n+                        @Override\n+                        public String transform(final Realm realm) {\n+                            return realm.getFullPath();\n+                        }\n+                    }, realms);\n \n-                            @Override\n-                            public String transform(final Realm realm) {\n-                                return realm.getFullPath();\n-                            }\n-                        }, realms);\n+                    if (!entitlement.endsWith(\"_CREATE\") && !entitlement.endsWith(\"_DELETE\")) {\n+                        CollectionUtils.collect(role.getDynRealms(), EntityUtils.keyTransformer(), realms);\n                     }\n-                });\n+                }\n             }\n \n             // Give group entitlements for owned groups\n             for (Group group : groupDAO.findOwnedByUser(user.getKey())) {\n-                for (String entitlement : Arrays.asList(\n-                        StandardEntitlement.GROUP_READ,\n-                        StandardEntitlement.GROUP_UPDATE,\n-                        StandardEntitlement.GROUP_DELETE)) {\n-\n+                for (String entitlement : GROUP_OWNER_ENTITLEMENTS) {\n                     Set<String> realms = entForRealms.get(entitlement);\n                     if (realms == null) {\n                         realms = new HashSet<>();\n@@ -376,7 +375,7 @@ public Set<SyncopeGrantedAuthority> authenticate(final JWTAuthentication authent\n                         + \" for JWT \" + authentication.getClaims().getTokenId());\n             }\n \n-            if (user.isSuspended() != null && user.isSuspended()) {\n+            if (BooleanUtils.isTrue(user.isSuspended())) {\n                 throw new DisabledException(\"User \" + user.getUsername() + \" is suspended\");\n             }\n \n@@ -385,13 +384,9 @@ public Set<SyncopeGrantedAuthority> authenticate(final JWTAuthentication authent\n                 throw new DisabledException(\"User \" + user.getUsername() + \" not allowed to authenticate\");\n             }\n \n-            if (user.isMustChangePassword()) {\n+            if (BooleanUtils.isTrue(user.isMustChangePassword())) {\n                 authorities = Collections.singleton(\n                         new SyncopeGrantedAuthority(StandardEntitlement.MUST_CHANGE_PASSWORD));\n-            } else if (accessToken.getAuthorities() == null) {\n-                LOG.debug(\"No authorities found in JWT, calculating...\");\n-\n-                authorities = getUserAuthorities(user);\n             } else {\n                 LOG.debug(\"Authorities found in JWT, fetching...\");\n \n@@ -400,8 +395,8 @@ public Set<SyncopeGrantedAuthority> authenticate(final JWTAuthentication authent\n                             ENCRYPTOR.decode(new String(accessToken.getAuthorities()), CipherAlgorithm.AES),\n                             new TypeReference<Set<SyncopeGrantedAuthority>>() {\n                     });\n-                } catch (Exception e) {\n-                    LOG.error(\"Could not read stored authorities\", e);\n+                } catch (Throwable t) {\n+                    LOG.error(\"Could not read stored authorities\", t);\n                     authorities = Collections.emptySet();\n                 }\n             }"},{"sha":"d9ce84f95238dd208ba41244691c183b6117d276","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -103,7 +103,13 @@ public XContentBuilder builder(final Any<?> any) throws IOException {\n                                 ? userDAO.findAllResourceKeys(any.getKey())\n                                 : any instanceof AnyObject\n                                         ? anyObjectDAO.findAllResourceKeys(any.getKey())\n-                                        : any.getResourceKeys());\n+                                        : any.getResourceKeys()).\n+                field(\"dynRealms\",\n+                        any instanceof User\n+                                ? userDAO.findDynRealms(any.getKey())\n+                                : any instanceof AnyObject\n+                                        ? anyObjectDAO.findDynRealms(any.getKey())\n+                                        : groupDAO.findDynRealms(any.getKey()));\n \n         if (any instanceof AnyObject) {\n             AnyObject anyObject = ((AnyObject) any);"},{"sha":"82b7c6f3929384674e2fbd42380085d430dc3cad","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":39,"deletions":10,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -18,9 +18,12 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import static org.apache.syncope.core.persistence.jpa.dao.AbstractDAO.LOG;\n+\n import java.lang.reflect.Field;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -34,6 +37,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n@@ -44,6 +48,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.DynRealm;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -75,36 +80,54 @@ public class ElasticsearchAnySearchDAO extends AbstractAnySearchDAO {\n     @Autowired\n     private ElasticsearchUtils elasticsearchUtils;\n \n-    private DisMaxQueryBuilder adminRealmsFilter(final Set<String> adminRealms) {\n+    private Pair<DisMaxQueryBuilder, Set<String>> adminRealmsFilter(final Set<String> adminRealms) {\n         DisMaxQueryBuilder builder = QueryBuilders.disMaxQuery();\n \n+        Set<String> dynRealmKeys = new HashSet<>();\n         for (String realmPath : RealmUtils.normalize(adminRealms)) {\n-            Realm realm = realmDAO.findByFullPath(realmPath);\n-            if (realm == null) {\n-                LOG.warn(\"Ignoring invalid realm {}\", realmPath);\n+            if (realmPath.startsWith(\"/\")) {\n+                Realm realm = realmDAO.findByFullPath(realmPath);\n+                if (realm == null) {\n+                    LOG.warn(\"Ignoring invalid realm {}\", realmPath);\n+                } else {\n+                    for (Realm descendant : realmDAO.findDescendants(realm)) {\n+                        builder.add(QueryBuilders.termQuery(\"realm\", descendant.getFullPath()));\n+                    }\n+                }\n             } else {\n-                for (Realm descendant : realmDAO.findDescendants(realm)) {\n-                    builder.add(QueryBuilders.termQuery(\"realm\", descendant.getFullPath()));\n+                DynRealm dynRealm = dynRealmDAO.find(realmPath);\n+                if (dynRealm == null) {\n+                    LOG.warn(\"Ignoring invalid dynamic realm {}\", realmPath);\n+                } else {\n+                    dynRealmKeys.add(dynRealm.getKey());\n+                    builder.add(QueryBuilders.termQuery(\"dynRealm\", dynRealm.getKey()));\n                 }\n             }\n         }\n+        if (!dynRealmKeys.isEmpty()) {\n+            for (Realm descendant : realmDAO.findAll()) {\n+                builder.add(QueryBuilders.termQuery(\"realm\", descendant.getFullPath()));\n+            }\n+        }\n \n-        return builder;\n+        return Pair.of(builder, dynRealmKeys);\n     }\n \n     private SearchRequestBuilder searchRequestBuilder(\n             final Set<String> adminRealms,\n             final SearchCond cond,\n             final AnyTypeKind kind) {\n \n+        Pair<DisMaxQueryBuilder, Set<String>> filter = adminRealmsFilter(adminRealms);\n+\n         return client.prepareSearch(AuthContextUtils.getDomain().toLowerCase()).\n                 setTypes(kind.name()).\n                 setSearchType(SearchType.QUERY_THEN_FETCH).\n                 setQuery(SyncopeConstants.FULL_ADMIN_REALMS.equals(adminRealms)\n                         ? getQueryBuilder(cond, kind)\n                         : QueryBuilders.boolQuery().\n-                                must(adminRealmsFilter(adminRealms)).\n-                                must(getQueryBuilder(cond, kind)));\n+                                must(filter.getLeft()).\n+                                must(getQueryBuilder(buildEffectiveCond(cond, filter.getRight()), kind)));\n     }\n \n     @Override\n@@ -196,6 +219,8 @@ private QueryBuilder getQueryBuilder(final SearchCond cond, final AnyTypeKind ki\n                     builder = getQueryBuilder(cond.getAssignableCond());\n                 } else if (cond.getRoleCond() != null && AnyTypeKind.USER == kind) {\n                     builder = getQueryBuilder(cond.getRoleCond());\n+                } else if (cond.getDynRealmCond() != null) {\n+                    builder = getQueryBuilder(cond.getDynRealmCond());\n                 } else if (cond.getMemberCond() != null && AnyTypeKind.GROUP == kind) {\n                     builder = getQueryBuilder(cond.getMemberCond());\n                 } else if (cond.getResourceCond() != null) {\n@@ -286,7 +311,11 @@ private QueryBuilder getQueryBuilder(final AssignableCond cond) {\n     }\n \n     private QueryBuilder getQueryBuilder(final RoleCond cond) {\n-        return QueryBuilders.termQuery(\"roles\", cond.getRoleKey());\n+        return QueryBuilders.termQuery(\"roles\", cond.getRole());\n+    }\n+\n+    private QueryBuilder getQueryBuilder(final DynRealmCond cond) {\n+        return QueryBuilders.termQuery(\"dynRealms\", cond.getDynRealm());\n     }\n \n     private QueryBuilder getQueryBuilder(final MemberCond cond) {"},{"sha":"f22a045a44cde8001f38641c368be1334f0ac924","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -66,6 +66,7 @@\n import org.apache.syncope.common.rest.api.service.ConfigurationService;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n import org.apache.syncope.common.rest.api.service.DomainService;\n+import org.apache.syncope.common.rest.api.service.DynRealmService;\n import org.apache.syncope.common.rest.api.service.LoggerService;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n import org.apache.syncope.common.rest.api.service.PolicyService;\n@@ -182,6 +183,8 @@ public abstract class AbstractITCase {\n \n     protected static RoleService roleService;\n \n+    protected static DynRealmService dynRealmService;\n+\n     protected static UserService userService;\n \n     protected static UserSelfService userSelfService;\n@@ -262,6 +265,7 @@ public static void restSetup() {\n         realmService = adminClient.getService(RealmService.class);\n         anyObjectService = adminClient.getService(AnyObjectService.class);\n         roleService = adminClient.getService(RoleService.class);\n+        dynRealmService = adminClient.getService(DynRealmService.class);\n         userService = adminClient.getService(UserService.class);\n         userSelfService = adminClient.getService(UserSelfService.class);\n         userWorkflowService = adminClient.getService(UserWorkflowService.class);"},{"sha":"e77371677fcf8425269d584eea29032d0ec5fc17","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DynRealmITCase.java","status":"added","additions":211,"deletions":0,"changes":211,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -0,0 +1,211 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import javax.ws.rs.core.GenericType;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n+import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.DynRealmTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n+import org.apache.syncope.common.rest.api.service.DynRealmService;\n+import org.apache.syncope.common.rest.api.service.GroupService;\n+import org.apache.syncope.common.rest.api.service.UserService;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.Test;\n+\n+public class DynRealmITCase extends AbstractITCase {\n+\n+    @Test\n+    public void misc() {\n+        DynRealmTO dynRealm = null;\n+        try {\n+            dynRealm = new DynRealmTO();\n+            dynRealm.setKey(\"/name\" + getUUIDString());\n+            dynRealm.setCond(\"cool==true\");\n+\n+            // invalid key (starts with /)\n+            try {\n+                dynRealmService.create(dynRealm);\n+                fail();\n+            } catch (SyncopeClientException e) {\n+                assertEquals(ClientExceptionType.InvalidDynRealm, e.getType());\n+            }\n+            dynRealm.setKey(\"name\" + getUUIDString());\n+\n+            Response response = dynRealmService.create(dynRealm);\n+            dynRealm = getObject(response.getLocation(), DynRealmService.class, DynRealmTO.class);\n+            assertNotNull(dynRealm);\n+\n+            PagedResult<UserTO> matching = userService.search(new AnyQuery.Builder().fiql(\"cool==true\").build());\n+            assertNotNull(matching);\n+            assertNotEquals(0, matching.getSize());\n+\n+            UserTO user = matching.getResult().get(0);\n+\n+            assertTrue(user.getDynRealms().contains(dynRealm.getKey()));\n+        } finally {\n+            if (dynRealm != null) {\n+                dynRealmService.delete(dynRealm.getKey());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void delegatedAdmin() {\n+        DynRealmTO dynRealm = null;\n+        RoleTO role = null;\n+        try {\n+            // 1. create dynamic realm for all users and groups having resource-ldap assigned\n+            dynRealm = new DynRealmTO();\n+            dynRealm.setKey(\"LDAPLovers\" + getUUIDString());\n+            dynRealm.setCond(\"$resources==resource-ldap\");\n+\n+            Response response = dynRealmService.create(dynRealm);\n+            dynRealm = getObject(response.getLocation(), DynRealmService.class, DynRealmTO.class);\n+            assertNotNull(dynRealm);\n+\n+            // 2. create role for such dynamic realm\n+            role = new RoleTO();\n+            role.setKey(\"Administer LDAP\" + getUUIDString());\n+            role.getEntitlements().add(StandardEntitlement.USER_SEARCH);\n+            role.getEntitlements().add(StandardEntitlement.USER_READ);\n+            role.getEntitlements().add(StandardEntitlement.USER_UPDATE);\n+            role.getEntitlements().add(StandardEntitlement.GROUP_READ);\n+            role.getEntitlements().add(StandardEntitlement.GROUP_UPDATE);\n+            role.getDynRealms().add(dynRealm.getKey());\n+\n+            role = createRole(role);\n+            assertNotNull(role);\n+\n+            // 3. assign the new role to vivaldi\n+            UserPatch userPatch = new UserPatch();\n+            userPatch.setKey(\"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\");\n+            userPatch.getRoles().add(new StringPatchItem.Builder().value(role.getKey()).build());\n+            UserTO vivaldi = updateUser(userPatch).getEntity();\n+            assertNotNull(vivaldi);\n+            assertTrue(vivaldi.getRoles().contains(role.getKey()));\n+\n+            // 4. create new user and group, assign resource-ldap\n+            UserTO user = UserITCase.getUniqueSampleTO(\"dynRealmUser@apache.org\");\n+            user.setRealm(\"/even/two\");\n+            user.getResources().clear();\n+            user.getResources().add(RESOURCE_NAME_LDAP);\n+            user = createUser(user).getEntity();\n+            assertNotNull(user);\n+            final String userKey = user.getKey();\n+\n+            GroupTO group = GroupITCase.getSampleTO(\"dynRealmGroup\");\n+            group.setRealm(\"/odd\");\n+            group.getResources().clear();\n+            group.getResources().add(RESOURCE_NAME_LDAP);\n+            group = createGroup(group).getEntity();\n+            assertNotNull(group);\n+            final String groupKey = group.getKey();\n+\n+            // 5. verify that the new user and group are found when searching by dynamic realm\n+            PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(\"/\").fiql(\n+                    SyncopeClient.getUserSearchConditionBuilder().inDynRealms(dynRealm.getKey()).query()).build());\n+            assertTrue(IterableUtils.matchesAny(matchingUsers.getResult(), new Predicate<UserTO>() {\n+\n+                @Override\n+                public boolean evaluate(final UserTO object) {\n+                    return object.getKey().equals(userKey);\n+                }\n+            }));\n+            PagedResult<GroupTO> matchingGroups = groupService.search(new AnyQuery.Builder().realm(\"/\").fiql(\n+                    SyncopeClient.getGroupSearchConditionBuilder().inDynRealms(dynRealm.getKey()).query()).build());\n+            assertTrue(IterableUtils.matchesAny(matchingGroups.getResult(), new Predicate<GroupTO>() {\n+\n+                @Override\n+                public boolean evaluate(final GroupTO object) {\n+                    return object.getKey().equals(groupKey);\n+                }\n+            }));\n+\n+            // 6. perpare to act as vivaldi\n+            SyncopeClient vivaldiClient = clientFactory.create(\"vivaldi\", ADMIN_PWD);\n+            UserService vivaldiUserService = vivaldiClient.getService(UserService.class);\n+            GroupService vivaldiGroupService = vivaldiClient.getService(GroupService.class);\n+\n+            // 7. verify delegated administration\n+            // USER_READ\n+            assertNotNull(vivaldiUserService.read(userKey));\n+\n+            // GROUP_READ\n+            assertNotNull(vivaldiGroupService.read(groupKey));\n+\n+            // USER_SEARCH\n+            matchingUsers = vivaldiUserService.search(new AnyQuery.Builder().realm(\"/\").build());\n+            assertTrue(IterableUtils.matchesAny(matchingUsers.getResult(), new Predicate<UserTO>() {\n+\n+                @Override\n+                public boolean evaluate(final UserTO object) {\n+                    return object.getKey().equals(userKey);\n+                }\n+            }));\n+\n+            // USER_UPDATE\n+            userPatch = new UserPatch();\n+            userPatch.setKey(userKey);\n+            userPatch.getResources().add(new StringPatchItem.Builder().value(RESOURCE_NAME_NOPROPAGATION).build());\n+            user = vivaldiUserService.update(userPatch).\n+                    readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+                    }).getEntity();\n+            assertNotNull(user);\n+            assertTrue(user.getResources().contains(RESOURCE_NAME_NOPROPAGATION));\n+\n+            // GROUP_UPDATE\n+            GroupPatch groupPatch = new GroupPatch();\n+            groupPatch.setKey(groupKey);\n+            groupPatch.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(\"icon\", \"modified\")).build());\n+            group = vivaldiGroupService.update(groupPatch).\n+                    readEntity(new GenericType<ProvisioningResult<GroupTO>>() {\n+                    }).getEntity();\n+            assertNotNull(group);\n+            assertEquals(\"modified\", group.getPlainAttrMap().get(\"icon\").getValues().get(0));\n+        } finally {\n+            if (role != null) {\n+                roleService.delete(role.getKey());\n+            }\n+            if (dynRealm != null) {\n+                dynRealmService.delete(dynRealm.getKey());\n+            }\n+        }\n+    }\n+}"},{"sha":"9db9031f35fc855533be022ae414147f99aeead3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ExceptionMapperITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1bb672317e9bbd605a19e89272456b3ca8066f6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1bb672317e9bbd605a19e89272456b3ca8066f6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java?ref=a1bb672317e9bbd605a19e89272456b3ca8066f6","patch":"@@ -125,7 +125,7 @@ public void sameGroupName() {\n             fail();\n         } catch (Exception e) {\n             String message = ERROR_MESSAGES.getProperty(\"errMessage.UniqueConstraintViolation\");\n-            assertEquals(e.getMessage(), \"DataIntegrityViolation [\" + message + \"]\");\n+            assertEquals(\"EntityExists [\" + message + \"]\", e.getMessage());\n         }\n     }\n "}]}