{"sha":"382738527a32c01907f01982097c996dd672f14d","node_id":"C_kwDOJfYA1toAKDM4MjczODUyN2EzMmMwMTkwN2YwMTk4MjA5N2M5OTZkZDY3MmYxNGQ","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-05-26T11:22:41Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-05-26T11:22:41Z"},"message":"Further Console extendability improvements","tree":{"sha":"d2785d9db3b97996c4919c4e6e87f6aec28291f1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d2785d9db3b97996c4919c4e6e87f6aec28291f1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/382738527a32c01907f01982097c996dd672f14d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/382738527a32c01907f01982097c996dd672f14d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/382738527a32c01907f01982097c996dd672f14d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/382738527a32c01907f01982097c996dd672f14d/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"805cf58eeee3a5bee2141bb396b41d5847606e63","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/805cf58eeee3a5bee2141bb396b41d5847606e63","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/805cf58eeee3a5bee2141bb396b41d5847606e63"}],"stats":{"total":311,"additions":182,"deletions":129},"files":[{"sha":"07d30b2ff66f34d2da6ffa0f7bcdbb890dd93643","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RealmChoicePanel.java","status":"modified","additions":49,"deletions":23,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/382738527a32c01907f01982097c996dd672f14d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/382738527a32c01907f01982097c996dd672f14d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java?ref=382738527a32c01907f01982097c996dd672f14d","patch":"@@ -47,6 +47,7 @@\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.event.Broadcast;\n import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AbstractAutoCompleteRenderer;\n@@ -55,11 +56,11 @@\n import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteTextField;\n import org.apache.wicket.extensions.ajax.markup.html.autocomplete.IAutoCompleteRenderer;\n import org.apache.wicket.markup.ComponentTag;\n-import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.link.AbstractLink;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n import org.apache.wicket.markup.html.panel.Fragment;\n import org.apache.wicket.markup.html.panel.Panel;\n-import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.ResourceModel;\n@@ -91,9 +92,7 @@ public class RealmChoicePanel extends Panel {\n \n     protected final boolean isSearchEnabled;\n \n-    protected final Label realmDisplayKey;\n-\n-    protected final Label realmDisplayValue;\n+    protected final ListView<String> breadcrumb;\n \n     public RealmChoicePanel(final String id, final String initialRealm, final PageReference pageRef) {\n         super(id);\n@@ -169,33 +168,60 @@ protected List<DynRealmTO> load() {\n         container = new WebMarkupContainerNoVeil(\"container\", realmTree);\n         add(container.setOutputMarkupId(true));\n \n-        realmDisplayKey = new Label(\"realmDisplayKey\", realmDisplayKeyModel(null));\n-        container.addOrReplace(realmDisplayKey.setOutputMarkupId(true).setOutputMarkupPlaceholderTag(true));\n-        realmDisplayValue = new Label(\"realmDisplayValue\", realmDisplayValueText());\n-        container.addOrReplace(realmDisplayValue.setOutputMarkupId(true).setOutputMarkupPlaceholderTag(true));\n+        breadcrumb = new ListView<String>(\"breadcrumb\") {\n+\n+            private static final long serialVersionUID = -8746795666847966508L;\n+\n+            @Override\n+            protected void populateItem(final ListItem<String> item) {\n+                AjaxLink<Void> bcitem = new AjaxLink<>(\"bcitem\") {\n+\n+                    private static final long serialVersionUID = -817438685948164787L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        RealmRestClient.list(item.getModelObject()).stream().\n+                                filter(r -> item.getModelObject().equals(r.getFullPath())).\n+                                findFirst().ifPresent(t -> chooseRealm(t, target));\n+                    }\n+                };\n+                bcitem.setBody(Model.of(SyncopeConstants.ROOT_REALM.equals(item.getModelObject())\n+                        ? SyncopeConstants.ROOT_REALM\n+                        : StringUtils.substringAfterLast(item.getModelObject(), \"/\")));\n+                bcitem.setEnabled(!model.getObject().getFullPath().equals(item.getModelObject()));\n+                item.add(bcitem);\n+            }\n+        };\n+        container.addOrReplace(breadcrumb.setOutputMarkupId(true).setOutputMarkupPlaceholderTag(true));\n+        setBreadcrumb(model.getObject());\n \n         reloadRealmTree();\n     }\n \n-    protected IModel<String> realmDisplayKeyModel(final Boolean dynamic) {\n-        return dynamic == null\n-                ? model.getObject().getFullPath().startsWith(SyncopeConstants.ROOT_REALM)\n-                ? new ResourceModel(\"realmDisplayKey\", \"Realm\")\n-                : new ResourceModel(\"dynRealmLabel\", \"Dynamic Realm\")\n-                : dynamic\n-                        ? new ResourceModel(\"dynRealmLabel\", \"Dynamic Realm\")\n-                        : new ResourceModel(\"realmDisplayKey\", \"Realm\");\n-    }\n+    protected void setBreadcrumb(final RealmTO realm) {\n+        if (SyncopeConstants.ROOT_REALM.equals(realm.getFullPath())) {\n+            breadcrumb.setList(List.of(realm.getFullPath()));\n+        } else {\n+            List<String> bcitems = new ArrayList<>();\n+            bcitems.add(SyncopeConstants.ROOT_REALM);\n+\n+            String[] split = realm.getFullPath().split(\"/\");\n+            for (int i = 1; i < split.length; i++) {\n+                StringBuilder bcitem = new StringBuilder();\n+                for (int j = 1; j <= i; j++) {\n+                    bcitem.append('/').append(split[j]);\n+                }\n+                bcitems.add(bcitem.toString());\n+            }\n \n-    protected String realmDisplayValueText() {\n-        return RealmsUtils.getFullPath(model.getObject().getFullPath());\n+            breadcrumb.setList(bcitems);\n+        }\n     }\n \n     protected void chooseRealm(final RealmTO realm, final AjaxRequestTarget target) {\n         model.setObject(realm);\n-        realmDisplayValue.setDefaultModelObject(realmDisplayValueText());\n-        realmDisplayKey.setDefaultModel(realmDisplayKeyModel(false));\n-        target.add(realmDisplayValue);\n+        setBreadcrumb(realm);\n+        target.add(container);\n         send(pageRef.getPage(), Broadcast.EXACT, new ChosenRealm<>(realm, target));\n     }\n "},{"sha":"dd6933301d057c695aca2d64dae365a3627d0265","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/NumberWidget.java","status":"modified","additions":15,"deletions":7,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/382738527a32c01907f01982097c996dd672f14d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/382738527a32c01907f01982097c996dd672f14d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java?ref=382738527a32c01907f01982097c996dd672f14d","patch":"@@ -20,6 +20,8 @@\n \n import java.util.List;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.SyncopeWebApplication;\n+import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.wicket.behavior.AttributeAppender;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n@@ -29,7 +31,6 @@\n import org.apache.syncope.client.console.pages.Realms;\n import org.apache.syncope.client.console.pages.Security;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n-import org.apache.wicket.request.component.IRequestablePage;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n \n public class NumberWidget extends BaseWidget {\n@@ -48,20 +49,27 @@ public NumberWidget(final String id, final String bg, final Number number, final\n         WebMarkupContainer box = new WebMarkupContainer(\"card\");\n         box.add(new AttributeAppender(\"class\", ' ' + bg));\n \n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends BasePage> realmsPage =\n+                (Class<? extends BasePage>) SyncopeWebApplication.get().getPageClass(\"realms\");\n+        if (realmsPage == null) {\n+            realmsPage = Realms.class;\n+        }\n+\n         boolean isAuthorized = true;\n         PageParameters pageParameters = new PageParameters();\n-        Class<? extends IRequestablePage> responsePage;\n+        Class<? extends BasePage> responsePage;\n         List<String> anyTypes = AnyTypeRestClient.list();\n         switch (id) {\n             case \"totalUsers\":\n                 pageParameters.add(Realms.SELECTED_INDEX, 1);\n-                responsePage = Realms.class;\n+                responsePage = realmsPage;\n                 isAuthorized = SyncopeConsoleSession.get().owns(IdRepoEntitlement.USER_SEARCH);\n                 break;\n \n             case \"totalGroups\":\n                 pageParameters.add(Realms.SELECTED_INDEX, 2);\n-                responsePage = Realms.class;\n+                responsePage = realmsPage;\n                 isAuthorized = SyncopeConsoleSession.get().owns(IdRepoEntitlement.GROUP_SEARCH);\n                 break;\n \n@@ -74,7 +82,7 @@ public NumberWidget(final String id, final String bg, final Number number, final\n                             pageParameters.add(Realms.SELECTED_INDEX, selectedIndex);\n                         }\n                     }\n-                    responsePage = Realms.class;\n+                    responsePage = realmsPage;\n                     isAuthorized = SyncopeConsoleSession.get().owns(label + \"_SEARCH\");\n                 } else {\n                     responsePage = Security.class;\n@@ -90,13 +98,13 @@ public NumberWidget(final String id, final String bg, final Number number, final\n                         pageParameters.add(Realms.SELECTED_INDEX, selectedIndex);\n                     }\n                 }\n-                responsePage = Realms.class;\n+                responsePage = realmsPage;\n                 isAuthorized = SyncopeConsoleSession.get().owns(label + \"_SEARCH\");\n                 break;\n \n             default:\n                 pageParameters.add(Realms.SELECTED_INDEX, 0);\n-                responsePage = Realms.class;\n+                responsePage = realmsPage;\n         }\n \n         AjaxEventBehavior clickToRealms = new AjaxEventBehavior(\"mousedown\") {"},{"sha":"b4d88faf044fca9a92539a02dcdf17a886185692","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java","status":"modified","additions":33,"deletions":37,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/382738527a32c01907f01982097c996dd672f14d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/382738527a32c01907f01982097c996dd672f14d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java?ref=382738527a32c01907f01982097c996dd672f14d","patch":"@@ -86,6 +86,10 @@ public <T extends AnyTO> Groups(final AnyWrapper<T> modelObject, final boolean t\n         addDynamicRealmsContainer();\n     }\n \n+    protected List<GroupTO> searchAssignable(final String realm, final String term) {\n+        return SyncopeRestClient.searchAssignableGroups(realm, term, 1, Constants.MAX_GROUP_LIST_SIZE);\n+    }\n+\n     @Override\n     protected void addDynamicRealmsContainer() {\n         dynrealmsContainer = new WebMarkupContainer(\"dynrealmsContainer\");\n@@ -123,53 +127,49 @@ public String getIdValue(final MembershipTO object, final int index) {\n \n                         @Override\n                         public MembershipTO getObject(\n-                            final String id, final IModel<? extends List<? extends MembershipTO>> choices) {\n+                                final String id, final IModel<? extends List<? extends MembershipTO>> choices) {\n \n                             return choices.getObject().stream().\n-                                filter(object -> id.equalsIgnoreCase(object.getGroupName())).findAny().orElse(null);\n+                                    filter(object -> id.equalsIgnoreCase(object.getGroupName())).findAny().orElse(null);\n                         }\n                     });\n \n-            groupsContainer.add(builder.setAllowOrder(true).withFilter(\"*\").build(\"groups\",\n-                new ListModel<>() {\n+            groupsContainer.add(builder.setAllowOrder(true).withFilter(\"*\").build(\"groups\", new ListModel<>() {\n \n-                    private static final long serialVersionUID = -2583290457773357445L;\n+                private static final long serialVersionUID = -2583290457773357445L;\n \n-                    @Override\n-                    public List<MembershipTO> getObject() {\n-                        return Groups.this.groupsModel.getMemberships();\n-                    }\n-\n-                }, new AjaxPalettePanel.Builder.Query<>() {\n+                @Override\n+                public List<MembershipTO> getObject() {\n+                    return Groups.this.groupsModel.getMemberships();\n+                }\n+            }, new AjaxPalettePanel.Builder.Query<>() {\n \n-                    private static final long serialVersionUID = -7223078772249308813L;\n+                private static final long serialVersionUID = -7223078772249308813L;\n \n-                    @Override\n-                    public List<MembershipTO> execute(final String filter) {\n-                        return StringUtils.isEmpty(filter)\n+                @Override\n+                public List<MembershipTO> execute(final String filter) {\n+                    return StringUtils.isEmpty(filter)\n                             ? List.of()\n                             : (\"*\".equals(filter)\n-                            ? groupsModel.getObject()\n-                            : SyncopeRestClient.searchAssignableGroups(\n-                            anyTO.getRealm(), filter, 1, Constants.MAX_GROUP_LIST_SIZE)).stream().\n-                            map(group -> new MembershipTO.Builder(group.getKey()).\n-                                groupName(group.getName()).build()).\n-                            collect(Collectors.toList());\n-                    }\n-                }).hideLabel().setOutputMarkupId(true));\n+                                    ? groupsModel.getObject()\n+                                    : searchAssignable(anyTO.getRealm(), filter)).stream().\n+                                    map(group -> new MembershipTO.Builder(group.getKey()).\n+                                    groupName(group.getName()).build()).\n+                                    collect(Collectors.toList());\n+                }\n+            }).hideLabel().setOutputMarkupId(true));\n \n             dyngroupsContainer.add(new AjaxPalettePanel.Builder<String>().setAllowOrder(true).build(\"dyngroups\",\n-                new ListModel<>() {\n-\n-                    private static final long serialVersionUID = -2583290457773357445L;\n+                    new ListModel<>() {\n \n-                    @Override\n-                    public List<String> getObject() {\n-                        return Groups.this.groupsModel.getDynMemberships();\n-                    }\n+                private static final long serialVersionUID = -2583290457773357445L;\n \n-                }, new ListModel<>(groupsModel.getObject().stream().\n-                        map(GroupTO::getName).collect(Collectors.toList()))).\n+                @Override\n+                public List<String> getObject() {\n+                    return Groups.this.groupsModel.getDynMemberships();\n+                }\n+            }, new ListModel<>(groupsModel.getObject().stream().\n+                            map(GroupTO::getName).collect(Collectors.toList()))).\n                     hideLabel().setEnabled(false).setOutputMarkupId(true));\n         }\n     }\n@@ -214,11 +214,7 @@ public List<GroupTO> getObject() {\n          */\n         @Override\n         protected void reloadObject() {\n-            groupsObj = SyncopeRestClient.searchAssignableGroups(\n-                    realmObj,\n-                    null,\n-                    1,\n-                    Constants.MAX_GROUP_LIST_SIZE);\n+            groupsObj = searchAssignable(realmObj, null);\n         }\n \n         @Override"},{"sha":"91b84b4e38da2e44b30069cfa37b52592ca8ee26","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java","status":"modified","additions":68,"deletions":55,"changes":123,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/382738527a32c01907f01982097c996dd672f14d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/382738527a32c01907f01982097c996dd672f14d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java?ref=382738527a32c01907f01982097c996dd672f14d","patch":"@@ -82,9 +82,11 @@ public class Relationships extends WizardStep implements ICondition {\n \n     private static final long serialVersionUID = 855618618337931784L;\n \n-    private final PageReference pageRef;\n+    protected final AnyTO anyTO;\n \n-    private final AnyTO anyTO;\n+    protected final Specification specification;\n+\n+    protected final PageReference pageRef;\n \n     public Relationships(final AnyWrapper<?> modelObject, final PageReference pageRef) {\n         super();\n@@ -101,6 +103,7 @@ public Relationships(final AnyWrapper<?> modelObject, final PageReference pageRe\n         }\n \n         this.anyTO = modelObject.getInnerObject();\n+        this.specification = new Specification();\n         this.pageRef = pageRef;\n \n         // ------------------------\n@@ -115,11 +118,11 @@ public Component getHeader(final String id, final Component parent, final IWizar\n         return super.getHeader(id, parent, wizard).setVisible(false);\n     }\n \n-    private Fragment getViewFragment() {\n-        final Map<String, List<RelationshipTO>> relationships = new HashMap<>();\n+    protected Fragment getViewFragment() {\n+        Map<String, List<RelationshipTO>> relationships = new HashMap<>();\n         addRelationship(relationships, getCurrentRelationships().toArray(RelationshipTO[]::new));\n \n-        final Fragment viewFragment = new Fragment(\"relationships\", \"viewFragment\", this);\n+        Fragment viewFragment = new Fragment(\"relationships\", \"viewFragment\", this);\n         viewFragment.setOutputMarkupId(true);\n \n         viewFragment.add(new Accordion(\"relationships\", relationships.keySet().stream().\n@@ -158,7 +161,7 @@ public void renderHead(final IHeaderResponse response) {\n             }\n         });\n \n-        final ActionsPanel<RelationshipTO> panel = new ActionsPanel<>(\"actions\", null);\n+        ActionsPanel<RelationshipTO> panel = new ActionsPanel<>(\"actions\", null);\n         viewFragment.add(panel);\n \n         panel.add(new ActionLink<>() {\n@@ -169,26 +172,26 @@ public void renderHead(final IHeaderResponse response) {\n             public void onClick(final AjaxRequestTarget target, final RelationshipTO ignore) {\n                 Fragment addFragment = new Fragment(\"relationships\", \"addFragment\", Relationships.this);\n                 addOrReplace(addFragment);\n-                addFragment.add(new Specification().setRenderBodyOnly(true));\n+                addFragment.add(specification.setRenderBodyOnly(true));\n                 target.add(Relationships.this);\n             }\n         }, ActionType.CREATE, AnyEntitlement.UPDATE.getFor(anyTO.getType())).hideLabel();\n \n         return viewFragment;\n     }\n \n-    private List<RelationshipTO> getCurrentRelationships() {\n+    protected List<RelationshipTO> getCurrentRelationships() {\n         return anyTO instanceof GroupableRelatableTO\n                 ? GroupableRelatableTO.class.cast(anyTO).getRelationships()\n                 : List.of();\n     }\n \n-    private static void addRelationship(\n+    protected void addRelationship(\n             final Map<String, List<RelationshipTO>> relationships,\n             final RelationshipTO... rels) {\n \n         for (RelationshipTO relationship : rels) {\n-            final List<RelationshipTO> listrels;\n+            List<RelationshipTO> listrels;\n             if (relationships.containsKey(relationship.getType())) {\n                 listrels = relationships.get(relationship.getType());\n             } else {\n@@ -199,17 +202,18 @@ private static void addRelationship(\n         }\n     }\n \n-    private void addNewRelationships(final RelationshipTO... rels) {\n+    protected void addNewRelationships(final RelationshipTO... rels) {\n         getCurrentRelationships().addAll(List.of(rels));\n     }\n \n-    private void removeRelationships(\n+    protected void removeRelationships(\n             final Map<String, List<RelationshipTO>> relationships, final RelationshipTO... rels) {\n-        final List<RelationshipTO> currentRels = getCurrentRelationships();\n+\n+        List<RelationshipTO> currentRels = getCurrentRelationships();\n         for (RelationshipTO relationship : rels) {\n             currentRels.remove(relationship);\n             if (relationships.containsKey(relationship.getType())) {\n-                final List<RelationshipTO> rellist = relationships.get(relationship.getType());\n+                List<RelationshipTO> rellist = relationships.get(relationship.getType());\n                 rellist.remove(relationship);\n                 if (rellist.isEmpty()) {\n                     relationships.remove(relationship.getType());\n@@ -228,30 +232,38 @@ public class Specification extends Panel {\n \n         private static final long serialVersionUID = 6199050589175839467L;\n \n-        private final RelationshipTO rel;\n+        protected final RelationshipTO rel;\n+\n+        protected final AjaxDropDownChoicePanel<String> type;\n+\n+        protected final AjaxDropDownChoicePanel<AnyTypeTO> otherType;\n+\n+        protected final WebMarkupContainer container;\n+\n+        protected final Fragment emptyFragment;\n \n-        private AnyObjectSearchPanel anyObjectSearchPanel;\n+        protected final Fragment fragment;\n \n-        private WizardMgtPanel<AnyWrapper<AnyObjectTO>> anyObjectDirectoryPanel;\n+        protected AnyObjectSearchPanel anyObjectSearchPanel;\n+\n+        protected WizardMgtPanel<AnyWrapper<AnyObjectTO>> anyObjectDirectoryPanel;\n \n         public Specification() {\n             super(\"specification\");\n             rel = new RelationshipTO();\n \n-            final List<String> availableRels = RelationshipTypeRestClient.list().stream().\n+            List<String> availableRels = RelationshipTypeRestClient.list().stream().\n                     map(EntityTO::getKey).collect(Collectors.toList());\n \n-            final AjaxDropDownChoicePanel<String> type = new AjaxDropDownChoicePanel<>(\n-                    \"type\", \"type\", new PropertyModel<>(rel, \"type\"));\n+            type = new AjaxDropDownChoicePanel<>(\"type\", \"type\", new PropertyModel<>(rel, \"type\"));\n             type.setChoices(availableRels);\n-            add(type.setRenderBodyOnly(true));\n+            add(type.setOutputMarkupId(true).setOutputMarkupPlaceholderTag(true).setRenderBodyOnly(true));\n \n-            final List<AnyTypeTO> availableTypes = AnyTypeRestClient.listAnyTypes().stream().\n+            List<AnyTypeTO> availableTypes = AnyTypeRestClient.listAnyTypes().stream().\n                     filter(anyType -> anyType.getKind() != AnyTypeKind.GROUP\n                     && anyType.getKind() != AnyTypeKind.USER).collect(Collectors.toList());\n \n-            final AjaxDropDownChoicePanel<AnyTypeTO> otherType = new AjaxDropDownChoicePanel<>(\n-                    \"otherType\", \"otherType\", new PropertyModel<>(rel, \"otherType\") {\n+            otherType = new AjaxDropDownChoicePanel<>(\"otherType\", \"otherType\", new PropertyModel<>(rel, \"otherType\") {\n \n                 private static final long serialVersionUID = -5861057041758169508L;\n \n@@ -288,27 +300,27 @@ public String getIdValue(final AnyTypeTO object, final int index) {\n                 @Override\n                 public AnyTypeTO getObject(final String id, final IModel<? extends List<? extends AnyTypeTO>> choices) {\n                     return choices.getObject().stream().\n-                        filter(anyTypeTO -> id.equals(anyTypeTO.getKey())).findAny().orElse(null);\n+                            filter(anyTypeTO -> id.equals(anyTypeTO.getKey())).findAny().orElse(null);\n                 }\n             });\n             // enable \"otherType\" dropdown only if \"type\" option is selected - SYNCOPE-1140\n             otherType.setEnabled(false);\n-            add(otherType);\n+            add(otherType.setOutputMarkupId(true).setOutputMarkupPlaceholderTag(true));\n \n-            final WebMarkupContainer container = new WebMarkupContainer(\"searchPanelContainer\");\n-            container.setOutputMarkupId(true);\n-            add(container);\n+            container = new WebMarkupContainer(\"searchPanelContainer\");\n+            add(container.setOutputMarkupId(true));\n \n-            Fragment emptyFragment = new Fragment(\"searchPanel\", \"emptyFragment\", this);\n+            emptyFragment = new Fragment(\"searchPanel\", \"emptyFragment\", this);\n             container.add(emptyFragment.setRenderBodyOnly(true));\n \n+            fragment = new Fragment(\"searchPanel\", \"searchFragment\", Specification.this);\n+\n             type.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n                 private static final long serialVersionUID = -1107858522700306810L;\n \n                 @Override\n                 protected void onUpdate(final AjaxRequestTarget target) {\n-                    Fragment emptyFragment = new Fragment(\"searchPanel\", \"emptyFragment\", Specification.this);\n                     container.addOrReplace(emptyFragment.setRenderBodyOnly(true));\n                     otherType.setModelObject(null);\n                     // enable \"otherType\" dropdown only if \"type\" option is selected - SYNCOPE-1140\n@@ -324,46 +336,47 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n                 @Override\n                 protected void onUpdate(final AjaxRequestTarget target) {\n-                    final AnyTypeTO anyType = otherType.getModelObject();\n+                    AnyTypeTO anyType = otherType.getModelObject();\n                     if (anyType == null) {\n-                        Fragment emptyFragment = new Fragment(\"searchPanel\", \"emptyFragment\", Specification.this);\n                         container.addOrReplace(emptyFragment.setRenderBodyOnly(true));\n                     } else {\n-                        final Fragment fragment = new Fragment(\"searchPanel\", \"searchFragment\", Specification.this);\n+                        setupFragment(anyType);\n                         container.addOrReplace(fragment.setRenderBodyOnly(true));\n-\n-                        anyObjectSearchPanel = new AnyObjectSearchPanel.Builder(\n-                                anyType.getKey(),\n-                                new ListModel<>(new ArrayList<>())).\n-                                enableSearch(Specification.this).\n-                                build(\"searchPanel\");\n-                        fragment.add(anyObjectSearchPanel.setRenderBodyOnly(true));\n-\n-                        anyObjectDirectoryPanel = new AnyObjectSelectionDirectoryPanel.Builder(\n-                                AnyTypeClassRestClient.list(anyType.getClasses()),\n-                                anyType.getKey(),\n-                                pageRef).\n-                                setFiql(SyncopeClient.getAnyObjectSearchConditionBuilder(anyType.getKey()).\n-                                        is(Constants.KEY_FIELD_NAME).notNullValue().query()).\n-                                setWizardInModal(true).build(\"searchResultPanel\");\n-                        fragment.add(anyObjectDirectoryPanel.setRenderBodyOnly(true));\n                     }\n                     target.add(container);\n                 }\n             });\n         }\n \n+        protected void setupFragment(final AnyTypeTO anyType) {\n+            anyObjectSearchPanel = new AnyObjectSearchPanel.Builder(\n+                    anyType.getKey(),\n+                    new ListModel<>(new ArrayList<>())).\n+                    enableSearch(Specification.this).\n+                    build(\"searchPanel\");\n+            fragment.addOrReplace(anyObjectSearchPanel.setRenderBodyOnly(true));\n+\n+            anyObjectDirectoryPanel = new AnyObjectSelectionDirectoryPanel.Builder(\n+                    AnyTypeClassRestClient.list(anyType.getClasses()),\n+                    anyType.getKey(),\n+                    pageRef).\n+                    setFiql(SyncopeClient.getAnyObjectSearchConditionBuilder(anyType.getKey()).\n+                            is(Constants.KEY_FIELD_NAME).notNullValue().query()).\n+                    setWizardInModal(true).build(\"searchResultPanel\");\n+            fragment.addOrReplace(anyObjectDirectoryPanel.setRenderBodyOnly(true));\n+        }\n+\n         @Override\n         public void onEvent(final IEvent<?> event) {\n             if (event.getPayload() instanceof SearchClausePanel.SearchEvent) {\n-                final AjaxRequestTarget target = SearchClausePanel.SearchEvent.class.cast(event.getPayload()).\n-                        getTarget();\n-                final String fiql = SearchUtils.buildFIQL(anyObjectSearchPanel.getModel().getObject(),\n+                AjaxRequestTarget target =\n+                        SearchClausePanel.SearchEvent.class.cast(event.getPayload()).getTarget();\n+                String fiql = SearchUtils.buildFIQL(anyObjectSearchPanel.getModel().getObject(),\n                         SyncopeClient.getAnyObjectSearchConditionBuilder(anyObjectSearchPanel.getBackObjectType()));\n                 AnyDirectoryPanel.class.cast(Specification.this.anyObjectDirectoryPanel).search(fiql, target);\n             } else if (event.getPayload() instanceof AnySelectionDirectoryPanel.ItemSelection) {\n-                final AjaxRequestTarget target = AnySelectionDirectoryPanel.ItemSelection.class.cast(event.\n-                        getPayload()).getTarget();\n+                AjaxRequestTarget target =\n+                        AnySelectionDirectoryPanel.ItemSelection.class.cast(event.getPayload()).getTarget();\n \n                 AnyTO right = AnySelectionDirectoryPanel.ItemSelection.class.cast(event.getPayload()).getSelection();\n                 rel.setOtherEndKey(right.getKey());"},{"sha":"b250636658bacf8b9c592c2bde6dffd471b35fd7","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/RealmChoicePanel.html","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/382738527a32c01907f01982097c996dd672f14d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/382738527a32c01907f01982097c996dd672f14d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.html?ref=382738527a32c01907f01982097c996dd672f14d","patch":"@@ -20,7 +20,11 @@\n   <wicket:panel>\n     <div wicket:id=\"container\" class=\"realm-header\">\n       <div class=\"realm-label\">\n-        <label wicket:id=\"realmDisplayKey\"/>: <label wicket:id=\"realmDisplayValue\"/>\n+        <nav aria-label=\"breadcrumb\">\n+          <ol class=\"breadcrumb\">\n+            <li class=\"breadcrumb-item\" wicket:id=\"breadcrumb\"><a wicket:id=\"bcitem\"/></li>\n+          </ol>\n+        </nav>\n       </div>\n       <span wicket:id=\"realmsFragment\"></span>\n "},{"sha":"8f2b63b0aa874c510ff3797996a29f73aab57a29","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/RealmsITCase.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/382738527a32c01907f01982097c996dd672f14d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRealmsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/382738527a32c01907f01982097c996dd672f14d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRealmsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRealmsITCase.java?ref=382738527a32c01907f01982097c996dd672f14d","patch":"@@ -18,7 +18,9 @@\n  */\n package org.apache.syncope.fit.console;\n \n+import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import org.apache.syncope.client.ui.commons.Constants;\n@@ -73,7 +75,8 @@ public void create() {\n                 \"body:content:realmChoicePanel:container:realmsFragment:realms:dropdown-menu:buttons:5:button\",\n                 Constants.ON_CLICK);\n \n-        TESTER.assertLabel(\"body:content:realmChoicePanel:container:realmDisplayValue\", \"/testRealm\");\n+        assertTrue(TESTER.getLastResponseAsString().contains(\">/</a>\"));\n+        assertTrue(TESTER.getLastResponseAsString().contains(\">testRealm</a>\"));\n \n         TESTER.getRequest().addParameter(\"confirm\", \"true\");\n         TESTER.clickLink(\n@@ -86,7 +89,8 @@ public void create() {\n                 \"body:content:body:container:content:tabbedPanel:panel:container:policies:1:field-label\",\n                 \"Account Policy\");\n \n-        TESTER.assertLabel(\"body:content:realmChoicePanel:container:realmDisplayValue\", \"/\");\n+        assertTrue(TESTER.getLastResponseAsString().contains(\">/</a>\"));\n+        assertFalse(TESTER.getLastResponseAsString().contains(\">testRealm</a>\"));\n     }\n \n     @Test\n@@ -116,7 +120,8 @@ public void addUserTemplate() {\n                 \"body:content:realmChoicePanel:container:realmsFragment:realms:dropdown-menu:buttons:4:button\",\n                 Constants.ON_CLICK);\n \n-        TESTER.assertLabel(\"body:content:realmChoicePanel:container:realmDisplayValue\", \"/odd\");\n+        assertTrue(TESTER.getLastResponseAsString().contains(\">/</a>\"));\n+        assertTrue(TESTER.getLastResponseAsString().contains(\">odd</a>\"));\n \n         TESTER.clickLink(\n                 \"body:content:body:container:content:tabbedPanel:panel:actions:actions:actionRepeater:2:action:action\");\n@@ -136,7 +141,8 @@ public void addUserTemplate() {\n         assertSuccessMessage();\n         TESTER.cleanupFeedbackMessages();\n \n-        TESTER.assertLabel(\"body:content:realmChoicePanel:container:realmDisplayValue\", \"/odd\");\n+        assertTrue(TESTER.getLastResponseAsString().contains(\">/</a>\"));\n+        assertTrue(TESTER.getLastResponseAsString().contains(\">odd</a>\"));\n \n         TESTER.clickLink(\n                 \"body:content:body:container:content:tabbedPanel:panel:actions:actions:actionRepeater:2:action:action\");"},{"sha":"6ced0aaef9d0b6eaf5e3f315f89792c8de592a56","filename":"src/main/asciidoc/reference-guide/usage/customization.adoc","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/382738527a32c01907f01982097c996dd672f14d/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fcustomization.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/382738527a32c01907f01982097c996dd672f14d/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fcustomization.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fcustomization.adoc?ref=382738527a32c01907f01982097c996dd672f14d","patch":"@@ -120,11 +120,11 @@ At this point your favourite IDE can be attached to the port `8000`.\n \n ===== Override behavior\n As a rule of thumb, any file of the local project will take precedence over a file with the same name in the same\n-directory of the standard Apache Syncope release.\n+package directory of the standard Apache Syncope release.\n \n For example, if you place\n \n- core/spring/src/main/java/org/apache/syncope/core/spring/security/UsernamePasswordAuthenticationProvider.java\n+ core/src/main/java/org/apache/syncope/core/spring/security/UsernamePasswordAuthenticationProvider.java\n \n in the local project, this file will be picked up instead of\n ifeval::[\"{snapshotOrRelease}\" == \"release\"]"}]}