{"sha":"52dfedcdccdf1dee848bb906fa32e2bac47e07df","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjUyZGZlZGNkY2NkZjFkZWU4NDhiYjkwNmZhMzJlMmJhYzQ3ZTA3ZGY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-05-14T12:28:29Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-05-14T12:28:29Z"},"message":"[SYNCOPE-119][SYNCOPE-667] Adjusting master test case to match 1_2_X - and fixing something in the meanwhile","tree":{"sha":"c9ee5d0a36a621a49be193e290d2b4671428a34e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c9ee5d0a36a621a49be193e290d2b4671428a34e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/52dfedcdccdf1dee848bb906fa32e2bac47e07df","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/52dfedcdccdf1dee848bb906fa32e2bac47e07df","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/52dfedcdccdf1dee848bb906fa32e2bac47e07df","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/52dfedcdccdf1dee848bb906fa32e2bac47e07df/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"5495e809dd130ca9f69afe78758a61ee5a9e751e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5495e809dd130ca9f69afe78758a61ee5a9e751e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5495e809dd130ca9f69afe78758a61ee5a9e751e"}],"stats":{"total":76,"additions":47,"deletions":29},"files":[{"sha":"4dcb32484475315a9c70e65849b5c69a1d3b2b2e","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractSubjectLogic.java","status":"modified","additions":27,"deletions":13,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52dfedcdccdf1dee848bb906fa32e2bac47e07df/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractSubjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52dfedcdccdf1dee848bb906fa32e2bac47e07df/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractSubjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractSubjectLogic.java?ref=52dfedcdccdf1dee848bb906fa32e2bac47e07df","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.logic;\n \n import java.util.Collection;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -32,23 +33,36 @@\n public abstract class AbstractSubjectLogic<T extends AbstractSubjectTO, V extends AbstractSubjectMod>\n         extends AbstractResourceAssociator<T> {\n \n+    private static class StartsWithPredicate implements Predicate<String> {\n+\n+        private final Collection<String> targets;\n+\n+        public StartsWithPredicate(final Collection<String> targets) {\n+            this.targets = targets;\n+        }\n+\n+        @Override\n+        public boolean evaluate(final String realm) {\n+            return CollectionUtils.exists(targets, new Predicate<String>() {\n+\n+                @Override\n+                public boolean evaluate(final String target) {\n+                    return realm.startsWith(target);\n+                }\n+            });\n+        }\n+\n+    }\n+\n     protected Set<String> getEffectiveRealms(\n             final Set<String> allowedRealms, final Collection<String> requestedRealms) {\n \n-        Set<String> effective = RealmUtils.normalize(requestedRealms);\n-        CollectionUtils.filter(effective, new Predicate<String>() {\n-\n-            @Override\n-            public boolean evaluate(final String requestedRealm) {\n-                return CollectionUtils.exists(allowedRealms, new Predicate<String>() {\n+        final Set<String> allowed = RealmUtils.normalize(allowedRealms);\n+        final Set<String> requested = RealmUtils.normalize(requestedRealms);\n \n-                    @Override\n-                    public boolean evaluate(final String allowedRealm) {\n-                        return requestedRealm.startsWith(allowedRealm);\n-                    }\n-                });\n-            }\n-        });\n+        Set<String> effective = new HashSet<>();\n+        CollectionUtils.select(requested, new StartsWithPredicate(allowed), effective);\n+        CollectionUtils.select(allowed, new StartsWithPredicate(requested), effective);\n \n         return effective;\n     }"},{"sha":"abad867eb6ada5ae342a5d338019a1623e327940","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52dfedcdccdf1dee848bb906fa32e2bac47e07df/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52dfedcdccdf1dee848bb906fa32e2bac47e07df/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=52dfedcdccdf1dee848bb906fa32e2bac47e07df","patch":"@@ -166,7 +166,7 @@ public int searchCount(final SearchCond searchCondition, final List<String> real\n     public List<UserTO> search(final SearchCond searchCondition, final int page, final int size,\n             final List<OrderByClause> orderBy, final List<String> realms) {\n \n-        final List<User> matchingUsers = searchDAO.search(\n+        List<User> matchingUsers = searchDAO.search(\n                 getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.USER_SEARCH), realms),\n                 searchCondition, page, size, orderBy, SubjectType.USER);\n         return CollectionUtils.collect(matchingUsers, new Transformer<User, UserTO>() {"},{"sha":"df768351ea8819decd412d302d14a662d0432c09","filename":"core/persistence-jpa/src/test/resources/content.xml","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52dfedcdccdf1dee848bb906fa32e2bac47e07df/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52dfedcdccdf1dee848bb906fa32e2bac47e07df/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=52dfedcdccdf1dee848bb906fa32e2bac47e07df","patch":"@@ -138,16 +138,20 @@ under the License.\n   <SyncopeRole_entitlements entitlement=\"WORKFLOW_FORM_CLAIM\" role_id=\"3\"/>\n   <SyncopeRole_Realm role_id=\"3\" realm_id=\"2\"/>\n   \n+  <SyncopeRole id=\"4\" name=\"Search for /even/two\"/>\n+  <SyncopeRole_entitlements entitlement=\"USER_READ\" role_id=\"4\"/>\n+  <SyncopeRole_entitlements entitlement=\"USER_SEARCH\" role_id=\"4\"/>\n+  <SyncopeRole_Realm role_id=\"4\" realm_id=\"4\"/>\n+\n   <SyncopeUser id=\"1\" workflowId=\"4\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n-               realm_id=\"1\"\n+               realm_id=\"3\"\n                username=\"rossini\" creator=\"admin\" lastModifier=\"admin\"\n                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\" suspended=\"0\"/>\n   <SyncopeUser_SyncopeRole user_id=\"1\" role_id=\"3\"/>\n   <SyncopeUser id=\"2\" workflowId=\"6\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n                realm_id=\"1\"\n                username=\"verdi\" creator=\"admin\" lastModifier=\"admin\"\n                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\" suspended=\"0\"/>\n-  <SyncopeUser_SyncopeRole user_id=\"2\" role_id=\"1\"/>\n   <SyncopeUser id=\"3\" workflowId=\"8\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n                realm_id=\"1\"\n                username=\"vivaldi\" creator=\"admin\" lastModifier=\"admin\"\n@@ -156,11 +160,13 @@ under the License.\n                realm_id=\"1\"\n                username=\"bellini\" creator=\"admin\" lastModifier=\"admin\"\n                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\" suspended=\"0\"/>\n+  <SyncopeUser_SyncopeRole user_id=\"4\" role_id=\"1\"/>\n   <SyncopeUser_SyncopeRole user_id=\"4\" role_id=\"2\"/>\n   <SyncopeUser id=\"5\" workflowId=\"12\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n                realm_id=\"1\"\n                username=\"puccini\" creator=\"admin\" lastModifier=\"admin\" \n                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\" suspended=\"0\"/>\n+  <SyncopeUser_SyncopeRole user_id=\"5\" role_id=\"4\"/>\n   \n   <SyncopeGroup id=\"1\" name=\"root\"\n                 realm_id=\"1\""},{"sha":"953d4371e9f27c7ac4df6c57eec6f782d8e26264","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AuthenticationITCase.java","status":"modified","additions":10,"deletions":12,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52dfedcdccdf1dee848bb906fa32e2bac47e07df/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52dfedcdccdf1dee848bb906fa32e2bac47e07df/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java?ref=52dfedcdccdf1dee848bb906fa32e2bac47e07df","patch":"@@ -105,10 +105,10 @@ public void testReadEntitlements() {\n         assertEquals(ADMIN_UNAME, self.getValue().getUsername());\n \n         // 4. as user\n-        self = clientFactory.create(\"verdi\", ADMIN_PWD).self();\n+        self = clientFactory.create(\"bellini\", ADMIN_PWD).self();\n         assertFalse(self.getKey().isEmpty());\n         assertFalse(self.getKey().keySet().contains(Entitlement.ANONYMOUS));\n-        assertEquals(\"verdi\", self.getValue().getUsername());\n+        assertEquals(\"bellini\", self.getValue().getUsername());\n     }\n \n     @Test\n@@ -176,23 +176,21 @@ public void testUserRead() {\n         UserTO readUserTO = userService2.read(1L);\n         assertNotNull(readUserTO);\n \n-        UserService userService3 = clientFactory.create(\"verdi\", ADMIN_PWD).getService(UserService.class);\n+        UserService userService3 = clientFactory.create(\"puccini\", ADMIN_PWD).getService(UserService.class);\n \n-        SyncopeClientException exception = null;\n         try {\n-            userService3.read(1L);\n+            userService3.read(3L);\n             fail();\n         } catch (SyncopeClientException e) {\n-            exception = e;\n+            assertNotNull(e);\n+            assertEquals(ClientExceptionType.Unauthorized, e.getType());\n         }\n-        assertNotNull(exception);\n-        assertEquals(ClientExceptionType.Unauthorized, exception.getType());\n     }\n \n     @Test\n     public void testUserSearch() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"testusersearch@test.org\");\n-        userTO.getRoles().add(2L);\n+        userTO.getRoles().add(1L);\n \n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n@@ -214,10 +212,10 @@ public Long transform(final UserTO input) {\n                     }\n                 }, new HashSet<Long>());\n         assertTrue(matchedUserKeys.contains(1L));\n-        assertTrue(matchedUserKeys.contains(2L));\n-        assertTrue(matchedUserKeys.contains(5L));\n+        assertFalse(matchedUserKeys.contains(2L));\n+        assertFalse(matchedUserKeys.contains(5L));\n \n-        UserService userService3 = clientFactory.create(\"verdi\", \"password\").getService(UserService.class);\n+        UserService userService3 = clientFactory.create(\"puccini\", ADMIN_PWD).getService(UserService.class);\n \n         matchedUsers = userService3.search(\n                 SyncopeClient.getSubjectSearchQueryBuilder().realm(\"/even/two\")."},{"sha":"24329179eca8bfc1eea9d096966ca84b50b783e8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserWorkflowITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52dfedcdccdf1dee848bb906fa32e2bac47e07df/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserWorkflowITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52dfedcdccdf1dee848bb906fa32e2bac47e07df/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserWorkflowITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserWorkflowITCase.java?ref=52dfedcdccdf1dee848bb906fa32e2bac47e07df","patch":"@@ -85,7 +85,7 @@ public void createWithReject() {\n             assertEquals(ClientExceptionType.Workflow, e.getType());\n         }\n \n-        // 4. claim task from bellini, in group 7\n+        // 4. claim task from bellini, in role 2\n         UserWorkflowService userService3 = clientFactory.create(\n                 \"bellini\", ADMIN_PWD).getService(UserWorkflowService.class);\n "}]}