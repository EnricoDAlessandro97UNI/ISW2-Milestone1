{"sha":"64a650a4747c43098b64c58379b6133735d3faa6","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY0YTY1MGE0NzQ3YzQzMDk4YjY0YzU4Mzc5YjYxMzM3MzVkM2ZhYTY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-24T14:52:02Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-24T14:57:33Z"},"message":"Minor changes","tree":{"sha":"af1d9097aed960d93937493241d744aa2e30e1e0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/af1d9097aed960d93937493241d744aa2e30e1e0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/64a650a4747c43098b64c58379b6133735d3faa6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/64a650a4747c43098b64c58379b6133735d3faa6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/64a650a4747c43098b64c58379b6133735d3faa6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/64a650a4747c43098b64c58379b6133735d3faa6/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"e8f2c12bc2d1a3253bf9437e0f8eac5c8c9e853d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e8f2c12bc2d1a3253bf9437e0f8eac5c8c9e853d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e8f2c12bc2d1a3253bf9437e0f8eac5c8c9e853d"}],"stats":{"total":48,"additions":38,"deletions":10},"files":[{"sha":"32bd4c0efc5d8e51c5d5bdfa96696088aa2753ab","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64a650a4747c43098b64c58379b6133735d3faa6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64a650a4747c43098b64c58379b6133735d3faa6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java?ref=64a650a4747c43098b64c58379b6133735d3faa6","patch":"@@ -62,7 +62,6 @@\n     @NotNull\n     private String name;\n \n-    @NotNull\n     @ManyToOne(fetch = FetchType.EAGER, optional = false)\n     private JPAAnyType type;\n "},{"sha":"78811e57b02c68690a3cc743d9dd4588e6245346","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64a650a4747c43098b64c58379b6133735d3faa6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64a650a4747c43098b64c58379b6133735d3faa6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=64a650a4747c43098b64c58379b6133735d3faa6","patch":"@@ -158,8 +158,9 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n         AnyUtils anyUtils = anyUtilsFactory.getInstance(AnyTypeKind.ANY_OBJECT);\n         if (anyObject.getRealm() != null) {\n             // relationships\n-            Collection<String> assignableAnyObjects =\n-                    searchDAO.searchAssignable(anyObject.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT).stream().\n+            Collection<String> assignableAnyObjects = anyObjectTO.getRelationships().isEmpty()\n+                    ? Collections.<String>emptyList()\n+                    : searchDAO.searchAssignable(anyObject.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT).stream().\n                             map(a -> a.getKey()).collect(Collectors.toList());\n \n             anyObjectTO.getRelationships().forEach(relationshipTO -> {\n@@ -200,8 +201,9 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n             });\n \n             // memberships\n-            Collection<String> assignableGroups =\n-                    searchDAO.searchAssignable(anyObject.getRealm().getFullPath(), AnyTypeKind.GROUP).stream().\n+            Collection<String> assignableGroups = anyObjectTO.getMemberships().isEmpty()\n+                    ? Collections.<String>emptyList()\n+                    : searchDAO.searchAssignable(anyObject.getRealm().getFullPath(), AnyTypeKind.GROUP).stream().\n                             map(g -> g.getKey()).collect(Collectors.toList());\n \n             anyObjectTO.getMemberships().forEach(membershipTO -> {"},{"sha":"9950dd4bddac0299714cc8e5cb438aff4347d7bf","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64a650a4747c43098b64c58379b6133735d3faa6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64a650a4747c43098b64c58379b6133735d3faa6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=64a650a4747c43098b64c58379b6133735d3faa6","patch":"@@ -203,8 +203,9 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n         AnyUtils anyUtils = anyUtilsFactory.getInstance(AnyTypeKind.USER);\n         if (user.getRealm() != null) {\n             // relationships\n-            Collection<String> assignableAnyObjects =\n-                    searchDAO.searchAssignable(user.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT).stream().\n+            Collection<String> assignableAnyObjects = userTO.getRelationships().isEmpty()\n+                    ? Collections.<String>emptyList()\n+                    : searchDAO.searchAssignable(user.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT).stream().\n                             map(a -> a.getKey()).collect(Collectors.toList());\n \n             userTO.getRelationships().forEach(relationshipTO -> {\n@@ -216,7 +217,6 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n                     if (relationshipType == null) {\n                         LOG.debug(\"Ignoring invalid relationship type {}\", relationshipTO.getType());\n                     } else {\n-\n                         URelationship relationship = entityFactory.newEntity(URelationship.class);\n                         relationship.setType(relationshipType);\n                         relationship.setRightEnd(otherEnd);\n@@ -235,8 +235,9 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n             });\n \n             // memberships\n-            Collection<String> assignableGroups =\n-                    searchDAO.searchAssignable(user.getRealm().getFullPath(), AnyTypeKind.GROUP).stream().\n+            Collection<String> assignableGroups = userTO.getMemberships().isEmpty()\n+                    ? Collections.<String>emptyList()\n+                    : searchDAO.searchAssignable(user.getRealm().getFullPath(), AnyTypeKind.GROUP).stream().\n                             map(g -> g.getKey()).collect(Collectors.toList());\n \n             userTO.getMemberships().forEach(membershipTO -> {"},{"sha":"b4ad656dbf2fd71473484271b43c02fc8599e9ba","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserWorkflowITCase.java","status":"modified","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64a650a4747c43098b64c58379b6133735d3faa6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserWorkflowITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64a650a4747c43098b64c58379b6133735d3faa6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserWorkflowITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserWorkflowITCase.java?ref=64a650a4747c43098b64c58379b6133735d3faa6","patch":"@@ -36,6 +36,7 @@\n import org.apache.syncope.common.lib.patch.MembershipPatch;\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n@@ -221,6 +222,8 @@ public void updateApproval() {\n \n         UserTO created = createUser(UserITCase.getUniqueSampleTO(\"updateApproval@syncope.apache.org\")).getEntity();\n         assertNotNull(created);\n+        assertEquals(\"/\", created.getRealm());\n+        assertEquals(0, created.getMemberships().size());\n \n         UserPatch patch = new UserPatch();\n         patch.setKey(created.getKey());\n@@ -229,6 +232,7 @@ public void updateApproval() {\n         SyncopeClient client = clientFactory.create(created.getUsername(), \"password123\");\n         Response response = client.getService(UserSelfService.class).update(patch);\n         assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+        assertEquals(\"updateApproval\", userService.read(created.getKey()).getStatus());\n \n         forms = userWorkflowService.getForms();\n         assertNotNull(forms);\n@@ -241,6 +245,28 @@ public void updateApproval() {\n         assertNotNull(form.getUserTO());\n         assertNotNull(form.getUserPatch());\n         assertEquals(patch, form.getUserPatch());\n+\n+        // as admin, request for more changes: still pending approval\n+        patch.setRealm(new StringReplacePatchItem.Builder().value(\"/even/two\").build());\n+        response = userService.update(patch);\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+        assertEquals(\"updateApproval\", userService.read(created.getKey()).getStatus());\n+\n+        // the patch is updated in the approval form\n+        form = userWorkflowService.getFormForUser(created.getKey());\n+        assertEquals(patch, form.getUserPatch());\n+\n+        // approve the user\n+        form = userWorkflowService.claimForm(form.getTaskId());\n+        form.getProperty(\"approve\").setValue(Boolean.TRUE.toString());\n+        userWorkflowService.submitForm(form);\n+\n+        // verify that the approved user bears both original and further changes\n+        UserTO approved = userService.read(created.getKey());\n+        assertNotNull(approved);\n+        assertEquals(\"/even/two\", approved.getRealm());\n+        assertEquals(1, approved.getMemberships().size());\n+        assertNotNull(approved.getMembership(\"b1f7c12d-ec83-441f-a50e-1691daaedf3b\"));\n     }\n \n     @Test"}]}