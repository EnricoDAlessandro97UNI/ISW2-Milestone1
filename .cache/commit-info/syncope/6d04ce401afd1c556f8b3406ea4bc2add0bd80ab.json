{"sha":"6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjZkMDRjZTQwMWFmZDFjNTU2ZjhiMzQwNmVhNGJjMmFkZDBiZDgwYWI=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-30T13:30:44Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-30T13:30:44Z"},"message":"Added definition of Resource, connector and attribute mapping\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246277 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2257502393e6541de779aad98c8bfec5a231899e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2257502393e6541de779aad98c8bfec5a231899e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/comments","author":null,"committer":null,"parents":[{"sha":"5a7b8e22987e28d3c7a04638e497971bd50651d9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5a7b8e22987e28d3c7a04638e497971bd50651d9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5a7b8e22987e28d3c7a04638e497971bd50651d9"}],"stats":{"total":1286,"additions":1268,"deletions":18},"files":[{"sha":"006e9cbaeb64f1c491ba3519ac777939569a3b6f","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":31,"deletions":4,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","patch":"@@ -14,12 +14,15 @@\n  */\n package org.syncope.core.persistence.beans;\n \n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n import java.util.Set;\n+import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n import javax.persistence.MappedSuperclass;\n \n @MappedSuperclass\n@@ -29,6 +32,12 @@ public abstract class AbstractAttributable extends AbstractBaseBean {\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private Long id;\n \n+    /**\n+     * Provisioning target resources.\n+     */\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    private Set<Resource> resources;\n+\n     public Long getId() {\n         return id;\n     }\n@@ -43,8 +52,7 @@ public <T extends AbstractAttribute> T getAttribute(String schemaName)\n                 result == null && itor.hasNext();) {\n \n             attribute = (T) itor.next();\n-            if (attribute.getSchema() != null\n-                    && schemaName.equals(attribute.getSchema().getName())) {\n+            if (attribute.getSchema() != null && schemaName.equals(attribute.getSchema().getName())) {\n \n                 result = attribute;\n             }\n@@ -63,8 +71,7 @@ public <T extends AbstractDerivedAttribute> T getDerivedAttribute(\n                 result == null && itor.hasNext();) {\n \n             derivedAttribute = (T) itor.next();\n-            if (derivedAttribute.getDerivedSchema() != null\n-                    && derivedSchemaName.equals(\n+            if (derivedAttribute.getDerivedSchema() != null && derivedSchemaName.equals(\n                     derivedAttribute.getDerivedSchema().getName())) {\n \n                 result = derivedAttribute;\n@@ -91,4 +98,24 @@ public abstract void setAttributes(\n \n     public abstract void setDerivedAttributes(\n             Set<? extends AbstractDerivedAttribute> derivedAttributes);\n+\n+    public Set<Resource> getResources() {\n+        return resources;\n+    }\n+\n+    public void setResources(Set<Resource> resources) {\n+        this.resources = resources;\n+    }\n+\n+    public boolean addResource(Resource resource) {\n+        if (this.resources == null) {\n+            this.resources = new HashSet<Resource>();\n+        }\n+        return this.resources.add(resource);\n+    }\n+\n+    public boolean removeResource(Resource resource) {\n+        if (this.resources == null) return true;\n+        return this.resources.remove(resource);\n+    }\n }"},{"sha":"435aa9459a784657ea3ae49cebc21a3b4f9e73b5","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":21,"deletions":8,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","patch":"@@ -36,16 +36,26 @@ public abstract class AbstractSchema extends AbstractBaseBean {\n \n     @Id\n     private String name;\n+\n     @Column(nullable = false)\n     @Enumerated(STRING)\n     private AttributeType type;\n+\n+    /**\n+     * Specify if the attribute should be stored on the local repository.\n+     */\n     private boolean virtual;\n+\n     private boolean mandatory;\n+\n     private boolean multivalue;\n+\n     @Column(nullable = true)\n     private String conversionPattern;\n+\n     @Column(nullable = true)\n     private String validatorClass;\n+\n     @Transient\n     private AttributeValidator validator;\n \n@@ -111,8 +121,7 @@ public AttributeValidator getValidator()\n                 validator = (AttributeValidator) validatorConstructor.newInstance(this);\n             } catch (Exception e) {\n                 throw new ValidatorInstantiationException(\n-                        \"Could not instantiate validator of type \"\n-                        + getValidatorClass(), e);\n+                        \"Could not instantiate validator of type \" + getValidatorClass(), e);\n             }\n         } else {\n             try {\n@@ -136,19 +145,15 @@ public void setValidatorClass(String validatorClass) {\n \n     public String getConversionPattern() {\n         if (!getType().isConversionPatternNeeded()) {\n-            log.warn(\"Conversion pattern is not needed: \"\n-                    + \"this attribute type is \"\n-                    + getType());\n+            log.warn(\"Conversion pattern is not needed: \" + \"this attribute type is \" + getType());\n         }\n \n         return conversionPattern;\n     }\n \n     public void setConversionPattern(String conversionPattern) {\n         if (!getType().isConversionPatternNeeded()) {\n-            log.warn(\"Conversion pattern will be ignored: \"\n-                    + \"this attribute type is \"\n-                    + getType());\n+            log.warn(\"Conversion pattern will be ignored: \" + \"this attribute type is \" + getType());\n         }\n \n         this.conversionPattern = conversionPattern;\n@@ -202,4 +207,12 @@ public abstract void setAttributes(\n     public abstract Set<? extends AbstractDerivedSchema> getDerivedSchemas();\n \n     public abstract void setDerivedSchemas(Set<? extends AbstractDerivedSchema> derivedSchemas);\n+\n+    public abstract Set<SchemaMapping> getMappings();\n+\n+    public abstract void setMappings(Set<SchemaMapping> mappings);\n+\n+    public abstract boolean addMapping(SchemaMapping mapping);\n+\n+    public abstract boolean removeMapping(SchemaMapping mapping);\n }"},{"sha":"f395c52478c528cc92b77edbb2494c4ce638efce","filename":"core/src/main/java/org/syncope/core/persistence/beans/ConnectorInstance.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java?ref=6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","patch":"@@ -14,38 +14,46 @@\n  */\n package org.syncope.core.persistence.beans;\n \n+import java.util.HashSet;\n+import java.util.Set;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.Lob;\n+import javax.persistence.OneToMany;\n \n @Entity\n public class ConnectorInstance extends AbstractBaseBean {\n \n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private Long id;\n+\n     /**\n      * Connector class name prefix used to retrieve configuration bean\n      */\n     @Column(nullable = false)\n     private String connectorName;\n+\n     /**\n      * ConnectorBundle-Name: Qualified name for the connector bundle.\n      * Within a given deployment, the pair (ConnectorBundle-Name,\n      * ConnectorBundle-Version) must be unique.\n      */\n     @Column(nullable = false)\n     private String bundleName;\n+\n     /**\n      * ConnectorBundle-Version: The version of the bundle. Within a given\n      * deployment, the pair (ConnectorBundle-Name, ConnectorBundle-Version)\n      * must be unique.\n      */\n     @Column(nullable = false)\n     private String version;\n+\n     /**\n      * The main configuration for the connector instance.\n      * This is directly implemented by the Configuration bean class which\n@@ -55,6 +63,14 @@ public class ConnectorInstance extends AbstractBaseBean {\n     @Column(nullable = false)\n     private String xmlConfiguration;\n \n+    /**\n+     * Provisioning target resources associated to the connector.\n+     * The connector can be considered the resource's type.\n+     */\n+    @OneToMany(cascade = javax.persistence.CascadeType.ALL,\n+    fetch = FetchType.EAGER, mappedBy = \"connector\")\n+    private Set<Resource> resources;\n+\n     public String getVersion() {\n         return version;\n     }\n@@ -90,4 +106,22 @@ public void setXmlConfiguration(String xmlConfiguration) {\n     public Long getId() {\n         return id;\n     }\n+\n+    public Set<Resource> getResources() {\n+        return resources;\n+    }\n+\n+    public void setResources(Set<Resource> resources) {\n+        this.resources = resources;\n+    }\n+\n+    public boolean addResource(Resource resource) {\n+        if (this.resources == null) this.resources = new HashSet<Resource>();\n+        return this.resources.add(resource);\n+    }\n+\n+    public boolean removeResource(Resource resource) {\n+        if (this.resources == null) return true;\n+        return this.resources.remove(resource);\n+    }\n }"},{"sha":"2eb91727ab6fa96d6bd88e8af392a71b30ad96ce","filename":"core/src/main/java/org/syncope/core/persistence/beans/Resource.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FResource.java?ref=6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","patch":"@@ -0,0 +1,132 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+\n+@Entity\n+public class Resource extends AbstractBaseBean {\n+\n+    /**\n+     * The resource identifier is the name.\n+     */\n+    @Id\n+    private String name;\n+\n+    /**\n+     * The resource type is identified by the associated connector.\n+     */\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private ConnectorInstance connector;\n+\n+    /**\n+     * Users associated to this resource.\n+     */\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    private Set<SyncopeUser> users;\n+\n+    /**\n+     * Roles associated to this resource.\n+     */\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    private Set<SyncopeRole> roles;\n+\n+    /**\n+     * Attribute mappings.\n+     */\n+    @OneToMany(fetch = FetchType.EAGER, mappedBy = \"resource\")\n+    private Set<SchemaMapping> mappings;\n+\n+    public ConnectorInstance getConnector() {\n+        return connector;\n+    }\n+\n+    public void setConnector(ConnectorInstance connector) {\n+        this.connector = connector;\n+    }\n+\n+    public Set<SchemaMapping> getMappings() {\n+        return mappings;\n+    }\n+\n+    public void setMappings(Set<SchemaMapping> mappings) {\n+        this.mappings = mappings;\n+    }\n+\n+    public boolean addMapping(SchemaMapping mapping) {\n+        if (this.mappings == null) {\n+            this.mappings = new HashSet<SchemaMapping>();\n+        }\n+        return this.mappings.add(mapping);\n+    }\n+\n+    public boolean removeMapping(SchemaMapping mapping) {\n+        if (this.mappings == null) return true;\n+        return this.mappings.remove(mapping);\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Set<SyncopeRole> getRoles() {\n+        return roles;\n+    }\n+\n+    public void setRoles(Set<SyncopeRole> roles) {\n+        this.roles = roles;\n+    }\n+\n+    public Set<SyncopeUser> getUsers() {\n+        return users;\n+    }\n+\n+    public void setUsers(Set<SyncopeUser> users) {\n+        this.users = users;\n+    }\n+\n+    public boolean addUser(SyncopeUser user) {\n+        if (this.users == null) this.users = new HashSet<SyncopeUser>();\n+        return this.users.add(user);\n+    }\n+\n+    public boolean addRole(SyncopeRole role) {\n+        if (this.roles == null) this.roles = new HashSet<SyncopeRole>();\n+        return this.roles.add(role);\n+    }\n+\n+    public boolean removeUser(SyncopeUser user) {\n+        if (this.users == null) return true;\n+        return this.users.remove(user);\n+    }\n+\n+    public boolean removeRole(SyncopeRole role) {\n+        if (this.roles == null) return true;\n+        return this.roles.remove(role);\n+    }\n+}"},{"sha":"2dd5c08c204619f3306146f7bcf6148fab2befcf","filename":"core/src/main/java/org/syncope/core/persistence/beans/SchemaMapping.java","status":"added","additions":149,"deletions":0,"changes":149,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java?ref=6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","patch":"@@ -0,0 +1,149 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import org.syncope.core.persistence.beans.role.RoleSchema;\n+import org.syncope.core.persistence.beans.user.UserSchema;\n+\n+@Entity\n+public class SchemaMapping extends AbstractBaseBean {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    private Long id;\n+\n+    /**\n+     * Attribute schema to be mapped.\n+     * Consider that we can associate tha same attribute schema more\n+     * than once, with different aliases, to different resource attributes.\n+     */\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private UserSchema userSchema;\n+\n+    /**\n+     * Attribute schema to be mapped.\n+     * Consider that we can associate tha same attribute schema more\n+     * than once, with different aliases, to different resource attributes.\n+     */\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private RoleSchema roleSchema;\n+\n+    /**\n+     * Target resource that has fields to be mapped over user attribute schemas.\n+     */\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private Resource resource;\n+\n+    /**\n+     * Target resource's field to be mapped.\n+     */\n+    @Column(nullable = false)\n+    private String field;\n+\n+    /**\n+     * Specify if the mapped target resource's field is the key.\n+     */\n+    @Column(nullable = false)\n+    private boolean accountid;\n+\n+    /**\n+     * Specify if the mapped target resource's field is the password.\n+     */\n+    @Column(nullable = false)\n+    private boolean password;\n+\n+    /**\n+     * Specify if the mapped target resource's field is nullable.\n+     */\n+    @Column(nullable = false)\n+    private boolean nullable;\n+\n+    public SchemaMapping() {\n+        accountid = false;\n+        password = false;\n+        nullable = true;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public boolean isAccountid() {\n+        return accountid;\n+    }\n+\n+    public void setAccountid(boolean accountid) {\n+        this.accountid = accountid;\n+    }\n+\n+    public String getField() {\n+        return field;\n+    }\n+\n+    public void setField(String field) {\n+        this.field = field;\n+    }\n+\n+    public boolean isNullable() {\n+        return nullable;\n+    }\n+\n+    public void setNullable(boolean nullable) {\n+        this.nullable = nullable;\n+    }\n+\n+    public boolean isPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(boolean password) {\n+        this.password = password;\n+    }\n+\n+    public Resource getResource() {\n+        return resource;\n+    }\n+\n+    public void setResource(Resource resource) {\n+        this.resource = resource;\n+    }\n+\n+    public RoleSchema getRoleSchema() {\n+        return roleSchema;\n+    }\n+\n+    public void setRoleSchema(RoleSchema roleSchema) {\n+        this.roleSchema = roleSchema;\n+    }\n+\n+    public UserSchema getUserSchema() {\n+        return userSchema;\n+    }\n+\n+    public void setUserSchema(UserSchema userSchema) {\n+        this.userSchema = userSchema;\n+    }\n+}"},{"sha":"2255dd6449033b8d77106e5ab382eaa7e84685f6","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RoleSchema.java","status":"modified","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleSchema.java?ref=6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","patch":"@@ -23,15 +23,24 @@\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n \n @Entity\n public class RoleSchema extends AbstractSchema {\n \n     @OneToMany(fetch = FetchType.EAGER, mappedBy = \"schema\")\n     Set<RoleAttribute> attributes;\n+\n     @ManyToMany(mappedBy = \"schemas\")\n     Set<RoleDerivedSchema> derivedSchemas;\n \n+    /**\n+     * All the mappings of the attribute schema.\n+     */\n+    @OneToMany(cascade = javax.persistence.CascadeType.ALL,\n+    fetch = FetchType.EAGER, mappedBy = \"roleSchema\")\n+    Set<SchemaMapping> mappings;\n+\n     public RoleSchema() {\n         attributes = new HashSet<RoleAttribute>();\n         derivedSchemas = new HashSet<RoleDerivedSchema>();\n@@ -82,4 +91,26 @@ public void setDerivedSchemas(\n \n         this.derivedSchemas = (Set<RoleDerivedSchema>) derivedSchemas;\n     }\n+\n+    @Override\n+    public Set<SchemaMapping> getMappings() {\n+        return mappings;\n+    }\n+\n+    @Override\n+    public void setMappings(Set<SchemaMapping> mappings) {\n+        this.mappings = mappings;\n+    }\n+\n+    @Override\n+    public boolean addMapping(SchemaMapping mapping) {\n+        if (this.mappings == null) this.mappings = new HashSet<SchemaMapping>();\n+        return this.mappings.add(mapping);\n+    }\n+\n+    @Override\n+    public boolean removeMapping(SchemaMapping mapping) {\n+        if (this.mappings == null) this.mappings = new HashSet<SchemaMapping>();\n+        return this.mappings.remove(mapping);\n+    }\n }"},{"sha":"a755c89d644933ed7b86fe639dac564dc1f197bf","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","patch":"@@ -35,14 +35,19 @@\n public class SyncopeRole extends AbstractAttributable {\n \n     private String name;\n+\n     private String parent;\n+\n     @ManyToMany(fetch = FetchType.EAGER, mappedBy = \"roles\")\n     private Set<SyncopeUser> users;\n+\n     @ManyToMany(fetch = FetchType.LAZY)\n     private Set<Entitlement> entitlements;\n+\n     @OneToMany(cascade = CascadeType.ALL,\n     fetch = FetchType.EAGER, mappedBy = \"owner\")\n     private Set<RoleAttribute> attributes;\n+\n     @OneToMany(cascade = CascadeType.ALL,\n     fetch = FetchType.EAGER, mappedBy = \"owner\")\n     private Set<RoleDerivedAttribute> derivedAttributes;"},{"sha":"4ec6f893e7e50a551b4627bf77b17e1d320461c6","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","patch":"@@ -37,18 +37,25 @@ public class SyncopeUser extends AbstractAttributable {\n     @Transient\n     final private static PasswordEncryptor passwordEncryptor =\n             new StrongPasswordEncryptor();\n+\n     private String password;\n+\n     @ManyToMany(fetch = FetchType.EAGER)\n     private Set<SyncopeRole> roles;\n+\n     @OneToMany(cascade = CascadeType.ALL,\n     fetch = FetchType.EAGER, mappedBy = \"owner\")\n     private Set<UserAttribute> attributes;\n+\n     @OneToMany(cascade = CascadeType.ALL,\n     fetch = FetchType.EAGER, mappedBy = \"owner\")\n     private Set<UserDerivedAttribute> derivedAttributes;\n+\n     @Temporal(javax.persistence.TemporalType.TIME)\n     private Date creationTime;\n+\n     private String token;\n+\n     @Temporal(javax.persistence.TemporalType.TIME)\n     private Date tokenExpireTime;\n "},{"sha":"40e88d4078c05040183abfea7cc3b4177844eb2b","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserSchema.java","status":"modified","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserSchema.java?ref=6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","patch":"@@ -23,15 +23,24 @@\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n \n @Entity\n public class UserSchema extends AbstractSchema {\n \n     @OneToMany(fetch = FetchType.EAGER, mappedBy = \"schema\")\n     Set<UserAttribute> attributes;\n+\n     @ManyToMany(mappedBy = \"schemas\")\n     Set<UserDerivedSchema> derivedSchemas;\n \n+    /**\n+     * All the mappings of the attribute schema.\n+     */\n+    @OneToMany(cascade = javax.persistence.CascadeType.ALL,\n+    fetch = FetchType.EAGER, mappedBy = \"userSchema\")\n+    Set<SchemaMapping> mappings;\n+\n     public UserSchema() {\n         attributes = new HashSet<UserAttribute>();\n         derivedSchemas = new HashSet<UserDerivedSchema>();\n@@ -82,4 +91,26 @@ public void setDerivedSchemas(\n \n         this.derivedSchemas = (Set<UserDerivedSchema>) derivedSchemas;\n     }\n+\n+    @Override\n+    public Set<SchemaMapping> getMappings() {\n+        return mappings;\n+    }\n+\n+    @Override\n+    public void setMappings(Set<SchemaMapping> mappings) {\n+        this.mappings = mappings;\n+    }\n+\n+    @Override\n+    public boolean addMapping(SchemaMapping mapping) {\n+        if (this.mappings == null) this.mappings = new HashSet<SchemaMapping>();\n+        return this.mappings.add(mapping);\n+    }\n+\n+    @Override\n+    public boolean removeMapping(SchemaMapping mapping) {\n+        if (this.mappings == null) this.mappings = new HashSet<SchemaMapping>();\n+        return this.mappings.remove(mapping);\n+    }\n }"},{"sha":"ada8375f6e2e59fd7b73e760a2f601ab5a1d6824","filename":"core/src/main/java/org/syncope/core/persistence/dao/ResourceDAO.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceDAO.java?ref=6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","patch":"@@ -0,0 +1,29 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import java.util.List;\n+import org.syncope.core.persistence.beans.Resource;\n+\n+public interface ResourceDAO extends DAO {\n+\n+    Resource find(String name);\n+\n+    List<Resource> findAll();\n+\n+    Resource save(Resource resource);\n+\n+    void delete(String name);\n+}"},{"sha":"4444ba0fe043f834e4b3536275873ae3a18eebf7","filename":"core/src/main/java/org/syncope/core/persistence/dao/SchemaMappingDAO.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaMappingDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaMappingDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaMappingDAO.java?ref=6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","patch":"@@ -0,0 +1,29 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import java.util.List;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n+\n+public interface SchemaMappingDAO extends DAO {\n+\n+    SchemaMapping find(Long id);\n+\n+    List<SchemaMapping> findAll();\n+\n+    SchemaMapping save(SchemaMapping mapping);\n+\n+    void delete(Long id);\n+}"},{"sha":"a4027dea50ee41f50cc38842631958bb9e1da27b","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ResourceDAOImpl.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java?ref=6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","patch":"@@ -0,0 +1,96 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao.impl;\n+\n+import java.util.List;\n+import java.util.Set;\n+import javax.persistence.Query;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+import org.syncope.core.persistence.beans.ConnectorInstance;\n+import org.syncope.core.persistence.beans.Resource;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.ResourceDAO;\n+import org.syncope.core.persistence.dao.SchemaMappingDAO;\n+\n+@Repository\n+public class ResourceDAOImpl extends AbstractDAOImpl\n+        implements ResourceDAO {\n+\n+    @Autowired\n+    SchemaMappingDAO schemaMappingDAO;\n+\n+    @Override\n+    public Resource find(String name) {\n+        return entityManager.find(Resource.class, name);\n+    }\n+\n+    @Override\n+    public List<Resource> findAll() {\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM Resource e\");\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public Resource save(Resource resource) {\n+        return entityManager.merge(resource);\n+    }\n+\n+    @Override\n+    public void delete(String name) {\n+\n+        Resource resource = find(name);\n+\n+        Set<SchemaMapping> mappings = resource.getMappings();\n+        if (mappings != null) {\n+            for (SchemaMapping mapping : mappings) {\n+                mapping.setResource(null);\n+                schemaMappingDAO.delete(mapping.getId());\n+            }\n+        }\n+        resource.setMappings(null);\n+\n+        Set<SyncopeUser> users = resource.getUsers();\n+        if (users != null && !users.isEmpty()) {\n+            for (SyncopeUser user : users) {\n+                user.removeResource(resource);\n+            }\n+        }\n+        resource.setUsers(null);\n+\n+        Set<SyncopeRole> roles = resource.getRoles();\n+        if (roles != null && !roles.isEmpty()) {\n+            for (SyncopeRole role : roles) {\n+                role.removeResource(resource);\n+            }\n+        }\n+        resource.setRoles(null);\n+\n+        ConnectorInstance connector = resource.getConnector();\n+        Set<Resource> resources = null;\n+        if (connector != null) {\n+            resources = connector.getResources();\n+        }\n+        if (resources != null && !resources.isEmpty()) {\n+            resources.remove(resource);\n+        }\n+        resource.setConnector(null);\n+\n+        entityManager.remove(resource);\n+    }\n+}"},{"sha":"06aadf993317c148fe32797b12d2d4825344aae6","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SchemaMappingDAOImpl.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaMappingDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaMappingDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaMappingDAOImpl.java?ref=6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","patch":"@@ -0,0 +1,94 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao.impl;\n+\n+import java.util.List;\n+import java.util.Set;\n+import javax.persistence.Query;\n+import org.springframework.stereotype.Repository;\n+import org.syncope.core.persistence.beans.Resource;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.persistence.beans.role.RoleSchema;\n+import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.dao.SchemaMappingDAO;\n+\n+@Repository\n+public class SchemaMappingDAOImpl extends AbstractDAOImpl\n+        implements SchemaMappingDAO {\n+\n+    @Override\n+    public SchemaMapping find(Long id) {\n+        return entityManager.find(SchemaMapping.class, id);\n+    }\n+\n+    @Override\n+    public List<SchemaMapping> findAll() {\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM SchemaMapping e\");\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public SchemaMapping save(SchemaMapping mapping) {\n+        return entityManager.merge(mapping);\n+    }\n+\n+    @Override\n+    public void delete(Long id) {\n+        SchemaMapping mapping = find(id);\n+\n+        RoleSchema roleAttribueSchemas = mapping.getRoleSchema();\n+\n+        Set<SchemaMapping> mappings = null;\n+\n+        if (roleAttribueSchemas != null) {\n+            mappings = roleAttribueSchemas.getMappings();\n+        }\n+\n+        if (mappings != null) {\n+            mappings.remove(mapping);\n+        }\n+\n+        mapping.setRoleSchema(null);\n+\n+        UserSchema userAttributeSchemas = mapping.getUserSchema();\n+\n+        mappings = null;\n+        if (userAttributeSchemas != null) {\n+            mappings = userAttributeSchemas.getMappings();\n+        }\n+\n+        if (mappings != null) {\n+            mappings.remove(mapping);\n+        }\n+\n+        mapping.setUserSchema(null);\n+\n+        Resource resource = mapping.getResource();\n+\n+        mappings = null;\n+        if (resource != null) {\n+            mappings = resource.getMappings();\n+        }\n+\n+        if (mappings != null) {\n+            mappings.remove(mapping);\n+        }\n+\n+        mapping.setResource(null);\n+\n+        entityManager.remove(mapping);\n+    }\n+}"},{"sha":"a0f2218fd317f92b651e1e133a080b40aef01386","filename":"core/src/test/java/org/syncope/core/test/persistence/ConnectorInstanceDAOTest.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FConnectorInstanceDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FConnectorInstanceDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FConnectorInstanceDAOTest.java?ref=6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","patch":"@@ -35,14 +35,15 @@ public final void findById() {\n \n         assertNotNull(\"findById did not work\", connectorInstance);\n \n-        assertEquals(\"invalid name\", \"OpenAM\",\n+        assertEquals(\"invalid connector name\", \"WebServiceConnector\",\n                 connectorInstance.getConnectorName());\n \n-        assertEquals(\"invalid name\", \"org.syncope.core.persistence.test.util.openam\",\n+        assertEquals(\"invalid bundle name\",\n+                \"org.syncope.identityconnectors.bundles.staticws\",\n                 connectorInstance.getBundleName());\n \n-        assertEquals(\"invalid version\",\n-                \"1.0\", connectorInstance.getVersion());\n+        assertEquals(\"invalid bundle version\",\n+                \"0.1-SNAPSHOT\", connectorInstance.getVersion());\n     }\n \n     @Test"},{"sha":"dbea08b335cc322381e5f04aee4e3537a791d8f2","filename":"core/src/test/java/org/syncope/core/test/persistence/ResourceDAOTest.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FResourceDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FResourceDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FResourceDAOTest.java?ref=6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","patch":"@@ -0,0 +1,125 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.persistence;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.ConnectorInstance;\n+import org.syncope.core.persistence.beans.Resource;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n+import org.syncope.core.persistence.dao.ResourceDAO;\n+import org.syncope.core.persistence.dao.SchemaMappingDAO;\n+import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+\n+@Transactional\n+public class ResourceDAOTest extends AbstractTest {\n+\n+    @Autowired\n+    ResourceDAO resourceDAO;\n+\n+    @Autowired\n+    ConnectorInstanceDAO connectorInstanceDAO;\n+\n+    @Autowired\n+    SchemaMappingDAO schemaMappingDAO;\n+\n+    @Autowired\n+    SyncopeUserDAO syncopeUserDAO;\n+\n+    @Test\n+    public final void findById() {\n+        Resource resource =\n+                resourceDAO.find(\"ws-target-resource-1\");\n+\n+        assertNotNull(\"findById did not work\", resource);\n+\n+        ConnectorInstance connector = resource.getConnector();\n+\n+        assertNotNull(\"connector not found\", connector);\n+\n+        assertEquals(\"invalid connector name\", \"WebServiceConnector\",\n+                connector.getConnectorName());\n+\n+        assertEquals(\"invalid bundle name\",\n+                \"org.syncope.identityconnectors.bundles.staticws\",\n+                connector.getBundleName());\n+\n+        assertEquals(\"invalid bundle version\",\n+                \"0.1-SNAPSHOT\", connector.getVersion());\n+\n+        Set<SchemaMapping> mappings = resource.getMappings();\n+\n+        assertNotNull(\"mappings not found\", mappings);\n+\n+        assertFalse(\"no mapping specified\", mappings.isEmpty());\n+\n+        assertTrue(mappings.iterator().next().getId() == 100L);\n+    }\n+\n+    @Test\n+    public final void save() throws ClassNotFoundException {\n+        Resource resource = new Resource();\n+        resource.setName(\"ws-target-resource-3\");\n+\n+        // specify the connector\n+        ConnectorInstance connector = connectorInstanceDAO.find(100L);\n+\n+        assertNotNull(\"connector not found\", connector);\n+\n+        resource.setConnector(connector);\n+\n+        // specify a mapping\n+        List<SchemaMapping> mappings = schemaMappingDAO.findAll();\n+\n+        assertNotNull(\"mappings not found\", mappings);\n+\n+        assertFalse(\"no mapping specified\", mappings.isEmpty());\n+\n+        resource.setMappings(new HashSet<SchemaMapping>(mappings));\n+\n+        // specify an user schema\n+        SyncopeUser user = syncopeUserDAO.find(1L);\n+\n+        assertNotNull(\"user not found\", user);\n+\n+        resource.setUsers(Collections.singleton(user));\n+\n+        // save the resource\n+        Resource actual = resourceDAO.save(resource);\n+\n+        assertNotNull(actual);\n+    }\n+\n+    @Test\n+    public final void delete() {\n+        Resource resource = resourceDAO.find(\"ws-target-resource-2\");\n+\n+        assertNotNull(\"find to delete did not work\", resource);\n+\n+        resourceDAO.delete(resource.getName());\n+\n+        Resource actual = resourceDAO.find(\"ws-target-resource-2\");\n+        assertNull(\"delete did not work\", actual);\n+    }\n+}"},{"sha":"2f48ec06343c6c308300475ef6be73500ee51f5a","filename":"core/src/test/java/org/syncope/core/test/persistence/SchemaMappingDAOTest.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaMappingDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaMappingDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaMappingDAOTest.java?ref=6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","patch":"@@ -0,0 +1,94 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.persistence;\n+\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.dao.ResourceDAO;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.persistence.dao.SchemaMappingDAO;\n+\n+@Transactional\n+public class SchemaMappingDAOTest extends AbstractTest {\n+\n+    @Autowired\n+    SchemaMappingDAO schemaMappingDAO;\n+\n+    @Autowired\n+    SchemaDAO userShemaDAO;\n+\n+    @Autowired\n+    ResourceDAO resourceDAO;\n+\n+    @Test\n+    public final void findById() {\n+        SchemaMapping schema = schemaMappingDAO.find(100L);\n+\n+        assertNotNull(\"findById did not work\", schema);\n+\n+        assertEquals(\"username\", schema.getField());\n+\n+        assertEquals(\"email\", schema.getUserSchema().getName());\n+\n+        assertEquals(\"ws-target-resource-1\", schema.getResource().getName());\n+\n+        assertFalse(schema.isNullable());\n+\n+        assertTrue(schema.isAccountid());\n+\n+        assertFalse(schema.isPassword());\n+    }\n+\n+    @Test\n+    public final void save() throws ClassNotFoundException {\n+        SchemaMapping schema = new SchemaMapping();\n+\n+        schema.setField(\"name\");\n+        schema.setUserSchema(userShemaDAO.find(\"firstname\", UserSchema.class));\n+        schema.setResource(resourceDAO.find(\"ws-target-resource-1\"));\n+\n+        SchemaMapping actual = schemaMappingDAO.save(schema);\n+\n+        assertNotNull(actual);\n+\n+        assertTrue(actual.isNullable());\n+\n+        assertFalse(actual.isAccountid());\n+\n+        assertFalse(actual.isPassword());\n+\n+        assertEquals(\"firstname\", actual.getUserSchema().getName());\n+\n+        assertEquals(\"name\", actual.getField());\n+    }\n+\n+    @Test\n+    public final void delete() {\n+        SchemaMapping schema = schemaMappingDAO.find(100L);\n+\n+        assertNotNull(\"find to delete did not work\", schema);\n+\n+        schemaMappingDAO.delete(schema.getId());\n+\n+        SchemaMapping actual = schemaMappingDAO.find(100L);\n+        \n+        assertNull(\"delete did not work\", actual);\n+    }\n+}"},{"sha":"d669f375e4048cba7d9b7a661fd8f3bc319177e4","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/ResourceTest.java","status":"added","additions":203,"deletions":0,"changes":203,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java?ref=6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","patch":"@@ -0,0 +1,203 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.persistence.relationships;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import static org.junit.Assert.*;\n+import org.junit.Test;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.ConnectorInstance;\n+import org.syncope.core.persistence.beans.Resource;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n+import org.syncope.core.persistence.dao.ResourceDAO;\n+import org.syncope.core.persistence.dao.SchemaMappingDAO;\n+import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.test.persistence.AbstractTest;\n+\n+@Transactional\n+public class ResourceTest extends AbstractTest {\n+\n+    @Autowired\n+    ResourceDAO resourceDAO;\n+\n+    @Autowired\n+    ConnectorInstanceDAO connectorInstanceDAO;\n+\n+    @Autowired\n+    SchemaMappingDAO schemaMappingDAO;\n+\n+    @Autowired\n+    SyncopeUserDAO syncopeUserDAO;\n+\n+    @Test\n+    public final void save() {\n+        Resource resource = new Resource();\n+        resource.setName(\"ws-target-resource-3\");\n+\n+        // specify the connector\n+        ConnectorInstance connector = connectorInstanceDAO.find(100L);\n+\n+        assertNotNull(\"connector not found\", connector);\n+\n+        resource.setConnector(connector);\n+        connector.addResource(resource);\n+\n+        // specify a mapping\n+        List<SchemaMapping> mappings = schemaMappingDAO.findAll();\n+\n+        assertNotNull(\"mappings not found\", mappings);\n+\n+        assertFalse(\"no mapping specified\", mappings.isEmpty());\n+\n+        resource.setMappings(new HashSet<SchemaMapping>(mappings));\n+\n+        for (SchemaMapping mapping : mappings) {\n+            mapping.setResource(resource);\n+        }\n+\n+        // specify an user schema\n+        SyncopeUser user = syncopeUserDAO.find(1L);\n+\n+        assertNotNull(\"user not found\", user);\n+\n+        resource.setUsers(Collections.singleton(user));\n+        user.addResource(resource);\n+\n+        // save the resource\n+        Resource actual = resourceDAO.save(resource);\n+\n+        assertNotNull(actual);\n+\n+        resourceDAO.getEntityManager().flush();\n+\n+        // connector should be updated\n+        connector = connectorInstanceDAO.find(100L);\n+\n+        assertNotNull(connector);\n+\n+        Set<Resource> resources = connector.getResources();\n+        assertNotNull(resources);\n+        assertTrue(resources.size() > 1);\n+\n+        assertTrue(resources.contains(resourceDAO.find(actual.getName())));\n+\n+        // mapping should be updated\n+        SchemaMapping mapping = schemaMappingDAO.find(100L);\n+\n+        assertNotNull(mapping);\n+\n+        resource = mapping.getResource();\n+        assertNotNull(resource);\n+        assertEquals(resource, actual);\n+\n+        // user must bu updated\n+        user = syncopeUserDAO.find(1L);\n+\n+        assertNotNull(user);\n+\n+        resources = user.getResources();\n+        assertNotNull(resources);\n+        assertTrue(resources.size() == 1);\n+        assertTrue(resources.contains(actual));\n+    }\n+\n+    @Test\n+    public final void delete() {\n+\n+        Resource resource = resourceDAO.find(\"ws-target-resource-2\");\n+\n+        assertNotNull(\"find to delete did not work\", resource);\n+\n+        // -------------------------------------\n+        // Get original associated mappings\n+        // -------------------------------------\n+        Set<SchemaMapping> mappings = resource.getMappings();\n+\n+        assertNotNull(mappings);\n+\n+        Set<Long> mappingIds = new HashSet<Long>();\n+        for (SchemaMapping mapping : mappings) {\n+            mappingIds.add(mapping.getId());\n+        }\n+        // -------------------------------------\n+\n+        // -------------------------------------\n+        // Get original associated connector\n+        // -------------------------------------\n+        ConnectorInstance connector = resource.getConnector();\n+\n+        assertNotNull(connector);\n+\n+        Long connectorId = connector.getId();\n+        // -------------------------------------\n+\n+        // -------------------------------------\n+        // Get original users assoicated\n+        // -------------------------------------\n+        Set<SyncopeUser> users = resource.getUsers();\n+\n+        assertNotNull(users);\n+\n+        Set<Long> userIds = new HashSet<Long>();\n+        for (SyncopeUser user : users) {\n+            userIds.add(user.getId());\n+        }\n+        // -------------------------------------\n+\n+        // delete resource\n+        resourceDAO.delete(resource.getName());\n+\n+        // close the transaction\n+        resourceDAO.getEntityManager().flush();\n+\n+        // resource must be removed\n+        Resource actual = resourceDAO.find(\"ws-target-resource-2\");\n+        assertNull(\"delete did not work\", actual);\n+\n+        // mappings must be removed\n+        for (Long id : mappingIds) {\n+            assertNull(\"mapping delete did not work\",\n+                    schemaMappingDAO.find(id));\n+        }\n+\n+        // resource must be not referenced any more from users\n+        SyncopeUser actualUser = null;\n+        Set<Resource> resources = null;\n+        for (Long id : userIds) {\n+            actualUser = syncopeUserDAO.find(id);\n+            assertNotNull(actualUser);\n+            resources = actualUser.getResources();\n+            for (Resource res : resources) {\n+                assertFalse(res.getName().equalsIgnoreCase(resource.getName()));\n+            }\n+        }\n+\n+        // resource must be not referenced any more from the connector\n+        ConnectorInstance actualConnector =\n+                connectorInstanceDAO.find(connectorId);\n+        assertNotNull(actualConnector);\n+        resources = actualConnector.getResources();\n+        for (Resource res : resources) {\n+            assertFalse(res.getName().equalsIgnoreCase(resource.getName()));\n+        }\n+    }\n+}"},{"sha":"19f620cf679b30a8ca7f035546ec9ec217dd2f08","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/SchemaMappingTest.java","status":"added","additions":135,"deletions":0,"changes":135,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaMappingTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaMappingTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaMappingTest.java?ref=6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","patch":"@@ -0,0 +1,135 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.persistence.relationships;\n+\n+import java.util.Set;\n+import org.syncope.core.test.persistence.*;\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.Resource;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.dao.ResourceDAO;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.persistence.dao.SchemaMappingDAO;\n+\n+@Transactional\n+public class SchemaMappingTest extends AbstractTest {\n+\n+    @Autowired\n+    SchemaMappingDAO schemaMappingDAO;\n+\n+    @Autowired\n+    SchemaDAO userShemaDAO;\n+\n+    @Autowired\n+    ResourceDAO resourceDAO;\n+\n+    @Test\n+    public final void save() throws ClassNotFoundException {\n+        SchemaMapping schema = new SchemaMapping();\n+\n+        schema.setField(\"name\");\n+\n+        UserSchema user = userShemaDAO.find(\"firstname\", UserSchema.class);\n+        schema.setUserSchema(user);\n+\n+        Resource resource = resourceDAO.find(\"ws-target-resource-1\");\n+        schema.setResource(resource);\n+\n+        SchemaMapping actual = schemaMappingDAO.save(schema);\n+\n+        user.addMapping(actual);\n+        resource.addMapping(actual);\n+\n+        // close the transaction\n+        schemaMappingDAO.getEntityManager().flush();\n+\n+        assertNotNull(actual);\n+\n+        assertTrue(actual.isNullable());\n+\n+        assertFalse(actual.isAccountid());\n+\n+        assertFalse(actual.isPassword());\n+\n+        assertEquals(\"firstname\", actual.getUserSchema().getName());\n+\n+        assertEquals(\"name\", actual.getField());\n+\n+        UserSchema actualUser =\n+                userShemaDAO.find(\"firstname\", UserSchema.class);\n+\n+        assertTrue(actualUser.getMappings().contains(actual));\n+\n+        Resource actualResource =\n+                resourceDAO.find(\"ws-target-resource-1\");\n+\n+        assertTrue(actualResource.getMappings().contains(actual));\n+    }\n+\n+    @Test\n+    public final void delete() {\n+        SchemaMapping schema = schemaMappingDAO.find(100L);\n+\n+        assertNotNull(\"find to delete did not work\", schema);\n+\n+        Long id = schema.getId();\n+\n+        Resource resource = schema.getResource();\n+\n+        assertNotNull(resource);\n+\n+        UserSchema user = schema.getUserSchema();\n+\n+        assertNotNull(user);\n+\n+        schemaMappingDAO.delete(schema.getId());\n+\n+        // close the transaction\n+        schemaMappingDAO.getEntityManager().flush();\n+\n+        SchemaMapping actual = schemaMappingDAO.find(100L);\n+\n+        assertNull(\"delete did not work\", actual);\n+\n+        Resource actualResource =\n+                resourceDAO.find(resource.getName());\n+\n+        assertNotNull(actualResource);\n+\n+        Set<SchemaMapping> mappings = actualResource.getMappings();\n+        if (mappings != null) {\n+            for (SchemaMapping mapping : mappings) {\n+                assertFalse(mapping.getId().equals(id));\n+            }\n+        }\n+\n+        UserSchema actualUser =\n+                userShemaDAO.find(user.getName(), UserSchema.class);\n+\n+        assertNotNull(actualUser);\n+\n+        mappings = actualUser.getMappings();\n+        if (mappings != null) {\n+            for (SchemaMapping mapping : mappings) {\n+                assertFalse(mapping.getId().equals(id));\n+            }\n+        }\n+    }\n+}"},{"sha":"cdd0d70d7d71d846f07e90af4b660257c027bf09","filename":"core/src/test/resources/org/syncope/core/persistence/content.xml","status":"modified","additions":17,"deletions":2,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","patch":"@@ -84,10 +84,25 @@\n                                             \n     <UserDerivedAttribute id=\"1000\" derivedSchema_name=\"cn\" owner_id=\"3\"/>\n \n-    <ConnectorInstance id=\"100\" connectorName=\"OpenAM\" version=\"1.0\"\n-                       bundleName=\"org.syncope.core.persistence.test.util.openam\"\n+    <ConnectorInstance id=\"100\" connectorName=\"WebServiceConnector\" version=\"0.1-SNAPSHOT\"\n+                       bundleName=\"org.syncope.identityconnectors.bundles.staticws\"\n                        xmlConfiguration=\"%lt;xml ... \" />\n \n+    <Resource name=\"ws-target-resource-1\" connector_id=\"100\"/>\n+    <Resource name=\"ws-target-resource-2\" connector_id=\"100\"/>\n+\n+    <SchemaMapping id=\"100\" field=\"username\" resource_name=\"ws-target-resource-1\" \n+                   userSchema_name=\"email\"\n+                   nullable=\"false\"\n+                   accountid=\"true\"\n+                   password=\"false\"/>\n+\n+    <SchemaMapping id=\"101\" field=\"username\" resource_name=\"ws-target-resource-2\"\n+                   userSchema_name=\"email\"\n+                   nullable=\"false\"\n+                   accountid=\"true\"\n+                   password=\"false\"/>\n+\n     <Entitlement name=\"base\" description=\"NULL\"/>\n     <Entitlement name=\"advanced\" description=\"Advanced entitlement\"/>\n "}]}