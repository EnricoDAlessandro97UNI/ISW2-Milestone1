{"sha":"119e8aab47266cfdf799bdf4ee334039627d2898","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjExOWU4YWFiNDcyNjZjZmRmNzk5YmRmNGVlMzM0MDM5NjI3ZDI4OTg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-10-23T07:49:23Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-10-23T07:49:23Z"},"message":"[SYNCOPE-186] SyncopeSyncResultHanlder extracted from SyncJob + renaming\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1401182 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"16b3f05321e85e162a009472a61b47f1ca7e268a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/16b3f05321e85e162a009472a61b47f1ca7e268a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/119e8aab47266cfdf799bdf4ee334039627d2898","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/119e8aab47266cfdf799bdf4ee334039627d2898","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/119e8aab47266cfdf799bdf4ee334039627d2898","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/119e8aab47266cfdf799bdf4ee334039627d2898/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"fc18fc0a8ad5891b21cb17b746c41947d34dd972","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fc18fc0a8ad5891b21cb17b746c41947d34dd972","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fc18fc0a8ad5891b21cb17b746c41947d34dd972"}],"stats":{"total":1059,"additions":562,"deletions":497},"files":[{"sha":"65299f478d403e2033e2f6a7c0eb0dc6d0c6f145","filename":"client/src/main/java/org/apache/syncope/client/to/SyncTaskTO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FSyncTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FSyncTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FSyncTaskTO.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -36,7 +36,7 @@ public class SyncTaskTO extends SchedTaskTO {\n \n     private boolean fullReconciliation;\n \n-    private String jobActionsClassName;\n+    private String actionsClassName;\n \n     public UserTO getUserTemplate() {\n         return userTemplate;\n@@ -94,11 +94,11 @@ public void setFullReconciliation(boolean fullReconciliation) {\n         this.fullReconciliation = fullReconciliation;\n     }\n \n-    public String getJobActionsClassName() {\n-        return jobActionsClassName;\n+    public String getActionsClassName() {\n+        return actionsClassName;\n     }\n \n-    public void setJobActionsClassName(String jobActionsClassName) {\n-        this.jobActionsClassName = jobActionsClassName;\n+    public void setActionsClassName(String actionsClassName) {\n+        this.actionsClassName = actionsClassName;\n     }\n }"},{"sha":"5fced00d8c5545dcb9d6eb68acbc5d162d434043","filename":"client/src/main/java/org/apache/syncope/types/AuditElements.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FAuditElements.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -198,7 +198,7 @@ public enum TaskSubCategory {\n         delete,\n         listExecutions,\n         getJobClasses,\n-        getJobActionClasses,\n+        getSyncActionsClasses,\n         readExecution,\n         execute,\n         report,"},{"sha":"7a790feb53897e12af55c1762a5f8e712cf0e60b","filename":"console/src/main/java/org/apache/syncope/console/pages/SyncTaskModalPage.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -20,18 +20,18 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.wicket.PageReference;\n-import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n-import org.apache.wicket.model.IModel;\n-import org.apache.wicket.model.LoadableDetachableModel;\n-import org.apache.wicket.model.PropertyModel;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.apache.syncope.client.to.ResourceTO;\n import org.apache.syncope.client.to.SyncTaskTO;\n import org.apache.syncope.console.commons.SelectChoiceRenderer;\n import org.apache.syncope.console.rest.ResourceRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n \n /**\n  * Modal window with Task form (to stop and start execution).\n@@ -79,12 +79,12 @@ protected List<String> load() {\n \n             @Override\n             protected List<String> load() {\n-                return taskRestClient.getJobActionsClasses();\n+                return taskRestClient.getSyncActionsClasses();\n             }\n         };\n \n         final AjaxDropDownChoicePanel<String> actionsClassName = new AjaxDropDownChoicePanel<String>(\n-                \"jobActionsClassName\", getString(\"actionsClass\"), new PropertyModel(taskTO, \"jobActionsClassName\"));\n+                \"actionsClassName\", getString(\"actionsClass\"), new PropertyModel(taskTO, \"actionsClassName\"));\n         actionsClassName.setChoices(classNames.getObject());\n         actionsClassName.setStyleShet(\"ui-widget-content ui-corner-all long_dynamicsize\");\n         profile.add(actionsClassName);"},{"sha":"bbbd61720909925fee7fb24f74f4cdafdbf5d855","filename":"console/src/main/java/org/apache/syncope/console/rest/TaskRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -54,14 +54,14 @@ public List<String> getJobClasses() {\n         return jobClasses;\n     }\n \n-    public List<String> getJobActionsClasses() {\n+    public List<String> getSyncActionsClasses() {\n         List<String> actions = null;\n \n         try {\n             actions = Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                    baseURL + \"task/jobActionsClasses.json\", String[].class));\n+                    baseURL + \"task/syncActionsClasses.json\", String[].class));\n         } catch (SyncopeClientCompositeErrorException e) {\n-            LOG.error(\"While getting all job actions classes\", e);\n+            LOG.error(\"While getting all sync actions classes\", e);\n         }\n         return actions;\n     }"},{"sha":"914b4a8f0901abbeb3de7471abbcaae6b9d740e6","filename":"console/src/main/resources/org/apache/syncope/console/pages/SyncTaskModalPage.html","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage.html?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -104,10 +104,10 @@\n \n                 <div class=\"tablerow\">\n                   <div class=\"tablecolumn_label short_dynamicsize\">\n-                    <label for=\"jobActionsClassName\"><wicket:message key=\"actionsClass\"/></label>\n+                    <label for=\"actionsClassName\"><wicket:message key=\"actionsClass\"/></label>\n                   </div>\n                   <div class=\"tablecolumn_field medium_dynamicsize\">\n-                    <span wicket:id=\"jobActionsClassName\">[jobActionsClassName]</span>\n+                    <span wicket:id=\"actionsClassName\">[actionsClassName]</span>\n                   </div>\n                 </div>\n "},{"sha":"c20c6c7f540e0c7f82c0c9231582725a38841bcb","filename":"core/pom.xml","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -484,7 +484,8 @@ under the License.\n                     <exclude name=\"**/workflow.properties\" />\n                   </patternset>\n                 </unzip>\n-                <copy file=\"${project.build.directory}/test-classes/org/apache/syncope/core/scheduling/TestSyncJobActions.class\" todir=\"${cargo.run.dir}/WEB-INF/classes/org/apache/syncope/core/scheduling\" />\n+                <copy file=\"${project.build.directory}/test-classes/org/apache/syncope/core/quartz/TestSyncActions.class\" \n+                      todir=\"${cargo.run.dir}/WEB-INF/classes/org/apache/syncope/core/quartz\" />\n                 <copy file=\"${project.build.directory}/test-classes/db.jsp\" todir=\"${cargo.run.dir}\" />\n                 <copy todir=\"${cargo.run.dir}/WEB-INF/classes\" includeEmptyDirs=\"false\">\n                   <fileset dir=\"${project.build.directory}/test-classes\">"},{"sha":"0c694b5050301fe1e743491c0beb9342107f1ff7","filename":"core/src/main/java/org/apache/syncope/core/init/ImplementationClassNamesLoader.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -26,10 +26,10 @@\n import java.util.Set;\n import org.apache.syncope.core.persistence.validation.attrvalue.Validator;\n import org.apache.syncope.core.report.Reportlet;\n-import org.apache.syncope.core.scheduling.NotificationJob;\n-import org.apache.syncope.core.scheduling.ReportJob;\n-import org.apache.syncope.core.scheduling.SyncJob;\n-import org.apache.syncope.core.scheduling.SyncJobActions;\n+import org.apache.syncope.core.notification.NotificationJob;\n+import org.apache.syncope.core.report.ReportJob;\n+import org.apache.syncope.core.sync.SyncJob;\n+import org.apache.syncope.core.sync.SyncActions;\n import org.quartz.Job;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -51,7 +51,7 @@ public enum Type {\n \n         REPORTLET,\n         JOB,\n-        JOB_ACTIONS,\n+        SYNC_ACTIONS,\n         VALIDATOR\n \n     }\n@@ -94,8 +94,8 @@ public void load() {\n                         classNames.get(Type.JOB).add(metadata.getClassName());\n                     }\n \n-                    if (interfaces.contains(SyncJobActions.class) && !metadata.isAbstract()) {\n-                        classNames.get(Type.JOB_ACTIONS).add(metadata.getClassName());\n+                    if (interfaces.contains(SyncActions.class) && !metadata.isAbstract()) {\n+                        classNames.get(Type.SYNC_ACTIONS).add(metadata.getClassName());\n                     }\n \n                     if (interfaces.contains(Validator.class) && !metadata.isAbstract()) {"},{"sha":"f5e96d4064fcf04244c113179d00375f495314d8","filename":"core/src/main/java/org/apache/syncope/core/init/JobInstanceLoader.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -32,12 +32,12 @@\n import org.apache.syncope.core.persistence.dao.ConfDAO;\n import org.apache.syncope.core.persistence.dao.ReportDAO;\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n-import org.apache.syncope.core.scheduling.AbstractTaskJob;\n-import org.apache.syncope.core.scheduling.DefaultSyncJobActions;\n-import org.apache.syncope.core.scheduling.NotificationJob;\n-import org.apache.syncope.core.scheduling.ReportJob;\n-import org.apache.syncope.core.scheduling.SyncJob;\n-import org.apache.syncope.core.scheduling.SyncJobActions;\n+import org.apache.syncope.core.quartz.AbstractTaskJob;\n+import org.apache.syncope.core.sync.DefaultSyncActions;\n+import org.apache.syncope.core.notification.NotificationJob;\n+import org.apache.syncope.core.report.ReportJob;\n+import org.apache.syncope.core.sync.SyncJob;\n+import org.apache.syncope.core.sync.SyncActions;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n import org.quartz.Job;\n import org.quartz.JobExecutionContext;\n@@ -172,20 +172,20 @@ public void registerJob(final Task task, final String jobClassName, final String\n             ((AbstractTaskJob) jobInstance).setTaskId(task.getId());\n         }\n         if (jobInstance instanceof SyncJob && task instanceof SyncTask) {\n-            String jobActionsClassName = ((SyncTask) task).getJobActionsClassName();\n-            Class syncJobActionsClass = DefaultSyncJobActions.class;\n+            String jobActionsClassName = ((SyncTask) task).getActionsClassName();\n+            Class syncActionsClass = DefaultSyncActions.class;\n             if (StringUtils.isNotBlank(jobActionsClassName)) {\n                 try {\n-                    syncJobActionsClass = Class.forName(jobActionsClassName);\n+                    syncActionsClass = Class.forName(jobActionsClassName);\n                 } catch (Exception e) {\n                     LOG.error(\"Class {} not found, reverting to {}\", new Object[]{jobActionsClassName,\n-                                syncJobActionsClass.getName(), e});\n+                                syncActionsClass.getName(), e});\n                 }\n             }\n-            SyncJobActions syncJobActions = (SyncJobActions) getBeanFactory().createBean(syncJobActionsClass,\n+            SyncActions syncActions = (SyncActions) getBeanFactory().createBean(syncActionsClass,\n                     AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n \n-            ((SyncJob) jobInstance).setActions(syncJobActions);\n+            ((SyncJob) jobInstance).setActions(syncActions);\n         }\n \n         registerJob(getJobName(task), jobInstance, cronExpression);"},{"sha":"fd04d0a8e0b594c2932cbbfee7352fcd3af9071d","filename":"core/src/main/java/org/apache/syncope/core/notification/NotificationJob.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationJob.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.scheduling;\n+package org.apache.syncope.core.notification;\n \n import java.io.PrintWriter;\n import java.io.StringWriter;","previous_filename":"core/src/main/java/org/apache/syncope/core/scheduling/NotificationJob.java"},{"sha":"6ba00ae91bb3f8240c7c715ce7850fee84f9a9f7","filename":"core/src/main/java/org/apache/syncope/core/notification/NotificationManager.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -39,7 +39,6 @@\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.persistence.dao.UserSearchDAO;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n-import org.apache.syncope.core.scheduling.NotificationJob;\n import org.apache.syncope.core.util.ConnObjectUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.apache.syncope.core.util.NotFoundException;"},{"sha":"4786ddd16615c67ed72d05da175850de9bd0ebd8","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/SyncTask.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.client.to.UserTO;\n import org.apache.syncope.client.util.XMLSerializer;\n import org.apache.syncope.core.persistence.validation.entity.SyncTaskCheck;\n-import org.apache.syncope.core.scheduling.SyncJob;\n+import org.apache.syncope.core.sync.SyncJob;\n \n @Entity\n @SyncTaskCheck\n@@ -69,7 +69,7 @@ public class SyncTask extends SchedTask {\n     @Max(1)\n     private Integer fullReconciliation;\n \n-    private String jobActionsClassName;\n+    private String actionsClassName;\n \n     /**\n      * Default constructor.\n@@ -95,7 +95,7 @@ public void setResource(ExternalResource resource) {\n     public UserTO getUserTemplate() {\n         return userTemplate == null\n                 ? new UserTO()\n-                : XMLSerializer.<UserTO> deserialize(userTemplate);\n+                : XMLSerializer.<UserTO>deserialize(userTemplate);\n     }\n \n     public void setUserTemplate(final UserTO userTemplate) {\n@@ -142,11 +142,11 @@ public void setFullReconciliation(final boolean fullReconciliation) {\n         this.fullReconciliation = getBooleanAsInteger(fullReconciliation);\n     }\n \n-    public String getJobActionsClassName() {\n-        return jobActionsClassName;\n+    public String getActionsClassName() {\n+        return actionsClassName;\n     }\n \n-    public void setJobActionsClassName(String jobActionsClassName) {\n-        this.jobActionsClassName = jobActionsClassName;\n+    public void setActionsClassName(String actionsClassName) {\n+        this.actionsClassName = actionsClassName;\n     }\n }"},{"sha":"e2b3722ad382eeb0961971adfd7b0bfc56a24372","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/ReportExecDAOImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportExecDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportExecDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportExecDAOImpl.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -67,15 +67,14 @@ public List<ReportExec> findAll() {\n     /**\n      * This method is annotated as transactional because called from ReportJob.\n      *\n-     * @see org.apache.syncope.core.scheduling.ReportJob\n+     * @see org.apache.syncope.core.report.ReportJob\n      * @param execution to be merged\n      * @return merged execution\n      * @throws InvalidEntityException if any validation error occurs\n      */\n     @Override\n     @Transactional(rollbackFor = Throwable.class)\n     public ReportExec save(final ReportExec execution) throws InvalidEntityException {\n-\n         return entityManager.merge(execution);\n     }\n "},{"sha":"cf294c15678e97b85cd0b56833d6b7a8797d323c","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/ResourceDAOImpl.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -83,16 +83,15 @@ public List<ExternalResource> findAllByPriority() {\n     }\n \n     /**\n-     * This method has an explicit @Transactional annotation because it is\n-     * called by SyncJob.\n+     * This method has an explicit Transactional annotation because it is called by SyncJob.\n      *\n-     * @see org.apache.syncope.core.scheduling.SyncJob\n+     * @see org.apache.syncope.core.sync.SyncJob\n      *\n      * @param resource entity to be merged\n      * @return the same entity, updated\n      */\n     @Override\n-    @Transactional(rollbackFor = { Throwable.class })\n+    @Transactional(rollbackFor = {Throwable.class})\n     public ExternalResource save(final ExternalResource resource) {\n         ExternalResource merged = entityManager.merge(resource);\n         try {"},{"sha":"ddd626cb8184f92086456533d4897abb1340e0ec","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/TaskExecDAOImpl.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecDAOImpl.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -85,16 +85,17 @@ public TaskExec save(final TaskExec execution) {\n     }\n \n     /**\n-     * This method has an explicit @Transactional annotation because it is called by AbstractJob.\n+     * This method has an explicit Transactional annotation because it is called by AbstractJob.\n      *\n-     * @see org.apache.syncope.core.scheduling.AbstractJob\n+     * @see AbstractJob\n      *\n-     * @param execution entity to be merged\n-     * @return the same entity, updated\n+     * @param taskId task id\n+     * @param execution task execution\n+     * @throws InvalidEntityException if any bean validation fails\n      */\n     @Override\n     @Transactional(rollbackFor = {Throwable.class})\n-    public void saveAndAdd(Long taskId, TaskExec execution) throws InvalidEntityException {\n+    public void saveAndAdd(final Long taskId, final TaskExec execution) throws InvalidEntityException {\n         Task task = taskDAO.find(taskId);\n         task.addExec(execution);\n         taskDAO.save(task);"},{"sha":"382cfe4ac3738b7f17cedb965eb5f537246bb7f2","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SchedTaskValidator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchedTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchedTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchedTaskValidator.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -22,7 +22,7 @@\n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n import org.apache.syncope.core.persistence.beans.SchedTask;\n-import org.apache.syncope.core.scheduling.AbstractTaskJob;\n+import org.apache.syncope.core.quartz.AbstractTaskJob;\n import org.apache.syncope.types.EntityViolationType;\n import org.quartz.CronExpression;\n "},{"sha":"c7e10d5e4cc28f5c83227f1a880919909458ac0d","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SyncTaskValidator.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncTaskValidator.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -22,7 +22,7 @@\n import javax.validation.ConstraintValidatorContext;\n import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n-import org.apache.syncope.core.scheduling.SyncJobActions;\n+import org.apache.syncope.core.sync.SyncActions;\n import org.apache.syncope.types.EntityViolationType;\n \n public class SyncTaskValidator extends AbstractValidator implements ConstraintValidator<SyncTaskCheck, SyncTask> {\n@@ -59,23 +59,23 @@ public boolean isValid(final SyncTask object, final ConstraintValidatorContext c\n                             .addNode(object + \".resource is NULL\").addConstraintViolation();\n                 }\n \n-                if (StringUtils.isNotBlank(object.getJobActionsClassName())) {\n-                    Class<?> syncJobActionsClass = null;\n+                if (StringUtils.isNotBlank(object.getActionsClassName())) {\n+                    Class<?> syncActionsClass = null;\n                     boolean isAssignable = false;\n                     try {\n-                        syncJobActionsClass = Class.forName(object.getJobActionsClassName());\n-                        isAssignable = SyncJobActions.class.isAssignableFrom(syncJobActionsClass);\n+                        syncActionsClass = Class.forName(object.getActionsClassName());\n+                        isAssignable = SyncActions.class.isAssignableFrom(syncActionsClass);\n                     } catch (Exception e) {\n-                        LOG.error(\"Invalid SyncJobActions specified\", e);\n+                        LOG.error(\"Invalid SyncActions specified\", e);\n                         isValid = false;\n                     }\n \n-                    if (syncJobActionsClass == null || !isAssignable) {\n+                    if (syncActionsClass == null || !isAssignable) {\n                         isValid = false;\n \n                         context.disableDefaultConstraintViolation();\n                         context.buildConstraintViolationWithTemplate(EntityViolationType.InvalidSyncTask.toString())\n-                                .addNode(object + \".syncJobActionsClassName is not valid\").addConstraintViolation();\n+                                .addNode(object + \".actionsClassName is not valid\").addConstraintViolation();\n                     }\n                 }\n             }"},{"sha":"bf67584939a9af069b4cdee459f4be5472d31adb","filename":"core/src/main/java/org/apache/syncope/core/quartz/AbstractTaskJob.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTaskJob.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.scheduling;\n+package org.apache.syncope.core.quartz;\n \n import java.io.PrintWriter;\n import java.io.StringWriter;","previous_filename":"core/src/main/java/org/apache/syncope/core/scheduling/AbstractTaskJob.java"},{"sha":"5ae67a060cfd12825df7d900f05543244ecc2552","filename":"core/src/main/java/org/apache/syncope/core/quartz/SampleJob.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FSampleJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FSampleJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FSampleJob.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.scheduling;\n+package org.apache.syncope.core.quartz;\n \n import org.quartz.JobExecutionException;\n import org.apache.syncope.core.persistence.beans.SchedTask;","previous_filename":"core/src/main/java/org/apache/syncope/core/scheduling/SampleJob.java"},{"sha":"183ac3f6f04fb5093a15ec5799c1a96a49abb7fc","filename":"core/src/main/java/org/apache/syncope/core/quartz/SpringBeanJobFactory.java","status":"renamed","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FSpringBeanJobFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FSpringBeanJobFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FSpringBeanJobFactory.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -16,20 +16,20 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.scheduling;\n+package org.apache.syncope.core.quartz;\n \n+import org.apache.syncope.core.init.JobInstanceLoader;\n+import org.apache.syncope.core.persistence.beans.Report;\n+import org.apache.syncope.core.persistence.beans.SchedTask;\n+import org.apache.syncope.core.persistence.dao.ReportDAO;\n+import org.apache.syncope.core.persistence.dao.TaskDAO;\n import org.quartz.SchedulerContext;\n import org.quartz.spi.TriggerFiredBundle;\n import org.springframework.beans.BeanWrapper;\n import org.springframework.beans.MutablePropertyValues;\n import org.springframework.beans.PropertyAccessorFactory;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.ConfigurableApplicationContext;\n-import org.apache.syncope.core.init.JobInstanceLoader;\n-import org.apache.syncope.core.persistence.beans.Report;\n-import org.apache.syncope.core.persistence.beans.SchedTask;\n-import org.apache.syncope.core.persistence.dao.ReportDAO;\n-import org.apache.syncope.core.persistence.dao.TaskDAO;\n \n public class SpringBeanJobFactory extends org.springframework.scheduling.quartz.SpringBeanJobFactory {\n ","previous_filename":"core/src/main/java/org/apache/syncope/core/scheduling/SpringBeanJobFactory.java"},{"sha":"9447e7def330481c7b1274ba1b26aae6ebd6a3b3","filename":"core/src/main/java/org/apache/syncope/core/quartz/package-info.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2Fpackage-info.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -16,5 +16,5 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.scheduling;\n+package org.apache.syncope.core.quartz;\n ","previous_filename":"core/src/main/java/org/apache/syncope/core/scheduling/package-info.java"},{"sha":"c2d2143b2999417d9c83292419254f50fddf03a4","filename":"core/src/main/java/org/apache/syncope/core/report/AbstractReportlet.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FAbstractReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FAbstractReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FAbstractReportlet.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -24,7 +24,7 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.client.SyncopeConstants;\n import org.apache.syncope.client.report.AbstractReportletConf;\n-import static org.apache.syncope.core.scheduling.ReportXMLConst.*;\n+import static org.apache.syncope.core.report.ReportXMLConst.*;\n import org.xml.sax.ContentHandler;\n import org.xml.sax.SAXException;\n import org.xml.sax.helpers.AttributesImpl;"},{"sha":"d3895f7fe0f4f081526ea114a9804b9c4ef37238","filename":"core/src/main/java/org/apache/syncope/core/report/ReportJob.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FReportJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FReportJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FReportJob.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.scheduling;\n+package org.apache.syncope.core.report;\n \n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n@@ -39,9 +39,9 @@\n import org.apache.syncope.core.report.ReportException;\n import org.apache.syncope.core.report.Reportlet;\n import org.apache.syncope.core.rest.data.ReportDataBinder;\n-import static org.apache.syncope.core.scheduling.ReportXMLConst.ATTR_NAME;\n-import static org.apache.syncope.core.scheduling.ReportXMLConst.ELEMENT_REPORT;\n-import static org.apache.syncope.core.scheduling.ReportXMLConst.XSD_STRING;\n+import static org.apache.syncope.core.report.ReportXMLConst.ATTR_NAME;\n+import static org.apache.syncope.core.report.ReportXMLConst.ELEMENT_REPORT;\n+import static org.apache.syncope.core.report.ReportXMLConst.XSD_STRING;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n import org.apache.syncope.types.ReportExecStatus;\n import org.quartz.DisallowConcurrentExecution;","previous_filename":"core/src/main/java/org/apache/syncope/core/scheduling/ReportJob.java"},{"sha":"549b9d8544b872d4f985af37d7fa8ca21b4c38b6","filename":"core/src/main/java/org/apache/syncope/core/report/ReportXMLConst.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FReportXMLConst.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FReportXMLConst.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FReportXMLConst.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.scheduling;\n+package org.apache.syncope.core.report;\n \n public class ReportXMLConst {\n ","previous_filename":"core/src/main/java/org/apache/syncope/core/scheduling/ReportXMLConst.java"},{"sha":"214869cb59f7cebaf83419f593cbbe41c16916fd","filename":"core/src/main/java/org/apache/syncope/core/report/UserReportlet.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FUserReportlet.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -36,7 +36,7 @@\n import org.apache.syncope.core.persistence.dao.UserSearchDAO;\n import org.apache.syncope.core.rest.data.RoleDataBinder;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n-import static org.apache.syncope.core.scheduling.ReportXMLConst.*;\n+import static org.apache.syncope.core.report.ReportXMLConst.*;\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.xml.sax.ContentHandler;\n import org.xml.sax.SAXException;"},{"sha":"786ba4be419e6bf8cef5a860d4d7ec14e0565530","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/TaskController.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -41,8 +41,8 @@\n import org.apache.syncope.core.persistence.dao.TaskExecDAO;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.rest.data.TaskDataBinder;\n-import org.apache.syncope.core.scheduling.AbstractTaskJob;\n-import org.apache.syncope.core.scheduling.NotificationJob;\n+import org.apache.syncope.core.quartz.AbstractTaskJob;\n+import org.apache.syncope.core.notification.NotificationJob;\n import org.apache.syncope.core.util.NotFoundException;\n import org.apache.syncope.core.util.TaskUtil;\n import org.apache.syncope.types.AuditElements.Category;\n@@ -250,14 +250,14 @@ public ModelAndView getJobClasses() {\n     }\n \n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/jobActionsClasses\")\n-    public ModelAndView getJobActionClasses() {\n-        Set<String> jobActionsClasses = classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.JOB_ACTIONS);\n+    @RequestMapping(method = RequestMethod.GET, value = \"/syncActionsClasses\")\n+    public ModelAndView getSyncActionsClasses() {\n+        Set<String> actionsClasses = classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.SYNC_ACTIONS);\n \n-        auditManager.audit(Category.task, TaskSubCategory.getJobActionClasses, Result.success,\n-                \"Successfully listed all SyncJobActions classes: \" + jobActionsClasses.size());\n+        auditManager.audit(Category.task, TaskSubCategory.getSyncActionsClasses, Result.success,\n+                \"Successfully listed all SyncActions classes: \" + actionsClasses.size());\n \n-        return new ModelAndView().addObject(jobActionsClasses);\n+        return new ModelAndView().addObject(actionsClasses);\n     }\n \n     @PreAuthorize(\"hasRole('TASK_READ')\")"},{"sha":"ea4fe282744f2a32d8980fd222e25938461b895f","filename":"core/src/main/java/org/apache/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -135,7 +135,7 @@ private void fill(final SyncTask task, final SyncTaskTO taskTO) {\n         task.setSyncStatus(taskTO.isSyncStatus());\n         task.setFullReconciliation(taskTO.isFullReconciliation());\n \n-        task.setJobActionsClassName(taskTO.getJobActionsClassName());\n+        task.setActionsClassName(taskTO.getActionsClassName());\n     }\n \n     public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtil taskUtil)"},{"sha":"94753f4a42c03879c82c12ca4b1f61434616ff0b","filename":"core/src/main/java/org/apache/syncope/core/sync/DefaultSyncActions.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultSyncActions.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.scheduling;\n+package org.apache.syncope.core.sync;\n \n import java.util.List;\n import org.apache.syncope.client.mod.UserMod;\n@@ -26,11 +26,11 @@\n import org.quartz.JobExecutionException;\n \n /**\n- * Default (empty) implementation of SyncJobActions.\n+ * Default (empty) implementation of SyncActions.\n  *\n- * @see SyncJobActions\n+ * @see SyncActions\n  */\n-public class DefaultSyncJobActions implements SyncJobActions {\n+public class DefaultSyncActions implements SyncActions {\n \n     @Override\n     public void beforeAll(final SyncTask task) throws JobExecutionException {","previous_filename":"core/src/main/java/org/apache/syncope/core/scheduling/DefaultSyncJobActions.java"},{"sha":"27723a0954331d2a1f7622892029b3281133c5aa","filename":"core/src/main/java/org/apache/syncope/core/sync/SyncActions.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncActions.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.scheduling;\n+package org.apache.syncope.core.sync;\n \n import java.util.List;\n import org.apache.syncope.client.mod.UserMod;\n@@ -28,7 +28,7 @@\n /**\n  * Interface for actions to be performed during SyncJob execution.\n  */\n-public interface SyncJobActions {\n+public interface SyncActions {\n \n     /**\n      * Action to be executed before to start the synchronization task execution.","previous_filename":"core/src/main/java/org/apache/syncope/core/scheduling/SyncJobActions.java"},{"sha":"e79f7cda39b38d5975b0fc7542018230a16be418","filename":"core/src/main/java/org/apache/syncope/core/sync/SyncJob.java","status":"added","additions":300,"deletions":0,"changes":300,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncJob.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -0,0 +1,300 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.sync;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.core.init.ConnInstanceLoader;\n+import org.apache.syncope.core.persistence.beans.Entitlement;\n+import org.apache.syncope.core.persistence.beans.ExternalResource;\n+import org.apache.syncope.core.persistence.beans.SchemaMapping;\n+import org.apache.syncope.core.persistence.beans.SyncPolicy;\n+import org.apache.syncope.core.persistence.beans.SyncTask;\n+import org.apache.syncope.core.persistence.beans.TaskExec;\n+import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n+import org.apache.syncope.core.persistence.dao.ResourceDAO;\n+import org.apache.syncope.core.propagation.ConnectorFacadeProxy;\n+import org.apache.syncope.core.quartz.AbstractTaskJob;\n+import org.apache.syncope.core.util.ApplicationContextProvider;\n+import org.apache.syncope.core.util.EntitlementUtil;\n+import org.apache.syncope.core.util.SchemaMappingUtil;\n+import org.apache.syncope.types.ConflictResolutionAction;\n+import org.apache.syncope.types.SyncPolicySpec;\n+import org.apache.syncope.types.TraceLevel;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.core.userdetails.User;\n+import org.springframework.security.core.userdetails.UserDetails;\n+\n+/**\n+ * Job for executing synchronization tasks.\n+ *\n+ * @see AbstractTaskJob\n+ * @see SyncTask\n+ */\n+public class SyncJob extends AbstractTaskJob {\n+\n+    /**\n+     * ConnInstance loader.\n+     */\n+    @Autowired\n+    private ConnInstanceLoader connInstanceLoader;\n+\n+    /**\n+     * Resource DAO.\n+     */\n+    @Autowired\n+    private ResourceDAO resourceDAO;\n+\n+    /**\n+     * Entitlement DAO.\n+     */\n+    @Autowired\n+    private EntitlementDAO entitlementDAO;\n+\n+    /**\n+     * SyncJob actions.\n+     */\n+    private SyncActions actions;\n+\n+    public void setActions(final SyncActions actions) {\n+        this.actions = actions;\n+    }\n+\n+    /**\n+     * Create a textual report of the synchronization, based on the trace level.\n+     *\n+     * @param syncResults Sync results\n+     * @param syncTraceLevel Sync trace level\n+     * @param dryRun dry run?\n+     * @return report as string\n+     */\n+    private String createReport(final List<SyncResult> syncResults, final TraceLevel syncTraceLevel,\n+            final boolean dryRun) {\n+\n+        if (syncTraceLevel == TraceLevel.NONE) {\n+            return null;\n+        }\n+\n+        StringBuilder report = new StringBuilder();\n+\n+        if (dryRun) {\n+            report.append(\"==>Dry run only, no modifications were made<==\\n\\n\");\n+        }\n+\n+        List<SyncResult> created = new ArrayList<SyncResult>();\n+        List<SyncResult> createdFailed = new ArrayList<SyncResult>();\n+        List<SyncResult> updated = new ArrayList<SyncResult>();\n+        List<SyncResult> updatedFailed = new ArrayList<SyncResult>();\n+        List<SyncResult> deleted = new ArrayList<SyncResult>();\n+        List<SyncResult> deletedFailed = new ArrayList<SyncResult>();\n+\n+        for (SyncResult syncResult : syncResults) {\n+            switch (syncResult.getStatus()) {\n+                case SUCCESS:\n+                    switch (syncResult.getOperation()) {\n+                        case CREATE:\n+                            created.add(syncResult);\n+                            break;\n+\n+                        case UPDATE:\n+                            updated.add(syncResult);\n+                            break;\n+\n+                        case DELETE:\n+                            deleted.add(syncResult);\n+                            break;\n+\n+                        default:\n+                    }\n+                    break;\n+\n+                case FAILURE:\n+                    switch (syncResult.getOperation()) {\n+                        case CREATE:\n+                            createdFailed.add(syncResult);\n+                            break;\n+\n+                        case UPDATE:\n+                            updatedFailed.add(syncResult);\n+                            break;\n+\n+                        case DELETE:\n+                            deletedFailed.add(syncResult);\n+                            break;\n+\n+                        default:\n+                    }\n+                    break;\n+\n+                default:\n+            }\n+        }\n+\n+        // Summary, also to be included for FAILURE and ALL, so create it anyway.\n+        report.append(\"Users [created/failures]: \").append(created.size()).append('/').append(createdFailed.size())\n+                .append(' ').append(\"[updated/failures]: \").append(updated.size()).append('/').append(\n+                updatedFailed.size()).append(' ').append(\"[deleted/ failures]: \").append(deleted.size())\n+                .append('/').append(deletedFailed.size());\n+\n+        // Failures\n+        if (syncTraceLevel == TraceLevel.FAILURES || syncTraceLevel == TraceLevel.ALL) {\n+\n+            if (!createdFailed.isEmpty()) {\n+                report.append(\"\\n\\nFailed to create: \");\n+                report.append(SyncResult.reportSetOfSynchronizationResult(createdFailed, syncTraceLevel));\n+            }\n+            if (!updatedFailed.isEmpty()) {\n+                report.append(\"\\nFailed to update: \");\n+                report.append(SyncResult.reportSetOfSynchronizationResult(updatedFailed, syncTraceLevel));\n+            }\n+            if (!deletedFailed.isEmpty()) {\n+                report.append(\"\\nFailed to delete: \");\n+                report.append(SyncResult.reportSetOfSynchronizationResult(deletedFailed, syncTraceLevel));\n+            }\n+        }\n+\n+        // Succeeded, only if on 'ALL' level\n+        if (syncTraceLevel == TraceLevel.ALL) {\n+            report.append(\"\\n\\nCreated:\\n\")\n+                    .append(SyncResult.reportSetOfSynchronizationResult(created, syncTraceLevel))\n+                    .append(\"\\nUpdated:\\n\")\n+                    .append(SyncResult.reportSetOfSynchronizationResult(updated, syncTraceLevel))\n+                    .append(\"\\nDeleted:\\n\")\n+                    .append(SyncResult.reportSetOfSynchronizationResult(deleted, syncTraceLevel));\n+        }\n+\n+        return report.toString();\n+    }\n+\n+    /**\n+     * Used to simulate authentication in order to perform updates through AbstractUserWorkflowAdapter.\n+     */\n+    private void setupSecurity() {\n+        final List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();\n+\n+        for (Entitlement entitlement : entitlementDAO.findAll()) {\n+            authorities.add(new SimpleGrantedAuthority(entitlement.getName()));\n+        }\n+\n+        final UserDetails userDetails = new User(\"admin\", \"FAKE_PASSWORD\", true, true, true, true, authorities);\n+\n+        SecurityContextHolder.getContext().setAuthentication(\n+                new UsernamePasswordAuthenticationToken(userDetails, \"FAKE_PASSWORD\", authorities));\n+    }\n+\n+    @Override\n+    protected String doExecute(final boolean dryRun) throws JobExecutionException {\n+        // get all entitlements to perform updates\n+        if (EntitlementUtil.getOwnedEntitlementNames().isEmpty()) {\n+            setupSecurity();\n+        }\n+\n+        if (!(task instanceof SyncTask)) {\n+            throw new JobExecutionException(\"Task \" + taskId + \" isn't a SyncTask\");\n+        }\n+\n+        final SyncTask syncTask = (SyncTask) this.task;\n+\n+        ConnectorFacadeProxy connector;\n+        try {\n+            connector = connInstanceLoader.getConnector(syncTask.getResource());\n+        } catch (Exception e) {\n+            final String msg = String.format(\"Connector instance bean for resource %s and connInstance %s not found\",\n+                    syncTask.getResource(), syncTask.getResource().getConnector());\n+\n+            throw new JobExecutionException(msg, e);\n+        }\n+\n+        final SchemaMapping accountIdMap = SchemaMappingUtil.getAccountIdMapping(syncTask.getResource().getMappings());\n+\n+        if (accountIdMap == null) {\n+            throw new JobExecutionException(\"Invalid account id mapping for resource \" + syncTask.getResource());\n+        }\n+\n+        LOG.debug(\"Execute synchronization with token {}\", syncTask.getResource().getSyncToken());\n+\n+        final List<SyncResult> results = new ArrayList<SyncResult>();\n+\n+        actions.beforeAll(syncTask);\n+\n+        final SyncPolicy syncPolicy = syncTask.getResource().getSyncPolicy();\n+        final ConflictResolutionAction resAct = syncPolicy == null || syncPolicy.getSpecification() == null\n+                ? ConflictResolutionAction.IGNORE\n+                : ((SyncPolicySpec) syncPolicy.getSpecification()).getConflictResolutionAction();\n+\n+        // Prepare hanlder for SyncDelta objects\n+        final SyncopeSyncResultHanlder handler =\n+                (SyncopeSyncResultHanlder) ((DefaultListableBeanFactory) ApplicationContextProvider.\n+                getApplicationContext().getBeanFactory()).createBean(\n+                SyncopeSyncResultHanlder.class, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+        handler.setActions(actions);\n+        handler.setDryRun(dryRun);\n+        handler.setResAct(resAct);\n+        handler.setResults(results);\n+        handler.setSyncTask(syncTask);\n+\n+        try {\n+            if (syncTask.isFullReconciliation()) {\n+                connector.getAllObjects(ObjectClass.ACCOUNT, handler,\n+                        connector.getOperationOptions(syncTask.getResource()));\n+            } else {\n+                connector.sync(ObjectClass.ACCOUNT, syncTask.getResource().getSyncToken(), handler,\n+                        connector.getOperationOptions(syncTask.getResource()));\n+            }\n+\n+            if (!dryRun && !syncTask.isFullReconciliation()) {\n+                try {\n+                    ExternalResource resource = resourceDAO.find(syncTask.getResource().getName());\n+                    resource.setSyncToken(connector.getLatestSyncToken(ObjectClass.ACCOUNT));\n+                    resourceDAO.save(resource);\n+                } catch (Exception e) {\n+                    throw new JobExecutionException(\"While updating SyncToken\", e);\n+                }\n+            }\n+        } catch (Exception e) {\n+            throw new JobExecutionException(\"While syncing on connector\", e);\n+        }\n+\n+        actions.afterAll(syncTask, results);\n+\n+        final String result = createReport(results, syncTask.getResource().getSyncTraceLevel(), dryRun);\n+\n+        LOG.debug(\"Sync result: {}\", result);\n+\n+        return result.toString();\n+    }\n+\n+    @Override\n+    protected boolean hasToBeRegistered(final TaskExec execution) {\n+        SyncTask syncTask = (SyncTask) task;\n+\n+        // True if either failed and failures have to be registered, or if ALL has to be registered.\n+        return (Status.valueOf(execution.getStatus()) == Status.FAILURE\n+                && syncTask.getResource().getSyncTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal())\n+                || syncTask.getResource().getSyncTraceLevel() == TraceLevel.ALL;\n+    }\n+}"},{"sha":"bec27cc650e503778df7dd1b9db020d0ce3e206f","filename":"core/src/main/java/org/apache/syncope/core/sync/SyncResult.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncResult.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -16,14 +16,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.scheduling;\n+package org.apache.syncope.core.sync;\n \n import java.util.Collection;\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n import org.apache.commons.lang.builder.ToStringStyle;\n-import org.apache.syncope.core.scheduling.AbstractTaskJob.Status;\n+import org.apache.syncope.core.quartz.AbstractTaskJob.Status;\n import org.apache.syncope.types.TraceLevel;\n \n public class SyncResult {","previous_filename":"core/src/main/java/org/apache/syncope/core/scheduling/SyncResult.java"},{"sha":"79981dabc656b8247734a8fea4c5cb531ecbbf6e","filename":"core/src/main/java/org/apache/syncope/core/sync/SyncopeSyncResultHanlder.java","status":"renamed","additions":128,"deletions":373,"changes":501,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncopeSyncResultHanlder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncopeSyncResultHanlder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncopeSyncResultHanlder.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.scheduling;\n+package org.apache.syncope.core.sync;\n \n import java.util.ArrayList;\n import java.util.Collection;\n@@ -29,29 +29,22 @@\n import org.apache.syncope.client.search.NodeCond;\n import org.apache.syncope.client.search.SyncopeUserCond;\n import org.apache.syncope.client.to.UserTO;\n-import org.apache.syncope.core.init.ConnInstanceLoader;\n import org.apache.syncope.core.notification.NotificationManager;\n-import org.apache.syncope.core.persistence.beans.Entitlement;\n-import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.SchemaMapping;\n-import org.apache.syncope.core.persistence.beans.SyncPolicy;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n-import org.apache.syncope.core.persistence.beans.TaskExec;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.beans.user.UAttrValue;\n import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n-import org.apache.syncope.core.persistence.dao.ResourceDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.persistence.dao.UserSearchDAO;\n-import org.apache.syncope.core.propagation.ConnectorFacadeProxy;\n import org.apache.syncope.core.propagation.PropagationException;\n import org.apache.syncope.core.propagation.PropagationManager;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.quartz.AbstractTaskJob;\n import org.apache.syncope.core.rest.controller.InvalidSearchConditionException;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n-import org.apache.syncope.core.scheduling.SyncResult.Operation;\n import org.apache.syncope.core.util.ConnObjectUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.apache.syncope.core.util.NotFoundException;\n@@ -60,41 +53,29 @@\n import org.apache.syncope.core.workflow.WorkflowResult;\n import org.apache.syncope.types.ConflictResolutionAction;\n import org.apache.syncope.types.SyncPolicySpec;\n-import org.apache.syncope.types.TraceLevel;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n-import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n+import org.identityconnectors.framework.common.objects.SyncDeltaType;\n import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n import org.quartz.JobExecutionException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n-import org.springframework.security.core.GrantedAuthority;\n-import org.springframework.security.core.authority.SimpleGrantedAuthority;\n-import org.springframework.security.core.context.SecurityContextHolder;\n-import org.springframework.security.core.userdetails.User;\n-import org.springframework.security.core.userdetails.UserDetails;\n-\n-/**\n- * Job for executing synchronization tasks.\n- *\n- * @see org.apache.syncope.core.scheduling.Job\n- * @see SyncTask\n- */\n-public class SyncJob extends AbstractTaskJob {\n+\n+public class SyncopeSyncResultHanlder implements SyncResultsHandler {\n \n     /**\n-     * ConnInstance loader.\n+     * Logger.\n      */\n-    @Autowired\n-    private ConnInstanceLoader connInstanceLoader;\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeSyncResultHanlder.class);\n \n     /**\n-     * Resource DAO.\n+     * Entitlement DAO.\n      */\n     @Autowired\n-    private ResourceDAO resourceDAO;\n+    private EntitlementDAO entitlementDAO;\n \n     /**\n      * User DAO.\n@@ -109,10 +90,10 @@ public class SyncJob extends AbstractTaskJob {\n     private UserSearchDAO userSearchDAO;\n \n     /**\n-     * Entitlement DAO.\n+     * ConnectorObject util.\n      */\n     @Autowired\n-    private EntitlementDAO entitlementDAO;\n+    private ConnObjectUtil connObjectUtil;\n \n     /**\n      * User workflow adapter.\n@@ -139,35 +120,62 @@ public class SyncJob extends AbstractTaskJob {\n     private UserDataBinder userDataBinder;\n \n     /**\n-     * SyncJob actions.\n-     */\n-    private SyncJobActions actions;\n-\n-    /**\n-     * ConnectorObject util.\n+     * Notification Manager.\n      */\n     @Autowired\n-    private ConnObjectUtil connObjectUtil;\n+    private NotificationManager notificationManager;\n \n     /**\n-     * Notification Manager.\n+     * SyncJob actions.\n      */\n-    @Autowired\n-    private NotificationManager notificationManager;\n+    private SyncActions actions;\n+\n+    private Collection<SyncResult> results;\n+\n+    private SyncTask syncTask;\n \n-    public void setActions(final SyncJobActions actions) {\n+    private ConflictResolutionAction resAct;\n+\n+    private boolean dryRun;\n+\n+    public void setActions(final SyncActions actions) {\n         this.actions = actions;\n     }\n \n+    public void setResults(final Collection<SyncResult> results) {\n+        this.results = results;\n+    }\n+\n+    public void setSyncTask(final SyncTask syncTask) {\n+        this.syncTask = syncTask;\n+    }\n+\n+    public void setResAct(final ConflictResolutionAction resAct) {\n+        this.resAct = resAct;\n+    }\n+\n+    public void setDryRun(final boolean dryRun) {\n+        this.dryRun = dryRun;\n+    }\n+\n+    @Override\n+    public boolean handle(final SyncDelta delta) {\n+        try {\n+            results.addAll(doHandle(delta));\n+            return true;\n+        } catch (JobExecutionException e) {\n+            LOG.error(\"Synchronization failed\", e);\n+            return false;\n+        }\n+    }\n+\n     /**\n      * Find users based on mapped uid value (or previous uid value, if updated).\n      *\n      * @param delta sync delta\n      * @return list of matching users\n      */\n     private List<Long> findExistingUsers(final SyncDelta delta) {\n-        final SyncTask syncTask = (SyncTask) this.task;\n-\n         final String uid = delta.getPreviousUid() == null\n                 ? delta.getUid().getUidValue()\n                 : delta.getPreviousUid().getUidValue();\n@@ -289,45 +297,41 @@ private List<Long> findExistingUsers(final SyncDelta delta) {\n     }\n \n     private List<SyncResult> createUser(SyncDelta delta, final boolean dryRun) throws JobExecutionException {\n-        if (!((SyncTask) task).isPerformCreate()) {\n+        if (!syncTask.isPerformCreate()) {\n             LOG.debug(\"SyncTask not configured for create\");\n             return Collections.EMPTY_LIST;\n         }\n \n         final SyncResult result = new SyncResult();\n-        result.setOperation(Operation.CREATE);\n+        result.setOperation(SyncResult.Operation.CREATE);\n \n-        UserTO userTO = connObjectUtil.getUserTO(delta.getObject(), (SyncTask) task);\n+        UserTO userTO = connObjectUtil.getUserTO(delta.getObject(), syncTask);\n \n         delta = actions.beforeCreate(delta, userTO);\n \n         if (dryRun) {\n             result.setUserId(0L);\n             result.setUsername(userTO.getUsername());\n-            result.setStatus(Status.SUCCESS);\n+            result.setStatus(AbstractTaskJob.Status.SUCCESS);\n         } else {\n             try {\n-                Boolean enabled = null;\n-\n                 // --------------------------\n                 // Check for status synchronization ...\n                 // --------------------------\n-                if (((SyncTask) this.task).isSyncStatus()) {\n-                    Attribute status = AttributeUtil.find(OperationalAttributes.ENABLE_NAME, delta.getObject()\n-                            .getAttributes());\n-\n-                    if (status != null) {\n-                        enabled = status.getValue() != null && !status.getValue().isEmpty()\n-                                ? (Boolean) status.getValue().get(0)\n-                                : null;\n+                Boolean enabled = null;\n+                if (syncTask.isSyncStatus()) {\n+                    Attribute status = AttributeUtil.find(OperationalAttributes.ENABLE_NAME,\n+                            delta.getObject().getAttributes());\n+                    if (status != null && status.getValue() != null && !status.getValue().isEmpty()) {\n+                        enabled = (Boolean) status.getValue().get(0);\n                     }\n                 }\n                 // --------------------------\n \n                 WorkflowResult<Map.Entry<Long, Boolean>> created = wfAdapter.create(userTO, true, enabled);\n \n-                List<PropagationTask> tasks = propagationManager.getCreateTaskIds(created, userTO.getPassword(), userTO\n-                        .getVirtualAttributes(), Collections.singleton(((SyncTask) this.task).getResource().getName()));\n+                List<PropagationTask> tasks = propagationManager.getCreateTaskIds(created, userTO.getPassword(),\n+                        userTO.getVirtualAttributes(), Collections.singleton(syncTask.getResource().getName()));\n \n                 taskExecutor.execute(tasks);\n \n@@ -337,11 +341,11 @@ private List<SyncResult> createUser(SyncDelta delta, final boolean dryRun) throw\n \n                 result.setUserId(created.getResult().getKey());\n                 result.setUsername(userTO.getUsername());\n-                result.setStatus(Status.SUCCESS);\n+                result.setStatus(AbstractTaskJob.Status.SUCCESS);\n             } catch (PropagationException e) {\n                 LOG.error(\"Could not propagate user \" + delta.getUid().getUidValue(), e);\n             } catch (Exception e) {\n-                result.setStatus(Status.FAILURE);\n+                result.setStatus(AbstractTaskJob.Status.FAILURE);\n                 result.setMessage(e.getMessage());\n                 LOG.error(\"Could not create user \" + delta.getUid().getUidValue(), e);\n             }\n@@ -354,7 +358,7 @@ private List<SyncResult> createUser(SyncDelta delta, final boolean dryRun) throw\n     private List<SyncResult> updateUsers(SyncDelta delta, final List<Long> users, final boolean dryRun)\n             throws JobExecutionException {\n \n-        if (!((SyncTask) task).isPerformUpdate()) {\n+        if (!syncTask.isPerformUpdate()) {\n             LOG.debug(\"SyncTask not configured for update\");\n             return Collections.EMPTY_LIST;\n         }\n@@ -365,26 +369,26 @@ private List<SyncResult> updateUsers(SyncDelta delta, final List<Long> users, fi\n \n         for (Long userId : users) {\n             final SyncResult result = new SyncResult();\n-            result.setOperation(Operation.UPDATE);\n+            result.setOperation(SyncResult.Operation.UPDATE);\n \n             try {\n                 UserTO userTO = userDataBinder.getUserTO(userId);\n                 try {\n \n-                    final UserMod userMod = connObjectUtil.getUserMod(userId, delta.getObject(), (SyncTask) task);\n+                    final UserMod userMod = connObjectUtil.getUserMod(userId, delta.getObject(), syncTask);\n                     delta = actions.beforeUpdate(delta, userTO, userMod);\n \n-                    result.setStatus(Status.SUCCESS);\n+                    result.setStatus(AbstractTaskJob.Status.SUCCESS);\n                     result.setUserId(userMod.getId());\n                     result.setUsername(userMod.getUsername());\n \n                     if (!dryRun) {\n                         WorkflowResult<Map.Entry<Long, Boolean>> updated = wfAdapter.update(userMod);\n \n-                        List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(updated, userMod\n-                                .getPassword(), userMod.getVirtualAttributesToBeRemoved(), userMod\n-                                .getVirtualAttributesToBeUpdated(), Collections.singleton(((SyncTask) this.task)\n-                                .getResource().getName()));\n+                        List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(updated,\n+                                userMod.getPassword(), userMod.getVirtualAttributesToBeRemoved(),\n+                                userMod.getVirtualAttributesToBeUpdated(),\n+                                Collections.singleton(syncTask.getResource().getName()));\n \n                         taskExecutor.execute(tasks);\n \n@@ -395,7 +399,7 @@ private List<SyncResult> updateUsers(SyncDelta delta, final List<Long> users, fi\n                 } catch (PropagationException e) {\n                     LOG.error(\"Could not propagate user \" + delta.getUid().getUidValue(), e);\n                 } catch (Exception e) {\n-                    result.setStatus(Status.FAILURE);\n+                    result.setStatus(AbstractTaskJob.Status.FAILURE);\n                     result.setMessage(e.getMessage());\n                     LOG.error(\"Could not update user \" + delta.getUid().getUidValue(), e);\n                 }\n@@ -415,7 +419,7 @@ private List<SyncResult> updateUsers(SyncDelta delta, final List<Long> users, fi\n     private List<SyncResult> deleteUsers(SyncDelta delta, final List<Long> users, final boolean dryRun)\n             throws JobExecutionException {\n \n-        if (!((SyncTask) task).isPerformDelete()) {\n+        if (!syncTask.isPerformDelete()) {\n             LOG.debug(\"SyncTask not configured for delete\");\n             return Collections.EMPTY_LIST;\n         }\n@@ -432,13 +436,13 @@ private List<SyncResult> deleteUsers(SyncDelta delta, final List<Long> users, fi\n                 final SyncResult result = new SyncResult();\n                 result.setUserId(userId);\n                 result.setUsername(userTO.getUsername());\n-                result.setOperation(Operation.DELETE);\n-                result.setStatus(Status.SUCCESS);\n+                result.setOperation(SyncResult.Operation.DELETE);\n+                result.setStatus(AbstractTaskJob.Status.SUCCESS);\n \n                 if (!dryRun) {\n                     try {\n                         List<PropagationTask> tasks = propagationManager.getDeleteTaskIds(userId,\n-                                ((SyncTask) this.task).getResource().getName());\n+                                syncTask.getResource().getName());\n                         taskExecutor.execute(tasks);\n \n                         notificationManager.createTasks(userId, Collections.singleton(\"delete\"));\n@@ -449,7 +453,7 @@ private List<SyncResult> deleteUsers(SyncDelta delta, final List<Long> users, fi\n                     try {\n                         wfAdapter.delete(userId);\n                     } catch (Exception e) {\n-                        result.setStatus(Status.FAILURE);\n+                        result.setStatus(AbstractTaskJob.Status.FAILURE);\n                         result.setMessage(e.getMessage());\n                         LOG.error(\"Could not delete user \" + userId, e);\n                     }\n@@ -468,324 +472,75 @@ private List<SyncResult> deleteUsers(SyncDelta delta, final List<Long> users, fi\n     }\n \n     /**\n-     * Create a textual report of the synchronization, based on the trace level.\n+     * Look into SyncDelta and take necessary actions (create / update / delete) on user(s).\n      *\n-     * @param syncResults Sync results\n-     * @param syncTraceLevel Sync trace level\n-     * @param dryRun dry run?\n-     * @return report as string\n-     */\n-    private String createReport(final List<SyncResult> syncResults, final TraceLevel syncTraceLevel,\n-            final boolean dryRun) {\n-\n-        if (syncTraceLevel == TraceLevel.NONE) {\n-            return null;\n-        }\n-\n-        StringBuilder report = new StringBuilder();\n-\n-        if (dryRun) {\n-            report.append(\"==>Dry run only, no modifications were made<==\\n\\n\");\n-        }\n-\n-        List<SyncResult> created = new ArrayList<SyncResult>();\n-        List<SyncResult> createdFailed = new ArrayList<SyncResult>();\n-        List<SyncResult> updated = new ArrayList<SyncResult>();\n-        List<SyncResult> updatedFailed = new ArrayList<SyncResult>();\n-        List<SyncResult> deleted = new ArrayList<SyncResult>();\n-        List<SyncResult> deletedFailed = new ArrayList<SyncResult>();\n-\n-        for (SyncResult syncResult : syncResults) {\n-            switch (syncResult.getStatus()) {\n-                case SUCCESS:\n-                    switch (syncResult.getOperation()) {\n-                        case CREATE:\n-                            created.add(syncResult);\n-                            break;\n-\n-                        case UPDATE:\n-                            updated.add(syncResult);\n-                            break;\n-\n-                        case DELETE:\n-                            deleted.add(syncResult);\n-                            break;\n-\n-                        default:\n-                    }\n-                    break;\n-\n-                case FAILURE:\n-                    switch (syncResult.getOperation()) {\n-                        case CREATE:\n-                            createdFailed.add(syncResult);\n-                            break;\n-\n-                        case UPDATE:\n-                            updatedFailed.add(syncResult);\n-                            break;\n-\n-                        case DELETE:\n-                            deletedFailed.add(syncResult);\n-                            break;\n-\n-                        default:\n-                    }\n-                    break;\n-\n-                default:\n-            }\n-        }\n-\n-        // Summary, also to be included for FAILURE and ALL, so create it anyway.\n-        report.append(\"Users [created/failures]: \").append(created.size()).append('/').append(createdFailed.size())\n-                .append(' ').append(\"[updated/failures]: \").append(updated.size()).append('/').append(\n-                updatedFailed.size()).append(' ').append(\"[deleted/ failures]: \").append(deleted.size())\n-                .append('/').append(deletedFailed.size());\n-\n-        // Failures\n-        if (syncTraceLevel == TraceLevel.FAILURES || syncTraceLevel == TraceLevel.ALL) {\n-\n-            if (!createdFailed.isEmpty()) {\n-                report.append(\"\\n\\nFailed to create: \");\n-                report.append(SyncResult.reportSetOfSynchronizationResult(createdFailed, syncTraceLevel));\n-            }\n-            if (!updatedFailed.isEmpty()) {\n-                report.append(\"\\nFailed to update: \");\n-                report.append(SyncResult.reportSetOfSynchronizationResult(updatedFailed, syncTraceLevel));\n-            }\n-            if (!deletedFailed.isEmpty()) {\n-                report.append(\"\\nFailed to delete: \");\n-                report.append(SyncResult.reportSetOfSynchronizationResult(deletedFailed, syncTraceLevel));\n-            }\n-        }\n-\n-        // Succeeded, only if on 'ALL' level\n-        if (syncTraceLevel == TraceLevel.ALL) {\n-            report.append(\"\\n\\nCreated:\\n\")\n-                    .append(SyncResult.reportSetOfSynchronizationResult(created, syncTraceLevel))\n-                    .append(\"\\nUpdated:\\n\")\n-                    .append(SyncResult.reportSetOfSynchronizationResult(updated, syncTraceLevel))\n-                    .append(\"\\nDeleted:\\n\")\n-                    .append(SyncResult.reportSetOfSynchronizationResult(deleted, syncTraceLevel));\n-        }\n-\n-        return report.toString();\n-    }\n-\n-    /**\n-     * Used to simulate authentication in order to perform updates through AbstractUserWorkflowAdapter.\n-     */\n-    private void setupSecurity() {\n-        final List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();\n-\n-        for (Entitlement entitlement : entitlementDAO.findAll()) {\n-            authorities.add(new SimpleGrantedAuthority(entitlement.getName()));\n-        }\n-\n-        final UserDetails userDetails = new User(\"admin\", \"FAKE_PASSWORD\", true, true, true, true, authorities);\n-\n-        SecurityContextHolder.getContext().setAuthentication(\n-                new UsernamePasswordAuthenticationToken(userDetails, \"FAKE_PASSWORD\", authorities));\n-    }\n-\n-    @Override\n-    protected String doExecute(final boolean dryRun) throws JobExecutionException {\n-\n-        // get all entitlements to perform updates\n-        if (EntitlementUtil.getOwnedEntitlementNames().isEmpty()) {\n-            setupSecurity();\n-        }\n-\n-        if (!(task instanceof SyncTask)) {\n-            throw new JobExecutionException(\"Task \" + taskId + \" isn't a SyncTask\");\n-        }\n-\n-        final SyncTask syncTask = (SyncTask) this.task;\n-\n-        ConnectorFacadeProxy connector;\n-        try {\n-            connector = connInstanceLoader.getConnector(syncTask.getResource());\n-        } catch (Exception e) {\n-            final String msg = String.format(\"Connector instance bean for resource %s and connInstance %s not found\",\n-                    syncTask.getResource(), syncTask.getResource().getConnector());\n-\n-            throw new JobExecutionException(msg, e);\n-        }\n-\n-        final SchemaMapping accountIdMap = SchemaMappingUtil.getAccountIdMapping(syncTask.getResource().getMappings());\n-\n-        if (accountIdMap == null) {\n-            throw new JobExecutionException(\"Invalid account id mapping for resource \" + syncTask.getResource());\n-        }\n-\n-        LOG.debug(\"Execute synchronization with token {}\", syncTask.getResource().getSyncToken() != null\n-                ? syncTask.getResource().getSyncToken().getValue()\n-                : null);\n-\n-        final List<SyncResult> results = new ArrayList<SyncResult>();\n-\n-        actions.beforeAll(syncTask);\n-\n-        try {\n-            final SyncPolicy syncPolicy = syncTask.getResource().getSyncPolicy();\n-\n-            final ConflictResolutionAction resAct = syncPolicy == null || syncPolicy.getSpecification() == null\n-                    ? ConflictResolutionAction.IGNORE\n-                    : ((SyncPolicySpec) syncPolicy.getSpecification()).getConflictResolutionAction();\n-\n-            final SyncJobResultsHandler handler = new SyncJobResultsHandler(results, syncTask, resAct, dryRun);\n-            if (syncTask.isFullReconciliation()) {\n-                connector.getAllObjects(ObjectClass.ACCOUNT, handler,\n-                        connector.getOperationOptions(syncTask.getResource()));\n-            } else {\n-                connector.sync(ObjectClass.ACCOUNT, syncTask.getResource().getSyncToken(), handler,\n-                        connector.getOperationOptions(syncTask.getResource()));\n-            }\n-\n-            if (!dryRun && !syncTask.isFullReconciliation()) {\n-                try {\n-                    ExternalResource resource = resourceDAO.find(syncTask.getResource().getName());\n-                    resource.setSyncToken(connector.getLatestSyncToken(ObjectClass.ACCOUNT));\n-                    resourceDAO.save(resource);\n-                } catch (Exception e) {\n-                    throw new JobExecutionException(\"While updating SyncToken\", e);\n-                }\n-            }\n-        } catch (Exception e) {\n-            throw new JobExecutionException(\"While syncing on connector\", e);\n-        }\n-\n-        actions.afterAll(syncTask, results);\n-\n-        final String result = createReport(results, syncTask.getResource().getSyncTraceLevel(), dryRun);\n-\n-        LOG.debug(\"Sync result: {}\", result);\n-\n-        return result.toString();\n-    }\n-\n-    /**\n-     * Handle deltas.\n-     *\n-     * @param syncTask sync task.\n-     * @param delta delta.\n-     * @param resAct conflict resolution action.\n-     * @param dryRun dry run.\n-     * @return list of synchronization results.\n+     * @param delta returned by the underlying connector\n+     * @return list of synchronization results\n      * @throws JobExecutionException in case of synchronization failure.\n      */\n-    protected final List<SyncResult> handleDelta(final SyncTask syncTask, final SyncDelta delta,\n-            final ConflictResolutionAction resAct, final boolean dryRun) throws JobExecutionException {\n-\n+    protected final List<SyncResult> doHandle(final SyncDelta delta) throws JobExecutionException {\n         final List<SyncResult> results = new ArrayList<SyncResult>();\n \n         LOG.debug(\"Process '{}' for '{}'\", delta.getDeltaType(), delta.getUid().getUidValue());\n \n         final List<Long> users = findExistingUsers(delta);\n \n-        switch (delta.getDeltaType()) {\n-            case CREATE_OR_UPDATE:\n-                if (users.isEmpty()) {\n-                    results.addAll(createUser(delta, dryRun));\n-                } else if (users.size() == 1) {\n-                    results.addAll(updateUsers(delta, users.subList(0, 1), dryRun));\n-                } else {\n-                    switch (resAct) {\n-                        case IGNORE:\n-                            LOG.error(\"More than one match {}\", users);\n-                            break;\n+        if (SyncDeltaType.CREATE_OR_UPDATE == delta.getDeltaType()) {\n+            if (users.isEmpty()) {\n+                results.addAll(createUser(delta, dryRun));\n+            } else if (users.size() == 1) {\n+                results.addAll(updateUsers(delta, users.subList(0, 1), dryRun));\n+            } else {\n+                switch (resAct) {\n+                    case IGNORE:\n+                        LOG.error(\"More than one match {}\", users);\n+                        break;\n \n-                        case FIRSTMATCH:\n-                            results.addAll(updateUsers(delta, users.subList(0, 1), dryRun));\n-                            break;\n+                    case FIRSTMATCH:\n+                        results.addAll(updateUsers(delta, users.subList(0, 1), dryRun));\n+                        break;\n \n-                        case LASTMATCH:\n-                            results.addAll(updateUsers(delta, users.subList(users.size() - 1, users.size()), dryRun));\n-                            break;\n+                    case LASTMATCH:\n+                        results.addAll(updateUsers(delta, users.subList(users.size() - 1, users.size()), dryRun));\n+                        break;\n \n-                        case ALL:\n-                            results.addAll(updateUsers(delta, users, dryRun));\n-                            break;\n+                    case ALL:\n+                        results.addAll(updateUsers(delta, users, dryRun));\n+                        break;\n \n-                        default:\n-                    }\n+                    default:\n                 }\n-                break;\n+            }\n+        }\n \n-            case DELETE:\n-                if (users.isEmpty()) {\n-                    LOG.debug(\"No match found for deletion\");\n-                } else if (users.size() == 1) {\n-                    results.addAll(deleteUsers(delta, users, dryRun));\n-                } else {\n-                    switch (resAct) {\n-                        case IGNORE:\n-                            LOG.error(\"More than one match {}\", users);\n-                            break;\n+        if (SyncDeltaType.DELETE == delta.getDeltaType()) {\n+            if (users.isEmpty()) {\n+                LOG.debug(\"No match found for deletion\");\n+            } else if (users.size() == 1) {\n+                results.addAll(deleteUsers(delta, users, dryRun));\n+            } else {\n+                switch (resAct) {\n+                    case IGNORE:\n+                        LOG.error(\"More than one match {}\", users);\n+                        break;\n \n-                        case FIRSTMATCH:\n-                            results.addAll(deleteUsers(delta, users.subList(0, 1), dryRun));\n-                            break;\n+                    case FIRSTMATCH:\n+                        results.addAll(deleteUsers(delta, users.subList(0, 1), dryRun));\n+                        break;\n \n-                        case LASTMATCH:\n-                            results.addAll(deleteUsers(delta, users.subList(users.size() - 1, users.size()), dryRun));\n-                            break;\n+                    case LASTMATCH:\n+                        results.addAll(deleteUsers(delta, users.subList(users.size() - 1, users.size()), dryRun));\n+                        break;\n \n-                        case ALL:\n-                            results.addAll(deleteUsers(delta, users, dryRun));\n-                            break;\n+                    case ALL:\n+                        results.addAll(deleteUsers(delta, users, dryRun));\n+                        break;\n \n-                        default:\n-                    }\n+                    default:\n                 }\n-\n-                break;\n-\n-            default:\n+            }\n         }\n \n         return results;\n     }\n-\n-    @Override\n-    protected boolean hasToBeRegistered(final TaskExec execution) {\n-        SyncTask syncTask = (SyncTask) task;\n-\n-        // True if either failed and failures have to be registered, or if ALL has to be registered.\n-        return (Status.valueOf(execution.getStatus()) == Status.FAILURE\n-                && syncTask.getResource().getSyncTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal())\n-                || syncTask.getResource().getSyncTraceLevel() == TraceLevel.ALL;\n-    }\n-\n-    private class SyncJobResultsHandler implements SyncResultsHandler {\n-\n-        private final Collection<SyncResult> results;\n-\n-        private final SyncTask syncTask;\n-\n-        private final ConflictResolutionAction resAct;\n-\n-        private final boolean dryRun;\n-\n-        public SyncJobResultsHandler(final Collection<SyncResult> results, final SyncTask syncTask,\n-                final ConflictResolutionAction resAct, final boolean dryRun) {\n-\n-            this.results = results;\n-            this.syncTask = syncTask;\n-            this.resAct = resAct;\n-            this.dryRun = dryRun;\n-        }\n-\n-        @Override\n-        public boolean handle(final SyncDelta delta) {\n-            try {\n-                results.addAll(handleDelta(syncTask, delta, resAct, dryRun));\n-                return true;\n-            } catch (JobExecutionException e) {\n-                LOG.error(\"Synchronization failed\", e);\n-                return false;\n-            }\n-        }\n-    }\n }","previous_filename":"core/src/main/java/org/apache/syncope/core/scheduling/SyncJob.java"},{"sha":"b507847f36f2872fa9d5cf63d2bee6903f87736b","filename":"core/src/main/resources/logback.xml","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -101,7 +101,19 @@ under the License.\n     <appender-ref ref=\"main\"/>\n   </logger>\n \n-  <logger name=\"org.apache.syncope.core.scheduling\" additivity=\"false\">\n+  <logger name=\"org.apache.syncope.core.quartz\" additivity=\"false\">\n+    <level value=\"INFO\"/>\n+    <appender-ref ref=\"main\"/>\n+  </logger>\n+  <logger name=\"org.apache.syncope.core.sync\" additivity=\"false\">\n+    <level value=\"INFO\"/>\n+    <appender-ref ref=\"main\"/>\n+  </logger>\n+  <logger name=\"org.apache.syncope.core.notification\" additivity=\"false\">\n+    <level value=\"INFO\"/>\n+    <appender-ref ref=\"main\"/>\n+  </logger>\n+  <logger name=\"org.apache.syncope.core.report\" additivity=\"false\">\n     <level value=\"INFO\"/>\n     <appender-ref ref=\"main\"/>\n   </logger>"},{"sha":"862597f51b6238cd63c0e9126abdfc77fac55666","filename":"core/src/main/resources/schedulingContext.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fresources%2FschedulingContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Fmain%2Fresources%2FschedulingContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FschedulingContext.xml?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -33,7 +33,7 @@ under the License.\n     <property name=\"dataSource\" ref=\"dataSource\"/>\n     <property name=\"transactionManager\" ref=\"transactionManager\"/>\n     <property name=\"jobFactory\">\n-      <bean class=\"org.apache.syncope.core.scheduling.SpringBeanJobFactory\"/>\n+      <bean class=\"org.apache.syncope.core.quartz.SpringBeanJobFactory\"/>\n     </property>\n     <property name=\"quartzProperties\">\n       <props>\n@@ -50,5 +50,5 @@ under the License.\n     </property>\n   </bean>\n     \n-  <bean id=\"notificationJob\" class=\"org.apache.syncope.core.scheduling.NotificationJob\"/>\n+  <bean id=\"notificationJob\" class=\"org.apache.syncope.core.notification.NotificationJob\"/>\n </beans>"},{"sha":"12ef52d359c90c1900b459c0df43568fd8a8dcab","filename":"core/src/test/java/org/apache/syncope/core/notification/NotificationTest.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -48,7 +48,6 @@\n import org.apache.syncope.core.rest.UserTestITCase;\n import org.apache.syncope.core.rest.controller.TaskController;\n import org.apache.syncope.core.rest.controller.UserController;\n-import org.apache.syncope.core.scheduling.NotificationJob;\n import org.apache.syncope.types.IntMappingType;\n import org.apache.syncope.types.TraceLevel;\n import org.junit.AfterClass;"},{"sha":"157a52792f394036c3816ca2b4d14e07120ff3a8","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/TaskTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n-import org.apache.syncope.core.scheduling.TestSyncJobActions;\n+import org.apache.syncope.core.quartz.TestSyncActions;\n import org.apache.syncope.types.PropagationMode;\n import org.apache.syncope.types.PropagationOperation;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -138,7 +138,7 @@ public void saveSyncTask() {\n         assertNotNull(exception);\n \n         task.setResource(resource);\n-        task.setJobActionsClassName(getClass().getName());\n+        task.setActionsClassName(getClass().getName());\n \n         // this save() fails because jobActionsClassName does not implement \n         // the right interface\n@@ -150,7 +150,7 @@ public void saveSyncTask() {\n         }\n         assertNotNull(exception);\n \n-        task.setJobActionsClassName(TestSyncJobActions.class.getName());\n+        task.setActionsClassName(TestSyncActions.class.getName());\n         // this save() finally works\n         task = taskDAO.save(task);\n         assertNotNull(task);\n@@ -186,7 +186,7 @@ public void issueSYNCOPE144() {\n         task.setResource(resource);\n         task.setName(\"issueSYNCOPE144\");\n         task.setDescription(\"issueSYNCOPE144 Description\");\n-        task.setJobActionsClassName(TestSyncJobActions.class.getName());\n+        task.setActionsClassName(TestSyncActions.class.getName());\n \n         task = taskDAO.save(task);\n         assertNotNull(task);"},{"sha":"4b988f1283940f9bdc571f03a1302f7f98e5eec5","filename":"core/src/test/java/org/apache/syncope/core/quartz/TestSyncActions.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FTestSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FTestSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FTestSyncActions.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -16,18 +16,18 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.scheduling;\n+package org.apache.syncope.core.quartz;\n \n-import org.apache.syncope.core.scheduling.DefaultSyncJobActions;\n import java.util.Collections;\n-import org.identityconnectors.framework.common.objects.SyncDelta;\n-import org.quartz.JobExecutionException;\n import org.apache.syncope.client.mod.AttributeMod;\n import org.apache.syncope.client.mod.UserMod;\n import org.apache.syncope.client.to.AttributeTO;\n import org.apache.syncope.client.to.UserTO;\n+import org.apache.syncope.core.sync.DefaultSyncActions;\n+import org.identityconnectors.framework.common.objects.SyncDelta;\n+import org.quartz.JobExecutionException;\n \n-public class TestSyncJobActions extends DefaultSyncJobActions {\n+public class TestSyncActions extends DefaultSyncActions {\n \n     private int counter = 0;\n ","previous_filename":"core/src/test/java/org/apache/syncope/core/scheduling/TestSyncJobActions.java"},{"sha":"d7f826d336cd2e2c60f1df8b99e840449d8ddc13","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -38,10 +38,10 @@\n import org.apache.syncope.client.to.SyncTaskTO;\n import org.apache.syncope.client.to.TaskTO;\n import org.apache.syncope.client.to.UserTO;\n-import org.apache.syncope.core.scheduling.SyncJob;\n+import org.apache.syncope.core.sync.SyncJob;\n import org.apache.syncope.core.init.SpringContextInitializer;\n import org.apache.syncope.types.PropagationTaskExecStatus;\n-import org.apache.syncope.core.scheduling.TestSyncJobActions;\n+import org.apache.syncope.core.quartz.TestSyncActions;\n import org.apache.syncope.types.IntMappingType;\n import org.apache.syncope.types.TraceLevel;\n \n@@ -55,8 +55,8 @@ public void getJobClasses() {\n     }\n \n     @Test\n-    public void getJobActionsClasses() {\n-        Set<String> actions = restTemplate.getForObject(BASE_URL + \"task/jobActionsClasses.json\", Set.class);\n+    public void getSyncActionsClasses() {\n+        Set<String> actions = restTemplate.getForObject(BASE_URL + \"task/syncActionsClasses.json\", Set.class);\n         assertNotNull(actions);\n         assertFalse(actions.isEmpty());\n     }\n@@ -253,7 +253,7 @@ public void sync() {\n         assertNotNull(task);\n \n         //  add custom SyncJob actions\n-        task.setJobActionsClassName(TestSyncJobActions.class.getName());\n+        task.setActionsClassName(TestSyncActions.class.getName());\n \n         //  add user template\n         UserTO template = new UserTO();\n@@ -282,7 +282,7 @@ public void sync() {\n         SyncTaskTO actual = restTemplate.postForObject(BASE_URL + \"task/update/sync\", task, SyncTaskTO.class);\n         assertNotNull(actual);\n         assertEquals(task.getId(), actual.getId());\n-        assertEquals(TestSyncJobActions.class.getName(), actual.getJobActionsClassName());\n+        assertEquals(TestSyncActions.class.getName(), actual.getActionsClassName());\n \n         SyncTaskTO taskTO = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, 4L);\n "},{"sha":"20f046206efbf11b68d3de93375bb07bce5af3f5","filename":"core/src/test/resources/content.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/119e8aab47266cfdf799bdf4ee334039627d2898/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=119e8aab47266cfdf799bdf4ee334039627d2898","patch":"@@ -571,19 +571,19 @@ under the License.\n         xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E\"/>\n   <Task DTYPE=\"SyncTask\" id=\"4\" name=\"CSV Task\" resource_name=\"resource-csv\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n-        jobClassName=\"org.apache.syncope.core.scheduling.SyncJob\"/>\n-  <Task DTYPE=\"SchedTask\" id=\"5\" name=\"SampleJob Task\" jobClassName=\"org.apache.syncope.core.scheduling.SampleJob\" cronExpression=\"0 0 0 1 * ?\"/>\n+        jobClassName=\"org.apache.syncope.core.sync.SyncJob\"/>\n+  <Task DTYPE=\"SchedTask\" id=\"5\" name=\"SampleJob Task\" jobClassName=\"org.apache.syncope.core.quartz.SampleJob\" cronExpression=\"0 0 0 1 * ?\"/>\n   <Task DTYPE=\"PropagationTask\" id=\"6\" propagationMode=\"TWO_PHASES\" propagationOperation=\"UPDATE\"\n         resource_name=\"ws-target-resource-nopropagation\" syncopeUser_id=\"1\"\n         xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Efullname%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Efullname%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E%0A\"/>\n   <Task DTYPE=\"SyncTask\" id=\"7\" name=\"TestDB Task\" resource_name=\"resource-testdb\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" fullReconciliation=\"1\"\n-        jobClassName=\"org.apache.syncope.core.scheduling.SyncJob\"/>\n+        jobClassName=\"org.apache.syncope.core.sync.SyncJob\"/>\n   <Task DTYPE=\"NotificationTask\" id=\"8\" sender=\"admin@prova.org\" subject=\"Notification for SYNCOPE-81\" \n         textBody=\"NOTIFICATION-81\" htmlBody=\"NOTIFICATION-81\" traceLevel=\"ALL\"/>\n   <Task DTYPE=\"SyncTask\" id=\"9\" name=\"TestDB2 Task\" resource_name=\"resource-testdb2\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" fullReconciliation=\"1\"\n-        jobClassName=\"org.apache.syncope.core.scheduling.SyncJob\"/>\n+        jobClassName=\"org.apache.syncope.core.sync.SyncJob\"/>\n         \n   <NotificationTask_recipients notificationtask_id=\"8\" address=\"recipient@prova.org\"/>\n "}]}