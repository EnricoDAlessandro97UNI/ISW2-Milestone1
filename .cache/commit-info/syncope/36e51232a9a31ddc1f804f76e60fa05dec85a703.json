{"sha":"36e51232a9a31ddc1f804f76e60fa05dec85a703","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM2ZTUxMjMyYTlhMzFkZGMxZjgwNGY3NmU2MGZhMDVkZWM4NWE3MDM=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-19T06:45:36Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-19T06:45:36Z"},"message":"Find children features on roles\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246397 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7478eb34be45f931d87c580fec715888b278d248","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7478eb34be45f931d87c580fec715888b278d248"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/36e51232a9a31ddc1f804f76e60fa05dec85a703","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/36e51232a9a31ddc1f804f76e60fa05dec85a703","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/36e51232a9a31ddc1f804f76e60fa05dec85a703","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/36e51232a9a31ddc1f804f76e60fa05dec85a703/comments","author":null,"committer":null,"parents":[{"sha":"5f1a377f5b0d772db335fda37914623d8c2db0a8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5f1a377f5b0d772db335fda37914623d8c2db0a8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5f1a377f5b0d772db335fda37914623d8c2db0a8"}],"stats":{"total":150,"additions":109,"deletions":41},"files":[{"sha":"c9802d4e6fa9b43991e27d006d4b02dad7a5e780","filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeRoleDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36e51232a9a31ddc1f804f76e60fa05dec85a703/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeRoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36e51232a9a31ddc1f804f76e60fa05dec85a703/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeRoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeRoleDAO.java?ref=36e51232a9a31ddc1f804f76e60fa05dec85a703","patch":"@@ -23,6 +23,8 @@ public interface SyncopeRoleDAO extends DAO {\n \n     SyncopeRole find(Long id);\n \n+    List<SyncopeRole> findChildren(Long roleId);\n+\n     List<SyncopeRole> findAll();\n \n     SyncopeRole save(SyncopeRole syncopeRole);"},{"sha":"53ead88769b125dc224e249b78367b78b0f578c0","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeRoleDAOImpl.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36e51232a9a31ddc1f804f76e60fa05dec85a703/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36e51232a9a31ddc1f804f76e60fa05dec85a703/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java?ref=36e51232a9a31ddc1f804f76e60fa05dec85a703","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.persistence.dao.impl;\n \n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n import javax.persistence.Query;\n@@ -53,6 +54,29 @@ public SyncopeRole find(Long id) {\n         return entityManager.find(SyncopeRole.class, id);\n     }\n \n+    private List<SyncopeRole> findChildren(Long roleId,\n+            List<SyncopeRole> children) {\n+\n+        Query query = entityManager.createQuery(\n+                \"SELECT r FROM SyncopeRole r WHERE \"\n+                + \"parent.id=:roleId\");\n+        query.setParameter(\"roleId\", roleId);\n+\n+        List<SyncopeRole> result = query.getResultList();\n+        children.addAll(result);\n+\n+        for (SyncopeRole role : result) {\n+            findChildren(role.getId(), children);\n+        }\n+\n+        return children;\n+    }\n+\n+    @Override\n+    public List<SyncopeRole> findChildren(Long roleId) {\n+        return findChildren(roleId, new ArrayList<SyncopeRole>());\n+    }\n+\n     @Override\n     public List<SyncopeRole> findAll() {\n         Query query = entityManager.createQuery(\"SELECT e FROM SyncopeRole e\");"},{"sha":"d859254377194d3fd143855b52e9235e18180d8c","filename":"core/src/main/java/org/syncope/core/rest/controller/RoleController.java","status":"modified","additions":18,"deletions":1,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36e51232a9a31ddc1f804f76e60fa05dec85a703/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36e51232a9a31ddc1f804f76e60fa05dec85a703/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=36e51232a9a31ddc1f804f76e60fa05dec85a703","patch":"@@ -28,7 +28,6 @@\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.syncope.client.to.RoleTO;\n import org.syncope.client.to.RoleTOs;\n-import org.syncope.client.to.SearchParameters;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n@@ -118,6 +117,24 @@ public RoleTO parent(HttpServletResponse response,\n                 : roleDataBinder.getRoleTO(role.getParent());\n     }\n \n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/children/{roleId}\")\n+    public RoleTOs children(HttpServletResponse response,\n+            @PathVariable(\"roleId\") Long roleId)\n+            throws IOException {\n+\n+        List<SyncopeRole> roles = syncopeRoleDAO.findChildren(roleId);\n+        List<RoleTO> roleTOs = new ArrayList<RoleTO>(roles.size());\n+\n+        for (SyncopeRole role : roles) {\n+            roleTOs.add(roleDataBinder.getRoleTO(role));\n+        }\n+\n+        RoleTOs result = new RoleTOs();\n+        result.setRoles(roleTOs);\n+        return result;\n+    }\n+\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/read/{roleId}\")\n     public RoleTO read(HttpServletResponse response,"},{"sha":"c901ab7b523d955b6e541a2574e7a9c84ae50ea6","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":33,"deletions":20,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36e51232a9a31ddc1f804f76e60fa05dec85a703/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36e51232a9a31ddc1f804f76e60fa05dec85a703/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=36e51232a9a31ddc1f804f76e60fa05dec85a703","patch":"@@ -74,17 +74,19 @@ protected <T extends AbstractAttributable> T fillAbstractAttributable(\n         AbstractAttributeValue attributeValue = null;\n         for (AttributeTO attributeTO : abstractAttributableTO.getAttributes()) {\n             schema = schemaDAO.find(attributeTO.getSchema(),\n-                                    attributableUtil.getSchemaClass());\n+                    attributableUtil.getSchemaClass());\n \n             // safely ignore invalid schemas from AttributeTO\n             // see http://code.google.com/p/syncope/issues/detail?id=17\n             if (schema == null) {\n-                if (log.isDebugEnabled())\n+                if (log.isDebugEnabled()) {\n                     log.debug(\"Ignoring invalid schema \"\n                             + attributeTO.getSchema());\n+                }\n             } else if (schema.isVirtual()) {\n-                if (log.isDebugEnabled())\n+                if (log.isDebugEnabled()) {\n                     log.debug(\"Ignoring virtual schema\" + schema.getName());\n+                }\n             } else {\n                 attribute = attributableUtil.newAttribute();\n                 attribute.setSchema(schema);\n@@ -96,15 +98,15 @@ protected <T extends AbstractAttributable> T fillAbstractAttributable(\n                 valuesProvided = schema.isMultivalue()\n                         ? attributeTO.getValues()\n                         : (attributeTO.getValues().isEmpty()\n-                           ? Collections.EMPTY_SET\n-                           : Collections.singleton(\n-                           attributeTO.getValues().iterator().next()));\n+                        ? Collections.EMPTY_SET\n+                        : Collections.singleton(\n+                        attributeTO.getValues().iterator().next()));\n                 for (String value : valuesProvided) {\n                     attributeValue = attributableUtil.newAttributeValue();\n \n                     try {\n                         attributeValue = attribute.addValue(value,\n-                                                            attributeValue);\n+                                attributeValue);\n                     } catch (ValidationException e) {\n                         log.error(\"Invalid value for attribute \"\n                                 + schema.getName() + \": \" + value, e);\n@@ -126,8 +128,9 @@ protected <T extends AbstractAttributable> T fillAbstractAttributable(\n                     }\n                 }\n \n-                if (!attribute.getAttributeValues().isEmpty())\n+                if (!attribute.getAttributeValues().isEmpty()) {\n                     abstractAttributable.addAttribute(attribute);\n+                }\n             }\n         }\n \n@@ -138,12 +141,13 @@ protected <T extends AbstractAttributable> T fillAbstractAttributable(\n                 abstractAttributableTO.getDerivedAttributes()) {\n \n             derivedSchema = derivedSchemaDAO.find(attributeTO.getSchema(),\n-                                                  attributableUtil.getDerivedSchemaClass());\n+                    attributableUtil.getDerivedSchemaClass());\n \n             if (derivedSchema == null) {\n-                if (log.isDebugEnabled())\n+                if (log.isDebugEnabled()) {\n                     log.debug(\"Ignoring invalid derivedschema \"\n                             + attributeTO.getSchema());\n+                }\n             } else {\n                 derivedAttribute = attributableUtil.newDerivedAttribute();\n                 derivedAttribute.setDerivedSchema(derivedSchema);\n@@ -155,7 +159,7 @@ protected <T extends AbstractAttributable> T fillAbstractAttributable(\n         // has been provided\n         List<AbstractSchema> allUserSchemas =\n                 schemaDAO.findAll(attributableUtil.getSchemaClass());\n-        for (AbstractSchema userSchema : allUserSchemas)\n+        for (AbstractSchema userSchema : allUserSchemas) {\n             if (abstractAttributable.getAttribute(userSchema.getName()) == null\n                     && userSchema.isMandatory()) {\n \n@@ -164,35 +168,43 @@ protected <T extends AbstractAttributable> T fillAbstractAttributable(\n \n                 requiredValuesMissing.addElement(userSchema.getName());\n             }\n+        }\n \n         // 3. resources\n         Resource resource = null;\n         for (String resourceName : abstractAttributableTO.getResources()) {\n             resource = resourceDAO.find(resourceName);\n \n             if (resource == null) {\n-                if (log.isDebugEnabled())\n+                if (log.isDebugEnabled()) {\n                     log.debug(\"Ignoring invalid resource \" + resourceName);\n+                }\n             } else {\n                 abstractAttributable.addResource(resource);\n-                \n-                if (attributableUtil == attributableUtil.USER)\n+\n+                if (attributableUtil == attributableUtil.USER) {\n                     resource.addUser((SyncopeUser) abstractAttributable);\n-                if (attributableUtil == attributableUtil.ROLE)\n+                }\n+                if (attributableUtil == attributableUtil.ROLE) {\n                     resource.addRole((SyncopeRole) abstractAttributable);\n+                }\n             }\n         }\n \n         // Throw composite exception if there is at least one element set\n         // in the composing exceptions\n-        if (!requiredValuesMissing.getElements().isEmpty())\n+        if (!requiredValuesMissing.getElements().isEmpty()) {\n             compositeErrorException.addException(requiredValuesMissing);\n-        if (!invalidValues.getElements().isEmpty())\n+        }\n+        if (!invalidValues.getElements().isEmpty()) {\n             compositeErrorException.addException(invalidValues);\n-        if (!invalidUniques.getElements().isEmpty())\n+        }\n+        if (!invalidUniques.getElements().isEmpty()) {\n             compositeErrorException.addException(invalidUniques);\n-        if (compositeErrorException.hasExceptions())\n+        }\n+        if (compositeErrorException.hasExceptions()) {\n             throw compositeErrorException;\n+        }\n \n         return abstractAttributable;\n     }\n@@ -224,8 +236,9 @@ protected <T extends AbstractAttributableTO> T getAbstractAttributableTO(\n             abstractAttributableTO.addDerivedAttribute(attributeTO);\n         }\n \n-        for (Resource resource : abstractAttributable.getResources())\n+        for (Resource resource : abstractAttributable.getResources()) {\n             abstractAttributableTO.addResource(resource.getName());\n+        }\n \n         return abstractAttributableTO;\n     }"},{"sha":"dae7c1e093710eedb78f0825e259fc484213a31d","filename":"core/src/main/java/org/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":15,"deletions":11,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36e51232a9a31ddc1f804f76e60fa05dec85a703/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36e51232a9a31ddc1f804f76e60fa05dec85a703/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=36e51232a9a31ddc1f804f76e60fa05dec85a703","patch":"@@ -20,7 +20,6 @@\n import org.syncope.client.to.RoleTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n-import org.syncope.core.persistence.beans.Resource;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.AttributeValueDAO;\n@@ -36,11 +35,11 @@ public class RoleDataBinder extends AbstractAttributableDataBinder {\n \n     @Autowired\n     public RoleDataBinder(SyncopeRoleDAO syncopeRoleDAO,\n-                          SchemaDAO schemaDAO,\n-                          DerivedSchemaDAO derivedSchemaDAO,\n-                          AttributeValueDAO attributeValueDAO,\n-                          SyncopeUserDAO syncopeUserDAO,\n-                          ResourceDAO resourceDAO) {\n+            SchemaDAO schemaDAO,\n+            DerivedSchemaDAO derivedSchemaDAO,\n+            AttributeValueDAO attributeValueDAO,\n+            SyncopeUserDAO syncopeUserDAO,\n+            ResourceDAO resourceDAO) {\n \n         this.syncopeRoleDAO = syncopeRoleDAO;\n         this.schemaDAO = schemaDAO;\n@@ -67,8 +66,9 @@ public SyncopeRole createSyncopeRole(RoleTO roleTO)\n             log.error(\"No name specified for this role\");\n \n             invalidRoles.addElement(\"No name specified for this role\");\n-        } else\n+        } else {\n             syncopeRole.setName(roleTO.getName());\n+        }\n         Long parentRoleId = null;\n         if (roleTO.getParent() != null) {\n             SyncopeRole parentRole = syncopeRoleDAO.find(roleTO.getParent());\n@@ -91,8 +91,9 @@ public SyncopeRole createSyncopeRole(RoleTO roleTO)\n             invalidRoles.addElement(roleTO.getName());\n         }\n \n-        if (!invalidRoles.getElements().isEmpty())\n+        if (!invalidRoles.getElements().isEmpty()) {\n             scce.addException(invalidRoles);\n+        }\n \n         syncopeRole = fillAbstractAttributable(\n                 syncopeRole, roleTO, AttributableUtil.ROLE, scce);\n@@ -103,8 +104,9 @@ public SyncopeRole createSyncopeRole(RoleTO roleTO)\n             user = syncopeUserDAO.find(userId);\n \n             if (user == null) {\n-                if (log.isDebugEnabled())\n+                if (log.isDebugEnabled()) {\n                     log.debug(\"Ignoring invalid user \" + userId);\n+                }\n             } else {\n                 syncopeRole.addUser(user);\n                 user.addRole(syncopeRole);\n@@ -118,13 +120,15 @@ public RoleTO getRoleTO(SyncopeRole role) {\n         RoleTO roleTO = new RoleTO();\n         roleTO.setId(role.getId());\n         roleTO.setName(role.getName());\n-        if (role.getParent() != null)\n+        if (role.getParent() != null) {\n             roleTO.setParent(role.getParent().getId());\n+        }\n \n         roleTO = getAbstractAttributableTO(roleTO, role);\n \n-        for (SyncopeUser user : role.getUsers())\n+        for (SyncopeUser user : role.getUsers()) {\n             roleTO.addUser(user.getId());\n+        }\n \n         return roleTO;\n     }"},{"sha":"247e5f54c76241e1c739251aaa3829b059fd5ba6","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":12,"deletions":9,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36e51232a9a31ddc1f804f76e60fa05dec85a703/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36e51232a9a31ddc1f804f76e60fa05dec85a703/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=36e51232a9a31ddc1f804f76e60fa05dec85a703","patch":"@@ -20,7 +20,6 @@\n import org.syncope.client.to.UserTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n-import org.syncope.core.persistence.beans.Resource;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.AttributeValueDAO;\n@@ -35,10 +34,10 @@ public class UserDataBinder extends AbstractAttributableDataBinder {\n \n     @Autowired\n     public UserDataBinder(SchemaDAO schemaDAO,\n-                          AttributeValueDAO attributeValueDAO,\n-                          DerivedSchemaDAO derivedSchemaDAO,\n-                          SyncopeRoleDAO syncopeRoleDAO,\n-                          ResourceDAO resourceDAO) {\n+            AttributeValueDAO attributeValueDAO,\n+            DerivedSchemaDAO derivedSchemaDAO,\n+            SyncopeRoleDAO syncopeRoleDAO,\n+            ResourceDAO resourceDAO) {\n \n         this.schemaDAO = schemaDAO;\n         this.attributeValueDAO = attributeValueDAO;\n@@ -67,11 +66,13 @@ public SyncopeUser createSyncopeUser(UserTO userTO)\n             log.error(\"No password provided\");\n \n             invalidPassword.addElement(\"Null password\");\n-        } else\n+        } else {\n             syncopeUser.setPassword(userTO.getPassword());\n+        }\n \n-        if (!invalidPassword.getElements().isEmpty())\n+        if (!invalidPassword.getElements().isEmpty()) {\n             scce.addException(invalidPassword);\n+        }\n \n         syncopeUser = fillAbstractAttributable(\n                 syncopeUser, userTO, AttributableUtil.USER, scce);\n@@ -82,8 +83,9 @@ public SyncopeUser createSyncopeUser(UserTO userTO)\n             role = syncopeRoleDAO.find(roleId);\n \n             if (role == null) {\n-                if (log.isDebugEnabled())\n+                if (log.isDebugEnabled()) {\n                     log.debug(\"Ignoring invalid role \" + roleId);\n+                }\n             } else {\n                 syncopeUser.addRole(role);\n                 role.addUser(syncopeUser);\n@@ -103,8 +105,9 @@ public UserTO getUserTO(SyncopeUser user) {\n \n         userTO = getAbstractAttributableTO(userTO, user);\n \n-        for (SyncopeRole role : user.getRoles())\n+        for (SyncopeRole role : user.getRoles()) {\n             userTO.addRole(role.getId());\n+        }\n \n         return userTO;\n     }"},{"sha":"77b42b0430c2379b379fab5b1d799eb05ac14f7a","filename":"core/src/test/java/org/syncope/core/test/persistence/SyncopeRoleDAOTest.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36e51232a9a31ddc1f804f76e60fa05dec85a703/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeRoleDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36e51232a9a31ddc1f804f76e60fa05dec85a703/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeRoleDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeRoleDAOTest.java?ref=36e51232a9a31ddc1f804f76e60fa05dec85a703","patch":"@@ -35,6 +35,11 @@ public final void findAll() {\n         assertEquals(\"did not get expected number of roles \", 8, list.size());\n     }\n \n+    @Test\n+    public final void findChildren() {\n+        assertEquals(4, syncopeRoleDAO.findChildren(3L).size());\n+    }\n+\n     @Test\n     public final void find() {\n         SyncopeRole role = syncopeRoleDAO.find(\"root\", null);"}]}