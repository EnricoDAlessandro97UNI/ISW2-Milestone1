{"sha":"259c3c83d1ecc804b7fd2bc4a4587eb68288841f","node_id":"C_kwDOJfYA1toAKDI1OWMzYzgzZDFlY2M4MDRiN2ZkMmJjNGE0NTg3ZWI2ODI4ODg0MWY","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-01-04T15:43:55Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-01-04T15:44:06Z"},"message":"[SYNCOPE-1105] Generating random UUID as operation key, storing into MDC and displaying via log4j's PatternLayout","tree":{"sha":"cbef9e0cb47e267ca4f837099d3e37be286566ac","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/cbef9e0cb47e267ca4f837099d3e37be286566ac"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/259c3c83d1ecc804b7fd2bc4a4587eb68288841f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/259c3c83d1ecc804b7fd2bc4a4587eb68288841f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/259c3c83d1ecc804b7fd2bc4a4587eb68288841f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/259c3c83d1ecc804b7fd2bc4a4587eb68288841f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"57499d370cbcda40eedc58fa597d251f0d5efc81","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/57499d370cbcda40eedc58fa597d251f0d5efc81","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/57499d370cbcda40eedc58fa597d251f0d5efc81"}],"stats":{"total":150,"additions":119,"deletions":31},"files":[{"sha":"dd0d1de78ebdcbaf31af188df3b5aa83b5367d38","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/IdRepoRESTCXFContext.java","status":"modified","additions":15,"deletions":18,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/259c3c83d1ecc804b7fd2bc4a4587eb68288841f/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/259c3c83d1ecc804b7fd2bc4a4587eb68288841f/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java?ref=259c3c83d1ecc804b7fd2bc4a4587eb68288841f","patch":"@@ -28,7 +28,7 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ThreadPoolExecutor;\n-import javax.servlet.ServletRequestListener;\n+import javax.validation.Validator;\n import org.apache.cxf.Bus;\n import org.apache.cxf.endpoint.Server;\n import org.apache.cxf.jaxrs.ext.ContextProvider;\n@@ -138,7 +138,6 @@\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.boot.web.servlet.ServletListenerRegistrationBean;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -193,15 +192,15 @@ public JacksonYAMLProvider yamlProvider() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public BeanValidationProvider validationProvider() {\n-        return new BeanValidationProvider();\n+    public MDCInInterceptor mdcInInterceptor() {\n+        return new MDCInInterceptor();\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public JAXRSBeanValidationInInterceptor validationInInterceptor(final BeanValidationProvider validationProvider) {\n+    public JAXRSBeanValidationInInterceptor validationInInterceptor(final Validator validator) {\n         JAXRSBeanValidationInInterceptor validationInInterceptor = new JAXRSBeanValidationInInterceptor();\n-        validationInInterceptor.setProvider(validationProvider);\n+        validationInInterceptor.setProvider(new BeanValidationProvider(validator));\n         return validationInInterceptor;\n     }\n \n@@ -220,6 +219,12 @@ public GZIPOutInterceptor gzipOutInterceptor() {\n         return gzipOutInterceptor;\n     }\n \n+    @ConditionalOnMissingBean\n+    @Bean\n+    public ThreadLocalCleanupOutInterceptor threadLocalCleanupOutInterceptor() {\n+        return new ThreadLocalCleanupOutInterceptor();\n+    }\n+\n     @ConditionalOnMissingBean\n     @Bean\n     public RestServiceExceptionMapper restServiceExceptionMapper(final Environment env) {\n@@ -317,9 +322,11 @@ public Server restContainer(\n             final JacksonXMLProvider xmlProvider,\n             final JacksonJsonProvider jsonProvider,\n             final DateParamConverterProvider dateParamConverterProvider,\n+            final MDCInInterceptor mdcInInterceptor,\n             final JAXRSBeanValidationInInterceptor validationInInterceptor,\n             final GZIPInInterceptor gzipInInterceptor,\n             final GZIPOutInterceptor gzipOutInterceptor,\n+            final ThreadLocalCleanupOutInterceptor threadLocalCleanupOutInterceptor,\n             final OpenApiFeature openapiFeature,\n             final Bus bus,\n             final ApplicationContext ctx,\n@@ -351,26 +358,16 @@ public Server restContainer(\n                 addDomainFilter,\n                 addETagFilter));\n \n-        restContainer.setInInterceptors(List.of(\n-                gzipInInterceptor,\n-                validationInInterceptor));\n+        restContainer.setInInterceptors(List.of(mdcInInterceptor, validationInInterceptor, gzipInInterceptor));\n \n-        restContainer.setOutInterceptors(List.of(gzipOutInterceptor));\n+        restContainer.setOutInterceptors(List.of(gzipOutInterceptor, threadLocalCleanupOutInterceptor));\n \n         restContainer.setFeatures(List.of(openapiFeature));\n \n         restContainer.setApplicationContext(ctx);\n         return restContainer.create();\n     }\n \n-    @ConditionalOnMissingBean\n-    @Bean\n-    public ServletListenerRegistrationBean<ServletRequestListener> listenerRegistrationBean() {\n-        ServletListenerRegistrationBean<ServletRequestListener> bean = new ServletListenerRegistrationBean<>();\n-        bean.setListener(new ThreadLocalCleanupListener());\n-        return bean;\n-    }\n-\n     @ConditionalOnMissingBean\n     @Bean\n     public AccessTokenService accessTokenService(final AccessTokenLogic accessTokenLogic) {"},{"sha":"5117610665e67edeaab8bf5ff59624773d63eeeb","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/MDCInInterceptor.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/259c3c83d1ecc804b7fd2bc4a4587eb68288841f/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FMDCInInterceptor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/259c3c83d1ecc804b7fd2bc4a4587eb68288841f/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FMDCInInterceptor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FMDCInInterceptor.java?ref=259c3c83d1ecc804b7fd2bc4a4587eb68288841f","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf;\n+\n+import org.apache.cxf.interceptor.Fault;\n+import org.apache.cxf.message.Exchange;\n+import org.apache.cxf.message.Message;\n+import org.apache.cxf.phase.AbstractPhaseInterceptor;\n+import org.apache.cxf.phase.Phase;\n+import org.apache.syncope.core.provisioning.api.job.JobDelegate;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n+import org.slf4j.MDC;\n+\n+/**\n+ * Populate MDC with sensible information, for the current thread.\n+ *\n+ * MDC is then cleared up by {@link org.apache.syncope.core.rest.cxf.ThreadLocalCleanupOutInterceptor}\n+ */\n+public class MDCInInterceptor extends AbstractPhaseInterceptor<Message> {\n+\n+    // just same value as org.apache.cxf.ext.logging.event.LogEvent.KEY_EXCHANGE_ID\n+    protected static final String KEY_EXCHANGE_ID = \"exchangeId\";\n+\n+    public MDCInInterceptor() {\n+        super(Phase.PRE_INVOKE);\n+    }\n+\n+    @Override\n+    public void handleMessage(final Message message) throws Fault {\n+        Exchange exchange = message.getExchange();\n+\n+        // this ensures we are not duplicating nor conflicting with\n+        // org.apache.cxf.ext.logging.AbstractLoggingInterceptor.createExchangeId(Message)\n+        String exchangeId = (String) exchange.get(KEY_EXCHANGE_ID);\n+        if (exchangeId == null) {\n+            exchangeId = SecureRandomUtils.generateRandomUUID().toString();\n+            exchange.put(KEY_EXCHANGE_ID, exchangeId);\n+        }\n+\n+        MDC.put(JobDelegate.OPERATION_ID, exchangeId);\n+    }\n+}"},{"sha":"8f2d253cf8c1fac05e702756c9dcce4ec9147803","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/259c3c83d1ecc804b7fd2bc4a4587eb68288841f/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/259c3c83d1ecc804b7fd2bc4a4587eb68288841f/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java?ref=259c3c83d1ecc804b7fd2bc4a4587eb68288841f","patch":"@@ -320,7 +320,9 @@ private String getPersistenceErrorMessage(final Throwable ex) {\n             message = env.getProperty(\"errMessage.\" + UNIQUE_MSG_KEY);\n         }\n \n-        return Optional.ofNullable(message)\n-                .orElseGet(() -> (ex.getCause() == null) ? ex.getMessage() : ex.getCause().getMessage());\n+        return Optional.ofNullable(message).\n+                orElseGet(() -> Optional.ofNullable(ex.getCause()).\n+                map(Throwable::getMessage).\n+                orElseGet(() -> ex.getMessage()));\n     }\n }"},{"sha":"39b893a6906bc1c0acf294d89ea2da6adaaa5981","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/ThreadLocalCleanupOutInterceptor.java","status":"renamed","additions":12,"deletions":8,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/259c3c83d1ecc804b7fd2bc4a4587eb68288841f/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FThreadLocalCleanupOutInterceptor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/259c3c83d1ecc804b7fd2bc4a4587eb68288841f/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FThreadLocalCleanupOutInterceptor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FThreadLocalCleanupOutInterceptor.java?ref=259c3c83d1ecc804b7fd2bc4a4587eb68288841f","patch":"@@ -18,27 +18,31 @@\n  */\n package org.apache.syncope.core.rest.cxf;\n \n-import javax.servlet.ServletRequestEvent;\n-import javax.servlet.ServletRequestListener;\n+import org.apache.cxf.interceptor.Fault;\n+import org.apache.cxf.message.Message;\n+import org.apache.cxf.phase.AbstractPhaseInterceptor;\n+import org.apache.cxf.phase.Phase;\n import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n import org.identityconnectors.common.l10n.CurrentLocale;\n import org.identityconnectors.framework.impl.api.local.ThreadClassLoaderManager;\n+import org.slf4j.MDC;\n \n /**\n- * Remove any known thread-local variable when the servlet request is destroyed.\n+ * Removes any known thread-local variable.\n  */\n-public class ThreadLocalCleanupListener implements ServletRequestListener {\n+public class ThreadLocalCleanupOutInterceptor extends AbstractPhaseInterceptor<Message> {\n \n-    @Override\n-    public void requestInitialized(final ServletRequestEvent sre) {\n-        // nothing to do while setting up this request (and thread)\n+    public ThreadLocalCleanupOutInterceptor() {\n+        super(Phase.POST_INVOKE);\n     }\n \n     @Override\n-    public void requestDestroyed(final ServletRequestEvent sre) {\n+    public void handleMessage(final Message message) throws Fault {\n         FormatUtils.clear();\n \n         ThreadClassLoaderManager.clearInstance();\n         CurrentLocale.clear();\n+\n+        MDC.clear();\n     }\n }","previous_filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/ThreadLocalCleanupListener.java"},{"sha":"9addc1b2e022c2fde861fdfc2412605e4693c99b","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/JobDelegate.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/259c3c83d1ecc804b7fd2bc4a4587eb68288841f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/259c3c83d1ecc804b7fd2bc4a4587eb68288841f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobDelegate.java?ref=259c3c83d1ecc804b7fd2bc4a4587eb68288841f","patch":"@@ -23,6 +23,8 @@\n  */\n public interface JobDelegate {\n \n+    String OPERATION_ID = \"operation.id\";\n+\n     void interrupt();\n \n     boolean isInterrupted();"},{"sha":"3889ee56ae7b2568e2b974def91e720327915da3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractInterruptableJob.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/259c3c83d1ecc804b7fd2bc4a4587eb68288841f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractInterruptableJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/259c3c83d1ecc804b7fd2bc4a4587eb68288841f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractInterruptableJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractInterruptableJob.java?ref=259c3c83d1ecc804b7fd2bc4a4587eb68288841f","patch":"@@ -36,7 +36,6 @@ public void interrupt() {\n         public boolean isInterrupted() {\n             return false;\n         }\n-\n     };\n \n     public JobDelegate getDelegate() {"},{"sha":"29d422d5cb9077b2554a816f77459370e7a0bd73","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractSchedTaskJobDelegate.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/259c3c83d1ecc804b7fd2bc4a4587eb68288841f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/259c3c83d1ecc804b7fd2bc4a4587eb68288841f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java?ref=259c3c83d1ecc804b7fd2bc4a4587eb68288841f","patch":"@@ -35,11 +35,13 @@\n import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.apache.syncope.core.spring.security.SecurityProperties;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.slf4j.MDC;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.transaction.annotation.Transactional;\n@@ -131,6 +133,13 @@ public void execute(\n             return;\n         }\n \n+        boolean manageOperationId = Optional.ofNullable(MDC.get(OPERATION_ID)).\n+                map(operationId -> false).\n+                orElseGet(() -> {\n+                    MDC.put(OPERATION_ID, SecureRandomUtils.generateRandomUUID().toString());\n+                    return true;\n+                });\n+\n         String executor = Optional.ofNullable(context.getMergedJobDataMap().getString(JobManager.EXECUTOR_KEY)).\n                 orElse(securityProperties.getAdminUser());\n         TaskExec<SchedTask> execution = taskUtilsFactory.getInstance(taskType).newTaskExec();\n@@ -181,6 +190,10 @@ public void execute(\n                 result,\n                 task,\n                 null);\n+\n+        if (manageOperationId) {\n+            MDC.remove(OPERATION_ID);\n+        }\n     }\n \n     /**"},{"sha":"2ec4777791bd705cb62aebec752928c14b863726","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/DefaultReportJobDelegate.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/259c3c83d1ecc804b7fd2bc4a4587eb68288841f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/259c3c83d1ecc804b7fd2bc4a4587eb68288841f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java?ref=259c3c83d1ecc804b7fd2bc4a4587eb68288841f","patch":"@@ -46,9 +46,11 @@\n import org.apache.syncope.core.provisioning.api.job.report.ReportJobDelegate;\n import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n import org.apache.syncope.core.spring.implementation.ImplementationManager;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.slf4j.MDC;\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.transaction.annotation.Transactional;\n import org.xml.sax.helpers.AttributesImpl;\n@@ -135,6 +137,13 @@ public void execute(final String reportKey, final String executor) throws JobExe\n             return;\n         }\n \n+        boolean manageOperationId = Optional.ofNullable(MDC.get(OPERATION_ID)).\n+                map(operationId -> false).\n+                orElseGet(() -> {\n+                    MDC.put(OPERATION_ID, SecureRandomUtils.generateRandomUUID().toString());\n+                    return true;\n+                });\n+\n         // 1. create execution\n         ReportExec execution = entityFactory.newEntity(ReportExec.class);\n         execution.setStatus(ReportExecStatus.STARTED);\n@@ -240,6 +249,10 @@ public void execute(final String reportKey, final String executor) throws JobExe\n             execution.setMessage(reportExecutionMessage.toString());\n             execution.setEnd(OffsetDateTime.now());\n             reportExecDAO.save(execution);\n+\n+            if (manageOperationId) {\n+                MDC.remove(OPERATION_ID);\n+            }\n         }\n     }\n }"},{"sha":"91ab9b66115f92190da1333adf8e3df93540836d","filename":"docker/core/src/main/resources/log4j2.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/259c3c83d1ecc804b7fd2bc4a4587eb68288841f/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/259c3c83d1ecc804b7fd2bc4a4587eb68288841f/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=259c3c83d1ecc804b7fd2bc4a4587eb68288841f","patch":"@@ -22,7 +22,7 @@ under the License.\n   <appenders>\n \n     <Console name=\"console\" target=\"SYSTEM_OUT\" follow=\"true\">\n-      <PatternLayout pattern=\"%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} %highlight{${LOG_LEVEL_PATTERN:-%5p}}{FATAL=red blink, ERROR=red, WARN=yellow bold, INFO=green, DEBUG=green bold, TRACE=blue} [%11.11t] %style{%-60.60c{60}}{cyan} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}\"/>\n+      <PatternLayout pattern=\"%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} %notEmpty{[operation.id=%X{operation.id}] }%highlight{${LOG_LEVEL_PATTERN:-%5p}}{FATAL=red blink, ERROR=red, WARN=yellow bold, INFO=green, DEBUG=green bold, TRACE=blue} [%11.11t] %style{%-60.60c{60}}{cyan} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}\"/>\n     </Console>\n \n   </appenders>"},{"sha":"4ab455fe53a621f0571a29889bcc9e58358d3ff1","filename":"fit/core-reference/src/main/resources/log4j2.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/259c3c83d1ecc804b7fd2bc4a4587eb68288841f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/259c3c83d1ecc804b7fd2bc4a4587eb68288841f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=259c3c83d1ecc804b7fd2bc4a4587eb68288841f","patch":"@@ -24,7 +24,7 @@ under the License.\n                              filePattern=\"${log.directory}/core-%d{yyyy-MM-dd}.log.gz\"\n                              immediateFlush=\"false\" append=\"true\">\n       <PatternLayout>\n-        <pattern>%d{HH:mm:ss.SSS} %-5level %logger - %msg%n</pattern>\n+        <pattern>%d{HH:mm:ss.SSS} %notEmpty{[operation.id=%X{operation.id}] }%-5level %logger - %msg%n</pattern>\n       </PatternLayout>\n       <Policies>\n         <TimeBasedTriggeringPolicy/>"}]}