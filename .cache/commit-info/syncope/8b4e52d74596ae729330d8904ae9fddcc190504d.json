{"sha":"8b4e52d74596ae729330d8904ae9fddcc190504d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjhiNGU1MmQ3NDU5NmFlNzI5MzMwZDg5MDRhZTlmZGRjYzE5MDUwNGQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-12T17:40:54Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-12T17:40:54Z"},"message":"[SYNCOPE-620] server-rest-cxf","tree":{"sha":"aca5a2cde5e173ad7c5c3642ce00f1844aa7b871","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/aca5a2cde5e173ad7c5c3642ce00f1844aa7b871"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8b4e52d74596ae729330d8904ae9fddcc190504d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8b4e52d74596ae729330d8904ae9fddcc190504d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8b4e52d74596ae729330d8904ae9fddcc190504d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8b4e52d74596ae729330d8904ae9fddcc190504d/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"65adad7dc8e3e29516da8e596aea1d66039a29a6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/65adad7dc8e3e29516da8e596aea1d66039a29a6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/65adad7dc8e3e29516da8e596aea1d66039a29a6"}],"stats":{"total":3372,"additions":3161,"deletions":211},"files":[{"sha":"070f73cf98251b6364c1722c49545ce692ee9b0d","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/CollectionWrapper.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FCollectionWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FCollectionWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FCollectionWrapper.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+import org.apache.syncope.common.lib.types.LoggerLevel;\n+import org.apache.syncope.common.lib.wrap.AbstractWrappable;\n+\n+public final class CollectionWrapper {\n+\n+    private CollectionWrapper() {\n+        // empty constructor for static utility class\n+    }\n+\n+    public static <E, T extends AbstractWrappable<E>> List<T> wrap(final E element, final Class<T> reference) {\n+        return Collections.singletonList(AbstractWrappable.getInstance(reference, element));\n+    }\n+\n+    public static <E, T extends AbstractWrappable<E>> List<T> wrap(\n+            final Collection<E> collection, final Class<T> reference) {\n+\n+        List<T> response = new ArrayList<T>();\n+        for (E element : collection) {\n+            response.add(AbstractWrappable.getInstance(reference, element));\n+        }\n+        return response;\n+    }\n+\n+    public static <T extends AbstractWrappable<String>> List<String> unwrap(final Collection<T> collection) {\n+        List<String> response = new ArrayList<String>();\n+        for (T item : collection) {\n+            response.add(item.getElement());\n+        }\n+        return response;\n+    }\n+\n+    public static List<AuditLoggerName> wrapLogger(final Collection<LoggerTO> logger) {\n+        List<AuditLoggerName> respons = new ArrayList<AuditLoggerName>();\n+        for (LoggerTO l : logger) {\n+            try {\n+                respons.add(AuditLoggerName.fromLoggerName(l.getName()));\n+            } catch (Exception ignore) {\n+                // ignore\n+            }\n+        }\n+        return respons;\n+    }\n+\n+    public static List<LoggerTO> unwrapLogger(final Collection<AuditLoggerName> auditNames) {\n+        List<LoggerTO> respons = new ArrayList<LoggerTO>();\n+        for (AuditLoggerName l : auditNames) {\n+            LoggerTO loggerTO = new LoggerTO();\n+            loggerTO.setName(l.toLoggerName());\n+            loggerTO.setLevel(LoggerLevel.DEBUG);\n+            respons.add(loggerTO);\n+        }\n+        return respons;\n+    }\n+}"},{"sha":"5cda9cff1b19586c936567392b128cfb64de263b","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/Preference.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FPreference.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FPreference.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FPreference.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api;\n+\n+/**\n+ * Preferences available to be specified during requests.\n+ *\n+ * @see RESTHeaders#PREFER\n+ * @see RESTHeaders#PREFERENCE_APPLIED\n+ */\n+public enum Preference {\n+\n+    NONE(\"\"),\n+    RETURN_CONTENT(\"return-content\"),\n+    RETURN_NO_CONTENT(\"return-no-content\");\n+\n+    private String literal;\n+\n+    private Preference(final String literal) {\n+        this.literal = literal;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return literal;\n+    }\n+\n+    public static Preference fromString(final String literal) {\n+        Preference result = null;\n+\n+        for (Preference preference : values()) {\n+            if (preference.toString().equalsIgnoreCase(literal)) {\n+                result = preference;\n+            }\n+        }\n+\n+        if (result == null) {\n+            result = NONE;\n+        }\n+\n+        return result;\n+    }\n+}"},{"sha":"d886b915a74b69611a4d3473c3ad130711b55764","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConfigurationService.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConfigurationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConfigurationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConfigurationService.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.rest.api;\n+package org.apache.syncope.common.rest.api.service;\n \n import java.util.List;\n import javax.validation.constraints.NotNull;","previous_filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/ConfigurationService.java"},{"sha":"91d982e1e16d5163c86da4d8f0e3173dd4633365","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java","status":"renamed","additions":19,"deletions":19,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.rest.api;\n+package org.apache.syncope.common.rest.api.service;\n \n import java.util.List;\n import javax.validation.constraints.NotNull;\n@@ -63,56 +63,56 @@ public interface ConnectorService extends JAXRSService {\n     /**\n      * Returns configuration for given connector instance.\n      *\n-     * @param connInstanceId connector instance id to read configuration from\n+     * @param connInstanceKey connector instance id to read configuration from\n      * @return configuration for given connector instance\n      */\n     @GET\n-    @Path(\"{connInstanceId}/configuration\")\n+    @Path(\"{connInstanceKey}/configuration\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<ConnConfProperty> getConfigurationProperties(@NotNull @PathParam(\"connInstanceId\") Long connInstanceId);\n+    List<ConnConfProperty> getConfigurationProperties(@NotNull @PathParam(\"connInstanceKey\") Long connInstanceKey);\n \n     /**\n      * Returns schema names for connector bundle matching the given connector instance id.\n      *\n-     * @param connInstanceId connector instance id to be used for schema lookup\n+     * @param connInstanceKey connector instance id to be used for schema lookup\n      * @param connInstanceTO connector instance object to provide special configuration properties\n      * @param includeSpecial if set to true, special schema names (like '__PASSWORD__') will be included;\n      * default is false\n      * @return schema names for connector bundle matching the given connector instance id\n      */\n     @POST\n-    @Path(\"{connInstanceId}/schemaNames\")\n+    @Path(\"{connInstanceKey}/schemaNames\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<PlainSchemaTO> getSchemaNames(@NotNull @PathParam(\"connInstanceId\") Long connInstanceId,\n+    List<PlainSchemaTO> getSchemaNames(@NotNull @PathParam(\"connInstanceKey\") Long connInstanceKey,\n             @NotNull ConnInstanceTO connInstanceTO,\n             @QueryParam(\"includeSpecial\") @DefaultValue(\"false\") boolean includeSpecial);\n \n     /**\n      * Returns supported object classes for connector bundle matching the given connector instance id.\n      *\n-     * @param connInstanceId connector instance id to be used for schema lookup\n+     * @param connInstanceKey connector instance id to be used for schema lookup\n      * @param connInstanceTO connector instance object to provide special configuration properties\n      * @return supported object classes for connector bundle matching the given connector instance id\n      */\n     @POST\n-    @Path(\"{connInstanceId}/supportedObjectClasses\")\n+    @Path(\"{connInstanceKey}/supportedObjectClasses\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     List<ConnIdObjectClassTO> getSupportedObjectClasses(\n-            @NotNull @PathParam(\"connInstanceId\") Long connInstanceId,\n+            @NotNull @PathParam(\"connInstanceKey\") Long connInstanceKey,\n             @NotNull ConnInstanceTO connInstanceTO);\n \n     /**\n      * Returns connector instance with matching id.\n      *\n-     * @param connInstanceId connector instance id to be read\n+     * @param connInstanceKey connector instance id to be read\n      * @return connector instance with matching id\n      */\n     @GET\n-    @Path(\"{connInstanceId}\")\n+    @Path(\"{connInstanceKey}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    ConnInstanceTO read(@NotNull @PathParam(\"connInstanceId\") Long connInstanceId);\n+    ConnInstanceTO read(@NotNull @PathParam(\"connInstanceKey\") Long connInstanceKey);\n \n     /**\n      * Returns connector instance for matching resource.\n@@ -153,22 +153,22 @@ List<ConnIdObjectClassTO> getSupportedObjectClasses(\n     /**\n      * Updates the connector instance matching the provided id.\n      *\n-     * @param connInstanceId connector instance id to be updated\n+     * @param connInstanceKey connector instance id to be updated\n      * @param connInstanceTO connector instance to be stored\n      */\n     @PUT\n-    @Path(\"{connInstanceId}\")\n+    @Path(\"{connInstanceKey}\")\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    void update(@NotNull @PathParam(\"connInstanceId\") Long connInstanceId, @NotNull ConnInstanceTO connInstanceTO);\n+    void update(@NotNull @PathParam(\"connInstanceKey\") Long connInstanceKey, @NotNull ConnInstanceTO connInstanceTO);\n \n     /**\n      * Deletes the connector instance matching the provided id.\n      *\n-     * @param connInstanceId connector instance id to be deleted\n+     * @param connInstanceKey connector instance id to be deleted\n      */\n     @DELETE\n-    @Path(\"{connInstanceId}\")\n-    void delete(@NotNull @PathParam(\"connInstanceId\") Long connInstanceId);\n+    @Path(\"{connInstanceKey}\")\n+    void delete(@NotNull @PathParam(\"connInstanceKey\") Long connInstanceKey);\n \n     /**\n      * @param connInstanceTO connector instance to be used for connection check","previous_filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/ConnectorService.java"},{"sha":"44ad900bc990114eb13a40a3272fba092f98b152","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/EntitlementService.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FEntitlementService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FEntitlementService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FEntitlementService.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.rest.api;\n+package org.apache.syncope.common.rest.api.service;\n \n import java.util.List;\n ","previous_filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/EntitlementService.java"},{"sha":"7108b495356457ea93776879f4c1f614a1eea3ac","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/JAXRSService.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.rest.api;\n+package org.apache.syncope.common.rest.api.service;\n \n public interface JAXRSService {\n ","previous_filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/JAXRSService.java"},{"sha":"6ab40e75c174149c09b66fc3bd4a6c2324c10d74","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.rest.api;\n+package org.apache.syncope.common.rest.api.service;\n \n import java.util.List;\n import javax.validation.constraints.NotNull;","previous_filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/LoggerService.java"},{"sha":"a21001447db04e7a4bf116a4284d9c56d3b89ef8","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/NotificationService.java","status":"renamed","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FNotificationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FNotificationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FNotificationService.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.rest.api;\n+package org.apache.syncope.common.rest.api.service;\n \n import java.util.List;\n import javax.validation.constraints.NotNull;\n@@ -44,13 +44,13 @@ public interface NotificationService extends JAXRSService {\n     /**\n      * Returns notification with matching id.\n      *\n-     * @param notificationId id of notification to be read\n-     * @return notification with matching id\n+     * @param notificationKey key of notification to be read\n+     * @return notification with matching key\n      */\n     @GET\n-    @Path(\"{notificationId}\")\n+    @Path(\"{notificationKey}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    NotificationTO read(@NotNull @PathParam(\"notificationId\") Long notificationId);\n+    NotificationTO read(@NotNull @PathParam(\"notificationKey\") Long notificationKey);\n \n     /**\n      * Returns a list of all notifications.\n@@ -76,22 +76,22 @@ public interface NotificationService extends JAXRSService {\n     Response create(@NotNull NotificationTO notificationTO);\n \n     /**\n-     * Updates the notification matching the given id.\n+     * Updates the notification matching the given key.\n      *\n-     * @param notificationId id of notification to be updated\n+     * @param notificationKey key of notification to be updated\n      * @param notificationTO notification to be stored\n      */\n     @PUT\n-    @Path(\"{notificationId}\")\n+    @Path(\"{notificationKey}\")\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    void update(@NotNull @PathParam(\"notificationId\") Long notificationId, @NotNull NotificationTO notificationTO);\n+    void update(@NotNull @PathParam(\"notificationKey\") Long notificationKey, @NotNull NotificationTO notificationTO);\n \n     /**\n-     * Deletes the notification matching the given id.\n+     * Deletes the notification matching the given key.\n      *\n-     * @param notificationId id for notification to be deleted\n+     * @param notificationKey key for notification to be deleted\n      */\n     @DELETE\n-    @Path(\"{notificationId}\")\n-    void delete(@NotNull @PathParam(\"notificationId\") Long notificationId);\n+    @Path(\"{notificationKey}\")\n+    void delete(@NotNull @PathParam(\"notificationKey\") Long notificationKey);\n }","previous_filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/NotificationService.java"},{"sha":"6050d9c3aa992ee512d80dad1762ce3e81e1522e","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java","status":"renamed","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.rest.api;\n+package org.apache.syncope.common.rest.api.service;\n \n import java.util.List;\n import javax.validation.constraints.NotNull;\n@@ -55,16 +55,16 @@ public interface PolicyService extends JAXRSService {\n     List<CorrelationRuleClass> getSyncCorrelationRuleClasses();\n \n     /**\n-     * Returns the policy matching the given id.\n+     * Returns the policy matching the given key.\n      *\n-     * @param policyId id of requested policy\n+     * @param policyKey key of requested policy\n      * @param <T> response type (extending PolicyTO)\n      * @return policy with matching id\n      */\n     @GET\n-    @Path(\"{policyId}\")\n+    @Path(\"{policyKey}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractPolicyTO> T read(@NotNull @PathParam(\"policyId\") Long policyId);\n+    <T extends AbstractPolicyTO> T read(@NotNull @PathParam(\"policyKey\") Long policyKey);\n \n     /**\n      * Returns the global policy for the given type.\n@@ -104,25 +104,25 @@ public interface PolicyService extends JAXRSService {\n     <T extends AbstractPolicyTO> Response create(@NotNull T policyTO);\n \n     /**\n-     * Updates policy matching the given id.\n+     * Updates policy matching the given key.\n      *\n-     * @param policyId id of policy to be updated\n+     * @param policyKey key of policy to be updated\n      * @param policyTO Policy to replace existing policy\n      * @param <T> response type (extending PolicyTO)\n      */\n     @PUT\n-    @Path(\"{policyId}\")\n+    @Path(\"{policyKey}\")\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractPolicyTO> void update(@NotNull @PathParam(\"policyId\") Long policyId, @NotNull T policyTO);\n+    <T extends AbstractPolicyTO> void update(@NotNull @PathParam(\"policyKey\") Long policyKey, @NotNull T policyTO);\n \n     /**\n-     * Delete policy matching the given id.\n+     * Delete policy matching the given key.\n      *\n-     * @param policyId id of policy to be deleted\n+     * @param policyKey key of policy to be deleted\n      * @param <T> response type (extending PolicyTO)\n      */\n     @DELETE\n-    @Path(\"{policyId}\")\n-    <T extends AbstractPolicyTO> void delete(@NotNull @PathParam(\"policyId\") Long policyId);\n+    @Path(\"{policyKey}\")\n+    <T extends AbstractPolicyTO> void delete(@NotNull @PathParam(\"policyKey\") Long policyKey);\n \n }","previous_filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/PolicyService.java"},{"sha":"b8f282619bbd87852583de603541a8f20ed6bd92","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java","status":"renamed","additions":24,"deletions":24,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.rest.api;\n+package org.apache.syncope.common.rest.api.service;\n \n import java.util.List;\n import javax.validation.constraints.Min;\n@@ -59,21 +59,21 @@ public interface ReportService extends JAXRSService {\n     List<ReportletConfClass> getReportletConfClasses();\n \n     /**\n-     * Returns report with matching id.\n+     * Returns report with matching key.\n      *\n-     * @param reportId id of report to be read\n-     * @return report with matching id\n+     * @param reportKey key of report to be read\n+     * @return report with matching key\n      */\n     @GET\n-    @Path(\"{reportId}\")\n+    @Path(\"{reportKey}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    ReportTO read(@NotNull @PathParam(\"reportId\") Long reportId);\n+    ReportTO read(@NotNull @PathParam(\"reportKey\") Long reportKey);\n \n     /**\n-     * Returns report execution with matching id.\n+     * Returns report execution with matching key.\n      *\n      * @param executionId report execution id to be selected\n-     * @return report execution with matching id\n+     * @return report execution with matching key\n      */\n     @GET\n     @Path(\"executions/{executionId}\")\n@@ -141,49 +141,49 @@ PagedResult<ReportTO> list(\n     Response create(@NotNull ReportTO reportTO);\n \n     /**\n-     * Updates report with matching id.\n+     * Updates report with matching key.\n      *\n-     * @param reportId id for report to be updated\n+     * @param reportKey id for report to be updated\n      * @param reportTO report to be stored\n      */\n     @PUT\n-    @Path(\"{reportId}\")\n+    @Path(\"{reportKey}\")\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    void update(@NotNull @PathParam(\"reportId\") Long reportId, ReportTO reportTO);\n+    void update(@NotNull @PathParam(\"reportKey\") Long reportKey, ReportTO reportTO);\n \n     /**\n-     * Deletes report with matching id.\n+     * Deletes report with matching key.\n      *\n-     * @param reportId Deletes report with matching id\n+     * @param reportKey Deletes report with matching key\n      */\n     @DELETE\n-    @Path(\"{reportId}\")\n-    void delete(@NotNull @PathParam(\"reportId\") Long reportId);\n+    @Path(\"{reportKey}\")\n+    void delete(@NotNull @PathParam(\"reportKey\") Long reportKey);\n \n     /**\n-     * Deletes report execution with matching id.\n+     * Deletes report execution with matching key.\n      *\n-     * @param executionId id of execution report to be deleted\n+     * @param executionId key of execution report to be deleted\n      */\n     @DELETE\n     @Path(\"executions/{executionId}\")\n     void deleteExecution(@NotNull @PathParam(\"executionId\") Long executionId);\n \n     /**\n-     * Executes the report with matching id.\n+     * Executes the report with matching key.\n      *\n-     * @param reportId id of report to be executed\n+     * @param reportKey key of report to be executed\n      * @return report execution result\n      */\n     @POST\n-    @Path(\"{reportId}/execute\")\n+    @Path(\"{reportKey}/execute\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    ReportExecTO execute(@NotNull @PathParam(\"reportId\") Long reportId);\n+    ReportExecTO execute(@NotNull @PathParam(\"reportKey\") Long reportKey);\n \n     /**\n-     * Exports the report execution with matching id in the requested format.\n+     * Exports the report execution with matching key in the requested format.\n      *\n-     * @param executionId id of execution report to be selected\n+     * @param executionId key of execution report to be selected\n      * @param fmt file-format selection\n      * @return a stream for content download\n      */","previous_filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/ReportService.java"},{"sha":"9b62de3d8a5e1ad5fa3ad45aab59ab86e945549b","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java","status":"renamed","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.rest.api;\n+package org.apache.syncope.common.rest.api.service;\n \n import java.util.List;\n import javax.validation.constraints.NotNull;\n@@ -50,18 +50,18 @@\n public interface ResourceService extends JAXRSService {\n \n     /**\n-     * Returns connector object from the external resource, for the given type and id.\n+     * Returns connector object from the external resource, for the given type and key.\n      *\n-     * @param resourceName Name of resource to read connector object from\n+     * @param resourceKey Name of resource to read connector object from\n      * @param type user / role\n-     * @param id user id / role id\n-     * @return connector object from the external resource, for the given type and id\n+     * @param key user key / role key\n+     * @return connector object from the external resource, for the given type and key\n      */\n     @GET\n-    @Path(\"{resourceName}/{type}/{id}\")\n+    @Path(\"{resourceKey}/{type}/{id}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    ConnObjectTO getConnectorObject(@NotNull @PathParam(\"resourceName\") String resourceName,\n-            @NotNull @PathParam(\"type\") SubjectType type, @NotNull @PathParam(\"id\") Long id);\n+    ConnObjectTO getConnectorObject(@NotNull @PathParam(\"resourceKey\") String resourceKey,\n+            @NotNull @PathParam(\"type\") SubjectType type, @NotNull @PathParam(\"key\") Long key);\n \n     /**\n      * Returns a list of classes that can be used to customize the propagation process.\n@@ -76,13 +76,13 @@ ConnObjectTO getConnectorObject(@NotNull @PathParam(\"resourceName\") String resou\n     /**\n      * Returns the resource with matching name.\n      *\n-     * @param resourceName Name of resource to be read\n+     * @param resourceKey Name of resource to be read\n      * @return resource with matching name\n      */\n     @GET\n-    @Path(\"{resourceName}\")\n+    @Path(\"{resourceKey}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    ResourceTO read(@NotNull @PathParam(\"resourceName\") String resourceName);\n+    ResourceTO read(@NotNull @PathParam(\"resourceKey\") String resourceKey);\n \n     /**\n      * Returns a list of all resources.\n@@ -120,23 +120,23 @@ ConnObjectTO getConnectorObject(@NotNull @PathParam(\"resourceName\") String resou\n     /**\n      * Updates the resource matching the given name.\n      *\n-     * @param resourceName name of resource to be updated\n+     * @param resourceKey name of resource to be updated\n      * @param resourceTO resource to be stored\n      */\n     @PUT\n-    @Path(\"{resourceName}\")\n+    @Path(\"{resourceKey}\")\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    void update(@NotNull @PathParam(\"resourceName\") String resourceName, @NotNull ResourceTO resourceTO);\n+    void update(@NotNull @PathParam(\"resourceKey\") String resourceKey, @NotNull ResourceTO resourceTO);\n \n     /**\n      * Deletes the resource matching the given name.\n      *\n-     * @param resourceName name of resource to be deleted\n+     * @param resourceKey name of resource to be deleted\n      */\n     @DELETE\n-    @Path(\"{resourceName}\")\n+    @Path(\"{resourceKey}\")\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    void delete(@NotNull @PathParam(\"resourceName\") String resourceName);\n+    void delete(@NotNull @PathParam(\"resourceKey\") String resourceKey);\n \n     /**\n      * Checks wether the connection to resource could be established.\n@@ -152,7 +152,7 @@ ConnObjectTO getConnectorObject(@NotNull @PathParam(\"resourceName\") String resou\n     /**\n      * De-associate users or roles (depending on the provided subject type) from the given resource.\n      *\n-     * @param resourceName name of resource\n+     * @param resourceKey name of resource\n      * @param subjectType subject type (user or role)\n      * @param type resource de-association action type\n      * @param subjectIds users or roles against which the bulk action will be performed\n@@ -163,10 +163,10 @@ ConnObjectTO getConnectorObject(@NotNull @PathParam(\"resourceName\") String resou\n                 value = \"Featuring <tt>BulkActionResult</tt> as <tt>Entity</tt>\")\n     })\n     @POST\n-    @Path(\"{resourceName}/bulkDeassociation/{subjType}/{type}\")\n+    @Path(\"{resourceKey}/bulkDeassociation/{subjType}/{type}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    BulkActionResult bulkDeassociation(@NotNull @PathParam(\"resourceName\") String resourceName,\n+    BulkActionResult bulkDeassociation(@NotNull @PathParam(\"resourceKey\") String resourceKey,\n             @NotNull @PathParam(\"subjType\") SubjectType subjectType,\n             @NotNull @PathParam(\"type\") ResourceDeassociationActionType type, @NotNull List<SubjectId> subjectIds);\n ","previous_filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/ResourceService.java"},{"sha":"f0bbf084ee8db680070bc265f7a894bd74bcc7d4","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java","status":"renamed","additions":29,"deletions":29,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.rest.api;\n+package org.apache.syncope.common.rest.api.service;\n \n import java.util.List;\n import javax.validation.constraints.Min;\n@@ -53,41 +53,41 @@ public interface RoleService extends JAXRSService {\n     /**\n      * Returns children roles of given role.\n      *\n-     * @param roleId id of role to get children from\n+     * @param roleKey key of role to get children from\n      * @return children roles of given role\n      */\n     @GET\n-    @Path(\"{roleId}/children\")\n+    @Path(\"{roleKey}/children\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<RoleTO> children(@NotNull @PathParam(\"roleId\") Long roleId);\n+    List<RoleTO> children(@NotNull @PathParam(\"roleKey\") Long roleKey);\n \n     /**\n      * Returns parent role of the given role (or null if no parent exists).\n      *\n-     * @param roleId id of role to get parent role from\n+     * @param roleKey key of role to get parent role from\n      * @return parent role of the given role (or null if no parent exists)\n      */\n     @GET\n-    @Path(\"{roleId}/parent\")\n+    @Path(\"{roleKey}/parent\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    RoleTO parent(@NotNull @PathParam(\"roleId\") Long roleId);\n+    RoleTO parent(@NotNull @PathParam(\"roleKey\") Long roleKey);\n \n     /**\n-     * Reads the role matching the provided roleId.\n+     * Reads the role matching the provided roleKey.\n      *\n-     * @param roleId id of role to be read\n+     * @param roleKey key of role to be read\n      * @return role with matching id\n      */\n     @GET\n-    @Path(\"{roleId}\")\n+    @Path(\"{roleKey}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    RoleTO read(@NotNull @PathParam(\"roleId\") Long roleId);\n+    RoleTO read(@NotNull @PathParam(\"roleKey\") Long roleKey);\n \n     /**\n      * This method is similar to {@link #read(Long)}, but uses different authentication handling to ensure that a user\n      * can read his own roles.\n      *\n-     * @param roleId id of role to be read\n+     * @param roleKey key of role to be read\n      * @return role with matching id\n      */\n     @Descriptions({\n@@ -96,9 +96,9 @@ public interface RoleService extends JAXRSService {\n                 + \"ensure that a user can read his own roles.\")\n     })\n     @GET\n-    @Path(\"{roleId}/own\")\n+    @Path(\"{roleKey}/own\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    RoleTO readSelf(@NotNull @PathParam(\"roleId\") Long roleId);\n+    RoleTO readSelf(@NotNull @PathParam(\"roleKey\") Long roleKey);\n \n     /**\n      * Returns a paged list of existing roles.\n@@ -221,10 +221,10 @@ PagedResult<RoleTO> search(@QueryParam(PARAM_FIQL) String fiql,\n     Response create(@NotNull RoleTO roleTO);\n \n     /**\n-     * Updates role matching the provided roleId.\n+     * Updates role matching the provided roleKey.\n      *\n-     * @param roleId id of role to be updated\n-     * @param roleMod modification to be applied to role matching the provided roleId\n+     * @param roleKey key of role to be updated\n+     * @param roleMod modification to be applied to role matching the provided roleKey\n      * @return <tt>Response</tt> object featuring the updated role enriched with propagation status information\n      * - {@link RoleTO} as <tt>Entity</tt>\n      */\n@@ -234,15 +234,15 @@ PagedResult<RoleTO> search(@QueryParam(PARAM_FIQL) String fiql,\n                 + \"<tt>RoleTO</tt> as <tt>Entity</tt>\")\n     })\n     @POST\n-    @Path(\"{roleId}\")\n+    @Path(\"{roleKey}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response update(@NotNull @PathParam(\"roleId\") Long roleId, @NotNull RoleMod roleMod);\n+    Response update(@NotNull @PathParam(\"roleKey\") Long roleKey, @NotNull RoleMod roleMod);\n \n     /**\n-     * Deletes role matching provided roleId.\n+     * Deletes role matching provided roleKey.\n      *\n-     * @param roleId id of role to be deleted\n+     * @param roleKey key of role to be deleted\n      * @return <tt>Response</tt> object featuring the deleted role enriched with propagation status information\n      * - {@link RoleTO} as <tt>Entity</tt>\n      */\n@@ -252,15 +252,15 @@ PagedResult<RoleTO> search(@QueryParam(PARAM_FIQL) String fiql,\n                 + \"<tt>RoleTO</tt> as <tt>Entity</tt>\")\n     })\n     @DELETE\n-    @Path(\"{roleId}\")\n+    @Path(\"{roleKey}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response delete(@NotNull @PathParam(\"roleId\") Long roleId);\n+    Response delete(@NotNull @PathParam(\"roleKey\") Long roleKey);\n \n     /**\n      * Executes resource-related operations on given role.\n      *\n-     * @param roleId role id.\n+     * @param roleKey role id.\n      * @param type resource association action type\n      * @param resourceNames external resources to be used for propagation-related operations\n      * @return <tt>Response</tt> object featuring\n@@ -271,17 +271,17 @@ PagedResult<RoleTO> search(@QueryParam(PARAM_FIQL) String fiql,\n                 value = \"Featuring <tt>BulkActionResult</tt> as <tt>Entity</tt>\")\n     })\n     @POST\n-    @Path(\"{roleId}/deassociate/{type}\")\n+    @Path(\"{roleKey}/deassociate/{type}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response bulkDeassociation(@NotNull @PathParam(\"roleId\") Long roleId,\n+    Response bulkDeassociation(@NotNull @PathParam(\"roleKey\") Long roleKey,\n             @NotNull @PathParam(\"type\") ResourceDeassociationActionType type,\n             @NotNull List<ResourceName> resourceNames);\n \n     /**\n      * Executes resource-related operations on given role.\n      *\n-     * @param roleId role id.\n+     * @param roleKey role id.\n      * @param type resource association action type\n      * @param resourceNames external resources to be used for propagation-related operations\n      * @return <tt>Response</tt> object featuring {@link org.apache.syncope.common.reqres.BulkActionResult}\n@@ -292,10 +292,10 @@ Response bulkDeassociation(@NotNull @PathParam(\"roleId\") Long roleId,\n                 value = \"Featuring <tt>BulkActionResult</tt> as <tt>Entity</tt>\")\n     })\n     @POST\n-    @Path(\"{roleId}/associate/{type}\")\n+    @Path(\"{roleKey}/associate/{type}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response bulkAssociation(@NotNull @PathParam(\"roleId\") Long roleId,\n+    Response bulkAssociation(@NotNull @PathParam(\"roleKey\") Long roleKey,\n             @NotNull @PathParam(\"type\") ResourceAssociationActionType type,\n             @NotNull List<ResourceName> resourceNames);\n ","previous_filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/RoleService.java"},{"sha":"d3f850b0c967c5ea35d2f59a5586ea51fc2174e4","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java","status":"renamed","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.rest.api;\n+package org.apache.syncope.common.rest.api.service;\n \n import java.util.List;\n import javax.validation.constraints.NotNull;\n@@ -49,14 +49,14 @@ public interface SchemaService extends JAXRSService {\n      * @param <T> actual SchemaTO\n      * @param attrType kind for schemas to be read\n      * @param schemaType type for schemas to be read\n-     * @param schemaName name of schema to be read\n+     * @param schemaKey name of schema to be read\n      * @return schema matching the given kind, type and name\n      */\n     @GET\n-    @Path(\"{name}\")\n+    @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     <T extends AbstractSchemaTO> T read(@NotNull @PathParam(\"kind\") AttributableType attrType,\n-            @NotNull @PathParam(\"type\") SchemaType schemaType, @NotNull @PathParam(\"name\") String schemaName);\n+            @NotNull @PathParam(\"type\") SchemaType schemaType, @NotNull @PathParam(\"key\") String schemaKey);\n \n     /**\n      * Returns a list of schemas with matching kind and type.\n@@ -94,26 +94,26 @@ <T extends AbstractSchemaTO> Response create(@NotNull @PathParam(\"kind\") Attribu\n      * @param <T> actual SchemaTO\n      * @param attrType kind for schemas to be updated\n      * @param schemaType type for schemas to be updated\n-     * @param schemaName name of schema to be updated\n+     * @param schemaKey name of schema to be updated\n      * @param schemaTO updated schema to be stored\n      */\n     @PUT\n-    @Path(\"{name}\")\n+    @Path(\"{key}\")\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     <T extends AbstractSchemaTO> void update(@NotNull @PathParam(\"kind\") AttributableType attrType,\n             @NotNull @PathParam(\"type\") SchemaType schemaType,\n-            @NotNull @PathParam(\"name\") String schemaName, @NotNull T schemaTO);\n+            @NotNull @PathParam(\"key\") String schemaKey, @NotNull T schemaTO);\n \n     /**\n      * Deletes the schema matching the given kind, type and name.\n      *\n      * @param attrType kind for schema to be deleted\n      * @param schemaType type for schema to be deleted\n-     * @param schemaName name of schema to be deleted\n+     * @param schemaKey name of schema to be deleted\n      */\n     @DELETE\n-    @Path(\"{name}\")\n+    @Path(\"{key}\")\n     void delete(@NotNull @PathParam(\"kind\") AttributableType attrType,\n             @NotNull @PathParam(\"type\") SchemaType schemaType,\n-            @NotNull @PathParam(\"name\") String schemaName);\n+            @NotNull @PathParam(\"key\") String schemaKey);\n }","previous_filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/SchemaService.java"},{"sha":"12a73cf464bfd2c1d55e08848bc099e51fe45af1","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SecurityQuestionService.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSecurityQuestionService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSecurityQuestionService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSecurityQuestionService.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.rest.api;\n+package org.apache.syncope.common.rest.api.service;\n \n import java.util.List;\n import javax.validation.constraints.NotNull;","previous_filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/SecurityQuestionService.java"},{"sha":"c3296dd04189848f440022a328588e167bdf4b5a","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"renamed","additions":25,"deletions":25,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.rest.api;\n+package org.apache.syncope.common.rest.api.service;\n \n import java.util.List;\n import javax.validation.constraints.Min;\n@@ -88,25 +88,25 @@ public interface TaskService extends JAXRSService {\n     /**\n      * Returns the task matching the given id.\n      *\n-     * @param taskId id of task to be read\n+     * @param taskKey key of task to be read\n      * @param <T> type of taskTO\n      * @return task with matching id\n      */\n     @GET\n-    @Path(\"{taskId}\")\n+    @Path(\"{taskKey}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractTaskTO> T read(@NotNull @PathParam(\"taskId\") Long taskId);\n+    <T extends AbstractTaskTO> T read(@NotNull @PathParam(\"taskKey\") Long taskKey);\n \n     /**\n      * Returns the task execution with the given id.\n      *\n-     * @param executionId id of task execution to be read\n+     * @param executionKey key of task execution to be read\n      * @return task execution with matching Id\n      */\n     @GET\n-    @Path(\"executions/{executionId}\")\n+    @Path(\"executions/{executionKey}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    TaskExecTO readExecution(@NotNull @PathParam(\"executionId\") Long executionId);\n+    TaskExecTO readExecution(@NotNull @PathParam(\"executionKey\") Long executionKey);\n \n     /**\n      * Returns a list of tasks with matching type.\n@@ -179,57 +179,57 @@ <T extends AbstractTaskTO> PagedResult<T> list(@MatrixParam(\"type\") TaskType tas\n     <T extends SchedTaskTO> Response create(@NotNull T taskTO);\n \n     /**\n-     * Updates the task matching the provided id.\n+     * Updates the task matching the provided key.\n      *\n-     * @param taskId id of task to be updated\n+     * @param taskKey key of task to be updated\n      * @param taskTO updated task to be stored\n      */\n     @PUT\n-    @Path(\"{taskId}\")\n+    @Path(\"{taskKey}\")\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    void update(@NotNull @PathParam(\"taskId\") Long taskId, @NotNull AbstractTaskTO taskTO);\n+    void update(@NotNull @PathParam(\"taskKey\") Long taskKey, @NotNull AbstractTaskTO taskTO);\n \n     /**\n-     * Deletes the task matching the provided id.\n+     * Deletes the task matching the provided key.\n      *\n-     * @param taskId id of task to be deleted\n+     * @param taskKey key of task to be deleted\n      */\n     @DELETE\n-    @Path(\"{taskId}\")\n-    void delete(@NotNull @PathParam(\"taskId\") Long taskId);\n+    @Path(\"{taskKey}\")\n+    void delete(@NotNull @PathParam(\"taskKey\") Long taskKey);\n \n     /**\n-     * Deletes the task execution matching the provided id.\n+     * Deletes the task execution matching the provided key.\n      *\n-     * @param executionId id of task execution to be deleted\n+     * @param executionKey key of task execution to be deleted\n      */\n     @DELETE\n-    @Path(\"executions/{executionId}\")\n-    void deleteExecution(@NotNull @PathParam(\"executionId\") Long executionId);\n+    @Path(\"executions/{executionKey}\")\n+    void deleteExecution(@NotNull @PathParam(\"executionKey\") Long executionKey);\n \n     /**\n      * Executes the task matching the given id.\n      *\n-     * @param taskId id of task to be executed\n+     * @param taskKey key of task to be executed\n      * @param dryRun if true, task will only be simulated\n      * @return execution report for the task matching the given id\n      */\n     @POST\n-    @Path(\"{taskId}/execute\")\n+    @Path(\"{taskKey}/execute\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    TaskExecTO execute(@NotNull @PathParam(\"taskId\") Long taskId,\n+    TaskExecTO execute(@NotNull @PathParam(\"taskKey\") Long taskKey,\n             @QueryParam(\"dryRun\") @DefaultValue(\"false\") boolean dryRun);\n \n     /**\n      * Reports task execution result.\n      *\n-     * @param executionId id of task execution being reported\n+     * @param executionKey key of task execution being reported\n      * @param reportExec execution being reported\n      */\n     @POST\n-    @Path(\"executions/{executionId}/report\")\n+    @Path(\"executions/{executionKey}/report\")\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    void report(@NotNull @PathParam(\"executionId\") Long executionId, @NotNull ReportExecTO reportExec);\n+    void report(@NotNull @PathParam(\"executionKey\") Long executionKey, @NotNull ReportExecTO reportExec);\n \n     /**\n      * Executes the provided bulk action.","previous_filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/TaskService.java"},{"sha":"cd3a302ce806b090536342100736c04cfaf80313","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.rest.api;\n+package org.apache.syncope.common.rest.api.service;\n \n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n@@ -91,19 +91,19 @@ Response create(@NotNull UserTO userTO,\n     /**\n      * Self-updates user.\n      *\n-     * @param userId id of user to be updated\n-     * @param userMod modification to be applied to user matching the provided userId\n+     * @param userKey id of user to be updated\n+     * @param userMod modification to be applied to user matching the provided userKey\n      * @return <tt>Response</tt> object featuring the updated user - {@link UserTO} as <tt>Entity</tt>\n      */\n     @Descriptions({\n         @Description(target = DocTarget.RESPONSE,\n                 value = \"Featuring the updated user - <tt>UserTO</tt> as <tt>Entity</tt>\")\n     })\n     @POST\n-    @Path(\"{userId}\")\n+    @Path(\"{userKey}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response update(@NotNull @PathParam(\"userId\") Long userId, @NotNull UserMod userMod);\n+    Response update(@NotNull @PathParam(\"userKey\") Long userKey, @NotNull UserMod userMod);\n \n     /**\n      * Self-deletes user.","previous_filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/UserSelfService.java"},{"sha":"ea1d197eaa24ec8b9f6fe3fa77186116ceac2b4e","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java","status":"renamed","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.rest.api;\n+package org.apache.syncope.common.rest.api.service;\n \n import java.util.List;\n import javax.validation.constraints.Min;\n@@ -54,43 +54,43 @@\n public interface UserService extends JAXRSService {\n \n     /**\n-     * Gives the username for the provided user id.\n+     * Gives the username for the provided user key.\n      *\n-     * @param userId user id\n-     * @return <tt>Response</tt> object featuring HTTP header with username matching the given userId\n+     * @param userKey user key\n+     * @return <tt>Response</tt> object featuring HTTP header with username matching the given userKey\n      */\n     @Descriptions({\n         @Description(target = DocTarget.RESPONSE,\n-                value = \"Featuring HTTP header with username matching the given userId\")\n+                value = \"Featuring HTTP header with username matching the given userKey\")\n     })\n     @OPTIONS\n-    @Path(\"{userId}/username\")\n-    Response getUsername(@NotNull @PathParam(\"userId\") Long userId);\n+    @Path(\"{userKey}/username\")\n+    Response getUsername(@NotNull @PathParam(\"userKey\") Long userKey);\n \n     /**\n-     * Gives the user id for the provided username.\n+     * Gives the user key for the provided username.\n      *\n      * @param username username\n-     * @return <tt>Response</tt> object featuring HTTP header with userId matching the given username\n+     * @return <tt>Response</tt> object featuring HTTP header with userKey matching the given username\n      */\n     @Descriptions({\n         @Description(target = DocTarget.RESPONSE,\n-                value = \"Featuring HTTP header with userId matching the given username\")\n+                value = \"Featuring HTTP header with userKey matching the given username\")\n     })\n     @OPTIONS\n-    @Path(\"{username}/userId\")\n+    @Path(\"{username}/userKey\")\n     Response getUserId(@NotNull @PathParam(\"username\") String username);\n \n     /**\n-     * Reads the user matching the provided userId.\n+     * Reads the user matching the provided userKey.\n      *\n-     * @param userId id of user to be read\n-     * @return User matching the provided userId\n+     * @param userKey id of user to be read\n+     * @return User matching the provided userKey\n      */\n     @GET\n-    @Path(\"{userId}\")\n+    @Path(\"{userKey}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    UserTO read(@NotNull @PathParam(\"userId\") Long userId);\n+    UserTO read(@NotNull @PathParam(\"userKey\") Long userKey);\n \n     /**\n      * Returns a paged list of existing users.\n@@ -214,10 +214,10 @@ Response create(@NotNull UserTO userTO,\n             @DefaultValue(\"true\") @QueryParam(\"storePassword\") boolean storePassword);\n \n     /**\n-     * Updates user matching the provided userId.\n+     * Updates user matching the provided userKey.\n      *\n-     * @param userId id of user to be updated\n-     * @param userMod modification to be applied to user matching the provided userId\n+     * @param userKey id of user to be updated\n+     * @param userMod modification to be applied to user matching the provided userKey\n      * @return <tt>Response</tt> object featuring the updated user enriched with propagation status information\n      * - {@link UserTO} as <tt>Entity</tt>\n      */\n@@ -227,15 +227,15 @@ Response create(@NotNull UserTO userTO,\n                 + \"<tt>UserTO</tt> as <tt>Entity</tt>\")\n     })\n     @POST\n-    @Path(\"{userId}\")\n+    @Path(\"{userKey}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response update(@NotNull @PathParam(\"userId\") Long userId, @NotNull UserMod userMod);\n+    Response update(@NotNull @PathParam(\"userKey\") Long userKey, @NotNull UserMod userMod);\n \n     /**\n-     * Performs a status update on user matching provided userId.\n+     * Performs a status update on user matching provided userKey.\n      *\n-     * @param userId id of user to be subjected to status update\n+     * @param userKey id of user to be subjected to status update\n      * @param statusMod status update details\n      * @return <tt>Response</tt> object featuring the updated user enriched with propagation status information\n      * - {@link UserTO} as <tt>Entity</tt>\n@@ -246,15 +246,15 @@ Response create(@NotNull UserTO userTO,\n                 + \"<tt>UserTO</tt> as <tt>Entity</tt>\")\n     })\n     @POST\n-    @Path(\"{userId}/status\")\n+    @Path(\"{userKey}/status\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response status(@NotNull @PathParam(\"userId\") Long userId, @NotNull StatusMod statusMod);\n+    Response status(@NotNull @PathParam(\"userKey\") Long userKey, @NotNull StatusMod statusMod);\n \n     /**\n-     * Deletes user matching provided userId.\n+     * Deletes user matching provided userKey.\n      *\n-     * @param userId id of user to be deleted\n+     * @param userKey id of user to be deleted\n      * @return <tt>Response</tt> object featuring the deleted user enriched with propagation status information\n      * - {@link UserTO} as <tt>Entity</tt>\n      */\n@@ -264,14 +264,14 @@ Response create(@NotNull UserTO userTO,\n                 + \"<tt>UserTO</tt> as <tt>Entity</tt>\")\n     })\n     @DELETE\n-    @Path(\"{userId}\")\n+    @Path(\"{userKey}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response delete(@NotNull @PathParam(\"userId\") Long userId);\n+    Response delete(@NotNull @PathParam(\"userKey\") Long userKey);\n \n     /**\n      * Executes resource-related operations on given user.\n      *\n-     * @param userId user id\n+     * @param userKey user key\n      * @param type resource de-association action type\n      * @param resourceNames external resources to be used for propagation-related operations\n      * @return <tt>Response</tt> object featuring {@link BulkActionResult} as <tt>Entity</tt>\n@@ -281,17 +281,17 @@ Response create(@NotNull UserTO userTO,\n                 value = \"Featuring <tt>BulkActionResult</tt> as <tt>Entity</tt>\")\n     })\n     @POST\n-    @Path(\"{userId}/bulkDeassociation/{type}\")\n+    @Path(\"{userKey}/bulkDeassociation/{type}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response bulkDeassociation(@NotNull @PathParam(\"userId\") Long userId,\n+    Response bulkDeassociation(@NotNull @PathParam(\"userKey\") Long userKey,\n             @NotNull @PathParam(\"type\") ResourceDeassociationActionType type,\n             @NotNull List<ResourceName> resourceNames);\n \n     /**\n      * Executes resource-related operations on given user.\n      *\n-     * @param userId user id.\n+     * @param userKey user key.\n      * @param type resource association action type\n      * @param associationMod external resources to be used for propagation-related operations\n      * @return <tt>Response</tt> object featuring {@link BulkActionResult} as <tt>Entity</tt>\n@@ -300,17 +300,17 @@ Response bulkDeassociation(@NotNull @PathParam(\"userId\") Long userId,\n         @Description(target = DocTarget.RESPONSE, value = \"Featuring <tt>BulkActionResult</tt> as <tt>Entity</tt>\")\n     })\n     @POST\n-    @Path(\"{userId}/bulkAssociation/{type}\")\n+    @Path(\"{userKey}/bulkAssociation/{type}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response bulkAssociation(@NotNull @PathParam(\"userId\") Long userId,\n+    Response bulkAssociation(@NotNull @PathParam(\"userKey\") Long userKey,\n             @NotNull @PathParam(\"type\") ResourceAssociationActionType type,\n             @NotNull ResourceAssociationMod associationMod);\n \n     /**\n      * Executes the provided bulk action.\n      *\n-     * @param bulkAction list of user ids against which the bulk action will be performed.\n+     * @param bulkAction list of user keys against which the bulk action will be performed.\n      * @return Bulk action result\n      */\n     @POST","previous_filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/UserService.java"},{"sha":"256317d7b92d37ac5e182b08f80ee93a2152132c","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowService.java","status":"renamed","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserWorkflowService.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.rest.api;\n+package org.apache.syncope.common.rest.api.service;\n \n import java.util.List;\n import javax.validation.constraints.NotNull;\n@@ -47,28 +47,28 @@ public interface UserWorkflowService extends JAXRSService {\n     List<WorkflowFormTO> getForms();\n \n     /**\n-     * Returns a list of all available workflow forms with matching name, for the given user id.\n+     * Returns a list of all available workflow forms with matching name, for the given user key.\n      *\n-     * @param userId user id\n+     * @param userKey user key\n      * @param name form name\n-     * @return list of all available workflow forms with matching name, fir the given user id.\n+     * @return list of all available workflow forms with matching name, fir the given user key.\n      */\n     @GET\n-    @Path(\"forms/{userId}/{name}\")\n+    @Path(\"forms/{userKey}/{name}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     List<WorkflowFormTO> getFormsByName(\n-            @NotNull @PathParam(\"userId\") final Long userId, @NotNull @PathParam(\"name\") final String name);\n+            @NotNull @PathParam(\"userKey\") final Long userKey, @NotNull @PathParam(\"name\") final String name);\n \n     /**\n-     * Returns a list of available forms for the given user id.\n+     * Returns a list of available forms for the given user key.\n      *\n-     * @param userId user id\n-     * @return list of available forms for the given user id\n+     * @param userKey user key\n+     * @return list of available forms for the given user key\n      */\n     @GET\n-    @Path(\"forms/{userId}\")\n+    @Path(\"forms/{userKey}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    WorkflowFormTO getFormForUser(@NotNull @PathParam(\"userId\") Long userId);\n+    WorkflowFormTO getFormForUser(@NotNull @PathParam(\"userKey\") Long userKey);\n \n     /**\n      * Claims the form for the given task id.","previous_filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/UserWorkflowService.java"},{"sha":"709ab374c4d3b8fc64657c4d02dae945d7a0b9f4","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/WorkflowService.java","status":"renamed","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FWorkflowService.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.rest.api;\n+package org.apache.syncope.common.rest.api.service;\n \n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n@@ -32,6 +32,7 @@\n import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for workflow definition management.","previous_filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/WorkflowService.java"},{"sha":"f7a11fd40d1affb5b0921e22c08e2cc6c801be01","filename":"syncope620/server/logic/src/main/java/org/apache/syncope/server/logic/WorkflowLogic.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FWorkflowLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FWorkflowLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FWorkflowLogic.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -93,6 +93,7 @@ public void exportRoleDiagram(final OutputStream os)\n \n     private void importDefinition(\n             final WorkflowAdapter adapter, final WorkflowDefinitionFormat format, final String definition) {\n+\n         adapter.importDefinition(format, definition);\n     }\n "},{"sha":"240c8c35c7f2cc672c30603da1ab9240b061aa7e","filename":"syncope620/server/pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpom.xml?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -42,6 +42,7 @@ under the License.\n     <module>workflow-api</module>\n     <module>workflow-java</module>\n     <module>logic</module>\n+    <module>rest-cxf</module>\n   </modules>\n \n </project>"},{"sha":"c8e020cac870e80bb543568ba09f011625355950","filename":"syncope620/server/rest-cxf/pom.xml","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fpom.xml?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,93 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope</groupId>\n+    <artifactId>syncope-server</artifactId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Server REST CXF</name>\n+  <description>Apache Syncope Server REST CXF</description>\n+  <groupId>org.apache.syncope.server</groupId>\n+  <artifactId>syncope-server-rest-cxf</artifactId>\n+  <packaging>jar</packaging>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.geronimo.specs</groupId>\n+      <artifactId>geronimo-jpa_2.0_spec</artifactId>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-orm</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.jaxrs</groupId>\n+      <artifactId>jackson-jaxrs-json-provider</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.module</groupId>\n+      <artifactId>jackson-module-afterburner</artifactId>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>org.apache.cxf</groupId>\n+      <artifactId>cxf-rt-frontend-jaxrs</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.cxf</groupId>\n+      <artifactId>cxf-rt-rs-extension-providers</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.cxf</groupId>\n+      <artifactId>cxf-rt-rs-extension-search</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.cxf</groupId>\n+      <artifactId>cxf-rt-frontend-jaxws</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.cxf</groupId>\n+      <artifactId>cxf-rt-rs-service-description</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.cxf</groupId>\n+      <artifactId>cxf-rt-rs-client</artifactId>\n+    </dependency>  \n+    \n+    <dependency>\n+      <groupId>org.apache.syncope.server</groupId>\n+      <artifactId>syncope-server-logic</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.common</groupId>\n+      <artifactId>syncope-common-rest-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+</project>"},{"sha":"7c879c8172589d2a819997d512c1f4bb234933be","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/QueryResourceInfoComparator.java","status":"added","additions":113,"deletions":0,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2FQueryResourceInfoComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2FQueryResourceInfoComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2FQueryResourceInfoComparator.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.rest.cxf;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.cxf.jaxrs.ext.ResourceComparator;\n+import org.apache.cxf.jaxrs.model.ClassResourceInfo;\n+import org.apache.cxf.jaxrs.model.OperationResourceInfo;\n+import org.apache.cxf.jaxrs.model.OperationResourceInfoComparator;\n+import org.apache.cxf.jaxrs.model.Parameter;\n+import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n+import org.apache.cxf.message.Message;\n+\n+public class QueryResourceInfoComparator extends OperationResourceInfoComparator implements ResourceComparator {\n+\n+    public QueryResourceInfoComparator() {\n+        super(null, null);\n+    }\n+\n+    @Override\n+    public int compare(final ClassResourceInfo cri1, final ClassResourceInfo cri2, final Message message) {\n+        // Leave Class selection to CXF\n+        return 0;\n+    }\n+\n+    @Override\n+    public int compare(final OperationResourceInfo oper1, final OperationResourceInfo oper2, final Message message) {\n+        // Check if CXF can make a decision\n+        int cxfResult = super.compare(oper1, oper2);\n+        if (cxfResult != 0) {\n+            return cxfResult;\n+        }\n+\n+        int op1Counter = getMatchingRate(oper1, message);\n+        int op2Counter = getMatchingRate(oper2, message);\n+\n+        return op1Counter == op2Counter\n+                ? 0\n+                : op1Counter < op2Counter\n+                        ? 1\n+                        : -1;\n+    }\n+\n+    /**\n+     * This method calculates a number indicating a good or bad match between values provided within the request and\n+     * expected method parameters. A higher number means a better match.\n+     *\n+     * @param operation The operation to be rated, based on contained parameterInfo values.\n+     * @param message A message containing query and header values from user request\n+     * @return A positive or negative number, indicating a good match between query and method\n+     */\n+    protected int getMatchingRate(final OperationResourceInfo operation, final Message message) {\n+        List<Parameter> params = operation.getParameters();\n+        if (params == null || params.isEmpty()) {\n+            return 0;\n+        }\n+\n+        // Get Request QueryParams\n+        String query = (String) message.get(Message.QUERY_STRING);\n+        String path = (String) message.get(Message.REQUEST_URI);\n+        Map<String, List<String>> qParams = JAXRSUtils.getStructuredParams(query, \"&\", true, false);\n+        Map<String, List<String>> mParams = JAXRSUtils.getMatrixParams(path, true);\n+        // Get Request Headers\n+        Map<?, ?> qHeader = (java.util.Map<?, ?>) message.get(Message.PROTOCOL_HEADERS);\n+\n+        int rate = 0;\n+        for (Parameter p : params) {\n+            switch (p.getType()) {\n+                case QUERY:\n+                    if (qParams.containsKey(p.getName())) {\n+                        rate += 2;\n+                    } else if (p.getDefaultValue() == null) {\n+                        rate -= 1;\n+                    }\n+                    break;\n+                case MATRIX:\n+                    if (mParams.containsKey(p.getName())) {\n+                        rate += 2;\n+                    } else if (p.getDefaultValue() == null) {\n+                        rate -= 1;\n+                    }\n+                    break;\n+                case HEADER:\n+                    if (qHeader.containsKey(p.getName())) {\n+                        rate += 2;\n+                    } else if (p.getDefaultValue() == null) {\n+                        rate -= 1;\n+                    }\n+                    break;\n+                default:\n+                    break;\n+            }\n+        }\n+        return rate;\n+    }\n+}"},{"sha":"9168ab10785ec536262253d2268dd932c5ef3b18","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/AbstractServiceImpl.java","status":"added","additions":227,"deletions":0,"changes":227,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,227 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.rest.cxf.service;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.EntityTag;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.UriBuilder;\n+import javax.ws.rs.core.UriInfo;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.apache.cxf.jaxrs.ext.search.SearchBean;\n+import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n+import org.apache.cxf.jaxrs.ext.search.SearchContext;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n+import org.apache.syncope.common.rest.api.Preference;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.server.misc.search.SearchCondVisitor;\n+import org.apache.syncope.server.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.server.persistence.api.dao.search.SearchCond;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+abstract class AbstractServiceImpl implements JAXRSService {\n+\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractServiceImpl.class);\n+\n+    protected static final String OPTIONS_ALLOW = \"GET,POST,OPTIONS,HEAD\";\n+\n+    @Context\n+    protected UriInfo uriInfo;\n+\n+    @Context\n+    protected MessageContext messageContext;\n+\n+    @Context\n+    protected SearchContext searchContext;\n+\n+    /**\n+     * Reads <tt>Prefer</tt> header from request and parses into a <tt>Preference</tt> instance.\n+     *\n+     * @return a <tt>Preference</tt> instance matching the passed <tt>Prefer</tt> header,\n+     * or <tt>Preference.NONE</tt> if missing.\n+     */\n+    protected Preference getPreference() {\n+        return Preference.fromString(messageContext.getHttpHeaders().getHeaderString(RESTHeaders.PREFER));\n+    }\n+\n+    /**\n+     * Builds response to successful <tt>create</tt> request, taking into account any <tt>Prefer</tt> header.\n+     *\n+     * @param id identifier of the created entity\n+     * @param entity the entity just created\n+     * @return response to successful <tt>create</tt> request\n+     */\n+    protected Response createResponse(final Object id, final Object entity) {\n+        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(id)).build();\n+\n+        Response.ResponseBuilder builder = Response.\n+                created(location).\n+                header(RESTHeaders.RESOURCE_ID, id);\n+\n+        switch (getPreference()) {\n+            case RETURN_NO_CONTENT:\n+                break;\n+\n+            case RETURN_CONTENT:\n+            case NONE:\n+            default:\n+                builder = builder.entity(entity);\n+                break;\n+\n+        }\n+        if (getPreference() == Preference.RETURN_CONTENT || getPreference() == Preference.RETURN_NO_CONTENT) {\n+            builder = builder.header(RESTHeaders.PREFERENCE_APPLIED, getPreference().toString());\n+        }\n+\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Builds response to successful modification request, taking into account any <tt>Prefer</tt> header.\n+     *\n+     * @param entity the entity just modified\n+     * @return response to successful modification request\n+     */\n+    protected Response modificationResponse(final Object entity) {\n+        Response.ResponseBuilder builder;\n+        switch (getPreference()) {\n+            case RETURN_NO_CONTENT:\n+                builder = Response.noContent();\n+                break;\n+\n+            case RETURN_CONTENT:\n+            case NONE:\n+            default:\n+                builder = Response.ok(entity);\n+                break;\n+        }\n+        if (getPreference() == Preference.RETURN_CONTENT || getPreference() == Preference.RETURN_NO_CONTENT) {\n+            builder = builder.header(RESTHeaders.PREFERENCE_APPLIED, getPreference().toString());\n+        }\n+\n+        return builder.build();\n+    }\n+\n+    protected void checkETag(final String etag) {\n+        Response.ResponseBuilder builder = messageContext.getRequest().evaluatePreconditions(new EntityTag(etag));\n+        if (builder != null) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.ConcurrentModification);\n+            sce.getElements().add(\"Mismatching ETag value\");\n+            throw sce;\n+        }\n+    }\n+\n+    protected SearchCond getSearchCond(final String fiql) {\n+        try {\n+            SearchCondVisitor visitor = new SearchCondVisitor();\n+            SearchCondition<SearchBean> sc = searchContext.getCondition(fiql, SearchBean.class);\n+            sc.accept(visitor);\n+\n+            return visitor.getQuery();\n+        } catch (Exception e) {\n+            LOG.error(\"Invalid FIQL expression: {}\", fiql, e);\n+\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+            sce.getElements().add(fiql);\n+            throw sce;\n+        }\n+    }\n+\n+    protected List<OrderByClause> getOrderByClauses(final String orderBy) {\n+        if (StringUtils.isBlank(orderBy)) {\n+            return Collections.<OrderByClause>emptyList();\n+        }\n+\n+        List<OrderByClause> result = new ArrayList<OrderByClause>();\n+\n+        for (String clause : orderBy.split(\",\")) {\n+            String[] elems = clause.split(\" \");\n+\n+            if (elems.length > 0 && StringUtils.isNotBlank(elems[0])) {\n+                OrderByClause obc = new OrderByClause();\n+                obc.setField(elems[0].trim());\n+                if (elems.length > 1 && StringUtils.isNotBlank(elems[1])) {\n+                    obc.setDirection(elems[1].trim().equalsIgnoreCase(OrderByClause.Direction.ASC.name())\n+                            ? OrderByClause.Direction.ASC : OrderByClause.Direction.DESC);\n+                }\n+                result.add(obc);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    /**\n+     * Builds a paged result out of a list of items and additional information.\n+     *\n+     * @param <T> result type\n+     * @param list bare list of items to be returned\n+     * @param page current page\n+     * @param size requested size\n+     * @param totalCount total result size (not considering pagination)\n+     * @return paged result\n+     */\n+    protected <T extends AbstractBaseBean> PagedResult<T> buildPagedResult(\n+            final List<T> list, final int page, final int size, final int totalCount) {\n+\n+        PagedResult<T> result = new PagedResult<T>();\n+        result.getResult().addAll(list);\n+\n+        result.setPage(page);\n+        result.setSize(result.getResult().size());\n+        result.setTotalCount(totalCount);\n+\n+        UriBuilder builder = uriInfo.getAbsolutePathBuilder();\n+        MultivaluedMap<String, String> queryParams = uriInfo.getQueryParameters();\n+        for (Map.Entry<String, List<String>> queryParam : queryParams.entrySet()) {\n+            builder = builder.queryParam(queryParam.getKey(), queryParam.getValue().toArray());\n+        }\n+\n+        if (result.getPage() > 1) {\n+            result.setPrev(builder.\n+                    replaceQueryParam(PARAM_PAGE, result.getPage() - 1).\n+                    replaceQueryParam(PARAM_SIZE, size).\n+                    build());\n+        }\n+        if ((result.getPage() - 1) * size + result.getSize() < totalCount) {\n+            result.setNext(builder.\n+                    replaceQueryParam(PARAM_PAGE, result.getPage() + 1).\n+                    replaceQueryParam(PARAM_SIZE, size).\n+                    build());\n+        }\n+\n+        return result;\n+    }\n+\n+}"},{"sha":"164e1be404c9609047581189d1257be8c1b517a7","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/AddETagFilter.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FAddETagFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FAddETagFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FAddETagFilter.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.rest.cxf.service;\n+\n+import java.io.IOException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.core.EntityTag;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.ext.Provider;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.to.AbstractAnnotatedBean;\n+\n+/**\n+ * Adds the <tt>ETag</tt> filter to any response containing an instance of <tt>AbstractSysInfoTO</tt> as entity.\n+ * The actual ETag value is computed on the basis of last change date (or creation date if not available).\n+ *\n+ * @see AbstractSysInfoTO\n+ */\n+@Provider\n+public class AddETagFilter implements ContainerResponseFilter {\n+\n+    @Override\n+    public void filter(final ContainerRequestContext reqCtx, final ContainerResponseContext resCtx) throws IOException {\n+        if (resCtx.getEntity() instanceof AbstractAnnotatedBean && resCtx.getEntityTag() == null) {\n+            AbstractAnnotatedBean sysInfo = (AbstractAnnotatedBean) resCtx.getEntity();\n+            String etagValue = sysInfo.getETagValue();\n+            if (StringUtils.isNotBlank(etagValue)) {\n+                resCtx.getHeaders().add(HttpHeaders.ETAG, new EntityTag(etagValue).toString());\n+            }\n+        }\n+    }\n+}"},{"sha":"3a06c51fb7d06de66233d857bde524020d125062","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/ConfigurationServiceImpl.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FConfigurationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FConfigurationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FConfigurationServiceImpl.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.rest.cxf.service;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.List;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.StreamingOutput;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.ConfTO;\n+import org.apache.syncope.common.lib.wrap.MailTemplate;\n+import org.apache.syncope.common.lib.wrap.Validator;\n+import org.apache.syncope.common.rest.api.CollectionWrapper;\n+import org.apache.syncope.common.rest.api.service.ConfigurationService;\n+import org.apache.syncope.server.logic.ConfigurationLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ConfigurationServiceImpl extends AbstractServiceImpl implements ConfigurationService {\n+\n+    private static final String CONTENT_XML = \"content.xml\";\n+\n+    @Autowired\n+    private ConfigurationLogic logic;\n+\n+    @Override\n+    public Response export() {\n+        StreamingOutput sout = new StreamingOutput() {\n+\n+            @Override\n+            public void write(final OutputStream os) throws IOException {\n+                logic.export(os);\n+            }\n+        };\n+        return Response.ok(sout).\n+                type(MediaType.TEXT_XML).\n+                header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename=\" + CONTENT_XML).\n+                build();\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        logic.delete(key);\n+    }\n+\n+    @Override\n+    public List<MailTemplate> getMailTemplates() {\n+        return CollectionWrapper.wrap(logic.getMailTemplates(), MailTemplate.class);\n+    }\n+\n+    @Override\n+    public List<Validator> getValidators() {\n+        return CollectionWrapper.wrap(logic.getValidators(), Validator.class);\n+    }\n+\n+    @Override\n+    public ConfTO list() {\n+        return logic.list();\n+    }\n+\n+    @Override\n+    public AttrTO read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public void set(final String key, final AttrTO value) {\n+        value.setSchema(key);\n+        logic.set(value);\n+    }\n+}"},{"sha":"369c8c1fee3f6d690e91a271e974753a0911bb68","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/ConnectorServiceImpl.java","status":"added","additions":133,"deletions":0,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.rest.cxf.service;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.BulkAction;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.ConnBundleTO;\n+import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n+import org.apache.syncope.common.lib.to.ConnInstanceTO;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.ConnectorService;\n+import org.apache.syncope.server.logic.ConnectorLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ConnectorServiceImpl extends AbstractServiceImpl implements ConnectorService {\n+\n+    @Autowired\n+    private ConnectorLogic logic;\n+\n+    @Override\n+    public Response create(final ConnInstanceTO connInstanceTO) {\n+        ConnInstanceTO connInstance = logic.create(connInstanceTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(connInstance.getKey())).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_ID, connInstance.getKey()).\n+                build();\n+    }\n+\n+    @Override\n+    public void delete(final Long connInstanceKey) {\n+        logic.delete(connInstanceKey);\n+    }\n+\n+    @Override\n+    public List<ConnBundleTO> getBundles(final String lang) {\n+        return logic.getBundles(lang);\n+    }\n+\n+    @Override\n+    public List<ConnConfProperty> getConfigurationProperties(final Long connInstanceKey) {\n+        return logic.getConfigurationProperties(connInstanceKey);\n+    }\n+\n+    @Override\n+    public List<PlainSchemaTO> getSchemaNames(final Long connInstanceKey, final ConnInstanceTO connInstanceTO,\n+            final boolean includeSpecial) {\n+\n+        connInstanceTO.setKey(connInstanceKey);\n+\n+        List<String> schemaNames = logic.getSchemaNames(connInstanceTO, includeSpecial);\n+        List<PlainSchemaTO> result = new ArrayList<>(schemaNames.size());\n+        for (String name : schemaNames) {\n+            PlainSchemaTO schemaTO = new PlainSchemaTO();\n+            schemaTO.setKey(name);\n+            result.add(schemaTO);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public List<ConnIdObjectClassTO> getSupportedObjectClasses(final Long connInstanceKey,\n+            final ConnInstanceTO connInstanceTO) {\n+\n+        connInstanceTO.setKey(connInstanceKey);\n+\n+        List<String> objectClasses = logic.getSupportedObjectClasses(connInstanceTO);\n+        List<ConnIdObjectClassTO> result = new ArrayList<>(objectClasses.size());\n+        for (String objectClass : objectClasses) {\n+            result.add(new ConnIdObjectClassTO(objectClass));\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public List<ConnInstanceTO> list(final String lang) {\n+        return logic.list(lang);\n+    }\n+\n+    @Override\n+    public ConnInstanceTO read(final Long connInstanceKey) {\n+        return logic.read(connInstanceKey);\n+    }\n+\n+    @Override\n+    public ConnInstanceTO readByResource(final String resourceName) {\n+        return logic.readByResource(resourceName);\n+    }\n+\n+    @Override\n+    public void update(final Long connInstanceKey, final ConnInstanceTO connInstanceTO) {\n+        connInstanceTO.setKey(connInstanceKey);\n+        logic.update(connInstanceTO);\n+    }\n+\n+    @Override\n+    public boolean check(final ConnInstanceTO connInstanceTO) {\n+        return logic.check(connInstanceTO);\n+    }\n+\n+    @Override\n+    public void reload() {\n+        logic.reload();\n+    }\n+\n+    @Override\n+    public BulkActionResult bulk(final BulkAction bulkAction) {\n+        return logic.bulk(bulkAction);\n+    }\n+}"},{"sha":"70e6114166a8e510f633b226e8bb4b6a36c4ba88","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/EntitlementServiceImpl.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FEntitlementServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FEntitlementServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FEntitlementServiceImpl.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.rest.cxf.service;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.wrap.EntitlementTO;\n+import org.apache.syncope.common.rest.api.CollectionWrapper;\n+import org.apache.syncope.common.rest.api.service.EntitlementService;\n+import org.apache.syncope.server.logic.EntitlementLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class EntitlementServiceImpl extends AbstractServiceImpl implements EntitlementService {\n+\n+    @Autowired\n+    private EntitlementLogic logic;\n+\n+    @Override\n+    public List<EntitlementTO> getAllEntitlements() {\n+        return CollectionWrapper.wrap(logic.getAll(), EntitlementTO.class);\n+    }\n+\n+    @Override\n+    public List<EntitlementTO> getOwnEntitlements() {\n+        return CollectionWrapper.wrap(logic.getOwn(), EntitlementTO.class);\n+    }\n+}"},{"sha":"09995b102827f090541ebe3f86c4ad74156f6d82","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/LoggerServiceImpl.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.rest.cxf.service;\n+\n+import java.text.ParseException;\n+import java.util.List;\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.NotFoundException;\n+import org.apache.syncope.common.lib.to.EventCategoryTO;\n+import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+import org.apache.syncope.common.lib.types.LoggerType;\n+import org.apache.syncope.common.rest.api.CollectionWrapper;\n+import org.apache.syncope.common.rest.api.service.LoggerService;\n+import org.apache.syncope.server.logic.LoggerLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class LoggerServiceImpl extends AbstractServiceImpl implements LoggerService {\n+\n+    @Autowired\n+    private LoggerLogic logic;\n+\n+    @Override\n+    public void delete(final LoggerType type, final String name) {\n+        switch (type) {\n+            case LOG:\n+                logic.deleteLog(name);\n+                break;\n+\n+            case AUDIT:\n+                try {\n+                    logic.disableAudit(AuditLoggerName.fromLoggerName(name));\n+                } catch (IllegalArgumentException e) {\n+                    throw new BadRequestException(e);\n+                } catch (ParseException e) {\n+                    throw new BadRequestException(e);\n+                }\n+                break;\n+\n+            default:\n+                throw new BadRequestException();\n+        }\n+\n+    }\n+\n+    @Override\n+    public List<LoggerTO> list(final LoggerType type) {\n+        switch (type) {\n+            case LOG:\n+                return logic.listLogs();\n+\n+            case AUDIT:\n+                List<AuditLoggerName> auditLogger = logic.listAudits();\n+                return CollectionWrapper.unwrapLogger(auditLogger);\n+\n+            default:\n+                throw new BadRequestException();\n+        }\n+    }\n+\n+    @Override\n+    public LoggerTO read(final LoggerType type, final String name) {\n+        List<LoggerTO> logger = list(type);\n+        for (LoggerTO l : logger) {\n+            if (l.getName().equals(name)) {\n+                return l;\n+            }\n+        }\n+        throw new NotFoundException();\n+    }\n+\n+    @Override\n+    public void update(final LoggerType type, final String name, final LoggerTO logger) {\n+        switch (type) {\n+            case LOG:\n+                logic.setLogLevel(name, logger.getLevel().getLevel());\n+                break;\n+\n+            case AUDIT:\n+                try {\n+                    logic.enableAudit(AuditLoggerName.fromLoggerName(name));\n+                } catch (Exception e) {\n+                    throw new BadRequestException(e);\n+                }\n+                break;\n+\n+            default:\n+                throw new BadRequestException();\n+        }\n+    }\n+\n+    @Override\n+    public List<EventCategoryTO> events() {\n+        return logic.listAuditEvents();\n+    }\n+}"},{"sha":"a25ae9d5c5d1f98c2b507a58fdb18ef8e25171b9","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/NotificationServiceImpl.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FNotificationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FNotificationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FNotificationServiceImpl.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.rest.cxf.service;\n+\n+import java.net.URI;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.NotificationTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.NotificationService;\n+import org.apache.syncope.server.logic.NotificationLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class NotificationServiceImpl extends AbstractServiceImpl implements NotificationService {\n+\n+    @Autowired\n+    private NotificationLogic logic;\n+\n+    @Override\n+    public Response create(final NotificationTO notificationTO) {\n+        NotificationTO created = logic.create(notificationTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(created.getKey())).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_ID, created.getKey()).\n+                build();\n+    }\n+\n+    @Override\n+    public NotificationTO read(final Long notificationKey) {\n+        return logic.read(notificationKey);\n+    }\n+\n+    @Override\n+    public List<NotificationTO> list() {\n+        return logic.list();\n+    }\n+\n+    @Override\n+    public void update(final Long notificationKey, final NotificationTO notificationTO) {\n+        notificationTO.setKey(notificationKey);\n+        logic.update(notificationTO);\n+    }\n+\n+    @Override\n+    public void delete(final Long notificationKey) {\n+        logic.delete(notificationKey);\n+    }\n+}"},{"sha":"da507618b1e722e88c8398a70bc3aed6089a5ac6","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/PolicyServiceImpl.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.rest.cxf.service;\n+\n+import java.net.URI;\n+import java.util.List;\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.to.AccountPolicyTO;\n+import org.apache.syncope.common.lib.to.PasswordPolicyTO;\n+import org.apache.syncope.common.lib.to.SyncPolicyTO;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.common.lib.wrap.CorrelationRuleClass;\n+import org.apache.syncope.common.rest.api.CollectionWrapper;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.PolicyService;\n+import org.apache.syncope.server.logic.PolicyLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class PolicyServiceImpl extends AbstractServiceImpl implements PolicyService {\n+\n+    @Autowired\n+    private PolicyLogic logic;\n+\n+    @Override\n+    public <T extends AbstractPolicyTO> Response create(final T policyTO) {\n+        AbstractPolicyTO policy = logic.create(policyTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(policy.getKey())).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_ID.toString(), policy.getKey()).\n+                build();\n+    }\n+\n+    @Override\n+    public void delete(final Long policyKey) {\n+        logic.delete(policyKey);\n+    }\n+\n+    @Override\n+    public <T extends AbstractPolicyTO> List<T> list(final PolicyType type) {\n+        return logic.list(type);\n+    }\n+\n+    @Override\n+    public <T extends AbstractPolicyTO> T read(final Long policyKey) {\n+        return logic.read(policyKey);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public <T extends AbstractPolicyTO> T readGlobal(final PolicyType type) {\n+        T result = null;\n+\n+        switch (type) {\n+            case ACCOUNT:\n+            case GLOBAL_ACCOUNT:\n+                result = (T) logic.getGlobalAccountPolicy();\n+                break;\n+\n+            case PASSWORD:\n+            case GLOBAL_PASSWORD:\n+                result = (T) logic.getGlobalPasswordPolicy();\n+                break;\n+\n+            case SYNC:\n+            case GLOBAL_SYNC:\n+                result = (T) logic.getGlobalSyncPolicy();\n+                break;\n+\n+            default:\n+                throw new BadRequestException();\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends AbstractPolicyTO> void update(final Long policyKey, final T policyTO) {\n+        policyTO.setKey(policyKey);\n+\n+        switch (policyTO.getType()) {\n+            case ACCOUNT:\n+            case GLOBAL_ACCOUNT:\n+                logic.update((AccountPolicyTO) policyTO);\n+                break;\n+\n+            case PASSWORD:\n+            case GLOBAL_PASSWORD:\n+                logic.update((PasswordPolicyTO) policyTO);\n+                break;\n+\n+            case SYNC:\n+            case GLOBAL_SYNC:\n+                logic.update((SyncPolicyTO) policyTO);\n+                break;\n+\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public List<CorrelationRuleClass> getSyncCorrelationRuleClasses() {\n+        return CollectionWrapper.wrap(logic.getSyncCorrelationRuleClasses(), CorrelationRuleClass.class);\n+    }\n+}"},{"sha":"3b303371b960a1a2a8daf859a7d771afbec850b8","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/ReportServiceImpl.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.rest.cxf.service;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.util.List;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.StreamingOutput;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.ReportExecTO;\n+import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n+import org.apache.syncope.common.lib.wrap.ReportletConfClass;\n+import org.apache.syncope.common.rest.api.CollectionWrapper;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.ReportService;\n+import org.apache.syncope.server.logic.ReportLogic;\n+import org.apache.syncope.server.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.server.persistence.api.entity.ReportExec;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ReportServiceImpl extends AbstractServiceImpl implements ReportService {\n+\n+    @Autowired\n+    private ReportLogic logic;\n+\n+    @Override\n+    public Response create(final ReportTO reportTO) {\n+        ReportTO createdReportTO = logic.create(reportTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(createdReportTO.getKey())).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_ID.toString(), createdReportTO.getKey()).\n+                build();\n+    }\n+\n+    @Override\n+    public void update(final Long reportKey, final ReportTO reportTO) {\n+        reportTO.setKey(reportKey);\n+        logic.update(reportTO);\n+    }\n+\n+    @Override\n+    public PagedResult<ReportTO> list() {\n+        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n+    }\n+\n+    @Override\n+    public PagedResult<ReportTO> list(final String orderBy) {\n+        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n+    }\n+\n+    @Override\n+    public PagedResult<ReportTO> list(final Integer page, final Integer size) {\n+        return list(page, size, null);\n+    }\n+\n+    @Override\n+    public PagedResult<ReportTO> list(final Integer page, final Integer size, final String orderBy) {\n+        List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\n+        return buildPagedResult(logic.list(page, size, orderByClauses), page, size, logic.count());\n+    }\n+\n+    @Override\n+    public List<ReportletConfClass> getReportletConfClasses() {\n+        return CollectionWrapper.wrap(logic.getReportletConfClasses(), ReportletConfClass.class);\n+    }\n+\n+    @Override\n+    public ReportTO read(final Long reportKey) {\n+        return logic.read(reportKey);\n+    }\n+\n+    @Override\n+    public ReportExecTO readExecution(final Long executionId) {\n+        return logic.readExecution(executionId);\n+    }\n+\n+    @Override\n+    public Response exportExecutionResult(final Long executionId, final ReportExecExportFormat fmt) {\n+        final ReportExecExportFormat format = (fmt == null) ? ReportExecExportFormat.XML : fmt;\n+        final ReportExec reportExec = logic.getAndCheckReportExec(executionId);\n+        StreamingOutput sout = new StreamingOutput() {\n+\n+            @Override\n+            public void write(final OutputStream os) throws IOException {\n+                logic.exportExecutionResult(os, reportExec, format);\n+            }\n+        };\n+        String disposition = \"attachment; filename=\" + reportExec.getReport().getName() + \".\" + format.name().\n+                toLowerCase();\n+        return Response.ok(sout).\n+                header(HttpHeaders.CONTENT_DISPOSITION, disposition).\n+                build();\n+    }\n+\n+    @Override\n+    public ReportExecTO execute(final Long reportKey) {\n+        return logic.execute(reportKey);\n+    }\n+\n+    @Override\n+    public void delete(final Long reportKey) {\n+        logic.delete(reportKey);\n+    }\n+\n+    @Override\n+    public void deleteExecution(final Long executionId) {\n+        logic.deleteExecution(executionId);\n+    }\n+}"},{"sha":"82da1a9b3decf9ef7ed087cf7cd068381fb5fe13","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/ResourceServiceImpl.java","status":"added","additions":151,"deletions":0,"changes":151,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.rest.cxf.service;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n+import org.apache.syncope.common.lib.to.BulkAction;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.common.lib.wrap.PropagationActionClass;\n+import org.apache.syncope.common.lib.wrap.SubjectId;\n+import org.apache.syncope.common.rest.api.CollectionWrapper;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.ResourceService;\n+import org.apache.syncope.server.logic.AbstractResourceAssociator;\n+import org.apache.syncope.server.logic.ResourceLogic;\n+import org.apache.syncope.server.logic.RoleLogic;\n+import org.apache.syncope.server.logic.UserLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ResourceServiceImpl extends AbstractServiceImpl implements ResourceService {\n+\n+    @Autowired\n+    private ResourceLogic logic;\n+\n+    @Autowired\n+    private UserLogic userLogic;\n+\n+    @Autowired\n+    private RoleLogic roleLogic;\n+\n+    @Override\n+    public Response create(final ResourceTO resourceTO) {\n+        ResourceTO created = logic.create(resourceTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(created.getKey()).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_ID, created.getKey()).\n+                build();\n+    }\n+\n+    @Override\n+    public void update(final String resourceKey, final ResourceTO resourceTO) {\n+        resourceTO.setKey(resourceKey);\n+        logic.update(resourceTO);\n+    }\n+\n+    @Override\n+    public void delete(final String resourceKey) {\n+        logic.delete(resourceKey);\n+    }\n+\n+    @Override\n+    public ResourceTO read(final String resourceKey) {\n+        return logic.read(resourceKey);\n+    }\n+\n+    @Override\n+    public List<PropagationActionClass> getPropagationActionsClasses() {\n+        return CollectionWrapper.wrap(logic.getPropagationActionsClasses(), PropagationActionClass.class);\n+    }\n+\n+    @Override\n+    public List<ResourceTO> list() {\n+        return logic.list(null);\n+    }\n+\n+    @Override\n+    public List<ResourceTO> list(final Long connInstanceId) {\n+        return logic.list(connInstanceId);\n+    }\n+\n+    @Override\n+    public ConnObjectTO getConnectorObject(final String resourceKey, final SubjectType type, final Long key) {\n+        return logic.getConnectorObject(resourceKey, type, key);\n+    }\n+\n+    @Override\n+    public boolean check(final ResourceTO resourceTO) {\n+        return logic.check(resourceTO);\n+    }\n+\n+    @Override\n+    public BulkActionResult bulk(final BulkAction bulkAction) {\n+        return logic.bulk(bulkAction);\n+    }\n+\n+    @Override\n+    public BulkActionResult bulkDeassociation(final String resourceKey, final SubjectType subjectType,\n+            final ResourceDeassociationActionType type, final List<SubjectId> subjectIds) {\n+\n+        AbstractResourceAssociator<? extends AbstractAttributableTO> associator = subjectType == SubjectType.USER\n+                ? userLogic\n+                : roleLogic;\n+\n+        final BulkActionResult res = new BulkActionResult();\n+\n+        for (SubjectId id : subjectIds) {\n+            final Set<String> resources = Collections.singleton(resourceKey);\n+            try {\n+                switch (type) {\n+                    case DEPROVISION:\n+                        associator.deprovision(id.getElement(), resources);\n+                        break;\n+\n+                    case UNASSIGN:\n+                        associator.unassign(id.getElement(), resources);\n+                        break;\n+\n+                    case UNLINK:\n+                        associator.unlink(id.getElement(), resources);\n+                        break;\n+\n+                    default:\n+                }\n+\n+                res.add(id, BulkActionResult.Status.SUCCESS);\n+            } catch (Exception e) {\n+                LOG.warn(\"While executing {} on {} {}\", type, subjectType, id.getElement(), e);\n+                res.add(id, BulkActionResult.Status.FAILURE);\n+            }\n+        }\n+\n+        return res;\n+    }\n+\n+}"},{"sha":"19a4a0d001fd59ac84ed843c387dc270f753fc7a","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/RestServiceExceptionMapper.java","status":"added","additions":284,"deletions":0,"changes":284,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FRestServiceExceptionMapper.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,284 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.rest.cxf.service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.persistence.EntityExistsException;\n+import javax.persistence.PersistenceException;\n+import javax.persistence.RollbackException;\n+import javax.validation.ValidationException;\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.Response.ResponseBuilder;\n+import javax.ws.rs.ext.ExceptionMapper;\n+import javax.ws.rs.ext.Provider;\n+import org.apache.cxf.jaxrs.client.ResponseExceptionMapper;\n+import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n+import org.apache.cxf.jaxrs.validation.ValidationExceptionMapper;\n+import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.ErrorTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.server.misc.security.UnauthorizedRoleException;\n+import org.apache.syncope.server.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.server.persistence.api.attrvalue.validation.ParsingValidationException;\n+import org.apache.syncope.server.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.server.workflow.api.WorkflowException;\n+import org.identityconnectors.framework.common.exceptions.ConfigurationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.orm.jpa.JpaSystemException;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.transaction.TransactionSystemException;\n+\n+@Provider\n+public class RestServiceExceptionMapper implements ExceptionMapper<Exception>, ResponseExceptionMapper<Exception> {\n+\n+    private static final String BASIC_REALM_UNAUTHORIZED = \"Basic realm=\\\"Apache Syncope authentication\\\"\";\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(RestServiceExceptionMapper.class);\n+\n+    private final ValidationExceptionMapper validationEM = new ValidationExceptionMapper();\n+\n+    @Override\n+    public Response toResponse(final Exception ex) {\n+        LOG.error(\"Exception thrown by REST method: \" + ex.getMessage(), ex);\n+\n+        ResponseBuilder builder;\n+\n+        if (ex instanceof SyncopeClientException) {\n+            SyncopeClientException sce = (SyncopeClientException) ex;\n+            builder = sce.isComposite()\n+                    ? getSyncopeClientCompositeExceptionResponse(sce.asComposite())\n+                    : getSyncopeClientExceptionResponse(sce);\n+        } else if (ex instanceof WebApplicationException) {\n+            Response response = ((WebApplicationException) ex).getResponse();\n+\n+            ErrorTO error = new ErrorTO();\n+            error.setStatus(response.getStatus());\n+            error.setType(ClientExceptionType.Unknown);\n+            error.getElements().add(getExMessage(ex));\n+\n+            builder = JAXRSUtils.fromResponse(response).entity(error);\n+        } else if (ex instanceof AccessDeniedException) {\n+            builder = Response.status(Response.Status.UNAUTHORIZED).\n+                    header(HttpHeaders.WWW_AUTHENTICATE, BASIC_REALM_UNAUTHORIZED);\n+        } else if (ex instanceof UnauthorizedRoleException) {\n+            builder = builder(Response.Status.UNAUTHORIZED, ClientExceptionType.UnauthorizedRole, getExMessage(ex));\n+        } else if (ex instanceof EntityExistsException) {\n+            builder = builder(Response.Status.CONFLICT, ClientExceptionType.EntityExists, getExMessage(ex));\n+        } else if (ex instanceof DataIntegrityViolationException) {\n+            builder = builder(Response.Status.CONFLICT, ClientExceptionType.DataIntegrityViolation, getExMessage(ex));\n+        } else {\n+            builder = processNotFoundExceptions(ex);\n+            if (builder == null) {\n+                builder = processInvalidEntityExceptions(ex);\n+                if (builder == null) {\n+                    builder = processBadRequestExceptions(ex);\n+                }\n+                // process JAX-RS validation errors\n+                if (builder == null && ex instanceof ValidationException) {\n+                    builder = JAXRSUtils.fromResponse(validationEM.toResponse((ValidationException) ex)).\n+                            header(RESTHeaders.ERROR_CODE, ClientExceptionType.RESTValidation.getHeaderValue()).\n+                            header(RESTHeaders.ERROR_INFO,\n+                                    ClientExceptionType.RESTValidation.getInfoHeaderValue(getExMessage(ex)));\n+\n+                    ErrorTO error = new ErrorTO();\n+                    error.setStatus(ClientExceptionType.RESTValidation.getResponseStatus().getStatusCode());\n+                    error.setType(ClientExceptionType.RESTValidation);\n+                    error.getElements().add(getExMessage(ex));\n+                    builder.entity(error);\n+                }\n+                // ...or just report as InternalServerError\n+                if (builder == null) {\n+                    builder = Response.status(Response.Status.INTERNAL_SERVER_ERROR).\n+                            header(RESTHeaders.ERROR_INFO,\n+                                    ClientExceptionType.Unknown.getInfoHeaderValue(getExMessage(ex)));\n+\n+                    ErrorTO error = new ErrorTO();\n+                    error.setStatus(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode());\n+                    error.setType(ClientExceptionType.Unknown);\n+                    error.getElements().add(getExMessage(ex));\n+                    builder.entity(error);\n+                }\n+            }\n+        }\n+\n+        return builder.build();\n+    }\n+\n+    @Override\n+    public Exception fromResponse(final Response r) {\n+        throw new UnsupportedOperationException(\n+                \"Call of fromResponse() method is not expected in RestServiceExceptionMapper\");\n+    }\n+\n+    private ResponseBuilder getSyncopeClientExceptionResponse(final SyncopeClientException ex) {\n+        ResponseBuilder builder = Response.status(ex.getType().getResponseStatus());\n+        builder.header(RESTHeaders.ERROR_CODE, ex.getType().getHeaderValue());\n+\n+        ErrorTO error = new ErrorTO();\n+        error.setStatus(ex.getType().getResponseStatus().getStatusCode());\n+        error.setType(ex.getType());\n+\n+        for (String element : ex.getElements()) {\n+            builder.header(RESTHeaders.ERROR_INFO, ex.getType().getInfoHeaderValue(element));\n+            error.getElements().add(element);\n+        }\n+\n+        return builder.entity(error);\n+    }\n+\n+    private ResponseBuilder getSyncopeClientCompositeExceptionResponse(final SyncopeClientCompositeException ex) {\n+        if (ex.getExceptions().size() == 1) {\n+            return getSyncopeClientExceptionResponse(ex.getExceptions().iterator().next());\n+        }\n+\n+        ResponseBuilder builder = Response.status(Response.Status.BAD_REQUEST);\n+\n+        List<ErrorTO> errors = new ArrayList<ErrorTO>();\n+        for (SyncopeClientException sce : ex.getExceptions()) {\n+            builder.header(RESTHeaders.ERROR_CODE, sce.getType().getHeaderValue());\n+\n+            ErrorTO error = new ErrorTO();\n+            error.setStatus(sce.getType().getResponseStatus().getStatusCode());\n+            error.setType(sce.getType());\n+\n+            for (String element : sce.getElements()) {\n+                builder.header(RESTHeaders.ERROR_INFO, ex.getType().getInfoHeaderValue(element));\n+                error.getElements().add(element);\n+            }\n+\n+            errors.add(error);\n+        }\n+\n+        return builder.entity(errors);\n+    }\n+\n+    private ResponseBuilder processNotFoundExceptions(final Exception ex) {\n+        if (ex instanceof javax.ws.rs.NotFoundException || ex instanceof NotFoundException) {\n+            return builder(Response.Status.NOT_FOUND, ClientExceptionType.NotFound, getExMessage(ex));\n+        }\n+\n+        return null;\n+    }\n+\n+    private ResponseBuilder processInvalidEntityExceptions(final Exception ex) {\n+        InvalidEntityException iee = null;\n+\n+        if (ex instanceof InvalidEntityException) {\n+            iee = (InvalidEntityException) ex;\n+        }\n+        if (ex instanceof TransactionSystemException && ex.getCause() instanceof RollbackException\n+                && ex.getCause().getCause() instanceof InvalidEntityException) {\n+\n+            iee = (InvalidEntityException) ex.getCause().getCause();\n+        }\n+\n+        if (iee != null) {\n+            ClientExceptionType exType =\n+                    iee.getEntityClassSimpleName().endsWith(\"Policy\")\n+                            ? ClientExceptionType.InvalidPolicy\n+                            : ClientExceptionType.valueOf(\"Invalid\" + iee.getEntityClassSimpleName());\n+\n+            ResponseBuilder builder = Response.status(Response.Status.BAD_REQUEST);\n+            builder.header(RESTHeaders.ERROR_CODE, exType.getHeaderValue());\n+\n+            ErrorTO error = new ErrorTO();\n+            error.setStatus(exType.getResponseStatus().getStatusCode());\n+            error.setType(exType);\n+\n+            for (Map.Entry<Class<?>, Set<EntityViolationType>> violation : iee.getViolations().entrySet()) {\n+                for (EntityViolationType violationType : violation.getValue()) {\n+                    builder.header(RESTHeaders.ERROR_INFO,\n+                            exType.getInfoHeaderValue(violationType.name() + \": \" + violationType.getMessage()));\n+                    error.getElements().add(violationType.name() + \": \" + violationType.getMessage());\n+                }\n+            }\n+\n+            return builder;\n+        }\n+\n+        return null;\n+    }\n+\n+    private ResponseBuilder processBadRequestExceptions(final Exception ex) {\n+        ResponseBuilder builder = Response.status(Response.Status.BAD_REQUEST);\n+\n+        // This exception might be raised by Activiti (if enabled)\n+        Class<?> ibatisPersistenceException = null;\n+        try {\n+            ibatisPersistenceException = Class.forName(\"org.apache.ibatis.exceptions.PersistenceException\");\n+        } catch (ClassNotFoundException e) {\n+            // ignore\n+        }\n+\n+        if (ex instanceof BadRequestException) {\n+            if (((BadRequestException) ex).getResponse() == null) {\n+                return builder;\n+            } else {\n+                return JAXRSUtils.fromResponse(((BadRequestException) ex).getResponse());\n+            }\n+        } else if (ex instanceof WorkflowException) {\n+            return builder(Response.Status.BAD_REQUEST, ClientExceptionType.Workflow, getExMessage(ex));\n+        } else if (ex instanceof PersistenceException) {\n+            return builder(Response.Status.BAD_REQUEST, ClientExceptionType.GenericPersistence, getExMessage(ex));\n+        } else if (ibatisPersistenceException != null && ibatisPersistenceException.isAssignableFrom(ex.getClass())) {\n+            return builder(Response.Status.BAD_REQUEST, ClientExceptionType.Workflow,\n+                    getMessage(ex, \"Currently unavailable. Please try later.\"));\n+        } else if (ex instanceof JpaSystemException) {\n+            return builder(Response.Status.BAD_REQUEST, ClientExceptionType.DataIntegrityViolation, getExMessage(ex));\n+        } else if (ex instanceof ConfigurationException) {\n+            return builder(Response.Status.BAD_REQUEST, ClientExceptionType.InvalidConnIdConf, getExMessage(ex));\n+        } else if (ex instanceof ParsingValidationException) {\n+            return builder(Response.Status.BAD_REQUEST, ClientExceptionType.InvalidValues, getExMessage(ex));\n+        }\n+\n+        return null;\n+    }\n+\n+    private ResponseBuilder builder(final Response.Status status, final ClientExceptionType hType, final String msg) {\n+        ResponseBuilder builder = Response.status(status).\n+                header(RESTHeaders.ERROR_CODE, hType.getHeaderValue()).\n+                header(RESTHeaders.ERROR_INFO, hType.getInfoHeaderValue(msg));\n+\n+        ErrorTO error = new ErrorTO();\n+        error.setStatus(status.getStatusCode());\n+        error.setType(hType);\n+        error.getElements().add(msg);\n+\n+        return builder.entity(error);\n+    }\n+\n+    private String getMessage(final Throwable ex, final String msg) {\n+        return (msg == null) ? getExMessage(ex) : msg;\n+    }\n+\n+    private String getExMessage(final Throwable ex) {\n+        return (ex.getCause() == null) ? ex.getMessage() : ex.getCause().getMessage();\n+    }\n+}"},{"sha":"46ffab1216bd846909e8e0c14a98855e55c55b84","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/RoleServiceImpl.java","status":"added","additions":227,"deletions":0,"changes":227,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FRoleServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FRoleServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FRoleServiceImpl.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,227 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.rest.cxf.service;\n+\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.mod.RoleMod;\n+import org.apache.syncope.common.lib.to.BulkAction;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.PropagationStatus;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.types.ResourceAssociationActionType;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n+import org.apache.syncope.common.lib.wrap.ResourceName;\n+import org.apache.syncope.common.rest.api.CollectionWrapper;\n+import org.apache.syncope.common.rest.api.service.RoleService;\n+import org.apache.syncope.server.logic.RoleLogic;\n+import org.apache.syncope.server.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.server.persistence.api.dao.search.SearchCond;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class RoleServiceImpl extends AbstractServiceImpl implements RoleService {\n+\n+    @Autowired\n+    private RoleLogic logic;\n+\n+    @Override\n+    public List<RoleTO> children(final Long roleKey) {\n+        return logic.children(roleKey);\n+    }\n+\n+    @Override\n+    public Response create(final RoleTO roleTO) {\n+        RoleTO created = logic.create(roleTO);\n+        return createResponse(created.getKey(), created);\n+    }\n+\n+    @Override\n+    public Response delete(final Long roleKey) {\n+        RoleTO role = logic.read(roleKey);\n+\n+        checkETag(role.getETagValue());\n+\n+        RoleTO deleted = logic.delete(roleKey);\n+        return modificationResponse(deleted);\n+    }\n+\n+    @Override\n+    public PagedResult<RoleTO> list() {\n+        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n+    }\n+\n+    @Override\n+    public PagedResult<RoleTO> list(final String orderBy) {\n+        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n+    }\n+\n+    @Override\n+    public PagedResult<RoleTO> list(final Integer page, final Integer size) {\n+        return list(page, size, null);\n+    }\n+\n+    @Override\n+    public PagedResult<RoleTO> list(final Integer page, final Integer size, final String orderBy) {\n+        List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\n+        return buildPagedResult(logic.list(page, size, orderByClauses), page, size, logic.count());\n+    }\n+\n+    @Override\n+    public RoleTO parent(final Long roleKey) {\n+        return logic.parent(roleKey);\n+    }\n+\n+    @Override\n+    public RoleTO read(final Long roleKey) {\n+        return logic.read(roleKey);\n+    }\n+\n+    @Override\n+    public PagedResult<RoleTO> search(final String fiql) {\n+        return search(fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n+    }\n+\n+    @Override\n+    public PagedResult<RoleTO> search(final String fiql, final String orderBy) {\n+        return search(fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n+    }\n+\n+    @Override\n+    public PagedResult<RoleTO> search(final String fiql, final Integer page, final Integer size) {\n+        return search(fiql, page, size, null);\n+    }\n+\n+    @Override\n+    public PagedResult<RoleTO> search(final String fiql, final Integer page, final Integer size, final String orderBy) {\n+        SearchCond cond = getSearchCond(fiql);\n+        List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\n+        return buildPagedResult(\n+                logic.search(cond, page, size, orderByClauses), page, size, logic.searchCount(cond));\n+    }\n+\n+    @Override\n+    public RoleTO readSelf(final Long roleKey) {\n+        return logic.readSelf(roleKey);\n+    }\n+\n+    @Override\n+    public Response update(final Long roleKey, final RoleMod roleMod) {\n+        RoleTO role = logic.read(roleKey);\n+\n+        checkETag(role.getETagValue());\n+\n+        roleMod.setKey(roleKey);\n+        RoleTO updated = logic.update(roleMod);\n+        return modificationResponse(updated);\n+    }\n+\n+    @Override\n+    public Response bulkDeassociation(\n+            final Long roleKey, final ResourceDeassociationActionType type, final List<ResourceName> resourceNames) {\n+\n+        RoleTO role = logic.read(roleKey);\n+\n+        checkETag(role.getETagValue());\n+\n+        RoleTO updated;\n+        switch (type) {\n+            case UNLINK:\n+                updated = logic.unlink(roleKey, CollectionWrapper.unwrap(resourceNames));\n+                break;\n+\n+            case UNASSIGN:\n+                updated = logic.unassign(roleKey, CollectionWrapper.unwrap(resourceNames));\n+                break;\n+\n+            case DEPROVISION:\n+                updated = logic.deprovision(roleKey, CollectionWrapper.unwrap(resourceNames));\n+                break;\n+\n+            default:\n+                updated = logic.read(roleKey);\n+        }\n+\n+        final BulkActionResult res = new BulkActionResult();\n+\n+        if (type == ResourceDeassociationActionType.UNLINK) {\n+            for (ResourceName resourceName : resourceNames) {\n+                res.add(resourceName.getElement(), updated.getResources().contains(resourceName.getElement())\n+                        ? BulkActionResult.Status.FAILURE\n+                        : BulkActionResult.Status.SUCCESS);\n+            }\n+        } else {\n+            for (PropagationStatus propagationStatusTO : updated.getPropagationStatusTOs()) {\n+                res.add(propagationStatusTO.getResource(), propagationStatusTO.getStatus().toString());\n+            }\n+        }\n+\n+        return modificationResponse(res);\n+    }\n+\n+    @Override\n+    public Response bulkAssociation(\n+            final Long roleKey, final ResourceAssociationActionType type, final List<ResourceName> resourceNames) {\n+\n+        RoleTO role = logic.read(roleKey);\n+\n+        checkETag(role.getETagValue());\n+\n+        RoleTO updated;\n+        switch (type) {\n+            case LINK:\n+                updated = logic.link(roleKey, CollectionWrapper.unwrap(resourceNames));\n+                break;\n+\n+            case ASSIGN:\n+                updated = logic.assign(roleKey, CollectionWrapper.unwrap(resourceNames), false, null);\n+                break;\n+\n+            case PROVISION:\n+                updated = logic.provision(roleKey, CollectionWrapper.unwrap(resourceNames), false, null);\n+                break;\n+\n+            default:\n+                updated = logic.read(roleKey);\n+        }\n+\n+        final BulkActionResult res = new BulkActionResult();\n+\n+        if (type == ResourceAssociationActionType.LINK) {\n+            for (ResourceName resourceName : resourceNames) {\n+                res.add(resourceName.getElement(), updated.getResources().contains(resourceName.getElement())\n+                        ? BulkActionResult.Status.FAILURE\n+                        : BulkActionResult.Status.SUCCESS);\n+            }\n+        } else {\n+            for (PropagationStatus propagationStatusTO : updated.getPropagationStatusTOs()) {\n+                res.add(propagationStatusTO.getResource(), propagationStatusTO.getStatus().toString());\n+            }\n+        }\n+\n+        return modificationResponse(res);\n+    }\n+\n+    @Override\n+    public BulkActionResult bulk(final BulkAction bulkAction) {\n+        return logic.bulk(bulkAction);\n+    }\n+}"},{"sha":"e3219e09ce019e8286a2f7e2a2e4411741746c21","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/SchemaServiceImpl.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.rest.cxf.service;\n+\n+import java.net.URI;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.SchemaService;\n+import org.apache.syncope.server.logic.SchemaLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SchemaServiceImpl extends AbstractServiceImpl implements SchemaService {\n+\n+    @Autowired\n+    private SchemaLogic logic;\n+\n+    @Override\n+    public <T extends AbstractSchemaTO> Response create(final AttributableType attrType, final SchemaType schemaType,\n+            final T schemaTO) {\n+\n+        T created = logic.create(attrType, schemaType, schemaTO);\n+\n+        URI location = uriInfo.getAbsolutePathBuilder().path(created.getKey()).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_ID, created.getKey()).\n+                build();\n+    }\n+\n+    @Override\n+    public void delete(final AttributableType attrType, final SchemaType schemaType, final String schemaKey) {\n+        logic.delete(attrType, schemaType, schemaKey);\n+    }\n+\n+    @Override\n+    public <T extends AbstractSchemaTO> List<T> list(final AttributableType attrType, final SchemaType schemaType) {\n+        return logic.list(attrType, schemaType);\n+    }\n+\n+    @Override\n+    public <T extends AbstractSchemaTO> T read(final AttributableType attrType, final SchemaType schemaType,\n+            final String schemaKey) {\n+\n+        return logic.read(attrType, schemaType, schemaKey);\n+    }\n+\n+    @Override\n+    public <T extends AbstractSchemaTO> void update(final AttributableType attrType, final SchemaType schemaType,\n+            final String schemaKey, final T schemaTO) {\n+\n+        schemaTO.setKey(schemaKey);\n+        logic.update(attrType, schemaType, schemaTO);\n+    }\n+}"},{"sha":"a24c5be9e38caa90ad67199c11e39b6b68603404","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/SecurityQuestionServiceImpl.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FSecurityQuestionServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FSecurityQuestionServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FSecurityQuestionServiceImpl.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.rest.cxf.service;\n+\n+import java.net.URI;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.SecurityQuestionService;\n+import org.apache.syncope.server.logic.SecurityQuestionLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecurityQuestionServiceImpl extends AbstractServiceImpl implements SecurityQuestionService {\n+\n+    @Autowired\n+    private SecurityQuestionLogic logic;\n+\n+    @Override\n+    public List<SecurityQuestionTO> list() {\n+        return logic.list();\n+    }\n+\n+    @Override\n+    public SecurityQuestionTO read(final Long securityQuestionId) {\n+        return logic.read(securityQuestionId);\n+    }\n+\n+    @Override\n+    public Response create(final SecurityQuestionTO securityQuestionTO) {\n+        SecurityQuestionTO created = logic.create(securityQuestionTO);\n+\n+        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(created.getKey())).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_ID, String.valueOf(created.getKey())).\n+                build();\n+    }\n+\n+    @Override\n+    public void update(final Long securityQuestionId, final SecurityQuestionTO securityQuestionTO) {\n+        securityQuestionTO.setKey(securityQuestionId);\n+        logic.update(securityQuestionTO);\n+    }\n+\n+    @Override\n+    public void delete(final Long securityQuestionId) {\n+        logic.delete(securityQuestionId);\n+    }\n+\n+    @Override\n+    public SecurityQuestionTO readByUser(final String username) {\n+        return logic.read(username);\n+    }\n+\n+}"},{"sha":"717c15d39ed9abb54f9169c4514f232dfde8eb18","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/TaskServiceImpl.java","status":"added","additions":158,"deletions":0,"changes":158,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.rest.cxf.service;\n+\n+import java.net.URI;\n+import java.util.List;\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.BulkAction;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.PushTaskTO;\n+import org.apache.syncope.common.lib.to.ReportExecTO;\n+import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.lib.to.SyncTaskTO;\n+import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.lib.wrap.JobClass;\n+import org.apache.syncope.common.lib.wrap.PushActionClass;\n+import org.apache.syncope.common.lib.wrap.SyncActionClass;\n+import org.apache.syncope.common.rest.api.CollectionWrapper;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.TaskService;\n+import org.apache.syncope.server.logic.TaskLogic;\n+import org.apache.syncope.server.persistence.api.dao.search.OrderByClause;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class TaskServiceImpl extends AbstractServiceImpl implements TaskService {\n+\n+    @Autowired\n+    private TaskLogic logic;\n+\n+    @Override\n+    public <T extends SchedTaskTO> Response create(final T taskTO) {\n+        T createdTask;\n+        if (taskTO instanceof SyncTaskTO || taskTO instanceof PushTaskTO || taskTO instanceof SchedTaskTO) {\n+            createdTask = logic.createSchedTask(taskTO);\n+        } else {\n+            throw new BadRequestException();\n+        }\n+\n+        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(createdTask.getKey())).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_ID, createdTask.getKey()).\n+                build();\n+    }\n+\n+    @Override\n+    public void delete(final Long taskKey) {\n+        logic.delete(taskKey);\n+    }\n+\n+    @Override\n+    public void deleteExecution(final Long executionKey) {\n+        logic.deleteExecution(executionKey);\n+    }\n+\n+    @Override\n+    public TaskExecTO execute(final Long taskKey, final boolean dryRun) {\n+        return logic.execute(taskKey, dryRun);\n+    }\n+\n+    @Override\n+    public List<JobClass> getJobClasses() {\n+        return CollectionWrapper.wrap(logic.getJobClasses(), JobClass.class);\n+    }\n+\n+    @Override\n+    public List<SyncActionClass> getSyncActionsClasses() {\n+        return CollectionWrapper.wrap(logic.getSyncActionsClasses(), SyncActionClass.class);\n+    }\n+\n+    @Override\n+    public List<PushActionClass> getPushActionsClasses() {\n+        return CollectionWrapper.wrap(logic.getPushActionsClasses(), PushActionClass.class);\n+    }\n+\n+    @Override\n+    public <T extends AbstractTaskTO> PagedResult<T> list(final TaskType taskType) {\n+        return list(taskType, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n+    }\n+\n+    @Override\n+    public <T extends AbstractTaskTO> PagedResult<T> list(final TaskType taskType, final String orderBy) {\n+        return list(taskType, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n+    }\n+\n+    @Override\n+    public <T extends AbstractTaskTO> PagedResult<T> list(\n+            final TaskType taskType, final Integer page, final Integer size) {\n+\n+        return list(taskType, page, size, null);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends AbstractTaskTO> PagedResult<T> list(final TaskType taskType,\n+            final Integer page, final Integer size, final String orderBy) {\n+\n+        List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\n+        return (PagedResult<T>) buildPagedResult(\n+                logic.list(taskType, page, size, orderByClauses), page, size, logic.count(taskType));\n+    }\n+\n+    @Override\n+    public <T extends AbstractTaskTO> T read(final Long taskKey) {\n+        return logic.read(taskKey);\n+    }\n+\n+    @Override\n+    public TaskExecTO readExecution(final Long executionKey) {\n+        return logic.readExecution(executionKey);\n+    }\n+\n+    @Override\n+    public void report(final Long executionKey, final ReportExecTO reportExec) {\n+        reportExec.setKey(executionKey);\n+        logic.report(\n+                executionKey, PropagationTaskExecStatus.fromString(reportExec.getStatus()), reportExec.getMessage());\n+    }\n+\n+    @Override\n+    public void update(final Long taskKey, final AbstractTaskTO taskTO) {\n+        taskTO.setKey(taskKey);\n+        if (taskTO instanceof SyncTaskTO) {\n+            logic.updateSync((SyncTaskTO) taskTO);\n+        } else if (taskTO instanceof SchedTaskTO) {\n+            logic.updateSched((SchedTaskTO) taskTO);\n+        } else {\n+            throw new BadRequestException();\n+        }\n+    }\n+\n+    @Override\n+    public BulkActionResult bulk(final BulkAction bulkAction) {\n+        return logic.bulk(bulkAction);\n+    }\n+}"},{"sha":"c018d5c3842e813bc8ecb23f1b0edd69ed163d29","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/UserSelfServiceImpl.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.rest.cxf.service;\n+\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.UserSelfService;\n+import org.apache.syncope.server.logic.UserLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class UserSelfServiceImpl extends AbstractServiceImpl implements UserSelfService {\n+\n+    @Autowired\n+    private UserLogic logic;\n+\n+    @Override\n+    public Response getOptions() {\n+        return Response.ok().header(HttpHeaders.ALLOW, OPTIONS_ALLOW).\n+                header(RESTHeaders.SELFREG_ALLOWED, logic.isSelfRegAllowed()).\n+                header(RESTHeaders.PWDRESET_ALLOWED, logic.isPwdResetAllowed()).\n+                header(RESTHeaders.PWDRESET_NEEDS_SECURITYQUESTIONS, logic.isPwdResetRequiringSecurityQuestions()).\n+                build();\n+    }\n+\n+    @Override\n+    public Response create(final UserTO userTO, final boolean storePassword) {\n+        if (!logic.isSelfRegAllowed()) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unauthorized);\n+            sce.getElements().add(\"Self registration forbidden by configuration\");\n+            throw sce;\n+        }\n+\n+        UserTO created = logic.createSelf(userTO, storePassword);\n+        return createResponse(created.getKey(), created);\n+    }\n+\n+    @Override\n+    public UserTO read() {\n+        return logic.readSelf();\n+    }\n+\n+    @Override\n+    public Response update(final Long userKey, final UserMod userMod) {\n+        userMod.setKey(userKey);\n+        UserTO updated = logic.updateSelf(userMod);\n+        return modificationResponse(updated);\n+    }\n+\n+    @Override\n+    public Response delete() {\n+        UserTO deleted = logic.deleteSelf();\n+        return modificationResponse(deleted);\n+    }\n+\n+    @Override\n+    public void requestPasswordReset(final String username, final String securityAnswer) {\n+        if (!logic.isPwdResetAllowed()) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unauthorized);\n+            sce.getElements().add(\"Password reset forbidden by configuration\");\n+            throw sce;\n+        }\n+\n+        logic.requestPasswordReset(username, securityAnswer);\n+    }\n+\n+    @Override\n+    public void confirmPasswordReset(final String token, final String password) {\n+        if (!logic.isPwdResetAllowed()) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unauthorized);\n+            sce.getElements().add(\"Password reset forbidden by configuration\");\n+            throw sce;\n+        }\n+\n+        logic.confirmPasswordReset(token, password);\n+    }\n+\n+}"},{"sha":"39469a30f2f9c9ce51fef42d9532a64cd836dc60","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/UserServiceImpl.java","status":"added","additions":251,"deletions":0,"changes":251,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,251 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.rest.cxf.service;\n+\n+import java.util.List;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.mod.ResourceAssociationMod;\n+import org.apache.syncope.common.lib.mod.StatusMod;\n+import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.to.BulkAction;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.PropagationStatus;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.ResourceAssociationActionType;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n+import org.apache.syncope.common.lib.wrap.ResourceName;\n+import org.apache.syncope.common.rest.api.CollectionWrapper;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.UserService;\n+import org.apache.syncope.server.logic.UserLogic;\n+import org.apache.syncope.server.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.server.persistence.api.dao.search.SearchCond;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class UserServiceImpl extends AbstractServiceImpl implements UserService {\n+\n+    @Autowired\n+    private UserLogic logic;\n+\n+    @Override\n+    public Response getUsername(final Long userKey) {\n+        return Response.ok().header(HttpHeaders.ALLOW, OPTIONS_ALLOW).\n+                header(RESTHeaders.USERNAME, logic.getUsername(userKey)).\n+                build();\n+    }\n+\n+    @Override\n+    public Response getUserId(final String username) {\n+        return Response.ok().header(HttpHeaders.ALLOW, OPTIONS_ALLOW).\n+                header(RESTHeaders.USER_ID, logic.getKey(username)).\n+                build();\n+    }\n+\n+    @Override\n+    public Response create(final UserTO userTO, final boolean storePassword) {\n+        UserTO created = logic.create(userTO, storePassword);\n+        return createResponse(created.getKey(), created);\n+    }\n+\n+    @Override\n+    public Response delete(final Long userKey) {\n+        UserTO user = logic.read(userKey);\n+\n+        checkETag(user.getETagValue());\n+\n+        UserTO deleted = logic.delete(userKey);\n+        return modificationResponse(deleted);\n+    }\n+\n+    @Override\n+    public PagedResult<UserTO> list() {\n+        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n+    }\n+\n+    @Override\n+    public PagedResult<UserTO> list(final String orderBy) {\n+        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n+    }\n+\n+    @Override\n+    public PagedResult<UserTO> list(final Integer page, final Integer size) {\n+        return list(page, size, null);\n+    }\n+\n+    @Override\n+    public PagedResult<UserTO> list(final Integer page, final Integer size, final String orderBy) {\n+        List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\n+        return buildPagedResult(logic.list(page, size, orderByClauses), page, size, logic.count());\n+    }\n+\n+    @Override\n+    public UserTO read(final Long userKey) {\n+        return logic.read(userKey);\n+    }\n+\n+    @Override\n+    public PagedResult<UserTO> search(final String fiql) {\n+        return search(fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n+    }\n+\n+    @Override\n+    public PagedResult<UserTO> search(final String fiql, final String orderBy) {\n+        return search(fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n+    }\n+\n+    @Override\n+    public PagedResult<UserTO> search(final String fiql, final Integer page, final Integer size) {\n+        return search(fiql, page, size, null);\n+    }\n+\n+    @Override\n+    public PagedResult<UserTO> search(final String fiql, final Integer page, final Integer size, final String orderBy) {\n+        SearchCond cond = getSearchCond(fiql);\n+        List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\n+        return buildPagedResult(\n+                logic.search(cond, page, size, orderByClauses), page, size, logic.searchCount(cond));\n+    }\n+\n+    @Override\n+    public Response update(final Long userKey, final UserMod userMod) {\n+        UserTO user = logic.read(userKey);\n+\n+        checkETag(user.getETagValue());\n+\n+        userMod.setKey(userKey);\n+        UserTO updated = logic.update(userMod);\n+        return modificationResponse(updated);\n+    }\n+\n+    @Override\n+    public Response status(final Long userKey, final StatusMod statusMod) {\n+        UserTO user = logic.read(userKey);\n+\n+        checkETag(user.getETagValue());\n+\n+        statusMod.setKey(userKey);\n+        UserTO updated = logic.status(statusMod);\n+        return modificationResponse(updated);\n+    }\n+\n+    @Override\n+    public Response bulkDeassociation(\n+            final Long userKey, final ResourceDeassociationActionType type, final List<ResourceName> resourceNames) {\n+\n+        final UserTO user = logic.read(userKey);\n+\n+        checkETag(user.getETagValue());\n+\n+        UserTO updated;\n+        switch (type) {\n+            case UNLINK:\n+                updated = logic.unlink(userKey, CollectionWrapper.unwrap(resourceNames));\n+                break;\n+\n+            case UNASSIGN:\n+                updated = logic.unassign(userKey, CollectionWrapper.unwrap(resourceNames));\n+                break;\n+\n+            case DEPROVISION:\n+                updated = logic.deprovision(userKey, CollectionWrapper.unwrap(resourceNames));\n+                break;\n+\n+            default:\n+                updated = logic.read(userKey);\n+        }\n+\n+        final BulkActionResult res = new BulkActionResult();\n+\n+        if (type == ResourceDeassociationActionType.UNLINK) {\n+            for (ResourceName resourceName : resourceNames) {\n+                res.add(resourceName.getElement(), updated.getResources().contains(resourceName.getElement())\n+                        ? BulkActionResult.Status.FAILURE\n+                        : BulkActionResult.Status.SUCCESS);\n+            }\n+        } else {\n+            for (PropagationStatus propagationStatusTO : updated.getPropagationStatusTOs()) {\n+                res.add(propagationStatusTO.getResource(), propagationStatusTO.getStatus().toString());\n+            }\n+        }\n+\n+        return modificationResponse(res);\n+    }\n+\n+    @Override\n+    public Response bulkAssociation(\n+            final Long userKey, final ResourceAssociationActionType type, final ResourceAssociationMod associationMod) {\n+\n+        final UserTO user = logic.read(userKey);\n+\n+        checkETag(user.getETagValue());\n+\n+        UserTO updated;\n+        switch (type) {\n+            case LINK:\n+                updated = logic.link(\n+                        userKey,\n+                        CollectionWrapper.unwrap(associationMod.getTargetResources()));\n+                break;\n+\n+            case ASSIGN:\n+                updated = logic.assign(\n+                        userKey,\n+                        CollectionWrapper.unwrap(associationMod.getTargetResources()),\n+                        associationMod.isChangePwd(),\n+                        associationMod.getPassword());\n+                break;\n+\n+            case PROVISION:\n+                updated = logic.provision(\n+                        userKey,\n+                        CollectionWrapper.unwrap(associationMod.getTargetResources()),\n+                        associationMod.isChangePwd(),\n+                        associationMod.getPassword());\n+                break;\n+\n+            default:\n+                updated = logic.read(userKey);\n+        }\n+\n+        final BulkActionResult res = new BulkActionResult();\n+\n+        if (type == ResourceAssociationActionType.LINK) {\n+            for (ResourceName resourceName : associationMod.getTargetResources()) {\n+                res.add(resourceName.getElement(), updated.getResources().contains(resourceName.getElement())\n+                        ? BulkActionResult.Status.FAILURE\n+                        : BulkActionResult.Status.SUCCESS);\n+            }\n+        } else {\n+            for (PropagationStatus propagationStatusTO : updated.getPropagationStatusTOs()) {\n+                res.add(propagationStatusTO.getResource(), propagationStatusTO.getStatus().toString());\n+            }\n+        }\n+\n+        return modificationResponse(res);\n+    }\n+\n+    @Override\n+    public BulkActionResult bulk(final BulkAction bulkAction) {\n+        return logic.bulk(bulkAction);\n+    }\n+}"},{"sha":"235007dbf41a466984931087001d6a4f33f7f4f4","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/UserWorkflowServiceImpl.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FUserWorkflowServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FUserWorkflowServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FUserWorkflowServiceImpl.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.rest.cxf.service;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.to.WorkflowFormTO;\n+import org.apache.syncope.common.rest.api.service.UserWorkflowService;\n+import org.apache.syncope.server.logic.UserWorkflowLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class UserWorkflowServiceImpl implements UserWorkflowService {\n+\n+    @Autowired\n+    private UserWorkflowLogic lofic;\n+\n+    @Override\n+    public WorkflowFormTO claimForm(final String taskId) {\n+        return lofic.claimForm(taskId);\n+    }\n+\n+    @Override\n+    public UserTO executeTask(final String taskId, final UserTO userTO) {\n+        return lofic.executeWorkflowTask(userTO, taskId);\n+    }\n+\n+    @Override\n+    public WorkflowFormTO getFormForUser(final Long userKey) {\n+        return lofic.getFormForUser(userKey);\n+    }\n+\n+    @Override\n+    public List<WorkflowFormTO> getForms() {\n+        return lofic.getForms();\n+    }\n+\n+    @Override\n+    public UserTO submitForm(final WorkflowFormTO form) {\n+        return lofic.submitForm(form);\n+    }\n+\n+    @Override\n+    public List<WorkflowFormTO> getFormsByName(final Long userKey, final String taskName) {\n+        return lofic.getForms(userKey, taskName);\n+    }\n+}"},{"sha":"2cdc0d1f192e43eefd3e08f1022dcd0aa0c14c1d","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/WorkflowServiceImpl.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FWorkflowServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FWorkflowServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FWorkflowServiceImpl.java?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.rest.cxf.service;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.StreamingOutput;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.WorkflowService;\n+import org.apache.syncope.server.logic.WorkflowLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class WorkflowServiceImpl extends AbstractServiceImpl implements WorkflowService {\n+\n+    @Autowired\n+    private WorkflowLogic logic;\n+\n+    @Override\n+    public Response getOptions(final SubjectType kind) {\n+        String key;\n+        String value;\n+        if (kind == SubjectType.USER) {\n+            key = RESTHeaders.ACTIVITI_USER_ENABLED;\n+            value = \"false\"; //Boolean.toString(ActivitiDetector.isActivitiEnabledForUsers());\n+        } else {\n+            key = RESTHeaders.ACTIVITI_ROLE_ENABLED;\n+            value = \"false\"; //Boolean.toString(ActivitiDetector.isActivitiEnabledForRoles());\n+        }\n+\n+        Response.ResponseBuilder builder = Response.ok().header(HttpHeaders.ALLOW, OPTIONS_ALLOW);\n+        if (key != null && value != null) {\n+            builder.header(key, value);\n+        }\n+        return builder.build();\n+    }\n+\n+    @Override\n+    public Response exportDefinition(final SubjectType kind) {\n+        final MediaType accept =\n+                messageContext.getHttpHeaders().getAcceptableMediaTypes().contains(MediaType.APPLICATION_JSON_TYPE)\n+                        ? MediaType.APPLICATION_JSON_TYPE\n+                        : MediaType.APPLICATION_XML_TYPE;\n+\n+        StreamingOutput sout = new StreamingOutput() {\n+\n+            @Override\n+            public void write(final OutputStream os) throws IOException {\n+                if (kind == SubjectType.USER) {\n+                    logic.exportUserDefinition(accept, os);\n+                } else {\n+                    logic.exportRoleDefinition(accept, os);\n+                }\n+            }\n+        };\n+\n+        return Response.ok(sout).\n+                type(accept).\n+                build();\n+    }\n+\n+    @Override\n+    public Response exportDiagram(final SubjectType kind) {\n+        StreamingOutput sout = new StreamingOutput() {\n+\n+            @Override\n+            public void write(final OutputStream os) throws IOException {\n+                if (kind == SubjectType.USER) {\n+                    logic.exportUserDiagram(os);\n+                } else {\n+                    logic.exportRoleDiagram(os);\n+                }\n+            }\n+        };\n+\n+        return Response.ok(sout).\n+                type(RESTHeaders.MEDIATYPE_IMAGE_PNG).\n+                build();\n+    }\n+\n+    @Override\n+    public void importDefinition(final SubjectType kind, final String definition) {\n+        final MediaType contentType =\n+                messageContext.getHttpHeaders().getMediaType().equals(MediaType.APPLICATION_JSON_TYPE)\n+                        ? MediaType.APPLICATION_JSON_TYPE\n+                        : MediaType.APPLICATION_XML_TYPE;\n+\n+        if (kind == SubjectType.USER) {\n+            logic.importUserDefinition(contentType, definition);\n+        } else {\n+            logic.importRoleDefinition(contentType, definition);\n+        }\n+    }\n+\n+}"},{"sha":"2b6155de506c4418d6015e6fb57330922796f947","filename":"syncope620/server/rest-cxf/src/main/resources/restCXFContext.xml","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b4e52d74596ae729330d8904ae9fddcc190504d/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml?ref=8b4e52d74596ae729330d8904ae9fddcc190504d","patch":"@@ -0,0 +1,122 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:jaxrs=\"http://cxf.apache.org/jaxrs\"\n+       xmlns:context=\"http://www.springframework.org/schema/context\"\n+       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+                           http://www.springframework.org/schema/beans/spring-beans.xsd\n+                           http://cxf.apache.org/jaxrs\n+                           http://cxf.apache.org/schemas/jaxrs.xsd\n+                           http://www.springframework.org/schema/context\n+                           http://www.springframework.org/schema/context/spring-context.xsd\n+                           http://www.springframework.org/schema/aop \n+                           http://www.springframework.org/schema/aop/spring-aop.xsd\">\n+\n+  <import resource=\"classpath:META-INF/cxf/cxf.xml\"/>\n+  <import resource=\"classpath:META-INF/cxf/cxf-servlet.xml\"/>\n+\n+  <context:component-scan base-package=\"org.apache.syncope.server.rest.cxf.service\"/>  \n+\n+  <bean id=\"jaxbProvider\" class=\"org.apache.cxf.jaxrs.provider.JAXBElementProvider\">\n+    <property name=\"namespacePrefixes\">\n+      <map>\n+        <entry key=\"http://syncope.apache.org/2.0\">\n+          <value>syncope</value>\n+        </entry>\n+      </map>      \n+    </property>\n+    <property name=\"depthProperties\">\n+      <bean id=\"depthProperties\" class=\"org.apache.cxf.staxutils.DocumentDepthProperties\">\n+        <property name=\"innerElementCountThreshold\" value=\"500\"/>\n+      </bean>\n+    </property>\n+    <property name=\"collectionWrapperMap\">\n+      <map>\n+        <entry>\n+          <key>\n+            <value>org.apache.syncope.common.lib.to.AbstractPolicyTO</value>\n+          </key>\n+          <value>policies</value>\n+        </entry>\n+      </map>\n+    </property>\n+  </bean>\n+\n+  <bean id=\"jacksonObjectMapper\" class=\"org.apache.syncope.server.misc.serialization.UnwrappedObjectMapper\"/>\n+  <bean id=\"jsonProvider\" class=\"com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider\">\n+    <property name=\"mapper\" ref=\"jacksonObjectMapper\"/>\n+  </bean>\n+\n+  <bean id=\"exceptionMapper\" class=\"org.apache.syncope.server.rest.cxf.service.RestServiceExceptionMapper\"/>\n+\n+  <bean id=\"validationProvider\" class=\"org.apache.cxf.validation.BeanValidationProvider\"/>\n+  <bean id=\"validationInInterceptor\" class=\"org.apache.cxf.jaxrs.validation.JAXRSBeanValidationInInterceptor\">\n+    <property name=\"provider\" ref=\"validationProvider\"/>\n+  </bean>\n+  <bean id=\"validationOutInterceptor\" class=\"org.apache.cxf.jaxrs.validation.JAXRSBeanValidationOutInterceptor\">\n+    <property name=\"provider\" ref=\"validationProvider\"/>\n+  </bean>   \n+  \n+  <bean id=\"searchContextProvider\" class=\"org.apache.cxf.jaxrs.ext.search.SearchContextProvider\"/>\n+  \n+  <bean id=\"wadlGenerator\" class=\"org.apache.cxf.jaxrs.model.wadl.WadlGenerator\">\n+    <property name=\"applicationTitle\" value=\"Apache Syncope ${syncope.version}\"/>\n+    <property name=\"namespacePrefix\" value=\"syncope\"/>\n+    <property name=\"linkJsonToXmlSchema\" value=\"true\"/>\n+    <property name=\"useJaxbContextForQnames\" value=\"true\"/>\n+    <property name=\"ignoreMessageWriters\" value=\"true\"/>\n+    <property name=\"addResourceAndMethodIds\" value=\"true\"/>\n+    <property name=\"javaDocPath\" value=\"/WEB-INF/lib/syncope-common-${syncope.version}-javadoc.jar\"/>\n+  </bean>\n+  \n+  <bean id=\"addETagFilter\" class=\"org.apache.syncope.server.rest.cxf.service.AddETagFilter\"/>\n+\n+  <jaxrs:server id=\"restContainer\" address=\"/\" \n+                basePackages=\"org.apache.syncope.common.rest.api.service, org.apache.syncope.server.rest.cxf.service\" \n+                staticSubresourceResolution=\"true\">\n+    <jaxrs:resourceComparator>\n+      <bean class=\"org.apache.syncope.server.rest.cxf.QueryResourceInfoComparator\"/>\n+    </jaxrs:resourceComparator>\n+    <jaxrs:properties> \n+      <entry key=\"search.lax.property.match\" value=\"true\"/> \n+    </jaxrs:properties> \n+    <jaxrs:inInterceptors>\n+      <ref bean=\"validationInInterceptor\"/>\n+    </jaxrs:inInterceptors>         \n+    <jaxrs:outInterceptors>\n+      <ref bean=\"validationOutInterceptor\"/>\n+    </jaxrs:outInterceptors>\n+    <jaxrs:providers>\n+      <ref bean=\"jaxbProvider\"/>\n+      <ref bean=\"jsonProvider\"/>\n+      <ref bean=\"exceptionMapper\"/>\n+      <ref bean=\"searchContextProvider\"/>\n+      <ref bean=\"wadlGenerator\"/>\n+      <ref bean=\"addETagFilter\"/>\n+    </jaxrs:providers>\n+    <jaxrs:extensionMappings>\n+      <entry key=\"json\" value=\"application/json;charset=UTF-8\"/>\n+      <entry key=\"xml\" value=\"application/xml;charset=UTF-8\"/>\n+    </jaxrs:extensionMappings>\n+  </jaxrs:server>\n+\n+</beans>"}]}