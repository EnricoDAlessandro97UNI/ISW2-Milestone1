{"sha":"1f54d793fdec207774a53f2c8372de470defdad7","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjFmNTRkNzkzZmRlYzIwNzc3NGE1M2YyYzgzNzJkZTQ3MGRlZmRhZDc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-11-08T09:30:38Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-11-09T14:04:16Z"},"message":"[SYNCOPE-1395] Preliminary changes","tree":{"sha":"67afbe9995296e27c89a69c1fb898f9bf843db73","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/67afbe9995296e27c89a69c1fb898f9bf843db73"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1f54d793fdec207774a53f2c8372de470defdad7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1f54d793fdec207774a53f2c8372de470defdad7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1f54d793fdec207774a53f2c8372de470defdad7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1f54d793fdec207774a53f2c8372de470defdad7/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"ed45f24d1e879a3996b05745b4c838aa6c4d325d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ed45f24d1e879a3996b05745b4c838aa6c4d325d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ed45f24d1e879a3996b05745b4c838aa6c4d325d"}],"stats":{"total":678,"additions":406,"deletions":272},"files":[{"sha":"aa3eee1068111786ae729aca6730b8d9ac29ba7d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AllowedSchemas.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAllowedSchemas.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAllowedSchemas.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAllowedSchemas.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -99,6 +99,5 @@ private class KeyMatches implements Predicate<S> {\n         public boolean test(final S object) {\n             return object.getKey().equals(schema);\n         }\n-\n     }\n }"},{"sha":"6fb8d792671edc1f1526e760787b3ecf8b53605a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Relationship;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n@@ -44,6 +45,8 @@ public interface AnyObjectDAO extends AnyDAO<AnyObject> {\n \n     AnyObject findByName(String name);\n \n+    AMembership findMembership(String key);\n+\n     List<Group> findDynGroups(String key);\n \n     List<Relationship<Any<?>, AnyObject>> findAllRelationships(AnyObject anyObject);"},{"sha":"bce54f22da872b7daedaf4594173308d78d3a4e3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainAttrDAO.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainAttrDAO.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -22,9 +22,11 @@\n \n public interface PlainAttrDAO extends DAO<PlainAttr<?>> {\n \n-    <T extends PlainAttr<?>> T find(String key, Class<T> reference);\n-\n-    <T extends PlainAttr<?>> void delete(String key, Class<T> reference);\n-\n+    /**\n+     * Deletes the given plain attribute and removes it from its owner.\n+     *\n+     * @param <T> actual plain attr class\n+     * @param attr plain attribute\n+     */\n     <T extends PlainAttr<?>> void delete(T attr);\n }"},{"sha":"ec980d8d2b52ea6cdebbab93704bcdf5ee9b5237","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainAttrValueDAO.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainAttrValueDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainAttrValueDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainAttrValueDAO.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -18,16 +18,17 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n-import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n \n public interface PlainAttrValueDAO extends DAO<PlainAttrValue> {\n \n-    <T extends PlainAttrValue> T find(String key, Class<T> reference);\n-\n-    <T extends PlainAttrValue> List<T> findAll(Class<T> reference);\n-\n-    <T extends PlainAttrValue> T save(T attributeValue);\n-\n-    <T extends PlainAttrValue> void delete(String key, Class<T> reference);\n+    /**\n+     * Deletes and remove all values of the given attribute.\n+     *\n+     * @param attr plain attribute\n+     * @param anyUtils utility\n+     */\n+    void deleteAll(PlainAttr<?> attr, AnyUtils anyUtils);\n }"},{"sha":"bda2a8d13cfaf05b096838a634454a5ba86c71e8","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/UserDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -27,6 +27,7 @@\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n+import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n \n public interface UserDAO extends AnyDAO<User> {\n@@ -41,6 +42,8 @@ public interface UserDAO extends AnyDAO<User> {\n \n     List<User> findBySecurityQuestion(SecurityQuestion securityQuestion);\n \n+    UMembership findMembership(String key);\n+\n     List<Role> findDynRoles(String key);\n \n     Collection<Role> findAllRoles(User user);"},{"sha":"a75602890aa4678aba5241aefbed377486b9fea8","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/EntityFactory.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FEntityFactory.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -18,9 +18,25 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+\n public interface EntityFactory {\n \n     <E extends Entity> E newEntity(Class<E> reference);\n \n     ConnPoolConf newConnPoolConf();\n+\n+    Class<? extends User> userClass();\n+\n+    Class<? extends Group> groupClass();\n+\n+    Class<? extends AnyObject> anyObjectClass();\n+\n+    Class<? extends Conf> confClass();\n+\n+    Class<? extends AnySearchDAO> anySearchDAOClass();\n }"},{"sha":"daa8a4cd3be47329b29ba75b8e15ca7f07e8002b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/GroupableRelatable.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGroupableRelatable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGroupableRelatable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGroupableRelatable.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -83,6 +83,8 @@\n \n     boolean add(M membership);\n \n+    boolean remove(M membership);\n+\n     Optional<? extends M> getMembership(String groupKey);\n \n     List<? extends M> getMemberships();\n@@ -96,5 +98,4 @@\n     Collection<? extends REL> getRelationships(RelationshipType relationshipType);\n \n     List<? extends REL> getRelationships();\n-\n }"},{"sha":"531607b757fbe30df6af85530c584afbbbd37369","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -47,6 +47,7 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n@@ -65,14 +66,17 @@\n \n public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A> implements AnyDAO<A> {\n \n+    @Autowired\n+    protected AnyUtilsFactory anyUtilsFactory;\n+\n     @Autowired\n     protected ApplicationEventPublisher publisher;\n \n     @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n+    protected PlainSchemaDAO plainSchemaDAO;\n \n     @Autowired\n-    private DerSchemaDAO derSchemaDAO;\n+    protected DerSchemaDAO derSchemaDAO;\n \n     @Autowired\n     protected DynRealmDAO dynRealmDAO;"},{"sha":"2a204cc6a02d629bfbb94dee8a83928c9f35857b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java","status":"modified","additions":1,"deletions":11,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -353,17 +353,7 @@ public <T extends Any<?>> List<T> search(\n             return Collections.<T>emptyList();\n         }\n \n-        List<OrderByClause> effectiveOrderBy;\n-        if (orderBy.isEmpty()) {\n-            OrderByClause keyClause = new OrderByClause();\n-            keyClause.setField(\"key\");\n-            keyClause.setDirection(OrderByClause.Direction.ASC);\n-            effectiveOrderBy = Collections.singletonList(keyClause);\n-        } else {\n-            effectiveOrderBy = orderBy;\n-        }\n-\n-        return doSearch(adminRealms, cond, page, itemsPerPage, effectiveOrderBy, kind);\n+        return doSearch(adminRealms, cond, page, itemsPerPage, orderBy, kind);\n     }\n \n     @Override"},{"sha":"f4aacd235dc7ad5c8607761244cf60a3e512f085","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":13,"deletions":10,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -44,23 +44,22 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Relationship;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Repository\n public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObjectDAO {\n \n     @Autowired\n@@ -71,7 +70,7 @@ public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObj\n \n     @Override\n     protected AnyUtils init() {\n-        return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.ANY_OBJECT);\n+        return anyUtilsFactory.getInstance(AnyTypeKind.ANY_OBJECT);\n     }\n \n     @Transactional(readOnly = true)\n@@ -89,7 +88,7 @@ public Date findLastChange(final String key) {\n     @Override\n     public Map<AnyType, Integer> countByType() {\n         Query query = entityManager().createQuery(\n-                \"SELECT e.type, COUNT(e) AS countByType FROM  \" + JPAAnyObject.class.getSimpleName() + \" e \"\n+                \"SELECT e.type, COUNT(e) AS countByType FROM  \" + anyUtils().anyClass().getSimpleName() + \" e \"\n                 + \"GROUP BY e.type ORDER BY countByType DESC\");\n         @SuppressWarnings(\"unchecked\")\n         List<Object[]> results = query.getResultList();\n@@ -105,7 +104,7 @@ public Map<AnyType, Integer> countByType() {\n     @Override\n     public Map<String, Integer> countByRealm(final AnyType anyType) {\n         Query query = entityManager().createQuery(\n-                \"SELECT e.realm, COUNT(e) FROM  \" + JPAAnyObject.class.getSimpleName() + \" e \"\n+                \"SELECT e.realm, COUNT(e) FROM  \" + anyUtils().anyClass().getSimpleName() + \" e \"\n                 + \"WHERE e.type=:type GROUP BY e.realm\");\n         query.setParameter(\"type\", anyType);\n \n@@ -138,7 +137,7 @@ protected void securityChecks(final AnyObject anyObject) {\n     @Override\n     public AnyObject findByName(final String name) {\n         TypedQuery<AnyObject> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAAnyObject.class.getSimpleName() + \" e WHERE e.name = :name\", AnyObject.class);\n+                \"SELECT e FROM \" + anyUtils().anyClass().getSimpleName() + \" e WHERE e.name = :name\", AnyObject.class);\n         query.setParameter(\"name\", name);\n \n         AnyObject result = null;\n@@ -151,6 +150,11 @@ public AnyObject findByName(final String name) {\n         return result;\n     }\n \n+    @Override\n+    public AMembership findMembership(final String key) {\n+        return entityManager().find(JPAAMembership.class, key);\n+    }\n+\n     @Override\n     public List<Relationship<Any<?>, AnyObject>> findAllRelationships(final AnyObject anyObject) {\n         List<Relationship<Any<?>, AnyObject>> result = new ArrayList<>();\n@@ -177,14 +181,14 @@ public List<Relationship<Any<?>, AnyObject>> findAllRelationships(final AnyObjec\n     @Override\n     public int count() {\n         Query query = entityManager().createQuery(\n-                \"SELECT COUNT(e) FROM  \" + JPAAnyObject.class.getSimpleName() + \" e\");\n+                \"SELECT COUNT(e) FROM  \" + anyUtils().anyClass().getSimpleName() + \" e\");\n         return ((Number) query.getSingleResult()).intValue();\n     }\n \n     @Override\n     public List<AnyObject> findAll(final int page, final int itemsPerPage) {\n         TypedQuery<AnyObject> query = entityManager().createQuery(\n-                \"SELECT e FROM  \" + JPAAnyObject.class.getSimpleName() + \" e ORDER BY e.id\", AnyObject.class);\n+                \"SELECT e FROM  \" + anyUtils().anyClass().getSimpleName() + \" e ORDER BY e.id\", AnyObject.class);\n         query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n         query.setMaxResults(itemsPerPage);\n \n@@ -308,5 +312,4 @@ public Collection<ExternalResource> findAllResources(final AnyObject anyObject)\n     public Collection<String> findAllResourceKeys(final String key) {\n         return findAllResources(authFind(key)).stream().map(resource -> resource.getKey()).collect(Collectors.toList());\n     }\n-\n }"},{"sha":"53c52d9c980ac8a975dacece5dec36ca2ad218e3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -223,7 +223,7 @@ private void fillWithParameters(final Query query, final List<Object> parameters\n     }\n \n     private StringBuilder buildSelect(final OrderBySupport obs) {\n-        StringBuilder select = new StringBuilder(\"SELECT u.any_id\");\n+        StringBuilder select = new StringBuilder(\"SELECT DISTINCT u.any_id\");\n \n         obs.items.forEach(item -> {\n             select.append(',').append(item.select);"},{"sha":"ed065fe9935faa25ffbad87e420f6e9cb09e2be5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConfDAO.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -22,9 +22,10 @@\n import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n-import org.apache.syncope.core.persistence.jpa.entity.conf.JPAConf;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -33,11 +34,14 @@ public class JPAConfDAO extends AbstractDAO<Conf> implements ConfDAO {\n \n     private static final String KEY = \"cd64d66f-6fff-4008-b966-a06b1cc1436d\";\n \n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n     @Override\n     public Conf get() {\n-        Conf instance = entityManager().find(JPAConf.class, KEY);\n+        Conf instance = entityManager().find(entityFactory.confClass(), KEY);\n         if (instance == null) {\n-            instance = new JPAConf();\n+            instance = entityFactory.newEntity(Conf.class);\n             instance.setKey(KEY);\n \n             instance = entityManager().merge(instance);"},{"sha":"d9c1775107f01eb86361d42a67703067c9db9adc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -27,6 +27,7 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n import org.apache.syncope.core.persistence.api.entity.DynRealmMembership;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.jpa.entity.JPADynRealm;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n@@ -47,6 +48,9 @@ public class JPADynRealmDAO extends AbstractDAO<DynRealm> implements DynRealmDAO\n     @Autowired\n     private ApplicationEventPublisher publisher;\n \n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n     @Autowired\n     private AnySearchDAO searchDAO;\n \n@@ -55,11 +59,11 @@ public class JPADynRealmDAO extends AbstractDAO<DynRealm> implements DynRealmDAO\n     private AnySearchDAO jpaAnySearchDAO() {\n         synchronized (this) {\n             if (jpaAnySearchDAO == null) {\n-                if (AopUtils.getTargetClass(searchDAO).equals(JPAAnySearchDAO.class)) {\n+                if (AopUtils.getTargetClass(searchDAO).equals(entityFactory.anySearchDAOClass())) {\n                     jpaAnySearchDAO = searchDAO;\n                 } else {\n-                    jpaAnySearchDAO = (AnySearchDAO) ApplicationContextProvider.getBeanFactory().\n-                            createBean(JPAAnySearchDAO.class, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n+                    jpaAnySearchDAO = (AnySearchDAO) ApplicationContextProvider.getBeanFactory().createBean(\n+                            entityFactory.anySearchDAOClass(), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n                 }\n             }\n         }"},{"sha":"a343ebc725b89542371e1db9b065896df3a9ab00","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":16,"deletions":15,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -54,14 +54,14 @@\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPATypeExtension;\n@@ -73,16 +73,17 @@\n import org.springframework.aop.support.AopUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Repository\n public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {\n \n     public static final String UDYNMEMB_TABLE = \"UDynGroupMembers\";\n \n     public static final String ADYNMEMB_TABLE = \"ADynGroupMembers\";\n \n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n     @Autowired\n     private PlainAttrDAO plainAttrDAO;\n \n@@ -100,11 +101,11 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {\n     private AnySearchDAO jpaAnySearchDAO() {\n         synchronized (this) {\n             if (jpaAnySearchDAO == null) {\n-                if (AopUtils.getTargetClass(searchDAO).equals(JPAAnySearchDAO.class)) {\n+                if (AopUtils.getTargetClass(searchDAO).equals(entityFactory.anySearchDAOClass())) {\n                     jpaAnySearchDAO = searchDAO;\n                 } else {\n-                    jpaAnySearchDAO = (AnySearchDAO) ApplicationContextProvider.getBeanFactory().\n-                            createBean(JPAAnySearchDAO.class, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n+                    jpaAnySearchDAO = (AnySearchDAO) ApplicationContextProvider.getBeanFactory().createBean(\n+                            entityFactory.anySearchDAOClass(), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n                 }\n             }\n         }\n@@ -113,7 +114,7 @@ private AnySearchDAO jpaAnySearchDAO() {\n \n     @Override\n     protected AnyUtils init() {\n-        return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.GROUP);\n+        return anyUtilsFactory.getInstance(AnyTypeKind.GROUP);\n     }\n \n     @Transactional(readOnly = true)\n@@ -131,14 +132,14 @@ public Date findLastChange(final String key) {\n     @Override\n     public int count() {\n         Query query = entityManager().createQuery(\n-                \"SELECT COUNT(e) FROM  \" + JPAGroup.class.getSimpleName() + \" e\");\n+                \"SELECT COUNT(e) FROM  \" + anyUtils().anyClass().getSimpleName() + \" e\");\n         return ((Number) query.getSingleResult()).intValue();\n     }\n \n     @Override\n     public Map<String, Integer> countByRealm() {\n         Query query = entityManager().createQuery(\n-                \"SELECT e.realm, COUNT(e) FROM  \" + JPAGroup.class.getSimpleName() + \" e GROUP BY e.realm\");\n+                \"SELECT e.realm, COUNT(e) FROM  \" + anyUtils().anyClass().getSimpleName() + \" e GROUP BY e.realm\");\n \n         @SuppressWarnings(\"unchecked\")\n         List<Object[]> results = query.getResultList();\n@@ -170,7 +171,7 @@ protected void securityChecks(final Group group) {\n     @Override\n     public Group findByName(final String name) {\n         TypedQuery<Group> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAGroup.class.getSimpleName() + \" e WHERE e.name = :name\", Group.class);\n+                \"SELECT e FROM \" + anyUtils().anyClass().getSimpleName() + \" e WHERE e.name = :name\", Group.class);\n         query.setParameter(\"name\", name);\n \n         Group result = null;\n@@ -191,7 +192,7 @@ public List<Group> findOwnedByUser(final String userKey) {\n             return Collections.<Group>emptyList();\n         }\n \n-        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(JPAGroup.class.getSimpleName()).\n+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(anyUtils().anyClass().getSimpleName()).\n                 append(\" e WHERE e.userOwner=:owner \");\n         userDAO.findAllGroupKeys(owner).forEach(groupKey -> {\n             queryString.append(\"OR e.groupOwner.id='\").append(groupKey).append(\"' \");\n@@ -212,7 +213,7 @@ public List<Group> findOwnedByGroup(final String groupKey) {\n         }\n \n         TypedQuery<Group> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAGroup.class.getSimpleName() + \" e WHERE e.groupOwner=:owner\", Group.class);\n+                \"SELECT e FROM \" + anyUtils().anyClass().getSimpleName() + \" e WHERE e.groupOwner=:owner\", Group.class);\n         query.setParameter(\"owner\", owner);\n \n         return query.getResultList();\n@@ -241,7 +242,7 @@ public List<UMembership> findUMemberships(final Group group) {\n     @Override\n     public List<Group> findAll(final int page, final int itemsPerPage) {\n         TypedQuery<Group> query = entityManager().createQuery(\n-                \"SELECT e FROM  \" + JPAGroup.class.getSimpleName() + \" e ORDER BY e.id\", Group.class);\n+                \"SELECT e FROM  \" + anyUtils().anyClass().getSimpleName() + \" e ORDER BY e.id\", Group.class);\n         query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n         query.setMaxResults(itemsPerPage);\n \n@@ -324,7 +325,7 @@ public void delete(final Group group) {\n \n         findAMemberships(group).forEach(membership -> {\n             AnyObject leftEnd = membership.getLeftEnd();\n-            leftEnd.getMemberships().remove(membership);\n+            leftEnd.remove(membership);\n             membership.setRightEnd(null);\n             leftEnd.getPlainAttrs(membership).stream().map(attr -> {\n                 leftEnd.remove(attr);\n@@ -339,7 +340,7 @@ public void delete(final Group group) {\n \n         findUMemberships(group).forEach(membership -> {\n             User leftEnd = membership.getLeftEnd();\n-            leftEnd.getMemberships().remove(membership);\n+            leftEnd.remove(membership);\n             membership.setRightEnd(null);\n             leftEnd.getPlainAttrs(membership).stream().map(attr -> {\n                 leftEnd.remove(attr);"},{"sha":"5ca294c09e33d1480d5cfadef016cf6657d7bdfb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrDAO.java","status":"modified","additions":1,"deletions":18,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -30,12 +30,10 @@\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttr;\n-import org.springframework.stereotype.Repository;\n \n-@Repository\n public class JPAPlainAttrDAO extends AbstractDAO<PlainAttr<?>> implements PlainAttrDAO {\n \n-    public <T extends PlainAttr<?>> Class<? extends AbstractPlainAttr<?>> getEntityReference(\n+    public static <T extends PlainAttr<?>> Class<? extends AbstractPlainAttr<?>> getEntityReference(\n             final Class<T> reference) {\n \n         return CPlainAttr.class.isAssignableFrom(reference)\n@@ -49,21 +47,6 @@ public <T extends PlainAttr<?>> Class<? extends AbstractPlainAttr<?>> getEntityR\n                 : null;\n     }\n \n-    @Override\n-    public <T extends PlainAttr<?>> T find(final String key, final Class<T> reference) {\n-        return reference.cast(entityManager().find(getEntityReference(reference), key));\n-    }\n-\n-    @Override\n-    public <T extends PlainAttr<?>> void delete(final String key, final Class<T> reference) {\n-        T attribute = find(key, reference);\n-        if (attribute == null) {\n-            return;\n-        }\n-\n-        delete(attribute);\n-    }\n-\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public <T extends PlainAttr<?>> void delete(final T plainAttr) {"},{"sha":"c0ede1d6f80a3cdce9244cfc0a5a42696fa81f2e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrValueDAO.java","status":"modified","additions":18,"deletions":37,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -18,10 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.List;\n-import javax.persistence.TypedQuery;\n+import java.util.stream.Collectors;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrValue;\n@@ -40,13 +41,11 @@\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrValue;\n-import org.springframework.stereotype.Repository;\n \n-@Repository\n public class JPAPlainAttrValueDAO extends AbstractDAO<PlainAttrValue> implements PlainAttrValueDAO {\n \n     @SuppressWarnings(\"unchecked\")\n-    private <T extends PlainAttrValue> Class<? extends AbstractPlainAttrValue> getEntityReference(\n+    public static <T extends PlainAttrValue> Class<? extends AbstractPlainAttrValue> getEntityReference(\n             final Class<T> reference) {\n \n         return AbstractPlainAttrValue.class.isAssignableFrom(reference)\n@@ -71,37 +70,19 @@ private <T extends PlainAttrValue> Class<? extends AbstractPlainAttrValue> getEn\n     }\n \n     @Override\n-    public <T extends PlainAttrValue> T find(final String key, final Class<T> reference) {\n-        return reference.cast(entityManager().find(getEntityReference(reference), key));\n-    }\n-\n-    @Override\n-    public <T extends PlainAttrValue> List<T> findAll(final Class<T> reference) {\n-        TypedQuery<T> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + getEntityReference(reference).getSimpleName() + \" e\", reference);\n-        return query.getResultList();\n-    }\n-\n-    @Override\n-    public <T extends PlainAttrValue> T save(final T attributeValue) {\n-        return entityManager().merge(attributeValue);\n-    }\n-\n-    @Override\n-    public <T extends PlainAttrValue> void delete(final String key, final Class<T> reference) {\n-        T attrValue = find(key, reference);\n-        if (attrValue == null) {\n-            return;\n+    public void deleteAll(final PlainAttr<?> attr, final AnyUtils anyUtils) {\n+        if (attr.getUniqueValue() == null) {\n+            attr.getValues().stream().map(Entity::getKey).collect(Collectors.toSet()).forEach(attrValueKey -> {\n+                PlainAttrValue attrValue = anyUtils.plainAttrValueClass().cast(\n+                        entityManager().find(getEntityReference(anyUtils.plainAttrValueClass()), attrValueKey));\n+                if (attrValue != null) {\n+                    entityManager().remove(attrValue);\n+                    attr.getValues().remove(attrValue);\n+                }\n+            });\n+        } else {\n+            entityManager().remove(attr.getUniqueValue());\n+            attr.setUniqueValue(null);\n         }\n-\n-        if (attrValue.getAttr() != null) {\n-            if (attrValue instanceof PlainAttrUniqueValue) {\n-                attrValue.getAttr().setUniqueValue(null);\n-            } else {\n-                attrValue.getAttr().getValues().remove(attrValue);\n-            }\n-        }\n-\n-        entityManager().remove(attrValue);\n     }\n }"},{"sha":"46df7424fdc89cc58f55831e61016521c1f04c4b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java","status":"modified","additions":16,"deletions":13,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -31,14 +31,14 @@\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Repository;\n \n-@Repository\n public class JPAPlainSchemaDAO extends AbstractDAO<PlainSchema> implements PlainSchemaDAO {\n \n+    @Autowired\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n     @Autowired\n     private PlainAttrDAO plainAttrDAO;\n \n@@ -94,7 +94,7 @@ public List<PlainSchema> findAll() {\n     @Override\n     public <T extends PlainAttr<?>> List<T> findAttrs(final PlainSchema schema, final Class<T> reference) {\n         TypedQuery<T> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + ((JPAPlainAttrDAO) plainAttrDAO).getEntityReference(reference).getSimpleName()\n+                \"SELECT e FROM \" + JPAPlainAttrDAO.getEntityReference(reference).getSimpleName()\n                 + \" e WHERE e.schema=:schema\", reference);\n         query.setParameter(\"schema\", schema);\n \n@@ -106,6 +106,16 @@ public PlainSchema save(final PlainSchema schema) {\n         return entityManager().merge(schema);\n     }\n \n+    protected void deleteAttrs(final PlainSchema schema) {\n+        for (AnyTypeKind anyTypeKind : AnyTypeKind.values()) {\n+            AnyUtils anyUtils = anyUtilsFactory.getInstance(anyTypeKind);\n+\n+            findAttrs(schema, anyUtils.plainAttrClass()).forEach(attr -> {\n+                plainAttrDAO.delete(attr);\n+            });\n+        }\n+    }\n+\n     @Override\n     public void delete(final String key) {\n         PlainSchema schema = find(key);\n@@ -115,16 +125,9 @@ public void delete(final String key) {\n \n         schema.getLabels().forEach(label -> label.setSchema(null));\n \n-        AnyUtilsFactory anyUtilsFactory = new JPAAnyUtilsFactory();\n-        for (AnyTypeKind anyTypeKind : AnyTypeKind.values()) {\n-            AnyUtils anyUtils = anyUtilsFactory.getInstance(anyTypeKind);\n-\n-            findAttrs(schema, anyUtils.plainAttrClass()).forEach(attr -> {\n-                plainAttrDAO.delete(attr.getKey(), anyUtils.plainAttrClass());\n-            });\n+        deleteAttrs(schema);\n \n-            resourceDAO.deleteMapping(key);\n-        }\n+        resourceDAO.deleteMapping(key);\n \n         if (schema.getAnyTypeClass() != null) {\n             schema.getAnyTypeClass().getPlainSchemas().remove(schema);"},{"sha":"4d7f64e82215ca53ccf890af803a6a3d4701b4e7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARelationshipTypeDAO.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARelationshipTypeDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARelationshipTypeDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARelationshipTypeDAO.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -82,17 +82,16 @@ public void delete(final String key) {\n             if (relationship instanceof URelationship) {\n                 ((URelationship) relationship).getLeftEnd().getRelationships().remove((URelationship) relationship);\n             } else if (relationship instanceof UMembership) {\n-                ((UMembership) relationship).getLeftEnd().getMemberships().remove((UMembership) relationship);\n+                ((UMembership) relationship).getLeftEnd().remove((UMembership) relationship);\n             } else if (relationship instanceof ARelationship) {\n                 ((ARelationship) relationship).getLeftEnd().getRelationships().remove((ARelationship) relationship);\n             } else if (relationship instanceof AMembership) {\n-                ((AMembership) relationship).getLeftEnd().getMemberships().remove((AMembership) relationship);\n+                ((AMembership) relationship).getLeftEnd().remove((AMembership) relationship);\n             }\n             relationship.setLeftEnd(null);\n             return relationship;\n         }).forEachOrdered(relationship -> entityManager().remove(relationship));\n \n         entityManager().remove(type);\n     }\n-\n }"},{"sha":"33bf9f7cb26b09d61ebaf9d0bb973fb5255b1705","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":18,"deletions":11,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -61,19 +61,18 @@\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n+import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n import org.apache.syncope.core.spring.ImplementationManager;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Repository\n public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n \n     private static final Pattern USERNAME_PATTERN =\n@@ -101,7 +100,7 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n \n     @Override\n     protected AnyUtils init() {\n-        return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.USER);\n+        return anyUtilsFactory.getInstance(AnyTypeKind.USER);\n     }\n \n     @Transactional(readOnly = true)\n@@ -119,14 +118,14 @@ public Date findLastChange(final String key) {\n     @Override\n     public int count() {\n         Query query = entityManager().createQuery(\n-                \"SELECT COUNT(e) FROM  \" + JPAUser.class.getSimpleName() + \" e\");\n+                \"SELECT COUNT(e) FROM  \" + anyUtils().anyClass().getSimpleName() + \" e\");\n         return ((Number) query.getSingleResult()).intValue();\n     }\n \n     @Override\n     public Map<String, Integer> countByRealm() {\n         Query query = entityManager().createQuery(\n-                \"SELECT e.realm, COUNT(e) FROM  \" + JPAUser.class.getSimpleName() + \" e GROUP BY e.realm\");\n+                \"SELECT e.realm, COUNT(e) FROM  \" + anyUtils().anyClass().getSimpleName() + \" e GROUP BY e.realm\");\n \n         @SuppressWarnings(\"unchecked\")\n         List<Object[]> results = query.getResultList();\n@@ -138,7 +137,7 @@ public Map<String, Integer> countByRealm() {\n     @Override\n     public Map<String, Integer> countByStatus() {\n         Query query = entityManager().createQuery(\n-                \"SELECT e.status, COUNT(e) FROM  \" + JPAUser.class.getSimpleName() + \" e GROUP BY e.status\");\n+                \"SELECT e.status, COUNT(e) FROM  \" + anyUtils().anyClass().getSimpleName() + \" e GROUP BY e.status\");\n \n         @SuppressWarnings(\"unchecked\")\n         List<Object[]> results = query.getResultList();\n@@ -174,7 +173,8 @@ protected void securityChecks(final User user) {\n \n     @Override\n     public User findByUsername(final String username) {\n-        TypedQuery<User> query = entityManager().createQuery(\"SELECT e FROM \" + JPAUser.class.getSimpleName()\n+        TypedQuery<User> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + anyUtils().anyClass().getSimpleName()\n                 + \" e WHERE e.username = :username\", User.class);\n         query.setParameter(\"username\", username);\n \n@@ -190,7 +190,8 @@ public User findByUsername(final String username) {\n \n     @Override\n     public User findByToken(final String token) {\n-        TypedQuery<User> query = entityManager().createQuery(\"SELECT e FROM \" + JPAUser.class.getSimpleName()\n+        TypedQuery<User> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + anyUtils().anyClass().getSimpleName()\n                 + \" e WHERE e.token LIKE :token\", User.class);\n         query.setParameter(\"token\", token);\n \n@@ -206,13 +207,19 @@ public User findByToken(final String token) {\n \n     @Override\n     public List<User> findBySecurityQuestion(final SecurityQuestion securityQuestion) {\n-        TypedQuery<User> query = entityManager().createQuery(\"SELECT e FROM \" + JPAUser.class.getSimpleName()\n+        TypedQuery<User> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + anyUtils().anyClass().getSimpleName()\n                 + \" e WHERE e.securityQuestion = :securityQuestion\", User.class);\n         query.setParameter(\"securityQuestion\", securityQuestion);\n \n         return query.getResultList();\n     }\n \n+    @Override\n+    public UMembership findMembership(final String key) {\n+        return entityManager().find(JPAUMembership.class, key);\n+    }\n+\n     private List<PasswordPolicy> getPasswordPolicies(final User user) {\n         List<PasswordPolicy> policies = new ArrayList<>();\n \n@@ -240,7 +247,7 @@ private List<PasswordPolicy> getPasswordPolicies(final User user) {\n     @Override\n     public List<User> findAll(final int page, final int itemsPerPage) {\n         TypedQuery<User> query = entityManager().createQuery(\n-                \"SELECT e FROM  \" + JPAUser.class.getSimpleName() + \" e ORDER BY e.id\", User.class);\n+                \"SELECT e FROM  \" + anyUtils().anyClass().getSimpleName() + \" e ORDER BY e.id\", User.class);\n         query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n         query.setMaxResults(itemsPerPage);\n "},{"sha":"4cc3058c4bb9a2ae34a3fe45059bd7b24e37047b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -141,16 +141,16 @@ public <T extends Any<?>> Class<T> anyClass() {\n \n         switch (anyTypeKind) {\n             case GROUP:\n-                result = entityFactory.newEntity(Group.class).getClass();\n+                result = entityFactory.groupClass();\n                 break;\n \n             case ANY_OBJECT:\n-                result = entityFactory.newEntity(AnyObject.class).getClass();\n+                result = entityFactory.anyObjectClass();\n                 break;\n \n             case USER:\n             default:\n-                result = entityFactory.newEntity(User.class).getClass();\n+                result = entityFactory.userClass();\n         }\n \n         return result;"},{"sha":"7e5d282447f09dffdb323da9faf630093565c375","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtilsFactory.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtilsFactory.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -67,5 +67,4 @@ public AnyUtils getInstance(final Any<?> any) {\n \n         return getInstance(type);\n     }\n-\n }"},{"sha":"81be309f1334fff90266b898c1bcc6faf4ebaf75","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":27,"deletions":2,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPASecurityQuestion;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n@@ -122,7 +123,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n-import org.springframework.stereotype.Component;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.persistence.api.entity.task.AnyTemplatePullTask;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n@@ -141,10 +141,10 @@\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAOrgUnitItem;\n import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAAnySearchDAO;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushCorrelationRuleEntity;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n \n-@Component\n public class JPAEntityFactory implements EntityFactory {\n \n     @SuppressWarnings(\"unchecked\")\n@@ -315,4 +315,29 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n     public ConnPoolConf newConnPoolConf() {\n         return new JPAConnPoolConf();\n     }\n+\n+    @Override\n+    public Class<? extends User> userClass() {\n+        return JPAUser.class;\n+    }\n+\n+    @Override\n+    public Class<? extends Group> groupClass() {\n+        return JPAGroup.class;\n+    }\n+\n+    @Override\n+    public Class<? extends AnyObject> anyObjectClass() {\n+        return JPAAnyObject.class;\n+    }\n+\n+    @Override\n+    public Class<? extends Conf> confClass() {\n+        return JPAConf.class;\n+    }\n+\n+    @Override\n+    public Class<? extends AnySearchDAO> anySearchDAOClass() {\n+        return JPAAnySearchDAO.class;\n+    }\n }"},{"sha":"0a04e01a713a1d944a80ae113815a80727cd6073","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -174,6 +174,12 @@ public boolean add(final AMembership membership) {\n         return this.memberships.add((JPAAMembership) membership);\n     }\n \n+    @Override\n+    public boolean remove(final AMembership membership) {\n+        checkType(membership, JPAAMembership.class);\n+        return this.memberships.remove((JPAAMembership) membership);\n+    }\n+\n     @Override\n     public List<? extends AMembership> getMemberships() {\n         return memberships;"},{"sha":"3911d28f466e39698e09064e977d7431b357d9fa","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPAConf.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -59,12 +59,12 @@ public boolean add(final CPlainAttr attr) {\n     @Override\n     public boolean remove(final CPlainAttr attr) {\n         checkType(attr, JPACPlainAttr.class);\n-        return plainAttrs.remove((JPACPlainAttr) attr);\n+        return getPlainAttrs().remove((JPACPlainAttr) attr);\n     }\n \n     @Override\n     public Optional<? extends CPlainAttr> getPlainAttr(final String plainSchema) {\n-        return plainAttrs.stream().filter(plainAttr\n+        return getPlainAttrs().stream().filter(plainAttr\n                 -> plainAttr != null && plainAttr.getSchema() != null\n                 && plainSchema.equals(plainAttr.getSchema().getKey())).findFirst();\n     }"},{"sha":"d10cb9a5b5f23fe7f186336927f794ef5ca2fc4a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -164,7 +164,7 @@ public boolean add(final GPlainAttr attr) {\n     @Override\n     public boolean remove(final GPlainAttr attr) {\n         checkType(attr, JPAGPlainAttr.class);\n-        return plainAttrs.remove((JPAGPlainAttr) attr);\n+        return getPlainAttrs().remove((JPAGPlainAttr) attr);\n     }\n \n     @Override\n@@ -236,5 +236,4 @@ public Optional<? extends TypeExtension> getTypeExtension(final AnyType anyType)\n     public List<? extends TypeExtension> getTypeExtensions() {\n         return typeExtensions;\n     }\n-\n }"},{"sha":"ce9dae3dff76e9455953ace7e4de19dd389c7451","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/AbstractAnyTemplate.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FAbstractAnyTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FAbstractAnyTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FAbstractAnyTemplate.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -25,9 +25,10 @@\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n \n @MappedSuperclass\n public abstract class AbstractAnyTemplate extends AbstractGeneratedKeyEntity implements AnyTemplate {\n@@ -56,7 +57,8 @@ public AnyTO get() {\n         return template == null\n                 ? anyType == null\n                         ? null\n-                        : new JPAAnyUtilsFactory().getInstance(anyType.getKind()).newAnyTO()\n+                        : ApplicationContextProvider.getApplicationContext().getBean(AnyUtilsFactory.class).\n+                                getInstance(anyType.getKind()).newAnyTO()\n                 : anyType == null\n                         ? null\n                         : POJOHelper.deserialize(template, anyType.getKind().getTOClass());\n@@ -70,5 +72,4 @@ public void set(final AnyTO template) {\n             this.template = POJOHelper.serialize(template);\n         }\n     }\n-\n }"},{"sha":"4d91360401b02ec5807f6a327dc9d237cbdb9433","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -453,6 +453,12 @@ public boolean add(final UMembership membership) {\n         return this.memberships.add((JPAUMembership) membership);\n     }\n \n+    @Override\n+    public boolean remove(final UMembership membership) {\n+        checkType(membership, JPAUMembership.class);\n+        return this.memberships.remove((JPAUMembership) membership);\n+    }\n+\n     @Override\n     public List<? extends UMembership> getMemberships() {\n         return memberships;"},{"sha":"fefb1e7fe254dc0c73b6eaf92e2eb66dd6a7e599","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyValidator.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyValidator.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -22,13 +22,14 @@\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.dao.AllowedSchemas;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.GroupableRelatable;\n import org.apache.syncope.core.persistence.api.entity.Membership;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n \n @SuppressWarnings(\"rawtypes\")\n public class AnyValidator extends AbstractValidator<AnyCheck, Any> {\n@@ -57,8 +58,9 @@ public boolean isValid(final Any any, final ConstraintValidatorContext context)\n         context.disableDefaultConstraintViolation();\n \n         if (!(any instanceof Conf)) {\n-            AllowedSchemas<PlainSchema> allowedPlainSchemas = new JPAAnyUtilsFactory().\n-                    getInstance(any.getType().getKind()).dao().findAllowedSchemas(any, PlainSchema.class);\n+            AllowedSchemas<PlainSchema> allowedPlainSchemas =\n+                    ApplicationContextProvider.getApplicationContext().getBean(AnyUtilsFactory.class).\n+                            getInstance(any.getType().getKind()).dao().findAllowedSchemas(any, PlainSchema.class);\n \n             for (PlainAttr<?> attr : ((Any<?>) any).getPlainAttrs()) {\n                 if (attr != null && !allowedPlainSchemas.forSelfContains(attr.getSchema().getKey())) {"},{"sha":"89ee1f8bda9a76009ce76c3a3056e458671ab6b6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PlainAttrValidator.java","status":"modified","additions":13,"deletions":14,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValidator.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -25,32 +25,31 @@\n public class PlainAttrValidator extends AbstractValidator<PlainAttrCheck, PlainAttr<?>> {\n \n     @Override\n-    public boolean isValid(final PlainAttr<?> object, final ConstraintValidatorContext context) {\n-        boolean isValid;\n+    public boolean isValid(final PlainAttr<?> attr, final ConstraintValidatorContext context) {\n+        context.disableDefaultConstraintViolation();\n \n-        if (object == null) {\n+        boolean isValid;\n+        if (attr == null) {\n             isValid = true;\n         } else {\n-            if (object.getSchema().isUniqueConstraint()) {\n-                isValid = object.getValues().isEmpty() && object.getUniqueValue() != null;\n+            if (attr.getSchema().isUniqueConstraint()) {\n+                isValid = attr.getValues().isEmpty() && attr.getUniqueValue() != null;\n             } else {\n-                isValid = !object.getValues().isEmpty() && object.getUniqueValue() == null;\n+                isValid = !attr.getValues().isEmpty() && attr.getUniqueValue() == null;\n \n-                if (!object.getSchema().isMultivalue()) {\n-                    isValid &= object.getValues().size() == 1;\n+                if (!attr.getSchema().isMultivalue()) {\n+                    isValid &= attr.getValues().size() == 1;\n                 }\n             }\n \n             if (!isValid) {\n-                LOG.error(\"Invalid values for attribute \" + object + \": \" + \"schema=\" + object.getSchema().getKey()\n-                        + \", values={}\", object.getValuesAsStrings());\n-\n-                context.disableDefaultConstraintViolation();\n+                LOG.error(\"Invalid values for attribute \" + attr + \": \"\n+                        + \"schema=\" + attr.getSchema().getKey() + \", values={}\", attr.getValuesAsStrings());\n \n                 context.buildConstraintViolationWithTemplate(\n                         getTemplate(EntityViolationType.InvalidValueList,\n-                                \"Invalid values \" + object.getValuesAsStrings())).\n-                        addPropertyNode(object.getSchema().getKey()).addConstraintViolation();\n+                                \"Invalid values \" + attr.getValuesAsStrings())).\n+                        addPropertyNode(attr.getSchema().getKey()).addConstraintViolation();\n             }\n         }\n "},{"sha":"fcb008dd2675301b14e40cf2e2ec0819acf8fe67","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PlainAttrValueValidator.java","status":"modified","additions":18,"deletions":19,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValueValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValueValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValueValidator.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -27,56 +27,55 @@\n public class PlainAttrValueValidator extends AbstractValidator<PlainAttrValueCheck, PlainAttrValue> {\n \n     @Override\n-    public boolean isValid(final PlainAttrValue object, final ConstraintValidatorContext context) {\n-        boolean isValid;\n+    public boolean isValid(final PlainAttrValue value, final ConstraintValidatorContext context) {\n+        context.disableDefaultConstraintViolation();\n \n-        if (object == null) {\n+        boolean isValid;\n+        if (value == null) {\n             isValid = true;\n         } else {\n             int nonNullVales = 0;\n-            if (object.getBooleanValue() != null) {\n+            if (value.getBooleanValue() != null) {\n                 nonNullVales++;\n             }\n-            if (object.getDateValue() != null) {\n+            if (value.getDateValue() != null) {\n                 nonNullVales++;\n             }\n-            if (object.getDoubleValue() != null) {\n+            if (value.getDoubleValue() != null) {\n                 nonNullVales++;\n             }\n-            if (object.getLongValue() != null) {\n+            if (value.getLongValue() != null) {\n                 nonNullVales++;\n             }\n-            if (object.getBinaryValue() != null) {\n+            if (value.getBinaryValue() != null) {\n                 nonNullVales++;\n             }\n-            if (object.getStringValue() != null) {\n+            if (value.getStringValue() != null) {\n                 nonNullVales++;\n             }\n             isValid = nonNullVales == 1;\n \n             if (!isValid) {\n-                LOG.error(\"More than one non-null value for \" + object);\n+                LOG.error(\"More than one non-null value for \" + value);\n \n-                context.disableDefaultConstraintViolation();\n                 context.buildConstraintViolationWithTemplate(\n                         getTemplate(EntityViolationType.MoreThanOneNonNull, \"More than one non-null value found\")).\n-                        addPropertyNode(object.getClass().getSimpleName().replaceAll(\"\\\\n\", \" \")).\n+                        addPropertyNode(value.getClass().getSimpleName().replaceAll(\"\\\\n\", \" \")).\n                         addConstraintViolation();\n \n-            } else if (object instanceof PlainAttrUniqueValue) {\n-                PlainSchema uniqueValueSchema = ((PlainAttrUniqueValue) object).getSchema();\n-                PlainSchema attrSchema = object.getAttr().getSchema();\n+            } else if (value instanceof PlainAttrUniqueValue) {\n+                PlainSchema uniqueValueSchema = ((PlainAttrUniqueValue) value).getSchema();\n+                PlainSchema attrSchema = value.getAttr().getSchema();\n \n                 isValid = uniqueValueSchema.equals(attrSchema);\n \n                 if (!isValid) {\n-                    LOG.error(\"Unique value schema for \" + object.getClass().getSimpleName() + \"[\" + object.getKey()\n-                            + \"]\" + \" is \" + uniqueValueSchema + \", while owning attribute schema is \" + attrSchema);\n+                    LOG.error(\"Unique value schema for \" + value + \" is \" + uniqueValueSchema\n+                            + \", while owning attribute's schema is \" + attrSchema);\n \n-                    context.disableDefaultConstraintViolation();\n                     context.buildConstraintViolationWithTemplate(getTemplate(EntityViolationType.InvalidPlainAttr,\n                             \"Unique value schema is \" + uniqueValueSchema\n-                            + \", while owning attribute schema is \" + attrSchema)).addPropertyNode(\"schema\").\n+                            + \", while owning attribute's schema is \" + attrSchema)).addPropertyNode(\"schema\").\n                             addConstraintViolation();\n                 }\n             }"},{"sha":"0841aa0de0864d9acf3a768a6c85a4920a4b8303","filename":"core/persistence-jpa/src/main/resources/persistence.properties","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -15,5 +15,12 @@\n # specific language governing permissions and limitations\n # under the License.\n content.directory=${conf.directory}\n+entity.factory=org.apache.syncope.core.persistence.jpa.entity.JPAEntityFactory\n+plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainSchemaDAO\n+plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrDAO\n+plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrValueDAO\n any.search.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnySearchDAO\n+user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n+group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n+anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"c7c54c2336b077617c4b67c579dc417aa408ea61","filename":"core/persistence-jpa/src/main/resources/persistenceContext.xml","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -30,7 +30,14 @@ under the License.\n   <context:annotation-config/>\n   \n   <context:component-scan base-package=\"org.apache.syncope.core.persistence.jpa\"/>\n+  <bean class=\"${entity.factory}\"/>\n+  <bean class=\"${plainSchema.dao}\"/>\n+  <bean class=\"${plainAttr.dao}\"/>\n+  <bean class=\"${plainAttrValue.dao}\"/>\n   <bean class=\"${any.search.dao}\"/>\n+  <bean class=\"${user.dao}\"/>\n+  <bean class=\"${group.dao}\"/>\n+  <bean class=\"${anyObject.dao}\"/>\n \n   <bean class=\"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean\"/>\n "},{"sha":"a957b275affca41505ac1f02de0d5d4fe70c4ca9","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/AbstractTest.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FAbstractTest.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -23,6 +23,10 @@\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrValueDAO;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.orm.jpa.EntityManagerFactoryUtils;\n import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n@@ -46,4 +50,12 @@ protected EntityManager entityManager() {\n \n         return entityManager;\n     }\n+\n+    protected <T extends PlainAttr<?>> T findPlainAttr(final String key, final Class<T> reference) {\n+        return reference.cast(entityManager().find(JPAPlainAttrDAO.getEntityReference(reference), key));\n+    }\n+\n+    protected <T extends PlainAttrValue> T findPlainAttrValue(final String key, final Class<T> reference) {\n+        return reference.cast(entityManager().find(JPAPlainAttrValueDAO.getEntityReference(reference), key));\n+    }\n }"},{"sha":"55f0b6b51128b0c707868754aeaf14b6c835b26a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ConfTest.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConfTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConfTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConfTest.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -30,10 +30,12 @@\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttrValue;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -62,12 +64,12 @@ public void read() {\n     }\n \n     private void add(final CPlainAttr newAttr, final String value) {\n-        JPACPlainAttrValue attrValue;\n+        PlainAttrValue attrValue;\n         if (newAttr.getSchema().isUniqueConstraint()) {\n-            attrValue = new JPACPlainAttrValue();\n+            attrValue = entityFactory.newEntity(CPlainAttrUniqueValue.class);\n             ((PlainAttrUniqueValue) attrValue).setSchema(newAttr.getSchema());\n         } else {\n-            attrValue = new JPACPlainAttrValue();\n+            attrValue = entityFactory.newEntity(CPlainAttrValue.class);\n         }\n         newAttr.add(value, attrValue);\n     }\n@@ -101,6 +103,7 @@ public void setAndDelete() {\n \n         // 4. delete conf\n         confDAO.delete(\"useless\");\n+        plainSchemaDAO.delete(\"useless\");\n         assertFalse(confDAO.find(\"useless\").isPresent());\n     }\n "},{"sha":"8af724085a3e7052e8d7c6b62725380d8d929731","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/MultitenancyTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -37,6 +37,7 @@\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.jupiter.api.AfterAll;\n import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n@@ -45,6 +46,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional(\"Two\")\n+@Tag(\"multitenancy\")\n public class MultitenancyTest extends AbstractTest {\n \n     @Autowired"},{"sha":"856e5706d0109030aa9aba64ac3207405a5292ba","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainAttrTest.java","status":"modified","additions":41,"deletions":9,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -41,6 +41,7 @@\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -57,17 +58,19 @@ public class PlainAttrTest extends AbstractTest {\n     @Autowired\n     private PlainSchemaDAO plainSchemaDAO;\n \n+    @Tag(\"plainAttrTable\")\n     @Test\n     public void findByKey() {\n-        UPlainAttr attribute = plainAttrDAO.find(\"01f22fbd-b672-40af-b528-686d9b27ebc4\", UPlainAttr.class);\n+        UPlainAttr attribute = findPlainAttr(\"01f22fbd-b672-40af-b528-686d9b27ebc4\", UPlainAttr.class);\n         assertNotNull(attribute);\n-        attribute = plainAttrDAO.find(\"9d0d9e40-1b18-488e-9482-37dab82163c9\", UPlainAttr.class);\n+        attribute = findPlainAttr(\"9d0d9e40-1b18-488e-9482-37dab82163c9\", UPlainAttr.class);\n         assertNotNull(attribute);\n     }\n \n+    @Tag(\"plainAttrTable\")\n     @Test\n     public void read() {\n-        UPlainAttr attribute = plainAttrDAO.find(\"01f22fbd-b672-40af-b528-686d9b27ebc4\", UPlainAttr.class);\n+        UPlainAttr attribute = findPlainAttr(\"01f22fbd-b672-40af-b528-686d9b27ebc4\", UPlainAttr.class);\n         assertNotNull(attribute);\n         assertTrue(attribute.getValues().isEmpty());\n         assertNotNull(attribute.getUniqueValue());\n@@ -136,7 +139,36 @@ public void saveWithEnum() throws ClassNotFoundException {\n     }\n \n     @Test\n-    public void validateAndSave() {\n+    public void invalidValueList() {\n+        User user = userDAO.find(\"1417acbe-cbf6-4277-9372-e75e04f97000\");\n+\n+        PlainSchema emailSchema = plainSchemaDAO.find(\"email\");\n+        assertNotNull(emailSchema);\n+\n+        PlainSchema fullnameSchema = plainSchemaDAO.find(\"fullname\");\n+        assertNotNull(fullnameSchema);\n+\n+        UPlainAttr attr = entityFactory.newEntity(UPlainAttr.class);\n+        attr.setOwner(user);\n+        attr.setSchema(emailSchema);\n+\n+        user.add(attr);\n+\n+        InvalidEntityException iee = null;\n+        try {\n+            userDAO.save(user);\n+            fail(\"This should not happen\");\n+        } catch (InvalidEntityException e) {\n+            iee = e;\n+        }\n+        assertNotNull(iee);\n+        // for attr because no values are set\n+        assertTrue(iee.hasViolation(EntityViolationType.InvalidValueList));\n+    }\n+\n+    @Tag(\"plainAttrTable\")\n+    @Test\n+    public void invalidPlainAttr() {\n         User user = userDAO.find(\"1417acbe-cbf6-4277-9372-e75e04f97000\");\n \n         PlainSchema emailSchema = plainSchemaDAO.find(\"email\");\n@@ -166,9 +198,9 @@ public void validateAndSave() {\n             iee = e;\n         }\n         assertNotNull(iee);\n-        // for attribute\n+        // for attr because no values are set\n         assertTrue(iee.hasViolation(EntityViolationType.InvalidValueList));\n-        // for uauv\n+        // for uauv because uauv.schema and uauv.attr.schema are different\n         assertTrue(iee.hasViolation(EntityViolationType.InvalidPlainAttr));\n     }\n \n@@ -222,13 +254,13 @@ public void saveWithBinary() throws UnsupportedEncodingException {\n         assertTrue(Arrays.equals(bytes, photo.getValues().get(0).getBinaryValue()));\n     }\n \n+    @Tag(\"plainAttrTable\")\n     @Test\n     public void delete() {\n-        UPlainAttr attribute = plainAttrDAO.find(\n-                \"9d0d9e40-1b18-488e-9482-37dab82163c9\", UPlainAttr.class);\n+        UPlainAttr attribute = findPlainAttr(\"9d0d9e40-1b18-488e-9482-37dab82163c9\", UPlainAttr.class);\n         String attrSchemaName = attribute.getSchema().getKey();\n \n-        plainAttrDAO.delete(attribute.getKey(), UPlainAttr.class);\n+        plainAttrDAO.delete(attribute);\n \n         PlainSchema schema = plainSchemaDAO.find(attrSchemaName);\n         assertNotNull(schema);"},{"sha":"d4996526143be6fee5fc8c2f04b683cbdee717cd","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainSchemaTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -37,6 +37,7 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -73,6 +74,7 @@ public void findByName() {\n         assertFalse(schema.getLabel(Locale.KOREAN).isPresent());\n     }\n \n+    @Tag(\"plainAttrTable\")\n     @Test\n     public void findAttrs() {\n         PlainSchema schema = plainSchemaDAO.find(\"icon\");"},{"sha":"b35d83bbeed55e3690b3cfbe130a959ab7724041","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/UserTest.java","status":"modified","additions":29,"deletions":2,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.inner;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -36,6 +37,8 @@\n import org.apache.syncope.core.provisioning.api.utils.policy.InvalidPasswordRuleConf;\n import org.apache.syncope.core.spring.security.PasswordGenerator;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrUniqueValue;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -55,6 +58,23 @@ public class UserTest extends AbstractTest {\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n+    @Test\n+    public void find() {\n+        User user = userDAO.find(\"823074dc-d280-436d-a7dd-07399fae48ec\");\n+        assertNotNull(user);\n+        assertEquals(\"puccini\", user.getUsername());\n+        assertFalse(user.isSuspended());\n+        assertFalse(user.isMustChangePassword());\n+        assertEquals(\"active\", user.getStatus());\n+        assertEquals(CipherAlgorithm.SHA1, user.getCipherAlgorithm());\n+        assertEquals(\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\", user.getRealm().getKey());\n+        assertNull(user.getSecurityQuestion());\n+        assertNull(user.getSecurityAnswer());\n+        assertEquals(\"admin\", user.getCreator());\n+        assertEquals(\"Giacomo\", user.getPlainAttr(\"firstname\").get().getValuesAsStrings().get(0));\n+        assertEquals(\"Puccini\", user.getPlainAttr(\"surname\").get().getValuesAsStrings().get(0));\n+    }\n+\n     @Test\n     public void findAll() {\n         List<User> list = userDAO.findAll(1, 100);\n@@ -110,8 +130,8 @@ public void findByInvalidDerAttrExpression() {\n     }\n \n     @Test\n-    public void findByPlainAttrValue() {\n-        UPlainAttrValue fullnameValue = entityFactory.newEntity(UPlainAttrValue.class);\n+    public void findByPlainAttrUniqueValue() {\n+        UPlainAttrUniqueValue fullnameValue = entityFactory.newEntity(UPlainAttrUniqueValue.class);\n         fullnameValue.setStringValue(\"Gioacchino Rossini\");\n \n         List<User> list = userDAO.findByPlainAttrValue(\"fullname\", fullnameValue, false);\n@@ -151,6 +171,13 @@ public void findByUsername() {\n         assertNull(user);\n     }\n \n+    @Test\n+    public void findMembership() {\n+        UMembership memb = userDAO.findMembership(\"3d5e91f6-305e-45f9-ad30-4897d3d43bd9\");\n+        assertNotNull(memb);\n+        assertEquals(\"1417acbe-cbf6-4277-9372-e75e04f97000\", memb.getLeftEnd().getKey());\n+    }\n+\n     @Test\n     public void saveInvalidPassword() {\n         User user = entityFactory.newEntity(User.class);"},{"sha":"17e35bb71501638062962fff7619ad005cc1c8b0","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ConfTest.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConfTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConfTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConfTest.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -24,9 +24,11 @@\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttrValue;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -41,12 +43,12 @@ public class ConfTest extends AbstractTest {\n     private PlainSchemaDAO plainSchemaDAO;\n \n     private void add(final CPlainAttr newAttr, final String value) {\n-        JPACPlainAttrValue attrValue;\n+        PlainAttrValue attrValue;\n         if (newAttr.getSchema().isUniqueConstraint()) {\n-            attrValue = new JPACPlainAttrValue();\n+            attrValue = entityFactory.newEntity(CPlainAttrUniqueValue.class);\n             ((PlainAttrUniqueValue) attrValue).setSchema(newAttr.getSchema());\n         } else {\n-            attrValue = new JPACPlainAttrValue();\n+            attrValue = entityFactory.newEntity(CPlainAttrValue.class);\n         }\n         newAttr.add(value, attrValue);\n     }\n@@ -68,5 +70,4 @@ public void update() {\n         CPlainAttr actual = confDAO.find(\"token.expireTime\").get();\n         assertEquals(expireTime, actual);\n     }\n-\n }"},{"sha":"e596e2d7146a43a6ef120bd8d700d77b2b0e37ab","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/GroupTest.java","status":"modified","additions":2,"deletions":12,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -38,8 +38,6 @@\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n@@ -83,12 +81,6 @@ public class GroupTest extends AbstractTest {\n     @Autowired\n     private PlainSchemaDAO plainSchemaDAO;\n \n-    @Autowired\n-    private PlainAttrDAO plainAttrDAO;\n-\n-    @Autowired\n-    private PlainAttrValueDAO plainAttrValueDAO;\n-\n     @Autowired\n     private AnyTypeClassDAO anyTypeClassDAO;\n \n@@ -169,10 +161,8 @@ public void delete() {\n \n         assertNull(groupDAO.find(\"b1f7c12d-ec83-441f-a50e-1691daaedf3b\"));\n         assertEquals(userDAO.findAllGroups(userDAO.findByUsername(\"verdi\")).size(), 2);\n-        assertNull(plainAttrDAO.find(\n-                \"f82fc61f-8e74-4a4b-9f9e-b8a41f38aad9\", GPlainAttr.class));\n-        assertNull(plainAttrValueDAO.find(\n-                \"49f35879-2510-4f11-a901-24152f753538\", GPlainAttrValue.class));\n+        assertNull(findPlainAttr(\"f82fc61f-8e74-4a4b-9f9e-b8a41f38aad9\", GPlainAttr.class));\n+        assertNull(findPlainAttrValue(\"49f35879-2510-4f11-a901-24152f753538\", GPlainAttrValue.class));\n         assertNotNull(plainSchemaDAO.find(\"icon\"));\n     }\n "},{"sha":"58771ca88c2d500502b03c4ffddeb634276e91fa","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PlainAttrTest.java","status":"modified","additions":23,"deletions":17,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainAttrTest.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -18,18 +18,23 @@\n  */\n package org.apache.syncope.core.persistence.jpa.outer;\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n+@Tag(\"plainAttrTable\")\n @Transactional(\"Master\")\n public class PlainAttrTest extends AbstractTest {\n \n@@ -40,30 +45,31 @@ public class PlainAttrTest extends AbstractTest {\n     private PlainAttrValueDAO plainAttrValueDAO;\n \n     @Test\n-    public void deleteAttribute() {\n-        plainAttrDAO.delete(\"35f407a2-d254-4890-9e45-5a7dd8c8df7d\", UPlainAttr.class);\n+    public void deleteAttr() {\n+        plainAttrDAO.delete(findPlainAttr(\"35f407a2-d254-4890-9e45-5a7dd8c8df7d\", UPlainAttr.class));\n \n         plainAttrDAO.flush();\n \n-        assertNull(plainAttrDAO.find(\"35f407a2-d254-4890-9e45-5a7dd8c8df7d\", UPlainAttr.class));\n-        assertNull(\n-                plainAttrValueDAO.find(\"0c67225a-030a-4c56-b337-17cf7a311f0f\", UPlainAttrValue.class));\n+        assertNull(findPlainAttr(\"35f407a2-d254-4890-9e45-5a7dd8c8df7d\", UPlainAttr.class));\n+        assertNull(findPlainAttrValue(\"0c67225a-030a-4c56-b337-17cf7a311f0f\", UPlainAttrValue.class));\n     }\n \n     @Test\n-    public void deleteAttributeValue() {\n-        UPlainAttrValue value = plainAttrValueDAO.find(\n-                \"7034de3b-3687-4db5-8454-363468f1a9de\", UPlainAttrValue.class);\n-        int attributeValueNumber = value.getAttr().getValues().size();\n+    public void deleteAllAttValues() {\n+        UPlainAttrValue value = findPlainAttrValue(\"7034de3b-3687-4db5-8454-363468f1a9de\", UPlainAttrValue.class);\n+        assertNotNull(value);\n \n-        plainAttrValueDAO.delete(value.getKey(), UPlainAttrValue.class);\n+        plainAttrValueDAO.deleteAll(value.getAttr(), anyUtilsFactory.getInstance(AnyTypeKind.USER));\n \n-        plainAttrValueDAO.flush();\n+        value = findPlainAttrValue(\"7034de3b-3687-4db5-8454-363468f1a9de\", UPlainAttrValue.class);\n+        assertNull(value);\n \n-        assertNull(plainAttrValueDAO.find(value.getKey(), UPlainAttrValue.class));\n-\n-        UPlainAttr attribute = plainAttrDAO.find(\n-                \"9d0d9e40-1b18-488e-9482-37dab82163c9\", UPlainAttr.class);\n-        assertEquals(attribute.getValues().size(), attributeValueNumber - 1);\n+        // by removing all values, the related attribute is not valid any more\n+        try {\n+            plainAttrValueDAO.flush();\n+            fail();\n+        } catch (InvalidEntityException e) {\n+            assertNotNull(e);\n+        }\n     }\n }"},{"sha":"39aa303f5b7f92337901dadc1521821a9562dfcc","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PlainSchemaTest.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -37,7 +37,6 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n@@ -73,9 +72,6 @@ public class PlainSchemaTest extends AbstractTest {\n     @Autowired\n     private DerSchemaDAO derSchemaDAO;\n \n-    @Autowired\n-    private PlainAttrDAO plainAttrDAO;\n-\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n@@ -110,7 +106,7 @@ public void checkIdUniqueness() {\n             plainSchemaDAO.flush();\n             fail(\"This should not happen\");\n         } catch (Exception e) {\n-            assertTrue(e instanceof EntityExistsException);\n+            assertTrue(e instanceof EntityExistsException || e.getCause() instanceof EntityExistsException);\n         }\n     }\n \n@@ -173,8 +169,8 @@ public void deleteFullname() {\n         }\n         assertTrue(mapItems.isEmpty());\n \n-        assertNull(plainAttrDAO.find(\"01f22fbd-b672-40af-b528-686d9b27ebc4\", UPlainAttr.class));\n-        assertNull(plainAttrDAO.find(UUID.randomUUID().toString(), UPlainAttr.class));\n+        assertNull(findPlainAttr(\"01f22fbd-b672-40af-b528-686d9b27ebc4\", UPlainAttr.class));\n+        assertNull(findPlainAttr(UUID.randomUUID().toString(), UPlainAttr.class));\n         assertFalse(userDAO.findByUsername(\"rossini\").getPlainAttr(\"fullname\").isPresent());\n         assertFalse(userDAO.findByUsername(\"vivaldi\").getPlainAttr(\"fullname\").isPresent());\n     }"},{"sha":"e6281b9c7937f6543ae4a561f00e6b6727ebf0f1","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/UserTest.java","status":"modified","additions":4,"deletions":12,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -32,8 +32,6 @@\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RelationshipTypeDAO;\n@@ -67,12 +65,6 @@ public class UserTest extends AbstractTest {\n     @Autowired\n     private PlainSchemaDAO plainSchemaDAO;\n \n-    @Autowired\n-    private PlainAttrDAO plainAttrDAO;\n-\n-    @Autowired\n-    private PlainAttrValueDAO plainAttrValueDAO;\n-\n     @Autowired\n     private DerSchemaDAO derSchemaDAO;\n \n@@ -86,8 +78,8 @@ public void delete() {\n         userDAO.flush();\n \n         assertNull(userDAO.findByUsername(\"bellini\"));\n-        assertNull(plainAttrDAO.find(UUID.randomUUID().toString(), UPlainAttr.class));\n-        assertNull(plainAttrValueDAO.find(UUID.randomUUID().toString(), UPlainAttrValue.class));\n+        assertNull(findPlainAttr(UUID.randomUUID().toString(), UPlainAttr.class));\n+        assertNull(findPlainAttrValue(UUID.randomUUID().toString(), UPlainAttrValue.class));\n         assertNotNull(plainSchemaDAO.find(\"loginDate\"));\n \n         memberships = groupDAO.findUMemberships(groupDAO.findByName(\"managingDirector\"));\n@@ -103,7 +95,7 @@ public void ships() {\n                 \"bf825fe1-7320-4a54-bd64-143b5c18ab97\",\n                 user.getMemberships().get(0).getRightEnd().getKey());\n \n-        user.getMemberships().remove(0);\n+        user.remove(user.getMemberships().get(0));\n \n         UMembership newM = entityFactory.newEntity(UMembership.class);\n         newM.setLeftEnd(user);\n@@ -202,7 +194,7 @@ public void membershipWithAttrs() {\n         user = userDAO.findByUsername(\"vivaldi\");\n         assertEquals(1, user.getMemberships().size());\n \n-        final UMembership newM = user.getMembership(groupDAO.findByName(\"additional\").getKey()).get();\n+        UMembership newM = user.getMembership(groupDAO.findByName(\"additional\").getKey()).get();\n         assertEquals(1, user.getPlainAttrs(newM).size());\n \n         assertNull(user.getPlainAttr(\"obscure\").get().getMembership());"},{"sha":"4dfc3225bdbfe6c4fb16a131fafef3e38bbd60ea","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/XMLContentExporterTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FXMLContentExporterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FXMLContentExporterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FXMLContentExporterTest.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -55,11 +55,11 @@ public void issueSYNCOPE1128() throws Exception {\n \n         List<String> realms = IOUtils.readLines(\n                 IOUtils.toInputStream(exported, Charset.defaultCharset()), Charset.defaultCharset()).stream().\n-                filter(row -> row.trim().startsWith(\"<REALM\")).collect(Collectors.toList());\n+                filter(row -> StringUtils.startsWithIgnoreCase(row.trim(), \"<REALM\")).collect(Collectors.toList());\n         assertEquals(4, realms.size());\n-        assertTrue(realms.get(0).contains(\"NAME=\\\"/\\\"\"));\n-        assertTrue(realms.get(1).contains(\"NAME=\\\"odd\\\"\"));\n-        assertTrue(realms.get(2).contains(\"NAME=\\\"even\\\"\"));\n-        assertTrue(realms.get(3).contains(\"NAME=\\\"two\\\"\"));\n+        assertTrue(StringUtils.containsIgnoreCase(realms.get(0), \"NAME=\\\"/\\\"\"));\n+        assertTrue(StringUtils.containsIgnoreCase(realms.get(1), \"NAME=\\\"odd\\\"\"));\n+        assertTrue(StringUtils.containsIgnoreCase(realms.get(2), \"NAME=\\\"even\\\"\"));\n+        assertTrue(StringUtils.containsIgnoreCase(realms.get(3), \"NAME=\\\"two\\\"\"));\n     }\n }"},{"sha":"528b88c9ab8026428c1b2878b980a02f0730ecd3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -296,14 +296,10 @@ protected void processAttrPatch(\n                             && !patch.getAttrTO().getValues().isEmpty()\n                             && !patch.getAttrTO().getValues().get(0).equals(attr.getUniqueValue().getValueAsString())) {\n \n-                        plainAttrValueDAO.delete(attr.getUniqueValue().getKey(), anyUtils.plainAttrUniqueValueClass());\n+                        plainAttrValueDAO.deleteAll(attr, anyUtils);\n                     }\n                 } else {\n-                    Collection<String> valuesToBeRemoved = attr.getValues().stream().\n-                            map(value -> value.getKey()).collect(Collectors.toSet());\n-                    valuesToBeRemoved.forEach(attrValueKey -> {\n-                        plainAttrValueDAO.delete(attrValueKey, anyUtils.plainAttrValueClass());\n-                    });\n+                    plainAttrValueDAO.deleteAll(attr, anyUtils);\n                 }\n \n                 // 1.2 add values\n@@ -324,7 +320,7 @@ protected void processAttrPatch(\n             case DELETE:\n             default:\n                 any.remove(attr);\n-                plainAttrDAO.delete(attr.getKey(), anyUtils.plainAttrClass());\n+                plainAttrDAO.delete(attr);\n         }\n \n         resources.stream()."},{"sha":"f772503e29e3da811ed904e08023be9ce8e67499","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -339,7 +339,7 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n         anyObjectPatch.getMemberships().stream().\n                 filter((membPatch) -> (membPatch.getGroup() != null)).forEachOrdered(membPatch -> {\n             anyObject.getMembership(membPatch.getGroup()).ifPresent(membership -> {\n-                anyObject.getMemberships().remove(membership);\n+                anyObject.remove(membership);\n                 membership.setLeftEnd(null);\n                 anyObject.getPlainAttrs(membership).forEach(attr -> {\n                     anyObject.remove(attr);"},{"sha":"055f7aa7c3981f3a7c519438ad7895f019732258","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -412,7 +412,7 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n         userPatch.getMemberships().stream().\n                 filter(membPatch -> membPatch.getGroup() != null).forEachOrdered((membPatch) -> {\n             user.getMembership(membPatch.getGroup()).ifPresent(membership -> {\n-                user.getMemberships().remove(membership);\n+                user.remove(membership);\n                 membership.setLeftEnd(null);\n                 user.getPlainAttrs(membership).forEach(attr -> {\n                     user.remove(attr);"},{"sha":"b656eb28f0ec1a73732799341b77321ece7f81b2","filename":"docker/core/src/main/resources/persistence.properties","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -15,5 +15,12 @@\n # specific language governing permissions and limitations\n # under the License.\n content.directory=/etc/apache-syncope\n+entity.factory=org.apache.syncope.core.persistence.jpa.entity.JPAEntityFactory\n+plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainSchemaDAO\n+plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrDAO\n+plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrValueDAO\n any.search.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnySearchDAO\n+user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n+group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n+anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO\n openjpa.RemoteCommitProvider=${OPENJPA_REMOTE_COMMIT}"},{"sha":"194c7584262b6d93db5ae428e6e55eca313e98b9","filename":"ext/elasticsearch/persistence-jpa/src/main/resources/persistence.properties","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -15,5 +15,12 @@\n # specific language governing permissions and limitations\n # under the License.\n content.directory=${conf.directory}\n+entity.factory=org.apache.syncope.core.persistence.jpa.entity.JPAEntityFactory\n+plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainSchemaDAO\n+plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrDAO\n+plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrValueDAO\n any.search.dao=org.apache.syncope.core.persistence.jpa.dao.ElasticsearchAnySearchDAO\n+user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n+group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n+anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"194c7584262b6d93db5ae428e6e55eca313e98b9","filename":"fit/core-reference/src/main/resources/elasticsearch/persistence.properties","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f54d793fdec207774a53f2c8372de470defdad7/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f54d793fdec207774a53f2c8372de470defdad7/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fpersistence.properties?ref=1f54d793fdec207774a53f2c8372de470defdad7","patch":"@@ -15,5 +15,12 @@\n # specific language governing permissions and limitations\n # under the License.\n content.directory=${conf.directory}\n+entity.factory=org.apache.syncope.core.persistence.jpa.entity.JPAEntityFactory\n+plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainSchemaDAO\n+plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrDAO\n+plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrValueDAO\n any.search.dao=org.apache.syncope.core.persistence.jpa.dao.ElasticsearchAnySearchDAO\n+user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n+group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n+anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO\n openjpa.RemoteCommitProvider=sjvm"}]}