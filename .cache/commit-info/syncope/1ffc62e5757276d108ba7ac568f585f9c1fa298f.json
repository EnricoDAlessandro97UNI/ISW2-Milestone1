{"sha":"1ffc62e5757276d108ba7ac568f585f9c1fa298f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjFmZmM2MmU1NzU3Mjc2ZDEwOGJhN2FjNTY4ZjU4NWY5YzFmYTI5OGY=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2015-11-18T18:07:52Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2015-11-18T18:07:52Z"},"message":"[SYNCOPE-156] providing aux classes selection","tree":{"sha":"5806bf6371e8a5f557a3840e5c02f261b16fbdca","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5806bf6371e8a5f557a3840e5c02f261b16fbdca"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1ffc62e5757276d108ba7ac568f585f9c1fa298f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1ffc62e5757276d108ba7ac568f585f9c1fa298f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1ffc62e5757276d108ba7ac568f585f9c1fa298f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1ffc62e5757276d108ba7ac568f585f9c1fa298f/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"bc1a1427526d2b2f3b452481d808da34bcebacfe","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bc1a1427526d2b2f3b452481d808da34bcebacfe","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bc1a1427526d2b2f3b452481d808da34bcebacfe"}],"stats":{"total":553,"additions":329,"deletions":224},"files":[{"sha":"441376326e101ddd3889414b115e66c7675462bc","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1ffc62e5757276d108ba7ac568f585f9c1fa298f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1ffc62e5757276d108ba7ac568f585f9c1fa298f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java?ref=1ffc62e5757276d108ba7ac568f585f9c1fa298f","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wizards.any;\n+\n+import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n+import org.apache.syncope.client.console.rest.SchemaRestClient;\n+import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.wicket.extensions.wizard.WizardStep;\n+\n+public abstract class AbstractAttrs extends WizardStep {\n+\n+    private static final long serialVersionUID = -5387344116983102292L;\n+\n+    protected final SchemaRestClient schemaRestClient = new SchemaRestClient();\n+\n+    protected final AnyTypeRestClient anyTypeRestClient = new AnyTypeRestClient();\n+\n+    protected final AnyTO entityTO;\n+\n+    public AbstractAttrs(final AnyTO entityTO) {\n+        this.entityTO = entityTO;\n+    }\n+}"},{"sha":"a7222233d93a854e304e32a7877d6727d1fb72d5","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyWizardBuilder.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1ffc62e5757276d108ba7ac568f585f9c1fa298f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1ffc62e5757276d108ba7ac568f585f9c1fa298f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java?ref=1ffc62e5757276d108ba7ac568f585f9c1fa298f","patch":"@@ -56,6 +56,7 @@ public AnyWizardBuilder(\n     @Override\n     protected WizardModel buildModelSteps(final T modelObject, final WizardModel wizardModel) {\n         addOptionalDetailsPanel(modelObject, wizardModel);\n+        wizardModel.add(new AuxClasses(modelObject, anyTypeClasses.toArray(new String[] {})));\n         wizardModel.add(new PlainAttrs(modelObject, null, Mode.ADMIN, anyTypeClasses.toArray(new String[] {})));\n         wizardModel.add(new DerAttrs(modelObject, anyTypeClasses.toArray(new String[] {})));\n         wizardModel.add(new VirAttrs(modelObject, anyTypeClasses.toArray(new String[] {})));"},{"sha":"a33df7cb4d92425d52f84bdbfc489e9b1dad3f4d","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AuxClasses.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1ffc62e5757276d108ba7ac568f585f9c1fa298f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAuxClasses.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1ffc62e5757276d108ba7ac568f585f9c1fa298f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAuxClasses.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAuxClasses.java?ref=1ffc62e5757276d108ba7ac568f585f9c1fa298f","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wizards.any;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n+import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n+import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n+import org.apache.wicket.extensions.wizard.WizardStep;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.util.ListModel;\n+\n+public class AuxClasses extends WizardStep {\n+\n+    private static final long serialVersionUID = 552437609667518888L;\n+\n+    private final AnyTO entityTO;\n+\n+    public <T extends AnyTO> AuxClasses(final T entityTO, final String... anyTypeClass) {\n+        this.setOutputMarkupId(true);\n+        this.entityTO = entityTO;\n+\n+        final AnyTypeClassService service = SyncopeConsoleSession.get().getService(AnyTypeClassService.class);\n+\n+        final List<String> current = Arrays.asList(anyTypeClass);\n+\n+        final List<String> choices = new ArrayList<String>();\n+        for (AnyTypeClassTO aux : service.list()) {\n+            if (!current.contains(aux.getKey())) {\n+                choices.add(aux.getKey());\n+            }\n+        }\n+\n+        add(new AjaxPalettePanel<>(\n+                \"auxClasses\",\n+                new PropertyModel<List<String>>(this.entityTO, \"auxClasses\"),\n+                new ListModel<>(choices),\n+                true).setOutputMarkupId(true));\n+    }\n+}"},{"sha":"1b087609f4b0f5369f13faf90879ec069619a95a","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/DerAttrs.java","status":"modified","additions":72,"deletions":72,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1ffc62e5757276d108ba7ac568f585f9c1fa298f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDerAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1ffc62e5757276d108ba7ac568f585f9c1fa298f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDerAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDerAttrs.java?ref=1ffc62e5757276d108ba7ac568f585f9c1fa298f","patch":"@@ -19,120 +19,120 @@\n package org.apache.syncope.client.console.wizards.any;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.console.rest.SchemaRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.wicket.extensions.wizard.WizardStep;\n+import org.apache.wicket.markup.ComponentTag;\n+import org.apache.wicket.markup.MarkupStream;\n+import org.apache.wicket.markup.head.IHeaderResponse;\n+import org.apache.wicket.markup.head.OnDomReadyHeaderItem;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n-import org.apache.wicket.markup.html.panel.Fragment;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.Model;\n-import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.ResourceModel;\n \n-public class DerAttrs extends WizardStep {\n+public class DerAttrs extends AbstractAttrs {\n \n     private static final long serialVersionUID = -5387344116983102292L;\n \n-    private final SchemaRestClient schemaRestClient = new SchemaRestClient();\n-\n     public <T extends AnyTO> DerAttrs(final T entityTO, final String... anyTypeClass) {\n-\n+        super(entityTO);\n         setOutputMarkupId(true);\n \n-        final IModel<List<String>> derSchemas = new LoadableDetachableModel<List<String>>() {\n+        final LoadableDetachableModel<List<AttrTO>> derAttrTOs = new LoadableDetachableModel<List<AttrTO>>() {\n \n-            private static final long serialVersionUID = 5275935387613157437L;\n+            private static final long serialVersionUID = 1L;\n \n             @Override\n-            protected List<String> load() {\n-                List<DerSchemaTO> derSchemaNames = schemaRestClient.getSchemas(SchemaType.DERIVED, anyTypeClass);\n+            protected List<AttrTO> load() {\n+                final List<String> classes = CollectionUtils.collect(\n+                        anyTypeRestClient.getAnyTypeClass(entityTO.getAuxClasses().toArray(new String[] {})),\n+                        new Transformer<AnyTypeClassTO, String>() {\n+\n+                            @Override\n+                            public String transform(final AnyTypeClassTO input) {\n+                                return input.getKey();\n+                            }\n+                        }, new ArrayList<String>(Arrays.asList(anyTypeClass)));\n+\n+                final List<DerSchemaTO> derSchemas\n+                        = schemaRestClient.getSchemas(SchemaType.DERIVED, classes.toArray(new String[] {}));\n \n-                return new ArrayList<>(CollectionUtils.collect(derSchemaNames, new Transformer<DerSchemaTO, String>() {\n+                final Map<String, AttrTO> currents = entityTO.getDerAttrMap();\n+                entityTO.getDerAttrs().clear();\n+\n+                return CollectionUtils.collect(derSchemas, new Transformer<DerSchemaTO, AttrTO>() {\n \n                     @Override\n-                    public String transform(final DerSchemaTO input) {\n-                        return input.getKey();\n+                    public AttrTO transform(final DerSchemaTO input) {\n+                        AttrTO attrTO = currents.get(input.getKey());\n+                        if (attrTO == null) {\n+                            attrTO = new AttrTO();\n+                            attrTO.setSchema(input.getKey());\n+                        }\n+                        return attrTO;\n                     }\n-                }));\n+                }, new ArrayList<>(entityTO.getDerAttrs()));\n             }\n         };\n \n-        final Map<String, AttrTO> derAttrMap = entityTO.getDerAttrMap();\n-        CollectionUtils.collect(derSchemas.getObject(), new Transformer<String, AttrTO>() {\n+        final WebMarkupContainer attributesContainer = new WebMarkupContainer(\"derAttrContainer\");\n+        attributesContainer.setOutputMarkupId(true);\n+        add(attributesContainer);\n+\n+        ListView<AttrTO> attributes = new ListView<AttrTO>(\"attrs\", derAttrTOs) {\n+\n+            private static final long serialVersionUID = 9101744072914090143L;\n \n             @Override\n-            public AttrTO transform(final String input) {\n-                AttrTO attrTO = derAttrMap.get(input);\n-                if (attrTO == null) {\n-                    attrTO = new AttrTO();\n-                    attrTO.setSchema(input);\n+            public void renderHead(final IHeaderResponse response) {\n+                super.renderHead(response);\n+                if (derAttrTOs.getObject().isEmpty()) {\n+                    response.render(OnDomReadyHeaderItem.forScript(\n+                            String.format(\"$('#emptyPlaceholder').append(\\\"%s\\\")\", getString(\"attribute.empty.list\"))));\n                 }\n-                return attrTO;\n             }\n-        }, entityTO.getDerAttrs());\n-\n-        final Fragment fragment;\n-        if (entityTO.getDerAttrs().isEmpty()) {\n-            // show empty list message\n-            fragment = new Fragment(\"content\", \"empty\", this);\n-        } else {\n-            fragment = new Fragment(\"content\", \"attributes\", this);\n-\n-            final WebMarkupContainer attributesContainer = new WebMarkupContainer(\"derAttrContainer\");\n-            attributesContainer.setOutputMarkupId(true);\n-            fragment.add(attributesContainer);\n \n-            ListView<AttrTO> attributes = new ListView<AttrTO>(\"attrs\",\n-                    new PropertyModel<List<AttrTO>>(entityTO, \"derAttrs\") {\n-\n-                        private static final long serialVersionUID = 1L;\n-\n-                        @Override\n-                        public List<AttrTO> getObject() {\n-                            return new ArrayList<>(entityTO.getDerAttrs());\n-                        }\n-\n-                    }) {\n-\n-                        private static final long serialVersionUID = 9101744072914090143L;\n-\n-                        @Override\n-                        protected void populateItem(final ListItem<AttrTO> item) {\n-                            final AttrTO attrTO = item.getModelObject();\n-\n-                            final IModel<String> model;\n-                            final List<String> values = attrTO.getValues();\n-                            if (values == null || values.isEmpty()) {\n-                                model = new ResourceModel(\"derived.emptyvalue.message\", StringUtils.EMPTY);\n-                            } else {\n-                                model = new Model<String>(values.get(0));\n-                            }\n+            @Override\n+            public void onComponentTagBody(final MarkupStream markupStream, final ComponentTag openTag) {\n+                super.onComponentTagBody(markupStream, openTag);\n+                openTag.put(\"class\", \"empty\");\n+            }\n \n-                            final AjaxTextFieldPanel panel = new AjaxTextFieldPanel(\n-                                    \"panel\", attrTO.getSchema(), model, false);\n+            @Override\n+            protected void populateItem(final ListItem<AttrTO> item) {\n+                final AttrTO attrTO = item.getModelObject();\n+\n+                final IModel<String> model;\n+                final List<String> values = attrTO.getValues();\n+                if (values == null || values.isEmpty()) {\n+                    model = new ResourceModel(\"derived.emptyvalue.message\", StringUtils.EMPTY);\n+                } else {\n+                    model = new Model<String>(values.get(0));\n+                }\n \n-                            panel.setEnabled(false);\n-                            panel.setRequired(true);\n-                            panel.setOutputMarkupId(true);\n-                            item.add(panel);\n+                final AjaxTextFieldPanel panel = new AjaxTextFieldPanel(\n+                        \"panel\", attrTO.getSchema(), model, false);\n \n-                        }\n-                    };\n-            attributesContainer.add(attributes);\n-        }\n+                panel.setEnabled(false);\n+                panel.setRequired(true);\n+                panel.setOutputMarkupId(true);\n+                item.add(panel);\n \n-        add(fragment);\n+            }\n+        };\n+        attributesContainer.add(attributes);\n     }\n }"},{"sha":"3aecf6146cfd1479bf4112ede8f0df03bd70dcc8","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/PlainAttrs.java","status":"modified","additions":26,"deletions":22,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1ffc62e5757276d108ba7ac568f585f9c1fa298f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1ffc62e5757276d108ba7ac568f585f9c1fa298f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java?ref=1ffc62e5757276d108ba7ac568f585f9c1fa298f","patch":"@@ -19,17 +19,19 @@\n package org.apache.syncope.client.console.wizards.any;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.commons.JexlHelpUtils;\n import org.apache.syncope.client.console.commons.Mode;\n-import org.apache.syncope.client.console.rest.SchemaRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDateFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n@@ -40,56 +42,58 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.SpinnerFieldPanel;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n-import org.apache.wicket.extensions.wizard.WizardStep;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.form.IChoiceRenderer;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n \n-public class PlainAttrs extends WizardStep {\n+public class PlainAttrs extends AbstractAttrs {\n \n     private static final long serialVersionUID = 552437609667518888L;\n \n-    private final SchemaRestClient schemaRestClient = new SchemaRestClient();\n-\n-    private final AnyTO entityTO;\n-\n     private final Mode mode;\n \n     private Map<String, PlainSchemaTO> schemas = new LinkedHashMap<>();\n \n-    private final String[] anyTypeClass;\n-\n     public <T extends AnyTO> PlainAttrs(\n             final T entityTO, final Form<?> form, final Mode mode, final String... anyTypeClass) {\n+        super(entityTO);\n         this.setOutputMarkupId(true);\n \n-        this.entityTO = entityTO;\n         this.mode = mode;\n-        this.anyTypeClass = anyTypeClass;\n \n-        setSchemas();\n-        setAttrs();\n-\n-        add(new ListView<AttrTO>(\"schemas\", new PropertyModel<List<AttrTO>>(entityTO, \"plainAttrs\") {\n+        final LoadableDetachableModel<List<AttrTO>> plainAttrTOs = new LoadableDetachableModel<List<AttrTO>>() {\n \n             private static final long serialVersionUID = 1L;\n \n             @Override\n-            public List<AttrTO> getObject() {\n-                return new ArrayList<>(super.getObject());\n+            protected List<AttrTO> load() {\n+                setSchemas(CollectionUtils.collect(\n+                        anyTypeRestClient.getAnyTypeClass(entityTO.getAuxClasses().toArray(new String[] {})),\n+                        new Transformer<AnyTypeClassTO, String>() {\n+\n+                            @Override\n+                            public String transform(final AnyTypeClassTO input) {\n+                                return input.getKey();\n+                            }\n+                        }, new ArrayList<String>(Arrays.asList(anyTypeClass))));\n+                setAttrs();\n+                return new ArrayList<>(entityTO.getPlainAttrs());\n             }\n+        };\n \n-        }) {\n+        add(new ListView<AttrTO>(\"schemas\", plainAttrTOs) {\n \n             private static final long serialVersionUID = 9101744072914090143L;\n \n@@ -121,14 +125,14 @@ protected void populateItem(final ListItem<AttrTO> item) {\n                                     panel));\n                 }\n             }\n-        }\n-        );\n+        });\n     }\n \n-    private void setSchemas() {\n+    private void setSchemas(final List<String> anyTypeClasses) {\n \n         AttrTO attrLayout = null;\n-        final List<PlainSchemaTO> schemaTOs = schemaRestClient.getSchemas(SchemaType.PLAIN, anyTypeClass);\n+        final List<PlainSchemaTO> schemaTOs\n+                = schemaRestClient.getSchemas(SchemaType.PLAIN, anyTypeClasses.toArray(new String[] {}));\n \n         schemas.clear();\n "},{"sha":"7f45501e9a8067a98411f1717e5d977a559be5da","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/VirAttrs.java","status":"modified","additions":68,"deletions":78,"changes":146,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1ffc62e5757276d108ba7ac568f585f9c1fa298f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FVirAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1ffc62e5757276d108ba7ac568f585f9c1fa298f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FVirAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FVirAttrs.java?ref=1ffc62e5757276d108ba7ac568f585f9c1fa298f","patch":"@@ -19,123 +19,113 @@\n package org.apache.syncope.client.console.wizards.any;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.Map;\n-import java.util.TreeMap;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.console.rest.SchemaRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.wicket.extensions.wizard.WizardStep;\n+import org.apache.wicket.markup.head.IHeaderResponse;\n+import org.apache.wicket.markup.head.OnDomReadyHeaderItem;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n-import org.apache.wicket.markup.html.panel.Fragment;\n-import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n \n-public class VirAttrs extends WizardStep {\n+public class VirAttrs extends AbstractAttrs {\n \n     private static final long serialVersionUID = -7982691107029848579L;\n \n-    private SchemaRestClient schemaRestClient = new SchemaRestClient();\n-\n-    private final Map<String, VirSchemaTO> schemas = new TreeMap<String, VirSchemaTO>();\n-\n     public <T extends AnyTO> VirAttrs(final T entityTO, final String... anyTypeClass) {\n+        super(entityTO);\n         this.setOutputMarkupId(true);\n \n-        final IModel<List<String>> virSchemas = new LoadableDetachableModel<List<String>>() {\n+        final LoadableDetachableModel<List<AttrTO>> virAttrTOs = new LoadableDetachableModel<List<AttrTO>>() {\n \n-            private static final long serialVersionUID = 5275935387613157437L;\n+            private static final long serialVersionUID = 1L;\n \n             @Override\n-            protected List<String> load() {\n-                List<VirSchemaTO> schemaTOs = schemaRestClient.getSchemas(SchemaType.VIRTUAL, anyTypeClass);\n-\n-                schemas.clear();\n-\n-                for (VirSchemaTO schemaTO : schemaTOs) {\n-                    schemas.put(schemaTO.getKey(), schemaTO);\n-                }\n+            protected List<AttrTO> load() {\n+                final List<String> classes = CollectionUtils.collect(\n+                        anyTypeRestClient.getAnyTypeClass(entityTO.getAuxClasses().toArray(new String[] {})),\n+                        new Transformer<AnyTypeClassTO, String>() {\n+\n+                            @Override\n+                            public String transform(final AnyTypeClassTO input) {\n+                                return input.getKey();\n+                            }\n+                        }, new ArrayList<String>(Arrays.asList(anyTypeClass)));\n+\n+                final List<VirSchemaTO> virSchemas\n+                        = schemaRestClient.getSchemas(SchemaType.VIRTUAL, classes.toArray(new String[] {}));\n+\n+                final Map<String, AttrTO> currents = entityTO.getVirAttrMap();\n+                entityTO.getVirAttrs().clear();\n+\n+                return CollectionUtils.collect(virSchemas, new Transformer<VirSchemaTO, AttrTO>() {\n+\n+                    @Override\n+                    public AttrTO transform(final VirSchemaTO input) {\n+                        AttrTO attrTO = currents.get(input.getKey());\n+                        if (attrTO == null) {\n+                            attrTO = new AttrTO();\n+                            attrTO.setSchema(input.getKey());\n+                            attrTO.getValues().add(StringUtils.EMPTY);\n+                        } else if (attrTO.getValues().isEmpty()) {\n+                            attrTO.getValues().add(\"\");\n+                        }\n \n-                return new ArrayList<>(schemas.keySet());\n+                        attrTO.setReadonly(input.isReadonly());\n+                        return attrTO;\n+                    }\n+                }, new ArrayList<>(entityTO.getVirAttrs()));\n             }\n         };\n \n-        final Map<String, AttrTO> virAttrMap = entityTO.getVirAttrMap();\n-        CollectionUtils.collect(virSchemas.getObject(), new Transformer<String, AttrTO>() {\n+        final WebMarkupContainer attributesContainer = new WebMarkupContainer(\"virAttrContainer\");\n+        attributesContainer.setOutputMarkupId(true);\n+        add(attributesContainer);\n+\n+        ListView<AttrTO> attributes = new ListView<AttrTO>(\"attrs\", virAttrTOs) {\n+\n+            private static final long serialVersionUID = 9101744072914090143L;\n \n             @Override\n-            public AttrTO transform(final String input) {\n-                AttrTO attrTO = virAttrMap.get(input);\n-                if (attrTO == null) {\n-                    attrTO = new AttrTO();\n-                    attrTO.setSchema(input);\n-                    attrTO.getValues().add(StringUtils.EMPTY);\n-                } else if (attrTO.getValues().isEmpty()) {\n-                    attrTO.getValues().add(\"\");\n+            public void renderHead(final IHeaderResponse response) {\n+                super.renderHead(response);\n+                if (virAttrTOs.getObject().isEmpty()) {\n+                    response.render(OnDomReadyHeaderItem.forScript(\n+                            String.format(\"$('#emptyPlaceholder').append(\\\"%s\\\")\", getString(\"attribute.empty.list\"))));\n                 }\n-\n-                return attrTO;\n             }\n-        }, entityTO.getVirAttrs());\n-\n-        final Fragment fragment;\n-        if (entityTO.getVirAttrs().isEmpty()) {\n-            // show empty list message\n-            fragment = new Fragment(\"content\", \"empty\", this);\n-        } else {\n-            fragment = new Fragment(\"content\", \"attributes\", this);\n-\n-            final WebMarkupContainer attributesContainer = new WebMarkupContainer(\"virAttrContainer\");\n-            attributesContainer.setOutputMarkupId(true);\n-            fragment.add(attributesContainer);\n \n-            ListView<AttrTO> attributes = new ListView<AttrTO>(\"attrs\",\n-                    new PropertyModel<List<AttrTO>>(entityTO, \"virAttrs\") {\n-\n-                        private static final long serialVersionUID = 1L;\n-\n-                        @Override\n-                        public List<AttrTO> getObject() {\n-                            return new ArrayList<>(entityTO.getVirAttrs());\n-                        }\n-\n-                    }) {\n-\n-                        private static final long serialVersionUID = 9101744072914090143L;\n-\n-                        @Override\n-                        @SuppressWarnings(\"unchecked\")\n-                        protected void populateItem(final ListItem<AttrTO> item) {\n-                            AttrTO attrTO = item.getModelObject();\n-                            final VirSchemaTO schema = schemas.get(attrTO.getSchema());\n-\n-                            attrTO.setReadonly(schema.isReadonly());\n+            @Override\n+            @SuppressWarnings(\"unchecked\")\n+            protected void populateItem(final ListItem<AttrTO> item) {\n+                AttrTO attrTO = item.getModelObject();\n \n-                            final AjaxTextFieldPanel panel = new AjaxTextFieldPanel(\n-                                    \"panel\", attrTO.getSchema(), new Model<String>(), false);\n+                attrTO.setReadonly(attrTO.isReadonly());\n \n-                            item.add(new MultiFieldPanel.Builder<String>(\n-                                            new PropertyModel<List<String>>(attrTO, \"values\")).build(\n-                                            \"panel\",\n-                                            schema.getKey(),\n-                                            panel).setEnabled(!schema.isReadonly()));\n-                        }\n-                    };\n+                final AjaxTextFieldPanel panel = new AjaxTextFieldPanel(\n+                        \"panel\", attrTO.getSchema(), new Model<String>(), false);\n \n-            attributesContainer.add(attributes);\n-        }\n+                item.add(new MultiFieldPanel.Builder<String>(\n+                        new PropertyModel<List<String>>(attrTO, \"values\")).build(\n+                                \"panel\",\n+                                attrTO.getSchema(),\n+                                panel).setEnabled(!attrTO.isReadonly()));\n+            }\n+        };\n \n-        add(fragment);\n+        attributesContainer.add(attributes);\n     }\n }"},{"sha":"b38ead8db022704b9804c492de2dcc76507cd5c4","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/AuxClasses.html","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1ffc62e5757276d108ba7ac568f585f9c1fa298f/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAuxClasses.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1ffc62e5757276d108ba7ac568f585f9c1fa298f/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAuxClasses.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAuxClasses.html?ref=1ffc62e5757276d108ba7ac568f585f9c1fa298f","patch":"@@ -0,0 +1,26 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <head><title></title></head>\n+  <body>\n+    <wicket:panel>\n+      <span wicket:id=\"auxClasses\">[AUX]</span>\n+    </wicket:panel>\n+  </body>\n+</html>\n\\ No newline at end of file"},{"sha":"defa627b445330b5a2918d6905372378820100e6","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/DerAttrs.html","status":"modified","additions":8,"deletions":17,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1ffc62e5757276d108ba7ac568f585f9c1fa298f/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDerAttrs.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1ffc62e5757276d108ba7ac568f585f9c1fa298f/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDerAttrs.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDerAttrs.html?ref=1ffc62e5757276d108ba7ac568f585f9c1fa298f","patch":"@@ -16,27 +16,18 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\" xmlns:message=\"http://xmlns.jcp.org/jsf/composite\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\" >\n   <head><title></title></head>\n   <body>\n     <wicket:panel>\n-      <span wicket:id=\"content\">[CONTENT]</span>\n-      \n-      <wicket:fragment wicket:id=\"empty\">\n-        <div class=\"attribute.empty.list\">\n-          <wicket:message key=\"attribute.empty.list\"/>\n+      <div id=\"emptyPlaceholder\"/>\n+      <div wicket:id=\"derAttrContainer\">\n+        <div class=\"form-group\" wicket:id=\"attrs\">\n+          <span wicket:id=\"panel\">\n+            [panel for dynamic input type markup]\n+          </span>\n         </div>\n-      </wicket:fragment>\n-      \n-      <wicket:fragment wicket:id=\"attributes\">\n-        <div wicket:id=\"derAttrContainer\">\n-          <div class=\"form-group\" wicket:id=\"attrs\">\n-            <span wicket:id=\"panel\">\n-              [panel for dynamic input type markup]\n-            </span>\n-          </div>\n-        </div>\n-      </wicket:fragment>\n+      </div>\n     </wicket:panel>\n   </body>\n </html>"},{"sha":"cfad334adc9066e4b490ef081407ddddbc3a7ef8","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/PlainAttrs.html","status":"modified","additions":21,"deletions":18,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1ffc62e5757276d108ba7ac568f585f9c1fa298f/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1ffc62e5757276d108ba7ac568f585f9c1fa298f/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.html?ref=1ffc62e5757276d108ba7ac568f585f9c1fa298f","patch":"@@ -17,24 +17,27 @@\n under the License.\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n-  <wicket:panel>\n-    <div wicket:id=\"schemas\">\n-      <div class=\"form-group\">\n-        <span wicket:id=\"panel\">\n-          [panel for dynamic input type markup]\n-        </span>\n-        <a class=\"tooltips\" wicket:id=\"questionMarkJexlHelp\" href=\"#\" alt=\"Click to help\" title=\"Click to help\">\n-          <img src=\"img/help.png\"/>\n-          <span wicket:id=\"jexlHelp\" class=\"tooltips\">\n-            <wicket:message key=\"jexl_info\"/>\n-            <ul>\n-              <li><wicket:message key=\"jexl_ex1\"/></li>\n-              <li><wicket:message key=\"jexl_ex2\"/></li>\n-            </ul>\n-            <a href=\"#\" wicket:id=\"jexlLink\" target=\"_blank\"><wicket:message key=\"jexl_syntax_url\"/></a>\n+  <head><title></title></head>\n+  <body>\n+    <wicket:panel>\n+      <div wicket:id=\"schemas\">\n+        <div class=\"form-group\">\n+          <span wicket:id=\"panel\">\n+            [panel for dynamic input type markup]\n           </span>\n-        </a>\n+          <a class=\"tooltips\" wicket:id=\"questionMarkJexlHelp\" href=\"#\" alt=\"Click to help\" title=\"Click to help\">\n+            <img src=\"img/help.png\"/>\n+            <span wicket:id=\"jexlHelp\" class=\"tooltips\">\n+              <wicket:message key=\"jexl_info\"/>\n+              <ul>\n+                <li><wicket:message key=\"jexl_ex1\"/></li>\n+                <li><wicket:message key=\"jexl_ex2\"/></li>\n+              </ul>\n+              <a href=\"#\" wicket:id=\"jexlLink\" target=\"_blank\"><wicket:message key=\"jexl_syntax_url\"/></a>\n+            </span>\n+          </a>\n+        </div>\n       </div>\n-    </div>\n-  </wicket:panel>\n+    </wicket:panel>\n+  </body>\n </html>\n\\ No newline at end of file"},{"sha":"a0d9eb3b243cfd196aa19554b8ddc0e91ac16931","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/VirAttrs.html","status":"modified","additions":8,"deletions":17,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1ffc62e5757276d108ba7ac568f585f9c1fa298f/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FVirAttrs.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1ffc62e5757276d108ba7ac568f585f9c1fa298f/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FVirAttrs.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FVirAttrs.html?ref=1ffc62e5757276d108ba7ac568f585f9c1fa298f","patch":"@@ -16,27 +16,18 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\" xmlns:message=\"http://xmlns.jcp.org/jsf/composite\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\" >\n   <head><title></title></head>\n   <body>\n     <wicket:panel>\n-      <span wicket:id=\"content\">[CONTENT]</span>\n-\n-      <wicket:fragment wicket:id=\"empty\">\n-        <div class=\"attribute.empty.list\">\n-          <wicket:message key=\"attribute.empty.list\"/>\n-        </div>\n-      </wicket:fragment>\n-\n-      <wicket:fragment wicket:id=\"attributes\">\n-        <div wicket:id=\"virAttrContainer\">\n-          <div class=\"form-group\" wicket:id=\"attrs\">\n-            <span wicket:id=\"panel\">\n-              [panel for dynamic input type markup]\n-            </span>\n-          </div>\n+      <div id=\"emptyPlaceholder\"/>\n+      <div wicket:id=\"virAttrContainer\">\n+        <div class=\"form-group\" wicket:id=\"attrs\">\n+          <span wicket:id=\"panel\">\n+            [panel for dynamic input type markup]\n+          </span>\n         </div>\n-      </wicket:fragment>\n+      </div>\n     </wicket:panel>\n   </body>\n </html>"}]}