{"sha":"15582e4ff81c10f911d9f09753cc2cedcd26f73a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjE1NTgyZTRmZjgxYzEwZjkxMWQ5ZjA5NzUzY2MyY2VkY2QyNmY3M2E=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-02-24T15:49:55Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-02-24T15:49:55Z"},"message":"[SYNCOPE-744][SYNCOPE-750] Basic work done for jobs and executions widget","tree":{"sha":"baf002e0188e2c2193cb77e47ee78b19c9298b3d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/baf002e0188e2c2193cb77e47ee78b19c9298b3d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/15582e4ff81c10f911d9f09753cc2cedcd26f73a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/15582e4ff81c10f911d9f09753cc2cedcd26f73a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/15582e4ff81c10f911d9f09753cc2cedcd26f73a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/15582e4ff81c10f911d9f09753cc2cedcd26f73a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"924a951794828b79f417ccdc5c9e9a47fa0f3d84","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/924a951794828b79f417ccdc5c9e9a47fa0f3d84","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/924a951794828b79f417ccdc5c9e9a47fa0f3d84"}],"stats":{"total":2213,"additions":1384,"deletions":829},"files":[{"sha":"b15ad7d3979b58e94ef54c05a486e1e9cbcdce01","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportListJobs.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportListJobs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportListJobs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportListJobs.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -18,9 +18,10 @@\n  */\n package org.apache.syncope.client.cli.commands.report;\n \n+import java.util.List;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.types.JobStatusType;\n+import org.apache.syncope.common.lib.to.JobTO;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -39,8 +40,11 @@ public ReportListJobs(final Input input) {\n     public void list() {\n         if (input.parameterNumber() == 0) {\n             try {\n-                for (final JobStatusType jobStatusType : JobStatusType.values()) {\n-                    reportResultManager.printReportExecution(reportSyncopeOperations.listJobs(jobStatusType.name()));\n+                List<JobTO> jobs = reportSyncopeOperations.listJobs();\n+                if (jobs.isEmpty()) {\n+                    reportResultManager.genericMessage(\"There are NO jobs available\");\n+                } else {\n+                    reportResultManager.printJobs(jobs);\n                 }\n             } catch (final SyncopeClientException ex) {\n                 LOG.error(\"Error listing report\", ex);"},{"sha":"ef8991dcf62d499689919626f6529add17ff759b","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportResultManager.java","status":"modified","additions":14,"deletions":3,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportResultManager.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -23,6 +23,7 @@\n import org.apache.syncope.client.cli.commands.CommonsResultManager;\n import org.apache.syncope.common.lib.report.AbstractReportletConf;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n+import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n \n@@ -47,7 +48,7 @@ private void printReport(final ReportTO reportTO) {\n             printReportletConf(reportletConf);\n         }\n         System.out.println(\"    EXECUTIONS:\");\n-        printReportExecution(reportTO.getExecutions());\n+        printReportExecutions(reportTO.getExecutions());\n         System.out.println(\"\");\n     }\n \n@@ -63,7 +64,7 @@ private void printReportletConf(final AbstractReportletConf reportletConf) {\n         }\n     }\n \n-    public void printReportExecution(final List<ReportExecTO> reportExecTOs) {\n+    public void printReportExecutions(final List<ReportExecTO> reportExecTOs) {\n         for (final ReportExecTO reportExecTO : reportExecTOs) {\n             System.out.println(\"       REPORT EXEC ID: \" + reportExecTO.getKey());\n             System.out.println(\"       status: \" + reportExecTO.getStatus());\n@@ -73,7 +74,17 @@ public void printReportExecution(final List<ReportExecTO> reportExecTOs) {\n             System.out.println(\"       report id: \" + reportExecTO.getReport());\n         }\n     }\n-    \n+\n+    public void printJobs(final List<JobTO> jobTOs) {\n+        for (final JobTO jobTO : jobTOs) {\n+            System.out.println(\"       REPORT ID/NAME: \" + jobTO.getReferenceKey() + \"/\" + jobTO.getReferenceName());\n+            System.out.println(\"       status: \" + jobTO.getStatus());\n+            System.out.println(\"       start date: \" + jobTO.getStart());\n+            System.out.println(\"       running: \" + jobTO.isRunning());\n+            System.out.println(\"       scheduled: \" + jobTO.isScheduled());\n+        }\n+    }\n+\n     public void printDetails(final Map<String, String> details) {\n         printDetails(\"reports details\", details);\n     }"},{"sha":"8a8814a0e1f9c78b1fe4f32eb69ccb34e8c616e8","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportSyncopeOperations.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportSyncopeOperations.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -25,9 +25,8 @@\n import javax.xml.transform.TransformerException;\n import org.apache.syncope.client.cli.SyncopeServices;\n import org.apache.syncope.client.cli.util.XMLUtils;\n-import org.apache.syncope.common.lib.to.ReportExecTO;\n+import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n-import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.service.ReportService;\n@@ -41,8 +40,8 @@ public ReportTO read(final String reportKey) {\n         return reportService.read(Long.valueOf(reportKey));\n     }\n \n-    public List<ReportExecTO> listJobs(final String jobStatusType) {\n-        return reportService.listJobs(JobStatusType.valueOf(jobStatusType));\n+    public List<JobTO> listJobs() {\n+        return reportService.listJobs(10);\n     }\n \n     public List<ReportTO> list() {"},{"sha":"1277ead1af77bb0f874db8a8ee4d0d1139a31159","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskCommand.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskCommand.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -43,11 +43,8 @@ public void execute(final Input input) {\n             case LIST:\n                 new TaskList(input).list();\n                 break;\n-            case LIST_RUNNING_JOBS:\n-                new TaskListRunningJobs(input).list();\n-                break;\n-            case LIST_SCHEDULED_JOBS:\n-                new TaskListScheduledJobs(input).list();\n+            case LIST_JOBS:\n+                new TaskListJobs(input).list();\n                 break;\n             case READ:\n                 new TaskRead(input).read();\n@@ -82,8 +79,7 @@ private enum Options {\n         HELP(\"--help\"),\n         DETAILS(\"--details\"),\n         LIST(\"--list\"),\n-        LIST_RUNNING_JOBS(\"--list-running-jobs\"),\n-        LIST_SCHEDULED_JOBS(\"--list-scheduled-jobs\"),\n+        LIST_JOBS(\"--list-jobs\"),\n         READ(\"--read\"),\n         DELETE(\"--delete\"),\n         DELETE_PROP_TASK(\"--delete-all-prop\"),"},{"sha":"45fd01c9e315893d4cafb6045f4008c790ea9c6b","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskDetails.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskDetails.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -25,12 +25,12 @@\n import org.apache.syncope.client.cli.util.CommandUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n-import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.types.SyncMode;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.slf4j.Logger;\n@@ -58,8 +58,7 @@ public void details() {\n                 final List<AbstractTaskTO> pushTaskTOs = taskSyncopeOperations.list(TaskType.PUSH.name());\n                 final List<AbstractTaskTO> scheduledTaskTOs = taskSyncopeOperations.list(TaskType.SCHEDULED.name());\n                 final List<AbstractTaskTO> syncTaskTOs = taskSyncopeOperations.list(TaskType.SYNCHRONIZATION.name());\n-                final List<TaskExecTO> runningTOs = taskSyncopeOperations.listRunningJobs();\n-                final List<TaskExecTO> scheduledTOs = taskSyncopeOperations.listScheduledJobs();\n+                final List<JobTO> jobTOs = taskSyncopeOperations.listJobs();\n                 final int notificationTaskSize = notificationTaskTOs.size();\n                 int notificationNotExecuted = 0;\n                 final int propagationTaskSize = propagationTaskTOs.size();\n@@ -71,8 +70,7 @@ public void details() {\n                 final int syncTaskSize = syncTaskTOs.size();\n                 int syncNotExecuted = 0;\n                 int syncFull = 0;\n-                final int runningJobsSize = runningTOs.size();\n-                final int scheduledJobsSize = scheduledTOs.size();\n+                final int jobsSize = jobTOs.size();\n \n                 for (final AbstractTaskTO notificationTaskTO : notificationTaskTOs) {\n                     if (!((NotificationTaskTO) notificationTaskTO).isExecuted()) {\n@@ -127,8 +125,7 @@ public void details() {\n                 details.put(\"synchronization tasks\", String.valueOf(syncTaskSize));\n                 details.put(\"synchronization tasks not executed\", String.valueOf(syncNotExecuted));\n                 details.put(\"synchronization tasks with full reconciliation\", String.valueOf(syncFull));\n-                details.put(\"running jobs\", String.valueOf(runningJobsSize));\n-                details.put(\"scheduled jobs\", String.valueOf(scheduledJobsSize));\n+                details.put(\"jobs\", String.valueOf(jobsSize));\n                 taskResultManager.printDetails(details);\n             } catch (final SyncopeClientException ex) {\n                 LOG.error(\"Error reading details about task\", ex);"},{"sha":"b1398323ca567ed603e30a52912d021cb33b1dd1","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskExecute.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskExecute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskExecute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskExecute.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -49,7 +49,7 @@ public void execute() {\n                 } else {\n                     taskResultManager.notBooleanDeletedError(\"dry run\", input.secondParameter());\n                 }\n-                taskResultManager.printTaskExecTO(Arrays.asList(\n+                taskResultManager.printTaskExecTOs(Arrays.asList(\n                         taskSyncopeOperations.execute(input.firstParameter(), dryRun)));\n             } catch (final WebServiceException | SyncopeClientException ex) {\n                 LOG.error(\"Error executing task\", ex);"},{"sha":"f21a3ff81af9af959e84cf7dcb9d5724308701e8","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskListJobs.java","status":"renamed","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskListJobs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskListJobs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskListJobs.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -21,30 +21,30 @@\n import java.util.List;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.to.JobTO;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class TaskListRunningJobs extends AbstractTaskCommand {\n+public class TaskListJobs extends AbstractTaskCommand {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(TaskListRunningJobs.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(TaskListJobs.class);\n \n-    private static final String READ_HELP_MESSAGE = \"task --list-running-jobs\";\n+    private static final String READ_HELP_MESSAGE = \"task --list-jobs\";\n \n     private final Input input;\n \n-    public TaskListRunningJobs(final Input input) {\n+    public TaskListJobs(final Input input) {\n         this.input = input;\n     }\n \n     public void list() {\n         if (input.parameterNumber() == 0) {\n             try {\n-                final List<TaskExecTO> taskExecTOs = taskSyncopeOperations.listRunningJobs();\n-                if (taskExecTOs.isEmpty()) {\n-                    taskResultManager.genericMessage(\"There are NO running jobs available\");\n+                List<JobTO> jobs = taskSyncopeOperations.listJobs();\n+                if (jobs.isEmpty()) {\n+                    taskResultManager.genericMessage(\"There are NO jobs available\");\n                 } else {\n-                    taskResultManager.printTaskExecTO(taskExecTOs);\n+                    taskResultManager.printJobs(jobs);\n                 }\n             } catch (final SyncopeClientException ex) {\n                 LOG.error(\"Error listing jobs\", ex);","previous_filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskListRunningJobs.java"},{"sha":"1710d7947feaaecf3fd2d2f413976e87d41088ea","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskListScheduledJobs.java","status":"removed","additions":0,"deletions":50,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/924a951794828b79f417ccdc5c9e9a47fa0f3d84/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskListScheduledJobs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/924a951794828b79f417ccdc5c9e9a47fa0f3d84/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskListScheduledJobs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskListScheduledJobs.java?ref=924a951794828b79f417ccdc5c9e9a47fa0f3d84","patch":"@@ -1,50 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.cli.commands.task;\n-\n-import org.apache.syncope.client.cli.Input;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class TaskListScheduledJobs extends AbstractTaskCommand {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(TaskListScheduledJobs.class);\n-\n-    private static final String READ_HELP_MESSAGE = \"task --list-scheduled-jobs\";\n-\n-    private final Input input;\n-\n-    public TaskListScheduledJobs(final Input input) {\n-        this.input = input;\n-    }\n-\n-    public void list() {\n-        if (input.parameterNumber() == 0) {\n-            try {\n-                taskResultManager.printTaskExecTO(taskSyncopeOperations.listScheduledJobs());\n-            } catch (final SyncopeClientException ex) {\n-                LOG.error(\"Error listing task\", ex);\n-                taskResultManager.genericError(ex.getMessage());\n-            }\n-        } else {\n-            taskResultManager.unnecessaryParameters(input.listParameters(), READ_HELP_MESSAGE);\n-        }\n-    }\n-}"},{"sha":"40cc323d8f6ff8ad596b94610d9855158d2df062","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskResultManager.java","status":"modified","additions":26,"deletions":24,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.client.cli.commands.CommonsResultManager;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n@@ -91,13 +92,12 @@ private void printNotificationTask(final NotificationTaskTO notificationTaskTO)\n         System.out.println(\"     subjetc: \" + notificationTaskTO.getSubject());\n         System.out.println(\"     text body: \" + notificationTaskTO.getTextBody());\n         System.out.println(\"     html body: \" + notificationTaskTO.getHtmlBody());\n-        System.out.println(\"     latest execution status: \"\n-                + notificationTaskTO.getLatestExecStatus());\n+        System.out.println(\"     latest execution status: \" + notificationTaskTO.getLatestExecStatus());\n         System.out.println(\"     start date: \" + notificationTaskTO.getStart());\n         System.out.println(\"     end date: \" + notificationTaskTO.getEnd());\n         System.out.println(\"     recipients: \" + notificationTaskTO.getRecipients());\n         System.out.println(\"     trace level: \" + notificationTaskTO.getTraceLevel());\n-        printTaskExecTO(notificationTaskTO.getExecutions());\n+        printTaskExecTOs(notificationTaskTO.getExecutions());\n         System.out.println(\"\");\n     }\n \n@@ -106,18 +106,15 @@ private void printPropagationTask(final PropagationTaskTO propagationTaskTO) {\n         System.out.println(\"     resource: \" + propagationTaskTO.getResource());\n         System.out.println(\"     any key: \" + propagationTaskTO.getAnyKey());\n         System.out.println(\"     any type kind: \" + propagationTaskTO.getAnyTypeKind());\n-        System.out.println(\"     connector object key: \"\n-                + propagationTaskTO.getConnObjectKey());\n-        System.out.println(\"     old connector object key: \"\n-                + propagationTaskTO.getOldConnObjectKey());\n-        System.out.println(\"     latest execution status: \"\n-                + propagationTaskTO.getLatestExecStatus());\n+        System.out.println(\"     connector object key: \" + propagationTaskTO.getConnObjectKey());\n+        System.out.println(\"     old connector object key: \" + propagationTaskTO.getOldConnObjectKey());\n+        System.out.println(\"     latest execution status: \" + propagationTaskTO.getLatestExecStatus());\n         System.out.println(\"     class name: \" + propagationTaskTO.getObjectClassName());\n         System.out.println(\"     attributes: \" + propagationTaskTO.getAttributes());\n         System.out.println(\"     start date: \" + propagationTaskTO.getStart());\n         System.out.println(\"     end date: \" + propagationTaskTO.getEnd());\n         System.out.println(\"     operation: \" + propagationTaskTO.getOperation());\n-        printTaskExecTO(propagationTaskTO.getExecutions());\n+        printTaskExecTOs(propagationTaskTO.getExecutions());\n         System.out.println(\"\");\n     }\n \n@@ -135,14 +132,13 @@ private void printPushTask(final PushTaskTO pushTaskTO) {\n         System.out.println(\"     end date: \" + pushTaskTO.getEnd());\n         System.out.println(\"     last execution: \" + pushTaskTO.getLastExec());\n         System.out.println(\"     next execution: \" + pushTaskTO.getNextExec());\n-        System.out.println(\"     latest execution status: \"\n-                + pushTaskTO.getLatestExecStatus());\n+        System.out.println(\"     latest execution status: \" + pushTaskTO.getLatestExecStatus());\n         System.out.println(\"     filters: \" + pushTaskTO.getFilters());\n         System.out.println(\"     delegate class: \" + pushTaskTO.getJobDelegateClassName());\n         System.out.println(\"     action class: \" + pushTaskTO.getActionsClassNames());\n         System.out.println(\"     matching rule: \" + pushTaskTO.getMatchingRule());\n         System.out.println(\"     not matching rule: \" + pushTaskTO.getUnmatchingRule());\n-        printTaskExecTO(pushTaskTO.getExecutions());\n+        printTaskExecTOs(pushTaskTO.getExecutions());\n         System.out.println(\"\");\n     }\n \n@@ -155,11 +151,9 @@ private void printScheduledTask(final SchedTaskTO schedTaskTO) {\n         System.out.println(\"     end date: \" + schedTaskTO.getEnd());\n         System.out.println(\"     last execution: \" + schedTaskTO.getLastExec());\n         System.out.println(\"     next execution: \" + schedTaskTO.getNextExec());\n-        System.out.println(\"     latest execution status: \"\n-                + schedTaskTO.getLatestExecStatus());\n-        System.out.println(\"     job delegate class: \"\n-                + schedTaskTO.getJobDelegateClassName());\n-        printTaskExecTO(schedTaskTO.getExecutions());\n+        System.out.println(\"     latest execution status: \" + schedTaskTO.getLatestExecStatus());\n+        System.out.println(\"     job delegate class: \" + schedTaskTO.getJobDelegateClassName());\n+        printTaskExecTOs(schedTaskTO.getExecutions());\n         System.out.println(\"\");\n     }\n \n@@ -181,14 +175,12 @@ private void printSyncTask(final SyncTaskTO syncTaskTO) {\n         System.out.println(\"     end date: \" + syncTaskTO.getEnd());\n         System.out.println(\"     next execution: \" + syncTaskTO.getNextExec());\n         System.out.println(\"     last execution: \" + syncTaskTO.getLastExec());\n-        System.out.println(\"     latest execution status: \"\n-                + syncTaskTO.getLatestExecStatus());\n-        System.out.println(\"     job delegate class: \"\n-                + syncTaskTO.getJobDelegateClassName());\n+        System.out.println(\"     latest execution status: \" + syncTaskTO.getLatestExecStatus());\n+        System.out.println(\"     job delegate class: \" + syncTaskTO.getJobDelegateClassName());\n         System.out.println(\"     action class name: \" + syncTaskTO.getActionsClassNames());\n         System.out.println(\"     matching rule: \" + syncTaskTO.getMatchingRule());\n         System.out.println(\"     unmatching rule: \" + syncTaskTO.getUnmatchingRule());\n-        printTaskExecTO(syncTaskTO.getExecutions());\n+        printTaskExecTOs(syncTaskTO.getExecutions());\n         System.out.println(\"\");\n     }\n \n@@ -203,7 +195,7 @@ private void printTemplates(final Map<String, AnyTO> templates) {\n         }\n     }\n \n-    public void printTaskExecTO(final List<TaskExecTO> taskExecTOs) {\n+    public void printTaskExecTOs(final List<TaskExecTO> taskExecTOs) {\n         for (final TaskExecTO taskExecTO : taskExecTOs) {\n             System.out.println(\"     EXECUTIONS: \");\n             System.out.println(\"     - task execution key: \" + taskExecTO.getKey());\n@@ -219,6 +211,16 @@ public void printTaskExecTO(final List<TaskExecTO> taskExecTOs) {\n         }\n     }\n \n+    public void printJobs(final List<JobTO> jobTOs) {\n+        for (final JobTO jobTO : jobTOs) {\n+            System.out.println(\"       TASK ID/NAME: \" + jobTO.getReferenceKey() + \"/\" + jobTO.getReferenceName());\n+            System.out.println(\"       status: \" + jobTO.getStatus());\n+            System.out.println(\"       start date: \" + jobTO.getStart());\n+            System.out.println(\"       running: \" + jobTO.isRunning());\n+            System.out.println(\"       scheduled: \" + jobTO.isScheduled());\n+        }\n+    }\n+\n     public void printDetails(final Map<String, String> details) {\n         printDetails(\"tasks details\", details);\n     }"},{"sha":"14b4cd10bd856103eec8a8dc838769ecb14593b6","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskSyncopeOperations.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -21,8 +21,8 @@\n import java.util.List;\n import org.apache.syncope.client.cli.SyncopeServices;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n-import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n@@ -32,12 +32,8 @@ public class TaskSyncopeOperations {\n \n     private final TaskService taskService = SyncopeServices.get(TaskService.class);\n \n-    public List<TaskExecTO> listScheduledJobs() {\n-        return taskService.listJobs(JobStatusType.SCHEDULED);\n-    }\n-\n-    public List<TaskExecTO> listRunningJobs() {\n-        return taskService.listJobs(JobStatusType.RUNNING);\n+    public List<JobTO> listJobs() {\n+        return taskService.listJobs(10);\n     }\n \n     public <T extends AbstractTaskTO> T read(final String taskKey) {"},{"sha":"28dfbb87138f4a82223d927a64f5615ac232cf94","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Dashboard.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDashboard.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDashboard.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDashboard.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -22,6 +22,7 @@\n import org.apache.syncope.client.console.widgets.NumberWidget;\n import org.apache.syncope.client.console.widgets.AnyByRealmWidget;\n import org.apache.syncope.client.console.widgets.CompletenessWidget;\n+import org.apache.syncope.client.console.widgets.JobWidget;\n import org.apache.syncope.client.console.widgets.LoadWidget;\n import org.apache.syncope.client.console.widgets.UsersByStatusWidget;\n import org.apache.syncope.common.lib.info.NumbersInfo;\n@@ -79,5 +80,7 @@ public Dashboard(final PageParameters parameters) {\n                 numbers.getAny2ByRealm()));\n \n         body.add(new LoadWidget(\"load\", SyncopeConsoleSession.get().getService(SyncopeService.class).system()));\n+\n+        body.add(new JobWidget(\"job\", getPageReference()));\n     }\n }"},{"sha":"227d7d43ff19fea4a5ae55b760e84ccd6962c1c3","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AbstractLogsPanel.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractLogsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractLogsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractLogsPanel.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -48,14 +48,14 @@ public AbstractLogsPanel(\n             final String id,\n             final PageReference pageRef,\n             final List<LoggerTO> loggerTOs) {\n+        \n         super(id);\n \n-        final WebMarkupContainer container = new WebMarkupContainer(\"loggerContainer\");\n+        WebMarkupContainer container = new WebMarkupContainer(\"loggerContainer\");\n         container.setOutputMarkupId(true);\n         add(container);\n \n-        final ListViewPanel.Builder<LoggerTO> builder = new ListViewPanel.Builder<LoggerTO>(\n-                LoggerTO.class, pageRef) {\n+        ListViewPanel.Builder<LoggerTO> builder = new ListViewPanel.Builder<LoggerTO>(LoggerTO.class, pageRef) {\n \n             private static final long serialVersionUID = 6957788356709885298L;\n \n@@ -91,11 +91,12 @@ protected void onUpdate(final AjaxRequestTarget target) {\n             }\n         };\n \n-        builder.setItems(loggerTOs);\n-        builder.setModel(new ListModel<>(loggerTOs));\n-        builder.includes(\"key\", \"level\");\n-        builder.withChecks(ListViewPanel.CheckAvailability.NONE);\n-        builder.setReuseItem(false);\n+        builder.setItems(loggerTOs).\n+                setModel(new ListModel<>(loggerTOs)).\n+                includes(\"key\", \"level\").\n+                withChecks(ListViewPanel.CheckAvailability.NONE).\n+                setReuseItem(false);\n+\n         container.add(builder.build(\"logger\"));\n     }\n "},{"sha":"ccc019ba3d1a46994c43c8fdcb79154020445cc8","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AbstractSearchResultPanel.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSearchResultPanel.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -157,6 +157,7 @@ protected void initResultTable() {\n         // Rows-per-page selector\n         // ---------------------------\n         final Form<?> paginatorForm = new Form<>(\"paginator\");\n+        paginatorForm.setOutputMarkupPlaceholderTag(true);\n         container.add(paginatorForm);\n \n         final DropDownChoice<Integer> rowsChooser = new DropDownChoice<>("},{"sha":"0b6205f996a9dc0d02d608e864b7c042f3146e7e","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ListViewPanel.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -53,9 +53,6 @@\n \n     private static final long serialVersionUID = -7982691107029848579L;\n \n-    /**\n-     * Logger.\n-     */\n     private static final Logger LOG = LoggerFactory.getLogger(ListViewPanel.class);\n \n     public enum CheckAvailability {\n@@ -217,7 +214,7 @@ public void setCheckAvailability(final CheckAvailability check) {\n      */\n     public static class Builder<T extends Serializable> extends WizardMgtPanel.Builder<T> {\n \n-        private static final long serialVersionUID = 1L;\n+        private static final long serialVersionUID = -3643771352897992172L;\n \n         private IModel<? extends Collection<T>> model = new Model<>();\n "},{"sha":"f6a521d4fced7415a02703174b3ee113ca07860b","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ParametersPanel.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersPanel.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -195,11 +195,10 @@ public void populateItem(\n \n                 final AttrTO attrTO = model.getObject();\n \n-                final ActionLinksPanel.Builder<Serializable> actionLinks = ActionLinksPanel.builder(page.\n-                        getPageReference());\n+                ActionLinksPanel.Builder<Serializable> actionLinks = ActionLinksPanel.builder(page.getPageReference());\n                 actionLinks.setDisableIndicator(true);\n-                ActionLinksPanel.Builder<Serializable> addWithRoles = actionLinks\n-                        .addWithRoles(new ActionLink<Serializable>() {\n+                actionLinks.\n+                        addWithRoles(new ActionLink<Serializable>() {\n \n                             private static final long serialVersionUID = 3257738274365467945L;\n \n@@ -211,9 +210,8 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                                 modalDetails.setContent(new ParametersEditModalPanel(modalDetails, attrTO, pageRef));\n                                 modalDetails.show(true);\n                             }\n-                        }, ActionLink.ActionType.EDIT, StandardEntitlement.CONFIGURATION_SET\n-                        )\n-                        .addWithRoles(new ActionLink<Serializable>() {\n+                        }, ActionLink.ActionType.EDIT, StandardEntitlement.CONFIGURATION_SET).\n+                        addWithRoles(new ActionLink<Serializable>() {\n \n                             private static final long serialVersionUID = 3257738274365467945L;\n \n@@ -234,11 +232,9 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n \n                 item.add(actionLinks.build(componentId));\n             }\n-        }\n-        );\n+        });\n \n         return columns;\n-\n     }\n \n     protected final class ParametersProvider extends SearchableDataProvider<AttrTO> {"},{"sha":"7d1c9074906e6c5644a8ea2c30c2fe419d1bc74b","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/JobWidget.java","status":"added","additions":299,"deletions":0,"changes":299,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -0,0 +1,299 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.widgets;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.commons.SearchableDataProvider;\n+import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.client.console.panels.AbstractSearchResultPanel;\n+import org.apache.syncope.client.console.rest.BaseRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n+import org.apache.syncope.common.lib.to.AbstractExecTO;\n+import org.apache.syncope.common.lib.to.JobTO;\n+import org.apache.syncope.common.lib.to.ReportExecTO;\n+import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.rest.api.service.NotificationService;\n+import org.apache.syncope.common.rest.api.service.ReportService;\n+import org.apache.syncope.common.rest.api.service.TaskService;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.ResourceModel;\n+\n+public class JobWidget extends AbstractWidget {\n+\n+    private static final long serialVersionUID = 7667120094526529934L;\n+\n+    private static final int ROWS = 5;\n+\n+    private final List<JobTO> available;\n+\n+    private final List<AbstractExecTO> recent;\n+\n+    public JobWidget(final String id, final PageReference pageRef) {\n+        super(id);\n+\n+        JobTO notificationJob = SyncopeConsoleSession.get().getService(NotificationService.class).getJob();\n+\n+        List<JobTO> taskJobs = SyncopeConsoleSession.get().getService(TaskService.class).listJobs(10);\n+\n+        List<JobTO> reportJobs = SyncopeConsoleSession.get().getService(ReportService.class).listJobs(10);\n+\n+        available = new ArrayList<>();\n+        available.add(notificationJob);\n+        available.addAll(taskJobs);\n+        available.addAll(reportJobs);\n+\n+        add(new AvailableJobsPanel(\"available\", pageRef));\n+\n+        List<ReportExecTO> reportExecs = SyncopeConsoleSession.get().\n+                getService(ReportService.class).listRecentExecutions(10);\n+\n+        List<TaskExecTO> taskExecs = SyncopeConsoleSession.get().\n+                getService(TaskService.class).listRecentExecutions(10);\n+\n+        recent = new ArrayList<>();\n+        recent.addAll(reportExecs);\n+        recent.addAll(taskExecs);\n+\n+        add(new RecentExecPanel(\"recent\", pageRef));\n+    }\n+\n+    protected class AvailableJobsPanel extends AbstractSearchResultPanel<\n+        JobTO, JobTO, AvailableJobsProvider, BaseRestClient> {\n+\n+        private static final long serialVersionUID = -8214546246301342868L;\n+\n+        public AvailableJobsPanel(final String id, final PageReference pageRef) {\n+            super(id, new Builder<JobTO, JobTO, BaseRestClient>(null, pageRef) {\n+\n+                private static final long serialVersionUID = 8769126634538601689L;\n+\n+                @Override\n+                protected WizardMgtPanel<JobTO> newInstance(final String id) {\n+                    return new AvailableJobsPanel(id, pageRef);\n+                }\n+            }.disableCheckBoxes());\n+\n+            rows = ROWS;\n+            initResultTable();\n+            container.get(\"paginator\").setVisible(false);\n+        }\n+\n+        @Override\n+        protected AvailableJobsProvider dataProvider() {\n+            return new AvailableJobsProvider();\n+        }\n+\n+        @Override\n+        protected String paginatorRowsKey() {\n+            return StringUtils.EMPTY;\n+        }\n+\n+        @Override\n+        protected Collection<ActionLink.ActionType> getBulkActions() {\n+            return Collections.<ActionLink.ActionType>emptyList();\n+        }\n+\n+        @Override\n+        protected List<IColumn<JobTO, String>> getColumns() {\n+            final List<IColumn<JobTO, String>> columns = new ArrayList<>();\n+\n+            for (Field field : JobTO.class.getDeclaredFields()) {\n+                if (field != null && !Modifier.isStatic(field.getModifiers())) {\n+                    final String fieldName = field.getName();\n+                    if (field.getType().isArray()\n+                            || Collection.class.isAssignableFrom(field.getType())\n+                            || Map.class.isAssignableFrom(field.getType())) {\n+\n+                        columns.add(new PropertyColumn<JobTO, String>(\n+                                new ResourceModel(field.getName()), field.getName()));\n+                    } else {\n+                        columns.add(new PropertyColumn<JobTO, String>(\n+                                new ResourceModel(field.getName()), field.getName(), field.getName()) {\n+\n+                            private static final long serialVersionUID = -6902459669035442212L;\n+\n+                            @Override\n+                            public String getCssClass() {\n+                                String css = super.getCssClass();\n+                                if (\"referenceKey\".equals(fieldName)) {\n+                                    css = StringUtils.isBlank(css)\n+                                            ? \"medium_fixedsize\"\n+                                            : css + \" medium_fixedsize\";\n+                                }\n+                                return css;\n+                            }\n+                        });\n+                    }\n+                }\n+            }\n+\n+            return columns;\n+        }\n+\n+    }\n+\n+    protected final class AvailableJobsProvider extends SearchableDataProvider<JobTO> {\n+\n+        private static final long serialVersionUID = 3191573490219472572L;\n+\n+        private final SortableDataProviderComparator<JobTO> comparator;\n+\n+        private AvailableJobsProvider() {\n+            super(ROWS);\n+            setSort(\"running\", SortOrder.DESCENDING);\n+            comparator = new SortableDataProviderComparator<>(this);\n+        }\n+\n+        @Override\n+        public Iterator<JobTO> iterator(final long first, final long count) {\n+            Collections.sort(available, comparator);\n+            return available.subList((int) first, (int) first + (int) count).iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            return available.size();\n+        }\n+\n+        @Override\n+        public IModel<JobTO> model(final JobTO object) {\n+            return new CompoundPropertyModel<>(object);\n+        }\n+    }\n+\n+    protected class RecentExecPanel extends AbstractSearchResultPanel<\n+        AbstractExecTO, AbstractExecTO, RecentExecProvider, BaseRestClient> {\n+\n+        private static final long serialVersionUID = -8214546246301342868L;\n+\n+        public RecentExecPanel(final String id, final PageReference pageRef) {\n+            super(id, new Builder<AbstractExecTO, AbstractExecTO, BaseRestClient>(null, pageRef) {\n+\n+                private static final long serialVersionUID = 8769126634538601689L;\n+\n+                @Override\n+                protected WizardMgtPanel<AbstractExecTO> newInstance(final String id) {\n+                    return new RecentExecPanel(id, pageRef);\n+                }\n+            }.disableCheckBoxes());\n+\n+            rows = ROWS;\n+            initResultTable();\n+            container.get(\"paginator\").setVisible(false);\n+        }\n+\n+        @Override\n+        protected RecentExecProvider dataProvider() {\n+            return new RecentExecProvider();\n+        }\n+\n+        @Override\n+        protected String paginatorRowsKey() {\n+            return StringUtils.EMPTY;\n+        }\n+\n+        @Override\n+        protected Collection<ActionLink.ActionType> getBulkActions() {\n+            return Collections.<ActionLink.ActionType>emptyList();\n+        }\n+\n+        @Override\n+        protected List<IColumn<AbstractExecTO, String>> getColumns() {\n+            final List<IColumn<AbstractExecTO, String>> columns = new ArrayList<>();\n+\n+            for (Field field : AbstractExecTO.class.getDeclaredFields()) {\n+                if (field != null && !Modifier.isStatic(field.getModifiers())) {\n+                    final String fieldName = field.getName();\n+                    if (field.getType().isArray()\n+                            || Collection.class.isAssignableFrom(field.getType())\n+                            || Map.class.isAssignableFrom(field.getType())) {\n+\n+                        columns.add(new PropertyColumn<AbstractExecTO, String>(\n+                                new ResourceModel(field.getName()), field.getName()));\n+                    } else {\n+                        columns.add(new PropertyColumn<AbstractExecTO, String>(\n+                                new ResourceModel(field.getName()), field.getName(), field.getName()) {\n+\n+                            private static final long serialVersionUID = -6902459669035442212L;\n+\n+                            @Override\n+                            public String getCssClass() {\n+                                String css = super.getCssClass();\n+                                if (\"key\".equals(fieldName)) {\n+                                    css = StringUtils.isBlank(css)\n+                                            ? \"medium_fixedsize\"\n+                                            : css + \" medium_fixedsize\";\n+                                }\n+                                return css;\n+                            }\n+                        });\n+                    }\n+                }\n+            }\n+\n+            return columns;\n+        }\n+\n+    }\n+\n+    protected final class RecentExecProvider extends SearchableDataProvider<AbstractExecTO> {\n+\n+        private static final long serialVersionUID = 2835707012690698633L;\n+\n+        private final SortableDataProviderComparator<AbstractExecTO> comparator;\n+\n+        private RecentExecProvider() {\n+            super(ROWS);\n+            setSort(\"end\", SortOrder.DESCENDING);\n+            comparator = new SortableDataProviderComparator<>(this);\n+        }\n+\n+        @Override\n+        public Iterator<AbstractExecTO> iterator(final long first, final long count) {\n+            Collections.sort(recent, comparator);\n+            return recent.subList((int) first, (int) first + (int) count).iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            return recent.size();\n+        }\n+\n+        @Override\n+        public IModel<AbstractExecTO> model(final AbstractExecTO object) {\n+            return new CompoundPropertyModel<>(object);\n+        }\n+    }\n+\n+}"},{"sha":"a2dd0d17d1be7f5f12cc85cf30b6078b9ab13f31","filename":"client/console/src/main/resources/META-INF/resources/css/syncopeConsole.css","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -498,4 +498,8 @@ END - Result page\n   height: auto !important;\n   padding: 10px;\n   text-align: center;\n+}\n+\n+.nav-tabs-custom > .nav-tabs > li.active {\n+    border-top-color: #d2d6de !important;\n }\n\\ No newline at end of file"},{"sha":"4518d4a4b6ba207beb9fea4c837905f96ff92cac","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Dashboard.html","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDashboard.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDashboard.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDashboard.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n@@ -50,6 +49,12 @@ <h1>\n           <span wicket:id=\"anyByRealm\"/>\n         </div>\n       </div>\n+\n+      <div class=\"row\">\n+        <div class=\"col-md-12\">\n+          <span wicket:id=\"job\"/>\n+        </div>\n+      </div>\n     </section>\n   </wicket:extend>\n </html>\n\\ No newline at end of file"},{"sha":"ba1764b0ad931f66e911ac12d99dddcc24b874ad","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Layouts.html","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLayouts.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLayouts.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLayouts.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n@@ -17,7 +16,7 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" >\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:extend>\n \n     <section class=\"content-header\">"},{"sha":"24ce9b10c936ba2d019ca70c3b8880487373684d","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Logs.html","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogs.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogs.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogs.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file"},{"sha":"9d84dfa355fd2bf8b32b14f24b7db8ac685bf410","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Notifications.html","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FNotifications.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FNotifications.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FNotifications.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,5 +1,4 @@\n-<!DOCTYPE html>\n-<!--\n+s<!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n distributed with this work for additional information"},{"sha":"22c362f467f6970c3708bbcee12859d1394abafb","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Parameters.html","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FParameters.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FParameters.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FParameters.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file"},{"sha":"be6320a8c9a5b9e1d8d0df3ee4b62a6cd7da807a","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Policies.html","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file"},{"sha":"e579a2a4e5dae58b1d79ba5c3e6846576a024160","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Realms.html","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n@@ -17,8 +16,7 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://xmlns.jcp.org/jsf/composite\">\n-  <head><title>Realms</title></head>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:extend>\n     <section class=\"content-header\">\n       <h1>"},{"sha":"f56087677dc0aaebde7f5282fe78034d8020b5be","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Reports.html","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file"},{"sha":"37e5ac849d369003ffc734c84038a3626913cc18","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Roles.html","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRoles.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRoles.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRoles.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file"},{"sha":"58d050bfc90f0b4d23ac85fcd421d6b53be964a5","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/SecurityQuestions.html","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSecurityQuestions.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSecurityQuestions.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSecurityQuestions.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file"},{"sha":"41d3c32521051580262f723a3bdca66c3bcbf58e","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Types.html","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FTypes.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FTypes.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FTypes.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file"},{"sha":"f26791ecfdca267d9e9c94bb07a0131a0bf2bd84","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Workflow.html","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWorkflow.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWorkflow.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWorkflow.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file"},{"sha":"b52cc4599256b984cb91874231b08ddc80014001","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/AccountPolicy.html","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccountPolicy.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccountPolicy.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccountPolicy.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n@@ -17,13 +16,8 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://xmlns.jcp.org/jsf/composite\">\n-  <body>\n-    <wicket:panel>\n-      <h1>Account Policy</h1>\n-    </wicket:panel>\n-  </body>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <h1>Account Policy</h1>\n+  </wicket:panel>\n </html>\n\\ No newline at end of file"},{"sha":"b83a98ac662281c28bb4f8c20dd37eb37aa048e4","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/AnyAjaxTabbedPanel.html","status":"modified","additions":13,"deletions":17,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyAjaxTabbedPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyAjaxTabbedPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyAjaxTabbedPanel.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n@@ -18,21 +17,18 @@\n under the License.\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n-  <head><title></title></head>\n-  <body>\n-    <wicket:panel>\n-      <div class=\"tabbable tabs-left\" style=\"margin-right: 0; border-right: 0;\">\n-        <ul class=\"nav nav-tabs\" style=\"margin-right: 0; border-right: 0;\" wicket:id=\"tabs-container\">\n-          <li wicket:id=\"tabs\">\n-            <a data-toggle=\"tab\" href=\"#\" wicket:id=\"link\">\n-              <span wicket:id=\"title\">[tab title]</span>\n-            </a>\n-          </li>\n-        </ul>\n-        <div class=\"tab-content\" style=\"min-height: 100%; padding-left: 20px; border-left: 1px solid #ddd;\">\n-          <div wicket:id=\"panel\" class=\"tab-pane active\">[tab]</div>\n-        </div>\n+  <wicket:panel>\n+    <div class=\"tabbable tabs-left\" style=\"margin-right: 0; border-right: 0;\">\n+      <ul class=\"nav nav-tabs\" style=\"margin-right: 0; border-right: 0;\" wicket:id=\"tabs-container\">\n+        <li wicket:id=\"tabs\">\n+          <a data-toggle=\"tab\" href=\"#\" wicket:id=\"link\">\n+            <span wicket:id=\"title\">[tab title]</span>\n+          </a>\n+        </li>\n+      </ul>\n+      <div class=\"tab-content\" style=\"min-height: 100%; padding-left: 20px; border-left: 1px solid #ddd;\">\n+        <div wicket:id=\"panel\" class=\"tab-pane active\">[tab]</div>\n       </div>\n-    </wicket:panel>\n-  </body>\n+    </div>\n+  </wicket:panel>\n </html>\n\\ No newline at end of file"},{"sha":"6f272aeba9229b68befe8c126ddc44d54cda3ca7","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/AnyTypeClassDetailsPanel.html","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassDetailsPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassDetailsPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassDetailsPanel.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file"},{"sha":"80a7cfda33ac12b060de99b75a1fddc3aac70731","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/AnyTypeMenuItem.html","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeMenuItem.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeMenuItem.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeMenuItem.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n@@ -17,13 +16,8 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://xmlns.jcp.org/jsf/composite\">\n-  <body>\n-    <wicket:panel>\n-      <a data-toggle=\"tab\" wicket:id=\"tabLink\"><span wicket:id=\"tabLabel\"></span></a>\n-    </wicket:panel>\n-  </body>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <a data-toggle=\"tab\" wicket:id=\"tabLink\"><span wicket:id=\"tabLabel\"></span></a>\n+  </wicket:panel>\n </html>\n\\ No newline at end of file"},{"sha":"a4cd02460878ef325c24642e9bfed41e260ed14d","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/ConsoleLogPanel.html","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -16,8 +16,7 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://xmlns.jcp.org/jsf/composite\">\n-  <head><title></title></head>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:panel>\n     <span wicket:id=\"loggerContainer\">\n       <div class=\"logs\">"},{"sha":"a4cd02460878ef325c24642e9bfed41e260ed14d","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/CoreLogPanel.html","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -16,8 +16,7 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://xmlns.jcp.org/jsf/composite\">\n-  <head><title></title></head>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:panel>\n     <span wicket:id=\"loggerContainer\">\n       <div class=\"logs\">"},{"sha":"4ce1ac97759f9f3b9ad4ed3b893423d314f89793","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/ParametersCreateModalPanel.html","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateModalPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateModalPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateModalPanel.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file"},{"sha":"6f94ce59ea013ce0f1476059b0a0175029cd5194","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/ParametersEditModalPanel.html","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersEditModalPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersEditModalPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersEditModalPanel.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file"},{"sha":"5ea16b680c9d8c4d8759c42596e29ada2453e099","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/PasswordPolicy.html","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPasswordPolicy.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPasswordPolicy.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPasswordPolicy.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n@@ -17,13 +16,8 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://xmlns.jcp.org/jsf/composite\">\n-  <body>\n-    <wicket:panel>\n-      <h1>Password Policy</h1>\n-    </wicket:panel>\n-  </body>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <h1>Password Policy</h1>\n+  </wicket:panel>\n </html>\n\\ No newline at end of file"},{"sha":"8622f5d348bb47aacbecfc3669faf68ad3b8046e","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/PlainSchemaDetails.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -16,7 +16,7 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://xmlns.jcp.org/jsf/composite\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:panel>\n     <form wicket:id=\"form\">\n       <div class=\"form-group\">"},{"sha":"c674ea80816a47e9c24ab342334743ebee1161a3","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/Realm.html","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n@@ -17,7 +16,7 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://xmlns.jcp.org/jsf/composite\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:panel>\n     <div wicket:id=\"tabbedPanel\"></div>\n   </wicket:panel>"},{"sha":"c5282d14084c7c2c3b2bd7dff448979745a06b8d","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/RealmDetails.html","status":"modified","additions":14,"deletions":18,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n@@ -17,23 +16,20 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://xmlns.jcp.org/jsf/composite\">\n-  <head><title></title></head>\n-  <body>\n-    <wicket:panel>\n-      <div wicket:id=\"container\" class=\"summarize\">\n-        <span wicket:id=\"name\">[name]</span>\n-        <span wicket:id=\"fullPath\">[fullPath]</span>\n-        <span wicket:id=\"accountPolicy\">[accountPolicy]</span>\n-        <span wicket:id=\"passwordPolicy\">[passwordPolicy]</span>\n-      </div>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div wicket:id=\"container\" class=\"summarize\">\n+      <span wicket:id=\"name\">[name]</span>\n+      <span wicket:id=\"fullPath\">[fullPath]</span>\n+      <span wicket:id=\"accountPolicy\">[accountPolicy]</span>\n+      <span wicket:id=\"passwordPolicy\">[passwordPolicy]</span>\n+    </div>\n \n-      <span wicket:id=\"actions\"></span>\n+    <span wicket:id=\"actions\"></span>\n \n-      <wicket:fragment wicket:id=\"emptyFragment\"></wicket:fragment>\n-      <wicket:fragment wicket:id=\"actionsFragment\">\n-        <div wicket:id=\"actions\" class=\"modal-footer circular-actions\"/>\n-      </wicket:fragment>\n-    </wicket:panel>\n-  </body>\n+    <wicket:fragment wicket:id=\"emptyFragment\"></wicket:fragment>\n+    <wicket:fragment wicket:id=\"actionsFragment\">\n+      <div wicket:id=\"actions\" class=\"modal-footer circular-actions\"/>\n+    </wicket:fragment>\n+  </wicket:panel>\n </html>\n\\ No newline at end of file"},{"sha":"b97f8b8e2be6f42f1b0c439d7225efa95518edb0","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/RealmSidebarPanel.html","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmSidebarPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmSidebarPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmSidebarPanel.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file"},{"sha":"142322be7016b69a7856be23e61001675364cf3a","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/RelationshipTypeModalPanel.html","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypeModalPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypeModalPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypeModalPanel.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file"},{"sha":"6adb0b91fb44d98519f796a1ce74b3b03d084bdf","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/ResourceDetailsPanel.html","status":"modified","additions":35,"deletions":43,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceDetailsPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceDetailsPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceDetailsPanel.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -16,59 +16,51 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n \n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://xmlns.jcp.org/jsf/composite\">\n-  <head>\n-    <title>Resource details panel</title>\n-  </head>\n-  <body>\n-    <wicket:panel>\n-\n-      <div wicket:id=\"container\" class=\"summarize\">\n-        <div class=\"form-group\">\n-          <span wicket:id=\"name\">[name]</span>\n-        </div>\n+    <div wicket:id=\"container\" class=\"summarize\">\n+      <div class=\"form-group\">\n+        <span wicket:id=\"name\">[name]</span>\n+      </div>\n \n-        <div class=\"form-group\">\n-          <span wicket:id=\"connector\">[connector]</span>\n-        </div>\n+      <div class=\"form-group\">\n+        <span wicket:id=\"connector\">[connector]</span>\n+      </div>\n \n-        <div class=\"form-group\">\n-          <span wicket:id=\"enforceMandatoryCondition\">[enforceMandatoryCondition]</span>\n-        </div>\n+      <div class=\"form-group\">\n+        <span wicket:id=\"enforceMandatoryCondition\">[enforceMandatoryCondition]</span>\n+      </div>\n \n-        <div class=\"form-group\">\n-          <span wicket:id=\"propagationPriority\">[propagationPriority]</span>\n-        </div>\n+      <div class=\"form-group\">\n+        <span wicket:id=\"propagationPriority\">[propagationPriority]</span>\n+      </div>\n \n-        <div class=\"form-group\">\n-          <span wicket:id=\"randomPwdIfNotProvided\">[randomPwdIfNotProvided]</span>\n-        </div>\n+      <div class=\"form-group\">\n+        <span wicket:id=\"randomPwdIfNotProvided\">[randomPwdIfNotProvided]</span>\n+      </div>\n \n-        <div class=\"form-group\">\n-          <span wicket:id=\"actionsClasses\">[actionsClasses]</span>\n-        </div>\n+      <div class=\"form-group\">\n+        <span wicket:id=\"actionsClasses\">[actionsClasses]</span>\n+      </div>\n \n-        <div class=\"form-group\">\n-          <span wicket:id=\"createTraceLevel\">[createTraceLevel]</span>\n-        </div>\n+      <div class=\"form-group\">\n+        <span wicket:id=\"createTraceLevel\">[createTraceLevel]</span>\n+      </div>\n \n-        <div class=\"form-group\">\n-          <span wicket:id=\"updateTraceLevel\">[updateTraceLevel]</span>\n-        </div>\n+      <div class=\"form-group\">\n+        <span wicket:id=\"updateTraceLevel\">[updateTraceLevel]</span>\n+      </div>\n \n-        <div class=\"form-group\">\n-          <span wicket:id=\"deleteTraceLevel\">[deleteTraceLevel]</span>\n-        </div>\n+      <div class=\"form-group\">\n+        <span wicket:id=\"deleteTraceLevel\">[deleteTraceLevel]</span>\n+      </div>\n \n-        <div class=\"form-group\">\n-          <span wicket:id=\"syncTraceLevel\">[syncTraceLevel]</span>\n-        </div>\n+      <div class=\"form-group\">\n+        <span wicket:id=\"syncTraceLevel\">[syncTraceLevel]</span>\n       </div>\n+    </div>\n \n-      <span wicket:id=\"systeminformation\">[System Information]</span>\n-    </wicket:panel>\n-  </body>\n+    <span wicket:id=\"systeminformation\">[System Information]</span>\n+  </wicket:panel>\n </html>"},{"sha":"ce1be06a561e50d13d168fdf5cfa24484c4728b6","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/SchemasPanel.html","status":"modified","additions":4,"deletions":14,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemasPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemasPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemasPanel.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n@@ -17,17 +16,8 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://xmlns.jcp.org/jsf/composite\">\n-  <body>\n-    <wicket:panel>\n-      <div wicket:id=\"accordionPanel\"></div>\n-<!--      <div class=\"modal-footer\">\n-        <a wicket:message=\"title:createSchema\" wicket:id=\"createSchema\">\n-          <i class=\"glyphicon glyphicon-duplicate\"></i>\n-        </a>\n-      </div>-->\n-    </wicket:panel>\n-  </body>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div wicket:id=\"accordionPanel\"></div>\n+  </wicket:panel>\n </html>\n\\ No newline at end of file"},{"sha":"b48c089479c933650c4c01ef48aed72b7bef0b2d","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/SecurityQuestionsModalPanel.html","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsModalPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsModalPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsModalPanel.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file"},{"sha":"c5abcbab241563fdd6443c0741873f372631afde","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel.html","status":"modified","additions":75,"deletions":78,"changes":153,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -16,94 +16,91 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://xmlns.jcp.org/jsf/composite\">\n-  <head><title>toggle menu</title></head>\n-  <body>\n-    <wicket:head>\n-      <style type=\"text/css\">\n-        div.topology-menu {\n-          display: none;\n-          border-radius: 5px;\n-          background-color: rgba(0, 0, 0, 0.45);\n-          color: #fff;\n-          position: absolute;\n-          right: 5px;\n-          top: 130px;\n-          width: auto;\n-          min-width: 250px;\n-          z-index: 999;\n-        }\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:head>\n+    <style type=\"text/css\">\n+      div.topology-menu {\n+        display: none;\n+        border-radius: 5px;\n+        background-color: rgba(0, 0, 0, 0.45);\n+        color: #fff;\n+        position: absolute;\n+        right: 5px;\n+        top: 130px;\n+        width: auto;\n+        min-width: 250px;\n+        z-index: 999;\n+      }\n \n-        div.topology-menu ul.menu {\n-          list-style: outside none none;\n-          margin: 0;\n-          padding: 0;\n-          list-style: outside none none;\n-        }\n+      div.topology-menu ul.menu {\n+        list-style: outside none none;\n+        margin: 0;\n+        padding: 0;\n+        list-style: outside none none;\n+      }\n \n-        div.topology-menu ul.menu li {\n-          display: block;\n-          line-height: 2em;\n-          vertical-align: middle;\n-          padding: 5px 10px;\n-        }\n+      div.topology-menu ul.menu li {\n+        display: block;\n+        line-height: 2em;\n+        vertical-align: middle;\n+        padding: 5px 10px;\n+      }\n \n-        div.topology-menu ul.menu li a {\n-          position: relative;\n-          padding: 12px 5px 12px 15px;\n-        }\n+      div.topology-menu ul.menu li a {\n+        position: relative;\n+        padding: 12px 5px 12px 15px;\n+      }\n \n-        div.topology-menu div.header a:active,\n-        div.topology-menu div.header a:link,\n-        div.topology-menu div.header a:visited,\n-        div.topology-menu ul a:active,\n-        div.topology-menu ul a:link,\n-        div.topology-menu ul a:visited{\n-          color: #fff;\n-        }\n+      div.topology-menu div.header a:active,\n+      div.topology-menu div.header a:link,\n+      div.topology-menu div.header a:visited,\n+      div.topology-menu ul a:active,\n+      div.topology-menu ul a:link,\n+      div.topology-menu ul a:visited{\n+        color: #fff;\n+      }\n \n-        div.topology-menu ul li:hover {\n-          color: #fff;\n-          background-color: rgba(0, 0, 0, 0.2);\n-          z-index: 1000;\n-          font-weight: bold;\n-        }\n+      div.topology-menu ul li:hover {\n+        color: #fff;\n+        background-color: rgba(0, 0, 0, 0.2);\n+        z-index: 1000;\n+        font-weight: bold;\n+      }\n \n-        div.topology-menu div.header {\n-          background-color: rgba(0, 0, 0, 0);\n-          position: relative;\n-          font-size: 1.5em;\n-          padding-bottom: 5px;\n-          border-bottom: 1px solid #aaa;\n-        }\n+      div.topology-menu div.header {\n+        background-color: rgba(0, 0, 0, 0);\n+        position: relative;\n+        font-size: 1.5em;\n+        padding-bottom: 5px;\n+        border-bottom: 1px solid #aaa;\n+      }\n \n-        div.topology-menu div.header a {\n-          display: inline-table;\n-          padding: 6px 2px 0px 0px;\n-        }\n+      div.topology-menu div.header a {\n+        display: inline-table;\n+        padding: 6px 2px 0px 0px;\n+      }\n \n-        div.topology-menu div.header .close {\n-          text-align: right;\n-        }\n-      </style>\n-    </wicket:head>\n-    <wicket:panel>\n-      <div wicket:id=\"togglePanelContainer\" class=\"topology-menu inactive-topology-menu\">\n-        <div class=\"header\">\n-          <div class=\"label\">\n-            <label wicket:id=\"label\"/>\n-          </div>\n-          <div class=\"close\">\n-            <a wicket:id=\"close\" href=\"#\"><i class=\"glyphicon glyphicon-remove\"></i></a>\n-          </div>\n+      div.topology-menu div.header .close {\n+        text-align: right;\n+      }\n+    </style>\n+  </wicket:head>\n+  <wicket:panel>\n+    <div wicket:id=\"togglePanelContainer\" class=\"topology-menu inactive-topology-menu\">\n+      <div class=\"header\">\n+        <div class=\"label\">\n+          <label wicket:id=\"label\"/>\n+        </div>\n+        <div class=\"close\">\n+          <a wicket:id=\"close\" href=\"#\"><i class=\"glyphicon glyphicon-remove\"></i></a>\n         </div>\n-        <wicket:child/>\n       </div>\n+      <wicket:child/>\n+    </div>\n \n-      <span wicket:id=\"outherObjectsRepeater\">\n-        <div wicket:id=\"outher\"/>\n-      </span>\n+    <span wicket:id=\"outherObjectsRepeater\">\n+      <div wicket:id=\"outher\"/>\n+    </span>\n \n-    </wicket:panel>\n-  </body>\n+  </wicket:panel>\n </html>"},{"sha":"e4c56113833fdf4083eeeebe6b1ffc89e84bd1ef","filename":"client/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskSearchResultPanel.html","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskSearchResultPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskSearchResultPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskSearchResultPanel.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file"},{"sha":"356e28f7b8906ac11653da9329bd41de7a03c11c","filename":"client/console/src/main/resources/org/apache/syncope/client/console/tasks/StartAtTogglePanel.html","status":"modified","additions":34,"deletions":37,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FStartAtTogglePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FStartAtTogglePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FStartAtTogglePanel.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -16,45 +16,42 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://xmlns.jcp.org/jsf/composite\">\n-  <head><title>toggle menu</title></head>\n-  <body>\n-    <wicket:head>\n-      <style type=\"text/css\">\n-        div#startAt {\n-          background-color: rgba(98, 98, 98, 0.98) !important;\n-          color: #CCC;\n-          right: 5px !important;\n-          top: 100px !important;\n-          min-width: 300px;\n-          min-height: 130px !important;\n-          z-index: 6000 !important;\n-        }\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:head>\n+    <style type=\"text/css\">\n+      div#startAt {\n+        background-color: rgba(98, 98, 98, 0.98) !important;\n+        color: #CCC;\n+        right: 5px !important;\n+        top: 100px !important;\n+        min-width: 300px;\n+        min-height: 130px !important;\n+        z-index: 6000 !important;\n+      }\n \n-        div#startAtContainer {\n-          padding: 15px;\n-        }\n+      div#startAtContainer {\n+        padding: 15px;\n+      }\n \n-        div#startAtContainer input {\n-          background-color: rgba(200, 200, 200, 0.60) !important;\n-        }\n-      </style>\n-    </wicket:head>\n-    <wicket:extend>\n-      <div id=\"startAtContainer\">\n-        <form wicket:id=\"startAtForm\">\n-          <div class=\"form-group\">\n-            <span wicket:id=\"startAtCheck\"/>\n-          </div>\n-          <div class=\"input-group\">\n-            <span wicket:id=\"startAtDate\"/>\n+      div#startAtContainer input {\n+        background-color: rgba(200, 200, 200, 0.60) !important;\n+      }\n+    </style>\n+  </wicket:head>\n+  <wicket:extend>\n+    <div id=\"startAtContainer\">\n+      <form wicket:id=\"startAtForm\">\n+        <div class=\"form-group\">\n+          <span wicket:id=\"startAtCheck\"/>\n+        </div>\n+        <div class=\"input-group\">\n+          <span wicket:id=\"startAtDate\"/>\n \n-            <div class=\"input-group-addon\">\n-              <a wicket:id=\"startAt\"><i class=\"fa fa-gear\"></i></a>\n-            </div>\n+          <div class=\"input-group-addon\">\n+            <a wicket:id=\"startAt\"><i class=\"fa fa-gear\"></i></a>\n           </div>\n-        </form>\n-      </div>\n-    </wicket:extend>\n-  </body>\n+        </div>\n+      </form>\n+    </div>\n+  </wicket:extend>\n </html>"},{"sha":"4dc40ed90fc3fa77b85feadc4e6a664b48d3aa0d","filename":"client/console/src/main/resources/org/apache/syncope/client/console/topology/Topology.html","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file"},{"sha":"70d08298fbddc291041b28609500bd99b58c1ebe","filename":"client/console/src/main/resources/org/apache/syncope/client/console/topology/TopologyNodePanel.html","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyNodePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyNodePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyNodePanel.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file"},{"sha":"f0e633fec32b9969e4d7e26d5f1cd3021fe78c01","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wicket/ajax/markup/html/navigation/paging/AjaxDataNavigationToolbar.html","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2Fmarkup%2Fhtml%2Fnavigation%2Fpaging%2FAjaxDataNavigationToolbar.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2Fmarkup%2Fhtml%2Fnavigation%2Fpaging%2FAjaxDataNavigationToolbar.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2Fmarkup%2Fhtml%2Fnavigation%2Fpaging%2FAjaxDataNavigationToolbar.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file"},{"sha":"76ba597eff267d096535ec6b1caae71ab241e577","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/bootstrap/tabs/Accordion.html","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fbootstrap%2Ftabs%2FAccordion.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fbootstrap%2Ftabs%2FAccordion.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fbootstrap%2Ftabs%2FAccordion.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n@@ -22,7 +21,7 @@\n     <div class=\"panel box box-primary\" wicket:id=\"tabs\">\n       <div class=\"box-header with-border\">\n         <h4  class=\"box-title\">\n-          <a wicket:id=\"title\" class=\"accordion-toggle\" data-toggle=\"collapse\" >Title</a>\n+          <a wicket:id=\"title\" class=\"accordion-toggle\" data-toggle=\"collapse\">Title</a>\n         </h4>\n       </div>\n       <div wicket:id=\"body\" class=\"panel-collapse collapse\">"},{"sha":"d77da3da8580c70e45b39a4bec1864bac9b1017b","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/preview/BinaryCertPreviewer.html","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FBinaryCertPreviewer.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FBinaryCertPreviewer.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FBinaryCertPreviewer.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -1,4 +1,3 @@\n-<!DOCTYPE html>\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n@@ -18,10 +17,7 @@\n under the License.\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n-  <head><title></title></head>\n-  <body>\n-    <wicket:extend>\n-      <div wicket:id = \"certCommonName\">[certCommonName]</div>\n-    </wicket:extend>\n-  </body>\n+  <wicket:extend>\n+    <div wicket:id = \"certCommonName\">[certCommonName]</div>\n+  </wicket:extend>\n </html>"},{"sha":"ccc5ab84211e34cdd6c21330865cc89288e6d510","filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/JobWidget.html","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -0,0 +1,37 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div class=\"nav-tabs-custom\" style=\"cursor: move;\">\n+      <ul class=\"nav nav-tabs pull-right ui-sortable-handle\">\n+        <li class=\"active\"><a data-toggle=\"tab\" href=\"#running\">Available</a></li>\n+        <li><a data-toggle=\"tab\" href=\"#recent\">Recent</a></li>\n+        <li class=\"pull-left header\"><i class=\"fa fa-gears\"></i> Jobs</li>\n+      </ul>\n+      <div class=\"tab-content no-padding\">\n+        <div style=\"position: relative;\" id=\"running\" class=\"chart tab-pane active\">\n+          <span wicket:id=\"available\"/>\n+        </div>\n+        <div style=\"position: relative;\" id=\"recent\" class=\"chart tab-pane\">\n+          <span wicket:id=\"recent\"/>\n+        </div>\n+      </div>\n+    </div>\n+  </wicket:panel>\n+</html>\n\\ No newline at end of file"},{"sha":"a3d33aca9e2ff55700ccfaa1bcaa493e92a6198a","filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/JobWidget.properties","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.properties?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -0,0 +1,22 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+referenceKey=Key\n+referenceName=Name\n+running=Running\n+scheduled=Scheduled\n+start=Start\n+message=Message"},{"sha":"a3d33aca9e2ff55700ccfaa1bcaa493e92a6198a","filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/JobWidget_it.properties","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget_it.properties?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -0,0 +1,22 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+referenceKey=Key\n+referenceName=Name\n+running=Running\n+scheduled=Scheduled\n+start=Start\n+message=Message"},{"sha":"a3d33aca9e2ff55700ccfaa1bcaa493e92a6198a","filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/JobWidget_pt_BR.properties","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget_pt_BR.properties?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -0,0 +1,22 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+referenceKey=Key\n+referenceName=Name\n+running=Running\n+scheduled=Scheduled\n+start=Start\n+message=Message"},{"sha":"643dc1cc9f00ec2ae699428accc89d44341e97a9","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/provision/ProvisionWizardBuilder$ConnObjectLink.html","status":"modified","additions":11,"deletions":14,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24ConnObjectLink.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24ConnObjectLink.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24ConnObjectLink.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -16,18 +16,15 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://xmlns.jcp.org/jsf/composite\">\n-  <head><title></title></head>\n-  <body>\n-    <wicket:panel>\n-      <span wicket:id=\"connObjectLinkContainer\">\n-        <div class=\"form-group\">\n-          <span wicket:id=\"connObjectLinkCheckbox\">[connObjectLinkCheckbox]</span>\n-        </div>\n-        <div class=\"form-group\">\n-          <span wicket:id=\"connObjectLink\">[connObjectLink]</span>\n-        </div>\n-      </span>\n-    </wicket:panel>\n-  </body>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <span wicket:id=\"connObjectLinkContainer\">\n+      <div class=\"form-group\">\n+        <span wicket:id=\"connObjectLinkCheckbox\">[connObjectLinkCheckbox]</span>\n+      </div>\n+      <div class=\"form-group\">\n+        <span wicket:id=\"connObjectLink\">[connObjectLink]</span>\n+      </div>\n+    </span>\n+  </wicket:panel>\n </html>\n\\ No newline at end of file"},{"sha":"11b1a5259058e6902e02b9f380d437cc5cdb4442","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/provision/ProvisionWizardBuilder$Mapping.html","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24Mapping.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24Mapping.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24Mapping.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -16,11 +16,8 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://xmlns.jcp.org/jsf/composite\">\n-  <head><title></title></head>\n-  <body>\n-    <wicket:panel>\n-      <span wicket:id=\"mapping\" />\n-    </wicket:panel>\n-  </body>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <span wicket:id=\"mapping\" />\n+  </wicket:panel>\n </html>\n\\ No newline at end of file"},{"sha":"7b505e48f73cfc80f0c709b729476d8b65192757","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/provision/ProvisionWizardBuilder$ObjectType.html","status":"modified","additions":12,"deletions":15,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24ObjectType.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24ObjectType.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder%24ObjectType.html?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -16,20 +16,17 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://xmlns.jcp.org/jsf/composite\">\n-  <head><title></title></head>\n-  <body>\n-    <wicket:panel >\n-      <div wicket:id=\"container\">\n-        <div class=\"form-group\">\n-          <label>Object Type</label>\n-          <span wicket:id=\"type\"/>\n-        </div>\n-        <div class=\"form-group\">\n-          <label>Object Class</label>\n-          <input type=\"text\" placeholder=\"Object Class ...\" class=\"form-control\"  wicket:id=\"class\">\n-        </div>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div wicket:id=\"container\">\n+      <div class=\"form-group\">\n+        <label>Object Type</label>\n+        <span wicket:id=\"type\"/>\n       </div>\n-    </wicket:panel>\n-  </body>\n+      <div class=\"form-group\">\n+        <label>Object Class</label>\n+        <input type=\"text\" placeholder=\"Object Class ...\" class=\"form-control\"  wicket:id=\"class\">\n+      </div>\n+    </div>\n+  </wicket:panel>\n </html>\n\\ No newline at end of file"},{"sha":"a50429df2bc85d0c0ff3ef8a6f227cf8a3af8967","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/JobTO.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FJobTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FJobTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FJobTO.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import java.util.Date;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"job\")\n+@XmlType\n+public class JobTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -7254450981751326711L;\n+\n+    private Long referenceKey;\n+\n+    private String referenceName;\n+\n+    private boolean running;\n+\n+    private boolean scheduled;\n+\n+    private String status;\n+\n+    private Date start;\n+\n+    public Long getReferenceKey() {\n+        return referenceKey;\n+    }\n+\n+    public void setReferenceKey(final Long referenceKey) {\n+        this.referenceKey = referenceKey;\n+    }\n+\n+    public String getReferenceName() {\n+        return referenceName;\n+    }\n+\n+    public void setReferenceName(final String referenceName) {\n+        this.referenceName = referenceName;\n+    }\n+\n+    public boolean isRunning() {\n+        return running;\n+    }\n+\n+    public void setRunning(final boolean running) {\n+        this.running = running;\n+    }\n+\n+    public boolean isScheduled() {\n+        return scheduled;\n+    }\n+\n+    public void setScheduled(final boolean scheduled) {\n+        this.scheduled = scheduled;\n+    }\n+\n+    public String getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(final String status) {\n+        this.status = status;\n+    }\n+\n+    public Date getStart() {\n+        return start == null\n+                ? null\n+                : new Date(start.getTime());\n+    }\n+\n+    public void setStart(final Date start) {\n+        this.start = start == null\n+                ? null\n+                : new Date(start.getTime());\n+    }\n+}"},{"sha":"314c51c0e4cfe35e8545c8dc82592e610686f1a4","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/TaskExecTO.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FTaskExecTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FTaskExecTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FTaskExecTO.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -20,6 +20,7 @@\n \n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.types.TaskType;\n \n @XmlRootElement(name = \"taskExec\")\n @XmlType\n@@ -29,11 +30,22 @@ public class TaskExecTO extends AbstractExecTO {\n \n     private long task;\n \n+    private TaskType type;\n+\n     public long getTask() {\n         return task;\n     }\n \n     public void setTask(final long task) {\n         this.task = task;\n     }\n+\n+    public TaskType getType() {\n+        return type;\n+    }\n+\n+    public void setType(final TaskType type) {\n+        this.type = type;\n+    }\n+\n }"},{"sha":"3a43807a31ac9073c284be0c3bb48d33f47ed0dd","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/JobStatusType.java","status":"removed","additions":0,"deletions":30,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/924a951794828b79f417ccdc5c9e9a47fa0f3d84/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJobStatusType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/924a951794828b79f417ccdc5c9e9a47fa0f3d84/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJobStatusType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJobStatusType.java?ref=924a951794828b79f417ccdc5c9e9a47fa0f3d84","patch":"@@ -1,30 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.types;\n-\n-import javax.xml.bind.annotation.XmlEnum;\n-\n-@XmlEnum\n-public enum JobStatusType {\n-\n-    ALL,\n-    RUNNING,\n-    SCHEDULED;\n-\n-}"},{"sha":"0b3a735297883df01f15277af33029b0e4046634","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/JAXRSService.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -42,4 +42,6 @@ public interface JAXRSService {\n \n     String PARAM_CONNID_PAGED_RESULTS_COOKIE = \"connIdPagedResultsCookie\";\n \n+    String PARAM_MAX = \"max\";\n+\n }"},{"sha":"2529ec6dc9abe69661b4cc7acb638e0afef83215","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/NotificationService.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FNotificationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FNotificationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FNotificationService.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -28,9 +28,12 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.NotificationTO;\n+import org.apache.syncope.common.lib.types.JobAction;\n \n /**\n  * REST operations for notifications.\n@@ -86,4 +89,21 @@ public interface NotificationService extends JAXRSService {\n     @DELETE\n     @Path(\"{key}\")\n     void delete(@NotNull @PathParam(\"key\") Long key);\n+\n+    /**\n+     * Returns details about notification job.\n+     *\n+     * @return details about notification job\n+     */\n+    @GET\n+    @Path(\"job\")\n+    @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    JobTO getJob();\n+\n+    /**\n+     * Executes an action on the notification job.\n+     *\n+     * @param action action to execute\n+     */\n+    void actionJob(@QueryParam(\"action\") JobAction action);\n }"},{"sha":"7914eb0b326ff230d6abbf11d48f95b28d161906","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java","status":"modified","additions":20,"deletions":8,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -19,12 +19,13 @@\n package org.apache.syncope.common.rest.api.service;\n \n import java.util.List;\n+import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n import javax.ws.rs.GET;\n-import javax.ws.rs.MatrixParam;\n import javax.ws.rs.POST;\n import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n@@ -34,10 +35,10 @@\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.JobAction;\n-import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n@@ -97,6 +98,17 @@ public interface ReportService extends JAXRSService {\n     @Path(\"{key}\")\n     void delete(@NotNull @PathParam(\"key\") Long key);\n \n+    /**\n+     * Returns the list of recently completed report executions, ordered by end date descendent.\n+     *\n+     * @param max the maximum number of executions to return\n+     * @return list of recently completed report executions, ordered by end date descendent\n+     */\n+    @GET\n+    @Path(\"executions/recent\")\n+    @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<ReportExecTO> listRecentExecutions(@Min(1) @QueryParam(JAXRSService.PARAM_MAX) @DefaultValue(\"25\") int max);\n+\n     /**\n      * Deletes report execution with matching key.\n      *\n@@ -143,15 +155,15 @@ Response exportExecutionResult(\n             @QueryParam(\"format\") ReportExecExportFormat fmt);\n \n     /**\n-     * List report jobs of the given type.\n+     * List report jobs (running and / or scheduled).\n      *\n-     * @param type of report job\n-     * @return list of report jobs of the given type\n+     * @param max the maximum number of jobs to return\n+     * @return report jobs (running and / or scheduled)\n      */\n     @GET\n     @Path(\"jobs\")\n     @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<ReportExecTO> listJobs(@MatrixParam(\"type\") JobStatusType type);\n+    List<JobTO> listJobs(@Min(1) @QueryParam(JAXRSService.PARAM_MAX) @DefaultValue(\"25\") int max);\n \n     /**\n      * Executes an action on an existing report's job.\n@@ -160,6 +172,6 @@ Response exportExecutionResult(\n      * @param action action to execute\n      */\n     @POST\n-    @Path(\"{key}\")\n-    void actionJob(@PathParam(\"key\") Long key, @QueryParam(\"action\") JobAction action);\n+    @Path(\"/job/{key}\")\n+    void actionJob(@NotNull @PathParam(\"key\") Long key, @QueryParam(\"action\") JobAction action);\n }"},{"sha":"15eb35813c319d382460361661eccad756967afc","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":19,"deletions":8,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -19,13 +19,13 @@\n package org.apache.syncope.common.rest.api.service;\n \n import java.util.List;\n+import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.DefaultValue;\n import javax.ws.rs.GET;\n-import javax.ws.rs.MatrixParam;\n import javax.ws.rs.POST;\n import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n@@ -37,11 +37,11 @@\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.types.JobAction;\n-import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.beans.TaskExecQuery;\n@@ -119,6 +119,17 @@ <T extends AbstractTaskTO> T read(\n     @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     PagedResult<TaskExecTO> listExecutions(@BeanParam TaskExecQuery query);\n \n+    /**\n+     * Returns the list of recently completed task executions, ordered by end date descendent.\n+     *\n+     * @param max the maximum number of executions to return\n+     * @return list of recently completed task executions, ordered by end date descendent\n+     */\n+    @GET\n+    @Path(\"executions/recent\")\n+    @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<TaskExecTO> listRecentExecutions(@Min(1) @QueryParam(JAXRSService.PARAM_MAX) @DefaultValue(\"25\") int max);\n+\n     /**\n      * Deletes the task execution matching the provided key.\n      *\n@@ -163,15 +174,15 @@ <T extends AbstractTaskTO> T read(\n     BulkActionResult bulk(@NotNull BulkAction bulkAction);\n \n     /**\n-     * List task jobs of the given type.\n+     * List task jobs (running and / or scheduled).\n      *\n-     * @param type of task job\n-     * @return list task jobs of the given type\n+     * @param max the maximum number of jobs to return\n+     * @return task jobs (running and / or scheduled)\n      */\n     @GET\n     @Path(\"jobs\")\n     @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<TaskExecTO> listJobs(@NotNull @MatrixParam(\"type\") JobStatusType type);\n+    List<JobTO> listJobs(@Min(1) @QueryParam(JAXRSService.PARAM_MAX) @DefaultValue(\"25\") int max);\n \n     /**\n      * Executes an action on an existing task's job.\n@@ -180,6 +191,6 @@ <T extends AbstractTaskTO> T read(\n      * @param action action to execute\n      */\n     @POST\n-    @Path(\"{key}\")\n-    void actionJob(@PathParam(\"key\") Long key, @QueryParam(\"action\") JobAction action);\n+    @Path(\"/job/{key}\")\n+    void actionJob(@NotNull @PathParam(\"key\") Long key, @QueryParam(\"action\") JobAction action);\n }"},{"sha":"d153d7008f84d8378f5f61fe6c4b1ce560f6b0af","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractJobLogic.java","status":"modified","additions":94,"deletions":139,"changes":233,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -19,15 +19,14 @@\n package org.apache.syncope.core.logic;\n \n import java.util.ArrayList;\n+import java.util.Comparator;\n import java.util.List;\n-import java.util.Objects;\n+import org.apache.commons.collections4.ComparatorUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n-import org.apache.syncope.common.lib.to.AbstractExecTO;\n-import org.apache.syncope.common.lib.to.ReportExecTO;\n-import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.types.JobAction;\n-import org.apache.syncope.common.lib.types.JobStatusType;\n-import org.quartz.JobExecutionContext;\n+import org.apache.syncope.core.provisioning.api.job.JobManager;\n import org.quartz.JobKey;\n import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n@@ -38,151 +37,107 @@\n \n abstract class AbstractJobLogic<T extends AbstractBaseBean> extends AbstractTransactionalLogic<T> {\n \n+    private static final Comparator<Boolean> BOOLEAN_COMPARATOR = ComparatorUtils.booleanComparator(true);\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static final Comparator<JobTO> CHAINED_COMPARATOR = ComparatorUtils.chainedComparator(\n+            new Comparator<JobTO>() {\n+\n+        @Override\n+        public int compare(final JobTO job1, final JobTO job2) {\n+            return BOOLEAN_COMPARATOR.compare(job1.isRunning(), job2.isRunning());\n+        }\n+    },\n+            new Comparator<JobTO>() {\n+\n+        @Override\n+        public int compare(final JobTO job1, final JobTO job2) {\n+            return BOOLEAN_COMPARATOR.compare(job1.isScheduled(), job2.isScheduled());\n+        }\n+    },\n+            new Comparator<JobTO>() {\n+\n+        @Override\n+        public int compare(final JobTO job1, final JobTO job2) {\n+            int result;\n+\n+            if (job1.getStart() == null && job2.getStart() == null) {\n+                result = 0;\n+            } else if (job1.getStart() == null) {\n+                result = -1;\n+            } else if (job2.getStart() == null) {\n+                result = 1;\n+            } else {\n+                result = job1.getStart().compareTo(job2.getStart());\n+            }\n+\n+            return result;\n+        }\n+    });\n+\n+    @Autowired\n+    protected JobManager jobManager;\n+\n     @Autowired\n     protected SchedulerFactoryBean scheduler;\n \n-    protected abstract Long getKeyFromJobName(final JobKey jobKey);\n+    protected abstract Pair<Long, String> getReference(final JobKey jobKey);\n \n-    private <E extends AbstractExecTO> void setTaskOrReportKey(final E jobExecTO, final Long taskOrReportKey) {\n-        if (jobExecTO instanceof TaskExecTO) {\n-            ((TaskExecTO) jobExecTO).setTask(taskOrReportKey);\n-        } else if (jobExecTO instanceof ReportExecTO) {\n-            ((ReportExecTO) jobExecTO).setReport(taskOrReportKey);\n-        }\n-    }\n+    protected List<JobTO> listJobs(final int max) {\n+        List<JobTO> jobTOs = new ArrayList<>();\n \n-    public <E extends AbstractExecTO> List<E> listJobs(final JobStatusType type, final Class<E> reference) {\n-        List<E> jobExecTOs = new ArrayList<>();\n-\n-        switch (type) {\n-            case ALL:\n-                try {\n-                    for (String groupName : scheduler.getScheduler().getJobGroupNames()) {\n-                        for (JobKey jobKey\n-                                : scheduler.getScheduler().getJobKeys(GroupMatcher.jobGroupEquals(groupName))) {\n-\n-                            Long key = getKeyFromJobName(jobKey);\n-                            if (key != null) {\n-                                List<? extends Trigger> jobTriggers = scheduler.getScheduler().getTriggersOfJob(jobKey);\n-                                if (jobTriggers.isEmpty()) {\n-                                    E jobExecTO = reference.newInstance();\n-                                    setTaskOrReportKey(jobExecTO, key);\n-                                    jobExecTO.setStatus(\"Not Scheduled\");\n-\n-                                    jobExecTOs.add(jobExecTO);\n-                                } else {\n-                                    for (Trigger t : jobTriggers) {\n-                                        E jobExecTO = reference.newInstance();\n-                                        jobExecTO.setKey(key);\n-                                        jobExecTO.\n-                                                setStatus(scheduler.getScheduler().getTriggerState(t.getKey()).name());\n-                                        jobExecTO.setStart(t.getStartTime());\n-\n-                                        jobExecTOs.add(jobExecTO);\n-                                    }\n-                                }\n-                            }\n-                        }\n-                    }\n-                } catch (SchedulerException e) {\n-                    LOG.debug(\"Problems while retrieving all scheduled jobs\", e);\n-                } catch (InstantiationException e) {\n-                    LOG.debug(\"Problems while instantiating {}\", reference, e);\n-                } catch (IllegalAccessException e) {\n-                    LOG.debug(\"Problems while accessing {}\", reference, e);\n-                }\n-                break;\n-\n-            case RUNNING:\n-                try {\n-                    for (JobExecutionContext jec : scheduler.getScheduler().getCurrentlyExecutingJobs()) {\n-                        Long key = getKeyFromJobName(jec.getJobDetail().getKey());\n-                        if (key != null) {\n-                            E jobExecTO = reference.newInstance();\n-                            setTaskOrReportKey(jobExecTO, key);\n-                            jobExecTO.setStatus(\n-                                    scheduler.getScheduler().getTriggerState(jec.getTrigger().getKey()).name());\n-                            jobExecTO.setStart(jec.getFireTime());\n-\n-                            jobExecTOs.add(jobExecTO);\n-                        }\n-                    }\n-                } catch (SchedulerException e) {\n-                    LOG.debug(\"Problems while retrieving all currently executing jobs\", e);\n-                } catch (InstantiationException e) {\n-                    LOG.debug(\"Problems while instantiating {}\", reference, e);\n-                } catch (IllegalAccessException e) {\n-                    LOG.debug(\"Problems while accessing {}\", reference, e);\n-                }\n-                break;\n-\n-            case SCHEDULED:\n-                try {\n-                    for (String groupName : scheduler.getScheduler().getJobGroupNames()) {\n-                        for (JobKey jobKey\n-                                : scheduler.getScheduler().getJobKeys(GroupMatcher.jobGroupEquals(groupName))) {\n-\n-                            Long key = getKeyFromJobName(jobKey);\n-                            if (key != null) {\n-                                List<? extends Trigger> jobTriggers = scheduler.getScheduler().getTriggersOfJob(jobKey);\n-                                for (Trigger t : jobTriggers) {\n-                                    E jobExecTO = reference.newInstance();\n-                                    setTaskOrReportKey(jobExecTO, key);\n-                                    jobExecTO.setStatus(scheduler.getScheduler().getTriggerState(t.getKey()).name());\n-                                    jobExecTO.setStart(t.getStartTime());\n-\n-                                    jobExecTOs.add(jobExecTO);\n-                                }\n-                            }\n-                        }\n+        try {\n+            for (JobKey jobKey : scheduler.getScheduler().\n+                    getJobKeys(GroupMatcher.jobGroupEquals(Scheduler.DEFAULT_GROUP))) {\n+\n+                JobTO jobTO = new JobTO();\n+\n+                Pair<Long, String> reference = getReference(jobKey);\n+                if (reference != null) {\n+                    jobTOs.add(jobTO);\n+\n+                    jobTO.setReferenceKey(reference.getLeft());\n+                    jobTO.setReferenceName(reference.getRight());\n+\n+                    List<? extends Trigger> jobTriggers = scheduler.getScheduler().getTriggersOfJob(jobKey);\n+                    if (jobTriggers.isEmpty()) {\n+                        jobTO.setScheduled(false);\n+                    } else {\n+                        jobTO.setScheduled(true);\n+                        jobTO.setStart(jobTriggers.get(0).getStartTime());\n+                        jobTO.setStatus(scheduler.getScheduler().getTriggerState(jobTriggers.get(0).getKey()).name());\n                     }\n-                } catch (SchedulerException e) {\n-                    LOG.debug(\"Problems while retrieving all scheduled jobs\", e);\n-                } catch (InstantiationException e) {\n-                    LOG.debug(\"Problems while instantiating {}\", reference, e);\n-                } catch (IllegalAccessException e) {\n-                    LOG.debug(\"Problems while accessing {}\", reference, e);\n-                }\n-                break;\n \n-            default:\n+                    jobTO.setRunning(jobManager.isRunning(jobKey));\n+                }\n+            }\n+        } catch (SchedulerException e) {\n+            LOG.debug(\"Problems while retrieving scheduled jobs\", e);\n         }\n-        return jobExecTOs;\n+\n+        jobTOs.sort(CHAINED_COMPARATOR);\n+        return jobTOs.size() > max ? jobTOs.subList(0, max) : jobTOs;\n     }\n \n-    protected void actionJob(final String jobName, final JobAction action) {\n-        if (jobName != null) {\n-            JobKey jobKey = new JobKey(jobName, Scheduler.DEFAULT_GROUP);\n-            try {\n-                if (scheduler.getScheduler().checkExists(jobKey)) {\n-                    switch (action) {\n-                        case START:\n-                            Long currentKey = getKeyFromJobName(jobKey);\n-                            boolean found = false;\n-                            //Two or more equals jobs cannot be executed concurrently\n-                            for (int i = 0; i < scheduler.getScheduler().getCurrentlyExecutingJobs().size() && !found;\n-                                    i++) {\n-                                JobExecutionContext jec = scheduler.getScheduler().getCurrentlyExecutingJobs().get(i);\n-                                Long execJobKey = getKeyFromJobName(jec.getJobDetail().getKey());\n-                                if (Objects.equals(execJobKey, currentKey)) {\n-                                    found = true;\n-                                }\n-                            }\n-                            if (!found) {\n-                                scheduler.getScheduler().triggerJob(jobKey);\n-                            }\n-                            break;\n-\n-                        case STOP:\n-                            scheduler.getScheduler().interrupt(jobKey);\n-                            break;\n-\n-                        default:\n-                    }\n+    protected void actionJob(final JobKey jobKey, final JobAction action) {\n+        try {\n+            if (scheduler.getScheduler().checkExists(jobKey)) {\n+                switch (action) {\n+                    case START:\n+                        scheduler.getScheduler().triggerJob(jobKey);\n+                        break;\n+\n+                    case STOP:\n+                        scheduler.getScheduler().interrupt(jobKey);\n+                        break;\n+\n+                    default:\n                 }\n-            } catch (SchedulerException e) {\n-                LOG.debug(\"Problems during {} operation on job {}\", action.toString(), jobName, e);\n+            } else {\n+                LOG.warn(\"Could not find job {}\", jobKey);\n             }\n+        } catch (SchedulerException e) {\n+            LOG.debug(\"Problems during {} operation on job {}\", action.toString(), jobKey, e);\n         }\n     }\n }"},{"sha":"86a0d9aeadd085480a5e9a2554c401a5b9989126","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/NotificationLogic.java","status":"modified","additions":20,"deletions":1,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -24,18 +24,23 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.NotificationTO;\n+import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n import org.apache.syncope.core.provisioning.api.data.NotificationDataBinder;\n+import org.apache.syncope.core.provisioning.api.job.JobManager;\n+import org.quartz.JobKey;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n \n @Component\n-public class NotificationLogic extends AbstractTransactionalLogic<NotificationTO> {\n+public class NotificationLogic extends AbstractJobLogic<NotificationTO> {\n \n     @Autowired\n     private NotificationDAO notificationDAO;\n@@ -99,6 +104,20 @@ public NotificationTO delete(final Long key) {\n         return deleted;\n     }\n \n+    @Override\n+    protected Pair<Long, String> getReference(final JobKey jobKey) {\n+        return JobManager.NOTIFICATION_JOB.equals(jobKey) ? Pair.of(0L, jobKey.getName()) : null;\n+    }\n+\n+    public JobTO getJob() {\n+        List<JobTO> jobs = super.listJobs(1);\n+        return jobs.isEmpty() ? null : jobs.get(0);\n+    }\n+\n+    public void actionJob(final JobAction action) {\n+        super.actionJob(JobManager.NOTIFICATION_JOB, action);\n+    }\n+\n     @Override\n     protected NotificationTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {"},{"sha":"56f3d13c1d0e74b7092df6c4e53826ffa4390925","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":40,"deletions":18,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -38,6 +38,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n@@ -52,17 +53,15 @@\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n import org.apache.syncope.core.provisioning.api.data.ReportDataBinder;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n-import org.apache.syncope.core.provisioning.api.job.JobInstanceLoader;\n import org.apache.syncope.core.logic.report.TextSerializer;\n-import org.apache.syncope.common.lib.to.AbstractExecTO;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.types.JobAction;\n-import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.logic.report.XSLTTransformer;\n+import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.xmlgraphics.util.MimeConstants;\n import org.quartz.JobKey;\n-import org.quartz.Scheduler;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -71,13 +70,13 @@\n public class ReportLogic extends AbstractJobLogic<ReportTO> {\n \n     @Autowired\n-    private ReportDAO reportDAO;\n+    private ConfDAO confDAO;\n \n     @Autowired\n-    private ReportExecDAO reportExecDAO;\n+    private ReportDAO reportDAO;\n \n     @Autowired\n-    private JobInstanceLoader jobInstanceLoader;\n+    private ReportExecDAO reportExecDAO;\n \n     @Autowired\n     private ReportDataBinder binder;\n@@ -92,7 +91,10 @@ public ReportTO create(final ReportTO reportTO) {\n         report = reportDAO.save(report);\n \n         try {\n-            jobInstanceLoader.registerJob(report, null);\n+            jobManager.register(\n+                    report,\n+                    null,\n+                    confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue());\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for report \" + report.getKey(), e);\n \n@@ -115,7 +117,10 @@ public ReportTO update(final ReportTO reportTO) {\n         report = reportDAO.save(report);\n \n         try {\n-            jobInstanceLoader.registerJob(report, null);\n+            jobManager.register(\n+                    report,\n+                    null,\n+                    confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue());\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for report \" + report.getKey(), e);\n \n@@ -162,9 +167,12 @@ public ReportExecTO execute(final Long key, final Date startAt) {\n         }\n \n         try {\n-            jobInstanceLoader.registerJob(report, startAt);\n+            jobManager.register(\n+                    report,\n+                    startAt,\n+                    confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue());\n \n-            scheduler.getScheduler().triggerJob(new JobKey(JobNamer.getJobName(report), Scheduler.DEFAULT_GROUP));\n+            scheduler.getScheduler().triggerJob(JobNamer.getJobKey(report));\n         } catch (Exception e) {\n             LOG.error(\"While executing report {}\", report, e);\n \n@@ -276,11 +284,22 @@ public ReportTO delete(final Long key) {\n         }\n \n         ReportTO deletedReport = binder.getReportTO(report);\n-        jobInstanceLoader.unregisterJob(report);\n+        jobManager.unregister(report);\n         reportDAO.delete(report);\n         return deletedReport;\n     }\n \n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_LIST + \"')\")\n+    public List<ReportExecTO> listRecentExecutions(final int max) {\n+        return CollectionUtils.collect(reportExecDAO.findRecent(max), new Transformer<ReportExec, ReportExecTO>() {\n+\n+            @Override\n+            public ReportExecTO transform(final ReportExec reportExec) {\n+                return binder.getReportExecTO(reportExec);\n+            }\n+        }, new ArrayList<ReportExecTO>());\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_DELETE + \"')\")\n     public ReportExecTO deleteExecution(final Long executionKey) {\n         ReportExec reportExec = reportExecDAO.find(executionKey);\n@@ -319,14 +338,17 @@ public BulkActionResult deleteExecutions(\n     }\n \n     @Override\n-    protected Long getKeyFromJobName(final JobKey jobKey) {\n-        return JobNamer.getReportKeyFromJobName(jobKey.getName());\n+    protected Pair<Long, String> getReference(final JobKey jobKey) {\n+        Long key = JobNamer.getReportKeyFromJobName(jobKey.getName());\n+\n+        Report report = reportDAO.find(key);\n+        return report == null ? null : Pair.of(key, report.getName());\n     }\n \n     @Override\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_LIST + \"')\")\n-    public <E extends AbstractExecTO> List<E> listJobs(final JobStatusType type, final Class<E> reference) {\n-        return super.listJobs(type, reference);\n+    public List<JobTO> listJobs(final int max) {\n+        return super.listJobs(max);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_EXECUTE + \"')\")\n@@ -335,8 +357,8 @@ public void actionJob(final Long key, final JobAction action) {\n         if (report == null) {\n             throw new NotFoundException(\"Report \" + key);\n         }\n-        String jobName = JobNamer.getJobName(report);\n-        actionJob(jobName, action);\n+\n+        actionJob(JobNamer.getJobKey(report), action);\n     }\n \n     @Override"},{"sha":"bb419bc979dc626984e04214b2b0b0556af34875","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SystemLoadReporterJob.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSystemLoadReporterJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSystemLoadReporterJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSystemLoadReporterJob.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -20,8 +20,7 @@\n \n import java.lang.management.ManagementFactory;\n import org.apache.syncope.common.lib.info.SystemInfo;\n-import org.quartz.DisallowConcurrentExecution;\n-import org.quartz.Job;\n+import org.apache.syncope.core.provisioning.java.job.AbstractInterruptableJob;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -31,8 +30,7 @@\n  * Reports about system load.\n  */\n @Component\n-@DisallowConcurrentExecution\n-public class SystemLoadReporterJob implements Job {\n+public class SystemLoadReporterJob extends AbstractInterruptableJob {\n \n     private static final Integer MB = 1024 * 1024;\n \n@@ -41,6 +39,8 @@ public class SystemLoadReporterJob implements Job {\n \n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n+        super.execute(context);\n+\n         SystemInfo.LoadInstant instant = new SystemInfo.LoadInstant();\n \n         instant.setSystemLoadAverage(ManagementFactory.getOperatingSystemMXBean().getSystemLoadAverage());\n@@ -54,5 +54,4 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n \n         logic.addLoadInstant(instant);\n     }\n-\n }"},{"sha":"24fbf16c7966cb6a381ca614a28fa3ab46dd530b","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":30,"deletions":21,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -26,16 +26,16 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractExecTO;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.JobAction;\n-import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -52,14 +52,12 @@\n import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.provisioning.api.job.JobInstanceLoader;\n import org.apache.syncope.core.logic.notification.NotificationJobDelegate;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n import org.quartz.JobDataMap;\n import org.quartz.JobKey;\n-import org.quartz.Scheduler;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -88,9 +86,6 @@ public class TaskLogic extends AbstractJobLogic<AbstractTaskTO> {\n     @Autowired\n     private NotificationJobDelegate notificationJobDelegate;\n \n-    @Autowired\n-    private JobInstanceLoader jobInstanceLoader;\n-\n     @Autowired\n     private TaskUtilsFactory taskUtilsFactory;\n \n@@ -102,7 +97,7 @@ public <T extends SchedTaskTO> T createSchedTask(final T taskTO) {\n         task = taskDAO.save(task);\n \n         try {\n-            jobInstanceLoader.registerJob(\n+            jobManager.register(\n                     task,\n                     task.getStartAt(),\n                     confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue());\n@@ -130,7 +125,7 @@ public <T extends SchedTaskTO> T updateSchedTask(final SchedTaskTO taskTO) {\n         task = taskDAO.save(task);\n \n         try {\n-            jobInstanceLoader.registerJob(\n+            jobManager.register(\n                     task,\n                     task.getStartAt(),\n                     confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue());\n@@ -210,7 +205,7 @@ public TaskExecTO execute(final Long taskKey, final Date startAt, final boolean\n                 }\n \n                 try {\n-                    Map<String, Object> jobDataMap = jobInstanceLoader.registerJob(\n+                    Map<String, Object> jobDataMap = jobManager.register(\n                             (SchedTask) task,\n                             startAt,\n                             confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue());\n@@ -219,7 +214,7 @@ public TaskExecTO execute(final Long taskKey, final Date startAt, final boolean\n \n                     if (startAt == null) {\n                         scheduler.getScheduler().triggerJob(\n-                                new JobKey(JobNamer.getJobName(task), Scheduler.DEFAULT_GROUP),\n+                                JobNamer.getJobKey(task),\n                                 new JobDataMap(jobDataMap));\n                     }\n                 } catch (Exception e) {\n@@ -257,7 +252,7 @@ public <T extends AbstractTaskTO> T delete(final Long taskKey) {\n                 || TaskType.SYNCHRONIZATION == taskUtils.getType()\n                 || TaskType.PUSH == taskUtils.getType()) {\n \n-            jobInstanceLoader.unregisterJob(task);\n+            jobManager.unregister(task);\n         }\n \n         taskDAO.delete(task);\n@@ -288,6 +283,17 @@ public TaskExecTO transform(final TaskExec taskExec) {\n         }, new ArrayList<TaskExecTO>());\n     }\n \n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_LIST + \"')\")\n+    public List<TaskExecTO> listRecentExecutions(final int max) {\n+        return CollectionUtils.collect(taskExecDAO.findRecent(max), new Transformer<TaskExec, TaskExecTO>() {\n+\n+            @Override\n+            public TaskExecTO transform(final TaskExec taskExec) {\n+                return binder.getTaskExecTO(taskExec);\n+            }\n+        }, new ArrayList<TaskExecTO>());\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_DELETE + \"')\")\n     public TaskExecTO deleteExecution(final Long execKey) {\n         TaskExec taskExec = taskExecDAO.find(execKey);\n@@ -326,24 +332,27 @@ public BulkActionResult deleteExecutions(\n     }\n \n     @Override\n-    protected Long getKeyFromJobName(final JobKey jobKey) {\n-        return JobNamer.getTaskKeyFromJobName(jobKey.getName());\n+    protected Pair<Long, String> getReference(final JobKey jobKey) {\n+        Long key = JobNamer.getTaskKeyFromJobName(jobKey.getName());\n+\n+        Task task = taskDAO.find(key);\n+        return task == null || !(task instanceof SchedTask) ? null : Pair.of(key, ((SchedTask) task).getName());\n     }\n \n     @Override\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_LIST + \"')\")\n-    public <E extends AbstractExecTO> List<E> listJobs(final JobStatusType type, final Class<E> reference) {\n-        return super.listJobs(type, reference);\n+    public List<JobTO> listJobs(final int max) {\n+        return super.listJobs(max);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")\n-    public void actionJob(final Long taskKey, final JobAction action) {\n-        Task task = taskDAO.find(taskKey);\n+    public void actionJob(final Long key, final JobAction action) {\n+        Task task = taskDAO.find(key);\n         if (task == null) {\n-            throw new NotFoundException(\"Task \" + taskKey);\n+            throw new NotFoundException(\"Task \" + key);\n         }\n-        String jobName = JobNamer.getJobName(task);\n-        actionJob(jobName, action);\n+\n+        actionJob(JobNamer.getJobKey(task), action);\n     }\n \n     @Override"},{"sha":"82134eda0dd3276956d3bc2881fc7324ba70aada","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/JobManagerImpl.java","status":"renamed","additions":84,"deletions":32,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FJobManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FJobManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FJobManagerImpl.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -18,13 +18,16 @@\n  */\n package org.apache.syncope.core.logic.init;\n \n-import java.text.ParseException;\n-import java.util.Collections;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -41,7 +44,6 @@\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n-import org.apache.syncope.core.provisioning.api.job.JobInstanceLoader;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n import org.apache.syncope.core.logic.notification.NotificationJob;\n import org.apache.syncope.core.logic.report.ReportJob;\n@@ -70,11 +72,15 @@\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.provisioning.api.job.JobManager;\n+import org.identityconnectors.common.IOUtil;\n+import org.quartz.impl.jdbcjobstore.Constants;\n+import org.springframework.jdbc.datasource.DataSourceUtils;\n \n @Component\n-public class JobInstanceLoaderImpl implements JobInstanceLoader, SyncopeLoader {\n+public class JobManagerImpl implements JobManager, SyncopeLoader {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(JobInstanceLoader.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(JobManager.class);\n \n     @Autowired\n     private DomainsHolder domainsHolder;\n@@ -91,11 +97,50 @@ public class JobInstanceLoaderImpl implements JobInstanceLoader, SyncopeLoader {\n     @Autowired\n     private ConfDAO confDAO;\n \n+    private boolean isRunningHere(final JobKey jobKey) throws SchedulerException {\n+        return IterableUtils.matchesAny(scheduler.getScheduler().getCurrentlyExecutingJobs(),\n+                new Predicate<JobExecutionContext>() {\n+\n+            @Override\n+            public boolean evaluate(final JobExecutionContext jec) {\n+                return jobKey.equals(jec.getJobDetail().getKey());\n+            }\n+        });\n+    }\n+\n+    private boolean isRunningElsewhere(final JobKey jobKey) throws SchedulerException {\n+        if (!scheduler.getScheduler().getMetaData().isJobStoreClustered()) {\n+            return false;\n+        }\n+\n+        Connection conn = DataSourceUtils.getConnection(domainsHolder.getDomains().get(SyncopeConstants.MASTER_DOMAIN));\n+        PreparedStatement stmt = null;\n+        try {\n+            stmt = conn.prepareStatement(\n+                    \"SELECT 1 FROM \" + Constants.DEFAULT_TABLE_PREFIX + \"FIRED_TRIGGERS \"\n+                    + \"WHERE JOB_NAME = ? AND JOB_GROUP = ?\");\n+            stmt.setString(1, jobKey.getName());\n+            stmt.setString(2, jobKey.getGroup());\n+\n+            return stmt.executeQuery().next();\n+        } catch (SQLException e) {\n+            throw new SchedulerException(e);\n+        } finally {\n+            IOUtil.quietClose(stmt);\n+            IOUtil.quietClose(conn);\n+        }\n+    }\n+\n+    @Override\n+    public boolean isRunning(final JobKey jobKey) throws SchedulerException {\n+        return isRunningHere(jobKey) || isRunningElsewhere(jobKey);\n+    }\n+\n     private void registerJob(\n             final String jobName, final Job jobInstance,\n             final String cronExpression, final Date startAt,\n             final Map<String, Object> jobMap)\n-            throws SchedulerException, ParseException {\n+            throws SchedulerException {\n \n         synchronized (scheduler.getScheduler()) {\n             boolean jobAlreadyRunning = false;\n@@ -178,8 +223,8 @@ private <T> T createSpringBean(final Class<T> jobClass) {\n     }\n \n     @Override\n-    public Map<String, Object> registerJob(final SchedTask task, final Date startAt, final long interruptMaxRetries)\n-            throws SchedulerException, ParseException {\n+    public Map<String, Object> register(final SchedTask task, final Date startAt, final long interruptMaxRetries)\n+            throws SchedulerException {\n \n         TaskJob job = createSpringBean(TaskJob.class);\n         job.setTaskKey(task.getKey());\n@@ -191,12 +236,12 @@ public Map<String, Object> registerJob(final SchedTask task, final Date startAt,\n                         : task.getJobDelegateClassName();\n \n         Map<String, Object> jobMap = new HashMap<>();\n-        jobMap.put(JobInstanceLoader.DOMAIN, AuthContextUtils.getDomain());\n+        jobMap.put(JobManager.DOMAIN_KEY, AuthContextUtils.getDomain());\n         jobMap.put(TaskJob.DELEGATE_CLASS_KEY, jobDelegateClassName);\n-        jobMap.put(TaskJob.INTERRUPT_MAX_RETRIES_KEY, interruptMaxRetries);\n+        jobMap.put(INTERRUPT_MAX_RETRIES_KEY, interruptMaxRetries);\n \n         registerJob(\n-                JobNamer.getJobName(task),\n+                JobNamer.getJobKey(task).getName(),\n                 job,\n                 task.getCronExpression(),\n                 startAt,\n@@ -205,14 +250,17 @@ public Map<String, Object> registerJob(final SchedTask task, final Date startAt,\n     }\n \n     @Override\n-    public void registerJob(final Report report, final Date startAt) throws SchedulerException, ParseException {\n+    public void register(final Report report, final Date startAt, final long interruptMaxRetries)\n+            throws SchedulerException {\n+\n         ReportJob job = createSpringBean(ReportJob.class);\n         job.setReportKey(report.getKey());\n \n         Map<String, Object> jobMap = new HashMap<>();\n-        jobMap.put(JobInstanceLoader.DOMAIN, AuthContextUtils.getDomain());\n+        jobMap.put(JobManager.DOMAIN_KEY, AuthContextUtils.getDomain());\n+        jobMap.put(INTERRUPT_MAX_RETRIES_KEY, interruptMaxRetries);\n \n-        registerJob(JobNamer.getJobName(report), job, report.getCronExpression(), startAt, jobMap);\n+        registerJob(JobNamer.getJobKey(report).getName(), job, report.getCronExpression(), startAt, jobMap);\n     }\n \n     private void unregisterJob(final String jobName) {\n@@ -229,13 +277,13 @@ private void unregisterJob(final String jobName) {\n     }\n \n     @Override\n-    public void unregisterJob(final Task task) {\n-        unregisterJob(JobNamer.getJobName(task));\n+    public void unregister(final Task task) {\n+        unregisterJob(JobNamer.getJobKey(task).getName());\n     }\n \n     @Override\n-    public void unregisterJob(final Report report) {\n-        unregisterJob(JobNamer.getJobName(report));\n+    public void unregister(final Report report) {\n+        unregisterJob(JobNamer.getJobKey(report).getName());\n     }\n \n     @Override\n@@ -246,8 +294,8 @@ public Integer getPriority() {\n     @Transactional\n     @Override\n     public void load() {\n-        final Pair<String, Long> notificationConf = AuthContextUtils.execWithAuthContext(SyncopeConstants.MASTER_DOMAIN,\n-                new AuthContextUtils.Executable<Pair<String, Long>>() {\n+        final Pair<String, Long> conf = AuthContextUtils.execWithAuthContext(\n+                SyncopeConstants.MASTER_DOMAIN, new AuthContextUtils.Executable<Pair<String, Long>>() {\n \n             @Override\n             public Pair<String, Long> exec() {\n@@ -259,8 +307,8 @@ public Pair<String, Long> exec() {\n                     notificationJobCronExpression = notificationJobCronExp.getValuesAsStrings().get(0);\n                 }\n \n-                long interruptMaxRetries = confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).\n-                        getLongValue();\n+                long interruptMaxRetries =\n+                        confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue();\n \n                 return ImmutablePair.of(notificationJobCronExpression, interruptMaxRetries);\n             }\n@@ -277,16 +325,16 @@ public Void exec() {\n                     tasks.addAll(taskDAO.<PushTask>findAll(TaskType.PUSH));\n                     for (SchedTask task : tasks) {\n                         try {\n-                            registerJob(task, task.getStartAt(), notificationConf.getRight());\n+                            register(task, task.getStartAt(), conf.getRight());\n                         } catch (Exception e) {\n                             LOG.error(\"While loading job instance for task \" + task.getKey(), e);\n                         }\n                     }\n \n-                    // 2. ReportJobs\n+                    // 2. jobs for Reports\n                     for (Report report : reportDAO.findAll()) {\n                         try {\n-                            registerJob(report, null);\n+                            register(report, null, conf.getRight());\n                         } catch (Exception e) {\n                             LOG.error(\"While loading job instance for report \" + report.getName(), e);\n                         }\n@@ -297,22 +345,26 @@ public Void exec() {\n             });\n         }\n \n+        Map<String, Object> jobMap = new HashMap<>();\n+        jobMap.put(JobManager.DOMAIN_KEY, AuthContextUtils.getDomain());\n+        jobMap.put(INTERRUPT_MAX_RETRIES_KEY, conf.getRight());\n+\n         // 3. NotificationJob\n-        if (StringUtils.isBlank(notificationConf.getLeft())) {\n+        if (StringUtils.isBlank(conf.getLeft())) {\n             LOG.debug(\"Empty value provided for {}'s cron, not registering anything on Quartz\",\n                     NotificationJob.class.getSimpleName());\n         } else {\n             LOG.debug(\"{}'s cron expression: {} - registering Quartz job and trigger\",\n-                    NotificationJob.class.getSimpleName(), notificationConf.getLeft());\n+                    NotificationJob.class.getSimpleName(), conf.getLeft());\n \n             try {\n                 NotificationJob job = createSpringBean(NotificationJob.class);\n                 registerJob(\n-                        \"taskNotificationJob\",\n+                        NOTIFICATION_JOB.getName(),\n                         job,\n-                        notificationConf.getLeft(),\n+                        conf.getLeft(),\n                         null,\n-                        Collections.<String, Object>emptyMap());\n+                        jobMap);\n             } catch (Exception e) {\n                 LOG.error(\"While loading {} instance\", NotificationJob.class.getSimpleName(), e);\n             }\n@@ -323,11 +375,11 @@ public Void exec() {\n         try {\n             SystemLoadReporterJob job = createSpringBean(SystemLoadReporterJob.class);\n             registerJob(\n-                    \"taskSystemLoadReporterJob\",\n+                    \"systemLoadReporterJob\",\n                     job,\n                     \"0 * * * * ?\",\n                     null,\n-                    Collections.<String, Object>emptyMap());\n+                    jobMap);\n         } catch (Exception e) {\n             LOG.error(\"While loading {} instance\", SystemLoadReporterJob.class.getSimpleName(), e);\n         }","previous_filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/JobInstanceLoaderImpl.java"},{"sha":"7fea7745dd8568a220768235e5082d1fdf95c382","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/notification/NotificationJob.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJob.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -20,8 +20,7 @@\n \n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.persistence.api.DomainsHolder;\n-import org.quartz.DisallowConcurrentExecution;\n-import org.quartz.Job;\n+import org.apache.syncope.core.provisioning.java.job.AbstractInterruptableJob;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n@@ -35,8 +34,7 @@\n  * @see org.apache.syncope.core.persistence.api.entity.task.NotificationTask\n  */\n @Component\n-@DisallowConcurrentExecution\n-public class NotificationJob implements Job {\n+public class NotificationJob extends AbstractInterruptableJob {\n \n     public enum Status {\n \n@@ -57,6 +55,8 @@ public enum Status {\n \n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n+        super.execute(context);\n+\n         LOG.debug(\"Waking up...\");\n \n         for (String domain : domainsHolder.getDomains().keySet()) {\n@@ -81,5 +81,4 @@ public Void exec() {\n \n         LOG.debug(\"Sleeping again...\");\n     }\n-\n }"},{"sha":"5786cfb1c7aa33ee28598c028d899ab5e176af07","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/ReportJob.java","status":"modified","additions":17,"deletions":16,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJob.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -19,18 +19,16 @@\n package org.apache.syncope.core.logic.report;\n \n import org.apache.syncope.core.misc.security.AuthContextUtils;\n-import org.apache.syncope.core.provisioning.api.job.JobInstanceLoader;\n-import org.quartz.DisallowConcurrentExecution;\n-import org.quartz.Job;\n+import org.apache.syncope.core.provisioning.java.job.AbstractInterruptableJob;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.syncope.core.provisioning.api.job.JobManager;\n \n /**\n  * Quartz job for executing a given report.\n  */\n-@DisallowConcurrentExecution\n-public class ReportJob implements Job {\n+public class ReportJob extends AbstractInterruptableJob {\n \n     /**\n      * Key, set by the caller, for identifying the report to be executed.\n@@ -51,23 +49,26 @@ public void setReportKey(final Long reportKey) {\n \n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n+        super.execute(context);\n+\n         try {\n-            AuthContextUtils.execWithAuthContext(context.getMergedJobDataMap().getString(JobInstanceLoader.DOMAIN),\n+            AuthContextUtils.execWithAuthContext(context.getMergedJobDataMap().getString(JobManager.DOMAIN_KEY),\n                     new AuthContextUtils.Executable<Void>() {\n \n-                        @Override\n-                        public Void exec() {\n-                            try {\n-                                delegate.execute(reportKey);\n-                            } catch (Exception e) {\n-                                throw new RuntimeException(e);\n-                            }\n+                @Override\n+                public Void exec() {\n+                    try {\n+                        delegate.execute(reportKey);\n+                    } catch (Exception e) {\n+                        throw new RuntimeException(e);\n+                    }\n \n-                            return null;\n-                        }\n-                    });\n+                    return null;\n+                }\n+            });\n         } catch (RuntimeException e) {\n             throw new JobExecutionException(e.getCause());\n         }\n     }\n+\n }"},{"sha":"dd79dd98773c6d2b5d853c55f56abb3961fe3cf4","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ReportExecDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportExecDAO.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -27,6 +27,8 @@ public interface ReportExecDAO extends DAO<ReportExec, Long> {\n \n     ReportExec find(Long key);\n \n+    List<ReportExec> findRecent(int max);\n+\n     ReportExec findLatestStarted(Report report);\n \n     ReportExec findLatestEnded(Report report);"},{"sha":"4af1453d29d4ef137c0ee269bbd89b082055884f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/TaskExecDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -28,6 +28,8 @@ public interface TaskExecDAO extends DAO<TaskExec, Long> {\n \n     TaskExec find(Long key);\n \n+    List<TaskExec> findRecent(int max);\n+\n     <T extends Task> TaskExec findLatestStarted(T task);\n \n     <T extends Task> TaskExec findLatestEnded(T task);"},{"sha":"1e0af21c5db87b2e85c63ae6a4bcd264d2db367e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportExecDAO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -36,6 +36,16 @@ public ReportExec find(final Long key) {\n         return entityManager().find(JPAReportExec.class, key);\n     }\n \n+    @Override\n+    public List<ReportExec> findRecent(final int max) {\n+        TypedQuery<ReportExec> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAReportExec.class.getSimpleName() + \" e \"\n+                + \"WHERE e.end IS NOT NULL ORDER BY e.end DESC\", ReportExec.class);\n+        query.setMaxResults(max);\n+\n+        return query.getResultList();\n+    }\n+\n     private ReportExec findLatest(final Report report, final String field) {\n         TypedQuery<ReportExec> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAReportExec.class.getSimpleName() + \" e \""},{"sha":"c0fcacb8f9660033214fc698cc67fcbf182766f6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskExecDAO.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -44,11 +44,20 @@ public TaskExec find(final Long key) {\n         return entityManager().find(JPATaskExec.class, key);\n     }\n \n+    @Override\n+    public List<TaskExec> findRecent(final int max) {\n+        TypedQuery<TaskExec> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPATaskExec.class.getSimpleName() + \" e \"\n+                + \"WHERE e.end IS NOT NULL ORDER BY e.end DESC\", TaskExec.class);\n+        query.setMaxResults(max);\n+\n+        return query.getResultList();\n+    }\n+\n     private <T extends Task> TaskExec findLatest(final T task, final String field) {\n         TypedQuery<TaskExec> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPATaskExec.class.getSimpleName() + \" e \"\n-                + \"WHERE e.task=:task \"\n-                + \"ORDER BY e.\" + field + \" DESC\", TaskExec.class);\n+                + \"WHERE e.task=:task ORDER BY e.\" + field + \" DESC\", TaskExec.class);\n         query.setParameter(\"task\", task);\n         query.setMaxResults(1);\n "},{"sha":"0e327fef972235aa003d5cf11ec35b8d7b791555","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/JobManager.java","status":"renamed","additions":16,"deletions":9,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobManager.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -18,26 +18,33 @@\n  */\n package org.apache.syncope.core.provisioning.api.job;\n \n-import java.text.ParseException;\n import java.util.Date;\n import java.util.Map;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n+import org.quartz.JobKey;\n+import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n \n-public interface JobInstanceLoader {\n+public interface JobManager {\n \n-    String DOMAIN = \"domain\";\n+    String DOMAIN_KEY = \"domain\";\n \n-    Map<String, Object> registerJob(final SchedTask task, final Date startAt, final long interruptMaxRetries)\n-            throws SchedulerException, ParseException;\n+    String INTERRUPT_MAX_RETRIES_KEY = \"interruptMaxRetries\";\n \n-    void registerJob(final Report report, final Date startAt)\n-            throws SchedulerException, ParseException;\n+    JobKey NOTIFICATION_JOB = new JobKey(\"notificationJob\", Scheduler.DEFAULT_GROUP);\n \n-    void unregisterJob(Task task);\n+    boolean isRunning(JobKey jobKey) throws SchedulerException;\n \n-    void unregisterJob(Report report);\n+    Map<String, Object> register(SchedTask task, Date startAt, long interruptMaxRetries)\n+            throws SchedulerException;\n+\n+    void register(Report report, Date startAt, long interruptMaxRetries)\n+            throws SchedulerException;\n+\n+    void unregister(Task task);\n+\n+    void unregister(Report report);\n \n }","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/JobInstanceLoader.java"},{"sha":"cc3cf00b9ffa15be76a57453c6838e9d409d02a1","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/JobNamer.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobNamer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobNamer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobNamer.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -22,6 +22,8 @@\n import java.util.regex.Pattern;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n+import org.quartz.JobKey;\n+import org.quartz.Scheduler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -52,12 +54,12 @@ public static Long getReportKeyFromJobName(final String name) {\n         return getKeyFromJobName(name, \"reportJob[0-9]+\", 9);\n     }\n \n-    public static String getJobName(final Task task) {\n-        return \"taskJob\" + task.getKey();\n+    public static JobKey getJobKey(final Task task) {\n+        return new JobKey(\"taskJob\" + task.getKey(), Scheduler.DEFAULT_GROUP);\n     }\n \n-    public static String getJobName(final Report report) {\n-        return \"reportJob\" + report.getKey();\n+    public static JobKey getJobKey(final Report report) {\n+        return new JobKey(\"reportJob\" + report.getKey(), Scheduler.DEFAULT_GROUP);\n     }\n \n     public static String getTriggerName(final String jobName) {"},{"sha":"6057f0eb6d990290dd9777082b4cd924832cc9b7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ReportDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -107,7 +107,7 @@ public ReportTO getReportTO(final Report report) {\n             reportTO.getExecutions().add(getReportExecTO(reportExec));\n         }\n \n-        String triggerName = JobNamer.getTriggerName(JobNamer.getJobName(report));\n+        String triggerName = JobNamer.getTriggerName(JobNamer.getJobKey(report).getName());\n         try {\n             Trigger trigger = scheduler.getScheduler().getTrigger(new TriggerKey(triggerName, Scheduler.DEFAULT_GROUP));\n "},{"sha":"299b457d1060e5c1e802c8c84a55dced3587ec1f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -70,6 +70,7 @@\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.stereotype.Component;\n import org.apache.syncope.core.persistence.api.entity.task.PushTaskAnyFilter;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n \n @Component\n public class TaskDataBinderImpl implements TaskDataBinder {\n@@ -102,6 +103,9 @@ public class TaskDataBinderImpl implements TaskDataBinder {\n     @Autowired\n     private SchedulerFactoryBean scheduler;\n \n+    @Autowired\n+    private TaskUtilsFactory taskUtilsFactory;\n+\n     private void fill(final ProvisioningTask task, final AbstractProvisioningTaskTO taskTO) {\n         if (task instanceof PushTask && taskTO instanceof PushTaskTO) {\n             PushTask pushTask = (PushTask) task;\n@@ -254,6 +258,7 @@ public TaskExecTO getTaskExecTO(final TaskExec execution) {\n \n         if (execution.getTask() != null && execution.getTask().getKey() != null) {\n             executionTO.setTask(execution.getTask().getKey());\n+            executionTO.setType(taskUtilsFactory.getInstance(execution.getTask()).getType());\n         }\n \n         return executionTO;\n@@ -262,7 +267,7 @@ public TaskExecTO getTaskExecTO(final TaskExec execution) {\n     private void setExecTime(final SchedTaskTO taskTO, final Task task) {\n         taskTO.setLastExec(taskTO.getStart());\n \n-        String triggerName = JobNamer.getTriggerName(JobNamer.getJobName(task));\n+        String triggerName = JobNamer.getTriggerName(JobNamer.getJobKey(task).getName());\n         try {\n             Trigger trigger = scheduler.getScheduler().getTrigger(new TriggerKey(triggerName, Scheduler.DEFAULT_GROUP));\n "},{"sha":"bd550b58996bdea3f02a6957156d7bb60e6cd6cb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractInterruptableJob.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractInterruptableJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractInterruptableJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractInterruptableJob.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.job;\n+\n+\n+import java.util.Date;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.syncope.core.misc.utils.FormatUtils;\n+import org.apache.syncope.core.provisioning.api.job.JobManager;\n+import org.quartz.DisallowConcurrentExecution;\n+import org.quartz.InterruptableJob;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+import org.quartz.UnableToInterruptJobException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@DisallowConcurrentExecution\n+public abstract class AbstractInterruptableJob implements InterruptableJob {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AbstractInterruptableJob.class);\n+    \n+    /**\n+     * The current running thread containing the task to be executed.\n+     */\n+    private final AtomicReference<Thread> runningThread = new AtomicReference<>();\n+\n+    private long interruptMaxRetries = 1;\n+\n+    @Override\n+    public void execute(final JobExecutionContext context) throws JobExecutionException {\n+        this.runningThread.set(Thread.currentThread());\n+        this.interruptMaxRetries = context.getMergedJobDataMap().getLong(JobManager.INTERRUPT_MAX_RETRIES_KEY);\n+    }\n+\n+    @Override\n+    public void interrupt() throws UnableToInterruptJobException {\n+        Thread thread = this.runningThread.getAndSet(null);\n+        if (thread == null) {\n+            LOG.warn(\"Unable to retrieve the thread of the current job execution\");\n+        } else {\n+            LOG.info(\"Interrupting job from thread {} at {} \", thread.getId(), FormatUtils.format(new Date()));\n+\n+            if (interruptMaxRetries < 1) {\n+                interruptMaxRetries = 1;\n+            }\n+            for (int i = 0; i < interruptMaxRetries && thread.isAlive(); i++) {\n+                thread.interrupt();\n+            }\n+            // if the thread is still alive, it should be available in the next stop\n+            if (thread.isAlive()) {\n+                this.runningThread.set(thread);\n+            }\n+        }\n+    }\n+\n+}"},{"sha":"4692e88cc30d528783887ad34f88ef93948a2df5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/TaskJob.java","status":"modified","additions":15,"deletions":57,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -18,34 +18,21 @@\n  */\n package org.apache.syncope.core.provisioning.java.job;\n \n-import java.util.Date;\n-import java.util.concurrent.atomic.AtomicReference;\n import org.apache.commons.lang3.ClassUtils;\n-import org.apache.syncope.core.misc.utils.FormatUtils;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n-import org.apache.syncope.core.provisioning.api.job.JobInstanceLoader;\n import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n-import org.quartz.DisallowConcurrentExecution;\n-import org.quartz.InterruptableJob;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n-import org.quartz.UnableToInterruptJobException;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+import org.apache.syncope.core.provisioning.api.job.JobManager;\n \n-@DisallowConcurrentExecution\n-public class TaskJob implements InterruptableJob {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(TaskJob.class);\n+public class TaskJob extends AbstractInterruptableJob {\n \n     public static final String DRY_RUN_JOBDETAIL_KEY = \"dryRun\";\n \n     public static final String DELEGATE_CLASS_KEY = \"delegateClass\";\n \n-    public static final String INTERRUPT_MAX_RETRIES_KEY = \"interruptMaxRetries\";\n-\n     /**\n      * Task execution status.\n      */\n@@ -56,18 +43,11 @@ public enum Status {\n \n     }\n \n-    /**\n-     * The current running thread containing the task to be executed.\n-     */\n-    private final AtomicReference<Thread> runningThread = new AtomicReference<>();\n-\n     /**\n      * Key, set by the caller, for identifying the task to be executed.\n      */\n     private Long taskKey;\n \n-    private long interruptMaxRetries = 1;\n-\n     /**\n      * Task key setter.\n      *\n@@ -79,53 +59,31 @@ public void setTaskKey(final Long taskKey) {\n \n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n-        this.runningThread.set(Thread.currentThread());\n-        this.interruptMaxRetries = context.getMergedJobDataMap().getLong(INTERRUPT_MAX_RETRIES_KEY);\n+        super.execute(context);\n \n         try {\n-            AuthContextUtils.execWithAuthContext(context.getMergedJobDataMap().getString(JobInstanceLoader.DOMAIN),\n+            AuthContextUtils.execWithAuthContext(context.getMergedJobDataMap().getString(JobManager.DOMAIN_KEY),\n                     new AuthContextUtils.Executable<Void>() {\n \n-                        @Override\n-                        public Void exec() {\n-                            try {\n-                                Class<?> delegateClass =\n+                @Override\n+                public Void exec() {\n+                    try {\n+                        Class<?> delegateClass =\n                                 ClassUtils.getClass(context.getMergedJobDataMap().getString(DELEGATE_CLASS_KEY));\n \n-                                ((SchedTaskJobDelegate) ApplicationContextProvider.getBeanFactory().\n+                        ((SchedTaskJobDelegate) ApplicationContextProvider.getBeanFactory().\n                                 createBean(delegateClass, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false)).\n                                 execute(taskKey, context.getMergedJobDataMap().getBoolean(DRY_RUN_JOBDETAIL_KEY));\n-                            } catch (Exception e) {\n-                                throw new RuntimeException(e);\n-                            }\n-\n-                            return null;\n-                        }\n+                    } catch (Exception e) {\n+                        throw new RuntimeException(e);\n                     }\n+\n+                    return null;\n+                }\n+            }\n             );\n         } catch (RuntimeException e) {\n             throw new JobExecutionException(e.getCause());\n         }\n     }\n-\n-    @Override\n-    public void interrupt() throws UnableToInterruptJobException {\n-        Thread thread = this.runningThread.getAndSet(null);\n-        if (thread == null) {\n-            LOG.warn(\"Unable to retrieve the thread of the current job execution\");\n-        } else {\n-            LOG.info(\"Interrupting job from thread {} at {} \", thread.getId(), FormatUtils.format(new Date()));\n-\n-            if (interruptMaxRetries < 1) {\n-                interruptMaxRetries = 1;\n-            }\n-            for (int i = 0; i < interruptMaxRetries && thread.isAlive(); i++) {\n-                thread.interrupt();\n-            }\n-            // if the thread is still alive, it should be available in the next stop\n-            if (thread.isAlive()) {\n-                this.runningThread.set(thread);\n-            }\n-        }\n-    }\n }"},{"sha":"43e6b5be950c019dd6a10a602bdce213a3cf3be4","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/NotificationServiceImpl.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FNotificationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FNotificationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FNotificationServiceImpl.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -21,7 +21,9 @@\n import java.net.URI;\n import java.util.List;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.NotificationTO;\n+import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n import org.apache.syncope.core.logic.NotificationLogic;\n@@ -62,4 +64,14 @@ public void update(final NotificationTO notificationTO) {\n     public void delete(final Long key) {\n         logic.delete(key);\n     }\n+\n+    @Override\n+    public JobTO getJob() {\n+        return logic.getJob();\n+    }\n+\n+    @Override\n+    public void actionJob(final JobAction action) {\n+        logic.actionJob(action);\n+    }\n }"},{"sha":"d72e484cb31b189dfaa8f7ce742bf4b42da8435e","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportServiceImpl.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -26,10 +26,10 @@\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.StreamingOutput;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.JobAction;\n-import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n@@ -97,6 +97,11 @@ public void delete(final Long key) {\n         logic.delete(key);\n     }\n \n+    @Override\n+    public List<ReportExecTO> listRecentExecutions(final int size) {\n+        return logic.listRecentExecutions(size);\n+    }\n+\n     @Override\n     public void deleteExecution(final Long executionKey) {\n         logic.deleteExecution(executionKey);\n@@ -113,8 +118,8 @@ public BulkActionResult deleteExecutions(final BulkExecDeleteQuery query) {\n     }\n \n     @Override\n-    public List<ReportExecTO> listJobs(final JobStatusType type) {\n-        return logic.listJobs(type, ReportExecTO.class);\n+    public List<JobTO> listJobs(final int max) {\n+        return logic.listJobs(max);\n     }\n \n     @Override"},{"sha":"0a1bf17a32289d46dfd9a1a73f2eb03cd88083f0","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -25,13 +25,13 @@\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.types.JobAction;\n-import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n@@ -122,6 +122,11 @@ public PagedResult<TaskExecTO> listExecutions(final TaskExecQuery query) {\n                 logic.countExecutions(query.getKey()));\n     }\n \n+    @Override\n+    public List<TaskExecTO> listRecentExecutions(final int max) {\n+        return logic.listRecentExecutions(max);\n+    }\n+\n     @Override\n     public void deleteExecution(final Long executionKey) {\n         logic.deleteExecution(executionKey);\n@@ -186,8 +191,8 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n     }\n \n     @Override\n-    public List<TaskExecTO> listJobs(final JobStatusType type) {\n-        return logic.listJobs(type, TaskExecTO.class);\n+    public List<JobTO> listJobs(final int max) {\n+        return logic.listJobs(max);\n     }\n \n     @Override"},{"sha":"20768fdf0e40c1579936bfea025656978aee9832","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SchedTaskITCase.java","status":"modified","additions":26,"deletions":14,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15582e4ff81c10f911d9f09753cc2cedcd26f73a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15582e4ff81c10f911d9f09753cc2cedcd26f73a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java?ref=15582e4ff81c10f911d9f09753cc2cedcd26f73a","patch":"@@ -29,15 +29,17 @@\n import java.util.List;\n import java.util.Set;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.time.DateUtils;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.types.JobAction;\n-import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.beans.TaskExecQuery;\n@@ -159,8 +161,8 @@ public void issueSYNCOPE144() {\n \n     @Test\n     public void issueSYNCOPE660() {\n-        List<TaskExecTO> list = taskService.listJobs(JobStatusType.ALL);\n-        int old_size = list.size();\n+        List<JobTO> jobs = taskService.listJobs(50);\n+        int old_size = jobs.size();\n \n         SchedTaskTO task = new SchedTaskTO();\n         task.setName(\"issueSYNCOPE660\");\n@@ -170,8 +172,8 @@ public void issueSYNCOPE660() {\n         Response response = taskService.create(task);\n         task = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n \n-        list = taskService.listJobs(JobStatusType.ALL);\n-        assertEquals(old_size + 1, list.size());\n+        jobs = taskService.listJobs(50);\n+        assertEquals(old_size + 1, jobs.size());\n \n         taskService.actionJob(task.getKey(), JobAction.START);\n \n@@ -184,14 +186,19 @@ public void issueSYNCOPE660() {\n                 // ignore\n             }\n \n-            list = taskService.listJobs(JobStatusType.RUNNING);\n+            jobs = taskService.listJobs(50);\n+            CollectionUtils.filter(jobs, new Predicate<JobTO>() {\n \n-            assertNotNull(list);\n+                @Override\n+                public boolean evaluate(final JobTO job) {\n+                    return job.isRunning();\n+                }\n+            });\n             i++;\n-        } while (list.size() < 1 && i < maxit);\n+        } while (jobs.size() < 1 && i < maxit);\n \n-        assertEquals(1, list.size());\n-        assertEquals(task.getKey(), list.get(0).getTask(), 0);\n+        assertEquals(1, jobs.size());\n+        assertEquals(task.getKey(), jobs.get(0).getReferenceKey(), 0);\n \n         taskService.actionJob(task.getKey(), JobAction.STOP);\n \n@@ -204,12 +211,17 @@ public void issueSYNCOPE660() {\n                 // ignore\n             }\n \n-            list = taskService.listJobs(JobStatusType.RUNNING);\n+            jobs = taskService.listJobs(50);\n+            CollectionUtils.filter(jobs, new Predicate<JobTO>() {\n \n-            assertNotNull(list);\n+                @Override\n+                public boolean evaluate(final JobTO job) {\n+                    return job.isRunning();\n+                }\n+            });\n             i++;\n-        } while (list.size() >= 1 && i < maxit);\n+        } while (jobs.size() >= 1 && i < maxit);\n \n-        assertTrue(list.isEmpty());\n+        assertTrue(jobs.isEmpty());\n     }\n }"}]}