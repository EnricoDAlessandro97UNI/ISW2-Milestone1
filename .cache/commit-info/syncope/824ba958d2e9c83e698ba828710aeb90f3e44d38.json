{"sha":"824ba958d2e9c83e698ba828710aeb90f3e44d38","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjgyNGJhOTU4ZDJlOWM4M2U2OThiYTgyODcxMGFlYjkwZjNlNDRkMzg=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-11-29T16:21:41Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-11-29T16:21:41Z"},"message":"Fixes issue 222\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247221 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"410e4d2beacf6745b9ed625143d847d7ab5e71a7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/410e4d2beacf6745b9ed625143d847d7ab5e71a7"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/824ba958d2e9c83e698ba828710aeb90f3e44d38","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/824ba958d2e9c83e698ba828710aeb90f3e44d38","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/824ba958d2e9c83e698ba828710aeb90f3e44d38","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/824ba958d2e9c83e698ba828710aeb90f3e44d38/comments","author":null,"committer":null,"parents":[{"sha":"2a69f8d8715ec3556a3339d9e7dfbe883896c5bb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2a69f8d8715ec3556a3339d9e7dfbe883896c5bb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2a69f8d8715ec3556a3339d9e7dfbe883896c5bb"}],"stats":{"total":506,"additions":283,"deletions":223},"files":[{"sha":"377b061edcdf7a7eb22279324a280b5ef9ed7cce","filename":"core/src/main/java/org/syncope/core/notification/NotificationManager.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/824ba958d2e9c83e698ba828710aeb90f3e44d38/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/824ba958d2e9c83e698ba828710aeb90f3e44d38/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java?ref=824ba958d2e9c83e698ba828710aeb90f3e44d38","patch":"@@ -42,8 +42,10 @@\n /**\n  * Create notification tasks that will be executed by NotificationJob.\n  * @see NotificationTask\n-F */\n-@Transactional(rollbackFor = {Throwable.class})\n+ */\n+@Transactional(rollbackFor = {\n+    Throwable.class\n+})\n public class NotificationManager {\n \n     /**"},{"sha":"1f29b8dfedbb6ff67cc9b93741d4cf8918ad1899","filename":"core/src/main/java/org/syncope/core/policy/AccountPolicyEnforcer.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/824ba958d2e9c83e698ba828710aeb90f3e44d38/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FAccountPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/824ba958d2e9c83e698ba828710aeb90f3e44d38/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FAccountPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FAccountPolicyEnforcer.java?ref=824ba958d2e9c83e698ba828710aeb90f3e44d38","patch":"@@ -122,8 +122,7 @@ public void enforce(\n                 // propagate suspension if and only if it is required by policy\n                 if (policy.isPropagateSuspension()) {\n                     final List<PropagationTask> tasks = propagationManager.\n-                            getUpdateTaskIds(updated.getResult(),\n-                            null, null, null, Boolean.FALSE, null);\n+                            getUpdateTaskIds(updated, Boolean.FALSE);\n \n                     propagationManager.execute(tasks);\n                 }"},{"sha":"7afa3540573bdf6acf1c0124e34d51636d0c2dd5","filename":"core/src/main/java/org/syncope/core/propagation/PropagationManager.java","status":"modified","additions":57,"deletions":34,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/824ba958d2e9c83e698ba828710aeb90f3e44d38/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/824ba958d2e9c83e698ba828710aeb90f3e44d38/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java?ref=824ba958d2e9c83e698ba828710aeb90f3e44d38","patch":"@@ -67,6 +67,7 @@\n import org.syncope.core.rest.data.UserDataBinder;\n import org.syncope.core.util.AttributableUtil;\n import org.syncope.core.util.JexlUtil;\n+import org.syncope.core.workflow.WorkflowResult;\n import org.syncope.types.PropagationMode;\n import org.syncope.types.PropagationOperation;\n import org.syncope.types.IntMappingType;\n@@ -149,108 +150,130 @@ private SyncopeUser getSyncopeUser(final Long userId)\n     /**\n      * Create the user on every associated resource.\n      *\n-     * @param userId to be created\n+     * @param wfResult user to be propagated (and info associated), as per\n+     * result from workflow\n      * @param password to be set\n      * @param vAttrs virtual attributes to be set\n-     * @param enable wether user must be enabled or not\n      * @return list of propagation tasks\n      * @throws NotFoundException if userId is not found\n      */\n-    public List<PropagationTask> getCreateTaskIds(final Long userId,\n-            final String password, final List<AttributeTO> vAttrs,\n-            final Boolean enable)\n+    public List<PropagationTask> getCreateTaskIds(\n+            final WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n+            final String password, final List<AttributeTO> vAttrs)\n             throws NotFoundException {\n \n-        return getCreateTaskIds(userId, password, vAttrs, enable, null);\n+        return getCreateTaskIds(wfResult, password, vAttrs, null);\n     }\n \n     /**\n      * Create the user on every associated resource.\n      *\n-     * @param userId to be created\n+     * @param wfResult user to be propagated (and info associated), as per\n+     * result from workflow\n      * @param password to be set\n      * @param vAttrs virtual attributes to be set\n-     * @param enable wether user must be enabled or not\n      * @param syncResourceName name of external resource performing sync, hence\n      * not to be considered for propagation\n      * @return list of propagation tasks\n      * @throws NotFoundException if userId is not found\n      */\n-    public List<PropagationTask> getCreateTaskIds(final Long userId,\n+    public List<PropagationTask> getCreateTaskIds(\n+            final WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n             final String password, final List<AttributeTO> vAttrs,\n-            final Boolean enable, final String syncResourceName)\n+            final String syncResourceName)\n             throws NotFoundException {\n \n-        SyncopeUser user = getSyncopeUser(userId);\n+        SyncopeUser user = getSyncopeUser(wfResult.getResult().getKey());\n         if (vAttrs != null && !vAttrs.isEmpty()) {\n             userDataBinder.fillVirtual(user, vAttrs, AttributableUtil.USER);\n             user = userDAO.save(user);\n         }\n \n-        final PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.set(PropagationOperation.CREATE,\n-                user.getExternalResourceNames());\n+        final PropagationByResource propByRes = wfResult.getPropByRes();\n+        if (propByRes == null || propByRes.isEmpty()) {\n+            return Collections.EMPTY_LIST;\n+        }\n+\n         if (syncResourceName != null) {\n             propByRes.get(PropagationOperation.CREATE).remove(syncResourceName);\n         }\n \n-        return provision(user, password, enable, propByRes);\n+        return provision(user, password,\n+                wfResult.getResult().getValue(), propByRes);\n     }\n \n     /**\n      * Performs update on each resource associated to the user.\n      *\n-     * @param userId to be updated\n+     * @param wfResult user to be propagated (and info associated), as per\n+     * result from workflow\n+     * @param enable wether user must be enabled or not\n+     * @return list of propagation tasks\n+     * @throws NotFoundException if userId is not found\n+     */\n+    public List<PropagationTask> getUpdateTaskIds(\n+            final WorkflowResult<Long> wfResult, final Boolean enable)\n+            throws NotFoundException {\n+\n+        return getUpdateTaskIds(wfResult, null, null, null, enable, null);\n+    }\n+\n+    /**\n+     * Performs update on each resource associated to the user.\n+     *\n+     * @param wfResult user to be propagated (and info associated), as per\n+     * result from workflow\n      * @param password to be updated\n      * @param vAttrsToBeRemoved virtual attributes to be removed\n      * @param vAttrsToBeUpdated virtual attributes to be added\n      * @param enable wether user must be enabled or not\n-     * @param propByRes operations to perform on each resource\n      * @return list of propagation tasks\n      * @throws NotFoundException if userId is not found\n      */\n-    public List<PropagationTask> getUpdateTaskIds(final Long userId,\n+    public List<PropagationTask> getUpdateTaskIds(\n+            final WorkflowResult<Long> wfResult,\n             final String password, final Set<String> vAttrsToBeRemoved,\n-            final Set<AttributeMod> vAttrsToBeUpdated, final Boolean enable,\n-            final PropagationByResource propByRes)\n+            final Set<AttributeMod> vAttrsToBeUpdated, final Boolean enable)\n             throws NotFoundException {\n \n-        return getUpdateTaskIds(userId, password, vAttrsToBeRemoved,\n-                vAttrsToBeUpdated, enable, propByRes, null);\n+        return getUpdateTaskIds(wfResult, password, vAttrsToBeRemoved,\n+                vAttrsToBeUpdated, enable, null);\n     }\n \n     /**\n      * Performs update on each resource associated to the user.\n      *\n-     * @param userId to be updated\n+     * @param wfResult user to be propagated (and info associated), as per\n+     * result from workflow\n      * @param password to be updated\n      * @param vAttrsToBeRemoved virtual attributes to be removed\n      * @param vAttrsToBeUpdated virtual attributes to be added\n      * @param enable wether user must be enabled or not\n-     * @param propByRes operations to perform on each resource\n      * @param syncResourceName name of external resource performing sync, hence\n      * not to be considered for propagation\n      * @return list of propagation tasks\n      * @throws NotFoundException if userId is not found\n      */\n-    public List<PropagationTask> getUpdateTaskIds(final Long userId,\n+    public List<PropagationTask> getUpdateTaskIds(\n+            final WorkflowResult<Long> wfResult,\n             final String password, final Set<String> vAttrsToBeRemoved,\n             final Set<AttributeMod> vAttrsToBeUpdated, final Boolean enable,\n-            final PropagationByResource propByRes,\n             final String syncResourceName)\n             throws NotFoundException {\n \n-        SyncopeUser user = getSyncopeUser(userId);\n+        SyncopeUser user = getSyncopeUser(wfResult.getResult());\n \n-        Set<String> vAttrsToRemove = vAttrsToBeRemoved == null\n-                ? Collections.EMPTY_SET : vAttrsToBeRemoved;\n-        Set<AttributeMod> vAttrsToUpdate = vAttrsToBeUpdated == null\n-                ? Collections.EMPTY_SET : vAttrsToBeUpdated;\n         PropagationByResource localPropByRes = userDataBinder.fillVirtual(user,\n-                vAttrsToRemove, vAttrsToUpdate, AttributableUtil.USER);\n+                vAttrsToBeRemoved == null\n+                ? Collections.EMPTY_SET : vAttrsToBeRemoved,\n+                vAttrsToBeUpdated == null\n+                ? Collections.EMPTY_SET : vAttrsToBeUpdated,\n+                AttributableUtil.USER);\n+\n+        if (wfResult.getPropByRes() != null\n+                && !wfResult.getPropByRes().isEmpty()) {\n \n-        if (propByRes != null && !propByRes.isEmpty()) {\n-            localPropByRes.merge(propByRes);\n+            localPropByRes.merge(wfResult.getPropByRes());\n         } else {\n             localPropByRes.addAll(PropagationOperation.UPDATE,\n                     user.getExternalResourceNames());"},{"sha":"dc3f3667b041d58713e6905e8304a73651127f41","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":21,"deletions":21,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/824ba958d2e9c83e698ba828710aeb90f3e44d38/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/824ba958d2e9c83e698ba828710aeb90f3e44d38/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=824ba958d2e9c83e698ba828710aeb90f3e44d38","patch":"@@ -46,7 +46,6 @@\n import org.syncope.core.notification.NotificationManager;\n import org.syncope.core.persistence.beans.PropagationTask;\n import org.syncope.core.persistence.dao.UserSearchDAO;\n-import org.syncope.core.propagation.PropagationByResource;\n import org.syncope.core.propagation.PropagationManager;\n import org.syncope.core.util.EntitlementUtil;\n import org.syncope.core.workflow.UserWorkflowAdapter;\n@@ -265,12 +264,13 @@ public UserTO create(final HttpServletResponse response,\n                 wfAdapter.create(userTO);\n \n         List<PropagationTask> tasks = propagationManager.getCreateTaskIds(\n-                created.getResult().getKey(), userTO.getPassword(),\n-                userTO.getVirtualAttributes(), created.getResult().getValue());\n+                created, userTO.getPassword(), userTO.getVirtualAttributes());\n         propagationManager.execute(tasks);\n \n         notificationManager.createTasks(new WorkflowResult<Long>(\n-                created.getResult().getKey(), created.getPerformedTasks()));\n+                created.getResult().getKey(),\n+                created.getPropByRes(),\n+                created.getPerformedTasks()));\n \n         final UserTO savedTO = dataBinder.getUserTO(\n                 created.getResult().getKey());\n@@ -292,7 +292,7 @@ public UserTO activate(@RequestBody final UserTO userTO)\n                 wfAdapter.activate(userTO.getId(), userTO.getToken());\n \n         List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(\n-                updated.getResult(), null, null, null, Boolean.TRUE, null);\n+                updated, Boolean.TRUE);\n         propagationManager.execute(tasks);\n \n         notificationManager.createTasks(updated);\n@@ -313,21 +313,18 @@ public UserTO update(@RequestBody final UserMod userMod)\n \n         LOG.debug(\"User update called with {}\", userMod);\n \n-        WorkflowResult<Map.Entry<Long, PropagationByResource>> updated =\n-                wfAdapter.update(userMod);\n+        WorkflowResult<Long> updated = wfAdapter.update(userMod);\n \n         List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(\n-                updated.getResult().getKey(), userMod.getPassword(),\n+                updated, userMod.getPassword(),\n                 userMod.getVirtualAttributesToBeRemoved(),\n-                userMod.getVirtualAttributesToBeUpdated(),\n-                null, updated.getResult().getValue());\n+                userMod.getVirtualAttributesToBeUpdated(), null);\n         propagationManager.execute(tasks);\n \n-        notificationManager.createTasks(new WorkflowResult<Long>(\n-                updated.getResult().getKey(), updated.getPerformedTasks()));\n+        notificationManager.createTasks(updated);\n \n         final UserTO updatedTO =\n-                dataBinder.getUserTO(updated.getResult().getKey());\n+                dataBinder.getUserTO(updated.getResult());\n \n         LOG.debug(\"About to return updated user\\n{}\", updatedTO);\n \n@@ -346,7 +343,7 @@ public UserTO suspend(@PathVariable(\"userId\") final Long userId)\n         WorkflowResult<Long> updated = wfAdapter.suspend(userId);\n \n         List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(\n-                updated.getResult(), null, null, null, Boolean.FALSE, null);\n+                updated, Boolean.FALSE);\n         propagationManager.execute(tasks);\n \n         notificationManager.createTasks(updated);\n@@ -370,7 +367,7 @@ public UserTO reactivate(final @PathVariable(\"userId\") Long userId)\n         WorkflowResult<Long> updated = wfAdapter.reactivate(userId);\n \n         List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(\n-                updated.getResult(), null, null, null, Boolean.TRUE, null);\n+                updated, Boolean.TRUE);\n         propagationManager.execute(tasks);\n \n         notificationManager.createTasks(updated);\n@@ -397,7 +394,7 @@ public void delete(@PathVariable(\"userId\") final Long userId)\n         // will also effectively remove user from db, thus making virtually\n         // impossible by NotificationManager to fetch required user information\n         notificationManager.createTasks(\n-                new WorkflowResult<Long>(userId, \"delete\"));\n+                new WorkflowResult<Long>(userId, null, \"delete\"));\n \n         List<PropagationTask> tasks =\n                 propagationManager.getDeleteTaskIds(userId);\n@@ -421,7 +418,7 @@ public UserTO executeWorkflow(@RequestBody final UserTO userTO,\n         WorkflowResult<Long> updated = wfAdapter.execute(userTO, taskId);\n \n         List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(\n-                updated.getResult(), null, null, null, null, null);\n+                updated, null);\n         propagationManager.execute(tasks);\n \n         notificationManager.createTasks(updated);\n@@ -476,15 +473,18 @@ public UserTO submitForm(@RequestBody final WorkflowFormTO form)\n \n         LOG.debug(\"About to process form {}\", form);\n \n-        Long updatedId = wfAdapter.submitForm(form,\n-                SecurityContextHolder.getContext().\n+        WorkflowResult<Map.Entry<Long, String>> updated =\n+                wfAdapter.submitForm(form, SecurityContextHolder.getContext().\n                 getAuthentication().getName());\n \n         List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(\n-                updatedId, null, null, null, Boolean.TRUE, null);\n+                new WorkflowResult<Long>(updated.getResult().getKey(),\n+                updated.getPropByRes(), updated.getPerformedTasks()),\n+                updated.getResult().getValue(), null, null, Boolean.TRUE);\n         propagationManager.execute(tasks);\n \n-        final UserTO savedTO = dataBinder.getUserTO(updatedId);\n+        final UserTO savedTO = dataBinder.getUserTO(\n+                updated.getResult().getKey());\n \n         LOG.debug(\"About to return user after form processing\\n{}\", savedTO);\n "},{"sha":"bd74ed358efde7cc4944a4b18f8f6976e0de6eff","filename":"core/src/main/java/org/syncope/core/scheduling/SyncJob.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/824ba958d2e9c83e698ba828710aeb90f3e44d38/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/824ba958d2e9c83e698ba828710aeb90f3e44d38/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java?ref=824ba958d2e9c83e698ba828710aeb90f3e44d38","patch":"@@ -60,7 +60,6 @@\n import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.persistence.dao.UserSearchDAO;\n import org.syncope.core.propagation.ConnectorFacadeProxy;\n-import org.syncope.core.propagation.PropagationByResource;\n import org.syncope.core.propagation.PropagationException;\n import org.syncope.core.propagation.PropagationManager;\n import org.syncope.core.rest.controller.InvalidSearchConditionException;\n@@ -623,8 +622,7 @@ private SyncResult createUser(final SyncDelta delta, final boolean dryRun)\n                         wfAdapter.create(userTO, true);\n                 List<PropagationTask> tasks =\n                         propagationManager.getCreateTaskIds(\n-                        created.getResult().getKey(), userTO.getPassword(),\n-                        null, created.getResult().getValue(),\n+                        created, userTO.getPassword(), null,\n                         ((SyncTask) this.task).getResource().getName());\n                 propagationManager.execute(tasks);\n \n@@ -678,19 +676,18 @@ private void updateUsers(final SyncDelta delta,\n                     result.setUsername(userMod.getUsername());\n \n                     if (!dryRun) {\n-                        WorkflowResult<Map.Entry<Long, PropagationByResource>> updated =\n+                        WorkflowResult<Long> updated =\n                                 wfAdapter.update(userMod);\n                         List<PropagationTask> tasks =\n                                 propagationManager.getUpdateTaskIds(\n-                                updated.getResult().getKey(),\n+                                updated,\n                                 userMod.getPassword(),\n                                 null, null, null,\n-                                updated.getResult().getValue(),\n                                 ((SyncTask) this.task).getResource().getName());\n                         propagationManager.execute(tasks);\n \n                         userTO = userDataBinder.getUserTO(\n-                                updated.getResult().getKey());\n+                                updated.getResult());\n                     }\n                 } catch (PropagationException e) {\n                     LOG.error(\"Could not propagate user \""},{"sha":"b68df32fe6d8aac224586ff9e287d89df79e0605","filename":"core/src/main/java/org/syncope/core/util/EncryptionUtil.java","status":"removed","additions":0,"deletions":98,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a69f8d8715ec3556a3339d9e7dfbe883896c5bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FEncryptionUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a69f8d8715ec3556a3339d9e7dfbe883896c5bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FEncryptionUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FEncryptionUtil.java?ref=2a69f8d8715ec3556a3339d9e7dfbe883896c5bb","patch":"@@ -1,98 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.util;\n-\n-import javax.crypto.Cipher;\n-import javax.crypto.SecretKey;\n-import javax.crypto.SecretKeyFactory;\n-import javax.crypto.spec.DESKeySpec;\n-import org.identityconnectors.common.Base64;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.syncope.core.persistence.dao.ConfDAO;\n-\n-public class EncryptionUtil {\n-\n-    /**\n-     * Logger.\n-     */\n-    private static final Logger LOG =\n-            LoggerFactory.getLogger(EncryptionUtil.class);\n-\n-    @Autowired\n-    private ConfDAO confDAO;\n-\n-    public String encrypt(final String toBeCrypted) {\n-        String result = null;\n-\n-        try {\n-            final DESKeySpec keySpec =\n-                    new DESKeySpec(confDAO.find(\n-                    \"token.encryption.key\").getValue().getBytes(\"UTF8\"));\n-\n-            final SecretKeyFactory keyFactory =\n-                    SecretKeyFactory.getInstance(\"DES\");\n-\n-            final SecretKey key = keyFactory.generateSecret(keySpec);\n-\n-            final byte[] cleartext = toBeCrypted.getBytes(\"UTF8\");\n-\n-            final Cipher cipher = Cipher.getInstance(\"DES\");\n-\n-            LOG.debug(\"To Be Encrypted: {}\", toBeCrypted);\n-\n-            cipher.init(Cipher.ENCRYPT_MODE, key);\n-            result = Base64.encode(cipher.doFinal(cleartext));\n-\n-            LOG.debug(\"Encrypted: {}\", result);\n-        } catch (Exception e) {\n-            LOG.error(\"Encrypt operation failed\", e);\n-        }\n-\n-        return result;\n-    }\n-\n-    public String decrypt(final String toBeDecrypted) {\n-        String result = null;\n-\n-        try {\n-            final DESKeySpec keySpec =\n-                    new DESKeySpec(confDAO.find(\n-                    \"token.encryption.key\").getValue().getBytes(\"UTF8\"));\n-\n-            final SecretKeyFactory keyFactory =\n-                    SecretKeyFactory.getInstance(\"DES\");\n-\n-            final SecretKey key = keyFactory.generateSecret(keySpec);\n-\n-            final byte[] encrypedPwdBytes =\n-                    Base64.decode(toBeDecrypted);\n-\n-            final Cipher cipher = Cipher.getInstance(\"DES\");\n-\n-            LOG.debug(\"To Be Decrypted: {}\", toBeDecrypted);\n-\n-            cipher.init(Cipher.DECRYPT_MODE, key);\n-            result = new String(cipher.doFinal(encrypedPwdBytes));\n-\n-            LOG.debug(\"Decrypted: {}\", result);\n-        } catch (Exception e) {\n-            LOG.error(\"Decrypt operation failed\", e);\n-        }\n-\n-        return result;\n-    }\n-}"},{"sha":"22baf7da17010b43f4aa5e4c85055e1b48bf4f5e","filename":"core/src/main/java/org/syncope/core/workflow/AbstractUserWorkflowAdapter.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/824ba958d2e9c83e698ba828710aeb90f3e44d38/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/824ba958d2e9c83e698ba828710aeb90f3e44d38/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractUserWorkflowAdapter.java?ref=824ba958d2e9c83e698ba828710aeb90f3e44d38","patch":"@@ -13,7 +13,6 @@\n  */\n package org.syncope.core.workflow;\n \n-import java.util.Map;\n import java.util.Map.Entry;\n import javassist.NotFoundException;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -22,7 +21,6 @@\n import org.syncope.client.to.UserTO;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.UserDAO;\n-import org.syncope.core.propagation.PropagationByResource;\n import org.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.syncope.core.rest.data.UserDataBinder;\n \n@@ -57,13 +55,12 @@ public WorkflowResult<Long> activate(final Long userId, final String token)\n         return doActivate(dataBinder.getUserFromId(userId), token);\n     }\n \n-    protected abstract WorkflowResult<Map.Entry<Long, PropagationByResource>> doUpdate(\n-            SyncopeUser user, UserMod userMod)\n+    protected abstract WorkflowResult<Long> doUpdate(SyncopeUser user,\n+            UserMod userMod)\n             throws WorkflowException;\n \n     @Override\n-    public WorkflowResult<Map.Entry<Long, PropagationByResource>> update(\n-            final UserMod userMod)\n+    public WorkflowResult<Long> update(final UserMod userMod)\n             throws UnauthorizedRoleException, NotFoundException,\n             WorkflowException {\n "},{"sha":"ef4c0cd04f6848559f1ed75ac94968525b1cb0f0","filename":"core/src/main/java/org/syncope/core/workflow/ActivitiUserWorkflowAdapter.java","status":"modified","additions":121,"deletions":30,"changes":151,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/824ba958d2e9c83e698ba828710aeb90f3e44d38/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/824ba958d2e9c83e698ba828710aeb90f3e44d38/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FActivitiUserWorkflowAdapter.java?ref=824ba958d2e9c83e698ba828710aeb90f3e44d38","patch":"@@ -50,6 +50,8 @@\n import org.activiti.engine.task.Task;\n import org.apache.commons.collections.keyvalue.DefaultMapEntry;\n import org.apache.commons.lang.StringUtils;\n+import org.identityconnectors.common.security.EncryptorFactory;\n+import org.identityconnectors.common.security.SecurityUtil;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n@@ -63,6 +65,7 @@\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.propagation.PropagationByResource;\n import org.syncope.core.rest.controller.UnauthorizedRoleException;\n+import org.syncope.types.PropagationOperation;\n import org.syncope.types.WorkflowFormPropertyType;\n import org.w3c.dom.Document;\n import org.w3c.dom.NodeList;\n@@ -100,6 +103,8 @@ public class ActivitiUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n \n     public static final String PROPAGATE_ENABLE = \"propagateEnable\";\n \n+    public static final String ENCRYPTED_PWD = \"encryptedPwd\";\n+\n     @Resource(name = \"adminUser\")\n     private String adminUser;\n \n@@ -129,6 +134,28 @@ private void updateStatus(final SyncopeUser user) {\n         }\n     }\n \n+    private boolean waitingForForm(final SyncopeUser user) {\n+        boolean result = false;\n+\n+        List<Task> tasks = taskService.createTaskQuery().processInstanceId(\n+                user.getWorkflowId()).list();\n+        if (tasks.isEmpty() || tasks.size() > 1) {\n+            LOG.warn(\"While checking if form task: unexpected task number ({})\",\n+                    tasks.size());\n+        } else {\n+            try {\n+                TaskFormData formData =\n+                        formService.getTaskFormData(tasks.get(0).getId());\n+                result = formData != null\n+                        && !formData.getFormProperties().isEmpty();\n+            } catch (ActivitiException e) {\n+                LOG.warn(\"Could not get task form data\", e);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n     private Set<String> getPerformedTasks(final SyncopeUser user) {\n         Set<String> result = new HashSet<String>();\n \n@@ -142,6 +169,24 @@ private Set<String> getPerformedTasks(final SyncopeUser user) {\n         return result;\n     }\n \n+    private String encrypt(final String clear) {\n+        byte[] encryptedBytes = EncryptorFactory.getInstance().\n+                getDefaultEncryptor().encrypt(\n+                clear.getBytes());\n+        char[] encryptedChars = SecurityUtil.bytesToChars(encryptedBytes);\n+\n+        return new String(encryptedChars);\n+    }\n+\n+    private String decrypt(final String crypted) {\n+        char[] encryptedChars = crypted.toCharArray();\n+        byte[] encryptedBytes = EncryptorFactory.getInstance().\n+                getDefaultEncryptor().decrypt(\n+                SecurityUtil.charsToBytes(encryptedChars));\n+\n+        return new String(encryptedBytes);\n+    }\n+\n     @Override\n     public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO,\n             final boolean disablePwdPolicyCheck)\n@@ -173,8 +218,25 @@ public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO,\n         Boolean enable = (Boolean) runtimeService.getVariable(\n                 processInstance.getProcessInstanceId(), PROPAGATE_ENABLE);\n \n+        // save resources to be propagated and password for later -\n+        // after form submission - propagation\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.set(PropagationOperation.CREATE,\n+                user.getExternalResourceNames());\n+        if (waitingForForm(user)) {\n+            runtimeService.setVariable(processInstance.getProcessInstanceId(),\n+                    PROP_BY_RESOURCE, propByRes);\n+            propByRes = null;\n+\n+            if (StringUtils.isNotBlank(userTO.getPassword())) {\n+                runtimeService.setVariable(\n+                        processInstance.getProcessInstanceId(),\n+                        ENCRYPTED_PWD, encrypt(userTO.getPassword()));\n+            }\n+        }\n+\n         return new WorkflowResult<Map.Entry<Long, Boolean>>(\n-                new DefaultMapEntry(user.getId(), enable),\n+                new DefaultMapEntry(user.getId(), enable), propByRes,\n                 getPerformedTasks(user));\n     }\n \n@@ -224,11 +286,11 @@ protected WorkflowResult<Long> doActivate(final SyncopeUser user,\n         updateStatus(user);\n         SyncopeUser updated = userDAO.save(user);\n \n-        return new WorkflowResult<Long>(updated.getId(), performedTasks);\n+        return new WorkflowResult<Long>(updated.getId(), null, performedTasks);\n     }\n \n     @Override\n-    protected WorkflowResult<Map.Entry<Long, PropagationByResource>> doUpdate(\n+    protected WorkflowResult<Long> doUpdate(\n             final SyncopeUser user, final UserMod userMod)\n             throws WorkflowException {\n \n@@ -237,17 +299,21 @@ protected WorkflowResult<Map.Entry<Long, PropagationByResource>> doUpdate(\n         updateStatus(user);\n         SyncopeUser updated = userDAO.save(user);\n \n-        PropagationByResource propByRes;\n-        try {\n-            propByRes = (PropagationByResource) runtimeService.getVariable(\n-                    user.getWorkflowId(), PROP_BY_RESOURCE);\n-        } catch (ActivitiException e) {\n-            throw new WorkflowException(e);\n+        PropagationByResource propByRes =\n+                (PropagationByResource) runtimeService.getVariable(\n+                user.getWorkflowId(), PROP_BY_RESOURCE);\n+\n+        // save resources to be propagated and password for later -\n+        // after form submission - propagation\n+        if (waitingForForm(user)\n+                && StringUtils.isNotBlank(userMod.getPassword())) {\n+\n+            runtimeService.setVariable(user.getWorkflowId(),\n+                    ENCRYPTED_PWD, encrypt(userMod.getPassword()));\n         }\n \n-        return new WorkflowResult<Map.Entry<Long, PropagationByResource>>(\n-                new DefaultMapEntry(updated.getId(), propByRes),\n-                performedTasks);\n+        return new WorkflowResult<Long>(\n+                updated.getId(), propByRes, performedTasks);\n     }\n \n     @Override\n@@ -259,7 +325,7 @@ protected WorkflowResult<Long> doSuspend(final SyncopeUser user)\n         updateStatus(user);\n         SyncopeUser updated = userDAO.save(user);\n \n-        return new WorkflowResult<Long>(updated.getId(), performedTasks);\n+        return new WorkflowResult<Long>(updated.getId(), null, performedTasks);\n     }\n \n     @Override\n@@ -271,7 +337,7 @@ protected WorkflowResult<Long> doReactivate(final SyncopeUser user)\n \n         SyncopeUser updated = userDAO.save(user);\n \n-        return new WorkflowResult<Long>(updated.getId(), performedTasks);\n+        return new WorkflowResult<Long>(updated.getId(), null, performedTasks);\n     }\n \n     @Override\n@@ -297,7 +363,7 @@ public WorkflowResult<Long> execute(final UserTO userTO,\n         updateStatus(user);\n         SyncopeUser updated = userDAO.save(user);\n \n-        return new WorkflowResult<Long>(updated.getId(), performedTasks);\n+        return new WorkflowResult<Long>(updated.getId(), null, performedTasks);\n     }\n \n     @Override\n@@ -316,14 +382,13 @@ public WorkflowDefinitionTO getDefinition()\n \n         InputStream procDefIS = repositoryService.getResourceAsStream(\n                 procDef.getDeploymentId(), WF_PROCESS_RESOURCE);\n-        Reader reader =\n-                new BufferedReader(new InputStreamReader(procDefIS));\n-\n+        Reader reader = null;\n         Writer writer = new StringWriter();\n-\n-        char[] buffer = new char[1024];\n-        int n;\n         try {\n+            reader = new BufferedReader(new InputStreamReader(procDefIS));\n+\n+            int n;\n+            char[] buffer = new char[1024];\n             while ((n = reader.read(buffer)) != -1) {\n                 writer.write(buffer, 0, n);\n             }\n@@ -332,7 +397,12 @@ public WorkflowDefinitionTO getDefinition()\n                     procDef.getKey(), e);\n         } finally {\n             try {\n-                procDefIS.close();\n+                if (reader != null) {\n+                    reader.close();\n+                }\n+                if (procDefIS != null) {\n+                    procDefIS.close();\n+                }\n             } catch (IOException ioe) {\n                 LOG.error(\"While closing input stream for {}\",\n                         procDef.getKey(), ioe);\n@@ -577,7 +647,8 @@ public WorkflowFormTO claimForm(final String taskId,\n     }\n \n     @Override\n-    public Long submitForm(final WorkflowFormTO form, final String username)\n+    public WorkflowResult<Map.Entry<Long, String>> submitForm(\n+            final WorkflowFormTO form, final String username)\n             throws NotFoundException, WorkflowException {\n \n         Map.Entry<Task, TaskFormData> checked =\n@@ -590,23 +661,43 @@ public Long submitForm(final WorkflowFormTO form, final String username)\n                     + username));\n         }\n \n+        SyncopeUser user = userDAO.findByWorkflowId(\n+                checked.getKey().getProcessInstanceId());\n+        if (user == null) {\n+            throw new NotFoundException(\"User with workflow id \"\n+                    + checked.getKey().getProcessInstanceId());\n+        }\n+\n+        Set<String> preTasks = getPerformedTasks(user);\n         try {\n             formService.submitTaskFormData(form.getTaskId(),\n                     form.getPropertiesForSubmit());\n         } catch (ActivitiException e) {\n             throw new WorkflowException(e);\n         }\n \n-        SyncopeUser user = userDAO.findByWorkflowId(\n-                checked.getKey().getProcessInstanceId());\n-        if (user == null) {\n-            throw new NotFoundException(\"User with workflow id \"\n-                    + checked.getKey().getProcessInstanceId());\n-        }\n+        Set<String> postTasks = getPerformedTasks(user);\n+        postTasks.removeAll(preTasks);\n+        postTasks.add(form.getTaskId());\n \n         updateStatus(user);\n         SyncopeUser updated = userDAO.save(user);\n \n-        return updated.getId();\n+        // see if there is any propagation to be done\n+        PropagationByResource propByRes =\n+                (PropagationByResource) runtimeService.getVariable(\n+                user.getWorkflowId(), PROP_BY_RESOURCE);\n+\n+        // fetch - if available - the encrpted password\n+        String clearPassword = null;\n+        String encryptedPwd = (String) runtimeService.getVariable(\n+                user.getWorkflowId(), ENCRYPTED_PWD);\n+        if (StringUtils.isNotBlank(encryptedPwd)) {\n+            clearPassword = decrypt(encryptedPwd);\n+        }\n+\n+        return new WorkflowResult<Map.Entry<Long, String>>(\n+                new DefaultMapEntry(updated.getId(), clearPassword),\n+                propByRes, postTasks);\n     }\n }"},{"sha":"bea6a657a0a6bfa4b8397a3f06956a1c3d91a31d","filename":"core/src/main/java/org/syncope/core/workflow/NoOpUserWorkflowAdapter.java","status":"modified","additions":16,"deletions":10,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/824ba958d2e9c83e698ba828710aeb90f3e44d38/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FNoOpUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/824ba958d2e9c83e698ba828710aeb90f3e44d38/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FNoOpUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FNoOpUserWorkflowAdapter.java?ref=824ba958d2e9c83e698ba828710aeb90f3e44d38","patch":"@@ -27,6 +27,7 @@\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.propagation.PropagationByResource;\n import org.syncope.core.rest.controller.UnauthorizedRoleException;\n+import org.syncope.types.PropagationOperation;\n \n /**\n  * Simple implementation basically not involving any workflow engine.\n@@ -49,18 +50,22 @@ public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO,\n \n         SyncopeUser user = new SyncopeUser();\n         dataBinder.create(user, userTO);\n-        \n+\n         // this will make SyncopeUserValidator not to consider\n         // password policies at all\n         if (disablePwdPolicyCheck) {\n             user.removeClearPassword();\n         }\n-        \n+\n         user.setStatus(\"created\");\n         user = userDAO.save(user);\n \n+        final PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.set(PropagationOperation.CREATE,\n+                user.getExternalResourceNames());\n         return new WorkflowResult<Map.Entry<Long, Boolean>>(\n-                new DefaultMapEntry(user.getId(), Boolean.TRUE), \"create\");\n+                new DefaultMapEntry(user.getId(), Boolean.TRUE),\n+                propByRes, \"create\");\n     }\n \n     @Override\n@@ -77,20 +82,20 @@ protected WorkflowResult<Long> doActivate(final SyncopeUser user,\n         user.setStatus(\"active\");\n         SyncopeUser updated = userDAO.save(user);\n \n-        return new WorkflowResult<Long>(updated.getId(), \"activate\");\n+        return new WorkflowResult<Long>(updated.getId(), null, \"activate\");\n     }\n \n     @Override\n-    protected WorkflowResult<Map.Entry<Long, PropagationByResource>> doUpdate(\n+    protected WorkflowResult<Long> doUpdate(\n             final SyncopeUser user, final UserMod userMod)\n             throws WorkflowException {\n \n         PropagationByResource propByRes = dataBinder.update(user, userMod);\n \n         SyncopeUser updated = userDAO.save(user);\n \n-        return new WorkflowResult<Map.Entry<Long, PropagationByResource>>(\n-                new DefaultMapEntry(updated.getId(), propByRes), \"update\");\n+        return new WorkflowResult<Long>(\n+                updated.getId(), propByRes, \"update\");\n     }\n \n     @Override\n@@ -100,7 +105,7 @@ protected WorkflowResult<Long> doSuspend(final SyncopeUser user)\n         user.setStatus(\"suspended\");\n         SyncopeUser updated = userDAO.save(user);\n \n-        return new WorkflowResult<Long>(updated.getId(), \"suspend\");\n+        return new WorkflowResult<Long>(updated.getId(), null, \"suspend\");\n     }\n \n     @Override\n@@ -110,7 +115,7 @@ protected WorkflowResult<Long> doReactivate(final SyncopeUser user)\n         user.setStatus(\"active\");\n         SyncopeUser updated = userDAO.save(user);\n \n-        return new WorkflowResult<Long>(updated.getId(), \"suspend\");\n+        return new WorkflowResult<Long>(updated.getId(), null, \"reactivate\");\n     }\n \n     @Override\n@@ -173,7 +178,8 @@ public WorkflowFormTO claimForm(final String taskId, final String username)\n     }\n \n     @Override\n-    public Long submitForm(final WorkflowFormTO form, final String username)\n+    public WorkflowResult<Map.Entry<Long, String>> submitForm(\n+            final WorkflowFormTO form, final String username)\n             throws NotFoundException, WorkflowException {\n \n         throw new WorkflowException("},{"sha":"8ad03b8f15d340767eb13447c0ac2012f15f40eb","filename":"core/src/main/java/org/syncope/core/workflow/UserWorkflowAdapter.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/824ba958d2e9c83e698ba828710aeb90f3e44d38/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/824ba958d2e9c83e698ba828710aeb90f3e44d38/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FUserWorkflowAdapter.java?ref=824ba958d2e9c83e698ba828710aeb90f3e44d38","patch":"@@ -21,7 +21,6 @@\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.client.to.WorkflowDefinitionTO;\n import org.syncope.client.to.WorkflowFormTO;\n-import org.syncope.core.propagation.PropagationByResource;\n import org.syncope.core.rest.controller.UnauthorizedRoleException;\n \n /**\n@@ -39,7 +38,7 @@ public interface UserWorkflowAdapter {\n      */\n     WorkflowResult<Map.Entry<Long, Boolean>> create(UserTO userTO)\n             throws UnauthorizedRoleException, WorkflowException;\n-    \n+\n     /**\n      * Create an user, optionally disabling password policy check.\n      *\n@@ -90,8 +89,7 @@ WorkflowResult<Long> activate(Long userId, String token)\n      * @throws NotFoundException user not found exception\n      * @throws WorkflowException workflow exception\n      */\n-    WorkflowResult<Map.Entry<Long, PropagationByResource>> update(\n-            UserMod userMod)\n+    WorkflowResult<Long> update(UserMod userMod)\n             throws UnauthorizedRoleException, NotFoundException,\n             WorkflowException;\n \n@@ -211,6 +209,7 @@ WorkflowFormTO claimForm(String taskId, String username)\n      * @throws NotFoundException not found exception\n      * @throws WorkflowException workflow exception\n      */\n-    Long submitForm(WorkflowFormTO form, String username)\n+    WorkflowResult<Map.Entry<Long, String>> submitForm(\n+            WorkflowFormTO form, String username)\n             throws NotFoundException, WorkflowException;\n }"},{"sha":"0319636c8d05c8d3870291fa4c52fd0373af2585","filename":"core/src/main/java/org/syncope/core/workflow/WorkflowResult.java","status":"modified","additions":24,"deletions":6,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/824ba958d2e9c83e698ba828710aeb90f3e44d38/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/824ba958d2e9c83e698ba828710aeb90f3e44d38/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowResult.java?ref=824ba958d2e9c83e698ba828710aeb90f3e44d38","patch":"@@ -19,23 +19,41 @@\n import org.apache.commons.lang.builder.HashCodeBuilder;\n import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n import org.apache.commons.lang.builder.ToStringStyle;\n+import org.syncope.core.propagation.PropagationByResource;\n \n public class WorkflowResult<T> {\n \n     private T result;\n \n+    private PropagationByResource propByRes;\n+\n     private Set<String> performedTasks;\n \n-    public WorkflowResult(final T result, final String performedTask) {\n+    public WorkflowResult(final T result,\n+            final PropagationByResource propByRes, final String performedTask) {\n+\n         this.result = result;\n+        this.propByRes = propByRes;\n         this.performedTasks = Collections.singleton(performedTask);\n     }\n \n-    public WorkflowResult(final T result, final Set<String> performedTasks) {\n+    public WorkflowResult(final T result,\n+            final PropagationByResource propByRes,\n+            final Set<String> performedTasks) {\n+\n         this.result = result;\n+        this.propByRes = propByRes;\n         this.performedTasks = performedTasks;\n     }\n \n+    public T getResult() {\n+        return result;\n+    }\n+\n+    public void setResult(final T result) {\n+        this.result = result;\n+    }\n+\n     public Set<String> getPerformedTasks() {\n         return performedTasks;\n     }\n@@ -44,12 +62,12 @@ public void setPerformedTasks(final Set<String> performedTasks) {\n         this.performedTasks = performedTasks;\n     }\n \n-    public T getResult() {\n-        return result;\n+    public PropagationByResource getPropByRes() {\n+        return propByRes;\n     }\n \n-    public void setResult(final T result) {\n-        this.result = result;\n+    public void setPropByRes(final PropagationByResource propByRes) {\n+        this.propByRes = propByRes;\n     }\n \n     @Override"},{"sha":"b1ebd3ddc20df86f0c079a22b5220805c1438cd7","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":28,"deletions":2,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/824ba958d2e9c83e698ba828710aeb90f3e44d38/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/824ba958d2e9c83e698ba828710aeb90f3e44d38/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=824ba958d2e9c83e698ba828710aeb90f3e44d38","patch":"@@ -715,20 +715,34 @@ public final void createWithReject() {\n \n     @Test\n     public final void createWithApproval() {\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+\n         UserTO userTO = getSampleTO(\"createWithApproval@syncope-idm.org\");\n+        userTO.addResource(\"resource-testdb\");\n \n         // User with role 9 are defined in workflow as subject to approval\n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(9L);\n         userTO.addMembership(membershipTO);\n \n-        // 1. create user with role 9\n+        // 1. create user with role 9 (and verify that no propagation occurred)\n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n                 userTO, UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(1, userTO.getMemberships().size());\n         assertEquals(9, userTO.getMemberships().get(0).getRoleId());\n         assertEquals(\"createApproval\", userTO.getStatus());\n+        assertEquals(Collections.singleton(\"resource-testdb\"),\n+                userTO.getResources());\n+        assertTrue(userTO.getPropagationStatusMap().isEmpty());\n+        Exception exception = null;\n+        try {\n+            jdbcTemplate.queryForInt(\n+                    \"SELECT id FROM test WHERE id=?\", userTO.getId());\n+        } catch (EmptyResultDataAccessException e) {\n+            exception = e;\n+        }\n+        assertNotNull(exception);\n \n         // 2. request if there is any pending task for user just created\n         WorkflowFormTO form = restTemplate.getForObject(\n@@ -746,7 +760,7 @@ public final void createWithApproval() {\n         assertNotNull(form.getTaskId());\n         assertNotNull(form.getOwner());\n \n-        // 5. approve user\n+        // 5. approve user (and verify that propagation occurred)\n         Map<String, WorkflowFormPropertyTO> props = form.getPropertiesAsMap();\n         props.get(\"approve\").setValue(Boolean.TRUE.toString());\n         form.setProperties(props.values());\n@@ -755,6 +769,18 @@ public final void createWithApproval() {\n                 form, UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n+        assertEquals(Collections.singleton(\"resource-testdb\"),\n+                userTO.getResources());\n+        assertFalse(userTO.getPropagationStatusMap().isEmpty());\n+        exception = null;\n+        try {\n+            int id = jdbcTemplate.queryForInt(\n+                    \"SELECT id FROM test WHERE id=?\", userTO.getId());\n+            assertEquals(userTO.getId(), id);\n+        } catch (EmptyResultDataAccessException e) {\n+            exception = e;\n+        }\n+        assertNull(exception);\n \n         // 6. update user\n         UserMod userMod = new UserMod();"}]}