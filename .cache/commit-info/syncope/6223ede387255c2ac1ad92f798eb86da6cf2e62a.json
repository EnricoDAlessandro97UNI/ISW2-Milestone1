{"sha":"6223ede387255c2ac1ad92f798eb86da6cf2e62a","node_id":"C_kwDOJfYA1toAKDYyMjNlZGUzODcyNTVjMmFjMWFkOTJmNzk4ZWI4NmRhNmNmMmU2MmE","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-07-06T12:51:54Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-07-06T12:51:54Z"},"message":"[SYNCOPE-1545] Fixing auth, attr release and access policy removal + supporting realm for client apps","tree":{"sha":"8dbf5371de7e56ca8fd7ec44898a70f2bfe9c867","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8dbf5371de7e56ca8fd7ec44898a70f2bfe9c867"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6223ede387255c2ac1ad92f798eb86da6cf2e62a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6223ede387255c2ac1ad92f798eb86da6cf2e62a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6223ede387255c2ac1ad92f798eb86da6cf2e62a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6223ede387255c2ac1ad92f798eb86da6cf2e62a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"b117b73d19ab36135e8a10c4eb2c9f315e870a65","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b117b73d19ab36135e8a10c4eb2c9f315e870a65","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b117b73d19ab36135e8a10c4eb2c9f315e870a65"}],"stats":{"total":666,"additions":449,"deletions":217},"files":[{"sha":"da990b689765ea0d8bd89e9f4355d893f6f3b049","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/clientapps/CASSPDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FCASSPDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FCASSPDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FCASSPDirectoryPanel.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -30,7 +30,7 @@\n \n public class CASSPDirectoryPanel extends ClientAppDirectoryPanel<CASSPClientAppTO> {\n \n-    private static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = 1099982287259118170L;\n \n     public CASSPDirectoryPanel(final String id, final PageReference pageRef) {\n         super(id, ClientAppType.CASSP, pageRef);"},{"sha":"bcc20e79cf5717b4c825adea8aa19b1527c6395d","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/clientapps/ClientAppModalPanelBuilder.java","status":"modified","additions":29,"deletions":1,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppModalPanelBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppModalPanelBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppModalPanelBuilder.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -20,17 +20,21 @@\n \n import java.util.ArrayList;\n import java.util.Comparator;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.commons.RealmsUtils;\n import org.apache.syncope.client.console.panels.AbstractModalPanel;\n import org.apache.syncope.client.console.rest.ClientAppRestClient;\n import org.apache.syncope.client.console.rest.PolicyRestClient;\n+import org.apache.syncope.client.console.rest.RealmRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxSearchFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.PolicyRenderer;\n import org.apache.syncope.client.ui.commons.Constants;\n@@ -44,8 +48,10 @@\n import org.apache.syncope.client.ui.commons.panels.WizardModalPanel;\n import org.apache.syncope.client.ui.commons.wizards.AbstractModalPanelBuilder;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.to.ClientAppTO;\n+import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.types.OIDCGrantType;\n import org.apache.syncope.common.lib.types.OIDCResponseType;\n@@ -56,6 +62,7 @@\n import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteSettings;\n import org.apache.wicket.markup.html.form.AbstractSingleSelectChoice;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n@@ -122,7 +129,7 @@ public WizardModalPanel<T> build(final String id, final int index, final AjaxWiz\n \n     private class Profile extends AbstractModalPanel<T> {\n \n-        private static final long serialVersionUID = 1L;\n+        private static final long serialVersionUID = 7647959917047450318L;\n \n         private final T clientAppTO;\n \n@@ -134,6 +141,27 @@ private class Profile extends AbstractModalPanel<T> {\n \n             List<Component> fields = new ArrayList<>();\n \n+            boolean isSearchEnabled = RealmsUtils.isSearchEnabled();\n+            AutoCompleteSettings settings = new AutoCompleteSettings();\n+            settings.setShowCompleteListOnFocusGain(!isSearchEnabled);\n+            settings.setShowListOnEmptyInput(!isSearchEnabled);\n+            AjaxSearchFieldPanel realm = new AjaxSearchFieldPanel(\n+                    \"field\", \"realm\", new PropertyModel<>(clientAppTO, \"realm\"), settings) {\n+\n+                private static final long serialVersionUID = -6390474600233486704L;\n+\n+                @Override\n+                protected Iterator<String> getChoices(final String input) {\n+                    return (isSearchEnabled\n+                            ? RealmRestClient.search(RealmsUtils.buildQuery(input)).getResult()\n+                            : RealmRestClient.list(SyncopeConstants.ROOT_REALM)).\n+                            stream().filter(realm -> SyncopeConsoleSession.get().getAuthRealms().stream().\n+                            anyMatch(authRealm -> realm.getFullPath().startsWith(authRealm))).\n+                            map(RealmTO::getFullPath).collect(Collectors.toList()).iterator();\n+                }\n+            };\n+            fields.add(realm.setOutputMarkupId(true));\n+\n             AjaxTextFieldPanel name = new AjaxTextFieldPanel(\n                     \"field\", Constants.NAME_FIELD_NAME,\n                     new PropertyModel<>(clientAppTO, Constants.NAME_FIELD_NAME), false);"},{"sha":"94492dcda226bb193e84b26a59e83b7c68b0c0a0","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ConnectorDetailsPanel.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -54,7 +54,7 @@ public ConnectorDetailsPanel(final ConnInstanceTO connInstanceTO, final List<Con\n \n         boolean isSearchEnabled = RealmsUtils.isSearchEnabled();\n \n-        final AutoCompleteSettings settings = new AutoCompleteSettings();\n+        AutoCompleteSettings settings = new AutoCompleteSettings();\n         settings.setShowCompleteListOnFocusGain(!isSearchEnabled);\n         settings.setShowListOnEmptyInput(!isSearchEnabled);\n \n@@ -73,10 +73,7 @@ protected Iterator<String> getChoices(final String input) {\n                         map(RealmTO::getFullPath).collect(Collectors.toList()).iterator();\n             }\n         };\n-\n-        realm.setOutputMarkupId(true);\n-        realm.addRequiredLabel();\n-        add(realm);\n+        add(realm.addRequiredLabel().setOutputMarkupId(true));\n \n         AjaxTextFieldPanel displayName = new AjaxTextFieldPanel(\n                 \"displayName\", \"displayName\", new PropertyModel<>(connInstanceTO, \"displayName\"), false);"},{"sha":"4b680cc62a411a768456f2f3e5c9261e55ad4ff1","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/ClientAppTO.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FClientAppTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FClientAppTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FClientAppTO.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -33,7 +33,7 @@\n \n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = \"_class\")\n @JsonPropertyOrder(value = { \"_class\", \"key\", \"description\" })\n-@Schema(subTypes = { OIDCRPClientAppTO.class, SAML2SPClientAppTO.class, CASSPClientAppTO.class }, \n+@Schema(subTypes = { OIDCRPClientAppTO.class, SAML2SPClientAppTO.class, CASSPClientAppTO.class },\n         discriminatorProperty = \"_class\")\n public abstract class ClientAppTO implements NamedEntityTO {\n \n@@ -45,6 +45,8 @@ public abstract class ClientAppTO implements NamedEntityTO {\n \n     private String key;\n \n+    private String realm;\n+\n     private String name;\n \n     private Long clientAppId;\n@@ -111,6 +113,14 @@ public void setKey(final String key) {\n         this.key = key;\n     }\n \n+    public String getRealm() {\n+        return realm;\n+    }\n+\n+    public void setRealm(final String realm) {\n+        this.realm = realm;\n+    }\n+\n     @Override\n     public String getName() {\n         return name;\n@@ -148,6 +158,7 @@ public int hashCode() {\n         return new HashCodeBuilder()\n                 .appendSuper(super.hashCode())\n                 .append(key)\n+                .append(realm)\n                 .append(clientAppId)\n                 .append(name)\n                 .append(description)\n@@ -174,6 +185,7 @@ public boolean equals(final Object obj) {\n         return new EqualsBuilder()\n                 .appendSuper(super.equals(obj))\n                 .append(this.key, rhs.key)\n+                .append(this.realm, rhs.realm)\n                 .append(this.clientAppId, rhs.clientAppId)\n                 .append(this.name, rhs.name)\n                 .append(this.description, rhs.description)"},{"sha":"715f50b9e12a3302f218a96678e3f5fa110355cb","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/AMLogicContext.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAMLogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAMLogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAMLogicContext.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -30,11 +30,11 @@\n import org.apache.syncope.core.persistence.api.dao.AttrRepoDAO;\n import org.apache.syncope.core.persistence.api.dao.AuthModuleDAO;\n import org.apache.syncope.core.persistence.api.dao.AuthProfileDAO;\n-import org.apache.syncope.core.persistence.api.dao.CASSPDAO;\n+import org.apache.syncope.core.persistence.api.dao.CASSPClientAppDAO;\n import org.apache.syncope.core.persistence.api.dao.OIDCJWKSDAO;\n-import org.apache.syncope.core.persistence.api.dao.OIDCRPDAO;\n+import org.apache.syncope.core.persistence.api.dao.OIDCRPClientAppDAO;\n import org.apache.syncope.core.persistence.api.dao.SAML2IdPEntityDAO;\n-import org.apache.syncope.core.persistence.api.dao.SAML2SPDAO;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SPClientAppDAO;\n import org.apache.syncope.core.persistence.api.dao.SAML2SPEntityDAO;\n import org.apache.syncope.core.persistence.api.dao.SRARouteDAO;\n import org.apache.syncope.core.persistence.api.dao.WAConfigDAO;\n@@ -95,9 +95,9 @@ public AuthProfileLogic authProfileLogic(\n     @Bean\n     public ClientAppLogic clientAppLogic(\n             final ServiceOps serviceOps,\n-            final CASSPDAO casspDAO,\n-            final OIDCRPDAO oidcrpDAO,\n-            final SAML2SPDAO saml2spDAO,\n+            final CASSPClientAppDAO casSPClientAppDAO,\n+            final OIDCRPClientAppDAO oidcRPClientAppDAO,\n+            final SAML2SPClientAppDAO saml2SPClientAppDAO,\n             final SecurityProperties securityProperties,\n             final ClientAppUtilsFactory clientAppUtilsFactory,\n             final ClientAppDataBinder binder) {\n@@ -106,9 +106,9 @@ public ClientAppLogic clientAppLogic(\n                 serviceOps,\n                 clientAppUtilsFactory,\n                 binder,\n-                saml2spDAO,\n-                oidcrpDAO,\n-                casspDAO,\n+                casSPClientAppDAO,\n+                oidcRPClientAppDAO,\n+                saml2SPClientAppDAO,\n                 securityProperties);\n     }\n \n@@ -195,11 +195,11 @@ public U2FRegistrationLogic u2fRegistrationLogic(\n     @Bean\n     public WAClientAppLogic waClientAppLogic(\n             final WAClientAppDataBinder binder,\n-            final SAML2SPDAO saml2spDAO,\n-            final OIDCRPDAO oidcrpDAO,\n-            final CASSPDAO casspDAO) {\n+            final CASSPClientAppDAO casSPClientAppDAO,\n+            final OIDCRPClientAppDAO oidcRPClientAppDAO,\n+            final SAML2SPClientAppDAO saml2SPClientAppDAO) {\n \n-        return new WAClientAppLogic(binder, saml2spDAO, oidcrpDAO, casspDAO);\n+        return new WAClientAppLogic(binder, casSPClientAppDAO, oidcRPClientAppDAO, saml2SPClientAppDAO);\n     }\n \n     @ConditionalOnMissingBean"},{"sha":"d6c336852cb17033906d04c6e6827e82c9c081b0","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/ClientAppLogic.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FClientAppLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FClientAppLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FClientAppLogic.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -41,10 +41,10 @@\n import org.apache.syncope.common.lib.types.AMEntitlement;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.core.persistence.api.dao.CASSPDAO;\n+import org.apache.syncope.core.persistence.api.dao.CASSPClientAppDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.OIDCRPDAO;\n-import org.apache.syncope.core.persistence.api.dao.SAML2SPDAO;\n+import org.apache.syncope.core.persistence.api.dao.OIDCRPClientAppDAO;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SPClientAppDAO;\n import org.apache.syncope.core.persistence.api.entity.am.CASSPClientApp;\n import org.apache.syncope.core.persistence.api.entity.am.ClientApp;\n import org.apache.syncope.core.persistence.api.entity.am.ClientAppUtils;\n@@ -64,29 +64,29 @@ public class ClientAppLogic extends AbstractTransactionalLogic<ClientAppTO> {\n \n     protected final ClientAppDataBinder binder;\n \n-    protected final SAML2SPDAO saml2spDAO;\n+    protected final CASSPClientAppDAO casSPClientAppDAO;\n \n-    protected final OIDCRPDAO oidcrpDAO;\n+    protected final OIDCRPClientAppDAO oidcRPClientAppDAO;\n \n-    protected final CASSPDAO casspDAO;\n+    protected final SAML2SPClientAppDAO saml2SPClientAppDAO;\n \n     protected final SecurityProperties securityProperties;\n \n     public ClientAppLogic(\n             final ServiceOps serviceOps,\n             final ClientAppUtilsFactory clientAppUtilsFactory,\n             final ClientAppDataBinder binder,\n-            final SAML2SPDAO saml2spDAO,\n-            final OIDCRPDAO oidcrpDAO,\n-            final CASSPDAO casspDAO,\n+            final CASSPClientAppDAO casSPClientAppDAO,\n+            final OIDCRPClientAppDAO oidcRPClientAppDAO,\n+            final SAML2SPClientAppDAO saml2SPClientAppDAO,\n             final SecurityProperties securityProperties) {\n \n         this.serviceOps = serviceOps;\n         this.clientAppUtilsFactory = clientAppUtilsFactory;\n         this.binder = binder;\n-        this.saml2spDAO = saml2spDAO;\n-        this.oidcrpDAO = oidcrpDAO;\n-        this.casspDAO = casspDAO;\n+        this.casSPClientAppDAO = casSPClientAppDAO;\n+        this.oidcRPClientAppDAO = oidcRPClientAppDAO;\n+        this.saml2SPClientAppDAO = saml2SPClientAppDAO;\n         this.securityProperties = securityProperties;\n     }\n \n@@ -96,14 +96,14 @@ public <T extends ClientAppTO> List<T> list(final ClientAppType type) {\n \n         switch (type) {\n             case OIDCRP:\n-                stream = oidcrpDAO.findAll().stream().map(binder::getClientAppTO);\n+                stream = oidcRPClientAppDAO.findAll().stream().map(binder::getClientAppTO);\n                 break;\n             case CASSP:\n-                stream = casspDAO.findAll().stream().map(binder::getClientAppTO);\n+                stream = casSPClientAppDAO.findAll().stream().map(binder::getClientAppTO);\n                 break;\n             case SAML2SP:\n             default:\n-                stream = saml2spDAO.findAll().stream().map(binder::getClientAppTO);\n+                stream = saml2SPClientAppDAO.findAll().stream().map(binder::getClientAppTO);\n         }\n \n         return stream.collect(Collectors.toList());\n@@ -122,7 +122,7 @@ protected void checkType(final ClientAppType type, final ClientAppUtils clientAp\n     public <T extends ClientAppTO> T read(final ClientAppType type, final String key) {\n         switch (type) {\n             case OIDCRP:\n-                OIDCRPClientApp oidcrp = oidcrpDAO.find(key);\n+                OIDCRPClientApp oidcrp = oidcRPClientAppDAO.find(key);\n                 if (oidcrp == null) {\n                     throw new NotFoundException(\"Client app \" + key + \" not found\");\n                 }\n@@ -131,7 +131,7 @@ public <T extends ClientAppTO> T read(final ClientAppType type, final String key\n \n                 return binder.getClientAppTO(oidcrp);\n             case CASSP:\n-                CASSPClientApp cassp = casspDAO.find(key);\n+                CASSPClientApp cassp = casSPClientAppDAO.find(key);\n                 if (cassp == null) {\n                     throw new NotFoundException(\"Client app \" + key + \" not found\");\n                 }\n@@ -141,7 +141,7 @@ public <T extends ClientAppTO> T read(final ClientAppType type, final String key\n                 return binder.getClientAppTO(cassp);\n             case SAML2SP:\n             default:\n-                SAML2SPClientApp saml2sp = saml2spDAO.find(key);\n+                SAML2SPClientApp saml2sp = saml2SPClientAppDAO.find(key);\n                 if (saml2sp == null) {\n                     throw new NotFoundException(\"Client app \" + key + \" not found\");\n                 }\n@@ -158,12 +158,12 @@ public ClientAppTO create(final ClientAppType type, final ClientAppTO clientAppT\n \n         switch (type) {\n             case OIDCRP:\n-                return binder.getClientAppTO(oidcrpDAO.save(binder.create(clientAppTO)));\n+                return binder.getClientAppTO(oidcRPClientAppDAO.save(binder.create(clientAppTO)));\n             case CASSP:\n-                return binder.getClientAppTO(casspDAO.save(binder.create(clientAppTO)));\n+                return binder.getClientAppTO(casSPClientAppDAO.save(binder.create(clientAppTO)));\n             case SAML2SP:\n             default:\n-                return binder.getClientAppTO(saml2spDAO.save(binder.create(clientAppTO)));\n+                return binder.getClientAppTO(saml2SPClientAppDAO.save(binder.create(clientAppTO)));\n         }\n     }\n \n@@ -173,56 +173,56 @@ public void update(final ClientAppType type, final ClientAppTO clientAppTO) {\n \n         switch (type) {\n             case OIDCRP:\n-                OIDCRPClientApp oidcrp = oidcrpDAO.find(clientAppTO.getKey());\n+                OIDCRPClientApp oidcrp = oidcRPClientAppDAO.find(clientAppTO.getKey());\n                 if (oidcrp == null) {\n                     throw new NotFoundException(\"Client app \" + clientAppTO.getKey() + \" not found\");\n                 }\n                 binder.update(oidcrp, clientAppTO);\n-                oidcrpDAO.save(oidcrp);\n+                oidcRPClientAppDAO.save(oidcrp);\n                 break;\n             case CASSP:\n-                CASSPClientApp cassp = casspDAO.find(clientAppTO.getKey());\n+                CASSPClientApp cassp = casSPClientAppDAO.find(clientAppTO.getKey());\n                 if (cassp == null) {\n                     throw new NotFoundException(\"Client app \" + clientAppTO.getKey() + \" not found\");\n                 }\n                 binder.update(cassp, clientAppTO);\n-                casspDAO.save(cassp);\n+                casSPClientAppDAO.save(cassp);\n                 break;\n             case SAML2SP:\n             default:\n-                SAML2SPClientApp saml2sp = saml2spDAO.find(clientAppTO.getKey());\n+                SAML2SPClientApp saml2sp = saml2SPClientAppDAO.find(clientAppTO.getKey());\n                 if (saml2sp == null) {\n                     throw new NotFoundException(\"Client app \" + clientAppTO.getKey() + \" not found\");\n                 }\n                 binder.update(saml2sp, clientAppTO);\n-                saml2spDAO.save(saml2sp);\n+                saml2SPClientAppDAO.save(saml2sp);\n         }\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.CLIENTAPP_DELETE + \"')\")\n     public void delete(final ClientAppType type, final String key) {\n         switch (type) {\n             case OIDCRP:\n-                OIDCRPClientApp oidcrp = oidcrpDAO.find(key);\n+                OIDCRPClientApp oidcrp = oidcRPClientAppDAO.find(key);\n                 if (oidcrp == null) {\n                     throw new NotFoundException(\"Client app \" + key + \" not found\");\n                 }\n-                oidcrpDAO.delete(oidcrp);\n+                oidcRPClientAppDAO.delete(oidcrp);\n                 break;\n             case CASSP:\n-                CASSPClientApp cassp = casspDAO.find(key);\n+                CASSPClientApp cassp = casSPClientAppDAO.find(key);\n                 if (cassp == null) {\n                     throw new NotFoundException(\"Client app \" + key + \" not found\");\n                 }\n-                casspDAO.delete(cassp);\n+                casSPClientAppDAO.delete(cassp);\n                 break;\n             case SAML2SP:\n             default:\n-                SAML2SPClientApp saml2sp = saml2spDAO.find(key);\n+                SAML2SPClientApp saml2sp = saml2SPClientAppDAO.find(key);\n                 if (saml2sp == null) {\n                     throw new NotFoundException(\"Client app \" + key + \" not found\");\n                 }\n-                saml2spDAO.delete(saml2sp);\n+                saml2SPClientAppDAO.delete(saml2sp);\n         }\n     }\n \n@@ -244,9 +244,9 @@ protected ClientAppTO resolveReference(final Method method, final Object... args\n \n         if (key != null) {\n             try {\n-                ClientApp clientApp = saml2spDAO.find(key);\n+                ClientApp clientApp = saml2SPClientAppDAO.find(key);\n                 if (clientApp == null) {\n-                    clientApp = oidcrpDAO.find(key);\n+                    clientApp = oidcRPClientAppDAO.find(key);\n                 }\n \n                 return binder.getClientAppTO(clientApp);"},{"sha":"62ef73e3a6759984d87c0f902429ad027b2bca13","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/WAClientAppLogic.java","status":"modified","additions":21,"deletions":21,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAClientAppLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAClientAppLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAClientAppLogic.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -25,10 +25,10 @@\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n-import org.apache.syncope.core.persistence.api.dao.CASSPDAO;\n+import org.apache.syncope.core.persistence.api.dao.CASSPClientAppDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.OIDCRPDAO;\n-import org.apache.syncope.core.persistence.api.dao.SAML2SPDAO;\n+import org.apache.syncope.core.persistence.api.dao.OIDCRPClientAppDAO;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SPClientAppDAO;\n import org.apache.syncope.core.persistence.api.entity.am.CASSPClientApp;\n import org.apache.syncope.core.persistence.api.entity.am.OIDCRPClientApp;\n import org.apache.syncope.core.persistence.api.entity.am.SAML2SPClientApp;\n@@ -40,22 +40,22 @@ public class WAClientAppLogic {\n \n     protected final WAClientAppDataBinder binder;\n \n-    protected final SAML2SPDAO saml2spDAO;\n+    protected final CASSPClientAppDAO casSPClientAppDAO;\n \n-    protected final OIDCRPDAO oidcrpDAO;\n+    protected final OIDCRPClientAppDAO oidcRPClientAppDAO;\n \n-    protected final CASSPDAO casspDAO;\n+    protected final SAML2SPClientAppDAO saml2SPClientAppDAO;\n \n     public WAClientAppLogic(\n             final WAClientAppDataBinder binder,\n-            final SAML2SPDAO saml2spDAO,\n-            final OIDCRPDAO oidcrpDAO,\n-            final CASSPDAO casspDAO) {\n+            final CASSPClientAppDAO casSPClientAppDAO,\n+            final OIDCRPClientAppDAO oidcRPClientAppDAO,\n+            final SAML2SPClientAppDAO saml2SPClientAppDAO) {\n \n         this.binder = binder;\n-        this.saml2spDAO = saml2spDAO;\n-        this.oidcrpDAO = oidcrpDAO;\n-        this.casspDAO = casspDAO;\n+        this.casSPClientAppDAO = casSPClientAppDAO;\n+        this.oidcRPClientAppDAO = oidcRPClientAppDAO;\n+        this.saml2SPClientAppDAO = saml2SPClientAppDAO;\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n@@ -66,18 +66,18 @@ public List<WAClientApp> list() {\n         Stream.of(ClientAppType.values()).forEach(type -> {\n             switch (type) {\n                 case OIDCRP:\n-                    clientApps.addAll(oidcrpDAO.findAll().stream().\n+                    clientApps.addAll(oidcRPClientAppDAO.findAll().stream().\n                             map(binder::getWAClientApp).collect(Collectors.toList()));\n                     break;\n \n                 case SAML2SP:\n-                    clientApps.addAll(saml2spDAO.findAll().stream().\n+                    clientApps.addAll(saml2SPClientAppDAO.findAll().stream().\n                             map(binder::getWAClientApp).collect(Collectors.toList()));\n                     break;\n \n                 case CASSP:\n                 default:\n-                    clientApps.addAll(casspDAO.findAll().stream().\n+                    clientApps.addAll(casSPClientAppDAO.findAll().stream().\n                             map(binder::getWAClientApp).collect(Collectors.toList()));\n             }\n         });\n@@ -90,21 +90,21 @@ protected WAClientApp doRead(final Long clientAppId, final ClientAppType type) {\n \n         switch (type) {\n             case OIDCRP:\n-                OIDCRPClientApp oidcrp = oidcrpDAO.findByClientAppId(clientAppId);\n+                OIDCRPClientApp oidcrp = oidcRPClientAppDAO.findByClientAppId(clientAppId);\n                 if (oidcrp != null) {\n                     clientApp = binder.getWAClientApp(oidcrp);\n                 }\n                 break;\n \n             case SAML2SP:\n-                SAML2SPClientApp saml2sp = saml2spDAO.findByClientAppId(clientAppId);\n+                SAML2SPClientApp saml2sp = saml2SPClientAppDAO.findByClientAppId(clientAppId);\n                 if (saml2sp != null) {\n                     clientApp = binder.getWAClientApp(saml2sp);\n                 }\n                 break;\n \n             case CASSP:\n-                CASSPClientApp cassp = casspDAO.findByClientAppId(clientAppId);\n+                CASSPClientApp cassp = casSPClientAppDAO.findByClientAppId(clientAppId);\n                 if (cassp != null) {\n                     clientApp = binder.getWAClientApp(cassp);\n                 }\n@@ -140,21 +140,21 @@ protected WAClientApp doRead(final String name, final ClientAppType type) {\n \n         switch (type) {\n             case OIDCRP:\n-                OIDCRPClientApp oidcrp = oidcrpDAO.findByName(name);\n+                OIDCRPClientApp oidcrp = oidcRPClientAppDAO.findByName(name);\n                 if (oidcrp != null) {\n                     clientApp = binder.getWAClientApp(oidcrp);\n                 }\n                 break;\n \n             case SAML2SP:\n-                SAML2SPClientApp saml2sp = saml2spDAO.findByName(name);\n+                SAML2SPClientApp saml2sp = saml2SPClientAppDAO.findByName(name);\n                 if (saml2sp != null) {\n                     clientApp = binder.getWAClientApp(saml2sp);\n                 }\n                 break;\n \n             case CASSP:\n-                CASSPClientApp cassp = casspDAO.findByName(name);\n+                CASSPClientApp cassp = casSPClientAppDAO.findByName(name);\n                 if (cassp != null) {\n                     clientApp = binder.getWAClientApp(cassp);\n                 }"},{"sha":"23e3f9a4f3060f5c7dcb887c070b29be18715d9e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/CASSPClientAppDAO.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FCASSPClientAppDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FCASSPClientAppDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FCASSPClientAppDAO.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -21,7 +21,7 @@\n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.am.CASSPClientApp;\n \n-public interface CASSPDAO extends DAO<CASSPClientApp> {\n+public interface CASSPClientAppDAO extends ClientAppDAO<CASSPClientApp> {\n \n     CASSPClientApp find(String key);\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/CASSPDAO.java"},{"sha":"84fc38ad8d022c08ade0974110202045c0b2ff64","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ClientAppDAO.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FClientAppDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FClientAppDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FClientAppDAO.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.am.ClientApp;\n+import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n+\n+public interface ClientAppDAO<C extends ClientApp> {\n+\n+    List<C> findByPolicy(Policy policy);\n+\n+    List<C> findByRealm(Realm realm);\n+}"},{"sha":"4212ea8caa43e15a47d565f5b2a21846ad80e8fe","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/OIDCRPClientAppDAO.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FOIDCRPClientAppDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FOIDCRPClientAppDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FOIDCRPClientAppDAO.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -21,7 +21,7 @@\n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.am.OIDCRPClientApp;\n \n-public interface OIDCRPDAO extends DAO<OIDCRPClientApp> {\n+public interface OIDCRPClientAppDAO extends ClientAppDAO<OIDCRPClientApp> {\n \n     OIDCRPClientApp find(String key);\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/OIDCRPDAO.java"},{"sha":"01f2027370c5f840b8240a55ba8a6d29c4d3a334","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/SAML2SPClientAppDAO.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSAML2SPClientAppDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSAML2SPClientAppDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSAML2SPClientAppDAO.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -21,7 +21,7 @@\n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.am.SAML2SPClientApp;\n \n-public interface SAML2SPDAO extends DAO<SAML2SPClientApp> {\n+public interface SAML2SPClientAppDAO extends ClientAppDAO<SAML2SPClientApp> {\n \n     SAML2SPClientApp find(String key);\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/SAML2SPDAO.java"},{"sha":"b74282923db38e83facb6d69a2afb97ab53099c1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/PersistenceContext.java","status":"modified","additions":24,"deletions":16,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -38,7 +38,7 @@\n import org.apache.syncope.core.persistence.api.dao.AuthModuleDAO;\n import org.apache.syncope.core.persistence.api.dao.AuthProfileDAO;\n import org.apache.syncope.core.persistence.api.dao.BatchDAO;\n-import org.apache.syncope.core.persistence.api.dao.CASSPDAO;\n+import org.apache.syncope.core.persistence.api.dao.CASSPClientAppDAO;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.DelegationDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n@@ -50,7 +50,7 @@\n import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.persistence.api.dao.OIDCJWKSDAO;\n-import org.apache.syncope.core.persistence.api.dao.OIDCRPDAO;\n+import org.apache.syncope.core.persistence.api.dao.OIDCRPClientAppDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -63,7 +63,7 @@\n import org.apache.syncope.core.persistence.api.dao.ReportTemplateDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.SAML2IdPEntityDAO;\n-import org.apache.syncope.core.persistence.api.dao.SAML2SPDAO;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SPClientAppDAO;\n import org.apache.syncope.core.persistence.api.dao.SAML2SPEntityDAO;\n import org.apache.syncope.core.persistence.api.dao.SRARouteDAO;\n import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n@@ -93,7 +93,7 @@\n import org.apache.syncope.core.persistence.jpa.dao.JPAAuthModuleDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAAuthProfileDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPABatchDAO;\n-import org.apache.syncope.core.persistence.jpa.dao.JPACASSPDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPACASSPClientAppDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAConnInstanceDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPADelegationDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPADerSchemaDAO;\n@@ -105,7 +105,7 @@\n import org.apache.syncope.core.persistence.jpa.dao.JPAMailTemplateDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPANotificationDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAOIDCJWKSDAO;\n-import org.apache.syncope.core.persistence.jpa.dao.JPAOIDCRPDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAOIDCRPClientAppDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrValueDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAPlainSchemaDAO;\n@@ -118,7 +118,7 @@\n import org.apache.syncope.core.persistence.jpa.dao.JPAReportTemplateDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPARoleDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPASAML2IdPEntityDAO;\n-import org.apache.syncope.core.persistence.jpa.dao.JPASAML2SPDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPASAML2SPClientAppDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPASAML2SPEntityDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPASRARouteDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPASecurityQuestionDAO;\n@@ -417,8 +417,8 @@ public BatchDAO batchDAO() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public CASSPDAO casSPDAO() {\n-        return new JPACASSPDAO();\n+    public CASSPClientAppDAO casSPClientAppDAO() {\n+        return new JPACASSPClientAppDAO();\n     }\n \n     @ConditionalOnMissingBean\n@@ -515,8 +515,8 @@ public OIDCJWKSDAO oidcJWKSDAO() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public OIDCRPDAO oidcRPDAO() {\n-        return new JPAOIDCRPDAO();\n+    public OIDCRPClientAppDAO oidcRPClientAppDAO() {\n+        return new JPAOIDCRPClientAppDAO();\n     }\n \n     @ConditionalOnMissingBean\n@@ -545,15 +545,23 @@ public PlainSchemaDAO plainSchemaDAO(\n     @Bean\n     public PolicyDAO policyDAO(\n             final @Lazy RealmDAO realmDAO,\n-            final @Lazy ExternalResourceDAO resourceDAO) {\n+            final @Lazy ExternalResourceDAO resourceDAO,\n+            final @Lazy CASSPClientAppDAO casSPClientAppDAO,\n+            final @Lazy OIDCRPClientAppDAO oidcRPClientAppDAO,\n+            final @Lazy SAML2SPClientAppDAO saml2SPClientAppDAO) {\n \n-        return new JPAPolicyDAO(realmDAO, resourceDAO);\n+        return new JPAPolicyDAO(realmDAO, resourceDAO, casSPClientAppDAO, oidcRPClientAppDAO, saml2SPClientAppDAO);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public RealmDAO realmDAO(final @Lazy RoleDAO roleDAO) {\n-        return new JPARealmDAO(roleDAO);\n+    public RealmDAO realmDAO(\n+            final @Lazy RoleDAO roleDAO,\n+            final @Lazy CASSPClientAppDAO casSPClientAppDAO,\n+            final @Lazy OIDCRPClientAppDAO oidcRPClientAppDAO,\n+            final SAML2SPClientAppDAO saml2SPClientAppDAO) {\n+\n+        return new JPARealmDAO(roleDAO, casSPClientAppDAO, oidcRPClientAppDAO, saml2SPClientAppDAO);\n     }\n \n     @ConditionalOnMissingBean\n@@ -614,8 +622,8 @@ public RoleDAO roleDAO(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public SAML2SPDAO saml2SPDAO() {\n-        return new JPASAML2SPDAO();\n+    public SAML2SPClientAppDAO saml2SPClientAppDAO() {\n+        return new JPASAML2SPClientAppDAO();\n     }\n \n     @ConditionalOnMissingBean"},{"sha":"1cfb6dc313b71fdf8193d9d66de7711b03310ead","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractClientAppDAO.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractClientAppDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractClientAppDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractClientAppDAO.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.core.persistence.api.dao.ClientAppDAO;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.am.ClientApp;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n+\n+public abstract class AbstractClientAppDAO<C extends ClientApp> extends AbstractDAO<C> implements ClientAppDAO<C> {\n+\n+    protected StringBuilder getByPolicyQuery(\n+            final Class<? extends Policy> policyClass,\n+            final Class<? extends C> clientAppJPAClass) {\n+\n+        StringBuilder query = new StringBuilder(\"SELECT e FROM \").\n+                append(clientAppJPAClass.getSimpleName()).\n+                append(\" e WHERE e.\");\n+\n+        if (AuthPolicy.class.isAssignableFrom(policyClass)) {\n+            query.append(\"authPolicy\");\n+        } else if (AccessPolicy.class.isAssignableFrom(policyClass)) {\n+            query.append(\"accessPolicy\");\n+        } else if (AttrReleasePolicy.class.isAssignableFrom(policyClass)) {\n+            query.append(\"attrReleasePolicy\");\n+        }\n+\n+        return query;\n+    }\n+\n+    protected List<C> findByPolicy(\n+            final Policy policy,\n+            final Class<C> reference,\n+            final Class<? extends C> clientAppJPAClass) {\n+\n+        TypedQuery<C> query = entityManager().createQuery(\n+                getByPolicyQuery(policy.getClass(), clientAppJPAClass).append(\"=:policy\").toString(), reference);\n+        query.setParameter(\"policy\", policy);\n+        return query.getResultList();\n+    }\n+\n+    protected List<C> findByRealm(\n+            final Realm realm,\n+            final Class<C> reference,\n+            final Class<? extends C> clientAppJPAClass) {\n+\n+        TypedQuery<C> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + clientAppJPAClass.getSimpleName() + \" e WHERE e.realm=:realm\", reference);\n+        query.setParameter(\"realm\", realm);\n+        return query.getResultList();\n+    }\n+}"},{"sha":"1f5228efdd8813802b00b45452e4c925aef7dc44","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPACASSPClientAppDAO.java","status":"renamed","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPACASSPClientAppDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPACASSPClientAppDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPACASSPClientAppDAO.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -21,12 +21,14 @@\n import java.util.List;\n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.core.persistence.api.dao.CASSPDAO;\n+import org.apache.syncope.core.persistence.api.dao.CASSPClientAppDAO;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.am.CASSPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.jpa.entity.am.JPACASSPClientApp;\n import org.springframework.transaction.annotation.Transactional;\n \n-public class JPACASSPDAO extends AbstractDAO<CASSPClientApp> implements CASSPDAO {\n+public class JPACASSPClientAppDAO extends AbstractClientAppDAO<CASSPClientApp> implements CASSPClientAppDAO {\n \n     @Override\n     public CASSPClientApp find(final String key) {\n@@ -59,6 +61,16 @@ public CASSPClientApp findByName(final String name) {\n         return find(\"name\", name);\n     }\n \n+    @Override\n+    public List<CASSPClientApp> findByPolicy(final Policy policy) {\n+        return findByPolicy(policy, CASSPClientApp.class, JPACASSPClientApp.class);\n+    }\n+\n+    @Override\n+    public List<CASSPClientApp> findByRealm(final Realm realm) {\n+        return findByRealm(realm, CASSPClientApp.class, JPACASSPClientApp.class);\n+    }\n+\n     @Transactional(readOnly = true)\n     @Override\n     public List<CASSPClientApp> findAll() {","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPACASSPDAO.java"},{"sha":"2a321d754bfdb303e4bd3b82e339d47aff72f110","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -56,26 +56,6 @@\n \n public class JPAExternalResourceDAO extends AbstractDAO<ExternalResource> implements ExternalResourceDAO {\n \n-    protected static StringBuilder getByPolicyQuery(final Class<? extends Policy> policyClass) {\n-        StringBuilder query = new StringBuilder(\"SELECT e FROM \").\n-                append(JPAExternalResource.class.getSimpleName()).\n-                append(\" e WHERE e.\");\n-\n-        if (AccountPolicy.class.isAssignableFrom(policyClass)) {\n-            query.append(\"accountPolicy\");\n-        } else if (PasswordPolicy.class.isAssignableFrom(policyClass)) {\n-            query.append(\"passwordPolicy\");\n-        } else if (PropagationPolicy.class.isAssignableFrom(policyClass)) {\n-            query.append(\"propagationPolicy\");\n-        } else if (PullPolicy.class.isAssignableFrom(policyClass)) {\n-            query.append(\"pullPolicy\");\n-        } else if (PushPolicy.class.isAssignableFrom(policyClass)) {\n-            query.append(\"pushPolicy\");\n-        }\n-\n-        return query;\n-    }\n-\n     protected final TaskDAO taskDAO;\n \n     protected final AnyObjectDAO anyObjectDAO;\n@@ -172,6 +152,26 @@ public List<ExternalResource> findByPropagationActions(final Implementation prop\n         return query.getResultList();\n     }\n \n+    protected StringBuilder getByPolicyQuery(final Class<? extends Policy> policyClass) {\n+        StringBuilder query = new StringBuilder(\"SELECT e FROM \").\n+                append(JPAExternalResource.class.getSimpleName()).\n+                append(\" e WHERE e.\");\n+\n+        if (AccountPolicy.class.isAssignableFrom(policyClass)) {\n+            query.append(\"accountPolicy\");\n+        } else if (PasswordPolicy.class.isAssignableFrom(policyClass)) {\n+            query.append(\"passwordPolicy\");\n+        } else if (PropagationPolicy.class.isAssignableFrom(policyClass)) {\n+            query.append(\"propagationPolicy\");\n+        } else if (PullPolicy.class.isAssignableFrom(policyClass)) {\n+            query.append(\"pullPolicy\");\n+        } else if (PushPolicy.class.isAssignableFrom(policyClass)) {\n+            query.append(\"pushPolicy\");\n+        }\n+\n+        return query;\n+    }\n+\n     @Override\n     public List<ExternalResource> findByPolicy(final Policy policy) {\n         TypedQuery<ExternalResource> query = entityManager().createQuery("},{"sha":"c92f123482e66916de07c061976ae3227562b5ea","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAOIDCRPClientAppDAO.java","status":"renamed","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAOIDCRPClientAppDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAOIDCRPClientAppDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAOIDCRPClientAppDAO.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -21,12 +21,14 @@\n import java.util.List;\n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.core.persistence.api.dao.OIDCRPDAO;\n+import org.apache.syncope.core.persistence.api.dao.OIDCRPClientAppDAO;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.am.OIDCRPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.jpa.entity.am.JPAOIDCRPClientApp;\n import org.springframework.transaction.annotation.Transactional;\n \n-public class JPAOIDCRPDAO extends AbstractDAO<OIDCRPClientApp> implements OIDCRPDAO {\n+public class JPAOIDCRPClientAppDAO extends AbstractClientAppDAO<OIDCRPClientApp> implements OIDCRPClientAppDAO {\n \n     @Override\n     public OIDCRPClientApp find(final String key) {\n@@ -64,6 +66,16 @@ public OIDCRPClientApp findByClientId(final String clientId) {\n         return find(\"clientId\", clientId);\n     }\n \n+    @Override\n+    public List<OIDCRPClientApp> findByPolicy(final Policy policy) {\n+        return findByPolicy(policy, OIDCRPClientApp.class, JPAOIDCRPClientApp.class);\n+    }\n+\n+    @Override\n+    public List<OIDCRPClientApp> findByRealm(final Realm realm) {\n+        return findByRealm(realm, OIDCRPClientApp.class, JPAOIDCRPClientApp.class);\n+    }\n+\n     @Transactional(readOnly = true)\n     @Override\n     public List<OIDCRPClientApp> findAll() {","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAOIDCRPDAO.java"},{"sha":"b3c386e72323ff38d25b542b0b26601253da47bc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPolicyDAO.java","status":"modified","additions":46,"deletions":32,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -20,9 +20,12 @@\n \n import java.util.List;\n import javax.persistence.TypedQuery;\n+import org.apache.syncope.core.persistence.api.dao.CASSPClientAppDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.OIDCRPClientAppDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SPClientAppDAO;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n@@ -72,9 +75,24 @@ protected static <T extends Policy> Class<? extends AbstractPolicy> getEntityRef\n \n     protected final ExternalResourceDAO resourceDAO;\n \n-    public JPAPolicyDAO(final RealmDAO realmDAO, final ExternalResourceDAO resourceDAO) {\n+    protected final CASSPClientAppDAO casSPClientAppDAO;\n+\n+    protected final OIDCRPClientAppDAO oidcRPClientAppDAO;\n+\n+    protected final SAML2SPClientAppDAO saml2SPClientAppDAO;\n+\n+    public JPAPolicyDAO(\n+            final RealmDAO realmDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final CASSPClientAppDAO casSPClientAppDAO,\n+            final OIDCRPClientAppDAO oidcRPClientAppDAO,\n+            final SAML2SPClientAppDAO saml2SPClientAppDAO) {\n+\n         this.realmDAO = realmDAO;\n         this.resourceDAO = resourceDAO;\n+        this.casSPClientAppDAO = casSPClientAppDAO;\n+        this.oidcRPClientAppDAO = oidcRPClientAppDAO;\n+        this.saml2SPClientAppDAO = saml2SPClientAppDAO;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n@@ -155,37 +173,33 @@ public <T extends Policy> T save(final T policy) {\n \n     @Override\n     public <T extends Policy> void delete(final T policy) {\n-        realmDAO.findByPolicy(policy).forEach(realm -> {\n-            if (policy instanceof AccountPolicy) {\n-                realm.setAccountPolicy(null);\n-            } else if (policy instanceof PasswordPolicy) {\n-                realm.setPasswordPolicy(null);\n-            } else if (policy instanceof AuthPolicy) {\n-                realm.setAuthPolicy(null);\n-            } else if (policy instanceof AccessPolicy) {\n-                realm.setAccessPolicy(null);\n-            } else if (policy instanceof AttrReleasePolicy) {\n-                realm.setAttrReleasePolicy(null);\n-            }\n-        });\n-\n-        if (!(policy instanceof AuthPolicy)\n-                && !(policy instanceof AttrReleasePolicy)\n-                && !(policy instanceof AccessPolicy)) {\n-\n-            resourceDAO.findByPolicy(policy).forEach(resource -> {\n-                if (policy instanceof AccountPolicy) {\n-                    resource.setAccountPolicy(null);\n-                } else if (policy instanceof PasswordPolicy) {\n-                    resource.setPasswordPolicy(null);\n-                } else if (policy instanceof PropagationPolicy) {\n-                    resource.setPropagationPolicy(null);\n-                } else if (policy instanceof PullPolicy) {\n-                    resource.setPullPolicy(null);\n-                } else if (policy instanceof PushPolicy) {\n-                    resource.setPushPolicy(null);\n-                }\n-            });\n+        if (policy instanceof AccountPolicy) {\n+            realmDAO.findByPolicy(policy).forEach(realm -> realm.setAccountPolicy(null));\n+            resourceDAO.findByPolicy(policy).forEach(resource -> resource.setAccountPolicy(null));\n+        } else if (policy instanceof PasswordPolicy) {\n+            realmDAO.findByPolicy(policy).forEach(realm -> realm.setPasswordPolicy(null));\n+            resourceDAO.findByPolicy(policy).forEach(resource -> resource.setPasswordPolicy(null));\n+        } else if (policy instanceof PropagationPolicy) {\n+            resourceDAO.findByPolicy(policy).forEach(resource -> resource.setPropagationPolicy(null));\n+        } else if (policy instanceof PullPolicy) {\n+            resourceDAO.findByPolicy(policy).forEach(resource -> resource.setPullPolicy(null));\n+        } else if (policy instanceof PushPolicy) {\n+            resourceDAO.findByPolicy(policy).forEach(resource -> resource.setPushPolicy(null));\n+        } else if (policy instanceof AuthPolicy) {\n+            realmDAO.findByPolicy(policy).forEach(realm -> realm.setAuthPolicy(null));\n+            casSPClientAppDAO.findByPolicy(policy).forEach(clientApp -> clientApp.setAuthPolicy(null));\n+            oidcRPClientAppDAO.findByPolicy(policy).forEach(clientApp -> clientApp.setAuthPolicy(null));\n+            saml2SPClientAppDAO.findByPolicy(policy).forEach(clientApp -> clientApp.setAuthPolicy(null));\n+        } else if (policy instanceof AccessPolicy) {\n+            realmDAO.findByPolicy(policy).forEach(realm -> realm.setAccessPolicy(null));\n+            casSPClientAppDAO.findByPolicy(policy).forEach(clientApp -> clientApp.setAccessPolicy(null));\n+            oidcRPClientAppDAO.findByPolicy(policy).forEach(clientApp -> clientApp.setAccessPolicy(null));\n+            saml2SPClientAppDAO.findByPolicy(policy).forEach(clientApp -> clientApp.setAccessPolicy(null));\n+        } else if (policy instanceof AttrReleasePolicy) {\n+            realmDAO.findByPolicy(policy).forEach(realm -> realm.setAttrReleasePolicy(null));\n+            casSPClientAppDAO.findByPolicy(policy).forEach(clientApp -> clientApp.setAttrReleasePolicy(null));\n+            oidcRPClientAppDAO.findByPolicy(policy).forEach(clientApp -> clientApp.setAttrReleasePolicy(null));\n+            saml2SPClientAppDAO.findByPolicy(policy).forEach(clientApp -> clientApp.setAttrReleasePolicy(null));\n         }\n \n         entityManager().remove(policy);"},{"sha":"5e7f1a2704945ef09778fe62f8430f9a1c3fed04","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":22,"deletions":1,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -25,9 +25,12 @@\n import javax.persistence.TypedQuery;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.core.persistence.api.dao.CASSPClientAppDAO;\n import org.apache.syncope.core.persistence.api.dao.MalformedPathException;\n+import org.apache.syncope.core.persistence.api.dao.OIDCRPClientAppDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SPClientAppDAO;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n@@ -46,8 +49,22 @@ public class JPARealmDAO extends AbstractDAO<Realm> implements RealmDAO {\n \n     protected final RoleDAO roleDAO;\n \n-    public JPARealmDAO(final RoleDAO roleDAO) {\n+    protected final CASSPClientAppDAO casSPClientAppDAO;\n+\n+    protected final OIDCRPClientAppDAO oidcRPClientAppDAO;\n+\n+    protected final SAML2SPClientAppDAO saml2SPClientAppDAO;\n+\n+    public JPARealmDAO(\n+            final RoleDAO roleDAO,\n+            final CASSPClientAppDAO casSPClientAppDAO,\n+            final OIDCRPClientAppDAO oidcRPClientAppDAO,\n+            final SAML2SPClientAppDAO saml2SPClientAppDAO) {\n+\n         this.roleDAO = roleDAO;\n+        this.casSPClientAppDAO = casSPClientAppDAO;\n+        this.oidcRPClientAppDAO = oidcRPClientAppDAO;\n+        this.saml2SPClientAppDAO = saml2SPClientAppDAO;\n     }\n \n     @Override\n@@ -241,6 +258,10 @@ public void delete(final Realm realm) {\n         findDescendants(realm).forEach(toBeDeleted -> {\n             roleDAO.findByRealm(toBeDeleted).forEach(role -> role.getRealms().remove(toBeDeleted));\n \n+            casSPClientAppDAO.findByRealm(toBeDeleted).forEach(clientApp -> clientApp.setRealm(null));\n+            oidcRPClientAppDAO.findByRealm(toBeDeleted).forEach(clientApp -> clientApp.setRealm(null));\n+            saml2SPClientAppDAO.findByRealm(toBeDeleted).forEach(clientApp -> clientApp.setRealm(null));\n+\n             toBeDeleted.setParent(null);\n \n             entityManager().remove(toBeDeleted);"},{"sha":"2e63234527f63e7634f1ba30eb7e3070e993bad6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPASAML2SPClientAppDAO.java","status":"renamed","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2SPClientAppDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2SPClientAppDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2SPClientAppDAO.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -21,12 +21,14 @@\n import java.util.List;\n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.core.persistence.api.dao.SAML2SPDAO;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SPClientAppDAO;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.am.SAML2SPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.jpa.entity.am.JPASAML2SPClientApp;\n import org.springframework.transaction.annotation.Transactional;\n \n-public class JPASAML2SPDAO extends AbstractDAO<SAML2SPClientApp> implements SAML2SPDAO {\n+public class JPASAML2SPClientAppDAO extends AbstractClientAppDAO<SAML2SPClientApp> implements SAML2SPClientAppDAO {\n \n     @Override\n     public SAML2SPClientApp find(final String key) {\n@@ -64,6 +66,16 @@ public SAML2SPClientApp findByEntityId(final String entityId) {\n         return find(\"entityId\", entityId);\n     }\n \n+    @Override\n+    public List<SAML2SPClientApp> findByPolicy(final Policy policy) {\n+        return findByPolicy(policy, SAML2SPClientApp.class, JPASAML2SPClientApp.class);\n+    }\n+\n+    @Override\n+    public List<SAML2SPClientApp> findByRealm(final Realm realm) {\n+        return findByRealm(realm, SAML2SPClientApp.class, JPASAML2SPClientApp.class);\n+    }\n+\n     @Transactional(readOnly = true)\n     @Override\n     public List<SAML2SPClientApp> findAll() {","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPASAML2SPDAO.java"},{"sha":"ccaac900b6f0ad4cc6e338d6bf57ab291f8e6abf","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/CASSPTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FCASSPTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FCASSPTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FCASSPTest.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -23,7 +23,7 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n \n import java.util.UUID;\n-import org.apache.syncope.core.persistence.api.dao.CASSPDAO;\n+import org.apache.syncope.core.persistence.api.dao.CASSPClientAppDAO;\n import org.apache.syncope.core.persistence.api.entity.am.CASSPClientApp;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n@@ -35,7 +35,7 @@\n public class CASSPTest extends AbstractClientAppTest {\n \n     @Autowired\n-    private CASSPDAO casspDAO;\n+    private CASSPClientAppDAO casspDAO;\n \n     @Test\n     public void find() {"},{"sha":"d6fe574b2374575f960bb3bd01a9e10c607f24a9","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/OIDCRPTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FOIDCRPTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FOIDCRPTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FOIDCRPTest.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.common.lib.types.OIDCGrantType;\n import org.apache.syncope.common.lib.types.OIDCResponseType;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n-import org.apache.syncope.core.persistence.api.dao.OIDCRPDAO;\n+import org.apache.syncope.core.persistence.api.dao.OIDCRPClientAppDAO;\n import org.apache.syncope.core.persistence.api.entity.am.OIDCRPClientApp;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n@@ -38,7 +38,7 @@\n public class OIDCRPTest extends AbstractClientAppTest {\n \n     @Autowired\n-    private OIDCRPDAO oidcrpDAO;\n+    private OIDCRPClientAppDAO oidcrpDAO;\n \n     @Test\n     public void find() {"},{"sha":"242311392867f9c9eef03445adcba2270bb28ed8","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/SAML2SPTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPTest.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -26,7 +26,7 @@\n import java.util.UUID;\n import org.apache.syncope.common.lib.types.SAML2SPNameId;\n import org.apache.syncope.common.lib.types.XmlSecAlgorithm;\n-import org.apache.syncope.core.persistence.api.dao.SAML2SPDAO;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SPClientAppDAO;\n import org.apache.syncope.core.persistence.api.entity.am.SAML2SPClientApp;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n@@ -38,7 +38,7 @@\n public class SAML2SPTest extends AbstractClientAppTest {\n \n     @Autowired\n-    private SAML2SPDAO saml2spDAO;\n+    private SAML2SPClientAppDAO saml2spDAO;\n \n     @Test\n     public void find() {"},{"sha":"dd091dc3d7213a8388c6c3cb7ce35a5fe2952dff","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PolicyTest.java","status":"modified","additions":41,"deletions":44,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPolicyTest.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -21,12 +21,9 @@\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n \n import java.util.UUID;\n-import javax.persistence.PersistenceException;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.core.persistence.api.dao.OIDCRPDAO;\n+import org.apache.syncope.core.persistence.api.dao.OIDCRPClientAppDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.am.OIDCRPClientApp;\n@@ -42,40 +39,11 @@\n public class PolicyTest extends AbstractClientAppTest {\n \n     @Autowired\n-    private OIDCRPDAO oidcRelyingPartyDAO;\n+    private OIDCRPClientAppDAO oidcRelyingPartyDAO;\n \n     @Autowired\n     private RealmDAO realmDAO;\n \n-    @Test\n-    public void policyCannotBeRemovedForApps() {\n-        // Create new policy\n-        AccessPolicy accessPolicy = buildAndSaveAccessPolicy();\n-        AuthPolicy authPolicy = buildAndSaveAuthPolicy();\n-\n-        // Create new client app and assign policy\n-        OIDCRPClientApp rp = entityFactory.newEntity(OIDCRPClientApp.class);\n-        rp.setName(\"OIDC\");\n-        rp.setClientAppId(UUID.randomUUID().getMostSignificantBits() & Long.MAX_VALUE);\n-        rp.setDescription(\"This is a sample OIDC RP\");\n-        rp.setClientId(UUID.randomUUID().toString());\n-        rp.setClientSecret(\"secret\");\n-        rp.setAccessPolicy(accessPolicy);\n-        rp.setAuthPolicy(authPolicy);\n-\n-        rp = oidcRelyingPartyDAO.save(rp);\n-        assertNotNull(rp);\n-\n-        assertThrows(PersistenceException.class, () -> {\n-            this.policyDAO.delete(accessPolicy);\n-            entityManager().flush();\n-        });\n-        assertThrows(PersistenceException.class, () -> {\n-            this.policyDAO.delete(authPolicy);\n-            entityManager().flush();\n-        });\n-    }\n-\n     @Test\n     public void authPolicyCanBeNull() {\n         Realm realm = realmDAO.findByFullPath(\"/odd\");\n@@ -97,26 +65,55 @@ public void authPolicyCanBeNull() {\n     }\n \n     @Test\n-    public void policyForRealmsCanBeRemoved() {\n+    public void removePolicyFromRealm() {\n         AuthPolicy authPolicy = buildAndSaveAuthPolicy();\n         AccessPolicy accessPolicy = buildAndSaveAccessPolicy();\n         AttrReleasePolicy attrPolicy = buildAndSaveAttrRelPolicy();\n \n-        Realm realm = realmDAO.findByFullPath(SyncopeConstants.ROOT_REALM);\n-        assertNotNull(realm);\n+        Realm realm = realmDAO.getRoot();\n         realm.setAuthPolicy(authPolicy);\n         realm.setAccessPolicy(accessPolicy);\n         realm.setAttrReleasePolicy(attrPolicy);\n+\n         realm = realmDAO.save(realm);\n+        assertNotNull(realm.getAuthPolicy());\n+        assertNotNull(realm.getAccessPolicy());\n+        assertNotNull(realm.getAttrReleasePolicy());\n \n-        assertNotNull(realm);\n+        policyDAO.delete(authPolicy);\n+        policyDAO.delete(accessPolicy);\n+        policyDAO.delete(attrPolicy);\n+        entityManager().flush();\n+\n+        realm = realmDAO.getRoot();\n+        assertNull(realm.getAuthPolicy());\n+        assertNull(realm.getAccessPolicy());\n+        assertNull(realm.getAttrReleasePolicy());\n+    }\n+\n+    @Test\n+    public void removePolicyFromApps() {\n+        // Create new policy\n+        AccessPolicy accessPolicy = buildAndSaveAccessPolicy();\n+        AuthPolicy authPolicy = buildAndSaveAuthPolicy();\n+\n+        // Create new client app and assign policy\n+        OIDCRPClientApp rp = entityFactory.newEntity(OIDCRPClientApp.class);\n+        rp.setName(\"OIDC\");\n+        rp.setClientAppId(UUID.randomUUID().getMostSignificantBits() & Long.MAX_VALUE);\n+        rp.setDescription(\"This is a sample OIDC RP\");\n+        rp.setClientId(UUID.randomUUID().toString());\n+        rp.setClientSecret(\"secret\");\n+        rp.setAccessPolicy(accessPolicy);\n+        rp.setAuthPolicy(authPolicy);\n+\n+        rp = oidcRelyingPartyDAO.save(rp);\n+        assertNotNull(rp);\n+\n+        policyDAO.delete(accessPolicy);\n+        entityManager().flush();\n \n-        this.policyDAO.delete(authPolicy);\n-        this.policyDAO.delete(accessPolicy);\n-        this.policyDAO.delete(attrPolicy);\n+        policyDAO.delete(authPolicy);\n         entityManager().flush();\n-        assertNull(this.policyDAO.find(authPolicy.getKey()));\n-        assertNull(this.policyDAO.find(accessPolicy.getKey()));\n-        assertNull(this.policyDAO.find(attrPolicy.getKey()));\n     }\n }"},{"sha":"70c16be6b3e7a162f333925325559b936b5c1146","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ProvisioningContext.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -918,9 +918,10 @@ public AuthProfileDataBinder authProfileDataBinder(final EntityFactory entityFac\n     @Bean\n     public ClientAppDataBinder clientAppDataBinder(\n             final PolicyDAO policyDAO,\n+            final RealmDAO realmDAO,\n             final EntityFactory entityFactory) {\n \n-        return new ClientAppDataBinderImpl(policyDAO, entityFactory);\n+        return new ClientAppDataBinderImpl(policyDAO, realmDAO, entityFactory);\n     }\n \n     @ConditionalOnMissingBean"},{"sha":"f1db10051686447330cfc8bb351a3f8239176a37","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ClientAppDataBinderImpl.java","status":"modified","additions":25,"deletions":11,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6223ede387255c2ac1ad92f798eb86da6cf2e62a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java?ref=6223ede387255c2ac1ad92f798eb86da6cf2e62a","patch":"@@ -18,14 +18,17 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import java.util.Optional;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.CASSPClientAppTO;\n import org.apache.syncope.common.lib.to.ClientAppTO;\n import org.apache.syncope.common.lib.to.OIDCRPClientAppTO;\n import org.apache.syncope.common.lib.to.SAML2SPClientAppTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.am.CASSPClientApp;\n import org.apache.syncope.core.persistence.api.entity.am.ClientApp;\n import org.apache.syncope.core.persistence.api.entity.am.OIDCRPClientApp;\n@@ -40,10 +43,17 @@ public class ClientAppDataBinderImpl implements ClientAppDataBinder {\n \n     protected final PolicyDAO policyDAO;\n \n+    protected final RealmDAO realmDAO;\n+\n     protected final EntityFactory entityFactory;\n \n-    public ClientAppDataBinderImpl(final PolicyDAO policyDAO, final EntityFactory entityFactory) {\n+    public ClientAppDataBinderImpl(\n+            final PolicyDAO policyDAO,\n+            final RealmDAO realmDAO,\n+            final EntityFactory entityFactory) {\n+\n         this.policyDAO = policyDAO;\n+        this.realmDAO = realmDAO;\n         this.entityFactory = entityFactory;\n     }\n \n@@ -141,21 +151,19 @@ protected void doUpdate(final SAML2SPClientApp clientApp, final SAML2SPClientApp\n     }\n \n     protected void copyToTO(final ClientApp clientApp, final ClientAppTO clientAppTO) {\n-        clientAppTO.setName(clientApp.getName());\n         clientAppTO.setKey(clientApp.getKey());\n+        clientAppTO.setRealm(Optional.ofNullable(clientApp.getRealm()).map(Realm::getFullPath).orElse(null));\n+        clientAppTO.setName(clientApp.getName());\n         clientAppTO.setDescription(clientApp.getDescription());\n         clientAppTO.setClientAppId(clientApp.getClientAppId());\n         clientAppTO.setTheme(clientApp.getTheme());\n \n-        if (clientApp.getAuthPolicy() != null) {\n-            clientAppTO.setAuthPolicy(clientApp.getAuthPolicy().getKey());\n-        }\n-        if (clientApp.getAccessPolicy() != null) {\n-            clientAppTO.setAccessPolicy(clientApp.getAccessPolicy().getKey());\n-        }\n-        if (clientApp.getAttrReleasePolicy() != null) {\n-            clientAppTO.setAttrReleasePolicy(clientApp.getAttrReleasePolicy().getKey());\n-        }\n+        clientAppTO.setAuthPolicy(\n+                Optional.ofNullable(clientApp.getAuthPolicy()).map(AuthPolicy::getKey).orElse(null));\n+        clientAppTO.setAccessPolicy(\n+                Optional.ofNullable(clientApp.getAccessPolicy()).map(AccessPolicy::getKey).orElse(null));\n+        clientAppTO.setAttrReleasePolicy(\n+                Optional.ofNullable(clientApp.getAttrReleasePolicy()).map(AttrReleasePolicy::getKey).orElse(null));\n \n         clientAppTO.getProperties().addAll(clientApp.getProperties());\n     }\n@@ -251,6 +259,12 @@ protected CASSPClientAppTO getCASClientAppTO(final CASSPClientApp clientApp) {\n     }\n \n     protected void copyToEntity(final ClientApp clientApp, final ClientAppTO clientAppTO) {\n+        if (clientAppTO.getRealm() == null) {\n+            clientApp.setRealm(null);\n+        } else {\n+            clientApp.setRealm((realmDAO.findByFullPath(clientAppTO.getRealm())));\n+        }\n+\n         clientApp.setName(clientAppTO.getName());\n         clientApp.setClientAppId(clientAppTO.getClientAppId());\n         clientApp.setDescription(clientAppTO.getDescription());"}]}