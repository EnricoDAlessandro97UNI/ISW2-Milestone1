{"sha":"5ec815bb145306f0852c4eee33b0b68e074cafe7","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjVlYzgxNWJiMTQ1MzA2ZjA4NTJjNGVlZTMzYjBiNjhlMDc0Y2FmZTc=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-05T16:31:18Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-05T16:31:18Z"},"message":"added connector rest controller + refactoring and bug-fix\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246333 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3403f1099648b8c7155a22ec4178d32d46683787","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3403f1099648b8c7155a22ec4178d32d46683787"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5ec815bb145306f0852c4eee33b0b68e074cafe7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5ec815bb145306f0852c4eee33b0b68e074cafe7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5ec815bb145306f0852c4eee33b0b68e074cafe7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5ec815bb145306f0852c4eee33b0b68e074cafe7/comments","author":null,"committer":null,"parents":[{"sha":"4430f914207a1c248127062a9bd62db92b4caacf","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4430f914207a1c248127062a9bd62db92b4caacf","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4430f914207a1c248127062a9bd62db92b4caacf"}],"stats":{"total":1482,"additions":1273,"deletions":209},"files":[{"sha":"03c87b9ac698a85c652a2d2c234997b7be9ddce7","filename":"client/src/main/java/org/syncope/client/to/ConnectorInstanceTO.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTO.java?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -0,0 +1,70 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import java.util.Set;\n+\n+public class ConnectorInstanceTO extends AbstractBaseTO {\n+\n+    private Long id;\n+\n+    private String bundleName;\n+\n+    private String version;\n+\n+    private String connectorName;\n+\n+    private Set<PropertyTO> configuration;\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getBundleName() {\n+        return bundleName;\n+    }\n+\n+    public void setBundleName(String bundlename) {\n+        this.bundleName = bundlename;\n+    }\n+\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(String bundleversion) {\n+        this.version = bundleversion;\n+    }\n+\n+    public Set<PropertyTO> getConfiguration() {\n+        return configuration;\n+    }\n+\n+    public void setConfiguration(Set<PropertyTO> configuration) {\n+        this.configuration = configuration;\n+    }\n+\n+    public String getConnectorName() {\n+        return connectorName;\n+    }\n+\n+    public void setConnectorName(String connectorname) {\n+        this.connectorName = connectorname;\n+    }\n+}"},{"sha":"f2c51a23f80e68dff0e6159f06521e4012a242c5","filename":"client/src/main/java/org/syncope/client/to/ConnectorInstanceTOs.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTOs.java?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -0,0 +1,42 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ConnectorInstanceTOs extends AbstractBaseTO\n+        implements Iterable<ConnectorInstanceTO> {\n+\n+    private List<ConnectorInstanceTO> instances;\n+\n+    public ConnectorInstanceTOs() {\n+        instances = new ArrayList<ConnectorInstanceTO>();\n+    }\n+\n+    public List<ConnectorInstanceTO> getInstances() {\n+        return instances;\n+    }\n+\n+    public void setInstances(List<ConnectorInstanceTO> instances) {\n+        this.instances = instances;\n+    }\n+\n+    @Override\n+    public Iterator<ConnectorInstanceTO> iterator() {\n+        return instances.iterator();\n+    }\n+}"},{"sha":"1f56a6c19c401a6282654f8290d41c43f272058a","filename":"client/src/main/java/org/syncope/client/to/PropertyTO.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPropertyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPropertyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPropertyTO.java?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -0,0 +1,38 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+public class PropertyTO {\n+\n+    private String key;\n+\n+    private Object value;\n+\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    public void setKey(String key) {\n+        this.key = key;\n+    }\n+\n+    public Object getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(Object value) {\n+        this.value = value;\n+    }\n+}"},{"sha":"5d223a303fe1b2362f41a9ac52f94a0042edf159","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -42,8 +42,16 @@ public enum SyncopeClientExceptionType {\n     \"Syncope.NotFound.entity\"),\n     RequiredValuesMissing(\n     \"Syncope.RequiredValuesMissing\",\n+    \"Syncope.RequiredValuesMissing.attributeName\"),\n+    UserInvalidValues(\n+    \"Syncope.InvalidValues\",\n+    \"Syncope.InvalidValues.attributeName\"),\n+    ConnectorRequiredValueMissing(\n+    \"Syncope.RequiredValuesMissing\",\n     \"Syncope.RequiredValuesMissing.attributeName\");\n+\n     private String headerValue;\n+\n     private String elementHeaderName;\n \n     private SyncopeClientExceptionType(String headerValue,\n@@ -65,8 +73,7 @@ public static SyncopeClientExceptionType getFromHeaderValue(\n         }\n \n         if (result == null) {\n-            throw new IllegalArgumentException(\"Unexpected header value: \"\n-                    + exceptionTypeHeaderValue);\n+            throw new IllegalArgumentException(\"Unexpected header value: \" + exceptionTypeHeaderValue);\n         }\n \n         return result;"},{"sha":"137351b10872bc4af33ff2147e83f6fb02d8ab9e","filename":"core/pom.xml","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -172,6 +172,12 @@\n         <!-- /IdentityConnectors -->\n \n         <!-- TEST -->\n+        <dependency>\n+            <groupId>org.syncope.identityconnectors.bundles.staticws</groupId>\n+            <artifactId>staticwebservice</artifactId>\n+            <version>${parent.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n         <dependency>\n             <groupId>junit</groupId>\n             <artifactId>junit</artifactId>\n@@ -511,6 +517,32 @@\n                 </executions>\n             </plugin>\n \n+            <!-- in order to copy bundles and test connector controller -->\n+            <plugin>\n+                <artifactId>maven-resources-plugin</artifactId>\n+                <version>2.4.3</version>\n+                <executions>\n+                    <execution>\n+                        <id>copy-resources</id>\n+                        <phase>pre-integration-test</phase>\n+                        <goals>\n+                            <goal>copy-resources</goal>\n+                        </goals>\n+                        <configuration>\n+                            <outputDirectory>/tmp/bundles</outputDirectory>\n+                            <resources>\n+                                <resource>\n+                                    <directory>${basedir}/../identityconnectors/bundles/staticws/staticwebservice/target</directory>\n+                                    <includes>\n+                                        <include>*.jar</include>\n+                                    </includes>\n+                                </resource>\n+                            </resources>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+\n         </plugins>\n \n         <resources>"},{"sha":"fc4532f0431d8718d319da4dbe06ac3e7303b376","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -31,6 +31,7 @@ public abstract class AbstractAttributable extends AbstractBaseBean {\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private Long id;\n+\n     /**\n      * Provisioning target resources.\n      */\n@@ -53,8 +54,7 @@ public <T extends AbstractAttribute> T getAttribute(String schemaName) {\n                 result == null && itor.hasNext();) {\n \n             attribute = (T) itor.next();\n-            if (attribute.getSchema() != null\n-                    && schemaName.equals(attribute.getSchema().getName())) {\n+            if (attribute.getSchema() != null && schemaName.equals(attribute.getSchema().getName())) {\n \n                 result = attribute;\n             }\n@@ -73,8 +73,7 @@ public <T extends AbstractDerivedAttribute> T getDerivedAttribute(\n                 result == null && itor.hasNext();) {\n \n             derivedAttribute = (T) itor.next();\n-            if (derivedAttribute.getDerivedSchema() != null\n-                    && derivedSchemaName.equals(\n+            if (derivedAttribute.getDerivedSchema() != null && derivedSchemaName.equals(\n                     derivedAttribute.getDerivedSchema().getName())) {\n \n                 result = derivedAttribute;\n@@ -93,7 +92,8 @@ public boolean removeResource(Resource resource) {\n     }\n \n     public Set<Resource> getResources() {\n-        return resources;\n+        if (resources != null) return resources;\n+        return new HashSet<Resource>();\n     }\n \n     public void setResources(Set<Resource> resources) {"},{"sha":"faa5c74ab1c75747643e8b3fd9b2c89a5bd21878","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -74,7 +74,8 @@ public boolean removeRole(SyncopeRole role) {\n     }\n \n     public Set<SyncopeRole> getRoles() {\n-        return roles;\n+        if (roles != null) return roles;\n+        return new HashSet<SyncopeRole>();\n     }\n \n     public void setRoles(Set<SyncopeRole> roles) {"},{"sha":"2bb7a18dffda636ad19f8b14a2f9a6665eeadbb0","filename":"core/src/main/java/org/syncope/core/persistence/util/ApplicationContextManager.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Futil%2FApplicationContextManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Futil%2FApplicationContextManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Futil%2FApplicationContextManager.java?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -0,0 +1,31 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.util;\n+\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+public class ApplicationContextManager {\n+\n+    private static ConfigurableApplicationContext ctx;\n+\n+    public static void setApplicationContext(\n+            ConfigurableApplicationContext applicationContext) {\n+        ctx = applicationContext;\n+    }\n+\n+    public static ConfigurableApplicationContext getApplicationContext() {\n+        return ctx;\n+    }\n+}"},{"sha":"ed110b0e52109cc893c3272c970dbd2341326bbf","filename":"core/src/main/java/org/syncope/core/persistence/util/ApplicationContextProvider.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Futil%2FApplicationContextProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Futil%2FApplicationContextProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Futil%2FApplicationContextProvider.java?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -0,0 +1,30 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.util;\n+\n+import org.springframework.beans.BeansException;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+public class ApplicationContextProvider implements ApplicationContextAware {\n+\n+    @Override\n+    public void setApplicationContext(ApplicationContext ctx) throws BeansException {\n+        // Wiring the ApplicationContext into a static method\n+        ApplicationContextManager.setApplicationContext(\n+                (ConfigurableApplicationContext) ctx);\n+    }\n+}"},{"sha":"09efa30417cf94711ade5af7f1fddea2599bea40","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnectorInstanceController.java","status":"added","additions":411,"deletions":0,"changes":411,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -0,0 +1,411 @@\n+\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.controller;\n+\n+import java.io.File;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import javax.servlet.http.HttpServletResponse;\n+import org.identityconnectors.common.IOUtil;\n+import org.identityconnectors.framework.api.APIConfiguration;\n+import org.identityconnectors.framework.api.ConfigurationProperties;\n+import org.identityconnectors.framework.api.ConfigurationProperty;\n+import org.identityconnectors.framework.api.ConnectorFacade;\n+import org.identityconnectors.framework.api.ConnectorFacadeFactory;\n+import org.identityconnectors.framework.api.ConnectorInfo;\n+import org.identityconnectors.framework.api.ConnectorInfoManager;\n+import org.identityconnectors.framework.api.ConnectorInfoManagerFactory;\n+import org.identityconnectors.framework.api.ConnectorKey;\n+import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.syncope.client.to.ConnectorInstanceTO;\n+import org.syncope.client.to.ConnectorInstanceTOs;\n+import org.syncope.client.to.PropertyTO;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.core.persistence.beans.ConnectorInstance;\n+import org.syncope.core.persistence.beans.SyncopeConfiguration;\n+import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n+import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n+import org.syncope.core.persistence.util.ApplicationContextManager;\n+import org.syncope.core.rest.data.ConnectorInstanceDataBinder;\n+\n+@Controller\n+@RequestMapping(\"/connector\")\n+public class ConnectorInstanceController extends AbstractController {\n+\n+    @Autowired\n+    private ConnectorInstanceDAO connectorInstanceDAO;\n+\n+    @Autowired\n+    SyncopeConfigurationDAO syncopeConfigurationDAO;\n+\n+    @Transactional\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/create\")\n+    public ConnectorInstanceTO create(HttpServletResponse response,\n+            @RequestBody ConnectorInstanceTO connectorTO) throws IOException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"create called with configuration \" + connectorTO);\n+        }\n+\n+        ConnectorInstanceDataBinder binder =\n+                new ConnectorInstanceDataBinder(connectorInstanceDAO);\n+\n+        ConnectorInstance actual = null;\n+\n+        try {\n+\n+            actual = binder.createConnectorInstance(connectorTO);\n+\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            log.error(\"Could not create for \" + connectorTO, e);\n+            return throwCompositeException(e, response);\n+        }\n+\n+        if (actual == null)\n+            throw new IOException(\"Connector bind failed\");\n+\n+        ConnectorFacade connector = getConnectorFacade(\n+                connectorTO.getBundleName(),\n+                connectorTO.getVersion(),\n+                connectorTO.getConnectorName(),\n+                connectorTO.getConfiguration());\n+\n+        ConfigurableApplicationContext context =\n+                ApplicationContextManager.getApplicationContext();\n+\n+        DefaultListableBeanFactory beanFactory =\n+                (DefaultListableBeanFactory) context.getBeanFactory();\n+\n+        try {\n+\n+            beanFactory.destroyBean(\n+                    actual.getId().toString(),\n+                    beanFactory.getBean(actual.getId().toString()));\n+\n+        } catch (NoSuchBeanDefinitionException ignore) {\n+            // ignore exception\n+            if (log.isInfoEnabled()) {\n+                log.info(\"No bean named '\" + actual.getId() + \"' is defined\");\n+            }\n+        }\n+\n+        beanFactory.registerSingleton(actual.getId().toString(), connector);\n+\n+        response.setStatus(HttpServletResponse.SC_CREATED);\n+        return binder.getConnectorInstanceTO(actual);\n+    }\n+\n+    @Transactional\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/update\")\n+    public ConnectorInstanceTO update(HttpServletResponse response,\n+            @RequestBody ConnectorInstanceTO connectorTO) throws IOException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"update called with configuration \" + connectorTO);\n+        }\n+\n+        ConnectorInstanceDataBinder binder =\n+                new ConnectorInstanceDataBinder(connectorInstanceDAO);\n+\n+        ConnectorInstance actual = null;\n+\n+        try {\n+\n+            actual = binder.updateConnectorInstance(\n+                    connectorTO.getId(), connectorTO);\n+\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            log.error(\"Could not create for \" + connectorTO, e);\n+            return throwCompositeException(e, response);\n+        }\n+\n+        if (actual == null)\n+            throw new IOException(\"Connector bind failed\");\n+\n+        ConfigurableApplicationContext context =\n+                ApplicationContextManager.getApplicationContext();\n+\n+        DefaultListableBeanFactory beanFactory =\n+                (DefaultListableBeanFactory) context.getBeanFactory();\n+\n+        ConnectorFacade connector = (ConnectorFacade) beanFactory.getSingleton(\n+                actual.getId().toString());\n+\n+        if (connector == null) {\n+            connector = getConnectorFacade(\n+                    connectorTO.getBundleName(),\n+                    connectorTO.getVersion(),\n+                    connectorTO.getConnectorName(),\n+                    connectorTO.getConfiguration());\n+        }\n+\n+        try {\n+\n+            beanFactory.destroyBean(\n+                    actual.getId().toString(),\n+                    beanFactory.getBean(actual.getId().toString()));\n+\n+        } catch (NoSuchBeanDefinitionException ignore) {\n+            // ignore exception\n+            if (log.isInfoEnabled()) {\n+                log.info(\"No bean named '\" + actual.getId() + \"' is defined\");\n+            }\n+        }\n+\n+        beanFactory.registerSingleton(actual.getId().toString(), connector);\n+\n+        response.setStatus(HttpServletResponse.SC_CREATED);\n+        return binder.getConnectorInstanceTO(actual);\n+    }\n+\n+    @Transactional\n+    @RequestMapping(method = RequestMethod.DELETE,\n+    value = \"/delete/{connectorId}\")\n+    public void delete(HttpServletResponse response,\n+            @PathVariable(\"connectorId\") Long connectorId)\n+            throws IOException {\n+\n+        ConnectorInstance connectorInstance =\n+                connectorInstanceDAO.find(connectorId);\n+\n+        if (connectorInstance == null) {\n+            log.error(\"Could not find connector '\" + connectorId + \"'\");\n+            throwNotFoundException(String.valueOf(connectorId), response);\n+        } else {\n+            connectorInstanceDAO.delete(connectorId);\n+\n+            ConfigurableApplicationContext context =\n+                    ApplicationContextManager.getApplicationContext();\n+\n+            DefaultListableBeanFactory beanFactory =\n+                    (DefaultListableBeanFactory) context.getBeanFactory();\n+\n+            try {\n+\n+                beanFactory.destroyBean(\n+                        connectorId.toString(),\n+                        beanFactory.getBean(connectorId.toString()));\n+\n+            } catch (NoSuchBeanDefinitionException ignore) {\n+                // ignore exception\n+                if (log.isInfoEnabled()) {\n+                    log.info(\"No bean named '\" + connectorId + \"' is defined\");\n+                }\n+            }\n+        }\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n+    public ConnectorInstanceTOs list() {\n+\n+        List<ConnectorInstance> connectorInstances =\n+                connectorInstanceDAO.findAll();\n+\n+        List<ConnectorInstanceTO> instances =\n+                new ArrayList<ConnectorInstanceTO>();\n+\n+        ConnectorInstanceDataBinder binder =\n+                new ConnectorInstanceDataBinder(connectorInstanceDAO);\n+\n+        for (ConnectorInstance connector : connectorInstances) {\n+            instances.add(binder.getConnectorInstanceTO(connector));\n+        }\n+\n+        ConnectorInstanceTOs connectorInstanceTOs =\n+                new ConnectorInstanceTOs();\n+\n+        connectorInstanceTOs.setInstances(instances);\n+\n+        return connectorInstanceTOs;\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/read/{connectorId}\")\n+    public ConnectorInstanceTO read(HttpServletResponse response,\n+            @PathVariable(\"connectorId\") Long connectorId) throws IOException {\n+\n+        ConnectorInstance connectorInstance =\n+                connectorInstanceDAO.find(connectorId);\n+\n+        if (connectorInstance == null) {\n+            log.error(\"Could not find connector '\" + connectorId + \"'\");\n+            return throwNotFoundException(\"Connector not found\", response);\n+        }\n+\n+        ConnectorInstanceDataBinder binder =\n+                new ConnectorInstanceDataBinder(connectorInstanceDAO);\n+\n+        return binder.getConnectorInstanceTO(connectorInstance);\n+    }\n+\n+    private ConnectorFacade getConnectorFacade(\n+            String bundlename,\n+            String bundleversion,\n+            String connectorname,\n+            Set<PropertyTO> configuration) throws IOException {\n+\n+        ConnectorInfoManagerFactory connectorInfoManagerFactory =\n+                ConnectorInfoManagerFactory.getInstance();\n+\n+        SyncopeConfiguration syncopeConfiguration =\n+                syncopeConfigurationDAO.find(\n+                \"identityconnectors.bundle.directory\");\n+\n+        if (syncopeConfiguration == null) {\n+            throw new IOException(\"Syncope configuration not found\");\n+        }\n+\n+        File bundleDirectory = new File(syncopeConfiguration.getConfValue());\n+\n+        List<URL> urls = new ArrayList<URL>();\n+\n+        String[] files = bundleDirectory.list();\n+\n+        if(files == null){\n+            throw new IOException(\"No bundles found\");\n+        }\n+\n+        for (String file : files) {\n+            try {\n+                urls.add(IOUtil.makeURL(bundleDirectory, file));\n+            } catch (Exception ignore) {\n+                // ignore exception and don't add bundle\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\n+                            \"\\\"\" +\n+                            bundleDirectory.toString() + \"/\" + file +\n+                            \"\\\"\" +\n+                            \" is not a valid connector bundle.\", ignore);\n+                }\n+            }\n+        }\n+\n+        if (urls.isEmpty()) {\n+            throw new IOException(\"No bundles found\");\n+        }\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"URL: \" + urls.toString());\n+        }\n+\n+        ConnectorInfoManager manager =\n+                connectorInfoManagerFactory.getLocalManager(\n+                urls.toArray(new URL[0]));\n+\n+\n+        if (manager == null) {\n+            throw new IOException(\"Connector Info Manager not found\");\n+        }\n+\n+        // list connectors info\n+        List<ConnectorInfo> infos = manager.getConnectorInfos();\n+        if (infos != null) {\n+            log.debug(\"infos size: \" + infos.size());\n+            for (ConnectorInfo i : infos) {\n+                log.debug(\"Name: \" + i.getConnectorDisplayName());\n+            }\n+        }\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\n+                    \"\\nBundle name: \" + bundlename +\n+                    \"\\nBundle version: \" + bundleversion +\n+                    \"\\nBundle class: \" + connectorname);\n+        }\n+\n+        // specify a connector.\n+        ConnectorKey key = new ConnectorKey(\n+                bundlename,\n+                bundleversion,\n+                connectorname);\n+\n+        if (key == null) {\n+            throw new IOException(\"Connector Key not found\");\n+        }\n+\n+\n+        // get the specified connector.\n+        ConnectorInfo info = manager.findConnectorInfo(key);\n+\n+        if (info == null) {\n+            throw new IOException(\"Connector Info not found\");\n+        }\n+\n+\n+        // create default configuration\n+        APIConfiguration apiConfig = info.createDefaultAPIConfiguration();\n+\n+        if (apiConfig == null) {\n+            throw new IOException(\"Default API configuration not found\");\n+        }\n+\n+        // retrieve the ConfigurationProperties.\n+        ConfigurationProperties properties =\n+                apiConfig.getConfigurationProperties();\n+\n+        if (properties == null) {\n+            throw new IOException(\"Configuration properties not found\");\n+        }\n+\n+        // Print out what the properties are (not necessary)\n+        List<String> propertyNames = properties.getPropertyNames();\n+\n+        for (String propName : propertyNames) {\n+            ConfigurationProperty prop = properties.getProperty(propName);\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\n+                        \"\\nProperty Name: \" + prop.getName() +\n+                        \"\\nProperty Type: \" + prop.getType());\n+            }\n+        }\n+\n+        // Set all of the ConfigurationProperties needed by the connector.\n+        for (PropertyTO property : configuration) {\n+            properties.setPropertyValue(\n+                    property.getKey(), property.getValue());\n+        }\n+\n+        // Use the ConnectorFacadeFactory's newInstance() method to get\n+        // a new connector.\n+        ConnectorFacade connector =\n+                ConnectorFacadeFactory.getInstance().newInstance(apiConfig);\n+\n+        if (connector == null) {\n+            throw new IOException(\"Connector not found\");\n+        }\n+\n+        // Make sure we have set up the Configuration properly\n+        connector.validate();\n+        //connector.test(); //needs a target resource deployed\n+\n+        return connector;\n+    }\n+}"},{"sha":"cccf4a0db9d5d1b9f6cec0f7cd3f2ad226c6638f","filename":"core/src/main/java/org/syncope/core/rest/data/ConnectorInstanceDataBinder.java","status":"added","additions":214,"deletions":0,"changes":214,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -0,0 +1,214 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.data;\n+\n+import java.beans.XMLDecoder;\n+import java.beans.XMLEncoder;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.util.Set;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Component;\n+import org.syncope.client.to.ConnectorInstanceTO;\n+import org.syncope.client.to.PropertyTO;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.persistence.beans.ConnectorInstance;\n+import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n+import org.syncope.types.SyncopeClientExceptionType;\n+\n+@Component\n+public class ConnectorInstanceDataBinder {\n+\n+    private static final Logger log = LoggerFactory.getLogger(\n+            ConnectorInstanceDataBinder.class);\n+\n+    private static final String[] ignoreProperties = {\n+        \"id\", \"resources\", \"xmlConfiguration\", \"configuration\"};\n+\n+    private ConnectorInstanceDAO connectorInstanceDAO;\n+\n+    @Autowired\n+    public ConnectorInstanceDataBinder(\n+            ConnectorInstanceDAO connectorInstanceDAO) {\n+        this.connectorInstanceDAO = connectorInstanceDAO;\n+    }\n+\n+    public ConnectorInstance createConnectorInstance(\n+            ConnectorInstanceTO connectorTO)\n+            throws SyncopeClientCompositeErrorException {\n+\n+        SyncopeClientCompositeErrorException compositeErrorException =\n+                new SyncopeClientCompositeErrorException(\n+                HttpStatus.BAD_REQUEST);\n+\n+        SyncopeClientException requiredValuesMissing =\n+                new SyncopeClientException(\n+                SyncopeClientExceptionType.ConnectorRequiredValueMissing);\n+\n+        if (connectorTO.getBundleName() == null) {\n+            requiredValuesMissing.addElement(\"bundlename\");\n+        }\n+\n+        if (connectorTO.getVersion() == null) {\n+            requiredValuesMissing.addElement(\"bundleversion\");\n+        }\n+\n+        if (connectorTO.getConnectorName() == null) {\n+            requiredValuesMissing.addElement(\"connectorname\");\n+        }\n+\n+        if (connectorTO.getConfiguration() == null ||\n+                connectorTO.getConfiguration().isEmpty()) {\n+            requiredValuesMissing.addElement(\"configuration\");\n+        }\n+\n+        ConnectorInstance connectorInstance = new ConnectorInstance();\n+\n+        BeanUtils.copyProperties(\n+                connectorTO, connectorInstance, ignoreProperties);\n+\n+        connectorInstance.setXmlConfiguration(\n+                serializeToXML(\n+                connectorTO.getConfiguration()));\n+\n+        // Throw composite exception if there is at least one element set\n+        // in the composing exceptions\n+\n+        if (!requiredValuesMissing.getElements().isEmpty()) {\n+            compositeErrorException.addException(requiredValuesMissing);\n+        }\n+\n+        if (compositeErrorException.hasExceptions()) {\n+            throw compositeErrorException;\n+        }\n+\n+        // Everything went out fine, we can flush to the database\n+        ConnectorInstance actual = connectorInstanceDAO.save(\n+                connectorInstance);\n+\n+        return actual;\n+    }\n+\n+    public ConnectorInstance updateConnectorInstance(\n+            Long connectorInstanceId,\n+            ConnectorInstanceTO connectorTO)\n+            throws SyncopeClientCompositeErrorException {\n+\n+        SyncopeClientCompositeErrorException compositeErrorException =\n+                new SyncopeClientCompositeErrorException(\n+                HttpStatus.BAD_REQUEST);\n+\n+        SyncopeClientException requiredValuesMissing =\n+                new SyncopeClientException(\n+                SyncopeClientExceptionType.ConnectorRequiredValueMissing);\n+\n+        if (connectorInstanceId == null) {\n+            requiredValuesMissing.addElement(\"connector id\");\n+        }\n+\n+        ConnectorInstance connectorInstance =\n+                connectorInstanceDAO.find(connectorInstanceId);\n+\n+\n+        if (connectorTO.getBundleName() != null) {\n+            connectorInstance.setBundleName(connectorTO.getBundleName());\n+        }\n+\n+        if (connectorTO.getVersion() != null) {\n+            connectorInstance.setVersion(connectorTO.getVersion());\n+        }\n+\n+        if (connectorTO.getConnectorName() != null) {\n+            connectorInstance.setConnectorName(connectorTO.getConnectorName());\n+        }\n+\n+        if (connectorTO.getConfiguration() != null ||\n+                connectorTO.getConfiguration().isEmpty()) {\n+\n+            connectorInstance.setXmlConfiguration(\n+                    serializeToXML(\n+                    connectorTO.getConfiguration()));\n+        }\n+\n+        // Throw composite exception if there is at least one element set\n+        // in the composing exceptions\n+\n+        if (!requiredValuesMissing.getElements().isEmpty()) {\n+            compositeErrorException.addException(requiredValuesMissing);\n+        }\n+\n+        if (compositeErrorException.hasExceptions()) {\n+            throw compositeErrorException;\n+        }\n+\n+        // Everything went out fine, we can flush to the database\n+        ConnectorInstance actual = connectorInstanceDAO.save(\n+                connectorInstance);\n+\n+        return actual;\n+    }\n+\n+    public ConnectorInstanceTO getConnectorInstanceTO(ConnectorInstance connectorInstance) {\n+        ConnectorInstanceTO connectorInstanceTO =\n+                new ConnectorInstanceTO();\n+\n+        BeanUtils.copyProperties(\n+                connectorInstance, connectorInstanceTO, ignoreProperties);\n+\n+        connectorInstanceTO.setConfiguration(\n+                (Set<PropertyTO>) buildFromXML(\n+                connectorInstance.getXmlConfiguration()));\n+\n+        connectorInstanceTO.setId(connectorInstance.getId());\n+\n+        return connectorInstanceTO;\n+    }\n+\n+    public static String serializeToXML(Object obj) {\n+        try {\n+\n+            ByteArrayOutputStream tokenContentOS = new ByteArrayOutputStream();\n+            XMLEncoder encoder = new XMLEncoder(tokenContentOS);\n+            encoder.writeObject(obj);\n+            encoder.flush();\n+            encoder.close();\n+\n+            return tokenContentOS.toString();\n+\n+        } catch (Throwable t) {\n+            return null;\n+        }\n+    }\n+\n+    public static Object buildFromXML(String xml) {\n+        try {\n+\n+            ByteArrayInputStream tokenContentIS = new ByteArrayInputStream(xml.getBytes());\n+            XMLDecoder decoder = new XMLDecoder(tokenContentIS);\n+            Object object = decoder.readObject();\n+            decoder.close();\n+\n+            return object;\n+\n+        } catch (Throwable t) {\n+            return null;\n+        }\n+    }\n+}"},{"sha":"1b0b3720236c8e6b109e092f10f1515aefd352ac","filename":"core/src/main/resources/log4j.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flog4j.xml?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -60,7 +60,7 @@\n     </logger>\n \n     <logger name=\"org.syncope.core.rest\" additivity=\"false\">\n-        <level value=\"INFO\"/>\n+        <level value=\"DEBUG\"/>\n         <appender-ref ref=\"rest\"/>\n     </logger>\n \n@@ -100,7 +100,7 @@\n     </logger>\n \n     <root>\n-        <priority value=\"INFO\"/>\n+        <priority value=\"DEBUG\"/>\n         <appender-ref ref=\"main\"/>\n         <appender-ref ref=\"persistence\"/>\n         <appender-ref ref=\"rest\"/>"},{"sha":"e1fafd1d60b6ec5f68b0a9cda48f4f288ca54d7a","filename":"core/src/main/resources/org/syncope/core/persistence/content.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -15,6 +15,8 @@\n <dataset>\n     <SyncopeConfiguration confKey=\"token.length\" confValue=\"256\"/>\n     <SyncopeConfiguration confKey=\"token.expireTime\" confValue=\"60\"/>\n+    <SyncopeConfiguration confKey=\"identityconnectors.bundle.directory\"\n+                          confValue=\"/tmp/bundles\"/>\n \n     <!-- pRCSIAM: default content -->\n     <UserSchema name=\"userId\" type=\"String\" virtual=\"false\""},{"sha":"f2b05fe706e8eacd67f6473925bfe6355e741ca9","filename":"core/src/main/resources/persistenceContext.xml","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -81,6 +81,9 @@\n         <property name=\"entityManagerFactory\" ref=\"entityManagerFactory\"/>\n     </bean>\n \n+    <bean id=\"contextApplicationContextProvider\"\n+          class=\"org.syncope.core.persistence.util.ApplicationContextProvider\" />\n+\n     <!-- workflow -->\n     <bean id=\"workflowFactory\"\n           class=\"com.opensymphony.workflow.spi.hibernate.SpringWorkflowFactory\"\n@@ -122,4 +125,4 @@\n         </property>\n     </bean>\n \n-</beans>\n\\ No newline at end of file\n+</beans>"},{"sha":"5765c65a0259c6da30b5f28558281b1fc19330f8","filename":"core/src/test/java/org/syncope/core/test/persistence/ConnectorInstanceDAOTest.java","status":"modified","additions":65,"deletions":17,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FConnectorInstanceDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FConnectorInstanceDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FConnectorInstanceDAOTest.java?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -14,21 +14,68 @@\n  */\n package org.syncope.core.test.persistence;\n \n+import java.util.HashSet;\n+import java.util.Set;\n import static org.junit.Assert.*;\n \n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n+import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.client.to.PropertyTO;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n-import org.syncope.core.test.persistence.util.WebServiceConfiguration;\n+import org.syncope.core.persistence.util.ApplicationContextManager;\n+import org.syncope.core.rest.data.ConnectorInstanceDataBinder;\n \n @Transactional\n public class ConnectorInstanceDAOTest extends AbstractTest {\n \n     @Autowired\n     ConnectorInstanceDAO connectorInstanceDAO;\n \n+    @Test\n+    public final void testSingletonBean() {\n+        ConnectorInstance connectorInstance = connectorInstanceDAO.find(100L);\n+\n+        assertNotNull(\"findById did not work\", connectorInstance);\n+\n+        ConfigurableApplicationContext context =\n+                ApplicationContextManager.getApplicationContext();\n+\n+        assertNotNull(context);\n+\n+        // --------------------------------------------\n+        DefaultListableBeanFactory beanFactory =\n+                (DefaultListableBeanFactory) context.getBeanFactory();\n+\n+        assertNotNull(beanFactory);\n+\n+        beanFactory.registerSingleton(\n+                connectorInstance.getId().toString(),\n+                connectorInstance);\n+        // --------------------------------------------\n+\n+        // --------------------------------------------\n+        beanFactory =\n+                (DefaultListableBeanFactory) context.getBeanFactory();\n+\n+        assertNotNull(beanFactory);\n+\n+        ConnectorInstance actual = (ConnectorInstance) beanFactory.getBean(\n+                connectorInstance.getId().toString());\n+        // --------------------------------------------\n+\n+        assertNotNull(actual);\n+\n+        assertEquals(actual, connectorInstance);\n+\n+        connectorInstance.setXmlConfiguration(\"ne configuration ...\");\n+\n+        assertEquals(actual, connectorInstance);\n+    }\n+\n     @Test\n     public final void findById() {\n         ConnectorInstance connectorInstance = connectorInstanceDAO.find(100L);\n@@ -60,12 +107,22 @@ public final void save() throws ClassNotFoundException {\n         connectorInstance.setBundleName(\n                 \"org.syncope.core.persistence.test.util\");\n \n-        WebServiceConfiguration conf = new WebServiceConfiguration();\n-        conf.setEndpoint(\"http://host.domain\");\n-        conf.setService(\"/provisioning\");\n-        conf.setContext(\"/service\");\n+        // set the connector configuration using PropertyTO\n+        Set<PropertyTO> conf = new HashSet<PropertyTO>();\n \n-        String xmlconf = conf.serializeToXML();\n+        PropertyTO endpoint = new PropertyTO();\n+        endpoint.setKey(\"endpoint\");\n+        endpoint.setValue(\"http://host.domain\");\n+\n+        PropertyTO servicename = new PropertyTO();\n+        servicename.setKey(\"servicename\");\n+        servicename.setValue(\"Provisioning\");\n+\n+        conf.add(endpoint);\n+        conf.add(servicename);\n+\n+        // serialize configuration\n+        String xmlconf = ConnectorInstanceDataBinder.serializeToXML(conf);\n \n         assertNotNull(\"xml configuration string is null\", xmlconf);\n \n@@ -95,20 +152,11 @@ public final void save() throws ClassNotFoundException {\n \n         assertNotNull(\"configuration not found\", xmlConfiguration);\n \n-        conf = (WebServiceConfiguration) WebServiceConfiguration.buildFromXML(\n+        conf = (Set<PropertyTO>) ConnectorInstanceDataBinder.buildFromXML(\n                 xmlConfiguration);\n \n         assertNotNull(\"configuration retrieving failed\", conf);\n-\n-        Throwable t = null;\n-\n-        try {\n-            conf.validate();\n-        } catch (IllegalArgumentException e) {\n-            t = e;\n-        }\n-\n-        assertNull(\"configuration validation failed\", t);\n+        assertTrue(conf.size() == 2);\n     }\n \n     @Test"},{"sha":"46f1e0ea9b15fb0818a350dd4da66c1e23f85f20","filename":"core/src/test/java/org/syncope/core/test/persistence/util/WebServiceConfiguration.java","status":"removed","additions":0,"deletions":121,"changes":121,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4430f914207a1c248127062a9bd62db92b4caacf/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Futil%2FWebServiceConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4430f914207a1c248127062a9bd62db92b4caacf/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Futil%2FWebServiceConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Futil%2FWebServiceConfiguration.java?ref=4430f914207a1c248127062a9bd62db92b4caacf","patch":"@@ -1,121 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.test.persistence.util;\n-\n-import java.beans.XMLDecoder;\n-import java.beans.XMLEncoder;\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import org.identityconnectors.framework.spi.AbstractConfiguration;\n-import org.identityconnectors.framework.spi.ConfigurationProperty;\n-import org.identityconnectors.common.StringUtil;\n-\n-/**\n- * Extends the {@link AbstractConfiguration} class to provide all the necessary\n- * parameters to initialize the WebService Connector.\n- */\n-public class WebServiceConfiguration extends AbstractConfiguration {\n-\n-    /*\n-     * Set up base configuration elements\n-     */\n-    private String endpoint = null;\n-\n-    private String context = null;\n-\n-    private String service = null;\n-\n-    /**\n-     * Accessor for the example property. Uses ConfigurationProperty annotation\n-     * to provide property metadata to the application.\n-     */\n-    @ConfigurationProperty(displayMessageKey = \"ENDPOINT_DISPLAY\", helpMessageKey = \"ENDPOINT_HELP\", confidential = false)\n-    public String getEndpoint() {\n-        return endpoint;\n-    }\n-\n-    public void setEndpoint(String endpoint) {\n-        this.endpoint = endpoint;\n-    }\n-\n-    /**\n-     * Accessor for the example property. Uses ConfigurationProperty annotation\n-     * to provide property metadata to the application.\n-     */\n-    @ConfigurationProperty(displayMessageKey = \"SERVICE_DISPLAY\", helpMessageKey = \"SERVICE_HELP\", confidential = false)\n-    public String getService() {\n-        return service;\n-    }\n-\n-    public void setService(String service) {\n-        this.service = service;\n-    }\n-\n-    /**\n-     * Accessor for the example property. Uses ConfigurationProperty annotation\n-     * to provide property metadata to the application.\n-     */\n-    @ConfigurationProperty(displayMessageKey = \"CONTEXT_DISPLAY\", helpMessageKey = \"CONTEXT_HELP\", confidential = false)\n-    public String getContext() {\n-        return context;\n-    }\n-\n-    public void setContext(String context) {\n-        this.context = context;\n-    }\n-\n-    /**\n-     * Constructor\n-     */\n-    public WebServiceConfiguration() {\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void validate() {\n-        if (StringUtil.isBlank(endpoint)) {\n-            throw new IllegalArgumentException(\"Endpoint cannot be null or empty.\");\n-        }\n-\n-        if (StringUtil.isBlank(service)) {\n-            throw new IllegalArgumentException(\"Service cannot be null or empty.\");\n-        }\n-\n-        if (StringUtil.isBlank(context)) {\n-            throw new IllegalArgumentException(\"Context cannot be null or empty.\");\n-        }\n-    }\n-\n-    public String serializeToXML() {\n-        ByteArrayOutputStream tokenContentOS = new ByteArrayOutputStream();\n-        XMLEncoder encoder = new XMLEncoder(tokenContentOS);\n-        encoder.writeObject(this);\n-        encoder.flush();\n-        encoder.close();\n-\n-        return tokenContentOS.toString();\n-    }\n-\n-    public static Object buildFromXML(String xml) {\n-        ByteArrayInputStream tokenContentIS = new ByteArrayInputStream(xml.getBytes());\n-        XMLDecoder decoder = new XMLDecoder(tokenContentIS);\n-        Object object = decoder.readObject();\n-        decoder.close();\n-\n-        return object;\n-    }\n-}"},{"sha":"0c055787f127b574cd30b578e6f980c77ef5dac3","filename":"core/src/test/java/org/syncope/core/test/rest/ConnectorInstanceTestITCase.java","status":"added","additions":198,"deletions":0,"changes":198,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FConnectorInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FConnectorInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FConnectorInstanceTestITCase.java?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -0,0 +1,198 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.rest;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.junit.Test;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.test.annotation.ExpectedException;\n+import org.springframework.web.client.HttpStatusCodeException;\n+import org.syncope.client.to.ConnectorInstanceTO;\n+import org.syncope.client.to.ConnectorInstanceTOs;\n+import org.syncope.client.to.PropertyTO;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+\n+public class ConnectorInstanceTestITCase extends AbstractTestITCase {\n+\n+    @Test\n+    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n+    public void createWithException() {\n+        ConnectorInstanceTO connectorTO = new ConnectorInstanceTO();\n+\n+        restTemplate.postForObject(BASE_URL + \"connector/create.json\",\n+                connectorTO, ConnectorInstanceTO.class);\n+    }\n+\n+    @Test\n+    public void create() {\n+\n+        ConnectorInstanceTO connectorTO = new ConnectorInstanceTO();\n+\n+        // set connector version\n+        connectorTO.setVersion(\"0.1-SNAPSHOT\");\n+\n+        // set connector name\n+        connectorTO.setConnectorName(\n+                \"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\");\n+\n+        // set bundle name\n+        connectorTO.setBundleName(\n+                \"org.syncope.identityconnectors.bundles.staticws\");\n+\n+        // set the connector configuration using PropertyTO\n+        Set<PropertyTO> conf = new HashSet<PropertyTO>();\n+\n+        PropertyTO endpoint = new PropertyTO();\n+        endpoint.setKey(\"endpoint\");\n+        endpoint.setValue(\"http://localhost:8888/wstarget/services\");\n+\n+        PropertyTO servicename = new PropertyTO();\n+        servicename.setKey(\"servicename\");\n+        servicename.setValue(\"Provisioning\");\n+\n+        conf.add(endpoint);\n+        conf.add(servicename);\n+\n+        // set connector configuration\n+        connectorTO.setConfiguration(conf);\n+\n+        ConnectorInstanceTO actual =\n+                (ConnectorInstanceTO) restTemplate.postForObject(\n+                BASE_URL + \"connector/create.json\",\n+                connectorTO, ConnectorInstanceTO.class);\n+\n+        assertNotNull(actual);\n+\n+        assertEquals(actual.getBundleName(), connectorTO.getBundleName());\n+        assertEquals(actual.getConnectorName(), connectorTO.getConnectorName());\n+        assertEquals(actual.getVersion(), connectorTO.getVersion());\n+\n+        // check also for the deletion of the created object\n+\n+        Throwable t = null;\n+\n+        try {\n+\n+            restTemplate.delete(\n+                    BASE_URL + \"connector/delete/{connectorId}.json\",\n+                    actual.getId().toString());\n+\n+        } catch (HttpStatusCodeException e) {\n+            log.error(\"delete failed\", e);\n+            t = e;\n+        }\n+\n+        assertNull(t);\n+\n+        // check the non existence\n+\n+        try {\n+\n+            restTemplate.getForObject(\n+                    BASE_URL + \"connector/read/{connectorId}\",\n+                    ConnectorInstanceTO.class,\n+                    actual.getId().toString());\n+\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n+        }\n+    }\n+\n+    @Test\n+    public void update() {\n+        ConnectorInstanceTO connectorTO = new ConnectorInstanceTO();\n+\n+        // set connector instance id\n+        connectorTO.setId(100L);\n+\n+        // set connector version\n+        connectorTO.setVersion(\"0.1-SNAPSHOT\");\n+\n+        // set connector name\n+        connectorTO.setConnectorName(\n+                \"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\");\n+\n+        // set bundle name\n+        connectorTO.setBundleName(\n+                \"org.syncope.identityconnectors.bundles.staticws\");\n+\n+        // set the connector configuration using PropertyTO\n+        Set<PropertyTO> conf = new HashSet<PropertyTO>();\n+\n+        PropertyTO endpoint = new PropertyTO();\n+        endpoint.setKey(\"endpoint\");\n+        endpoint.setValue(\"http://localhost:8888/wstarget/services\");\n+\n+        PropertyTO servicename = new PropertyTO();\n+        servicename.setKey(\"servicename\");\n+        servicename.setValue(\"Provisioning\");\n+\n+        conf.add(endpoint);\n+        conf.add(servicename);\n+\n+        // set connector configuration\n+        connectorTO.setConfiguration(conf);\n+\n+        ConnectorInstanceTO actual =\n+                (ConnectorInstanceTO) restTemplate.postForObject(\n+                BASE_URL + \"connector/update.json\",\n+                connectorTO, ConnectorInstanceTO.class);\n+\n+        assertNotNull(actual);\n+\n+        actual = restTemplate.getForObject(\n+                BASE_URL + \"connector/read/{connectorId}\",\n+                ConnectorInstanceTO.class,\n+                actual.getId().toString());\n+\n+        assertNotNull(actual);\n+        assertEquals(actual.getBundleName(), connectorTO.getBundleName());\n+        assertEquals(actual.getConnectorName(), connectorTO.getConnectorName());\n+        assertEquals(actual.getVersion(), connectorTO.getVersion());\n+    }\n+\n+    @Test\n+    public void deleteWithException() {\n+        try {\n+\n+            restTemplate.delete(\n+                    BASE_URL + \"connector/delete/{connectorId}.json\", \"0\");\n+\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n+        }\n+    }\n+\n+    @Test\n+    public void list() {\n+        ConnectorInstanceTOs connectorInstanceTOs = restTemplate.getForObject(\n+                BASE_URL + \"connector/list.json\", ConnectorInstanceTOs.class);\n+\n+        assertNotNull(connectorInstanceTOs);\n+        assertFalse(connectorInstanceTOs.getInstances().isEmpty());\n+    }\n+\n+    @Test\n+    public void read() {\n+        ConnectorInstanceTO connectorInstanceTO = restTemplate.getForObject(\n+                BASE_URL + \"connector/read/{connectorId}.json\",\n+                ConnectorInstanceTO.class, \"100\");\n+\n+        assertNotNull(connectorInstanceTO);\n+    }\n+}"},{"sha":"d2bea77163d1113826b51b9e20e4b15c59c4d30e","filename":"core/src/test/resources/org/syncope/core/persistence/content.xml","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -15,7 +15,10 @@\n <dataset>\n     <SyncopeConfiguration confKey=\"token.length\" confValue=\"256\"/>\n     <SyncopeConfiguration confKey=\"token.expireTime\" confValue=\"60\"/>\n-    \n+\n+    <SyncopeConfiguration confKey=\"identityconnectors.bundle.directory\"\n+                          confValue=\"/tmp/bundles\"/>\n+                          \n     <SyncopeUser id=\"1\" password=\"XXX\"/>\n     <SyncopeUser id=\"2\" password=\"YYY\"/>\n     <SyncopeUser id=\"3\" password=\"ZZZ\"/>"},{"sha":"5da7e2883db77759a92390e9eb7d6e17952111d2","filename":"identityconnectors/bundles/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/identityconnectors%2Fbundles%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/identityconnectors%2Fbundles%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fpom.xml?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -25,7 +25,7 @@\n         <version>0.1-SNAPSHOT</version>\n     </parent>\n \n-    <groupId>org.syncope.identityconnectors</groupId>\n+    <groupId>org.syncope.identityconnectors.bundles</groupId>\n     <artifactId>bundles</artifactId>\n \n     <name>IdentityConnectors: bundles</name>"},{"sha":"ea56286abd1cbd2a99f9d74a1f123b56222952bc","filename":"identityconnectors/bundles/staticws/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/identityconnectors%2Fbundles%2Fstaticws%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/identityconnectors%2Fbundles%2Fstaticws%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fpom.xml?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -21,11 +21,11 @@\n \n     <parent>\n         <artifactId>bundles</artifactId>\n-        <groupId>org.syncope.identityconnectors</groupId>\n+        <groupId>org.syncope.identityconnectors.bundles</groupId>\n         <version>0.1-SNAPSHOT</version>\n     </parent>\n \n-    <groupId>org.syncope.identityconnectors.bundles</groupId>\n+    <groupId>org.syncope.identityconnectors.bundles.staticws</groupId>\n     <artifactId>staticws</artifactId>\n \n     <name>IdentityConnectors: bundles: static web service</name>"},{"sha":"dac898de242369640f53a457df94a98126f64c96","filename":"identityconnectors/bundles/staticws/staticwebservice/pom.xml","status":"modified","additions":22,"deletions":3,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fpom.xml?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -21,7 +21,7 @@\n \n     <parent>\n         <artifactId>staticws</artifactId>\n-        <groupId>org.syncope.identityconnectors.bundles</groupId>\n+        <groupId>org.syncope.identityconnectors.bundles.staticws</groupId>\n         <version>0.1-SNAPSHOT</version>\n     </parent>\n \n@@ -132,10 +132,18 @@\n \n     <build>\n         <plugins>\n+            \n             <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-jar-plugin</artifactId>\n+                <artifactId>maven-assembly-plugin</artifactId>\n                 <configuration>\n+\n+                    <finalName>${artifactId}-${version}</finalName>\n+                    <appendAssemblyId>false</appendAssemblyId>\n+\n+                    <descriptors>\n+                        <descriptor>src/assemble/connector.xml</descriptor>\n+                    </descriptors>\n+\n                     <archive>\n                         <index>true</index>\n                         <manifestEntries>\n@@ -154,7 +162,18 @@\n \n                         </manifestEntries>\n                     </archive>\n+                    \n                 </configuration>\n+                \n+                <executions>\n+                    <execution>\n+                        <id>make-assembly</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>single</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n             </plugin>\n \n             <!-- Test Plugins -->"},{"sha":"c151640c2c527f8ed08566cd1404cb6727e2437f","filename":"identityconnectors/bundles/staticws/staticwebservice/src/assemble/connector.xml","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fassemble%2Fconnector.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fassemble%2Fconnector.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fassemble%2Fconnector.xml?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -0,0 +1,32 @@\n+\n+<assembly   xmlns=\"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0\n+                                http://maven.apache.org/xsd/assembly-1.1.0.xsd\">\n+\n+    <id>connector</id>\n+\n+    <formats>\n+        <format>jar</format>\n+    </formats>\n+    \n+    <includeBaseDirectory>false</includeBaseDirectory>\n+\n+    <fileSets>\n+\n+        <fileSet>\n+            <directory>target/classes</directory>\n+            <outputDirectory></outputDirectory>\n+        </fileSet>\n+\n+        <fileSet>\n+            <directory>${basedir}/../utilities/target</directory>\n+            <includes>\n+                <include>*.jar</include>\n+            </includes>\n+            <outputDirectory>lib</outputDirectory>\n+        </fileSet>\n+        \n+    </fileSets>\n+    \n+</assembly>"},{"sha":"4917a4898e12ab9e6c96469bcca39ee749052d80","filename":"identityconnectors/bundles/staticws/staticwebservice/src/main/resources/org/syncope/identityconnectors/bundles/staticwebservice/Messages.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FMessages.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FMessages.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FMessages.properties?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -1,4 +1,4 @@\n-STATICWEBSERVICE_CONNECTOR = Stati Web Service Connector\n+STATICWEBSERVICE_CONNECTOR = Static Web Service Connector\n \n ENDPOINT_DISPLAY = Service Endpoint\n ENDPOINT_HELP = Service Endpoint"},{"sha":"c47c84d4e5785e6b6a5a82b1a72052ecbd14bbaa","filename":"identityconnectors/bundles/staticws/staticwebservice/src/test/java/org/syncope/identityconnectors/bundles/StaticWSTestITCase.java","status":"modified","additions":54,"deletions":47,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2FStaticWSTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2FStaticWSTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2FStaticWSTestITCase.java?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -16,7 +16,6 @@\n \n import static org.junit.Assert.*;\n \n-import java.io.IOException;\n import java.io.File;\n import java.net.URL;\n import java.util.ArrayList;\n@@ -58,7 +57,7 @@\n public class StaticWSTestITCase {\n \n     private static final Logger log =\n-            LoggerFactory.getLogger(WebServiceConnector.class);\n+            LoggerFactory.getLogger(StaticWSTestITCase.class);\n \n     final private String ENDPOINT_PREFIX =\n             \"http://localhost:8888/wstarget/services\";\n@@ -75,6 +74,8 @@ public class StaticWSTestITCase {\n     final private String bundleclass =\n             WebServiceConnector.class.getName();\n \n+    final private String BUNDLE_DIRECTORY = \"target\";\n+\n     private ConnectorFacade connector;\n \n     /**\n@@ -87,72 +88,78 @@ public void init() {\n         ConnectorInfoManagerFactory connectorInfoManagerFactory =\n                 ConnectorInfoManagerFactory.getInstance();\n \n-        File bundleDirectory = new File(\"target\");\n+        File bundleDirectory = new File(BUNDLE_DIRECTORY);\n \n         APIConfiguration apiConfig = null;\n \n         Throwable t = null;\n \n-        try {\n-            // take bundles repository (directory or jar).\n-            URL url = IOUtil.makeURL(\n-                    bundleDirectory, \"staticwebservice-0.1-SNAPSHOT.jar\");\n-\n+        List<URL> urls = new ArrayList<URL>();\n \n-            assertNotNull(url);\n+        String[] files = bundleDirectory.list();\n \n-            if (log.isDebugEnabled()) {\n-                log.debug(\"URL: \" + url.toString());\n+        for (String file : files) {\n+            try {\n+                urls.add(IOUtil.makeURL(bundleDirectory, file));\n+            } catch (Exception ignore) {\n+                // ignore exception and don't add bundle\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\n+                            \"\\\"\" +\n+                            bundleDirectory.toString() + \"/\" + file +\n+                            \"\\\"\" +\n+                            \" is not a valid connector bundle.\", ignore);\n+                }\n             }\n+        }\n \n-            ConnectorInfoManager manager =\n-                    connectorInfoManagerFactory.getLocalManager(url);\n+        assertFalse(urls.isEmpty());\n \n-            assertNotNull(manager);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"URL: \" + urls.toString());\n+        }\n \n-            // list connectors info\n-            List<ConnectorInfo> infos = manager.getConnectorInfos();\n-            if (infos != null) {\n-                log.debug(\"infos size: \" + infos.size());\n-                for (ConnectorInfo i : infos) {\n-                    log.debug(\"Name: \" + i.getConnectorDisplayName());\n-                }\n-            }\n+        ConnectorInfoManager manager =\n+                connectorInfoManagerFactory.getLocalManager(\n+                urls.toArray(new URL[0]));\n \n-            if (log.isDebugEnabled()) {\n-                log.debug(\n-                        \"\\nBundle name: \" + bundlename +\n-                        \"\\nBundle version: \" + bundleversion +\n-                        \"\\nBundle class: \" + bundleclass);\n-            }\n+        assertNotNull(manager);\n \n-            // specify a connector.\n-            ConnectorKey key = new ConnectorKey(\n-                    bundlename,\n-                    bundleversion,\n-                    bundleclass);\n+        // list connectors info\n+        List<ConnectorInfo> infos = manager.getConnectorInfos();\n \n-            assertNotNull(key);\n+        assertNotNull(infos);\n \n-            // get the specified connector.\n-            ConnectorInfo info = manager.findConnectorInfo(key);\n+        log.debug(\"infos size: \" + infos.size());\n \n-            assertNotNull(info);\n+        for (ConnectorInfo i : infos) {\n+            log.debug(\"Name: \" + i.getConnectorDisplayName());\n+        }\n \n-            // create default configuration\n-            apiConfig = info.createDefaultAPIConfiguration();\n+        if (log.isDebugEnabled()) {\n+            log.debug(\n+                    \"\\nBundle name: \" + bundlename +\n+                    \"\\nBundle version: \" + bundleversion +\n+                    \"\\nBundle class: \" + bundleclass);\n+        }\n \n-            assertNotNull(apiConfig);\n+        // specify a connector.\n+        ConnectorKey key = new ConnectorKey(\n+                bundlename,\n+                bundleversion,\n+                bundleclass);\n \n-        } catch (IOException e) {\n-            if (log.isErrorEnabled()) {\n-                log.error(\"Bundle file not found\", e);\n-            }\n+        assertNotNull(key);\n \n-            t = e;\n-        }\n+        // get the specified connector.\n+        ConnectorInfo info = manager.findConnectorInfo(key);\n \n-        assertNull(t);\n+        assertNotNull(info);\n+\n+        // create default configuration\n+        apiConfig = info.createDefaultAPIConfiguration();\n+\n+        assertNotNull(apiConfig);\n \n         // retrieve the ConfigurationProperties.\n         ConfigurationProperties properties ="},{"sha":"d087294f4d7b6f3aa906d5fae42f89e61a1fc3e0","filename":"identityconnectors/bundles/staticws/utilities/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fpom.xml?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -21,7 +21,7 @@\n \n     <parent>\n         <artifactId>staticws</artifactId>\n-        <groupId>org.syncope.identityconnectors.bundles</groupId>\n+        <groupId>org.syncope.identityconnectors.bundles.staticws</groupId>\n         <version>0.1-SNAPSHOT</version>\n     </parent>\n "},{"sha":"5da80bbff72cdb168571ff602e7b0161f72cb7c6","filename":"identityconnectors/bundles/staticws/ws-target-resource/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fpom.xml?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -21,7 +21,7 @@\n \n     <parent>\n         <artifactId>staticws</artifactId>\n-        <groupId>org.syncope.identityconnectors.bundles</groupId>\n+        <groupId>org.syncope.identityconnectors.bundles.staticws</groupId>\n         <version>0.1-SNAPSHOT</version>\n     </parent>\n     "},{"sha":"6785f26c3c3cdf26d113576c6e2d4467cdf12ed1","filename":"identityconnectors/framework-internal/pom.xml","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/identityconnectors%2Fframework-internal%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/identityconnectors%2Fframework-internal%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fframework-internal%2Fpom.xml?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -10,7 +10,6 @@\n         <version>0.1-SNAPSHOT</version>\n     </parent>\n \n-    <groupId>org.syncope.identityconnectors</groupId>\n     <artifactId>framework-internal</artifactId>\n \n     <name>IdentityConnectors: framework-internal</name>"},{"sha":"b3b7119c06cacc6ac73b2c744d21005ff9e93e67","filename":"identityconnectors/framework/pom.xml","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/identityconnectors%2Fframework%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/identityconnectors%2Fframework%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fframework%2Fpom.xml?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -10,7 +10,6 @@\n         <version>0.1-SNAPSHOT</version>\n     </parent>\n \n-    <groupId>org.syncope.identityconnectors</groupId>\n     <artifactId>framework</artifactId>\n     \n     <name>IdentityConnectors: framework</name>"},{"sha":"a2417fc6498035afb72f5a708e1f02a7f0236bd5","filename":"identityconnectors/test-common/pom.xml","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ec815bb145306f0852c4eee33b0b68e074cafe7/identityconnectors%2Ftest-common%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ec815bb145306f0852c4eee33b0b68e074cafe7/identityconnectors%2Ftest-common%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Ftest-common%2Fpom.xml?ref=5ec815bb145306f0852c4eee33b0b68e074cafe7","patch":"@@ -10,7 +10,6 @@\n         <version>0.1-SNAPSHOT</version>\n     </parent>\n \n-    <groupId>org.syncope.identityconnectors</groupId>\n     <artifactId>test-common</artifactId>\n     \n     <name>IdentityConnectors: test-common</name>"}]}