{"sha":"d5ca7e9a2357377821e09a4cb361541a2c171dbe","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ1Y2E3ZTlhMjM1NzM3NzgyMWUwOWE0Y2IzNjE1NDFhMmMxNzFkYmU=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-06-21T10:37:07Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-06-21T10:37:07Z"},"message":"SYNCOPE-99 #comment recursive generation of NodCond used to fail\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1352492 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"269c429961552da424dcf4d59ca498fd308c550a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/269c429961552da424dcf4d59ca498fd308c550a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d5ca7e9a2357377821e09a4cb361541a2c171dbe","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d5ca7e9a2357377821e09a4cb361541a2c171dbe","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d5ca7e9a2357377821e09a4cb361541a2c171dbe","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d5ca7e9a2357377821e09a4cb361541a2c171dbe/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"034b1aa52174d1f3dc371f69bf640f057e740ded","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/034b1aa52174d1f3dc371f69bf640f057e740ded","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/034b1aa52174d1f3dc371f69bf640f057e740ded"}],"stats":{"total":49,"additions":29,"deletions":20},"files":[{"sha":"32a58f09fed49902fde6c67470a8dbc8877e5457","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/UserSearchPanel.java","status":"modified","additions":29,"deletions":20,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5ca7e9a2357377821e09a4cb361541a2c171dbe/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5ca7e9a2357377821e09a4cb361541a2c171dbe/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java?ref=d5ca7e9a2357377821e09a4cb361541a2c171dbe","patch":"@@ -72,8 +72,8 @@ public class UserSearchPanel extends Panel {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(UserSearchPanel.class);\n \n-    private List<String> ATTRIBUTES_NOTINCLUDED = Arrays.asList(new String[] { \"attributes\", \"derivedAttributes\",\n-            \"virtualAttributes\", \"serialVersionUID\", \"memberships\", \"resources\", \"password\", \"propagationStatusMap\" });\n+    private List<String> ATTRIBUTES_NOTINCLUDED = Arrays.asList(new String[]{\"attributes\", \"derivedAttributes\",\n+                \"virtualAttributes\", \"serialVersionUID\", \"memberships\", \"resources\", \"password\", \"propagationStatusMap\"});\n \n     @SpringBean\n     private SchemaRestClient schemaRestClient;\n@@ -224,7 +224,7 @@ public boolean accept(final FeedbackMessage message) {\n             searchConditionList = new ArrayList<SearchCondWrapper>();\n             searchConditionList.add(new SearchCondWrapper());\n         } else {\n-            searchConditionList = getSearchCondWrappers(initNodeCond);\n+            searchConditionList = getSearchCondWrappers(initNodeCond, null);\n         }\n         searchFormContainer.add(new SearchView(\"searchView\", searchConditionList, searchFormContainer));\n \n@@ -276,25 +276,36 @@ public FeedbackPanel getSearchFeedback() {\n         return searchFeedback;\n     }\n \n-    private List<SearchCondWrapper> getSearchCondWrappers(final NodeCond searchCond) {\n+    private List<SearchCondWrapper> getSearchCondWrappers(final NodeCond searchCond, final NodeCond.Type type) {\n         LOG.debug(\"Search condition: {}\", searchCond);\n \n         List<SearchCondWrapper> wrappers = new ArrayList<SearchCondWrapper>();\n \n         switch (searchCond.getType()) {\n             case LEAF:\n             case NOT_LEAF:\n-                wrappers.add(getSearchCondWrapper(searchCond));\n+                final SearchCondWrapper wrapper = getSearchCondWrapper(searchCond);\n+\n+                if (type != null) {\n+                    switch (type) {\n+                        case AND:\n+                            wrapper.setOperationType(OperationType.AND);\n+                            break;\n+                        case OR:\n+                            wrapper.setOperationType(OperationType.OR);\n+                            break;\n+                        default:\n+                        // nothing to specify\n+                    }\n+                }\n+\n+                wrappers.add(wrapper);\n                 break;\n \n             case AND:\n             case OR:\n-                wrappers.add(getSearchCondWrapper(searchCond.getLeftNodeCond()));\n-                SearchCondWrapper wrapper = getSearchCondWrapper(searchCond.getRightNodeCond());\n-                wrapper.setOperationType(searchCond.getType() == NodeCond.Type.AND\n-                        ? OperationType.AND\n-                        : OperationType.OR);\n-                wrappers.add(wrapper);\n+                wrappers.addAll(getSearchCondWrappers(searchCond.getLeftNodeCond(), type));\n+                wrappers.addAll(getSearchCondWrappers(searchCond.getRightNodeCond(), searchCond.getType()));\n                 break;\n \n             default:\n@@ -342,17 +353,15 @@ public NodeCond buildSearchCond() {\n     }\n \n     private NodeCond buildSearchCond(final List<SearchCondWrapper> conditions) {\n-        // inverse processing: from right to left\n-        // (OperationType is specified on the right)\n-        SearchCondWrapper searchConditionWrapper = conditions.get(conditions.size() - 1);\n+        SearchCondWrapper searchConditionWrapper = conditions.get(0);\n         if (searchConditionWrapper == null || searchConditionWrapper.getFilterType() == null) {\n             return null;\n         }\n \n         LOG.debug(\"Search conditions: fname {}; ftype {}; fvalue {}; OP {}; type {}; isnot {}\", new Object[] {\n-                searchConditionWrapper.getFilterName(), searchConditionWrapper.getFilterType(),\n-                searchConditionWrapper.getFilterValue(), searchConditionWrapper.getOperationType(),\n-                searchConditionWrapper.getType(), searchConditionWrapper.isNotOperator() });\n+                    searchConditionWrapper.getFilterName(), searchConditionWrapper.getFilterType(),\n+                    searchConditionWrapper.getFilterValue(), searchConditionWrapper.getOperationType(),\n+                    searchConditionWrapper.getType(), searchConditionWrapper.isNotOperator()});\n \n         NodeCond nodeCond = null;\n \n@@ -406,15 +415,15 @@ private NodeCond buildSearchCond(final List<SearchCondWrapper> conditions) {\n                 break;\n \n             default:\n-                // nothing to do\n+            // nothing to do\n         }\n \n         LOG.debug(\"Processed condition {}\", nodeCond);\n \n         if (conditions.size() > 1) {\n-            List<SearchCondWrapper> subList = conditions.subList(0, conditions.size() - 1);\n+            List<SearchCondWrapper> subList = conditions.subList(1, conditions.size());\n \n-            if (OperationType.OR.equals(searchConditionWrapper.getOperationType())) {\n+            if (OperationType.OR.equals(subList.get(0).getOperationType())) {\n                 nodeCond = NodeCond.getOrCond(nodeCond, buildSearchCond(subList));\n             } else {\n                 nodeCond = NodeCond.getAndCond(nodeCond, buildSearchCond(subList));"}]}