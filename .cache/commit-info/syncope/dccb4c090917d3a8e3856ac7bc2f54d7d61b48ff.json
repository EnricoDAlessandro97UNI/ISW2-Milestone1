{"sha":"dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRjY2I0YzA5MDkxN2QzYThlMzg1NmFjN2JjMmY1NGQ3ZDYxYjQ4ZmY=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-02-07T13:53:05Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-02-07T13:53:05Z"},"message":"Fix for SYNCOPE-258\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1443475 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4827b9d9f5b1d07a424a8499d5c2e578df989b5b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4827b9d9f5b1d07a424a8499d5c2e578df989b5b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"5055b87ff380f7a9e8e4f46d5a5351f96c4b55a2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5055b87ff380f7a9e8e4f46d5a5351f96c4b55a2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5055b87ff380f7a9e8e4f46d5a5351f96c4b55a2"}],"stats":{"total":230,"additions":209,"deletions":21},"files":[{"sha":"8881205462b56b2a2457cc8f7c036ca548bbe516","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/PolicyServiceProxy.java","status":"modified","additions":18,"deletions":2,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FPolicyServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FPolicyServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FPolicyServiceProxy.java?ref=dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff","patch":"@@ -20,16 +20,18 @@\n \r\n import java.net.URI;\r\n import java.util.Arrays;\r\n+import java.util.HashSet;\r\n import java.util.List;\r\n-\r\n+import java.util.Set;\r\n import javax.ws.rs.core.Response;\r\n-\r\n import org.apache.syncope.common.services.PolicyService;\r\n import org.apache.syncope.common.to.AccountPolicyTO;\r\n+import org.apache.syncope.common.to.CorrelationRuleClassTO;\r\n import org.apache.syncope.common.to.PasswordPolicyTO;\r\n import org.apache.syncope.common.to.PolicyTO;\r\n import org.apache.syncope.common.to.SyncPolicyTO;\r\n import org.apache.syncope.common.types.PolicyType;\r\n+import org.apache.syncope.common.util.CollectionWrapper;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n @SuppressWarnings(\"unchecked\")\r\n@@ -120,4 +122,18 @@ private String typeToUrl(final PolicyType type) {\n             return url;\r\n         }\r\n     }\r\n+\r\n+    @Override\r\n+    public Set<CorrelationRuleClassTO> getCorrelationRuleClasses(final PolicyType type) {\r\n+        switch (type) {\r\n+            case SYNC:\r\n+            case GLOBAL_SYNC:\r\n+                final Set<String> classes = new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(\r\n+                        baseUrl + \"policy/correlationRuleClasses.json\", String[].class)));\r\n+\r\n+                return CollectionWrapper.wrapCorrelationRuleClasses(classes);\r\n+            default:\r\n+                throw new IllegalArgumentException(\"Cannot retrieve correlation rule classes for type \" + type);\r\n+        }\r\n+    }\r\n }\r"},{"sha":"37ea8fbc4e7a267946df854a248819b6149a905b","filename":"common/src/main/java/org/apache/syncope/common/services/PolicyService.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java?ref=dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff","patch":"@@ -19,14 +19,15 @@\n package org.apache.syncope.common.services;\r\n \r\n import java.util.List;\r\n+import java.util.Set;\r\n import javax.ws.rs.DELETE;\r\n import javax.ws.rs.GET;\r\n import javax.ws.rs.POST;\r\n import javax.ws.rs.PUT;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n import javax.ws.rs.core.Response;\r\n-\r\n+import org.apache.syncope.common.to.CorrelationRuleClassTO;\r\n import org.apache.syncope.common.to.PolicyTO;\r\n import org.apache.syncope.common.types.PolicyType;\r\n \r\n@@ -83,4 +84,11 @@ public interface PolicyService {\n     <T extends PolicyTO> void update(@PathParam(\"type\") PolicyType type, @PathParam(\"policyId\") Long policyId,\r\n             T policyTO);\r\n \r\n+    /**\r\n+     * @param type PolicyType (just SYNC is supported).\r\n+     * @return Returns correlation rules java classes.\r\n+     */\r\n+    @GET\r\n+    @Path(\"correlationRuleClasses\")\r\n+    Set<CorrelationRuleClassTO> getCorrelationRuleClasses(@PathParam(\"type\") PolicyType type);\r\n }\r"},{"sha":"e339e357964a7025a24c9454dcf6699177c4e8e7","filename":"common/src/main/java/org/apache/syncope/common/to/CorrelationRuleClassTO.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FCorrelationRuleClassTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FCorrelationRuleClassTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FCorrelationRuleClassTO.java?ref=dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+@XmlRootElement(name = \"correlationRuleClass\")\r\n+@XmlType\r\n+public class CorrelationRuleClassTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -6715106427060816725L;\r\n+\r\n+    private String name;\r\n+\r\n+    public static CorrelationRuleClassTO instance(final String name) {\r\n+        CorrelationRuleClassTO instance = new CorrelationRuleClassTO();\r\n+        instance.setName(name);\r\n+        return instance;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the name\r\n+     */\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param name the name to set\r\n+     */\r\n+    public void setName(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r"},{"sha":"870f1f2912d61eab044f4a6732c0132562d561c6","filename":"common/src/main/java/org/apache/syncope/common/types/ConflictResolutionAction.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConflictResolutionAction.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConflictResolutionAction.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConflictResolutionAction.java?ref=dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff","patch":"@@ -23,12 +23,12 @@\n @XmlEnum\r\n public enum ConflictResolutionAction {\r\n \r\n+    // ignore sync\r\n+    IGNORE,\r\n     // sync first matcgh\r\n     FIRSTMATCH,\r\n     // sync last match\r\n     LASTMATCH,\r\n-    // ignore sync\r\n-    IGNORE,\r\n     // sync all\r\n     ALL;\r\n \r"},{"sha":"bfc0caa3106816278c02cadd9f9a27ba53260197","filename":"common/src/main/java/org/apache/syncope/common/util/CollectionWrapper.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java?ref=dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff","patch":"@@ -22,6 +22,7 @@\n import java.util.HashSet;\r\n import java.util.List;\r\n import java.util.Set;\r\n+import org.apache.syncope.common.to.CorrelationRuleClassTO;\r\n \r\n import org.apache.syncope.common.to.EntitlementTO;\r\n import org.apache.syncope.common.to.JobClassTO;\r\n@@ -186,6 +187,22 @@ public static List<String> unwrapPropagationActionClasses(Set<PropagationActionC\n         return respons;\r\n     }\r\n \r\n+    public static Set<CorrelationRuleClassTO> wrapCorrelationRuleClasses(Set<String> classes) {\r\n+        Set<CorrelationRuleClassTO> respons = new HashSet<CorrelationRuleClassTO>();\r\n+        for (String cl : classes) {\r\n+            respons.add(CorrelationRuleClassTO.instance(cl));\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static List<String> unwrapCorrelationRuleClasses(Set<CorrelationRuleClassTO> actions) {\r\n+        List<String> respons = new ArrayList<String>();\r\n+        for (CorrelationRuleClassTO e : actions) {\r\n+            respons.add(e.getName());\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n     @SuppressWarnings(\"unchecked\")\r\n     public static List<String> wrapStrings(final ModelAndView modelAndView) {\r\n         return (List<String>) modelAndView.getModel().values().iterator().next();\r"},{"sha":"21432016df0044607317823ab4f64e779364bae5","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/PolicyBeanPanel.java","status":"modified","additions":55,"deletions":6,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java?ref=dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff","patch":"@@ -25,11 +25,12 @@\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n+import org.apache.syncope.common.annotation.ClassList;\n import org.apache.syncope.common.annotation.SchemaList;\n import org.apache.syncope.common.types.AbstractPolicySpec;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.types.ConflictResolutionAction;\n import org.apache.syncope.console.markup.html.list.AltListView;\n+import org.apache.syncope.console.rest.PolicyRestClient;\n import org.apache.syncope.console.rest.SchemaRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.AbstractFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n@@ -67,6 +68,9 @@ public class PolicyBeanPanel extends Panel {\n     @SpringBean\n     private SchemaRestClient schemaRestClient;\n \n+    @SpringBean\n+    private PolicyRestClient policyRestClient;\n+\n     final IModel<List<String>> userSchemas = new LoadableDetachableModel<List<String>>() {\n \n         private static final long serialVersionUID = -2012833443695917883L;\n@@ -87,6 +91,14 @@ protected List<String> load() {\n         }\n     };\n \n+    final IModel<List<String>> correlationRules = new LoadableDetachableModel<List<String>>() {\n+\n+        @Override\n+        protected List<String> load() {\n+            return policyRestClient.getCorrelationRuleClasses();\n+        }\n+    };\n+\n     public PolicyBeanPanel(final String id, final AbstractPolicySpec policy) {\n         super(id);\n \n@@ -101,6 +113,9 @@ public PolicyBeanPanel(final String id, final AbstractPolicySpec policy) {\n                 final SchemaList schemaList = field.getAnnotation(SchemaList.class);\n                 fieldWrapper.setSchemaList(schemaList);\n \n+                final ClassList classList = field.getAnnotation(ClassList.class);\n+                fieldWrapper.setClassList(classList);\n+\n                 items.add(fieldWrapper);\n             }\n         }\n@@ -120,18 +135,41 @@ protected void populateItem(final ListItem<FieldWrapper> item) {\n \n                 final AbstractFieldPanel component;\n                 try {\n-                    if (field.getType().equals(ConflictResolutionAction.class)) {\n+                    if (field.getClassList() != null) {\n                         component = new AjaxDropDownChoicePanel(\"field\", field.getName(), new PropertyModel(policy,\n                                 field.getName()));\n \n-                        ((AjaxDropDownChoicePanel) component).setChoices(\n-                                Arrays.asList(ConflictResolutionAction.values()));\n+                        final List<String> rules = correlationRules.getObject();\n+\n+                        if (rules != null && !rules.isEmpty()) {\n+                            ((AjaxDropDownChoicePanel) component).setChoices(correlationRules.getObject());\n+                        }\n \n                         item.add(component);\n \n-                        item.add(getActivationControl(component,\n+                        item.add(getActivationControl(\n+                                component,\n+                                propDesc.getReadMethod().invoke(policy, new Object[]{}) != null,\n+                                null,\n+                                null));\n+\n+                    } else if (field.getType().isEnum()) {\n+                        component = new AjaxDropDownChoicePanel(\"field\", field.getName(), new PropertyModel(policy,\n+                                field.getName()));\n+\n+                        final Serializable[] values = (Serializable[]) field.getType().getEnumConstants();\n+\n+                        if (values != null && values.length > 0) {\n+                            ((AjaxDropDownChoicePanel) component).setChoices(Arrays.asList(values));\n+                        }\n+\n+                        item.add(component);\n+\n+                        item.add(getActivationControl(\n+                                component,\n                                 (Enum<?>) propDesc.getReadMethod().invoke(policy, new Object[]{}) != null,\n-                                ConflictResolutionAction.IGNORE, ConflictResolutionAction.IGNORE));\n+                                values[0],\n+                                values[0]));\n \n                     } else if (field.getType().equals(boolean.class) || field.getType().equals(Boolean.class)) {\n                         item.add(new AjaxCheckBoxPanel(\"check\", field.getName(), new PropertyModel(policy,\n@@ -158,6 +196,7 @@ protected void populateItem(final ListItem<FieldWrapper> item) {\n \n                             Collection collection =\n                                     (Collection) propDesc.getReadMethod().invoke(policy, new Object[]{});\n+\n                             if (collection == null) {\n                                 collection = new ArrayList();\n                                 propDesc.getWriteMethod().invoke(policy, collection);\n@@ -246,6 +285,8 @@ private static class FieldWrapper implements Serializable {\n \n         private transient SchemaList schemaList;\n \n+        private transient ClassList classList;\n+\n         public String getName() {\n             return name;\n         }\n@@ -269,5 +310,13 @@ public SchemaList getSchemaList() {\n         public void setSchemaList(final SchemaList schemaList) {\n             this.schemaList = schemaList;\n         }\n+\n+        public ClassList getClassList() {\n+            return classList;\n+        }\n+\n+        public void setClassList(ClassList classList) {\n+            this.classList = classList;\n+        }\n     }\n }"},{"sha":"49383d09a3c655c3449e3e5dd6b28fba23c10cff","filename":"console/src/main/java/org/apache/syncope/console/rest/PolicyRestClient.java","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java?ref=dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff","patch":"@@ -20,13 +20,14 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import org.apache.syncope.common.services.PolicyService;\n import org.apache.syncope.common.to.AccountPolicyTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n import org.apache.syncope.common.to.PolicyTO;\n import org.apache.syncope.common.to.SyncPolicyTO;\n import org.apache.syncope.common.types.PolicyType;\n+import org.apache.syncope.common.util.CollectionWrapper;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.springframework.stereotype.Component;\n \n /**\n@@ -85,6 +86,19 @@ public void delete(final Long id, final Class<? extends PolicyTO> policyClass) {\n         getService(PolicyService.class).delete(getPolicyType(policyClass), id);\n     }\n \n+    public List<String> getCorrelationRuleClasses() {\n+        List<String> rules = null;\n+\n+        try {\n+            rules = CollectionWrapper.unwrapCorrelationRuleClasses(\n+                    getService(PolicyService.class).getCorrelationRuleClasses(PolicyType.SYNC));\n+        } catch (Exception e) {\n+            LOG.error(\"While getting all correlation rule classes\", e);\n+        }\n+\n+        return rules;\n+    }\n+\n     private PolicyType getPolicyType(final Class<? extends PolicyTO> clazz) {\n         if (AccountPolicyTO.class.equals(clazz)) {\n             return PolicyType.ACCOUNT;"},{"sha":"20ee84b63314182ad201d33f3d36d1a3aa2854c7","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/PolicyController.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff","patch":"@@ -22,9 +22,7 @@\n import java.util.List;\n import java.util.Locale;\n import java.util.Set;\n-\n import javax.servlet.http.HttpServletResponse;\n-\n import org.apache.syncope.common.to.AccountPolicyTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n import org.apache.syncope.common.to.PolicyTO;\n@@ -264,12 +262,12 @@ public PolicyTO delete(@PathVariable(\"id\") final Long id)\n     @PreAuthorize(\"hasRole('POLICY_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/correlationRuleClasses\")\n     public ModelAndView getCorrelationRuleClasses() {\n-        final Set<String> actionsClasses =\n+        final Set<String> correlationRules =\n                 classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.SYNC_CORRELATION_RULES);\n \n         auditManager.audit(Category.policy, AuditElements.PolicySubCategory.getCorrelationRuleClasses,\n-                Result.success, \"Successfully listed all correlation rule classes: \" + actionsClasses.size());\n+                Result.success, \"Successfully listed all correlation rule classes: \" + correlationRules.size());\n \n-        return new ModelAndView().addObject(actionsClasses);\n+        return new ModelAndView().addObject(correlationRules);\n     }\n }"},{"sha":"65ef9c1e5b71d3d793c193135814fbbf214b3f8c","filename":"core/src/main/java/org/apache/syncope/core/services/PolicyServiceImpl.java","status":"modified","additions":19,"deletions":3,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java?ref=dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff","patch":"@@ -20,6 +20,7 @@\n \r\n import java.net.URI;\r\n import java.util.List;\r\n+import java.util.Set;\r\n \r\n import javax.ws.rs.BadRequestException;\r\n import javax.ws.rs.core.Response;\r\n@@ -31,7 +32,9 @@\n import org.apache.syncope.common.to.PasswordPolicyTO;\r\n import org.apache.syncope.common.to.PolicyTO;\r\n import org.apache.syncope.common.to.SyncPolicyTO;\r\n+import org.apache.syncope.common.to.CorrelationRuleClassTO;\r\n import org.apache.syncope.common.types.PolicyType;\r\n+import org.apache.syncope.common.util.CollectionWrapper;\r\n import org.apache.syncope.core.rest.controller.PolicyController;\r\n import org.springframework.beans.factory.annotation.Autowired;\r\n import org.springframework.stereotype.Service;\r\n@@ -48,9 +51,7 @@ public class PolicyServiceImpl implements PolicyService, ContextAware {\n     public <T extends PolicyTO> Response create(final PolicyType type, final T policyTO) {\r\n         PolicyTO policy = policyController.createInternal(policyTO);\r\n         URI location = uriInfo.getAbsolutePathBuilder().path(policy.getId() + \"\").build();\r\n-        return Response.created(location)\r\n-                .header(SyncopeConstants.REST_HEADER_ID, policy.getId())\r\n-                .build();\r\n+        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, policy.getId()).build();\r\n     }\r\n \r\n     @Override\r\n@@ -119,4 +120,19 @@ public void setUriInfo(final UriInfo ui) {\n         this.uriInfo = ui;\r\n     }\r\n \r\n+    @Override\r\n+    public Set<CorrelationRuleClassTO> getCorrelationRuleClasses(PolicyType type) {\r\n+        switch (type) {\r\n+            case SYNC:\r\n+            case GLOBAL_SYNC:\r\n+                \r\n+                @SuppressWarnings(\"unchecked\")\r\n+                final Set<String> classes =\r\n+                        (Set<String>) policyController.getCorrelationRuleClasses().getModel().values().iterator().next();\r\n+                return CollectionWrapper.wrapCorrelationRuleClasses(classes);\r\n+                \r\n+            default:\r\n+                throw new IllegalArgumentException(\"Cannot retrieve correlation rule classes for type \" + type);\r\n+        }\r\n+    }\r\n }\r"},{"sha":"38edbac85ae4da5918160aeb19f4b7a625f26d00","filename":"core/src/test/java/org/apache/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff","patch":"@@ -166,6 +166,11 @@ public void delete() {\n         assertNotNull(t);\n     }\n \n+    @Test\n+    public void getCorrelationRules() {\n+        assertEquals(1, policyService.getCorrelationRuleClasses(PolicyType.SYNC).size());\n+    }\n+\n     private SyncPolicyTO buildSyncPolicyTO() {\n         SyncPolicyTO policy = new SyncPolicyTO();\n "},{"sha":"1a085fa0b64a3fdfe4449552c34d1c06e1a3a40f","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff","patch":"@@ -48,11 +48,15 @@\n import org.apache.syncope.common.to.TaskTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.to.SyncPolicyTO;\n import org.apache.syncope.common.types.IntMappingType;\n+import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.types.SyncPolicySpec;\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.types.TraceLevel;\n import org.apache.syncope.core.sync.TestSyncActions;\n+import org.apache.syncope.core.sync.TestSyncRule;\n import org.apache.syncope.core.sync.impl.SyncJob;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -781,6 +785,15 @@ public void issueSYNCOPE272() {\n \n     @Test\n     public void issueSYNCOPE258() {\n+        // -----------------------------\n+        // Add a custom correlation rule\n+        // -----------------------------\n+        SyncPolicyTO policyTO = policyService.read(PolicyType.SYNC, 9L);\n+        ((SyncPolicySpec)policyTO.getSpecification()).setUserJavaRule(TestSyncRule.class.getName());\n+        \n+        policyService.update(PolicyType.SYNC, policyTO.getId(), policyTO);\n+        // -----------------------------\n+        \n         SyncTaskTO task = new SyncTaskTO();\n         task.setName(\"Test Sync Rule\");\n         task.setResource(\"ws-target-resource-2\");"},{"sha":"4fb231f9f9382aefb36e9b6c182ab527e25a2b38","filename":"core/src/test/resources/content.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=dccb4c090917d3a8e3856ac7bc2f54d7d61b48ff","patch":"@@ -40,7 +40,7 @@ under the License.\n   <Policy DTYPE=\"AccountPolicy\" id=\"6\" description=\"sample account policy\" type=\"ACCOUNT\" specification=\"%3Corg.apache.syncope.common.types.AccountPolicySpec%3E%0A++%3CmaxLength%3E0%3C%2FmaxLength%3E%0A++%3CminLength%3E4%3C%2FminLength%3E%0A++%3CprefixesNotPermitted%3E%0A++++%3Cstring%3Enotpermitted1%3C%2Fstring%3E%0A++++%3Cstring%3Enotpermitted2%3C%2Fstring%3E%0A++%3C%2FprefixesNotPermitted%3E%0A++%3CallUpperCase%3Efalse%3C%2FallUpperCase%3E%0A++%3CallLowerCase%3Efalse%3C%2FallLowerCase%3E%0A++%3CpropagateSuspension%3Efalse%3C%2FpropagateSuspension%3E%0A++%3CpermittedLoginRetries%3E3%3C%2FpermittedLoginRetries%3E%0A%3C%2Forg.apache.syncope.common.types.AccountPolicySpec%3E\"/>\n   <Policy DTYPE=\"SyncPolicy\" id=\"7\" description=\"sync policy 1\" type=\"SYNC\" specification=\"%3Corg.apache.syncope.common.types.SyncPolicySpec%2F%3E\"/>\n   <Policy DTYPE=\"PasswordPolicy\" id=\"8\" description=\"sample password policy\" type=\"PASSWORD\" specification=\"%3Corg.apache.syncope.common.types.PasswordPolicySpec%3E%0A++%3ChistoryLength%3E0%3C%2FhistoryLength%3E%0A++%3CmaxLength%3E0%3C%2FmaxLength%3E%0A++%3CminLength%3E10%3C%2FminLength%3E%0A++%3CnonAlphanumericRequired%3Etrue%3C%2FnonAlphanumericRequired%3E%0A++%3CalphanumericRequired%3Efalse%3C%2FalphanumericRequired%3E%0A++%3CdigitRequired%3Etrue%3C%2FdigitRequired%3E%0A++%3ClowercaseRequired%3Etrue%3C%2FlowercaseRequired%3E%0A++%3CuppercaseRequired%3Etrue%3C%2FuppercaseRequired%3E%0A++%3CmustStartWithDigit%3Etrue%3C%2FmustStartWithDigit%3E%0A++%3CmustntStartWithDigit%3Efalse%3C%2FmustntStartWithDigit%3E%0A++%3CmustEndWithDigit%3Etrue%3C%2FmustEndWithDigit%3E%0A++%3CmustntEndWithDigit%3Efalse%3C%2FmustntEndWithDigit%3E%0A++%3CmustStartWithNonAlpha%3Efalse%3C%2FmustStartWithNonAlpha%3E%0A++%3CmustStartWithAlpha%3Efalse%3C%2FmustStartWithAlpha%3E%0A++%3CmustntStartWithNonAlpha%3Efalse%3C%2FmustntStartWithNonAlpha%3E%0A++%3CmustntStartWithAlpha%3Efalse%3C%2FmustntStartWithAlpha%3E%0A++%3CmustEndWithNonAlpha%3Efalse%3C%2FmustEndWithNonAlpha%3E%0A++%3CmustEndWithAlpha%3Efalse%3C%2FmustEndWithAlpha%3E%0A++%3CmustntEndWithNonAlpha%3Efalse%3C%2FmustntEndWithNonAlpha%3E%0A++%3CmustntEndWithAlpha%3Efalse%3C%2FmustntEndWithAlpha%3E%0A++%3CprefixesNotPermitted%3E%0A++++%3Cstring%3Enotpermitted1%3C%2Fstring%3E%0A++++%3Cstring%3Enotpermitted2%3C%2Fstring%3E%0A++%3C%2FprefixesNotPermitted%3E%0A%3C%2Forg.apache.syncope.common.types.PasswordPolicySpec%3E\"/>\n-  <Policy DTYPE=\"SyncPolicy\" id=\"9\" description=\"sync policy with a rule\" type=\"SYNC\" specification=\"%3Corg.apache.syncope.common.types.SyncPolicySpec%3E%0A++%3CuserJavaRule%3Eorg.apache.syncope.core.sync.TestSyncRule%3C/userJavaRule%3E%0A++%3CroleJavaRule%3E%3C/roleJavaRule%3E%0A++%3CconflictResolutionAction%3EIGNORE%3C/conflictResolutionAction%3E%0A%3C/org.apache.syncope.common.types.SyncPolicySpec%3E\"/>\n+  <Policy DTYPE=\"SyncPolicy\" id=\"9\" description=\"sync policy for java rule\" type=\"SYNC\" specification=\"%3Corg.apache.syncope.common.types.SyncPolicySpec%3E%0A++%3CconflictResolutionAction%3EIGNORE%3C/conflictResolutionAction%3E%0A%3C/org.apache.syncope.common.types.SyncPolicySpec%3E\"/>\n     \n   <SyncopeUser id=\"1\" workflowId=\"0\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n                username=\"user1\" creationDate=\"2010-10-20 11:00:00\" suspended=\"0\"/>"}]}