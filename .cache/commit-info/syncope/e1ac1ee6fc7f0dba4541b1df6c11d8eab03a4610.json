{"sha":"e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmUxYWMxZWU2ZmM3ZjBkYmE0NTQxYjFkZjZjMTFkOGVhYjAzYTQ2MTA=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-10-25T16:17:52Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-10-25T16:17:52Z"},"message":"[SYNCOPE-225] All features implemented in core, now it's time to update the admin console\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1402206 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3c2de9dbef04597b7357592c1ce5aa568faf9218","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3c2de9dbef04597b7357592c1ce5aa568faf9218"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0746e03a0b2e81ec25db9d7464c09c70b260f618","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0746e03a0b2e81ec25db9d7464c09c70b260f618","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0746e03a0b2e81ec25db9d7464c09c70b260f618"}],"stats":{"total":1023,"additions":663,"deletions":360},"files":[{"sha":"1073dce65fa0e8a4c140c941e91b34ddb07387f8","filename":"build-tools/src/main/resources/org/apache/syncope/pmd.xml","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/build-tools%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fpmd.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/build-tools%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fpmd.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fpmd.xml?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -32,14 +32,17 @@ under the License.\n   <rule ref=\"rulesets/unusedcode.xml\"/>\n   <rule ref=\"rulesets/design.xml\"/>\n   <rule ref=\"rulesets/imports.xml\"/>\n-  <rule ref=\"rulesets/strings.xml\"/>\n+  <rule ref=\"rulesets/strings.xml\">\n+    <exclude name=\"AvoidDuplicateLiterals\"/>\n+  </rule>\n   <rule ref=\"rulesets/codesize.xml\"/>\n   <rule ref=\"rulesets/javabeans.xml\">\n     <exclude name=\"BeanMembersShouldSerialize\"/>\n   </rule>\n   <rule ref=\"rulesets/coupling.xml\"/>\n   <rule ref=\"rulesets/controversial.xml\">\n     <exclude name=\"NullAssignment\"/>\n+    <exclude name=\"DataflowAnomalyAnalysis\"/>\n   </rule>\n   <rule ref=\"rulesets/strictexception.xml\"/>\n   <rule ref=\"rulesets/typeresolution.xml\"/>"},{"sha":"1a7ad1999103c9b4d7552f0220dde905c9c19ab4","filename":"client/src/main/java/org/apache/syncope/client/mod/RoleMod.java","status":"modified","additions":36,"deletions":24,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fmod%2FRoleMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fmod%2FRoleMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fmod%2FRoleMod.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.mod;\n \n-import java.util.ArrayList;\n import java.util.List;\n import org.codehaus.jackson.annotate.JsonIgnore;\n \n@@ -28,6 +27,12 @@ public class RoleMod extends AbstractAttributableMod {\n \n     private String name;\n \n+    private ReferenceMod userOwner;\n+\n+    private ReferenceMod roleOwner;\n+\n+    private Boolean inheritOwner;\n+\n     private Boolean inheritAttributes;\n \n     private Boolean inheritDerivedAttributes;\n@@ -44,10 +49,36 @@ public class RoleMod extends AbstractAttributableMod {\n \n     private ReferenceMod accountPolicy;\n \n-    public RoleMod() {\n-        super();\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    public ReferenceMod getUserOwner() {\n+        return userOwner;\n+    }\n+\n+    public void setUserOwner(ReferenceMod userOwner) {\n+        this.userOwner = userOwner;\n+    }\n+\n+    public ReferenceMod getRoleOwner() {\n+        return roleOwner;\n+    }\n+\n+    public void setRoleOwner(ReferenceMod roleOwner) {\n+        this.roleOwner = roleOwner;\n+    }\n+\n+    public Boolean getInheritOwner() {\n+        return inheritOwner;\n+    }\n \n-        entitlements = new ArrayList<String>();\n+    public void setInheritOwner(Boolean inheritOwner) {\n+        this.inheritOwner = inheritOwner;\n     }\n \n     public Boolean getInheritAttributes() {\n@@ -74,31 +105,12 @@ public void setInheritVirtualAttributes(final Boolean inheritVirtualAttributes)\n         this.inheritVirtualAttributes = inheritVirtualAttributes;\n     }\n \n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(final String name) {\n-        this.name = name;\n-    }\n-\n-    public boolean addEntitlement(final String entitlement) {\n-        return entitlements.add(entitlement);\n-    }\n-\n-    public boolean removeEntitlement(final String entitlement) {\n-        return entitlements.remove(entitlement);\n-    }\n-\n     public List<String> getEntitlements() {\n         return entitlements;\n     }\n \n     public void setEntitlements(final List<String> entitlements) {\n-        this.entitlements.clear();\n-        if (entitlements != null && !entitlements.isEmpty()) {\n-            this.entitlements.addAll(entitlements);\n-        }\n+        this.entitlements = entitlements;\n     }\n \n     public ReferenceMod getPasswordPolicy() {"},{"sha":"652bbed95c08a7b36d6cd6d7f5ec5b9b9bc0a91f","filename":"client/src/main/java/org/apache/syncope/client/to/RoleTO.java","status":"modified","additions":31,"deletions":1,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FRoleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FRoleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FRoleTO.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -22,7 +22,7 @@\n import java.util.List;\n import org.codehaus.jackson.annotate.JsonIgnoreProperties;\n \n-@JsonIgnoreProperties( { \"displayName\", \"empty\" })\n+@JsonIgnoreProperties({\"displayName\", \"empty\"})\n public class RoleTO extends AbstractAttributableTO {\n \n     private static final long serialVersionUID = -7785920258290147542L;\n@@ -31,6 +31,12 @@ public class RoleTO extends AbstractAttributableTO {\n \n     private long parent;\n \n+    private Long userOwner;\n+\n+    private Long roleOwner;\n+\n+    private boolean inheritOwner;\n+\n     private boolean inheritAttributes;\n \n     private boolean inheritDerivedAttributes;\n@@ -67,6 +73,30 @@ public void setParent(final long parent) {\n         this.parent = parent;\n     }\n \n+    public Long getUserOwner() {\n+        return userOwner;\n+    }\n+\n+    public void setUserOwner(final Long userOwner) {\n+        this.userOwner = userOwner;\n+    }\n+\n+    public Long getRoleOwner() {\n+        return roleOwner;\n+    }\n+\n+    public void setRoleOwner(final Long roleOwner) {\n+        this.roleOwner = roleOwner;\n+    }\n+\n+    public boolean isInheritOwner() {\n+        return inheritOwner;\n+    }\n+\n+    public void setInheritOwner(final boolean inheritOwner) {\n+        this.inheritOwner = inheritOwner;\n+    }\n+\n     public boolean isInheritAttributes() {\n         return inheritAttributes;\n     }"},{"sha":"4dcdc0feb3a225bcaf462df8c289ffb4d2947daa","filename":"client/src/main/java/org/apache/syncope/client/util/AttributableOperations.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Futil%2FAttributableOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Futil%2FAttributableOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Futil%2FAttributableOperations.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -306,7 +306,9 @@ public static RoleMod diff(final RoleTO updated, final RoleTO original) {\n         // 4. entitlements\n         Set<String> updatedEnts = new HashSet<String>(updated.getEntitlements());\n         Set<String> originalEnts = new HashSet<String>(original.getEntitlements());\n-        if (!updatedEnts.equals(originalEnts)) {\n+        if (updatedEnts.equals(originalEnts)) {\n+            result.setEntitlements(null);\n+        } else {\n             result.setEntitlements(updated.getEntitlements());\n         }\n "},{"sha":"9387398387683b76ddbd38d4cab939d3b8ab7306","filename":"client/src/main/java/org/apache/syncope/types/EntityViolationType.java","status":"modified","additions":27,"deletions":27,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FEntityViolationType.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -21,34 +21,34 @@\n public enum EntityViolationType {\n \n     Standard(\"\"),\n+    InvalidAccountPolicy(\"org.apache.syncope.core.validation.accountpolicy\"),\n+    InvalidEntitlementName(\"org.apache.syncope.core.validation.entitlement.name\"),\n+    InvalidMSchema(\"org.apache.syncope.core.validation.attrvalue.mSchema\"),\n+    InvalidMDerSchema(\"org.apache.syncope.core.validation.attrvalue.mDerSchema\"),\n+    InvalidMVirSchema(\"org.apache.syncope.core.validation.attrvalue.mVirSchema\"),\n+    InvalidNotification(\"org.apache.syncope.core.validation.notification\"),\n+    InvalidPassword(\"org.apache.syncope.core.validation.syncopeuser.password\"),\n+    InvalidPasswordPolicy(\"org.apache.syncope.core.validation.passwordpolicy\"),\n+    InvalidPolicy(\"org.apache.syncope.core.validation.policy\"),\n+    InvalidPropagationTask(\"org.apache.syncope.core.validation.propagationtask\"),\n+    InvalidRSchema(\"org.apache.syncope.core.validation.attrvalue.rSchema\"),\n+    InvalidRDerSchema(\"org.apache.syncope.core.validation.attrvalue.rDerSchema\"),\n+    InvalidRVirSchema(\"org.apache.syncope.core.validation.attrvalue.rVirSchema\"),\n+    InvalidReport(\"org.apache.syncope.core.validation.report\"),\n+    InvalidResource(\"org.apache.syncope.core.validation.externalresource\"),\n+    InvalidRoleOwner(\"org.apache.syncope.core.validation.syncoperole.owner\"),\n+    InvalidSchemaTypeSpecification(\"org.apache.syncope.core.validation.attrvalue.schemaTypeSpecification\"),\n+    InvalidSchedTask(\"org.apache.syncope.core.validation.schedtask\"),\n+    InvalidSyncTask(\"org.apache.syncope.core.validation.synctask\"),\n+    InvalidSchemaMapping(\"org.apache.syncope.core.validation.mapping\"),\n+    InvalidSyncPolicy(\"org.apache.syncope.core.validation.syncpolicy\"),\n+    InvalidUSchema(\"org.apache.syncope.core.validation.attrvalue.uSchema\"),\n+    InvalidUDerSchema(\"org.apache.syncope.core.validation.attrvalue.derSchema\"),\n+    InvalidUVirSchema(\"org.apache.syncope.core.validation.attrvalue.uVirSchema\"),\n+    InvalidUsername(\"org.apache.syncope.core.validation.syncopeuser.username\"),\n+    InvalidValueList(\"org.apache.syncope.core.validation.attr.valueList\"),\n     MultivalueAndUniqueConstraint(\"org.apache.syncope.core.validation.schema.multivalueAndUniqueConstraint\"),\n-    MoreThanOneNonNull(\"org.apache.syncope.core.validation.attrvalue.moreThanOneNonNull\"),\n-    InvalidUSchema(\"org.apache.syncope.core.validation.attrvalue.invalidUSchema\"),\n-    InvalidUDerSchema(\"org.apache.syncope.core.validation.attrvalue.invalidUDerSchema\"),\n-    InvalidUVirSchema(\"org.apache.syncope.core.validation.attrvalue.invalidUVirSchema\"),\n-    InvalidRSchema(\"org.apache.syncope.core.validation.attrvalue.invalidRSchema\"),\n-    InvalidRDerSchema(\"org.apache.syncope.core.validation.attrvalue.invalidRDerSchema\"),\n-    InvalidRVirSchema(\"org.apache.syncope.core.validation.attrvalue.invalidRVirSchema\"),\n-    InvalidMSchema(\"org.apache.syncope.core.validation.attrvalue.invalidMSchema\"),\n-    InvalidMDerSchema(\"org.apache.syncope.core.validation.attrvalue.invalidMDerSchema\"),\n-    InvalidMVirSchema(\"org.apache.syncope.core.validation.attrvalue.invalidMVirSchema\"),\n-    InvalidSchemaTypeSpecification(\"org.apache.syncope.core.validation.attrvalue.invalidSchemaTypeSpecification\"),\n-    InvalidValueList(\"org.apache.syncope.core.validation.attr.invalidValueList\"),\n-    InvalidEntitlementName(\"org.apache.syncope.core.validation.entitlement.invalidName\"),\n-    InvalidPropagationTask(\"org.apache.syncope.core.validation.propagationtask.invalid\"),\n-    InvalidResource(\"org.apache.syncope.core.validation.externalresource.invalid\"),\n-    InvalidSchedTask(\"org.apache.syncope.core.validation.schedtask.invalid\"),\n-    InvalidSyncTask(\"org.apache.syncope.core.validation.synctask.invalid\"),\n-    InvalidPassword(\"org.apache.syncope.core.validation.password.invalid\"),\n-    InvalidUsername(\"org.apache.syncope.core.validation.username.invalid\"),\n-    // not throwable using rest interface because the TO is typed\n-    InvalidPolicy(\"org.apache.syncope.core.validation.policy.invalid\"),\n-    InvalidPasswordPolicy(\"org.apache.syncope.core.validation.policy.invalid\"),\n-    InvalidAccountPolicy(\"org.apache.syncope.core.validation.policy.invalid\"),\n-    InvalidSyncPolicy(\"org.apache.syncope.core.validation.policy.invalid\"),\n-    InvalidNotification(\"org.apache.syncope.core.validation.notification.invalid\"),\n-    InvalidReport(\"org.apache.syncope.core.validation.report.invalid\"),\n-    InvalidSchemaMapping(\"org.apache.syncope.core.validation.mapping.invalid\");\n+    MoreThanOneNonNull(\"org.apache.syncope.core.validation.attrvalue.moreThanOneNonNull\");\n \n     private String message;\n "},{"sha":"6148da16a176778782a6c57553493a4cb2f8ea1c","filename":"core/pom.xml","status":"modified","additions":0,"deletions":76,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -415,43 +415,6 @@ under the License.\n         </executions>\n       </plugin>\n \n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-surefire-plugin</artifactId>\n-        <inherited>true</inherited>\n-        <configuration>\n-          <skip>true</skip>\n-        </configuration>\n-        <executions>\n-          <execution>\n-            <id>test-phase-execution</id>\n-            <phase>test</phase>\n-            <goals>\n-              <goal>test</goal>\n-            </goals>\n-            <configuration>\n-              <skip>false</skip>\n-              <excludes>\n-                <exclude>**/relationships/**Test.java</exclude>\n-              </excludes>\n-            </configuration>\n-          </execution>\n-          <execution>\n-            <id>relationship-test-execution</id>\n-            <phase>test</phase>\n-            <goals>\n-              <goal>test</goal>\n-            </goals>\n-            <configuration>\n-              <skip>false</skip>\n-              <includes>\n-                <include>**/relationships/**Test.java</include>\n-              </includes>\n-            </configuration>\n-          </execution>\n-        </executions>\n-      </plugin>\n-\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-failsafe-plugin</artifactId>\n@@ -718,7 +681,6 @@ under the License.\n       <id>dev</id>\n       <properties>\n         <waitForCheck>true</waitForCheck>\n-        <sureExcludes>**</sureExcludes>\n         <javaagent />\n       </properties>\n       <build>\n@@ -732,44 +694,6 @@ under the License.\n             <configuration>\n               <skip>true</skip>\n             </configuration>\n-            <executions>\n-              <execution>\n-                <id>test-phase-execution</id>\n-                <phase>test</phase>\n-                <goals>\n-                  <goal>test</goal>\n-                </goals>\n-                <configuration>\n-                  <skip>false</skip>\n-                  <includes>\n-                    <include>**/dao/**Test.java</include>\n-                    <include>**/security/**Test.java</include>\n-                  </includes>\n-                  <excludes>\n-                    <exclude>**/relationships/**Test.java</exclude>\n-                    <exclude>${sureExcludes}</exclude>\n-                  </excludes>\n-                </configuration>\n-              </execution>\n-              <execution>\n-                <id>relationship-test-execution</id>\n-                <phase>test</phase>\n-                <goals>\n-                  <goal>test</goal>\n-                </goals>\n-                <configuration>\n-                  <skip>false</skip>\n-                  <includes>\n-                    <include>**/relationships/**Test.java</include>\n-                  </includes>\n-                  <excludes>\n-                    <exclude>**/dao/**Test.java</exclude>\n-                    <exclude>**/security/**Test.java</exclude>\n-                    <exclude>${sureExcludes}</exclude>\n-                  </excludes>\n-                </configuration>\n-              </execution>\n-            </executions>\n           </plugin>\n \n           <plugin>"},{"sha":"58c4b37cb841d0129a1207d586fac434234d4248","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -53,11 +53,14 @@\n import org.apache.syncope.core.persistence.beans.Entitlement;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.persistence.validation.entity.SyncopeRoleCheck;\n \n @Entity\n @Table(uniqueConstraints =\n @UniqueConstraint(columnNames = {\"name\", \"parent_id\"}))\n @Cacheable\n+@SyncopeRoleCheck\n public class SyncopeRole extends AbstractAttributable {\n \n     private static final long serialVersionUID = -5281258853142421875L;\n@@ -71,6 +74,12 @@ public class SyncopeRole extends AbstractAttributable {\n     @ManyToOne(optional = true)\n     private SyncopeRole parent;\n \n+    @ManyToOne(optional = true)\n+    private SyncopeUser userOwner;\n+\n+    @ManyToOne(optional = true)\n+    private SyncopeRole roleOwner;\n+\n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(joinColumns =\n     @JoinColumn(name = \"role_id\"),\n@@ -90,6 +99,11 @@ public class SyncopeRole extends AbstractAttributable {\n     @Valid\n     private List<RVirAttr> virtualAttributes;\n \n+    @Basic(optional = true)\n+    @Min(0)\n+    @Max(1)\n+    private Integer inheritOwner;\n+\n     @Basic(optional = true)\n     @Min(0)\n     @Max(1)\n@@ -139,6 +153,7 @@ public SyncopeRole() {\n         attributes = new ArrayList<RAttr>();\n         derivedAttributes = new ArrayList<RDerAttr>();\n         virtualAttributes = new ArrayList<RVirAttr>();\n+        inheritOwner = getBooleanAsInteger(false);\n         inheritAttributes = getBooleanAsInteger(false);\n         inheritDerivedAttributes = getBooleanAsInteger(false);\n         inheritVirtualAttributes = getBooleanAsInteger(false);\n@@ -173,6 +188,30 @@ public void setParent(final SyncopeRole parent) {\n         this.parent = parent;\n     }\n \n+    public boolean isInheritOwner() {\n+        return isBooleanAsInteger(inheritOwner);\n+    }\n+\n+    public void setInheritOwner(final boolean inheritOwner) {\n+        this.inheritOwner = getBooleanAsInteger(inheritOwner);\n+    }\n+\n+    public SyncopeUser getUserOwner() {\n+        return userOwner;\n+    }\n+\n+    public void setUserOwner(final SyncopeUser userOwner) {\n+        this.userOwner = userOwner;\n+    }\n+\n+    public SyncopeRole getRoleOwner() {\n+        return roleOwner;\n+    }\n+\n+    public void setRoleOwner(final SyncopeRole roleOwner) {\n+        this.roleOwner = roleOwner;\n+    }\n+\n     public boolean addEntitlement(final Entitlement entitlement) {\n         return entitlements.add(entitlement);\n     }"},{"sha":"0090160f046f9019583acd9092cf2879c447efc1","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/RoleDAO.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleDAO.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -23,6 +23,7 @@\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.membership.Membership;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n public interface RoleDAO extends DAO {\n@@ -33,13 +34,15 @@ public interface RoleDAO extends DAO {\n \n     SyncopeRole find(String name, Long parent);\n \n+    List<SyncopeRole> findOwned(SyncopeUser owner);\n+\n     List<SyncopeRole> findByEntitlement(final Entitlement entitlement);\n \n     List<SyncopeRole> findByResource(ExternalResource resource);\n \n     List<SyncopeRole> findAncestors(SyncopeRole role);\n \n-    List<SyncopeRole> findChildren(Long roleId);\n+    List<SyncopeRole> findChildren(SyncopeRole role);\n \n     List<SyncopeRole> findDescendants(SyncopeRole role);\n "},{"sha":"f66e4988bcbb97b8336b02fb6e3cf66330536364","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/RoleDAOImpl.java","status":"modified","additions":41,"deletions":4,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -27,6 +27,7 @@\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.membership.Membership;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n@@ -85,6 +86,40 @@ public SyncopeRole find(final String name, final Long parentId) {\n                 : result.get(0);\n     }\n \n+    private void findSameOwnerDescendants(final List<SyncopeRole> result, final SyncopeRole role) {\n+        List<SyncopeRole> children = findChildren(role);\n+        if (children != null) {\n+            for (SyncopeRole child : children) {\n+                if ((child.getUserOwner() == null && child.getRoleOwner() == null && child.isInheritOwner())\n+                        || (child.getUserOwner() != null && child.getUserOwner().equals(role.getUserOwner()))\n+                        || (child.getRoleOwner() != null && child.getRoleOwner().equals(role.getRoleOwner()))) {\n+\n+                    findDescendants(result, child);\n+                }\n+            }\n+        }\n+        result.add(role);\n+    }\n+\n+    @Override\n+    public List<SyncopeRole> findOwned(final SyncopeUser owner) {\n+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(SyncopeRole.class.getSimpleName()).\n+                append(\" e WHERE e.userOwner=:owner \");\n+        for (Long roleId : owner.getRoleIds()) {\n+            queryString.append(\"OR e.roleOwner.id=\").append(roleId).append(' ');\n+        }\n+\n+        Query query = entityManager.createQuery(queryString.toString());\n+        query.setParameter(\"owner\", owner);\n+\n+        List<SyncopeRole> result = new ArrayList<SyncopeRole>();\n+        for (SyncopeRole role : (List<SyncopeRole>) query.getResultList()) {\n+            findSameOwnerDescendants(result, role);\n+        }\n+\n+        return result;\n+    }\n+\n     @Override\n     public List<SyncopeRole> findByEntitlement(final Entitlement entitlement) {\n         Query query = entityManager.createQuery(\"SELECT e FROM \" + SyncopeRole.class.getSimpleName() + \" e \"\n@@ -118,14 +153,14 @@ public List<SyncopeRole> findAncestors(final SyncopeRole role) {\n     }\n \n     @Override\n-    public List<SyncopeRole> findChildren(final Long roleId) {\n-        Query query = entityManager.createQuery(\"SELECT r FROM SyncopeRole r WHERE \" + \"r.parent.id=:roleId\");\n-        query.setParameter(\"roleId\", roleId);\n+    public List<SyncopeRole> findChildren(final SyncopeRole role) {\n+        Query query = entityManager.createQuery(\"SELECT r FROM SyncopeRole r WHERE \" + \"r.parent=:role\");\n+        query.setParameter(\"role\", role);\n         return query.getResultList();\n     }\n \n     private void findDescendants(final List<SyncopeRole> result, final SyncopeRole role) {\n-        List<SyncopeRole> children = findChildren(role.getId());\n+        List<SyncopeRole> children = findChildren(role);\n         if (children != null) {\n             for (SyncopeRole child : children) {\n                 findDescendants(result, child);\n@@ -192,6 +227,8 @@ public void delete(final Long id) {\n             roleToBeDeleted.getEntitlements().clear();\n \n             roleToBeDeleted.setParent(null);\n+            roleToBeDeleted.setUserOwner(null);\n+            roleToBeDeleted.setRoleOwner(null);\n             entityManager.remove(roleToBeDeleted);\n \n             entitlementDAO.delete(EntitlementUtil.getEntitlementNameFromRoleId(roleToBeDeleted.getId()));"},{"sha":"a9f0d022f0122321e8c8e9191a5b6cc0d764497c","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SyncopeRoleCheck.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeRoleCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeRoleCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeRoleCheck.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({ElementType.TYPE})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = SyncopeRoleValidator.class)\n+@Documented\n+public @interface SyncopeRoleCheck {\n+\n+    String message() default \"{org.apache.syncope.core.validation.syncoperole}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"c295d61a6de91fa01b3a1d79cb90c665bfe6c042","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SyncopeRoleValidator.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeRoleValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeRoleValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeRoleValidator.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.validation.entity;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.apache.syncope.types.EntityViolationType;\n+\n+public class SyncopeRoleValidator extends AbstractValidator implements\n+        ConstraintValidator<SyncopeRoleCheck, SyncopeRole> {\n+\n+    @Override\n+    public void initialize(final SyncopeRoleCheck constraintAnnotation) {\n+    }\n+\n+    @Override\n+    public boolean isValid(final SyncopeRole object, final ConstraintValidatorContext context) {\n+        context.disableDefaultConstraintViolation();\n+\n+        boolean isValid = true;\n+\n+        if (object.getUserOwner() != null && object.getRoleOwner() != null) {\n+            isValid = false;\n+\n+            context.buildConstraintViolationWithTemplate(\"A role must either be owned by an user or a role, not both\").\n+                    addNode(EntityViolationType.InvalidRoleOwner.toString()).addConstraintViolation();\n+        }\n+\n+        return isValid;\n+    }\n+}"},{"sha":"f38dbcbc763788f81a51cfac9a6a6734a7167490","filename":"core/src/main/java/org/apache/syncope/core/policy/PasswordPolicyEnforcer.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -147,47 +147,47 @@ public void enforce(final PasswordPolicySpec policy, final PolicyType type, fina\n         }\n     }\n \n-    private boolean checkForDigit(String str) {\n-        return PolicyPattern.DIGIT.matcher((CharSequence) str).matches();\n+    private boolean checkForDigit(final String str) {\n+        return PolicyPattern.DIGIT.matcher(str).matches();\n     }\n \n-    private boolean checkForLowercase(String str) {\n-        return PolicyPattern.ALPHA_LOWERCASE.matcher((CharSequence) str).matches();\n+    private boolean checkForLowercase(final String str) {\n+        return PolicyPattern.ALPHA_LOWERCASE.matcher(str).matches();\n     }\n \n-    private boolean checkForUppercase(String str) {\n-        return PolicyPattern.ALPHA_UPPERCASE.matcher((CharSequence) str).matches();\n+    private boolean checkForUppercase(final String str) {\n+        return PolicyPattern.ALPHA_UPPERCASE.matcher(str).matches();\n     }\n \n-    private boolean checkForFirstDigit(String str) {\n-        return PolicyPattern.FIRST_DIGIT.matcher((CharSequence) str).matches();\n+    private boolean checkForFirstDigit(final String str) {\n+        return PolicyPattern.FIRST_DIGIT.matcher(str).matches();\n     }\n \n-    private boolean checkForLastDigit(String str) {\n-        return PolicyPattern.LAST_DIGIT.matcher((CharSequence) str).matches();\n+    private boolean checkForLastDigit(final String str) {\n+        return PolicyPattern.LAST_DIGIT.matcher(str).matches();\n     }\n \n-    private boolean checkForAlphanumeric(String str) {\n+    private boolean checkForAlphanumeric(final String str) {\n         return PolicyPattern.ALPHANUMERIC.matcher(str).matches();\n     }\n \n-    private boolean checkForFirstAlphanumeric(String str) {\n+    private boolean checkForFirstAlphanumeric(final String str) {\n         return PolicyPattern.FIRST_ALPHANUMERIC.matcher(str).matches();\n     }\n \n-    private boolean checkForLastAlphanumeric(String str) {\n+    private boolean checkForLastAlphanumeric(final String str) {\n         return PolicyPattern.LAST_ALPHANUMERIC.matcher(str).matches();\n     }\n \n-    private boolean checkForNonAlphanumeric(String str) {\n+    private boolean checkForNonAlphanumeric(final String str) {\n         return PolicyPattern.NON_ALPHANUMERIC.matcher(str).matches();\n     }\n \n-    private boolean checkForFirstNonAlphanumeric(String str) {\n+    private boolean checkForFirstNonAlphanumeric(final String str) {\n         return PolicyPattern.FIRST_NON_ALPHANUMERIC.matcher(str).matches();\n     }\n \n-    private boolean checkForLastNonAlphanumeric(String str) {\n+    private boolean checkForLastNonAlphanumeric(final String str) {\n         return PolicyPattern.LAST_NON_ALPHANUMERIC.matcher(str).matches();\n     }\n }"},{"sha":"89e33ef19acc1083aec495c7f53ad5e560a2fd34","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/AuthenticationController.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAuthenticationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAuthenticationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAuthenticationController.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -21,17 +21,17 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Set;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.Entitlement;\n import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.apache.syncope.types.AuditElements.AuthenticationSubCategory;\n import org.apache.syncope.types.AuditElements.Category;\n import org.apache.syncope.types.AuditElements.Result;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n \n @Controller\n @RequestMapping(\"/auth\")"},{"sha":"59506e3429302523fe2b25a87d4e78ef036dc63c","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RoleController.java","status":"modified","additions":84,"deletions":98,"changes":182,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -60,66 +60,51 @@ public class RoleController extends AbstractController {\n     private UserDAO userDAO;\n \n     @Autowired\n-    private RoleDataBinder roleDataBinder;\n+    private RoleDataBinder dataBinder;\n \n-    @PreAuthorize(\"hasRole('ROLE_CREATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n-    public RoleTO create(final HttpServletResponse response, @RequestBody final RoleTO roleTO)\n-            throws SyncopeClientCompositeErrorException, UnauthorizedRoleException {\n+    @PreAuthorize(\"hasRole('ROLE_READ')\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/read/{roleId}\")\n+    @Transactional(readOnly = true)\n+    public RoleTO read(@PathVariable(\"roleId\") final Long roleId)\n+            throws NotFoundException, UnauthorizedRoleException {\n \n-        LOG.debug(\"Role create called with parameters {}\", roleTO);\n+        SyncopeRole role = dataBinder.getSyncopeRole(roleId);\n \n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n-        if (roleTO.getParent() != 0 && !allowedRoleIds.contains(roleTO.getParent())) {\n-            throw new UnauthorizedRoleException(roleTO.getParent());\n+        if (!allowedRoleIds.contains(role.getId())) {\n+            throw new UnauthorizedRoleException(role.getId());\n         }\n \n-        SyncopeRole role = roleDAO.save(roleDataBinder.create(roleTO));\n-\n-        auditManager.audit(Category.role, RoleSubCategory.create, Result.success,\n-                \"Successfully created role: \" + role.getId());\n+        auditManager.audit(Category.role, RoleSubCategory.read, Result.success,\n+                \"Successfully read role: \" + role.getId());\n \n-        response.setStatus(HttpServletResponse.SC_CREATED);\n-        return roleDataBinder.getRoleTO(role);\n+        return dataBinder.getRoleTO(role);\n     }\n \n-    @PreAuthorize(\"hasRole('ROLE_DELETE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{roleId}\")\n-    public RoleTO delete(@PathVariable(\"roleId\") final Long roleId) throws NotFoundException, UnauthorizedRoleException {\n+    @PreAuthorize(\"isAuthenticated()\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/selfRead/{roleId}\")\n+    @Transactional(readOnly = true)\n+    public RoleTO selfRead(@PathVariable(\"roleId\") final Long roleId)\n+            throws NotFoundException, UnauthorizedRoleException {\n \n-        SyncopeRole role = roleDAO.find(roleId);\n-        if (role == null) {\n-            throw new NotFoundException(\"Role \" + roleId);\n+        SyncopeRole role = dataBinder.getSyncopeRole(roleId);\n+\n+        SyncopeUser authUser = userDAO.find(SecurityContextHolder.getContext().getAuthentication().getName());\n+        if (authUser == null) {\n+            throw new NotFoundException(\"Authenticated user \"\n+                    + SecurityContextHolder.getContext().getAuthentication().getName());\n         }\n-        \n-        RoleTO roleToDelete = roleDataBinder.getRoleTO(role);\n \n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n+        allowedRoleIds.addAll(authUser.getRoleIds());\n         if (!allowedRoleIds.contains(role.getId())) {\n             throw new UnauthorizedRoleException(role.getId());\n         }\n \n-        auditManager.audit(Category.role, RoleSubCategory.delete, Result.success,\n-                \"Successfully deleted role: \" + role.getId());\n-\n-        roleDAO.delete(roleId);\n-        \n-        return roleToDelete;\n-    }\n-\n-    @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n-    @Transactional(readOnly = true)\n-    public List<RoleTO> list() {\n-        List<SyncopeRole> roles = roleDAO.findAll();\n-        List<RoleTO> roleTOs = new ArrayList<RoleTO>();\n-        for (SyncopeRole role : roles) {\n-            roleTOs.add(roleDataBinder.getRoleTO(role));\n-        }\n-\n-        auditManager.audit(Category.role, RoleSubCategory.list, Result.success,\n-                \"Successfully listed all roles: \" + roleTOs.size());\n+        auditManager.audit(Category.role, RoleSubCategory.selfRead, Result.success,\n+                \"Successfully read own role: \" + role.getId());\n \n-        return roleTOs;\n+        return dataBinder.getRoleTO(role);\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n@@ -128,10 +113,7 @@ public List<RoleTO> list() {\n     public RoleTO parent(@PathVariable(\"roleId\") final Long roleId)\n             throws NotFoundException, UnauthorizedRoleException {\n \n-        SyncopeRole role = roleDAO.find(roleId);\n-        if (role == null) {\n-            throw new NotFoundException(\"Role \" + roleId);\n-        }\n+        SyncopeRole role = dataBinder.getSyncopeRole(roleId);\n \n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n         if (role.getParent() != null && !allowedRoleIds.contains(role.getParent().getId())) {\n@@ -140,7 +122,7 @@ public RoleTO parent(@PathVariable(\"roleId\") final Long roleId)\n \n         RoleTO result = role.getParent() == null\n                 ? null\n-                : roleDataBinder.getRoleTO(role.getParent());\n+                : dataBinder.getRoleTO(role.getParent());\n \n         auditManager.audit(Category.role, RoleSubCategory.parent, Result.success,\n                 result == null\n@@ -153,95 +135,99 @@ public RoleTO parent(@PathVariable(\"roleId\") final Long roleId)\n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/children/{roleId}\")\n     @Transactional(readOnly = true)\n-    public List<RoleTO> children(@PathVariable(\"roleId\") final Long roleId) {\n+    public List<RoleTO> children(@PathVariable(\"roleId\") final Long roleId) throws NotFoundException {\n+        SyncopeRole role = dataBinder.getSyncopeRole(roleId);\n+\n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n \n-        List<SyncopeRole> roles = roleDAO.findChildren(roleId);\n-        List<RoleTO> roleTOs = new ArrayList<RoleTO>(roles.size());\n-        for (SyncopeRole role : roles) {\n-            if (allowedRoleIds.contains(role.getId())) {\n-                roleTOs.add(roleDataBinder.getRoleTO(role));\n+        List<SyncopeRole> children = roleDAO.findChildren(role);\n+        List<RoleTO> childrenTOs = new ArrayList<RoleTO>(children.size());\n+        for (SyncopeRole child : children) {\n+            if (allowedRoleIds.contains(child.getId())) {\n+                childrenTOs.add(dataBinder.getRoleTO(child));\n             }\n         }\n \n         auditManager.audit(Category.role, RoleSubCategory.children, Result.success,\n-                \"Found \" + roleTOs.size() + \" children of role \" + roleId);\n+                \"Found \" + childrenTOs.size() + \" children of role \" + roleId);\n \n-        return roleTOs;\n+        return childrenTOs;\n     }\n \n-    @PreAuthorize(\"hasRole('ROLE_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/read/{roleId}\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n     @Transactional(readOnly = true)\n-    public RoleTO read(@PathVariable(\"roleId\") final Long roleId)\n-            throws NotFoundException, UnauthorizedRoleException {\n-\n-        SyncopeRole role = roleDAO.find(roleId);\n-        if (role == null) {\n-            throw new NotFoundException(\"Role \" + roleId);\n-        }\n-\n-        Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n-        if (!allowedRoleIds.contains(role.getId())) {\n-            throw new UnauthorizedRoleException(role.getId());\n+    public List<RoleTO> list() {\n+        List<SyncopeRole> roles = roleDAO.findAll();\n+        List<RoleTO> roleTOs = new ArrayList<RoleTO>(roles.size());\n+        for (SyncopeRole role : roles) {\n+            roleTOs.add(dataBinder.getRoleTO(role));\n         }\n \n-        auditManager.audit(Category.role, RoleSubCategory.read, Result.success,\n-                \"Successfully read role: \" + role.getId());\n+        auditManager.audit(Category.role, RoleSubCategory.list, Result.success,\n+                \"Successfully listed all roles: \" + roleTOs.size());\n \n-        return roleDataBinder.getRoleTO(role);\n+        return roleTOs;\n     }\n \n-    @PreAuthorize(\"isAuthenticated()\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/selfRead/{roleId}\")\n-    @Transactional(readOnly = true)\n-    public RoleTO selfRead(@PathVariable(\"roleId\") final Long roleId)\n-            throws NotFoundException, UnauthorizedRoleException {\n+    @PreAuthorize(\"hasRole('ROLE_CREATE')\")\n+    @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n+    public RoleTO create(final HttpServletResponse response, @RequestBody final RoleTO roleTO)\n+            throws SyncopeClientCompositeErrorException, UnauthorizedRoleException {\n \n-        SyncopeRole role = roleDAO.find(roleId);\n-        if (role == null) {\n-            throw new NotFoundException(\"Role \" + roleId);\n-        }\n-        SyncopeUser authUser = userDAO.find(SecurityContextHolder.getContext().getAuthentication().getName());\n-        if (authUser == null) {\n-            throw new NotFoundException(\"Authenticated user \"\n-                    + SecurityContextHolder.getContext().getAuthentication().getName());\n-        }\n+        LOG.debug(\"Role create called with parameters {}\", roleTO);\n \n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n-        allowedRoleIds.addAll(authUser.getRoleIds());\n-        if (!allowedRoleIds.contains(role.getId())) {\n-            throw new UnauthorizedRoleException(role.getId());\n+        if (roleTO.getParent() != 0 && !allowedRoleIds.contains(roleTO.getParent())) {\n+            throw new UnauthorizedRoleException(roleTO.getParent());\n         }\n \n-        auditManager.audit(Category.role, RoleSubCategory.selfRead, Result.success,\n-                \"Successfully read own role: \" + role.getId());\n+        SyncopeRole role = roleDAO.save(dataBinder.create(roleTO));\n+\n+        auditManager.audit(Category.role, RoleSubCategory.create, Result.success,\n+                \"Successfully created role: \" + role.getId());\n \n-        return roleDataBinder.getRoleTO(role);\n+        response.setStatus(HttpServletResponse.SC_CREATED);\n+        return dataBinder.getRoleTO(role);\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n     public RoleTO update(@RequestBody final RoleMod roleMod) throws NotFoundException, UnauthorizedRoleException {\n-\n         LOG.debug(\"Role update called with parameter {}\", roleMod);\n \n-        SyncopeRole role = roleDAO.find(roleMod.getId());\n-        if (role == null) {\n-            throw new NotFoundException(\"Role \" + String.valueOf(roleMod.getId()));\n-        }\n+        SyncopeRole role = dataBinder.getSyncopeRole(roleMod.getId());\n \n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n         if (!allowedRoleIds.contains(role.getId())) {\n             throw new UnauthorizedRoleException(role.getId());\n         }\n \n-        roleDataBinder.update(role, roleMod);\n+        dataBinder.update(role, roleMod);\n         role = roleDAO.save(role);\n \n         auditManager.audit(Category.role, RoleSubCategory.update, Result.success,\n                 \"Successfully updated role: \" + role.getId());\n \n-        return roleDataBinder.getRoleTO(role);\n+        return dataBinder.getRoleTO(role);\n+    }\n+\n+    @PreAuthorize(\"hasRole('ROLE_DELETE')\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{roleId}\")\n+    public RoleTO delete(@PathVariable(\"roleId\") final Long roleId) throws NotFoundException, UnauthorizedRoleException {\n+        SyncopeRole role = dataBinder.getSyncopeRole(roleId);\n+\n+        RoleTO roleToDelete = dataBinder.getRoleTO(role);\n+\n+        Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n+        if (!allowedRoleIds.contains(role.getId())) {\n+            throw new UnauthorizedRoleException(role.getId());\n+        }\n+\n+        auditManager.audit(Category.role, RoleSubCategory.delete, Result.success,\n+                \"Successfully deleted role: \" + role.getId());\n+\n+        roleDAO.delete(roleId);\n+\n+        return roleToDelete;\n     }\n }"},{"sha":"e983af97432f806ce42e651da2b007c4d125d95c","filename":"core/src/main/java/org/apache/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":93,"deletions":51,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -19,10 +19,6 @@\n package org.apache.syncope.core.rest.data;\n \n import java.util.List;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.apache.syncope.core.util.AttributableUtil;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.stereotype.Component;\n import org.apache.syncope.client.mod.RoleMod;\n import org.apache.syncope.client.to.RoleTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -34,20 +30,37 @@\n import org.apache.syncope.core.persistence.beans.role.RDerAttr;\n import org.apache.syncope.core.persistence.beans.role.RVirAttr;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n import org.apache.syncope.core.propagation.PropagationByResource;\n+import org.apache.syncope.core.util.AttributableUtil;\n+import org.apache.syncope.core.util.NotFoundException;\n import org.apache.syncope.types.AttributableType;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Component;\n \n @Component\n public class RoleDataBinder extends AbstractAttributableDataBinder {\n \n     @Autowired\n     private EntitlementDAO entitlementDAO;\n \n-    public SyncopeRole create(final RoleTO roleTO) throws SyncopeClientCompositeErrorException {\n+    public SyncopeRole getSyncopeRole(final Long roleId) throws NotFoundException {\n+        SyncopeRole role = roleDAO.find(roleId);\n+        if (role == null) {\n+            throw new NotFoundException(\"Role \" + roleId);\n+        }\n+\n+        return role;\n+    }\n \n+    public SyncopeRole create(final RoleTO roleTO) throws SyncopeClientCompositeErrorException {\n         SyncopeRole role = new SyncopeRole();\n+\n+        role.setInheritOwner(roleTO.isInheritOwner());\n+\n         role.setInheritAttributes(roleTO.isInheritAttributes());\n         role.setInheritDerivedAttributes(roleTO.isInheritDerivedAttributes());\n         role.setInheritVirtualAttributes(roleTO.isInheritVirtualAttributes());\n@@ -101,98 +114,128 @@ public SyncopeRole create(final RoleTO roleTO) throws SyncopeClientCompositeErro\n             }\n         }\n \n-        role.setPasswordPolicy(roleTO.getPasswordPolicy() != null\n-                ? (PasswordPolicy) policyDAO.find(roleTO.getPasswordPolicy())\n-                : null);\n+        // owner\n+        if (roleTO.getUserOwner() != null) {\n+            SyncopeUser owner = userDAO.find(roleTO.getUserOwner());\n+            if (owner == null) {\n+                LOG.warn(\"Ignoring invalid user specified as owner: {}\", roleTO.getUserOwner());\n+            } else {\n+                role.setUserOwner(owner);\n+            }\n+        }\n+        if (roleTO.getRoleOwner() != null) {\n+            SyncopeRole owner = roleDAO.find(roleTO.getRoleOwner());\n+            if (owner == null) {\n+                LOG.warn(\"Ignoring invalid role specified as owner: {}\", roleTO.getRoleOwner());\n+            } else {\n+                role.setRoleOwner(owner);\n+            }\n+        }\n \n-        role.setAccountPolicy(roleTO.getAccountPolicy() != null\n-                ? (AccountPolicy) policyDAO.find(roleTO.getAccountPolicy())\n-                : null);\n+        // policies\n+        if (roleTO.getPasswordPolicy() != null) {\n+            role.setPasswordPolicy((PasswordPolicy) policyDAO.find(roleTO.getPasswordPolicy()));\n+        }\n+        if (roleTO.getAccountPolicy() != null) {\n+            role.setAccountPolicy((AccountPolicy) policyDAO.find(roleTO.getAccountPolicy()));\n+        }\n \n         return role;\n     }\n \n-    public PropagationByResource update(SyncopeRole role, RoleMod roleMod) throws SyncopeClientCompositeErrorException {\n+    public PropagationByResource update(final SyncopeRole role, final RoleMod roleMod)\n+            throws SyncopeClientCompositeErrorException {\n \n         SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n         // name\n         SyncopeClientException invalidRoles = new SyncopeClientException(SyncopeClientExceptionType.InvalidRoles);\n         if (roleMod.getName() != null) {\n-            SyncopeRole otherRole = roleDAO.find(roleMod.getName(), role.getParent() != null\n-                    ? role.getParent().getId()\n-                    : 0L);\n-\n-            if (otherRole != null) {\n-                LOG.error(\"Another role exists with the same name \" + \"and the same parent role: \" + otherRole);\n+            SyncopeRole otherRole = roleDAO.find(roleMod.getName(),\n+                    role.getParent() == null ? null : role.getParent().getId());\n+            if (otherRole == null || role.equals(otherRole)) {\n+                role.setName(roleMod.getName());\n+            } else {\n+                LOG.error(\"Another role exists with the same name and the same parent role: \" + otherRole);\n \n                 invalidRoles.addElement(roleMod.getName());\n                 scce.addException(invalidRoles);\n-            } else {\n-                role.setName(roleMod.getName());\n             }\n         }\n \n-        // inherited attributes\n+        if (roleMod.getInheritOwner() != null) {\n+            role.setInheritOwner(roleMod.getInheritOwner());\n+        }\n+\n         if (roleMod.getInheritAttributes() != null) {\n             role.setInheritAttributes(roleMod.getInheritAttributes());\n         }\n-\n-        // inherited derived attributes\n         if (roleMod.getInheritDerivedAttributes() != null) {\n             role.setInheritDerivedAttributes(roleMod.getInheritDerivedAttributes());\n         }\n-\n-        // inherited virtual attributes\n         if (roleMod.getInheritVirtualAttributes() != null) {\n             role.setInheritVirtualAttributes(roleMod.getInheritVirtualAttributes());\n         }\n \n-        // inherited password Policy\n         if (roleMod.getInheritPasswordPolicy() != null) {\n             role.setInheritPasswordPolicy(roleMod.getInheritPasswordPolicy());\n         }\n-\n-        // inherited account Policy\n         if (roleMod.getInheritAccountPolicy() != null) {\n             role.setInheritAccountPolicy(roleMod.getInheritAccountPolicy());\n         }\n \n         // entitlements\n-        role.getEntitlements().clear();\n-        Entitlement entitlement;\n-        for (String entitlementName : roleMod.getEntitlements()) {\n-            entitlement = entitlementDAO.find(entitlementName);\n-            if (entitlement == null) {\n-                LOG.warn(\"Ignoring invalid entitlement {}\", entitlementName);\n-            } else {\n-                role.addEntitlement(entitlement);\n+        if (roleMod.getEntitlements() != null) {\n+            role.getEntitlements().clear();\n+            for (String entitlementName : roleMod.getEntitlements()) {\n+                Entitlement entitlement = entitlementDAO.find(entitlementName);\n+                if (entitlement == null) {\n+                    LOG.warn(\"Ignoring invalid entitlement {}\", entitlementName);\n+                } else {\n+                    role.addEntitlement(entitlement);\n+                }\n             }\n         }\n \n+        // policies\n         if (roleMod.getPasswordPolicy() != null) {\n-            role.setPasswordPolicy(roleMod.getPasswordPolicy().getId() != null\n-                    ? (PasswordPolicy) policyDAO.find(roleMod.getPasswordPolicy().getId())\n-                    : null);\n+            role.setPasswordPolicy(roleMod.getPasswordPolicy().getId() == null\n+                    ? null\n+                    : (PasswordPolicy) policyDAO.find(roleMod.getPasswordPolicy().getId()));\n         }\n-\n         if (roleMod.getAccountPolicy() != null) {\n-            role.setAccountPolicy(roleMod.getAccountPolicy().getId() != null\n-                    ? (AccountPolicy) policyDAO.find(roleMod.getAccountPolicy().getId())\n-                    : null);\n+            role.setAccountPolicy(roleMod.getAccountPolicy().getId() == null\n+                    ? null\n+                    : (AccountPolicy) policyDAO.find(roleMod.getAccountPolicy().getId()));\n+        }\n+\n+        // owner\n+        if (roleMod.getUserOwner() != null) {\n+            role.setUserOwner(roleMod.getUserOwner().getId() == null\n+                    ? null\n+                    : userDAO.find(roleMod.getUserOwner().getId()));\n+        }\n+        if (roleMod.getRoleOwner() != null) {\n+            role.setRoleOwner(roleMod.getRoleOwner().getId() == null\n+                    ? null\n+                    : roleDAO.find(roleMod.getRoleOwner().getId()));\n         }\n \n         // attributes, derived attributes, virtual attributes and resources\n         return fill(role, roleMod, AttributableUtil.getInstance(AttributableType.ROLE), scce);\n     }\n \n-    public RoleTO getRoleTO(SyncopeRole role) {\n+    public RoleTO getRoleTO(final SyncopeRole role) {\n         RoleTO roleTO = new RoleTO();\n         roleTO.setId(role.getId());\n         roleTO.setName(role.getName());\n+\n+        roleTO.setInheritOwner(role.isInheritOwner());\n+\n         roleTO.setInheritAttributes(role.isInheritAttributes());\n         roleTO.setInheritDerivedAttributes(role.isInheritDerivedAttributes());\n         roleTO.setInheritVirtualAttributes(role.isInheritVirtualAttributes());\n+\n         roleTO.setInheritPasswordPolicy(role.isInheritPasswordPolicy());\n         roleTO.setInheritAccountPolicy(role.isInheritAccountPolicy());\n \n@@ -219,13 +262,12 @@ public RoleTO getRoleTO(SyncopeRole role) {\n             roleTO.addEntitlement(entitlement.getName());\n         }\n \n-        roleTO.setPasswordPolicy(role.getPasswordPolicy() != null\n-                ? role.getPasswordPolicy().getId()\n-                : null);\n-\n-        roleTO.setAccountPolicy(role.getAccountPolicy() != null\n-                ? role.getAccountPolicy().getId()\n-                : null);\n+        roleTO.setPasswordPolicy(role.getPasswordPolicy() == null\n+                ? null\n+                : role.getPasswordPolicy().getId());\n+        roleTO.setAccountPolicy(role.getAccountPolicy() == null\n+                ? null\n+                : role.getAccountPolicy().getId());\n \n         return roleTO;\n     }"},{"sha":"6bb4036a6b7436b7c05092e17f5c6526bf658960","filename":"core/src/main/java/org/apache/syncope/core/security/EncodePasswordCLI.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FEncodePasswordCLI.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FEncodePasswordCLI.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FEncodePasswordCLI.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -22,25 +22,22 @@\n import org.apache.syncope.types.CipherAlgorithm;\n \n /**\n- * Command line version of encoder to encode the admin password\n+ * Command line version of encoder to encode the admin password.\n  */\n-public class EncodePasswordCLI {\n+public final class EncodePasswordCLI {\n \n-    /**\n-     * @param args\n-     */\n-    public static void main(String[] args)\n+    public static void main(final String[] args)\n             throws Exception {\n \n         if (args.length != 2) {\n             usage();\n-            System.exit(0);\n+            System.exit(1);\n         }\n \n         if (CipherAlgorithm.valueOf(args[1]).getAlgorithm().isEmpty()) {\n-            System.out.println(\"Unsupported algorithm \" + args[1]);\n+            System.err.println(\"Unsupported algorithm \" + args[1]);\n             usage();\n-            System.exit(0);\n+            System.exit(2);\n         }\n \n         System.out.println(\"Encoding password '\" + args[0] + \"' with \" + args[1]);\n@@ -51,4 +48,7 @@ private static void usage() {\n         System.out.println(\"Usage: EncodePassword <password> <algorithm>\");\n         System.out.println(\"Supported algorithms:\" + Arrays.toString(CipherAlgorithm.values()));\n     }\n+\n+    private EncodePasswordCLI() {\n+    }\n }"},{"sha":"95d59109127149131da74f3fa6364de45c83d267","filename":"core/src/main/java/org/apache/syncope/core/security/PasswordEncoder.java","status":"modified","additions":11,"deletions":14,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FPasswordEncoder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FPasswordEncoder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FPasswordEncoder.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -34,17 +34,9 @@\n import org.springframework.security.crypto.bcrypt.BCrypt;\n import org.springframework.security.crypto.codec.Base64;\n \n-/**\n- * TODO: Description of the class.\n- *\n- * @author bl\n- *\n- * @since\n- *\n- */\n-public class PasswordEncoder {\n+public final class PasswordEncoder {\n \n-    protected static final Logger LOG = LoggerFactory.getLogger(PasswordEncoder.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(PasswordEncoder.class);\n \n     private static SecretKeySpec keySpec;\n \n@@ -64,7 +56,6 @@ public static String encodePassword(final String password, final CipherAlgorithm\n \n         if (password != null) {\n             if (cipherAlgorithm == null || cipherAlgorithm == CipherAlgorithm.AES) {\n-\n                 final byte[] cleartext = password.getBytes(\"UTF8\");\n \n                 final Cipher cipher = Cipher.getInstance(CipherAlgorithm.AES.getAlgorithm());\n@@ -83,7 +74,8 @@ public static String encodePassword(final String password, final CipherAlgorithm\n         return encodedPassword;\n     }\n \n-    public static boolean verifyPassword(String password, CipherAlgorithm cipherAlgorithm, String digestedPassword) {\n+    public static boolean verifyPassword(final String password, final CipherAlgorithm cipherAlgorithm,\n+            final String digestedPassword) {\n \n         boolean res = false;\n \n@@ -111,7 +103,7 @@ public static boolean verifyPassword(String password, CipherAlgorithm cipherAlgo\n         return res;\n     }\n \n-    private static StandardStringDigester getDigester(CipherAlgorithm cipherAlgorithm) {\n+    private static StandardStringDigester getDigester(final CipherAlgorithm cipherAlgorithm) {\n         StandardStringDigester digester = new StandardStringDigester();\n \n         if (cipherAlgorithm.getAlgorithm().startsWith(\"S-\")) {\n@@ -124,10 +116,15 @@ private static StandardStringDigester getDigester(CipherAlgorithm cipherAlgorith\n             digester.setAlgorithm(cipherAlgorithm.getAlgorithm());\n             digester.setIterations(1);\n             digester.setSaltSizeBytes(0);\n-\n         }\n \n         digester.setStringOutputType(\"hexadecimal\");\n         return digester;\n     }\n+\n+    /**\n+     * Private default constructor, for static-only classes.\n+     */\n+    private PasswordEncoder() {\n+    }\n }"},{"sha":"16365ce22d9571672b614e7705c3cb268edd773e","filename":"core/src/main/java/org/apache/syncope/core/security/SyncopeAuthenticationProvider.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -148,15 +148,14 @@ public Authentication authenticate(final Authentication authentication)\n             auditManager.audit(Category.authentication, AuthenticationSubCategory.login, Result.success,\n                     \"Successfully authenticated, with roles: \" + token.getAuthorities());\n \n-            LOG.debug(\"User {} successfully authenticated, with roles {}\", authentication.getPrincipal(), token.\n-                    getAuthorities());\n+            LOG.debug(\"User {} successfully authenticated, with roles {}\",\n+                    authentication.getPrincipal(), token.getAuthorities());\n \n             if (user != null) {\n                 user.setLastLoginDate(new Date());\n                 user.setFailedLogins(0);\n                 userDAO.save(user);\n             }\n-\n         } else {\n             if (user != null) {\n                 user.setFailedLogins(user.getFailedLogins() + 1);"},{"sha":"774246d1b1621210eb299f5183c5ebe7a1123fb3","filename":"core/src/main/java/org/apache/syncope/core/security/SyncopeUserDetailsService.java","status":"modified","additions":18,"deletions":4,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeUserDetailsService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeUserDetailsService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeUserDetailsService.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.security;\n \n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Configurable;\n@@ -34,6 +35,7 @@\n import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n+import org.apache.syncope.core.util.EntitlementUtil;\n \n @Configurable\n public class SyncopeUserDetailsService implements UserDetailsService {\n@@ -59,8 +61,7 @@ public void setAdminUser(String adminUser) {\n \n     @Override\n     public UserDetails loadUserByUsername(final String username) throws UsernameNotFoundException, DataAccessException {\n-\n-        Set<SimpleGrantedAuthority> authorities = new HashSet<SimpleGrantedAuthority>();\n+        final Set<SimpleGrantedAuthority> authorities = new HashSet<SimpleGrantedAuthority>();\n         if (adminUser.equals(username)) {\n             for (Entitlement entitlement : entitlementDAO.findAll()) {\n                 authorities.add(new SimpleGrantedAuthority(entitlement.getName()));\n@@ -72,8 +73,8 @@ public UserDetails loadUserByUsername(final String username) throws UsernameNotF\n                 throw new UsernameNotFoundException(\"Could not find any user with id \" + username);\n             }\n \n-            // Give entitlements based on roles owned by user, and their ancestors\n-            Set<SyncopeRole> roles = new HashSet<SyncopeRole>(user.getRoles());\n+            // Give entitlements based on roles assigned to user (and their ancestors)\n+            final Set<SyncopeRole> roles = new HashSet<SyncopeRole>(user.getRoles());\n             for (SyncopeRole role : user.getRoles()) {\n                 roles.addAll(roleDAO.findAncestors(role));\n             }\n@@ -82,6 +83,19 @@ public UserDetails loadUserByUsername(final String username) throws UsernameNotF\n                     authorities.add(new SimpleGrantedAuthority(entitlement.getName()));\n                 }\n             }\n+            // Give role operational entitlements for owned roles\n+            List<SyncopeRole> ownedRoles = roleDAO.findOwned(user);\n+            if (!ownedRoles.isEmpty()) {\n+                authorities.add(new SimpleGrantedAuthority(\"ROLE_CREATE\"));\n+                authorities.add(new SimpleGrantedAuthority(\"ROLE_READ\"));\n+                authorities.add(new SimpleGrantedAuthority(\"ROLE_UPDATE\"));\n+                authorities.add(new SimpleGrantedAuthority(\"ROLE_DELETE\"));\n+\n+                for (SyncopeRole role : ownedRoles) {\n+                    authorities.add(new SimpleGrantedAuthority(EntitlementUtil.\n+                            getEntitlementNameFromRoleId(role.getId())));\n+                }\n+            }\n         }\n \n         return new User(username, \"<PASSWORD_PLACEHOLDER>\", true, true, true, true, authorities);"},{"sha":"97154b26c4dad7d3944fd226de6e8d72e6531d75","filename":"core/src/main/java/org/apache/syncope/core/util/EntitlementUtil.java","status":"modified","additions":14,"deletions":5,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FEntitlementUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FEntitlementUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FEntitlementUtil.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -22,18 +22,21 @@\n import java.util.List;\n import java.util.Set;\n import java.util.regex.Pattern;\n-import org.springframework.security.core.GrantedAuthority;\n-import org.springframework.security.core.context.SecurityContext;\n-import org.springframework.security.core.context.SecurityContextHolder;\n import org.apache.syncope.core.persistence.beans.Entitlement;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.context.SecurityContext;\n+import org.springframework.security.core.context.SecurityContextHolder;\n \n-public class EntitlementUtil {\n+/**\n+ * Utility class for manipulating entitlements.\n+ */\n+public final class EntitlementUtil {\n \n     private static final Pattern ROLE_ENTITLEMENT_NAME_PATTERN = Pattern.compile(\"^ROLE_([\\\\d])+\");\n-    private static final Logger LOG = LoggerFactory.getLogger(EntitlementUtil.class);\n \n+    private static final Logger LOG = LoggerFactory.getLogger(EntitlementUtil.class);\n \n     public static Set<String> getOwnedEntitlementNames() {\n         final Set<String> result = new HashSet<String>();\n@@ -93,4 +96,10 @@ public static Set<Long> getRoleIds(final List<Entitlement> entitlements) {\n         }\n         return getRoleIds(names);\n     }\n+\n+    /**\n+     * Private default constructor, for static-only classes.\n+     */\n+    private EntitlementUtil() {\n+    }\n }"},{"sha":"5d3c247bd6dc69ed65db1c4538cce8b2d4a86d7e","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/RoleTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -46,7 +46,7 @@ public void findAll() {\n \n     @Test\n     public void findChildren() {\n-        assertEquals(3, roleDAO.findChildren(4L).size());\n+        assertEquals(3, roleDAO.findChildren(roleDAO.find(4L)).size());\n     }\n \n     @Test"},{"sha":"5d4a3935b7ccf8cf5c6dadf27494eaab0db4ba90","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/UserTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.dao;\n \n+import static org.junit.Assert.*;\n+\n import java.util.Date;\n import java.util.List;\n import java.util.Set;\n@@ -30,7 +32,6 @@\n import org.apache.syncope.core.util.IncompatiblePolicyException;\n import org.apache.syncope.core.util.PasswordGenerator;\n import org.apache.syncope.types.CipherAlgorithm;\n-import static org.junit.Assert.*;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -201,7 +202,6 @@ public void issueSYNCOPE226() {\n         String password = \"\";\n         try {\n             password = passwordGenerator.generateUserPassword(user);\n-            System.out.println(\"PASSWORD GENERATA: \" + password);\n         } catch (IncompatiblePolicyException ex) {\n             fail(ex.getMessage());\n         }"},{"sha":"1c2f1553383db690860b9c5466e0cf9fcc03f438","filename":"core/src/test/java/org/apache/syncope/core/persistence/relationships/RoleTest.java","status":"modified","additions":47,"deletions":4,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -19,8 +19,9 @@\n package org.apache.syncope.core.persistence.relationships;\n \n import static org.junit.Assert.*;\n-import org.junit.Test;\n \n+import java.util.List;\n+import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.beans.role.RAttr;\n@@ -35,7 +36,9 @@\n import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.PolicyDAO;\n+import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n @Transactional\n public class RoleTest extends AbstractTest {\n@@ -61,12 +64,52 @@ public class RoleTest extends AbstractTest {\n     @Autowired\n     private PolicyDAO policyDAO;\n \n-    public void createWithPasswordPolicy() {\n-        final String ROLE_NAME = \"roleWithPasswordPolicy\";\n+    @Test(expected = InvalidEntityException.class)\n+    public void saveWithTwoOwners() {\n+        SyncopeRole root = roleDAO.find(\"root\", null);\n+        assertNotNull(\"did not find expected role\", root);\n \n+        SyncopeUser user = userDAO.find(1L);\n+        assertNotNull(\"did not find expected user\", user);\n+\n+        SyncopeRole role = new SyncopeRole();\n+        role.setName(\"error\");\n+        role.setUserOwner(user);\n+        role.setRoleOwner(root);\n+\n+        roleDAO.save(role);\n+    }\n+\n+    @Test\n+    public void findByOwner() {\n+        SyncopeRole role = roleDAO.find(6L);\n+        assertNotNull(\"did not find expected role\", role);\n+\n+        SyncopeUser user = userDAO.find(5L);\n+        assertNotNull(\"did not find expected user\", user);\n+\n+        assertEquals(user, role.getUserOwner());\n+\n+        SyncopeRole child1 = roleDAO.find(7L);\n+        assertNotNull(child1);\n+        assertEquals(role, child1.getParent());\n+\n+        SyncopeRole child2 = roleDAO.find(10L);\n+        assertNotNull(child2);\n+        assertEquals(role, child2.getParent());\n+\n+        List<SyncopeRole> ownedRoles = roleDAO.findOwned(user);\n+        assertFalse(ownedRoles.isEmpty());\n+        assertEquals(2, ownedRoles.size());\n+        assertTrue(ownedRoles.contains(role));\n+        assertTrue(ownedRoles.contains(child1));\n+        assertFalse(ownedRoles.contains(child2));\n+    }\n+\n+    public void createWithPasswordPolicy() {\n         PasswordPolicy policy = (PasswordPolicy) policyDAO.find(4L);\n         SyncopeRole role = new SyncopeRole();\n-        role.setName(ROLE_NAME);\n+        role.setName(\"roleWithPasswordPolicy\");\n         role.setPasswordPolicy(policy);\n \n         SyncopeRole actual = roleDAO.save(role);"},{"sha":"f6ac8a93e1b59827c0ab332c62eec7c19a9296ed","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -24,7 +24,6 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n import org.springframework.web.client.HttpClientErrorException;"},{"sha":"e9403eb4146814349bcc3f6ee39ff28638c305cb","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":82,"deletions":5,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -18,15 +18,13 @@\n  */\n package org.apache.syncope.core.rest;\n \n+import java.util.ArrayList;\n import static org.junit.Assert.*;\n \n import java.util.Arrays;\n import java.util.List;\n import org.apache.http.auth.UsernamePasswordCredentials;\n import org.apache.http.impl.client.DefaultHttpClient;\n-import org.junit.Test;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.web.client.HttpStatusCodeException;\n import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n import org.apache.syncope.client.mod.AttributeMod;\n import org.apache.syncope.client.mod.RoleMod;\n@@ -36,6 +34,9 @@\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.client.validation.SyncopeClientException;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n+import org.junit.Test;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.client.HttpStatusCodeException;\n \n public class RoleTestITCase extends AbstractTest {\n \n@@ -162,8 +163,8 @@ public void selfRead() {\n         assertTrue(userTO.getMembershipMap().containsKey(1L));\n         assertFalse(userTO.getMembershipMap().containsKey(3L));\n \n-        PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate.\n-                getRequestFactory());\n+        PreemptiveAuthHttpRequestFactory requestFactory =\n+                (PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory();\n         ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n                 requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user1\", \"password\"));\n \n@@ -290,6 +291,40 @@ public void updateRemovingDerAttribute() {\n         assertTrue(roleTO.getDerivedAttributes().isEmpty());\n     }\n \n+    @Test\n+    public void updateAsRoleOwner() {\n+        // 1. read role as admin\n+        RoleTO roleTO = restTemplate.getForObject(BASE_URL + \"role/read/{roleId}.json\", RoleTO.class, 7);\n+\n+        // 2. prepare update\n+        RoleMod roleMod = new RoleMod();\n+        roleMod.setId(roleTO.getId());\n+        roleMod.setName(\"Managing Director\");\n+\n+        // 3. try to update as user3, not owner of role 7 - fail\n+        PreemptiveAuthHttpRequestFactory requestFactory =\n+                (PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory();\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n+                requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user2\", \"password\"));\n+\n+        try {\n+            restTemplate.postForObject(BASE_URL + \"role/update\", roleMod, RoleTO.class);\n+            fail();\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(HttpStatus.FORBIDDEN, e.getStatusCode());\n+        }\n+\n+        // 4. update as user5, owner of role 7 because owner of role 6 with inheritance - success\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n+                requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user5\", \"password\"));\n+\n+        roleTO = restTemplate.postForObject(BASE_URL + \"role/update\", roleMod, RoleTO.class);\n+        assertEquals(\"Managing Director\", roleTO.getName());\n+\n+        // restore admin authentication\n+        super.resetRestTemplate();\n+    }\n+\n     /**\n      * Role rename used to fail in case of parent null.\n      *\n@@ -316,4 +351,46 @@ public void issue178() {\n         assertEquals(\"renamed\", actual.getName());\n         assertEquals(0L, actual.getParent());\n     }\n+\n+    @Test\n+    public void issueSYNCOPE228() {\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(\"issueSYNCOPE228\");\n+        roleTO.setParent(8L);\n+        roleTO.setInheritAccountPolicy(false);\n+        roleTO.setAccountPolicy(6L);\n+        roleTO.setInheritPasswordPolicy(true);\n+        roleTO.setPasswordPolicy(2L);\n+\n+        AttributeTO icon = new AttributeTO();\n+        icon.setSchema(\"icon\");\n+        icon.addValue(\"anIcon\");\n+        roleTO.addAttribute(icon);\n+\n+        roleTO.addEntitlement(\"USER_READ\");\n+        roleTO.addEntitlement(\"SCHEMA_READ\");\n+\n+        roleTO = restTemplate.postForObject(BASE_URL + \"role/create\", roleTO, RoleTO.class);\n+        assertNotNull(roleTO);\n+        assertNotNull(roleTO.getEntitlements());\n+        assertFalse(roleTO.getEntitlements().isEmpty());\n+\n+        List<String> entitlements = roleTO.getEntitlements();\n+\n+        RoleMod roleMod = new RoleMod();\n+        roleMod.setId(roleTO.getId());\n+        roleMod.setInheritDerivedAttributes(Boolean.TRUE);\n+\n+        roleTO = restTemplate.postForObject(BASE_URL + \"role/update\", roleMod, RoleTO.class);\n+        assertNotNull(roleTO);\n+        assertEquals(entitlements, roleTO.getEntitlements());\n+\n+        roleMod = new RoleMod();\n+        roleMod.setId(roleTO.getId());\n+        roleMod.setEntitlements(new ArrayList<String>());\n+\n+        roleTO = restTemplate.postForObject(BASE_URL + \"role/update\", roleMod, RoleTO.class);\n+        assertNotNull(roleTO);\n+        assertTrue(roleTO.getEntitlements().isEmpty());\n+    }\n }"},{"sha":"933985e0948332670971751658daa63047370342","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -690,8 +690,7 @@ public void createWithReject() {\n         assertNotNull(form.getTaskId());\n         assertNull(form.getOwner());\n \n-        // 3. claim task from user1, not in role 7 (designated for \n-        // approval in workflow definition): fail\n+        // 3. claim task from user1, not in role 7 (designated for approval in workflow definition): fail\n         PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate.\n                 getRequestFactory());\n         ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n@@ -706,12 +705,12 @@ public void createWithReject() {\n         }\n         assertNotNull(sce);\n \n-        // 4. claim task from user4, in to role 7\n+        // 4. claim task from user4, in role 7\n         ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n                 requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user4\", \"password\"));\n \n-        form = restTemplate.getForObject(BASE_URL + \"user/workflow/form/claim/{taskId}\", WorkflowFormTO.class, form.\n-                getTaskId());\n+        form = restTemplate.getForObject(BASE_URL + \"user/workflow/form/claim/{taskId}\", WorkflowFormTO.class,\n+                form.getTaskId());\n         assertNotNull(form);\n         assertNotNull(form.getTaskId());\n         assertNotNull(form.getOwner());"},{"sha":"be553d1c55c40757ee4e7dad7359adc250aa5f19","filename":"core/src/test/resources/content.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=e1ac1ee6fc7f0dba4541b1df6c11d8eab03a4610","patch":"@@ -59,15 +59,15 @@ under the License.\n   <SyncopeRole id=\"4\" name=\"employee\" parent_id=\"3\"/>\n   <SyncopeRole id=\"5\" name=\"secretary\" parent_id=\"4\"/>\n   <SyncopeRole id=\"6\"\n-               name=\"director\" parent_id=\"4\"\n+               name=\"director\" parent_id=\"4\" userOwner_id=\"5\"\n                inheritAttributes=\"1\" inheritDerivedAttributes=\"1\" inheritVirtualAttributes=\"1\"\n                inheritPasswordPolicy=\"0\" inheritAccountPolicy=\"0\"\n                passwordPolicy_id=\"4\"\n                accountPolicy_id=\"6\"/>\n   <SyncopeRole id=\"7\"\n                name=\"managingDirector\" parent_id=\"6\"\n                inheritAttributes=\"1\" inheritDerivedAttributes=\"1\" inheritVirtualAttributes=\"1\"\n-               inheritPasswordPolicy=\"1\" inheritAccountPolicy=\"1\"/>\n+               inheritPasswordPolicy=\"1\" inheritAccountPolicy=\"1\" inheritOwner=\"1\"/>\n   <SyncopeRole id=\"8\"\n                name=\"otherchild\" parent_id=\"1\"\n                inheritVirtualAttributes=\"1\"\n@@ -76,7 +76,7 @@ under the License.\n   <SyncopeRole id=\"10\"\n                name=\"managingConsultant\" parent_id=\"6\"\n                inheritAttributes=\"1\" inheritDerivedAttributes=\"1\" inheritVirtualAttributes=\"1\"\n-               inheritPasswordPolicy=\"1\" inheritAccountPolicy=\"1\"/>\n+               inheritPasswordPolicy=\"1\" inheritAccountPolicy=\"1\" inheritOwner=\"0\"/>\n   <SyncopeRole id=\"11\" name=\"roleForWorkflowOptIn\" parent_id=\"1\"/>\n   <SyncopeRole id=\"12\" name=\"aRoleForPropagation\" parent_id=\"1\"/>\n   <SyncopeRole id=\"13\" name=\"bRoleForPropagation\" parent_id=\"1\"/>"}]}