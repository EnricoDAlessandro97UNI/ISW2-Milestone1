{"sha":"f4adfd2fc6e11ac33c556356db4bc066f4895565","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY0YWRmZDJmYzZlMTFhYzMzYzU1NjM1NmRiNGJjMDY2ZjQ4OTU1NjU=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2018-12-20T14:19:16Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2018-12-20T23:09:43Z"},"message":"[SYNCOPE-1419] provides the correct behavior in case of multivalue fields","tree":{"sha":"dd77dae2aed9d08a5c7037a9aac83fa06df3c571","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/dd77dae2aed9d08a5c7037a9aac83fa06df3c571"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f4adfd2fc6e11ac33c556356db4bc066f4895565","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f4adfd2fc6e11ac33c556356db4bc066f4895565","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f4adfd2fc6e11ac33c556356db4bc066f4895565","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f4adfd2fc6e11ac33c556356db4bc066f4895565/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"b8114cf1cfadd6a9730adca4301663b4dd86db19","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b8114cf1cfadd6a9730adca4301663b4dd86db19","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b8114cf1cfadd6a9730adca4301663b4dd86db19"}],"stats":{"total":211,"additions":120,"deletions":91},"files":[{"sha":"84f463e91631c3955f9bf65547ea74aa4a1cbac3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":106,"deletions":91,"changes":197,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f4adfd2fc6e11ac33c556356db4bc066f4895565/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f4adfd2fc6e11ac33c556356db4bc066f4895565/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=f4adfd2fc6e11ac33c556356db4bc066f4895565","patch":"@@ -834,111 +834,126 @@ private void fillAttrQuery(\n             final boolean not,\n             final List<Object> parameters,\n             final SearchSupport svs) {\n+        // This first branch is required for handling with not conditions given on multivalue fields (SYNCOPE-1419)\n+        if (not && !(cond instanceof AnyCond)\n+                && schema.isMultivalue()\n+                && cond.getType() != AttributeCond.Type.ISNULL\n+                && cond.getType() != AttributeCond.Type.ISNOTNULL) {\n+            query.append(\"any_id NOT IN (SELECT DISTINCT any_id FROM \");\n+            if (schema.isUniqueConstraint()) {\n+                query.append(svs.asSearchViewSupport().uniqueAttr().name);\n+            } else {\n+                query.append(svs.asSearchViewSupport().attr().name);\n+            }\n+            query.append(\" WHERE schema_id='\").append(schema.getKey());\n+            fillAttrQuery(query, attrValue, schema, cond, false, parameters, svs);\n+            query.append(\")\");\n+        } else {\n+            // activate ignoreCase only for EQ and LIKE operators\n+            boolean ignoreCase = AttributeCond.Type.ILIKE == cond.getType() || AttributeCond.Type.IEQ == cond.getType();\n \n-        // activate ignoreCase only for EQ and LIKE operators\n-        boolean ignoreCase = AttributeCond.Type.ILIKE == cond.getType() || AttributeCond.Type.IEQ == cond.getType();\n-\n-        String column = (cond instanceof AnyCond) ? cond.getSchema() : svs.fieldName(schema.getType());\n-        if ((schema.getType() == AttrSchemaType.String || schema.getType() == AttrSchemaType.Enum) && ignoreCase) {\n-            column = \"LOWER (\" + column + \")\";\n-        }\n-        if (!(cond instanceof AnyCond)) {\n-            column = \"' AND \" + column;\n-        }\n-\n-        switch (cond.getType()) {\n-\n-            case ISNULL:\n-                query.append(column).append(not\n-                        ? \" IS NOT NULL\"\n-                        : \" IS NULL\");\n-                break;\n+            String column = (cond instanceof AnyCond) ? cond.getSchema() : svs.fieldName(schema.getType());\n+            if ((schema.getType() == AttrSchemaType.String || schema.getType() == AttrSchemaType.Enum) && ignoreCase) {\n+                column = \"LOWER (\" + column + \")\";\n+            }\n+            if (!(cond instanceof AnyCond)) {\n+                column = \"' AND \" + column;\n+            }\n \n-            case ISNOTNULL:\n-                query.append(column).append(not\n-                        ? \" IS NULL\"\n-                        : \" IS NOT NULL\");\n-                break;\n+            switch (cond.getType()) {\n+\n+                case ISNULL:\n+                    query.append(column).append(not\n+                            ? \" IS NOT NULL\"\n+                            : \" IS NULL\");\n+                    break;\n+\n+                case ISNOTNULL:\n+                    query.append(column).append(not\n+                            ? \" IS NULL\"\n+                            : \" IS NOT NULL\");\n+                    break;\n+\n+                case ILIKE:\n+                case LIKE:\n+                    if (schema.getType() == AttrSchemaType.String || schema.getType() == AttrSchemaType.Enum) {\n+                        query.append(column);\n+                        if (not) {\n+                            query.append(\" NOT \");\n+                        }\n+                        query.append(\" LIKE \");\n+                        if (ignoreCase) {\n+                            query.append(\"LOWER(?\").append(setParameter(parameters, cond.getExpression())).append(')');\n+                        } else {\n+                            query.append('?').append(setParameter(parameters, cond.getExpression()));\n+                        }\n+                    } else {\n+                        if (!(cond instanceof AnyCond)) {\n+                            query.append(\"' AND\");\n+                        }\n+                        query.append(\" 1=2\");\n+                        LOG.error(\"LIKE is only compatible with string or enum schemas\");\n+                    }\n+                    break;\n \n-            case ILIKE:\n-            case LIKE:\n-                if (schema.getType() == AttrSchemaType.String || schema.getType() == AttrSchemaType.Enum) {\n+                case IEQ:\n+                case EQ:\n                     query.append(column);\n                     if (not) {\n-                        query.append(\" NOT \");\n-                    }\n-                    query.append(\" LIKE \");\n-                    if (ignoreCase) {\n-                        query.append(\"LOWER(?\").append(setParameter(parameters, cond.getExpression())).append(')');\n+                        query.append(\"<>\");\n                     } else {\n-                        query.append('?').append(setParameter(parameters, cond.getExpression()));\n+                        query.append('=');\n                     }\n-                } else {\n-                    if (!(cond instanceof AnyCond)) {\n-                        query.append(\"' AND\");\n+                    if ((schema.getType() == AttrSchemaType.String\n+                            || schema.getType() == AttrSchemaType.Enum) && ignoreCase) {\n+                        query.append(\"LOWER(?\").append(setParameter(parameters, attrValue.getValue())).append(')');\n+                    } else {\n+                        query.append('?').append(setParameter(parameters, attrValue.getValue()));\n                     }\n-                    query.append(\" 1=2\");\n-                    LOG.error(\"LIKE is only compatible with string or enum schemas\");\n-                }\n-                break;\n+                    break;\n \n-            case IEQ:\n-            case EQ:\n-                query.append(column);\n-                if (not) {\n-                    query.append(\"<>\");\n-                } else {\n-                    query.append('=');\n-                }\n-                if ((schema.getType() == AttrSchemaType.String\n-                        || schema.getType() == AttrSchemaType.Enum) && ignoreCase) {\n-                    query.append(\"LOWER(?\").append(setParameter(parameters, attrValue.getValue())).append(')');\n-                } else {\n+                case GE:\n+                    query.append(column);\n+                    if (not) {\n+                        query.append('<');\n+                    } else {\n+                        query.append(\">=\");\n+                    }\n                     query.append('?').append(setParameter(parameters, attrValue.getValue()));\n-                }\n-                break;\n-\n-            case GE:\n-                query.append(column);\n-                if (not) {\n-                    query.append('<');\n-                } else {\n-                    query.append(\">=\");\n-                }\n-                query.append('?').append(setParameter(parameters, attrValue.getValue()));\n-                break;\n+                    break;\n \n-            case GT:\n-                query.append(column);\n-                if (not) {\n-                    query.append(\"<=\");\n-                } else {\n-                    query.append('>');\n-                }\n-                query.append('?').append(setParameter(parameters, attrValue.getValue()));\n-                break;\n+                case GT:\n+                    query.append(column);\n+                    if (not) {\n+                        query.append(\"<=\");\n+                    } else {\n+                        query.append('>');\n+                    }\n+                    query.append('?').append(setParameter(parameters, attrValue.getValue()));\n+                    break;\n \n-            case LE:\n-                query.append(column);\n-                if (not) {\n-                    query.append('>');\n-                } else {\n-                    query.append(\"<=\");\n-                }\n-                query.append('?').append(setParameter(parameters, attrValue.getValue()));\n-                break;\n+                case LE:\n+                    query.append(column);\n+                    if (not) {\n+                        query.append('>');\n+                    } else {\n+                        query.append(\"<=\");\n+                    }\n+                    query.append('?').append(setParameter(parameters, attrValue.getValue()));\n+                    break;\n \n-            case LT:\n-                query.append(column);\n-                if (not) {\n-                    query.append(\">=\");\n-                } else {\n-                    query.append('<');\n-                }\n-                query.append('?').append(setParameter(parameters, attrValue.getValue()));\n-                break;\n+                case LT:\n+                    query.append(column);\n+                    if (not) {\n+                        query.append(\">=\");\n+                    } else {\n+                        query.append('<');\n+                    }\n+                    query.append('?').append(setParameter(parameters, attrValue.getValue()));\n+                    break;\n \n-            default:\n+                default:\n+            }\n         }\n     }\n "},{"sha":"8d8ea690039742d9fd49f43ae9e044fd9e9f1132","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f4adfd2fc6e11ac33c556356db4bc066f4895565/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f4adfd2fc6e11ac33c556356db4bc066f4895565/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=f4adfd2fc6e11ac33c556356db4bc066f4895565","patch":"@@ -770,4 +770,18 @@ public void issueSYNCOPE1416() {\n                 searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, AnyTypeKind.USER),\n                 users.size());\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1419() {\n+        AttributeCond loginDateCond = new AttributeCond(AttributeCond.Type.EQ);\n+        loginDateCond.setSchema(\"loginDate\");\n+        loginDateCond.setExpression(\"2009-05-26\");\n+\n+        SearchCond cond = SearchCond.getNotLeafCond(loginDateCond);\n+        assertTrue(cond.isValid());\n+\n+        List<User> users = searchDAO.search(cond, AnyTypeKind.USER);\n+        assertNotNull(users);\n+        assertEquals(4, users.size());\n+    }\n }"}]}