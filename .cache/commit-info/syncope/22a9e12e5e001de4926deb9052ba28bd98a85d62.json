{"sha":"22a9e12e5e001de4926deb9052ba28bd98a85d62","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjIyYTllMTJlNWUwMDFkZTQ5MjZkZWI5MDUyYmEyOGJkOThhODVkNjI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-05-22T10:24:30Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-05-22T10:24:30Z"},"message":"[SYNCOPE-670] Merge from 1_2_X","tree":{"sha":"e5ac7a515d58de106d876e0867d1e5c32e95965f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e5ac7a515d58de106d876e0867d1e5c32e95965f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/22a9e12e5e001de4926deb9052ba28bd98a85d62","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/22a9e12e5e001de4926deb9052ba28bd98a85d62","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/22a9e12e5e001de4926deb9052ba28bd98a85d62","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/22a9e12e5e001de4926deb9052ba28bd98a85d62/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d489e8c59a93bf137d75af4222b5b87f4c7ad925","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d489e8c59a93bf137d75af4222b5b87f4c7ad925","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d489e8c59a93bf137d75af4222b5b87f4c7ad925"},{"sha":"15cca152d4abdfa42fe31a5f00f9c848cf31548b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/15cca152d4abdfa42fe31a5f00f9c848cf31548b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/15cca152d4abdfa42fe31a5f00f9c848cf31548b"}],"stats":{"total":253,"additions":138,"deletions":115},"files":[{"sha":"996f7842be39d9f370d09eda1ad0b5e8f09cf3bf","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22a9e12e5e001de4926deb9052ba28bd98a85d62/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22a9e12e5e001de4926deb9052ba28bd98a85d62/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java?ref=22a9e12e5e001de4926deb9052ba28bd98a85d62","patch":"@@ -160,23 +160,23 @@ Response exportExecutionResult(@NotNull @PathParam(\"executionKey\") Long executio\n             @QueryParam(\"format\") ReportExecExportFormat fmt);\n \n     /**\n-     * List report jobs of the given type\n+     * List report jobs of the given type.\n      *\n      * @param type of report job\n-     * @return List of ReportExecTO\n+     * @return list of report jobs of the given type\n      */\n     @GET\n     @Path(\"jobs\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<ReportExecTO> list(@MatrixParam(\"type\") JobStatusType type);\n+    List<ReportExecTO> listJobs(@MatrixParam(\"type\") JobStatusType type);\n \n     /**\n-     * Execute a control action on an existing report\n+     * Executes an action on an existing report's job.\n      *\n+     * @param reportKey report key\n      * @param action\n-     * @param reportId id of report\n      */\n     @POST\n-    @Path(\"{reportId}\")\n-    void process(@QueryParam(\"action\") JobAction action, @PathParam(\"reportId\") Long reportId);\n+    @Path(\"{reportKey}\")\n+    void actionJob(@PathParam(\"reportKey\") Long reportKey, @QueryParam(\"action\") JobAction action);\n }"},{"sha":"84b7cbf70c990e0542a8285936d7a3211c98de21","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22a9e12e5e001de4926deb9052ba28bd98a85d62/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22a9e12e5e001de4926deb9052ba28bd98a85d62/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=22a9e12e5e001de4926deb9052ba28bd98a85d62","patch":"@@ -172,23 +172,23 @@ TaskExecTO execute(@NotNull @PathParam(\"taskKey\") Long taskKey,\n     BulkActionResult bulk(@NotNull BulkAction bulkAction);\n \n     /**\n-     * List task jobs of the given type\n+     * List task jobs of the given type.\n      *\n      * @param type of task job\n-     * @return List of TaskExecTO\n+     * @return list task jobs of the given type\n      */\n     @GET\n     @Path(\"jobs\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<TaskExecTO> list(@MatrixParam(\"type\") JobStatusType type);\n+    List<TaskExecTO> listJobs(@MatrixParam(\"type\") JobStatusType type);\n \n     /**\n-     * Execute a control action on an existing task\n+     * Executes an action on an existing task's job.\n      *\n+     * @param taskKey task key\n      * @param action\n-     * @param taskId id of task\n      */\n     @POST\n-    @Path(\"{taskId}\")\n-    void process(@QueryParam(\"action\") JobAction action, @PathParam(\"taskId\") Long taskId);\n+    @Path(\"{taskKey}\")\n+    void actionJob(@PathParam(\"taskKey\") Long taskKey, @QueryParam(\"action\") JobAction action);\n }"},{"sha":"e423174b7008a40341f5f28bf2b7f35023bc9a02","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractJobLogic.java","status":"modified","additions":64,"deletions":45,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22a9e12e5e001de4926deb9052ba28bd98a85d62/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22a9e12e5e001de4926deb9052ba28bd98a85d62/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java?ref=22a9e12e5e001de4926deb9052ba28bd98a85d62","patch":"@@ -22,6 +22,8 @@\n import java.util.List;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.to.AbstractExecTO;\n+import org.apache.syncope.common.lib.to.ReportExecTO;\n+import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n import org.quartz.JobExecutionContext;\n@@ -40,99 +42,114 @@\n \n     protected abstract Long getKeyFromJobName(final JobKey jobKey);\n \n-    public <E extends AbstractExecTO> List<E> list(final JobStatusType type, final Class<E> reference) {\n-        List<E> jobExecTOs = new ArrayList<E>();\n+    private <E extends AbstractExecTO> void setTaskOrReportKey(final E jobExecTO, final Long taskOrReportKey) {\n+        if (jobExecTO instanceof TaskExecTO) {\n+            ((TaskExecTO) jobExecTO).setTask(taskOrReportKey);\n+        } else if (jobExecTO instanceof ReportExecTO) {\n+            ((ReportExecTO) jobExecTO).setReport(taskOrReportKey);\n+        }\n+    }\n+\n+    public <E extends AbstractExecTO> List<E> listJobs(final JobStatusType type, final Class<E> reference) {\n+        List<E> jobExecTOs = new ArrayList<>();\n \n         switch (type) {\n             case ALL:\n                 try {\n                     for (String groupName : scheduler.getScheduler().getJobGroupNames()) {\n-                        for (JobKey jobKey : scheduler.getScheduler().getJobKeys(GroupMatcher.\n-                                jobGroupEquals(groupName))) {\n+                        for (JobKey jobKey\n+                                : scheduler.getScheduler().getJobKeys(GroupMatcher.jobGroupEquals(groupName))) {\n \n-                            Long jobId = getKeyFromJobName(jobKey);\n-                            if (jobId != null) {\n+                            Long key = getKeyFromJobName(jobKey);\n+                            if (key != null) {\n                                 List<? extends Trigger> jobTriggers = scheduler.getScheduler().getTriggersOfJob(jobKey);\n-                                if (jobTriggers.size() > 0) {\n+                                if (jobTriggers.isEmpty()) {\n+                                    E jobExecTO = reference.newInstance();\n+                                    setTaskOrReportKey(jobExecTO, key);\n+                                    jobExecTO.setStatus(\"Not Scheduled\");\n+\n+                                    jobExecTOs.add(jobExecTO);\n+                                } else {\n                                     for (Trigger t : jobTriggers) {\n                                         E jobExecTO = reference.newInstance();\n-                                        jobExecTO.setKey(jobId);\n+                                        jobExecTO.setKey(key);\n                                         jobExecTO.\n                                                 setStatus(scheduler.getScheduler().getTriggerState(t.getKey()).name());\n                                         jobExecTO.setStartDate(t.getStartTime());\n+\n                                         jobExecTOs.add(jobExecTO);\n                                     }\n-                                } else {\n-                                    E jobExecTO = reference.newInstance();\n-                                    jobExecTO.setKey(jobId);\n-                                    jobExecTO.setStatus(\"Not Scheduled\");\n-                                    jobExecTOs.add(jobExecTO);\n                                 }\n                             }\n                         }\n                     }\n-                } catch (SchedulerException ex) {\n-                    LOG.debug(\"Problems during retrieving all scheduled jobs {}\", ex);\n-                } catch (InstantiationException ex) {\n-                    LOG.debug(\"Problems during instantiating {}  {}\", reference, ex);\n-                } catch (IllegalAccessException ex) {\n-                    LOG.debug(\"Problems during accessing {}  {}\", reference, ex);\n+                } catch (SchedulerException e) {\n+                    LOG.debug(\"Problems while retrieving all scheduled jobs\", e);\n+                } catch (InstantiationException e) {\n+                    LOG.debug(\"Problems while instantiating {}\", reference, e);\n+                } catch (IllegalAccessException e) {\n+                    LOG.debug(\"Problems while accessing {}\", reference, e);\n                 }\n                 break;\n+\n             case RUNNING:\n                 try {\n                     for (JobExecutionContext jec : scheduler.getScheduler().getCurrentlyExecutingJobs()) {\n-                        Long jobId = getKeyFromJobName(jec.getJobDetail().getKey());\n-                        if (jobId != null) {\n+                        Long key = getKeyFromJobName(jec.getJobDetail().getKey());\n+                        if (key != null) {\n                             E jobExecTO = reference.newInstance();\n-                            jobExecTO.setKey(jobId);\n-                            jobExecTO.setStatus(scheduler.getScheduler().getTriggerState(jec.getTrigger().getKey()).\n-                                    name());\n+                            setTaskOrReportKey(jobExecTO, key);\n+                            jobExecTO.setStatus(\n+                                    scheduler.getScheduler().getTriggerState(jec.getTrigger().getKey()).name());\n                             jobExecTO.setStartDate(jec.getFireTime());\n+\n                             jobExecTOs.add(jobExecTO);\n                         }\n                     }\n-                } catch (SchedulerException ex) {\n-                    LOG.debug(\"Problems during retrieving all currently executing jobs {}\", ex);\n-                } catch (InstantiationException ex) {\n-                    LOG.debug(\"Problems during instantiating {}  {}\", reference, ex);\n-                } catch (IllegalAccessException ex) {\n-                    LOG.debug(\"Problems during accessing {}  {}\", reference, ex);\n+                } catch (SchedulerException e) {\n+                    LOG.debug(\"Problems while retrieving all currently executing jobs\", e);\n+                } catch (InstantiationException e) {\n+                    LOG.debug(\"Problems while instantiating {}\", reference, e);\n+                } catch (IllegalAccessException e) {\n+                    LOG.debug(\"Problems while accessing {}\", reference, e);\n                 }\n                 break;\n+\n             case SCHEDULED:\n                 try {\n                     for (String groupName : scheduler.getScheduler().getJobGroupNames()) {\n-                        for (JobKey jobKey : scheduler.getScheduler().getJobKeys(GroupMatcher.\n-                                jobGroupEquals(groupName))) {\n-                            Long jobId = getKeyFromJobName(jobKey);\n-                            if (jobId != null) {\n+                        for (JobKey jobKey\n+                                : scheduler.getScheduler().getJobKeys(GroupMatcher.jobGroupEquals(groupName))) {\n+\n+                            Long key = getKeyFromJobName(jobKey);\n+                            if (key != null) {\n                                 List<? extends Trigger> jobTriggers = scheduler.getScheduler().getTriggersOfJob(jobKey);\n                                 for (Trigger t : jobTriggers) {\n                                     E jobExecTO = reference.newInstance();\n-                                    jobExecTO.setKey(jobId);\n+                                    setTaskOrReportKey(jobExecTO, key);\n                                     jobExecTO.setStatus(scheduler.getScheduler().getTriggerState(t.getKey()).name());\n                                     jobExecTO.setStartDate(t.getStartTime());\n+\n                                     jobExecTOs.add(jobExecTO);\n                                 }\n                             }\n                         }\n                     }\n-                } catch (SchedulerException ex) {\n-                    LOG.debug(\"Problems during retrieving all scheduled jobs {}\", ex);\n-                } catch (InstantiationException ex) {\n-                    LOG.debug(\"Problems during instantiating {}  {}\", reference, ex);\n-                } catch (IllegalAccessException ex) {\n-                    LOG.debug(\"Problems during accessing {}  {}\", reference, ex);\n+                } catch (SchedulerException e) {\n+                    LOG.debug(\"Problems while retrieving all scheduled jobs\", e);\n+                } catch (InstantiationException e) {\n+                    LOG.debug(\"Problems while instantiating {}\", reference, e);\n+                } catch (IllegalAccessException e) {\n+                    LOG.debug(\"Problems while accessing {}\", reference, e);\n                 }\n                 break;\n+\n             default:\n         }\n         return jobExecTOs;\n     }\n \n-    protected void process(final JobAction action, final String jobName) {\n-\n+    protected void actionJob(final String jobName, final JobAction action) {\n         if (jobName != null) {\n             JobKey jobKey = new JobKey(jobName, Scheduler.DEFAULT_GROUP);\n             try {\n@@ -141,14 +158,16 @@ protected void process(final JobAction action, final String jobName) {\n                         case START:\n                             scheduler.getScheduler().triggerJob(jobKey);\n                             break;\n+\n                         case STOP:\n                             scheduler.getScheduler().interrupt(jobKey);\n                             break;\n+\n                         default:\n                     }\n                 }\n-            } catch (SchedulerException ex) {\n-                LOG.debug(\"Problems during {} operation on job with id {}\", action.toString(), ex);\n+            } catch (SchedulerException e) {\n+                LOG.debug(\"Problems during {} operation on job {}\", action.toString(), jobName, e);\n             }\n         }\n     }"},{"sha":"4c3230c4e3f3e8a18129e0a6bb6ce37719dc693a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22a9e12e5e001de4926deb9052ba28bd98a85d62/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22a9e12e5e001de4926deb9052ba28bd98a85d62/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=22a9e12e5e001de4926deb9052ba28bd98a85d62","patch":"@@ -403,18 +403,18 @@ protected ReportTO resolveReference(final Method method, final Object... args)\n \n     @Override\n     @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_LIST + \"')\")\n-    public <E extends AbstractExecTO> List<E> list(final JobStatusType type, final Class<E> reference) {\n-        return super.list(type, reference);\n+    public <E extends AbstractExecTO> List<E> listJobs(final JobStatusType type, final Class<E> reference) {\n+        return super.listJobs(type, reference);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_EXECUTE + \"')\")\n-    public void process(final JobAction action, final Long reportKey) {\n+    public void actionJob(final Long reportKey, final JobAction action) {\n         Report report = reportDAO.find(reportKey);\n         if (report == null) {\n             throw new NotFoundException(\"Report \" + reportKey);\n         }\n         String jobName = JobNamer.getJobName(report);\n-        process(action, jobName);\n+        actionJob(jobName, action);\n     }\n \n     @Override"},{"sha":"82dc8d1242b0a2d36a80bb78f7120bf413befc7c","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22a9e12e5e001de4926deb9052ba28bd98a85d62/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22a9e12e5e001de4926deb9052ba28bd98a85d62/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=22a9e12e5e001de4926deb9052ba28bd98a85d62","patch":"@@ -342,18 +342,18 @@ protected AbstractTaskTO resolveReference(final Method method, final Object... a\n \n     @Override\n     @PreAuthorize(\"hasRole('\" + Entitlement.TASK_LIST + \"')\")\n-    public <E extends AbstractExecTO> List<E> list(final JobStatusType type, final Class<E> reference) {\n-        return super.list(type, reference);\n+    public <E extends AbstractExecTO> List<E> listJobs(final JobStatusType type, final Class<E> reference) {\n+        return super.listJobs(type, reference);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.TASK_EXECUTE + \"')\")\n-    public void process(final JobAction action, final Long taskId) {\n-        Task task = taskDAO.find(taskId);\n+    public void actionJob(final Long taskKey, final JobAction action) {\n+        Task task = taskDAO.find(taskKey);\n         if (task == null) {\n-            throw new NotFoundException(\"Task \" + taskId);\n+            throw new NotFoundException(\"Task \" + taskKey);\n         }\n         String jobName = JobNamer.getJobName(task);\n-        process(action, jobName);\n+        actionJob(jobName, action);\n     }\n \n     @Override"},{"sha":"53d974e3cdd5c7c5662a2c4a727dccb05078ca6e","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22a9e12e5e001de4926deb9052ba28bd98a85d62/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22a9e12e5e001de4926deb9052ba28bd98a85d62/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=22a9e12e5e001de4926deb9052ba28bd98a85d62","patch":"@@ -246,7 +246,7 @@ public UserTO update(final UserMod userMod) {\n \n         Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(actual, removeMemberships);\n \n-        final UserTO updatedTO = binder.getUserTO(updated.getKey());\n+        UserTO updatedTO = binder.getUserTO(updated.getKey());\n         updatedTO.getPropagationStatusTOs().addAll(updated.getValue());\n         return updatedTO;\n     }"},{"sha":"58202b7ef167ef919e0dbca034f0cdba6406faf0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22a9e12e5e001de4926deb9052ba28bd98a85d62/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22a9e12e5e001de4926deb9052ba28bd98a85d62/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandler.java?ref=22a9e12e5e001de4926deb9052ba28bd98a85d62","patch":"@@ -292,7 +292,7 @@ public PropagationByResource fillMembershipVirtual(\n             final Long key, final Long groupKey, final Long membershipKey, final Set<String> vAttrsToBeRemoved,\n             final Set<AttrMod> vAttrsToBeUpdated, final boolean isRemoval) {\n \n-        final Membership membership = membershipKey == null\n+        Membership membership = membershipKey == null\n                 ? userDAO.authFetch(key).getMembership(groupKey)\n                 : membershipDAO.authFetch(membershipKey);\n "},{"sha":"d21afc5ac45b2aff36b5dd61827aab59ac889429","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":15,"deletions":16,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22a9e12e5e001de4926deb9052ba28bd98a85d62/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22a9e12e5e001de4926deb9052ba28bd98a85d62/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=22a9e12e5e001de4926deb9052ba28bd98a85d62","patch":"@@ -275,7 +275,7 @@ public List<PropagationTask> getUserUpdateTasks(final WorkflowResult<Pair<UserMo\n                 tasks.addAll(getUserUpdateTasks(wfResult, true, toBeExcluded));\n             }\n \n-            final PropagationByResource nonPwdPropByRes = new PropagationByResource();\n+            PropagationByResource nonPwdPropByRes = new PropagationByResource();\n             nonPwdPropByRes.merge(origPropByRes);\n             nonPwdPropByRes.removeAll(pwdResourceNames);\n             nonPwdPropByRes.purge();\n@@ -318,20 +318,19 @@ public List<PropagationTask> getUpdateTasks(final Subject<?, ?, ?> subject,\n             resourceNames = userDAO.findAllResourceNames(user);\n             for (final Membership membership : user.getMemberships()) {\n                 if (membership.getVirAttrs() != null && !membership.getVirAttrs().isEmpty()) {\n-                    final MembershipMod membershipMod = CollectionUtils.find(membershipsToAdd,\n-                            new Predicate<MembershipMod>() {\n-\n-                                @Override\n-                                public boolean evaluate(final MembershipMod membershipMod) {\n-                                    return membershipMod.getGroup() == membership.getGroup().getKey();\n-                                }\n-                            });\n-                    if (membershipMod != null) {\n-                        virAttrHandler.fillVirtual(membership, membershipMod.getVirAttrsToRemove() == null\n+                    MembershipMod membMod = CollectionUtils.find(membershipsToAdd, new Predicate<MembershipMod>() {\n+\n+                        @Override\n+                        public boolean evaluate(final MembershipMod membershipMod) {\n+                            return membershipMod.getGroup() == membership.getGroup().getKey();\n+                        }\n+                    });\n+                    if (membMod != null) {\n+                        virAttrHandler.fillVirtual(membership, membMod.getVirAttrsToRemove() == null\n                                 ? Collections.<String>emptySet()\n-                                : membershipMod.getVirAttrsToRemove(),\n-                                membershipMod.getVirAttrsToUpdate() == null ? Collections.<AttrMod>emptySet()\n-                                        : membershipMod.getVirAttrsToUpdate(), attrUtilsFactory.getInstance(\n+                                : membMod.getVirAttrsToRemove(),\n+                                membMod.getVirAttrsToUpdate() == null ? Collections.<AttrMod>emptySet()\n+                                        : membMod.getVirAttrsToUpdate(), attrUtilsFactory.getInstance(\n                                         AttributableType.MEMBERSHIP));\n                     }\n                 }\n@@ -431,7 +430,7 @@ protected List<PropagationTask> getDeleteTaskIds(\n             final Collection<String> resourceNames,\n             final Collection<String> noPropResourceNames) {\n \n-        final PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource propByRes = new PropagationByResource();\n         propByRes.set(ResourceOperation.DELETE, resourceNames);\n         if (noPropResourceNames != null && !noPropResourceNames.isEmpty()) {\n             propByRes.get(ResourceOperation.DELETE).removeAll(noPropResourceNames);\n@@ -485,7 +484,7 @@ protected List<PropagationTask> createTasks(final Subject<?, ?, ?> subject,\n         propByRes.purge();\n         LOG.debug(\"After purge: {}\", propByRes);\n \n-        final List<PropagationTask> tasks = new ArrayList<>();\n+        List<PropagationTask> tasks = new ArrayList<>();\n \n         for (ResourceOperation operation : ResourceOperation.values()) {\n             for (String resourceName : propByRes.get(operation)) {"},{"sha":"3c910fae0e5361cf752aeab5b7add96a2e887c81","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportServiceImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22a9e12e5e001de4926deb9052ba28bd98a85d62/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22a9e12e5e001de4926deb9052ba28bd98a85d62/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java?ref=22a9e12e5e001de4926deb9052ba28bd98a85d62","patch":"@@ -123,12 +123,12 @@ public void deleteExecution(final Long executionKey) {\n     }\n \n     @Override\n-    public List<ReportExecTO> list(final JobStatusType type) {\n-        return logic.list(type, ReportExecTO.class);\n+    public List<ReportExecTO> listJobs(final JobStatusType type) {\n+        return logic.listJobs(type, ReportExecTO.class);\n     }\n \n     @Override\n-    public void process(final JobAction action, final Long reportId) {\n-        logic.process(action, reportId);\n+    public void actionJob(final Long reportKey, final JobAction action) {\n+        logic.actionJob(reportKey, action);\n     }\n }"},{"sha":"9da72aab9e3840bc27f2937319d15b625d965064","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22a9e12e5e001de4926deb9052ba28bd98a85d62/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22a9e12e5e001de4926deb9052ba28bd98a85d62/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=22a9e12e5e001de4926deb9052ba28bd98a85d62","patch":"@@ -168,12 +168,12 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n     }\n \n     @Override\n-    public List<TaskExecTO> list(final JobStatusType type) {\n-        return logic.list(type, TaskExecTO.class);\n+    public List<TaskExecTO> listJobs(final JobStatusType type) {\n+        return logic.listJobs(type, TaskExecTO.class);\n     }\n \n     @Override\n-    public void process(final JobAction action, final Long taskId) {\n-        logic.process(action, taskId);\n+    public void actionJob(final Long taskKey, final JobAction action) {\n+        logic.actionJob(taskKey, action);\n     }\n }"},{"sha":"4c89caf972f04dd2ec9c79673218b96423257628","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22a9e12e5e001de4926deb9052ba28bd98a85d62/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22a9e12e5e001de4926deb9052ba28bd98a85d62/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=22a9e12e5e001de4926deb9052ba28bd98a85d62","patch":"@@ -359,13 +359,15 @@ protected WorkflowResult<Pair<UserMod, Boolean>> doUpdate(final User user, final\n \n         PropagationByResource propByRes =\n                 runtimeService.getVariable(user.getWorkflowId(), PROP_BY_RESOURCE, PropagationByResource.class);\n+        UserMod updatedMod =\n+                runtimeService.getVariable(user.getWorkflowId(), USER_MOD, UserMod.class);\n \n-        saveForFormSubmit(updated, userMod.getPassword(), propByRes);\n+        saveForFormSubmit(updated, updatedMod.getPassword(), propByRes);\n \n         Boolean propagateEnable = runtimeService.getVariable(user.getWorkflowId(), PROPAGATE_ENABLE, Boolean.class);\n \n         return new WorkflowResult<Pair<UserMod, Boolean>>(\n-                new ImmutablePair<>(userMod, propagateEnable), propByRes, tasks);\n+                new ImmutablePair<>(updatedMod, propagateEnable), propByRes, tasks);\n     }\n \n     @Override"},{"sha":"4da56c6357a8eb6076aa76d75ae479122670b371","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/task/Update.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22a9e12e5e001de4926deb9052ba28bd98a85d62/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FUpdate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22a9e12e5e001de4926deb9052ba28bd98a85d62/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FUpdate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FUpdate.java?ref=22a9e12e5e001de4926deb9052ba28bd98a85d62","patch":"@@ -40,15 +40,18 @@ protected void doExecute(final String executionId) {\n                 runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.USER_MOD, UserMod.class);\n \n         // update password internally only if required\n-        UserMod actualMod = SerializationUtils.clone(userMod);\n-        if (actualMod.getPwdPropRequest() != null && !actualMod.getPwdPropRequest().isOnSyncope()) {\n-            actualMod.setPassword(null);\n+        UserMod updatedMod = SerializationUtils.clone(userMod);\n+        String updatedPwd = updatedMod.getPassword();\n+        if (updatedMod.getPwdPropRequest() != null && !updatedMod.getPwdPropRequest().isOnSyncope()) {\n+            updatedMod.setPassword(null);\n         }\n         // update user\n-        PropagationByResource propByRes = dataBinder.update(user, actualMod);\n+        PropagationByResource propByRes = dataBinder.update(user, updatedMod);\n+        updatedMod.setPassword(updatedPwd);\n \n         // report updated user and propagation by resource as result\n         runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.USER, user);\n+        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.USER_MOD, updatedMod);\n         runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.PROP_BY_RESOURCE, propByRes);\n     }\n }"},{"sha":"e31190f83f53cc62841f79862809b2a033672f32","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SchedTaskITCase.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22a9e12e5e001de4926deb9052ba28bd98a85d62/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22a9e12e5e001de4926deb9052ba28bd98a85d62/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java?ref=22a9e12e5e001de4926deb9052ba28bd98a85d62","patch":"@@ -22,6 +22,7 @@\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import java.util.List;\n@@ -110,58 +111,57 @@ public void issueSYNCOPE144() {\n \n     @Test\n     public void issueSYNCOPE660() {\n-        List<TaskExecTO> list = taskService.list(JobStatusType.ALL);\n+        List<TaskExecTO> list = taskService.listJobs(JobStatusType.ALL);\n         int old_size = list.size();\n \n-        list = taskService.list(JobStatusType.SCHEDULED);\n-\n         SchedTaskTO task = new SchedTaskTO();\n         task.setName(\"issueSYNCOPE660\");\n         task.setDescription(\"issueSYNCOPE660 Description\");\n         task.setJobClassName(TestSampleJob.class.getName());\n \n         Response response = taskService.create(task);\n-        SchedTaskTO actual = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n+        task = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n \n-        list = taskService.list(JobStatusType.ALL);\n-        assertEquals(list.size(), old_size + 1);\n+        list = taskService.listJobs(JobStatusType.ALL);\n+        assertEquals(old_size + 1, list.size());\n \n-        taskService.process(JobAction.START, actual.getKey());\n+        taskService.actionJob(task.getKey(), JobAction.START);\n \n         int i = 0, maxit = 50;\n \n-        // wait for task exec completion (executions incremented)\n         do {\n             try {\n                 Thread.sleep(1000);\n             } catch (InterruptedException e) {\n+                // ignore\n             }\n \n-            list = taskService.list(JobStatusType.RUNNING);\n+            list = taskService.listJobs(JobStatusType.RUNNING);\n \n             assertNotNull(list);\n             i++;\n         } while (list.size() < 1 && i < maxit);\n \n-        assertEquals(list.size(), 1);\n+        assertEquals(1, list.size());\n+        assertEquals(task.getKey(), list.get(0).getTask());\n \n-        taskService.process(JobAction.STOP, actual.getKey());\n+        taskService.actionJob(task.getKey(), JobAction.STOP);\n \n         i = 0;\n \n-        // wait for task exec completion (executions incremented)\n         do {\n             try {\n                 Thread.sleep(1000);\n             } catch (InterruptedException e) {\n+                // ignore\n             }\n \n-            list = taskService.list(JobStatusType.RUNNING);\n+            list = taskService.listJobs(JobStatusType.RUNNING);\n \n             assertNotNull(list);\n             i++;\n         } while (list.size() >= 1 && i < maxit);\n \n-        assertEquals(list.size(), 0);\n+        assertTrue(list.isEmpty());\n     }\n }"}]}