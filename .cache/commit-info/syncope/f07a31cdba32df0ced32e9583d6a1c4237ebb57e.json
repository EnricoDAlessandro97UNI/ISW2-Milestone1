{"sha":"f07a31cdba32df0ced32e9583d6a1c4237ebb57e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmYwN2EzMWNkYmEzMmRmMGNlZDMyZTk1ODNkNmExYzQyMzdlYmI1N2U=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2019-01-08T14:57:57Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2019-01-08T15:47:08Z"},"message":"[SYNCOPE-1424] changes the way to build the task search query and fixes some test weeknesses","tree":{"sha":"ee1e72ed2ba338ce79de0ee65731b95f15a7f9f7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ee1e72ed2ba338ce79de0ee65731b95f15a7f9f7"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f07a31cdba32df0ced32e9583d6a1c4237ebb57e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f07a31cdba32df0ced32e9583d6a1c4237ebb57e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f07a31cdba32df0ced32e9583d6a1c4237ebb57e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f07a31cdba32df0ced32e9583d6a1c4237ebb57e/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"be3e26706ec5dfe04368d18177dfc4f39eb55f0d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/be3e26706ec5dfe04368d18177dfc4f39eb55f0d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/be3e26706ec5dfe04368d18177dfc4f39eb55f0d"}],"stats":{"total":105,"additions":54,"deletions":51},"files":[{"sha":"3e8f80eacd6baea6e636b2f2c546aebbfad418c9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f07a31cdba32df0ced32e9583d6a1c4237ebb57e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f07a31cdba32df0ced32e9583d6a1c4237ebb57e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=f07a31cdba32df0ced32e9583d6a1c4237ebb57e","patch":"@@ -231,22 +231,28 @@ private StringBuilder buildFindAllQuery(\n             throw new IllegalArgumentException(type + \" is not related to notifications\");\n         }\n \n-        StringBuilder queryString = new StringBuilder(\"SELECT \").\n-                append(AbstractTask.TABLE).\n-                append(\".id FROM \").\n-                append(AbstractTask.TABLE);\n+        StringBuilder queryString = new StringBuilder(\"SELECT \").append(AbstractTask.TABLE).append(\".*\");\n+\n         if (orderByTaskExecInfo) {\n-            queryString.append(\" LEFT OUTER JOIN \").\n-                    append(JPATaskExec.TABLE).\n-                    append(\" ON \").\n-                    append(AbstractTask.TABLE).\n-                    append(\".id = \").\n-                    append(JPATaskExec.TABLE).\n-                    append(\".task_id\");\n+            queryString.append(\",\").append(JPATaskExec.TABLE).append(\".startDate AS startDate\").\n+                    append(\",\").append(JPATaskExec.TABLE).append(\".endDate AS endDate\").\n+                    append(\",\").append(JPATaskExec.TABLE).append(\".status AS status\").\n+                    append(\" FROM \").append(AbstractTask.TABLE).\n+                    append(\",\").append(JPATaskExec.TABLE).append(\",\").append(\"(SELECT \").\n+                    append(JPATaskExec.TABLE).append(\".task_id, \").\n+                    append(\"MAX(\").append(JPATaskExec.TABLE).append(\".startDate) AS startDate\").\n+                    append(\" FROM \").append(JPATaskExec.TABLE).\n+                    append(\" GROUP BY \").append(JPATaskExec.TABLE).append(\".task_id) GRP\").\n+                    append(\" WHERE \").\n+                    append(AbstractTask.TABLE).append(\".id=\").append(JPATaskExec.TABLE).append(\".task_id\").\n+                    append(\" AND \").append(AbstractTask.TABLE).append(\".id=\").append(\"GRP.task_id\").\n+                    append(\" AND \").append(JPATaskExec.TABLE).append(\".startDate=\").append(\"GRP.startDate\").\n+                    append(\" AND \").append(AbstractTask.TABLE).append(\".DTYPE = ?1\");\n+        } else {\n+            queryString.append(\", null AS startDate, null AS endDate, null AS status FROM \").append(AbstractTask.TABLE).\n+                    append(\" WHERE \").append(AbstractTask.TABLE).append(\".DTYPE = ?1\");\n         }\n-        queryString.append(\" WHERE \").\n-                append(AbstractTask.TABLE).\n-                append(\".DTYPE = ?1\");\n+\n         queryParameters.add(getEntityTableName(type));\n         if (type == TaskType.SCHEDULED) {\n             queryString.append(\" AND \").\n@@ -294,34 +300,15 @@ private StringBuilder buildFindAllQuery(\n         return queryString;\n     }\n \n-    private String toOrderByStatement(\n-            final Class<? extends Task> beanClass,\n-            final List<OrderByClause> orderByClauses,\n-            final boolean orderByTaskExecInfo) {\n+    private String toOrderByStatement(final Class<? extends Task> beanClass, final List<OrderByClause> orderByClauses) {\n \n         StringBuilder statement = new StringBuilder();\n \n-        if (orderByTaskExecInfo) {\n-            statement.append(\" AND (\").\n-                    append(JPATaskExec.TABLE).\n-                    append(\".startDate IS NULL OR \").\n-                    append(JPATaskExec.TABLE).\n-                    append(\".startDate = (SELECT MAX(\").\n-                    append(JPATaskExec.TABLE).\n-                    append(\".startDate) FROM \").\n-                    append(JPATaskExec.TABLE).\n-                    append(\" WHERE \").\n-                    append(AbstractTask.TABLE).\n-                    append(\".id = \").\n-                    append(JPATaskExec.TABLE).\n-                    append(\".task_id))\");\n-        }\n         statement.append(\" ORDER BY \");\n \n         StringBuilder subStatement = new StringBuilder();\n         orderByClauses.forEach(clause -> {\n             String field = clause.getField().trim();\n-            String table = JPATaskExec.TABLE;\n             switch (field) {\n                 case \"latestExecStatus\":\n                     field = \"status\";\n@@ -342,19 +329,13 @@ private String toOrderByStatement(\n                             || beanField.getAnnotation(OneToMany.class) != null)) {\n                         field += \"_id\";\n                     }\n-                    table = AbstractTask.TABLE;\n             }\n-            subStatement.append(table).\n-                    append(\".\").\n-                    append(field).\n-                    append(' ').\n-                    append(clause.getDirection().name()).\n-                    append(',');\n+\n+            subStatement.append(field).append(' ').append(clause.getDirection().name()).append(',');\n         });\n \n         if (subStatement.length() == 0) {\n-            statement.append(AbstractTask.TABLE).\n-                    append(\".id DESC\");\n+            statement.append(\"id DESC\");\n         } else {\n             subStatement.deleteCharAt(subStatement.length() - 1);\n             statement.append(subStatement);\n@@ -390,8 +371,27 @@ public <T extends Task> List<T> findAll(\n                 anyTypeKind,\n                 entityKey,\n                 orderByTaskExecInfo,\n-                queryParameters).\n-                append(toOrderByStatement(getEntityReference(type), orderByClauses, orderByTaskExecInfo));\n+                queryParameters);\n+\n+        if (orderByTaskExecInfo) {\n+            // UNION with tasks without executions...\n+            queryString.insert(0, \"SELECT T.id FROM ((\").append(\") UNION ALL (\").\n+                    append(buildFindAllQuery(\n+                            type,\n+                            resource,\n+                            notification,\n+                            anyTypeKind,\n+                            entityKey,\n+                            false,\n+                            queryParameters)).\n+                    append(\" AND id NOT IN \").\n+                    append(\"(SELECT task_id AS id FROM \").append(JPATaskExec.TABLE).append(\")\").\n+                    append(\")) T\");\n+        } else {\n+            queryString.insert(0, \"SELECT T.id FROM (\").append(\") T\");\n+        }\n+\n+        queryString.append(toOrderByStatement(getEntityReference(type), orderByClauses));\n \n         Query query = entityManager().createNativeQuery(queryString.toString());\n \n@@ -423,7 +423,7 @@ public int count(\n \n         Query query = entityManager().createNativeQuery(StringUtils.replaceOnce(\n                 queryString.toString(),\n-                \"SELECT \" + AbstractTask.TABLE + \".id\",\n+                \"SELECT \" + AbstractTask.TABLE + \".*, null AS startDate, null AS endDate, null AS status\",\n                 \"SELECT COUNT(\" + AbstractTask.TABLE + \".id)\"));\n \n         for (int i = 1; i <= queryParameters.size(); i++) {"},{"sha":"c0dd90a2171f8c9f5ae7570f373f7e29fc580594","filename":"fit/core-reference/src/main/resources/mariadb/domains/Master.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f07a31cdba32df0ced32e9583d6a1c4237ebb57e/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmariadb%2Fdomains%2FMaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f07a31cdba32df0ced32e9583d6a1c4237ebb57e/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmariadb%2Fdomains%2FMaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmariadb%2Fdomains%2FMaster.properties?ref=f07a31cdba32df0ced32e9583d6a1c4237ebb57e","patch":"@@ -19,7 +19,7 @@ Master.url=jdbc:mariadb://localhost:3306/syncope?characterEncoding=UTF-8\n Master.schema=\n Master.username=syncope\n Master.password=syncope\n-Master.databasePlatform=org.apache.openjpa.jdbc.sql.MariaDBDictionary(blobTypeName=LONGBLOB)\n+Master.databasePlatform=org.apache.openjpa.jdbc.sql.MariaDBDictionary(blobTypeName=LONGBLOB,timestampTypeName=DATETIME(3))\n Master.orm=META-INF/spring-orm.xml\n \n Master.pool.maxActive=10"},{"sha":"a4abb99b7b3a7fdac080dcde26171593c8a2ae15","filename":"fit/core-reference/src/main/resources/mysql/domains/Master.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f07a31cdba32df0ced32e9583d6a1c4237ebb57e/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmysql%2Fdomains%2FMaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f07a31cdba32df0ced32e9583d6a1c4237ebb57e/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmysql%2Fdomains%2FMaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmysql%2Fdomains%2FMaster.properties?ref=f07a31cdba32df0ced32e9583d6a1c4237ebb57e","patch":"@@ -19,7 +19,7 @@ Master.url=jdbc:mysql://localhost:3306/syncope?characterEncoding=UTF-8&relaxAuto\n Master.schema=\n Master.username=syncope\n Master.password=syncope\n-Master.databasePlatform=org.apache.openjpa.jdbc.sql.MySQLDictionary(blobTypeName=LONGBLOB)\n+Master.databasePlatform=org.apache.openjpa.jdbc.sql.MySQLDictionary(blobTypeName=LONGBLOB,timestampTypeName=DATETIME(3))\n Master.orm=META-INF/spring-orm.xml\n \n Master.pool.maxActive=10"},{"sha":"abadc0b266257d27a313e048d12dfa66447464c3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f07a31cdba32df0ced32e9583d6a1c4237ebb57e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f07a31cdba32df0ced32e9583d6a1c4237ebb57e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=f07a31cdba32df0ced32e9583d6a1c4237ebb57e","patch":"@@ -215,13 +215,15 @@ public void issueSYNCOPE741() {\n \n         // check list\n         PagedResult<TaskTO> tasks = taskService.search(\n-                new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(2).details(false).build());\n+                new TaskQuery.Builder(TaskType.PROPAGATION).\n+                        page(1).size(2).orderBy(\"operation DESC\").details(false).build());\n         for (TaskTO item : tasks.getResult()) {\n             assertTrue(item.getExecutions().isEmpty());\n         }\n \n         tasks = taskService.search(\n-                new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(2).details(true).build());\n+                new TaskQuery.Builder(TaskType.PROPAGATION).\n+                        page(1).size(2).orderBy(\"operation DESC\").details(true).build());\n         for (TaskTO item : tasks.getResult()) {\n             assertFalse(item.getExecutions().isEmpty());\n         }"},{"sha":"5275206446a134a25f3ef6a28062b6df244b6bf5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f07a31cdba32df0ced32e9583d6a1c4237ebb57e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f07a31cdba32df0ced32e9583d6a1c4237ebb57e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=f07a31cdba32df0ced32e9583d6a1c4237ebb57e","patch":"@@ -92,6 +92,7 @@\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n import org.apache.syncope.common.rest.api.service.TaskService;\n+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n import org.apache.syncope.core.provisioning.java.pushpull.DBPasswordPullActions;\n import org.apache.syncope.core.provisioning.java.pushpull.LDAPPasswordPullActions;\n import org.apache.syncope.core.spring.security.Encryptor;\n@@ -874,7 +875,7 @@ public void issueSYNCOPE230() {\n \n         // 1. populate the external table\n         jdbcTemplate.execute(\"INSERT INTO testpull VALUES\"\n-                + \"('\" + id + \"', 'issuesyncope230', 'Surname', false, 'syncope230@syncope.apache.org', NULL)\");\n+                + \"('\" + id + \"', 'issuesyncope230', 'Surname230', false, 'syncope230@syncope.apache.org', NULL)\");\n \n         // 2. execute PullTask for resource-db-pull (table TESTPULL on external H2)\n         execProvisioningTask(taskService, TaskType.PULL, \"7c2242f4-14af-4ab5-af31-cdae23783655\", 50, false);"}]}