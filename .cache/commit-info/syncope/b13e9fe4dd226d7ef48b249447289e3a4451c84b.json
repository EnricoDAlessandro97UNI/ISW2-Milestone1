{"sha":"b13e9fe4dd226d7ef48b249447289e3a4451c84b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmIxM2U5ZmU0ZGQyMjZkN2VmNDhiMjQ5NDQ3Mjg5ZTNhNDQ1MWM4NGI=","commit":{"author":{"name":"giacomolm","email":"giacomolm@hotmail.it","date":"2015-06-22T14:45:28Z"},"committer":{"name":"giacomolm","email":"giacomolm@hotmail.it","date":"2015-06-22T14:45:28Z"},"message":"[SYNCOPE-660]Forcing interrupt for heavy tasks - minor improvement","tree":{"sha":"53a23a989ef289b46b15801c49e705855b3a5729","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/53a23a989ef289b46b15801c49e705855b3a5729"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b13e9fe4dd226d7ef48b249447289e3a4451c84b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b13e9fe4dd226d7ef48b249447289e3a4451c84b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b13e9fe4dd226d7ef48b249447289e3a4451c84b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b13e9fe4dd226d7ef48b249447289e3a4451c84b/comments","author":{"login":"giacomolm","id":4027829,"node_id":"MDQ6VXNlcjQwMjc4Mjk=","avatar_url":"https://avatars.githubusercontent.com/u/4027829?v=4","gravatar_id":"","url":"https://api.github.com/users/giacomolm","html_url":"https://github.com/giacomolm","followers_url":"https://api.github.com/users/giacomolm/followers","following_url":"https://api.github.com/users/giacomolm/following{/other_user}","gists_url":"https://api.github.com/users/giacomolm/gists{/gist_id}","starred_url":"https://api.github.com/users/giacomolm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/giacomolm/subscriptions","organizations_url":"https://api.github.com/users/giacomolm/orgs","repos_url":"https://api.github.com/users/giacomolm/repos","events_url":"https://api.github.com/users/giacomolm/events{/privacy}","received_events_url":"https://api.github.com/users/giacomolm/received_events","type":"User","site_admin":false},"committer":{"login":"giacomolm","id":4027829,"node_id":"MDQ6VXNlcjQwMjc4Mjk=","avatar_url":"https://avatars.githubusercontent.com/u/4027829?v=4","gravatar_id":"","url":"https://api.github.com/users/giacomolm","html_url":"https://github.com/giacomolm","followers_url":"https://api.github.com/users/giacomolm/followers","following_url":"https://api.github.com/users/giacomolm/following{/other_user}","gists_url":"https://api.github.com/users/giacomolm/gists{/gist_id}","starred_url":"https://api.github.com/users/giacomolm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/giacomolm/subscriptions","organizations_url":"https://api.github.com/users/giacomolm/orgs","repos_url":"https://api.github.com/users/giacomolm/repos","events_url":"https://api.github.com/users/giacomolm/events{/privacy}","received_events_url":"https://api.github.com/users/giacomolm/received_events","type":"User","site_admin":false},"parents":[{"sha":"0ae4ac8e9875f881cf8ac5cde299273b09af1fa8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0ae4ac8e9875f881cf8ac5cde299273b09af1fa8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0ae4ac8e9875f881cf8ac5cde299273b09af1fa8"},{"sha":"bdb3257c8f227716fe52d950aa6626e9bab84478","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bdb3257c8f227716fe52d950aa6626e9bab84478","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bdb3257c8f227716fe52d950aa6626e9bab84478"}],"stats":{"total":29,"additions":12,"deletions":17},"files":[{"sha":"728ab410ecb72737498e69a6da3b2317dbfda6d3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractTaskJob.java","status":"modified","additions":12,"deletions":17,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b13e9fe4dd226d7ef48b249447289e3a4451c84b/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b13e9fe4dd226d7ef48b249447289e3a4451c84b/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractTaskJob.java?ref=b13e9fe4dd226d7ef48b249447289e3a4451c84b","patch":"@@ -18,11 +18,8 @@\n  */\n package org.apache.syncope.core.provisioning.java.job;\n \n-import java.text.SimpleDateFormat;\n import java.util.Date;\n-import java.util.Locale;\n import java.util.concurrent.atomic.AtomicReference;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n@@ -32,6 +29,7 @@\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.provisioning.api.job.TaskJob;\n import org.apache.syncope.core.misc.AuditManager;\n+import org.apache.syncope.core.misc.DataFormat;\n import org.apache.syncope.core.misc.ExceptionUtils2;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n@@ -200,22 +198,19 @@ protected boolean hasToBeRegistered(final TaskExec execution) {\n     @Override\n     public void interrupt() throws UnableToInterruptJobException {\n         Thread thread = this.runningThread.getAndSet(null);\n-        if (thread != null) {\n-            LOG.info(\"Interrupting job time {} \", (new SimpleDateFormat(SyncopeConstants.DEFAULT_DATE_PATTERN, Locale.\n-                    getDefault())).format(new Date()));\n-            thread.interrupt();\n+        if (thread == null) {\n+            LOG.warn(\"Unable to retrieve the thread of the current job execution\");\n+        } else {\n+            LOG.info(\"Interrupting job from thread {} at {} \", thread.getId(), DataFormat.format(new Date()));\n+\n+            long maxRetry = confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue();\n+            for (int i = 0; i < maxRetry && thread.isAlive(); i++) {\n+                thread.interrupt();\n+            }\n+            // if the thread is still alive, it should be available in the next stop\n             if (thread.isAlive()) {\n-                long maxRetry = confDAO.find(\"tasks.interruptMaxRetries\", \"0\").getValues().get(0).getLongValue();\n-                for (int i = 0; i <= maxRetry && thread.isAlive(); i++) {\n-                    thread.interrupt();\n-                }\n-                //if the thread is still alive, it should be available in the next stop\n-                if (thread.isAlive()) {\n-                    this.runningThread.set(thread);\n-                }\n+                this.runningThread.set(thread);\n             }\n-        } else {\n-            LOG.warn(\"Unable to retrieve the right thread related to the current job execution\");\n         }\n     }\n }"}]}