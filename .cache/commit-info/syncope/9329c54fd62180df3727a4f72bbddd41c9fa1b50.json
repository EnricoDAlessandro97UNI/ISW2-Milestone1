{"sha":"9329c54fd62180df3727a4f72bbddd41c9fa1b50","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjkzMjljNTRmZDYyMTgwZGYzNzI3YTRmNzJiYmRkZDQxYzlmYTFiNTA=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-10-31T10:32:51Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-10-31T10:32:51Z"},"message":"[SYNCOPE-572] Refactoring connectors' and resources' handling of connector properties","tree":{"sha":"7ec15bc71d42f9970d49828e9b8c8e972dfe440e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7ec15bc71d42f9970d49828e9b8c8e972dfe440e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9329c54fd62180df3727a4f72bbddd41c9fa1b50","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9329c54fd62180df3727a4f72bbddd41c9fa1b50","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9329c54fd62180df3727a4f72bbddd41c9fa1b50","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9329c54fd62180df3727a4f72bbddd41c9fa1b50/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"f44df5bfdf83112b5ecfa033a3710495e03df151","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f44df5bfdf83112b5ecfa033a3710495e03df151","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f44df5bfdf83112b5ecfa033a3710495e03df151"}],"stats":{"total":537,"additions":240,"deletions":297},"files":[{"sha":"f635811940095360c6df5733d5d7189fa6cd99f4","filename":"common/src/main/java/org/apache/syncope/common/types/ClientExceptionType.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9329c54fd62180df3727a4f72bbddd41c9fa1b50/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9329c54fd62180df3727a4f72bbddd41c9fa1b50/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FClientExceptionType.java?ref=9329c54fd62180df3727a4f72bbddd41c9fa1b50","patch":"@@ -31,6 +31,7 @@ public enum ClientExceptionType {\n     InvalidSecurityAnswer(Response.Status.BAD_REQUEST),\n     InvalidLogger(Response.Status.BAD_REQUEST),\n     InvalidConnInstance(Response.Status.BAD_REQUEST),\n+    InvalidResource(Response.Status.BAD_REQUEST),\n     InvalidConnIdConf(Response.Status.BAD_REQUEST),\n     InvalidPolicy(Response.Status.BAD_REQUEST),\n     InvalidSyncopeConf(Response.Status.BAD_REQUEST),"},{"sha":"9597951633029adb6eaea15a51fdc5f4f7baa5ec","filename":"console/src/main/java/org/apache/syncope/console/markup/html/list/ConnConfPropertyListView.java","status":"added","additions":152,"deletions":0,"changes":152,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9329c54fd62180df3727a4f72bbddd41c9fa1b50/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fmarkup%2Fhtml%2Flist%2FConnConfPropertyListView.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9329c54fd62180df3727a4f72bbddd41c9fa1b50/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fmarkup%2Fhtml%2Flist%2FConnConfPropertyListView.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fmarkup%2Fhtml%2Flist%2FConnConfPropertyListView.java?ref=9329c54fd62180df3727a4f72bbddd41c9fa1b50","patch":"@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.markup.html.list;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.types.ConnConfProperty;\n+import org.apache.syncope.console.commons.Constants;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxPasswordFieldPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.FieldPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.MultiFieldPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.SpinnerFieldPanel;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.PasswordTextField;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.ClassUtils;\n+\n+public class ConnConfPropertyListView extends AltListView<ConnConfProperty> {\n+\n+    private static final long serialVersionUID = -5239334900329150316L;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ConnConfPropertyListView.class);\n+\n+    private final boolean withOverridable;\n+\n+    private final Set<ConnConfProperty> configuration;\n+\n+    public ConnConfPropertyListView(final String id, final IModel<? extends List<? extends ConnConfProperty>> model,\n+            final boolean withOverridable, final Set<ConnConfProperty> configuration) {\n+\n+        super(id, model);\n+        this.configuration = configuration;\n+        this.withOverridable = withOverridable;\n+    }\n+\n+    @Override\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    protected void populateItem(final ListItem<ConnConfProperty> item) {\n+        final ConnConfProperty property = item.getModelObject();\n+\n+        final Label label = new Label(\"connPropAttrSchema\",\n+                StringUtils.isBlank(property.getSchema().getDisplayName())\n+                        ? property.getSchema().getName()\n+                        : property.getSchema().getDisplayName());\n+        item.add(label);\n+\n+        FieldPanel<? extends Serializable> field;\n+        boolean required = false;\n+        boolean isArray = false;\n+\n+        if (property.getSchema().isConfidential()\n+                || Constants.GUARDED_STRING.equalsIgnoreCase(property.getSchema().getType())\n+                || Constants.GUARDED_BYTE_ARRAY.equalsIgnoreCase(property.getSchema().getType())) {\n+\n+            field = new AjaxPasswordFieldPanel(\"panel\",\n+                    label.getDefaultModelObjectAsString(), new Model<String>());\n+            ((PasswordTextField) field.getField()).setResetPassword(false);\n+\n+            required = property.getSchema().isRequired();\n+        } else {\n+            Class<?> propertySchemaClass;\n+            try {\n+                propertySchemaClass =\n+                        ClassUtils.forName(property.getSchema().getType(), ClassUtils.getDefaultClassLoader());\n+                if (ClassUtils.isPrimitiveOrWrapper(propertySchemaClass)) {\n+                    propertySchemaClass = org.apache.commons.lang3.ClassUtils.primitiveToWrapper(propertySchemaClass);\n+                }\n+            } catch (Exception e) {\n+                LOG.error(\"Error parsing attribute type\", e);\n+                propertySchemaClass = String.class;\n+            }\n+\n+            if (ClassUtils.isAssignable(Number.class, propertySchemaClass)) {\n+                @SuppressWarnings(\"unchecked\")\n+                final Class<Number> numberClass = (Class<Number>) propertySchemaClass;\n+                field = new SpinnerFieldPanel<Number>(\"panel\",\n+                        label.getDefaultModelObjectAsString(), numberClass, new Model<Number>(), null, null);\n+\n+                required = property.getSchema().isRequired();\n+            } else if (ClassUtils.isAssignable(Boolean.class, propertySchemaClass)) {\n+                field = new AjaxCheckBoxPanel(\"panel\",\n+                        label.getDefaultModelObjectAsString(), new Model<Boolean>());\n+            } else {\n+                field = new AjaxTextFieldPanel(\"panel\",\n+                        label.getDefaultModelObjectAsString(), new Model<String>());\n+\n+                required = property.getSchema().isRequired();\n+            }\n+\n+            if (propertySchemaClass.isArray()) {\n+                isArray = true;\n+            }\n+        }\n+\n+        field.setTitle(property.getSchema().getHelpMessage());\n+\n+        if (required) {\n+            field.addRequiredLabel();\n+        }\n+\n+        if (isArray) {\n+            if (property.getValues().isEmpty()) {\n+                property.getValues().add(null);\n+            }\n+\n+            final MultiFieldPanel multiFieldPanel = new MultiFieldPanel(\"panel\",\n+                    new PropertyModel<List<String>>(property, \"values\"), field);\n+            item.add(multiFieldPanel);\n+        } else {\n+            setNewFieldModel(field, property.getValues());\n+            item.add(field);\n+        }\n+\n+        if (withOverridable) {\n+            item.add(new AjaxCheckBoxPanel(\"connPropAttrOverridable\",\n+                    \"connPropAttrOverridable\", new PropertyModel<Boolean>(property, \"overridable\")));\n+        }\n+\n+        configuration.add(property);\n+    }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    private void setNewFieldModel(final FieldPanel field, final List<Object> values) {\n+        field.setNewModel(values);\n+    }\n+\n+}"},{"sha":"800029c51c6eb843bfba55fe00cb311ddc354c7e","filename":"console/src/main/java/org/apache/syncope/console/pages/ConnectorModalPage.java","status":"modified","additions":5,"deletions":108,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9329c54fd62180df3727a4f72bbddd41c9fa1b50/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9329c54fd62180df3727a4f72bbddd41c9fa1b50/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java?ref=9329c54fd62180df3727a4f72bbddd41c9fa1b50","patch":"@@ -34,14 +34,10 @@\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.ConnectorCapability;\n import org.apache.syncope.console.commons.Constants;\n-import org.apache.syncope.console.markup.html.list.AltListView;\n+import org.apache.syncope.console.markup.html.list.ConnConfPropertyListView;\n import org.apache.syncope.console.rest.ConnectorRestClient;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxPasswordFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.console.wicket.markup.html.form.FieldPanel;\n-import org.apache.syncope.console.wicket.markup.html.form.MultiFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.SpinnerFieldPanel;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -51,12 +47,9 @@\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n-import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.CheckBoxMultipleChoice;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n import org.apache.wicket.markup.html.form.Form;\n-import org.apache.wicket.markup.html.form.PasswordTextField;\n-import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n import org.apache.wicket.model.CompoundPropertyModel;\n import org.apache.wicket.model.IModel;\n@@ -66,7 +59,6 @@\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.apache.wicket.validation.validator.RangeValidator;\n-import org.springframework.util.ClassUtils;\n \n /**\n  * Modal window with Connector form.\n@@ -285,98 +277,9 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         });\n \n         // form - second tab (properties)\n-        final ListView<ConnConfProperty> connPropView = new AltListView<ConnConfProperty>(\n-                \"connectorProperties\", new PropertyModel<List<ConnConfProperty>>(this, \"properties\")) {\n-\n-                    private static final long serialVersionUID = 9101744072914090143L;\n-\n-                    @Override\n-                    protected void populateItem(final ListItem<ConnConfProperty> item) {\n-                        final ConnConfProperty property = item.getModelObject();\n-\n-                        final Label label = new Label(\"connPropAttrSchema\",\n-                                StringUtils.isBlank(property.getSchema().getDisplayName())\n-                                        ? property.getSchema().getName()\n-                                        : property.getSchema().getDisplayName());\n-                        item.add(label);\n-\n-                        @SuppressWarnings(\"rawtypes\")\n-                        final FieldPanel field;\n-                        boolean required = false;\n-                        boolean isArray = false;\n-                        if (property.getSchema().isConfidential()\n-                        || Constants.GUARDED_STRING.equalsIgnoreCase(property.getSchema().getType())\n-                        || Constants.GUARDED_BYTE_ARRAY.equalsIgnoreCase(property.getSchema().getType())) {\n-\n-                            field = new AjaxPasswordFieldPanel(\"panel\",\n-                                    label.getDefaultModelObjectAsString(), new Model<String>());\n-\n-                            ((PasswordTextField) field.getField()).setResetPassword(false);\n-\n-                            required = property.getSchema().isRequired();\n-                        } else {\n-                            Class<?> propertySchemaClass;\n-\n-                            try {\n-                                propertySchemaClass =\n-                                ClassUtils.forName(property.getSchema().getType(), ClassUtils.getDefaultClassLoader());\n-                                if (ClassUtils.isPrimitiveOrWrapper(propertySchemaClass)) {\n-                                    propertySchemaClass =\n-                                    org.apache.commons.lang3.ClassUtils.primitiveToWrapper(propertySchemaClass);\n-                                }\n-                            } catch (Exception e) {\n-                                LOG.error(\"Error parsing attribute type\", e);\n-                                propertySchemaClass = String.class;\n-                            }\n-                            if (ClassUtils.isAssignable(Number.class, propertySchemaClass)) {\n-                                @SuppressWarnings(\"unchecked\")\n-                                final Class<Number> numberClass = (Class<Number>) propertySchemaClass;\n-                                field = new SpinnerFieldPanel<Number>(\"panel\", label.getDefaultModelObjectAsString(),\n-                                        numberClass, new Model<Number>(), null, null);\n-\n-                                required = property.getSchema().isRequired();\n-                            } else if (ClassUtils.isAssignable(Boolean.class, propertySchemaClass)) {\n-                                field = new AjaxCheckBoxPanel(\"panel\",\n-                                        label.getDefaultModelObjectAsString(), new Model<Boolean>());\n-                            } else {\n-                                field = new AjaxTextFieldPanel(\"panel\",\n-                                        label.getDefaultModelObjectAsString(), new Model<String>());\n-\n-                                required = property.getSchema().isRequired();\n-                            }\n-\n-                            if (propertySchemaClass.isArray()) {\n-                                isArray = true;\n-                            }\n-                        }\n-\n-                        field.setTitle(property.getSchema().getHelpMessage());\n-\n-                        if (required) {\n-                            field.addRequiredLabel();\n-                        }\n-\n-                        if (isArray) {\n-                            if (property.getValues().isEmpty()) {\n-                                property.getValues().add(null);\n-                            }\n-\n-                            @SuppressWarnings(\"unchecked\")\n-                            final MultiFieldPanel<String> multiFieldPanel = new MultiFieldPanel<String>(\n-                                    \"panel\", new PropertyModel<List<String>>(property, \"values\"), field);\n-                            item.add(multiFieldPanel);\n-                        } else {\n-                            setNewFieldModel(field, property.getValues());\n-                            item.add(field);\n-                        }\n-\n-                        final AjaxCheckBoxPanel overridable = new AjaxCheckBoxPanel(\"connPropAttrOverridable\",\n-                                \"connPropAttrOverridable\", new PropertyModel<Boolean>(property, \"overridable\"));\n-\n-                        item.add(overridable);\n-                        connInstanceTO.getConfiguration().add(property);\n-                    }\n-                };\n+        final ListView<ConnConfProperty> connPropView = new ConnConfPropertyListView(\"connectorProperties\",\n+                new PropertyModel<List<ConnConfProperty>>(this, \"properties\"), \n+                true, connInstanceTO.getConfiguration());\n         connPropView.setOutputMarkupId(true);\n         connectorPropForm.add(connPropView);\n \n@@ -391,7 +294,7 @@ public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                 // ensure that connector bundle information is in sync\n                 conn.setBundleName(bundleTO.getBundleName());\n                 conn.setVersion(bundleTO.getVersion());\n-                conn.setConnectorName(bundleTO.getConnectorName());               \n+                conn.setConnectorName(bundleTO.getConnectorName());\n \n                 if (restClient.check(conn)) {\n                     info(getString(\"success_connection\"));\n@@ -470,7 +373,6 @@ protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n \n             @Override\n             protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n-\n                 feedbackPanel.refresh(target);\n             }\n         };\n@@ -493,11 +395,6 @@ protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n         connectorForm.add(cancel);\n     }\n \n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    private void setNewFieldModel(final FieldPanel field, final List<Object> values) {\n-        field.setNewModel(values);\n-    }\n-\n     private ConnBundleTO getSelectedBundleTO(final ConnInstanceTO connInstanceTO) {\n         ConnBundleTO result = null;\n         if (connInstanceTO != null"},{"sha":"5768d712e9632afdfa75b24a2de49121dc103064","filename":"console/src/main/java/org/apache/syncope/console/pages/ResourceModalPage.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9329c54fd62180df3727a4f72bbddd41c9fa1b50/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9329c54fd62180df3727a4f72bbddd41c9fa1b50/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java?ref=9329c54fd62180df3727a4f72bbddd41c9fa1b50","patch":"@@ -83,7 +83,10 @@ public ResourceModalPage(final PageReference pageRef, final ModalWindow window,\n         //--------------------------------\n         // Resource connector configuration panel\n         //--------------------------------\n-        form.add(new ResourceConnConfPanel(\"connconf\", resourceTO, createFlag));\n+        ResourceConnConfPanel resourceConnConfPanel = new ResourceConnConfPanel(\"connconf\", resourceTO, createFlag);\n+        MetaDataRoleAuthorizationStrategy.authorize(resourceConnConfPanel, ENABLE,\n+                xmlRolesReader.getAllAllowedRoles(\"Connectors\", \"read\"));\n+        form.add(resourceConnConfPanel);\n         //--------------------------------\n \n         //--------------------------------\n@@ -179,8 +182,8 @@ protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n \n         MetaDataRoleAuthorizationStrategy.authorize(submit, ENABLE, xmlRolesReader.getAllAllowedRoles(\"Resources\",\n                 createFlag\n-                ? \"create\"\n-                : \"update\"));\n+                        ? \"create\"\n+                        : \"update\"));\n     }\n \n     /**"},{"sha":"22bdacdf9ccbb87a8d649d7dba472a94bc025dce","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourceConnConfPanel.java","status":"modified","additions":53,"deletions":173,"changes":226,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9329c54fd62180df3727a4f72bbddd41c9fa1b50/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9329c54fd62180df3727a4f72bbddd41c9fa1b50/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java?ref=9329c54fd62180df3727a4f72bbddd41c9fa1b50","patch":"@@ -18,65 +18,48 @@\n  */\n package org.apache.syncope.console.pages.panels;\n \n-import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n-import org.apache.commons.lang3.StringUtils;\n+import java.util.Map;\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.types.ConnConfProperty;\n-import org.apache.syncope.console.commons.Constants;\n-import org.apache.syncope.console.markup.html.list.AltListView;\n+import org.apache.syncope.console.markup.html.list.ConnConfPropertyListView;\n import org.apache.syncope.console.pages.BaseModalPage;\n import org.apache.syncope.console.pages.ResourceModalPage.ResourceEvent;\n import org.apache.syncope.console.pages.panels.ResourceDetailsPanel.DetailsModEvent;\n import org.apache.syncope.console.rest.ConnectorRestClient;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxPasswordFieldPanel;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.console.wicket.markup.html.form.FieldPanel;\n-import org.apache.syncope.console.wicket.markup.html.form.MultiFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.MultiFieldPanel.MultiValueSelectorEvent;\n-import org.apache.syncope.console.wicket.markup.html.form.SpinnerFieldPanel;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n-import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n import org.apache.wicket.event.Broadcast;\n import org.apache.wicket.event.IEvent;\n-import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxLink;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n-import org.apache.wicket.markup.html.basic.Label;\n-import org.apache.wicket.markup.html.form.PasswordTextField;\n-import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.list.ListView;\n import org.apache.wicket.markup.html.panel.Panel;\n-import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.util.ClassUtils;\n \n public class ResourceConnConfPanel extends Panel {\n \n     private static final long serialVersionUID = -7982691107029848579L;\n \n-    /**\n-     * Logger.\n-     */\n-    private static final Logger LOG = LoggerFactory.getLogger(ResourceConnConfPanel.class);\n-\n     @SpringBean\n-    private ConnectorRestClient connRestClient;\n+    private ConnectorRestClient restClient;\n \n-    private List<ConnConfProperty> connConfProperties;\n+    private final ResourceTO resourceTO;\n \n-    private WebMarkupContainer connConfPropContainer;\n+    private final boolean createFlag;\n \n-    private AjaxLink<Void> check;\n+    private List<ConnConfProperty> connConfProperties;\n \n-    private boolean createFlag;\n+    private WebMarkupContainer connConfPropContainer;\n \n-    private ResourceTO resourceTO;\n+    private AjaxButton check;\n \n     public ResourceConnConfPanel(final String id, final ResourceTO resourceTO, final boolean createFlag) {\n         super(id);\n@@ -91,13 +74,24 @@ public ResourceConnConfPanel(final String id, final ResourceTO resourceTO, final\n         connConfPropContainer.setOutputMarkupId(true);\n         add(connConfPropContainer);\n \n-        check = new IndicatingAjaxLink<Void>(\"check\") {\n+        /*\n+         * the list of overridable connector properties\n+         */\n+        final ListView<ConnConfProperty> connPropView = new ConnConfPropertyListView(\"connectorProperties\",\n+                new PropertyModel<List<ConnConfProperty>>(this, \"connConfProperties\"),\n+                false, resourceTO.getConnConfProperties());\n+        connPropView.setOutputMarkupId(true);\n+        connConfPropContainer.add(connPropView);\n+\n+        check = new IndicatingAjaxButton(\"check\", new ResourceModel(\"check\")) {\n \n             private static final long serialVersionUID = -4199438518229098169L;\n \n             @Override\n-            public void onClick(final AjaxRequestTarget target) {\n-                if (connRestClient.check(resourceTO)) {\n+            public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                final ResourceTO resourceTO = (ResourceTO) form.getModelObject();\n+\n+                if (restClient.check(resourceTO)) {\n                     info(getString(\"success_connection\"));\n                 } else {\n                     error(getString(\"error_connection\"));\n@@ -109,123 +103,6 @@ public void onClick(final AjaxRequestTarget target) {\n \n         check.setEnabled(!connConfProperties.isEmpty());\n         connConfPropContainer.add(check);\n-\n-        /*\n-         * the list of overridable connector properties\n-         */\n-        connConfPropContainer.add(new AltListView<ConnConfProperty>(\"connectorProperties\",\n-                new PropertyModel<List<ConnConfProperty>>(this, \"connConfProperties\")) {\n-\n-                    private static final long serialVersionUID = 9101744072914090143L;\n-\n-                    @Override\n-                    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-                    protected void populateItem(final ListItem<ConnConfProperty> item) {\n-                        final ConnConfProperty property = item.getModelObject();\n-\n-                        final Label label = new Label(\"connPropAttrSchema\",\n-                                StringUtils.isBlank(property.getSchema().getDisplayName())\n-                                ? property.getSchema().getName()\n-                                : property.getSchema().getDisplayName());\n-\n-                        item.add(label);\n-\n-                        FieldPanel<? extends Serializable> field;\n-\n-                        boolean required = false;\n-\n-                        boolean isArray = false;\n-\n-                        if (Constants.GUARDED_STRING.equalsIgnoreCase(property.getSchema().getType())\n-                        || Constants.GUARDED_BYTE_ARRAY.equalsIgnoreCase(property.getSchema().getType())) {\n-\n-                            field = new AjaxPasswordFieldPanel(\"panel\", label.getDefaultModelObjectAsString(),\n-                                    new Model<String>());\n-                            ((PasswordTextField) field.getField()).setResetPassword(false);\n-\n-                            required = property.getSchema().isRequired();\n-                        } else {\n-                            Class<?> propertySchemaClass;\n-                            try {\n-                                propertySchemaClass = ClassUtils.forName(property.getSchema().getType(),\n-                                        ClassUtils.getDefaultClassLoader());\n-                            } catch (Exception e) {\n-                                LOG.error(\"Error parsing attribute type\", e);\n-                                propertySchemaClass = String.class;\n-                            }\n-\n-                            if (ClassUtils.isAssignable(Number.class, propertySchemaClass)) {\n-                                Class<Number> numberClass =\n-                                        (Class<Number>) ClassUtils.resolvePrimitiveIfNecessary(propertySchemaClass);\n-                                field = new SpinnerFieldPanel<Number>(\"panel\", label.getDefaultModelObjectAsString(),\n-                                        numberClass, new Model<Number>(), null, null);\n-\n-                                required = property.getSchema().isRequired();\n-                            } else if (ClassUtils.isAssignable(Boolean.class, propertySchemaClass)) {\n-                                field = new AjaxCheckBoxPanel(\"panel\", label.getDefaultModelObjectAsString(),\n-                                        new Model<Boolean>());\n-                            } else {\n-                                field = new AjaxTextFieldPanel(\"panel\", label.getDefaultModelObjectAsString(),\n-                                        new Model<String>());\n-\n-                                required = property.getSchema().isRequired();\n-                            }\n-\n-                            if (String[].class.equals(propertySchemaClass)) {\n-                                isArray = true;\n-                            }\n-                        }\n-\n-                        field.setTitle(property.getSchema().getHelpMessage());\n-\n-                        if (isArray) {\n-                            field.removeRequiredLabel();\n-\n-                            if (property.getValues().isEmpty()) {\n-                                property.getValues().add(null);\n-                            }\n-\n-                            final MultiFieldPanel multiFields = new MultiFieldPanel(\"panel\",\n-                                    new PropertyModel<List<String>>(property, \"values\"), field, true);\n-\n-                            item.add(multiFields);\n-                        } else {\n-                            if (required) {\n-                                field.addRequiredLabel();\n-                            }\n-\n-                            field.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n-\n-                                private static final long serialVersionUID = -1107858522700306810L;\n-\n-                                @Override\n-                                protected void onUpdate(final AjaxRequestTarget target) {\n-                                    send(getPage(), Broadcast.BREADTH,\n-                                            new ConnConfModEvent(target, connConfProperties));\n-                                }\n-                            });\n-\n-                            field.setNewModel(toSerializableList(property.getValues()));\n-                            item.add(field);\n-                        }\n-\n-                        resourceTO.getConnConfProperties().add(property);\n-                    }\n-                });\n-    }\n-\n-    private List<Serializable> toSerializableList(final List<Object> values) {\n-        List<Serializable> result = new ArrayList<Serializable>();\n-\n-        for (Object value : values) {\n-            if (value instanceof Serializable) {\n-                result.add((Serializable) value);\n-            } else {\n-                LOG.warn(\"Not serializable: {}\", value);\n-            }\n-        }\n-\n-        return result;\n     }\n \n     /**\n@@ -234,22 +111,26 @@ private List<Serializable> toSerializableList(final List<Object> values) {\n      * @return overridable properties.\n      */\n     private List<ConnConfProperty> getConnConfProperties() {\n-\n         final List<ConnConfProperty> props = new ArrayList<ConnConfProperty>();\n-\n-        if (!createFlag && !resourceTO.getConnConfProperties().isEmpty()) {\n-            props.addAll(resourceTO.getConnConfProperties());\n-        } else {\n+        final Long connectorId = resourceTO.getConnectorId();\n+        if (connectorId != null && connectorId > 0) {\n+            for (ConnConfProperty property : restClient.getConnectorProperties(connectorId)) {\n+                if (property.isOverridable()) {\n+                    props.add(property);\n+                }\n+            }\n+        }\n+        if (createFlag || resourceTO.getConnConfProperties().isEmpty()) {\n             resourceTO.getConnConfProperties().clear();\n+        } else {\n+            Map<String, ConnConfProperty> valuedProps = new HashMap<String, ConnConfProperty>();\n+            for (ConnConfProperty prop : resourceTO.getConnConfProperties()) {\n+                valuedProps.put(prop.getSchema().getName(), prop);\n+            }\n \n-            final Long connectorId = resourceTO.getConnectorId();\n-\n-            if (connectorId != null && connectorId > 0) {\n-                for (ConnConfProperty property : connRestClient.getConnectorProperties(connectorId)) {\n-\n-                    if (property.isOverridable()) {\n-                        props.add(property);\n-                    }\n+            for (int i = 0; i < props.size(); i++) {\n+                if (valuedProps.containsKey(props.get(i).getSchema().getName())) {\n+                    props.set(i, valuedProps.get(props.get(i).getSchema().getName()));\n                 }\n             }\n         }\n@@ -262,22 +143,21 @@ private List<ConnConfProperty> getConnConfProperties() {\n \n     @Override\n     public void onEvent(final IEvent<?> event) {\n+        AjaxRequestTarget target = null;\n         if (event.getPayload() instanceof DetailsModEvent) {\n             // connector change: update properties and forward event\n-            final AjaxRequestTarget target = ((ResourceEvent) event.getPayload()).getTarget();\n+            target = ((ResourceEvent) event.getPayload()).getTarget();\n \n             connConfProperties = getConnConfProperties();\n             check.setEnabled(!connConfProperties.isEmpty());\n \n             target.add(connConfPropContainer);\n-\n-            // get configuration properties and send a new event\n-            send(getPage(), Broadcast.BREADTH, new ConnConfModEvent(target, connConfProperties));\n-\n         } else if (event.getPayload() instanceof MultiValueSelectorEvent) {\n             // multi value connector property change: forward event\n-            final AjaxRequestTarget target = ((MultiValueSelectorEvent) event.getPayload()).getTarget();\n+            target = ((MultiValueSelectorEvent) event.getPayload()).getTarget();\n+        }\n \n+        if (target != null) {\n             send(getPage(), Broadcast.BREADTH, new ConnConfModEvent(target, connConfProperties));\n         }\n     }\n@@ -293,11 +173,11 @@ public static class ConnConfModEvent extends ResourceEvent {\n          * Constructor.\n          *\n          * @param target request target.\n-         * @param conf connector configuration properties.\n+         * @param configuration connector configuration properties.\n          */\n-        public ConnConfModEvent(final AjaxRequestTarget target, final List<ConnConfProperty> conf) {\n+        public ConnConfModEvent(final AjaxRequestTarget target, final List<ConnConfProperty> configuration) {\n             super(target);\n-            this.configuration = conf;\n+            this.configuration = configuration;\n         }\n \n         public List<ConnConfProperty> getConfiguration() {"},{"sha":"c538f207bc70929f3174ce95c533371e57557c2c","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConnectorController.java","status":"modified","additions":8,"deletions":11,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9329c54fd62180df3727a4f72bbddd41c9fa1b50/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9329c54fd62180df3727a4f72bbddd41c9fa1b50/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorController.java?ref=9329c54fd62180df3727a4f72bbddd41c9fa1b50","patch":"@@ -38,7 +38,6 @@\n import org.apache.syncope.core.persistence.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n-import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.apache.syncope.core.propagation.Connector;\n import org.apache.syncope.core.propagation.ConnectorFactory;\n import org.apache.syncope.core.rest.data.ConnInstanceDataBinder;\n@@ -76,11 +75,10 @@ public ConnInstanceTO create(final ConnInstanceTO connInstanceTO) {\n         ConnInstance connInstance = binder.getConnInstance(connInstanceTO);\n         try {\n             connInstance = connInstanceDAO.save(connInstance);\n-        } catch (InvalidEntityException e) {\n-            SyncopeClientException invalidConnInstance = SyncopeClientException.build(\n-                    ClientExceptionType.InvalidConnInstance);\n-            invalidConnInstance.getElements().add(e.getMessage());\n-            throw invalidConnInstance;\n+        } catch (Exception e) {\n+            SyncopeClientException exception = SyncopeClientException.build(ClientExceptionType.InvalidConnInstance);\n+            exception.getElements().add(e.getMessage());\n+            throw exception;\n         }\n \n         return binder.getConnInstanceTO(connInstance);\n@@ -91,11 +89,10 @@ public ConnInstanceTO update(final ConnInstanceTO connInstanceTO) {\n         ConnInstance connInstance = binder.updateConnInstance(connInstanceTO.getId(), connInstanceTO);\n         try {\n             connInstance = connInstanceDAO.save(connInstance);\n-        } catch (InvalidEntityException e) {\n-            SyncopeClientException invalidConnInstance = SyncopeClientException.build(\n-                    ClientExceptionType.InvalidConnInstance);\n-            invalidConnInstance.getElements().add(e.getMessage());\n-            throw invalidConnInstance;\n+        } catch (Exception e) {\n+            SyncopeClientException exception = SyncopeClientException.build(ClientExceptionType.InvalidConnInstance);\n+            exception.getElements().add(e.getMessage());\n+            throw exception;\n         }\n \n         return binder.getConnInstanceTO(connInstance);"},{"sha":"3a8482422976059320c24814eef7e3fb4caaac63","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9329c54fd62180df3727a4f72bbddd41c9fa1b50/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9329c54fd62180df3727a4f72bbddd41c9fa1b50/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=9329c54fd62180df3727a4f72bbddd41c9fa1b50","patch":"@@ -101,7 +101,14 @@ public ResourceTO create(final ResourceTO resourceTO) {\n             throw new EntityExistsException(\"Resource '\" + resourceTO.getName() + \"'\");\n         }\n \n-        ExternalResource resource = resourceDAO.save(binder.create(resourceTO));\n+        ExternalResource resource = null;\n+        try {\n+            resource = resourceDAO.save(binder.create(resourceTO));\n+        } catch (Exception e) {\n+            SyncopeClientException exception = SyncopeClientException.build(ClientExceptionType.InvalidResource);\n+            exception.getElements().add(e.getMessage());\n+            throw exception;\n+        }\n \n         return binder.getResourceTO(resource);\n     }\n@@ -114,7 +121,13 @@ public ResourceTO update(final ResourceTO resourceTO) {\n         }\n \n         resource = binder.update(resource, resourceTO);\n-        resource = resourceDAO.save(resource);\n+        try {\n+            resource = resourceDAO.save(resource);\n+        } catch (Exception e) {\n+            SyncopeClientException exception = SyncopeClientException.build(ClientExceptionType.InvalidResource);\n+            exception.getElements().add(e.getMessage());\n+            throw exception;\n+        }\n \n         return binder.getResourceTO(resource);\n     }"}]}