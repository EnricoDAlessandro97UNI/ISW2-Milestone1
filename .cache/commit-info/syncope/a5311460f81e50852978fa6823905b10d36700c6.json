{"sha":"a5311460f81e50852978fa6823905b10d36700c6","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE1MzExNDYwZjgxZTUwODUyOTc4ZmE2ODIzOTA1YjEwZDM2NzAwYzY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-05-22T11:23:46Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-05-22T11:24:01Z"},"message":"[SYNCOPE-1088] Storing Spring Security authorities with AccessToken entities (not for admin)","tree":{"sha":"5cd3e600655333f137f43d0fa18899b5746587d1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5cd3e600655333f137f43d0fa18899b5746587d1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a5311460f81e50852978fa6823905b10d36700c6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a5311460f81e50852978fa6823905b10d36700c6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a5311460f81e50852978fa6823905b10d36700c6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a5311460f81e50852978fa6823905b10d36700c6/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"3fc8bf3ef242184a82635ee5a303d085cfd297fc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3fc8bf3ef242184a82635ee5a303d085cfd297fc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3fc8bf3ef242184a82635ee5a303d085cfd297fc"}],"stats":{"total":250,"additions":219,"deletions":31},"files":[{"sha":"3d3daf8fb66473a7da62437d0a354d4e6de9f5c8","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5311460f81e50852978fa6823905b10d36700c6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5311460f81e50852978fa6823905b10d36700c6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=a5311460f81e50852978fa6823905b10d36700c6","patch":"@@ -143,8 +143,8 @@ public String getJWT() {\n \n     private void afterAuthentication() {\n         Pair<Map<String, Set<String>>, UserTO> self = client.self();\n-        auth = self.getKey();\n-        selfTO = self.getValue();\n+        auth = self.getLeft();\n+        selfTO = self.getRight();\n     }\n \n     @Override"},{"sha":"cd94d0c4920d1b55d6612cc81dd78c557ee1f115","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserSession.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5311460f81e50852978fa6823905b10d36700c6/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5311460f81e50852978fa6823905b10d36700c6/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java?ref=a5311460f81e50852978fa6823905b10d36700c6","patch":"@@ -101,7 +101,7 @@ public boolean evaluate(final PlainSchemaTO object) {\n \n     private void afterAuthentication() {\n         Pair<Map<String, Set<String>>, UserTO> self = client.self();\n-        selfTO = self.getValue();\n+        selfTO = self.getRight();\n \n         // bind explicitly this session to have a stateful behavior during http requests, unless session will\n         // expire for every request"},{"sha":"b21ab45485c9c23bc5fb6434ca97bed81eff059a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeLogic.java","status":"modified","additions":3,"deletions":13,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5311460f81e50852978fa6823905b10d36700c6/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5311460f81e50852978fa6823905b10d36700c6/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java?ref=a5311460f81e50852978fa6823905b10d36700c6","patch":"@@ -29,7 +29,6 @@\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n-import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n@@ -82,9 +81,7 @@ public AnyTypeTO create(final AnyTypeTO anyTypeTO) {\n             throw new DuplicateException(anyTypeTO.getKey());\n         }\n \n-        AnyTypeTO result = binder.getAnyTypeTO(anyTypeDAO.save(binder.create(anyTypeTO)));\n-        EntitlementsHolder.getInstance().addFor(result.getKey());\n-        return result;\n+        return binder.getAnyTypeTO(anyTypeDAO.save(binder.create(anyTypeTO)));\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPE_UPDATE + \"')\")\n@@ -95,14 +92,10 @@ public AnyTypeTO update(final AnyTypeTO anyTypeTO) {\n             throw new NotFoundException(anyTypeTO.getKey());\n         }\n \n-        EntitlementsHolder.getInstance().removeFor(anyTypeTO.getKey());\n-\n         binder.update(anyType, anyTypeTO);\n         anyType = anyTypeDAO.save(anyType);\n \n-        AnyTypeTO result = binder.getAnyTypeTO(anyType);\n-        EntitlementsHolder.getInstance().addFor(result.getKey());\n-        return result;\n+        return binder.getAnyTypeTO(anyTypeDAO.save(anyType));\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPE_DELETE + \"')\")\n@@ -114,16 +107,13 @@ public AnyTypeTO delete(final String key) {\n             throw new NotFoundException(key);\n         }\n \n-        AnyTypeTO deleted = binder.getAnyTypeTO(anyType);\n         try {\n-            anyTypeDAO.delete(key);\n-            EntitlementsHolder.getInstance().removeFor(deleted.getKey());\n+            return binder.delete(anyType);\n         } catch (IllegalArgumentException e) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidAnyType);\n             sce.getElements().add(e.getMessage());\n             throw sce;\n         }\n-        return deleted;\n     }\n \n     @Override"},{"sha":"ee68d6c3428b5d01ce546ea58b7439e7a54a6af6","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AccessToken.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5311460f81e50852978fa6823905b10d36700c6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAccessToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5311460f81e50852978fa6823905b10d36700c6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAccessToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAccessToken.java?ref=a5311460f81e50852978fa6823905b10d36700c6","patch":"@@ -33,4 +33,8 @@ public interface AccessToken extends ProvidedKeyEntity {\n     String getOwner();\n \n     void setOwner(String owner);\n+\n+    byte[] getAuthorities();\n+\n+    void setAuthorities(byte[] authorities);\n }"},{"sha":"4ddaed158a04b75d44b5df6c0f9aae72620980df","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAccessToken.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5311460f81e50852978fa6823905b10d36700c6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccessToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5311460f81e50852978fa6823905b10d36700c6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccessToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccessToken.java?ref=a5311460f81e50852978fa6823905b10d36700c6","patch":"@@ -26,6 +26,7 @@\n import javax.persistence.Table;\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n \n @Entity\n@@ -46,6 +47,9 @@ public class JPAAccessToken extends AbstractProvidedKeyEntity implements AccessT\n     @Column(nullable = true)\n     private String owner;\n \n+    @Lob\n+    private byte[] authorities;\n+\n     @Override\n     public String getBody() {\n         return body;\n@@ -80,4 +84,14 @@ public void setOwner(final String owner) {\n         this.owner = owner;\n     }\n \n+    @Override\n+    public byte[] getAuthorities() {\n+        return authorities;\n+    }\n+\n+    @Override\n+    public void setAuthorities(final byte[] authorities) {\n+        this.authorities = ArrayUtils.clone(authorities);\n+    }\n+\n }"},{"sha":"7e0c45654b36507c76a526d4e3d26c27c435f3a2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPADomain.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5311460f81e50852978fa6823905b10d36700c6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADomain.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5311460f81e50852978fa6823905b10d36700c6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADomain.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADomain.java?ref=a5311460f81e50852978fa6823905b10d36700c6","patch":"@@ -36,6 +36,8 @@ public class JPADomain extends AbstractProvidedKeyEntity implements Domain {\n \n     public static final String TABLE = \"SyncopeDomain\";\n \n+    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+\n     private String adminPwd;\n \n     @Enumerated(EnumType.STRING)\n@@ -54,7 +56,7 @@ public CipherAlgorithm getAdminCipherAlgorithm() {\n     @Override\n     public void setPassword(final String password, final CipherAlgorithm cipherAlgoritm) {\n         try {\n-            this.adminPwd = Encryptor.getInstance().encode(password, cipherAlgoritm);\n+            this.adminPwd = ENCRYPTOR.encode(password, cipherAlgoritm);\n             this.adminCipherAlgorithm = cipherAlgoritm;\n         } catch (Exception e) {\n             LOG.error(\"Could not encode password\", e);"},{"sha":"0dddb7787d645f6d3cd6cd07932cc1cc61fdda4e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5311460f81e50852978fa6823905b10d36700c6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5311460f81e50852978fa6823905b10d36700c6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=a5311460f81e50852978fa6823905b10d36700c6","patch":"@@ -78,6 +78,8 @@\n \n     public static final String TABLE = \"SyncopeUser\";\n \n+    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+\n     @Column(nullable = true)\n     private String password;\n \n@@ -256,7 +258,7 @@ public void setPassword(final String password, final CipherAlgorithm cipherAlgor\n         this.clearPassword = password;\n \n         try {\n-            this.password = Encryptor.getInstance().encode(password, cipherAlgoritm);\n+            this.password = ENCRYPTOR.encode(password, cipherAlgoritm);\n             this.cipherAlgorithm = cipherAlgoritm;\n         } catch (Exception e) {\n             LOG.error(\"Could not encode password\", e);\n@@ -460,8 +462,8 @@ public boolean verifyPasswordHistory(final String password, final int size) {\n                 res = passwordHistory.subList(size >= passwordHistory.size()\n                         ? 0\n                         : passwordHistory.size() - size, passwordHistory.size()).contains(cipherAlgorithm == null\n-                                ? password\n-                                : Encryptor.getInstance().encode(password, cipherAlgorithm));\n+                        ? password\n+                        : ENCRYPTOR.encode(password, cipherAlgorithm));\n             } catch (Exception e) {\n                 LOG.error(\"Error evaluating password history\", e);\n             }"},{"sha":"64c03e9e8e411b6fadbb7d6b2eea025e08bcfe1d","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AuditManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5311460f81e50852978fa6823905b10d36700c6/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5311460f81e50852978fa6823905b10d36700c6/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditManager.java?ref=a5311460f81e50852978fa6823905b10d36700c6","patch":"@@ -45,7 +45,7 @@ boolean auditRequested(\n      * @param subcategory event subcategory\n      * @param event event\n      * @param condition result value condition.\n-     * @param before object(s) availabile before the event\n+     * @param before object(s) available before the event\n      * @param output object(s) produced by the event\n      * @param input object(s) provided to the event\n      */"},{"sha":"bb7eab8d77c2193c42974dc4f8ad8c6f1c138da0","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/EntitlementsHolder.java","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5311460f81e50852978fa6823905b10d36700c6/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FEntitlementsHolder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5311460f81e50852978fa6823905b10d36700c6/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FEntitlementsHolder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FEntitlementsHolder.java?ref=a5311460f81e50852978fa6823905b10d36700c6","patch":"@@ -50,16 +50,26 @@ public void init(final Collection<String> values) {\n         this.values.addAll(values);\n     }\n \n-    public void addFor(final String anyType) {\n+    public Set<String> addFor(final String anyType) {\n+        Set<String> added = new HashSet<>();\n+\n         for (AnyEntitlement operation : AnyEntitlement.values()) {\n             this.values.add(operation.getFor(anyType));\n+            added.add(operation.getFor(anyType));\n         }\n+\n+        return added;\n     }\n \n-    public void removeFor(final String anyType) {\n+    public Set<String> removeFor(final String anyType) {\n+        Set<String> removed = new HashSet<>();\n+\n         for (AnyEntitlement operation : AnyEntitlement.values()) {\n             this.values.remove(operation.getFor(anyType));\n+            removed.add(operation.getFor(anyType));\n         }\n+\n+        return removed;\n     }\n \n     public Set<String> getValues() {"},{"sha":"e6441212a22f538196dfc885ca8fe220c3c245e8","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/AnyTypeDataBinder.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5311460f81e50852978fa6823905b10d36700c6/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAnyTypeDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5311460f81e50852978fa6823905b10d36700c6/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAnyTypeDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAnyTypeDataBinder.java?ref=a5311460f81e50852978fa6823905b10d36700c6","patch":"@@ -27,5 +27,7 @@ public interface AnyTypeDataBinder {\n \n     void update(AnyType anyType, AnyTypeTO anyTypeTO);\n \n+    AnyTypeTO delete(AnyType anyType);\n+\n     AnyTypeTO getAnyTypeTO(AnyType anyType);\n }"},{"sha":"6bca7e05d4ce1b91c37c0e5c0f3c6021623ada30","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5311460f81e50852978fa6823905b10d36700c6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5311460f81e50852978fa6823905b10d36700c6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java?ref=a5311460f81e50852978fa6823905b10d36700c6","patch":"@@ -34,24 +34,37 @@\n import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n import org.apache.cxf.rs.security.jose.jwt.JwtToken;\n import org.apache.syncope.common.lib.to.AccessTokenTO;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.provisioning.api.data.AccessTokenDataBinder;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.spring.BeanUtils;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.Encryptor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class AccessTokenDataBinderImpl implements AccessTokenDataBinder {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(AccessTokenDataBinder.class);\n+\n+    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+\n     private static final String[] IGNORE_PROPERTIES = { \"owner\" };\n \n     private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator();\n \n     private static final JwsHeaders JWS_HEADERS = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n \n+    @Resource(name = \"adminUser\")\n+    private String adminUser;\n+\n     @Resource(name = \"jwtIssuer\")\n     private String jwtIssuer;\n \n@@ -118,6 +131,17 @@ public String create(final String subject, final Map<String, Object> claims, fin\n             accessToken.setBody(body);\n             accessToken.setExpiryTime(created.getRight());\n             accessToken.setOwner(subject);\n+\n+            if (!adminUser.equals(accessToken.getOwner())) {\n+                try {\n+                    accessToken.setAuthorities(ENCRYPTOR.encode(\n+                            POJOHelper.serialize(AuthContextUtils.getAuthorities()), CipherAlgorithm.AES).\n+                            getBytes());\n+                } catch (Exception e) {\n+                    LOG.error(\"Could not store authorities\", e);\n+                }\n+            }\n+\n             accessTokenDAO.save(accessToken);\n         }\n \n@@ -147,6 +171,16 @@ public String update(final AccessToken accessToken) {\n         accessToken.setBody(body);\n         accessToken.setExpiryTime(expiry.getTime());\n \n+        if (!adminUser.equals(accessToken.getOwner())) {\n+            try {\n+                accessToken.setAuthorities(ENCRYPTOR.encode(\n+                        POJOHelper.serialize(AuthContextUtils.getAuthorities()), CipherAlgorithm.AES).\n+                        getBytes());\n+            } catch (Exception e) {\n+                LOG.error(\"Could not store authorities\", e);\n+            }\n+        }\n+\n         accessTokenDAO.save(accessToken);\n \n         return body;"},{"sha":"84d9bd96d472d64c40cb65defe032be38f6f80bc","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyTypeDataBinderImpl.java","status":"modified","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5311460f81e50852978fa6823905b10d36700c6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5311460f81e50852978fa6823905b10d36700c6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java?ref=a5311460f81e50852978fa6823905b10d36700c6","patch":"@@ -18,15 +18,31 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.annotation.Resource;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n import org.apache.syncope.core.provisioning.api.data.AnyTypeDataBinder;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.Encryptor;\n+import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -37,16 +53,52 @@ public class AnyTypeDataBinderImpl implements AnyTypeDataBinder {\n \n     private static final Logger LOG = LoggerFactory.getLogger(AnyTypeDataBinder.class);\n \n+    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+\n+    @Resource(name = \"adminUser\")\n+    private String adminUser;\n+\n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n     @Autowired\n     private AnyTypeClassDAO anyTypeClassDAO;\n \n+    @Autowired\n+    private AccessTokenDAO accessTokenDAO;\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n     @Override\n     public AnyType create(final AnyTypeTO anyTypeTO) {\n         AnyType anyType = entityFactory.newEntity(AnyType.class);\n         update(anyType, anyTypeTO);\n+\n+        Set<String> added = EntitlementsHolder.getInstance().addFor(anyType.getKey());\n+\n+        if (!adminUser.equals(AuthContextUtils.getUsername())) {\n+            AccessToken accessToken = accessTokenDAO.findByOwner(AuthContextUtils.getUsername());\n+            try {\n+                Set<SyncopeGrantedAuthority> authorities = new HashSet<>(POJOHelper.deserialize(\n+                        ENCRYPTOR.decode(new String(accessToken.getAuthorities()), CipherAlgorithm.AES),\n+                        new TypeReference<Set<SyncopeGrantedAuthority>>() {\n+                }));\n+\n+                for (String entitlement : added) {\n+                    authorities.add(new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM));\n+                }\n+\n+                accessToken.setAuthorities(ENCRYPTOR.encode(\n+                        POJOHelper.serialize(authorities), CipherAlgorithm.AES).\n+                        getBytes());\n+\n+                accessTokenDAO.save(accessToken);\n+            } catch (Exception e) {\n+                LOG.error(\"Could not fetch or store authorities\", e);\n+            }\n+        }\n+\n         return anyType;\n     }\n \n@@ -75,6 +127,43 @@ public void update(final AnyType anyType, final AnyTypeTO anyTypeTO) {\n         }\n     }\n \n+    @Override\n+    public AnyTypeTO delete(final AnyType anyType) {\n+        AnyTypeTO deleted = getAnyTypeTO(anyType);\n+\n+        anyTypeDAO.delete(anyType.getKey());\n+\n+        final Set<String> removed = EntitlementsHolder.getInstance().removeFor(deleted.getKey());\n+\n+        if (!adminUser.equals(AuthContextUtils.getUsername())) {\n+            AccessToken accessToken = accessTokenDAO.findByOwner(AuthContextUtils.getUsername());\n+            try {\n+                Set<SyncopeGrantedAuthority> authorities = new HashSet<>(POJOHelper.deserialize(\n+                        ENCRYPTOR.decode(new String(accessToken.getAuthorities()), CipherAlgorithm.AES),\n+                        new TypeReference<Set<SyncopeGrantedAuthority>>() {\n+                }));\n+\n+                CollectionUtils.filterInverse(authorities, new Predicate<SyncopeGrantedAuthority>() {\n+\n+                    @Override\n+                    public boolean evaluate(final SyncopeGrantedAuthority authority) {\n+                        return removed.contains(authority.getAuthority());\n+                    }\n+                });\n+\n+                accessToken.setAuthorities(ENCRYPTOR.encode(\n+                        POJOHelper.serialize(authorities), CipherAlgorithm.AES).\n+                        getBytes());\n+\n+                accessTokenDAO.save(accessToken);\n+            } catch (Exception e) {\n+                LOG.error(\"Could not fetch or store authorities\", e);\n+            }\n+        }\n+\n+        return deleted;\n+    }\n+\n     @Override\n     public AnyTypeTO getAnyTypeTO(final AnyType anyType) {\n         AnyTypeTO anyTypeTO = new AnyTypeTO();"},{"sha":"647e850151c617ced79b0f75c024bf2087d1c0a4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5311460f81e50852978fa6823905b10d36700c6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5311460f81e50852978fa6823905b10d36700c6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=a5311460f81e50852978fa6823905b10d36700c6","patch":"@@ -89,6 +89,8 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat\n         \"plainAttrs\", \"derAttrs\", \"virAttrs\", \"resources\", \"securityQuestion\", \"securityAnswer\"\n     };\n \n+    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+\n     @Autowired\n     private RoleDAO roleDAO;\n \n@@ -110,8 +112,6 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat\n     @Resource(name = \"anonymousUser\")\n     private String anonymousUser;\n \n-    private final Encryptor encryptor = Encryptor.getInstance();\n-\n     @Transactional(readOnly = true)\n     @Override\n     public UserTO returnUserTO(final UserTO userTO) {\n@@ -152,7 +152,7 @@ public boolean verifyPassword(final String username, final String password) {\n     @Transactional(readOnly = true)\n     @Override\n     public boolean verifyPassword(final User user, final String password) {\n-        return encryptor.verify(password, user.getCipherAlgorithm(), user.getPassword());\n+        return ENCRYPTOR.verify(password, user.getCipherAlgorithm(), user.getPassword());\n     }\n \n     private void setPassword(final User user, final String password, final SyncopeClientCompositeException scce) {"},{"sha":"cc0b4fdf4d8b0552f3500955a3a74ee0af9fd4de","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthContextUtils.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5311460f81e50852978fa6823905b10d36700c6/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthContextUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5311460f81e50852978fa6823905b10d36700c6/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthContextUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthContextUtils.java?ref=a5311460f81e50852978fa6823905b10d36700c6","patch":"@@ -19,7 +19,9 @@\n package org.apache.syncope.core.spring.security;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -63,6 +65,22 @@ public static void updateUsername(final String newUsername) {\n         SecurityContextHolder.getContext().setAuthentication(newAuth);\n     }\n \n+    public static Set<SyncopeGrantedAuthority> getAuthorities() {\n+        SecurityContext ctx = SecurityContextHolder.getContext();\n+        if (ctx != null && ctx.getAuthentication() != null && ctx.getAuthentication().getAuthorities() != null) {\n+            Set<SyncopeGrantedAuthority> result = new HashSet<>();\n+            for (GrantedAuthority authority : ctx.getAuthentication().getAuthorities()) {\n+                if (authority instanceof SyncopeGrantedAuthority) {\n+                    result.add(SyncopeGrantedAuthority.class.cast(authority));\n+                }\n+            }\n+\n+            return result;\n+        }\n+\n+        return Collections.emptySet();\n+    }\n+\n     public static Map<String, Set<String>> getAuthorizations() {\n         Map<String, Set<String>> result = null;\n "},{"sha":"aba2e50d24dbb4eefc82d80d79a64d1b6b05f712","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":24,"deletions":1,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5311460f81e50852978fa6823905b10d36700c6/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5311460f81e50852978fa6823905b10d36700c6/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=a5311460f81e50852978fa6823905b10d36700c6","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.spring.security;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.Date;\n@@ -38,6 +39,7 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n@@ -62,6 +64,7 @@\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -362,6 +365,7 @@ public Set<SyncopeGrantedAuthority> authenticate(final JWTAuthentication authent\n         }\n \n         Set<SyncopeGrantedAuthority> authorities;\n+\n         if (adminUser.equals(accessToken.getOwner())) {\n             authorities = getAdminAuthorities();\n         } else {\n@@ -381,7 +385,26 @@ public Set<SyncopeGrantedAuthority> authenticate(final JWTAuthentication authent\n                 throw new DisabledException(\"User \" + user.getUsername() + \" not allowed to authenticate\");\n             }\n \n-            authorities = getUserAuthorities(user);\n+            if (user.isMustChangePassword()) {\n+                authorities = Collections.singleton(\n+                        new SyncopeGrantedAuthority(StandardEntitlement.MUST_CHANGE_PASSWORD));\n+            } else if (accessToken.getAuthorities() == null) {\n+                LOG.debug(\"No authorities found in JWT, calculating...\");\n+\n+                authorities = getUserAuthorities(user);\n+            } else {\n+                LOG.debug(\"Authorities found in JWT, fetching...\");\n+\n+                try {\n+                    authorities = POJOHelper.deserialize(\n+                            ENCRYPTOR.decode(new String(accessToken.getAuthorities()), CipherAlgorithm.AES),\n+                            new TypeReference<Set<SyncopeGrantedAuthority>>() {\n+                    });\n+                } catch (Exception e) {\n+                    LOG.error(\"Could not read stored authorities\", e);\n+                    authorities = Collections.emptySet();\n+                }\n+            }\n         }\n \n         return authorities;"},{"sha":"28cc970256cba23c13f226f890fbdd8834c992d9","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/UsernamePasswordAuthenticationProvider.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5311460f81e50852978fa6823905b10d36700c6/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FUsernamePasswordAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5311460f81e50852978fa6823905b10d36700c6/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FUsernamePasswordAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FUsernamePasswordAuthenticationProvider.java?ref=a5311460f81e50852978fa6823905b10d36700c6","patch":"@@ -42,6 +42,8 @@ public class UsernamePasswordAuthenticationProvider implements AuthenticationPro\n \n     protected static final Logger LOG = LoggerFactory.getLogger(UsernamePasswordAuthenticationProvider.class);\n \n+    protected static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+\n     @Autowired\n     protected AuthDataAccessor dataAccessor;\n \n@@ -63,8 +65,6 @@ public class UsernamePasswordAuthenticationProvider implements AuthenticationPro\n     @Resource(name = \"anonymousKey\")\n     protected String anonymousKey;\n \n-    protected final Encryptor encryptor = Encryptor.getInstance();\n-\n     /**\n      * @param adminPassword the adminPassword to set\n      */\n@@ -99,7 +99,7 @@ public Authentication authenticate(final Authentication authentication) {\n         } else if (adminUser.equals(authentication.getName())) {\n             username[0] = adminUser;\n             if (SyncopeConstants.MASTER_DOMAIN.equals(domainKey)) {\n-                authenticated = encryptor.verify(\n+                authenticated = ENCRYPTOR.verify(\n                         authentication.getCredentials().toString(),\n                         CipherAlgorithm.valueOf(adminPasswordAlgorithm),\n                         adminPassword);\n@@ -112,7 +112,7 @@ public Authentication authenticate(final Authentication authentication) {\n                     public Boolean exec() {\n                         Domain domain = dataAccessor.findDomain(domainToFind);\n \n-                        return encryptor.verify(\n+                        return ENCRYPTOR.verify(\n                                 authentication.getCredentials().toString(),\n                                 domain.getAdminCipherAlgorithm(),\n                                 domain.getAdminPwd());"}]}