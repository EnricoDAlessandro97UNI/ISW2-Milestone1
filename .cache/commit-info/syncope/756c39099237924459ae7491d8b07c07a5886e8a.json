{"sha":"756c39099237924459ae7491d8b07c07a5886e8a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjc1NmMzOTA5OTIzNzkyNDQ1OWFlNzQ5MWQ4YjA3YzA3YTU4ODZlOGE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-11-21T07:50:59Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-11-21T07:51:14Z"},"message":"Upgrading Elasticsearch","tree":{"sha":"04fab65720aed9ca859af11bb414af2eca6dc434","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/04fab65720aed9ca859af11bb414af2eca6dc434"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/756c39099237924459ae7491d8b07c07a5886e8a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/756c39099237924459ae7491d8b07c07a5886e8a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/756c39099237924459ae7491d8b07c07a5886e8a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/756c39099237924459ae7491d8b07c07a5886e8a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"ec294925415c9fc58e81c74551d28176245e76e0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ec294925415c9fc58e81c74551d28176245e76e0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ec294925415c9fc58e81c74551d28176245e76e0"}],"stats":{"total":165,"additions":67,"deletions":98},"files":[{"sha":"464d94e1d46ced473122d9b00f9979baf66d688a","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/756c39099237924459ae7491d8b07c07a5886e8a/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/756c39099237924459ae7491d8b07c07a5886e8a/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java?ref=756c39099237924459ae7491d8b07c07a5886e8a","patch":"@@ -186,11 +186,6 @@ public XContentBuilder builder(final Any<?> any) throws IOException {\n     }\n \n     public String getContextDomainName(final AnyTypeKind kind) {\n-        return AuthContextUtils.getDomain().toLowerCase()\n-                + (kind.equals(AnyTypeKind.USER)\n-                ? \"_user\"\n-                : (kind.equals(AnyTypeKind.GROUP)\n-                ? \"_group\"\n-                : \"_anyobject\"));\n+        return AuthContextUtils.getDomain().toLowerCase() + \"_\" + kind.name().toLowerCase();\n     }\n }"},{"sha":"b2e1a435605d7259849ddb998982ce5f783dbae8","filename":"ext/elasticsearch/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ElasticsearchReindex.java","status":"modified","additions":55,"deletions":81,"changes":136,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/756c39099237924459ae7491d8b07c07a5886e8a/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/756c39099237924459ae7491d8b07c07a5886e8a/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java?ref=756c39099237924459ae7491d8b07c07a5886e8a","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java.job;\n \n+import java.io.IOException;\n import java.util.concurrent.ExecutionException;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n@@ -66,72 +67,16 @@ public class ElasticsearchReindex extends AbstractSchedTaskJobDelegate {\n     @Override\n     protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         if (!dryRun) {\n+            LOG.debug(\"Start rebuilding indexes\");\n+\n             try {\n-                checkExistsIndexResponse(AnyTypeKind.USER);\n-                checkExistsIndexResponse(AnyTypeKind.GROUP);\n-                checkExistsIndexResponse(AnyTypeKind.ANY_OBJECT);\n-\n-                XContentBuilder settings = XContentFactory.jsonBuilder().\n-                        startObject().\n-                        startObject(\"analysis\").\n-                        startObject(\"analyzer\").\n-                        startObject(\"string_lowercase\").\n-                        field(\"type\", \"custom\").\n-                        field(\"tokenizer\", \"standard\").\n-                        field(\"filter\").\n-                        startArray().\n-                        value(\"lowercase\").\n-                        endArray().\n-                        endObject().\n-                        endObject().\n-                        endObject().\n-                        endObject();\n-                XContentBuilder mappingUser = XContentFactory.jsonBuilder().\n-                        startObject().\n-                        startArray(\"dynamic_templates\").\n-                        startObject().\n-                        startObject(\"strings\").\n-                        field(\"match_mapping_type\", \"string\").\n-                        startObject(\"mapping\").\n-                        field(\"type\", \"keyword\").\n-                        field(\"analyzer\", \"string_lowercase\").\n-                        endObject().\n-                        endObject().\n-                        endObject().\n-                        endArray().\n-                        endObject();\n-                XContentBuilder mappingGroup = XContentFactory.jsonBuilder().\n-                        startObject().\n-                        startArray(\"dynamic_templates\").\n-                        startObject().\n-                        startObject(\"strings\").\n-                        field(\"match_mapping_type\", \"string\").\n-                        startObject(\"mapping\").\n-                        field(\"type\", \"keyword\").\n-                        field(\"analyzer\", \"string_lowercase\").\n-                        endObject().\n-                        endObject().\n-                        endObject().\n-                        endArray().\n-                        endObject();\n-                XContentBuilder mappingAnyobject = XContentFactory.jsonBuilder().\n-                        startObject().\n-                        startArray(\"dynamic_templates\").\n-                        startObject().\n-                        startObject(\"strings\").\n-                        field(\"match_mapping_type\", \"string\").\n-                        startObject(\"mapping\").\n-                        field(\"type\", \"keyword\").\n-                        field(\"analyzer\", \"string_lowercase\").\n-                        endObject().\n-                        endObject().\n-                        endObject().\n-                        endArray().\n-                        endObject();\n-\n-                createIndexResponse(AnyTypeKind.USER, settings, mappingUser);\n-                createIndexResponse(AnyTypeKind.GROUP, settings, mappingGroup);\n-                createIndexResponse(AnyTypeKind.ANY_OBJECT, settings, mappingAnyobject);\n+                removeIndexIfExists(AnyTypeKind.USER);\n+                removeIndexIfExists(AnyTypeKind.GROUP);\n+                removeIndexIfExists(AnyTypeKind.ANY_OBJECT);\n+\n+                createIndex(AnyTypeKind.USER);\n+                createIndex(AnyTypeKind.GROUP);\n+                createIndex(AnyTypeKind.ANY_OBJECT);\n \n                 LOG.debug(\"Indexing users...\");\n                 for (int page = 1; page <= (userDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n@@ -145,6 +90,7 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n                         LOG.debug(\"Index successfully created for {}: {}\", user, response);\n                     }\n                 }\n+\n                 LOG.debug(\"Indexing groups...\");\n                 for (int page = 1; page <= (groupDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                     for (Group group : groupDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n@@ -157,6 +103,7 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n                         LOG.debug(\"Index successfully created for {}: {}\", group, response);\n                     }\n                 }\n+\n                 LOG.debug(\"Indexing any objects...\");\n                 for (int page = 1; page <= (anyObjectDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                     for (AnyObject anyObject : anyObjectDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n@@ -170,19 +117,18 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n                     }\n                 }\n \n-                LOG.debug(\"Rebuild index {} successfully completed\", AuthContextUtils.getDomain().toLowerCase());\n+                LOG.debug(\"Rebuild indexes for domain {} successfully completed\", AuthContextUtils.getDomain());\n             } catch (Exception e) {\n-                throw new JobExecutionException(\n-                        \"While rebuilding index \" + AuthContextUtils.getDomain().toLowerCase(), e);\n+                throw new JobExecutionException(\"While rebuilding index for domain \" + AuthContextUtils.getDomain(), e);\n             }\n         }\n \n         return \"SUCCESS\";\n     }\n \n-    private void checkExistsIndexResponse(final AnyTypeKind kind) throws InterruptedException, ExecutionException {\n-        LOG.debug(\"Start rebuild index {}\",\n-                elasticsearchUtils.getContextDomainName(kind));\n+    private void removeIndexIfExists(final AnyTypeKind kind)\n+            throws InterruptedException, ExecutionException {\n+\n         IndicesExistsResponse existsIndexResponse = client.admin().indices().\n                 exists(new IndicesExistsRequest(elasticsearchUtils.getContextDomainName(kind))).\n                 get();\n@@ -195,17 +141,45 @@ private void checkExistsIndexResponse(final AnyTypeKind kind) throws Interrupted\n         }\n     }\n \n-    private void createIndexResponse(final AnyTypeKind kind,\n-            final XContentBuilder settings,\n-            final XContentBuilder mapping) throws InterruptedException, ExecutionException {\n-\n-        CreateIndexResponse createIndexResponseUser = client.admin().indices().\n-                create(new CreateIndexRequest(elasticsearchUtils.getContextDomainName(kind)).\n-                        settings(settings).\n-                        mapping(kind.name(), mapping)).\n-                get();\n+    private void createIndex(final AnyTypeKind kind)\n+            throws InterruptedException, ExecutionException, IOException {\n+\n+        XContentBuilder settings = XContentFactory.jsonBuilder().\n+                startObject().\n+                startObject(\"analysis\").\n+                startObject(\"analyzer\").\n+                startObject(\"string_lowercase\").\n+                field(\"type\", \"custom\").\n+                field(\"tokenizer\", \"standard\").\n+                field(\"filter\").\n+                startArray().\n+                value(\"lowercase\").\n+                endArray().\n+                endObject().\n+                endObject().\n+                endObject().\n+                endObject();\n+\n+        XContentBuilder mapping = XContentFactory.jsonBuilder().\n+                startObject().\n+                startArray(\"dynamic_templates\").\n+                startObject().\n+                startObject(\"strings\").\n+                field(\"match_mapping_type\", \"string\").\n+                startObject(\"mapping\").\n+                field(\"type\", \"keyword\").\n+                field(\"analyzer\", \"string_lowercase\").\n+                endObject().\n+                endObject().\n+                endObject().\n+                endArray().\n+                endObject();\n+\n+        CreateIndexResponse response = client.admin().indices().\n+                create(new CreateIndexRequest(elasticsearchUtils.getContextDomainName(kind)).settings(settings).\n+                        mapping(kind.name(), mapping)).get();\n         LOG.debug(\"Successfully created {} for {}: {}\",\n-                elasticsearchUtils.getContextDomainName(kind), kind.name(), createIndexResponseUser);\n+                elasticsearchUtils.getContextDomainName(kind), kind.name(), response);\n     }\n \n     @Override"},{"sha":"404f7897d28a54dac73769637487d4c34a26db49","filename":"fit/core-reference/src/main/java/org/apache/syncope/core/logic/init/ElasticsearchInit.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/756c39099237924459ae7491d8b07c07a5886e8a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FElasticsearchInit.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/756c39099237924459ae7491d8b07c07a5886e8a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FElasticsearchInit.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FElasticsearchInit.java?ref=756c39099237924459ae7491d8b07c07a5886e8a","patch":"@@ -33,6 +33,8 @@\n @Component\n public class ElasticsearchInit {\n \n+    private static final String ES_REINDEX = \"org.apache.syncope.core.provisioning.java.job.ElasticsearchReindex\";\n+\n     @Autowired\n     private ImplementationDAO implementationDAO;\n \n@@ -42,8 +44,6 @@ public class ElasticsearchInit {\n     @Autowired\n     private TaskLogic taskLogic;\n \n-    private static final String ES_REINDEX = \"org.apache.syncope.core.provisioning.java.job.ElasticsearchReindex\";\n-\n     @Transactional\n     public void init() {\n         Implementation reindex = implementationDAO.find(ImplementationType.TASKJOB_DELEGATE).\n@@ -67,5 +67,4 @@ public void init() {\n \n         taskLogic.execute(task.getKey(), null, false);\n     }\n-\n }"},{"sha":"3ab13c9bca2fdfe73cd39913c8edc53889536ca4","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/756c39099237924459ae7491d8b07c07a5886e8a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/756c39099237924459ae7491d8b07c07a5886e8a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=756c39099237924459ae7491d8b07c07a5886e8a","patch":"@@ -252,7 +252,6 @@ public void load() {\n             for (Map.Entry<String, DataSource> entry : domainsHolder.getDomains().entrySet()) {\n                 AuthContextUtils.execWithAuthContext(entry.getKey(), () -> {\n                     elasticsearchInit.init();\n-\n                     return null;\n                 });\n             }"},{"sha":"afe4a540fd3d15033b10c0653a8aaf126d274786","filename":"pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/756c39099237924459ae7491d8b07c07a5886e8a/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/756c39099237924459ae7491d8b07c07a5886e8a/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=756c39099237924459ae7491d8b07c07a5886e8a","patch":"@@ -415,7 +415,7 @@ under the License.\n     <slf4j.version>1.7.25</slf4j.version>\n     <opensaml.version>3.3.0</opensaml.version>\n \n-    <elasticsearch.version>6.5.0</elasticsearch.version>\n+    <elasticsearch.version>6.5.1</elasticsearch.version>\n \n     <log4j.version>2.11.1</log4j.version>\n     <disruptor.version>3.4.2</disruptor.version>\n@@ -2326,7 +2326,7 @@ under the License.\n             <link>https://docs.spring.io/spring-security/site/docs/5.0.x/api/</link>\n             <link>http://www.flowable.org/docs/javadocs/</link>\n             <link>https://build.shibboleth.net/nexus/content/sites/site/java-opensaml/3.3.0/apidocs/</link>\n-            <link>https://artifacts.elastic.co/javadoc/org/elasticsearch/elasticsearch/6.5.0/index.html</link>\n+            <link>https://artifacts.elastic.co/javadoc/org/elasticsearch/elasticsearch/6.5.1/index.html</link>\n             <link>http://docs.swagger.io/swagger-core/v2.0.5/apidocs/</link>\n           </links>\n         </configuration>"},{"sha":"27738a37d8e095885b804504a844fbe5d77dd9f9","filename":"src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/756c39099237924459ae7491d8b07c07a5886e8a/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fcustomization.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/756c39099237924459ae7491d8b07c07a5886e8a/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fcustomization.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fcustomization.adoc?ref=756c39099237924459ae7491d8b07c07a5886e8a","patch":"@@ -487,12 +487,14 @@ classpath*:/provisioning*Context.xml\n classpath*:/workflow*Context.xml\n ....\n \n-It is also required to initialize the Elasticsearch indexes.\n+It is also required to initialize the Elasticsearch indexes: add a new Java <<implementations,implementation>> for\n+`TASKJOB_DELEGATE` and use `org.apache.syncope.core.provisioning.java.job.ElasticsearchReindex` as class. +\n+Then, create a new <<tasks-custom, custom task>>, select the implementation just created as job delegate and execute it.\n \n-Add a new Java <<implementations,implementation>> for `TASKJOB_DELEGATE` and use \n-`org.apache.syncope.core.provisioning.java.job.ElasticsearchReindex` as class.\n-\n-Then, create a new <<tasks-custom, Custom task>>, select the implementation just created as job delegate and execute it.\n+[TIP]\n+The `org.apache.syncope.core.provisioning.java.job.ElasticsearchReindex` custom task created above is not meant for\n+scheduled execution; rather, it can be run every time you want to blank and re-create the Elasticsearch indexes\n+starting from Syncope's users, groups and any objects.\n \n [discrete]\n ===== Enable the <<SCIM>> extension"}]}