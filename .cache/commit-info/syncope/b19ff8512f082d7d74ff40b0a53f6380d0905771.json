{"sha":"b19ff8512f082d7d74ff40b0a53f6380d0905771","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmIxOWZmODUxMmYwODJkN2Q3NGZmNDBiMGE1M2Y2MzgwZDA5MDU3NzE=","commit":{"author":{"name":"giacomolm","email":"giacomolm@hotmail.it","date":"2014-12-30T15:47:31Z"},"committer":{"name":"giacomolm","email":"giacomolm@hotmail.it","date":"2014-12-30T15:47:31Z"},"message":"Fixes #4 - Route functionalities are displayed only with Camel PM","tree":{"sha":"be9cf173e74d4f18430a1d9421127aea28a0e611","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/be9cf173e74d4f18430a1d9421127aea28a0e611"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b19ff8512f082d7d74ff40b0a53f6380d0905771","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b19ff8512f082d7d74ff40b0a53f6380d0905771","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b19ff8512f082d7d74ff40b0a53f6380d0905771","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b19ff8512f082d7d74ff40b0a53f6380d0905771/comments","author":{"login":"giacomolm","id":4027829,"node_id":"MDQ6VXNlcjQwMjc4Mjk=","avatar_url":"https://avatars.githubusercontent.com/u/4027829?v=4","gravatar_id":"","url":"https://api.github.com/users/giacomolm","html_url":"https://github.com/giacomolm","followers_url":"https://api.github.com/users/giacomolm/followers","following_url":"https://api.github.com/users/giacomolm/following{/other_user}","gists_url":"https://api.github.com/users/giacomolm/gists{/gist_id}","starred_url":"https://api.github.com/users/giacomolm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/giacomolm/subscriptions","organizations_url":"https://api.github.com/users/giacomolm/orgs","repos_url":"https://api.github.com/users/giacomolm/repos","events_url":"https://api.github.com/users/giacomolm/events{/privacy}","received_events_url":"https://api.github.com/users/giacomolm/received_events","type":"User","site_admin":false},"committer":{"login":"giacomolm","id":4027829,"node_id":"MDQ6VXNlcjQwMjc4Mjk=","avatar_url":"https://avatars.githubusercontent.com/u/4027829?v=4","gravatar_id":"","url":"https://api.github.com/users/giacomolm","html_url":"https://github.com/giacomolm","followers_url":"https://api.github.com/users/giacomolm/followers","following_url":"https://api.github.com/users/giacomolm/following{/other_user}","gists_url":"https://api.github.com/users/giacomolm/gists{/gist_id}","starred_url":"https://api.github.com/users/giacomolm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/giacomolm/subscriptions","organizations_url":"https://api.github.com/users/giacomolm/orgs","repos_url":"https://api.github.com/users/giacomolm/repos","events_url":"https://api.github.com/users/giacomolm/events{/privacy}","received_events_url":"https://api.github.com/users/giacomolm/received_events","type":"User","site_admin":false},"parents":[{"sha":"d8ec8da83e0f807e89e830540e756470aa231e51","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d8ec8da83e0f807e89e830540e756470aa231e51","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d8ec8da83e0f807e89e830540e756470aa231e51"}],"stats":{"total":239,"additions":218,"deletions":21},"files":[{"sha":"f9559519178f90a704e478e276b685c855ba51b8","filename":"client/src/main/java/org/apache/syncope/client/SyncopeClient.java","status":"modified","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b19ff8512f082d7d74ff40b0a53f6380d0905771/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b19ff8512f082d7d74ff40b0a53f6380d0905771/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java?ref=b19ff8512f082d7d74ff40b0a53f6380d0905771","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.common.search.OrderByClauseBuilder;\n import org.apache.syncope.common.search.RoleFiqlSearchConditionBuilder;\n import org.apache.syncope.common.search.UserFiqlSearchConditionBuilder;\n+import org.apache.syncope.common.services.RouteService;\n import org.apache.syncope.common.services.UserSelfService;\n import org.apache.syncope.common.services.WorkflowService;\n import org.apache.syncope.common.types.Preference;\n@@ -265,6 +266,31 @@ public boolean isActivitiEnabledFor(final SubjectType subjectType) {\n \n         return result;\n     }\n+    \n+    /**\n+     * Checks whether Camel is enabled for users / roles, by calling <tt>RouteService</tt>'s options.\n+     *\n+     * @param subjectType user / role\n+     * @return whether Camel Provisioning is enabled for given attributable type\n+     * @see RouteService#getOptions(org.apache.syncope.common.types.SubjectType)\n+     */\n+    public boolean isCamelEnabledFor(final SubjectType subjectType) {\n+        Response options = getService(RouteService.class).getOptions(subjectType);\n+\n+        boolean result;\n+        switch (subjectType) {\n+            case ROLE:\n+                result = Boolean.valueOf(options.getHeaderString(RESTHeaders.CAMEL_ROLE_PROVISIONING_MANAGER));\n+                break;\n+\n+            case USER:\n+            default:\n+                result = Boolean.valueOf(options.getHeaderString(RESTHeaders.CAMEL_USER_PROVISIONING_MANAGER));\n+                break;\n+        }\n+\n+        return result;\n+    }\n \n     /**\n      * Fetches <tt>ETag</tt> header value from latest service run (if available)."},{"sha":"6e3090f50b1042748b1ca0d695ae11abe2f4ac74","filename":"common/src/main/java/org/apache/syncope/common/services/RouteService.java","status":"modified","additions":33,"deletions":11,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b19ff8512f082d7d74ff40b0a53f6380d0905771/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRouteService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b19ff8512f082d7d74ff40b0a53f6380d0905771/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRouteService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRouteService.java?ref=b19ff8512f082d7d74ff40b0a53f6380d0905771","patch":"@@ -16,34 +16,56 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.common.services;\n \n import java.util.List;\n+import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.GET;\n+import javax.ws.rs.OPTIONS;\n import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n import org.apache.syncope.common.to.RouteTO;\n+import org.apache.syncope.common.types.SubjectType;\n+\n+@Path(\"routes/{kind}\")\n+public interface RouteService extends JAXRSService {\n+\n+    /**\n+     * Checks whether Camel is choosed as default provisioning engine.\n+     *\n+     * @param kind user or role\n+     * @return <tt>Response</tt> contains special syncope HTTP header indicating if Camel is enabled for\n+     * users / roles provisioning\n+     * @see org.apache.syncope.common.types.RESTHeaders#CAMEL_USER_PROVISIONING_MANAGER\n+     * @see org.apache.syncope.common.types.RESTHeaders#CAMEL_ROLE_PROVISIONING_MANAGER\n+     *\n+     * @Descriptions({\n+     * @Description(target = DocTarget.RESPONSE,\n+     * value = \"Contains special syncope HTTP header indicating if Camel is the default provisioning manager\")\n+     * }) */\n+    @OPTIONS\n+    Response getOptions(@NotNull @PathParam(\"kind\") SubjectType kind);\n \n-@Path(\"routes\")\n-public interface RouteService extends JAXRSService{\n-    \n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<RouteTO> getRoutes();\n-    \n+    List<RouteTO> getRoutes(@NotNull @PathParam(\"kind\") SubjectType kind);\n+\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Path(\"{id}\")\n-    public RouteTO getRoute(@PathParam(\"id\") Long Id);\n-    \n+    public RouteTO getRoute(@NotNull @PathParam(\"kind\") SubjectType kind, @PathParam(\"id\") Long Id);\n+\n     @PUT\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Path(\"{id}\")\n-    void importRoute(@PathParam(\"id\") Long id, RouteTO route);\n-    \n-}\n\\ No newline at end of file\n+    void importRoute(@NotNull @PathParam(\"kind\") SubjectType kind,@PathParam(\"id\") Long id, RouteTO route);\n+\n+}"},{"sha":"3e7cdc38cab0e7ec679fa1da4c9e5505fbf8237f","filename":"common/src/main/java/org/apache/syncope/common/types/RESTHeaders.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b19ff8512f082d7d74ff40b0a53f6380d0905771/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FRESTHeaders.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b19ff8512f082d7d74ff40b0a53f6380d0905771/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FRESTHeaders.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FRESTHeaders.java?ref=b19ff8512f082d7d74ff40b0a53f6380d0905771","patch":"@@ -57,6 +57,17 @@ public final class RESTHeaders {\n      * Option key stating if Activiti workflow adapter is in use for roles.\n      */\n     public static final String ACTIVITI_ROLE_ENABLED = \"Syncope.Activiti.Role.Enabled\";\n+    \n+     /**\n+     * Option key stating if Camel is the current provisioning manager engine.\n+     */\n+    public static final String CAMEL_USER_PROVISIONING_MANAGER =\"Syncope.Provisioning.Camel.User.Enabled\";\n+    \n+    /**\n+     * Option key stating if Camel is the current provisioning manager engine.\n+     */\n+    public static final String CAMEL_ROLE_PROVISIONING_MANAGER =\"Syncope.Provisioning.Camel.Role.Enabled\";\n+\n \n     /**\n      * HTTP header key for object ID assigned to an object after its creation."},{"sha":"53b03c09406a84c4623b930d4209fb0a6f3ce814","filename":"console/src/main/java/org/apache/syncope/console/SyncopeSession.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b19ff8512f082d7d74ff40b0a53f6380d0905771/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b19ff8512f082d7d74ff40b0a53f6380d0905771/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java?ref=b19ff8512f082d7d74ff40b0a53f6380d0905771","patch":"@@ -114,6 +114,13 @@ public boolean isActivitiEnabledFor(final SubjectType type) {\n                 : clients.values().iterator().next();\n         return client.isActivitiEnabledFor(type);\n     }\n+    \n+    public boolean isCamelEnabledFor(final SubjectType type) {\n+        SyncopeClient client = clients.isEmpty()\n+                ? clientFactory.createAnonymous()\n+                : clients.values().iterator().next();\n+        return client.isCamelEnabledFor(type);\n+    }\n \n     public <T> T getService(final Class<T> service) {\n         return getService(service, this.username, this.password);"},{"sha":"05316ddef035aa05b8008c734a2f16081edd3c33","filename":"console/src/main/java/org/apache/syncope/console/pages/Configuration.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b19ff8512f082d7d74ff40b0a53f6380d0905771/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b19ff8512f082d7d74ff40b0a53f6380d0905771/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java?ref=b19ff8512f082d7d74ff40b0a53f6380d0905771","patch":"@@ -52,6 +52,7 @@\n import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n import org.apache.syncope.console.wicket.markup.html.link.VeilPopupSettings;\n+import org.apache.wicket.Component;\n import org.apache.wicket.Page;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n@@ -278,7 +279,8 @@ protected byte[] getImageData(final IResource.Attributes attributes) {\n         add(new LayoutsPanel(\"selfMembershipLayoutPanel\", AttrLayoutType.SELF_MEMBERSHIP, feedbackPanel));\n         \n         //Route Management\n-        add(editRouteWin = new ModalWindow(\"editRouteWin\"));\n+        editRouteWin = new ModalWindow(\"editRouteWin\");\n+        add(editRouteWin);\n         setupRoutes();\n     }\n \n@@ -828,7 +830,18 @@ public Page createPage() {\n         WebMarkupContainer routeContainer = new WebMarkupContainer(\"routesContainer\");\n         routeContainer.add(routeTable);\n         routeContainer.setOutputMarkupId(true);\n+        \n+        ListItem<Object> li = new ListItem<Object>(\"routeTab\", 0);\n+        if (routeRestClient.isCamelEnabledForUsers() == false) {\n+            li.setVisible(false);\n+            routeContainer.setVisible(false);   \n+        }\n+        else{\n+            li.setVisible(true);\n+            routeContainer.setVisible(true); \n+        }\n \n+        add(li);\n         add(routeContainer);\n \n         editRouteWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);"},{"sha":"dcfb8c3bf2500e63f4bebcca7ce75944a6a2cfb6","filename":"console/src/main/java/org/apache/syncope/console/rest/RouteRestClient.java","status":"modified","additions":19,"deletions":3,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b19ff8512f082d7d74ff40b0a53f6380d0905771/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRouteRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b19ff8512f082d7d74ff40b0a53f6380d0905771/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRouteRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRouteRestClient.java?ref=b19ff8512f082d7d74ff40b0a53f6380d0905771","patch":"@@ -19,8 +19,11 @@\n package org.apache.syncope.console.rest;\n \n import java.util.List;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.common.services.RouteService;\n import org.apache.syncope.common.to.RouteTO;\n+import org.apache.syncope.common.types.SubjectType;\n+import org.apache.syncope.console.SyncopeSession;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n@@ -31,17 +34,30 @@ public class RouteRestClient extends BaseRestClient{\n     protected static final Logger LOG = LoggerFactory.getLogger(RouteRestClient.class);\n     \n     public List<RouteTO> readRoutes(){\n-        return getService(RouteService.class).getRoutes();\n+        return getService(RouteService.class).getRoutes(SubjectType.USER);\n     }\n     \n     public RouteTO readRoute(Long id){\n-        return getService(RouteService.class).getRoute(id);\n+        return getService(RouteService.class).getRoute(SubjectType.USER, id);\n     }\n     \n     public void updateRoute(Long id, String definition){\n         RouteTO routeTO = readRoute(id);        \n         routeTO.setRouteContent(definition);     \n-        getService(RouteService.class).importRoute(routeTO.getId(), routeTO);\n+        getService(RouteService.class).importRoute(SubjectType.USER, routeTO.getId(), routeTO);\n+    }\n+    \n+    public boolean isCamelEnabledForUsers() {\n+        Boolean result = null;\n+        try {\n+            result = SyncopeSession.get().isCamelEnabledFor(SubjectType.USER);\n+        } catch (SyncopeClientException e) {\n+            LOG.error(\"While seeking if Camel is enabled for users\", e);\n+        }\n+\n+        return result == null\n+                ? false\n+                : result.booleanValue();\n     }\n     \n }"},{"sha":"130c89a20b56f22de034b74abef23dafbf27705e","filename":"console/src/main/resources/org/apache/syncope/console/pages/Configuration.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b19ff8512f082d7d74ff40b0a53f6380d0905771/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b19ff8512f082d7d74ff40b0a53f6380d0905771/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.html?ref=b19ff8512f082d7d74ff40b0a53f6380d0905771","patch":"@@ -38,7 +38,7 @@\n                 <li><a href=\"#notifications\"><span><wicket:message key=\"notifications\"/></span></a></li>\n                 <li><a href=\"#securityQuestions\"><span><wicket:message key=\"securityQuestions\"/></span></a></li>\n                 <li><a href=\"#workflow\"><span><wicket:message key=\"workflow\"/></span></a></li>\n-                <li><a href=\"#routes\"><span><wicket:message key=\"routes\"/></span></a></li>\n+                <li wicket:id=\"routeTab\"><a href=\"#routes\"><span><wicket:message key=\"routes\"/></span></a></li>\n                 <li><a href=\"#logs\"><span><wicket:message key=\"logs\"/></span></a></li>\n             </ul>\n             <div id=\"layouts\">"},{"sha":"646c35003436564733d6784cc30e188d748fa2b9","filename":"core/src/main/java/org/apache/syncope/core/provisioning/camel/CamelDetector.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b19ff8512f082d7d74ff40b0a53f6380d0905771/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelDetector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b19ff8512f082d7d74ff40b0a53f6380d0905771/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelDetector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelDetector.java?ref=b19ff8512f082d7d74ff40b0a53f6380d0905771","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.camel;\n+\n+import java.io.InputStream;\n+import java.util.Properties;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.core.persistence.dao.impl.ContentLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * @author giacomolm\n+ */\n+public class CamelDetector {\n+    \n+    private static final Logger LOG = LoggerFactory.getLogger(CamelDetector.class);\n+\n+    private static final String PROVISIONING_PROPERTIES = \"/provisioning.properties\";\n+     \n+    private static String userPMClassName;\n+\n+    private static String rolePMClassName;\n+    \n+     /**\n+     * Read classpath:/provisioning.properties in order to determine the configured provisioning adapter class name.\n+     */\n+    static {\n+        Properties props = new Properties();\n+        InputStream propStream = null;\n+        try {\n+            propStream = ContentLoader.class.getResourceAsStream(PROVISIONING_PROPERTIES);\n+            props.load(propStream);\n+            userPMClassName = props.getProperty(\"userProvisioningManager\");\n+            rolePMClassName = props.getProperty(\"roleProvisioningManager\");\n+        } catch (Exception e) {\n+            LOG.error(\"Could not load workflow.properties\", e);\n+        } finally {\n+            IOUtils.closeQuietly(propStream);\n+        }\n+    }\n+    \n+    /**\n+     * Check if the configured user provisioning manager is Camel's.\n+     *\n+     * @return whether Activiti is configured for user workflow or not\n+     */\n+    public static boolean isCamelEnabledForUsers() {\n+        return userPMClassName != null && userPMClassName.equals(CamelUserProvisioningManager.class.getName());\n+    }\n+\n+    /**\n+     * Check if the configured role provisioning manager is Camel's.\n+     *\n+     * @return whether Activiti is configured for role workflow or not\n+     */\n+    public static boolean isCamelEnabledForRoles() {\n+        return rolePMClassName != null && rolePMClassName.equals(CamelRoleProvisioningManager.class.getName());\n+    }\n+}"},{"sha":"29359f89688d47d7ab2274779dededb33e71fe91","filename":"core/src/main/java/org/apache/syncope/core/services/RouteServiceImpl.java","status":"modified","additions":28,"deletions":3,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b19ff8512f082d7d74ff40b0a53f6380d0905771/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRouteServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b19ff8512f082d7d74ff40b0a53f6380d0905771/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRouteServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRouteServiceImpl.java?ref=b19ff8512f082d7d74ff40b0a53f6380d0905771","patch":"@@ -18,33 +18,58 @@\n  */\n package org.apache.syncope.core.services;\n \n+import static org.apache.syncope.core.services.AbstractServiceImpl.OPTIONS_ALLOW;\n+\n import java.util.List;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.services.RouteService;\n import org.apache.syncope.common.to.RouteTO;\n+import org.apache.syncope.common.types.RESTHeaders;\n+import org.apache.syncope.common.types.SubjectType;\n+import org.apache.syncope.core.provisioning.camel.CamelDetector;\n import org.apache.syncope.core.rest.controller.RouteController;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n public class RouteServiceImpl extends AbstractServiceImpl implements RouteService {\n+    \n+    @Override\n+    public Response getOptions(final SubjectType kind) {\n+        String key;\n+        String value;\n+        if (kind == SubjectType.USER) {\n+            key = RESTHeaders.CAMEL_USER_PROVISIONING_MANAGER;\n+            value = Boolean.toString(CamelDetector.isCamelEnabledForUsers());\n+        } else {\n+            key = RESTHeaders.CAMEL_ROLE_PROVISIONING_MANAGER;\n+            value = Boolean.toString(CamelDetector.isCamelEnabledForRoles());\n+        }\n+        Response.ResponseBuilder builder = Response.ok().header(HttpHeaders.ALLOW, OPTIONS_ALLOW);\n+        if (key != null && value != null) {\n+            builder.header(key, value);\n+        }\n+        return builder.build();\n+    }\n \n     @Autowired\n     private RouteController controller;\n \n     @Override\n-    public List<RouteTO> getRoutes() {\n+    public List<RouteTO> getRoutes(SubjectType kind) {\n \n         return controller.listRoutes();\n     }\n \n     @Override\n-    public RouteTO getRoute(Long id) {\n+    public RouteTO getRoute(SubjectType kind, Long id) {\n \n         return controller.readRoute(id);\n     }\n \n     @Override\n-    public void importRoute(Long id, RouteTO route) {\n+    public void importRoute(SubjectType kind,Long id, RouteTO route) {\n         controller.updateRoute(route);\n     }\n "},{"sha":"de6c3cd832a6506d815841718eaf1db73d49fe51","filename":"core/src/main/resources/provisioning.properties","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b19ff8512f082d7d74ff40b0a53f6380d0905771/core%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b19ff8512f082d7d74ff40b0a53f6380d0905771/core%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties?ref=b19ff8512f082d7d74ff40b0a53f6380d0905771","patch":"@@ -15,5 +15,5 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-userProvisioningManager=org.apache.syncope.core.provisioning.camel.CamelUserProvisioningManager\n-roleProvisioningManager=org.apache.syncope.core.provisioning.camel.CamelRoleProvisioningManager\n\\ No newline at end of file\n+userProvisioningManager=org.apache.syncope.core.provisioning.DefaultUserProvisioningManager\n+roleProvisioningManager=org.apache.syncope.core.provisioning.DefaultRoleProvisioningManager\n\\ No newline at end of file"}]}