{"sha":"cea47da1a1510446b7bd62fbc8e45cc8757d6611","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNlYTQ3ZGExYTE1MTA0NDZiN2JkNjJmYmM4ZTQ1Y2M4NzU3ZDY2MTE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-10-10T05:38:09Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-10-10T06:34:14Z"},"message":"[SYNCOPE-956] Class cache","tree":{"sha":"708a575587e4aab38f21ae26659d6c6374645687","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/708a575587e4aab38f21ae26659d6c6374645687"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/cea47da1a1510446b7bd62fbc8e45cc8757d6611","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cea47da1a1510446b7bd62fbc8e45cc8757d6611","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cea47da1a1510446b7bd62fbc8e45cc8757d6611","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cea47da1a1510446b7bd62fbc8e45cc8757d6611/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"b47d4328687d173dfd220f6e6f107f042438d8cd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b47d4328687d173dfd220f6e6f107f042438d8cd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b47d4328687d173dfd220f6e6f107f042438d8cd"}],"stats":{"total":53,"additions":43,"deletions":10},"files":[{"sha":"9148fbb7cfec4fc48a93d9986516c6b6fcfbe09a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAImplementationDAO.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cea47da1a1510446b7bd62fbc8e45cc8757d6611/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAImplementationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cea47da1a1510446b7bd62fbc8e45cc8757d6611/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAImplementationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAImplementationDAO.java?ref=cea47da1a1510446b7bd62fbc8e45cc8757d6611","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n+import org.apache.syncope.core.spring.ImplementationManager;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -54,7 +55,11 @@ public List<Implementation> findAll() {\n \n     @Override\n     public Implementation save(final Implementation implementation) {\n-        return entityManager().merge(implementation);\n+        Implementation merged = entityManager().merge(implementation);\n+\n+        ImplementationManager.purge(merged.getKey());\n+\n+        return merged;\n     }\n \n     @Override\n@@ -65,6 +70,7 @@ public void delete(final String key) {\n         }\n \n         entityManager().remove(implementation);\n+        ImplementationManager.purge(key);\n     }\n \n }"},{"sha":"51c9bf652d21f5d0ac61a70498e996e279470996","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/ImplementationManager.java","status":"modified","additions":36,"deletions":9,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cea47da1a1510446b7bd62fbc8e45cc8757d6611/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cea47da1a1510446b7bd62fbc8e45cc8757d6611/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManager.java?ref=cea47da1a1510446b7bd62fbc8e45cc8757d6611","patch":"@@ -19,6 +19,9 @@\n package org.apache.syncope.core.spring;\n \n import groovy.lang.GroovyClassLoader;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.Optional;\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n@@ -39,12 +42,14 @@ public final class ImplementationManager {\n \n     private static final GroovyClassLoader GROOVY_CLASSLOADER = new GroovyClassLoader();\n \n+    private static final Map<String, Class<?>> CLASS_CACHE = Collections.synchronizedMap(new HashMap<>());\n+\n     public static Optional<Reportlet> buildReportlet(final Implementation impl)\n             throws InstantiationException, IllegalAccessException {\n \n         switch (impl.getEngine()) {\n             case GROOVY:\n-                return Optional.of(ImplementationManager.<Reportlet>buildGroovy(impl.getBody()));\n+                return Optional.of(ImplementationManager.<Reportlet>buildGroovy(impl));\n \n             case JAVA:\n             default:\n@@ -78,7 +83,7 @@ public static Optional<AccountRule> buildAccountRule(final Implementation impl)\n \n         switch (impl.getEngine()) {\n             case GROOVY:\n-                return Optional.of(ImplementationManager.<AccountRule>buildGroovy(impl.getBody()));\n+                return Optional.of(ImplementationManager.<AccountRule>buildGroovy(impl));\n \n             case JAVA:\n             default:\n@@ -112,7 +117,7 @@ public static Optional<PasswordRule> buildPasswordRule(final Implementation impl\n \n         switch (impl.getEngine()) {\n             case GROOVY:\n-                return Optional.of(ImplementationManager.<PasswordRule>buildGroovy(impl.getBody()));\n+                return Optional.of(ImplementationManager.<PasswordRule>buildGroovy(impl));\n \n             case JAVA:\n             default:\n@@ -146,28 +151,50 @@ public static <T> T build(final Implementation impl)\n \n         switch (impl.getEngine()) {\n             case GROOVY:\n-                return ImplementationManager.<T>buildGroovy(impl.getBody());\n+                return ImplementationManager.<T>buildGroovy(impl);\n \n             case JAVA:\n             default:\n-                return ImplementationManager.<T>buildJava(impl.getBody());\n+                return ImplementationManager.<T>buildJava(impl);\n         }\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private static <T> T buildGroovy(final String classBody) throws InstantiationException, IllegalAccessException {\n-        Class<?> clazz = GROOVY_CLASSLOADER.parseClass(classBody);\n+    private static <T> T buildGroovy(final Implementation impl)\n+            throws InstantiationException, IllegalAccessException {\n+\n+        Class<?> clazz;\n+        if (CLASS_CACHE.containsKey(impl.getKey())) {\n+            clazz = CLASS_CACHE.get(impl.getKey());\n+        } else {\n+            clazz = GROOVY_CLASSLOADER.parseClass(impl.getBody());\n+            CLASS_CACHE.put(impl.getKey(), clazz);\n+        }\n+\n         return (T) ApplicationContextProvider.getBeanFactory().\n                 createBean(clazz, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private static <T> T buildJava(final String className) throws ClassNotFoundException {\n-        Class<?> clazz = Class.forName(className);\n+    private static <T> T buildJava(final Implementation impl)\n+            throws ClassNotFoundException {\n+\n+        Class<?> clazz;\n+        if (CLASS_CACHE.containsKey(impl.getKey())) {\n+            clazz = CLASS_CACHE.get(impl.getKey());\n+        } else {\n+            clazz = Class.forName(impl.getBody());\n+            CLASS_CACHE.put(impl.getKey(), clazz);\n+        }\n+\n         return (T) ApplicationContextProvider.getBeanFactory().\n                 createBean(clazz, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n     }\n \n+    public static Class<?> purge(final String implementation) {\n+        return CLASS_CACHE.remove(implementation);\n+    }\n+\n     private ImplementationManager() {\n         // private constructor for static utility class\n     }"}]}