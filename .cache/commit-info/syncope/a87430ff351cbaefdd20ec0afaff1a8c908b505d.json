{"sha":"a87430ff351cbaefdd20ec0afaff1a8c908b505d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE4NzQzMGZmMzUxY2JhZWZkZDIwZWMwYWZhZmYxYThjOTA4YjUwNWQ=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-22T10:00:16Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-22T10:00:16Z"},"message":"User search is now implemented, even in a very naif way\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246406 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2361a8b4b4096c7f5e50955837ac643a7fe682d1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2361a8b4b4096c7f5e50955837ac643a7fe682d1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a87430ff351cbaefdd20ec0afaff1a8c908b505d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a87430ff351cbaefdd20ec0afaff1a8c908b505d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a87430ff351cbaefdd20ec0afaff1a8c908b505d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a87430ff351cbaefdd20ec0afaff1a8c908b505d/comments","author":null,"committer":null,"parents":[{"sha":"006fb5b673b26a47f91308b465abd34ce83a8eee","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/006fb5b673b26a47f91308b465abd34ce83a8eee","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/006fb5b673b26a47f91308b465abd34ce83a8eee"}],"stats":{"total":553,"additions":462,"deletions":91},"files":[{"sha":"139ec77356446255a39d5b51c712a9475dda361a","filename":"client/src/main/java/org/syncope/client/to/LeafSearchCondition.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a87430ff351cbaefdd20ec0afaff1a8c908b505d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FLeafSearchCondition.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a87430ff351cbaefdd20ec0afaff1a8c908b505d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FLeafSearchCondition.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FLeafSearchCondition.java?ref=a87430ff351cbaefdd20ec0afaff1a8c908b505d","patch":"@@ -0,0 +1,65 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+public class LeafSearchCondition extends AbstractBaseTO {\n+\n+    public enum Type {\n+\n+        LIKE, EQ, GT, LT, GE, LE\n+    }\n+    private Type type;\n+    private String schema;\n+    private String expression;\n+\n+    public LeafSearchCondition() {\n+    }\n+\n+    public LeafSearchCondition(Type type) {\n+        this.type = type;\n+    }\n+\n+    public String getExpression() {\n+        return expression;\n+    }\n+\n+    public void setExpression(String expression) {\n+        this.expression = expression;\n+    }\n+\n+    public String getSchema() {\n+        return schema;\n+    }\n+\n+    public void setSchema(String schema) {\n+        this.schema = schema;\n+    }\n+\n+    public Type getType() {\n+        return type;\n+    }\n+\n+    public void setType(Type type) {\n+        this.type = type;\n+    }\n+\n+    public boolean checkValidity() {\n+        if (type == null) {\n+            return false;\n+        }\n+\n+        return schema != null && expression != null;\n+    }\n+}"},{"sha":"8742dee9611783bc5f3d0f4c6e61c09e353dfde4","filename":"client/src/main/java/org/syncope/client/to/NodeSearchCondition.java","status":"added","additions":134,"deletions":0,"changes":134,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a87430ff351cbaefdd20ec0afaff1a8c908b505d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FNodeSearchCondition.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a87430ff351cbaefdd20ec0afaff1a8c908b505d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FNodeSearchCondition.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FNodeSearchCondition.java?ref=a87430ff351cbaefdd20ec0afaff1a8c908b505d","patch":"@@ -0,0 +1,134 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+public class NodeSearchCondition extends AbstractBaseTO {\n+\n+    public enum Type {\n+\n+        LEAF, AND, OR, NOT\n+    }\n+    private Type type;\n+    private LeafSearchCondition leafSearchCondition;\n+    private NodeSearchCondition leftNodeSearchCondition;\n+    private NodeSearchCondition rightNodeSearchCondition;\n+\n+    public static NodeSearchCondition getLeafCondition(\n+            LeafSearchCondition leafSearchCondition) {\n+\n+        NodeSearchCondition nodeSearchCondition =\n+                new NodeSearchCondition();\n+\n+        nodeSearchCondition.type = Type.LEAF;\n+        nodeSearchCondition.leafSearchCondition = leafSearchCondition;\n+\n+        return nodeSearchCondition;\n+    }\n+\n+    public static NodeSearchCondition getAndSearchCondition(\n+            NodeSearchCondition leftNodeSearchCondition,\n+            NodeSearchCondition rightNodeSearchCondition) {\n+\n+        NodeSearchCondition nodeSearchCondition =\n+                new NodeSearchCondition();\n+\n+        nodeSearchCondition.type = Type.AND;\n+        nodeSearchCondition.leftNodeSearchCondition = leftNodeSearchCondition;\n+        nodeSearchCondition.rightNodeSearchCondition = rightNodeSearchCondition;\n+\n+        return nodeSearchCondition;\n+    }\n+\n+    public static NodeSearchCondition getOrSearchCondition(\n+            NodeSearchCondition leftNodeSearchCondition,\n+            NodeSearchCondition rightNodeSearchCondition) {\n+\n+        NodeSearchCondition nodeSearchCondition =\n+                new NodeSearchCondition();\n+\n+        nodeSearchCondition.type = Type.OR;\n+        nodeSearchCondition.leftNodeSearchCondition = leftNodeSearchCondition;\n+        nodeSearchCondition.rightNodeSearchCondition = rightNodeSearchCondition;\n+\n+        return nodeSearchCondition;\n+    }\n+\n+    public static NodeSearchCondition getNotSearchCondition(\n+            NodeSearchCondition leftNodeSearchCondition) {\n+\n+        NodeSearchCondition nodeSearchCondition =\n+                new NodeSearchCondition();\n+\n+        nodeSearchCondition.type = Type.NOT;\n+        nodeSearchCondition.leftNodeSearchCondition = leftNodeSearchCondition;\n+\n+        return nodeSearchCondition;\n+    }\n+\n+    public void setLeafSearchCondition(LeafSearchCondition leafSearchCondition) {\n+        this.leafSearchCondition = leafSearchCondition;\n+    }\n+\n+    public LeafSearchCondition getLeafSearchCondition() {\n+        return leafSearchCondition;\n+    }\n+\n+    public void setLeftNodeSearchCondition(NodeSearchCondition leftNodeSearchCondition) {\n+        this.leftNodeSearchCondition = leftNodeSearchCondition;\n+    }\n+\n+    public NodeSearchCondition getLeftNodeSearchCondition() {\n+        return leftNodeSearchCondition;\n+    }\n+\n+    public void setRightNodeSearchCondition(NodeSearchCondition rightNodeSearchCondition) {\n+        this.rightNodeSearchCondition = rightNodeSearchCondition;\n+    }\n+\n+    public NodeSearchCondition getRightNodeSearchCondition() {\n+        return rightNodeSearchCondition;\n+    }\n+\n+    public void setType(Type type) {\n+        this.type = type;\n+    }\n+\n+    public Type getType() {\n+        return type;\n+    }\n+\n+    public boolean checkValidity() {\n+        if (type == null) {\n+            return false;\n+        }\n+\n+        switch (type) {\n+            case LEAF:\n+                return leafSearchCondition.checkValidity();\n+            case AND:\n+            case OR:\n+                return (leftNodeSearchCondition == null\n+                        || rightNodeSearchCondition == null)\n+                        ? false\n+                        : leftNodeSearchCondition.checkValidity()\n+                        && rightNodeSearchCondition.checkValidity();\n+            case NOT:\n+                return leftNodeSearchCondition == null ? false\n+                        : leftNodeSearchCondition.checkValidity();\n+        }\n+\n+        return false;\n+    }\n+}"},{"sha":"1ee30822259b9ad9337d66b7b1921367decd702a","filename":"client/src/main/java/org/syncope/client/to/SearchCondition.java","status":"removed","additions":0,"deletions":46,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSearchCondition.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSearchCondition.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSearchCondition.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -1,46 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.client.to;\n-\n-public class SearchCondition extends AbstractBaseTO {\n-\n-    private String attributeName;\n-    private SearchCondition condition;\n-    private String referenceValue;\n-\n-    public String getAttributeName() {\n-        return attributeName;\n-    }\n-\n-    public void setAttributeName(String attributeName) {\n-        this.attributeName = attributeName;\n-    }\n-\n-    public SearchCondition getCondition() {\n-        return condition;\n-    }\n-\n-    public void setCondition(SearchCondition condition) {\n-        this.condition = condition;\n-    }\n-\n-    public String getReferenceValue() {\n-        return referenceValue;\n-    }\n-\n-    public void setReferenceValue(String referenceValue) {\n-        this.referenceValue = referenceValue;\n-    }\n-}"},{"sha":"26637bfa485b1fae488df50a6455819834680ddd","filename":"client/src/main/java/org/syncope/client/to/UserTOs.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a87430ff351cbaefdd20ec0afaff1a8c908b505d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a87430ff351cbaefdd20ec0afaff1a8c908b505d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTOs.java?ref=a87430ff351cbaefdd20ec0afaff1a8c908b505d","patch":"@@ -26,6 +26,14 @@ public UserTOs() {\n         users = new ArrayList<UserTO>();\n     }\n \n+    public boolean addUser(UserTO userTO) {\n+        return users.add(userTO);\n+    }\n+\n+    public boolean removeUser(UserTO userTO) {\n+        return users.remove(userTO);\n+    }\n+\n     public List<UserTO> getUsers() {\n         return users;\n     }"},{"sha":"7d358110287244b4fea7d3319df42f9276c75243","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a87430ff351cbaefdd20ec0afaff1a8c908b505d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a87430ff351cbaefdd20ec0afaff1a8c908b505d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=a87430ff351cbaefdd20ec0afaff1a8c908b505d","patch":"@@ -28,12 +28,15 @@ public enum SyncopeClientExceptionType {\n     InvalidSchemaDefinition(\n     \"Syncope.InvalidSchemaDefinition\",\n     \"\"),\n-    InvalidUpdate(\n-    \"Syncope.InvalidUpdate\",\n-    \"Syncope.InvalidUpdate.name\"),\n+    InvalidSearchCondition(\n+    \"Syncope.InvalidSearchCondition\",\n+    \"\"),\n     InvalidUniques(\n     \"Syncope.InvalidUniques\",\n     \"Syncope.InvalidUniques.attributeName\"),\n+    InvalidUpdate(\n+    \"Syncope.InvalidUpdate\",\n+    \"Syncope.InvalidUpdate.name\"),\n     InvalidValues(\n     \"Syncope.InvalidValues\",\n     \"Syncope.InvalidValues.attributeName\"),"},{"sha":"a6c21f229a59e4b5e5a42b0e3c5ebeb05cf314a1","filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeUserDAO.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a87430ff351cbaefdd20ec0afaff1a8c908b505d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a87430ff351cbaefdd20ec0afaff1a8c908b505d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java?ref=a87430ff351cbaefdd20ec0afaff1a8c908b505d","patch":"@@ -15,6 +15,8 @@\n package org.syncope.core.persistence.dao;\n \n import java.util.List;\n+import java.util.Set;\n+import org.syncope.client.to.NodeSearchCondition;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UserAttributeValue;\n \n@@ -26,6 +28,8 @@ public interface SyncopeUserDAO extends DAO {\n \n     List<SyncopeUser> findAll();\n \n+    List<SyncopeUser> search(NodeSearchCondition searchCondition);\n+\n     SyncopeUser save(SyncopeUser syncopeUser);\n \n     void delete(Long id);"},{"sha":"53fc93a11754684ccd3870d3e0ca9e85fa4f9119","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/QueryUtils.java","status":"added","additions":163,"deletions":0,"changes":163,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a87430ff351cbaefdd20ec0afaff1a8c908b505d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FQueryUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a87430ff351cbaefdd20ec0afaff1a8c908b505d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FQueryUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FQueryUtils.java?ref=a87430ff351cbaefdd20ec0afaff1a8c908b505d","patch":"@@ -0,0 +1,163 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao.impl;\n+\n+import org.syncope.client.to.LeafSearchCondition;\n+import org.syncope.client.to.NodeSearchCondition;\n+\n+public class QueryUtils {\n+\n+    private static StringBuilder getUserSearchQueryPart(\n+            LeafSearchCondition leafSearchCondition) {\n+\n+        StringBuilder result = new StringBuilder();\n+\n+        String expression = null;\n+        if (leafSearchCondition.getExpression() != null) {\n+            expression = \"'\"\n+                    + leafSearchCondition.getExpression().replaceAll(\"'\", \"\\\\'\")\n+                    + \"'\";\n+        }\n+\n+        switch (leafSearchCondition.getType()) {\n+\n+            case EQ:\n+                result.append(\"schema.name = '\").append(\n+                        leafSearchCondition.getSchema()).append(\"' AND (\");\n+                result.append(\" uav.stringValue = \").append(expression);\n+                result.append(\" OR uav.booleanValue = \").append(expression);\n+                result.append(\" OR uav.dateValue = \").append(expression);\n+                result.append(\" OR uav.longValue = \").append(expression);\n+                result.append(\" OR uav.doubleValue = \").append(expression);\n+                result.append(\")\");\n+                break;\n+\n+            case LIKE:\n+                result.append(\"schema.name = '\").append(\n+                        leafSearchCondition.getSchema()).append(\"' AND (\");\n+                result.append(\" uav.stringValue LIKE \").append(expression);\n+                result.append(\" OR uav.booleanValue LIKE \").append(expression);\n+                result.append(\" OR uav.dateValue LIKE \").append(expression);\n+                result.append(\" OR uav.longValue LIKE \").append(expression);\n+                result.append(\" OR uav.doubleValue LIKE \").append(expression);\n+                result.append(\")\");\n+                break;\n+\n+            case GT:\n+                result.append(\"schema.name = '\").append(\n+                        leafSearchCondition.getSchema()).append(\"' AND (\");\n+                result.append(\" uav.stringValue > \").append(expression);\n+                result.append(\" OR uav.booleanValue > \").append(expression);\n+                result.append(\" OR uav.dateValue > \").append(expression);\n+                result.append(\" OR uav.longValue > \").append(expression);\n+                result.append(\" OR uav.doubleValue > \").append(expression);\n+                result.append(\")\");\n+                break;\n+\n+            case GE:\n+                result.append(\"schema.name = '\").append(\n+                        leafSearchCondition.getSchema()).append(\"' AND (\");\n+                result.append(\" uav.stringValue >= \").append(expression);\n+                result.append(\" OR uav.booleanValue >= \").append(expression);\n+                result.append(\" OR uav.dateValue >= \").append(expression);\n+                result.append(\" OR uav.longValue >= \").append(expression);\n+                result.append(\" OR uav.doubleValue >= \").append(expression);\n+                result.append(\")\");\n+                break;\n+\n+            case LT:\n+                result.append(\"schema.name = '\").append(\n+                        leafSearchCondition.getSchema()).append(\"' AND (\");\n+                result.append(\" uav.stringValue < \").append(expression);\n+                result.append(\" OR uav.booleanValue < \").append(expression);\n+                result.append(\" OR uav.dateValue < \").append(expression);\n+                result.append(\" OR uav.longValue < \").append(expression);\n+                result.append(\" OR uav.doubleValue < \").append(expression);\n+                result.append(\")\");\n+                break;\n+\n+            case LE:\n+                result.append(\"schema.name = '\").append(\n+                        leafSearchCondition.getSchema()).append(\"' AND (\");\n+                result.append(\" uav.stringValue <= \").append(expression);\n+                result.append(\" OR uav.booleanValue <= \").append(expression);\n+                result.append(\" OR uav.dateValue <= \").append(expression);\n+                result.append(\" OR uav.longValue <= \").append(expression);\n+                result.append(\" OR uav.doubleValue <= \").append(expression);\n+                result.append(\")\");\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    private static StringBuilder getUserSearchQueryPart(\n+            NodeSearchCondition searchCondition) {\n+\n+        StringBuilder result = new StringBuilder();\n+\n+        switch (searchCondition.getType()) {\n+\n+            case LEAF:\n+                result = getUserSearchQueryPart(\n+                        searchCondition.getLeafSearchCondition());\n+                break;\n+\n+            case NOT:\n+                result.append(\"NOT (\").append(getUserSearchQueryPart(\n+                        searchCondition.getLeftNodeSearchCondition())).\n+                        append(\")\");\n+                break;\n+\n+            case AND:\n+                result.append(\"(\").append(getUserSearchQueryPart(\n+                        searchCondition.getLeftNodeSearchCondition())).\n+                        append(\") AND (\").append(getUserSearchQueryPart(\n+                        searchCondition.getRightNodeSearchCondition())).\n+                        append(\")\");\n+                break;\n+            case OR:\n+                result.append(\"(\").append(getUserSearchQueryPart(\n+                        searchCondition.getLeftNodeSearchCondition())).\n+                        append(\") OR (\").append(getUserSearchQueryPart(\n+                        searchCondition.getRightNodeSearchCondition())).\n+                        append(\")\");\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    public static String getUserSearchQuery(\n+            NodeSearchCondition searchCondition) {\n+\n+        StringBuilder queryString = new StringBuilder();\n+        queryString.append(\"SELECT u \").\n+                append(\"FROM SyncopeUser u, \").\n+                append(\"UserSchema schema, \").\n+                append(\"UserAttribute ua, \").\n+                append(\"UserAttributeValue uav \").\n+                append(\"WHERE uav.attribute = ua \").\n+                append(\"AND ua.schema = schema \").\n+                append(\"AND ua.owner = u \").\n+                append(\"AND (\");\n+\n+        queryString.append(QueryUtils.getUserSearchQueryPart(searchCondition));\n+\n+        queryString.append(\")\");\n+\n+        return queryString.toString();\n+    }\n+}"},{"sha":"24b463d1aacaa867b93f550efc6ff74f37707b9f","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":33,"deletions":9,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a87430ff351cbaefdd20ec0afaff1a8c908b505d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a87430ff351cbaefdd20ec0afaff1a8c908b505d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=a87430ff351cbaefdd20ec0afaff1a8c908b505d","patch":"@@ -17,13 +17,12 @@\n import java.util.Collections;\n import java.util.List;\n import javax.persistence.Query;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.client.to.NodeSearchCondition;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UserAttributeValue;\n-import org.syncope.core.persistence.dao.MembershipDAO;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n \n @Repository\n@@ -36,16 +35,23 @@ public SyncopeUser find(Long id) {\n     }\n \n     @Override\n-    public List<SyncopeUser> findByAttributeValue(UserAttributeValue attributeValue) {\n+    public List<SyncopeUser> findByAttributeValue(\n+            UserAttributeValue attributeValue) {\n \n         Query query = entityManager.createQuery(\n-                \"SELECT u FROM SyncopeUser u, UserAttribute ua, UserAttributeValue e \"\n+                \"SELECT u\"\n+                + \" FROM SyncopeUser u, UserAttribute ua, UserAttributeValue e \"\n                 + \" WHERE e.attribute = ua AND ua.owner = u\"\n-                + \" AND ((e.stringValue IS NOT NULL AND e.stringValue = :stringValue)\"\n-                + \" OR (e.booleanValue IS NOT NULL AND e.booleanValue = :booleanValue)\"\n-                + \" OR (e.dateValue IS NOT NULL AND e.dateValue = :dateValue)\"\n-                + \" OR (e.longValue IS NOT NULL AND e.longValue = :longValue)\"\n-                + \" OR (e.doubleValue IS NOT NULL AND e.doubleValue = :doubleValue))\");\n+                + \" AND ((e.stringValue IS NOT NULL\"\n+                + \" AND e.stringValue = :stringValue)\"\n+                + \" OR (e.booleanValue IS NOT NULL\"\n+                + \" AND e.booleanValue = :booleanValue)\"\n+                + \" OR (e.dateValue IS NOT NULL\"\n+                + \" AND e.dateValue = :dateValue)\"\n+                + \" OR (e.longValue IS NOT NULL\"\n+                + \" AND e.longValue = :longValue)\"\n+                + \" OR (e.doubleValue IS NOT NULL\"\n+                + \" AND e.doubleValue = :doubleValue))\");\n         query.setParameter(\"stringValue\", attributeValue.getStringValue());\n         query.setParameter(\"booleanValue\", attributeValue.getBooleanValue());\n         query.setParameter(\"dateValue\", attributeValue.getDateValue());\n@@ -61,6 +67,24 @@ public List<SyncopeUser> findAll() {\n         return query.getResultList();\n     }\n \n+    @Override\n+    public List<SyncopeUser> search(NodeSearchCondition searchCondition) {\n+        String queryString = QueryUtils.getUserSearchQuery(searchCondition);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"About to execute query\\n\\t\" + queryString + \"\\n\");\n+        }\n+\n+        List<SyncopeUser> result = Collections.EMPTY_LIST;\n+        try {\n+            Query query = entityManager.createQuery(queryString);\n+            result = query.getResultList();\n+        } catch (Throwable t) {\n+            log.error(\"While executing query\\n\\t\" + queryString + \"\\n\", t);\n+        }\n+        \n+        return result;\n+    }\n+\n     @Override\n     @Transactional\n     public SyncopeUser save(SyncopeUser syncopeUser) {"},{"sha":"5a1ef12ca401ba7f7369c6e648c2d5898b14cca7","filename":"core/src/main/java/org/syncope/core/rest/SyncopeHandlerExceptionResolver.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a87430ff351cbaefdd20ec0afaff1a8c908b505d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSyncopeHandlerExceptionResolver.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a87430ff351cbaefdd20ec0afaff1a8c908b505d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSyncopeHandlerExceptionResolver.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSyncopeHandlerExceptionResolver.java?ref=a87430ff351cbaefdd20ec0afaff1a8c908b505d","patch":"@@ -27,6 +27,7 @@\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.persistence.propagation.PropagationException;\n import org.syncope.core.persistence.validation.MultiUniqueValueException;\n+import org.syncope.core.rest.data.InvalidSearchConditionException;\n import org.syncope.types.SyncopeClientExceptionType;\n \n public class SyncopeHandlerExceptionResolver\n@@ -97,9 +98,13 @@ protected ModelAndView doResolveException(HttpServletRequest request,\n                     SyncopeClientExceptionType.NotFound.getHeaderValue());\n             response.setHeader(\n                     SyncopeClientExceptionType.NotFound.getElementHeaderName(),\n-                    ((MissingConfKeyException)ex).getConfKey());\n+                    ((MissingConfKeyException) ex).getConfKey());\n \n             statusCode = HttpServletResponse.SC_NOT_FOUND;\n+        } else if (ex instanceof InvalidSearchConditionException) {\n+            response.setHeader(\n+                    SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                    SyncopeClientExceptionType.InvalidSearchCondition.getHeaderValue());\n         }\n \n         try {"},{"sha":"250c0e69bae1f1ffa4270f03bb3d67fd3e39d987","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":19,"deletions":7,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a87430ff351cbaefdd20ec0afaff1a8c908b505d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a87430ff351cbaefdd20ec0afaff1a8c908b505d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=a87430ff351cbaefdd20ec0afaff1a8c908b505d","patch":"@@ -27,8 +27,6 @@\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.servlet.ModelAndView;\n-import org.syncope.client.to.SearchParameters;\n-import org.syncope.client.to.UserTO;\n import org.syncope.client.to.UserTOs;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n@@ -46,12 +44,15 @@\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import org.springframework.http.HttpStatus;\n+import org.syncope.client.to.NodeSearchCondition;\n+import org.syncope.client.to.UserTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.beans.Resource;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.propagation.PropagationManager;\n import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n+import org.syncope.core.rest.data.InvalidSearchConditionException;\n import org.syncope.core.workflow.Constants;\n import org.syncope.core.workflow.SpringHibernateJPAWorkflowStore;\n import org.syncope.core.workflow.WorkflowInitException;\n@@ -299,14 +300,25 @@ public UserTO verifyToken(HttpServletResponse response,\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/search\")\n     public UserTOs search(HttpServletResponse response,\n-            @RequestBody SearchParameters searchParameters) {\n+            @RequestBody NodeSearchCondition searchCondition)\n+            throws InvalidSearchConditionException {\n \n-        log.info(\"search called with parameter \" + searchParameters);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"search called with condition \" + searchCondition);\n+        }\n \n-        List<UserTO> userTOs = new ArrayList<UserTO>();\n-        UserTOs result = new UserTOs();\n+        if (!searchCondition.checkValidity()) {\n+            log.error(\"Invalid search condition: \" + searchCondition);\n \n-        result.setUsers(userTOs);\n+            throw new InvalidSearchConditionException();\n+        }\n+\n+        List<SyncopeUser> matchingUsers =\n+                syncopeUserDAO.search(searchCondition);\n+        UserTOs result = new UserTOs();\n+        for (SyncopeUser user : matchingUsers) {\n+            result.addUser(userDataBinder.getUserTO(user));\n+        }\n \n         return result;\n     }"},{"sha":"837b91dce61010e27025ed9226b525c8e1a9d9db","filename":"core/src/main/java/org/syncope/core/rest/data/InvalidSearchConditionException.java","status":"renamed","additions":4,"deletions":21,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a87430ff351cbaefdd20ec0afaff1a8c908b505d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FInvalidSearchConditionException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a87430ff351cbaefdd20ec0afaff1a8c908b505d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FInvalidSearchConditionException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FInvalidSearchConditionException.java?ref=a87430ff351cbaefdd20ec0afaff1a8c908b505d","patch":"@@ -2,34 +2,17 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- *\n+ * \n  *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * \n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.client.to;\n+package org.syncope.core.rest.data;\n \n-import java.util.HashSet;\n-import java.util.Set;\n-\n-public class SearchParameters extends AbstractBaseTO {\n-\n-    Set<SearchCondition> conditions = new HashSet<SearchCondition>();\n-\n-    public SearchParameters() {\n-        conditions = new HashSet<SearchCondition>();\n-    }\n-\n-    public Set<SearchCondition> getConditions() {\n-        return conditions;\n-    }\n-\n-    public void setConditions(Set<SearchCondition> conditions) {\n-        this.conditions = conditions;\n-    }\n+public class InvalidSearchConditionException extends Exception {\n }","previous_filename":"client/src/main/java/org/syncope/client/to/SearchParameters.java"},{"sha":"d888c26ba209b61e922ab35526a8f7509f18d93b","filename":"core/src/test/java/org/syncope/core/test/rest/UserTestITCase.java","status":"modified","additions":20,"deletions":4,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a87430ff351cbaefdd20ec0afaff1a8c908b505d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a87430ff351cbaefdd20ec0afaff1a8c908b505d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java?ref=a87430ff351cbaefdd20ec0afaff1a8c908b505d","patch":"@@ -24,8 +24,9 @@\n import org.springframework.test.annotation.ExpectedException;\n import org.springframework.web.client.HttpStatusCodeException;\n import org.syncope.client.to.AttributeTO;\n+import org.syncope.client.to.LeafSearchCondition;\n import org.syncope.client.to.MembershipTO;\n-import org.syncope.client.to.SearchParameters;\n+import org.syncope.client.to.NodeSearchCondition;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.to.UserTOs;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -192,14 +193,29 @@ public void token() {\n \n     @Test\n     public void search() {\n-        SearchParameters searchParameters = new SearchParameters();\n+        LeafSearchCondition usernameLeafCond1 =\n+                new LeafSearchCondition(LeafSearchCondition.Type.LIKE);\n+        usernameLeafCond1.setSchema(\"username\");\n+        usernameLeafCond1.setExpression(\"%o%\");\n+\n+        LeafSearchCondition usernameLeafCond2 =\n+                new LeafSearchCondition(LeafSearchCondition.Type.LIKE);\n+        usernameLeafCond2.setSchema(\"username\");\n+        usernameLeafCond2.setExpression(\"%i%\");\n+\n+        NodeSearchCondition searchCondition =\n+                NodeSearchCondition.getAndSearchCondition(\n+                NodeSearchCondition.getLeafCondition(usernameLeafCond1),\n+                NodeSearchCondition.getLeafCondition(usernameLeafCond2));\n+\n+        assertTrue(searchCondition.checkValidity());\n \n         UserTOs matchedUsers = restTemplate.postForObject(\n                 BASE_URL + \"user/search\",\n-                searchParameters, UserTOs.class);\n+                searchCondition, UserTOs.class);\n \n         assertNotNull(matchedUsers);\n-        assertTrue(matchedUsers.getUsers().isEmpty());\n+        assertFalse(matchedUsers.getUsers().isEmpty());\n     }\n \n     @Test"}]}