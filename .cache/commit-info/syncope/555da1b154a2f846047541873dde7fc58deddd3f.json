{"sha":"555da1b154a2f846047541873dde7fc58deddd3f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjU1NWRhMWIxNTRhMmY4NDYwNDc1NDE4NzNkZGU3ZmM1OGRlZGRkM2Y=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-09-16T13:35:15Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-09-16T13:35:15Z"},"message":"SYNCOPE-15 fixed\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1523644 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9ccf96d94027cf038f9e52681680155502aa648f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9ccf96d94027cf038f9e52681680155502aa648f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/555da1b154a2f846047541873dde7fc58deddd3f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/555da1b154a2f846047541873dde7fc58deddd3f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/555da1b154a2f846047541873dde7fc58deddd3f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/555da1b154a2f846047541873dde7fc58deddd3f/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"abeeedcaeed937dd23909421647a92de6b395e2d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/abeeedcaeed937dd23909421647a92de6b395e2d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/abeeedcaeed937dd23909421647a92de6b395e2d"}],"stats":{"total":306,"additions":264,"deletions":42},"files":[{"sha":"9a7dafeba51ba4a5f42a20557583fa97492916ba","filename":"common/src/main/java/org/apache/syncope/common/services/UserWorkflowService.java","status":"modified","additions":24,"deletions":19,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/555da1b154a2f846047541873dde7fc58deddd3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/555da1b154a2f846047541873dde7fc58deddd3f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserWorkflowService.java?ref=555da1b154a2f846047541873dde7fc58deddd3f","patch":"@@ -30,23 +30,28 @@\n \n @Path(\"userworkflow\")\n public interface UserWorkflowService {\n-\t@POST\n-\t@Path(\"forms\")\n-\tUserTO submitForm(WorkflowFormTO form);\n-\n-\t@GET\n-\t@Path(\"forms\")\n-\tList<WorkflowFormTO> getForms();\n-\n-\t@GET\n-\t@Path(\"forms/{userId}\")\n-\tWorkflowFormTO getFormForUser(@PathParam(\"userId\") Long userId);\n-\t\n-\t@POST\n-\t@Path(\"tasks/{taskId}/claim\")\n-\tWorkflowFormTO claimForm(@PathParam(\"taskId\") String taskId);\n-\n-\t@POST\n-\t@Path(\"tasks/{taskId}/execute\")\n-\tUserTO executeWorkflow(@PathParam(\"taskId\") String taskId, UserTO userTO);\n+\n+    @POST\n+    @Path(\"forms\")\n+    UserTO submitForm(WorkflowFormTO form);\n+\n+    @GET\n+    @Path(\"forms\")\n+    List<WorkflowFormTO> getForms();\n+\n+    @GET\n+    @Path(\"forms/{userId}/{name}\")\n+    List<WorkflowFormTO> getFormsByName(@PathParam(\"userId\") final Long userId, @PathParam(\"name\") final String name);\n+\n+    @GET\n+    @Path(\"forms/{userId}\")\n+    WorkflowFormTO getFormForUser(@PathParam(\"userId\") Long userId);\n+\n+    @POST\n+    @Path(\"tasks/{taskId}/claim\")\n+    WorkflowFormTO claimForm(@PathParam(\"taskId\") String taskId);\n+\n+    @POST\n+    @Path(\"tasks/{taskId}/execute\")\n+    UserTO executeWorkflow(@PathParam(\"taskId\") String taskId, UserTO userTO);\n }"},{"sha":"88e6e4f195509a44e2745a522ad50c585164afc5","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserWorkflowController.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/555da1b154a2f846047541873dde7fc58deddd3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserWorkflowController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/555da1b154a2f846047541873dde7fc58deddd3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserWorkflowController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserWorkflowController.java?ref=555da1b154a2f846047541873dde7fc58deddd3f","patch":"@@ -124,6 +124,19 @@ public List<WorkflowFormTO> getForms() {\n         return forms;\n     }\n \n+    @PreAuthorize(\"hasRole('WORKFLOW_FORM_READ') and hasRole('USER_READ')\")\n+    @Transactional(rollbackFor = {Throwable.class})\n+    public List<WorkflowFormTO> getForms(final Long userId, final String formName) {\n+        SyncopeUser user = binder.getUserFromId(userId);\n+        final List<WorkflowFormTO> result = uwfAdapter.getForms(user.getWorkflowId(), formName);\n+\n+        auditManager.audit(AuditElements.Category.user, AuditElements.UserSubCategory.getFormForUser,\n+                AuditElements.Result.success,\n+                \"Successfully read workflow form for user: \" + user.getUsername());\n+\n+        return result;\n+    }\n+\n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_SUBMIT')\")\n     @Transactional(rollbackFor = {Throwable.class})\n     public UserTO submitForm(final WorkflowFormTO form) {"},{"sha":"bbce48bfedf031d15dcbe821f88cc7475fc31592","filename":"core/src/main/java/org/apache/syncope/core/services/UserWorkflowServiceImpl.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/555da1b154a2f846047541873dde7fc58deddd3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserWorkflowServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/555da1b154a2f846047541873dde7fc58deddd3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserWorkflowServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserWorkflowServiceImpl.java?ref=555da1b154a2f846047541873dde7fc58deddd3f","patch":"@@ -37,7 +37,6 @@ public class UserWorkflowServiceImpl implements UserWorkflowService {\n     public WorkflowFormTO claimForm(final String taskId) {\n         return controller.claimForm(taskId);\n     }\n-    \n \n     @Override\n     public UserTO executeWorkflow(final String taskId, final UserTO userTO) {\n@@ -53,11 +52,14 @@ public WorkflowFormTO getFormForUser(final Long userId) {\n     public List<WorkflowFormTO> getForms() {\n         return controller.getForms();\n     }\n-    \n \n     @Override\n     public UserTO submitForm(final WorkflowFormTO form) {\n         return controller.submitForm(form);\n     }\n-    \n+\n+    @Override\n+    public List<WorkflowFormTO> getFormsByName(final Long userId, final String taskName) {\n+        return controller.getForms(userId, taskName);\n+    }\n }"},{"sha":"c8354da7339228ecb50b35895fe60fc5c10d048c","filename":"core/src/main/java/org/apache/syncope/core/workflow/WorkflowAdapter.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/555da1b154a2f846047541873dde7fc58deddd3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/555da1b154a2f846047541873dde7fc58deddd3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowAdapter.java?ref=555da1b154a2f846047541873dde7fc58deddd3f","patch":"@@ -67,6 +67,17 @@ public interface WorkflowAdapter {\n      */\n     List<WorkflowFormTO> getForms();\n \n+    /**\n+     * Gets all forms with the given name for the given workflowId(include historical forms).\n+     *\n+     * @param workflowId workflow id.\n+     * @param name form name.\n+     * @return forms (if present), otherwise an empty list.\n+     * @throws NotFoundException definition not found exception\n+     * @throws WorkflowException workflow exception\n+     */\n+    List<WorkflowFormTO> getForms(String workflowId, String name);\n+\n     /**\n      * Get form for given workflowId (if present).\n      *"},{"sha":"1f4c1512a4065f7054a214f50a000ff88b435006","filename":"core/src/main/java/org/apache/syncope/core/workflow/role/NoOpRoleWorkflowAdapter.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/555da1b154a2f846047541873dde7fc58deddd3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Frole%2FNoOpRoleWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/555da1b154a2f846047541873dde7fc58deddd3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Frole%2FNoOpRoleWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Frole%2FNoOpRoleWorkflowAdapter.java?ref=555da1b154a2f846047541873dde7fc58deddd3f","patch":"@@ -42,7 +42,7 @@\n @Transactional(rollbackFor = {Throwable.class})\n public class NoOpRoleWorkflowAdapter extends AbstractRoleWorkflowAdapter {\n \n-    private static final List<String> TASKS = Arrays.asList(new String[]{\"create\", \"update\", \"delete\"});\n+    private static final List<String> TASKS = Arrays.asList(new String[] {\"create\", \"update\", \"delete\"});\n \n     @Override\n     public WorkflowResult<Long> create(final RoleTO roleTO)\n@@ -109,6 +109,11 @@ public List<WorkflowFormTO> getForms() {\n         return Collections.emptyList();\n     }\n \n+    @Override\n+    public List<WorkflowFormTO> getForms(final String workflowId, final String name) {\n+        return Collections.emptyList();\n+    }\n+\n     @Override\n     public WorkflowFormTO getForm(final String workflowId)\n             throws NotFoundException, WorkflowException {"},{"sha":"66940f038079a353628b5b8de776ad08aace8150","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/NoOpUserWorkflowAdapter.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/555da1b154a2f846047541873dde7fc58deddd3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/555da1b154a2f846047541873dde7fc58deddd3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java?ref=555da1b154a2f846047541873dde7fc58deddd3f","patch":"@@ -44,7 +44,7 @@\n public class NoOpUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n \n     private static final List<String> TASKS =\n-            Arrays.asList(new String[]{\"create\", \"activate\", \"update\", \"suspend\", \"reactivate\", \"delete\"});\n+            Arrays.asList(new String[] {\"create\", \"activate\", \"update\", \"suspend\", \"reactivate\", \"delete\"});\n \n     public static final String ENABLED = \"enabled\";\n \n@@ -178,6 +178,11 @@ public List<WorkflowFormTO> getForms() {\n         return Collections.emptyList();\n     }\n \n+    @Override\n+    public List<WorkflowFormTO> getForms(final String workflowId, final String name) {\n+        return Collections.emptyList();\n+    }\n+\n     @Override\n     public WorkflowFormTO getForm(final String workflowId)\n             throws NotFoundException, WorkflowException {"},{"sha":"3a7e2e131afaaf1ccdd6f1fef7b26f3ff2ea37ba","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":109,"deletions":18,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/555da1b154a2f846047541873dde7fc58deddd3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/555da1b154a2f846047541873dde7fc58deddd3f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=555da1b154a2f846047541873dde7fc58deddd3f","patch":"@@ -50,6 +50,10 @@\n import org.activiti.engine.form.FormType;\n import org.activiti.engine.form.TaskFormData;\n import org.activiti.engine.history.HistoricActivityInstance;\n+import org.activiti.engine.history.HistoricDetail;\n+import org.activiti.engine.history.HistoricTaskInstance;\n+import org.activiti.engine.impl.persistence.entity.HistoricFormPropertyEntity;\n+import org.activiti.engine.query.Query;\n import org.activiti.engine.repository.ProcessDefinition;\n import org.activiti.engine.runtime.ProcessInstance;\n import org.activiti.engine.task.Task;\n@@ -171,11 +175,10 @@ private String getFormTask(final SyncopeUser user) {\n     }\n \n     private Set<String> getPerformedTasks(final SyncopeUser user) {\n-        Set<String> result = new HashSet<String>();\n+        final Set<String> result = new HashSet<String>();\n \n-        List<HistoricActivityInstance> tasks = historyService.createHistoricActivityInstanceQuery().executionId(\n-                user.getWorkflowId()).list();\n-        for (HistoricActivityInstance task : tasks) {\n+        for (HistoricActivityInstance task : historyService.createHistoricActivityInstanceQuery().executionId(user.\n+                getWorkflowId()).list()) {\n             result.add(task.getActivityId());\n         }\n \n@@ -491,22 +494,90 @@ private WorkflowFormPropertyType fromActivitiFormType(final FormType activitiFor\n         return result;\n     }\n \n+    private WorkflowFormTO getFormTO(final Task task) {\n+        return getFormTO(task, formService.getTaskFormData(task.getId()));\n+    }\n+\n+    private WorkflowFormTO getFormTO(final Task task, final TaskFormData fd) {\n+        final WorkflowFormTO formTO =\n+                getFormTO(task.getProcessInstanceId(), task.getId(), fd.getFormKey(), fd.getFormProperties());\n+\n+        BeanUtils.copyProperties(task, formTO);\n+        return formTO;\n+    }\n+\n+    private WorkflowFormTO getFormTO(final HistoricTaskInstance task) {\n+        final List<HistoricFormPropertyEntity> props = new ArrayList<HistoricFormPropertyEntity>();\n+\n+        for (HistoricDetail historicDetail : historyService.createHistoricDetailQuery().taskId(task.getId()).list()) {\n+\n+            if (historicDetail instanceof HistoricFormPropertyEntity) {\n+                props.add((HistoricFormPropertyEntity) historicDetail);\n+            }\n+        }\n+\n+        final WorkflowFormTO formTO = getHFormTO(task.getProcessInstanceId(), task.getId(), task.getFormKey(), props);\n+        BeanUtils.copyProperties(task, formTO);\n+\n+        final HistoricActivityInstance historicActivityInstance = historyService.createHistoricActivityInstanceQuery().\n+                executionId(task.getExecutionId()).activityType(\"userTask\").activityName(task.getName()).singleResult();\n+\n+        if (historicActivityInstance != null) {\n+            formTO.setCreateTime(historicActivityInstance.getStartTime());\n+            formTO.setDueDate(historicActivityInstance.getEndTime());\n+        }\n+\n+        return formTO;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n-    private WorkflowFormTO getFormTO(final Task task, final TaskFormData formData) {\n+    private WorkflowFormTO getHFormTO(\n+            final String processInstanceId,\n+            final String taskId,\n+            final String formKey,\n+            final List<HistoricFormPropertyEntity> props) {\n+\n         WorkflowFormTO formTO = new WorkflowFormTO();\n \n-        SyncopeUser user = userDAO.findByWorkflowId(task.getProcessInstanceId());\n+        SyncopeUser user = userDAO.findByWorkflowId(processInstanceId);\n         if (user == null) {\n-            throw new NotFoundException(\"User with workflow id \" + task.getProcessInstanceId());\n+            throw new NotFoundException(\"User with workflow id \" + processInstanceId);\n         }\n         formTO.setUserId(user.getId());\n \n-        formTO.setTaskId(task.getId());\n-        formTO.setKey(formData.getFormKey());\n+        formTO.setTaskId(taskId);\n+        formTO.setKey(formKey);\n \n-        BeanUtils.copyProperties(task, formTO);\n+        for (HistoricFormPropertyEntity prop : props) {\n+            WorkflowFormPropertyTO propertyTO = new WorkflowFormPropertyTO();\n+            propertyTO.setId(prop.getPropertyId());\n+            propertyTO.setName(prop.getPropertyId());\n+            propertyTO.setValue(prop.getPropertyValue());\n+            formTO.addProperty(propertyTO);\n+        }\n+\n+        return formTO;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private WorkflowFormTO getFormTO(\n+            final String processInstanceId,\n+            final String taskId,\n+            final String formKey,\n+            final List<FormProperty> properties) {\n+\n+        WorkflowFormTO formTO = new WorkflowFormTO();\n \n-        for (FormProperty fProp : formData.getFormProperties()) {\n+        SyncopeUser user = userDAO.findByWorkflowId(processInstanceId);\n+        if (user == null) {\n+            throw new NotFoundException(\"User with workflow id \" + processInstanceId);\n+        }\n+        formTO.setUserId(user.getId());\n+\n+        formTO.setTaskId(taskId);\n+        formTO.setKey(formKey);\n+\n+        for (FormProperty fProp : properties) {\n             WorkflowFormPropertyTO propertyTO = new WorkflowFormPropertyTO();\n             BeanUtils.copyProperties(fProp, propertyTO, PROPERTY_IGNORE_PROPS);\n             propertyTO.setType(fromActivitiFormType(fProp.getType()));\n@@ -526,16 +597,36 @@ private WorkflowFormTO getFormTO(final Task task, final TaskFormData formData) {\n \n     @Override\n     public List<WorkflowFormTO> getForms() {\n-        List<WorkflowFormTO> forms = new ArrayList<WorkflowFormTO>();\n+        return getForms(taskService.createTaskQuery().taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE));\n+    }\n+\n+    @Override\n+    public List<WorkflowFormTO> getForms(final String workflowId, final String name) {\n+        final List<WorkflowFormTO> forms = getForms(\n+                taskService.createTaskQuery().processInstanceId(workflowId).taskName(name).\n+                taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE));\n+\n+        forms.addAll(getForms(historyService.createHistoricTaskInstanceQuery().taskName(name)\n+                .taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE)));\n \n-        for (Task task : taskService.createTaskQuery().taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE).list()) {\n+        return forms;\n+    }\n+\n+    private <T extends Query<?, ?>, U extends Object> List<WorkflowFormTO> getForms(final Query<T, U> query) {\n+        final List<WorkflowFormTO> forms = new ArrayList<WorkflowFormTO>();\n+\n+        for (U obj : query.list()) {\n             try {\n-                TaskFormData formData = formService.getTaskFormData(task.getId());\n-                if (formData != null && !formData.getFormProperties().isEmpty()) {\n-                    forms.add(getFormTO(task, formData));\n+                if (obj instanceof HistoricTaskInstance) {\n+                    forms.add(getFormTO((HistoricTaskInstance) obj));\n+                } else if (obj instanceof Task) {\n+                    forms.add(getFormTO((Task) obj));\n+                } else {\n+                    throw new ActivitiException(\n+                            \"Failure retrieving form\", new IllegalArgumentException(\"Invalid task type\"));\n                 }\n             } catch (ActivitiException e) {\n-                LOG.debug(\"No form found for task {}\", task.getId(), e);\n+                LOG.debug(\"No form found for task {}\", obj, e);\n             }\n         }\n \n@@ -563,7 +654,7 @@ public WorkflowFormTO getForm(final String workflowId)\n \n         WorkflowFormTO result = null;\n         if (formData != null && !formData.getFormProperties().isEmpty()) {\n-            result = getFormTO(task, formData);\n+            result = getFormTO(task);\n         }\n \n         return result;"},{"sha":"5660d77f068797409c19b7e8d91fc37df1c4eaeb","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/555da1b154a2f846047541873dde7fc58deddd3f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/555da1b154a2f846047541873dde7fc58deddd3f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=555da1b154a2f846047541873dde7fc58deddd3f","patch":"@@ -2323,6 +2323,96 @@ public void issueSYNCOPE402() {\n         assertEquals(PropagationTaskExecStatus.UNSUBMITTED, userTO.getPropagationStatusTOs().get(1).getStatus());\n     }\n \n+    @Test\n+    public void issueSYNCOPE15() {\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n+\n+        UserTO userTO = getUniqueSampleTO(\"issueSYNCOPE15@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getVirtualAttributes().clear();\n+        userTO.getDerivedAttributes().clear();\n+        userTO.getMemberships().clear();\n+\n+        // User with role 9 are defined in workflow as subject to approval\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(9L);\n+        userTO.getMemberships().add(membershipTO);\n+\n+        // 1. create user with role 9 (and verify that no propagation occurred)\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+        assertNotEquals(0L, userTO.getId());\n+        assertNotNull(userTO.getCreationDate());\n+        assertNotNull(userTO.getCreator());\n+        assertNotNull(userTO.getLastChangeDate());\n+        assertNotNull(userTO.getLastModifier());\n+        assertEquals(userTO.getCreationDate(), userTO.getLastChangeDate());\n+\n+        // 2. request if there is any pending form for user just created\n+        List<WorkflowFormTO> forms = userWorkflowService.getForms();\n+        assertEquals(1, forms.size());\n+\n+        WorkflowFormTO form = userWorkflowService.getFormForUser(userTO.getId());\n+        assertNotNull(form);\n+\n+        // 3. first claim ny bellini ....\n+        UserWorkflowService userService3 = createServiceInstance(UserWorkflowService.class, \"bellini\", ADMIN_PWD);\n+\n+        form = userService3.claimForm(form.getTaskId());\n+        assertNotNull(form);\n+        assertNotNull(form.getTaskId());\n+        assertNotNull(form.getOwner());\n+\n+        // 4. second claim task by admin\n+        form = userWorkflowService.claimForm(form.getTaskId());\n+        assertNotNull(form);\n+\n+        // 5. approve user\n+        final Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n+        props.get(\"approve\").setValue(Boolean.TRUE.toString());\n+        form.setProperties(props.values());\n+\n+        // 6. submit approve\n+        userTO = userWorkflowService.submitForm(form);\n+        assertNotNull(userTO);\n+        assertEquals(0, userWorkflowService.getForms().size());\n+        assertNull(userWorkflowService.getFormForUser(userTO.getId()));\n+\n+        // 7. search approval into the history as well\n+        forms = userWorkflowService.getFormsByName(userTO.getId(), \"Create approval\");\n+        assertFalse(forms.isEmpty());\n+\n+        int count = 0;\n+        for (WorkflowFormTO hform : forms) {\n+            if (form.getTaskId().equals(hform.getTaskId())) {\n+                count++;\n+\n+                assertEquals(\"createApproval\", hform.getKey());\n+                assertNotNull(hform.getCreateTime());\n+                assertNotNull(hform.getDueDate());\n+                assertTrue(Boolean.parseBoolean(hform.getPropertyMap().get(\"approve\").getValue()));\n+                assertNull(hform.getPropertyMap().get(\"rejectReason\").getValue());\n+            }\n+        }\n+        assertEquals(1, count);\n+\n+        userService.delete(userTO.getId());\n+\n+        try {\n+            userService.read(userTO.getId());\n+            fail();\n+        } catch (Exception ignore) {\n+            // ignore\n+        }\n+\n+        try {\n+            userWorkflowService.getFormsByName(userTO.getId(), \"Create approval\");\n+            fail();\n+        } catch (Exception ignore) {\n+            // ignore\n+        }\n+    }\n+\n     private boolean getBooleanAttribute(ConnObjectTO connObjectTO, String attrName) {\n         return Boolean.parseBoolean(getStringAttribute(connObjectTO, attrName));\n     }"}]}