{"sha":"a77e29d673296b43681f3e7039e55921cb5edda0","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE3N2UyOWQ2NzMyOTZiNDM2ODFmM2U3MDM5ZTU1OTIxY2I1ZWRkYTA=","commit":{"author":{"name":"Matteo","email":"mat-ale@users.noreply.github.com","date":"2020-04-30T15:33:58Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-04-30T15:33:58Z"},"message":"[SYNCOPE-1555] Allow WA as SAMLs IdP to fetch metadata over REST (#178)","tree":{"sha":"80fafc23fc395856f9f17627fe624ac2d21f88d1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/80fafc23fc395856f9f17627fe624ac2d21f88d1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a77e29d673296b43681f3e7039e55921cb5edda0","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJequ/mCRBK7hj4Ov3rIwAAdHIIAFG8EE29VcceKSMyQfQXVG3H\n9mRqCy3kqgFbrWQa3Ee1Q6r0rLlm4TnxqqWhAeNqz0qebqAIt8Tt5I5TPCh1UNtT\nwE7MtvlIRzPBidD6k/wu81qMN8H3TI+BXRnuI5StwqkafSQX2roldp+O7fHs1spO\nY/7EC7N3F8LqErJSAfPyy7d+2IhALD3f0wNpywoe/WDOhAlWMr6wGhbOd74msUgU\nerOC6iQeZaNWqs80LXq4dBvViVlMSCWVtzWClg9Rj9Bbhrs7niWB5YV/z7OXFdn7\nvvumU/c09vMAqBT0PNwnwiVPtoCU/xeNugu4OF9lW22D1j5L0qi3w4TpZgODKCc=\n=E4Re\n-----END PGP SIGNATURE-----\n","payload":"tree 80fafc23fc395856f9f17627fe624ac2d21f88d1\nparent f8fdc7c62f49886319550cef0a08aec732f9c647\nauthor Matteo <mat-ale@users.noreply.github.com> 1588260838 +0200\ncommitter GitHub <noreply@github.com> 1588260838 +0200\n\n[SYNCOPE-1555] Allow WA as SAMLs IdP to fetch metadata over REST (#178)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a77e29d673296b43681f3e7039e55921cb5edda0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a77e29d673296b43681f3e7039e55921cb5edda0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a77e29d673296b43681f3e7039e55921cb5edda0/comments","author":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"f8fdc7c62f49886319550cef0a08aec732f9c647","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f8fdc7c62f49886319550cef0a08aec732f9c647","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f8fdc7c62f49886319550cef0a08aec732f9c647"}],"stats":{"total":1517,"additions":1479,"deletions":38},"files":[{"sha":"54c003032ee29166de6c758b977e5e661b06f669","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/SAML2IdPMetadataTO.java","status":"added","additions":182,"deletions":0,"changes":182,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPMetadataTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPMetadataTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPMetadataTO.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -0,0 +1,182 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import javax.ws.rs.PathParam;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.common.lib.BaseBean;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"saml2idpMetadata\")\n+@XmlType\n+public class SAML2IdPMetadataTO extends BaseBean implements EntityTO {\n+\n+    private static final long serialVersionUID = 7215073386484048953L;\n+\n+    private String key;\n+\n+    private String metadata;\n+\n+    private String signingCertificate;\n+\n+    private String signingKey;\n+\n+    private String encryptionCertificate;\n+\n+    private String encryptionKey;\n+\n+    private String appliesTo;\n+\n+    public static class Builder {\n+\n+        private final SAML2IdPMetadataTO instance = new SAML2IdPMetadataTO();\n+\n+        public Builder metadata(final String metadata) {\n+            instance.setMetadata(metadata);\n+            return this;\n+        }\n+\n+        public Builder signingCertificate(final String signingCertificate) {\n+            instance.setSigningCertificate(signingCertificate);\n+            return this;\n+        }\n+\n+        public Builder signingKey(final String signingKey) {\n+            instance.setSigningKey(signingKey);\n+            return this;\n+        }\n+\n+        public Builder encryptionCertificate(final String encryptionCertificate) {\n+            instance.setEncryptionCertificate(encryptionCertificate);\n+            return this;\n+        }\n+\n+        public Builder encryptionKey(final String encryptionKey) {\n+            instance.setEncryptionKey(encryptionKey);\n+            return this;\n+        }\n+\n+        public Builder appliesTo(final String appliesTo) {\n+            instance.setAppliesTo(appliesTo);\n+            return this;\n+        }\n+\n+        public SAML2IdPMetadataTO build() {\n+            return instance;\n+        }\n+    }\n+\n+    @Override\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    @PathParam(\"key\")\n+    @Override\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public String getMetadata() {\n+        return metadata;\n+    }\n+\n+    public void setMetadata(final String metadata) {\n+        this.metadata = metadata;\n+    }\n+\n+    public String getSigningCertificate() {\n+        return signingCertificate;\n+    }\n+\n+    public void setSigningCertificate(final String signingCertificate) {\n+        this.signingCertificate = signingCertificate;\n+    }\n+\n+    public String getSigningKey() {\n+        return signingKey;\n+    }\n+\n+    public void setSigningKey(final String signingKey) {\n+        this.signingKey = signingKey;\n+    }\n+\n+    public String getEncryptionCertificate() {\n+        return encryptionCertificate;\n+    }\n+\n+    public void setEncryptionCertificate(final String encryptionCertificate) {\n+        this.encryptionCertificate = encryptionCertificate;\n+    }\n+\n+    public String getEncryptionKey() {\n+        return encryptionKey;\n+    }\n+\n+    public void setEncryptionKey(final String encryptionKey) {\n+        this.encryptionKey = encryptionKey;\n+    }\n+\n+    public String getAppliesTo() {\n+        return appliesTo;\n+    }\n+\n+    public void setAppliesTo(final String appliesTo) {\n+        this.appliesTo = appliesTo;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        SAML2IdPMetadataTO other = (SAML2IdPMetadataTO) obj;\n+        return new EqualsBuilder().\n+                append(key, other.key).\n+                append(metadata, other.metadata).\n+                append(encryptionCertificate, other.encryptionCertificate).\n+                append(encryptionKey, other.encryptionKey).\n+                append(signingCertificate, other.signingCertificate).\n+                append(signingKey, other.signingKey).\n+                append(appliesTo, other.appliesTo).\n+                build();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(key).\n+                append(metadata).\n+                append(encryptionCertificate).\n+                append(encryptionKey).\n+                append(signingCertificate).\n+                append(signingKey).\n+                append(appliesTo).\n+                build();\n+    }\n+\n+}"},{"sha":"eefe79843624fbe07c19a26e8f5af2b7ba08393d","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/AMEntitlement.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -54,6 +54,12 @@ public final class AMEntitlement {\n \n     public static final String AUTH_MODULE_DELETE = \"AUTH_MODULE_DELETE\";\n \n+    public static final String SAML2_IDP_METADATA_CREATE = \"SAML2_IDP_METADATA_CREATE\";\n+\n+    public static final String SAML2_IDP_METADATA_UPDATE = \"SAML2_IDP_METADATA_UPDATE\";\n+\n+    public static final String SAML2_IDP_METADATA_READ = \"SAML2_IDP_METADATA_READ\";\n+\n     private static final Set<String> VALUES;\n \n     static {"},{"sha":"57cce166ff9d16fecbf1ea7c4fa4f98518065252","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AuthModuleService.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthModuleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthModuleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthModuleService.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -65,9 +65,9 @@ public interface AuthModuleService extends JAXRSService {\n     AuthModuleTO read(@NotNull @PathParam(\"key\") String key);\n \n     /**\n-     * Returns a list of authentication modules of the matching type.\n+     * Returns a list of authentication modules.\n      *\n-     * @return list of authentication modules with matching type\n+     * @return list of authentication modules\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n@@ -76,7 +76,7 @@ public interface AuthModuleService extends JAXRSService {\n     /**\n      * Create a new authentication module.\n      *\n-     * @param authModuleTO AuthModule to be created (needs to match type)\n+     * @param authModuleTO AuthModule to be created.\n      * @return Response object featuring Location header of created authentication module\n      */\n     @ApiResponses("},{"sha":"fafe273cca7f4d9d156cf742a4f63024af8be837","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPMetadataConfService.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPMetadataConfService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPMetadataConfService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPMetadataConfService.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+\n+/**\n+ * REST operations for SAML 2.0 IdP metadata.\n+ */\n+@Tag(name = \"SAML 2.0 IdP Metadata\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\") })\n+@Path(\"saml2idp/conf/metadata\")\n+public interface SAML2IdPMetadataConfService extends JAXRSService {\n+\n+    /**\n+     * Updates SAML 2.0 IdP metadata matching the given key.\n+     *\n+     * @param saml2IdPMetadataTO SAML2IdPMetadata to replace existing SAML 2.0 IdP metadata\n+     */\n+    @Parameter(name = \"key\", description = \"SAML2IdPMetadata's key\", in = ParameterIn.PATH, schema =\n+            @Schema(type = \"string\"))\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @PUT\n+    @Path(\"{key}\")\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void update(@NotNull SAML2IdPMetadataTO saml2IdPMetadataTO);\n+\n+}"},{"sha":"7791372dfc07e1f364e35b934f63fb04f80810bf","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPMetadataService.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPMetadataService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPMetadataService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPMetadataService.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+\n+/**\n+ * REST operations for SAML 2.0 IdP metadata.\n+ */\n+@Tag(name = \"SAML 2.0 IdP Metadata\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\") })\n+@Path(\"saml2idp/metadata\")\n+public interface SAML2IdPMetadataService extends JAXRSService {\n+\n+    /**\n+     * Returns a document outlining keys and metadata of Syncope as SAML 2.0 IdP.\n+     *\n+     * @param appliesTo indicates the SAML 2.0 IdP metadata document owner and applicability, where a value of 'Syncope'\n+     * indicates the Syncope server as the global owner of the metadata and keys.\n+     * @return SAML 2.0 IdP metadata\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    SAML2IdPMetadataTO get(@QueryParam(\"appliesTo\") @DefaultValue(\"Syncope\") String appliesTo);\n+\n+    /**\n+     * Returns the SAML 2.0 IdP metadata matching the given key.\n+     *\n+     * @param key key of requested SAML 2.0 IdP metadata\n+     * @return SAML 2.0 IdP metadata with matching id\n+     */\n+    @GET\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    SAML2IdPMetadataTO read(@NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Store the metadata and keys to finalize the metadata generation process.\n+     *\n+     * @param saml2IdPMetadataTO SAML2IdPMetadata to be created\n+     * @return Response object featuring Location header of created SAML 2.0 IdP metadata\n+     */\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"201\",\n+                description = \"SAML2IdPMetadata successfully created\", headers = {\n+                    @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                            @Schema(type = \"string\"),\n+                            description = \"UUID generated for the entity created\"),\n+                    @Header(name = HttpHeaders.LOCATION, schema =\n+                            @Schema(type = \"string\"),\n+                            description = \"URL of the entity created\") }),\n+        @ApiResponse(responseCode = \"409\",\n+                description = \"Metadata already existing\") })\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    Response set(@NotNull SAML2IdPMetadataTO saml2IdPMetadataTO);\n+\n+}"},{"sha":"a6f49308ccc74bca1b64d4922e9bbd02f0ecc22c","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/SAML2IdPMetadataLogic.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPMetadataLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPMetadataLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPMetadataLogic.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import static org.apache.syncope.core.logic.AbstractLogic.LOG;\n+\n+import java.lang.reflect.Method;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2IdPMetadataDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n+import org.apache.syncope.core.provisioning.api.data.SAML2IdPMetadataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class SAML2IdPMetadataLogic extends AbstractTransactionalLogic<SAML2IdPMetadataTO> {\n+\n+    @Autowired\n+    private SAML2IdPMetadataBinder binder;\n+\n+    @Autowired\n+    private SAML2IdPMetadataDAO saml2IdPMetadataDAO;\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_IDP_METADATA_READ + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public SAML2IdPMetadataTO read(final String key) {\n+        SAML2IdPMetadata sAML2IdPMetadata = saml2IdPMetadataDAO.find(key);\n+        if (sAML2IdPMetadata == null) {\n+            throw new NotFoundException(\"AuthModule \" + key + \" not found\");\n+        }\n+\n+        return binder.getSAML2IdPMetadataTO(sAML2IdPMetadata);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_IDP_METADATA_READ + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public SAML2IdPMetadataTO get(final String appliesTo) {\n+        SAML2IdPMetadata saml2IdPMetadata = saml2IdPMetadataDAO.findByOwner(appliesTo);\n+        if (saml2IdPMetadata == null) {\n+            throw new NotFoundException(\"SAML2 IdP Metadata owned by \" + appliesTo + \" not found\");\n+        }\n+\n+        return binder.getSAML2IdPMetadataTO(saml2IdPMetadata);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_IDP_METADATA_CREATE + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public SAML2IdPMetadataTO set(final SAML2IdPMetadataTO saml2IdPMetadataTO) {\n+        SAML2IdPMetadata saml2IdPMetadata = saml2IdPMetadataDAO.findByOwner(saml2IdPMetadataTO.getAppliesTo());\n+        if (saml2IdPMetadata == null) {\n+            return binder.getSAML2IdPMetadataTO(saml2IdPMetadataDAO.save(binder.create(saml2IdPMetadataTO)));\n+        }\n+\n+        throw SyncopeClientException.build(ClientExceptionType.EntityExists);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_IDP_METADATA_UPDATE + \"')\")\n+    public SAML2IdPMetadataTO update(final SAML2IdPMetadataTO saml2IdPMetadataTO) {\n+        SAML2IdPMetadata authModule = saml2IdPMetadataDAO.findByOwner(saml2IdPMetadataTO.getAppliesTo());\n+        if (authModule == null) {\n+            throw new NotFoundException(\"AuthModule \" + saml2IdPMetadataTO.getKey() + \" not found\");\n+        }\n+\n+        return binder.getSAML2IdPMetadataTO(saml2IdPMetadataDAO.save(binder.update(authModule, saml2IdPMetadataTO)));\n+    }\n+\n+    @Override\n+    protected SAML2IdPMetadataTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n+        String appliesTo = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; appliesTo == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    appliesTo = (String) args[i];\n+                } else if (args[i] instanceof SAML2IdPMetadataTO) {\n+                    appliesTo = ((SAML2IdPMetadataTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (appliesTo != null) {\n+            try {\n+                return binder.getSAML2IdPMetadataTO(saml2IdPMetadataDAO.findByOwner(appliesTo));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+}"},{"sha":"12b6cb6f55515cf09987cabad89d2bb1b0db4de8","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2IdPMetadataConfServiceImpl.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPMetadataConfServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPMetadataConfServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPMetadataConfServiceImpl.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n+import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataConfService;\n+import org.apache.syncope.core.logic.SAML2IdPMetadataLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SAML2IdPMetadataConfServiceImpl extends AbstractServiceImpl implements SAML2IdPMetadataConfService {\n+\n+    @Autowired\n+    private SAML2IdPMetadataLogic logic;\n+\n+    @Override\n+    public void update(final SAML2IdPMetadataTO saml2IdPMetadataTO) {\n+        logic.update(saml2IdPMetadataTO);\n+    }\n+}"},{"sha":"b1eb6a3f09c4a96c7e4a149092e949767db77460","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2IdPMetadataServiceImpl.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPMetadataServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPMetadataServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPMetadataServiceImpl.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.net.URI;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n+import org.apache.syncope.core.logic.SAML2IdPMetadataLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SAML2IdPMetadataServiceImpl extends AbstractServiceImpl implements SAML2IdPMetadataService {\n+\n+    @Autowired\n+    private SAML2IdPMetadataLogic logic;\n+\n+    @Override\n+    public SAML2IdPMetadataTO get(final String appliesTo) {\n+        return logic.get(appliesTo);\n+    }\n+\n+    @Override\n+    public SAML2IdPMetadataTO read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public Response set(final SAML2IdPMetadataTO saml2IdPMetadataTO) {\n+        SAML2IdPMetadataTO saml2IdPMetadata = logic.set(saml2IdPMetadataTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(saml2IdPMetadata.getKey()).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_KEY, saml2IdPMetadata.getKey()).\n+                build();\n+    }\n+}"},{"sha":"b17688bb55e7a5e5014535857299c529884d3610","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/SAML2IdPMetadataDAO.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2IdPMetadataDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2IdPMetadataDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2IdPMetadataDAO.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao.auth;\n+\n+import org.apache.syncope.core.persistence.api.dao.DAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n+\n+public interface SAML2IdPMetadataDAO extends DAO<SAML2IdPMetadata> {\n+\n+    SAML2IdPMetadata find(String key);\n+\n+    SAML2IdPMetadata findByOwner(String appliesTo);\n+\n+    SAML2IdPMetadata save(SAML2IdPMetadata saml2IdPMetadata);\n+\n+}"},{"sha":"a91eb61f8c2bf11fa840d8a939011ed5d0f900f6","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/SAML2IdPMetadata.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2IdPMetadata.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2IdPMetadata.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2IdPMetadata.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.auth;\n+\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+\n+public interface SAML2IdPMetadata extends Entity {\n+\n+    String getMetadata();\n+\n+    void setMetadata(String metadata);\n+\n+    String getSigningCertificate();\n+\n+    void setSigningCertificate(String signingCertificate);\n+\n+    String getSigningKey();\n+\n+    void setSigningKey(String signingKey);\n+\n+    String getEncryptionCertificate();\n+\n+    void setEncryptionCertificate(String encryptionCertificate);\n+\n+    String getEncryptionKey();\n+\n+    void setEncryptionKey(String encryptionKey);\n+\n+    String getAppliesTo();\n+\n+    void setAppliesTo(String appliesTo);\n+\n+}"},{"sha":"848679e9b365ded583122654156cd40bd949f03e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPASAML2IdPMetadataDAO.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2IdPMetadataDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2IdPMetadataDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2IdPMetadataDAO.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao.auth;\n+\n+import javax.persistence.NoResultException;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2IdPMetadataDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2IdPMetadata;\n+\n+@Repository\n+public class JPASAML2IdPMetadataDAO extends AbstractDAO<SAML2IdPMetadata> implements SAML2IdPMetadataDAO {\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public SAML2IdPMetadata find(final String key) {\n+        return entityManager().find(JPASAML2IdPMetadata.class, key);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public SAML2IdPMetadata findByOwner(final String appliesTo) {\n+        TypedQuery<SAML2IdPMetadata> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPASAML2IdPMetadata.class.getSimpleName() + \" e WHERE e.appliesTo=:appliesTo\",\n+                SAML2IdPMetadata.class);\n+        query.setParameter(\"appliesTo\", appliesTo);\n+\n+        SAML2IdPMetadata result = null;\n+        try {\n+            result = query.getSingleResult();\n+        } catch (final NoResultException e) {\n+            LOG.debug(\"No SAML2 IdP Metadata found with appliesTo = {}\", appliesTo);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public SAML2IdPMetadata save(final SAML2IdPMetadata saml2IdPMetadata) {\n+        return entityManager().merge(saml2IdPMetadata);\n+    }\n+\n+}"},{"sha":"28e6e66c9d1101d598948169b537e498e32709eb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -59,6 +59,7 @@\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModuleItem;\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrUniqueValue;\n@@ -155,6 +156,7 @@\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthModule;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthModuleItem;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2IdPMetadata;\n \n public class JPAEntityFactory implements EntityFactory {\n \n@@ -321,6 +323,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPAOIDCRP();\n         } else if (reference.equals(SAML2SP.class)) {\n             result = (E) new JPASAML2SP();\n+        } else if (reference.equals(SAML2IdPMetadata.class)) {\n+            result = (E) new JPASAML2IdPMetadata();\n         } else {\n             throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n         }"},{"sha":"1bb013048ed18b6be8aa409e6caa6ee324e6b644","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPASAML2IdPMetadata.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2IdPMetadata.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2IdPMetadata.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2IdPMetadata.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.auth;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Lob;\n+import javax.persistence.Table;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n+\n+@Entity\n+@Table(name = JPASAML2IdPMetadata.TABLE)\n+public class JPASAML2IdPMetadata extends AbstractGeneratedKeyEntity implements SAML2IdPMetadata {\n+\n+    public static final String TABLE = \"SAML2IdPMetadata\";\n+\n+    private static final long serialVersionUID = 57352617217394093L;\n+\n+    @Column(unique = true)\n+    private String appliesTo;\n+\n+    @Lob\n+    @Column\n+    private String metadata;\n+\n+    @Lob\n+    @Column\n+    private String signingCertificate;\n+\n+    @Lob\n+    @Column\n+    private String signingKey;\n+\n+    @Lob\n+    @Column\n+    private String encryptionCertificate;\n+\n+    @Lob\n+    @Column\n+    private String encryptionKey;\n+\n+    @Override\n+    public String getMetadata() {\n+        return metadata;\n+    }\n+\n+    @Override\n+    public void setMetadata(final String metadata) {\n+        this.metadata = metadata;\n+    }\n+\n+    @Override\n+    public String getSigningCertificate() {\n+        return signingCertificate;\n+    }\n+\n+    @Override\n+    public void setSigningCertificate(final String signingCertificate) {\n+        this.signingCertificate = signingCertificate;\n+    }\n+\n+    @Override\n+    public String getSigningKey() {\n+        return signingKey;\n+    }\n+\n+    @Override\n+    public void setSigningKey(final String signingKey) {\n+        this.signingKey = signingKey;\n+    }\n+\n+    @Override\n+    public String getEncryptionCertificate() {\n+        return encryptionCertificate;\n+    }\n+\n+    @Override\n+    public void setEncryptionCertificate(final String encryptionCertificate) {\n+        this.encryptionCertificate = encryptionCertificate;\n+    }\n+\n+    @Override\n+    public String getEncryptionKey() {\n+        return encryptionKey;\n+    }\n+\n+    @Override\n+    public void setEncryptionKey(final String encryptionKey) {\n+        this.encryptionKey = encryptionKey;\n+    }\n+\n+    @Override\n+    public String getAppliesTo() {\n+        return appliesTo;\n+    }\n+\n+    @Override\n+    public void setAppliesTo(final String appliesTo) {\n+        this.appliesTo = appliesTo;\n+    }\n+\n+}"},{"sha":"8d47b48c533ddcba0ab5929feaeb4d2fee0f75e8","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/SAML2IdPMetadataTest.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2IdPMetadataTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2IdPMetadataTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2IdPMetadataTest.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.inner;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+import java.util.UUID;\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2IdPMetadataDAO;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n+\n+@Transactional(\"Master\")\n+public class SAML2IdPMetadataTest extends AbstractTest {\n+\n+    @Autowired\n+    private SAML2IdPMetadataDAO saml2IdPMetadataDAO;\n+\n+    @Test\n+    public void find() {\n+        create(\"Syncope\");\n+        SAML2IdPMetadata saml2IdPMetadata = saml2IdPMetadataDAO.findByOwner(\"Syncope\");\n+        assertNotNull(saml2IdPMetadata);\n+\n+        saml2IdPMetadata = saml2IdPMetadataDAO.findByOwner(UUID.randomUUID().toString());\n+        assertNull(saml2IdPMetadata);\n+    }\n+\n+    @Test\n+    public void save() {\n+        create(\"SyncopeCreate\");\n+    }\n+\n+    @Test\n+    public void update() {\n+        SAML2IdPMetadata saml2IdPMetadata = create(\"SyncopeUpdate\");\n+        assertNotNull(saml2IdPMetadata);\n+        saml2IdPMetadata.setAppliesTo(\"OtherSyncope\");\n+\n+        saml2IdPMetadata = saml2IdPMetadataDAO.save(saml2IdPMetadata);\n+        assertNotNull(saml2IdPMetadata);\n+        assertNotNull(saml2IdPMetadata.getKey());\n+        SAML2IdPMetadata found = saml2IdPMetadataDAO.findByOwner(saml2IdPMetadata.getAppliesTo());\n+        assertNotNull(found);\n+        assertEquals(\"OtherSyncope\", found.getAppliesTo());\n+    }\n+\n+    private SAML2IdPMetadata create(final String appliesTo) {\n+        SAML2IdPMetadata saml2IdPMetadata = entityFactory.newEntity(SAML2IdPMetadata.class);\n+        saml2IdPMetadata.setAppliesTo(appliesTo);\n+        saml2IdPMetadata.setMetadata(\"metadata\");\n+        saml2IdPMetadata.setEncryptionCertificate(\"encryptionCert\");\n+        saml2IdPMetadata.setEncryptionKey(\"encryptionKey\");\n+        saml2IdPMetadata.setSigningCertificate(\"signatureCert\");\n+        saml2IdPMetadata.setSigningKey(\"signatureKey\");\n+        saml2IdPMetadataDAO.save(saml2IdPMetadata);\n+        assertNotNull(saml2IdPMetadata);\n+        assertNotNull(saml2IdPMetadata.getKey());\n+        assertNotNull(saml2IdPMetadataDAO.findByOwner(saml2IdPMetadata.getAppliesTo()));\n+\n+        return saml2IdPMetadata;\n+    }\n+\n+}"},{"sha":"e2e190e2907e054956b5fbe38df3fae1adf68a0f","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/SAML2IdPMetadataBinder.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2IdPMetadataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2IdPMetadataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2IdPMetadataBinder.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n+\n+public interface SAML2IdPMetadataBinder {\n+\n+    SAML2IdPMetadata create(SAML2IdPMetadataTO saml2IdPMetadataTO);\n+\n+    SAML2IdPMetadata update(SAML2IdPMetadata saml2IdPMetadata, SAML2IdPMetadataTO saml2IdPMetadataTO);\n+\n+    SAML2IdPMetadataTO getSAML2IdPMetadataTO(SAML2IdPMetadata saml2IdPMetadata);\n+\n+}"},{"sha":"1f4d6fa6906c8dfd43663556c815823fc70e9a02","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPMetadataBinderImpl.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPMetadataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPMetadataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPMetadataBinderImpl.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n+import org.apache.syncope.core.provisioning.api.data.SAML2IdPMetadataBinder;\n+\n+@Component\n+public class SAML2IdPMetadataBinderImpl implements SAML2IdPMetadataBinder {\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    private SAML2IdPMetadata getSAML2IdPMetadata(\n+            final SAML2IdPMetadata saml2IdPMetadata,\n+            final SAML2IdPMetadataTO saml2IdPMetadataTO) {\n+\n+        SAML2IdPMetadata saml2IdPMetadataResult = saml2IdPMetadata;\n+        if (saml2IdPMetadataResult == null) {\n+            saml2IdPMetadataResult = entityFactory.newEntity(SAML2IdPMetadata.class);\n+        }\n+\n+        saml2IdPMetadataResult.setEncryptionCertificate(saml2IdPMetadataTO.getEncryptionCertificate());\n+        saml2IdPMetadataResult.setEncryptionKey(saml2IdPMetadataTO.getEncryptionKey());\n+        saml2IdPMetadataResult.setMetadata(saml2IdPMetadataTO.getMetadata());\n+        saml2IdPMetadataResult.setSigningCertificate(saml2IdPMetadataTO.getSigningCertificate());\n+        saml2IdPMetadataResult.setSigningKey(saml2IdPMetadataTO.getSigningKey());\n+        saml2IdPMetadataResult.setAppliesTo(saml2IdPMetadataTO.getAppliesTo());\n+\n+        return saml2IdPMetadataResult;\n+    }\n+\n+    @Override\n+    public SAML2IdPMetadata create(final SAML2IdPMetadataTO saml2IdPMetadataTO) {\n+        return update(entityFactory.newEntity(SAML2IdPMetadata.class), saml2IdPMetadataTO);\n+    }\n+\n+    @Override\n+    public SAML2IdPMetadata update(\n+            final SAML2IdPMetadata saml2IdPMetadata,\n+            final SAML2IdPMetadataTO saml2IdPMetadataTO) {\n+\n+        return getSAML2IdPMetadata(saml2IdPMetadata, saml2IdPMetadataTO);\n+    }\n+\n+    @Override\n+    public SAML2IdPMetadataTO getSAML2IdPMetadataTO(final SAML2IdPMetadata saml2IdPMetadata) {\n+        SAML2IdPMetadataTO saml2IdPMetadataTO = new SAML2IdPMetadataTO();\n+\n+        saml2IdPMetadataTO.setKey(saml2IdPMetadata.getKey());\n+        saml2IdPMetadataTO.setMetadata(saml2IdPMetadata.getMetadata());\n+        saml2IdPMetadataTO.setEncryptionCertificate(saml2IdPMetadata.getEncryptionCertificate());\n+        saml2IdPMetadataTO.setEncryptionKey(saml2IdPMetadata.getEncryptionKey());\n+        saml2IdPMetadataTO.setSigningCertificate(saml2IdPMetadata.getSigningCertificate());\n+        saml2IdPMetadataTO.setSigningKey(saml2IdPMetadata.getSigningKey());\n+        saml2IdPMetadataTO.setAppliesTo(saml2IdPMetadata.getAppliesTo());\n+\n+        return saml2IdPMetadataTO;\n+    }\n+}"},{"sha":"530113f081327128a0d74c923d9f4aee923d815f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -77,6 +77,7 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n import org.apache.syncope.common.lib.to.AuthPolicyTO;\n+import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n import org.apache.syncope.common.lib.to.client.ClientAppTO;\n import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n@@ -128,6 +129,8 @@\n import org.apache.syncope.common.rest.api.service.UserRequestService;\n import org.apache.syncope.common.rest.api.service.BpmnProcessService;\n import org.apache.syncope.common.rest.api.service.GatewayRouteService;\n+import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataConfService;\n+import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n import org.apache.syncope.common.rest.api.service.UserWorkflowTaskService;\n import org.apache.syncope.fit.core.CoreITContext;\n import org.apache.syncope.fit.core.UserITCase;\n@@ -280,6 +283,10 @@ public abstract class AbstractITCase {\n \n     protected static AuthModuleService authModuleService;\n \n+    protected static SAML2IdPMetadataService saml2IdPMetadataService;\n+\n+    protected static SAML2IdPMetadataConfService saml2IdPMetadataConfService;\n+\n     protected static SecurityQuestionService securityQuestionService;\n \n     protected static ImplementationService implementationService;\n@@ -373,6 +380,8 @@ public static void restSetup() {\n         scimConfService = adminClient.getService(SCIMConfService.class);\n         clientAppService = adminClient.getService(ClientAppService.class);\n         authModuleService = adminClient.getService(AuthModuleService.class);\n+        saml2IdPMetadataService = adminClient.getService(SAML2IdPMetadataService.class);\n+        saml2IdPMetadataConfService = adminClient.getService(SAML2IdPMetadataConfService.class);\n     }\n \n     @Autowired\n@@ -587,6 +596,18 @@ protected AuthModuleTO createAuthModule(final AuthModuleTO authModule) {\n         return getObject(response.getLocation(), AuthModuleService.class, authModule.getClass());\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    protected SAML2IdPMetadataTO createSAML2IdPMetadata(final SAML2IdPMetadataTO saml2IdPMetadata) {\n+        Response response = saml2IdPMetadataService.set(saml2IdPMetadata);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n+            if (ex != null) {\n+                throw (RuntimeException) ex;\n+            }\n+        }\n+        return getObject(response.getLocation(), SAML2IdPMetadataService.class, saml2IdPMetadata.getClass());\n+    }\n+\n     protected ResourceTO createResource(final ResourceTO resourceTO) {\n         Response response = resourceService.create(resourceTO);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {"},{"sha":"58facb8b544c0b8f3a0a7b7687aa358ca7719fdd","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2IdPMetadataITCase.java","status":"added","additions":113,"deletions":0,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2IdPMetadataITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2IdPMetadataITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2IdPMetadataITCase.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Test;\n+import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.junit.platform.commons.util.StringUtils;\n+\n+public class SAML2IdPMetadataITCase extends AbstractITCase {\n+    \n+    private static final String APPLIES_TO = \"Syncope\";\n+\n+    private SAML2IdPMetadataTO createSAML2IdPMetadata() {\n+        SAML2IdPMetadataTO result = createSAML2IdPMetadata(new SAML2IdPMetadataTO.Builder().\n+                appliesTo(APPLIES_TO).\n+                metadata(\"testMetadata\").\n+                encryptionCertificate(\"testEncryptionCert\").\n+                encryptionKey(\"testEncryptionKey\").\n+                signingCertificate(\"testSigningCert\").\n+                signingKey(\"testSigningKey\").\n+                build());\n+        assertNotNull(result);\n+        testIsValid(result);\n+\n+        return result;\n+    }\n+\n+    private void testIsValid(final SAML2IdPMetadataTO saml2IdPMetadataTO) {\n+        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getAppliesTo()));\n+        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getMetadata()));\n+        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getEncryptionKey()));\n+        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getEncryptionCertificate()));\n+        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getSigningCertificate()));\n+        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getSigningKey()));\n+    }\n+\n+    @Test\n+    public void read() {\n+        SAML2IdPMetadataTO saml2IdPMetadataTO = null;\n+        try {\n+            saml2IdPMetadataTO = saml2IdPMetadataService.get(APPLIES_TO);\n+        } catch (SyncopeClientException e) {\n+            saml2IdPMetadataTO = createSAML2IdPMetadata();\n+        }\n+\n+        assertNotNull(saml2IdPMetadataTO);\n+        assertEquals(APPLIES_TO, saml2IdPMetadataTO.getAppliesTo());\n+        testIsValid(saml2IdPMetadataTO);\n+    }\n+\n+    @Test\n+    public void create() {\n+        try {\n+            saml2IdPMetadataService.get(APPLIES_TO);\n+        } catch (SyncopeClientException e) {\n+            createSAML2IdPMetadata();\n+        }\n+\n+        try {\n+            createSAML2IdPMetadata(new SAML2IdPMetadataTO.Builder().\n+                    appliesTo(APPLIES_TO).\n+                    metadata(\"testMetadata\").\n+                    build());\n+            fail(\"This should not happen\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.EntityExists, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void update() {\n+        SAML2IdPMetadataTO saml2IdPMetadataTO = null;\n+        try {\n+            saml2IdPMetadataTO = saml2IdPMetadataService.get(APPLIES_TO);\n+        } catch (NotFoundException e) {\n+            saml2IdPMetadataTO = createSAML2IdPMetadata();\n+        }\n+\n+        assertNotNull(saml2IdPMetadataTO);\n+        saml2IdPMetadataTO.setEncryptionKey(\"newKey\");\n+        saml2IdPMetadataConfService.update(saml2IdPMetadataTO);\n+        saml2IdPMetadataTO = saml2IdPMetadataService.get(saml2IdPMetadataTO.getAppliesTo());\n+        assertNotNull(saml2IdPMetadataTO);\n+\n+        assertEquals(\"newKey\", saml2IdPMetadataTO.getEncryptionKey());\n+    }\n+\n+}"},{"sha":"aa323d48d505065405fbbfc9e89c84232770cf68","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/WARestClient.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2FWARestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2FWARestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2FWARestClient.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.wa;\n \n import org.apereo.cas.util.spring.ApplicationContextProvider;\n-\n import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n@@ -29,7 +28,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.context.ApplicationContext;\n-\n import java.util.Collection;\n \n public class WARestClient {\n@@ -45,9 +43,9 @@ public class WARestClient {\n     private SyncopeClient client;\n \n     public WARestClient(\n-        final String anonymousUser,\n-        final String anonymousKey,\n-        final boolean useGZIPCompression) {\n+            final String anonymousUser,\n+            final String anonymousKey,\n+            final boolean useGZIPCompression) {\n \n         this.anonymousUser = anonymousUser;\n         this.anonymousKey = anonymousKey;\n@@ -59,9 +57,9 @@ public SyncopeClient getSyncopeClient() {\n             if (client == null && isReady()) {\n                 try {\n                     client = new SyncopeClientFactoryBean().\n-                        setAddress(getCore().getAddress()).\n-                        setUseCompression(useGZIPCompression).\n-                        create(new AnonymousAuthenticationHandler(anonymousUser, anonymousKey));\n+                            setAddress(getCore().getAddress()).\n+                            setUseCompression(useGZIPCompression).\n+                            create(new AnonymousAuthenticationHandler(anonymousUser, anonymousKey));\n                 } catch (Exception e) {\n                     LOG.error(\"Could not init SyncopeClient\", e);\n                 }"},{"sha":"15498fec9057f17c822a623322668c4ad65038b1","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWABootstrapConfiguration.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWABootstrapConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWABootstrapConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWABootstrapConfiguration.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -30,6 +30,7 @@\n @PropertySource(\"classpath:wa.properties\")\n @PropertySource(value = \"file:${conf.directory}/wa.properties\", ignoreResourceNotFound = true)\n public class SyncopeWABootstrapConfiguration {\n+\n     @Value(\"${anonymousUser}\")\n     private String anonymousUser;\n "},{"sha":"94e50c8dc4cd666791c25f8e102a4ea415f21232","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWAPropertySourceLocator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -16,7 +16,6 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.wa.bootstrap;\n \n import org.apereo.cas.configuration.CasConfigurationProperties;\n@@ -62,6 +61,7 @@\n \n @Order\n public class SyncopeWAPropertySourceLocator implements PropertySourceLocator {\n+\n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeWABootstrapConfiguration.class);\n \n     private final WARestClient waRestClient;"},{"sha":"74bcb04ef77b52ee2938c4613032b03f854f77c9","filename":"wa/starter/src/main/java/org/apache/syncope/wa/saml/idp/metadata/RestfulSamlIdPMetadataGenerator.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.saml.idp.metadata;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n+import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n+import org.apache.syncope.wa.WARestClient;\n+import org.apereo.cas.support.saml.idp.metadata.generator.BaseSamlIdPMetadataGenerator;\n+import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGeneratorConfigurationContext;\n+import org.apereo.cas.support.saml.services.SamlRegisteredService;\n+import org.apereo.cas.support.saml.services.idp.metadata.SamlIdPMetadataDocument;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import javax.ws.rs.core.Response;\n+import java.util.Optional;\n+\n+public class RestfulSamlIdPMetadataGenerator extends BaseSamlIdPMetadataGenerator {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(RestfulSamlIdPMetadataGenerator.class);\n+\n+    public static final String DEFAULT_APPLIES_FOR = \"Syncope\";\n+\n+    private final WARestClient restClient;\n+\n+    public RestfulSamlIdPMetadataGenerator(\n+            final SamlIdPMetadataGeneratorConfigurationContext samlIdPMetadataGeneratorConfigurationContext,\n+            final WARestClient restClient) {\n+\n+        super(samlIdPMetadataGeneratorConfigurationContext);\n+        this.restClient = restClient;\n+    }\n+\n+    @Override\n+    protected SamlIdPMetadataDocument finalizeMetadataDocument(\n+            final SamlIdPMetadataDocument doc,\n+            final Optional<SamlRegisteredService> registeredService) {\n+\n+        LOG.info(\"Generating new SAML2 IdP metadata document\");\n+        doc.setAppliesTo(DEFAULT_APPLIES_FOR);\n+        SAML2IdPMetadataTO metadataTO = new SAML2IdPMetadataTO.Builder().\n+                metadata(doc.getMetadata()).\n+                encryptionKey(doc.getEncryptionKey()).\n+                encryptionCertificate(doc.getEncryptionCertificate()).\n+                signingCertificate(doc.getSigningCertificate()).\n+                signingKey(doc.getSigningKey()).\n+                appliesTo(doc.getAppliesTo()).\n+                build();\n+\n+        SyncopeClient client = getSyncopeClient();\n+        Response response = null;\n+        try {\n+            response = client.getService(SAML2IdPMetadataService.class).set(metadataTO);\n+        } catch (Exception ex) {\n+            LOG.warn(\"While generating SAML2 IdP metadata document\", ex);\n+        }\n+\n+        return response != null && HttpStatus.valueOf(response.getStatus()).is2xxSuccessful() ? doc : null;\n+    }\n+\n+    @Override\n+    public Pair<String, String> buildSelfSignedEncryptionCert(final Optional<SamlRegisteredService> registeredService) {\n+        return generateCertificateAndKey();\n+    }\n+\n+    @Override\n+    public Pair<String, String> buildSelfSignedSigningCert(final Optional<SamlRegisteredService> registeredService) {\n+        return generateCertificateAndKey();\n+    }\n+\n+    private SyncopeClient getSyncopeClient() {\n+        if (!WARestClient.isReady()) {\n+            LOG.info(\"Syncope client is not yet ready\");\n+            throw new RuntimeException(\"Syncope core is not yet ready to access requests\");\n+        }\n+        return restClient.getSyncopeClient();\n+    }\n+\n+}"},{"sha":"57592e5419acc6c65363ec4decef019739ae1ac2","filename":"wa/starter/src/main/java/org/apache/syncope/wa/saml/idp/metadata/RestfulSamlIdPMetadataLocator.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.saml.idp.metadata;\n+\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n+import org.apache.syncope.wa.WARestClient;\n+import org.apereo.cas.support.saml.idp.metadata.locator.AbstractSamlIdPMetadataLocator;\n+import org.apereo.cas.support.saml.services.SamlRegisteredService;\n+import org.apereo.cas.support.saml.services.idp.metadata.SamlIdPMetadataDocument;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import java.util.Optional;\n+\n+public class RestfulSamlIdPMetadataLocator extends AbstractSamlIdPMetadataLocator {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(RestfulSamlIdPMetadataLocator.class);\n+\n+    private final WARestClient restClient;\n+\n+    public RestfulSamlIdPMetadataLocator(\n+            final CipherExecutor<String, String> metadataCipherExecutor,\n+            final WARestClient restClient) {\n+\n+        super(metadataCipherExecutor);\n+        this.restClient = restClient;\n+    }\n+\n+    private static String getAppliesToFor(final Optional<SamlRegisteredService> result) {\n+        if (result.isPresent()) {\n+            SamlRegisteredService registeredService = result.get();\n+            return registeredService.getName() + '-' + registeredService.getId();\n+        }\n+        return RestfulSamlIdPMetadataGenerator.DEFAULT_APPLIES_FOR;\n+    }\n+\n+    @Override\n+    public SamlIdPMetadataDocument fetchInternal(final Optional<SamlRegisteredService> registeredService) {\n+        try {\n+            LOG.info(\"Locating SAML2 IdP metadata document\");\n+            SAML2IdPMetadataTO saml2IdPMetadataTO = getSyncopeClient().getService(SAML2IdPMetadataService.class).\n+                    get(getAppliesToFor(registeredService));\n+\n+            if (saml2IdPMetadataTO == null) {\n+                LOG.warn(\"No SAML2 IdP metadata document obtained from core\");\n+            } else {\n+                SamlIdPMetadataDocument document = new SamlIdPMetadataDocument();\n+                document.setMetadata(saml2IdPMetadataTO.getMetadata());\n+                document.setEncryptionCertificate(saml2IdPMetadataTO.getEncryptionCertificate());\n+                document.setEncryptionKey(saml2IdPMetadataTO.getEncryptionKey());\n+                document.setSigningKey(saml2IdPMetadataTO.getSigningKey());\n+                document.setSigningCertificate(saml2IdPMetadataTO.getSigningCertificate());\n+                document.setAppliesTo(saml2IdPMetadataTO.getAppliesTo());\n+                if (document.isValid()) {\n+                    LOG.debug(\"Found SAML2 IdP metadata document: {}\", document.getId());\n+                    return document;\n+                }\n+                LOG.warn(\"Not a valid SAML2 IdP metadata document\");\n+            }\n+\n+            return null;\n+        } catch (SyncopeClientException ex) {\n+            if (ex.getType() == ClientExceptionType.NotFound) {\n+                LOG.debug(\"No SAML2 IdP metadata document is available\");\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private SyncopeClient getSyncopeClient() {\n+        if (!WARestClient.isReady()) {\n+            LOG.info(\"Syncope client is not yet ready\");\n+            throw new RuntimeException(\"Syncope core is not yet ready to access requests\");\n+        }\n+        return restClient.getSyncopeClient();\n+    }\n+}"},{"sha":"058274af84330a274cf801bd82fe53de8f25694f","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWAApplication.java","status":"modified","additions":9,"deletions":23,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -18,18 +18,13 @@\n  */\n package org.apache.syncope.wa.starter;\n \n-import java.time.LocalDateTime;\n-import java.time.ZoneId;\n-import java.util.Date;\n import org.apache.commons.lang.StringUtils;\n import org.apereo.cas.configuration.CasConfigurationProperties;\n import org.apereo.cas.configuration.CasConfigurationPropertiesValidator;\n import org.apereo.cas.util.AsciiArtUtils;\n import org.apereo.cas.util.DateTimeUtils;\n-import org.quartz.Job;\n import org.quartz.JobBuilder;\n import org.quartz.JobDetail;\n-import org.quartz.JobExecutionContext;\n import org.quartz.JobKey;\n import org.quartz.SchedulerException;\n import org.quartz.Trigger;\n@@ -55,14 +50,16 @@\n import org.springframework.boot.context.event.ApplicationReadyEvent;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n-import org.springframework.cloud.context.refresh.ContextRefresher;\n import org.springframework.context.annotation.EnableAspectJAutoProxy;\n import org.springframework.context.annotation.PropertySource;\n import org.springframework.context.event.EventListener;\n import org.springframework.scheduling.annotation.EnableAsync;\n import org.springframework.scheduling.annotation.EnableScheduling;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.transaction.annotation.EnableTransactionManagement;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.util.Date;\n \n @PropertySource(\"classpath:wa.properties\")\n @PropertySource(value = \"file:${conf.directory}/wa.properties\", ignoreResourceNotFound = true)\n@@ -89,9 +86,6 @@ public class SyncopeWAApplication extends SpringBootServletInitializer {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAApplication.class);\n \n-    @Autowired\n-    private ContextRefresher contextRefresher;\n-\n     @Autowired\n     private SchedulerFactoryBean scheduler;\n \n@@ -134,22 +128,14 @@ private void scheduleJobToRefreshContext() {\n             Trigger trigger = TriggerBuilder.newTrigger().startAt(date).build();\n             JobKey jobKey = new JobKey(getClass().getSimpleName());\n \n-            JobDetail job = JobBuilder.newJob(RefreshApplicationContextJob.class).withIdentity(jobKey).build();\n-            scheduler.getScheduler().scheduleJob(job, trigger);\n-        } catch (SchedulerException e) {\n-            throw new RuntimeException(\"Could not schedule refresh job\", e);\n-        }\n-    }\n+            JobDetail job = JobBuilder.newJob(SyncopeWARefreshContextJob.class).\n+                    withIdentity(jobKey).\n+                    build();\n \n-    private class RefreshApplicationContextJob implements Job {\n+            scheduler.getScheduler().scheduleJob(job, trigger);\n \n-        @Override\n-        public void execute(final JobExecutionContext jobExecutionContext) {\n-            try {\n-                LOG.debug(\"Refreshed context: {}\", contextRefresher.refresh());\n-            } catch (final Exception e) {\n-                LOG.error(e.getMessage(), e);\n-            }\n+        } catch (final SchedulerException e) {\n+            throw new RuntimeException(\"Could not schedule refresh job\", e);\n         }\n     }\n }"},{"sha":"9ff7c552215f73190710980f8cdca50bc442b959","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWAConfiguration.java","status":"modified","additions":46,"deletions":3,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -21,22 +21,44 @@\n import org.apereo.cas.audit.AuditTrailExecutionPlanConfigurer;\n import org.apereo.cas.services.ServiceRegistryExecutionPlanConfigurer;\n import org.apereo.cas.services.ServiceRegistryListener;\n-\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStart;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n import org.apache.syncope.wa.WARestClient;\n+import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGenerator;\n+import org.apereo.cas.support.saml.idp.metadata.locator.SamlIdPMetadataLocator;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-\n import java.util.Collection;\n+import org.apache.syncope.wa.saml.idp.metadata.RestfulSamlIdPMetadataGenerator;\n+import org.apache.syncope.wa.saml.idp.metadata.RestfulSamlIdPMetadataLocator;\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGeneratorConfigurationContext;\n+import org.apereo.cas.support.saml.idp.metadata.writer.SamlIdPCertificateAndKeyWriter;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.core.io.ResourceLoader;\n \n @Configuration\n public class SyncopeWAConfiguration {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAConfiguration.class);\n+\n+    @Autowired\n+    private CasConfigurationProperties casProperties;\n+\n+    @Autowired\n+    private ResourceLoader resourceLoader;\n+\n+    @Autowired\n+    @Qualifier(\"samlSelfSignedCertificateWriter\")\n+    private ObjectProvider<SamlIdPCertificateAndKeyWriter> samlSelfSignedCertificateWriter;\n+\n     @Autowired\n     private ConfigurableApplicationContext applicationContext;\n \n@@ -48,10 +70,30 @@ public class SyncopeWAConfiguration {\n     @Bean\n     public ServiceRegistryExecutionPlanConfigurer syncopeServiceRegistryConfigurer(final WARestClient restClient) {\n         SyncopeServiceRegistry registry =\n-            new SyncopeServiceRegistry(restClient, applicationContext, serviceRegistryListeners);\n+                new SyncopeServiceRegistry(restClient, applicationContext, serviceRegistryListeners);\n         return plan -> plan.registerServiceRegistry(registry);\n     }\n \n+    @Autowired\n+    @Bean\n+    public SamlIdPMetadataGenerator samlIdPMetadataGenerator(final WARestClient restClient) {\n+        SamlIdPMetadataGeneratorConfigurationContext context =\n+                SamlIdPMetadataGeneratorConfigurationContext.builder().\n+                        samlIdPMetadataLocator(samlIdPMetadataLocator(restClient)).\n+                        samlIdPCertificateAndKeyWriter(samlSelfSignedCertificateWriter.getObject()).\n+                        resourceLoader(resourceLoader).\n+                        casProperties(casProperties).\n+                        metadataCipherExecutor(CipherExecutor.noOpOfStringToString()).\n+                        build();\n+        return new RestfulSamlIdPMetadataGenerator(context, restClient);\n+    }\n+\n+    @Autowired\n+    @Bean\n+    public SamlIdPMetadataLocator samlIdPMetadataLocator(final WARestClient restClient) {\n+        return new RestfulSamlIdPMetadataLocator(CipherExecutor.noOpOfStringToString(), restClient);\n+    }\n+\n     @Bean\n     @Autowired\n     public AuditTrailExecutionPlanConfigurer auditConfigurer(final WARestClient restClient) {\n@@ -67,4 +109,5 @@ public KeymasterStart keymasterStart() {\n     public KeymasterStop keymasterStop() {\n         return new KeymasterStop(NetworkService.Type.WA);\n     }\n+\n }"},{"sha":"8b3bae3e8e2ef3e99c5d8e710cf837327b4e4989","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWARefreshContextJob.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a77e29d673296b43681f3e7039e55921cb5edda0/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWARefreshContextJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a77e29d673296b43681f3e7039e55921cb5edda0/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWARefreshContextJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWARefreshContextJob.java?ref=a77e29d673296b43681f3e7039e55921cb5edda0","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter;\n+\n+import org.apache.syncope.wa.WARestClient;\n+import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGenerator;\n+import org.apereo.cas.support.saml.services.idp.metadata.SamlIdPMetadataDocument;\n+import org.quartz.Job;\n+import org.quartz.JobExecutionContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.context.refresh.ContextRefresher;\n+import java.util.Optional;\n+import org.quartz.JobExecutionException;\n+\n+public class SyncopeWARefreshContextJob implements Job {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWARefreshContextJob.class);\n+\n+    @Autowired\n+    private ContextRefresher contextRefresher;\n+\n+    @Autowired\n+    private SamlIdPMetadataGenerator metadataGenerator;\n+\n+    public SyncopeWARefreshContextJob() {\n+    }\n+\n+    @Override\n+    public void execute(final JobExecutionContext jobExecutionContext) throws JobExecutionException {\n+        try {\n+            LOG.debug(\"Refreshing WA application context\");\n+            if (!WARestClient.isReady()) {\n+                LOG.debug(\"Syncope client is not yet ready\");\n+                throw new RuntimeException(\"Syncope core is not yet ready to access requests\");\n+            }\n+            contextRefresher.refresh();\n+\n+            LOG.info(\"Generating SAML2 IdP metadata metadata\");\n+            SamlIdPMetadataDocument document = metadataGenerator.generate(Optional.empty());\n+            LOG.info(\"Generated SAML2 IdP metadata for {}\", document.getAppliesTo());\n+\n+        } catch (RuntimeException e) {\n+            throw new JobExecutionException(\"While generating SAML2 IdP metadata\", e);\n+        }\n+    }\n+}"}]}