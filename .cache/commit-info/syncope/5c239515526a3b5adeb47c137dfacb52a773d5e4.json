{"sha":"5c239515526a3b5adeb47c137dfacb52a773d5e4","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjVjMjM5NTE1NTI2YTNiNWFkZWI0N2MxMzdkZmFjYjUyYTc3M2Q1ZTQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-03-29T14:17:48Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-03-29T14:17:48Z"},"message":"[SYNCOPE-753] Adding migrate conf command to CLI","tree":{"sha":"1bf3cbaaa118291d98cdc4016105192b8100d66d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1bf3cbaaa118291d98cdc4016105192b8100d66d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5c239515526a3b5adeb47c137dfacb52a773d5e4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5c239515526a3b5adeb47c137dfacb52a773d5e4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5c239515526a3b5adeb47c137dfacb52a773d5e4","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5c239515526a3b5adeb47c137dfacb52a773d5e4/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"5c4181fcbe77ca2e57654b415ef5777f66f32fcd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5c4181fcbe77ca2e57654b415ef5777f66f32fcd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5c4181fcbe77ca2e57654b415ef5777f66f32fcd"}],"stats":{"total":852,"additions":819,"deletions":33},"files":[{"sha":"d7e2d27417fb61fce618fda928fa9a3e38858798","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/AbstractConfigurationCommand.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FAbstractConfigurationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FAbstractConfigurationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FAbstractConfigurationCommand.java?ref=5c239515526a3b5adeb47c137dfacb52a773d5e4","patch":"@@ -20,8 +20,8 @@\n \n public abstract class AbstractConfigurationCommand {\n \n-    protected final ConfigurationSyncopeOperations configurationSyncopeOperations\n-            = new ConfigurationSyncopeOperations();\n+    protected final ConfigurationSyncopeOperations configurationSyncopeOperations =\n+            new ConfigurationSyncopeOperations();\n \n     protected final ConfigurationResultManager configurationResultManager = new ConfigurationResultManager();\n "},{"sha":"ed7a613b8eb8a1cf4b2fc116ffbda3e5aeab2f3c","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationCommand.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationCommand.java?ref=5c239515526a3b5adeb47c137dfacb52a773d5e4","patch":"@@ -56,8 +56,7 @@ public void execute(final Input input) {\n                 System.out.println(getHelpMessage());\n                 break;\n             default:\n-                new ConfigurationResultManager().defaultOptionMessage(input.getOption(), getHelpMessage());\n-                break;\n+                configurationResultManager.defaultOptionMessage(input.getOption(), getHelpMessage());\n         }\n     }\n "},{"sha":"f0b8c313a53dae8148f9a6463ec1cc8650722f26","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationExport.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationExport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationExport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationExport.java?ref=5c239515526a3b5adeb47c137dfacb52a773d5e4","patch":"@@ -20,7 +20,7 @@\n \n import java.io.FileNotFoundException;\n import java.io.IOException;\n-import java.io.SequenceInputStream;\n+import java.io.InputStream;\n import javax.xml.parsers.ParserConfigurationException;\n import javax.xml.transform.TransformerConfigurationException;\n import javax.xml.transform.TransformerException;\n@@ -49,7 +49,7 @@ public void export() {\n         if (input.parameterNumber() == 1) {\n             try {\n                 XMLUtils.createXMLFile(\n-                        (SequenceInputStream) configurationSyncopeOperations.export().getEntity(),\n+                        (InputStream) configurationSyncopeOperations.export().getEntity(),\n                         input.firstParameter() + EXPORT_FILE_NAME);\n                 configurationResultManager.genericMessage(\n                         input.firstParameter() + EXPORT_FILE_NAME + \" successfully created\");"},{"sha":"661a542d03e3c33807ddf78715c8ed1206ba8e76","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationResultManager.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationResultManager.java?ref=5c239515526a3b5adeb47c137dfacb52a773d5e4","patch":"@@ -44,8 +44,7 @@ private void fromCommandToView(final String title, final LinkedList<AttrTO> attr\n             String attrValue = attrTO.getValues().toString();\n             attrValue = attrValue.substring(0, attrValue.length() - 1);\n             attrValue = attrValue.substring(1, attrValue.length());\n-            tableBuilder.rowValues(\n-                    new LinkedList<>(Arrays.asList(attrTO.getSchema(), attrValue)));\n+            tableBuilder.rowValues(new LinkedList<>(Arrays.asList(attrTO.getSchema(), attrValue)));\n         }\n         tableBuilder.build().print();\n     }"},{"sha":"9b084ff6c415f3bbc2101add0ae42d013e50b189","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/install/InstallSetup.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallSetup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallSetup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallSetup.java?ref=5c239515526a3b5adeb47c137dfacb52a773d5e4","patch":"@@ -136,16 +136,14 @@ public void setup() throws FileNotFoundException, IllegalAccessException {\n                 }\n             }\n \n-            System.out.print(\"Syncope admin password: \");\n-            String syncopeAdminPasswordFromSystemIn = scanIn.nextLine();\n+            char[] syncopeAdminPasswordFromSystemConsole = System.console().readPassword(\"Syncope admin password: \");\n             boolean syncopeAdminPasswordFound = false;\n             while (!syncopeAdminPasswordFound) {\n-                if (StringUtils.isNotBlank(syncopeAdminPasswordFromSystemIn)) {\n-                    syncopeAdminPassword = syncopeAdminPasswordFromSystemIn;\n+                if (syncopeAdminPasswordFromSystemConsole != null && syncopeAdminPasswordFromSystemConsole.length > 0) {\n+                    syncopeAdminPassword = new String(syncopeAdminPasswordFromSystemConsole);\n                     syncopeAdminPasswordFound = true;\n                 } else {\n-                    System.out.print(\"Syncope admin user: \");\n-                    syncopeAdminPasswordFromSystemIn = scanIn.nextLine();\n+                    syncopeAdminPasswordFromSystemConsole = System.console().readPassword(\"Syncope admin password: \");\n                 }\n             }\n         }"},{"sha":"cd9830f7b8b10ccfbc480ebe12203a7c94164896","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/migrate/MigrateCommand.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fmigrate%2FMigrateCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fmigrate%2FMigrateCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fmigrate%2FMigrateCommand.java?ref=5c239515526a3b5adeb47c137dfacb52a773d5e4","patch":"@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.migrate;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+\n+@Command(name = \"migrate\")\n+public class MigrateCommand extends AbstractCommand {\n+\n+    private final MigrateResultManager migrateResultManager = new MigrateResultManager();\n+\n+    @Override\n+    public void execute(final Input input) {\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+\n+        switch (Options.fromName(input.getOption())) {\n+            case CONF:\n+                new MigrateConf(input).migrate();\n+                break;\n+\n+            case HELP:\n+                System.out.println(getHelpMessage());\n+                break;\n+\n+            default:\n+                migrateResultManager.defaultOptionMessage(input.getOption(), getHelpMessage());\n+        }\n+    }\n+\n+    @Override\n+    public String getHelpMessage() {\n+        return migrateResultManager.commandHelpMessage(getClass());\n+    }\n+\n+    private enum Options {\n+\n+        HELP(\"--help\"),\n+        CONF(\"--conf\");\n+\n+        private final String optionName;\n+\n+        Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n+    }\n+}"},{"sha":"563db63b090bec0943435bd9c17d849329393724","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/migrate/MigrateConf.java","status":"added","additions":678,"deletions":0,"changes":678,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fmigrate%2FMigrateConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fmigrate%2FMigrateConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fmigrate%2FMigrateConf.java?ref=5c239515526a3b5adeb47c137dfacb52a773d5e4","patch":"@@ -0,0 +1,678 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.migrate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamReader;\n+import javax.xml.stream.XMLStreamWriter;\n+import org.apache.cxf.staxutils.PrettyPrintXMLStreamWriter;\n+import org.apache.syncope.client.cli.Input;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class MigrateConf {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MigrateConf.class);\n+\n+    private static final String HELP_MESSAGE = \"migrate --conf {SRC} {DST}\";\n+\n+    private static final XMLInputFactory INPUT_FACTORY = XMLInputFactory.newInstance();\n+\n+    private static final XMLOutputFactory OUTPUT_FACTORY = XMLOutputFactory.newInstance();\n+\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+    private final MigrateResultManager migrateResultManager = new MigrateResultManager();\n+\n+    private final Input input;\n+\n+    private static void copyAttrs(\n+            final XMLStreamReader streamReader, final XMLStreamWriter streamWriter, final String... but)\n+            throws XMLStreamException {\n+\n+        Set<String> exceptions = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n+        exceptions.addAll(Arrays.asList(but));\n+\n+        for (int i = 0; i < streamReader.getAttributeCount(); i++) {\n+            String name = streamReader.getAttributeLocalName(i);\n+            if (!exceptions.contains(name)) {\n+                streamWriter.writeAttribute(name, streamReader.getAttributeValue(i));\n+            }\n+        }\n+    }\n+\n+    private static String getAttributeValue(final XMLStreamReader streamReader, final String key) {\n+        String value = streamReader.getAttributeValue(\"\", key);\n+        if (value == null || value.isEmpty()) {\n+            value = streamReader.getAttributeValue(\"\", key.toUpperCase());\n+            if (value == null || value.isEmpty()) {\n+                value = streamReader.getAttributeValue(\"\", key.toLowerCase());\n+            }\n+        }\n+\n+        return value;\n+    }\n+\n+    private static void exec(final String src, final String dst) throws XMLStreamException, IOException {\n+        XMLStreamWriter writer = new PrettyPrintXMLStreamWriter(\n+                OUTPUT_FACTORY.createXMLStreamWriter(new FileWriter(dst)), 2);\n+        writer.writeStartDocument(\"UTF-8\", \"1.0\");\n+        writer.writeStartElement(\"dataset\");\n+\n+        StringWriter reporterSW = new StringWriter();\n+        XMLStreamWriter reporter = new PrettyPrintXMLStreamWriter(\n+                OUTPUT_FACTORY.createXMLStreamWriter(reporterSW), 2);\n+        reporter.writeStartDocument(\"UTF-8\", \"1.0\");\n+        reporter.writeStartElement(\"dataset\");\n+\n+        XMLStreamReader reader = INPUT_FACTORY.createXMLStreamReader(new FileInputStream(src));\n+        reader.nextTag(); // root\n+        reader.nextTag(); // dataset\n+\n+        writer.writeStartElement(\"AnyType\");\n+        writer.writeAttribute(\"name\", \"USER\");\n+        writer.writeAttribute(\"kind\", \"USER\");\n+        writer.writeEndElement();\n+\n+        writer.writeStartElement(\"AnyTypeClass\");\n+        writer.writeAttribute(\"name\", \"BaseUser\");\n+        writer.writeEndElement();\n+\n+        writer.writeStartElement(\"AnyType_AnyTypeClass\");\n+        writer.writeAttribute(\"anyType_name\", \"USER\");\n+        writer.writeAttribute(\"anyTypeClass_name\", \"BaseUser\");\n+        writer.writeEndElement();\n+\n+        writer.writeStartElement(\"AnyType\");\n+        writer.writeAttribute(\"name\", \"GROUP\");\n+        writer.writeAttribute(\"kind\", \"GROUP\");\n+        writer.writeEndElement();\n+\n+        writer.writeStartElement(\"AnyTypeClass\");\n+        writer.writeAttribute(\"name\", \"BaseGroup\");\n+        writer.writeEndElement();\n+\n+        writer.writeStartElement(\"AnyType_AnyTypeClass\");\n+        writer.writeAttribute(\"anyType_name\", \"GROUP\");\n+        writer.writeAttribute(\"anyTypeClass_name\", \"BaseGroup\");\n+        writer.writeEndElement();\n+\n+        writer.writeStartElement(\"AnyTypeClass\");\n+        writer.writeAttribute(\"name\", \"BaseUMembership\");\n+        writer.writeEndElement();\n+\n+        Set<String> connInstanceCapabilities = new HashSet<>();\n+\n+        String globalAccountPolicy = null;\n+        String globalPasswordPolicy = null;\n+        while (reader.hasNext()) {\n+            if (reader.isStartElement()) {\n+                switch (reader.getLocalName().toLowerCase()) {\n+                    case \"syncopeconf\":\n+                        writer.writeStartElement(\"SyncopeConf\");\n+                        copyAttrs(reader, writer);\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    case \"cschema\":\n+                        writer.writeStartElement(\"PlainSchema\");\n+                        copyAttrs(reader, writer);\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    case \"cattr\":\n+                        writer.writeStartElement(\"CPlainAttr\");\n+                        copyAttrs(reader, writer);\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    case \"cattrvalue\":\n+                        writer.writeStartElement(\"CPlainAttrValue\");\n+                        copyAttrs(reader, writer);\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    case \"uschema\":\n+                        writer.writeStartElement(\"PlainSchema\");\n+                        copyAttrs(reader, writer);\n+                        writer.writeAttribute(\"anyTypeClass_name\", \"BaseUser\");\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    case \"uderschema\":\n+                        writer.writeStartElement(\"DerSchema\");\n+                        copyAttrs(reader, writer);\n+                        writer.writeAttribute(\"anyTypeClass_name\", \"BaseUser\");\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    case \"uvirschema\":\n+                        reporter.writeStartElement(\"VirSchema\");\n+                        copyAttrs(reader, reporter);\n+                        reporter.writeEndElement();\n+                        break;\n+\n+                    case \"rschema\":\n+                        writer.writeStartElement(\"PlainSchema\");\n+                        copyAttrs(reader, writer);\n+                        writer.writeAttribute(\"anyTypeClass_name\", \"BaseGroup\");\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    case \"rderschema\":\n+                        writer.writeStartElement(\"DerSchema\");\n+                        copyAttrs(reader, writer);\n+                        writer.writeAttribute(\"anyTypeClass_name\", \"BaseGroup\");\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    case \"rvirschema\":\n+                        reporter.writeStartElement(\"VirSchema\");\n+                        copyAttrs(reader, reporter);\n+                        reporter.writeEndElement();\n+                        break;\n+\n+                    case \"mschema\":\n+                        writer.writeStartElement(\"PlainSchema\");\n+                        copyAttrs(reader, writer);\n+                        writer.writeAttribute(\"anyTypeClass_name\", \"BaseUMembership\");\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    case \"mderschema\":\n+                        writer.writeStartElement(\"DerSchema\");\n+                        copyAttrs(reader, writer);\n+                        writer.writeAttribute(\"anyTypeClass_name\", \"BaseUMembership\");\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    case \"mvirschema\":\n+                        reporter.writeStartElement(\"VirSchema\");\n+                        copyAttrs(reader, reporter);\n+                        reporter.writeEndElement();\n+                        break;\n+\n+                    case \"policy\":\n+                        String policyId = getAttributeValue(reader, \"id\");\n+                        ObjectNode specification = (ObjectNode) OBJECT_MAPPER.readTree(\n+                                getAttributeValue(reader, \"specification\"));\n+\n+                        switch (getAttributeValue(reader, \"DTYPE\")) {\n+                            case \"SyncPolicy\":\n+                                writer.writeStartElement(\"PullPolicy\");\n+                                writer.writeAttribute(\"id\", policyId);\n+                                writer.writeAttribute(\n+                                        \"description\", getAttributeValue(reader, \"description\"));\n+                                writer.writeEndElement();\n+                                break;\n+\n+                            case \"PasswordPolicy\":\n+                                writer.writeStartElement(\"PasswordPolicy\");\n+                                writer.writeAttribute(\"id\", policyId);\n+                                writer.writeAttribute(\n+                                        \"description\", getAttributeValue(reader, \"description\"));\n+\n+                                if (\"GLOBAL_PASSWORD\".equalsIgnoreCase(getAttributeValue(reader, \"type\"))) {\n+                                    globalPasswordPolicy = getAttributeValue(reader, \"id\");\n+                                }\n+\n+                                JsonNode allowNullPassword = specification.get(\"allowNullPassword\");\n+                                if (allowNullPassword != null) {\n+                                    writer.writeAttribute(\"allowNullPassword\", allowNullPassword.asText());\n+                                    specification.remove(\"allowNullPassword\");\n+                                }\n+                                JsonNode historyLength = specification.get(\"historyLength\");\n+                                if (historyLength != null) {\n+                                    writer.writeAttribute(\"historyLength\", historyLength.asText());\n+                                    specification.remove(\"historyLength\");\n+                                }\n+                                specification.put(\n+                                        \"@class\", \"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\");\n+                                writer.writeEndElement();\n+\n+                                writer.writeStartElement(\"PasswordRuleConfInstance\");\n+                                writer.writeAttribute(\"id\", policyId);\n+                                writer.writeAttribute(\"passwordPolicy_id\", policyId);\n+                                writer.writeAttribute(\"serializedInstance\", specification.toString());\n+                                writer.writeEndElement();\n+                                break;\n+\n+                            case \"AccountPolicy\":\n+                                writer.writeStartElement(\"AccountPolicy\");\n+                                writer.writeAttribute(\"id\", policyId);\n+                                writer.writeAttribute(\n+                                        \"description\", getAttributeValue(reader, \"description\"));\n+\n+                                if (\"GLOBAL_ACCOUNT\".equalsIgnoreCase(getAttributeValue(reader, \"type\"))) {\n+                                    globalAccountPolicy = getAttributeValue(reader, \"id\");\n+                                }\n+\n+                                JsonNode propagateSuspension = specification.get(\"propagateSuspension\");\n+                                if (propagateSuspension != null) {\n+                                    writer.writeAttribute(\"propagateSuspension\", propagateSuspension.asText());\n+                                    specification.remove(\"propagateSuspension\");\n+                                }\n+                                JsonNode permittedLoginRetries = specification.get(\"permittedLoginRetries\");\n+                                if (permittedLoginRetries != null) {\n+                                    writer.writeAttribute(\n+                                            \"maxAuthenticationAttempts\", permittedLoginRetries.asText());\n+                                    specification.remove(\"permittedLoginRetries\");\n+                                }\n+                                specification.put(\n+                                        \"@class\", \"org.apache.syncope.common.lib.policy.DefaultAccountRuleConf\");\n+                                writer.writeEndElement();\n+\n+                                writer.writeStartElement(\"AccountRuleConfInstance\");\n+                                writer.writeAttribute(\"id\", policyId);\n+                                writer.writeAttribute(\"passwordPolicy_id\", policyId);\n+                                writer.writeAttribute(\"serializedInstance\", specification.toString());\n+                                writer.writeEndElement();\n+                                break;\n+\n+                            default:\n+                        }\n+                        break;\n+\n+                    case \"conninstance\":\n+                        writer.writeStartElement(\"ConnInstance\");\n+                        copyAttrs(reader, writer);\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    case \"conninstance_capabilities\":\n+                        String connInstanceId = getAttributeValue(reader, \"ConnInstance_id\");\n+                        String capabilities = getAttributeValue(reader, \"capabilities\");\n+                        if (capabilities.startsWith(\"ONE_PHASE_\")) {\n+                            capabilities = capabilities.substring(10);\n+                        } else if (capabilities.startsWith(\"TWO_PHASES_\")) {\n+                            capabilities = capabilities.substring(11);\n+                        }\n+                        if (!connInstanceCapabilities.contains(connInstanceId + capabilities)) {\n+                            writer.writeStartElement(\"ConnInstance_capabilities\");\n+                            writer.writeAttribute(\"ConnInstance_id\", connInstanceId);\n+                            writer.writeAttribute(\"capabilities\", capabilities);\n+                            writer.writeEndElement();\n+\n+                            connInstanceCapabilities.add(connInstanceId + capabilities);\n+                        }\n+                        break;\n+\n+                    case \"externalresource\":\n+                        writer.writeStartElement(\"ExternalResource\");\n+                        copyAttrs(reader, writer,\n+                                \"syncTraceLevel\", \"userializedSyncToken\", \"rserializedSyncToken\");\n+                        writer.writeAttribute(\n+                                \"pullTraceLevel\", getAttributeValue(reader, \"syncTraceLevel\"));\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    case \"externalresource_propactions\":\n+                        writer.writeStartElement(\"ExternalResource_PropActions\");\n+                        copyAttrs(reader, writer, \"element\");\n+\n+                        String propActionClassName = getAttributeValue(reader, \"element\");\n+                        switch (propActionClassName) {\n+                            case \"org.apache.syncope.core.propagation.impl.LDAPMembershipPropagationActions\":\n+                                propActionClassName = \"org.apache.syncope.core.provisioning.java.propagation.\"\n+                                        + \"LDAPMembershipPropagationActions\";\n+                                break;\n+\n+                            case \"org.apache.syncope.core.propagation.impl.LDAPPasswordPropagationActions\":\n+                                propActionClassName = \"org.apache.syncope.core.provisioning.java.propagation.\"\n+                                        + \"LDAPPasswordPropagationActions\";\n+                                break;\n+\n+                            case \"org.apache.syncope.core.propagation.impl.DBPasswordPropagationActions\":\n+                                propActionClassName = \"org.apache.syncope.core.provisioning.java.propagation.\"\n+                                        + \"DBPasswordPropagationActions\";\n+\n+                            default:\n+                        }\n+                        writer.writeAttribute(\"actionClassName\", propActionClassName);\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    case \"policy_externalresource\":\n+                        writer.writeStartElement(\"AccountPolicy_ExternalResource\");\n+                        copyAttrs(reader, writer);\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    case \"umapping\":\n+                        String umappingId = getAttributeValue(reader, \"id\");\n+                        writer.writeStartElement(\"Provision\");\n+                        writer.writeAttribute(\"id\", umappingId);\n+                        writer.writeAttribute(\n+                                \"resource_name\", getAttributeValue(reader, \"resource_name\"));\n+                        writer.writeAttribute(\"anyType_name\", \"USER\");\n+                        writer.writeAttribute(\"objectClass\", \"__ACCOUNT__\");\n+                        writer.writeEndElement();\n+\n+                        writer.writeStartElement(\"Mapping\");\n+                        writer.writeAttribute(\"id\", umappingId);\n+                        writer.writeAttribute(\"provision_id\", umappingId);\n+\n+                        String uaccountLink = getAttributeValue(reader, \"accountlink\");\n+                        if (uaccountLink != null && !uaccountLink.isEmpty()) {\n+                            writer.writeAttribute(\"connObjectLink\", uaccountLink);\n+                        }\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    case \"umappingitem\":\n+                        String uIntMappingType = getAttributeValue(reader, \"intMappingType\");\n+                        if (uIntMappingType.endsWith(\"VirtualSchema\")) {\n+                            reporter.writeStartElement(\"MappingItem\");\n+                            copyAttrs(reader, reporter, \"accountid\");\n+                            reporter.writeEndElement();\n+                        } else {\n+                            writer.writeStartElement(\"MappingItem\");\n+                            copyAttrs(reader, writer, \"accountid\");\n+                            writer.writeAttribute(\"connObjectKey\", getAttributeValue(reader, \"accountid\"));\n+                            writer.writeEndElement();\n+                        }\n+                        break;\n+\n+                    case \"rmapping\":\n+                        String rmappingId = getAttributeValue(reader, \"id\");\n+                        writer.writeStartElement(\"Provision\");\n+                        writer.writeAttribute(\"id\", rmappingId);\n+                        writer.writeAttribute(\n+                                \"resource_name\", getAttributeValue(reader, \"resource_name\"));\n+                        writer.writeAttribute(\"anyType_name\", \"GROUP\");\n+                        writer.writeAttribute(\"objectClass\", \"__GROUP__\");\n+                        writer.writeEndElement();\n+\n+                        writer.writeStartElement(\"Mapping\");\n+                        writer.writeAttribute(\"id\", rmappingId);\n+                        writer.writeAttribute(\"provision_id\", rmappingId);\n+\n+                        String raccountLink = getAttributeValue(reader, \"accountlink\");\n+                        if (raccountLink != null && !raccountLink.isEmpty()) {\n+                            writer.writeAttribute(\"connObjectLink\", raccountLink);\n+                        }\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    case \"rmappingitem\":\n+                        String rIntMappingType = getAttributeValue(reader, \"intMappingType\");\n+                        if (rIntMappingType.endsWith(\"VirtualSchema\")) {\n+                            reporter.writeStartElement(\"MappingItem\");\n+                            copyAttrs(reader, reporter, \"accountid\");\n+                            reporter.writeEndElement();\n+                        } else {\n+                            writer.writeStartElement(\"MappingItem\");\n+                            copyAttrs(reader, writer, \"accountid\");\n+                            writer.writeAttribute(\"connObjectKey\", getAttributeValue(reader, \"accountid\"));\n+                            writer.writeEndElement();\n+                        }\n+                        break;\n+\n+                    case \"task\":\n+                        writer.writeStartElement(\"Task\");\n+                        copyAttrs(reader, writer,\n+                                \"DTYPE\", \"propagationMode\", \"subjectType\", \"subjectId\", \"xmlAttributes\",\n+                                \"jobClassName\", \"userTemplate\", \"roleTemplate\", \"userFilter\", \"roleFilter\");\n+\n+                        String taskId = getAttributeValue(reader, \"id\");\n+\n+                        switch (getAttributeValue(reader, \"DTYPE\")) {\n+                            case \"PropagationTask\":\n+                                writer.writeAttribute(\"DTYPE\", \"PropagationTask\");\n+                                writer.writeAttribute(\n+                                        \"anyTypeKind\", getAttributeValue(reader, \"subjectType\"));\n+                                writer.writeAttribute(\n+                                        \"anyKey\", getAttributeValue(reader, \"subjectId\"));\n+                                writer.writeAttribute(\n+                                        \"attributes\", getAttributeValue(reader, \"xmlAttributes\"));\n+                                writer.writeEndElement();\n+                                break;\n+\n+                            case \"SyncTask\":\n+                                writer.writeAttribute(\"DTYPE\", \"PullTask\");\n+                                writer.writeEndElement();\n+\n+                                String userTemplate = getAttributeValue(reader, \"userTemplate\");\n+                                if (userTemplate != null && !userTemplate.isEmpty()) {\n+                                    writer.writeStartElement(\"AnyTemplatePullTask\");\n+                                    writer.writeAttribute(\"id\", taskId);\n+                                    writer.writeAttribute(\"pullTask_id\", taskId);\n+                                    writer.writeAttribute(\"anyType_name\", \"USER\");\n+                                    writer.writeAttribute(\"template\", userTemplate);\n+                                    writer.writeEndElement();\n+                                }\n+                                String roleTemplate = getAttributeValue(reader, \"roleTemplate\");\n+                                if (roleTemplate != null && !roleTemplate.isEmpty()) {\n+                                    writer.writeStartElement(\"AnyTemplatePullTask\");\n+                                    writer.writeAttribute(\"id\", taskId);\n+                                    writer.writeAttribute(\"pullTask_id\", taskId);\n+                                    writer.writeAttribute(\"anyType_name\", \"GROUP\");\n+                                    writer.writeAttribute(\"template\", roleTemplate);\n+                                    writer.writeEndElement();\n+                                }\n+                                break;\n+\n+                            case \"SchedTask\":\n+                                writer.writeAttribute(\"DTYPE\", \"SchedTask\");\n+                                writer.writeAttribute(\n+                                        \"jobDelegateClassName\", getAttributeValue(reader, \"jobClassName\"));\n+                                writer.writeEndElement();\n+                                break;\n+\n+                            case \"NotificationTask\":\n+                                writer.writeAttribute(\"DTYPE\", \"NotificationTask\");\n+                                writer.writeEndElement();\n+                                break;\n+\n+                            case \"PushTask\":\n+                                writer.writeAttribute(\"DTYPE\", \"PushTask\");\n+                                writer.writeEndElement();\n+\n+                                String userFilter = getAttributeValue(reader, \"userFilter\");\n+                                if (userFilter != null && !userFilter.isEmpty()) {\n+                                    writer.writeStartElement(\"PushTaskAnyFilter\");\n+                                    writer.writeAttribute(\"id\", taskId);\n+                                    writer.writeAttribute(\"pusTask_id\", taskId);\n+                                    writer.writeAttribute(\"anyType_name\", \"USER\");\n+                                    writer.writeAttribute(\"fiql\", userFilter);\n+                                    writer.writeEndElement();\n+                                }\n+                                String roleFilter = getAttributeValue(reader, \"roleFilter\");\n+                                if (roleFilter != null && !roleFilter.isEmpty()) {\n+                                    writer.writeStartElement(\"PushTaskAnyFilter\");\n+                                    writer.writeAttribute(\"id\", taskId);\n+                                    writer.writeAttribute(\"pusTask_id\", taskId);\n+                                    writer.writeAttribute(\"anyType_name\", \"GROUP\");\n+                                    writer.writeAttribute(\"fiql\", roleFilter);\n+                                    writer.writeEndElement();\n+                                }\n+                                break;\n+\n+                            default:\n+                        }\n+                        break;\n+\n+                    case \"taskexec\":\n+                        writer.writeStartElement(\"TaskExec\");\n+                        copyAttrs(reader, writer);\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    case \"synctask_actionsclassnames\":\n+                        writer.writeStartElement(\"PullTask_actionsClassNames\");\n+                        writer.writeAttribute(\n+                                \"pullTask_id\", getAttributeValue(reader, \"syncTask_id\"));\n+\n+                        String syncActionClassName = getAttributeValue(reader, \"element\");\n+                        switch (syncActionClassName) {\n+                            case \"org.apache.syncope.core.sync.impl.LDAPMembershipSyncActions\":\n+                                syncActionClassName =\n+                                        \"org.apache.syncope.core.provisioning.java.pushpull.LDAPMembershipPullActions\";\n+                                break;\n+\n+                            case \"org.apache.syncope.core.sync.impl.LDAPPasswordSyncActions\":\n+                                syncActionClassName =\n+                                        \"org.apache.syncope.core.provisioning.java.pushpull.LDAPPasswordPullActions\";\n+                                break;\n+\n+                            case \"org.apache.syncope.core.sync.impl.DBPasswordSyncActions\":\n+                                syncActionClassName =\n+                                        \"org.apache.syncope.core.provisioning.java.pushpull.DBPasswordPullActions\";\n+\n+                            default:\n+                        }\n+                        writer.writeAttribute(\"actionClassName\", syncActionClassName);\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    case \"notification\":\n+                        writer.writeStartElement(\"Notification\");\n+                        copyAttrs(reader, writer, \"recipientAttrType\", \"template\");\n+                        String recipientAttrType = getAttributeValue(reader, \"recipientAttrType\");\n+                        if (\"UserSchema\".equals(recipientAttrType)) {\n+                            recipientAttrType = \"UserPlainSchema\";\n+                        } else if (\"RoleSchema\".equals(recipientAttrType)) {\n+                            recipientAttrType = \"GroupPlainSchema\";\n+                        }\n+                        writer.writeAttribute(\"recipientAttrType\", recipientAttrType);\n+                        writer.writeAttribute(\n+                                \"template_name\", getAttributeValue(reader, \"template\"));\n+                        writer.writeEndElement();\n+\n+                        String notificationId = getAttributeValue(reader, \"id\");\n+\n+                        String userAbout = getAttributeValue(reader, \"userAbout\");\n+                        if (userAbout != null && !userAbout.isEmpty()) {\n+                            writer.writeStartElement(\"AnyAbout\");\n+                            writer.writeAttribute(\"id\", notificationId);\n+                            writer.writeAttribute(\"notification_id\", notificationId);\n+                            writer.writeAttribute(\"anyType_name\", \"USER\");\n+                            writer.writeAttribute(\"filter\", userAbout);\n+                            writer.writeEndElement();\n+                        }\n+                        String roleAbout = getAttributeValue(reader, \"roleAbout\");\n+                        if (roleAbout != null && !roleAbout.isEmpty()) {\n+                            writer.writeStartElement(\"AnyAbout\");\n+                            writer.writeAttribute(\"id\", notificationId);\n+                            writer.writeAttribute(\"notification_id\", notificationId);\n+                            writer.writeAttribute(\"anyType_name\", \"GROUP\");\n+                            writer.writeAttribute(\"filter\", roleAbout);\n+                            writer.writeEndElement();\n+                        }\n+                        break;\n+\n+                    case \"notification_events\":\n+                        writer.writeStartElement(\"Notification_events\");\n+                        copyAttrs(reader, writer, \"event\");\n+                        writer.writeAttribute(\n+                                \"event\", getAttributeValue(reader, \"events\").\n+                                replaceAll(\"Controller\", \"Logic\"));\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    case \"notificationtask_recipients\":\n+                        writer.writeStartElement(\"NotificationTask_recipients\");\n+                        copyAttrs(reader, writer);\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    case \"report\":\n+                        writer.writeStartElement(\"Report\");\n+                        copyAttrs(reader, writer);\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    case \"reportletconfinstance\":\n+                        writer.writeStartElement(\"ReportletConfInstance\");\n+                        copyAttrs(reader, writer);\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    case \"reportexec\":\n+                        writer.writeStartElement(\"ReportExec\");\n+                        copyAttrs(reader, writer);\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    case \"securityquestion\":\n+                        writer.writeStartElement(\"SecurityQuestion\");\n+                        copyAttrs(reader, writer);\n+                        writer.writeEndElement();\n+                        break;\n+\n+                    default:\n+                }\n+            }\n+\n+            reader.next();\n+        }\n+\n+        writer.writeStartElement(\"Realm\");\n+        writer.writeAttribute(\"id\", \"1\");\n+        writer.writeAttribute(\"name\", \"/\");\n+        if (globalAccountPolicy != null) {\n+            writer.writeAttribute(\"accountPolicy_id\", globalAccountPolicy);\n+        }\n+        if (globalPasswordPolicy != null) {\n+            writer.writeAttribute(\"passwordPolicy_id\", globalPasswordPolicy);\n+        }\n+        writer.writeEndElement();\n+\n+        writer.writeEndElement();\n+        writer.writeEndDocument();\n+        writer.close();\n+\n+        reporter.writeEndElement();\n+        reporter.writeEndDocument();\n+        reporter.close();\n+        System.out.println(\"\\nVirtual items, require manual intervention:\\n\" + reporterSW.toString());\n+    }\n+\n+    public MigrateConf(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void migrate() {\n+        if (input.parameterNumber() == 2) {\n+            try {\n+                exec(input.firstParameter(), input.secondParameter());\n+                migrateResultManager.genericMessage(\n+                        \"Migration completed; file successfully created under \" + input.secondParameter());\n+            } catch (Exception e) {\n+                LOG.error(\"Error migrating configuration from {}\", input.firstParameter(), e);\n+                migrateResultManager.genericError(\"Error performing configuration migration: \" + e.getMessage());\n+            }\n+        } else {\n+            migrateResultManager.commandOptionError(HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"4c6632b752c5f79c2fbf3c7b6494e80fa5e5ef84","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/migrate/MigrateResultManager.java","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fmigrate%2FMigrateResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fmigrate%2FMigrateResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fmigrate%2FMigrateResultManager.java?ref=5c239515526a3b5adeb47c137dfacb52a773d5e4","patch":"@@ -0,0 +1,24 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.migrate;\n+\n+import org.apache.syncope.client.cli.commands.CommonsResultManager;\n+\n+public class MigrateResultManager extends CommonsResultManager {\n+}"},{"sha":"9fe31d5d993989faab2f5a46a5d843875056020b","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/util/CommandUtils.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FCommandUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FCommandUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FCommandUtils.java?ref=5c239515526a3b5adeb47c137dfacb52a773d5e4","patch":"@@ -44,7 +44,6 @@ public static AbstractCommand fromArgs(final String arg)\n         }\n \n         return commandClass.newInstance();\n-\n     }\n \n     public static List<AbstractCommand> commands()\n@@ -55,13 +54,11 @@ public static List<AbstractCommand> commands()\n         final CommandClassScanner ccs = new CommandClassScanner();\n         final List<Class<? extends AbstractCommand>> commands = ccs.getComponentClasses();\n \n-        Class<? extends AbstractCommand> commandClass;\n         for (final Class<? extends AbstractCommand> cmd : commands) {\n-            commandClass = cmd;\n-            if (commandClass == null) {\n+            if (cmd == null) {\n                 throw new IllegalArgumentException();\n             }\n-            listCommands.add(commandClass.newInstance());\n+            listCommands.add(cmd.newInstance());\n         }\n \n         return listCommands;\n@@ -71,7 +68,6 @@ public static String[] fromEnumToArray(final Class<? extends Enum<?>> enumClass)\n         final String[] types = new String[enumClass.getFields().length];\n         for (int i = 0; i < enumClass.getFields().length; i++) {\n             types[i] = enumClass.getFields()[i].getName();\n-\n         }\n         return types;\n     }"},{"sha":"ba504318903b7a65d5f0161c8778af38bbff353b","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/util/XMLUtils.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FXMLUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FXMLUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FXMLUtils.java?ref=5c239515526a3b5adeb47c137dfacb52a773d5e4","patch":"@@ -20,7 +20,7 @@\n \n import java.io.File;\n import java.io.IOException;\n-import java.io.SequenceInputStream;\n+import java.io.InputStream;\n import java.io.StringReader;\n import javax.xml.parsers.DocumentBuilderFactory;\n import javax.xml.parsers.ParserConfigurationException;\n@@ -34,12 +34,12 @@\n \n public final class XMLUtils {\n \n-    public static void createXMLFile(final SequenceInputStream sis, final String filePath)\n+    public static void createXMLFile(final InputStream sis, final String filePath)\n             throws TransformerException, SAXException, IOException, ParserConfigurationException {\n \n-        TransformerFactory.newInstance().newTransformer()\n-                .transform(new DOMSource(DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(\n-                                        new InputSource(new StringReader(IOUtils.toString(sis))))),\n+        TransformerFactory.newInstance().newTransformer().\n+                transform(new DOMSource(DocumentBuilderFactory.newInstance().newDocumentBuilder().\n+                        parse(new InputSource(new StringReader(IOUtils.toString(sis))))),\n                         new StreamResult(new File(filePath)));\n     }\n "},{"sha":"05ef8ad6e14bbec697461b30c724a57dee5df57e","filename":"client/cli/src/main/resources/messages.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Fmain%2Fresources%2Fmessages.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Fmain%2Fresources%2Fmessages.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fresources%2Fmessages.properties?ref=5c239515526a3b5adeb47c137dfacb52a773d5e4","patch":"@@ -32,3 +32,4 @@ schema.help.message=\\nUsage: schema [options]\\n  Options:\\n    --help \\n    --de\n task.help.message=\\nUsage: task [options]\\n  Options:\\n    --help \\n    --details\\n    --list\\n       Syntax: --list {TASK-TYPE} \\n          Task type: NOTIFICATION / PROPAGATION / PUSH / SCHEDULED / PULL\\n    --list-running-jobs \\n    --list-scheduled-jobs \\n    --read \\n       Syntax: --read {TASK-ID} {TASK-ID} [...]\\n    --delete \\n       Syntax: --delete {TASK-ID} {TASK-ID} [...]\\n    --delete-all-prop\\n    --delete-execution \\n       Syntax: --delete-execution {TASK-EXEC-ID} {TASK-EXEC-ID} [...]\\n    --execute \\n       Syntax: --execute {TASK-ID} {DRY-RUN}\\n          Dry run: true / false\\n\n user.help.message=\\nUsage: user [options]\\n  Options:\\n    --help \\n    --details \\n    --list \\n    --get-user-key\\n       Syntax: --get-user-key {USERNAME}\\n    --get-username\\n       Syntax: --get-username {USER-ID}\\n    --read-by-userid \\n       Syntax: --read-by-userid {USER-ID} {USER-ID} [...]\\n    --read-by-username\\n       Syntax: --read-by-username {USERNAME} {USERNAME} [...]\\n    --search-by-attribute \\n       Syntax: --search-by-attribute {REALM} {ATTR-NAME}={ATTR-VALUE}\\n    --search-by-role \\n       Syntax: --search-by-role {REALM} {ROLE-NAME}\\n    --search-by-resource \\n       Syntax: --search-by-resource {REALM} {RESOURCE-NAME}\\n    --delete \\n       Syntax: --delete {USER-ID} {USER-ID} [...]\\n    --delete-all \\n       Syntax: --delete-all {REALM}\\n    --delete-by-attribute \\n       Syntax: --delete-by-attribute {REALM} {ATTR-NAME}={ATTR-VALUE}\\n\n workflow.help.message=\\nUsage: workflow [options]\\n  Options:\\n    --help \\n    --export-diagram {ANY-TYPE-KIND}\\n        Any type kind: ANY_OBJECT / USER / GROUP\\n    --export-definition {ANY-TYPE-KIND}\\n        Any type kind: ANY_OBJECT / USER / GROUP\\n\n+migrate.help.message=\\nUsage: migrate [options]\\n  Options:\\n    --help \\n    --conf {SRC} {DST}\\n        Syncope 1.2.X content.xml SRC absolute path\\n        Syncope 2.0.X *Content.xml DST absolute path\\n"},{"sha":"78ed4c145042dd985ac30d169cfca2b8325e2862","filename":"client/cli/src/test/java/org/apache/syncope/client/cli/util/CommandUtilsTest.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FCommandUtilsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c239515526a3b5adeb47c137dfacb52a773d5e4/client%2Fcli%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FCommandUtilsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FCommandUtilsTest.java?ref=5c239515526a3b5adeb47c137dfacb52a773d5e4","patch":"@@ -50,13 +50,9 @@ public void fromArgs() {\n     }\n \n     @Test\n-    public void commands() {\n-        try {\n-            final List<AbstractCommand> commands = CommandUtils.commands();\n-            assertFalse(commands.isEmpty());\n-            assertEquals(21, commands.size());\n-        } catch (final IllegalAccessException | IllegalArgumentException | InstantiationException ex) {\n-            fail(ex.getMessage());\n-        }\n+    public void commands() throws InstantiationException, IllegalAccessException {\n+        List<AbstractCommand> commands = CommandUtils.commands();\n+        assertFalse(commands.isEmpty());\n+        assertEquals(22, commands.size());\n     }\n }"}]}