{"sha":"3eaf7103b94860a332fcce14f3dabe5a61b19f9f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjNlYWY3MTAzYjk0ODYwYTMzMmZjY2UxNGYzZGFiZTVhNjFiMTlmOWY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-08-16T09:19:42Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-08-16T09:19:51Z"},"message":"White noise: reflow","tree":{"sha":"d4d27f4ea3f639332e632b8c8e56c1c5d4d74325","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d4d27f4ea3f639332e632b8c8e56c1c5d4d74325"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3eaf7103b94860a332fcce14f3dabe5a61b19f9f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3eaf7103b94860a332fcce14f3dabe5a61b19f9f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3eaf7103b94860a332fcce14f3dabe5a61b19f9f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3eaf7103b94860a332fcce14f3dabe5a61b19f9f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d9ff2d429a0aadc6a7757199f1a8a33446038667","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d9ff2d429a0aadc6a7757199f1a8a33446038667","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d9ff2d429a0aadc6a7757199f1a8a33446038667"}],"stats":{"total":39,"additions":17,"deletions":22},"files":[{"sha":"b7e8338f9008acc88887c09bdf89af253b902b72","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActions.java","status":"modified","additions":17,"deletions":22,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3eaf7103b94860a332fcce14f3dabe5a61b19f9f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3eaf7103b94860a332fcce14f3dabe5a61b19f9f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java?ref=3eaf7103b94860a332fcce14f3dabe5a61b19f9f","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n@@ -43,7 +44,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.provisioning.java.job.SetUMembershipsJob;\n \n /**\n@@ -79,7 +79,8 @@ public class LDAPMembershipPullActions extends SchedulingPullActions {\n     protected String getGroupMembershipAttrName(final Connector connector) {\n         Optional<ConnConfProperty> groupMembership = connector.getConnInstance().getConf().stream().\n                 filter(property -> \"groupMemberAttribute\".equals(property.getSchema().getName())\n-                && property.getValues() != null && !property.getValues().isEmpty()).findFirst();\n+                && !property.getValues().isEmpty()).\n+                findFirst();\n \n         return groupMembership.isPresent()\n                 ? (String) groupMembership.get().getValues().get(0)\n@@ -96,27 +97,24 @@ protected String getGroupMembershipAttrName(final Connector connector) {\n      * {@link #getGroupMembershipAttrName}\n      */\n     protected List<Object> getMembAttrValues(final SyncDelta delta, final Connector connector) {\n-        List<Object> result = Collections.<Object>emptyList();\n         String groupMemberName = getGroupMembershipAttrName(connector);\n \n         // first, try to read the configured attribute from delta, returned by the ongoing pull\n         Attribute membAttr = delta.getObject().getAttributeByName(groupMemberName);\n         // if not found, perform an additional read on the underlying connector for the same connector object\n         if (membAttr == null) {\n-            OperationOptionsBuilder oob = new OperationOptionsBuilder();\n-            oob.setAttributesToGet(groupMemberName);\n+            OperationOptionsBuilder oob = new OperationOptionsBuilder().setAttributesToGet(groupMemberName);\n             ConnectorObject remoteObj = connector.getObject(ObjectClass.GROUP, delta.getUid(), false, oob.build());\n             if (remoteObj == null) {\n                 LOG.debug(\"Object for '{}' not found\", delta.getUid().getUidValue());\n             } else {\n                 membAttr = remoteObj.getAttributeByName(groupMemberName);\n             }\n         }\n-        if (membAttr != null && membAttr.getValue() != null) {\n-            result = membAttr.getValue();\n-        }\n \n-        return result;\n+        return membAttr == null || membAttr.getValue() == null\n+                ? Collections.emptyList()\n+                : membAttr.getValue();\n     }\n \n     /**\n@@ -131,15 +129,12 @@ protected void populateMemberships(\n             final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final GroupTO groupTO)\n             throws JobExecutionException {\n \n-        Connector connector = profile.getConnector();\n-        getMembAttrValues(delta, connector).stream().map(membValue -> {\n+        getMembAttrValues(delta, profile.getConnector()).forEach(membValue -> {\n             Set<String> memb = memberships.get(membValue.toString());\n             if (memb == null) {\n                 memb = new HashSet<>();\n                 memberships.put(membValue.toString(), memb);\n             }\n-            return memb;\n-        }).forEachOrdered(memb -> {\n             memb.add(groupTO.getKey());\n         });\n     }\n@@ -155,24 +150,24 @@ public void after(\n             final EntityTO entity,\n             final ProvisioningReport result) throws JobExecutionException {\n \n-        if (!(profile.getTask() instanceof PullTask)) {\n-            return;\n+        if (!(entity instanceof GroupTO)) {\n+            super.after(profile, delta, entity, result);\n         }\n \n-        if (!(entity instanceof GroupTO)\n-                || !profile.getTask().getResource().getProvision(anyTypeDAO.findUser()).isPresent()\n-                || profile.getTask().getResource().getProvision(anyTypeDAO.findUser()).get().getMapping() == null) {\n-\n-            super.after(profile, delta, entity, result);\n-        } else {\n+        Optional<? extends Provision> provision = profile.getTask().getResource().getProvision(anyTypeDAO.findUser()).\n+                filter(p -> p.getMapping() != null);\n+        if (provision.isPresent()) {\n             populateMemberships(profile, delta, (GroupTO) entity);\n+        } else {\n+            super.after(profile, delta, entity, result);\n         }\n     }\n \n     @Override\n     public void afterAll(final ProvisioningProfile<?, ?> profile) throws JobExecutionException {\n         Map<String, Set<String>> resolvedMemberships = new HashMap<>();\n-        this.memberships.forEach((name, memb) -> {\n+\n+        memberships.forEach((name, memb) -> {\n             Optional<String> userKey = pullUtils.match(\n                     anyTypeDAO.findUser(),\n                     name,"}]}