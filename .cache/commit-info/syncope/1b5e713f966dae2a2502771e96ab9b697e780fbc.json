{"sha":"1b5e713f966dae2a2502771e96ab9b697e780fbc","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjFiNWU3MTNmOTY2ZGFlMmEyNTAyNzcxZTk2YWI5YjY5N2U3ODBmYmM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-05-28T13:06:01Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-05-28T13:06:01Z"},"message":"Various Elasticsearch improvements and cleanup","tree":{"sha":"a68f9285f519e61df02d79471e1405d7f4a73add","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a68f9285f519e61df02d79471e1405d7f4a73add"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1b5e713f966dae2a2502771e96ab9b697e780fbc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1b5e713f966dae2a2502771e96ab9b697e780fbc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1b5e713f966dae2a2502771e96ab9b697e780fbc","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1b5e713f966dae2a2502771e96ab9b697e780fbc/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"89640ee6777cc45dc754eae8e349c14b0090c928","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/89640ee6777cc45dc754eae8e349c14b0090c928","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/89640ee6777cc45dc754eae8e349c14b0090c928"}],"stats":{"total":218,"additions":177,"deletions":41},"files":[{"sha":"39246a931bcf5367f38d8501f44eddac37b05a68","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchClientFactoryBean.java","status":"modified","additions":68,"deletions":6,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b5e713f966dae2a2502771e96ab9b697e780fbc/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b5e713f966dae2a2502771e96ab9b697e780fbc/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientFactoryBean.java?ref=1b5e713f966dae2a2502771e96ab9b697e780fbc","patch":"@@ -18,9 +18,19 @@\n  */\n package org.apache.syncope.ext.elasticsearch.client;\n \n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n import java.util.List;\n+import org.apache.http.Header;\n+import org.apache.http.HttpHeaders;\n import org.apache.http.HttpHost;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.message.BasicHeader;\n import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestClientBuilder;\n import org.elasticsearch.client.RestHighLevelClient;\n import org.springframework.beans.factory.DisposableBean;\n import org.springframework.beans.factory.FactoryBean;\n@@ -32,17 +42,74 @@ public class ElasticsearchClientFactoryBean implements FactoryBean<RestHighLevel\n \n     private final List<HttpHost> hosts;\n \n+    private String username;\n+\n+    private String password;\n+\n+    private String serviceToken;\n+\n+    private String apiKeyId;\n+\n+    private String apiKeySecret;\n+\n     private RestHighLevelClient client;\n \n     public ElasticsearchClientFactoryBean(final List<HttpHost> hosts) {\n         this.hosts = hosts;\n     }\n \n+    public void setUsername(final String username) {\n+        this.username = username;\n+    }\n+\n+    public void setPassword(final String password) {\n+        this.password = password;\n+    }\n+\n+    public String getServiceToken() {\n+        return serviceToken;\n+    }\n+\n+    public void setServiceToken(final String serviceToken) {\n+        this.serviceToken = serviceToken;\n+    }\n+\n+    public String getApiKeyId() {\n+        return apiKeyId;\n+    }\n+\n+    public void setApiKeyId(final String apiKeyId) {\n+        this.apiKeyId = apiKeyId;\n+    }\n+\n+    public String getApiKeySecret() {\n+        return apiKeySecret;\n+    }\n+\n+    public void setApiKeySecret(final String apiKeySecret) {\n+        this.apiKeySecret = apiKeySecret;\n+    }\n+\n     @Override\n     public RestHighLevelClient getObject() throws Exception {\n         synchronized (this) {\n             if (client == null) {\n-                client = new RestHighLevelClient(RestClient.builder(hosts.toArray(new HttpHost[0])));\n+                RestClientBuilder restClient = RestClient.builder(hosts.toArray(new HttpHost[0]));\n+                if (username != null && password != null) {\n+                    CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n+                    credentialsProvider.setCredentials(\n+                            AuthScope.ANY, new UsernamePasswordCredentials(username, password));\n+                    restClient.setHttpClientConfigCallback(b -> b.setDefaultCredentialsProvider(credentialsProvider));\n+                } else if (serviceToken != null) {\n+                    restClient.setDefaultHeaders(\n+                            new Header[] { new BasicHeader(HttpHeaders.AUTHORIZATION, \"Bearer \" + serviceToken) });\n+                } else if (apiKeyId != null && apiKeySecret != null) {\n+                    String apiKeyAuth = Base64.getEncoder().encodeToString(\n+                            (apiKeyId + \":\" + apiKeySecret).getBytes(StandardCharsets.UTF_8));\n+                    restClient.setDefaultHeaders(\n+                            new Header[] { new BasicHeader(HttpHeaders.AUTHORIZATION, \"ApiKey \" + apiKeyAuth) });\n+                }\n+                client = new RestHighLevelClient(restClient);\n             }\n         }\n         return client;\n@@ -53,11 +120,6 @@ public Class<?> getObjectType() {\n         return RestHighLevelClient.class;\n     }\n \n-    @Override\n-    public boolean isSingleton() {\n-        return true;\n-    }\n-\n     @Override\n     public void destroy() throws Exception {\n         if (client != null) {"},{"sha":"69ebe5acf6df0fa0d0434aed88ae657eb554dabb","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchIndexManager.java","status":"modified","additions":13,"deletions":5,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b5e713f966dae2a2502771e96ab9b697e780fbc/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b5e713f966dae2a2502771e96ab9b697e780fbc/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java?ref=1b5e713f966dae2a2502771e96ab9b697e780fbc","patch":"@@ -65,10 +65,8 @@ public boolean existsIndex(final String domain, final AnyTypeKind kind) throws I\n                 new GetIndexRequest(ElasticsearchUtils.getContextDomainName(domain, kind)), RequestOptions.DEFAULT);\n     }\n \n-    public void createIndex(final String domain, final AnyTypeKind kind)\n-            throws InterruptedException, ExecutionException, IOException {\n-\n-        XContentBuilder settings = XContentFactory.jsonBuilder().\n+    public XContentBuilder defaultSettings() throws IOException {\n+        return XContentFactory.jsonBuilder().\n                 startObject().\n                 startObject(\"analysis\").\n                 startObject(\"normalizer\").\n@@ -87,8 +85,10 @@ public void createIndex(final String domain, final AnyTypeKind kind)\n                 field(\"number_of_replicas\", elasticsearchUtils.getNumberOfReplicas()).\n                 endObject().\n                 endObject();\n+    }\n \n-        XContentBuilder mapping = XContentFactory.jsonBuilder().\n+    public XContentBuilder defaultMapping() throws IOException {\n+        return XContentFactory.jsonBuilder().\n                 startObject().\n                 startArray(\"dynamic_templates\").\n                 startObject().\n@@ -102,6 +102,14 @@ public void createIndex(final String domain, final AnyTypeKind kind)\n                 endObject().\n                 endArray().\n                 endObject();\n+    }\n+\n+    public void createIndex(\n+            final String domain,\n+            final AnyTypeKind kind,\n+            final XContentBuilder settings,\n+            final XContentBuilder mapping)\n+            throws InterruptedException, ExecutionException, IOException {\n \n         CreateIndexResponse response = client.indices().create(\n                 new CreateIndexRequest(ElasticsearchUtils.getContextDomainName(domain, kind))."},{"sha":"47bc2c13c38805e4ddc8a1123dbe8dc407d454b5","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java","status":"modified","additions":29,"deletions":9,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b5e713f966dae2a2502771e96ab9b697e780fbc/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b5e713f966dae2a2502771e96ab9b697e780fbc/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java?ref=1b5e713f966dae2a2502771e96ab9b697e780fbc","patch":"@@ -45,22 +45,26 @@\n  */\n public class ElasticsearchUtils {\n \n+    public static String getContextDomainName(final String domain, final AnyTypeKind kind) {\n+        return domain.toLowerCase() + '_' + kind.name().toLowerCase();\n+    }\n+\n     @Autowired\n-    private UserDAO userDAO;\n+    protected UserDAO userDAO;\n \n     @Autowired\n-    private GroupDAO groupDAO;\n+    protected GroupDAO groupDAO;\n \n     @Autowired\n-    private AnyObjectDAO anyObjectDAO;\n+    protected AnyObjectDAO anyObjectDAO;\n \n-    private int indexMaxResultWindow = 10000;\n+    protected int indexMaxResultWindow = 10000;\n \n-    private int retryOnConflict = 5;\n+    protected int retryOnConflict = 5;\n \n-    private int numberOfShards = 1;\n+    protected int numberOfShards = 1;\n \n-    private int numberOfReplicas = 1;\n+    protected int numberOfReplicas = 1;\n \n     public void setIndexMaxResultWindow(final int indexMaxResultWindow) {\n         this.indexMaxResultWindow = indexMaxResultWindow;\n@@ -143,6 +147,8 @@ public XContentBuilder builder(final Any<?> any) throws IOException {\n             });\n             builder = builder.field(\"relationships\", relationships);\n             builder = builder.field(\"relationshipTypes\", relationshipTypes);\n+\n+            builder = customizeBuilder(builder, anyObject);\n         } else if (any instanceof Group) {\n             Group group = ((Group) any);\n             builder = builder.field(\"name\", group.getName());\n@@ -160,6 +166,8 @@ public XContentBuilder builder(final Any<?> any) throws IOException {\n                     map(membership -> membership.getLeftEnd().getKey()).collect(Collectors.toList()));\n             members.add(groupDAO.findADynMembers(group));\n             builder = builder.field(\"members\", members);\n+\n+            builder = customizeBuilder(builder, group);\n         } else if (any instanceof User) {\n             User user = ((User) any);\n             builder = builder.\n@@ -192,6 +200,8 @@ public XContentBuilder builder(final Any<?> any) throws IOException {\n             });\n             builder = builder.field(\"relationships\", relationships);\n             builder = builder.field(\"relationshipTypes\", relationshipTypes);\n+\n+            builder = customizeBuilder(builder, user);\n         }\n \n         for (PlainAttr<?> plainAttr : any.getPlainAttrs()) {\n@@ -208,7 +218,17 @@ public XContentBuilder builder(final Any<?> any) throws IOException {\n         return builder.endObject();\n     }\n \n-    public static String getContextDomainName(final String domain, final AnyTypeKind kind) {\n-        return domain.toLowerCase() + '_' + kind.name().toLowerCase();\n+    protected XContentBuilder customizeBuilder(final XContentBuilder builder, final AnyObject anyObject)\n+            throws IOException {\n+\n+        return builder;\n+    }\n+\n+    protected XContentBuilder customizeBuilder(final XContentBuilder builder, final Group group) throws IOException {\n+        return builder;\n+    }\n+\n+    protected XContentBuilder customizeBuilder(final XContentBuilder builder, final User user) throws IOException {\n+        return builder;\n     }\n }"},{"sha":"0a5606125523f4c5a298809bf850da47a4613ece","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/DomainIndexLoader.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b5e713f966dae2a2502771e96ab9b697e780fbc/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainIndexLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b5e713f966dae2a2502771e96ab9b697e780fbc/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainIndexLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainIndexLoader.java?ref=1b5e713f966dae2a2502771e96ab9b697e780fbc","patch":"@@ -45,13 +45,16 @@ public int getOrder() {\n     public void load(final String domain, final DataSource datasource) {\n         try {\n             if (!indexManager.existsIndex(domain, AnyTypeKind.USER)) {\n-                indexManager.createIndex(domain, AnyTypeKind.USER);\n+                indexManager.createIndex(domain, AnyTypeKind.USER,\n+                        indexManager.defaultSettings(), indexManager.defaultMapping());\n             }\n             if (!indexManager.existsIndex(domain, AnyTypeKind.GROUP)) {\n-                indexManager.createIndex(domain, AnyTypeKind.GROUP);\n+                indexManager.createIndex(domain, AnyTypeKind.GROUP,\n+                        indexManager.defaultSettings(), indexManager.defaultMapping());\n             }\n             if (!indexManager.existsIndex(domain, AnyTypeKind.ANY_OBJECT)) {\n-                indexManager.createIndex(domain, AnyTypeKind.ANY_OBJECT);\n+                indexManager.createIndex(domain, AnyTypeKind.ANY_OBJECT,\n+                        indexManager.defaultSettings(), indexManager.defaultMapping());\n             }\n         } catch (Exception e) {\n             LOG.error(\"While creating index for domain {}\", domain, e);"},{"sha":"28584360f2b0007fb6d796591c25826597a5dbf4","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":16,"deletions":5,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b5e713f966dae2a2502771e96ab9b697e780fbc/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b5e713f966dae2a2502771e96ab9b697e780fbc/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=1b5e713f966dae2a2502771e96ab9b697e780fbc","patch":"@@ -23,7 +23,6 @@\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n@@ -64,6 +63,7 @@\n import org.elasticsearch.client.RequestOptions;\n import org.elasticsearch.client.RestHighLevelClient;\n import org.elasticsearch.index.query.DisMaxQueryBuilder;\n+import org.elasticsearch.index.query.MatchAllQueryBuilder;\n import org.elasticsearch.index.query.MatchNoneQueryBuilder;\n import org.elasticsearch.index.query.QueryBuilder;\n import org.elasticsearch.index.query.QueryBuilders;\n@@ -81,14 +81,16 @@ public class ElasticsearchAnySearchDAO extends AbstractAnySearchDAO {\n \n     protected static final QueryBuilder MATCH_NONE_QUERY_BUILDER = new MatchNoneQueryBuilder();\n \n+    protected static final QueryBuilder MATCH_ALL_QUERY_BUILDER = new MatchAllQueryBuilder();\n+\n     @Autowired\n     protected RestHighLevelClient client;\n \n     @Autowired\n     protected ElasticsearchUtils elasticsearchUtils;\n \n     protected Triple<Optional<QueryBuilder>, Set<String>, Set<String>> getAdminRealmsFilter(\n-            final Set<String> adminRealms) {\n+            final AnyTypeKind kind, final Set<String> adminRealms) {\n \n         DisMaxQueryBuilder builder = QueryBuilders.disMaxQuery();\n \n@@ -134,7 +136,7 @@ protected SearchRequest searchRequest(\n             final int size,\n             final List<SortBuilder<?>> sortBuilders) {\n \n-        Triple<Optional<QueryBuilder>, Set<String>, Set<String>> filter = getAdminRealmsFilter(adminRealms);\n+        Triple<Optional<QueryBuilder>, Set<String>, Set<String>> filter = getAdminRealmsFilter(kind, adminRealms);\n         QueryBuilder queryBuilder;\n         if (SyncopeConstants.FULL_ADMIN_REALMS.equals(adminRealms)) {\n             queryBuilder = getQueryBuilder(cond, kind);\n@@ -228,8 +230,7 @@ protected <T extends Any<?>> List<T> doSearch(\n \n         return ArrayUtils.isEmpty(esResult)\n                 ? List.of()\n-                : buildResult(Stream.of(Objects.requireNonNull(esResult))\n-                        .map(SearchHit::getId).collect(Collectors.toList()), kind);\n+                : buildResult(Stream.of(esResult).map(SearchHit::getId).collect(Collectors.toList()), kind);\n     }\n \n     protected QueryBuilder getQueryBuilder(final SearchCond cond, final AnyTypeKind kind) {\n@@ -314,9 +315,15 @@ protected QueryBuilder getQueryBuilder(final SearchCond cond, final AnyTypeKind\n                     }\n                 }\n \n+                // allow for additional search conditions\n+                if (builder == null) {\n+                    builder = getQueryBuilderForCustomConds(cond, kind);\n+                }\n+\n                 if (builder == null) {\n                     builder = MATCH_NONE_QUERY_BUILDER;\n                 }\n+\n                 if (cond.getType() == SearchCond.Type.NOT_LEAF) {\n                     builder = QueryBuilders.boolQuery().mustNot(builder);\n                 }\n@@ -517,4 +524,8 @@ protected QueryBuilder getQueryBuilder(final AnyCond cond, final AnyTypeKind kin\n \n         return fillAttrQuery(checked.getLeft(), checked.getMiddle(), checked.getRight());\n     }\n+\n+    protected QueryBuilder getQueryBuilderForCustomConds(final SearchCond cond, final AnyTypeKind kind) {\n+        return MATCH_ALL_QUERY_BUILDER;\n+    }\n }"},{"sha":"269967a565326b8242379071cab3d6a6183344cb","filename":"ext/elasticsearch/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAOTest.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b5e713f966dae2a2502771e96ab9b697e780fbc/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b5e713f966dae2a2502771e96ab9b697e780fbc/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java?ref=1b5e713f966dae2a2502771e96ab9b697e780fbc","patch":"@@ -94,7 +94,8 @@ public void getAdminRealmsFilter_realm() {\n \n         // 2. test\n         Set<String> adminRealms = Set.of(SyncopeConstants.ROOT_REALM);\n-        Triple<Optional<QueryBuilder>, Set<String>, Set<String>> filter = searchDAO.getAdminRealmsFilter(adminRealms);\n+        Triple<Optional<QueryBuilder>, Set<String>, Set<String>> filter =\n+                searchDAO.getAdminRealmsFilter(AnyTypeKind.USER, adminRealms);\n         assertEquals(\n                 QueryBuilders.disMaxQuery().add(QueryBuilders.termQuery(\"realm\", SyncopeConstants.ROOT_REALM)),\n                 filter.getLeft().get());\n@@ -112,7 +113,8 @@ public void getAdminRealmsFilter_dynRealm() {\n \n         // 2. test\n         Set<String> adminRealms = Set.of(\"dyn\");\n-        Triple<Optional<QueryBuilder>, Set<String>, Set<String>> filter = searchDAO.getAdminRealmsFilter(adminRealms);\n+        Triple<Optional<QueryBuilder>, Set<String>, Set<String>> filter =\n+                searchDAO.getAdminRealmsFilter(AnyTypeKind.USER, adminRealms);\n         assertFalse(filter.getLeft().isPresent());\n         assertEquals(Set.of(\"dyn\"), filter.getMiddle());\n         assertEquals(Set.of(), filter.getRight());\n@@ -121,7 +123,8 @@ public void getAdminRealmsFilter_dynRealm() {\n     @Test\n     public void getAdminRealmsFilter_groupOwner() {\n         Set<String> adminRealms = Set.of(RealmUtils.getGroupOwnerRealm(\"/any\", \"groupKey\"));\n-        Triple<Optional<QueryBuilder>, Set<String>, Set<String>> filter = searchDAO.getAdminRealmsFilter(adminRealms);\n+        Triple<Optional<QueryBuilder>, Set<String>, Set<String>> filter =\n+                searchDAO.getAdminRealmsFilter(AnyTypeKind.USER, adminRealms);\n         assertFalse(filter.getLeft().isPresent());\n         assertEquals(Set.of(), filter.getMiddle());\n         assertEquals(Set.of(\"groupKey\"), filter.getRight());"},{"sha":"0e0c1e33474640b8c57b7fadcfe9643b23297196","filename":"ext/elasticsearch/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ElasticsearchReindex.java","status":"modified","additions":38,"deletions":9,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b5e713f966dae2a2502771e96ab9b697e780fbc/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b5e713f966dae2a2502771e96ab9b697e780fbc/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java?ref=1b5e713f966dae2a2502771e96ab9b697e780fbc","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java.job;\n \n+import java.io.IOException;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n@@ -31,6 +32,7 @@\n import org.elasticsearch.action.index.IndexResponse;\n import org.elasticsearch.client.RequestOptions;\n import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -41,22 +43,46 @@\n public class ElasticsearchReindex extends AbstractSchedTaskJobDelegate {\n \n     @Autowired\n-    private RestHighLevelClient client;\n+    protected RestHighLevelClient client;\n \n     @Autowired\n-    private ElasticsearchIndexManager indexManager;\n+    protected ElasticsearchIndexManager indexManager;\n \n     @Autowired\n-    private ElasticsearchUtils elasticsearchUtils;\n+    protected ElasticsearchUtils elasticsearchUtils;\n \n     @Autowired\n-    private UserDAO userDAO;\n+    protected UserDAO userDAO;\n \n     @Autowired\n-    private GroupDAO groupDAO;\n+    protected GroupDAO groupDAO;\n \n     @Autowired\n-    private AnyObjectDAO anyObjectDAO;\n+    protected AnyObjectDAO anyObjectDAO;\n+\n+    protected XContentBuilder userSettings() throws IOException {\n+        return indexManager.defaultSettings();\n+    }\n+\n+    protected XContentBuilder groupSettings() throws IOException {\n+        return indexManager.defaultSettings();\n+    }\n+\n+    protected XContentBuilder anyObjectSettings() throws IOException {\n+        return indexManager.defaultSettings();\n+    }\n+\n+    protected XContentBuilder userMapping() throws IOException {\n+        return indexManager.defaultMapping();\n+    }\n+\n+    protected XContentBuilder groupMapping() throws IOException {\n+        return indexManager.defaultMapping();\n+    }\n+\n+    protected XContentBuilder anyObjectMapping() throws IOException {\n+        return indexManager.defaultMapping();\n+    }\n \n     @Override\n     protected String doExecute(final boolean dryRun, final String executor, final JobExecutionContext context)\n@@ -69,17 +95,20 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n                 if (indexManager.existsIndex(AuthContextUtils.getDomain(), AnyTypeKind.USER)) {\n                     indexManager.removeIndex(AuthContextUtils.getDomain(), AnyTypeKind.USER);\n                 }\n-                indexManager.createIndex(AuthContextUtils.getDomain(), AnyTypeKind.USER);\n+                indexManager.createIndex(\n+                        AuthContextUtils.getDomain(), AnyTypeKind.USER, userSettings(), userMapping());\n \n                 if (indexManager.existsIndex(AuthContextUtils.getDomain(), AnyTypeKind.GROUP)) {\n                     indexManager.removeIndex(AuthContextUtils.getDomain(), AnyTypeKind.GROUP);\n                 }\n-                indexManager.createIndex(AuthContextUtils.getDomain(), AnyTypeKind.GROUP);\n+                indexManager.createIndex(\n+                        AuthContextUtils.getDomain(), AnyTypeKind.GROUP, groupSettings(), groupMapping());\n \n                 if (indexManager.existsIndex(AuthContextUtils.getDomain(), AnyTypeKind.ANY_OBJECT)) {\n                     indexManager.removeIndex(AuthContextUtils.getDomain(), AnyTypeKind.ANY_OBJECT);\n                 }\n-                indexManager.createIndex(AuthContextUtils.getDomain(), AnyTypeKind.ANY_OBJECT);\n+                indexManager.createIndex(\n+                        AuthContextUtils.getDomain(), AnyTypeKind.ANY_OBJECT, anyObjectSettings(), anyObjectMapping());\n \n                 LOG.debug(\"Indexing users...\");\n                 for (int page = 1; page <= (userDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {"},{"sha":"adc7a4b2a99fe39aeaa67da837ebd5db15cb80ac","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b5e713f966dae2a2502771e96ab9b697e780fbc/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b5e713f966dae2a2502771e96ab9b697e780fbc/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=1b5e713f966dae2a2502771e96ab9b697e780fbc","patch":"@@ -477,7 +477,7 @@ under the License.\n     <wicket-bootstrap.version>5.0.4</wicket-bootstrap.version>\n     <wicket-spring-boot.version>3.0.4</wicket-spring-boot.version>\n \n-    <netbeans.version>RELEASE122</netbeans.version>\n+    <netbeans.version>RELEASE123</netbeans.version>\n \n     <antlr4.version>4.9.2</antlr4.version>\n "}]}