{"sha":"2bff895d5ecdcf2f1beab202b4ee818243faf654","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjJiZmY4OTVkNWVjZGNmMmYxYmVhYjIwMmI0ZWU4MTgyNDNmYWY2NTQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-10-10T07:36:15Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-10-10T08:51:38Z"},"message":"[SYNCOPE-1502] Adjustments to comply with code rules, checked with PostgreSQL, MySQL, PostgreSQL JSONB and Elasticsearch","tree":{"sha":"ac4eeaf33aee235f684e971a6068765326a2a320","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ac4eeaf33aee235f684e971a6068765326a2a320"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2bff895d5ecdcf2f1beab202b4ee818243faf654","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2bff895d5ecdcf2f1beab202b4ee818243faf654","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2bff895d5ecdcf2f1beab202b4ee818243faf654","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2bff895d5ecdcf2f1beab202b4ee818243faf654/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"92b8519b44e7bf76ea69eb3b38b35b8c28c3b550","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/92b8519b44e7bf76ea69eb3b38b35b8c28c3b550","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/92b8519b44e7bf76ea69eb3b38b35b8c28c3b550"}],"stats":{"total":102,"additions":52,"deletions":50},"files":[{"sha":"02f516ffb32d595168dee094aef67ccacacb29a0","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractJPAJSONAnySearchDAO.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2bff895d5ecdcf2f1beab202b4ee818243faf654/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2bff895d5ecdcf2f1beab202b4ee818243faf654/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnySearchDAO.java?ref=2bff895d5ecdcf2f1beab202b4ee818243faf654","patch":"@@ -18,16 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import org.apache.commons.lang3.time.FastDateFormat;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n \n abstract class AbstractJPAJSONAnySearchDAO extends JPAAnySearchDAO {\n \n-    protected static final FastDateFormat DATE_FORMAT =\n-            FastDateFormat.getInstance(SyncopeConstants.DEFAULT_DATE_PATTERN);\n-\n     @Override\n     SearchSupport buildSearchSupport(final AnyTypeKind kind) {\n         return new SearchSupport(kind);"},{"sha":"404b29241d1e36ab8d33ee54de2dc2748a630867","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONAnySearchDAO.java","status":"modified","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2bff895d5ecdcf2f1beab202b4ee818243faf654/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2bff895d5ecdcf2f1beab202b4ee818243faf654/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java?ref=2bff895d5ecdcf2f1beab202b4ee818243faf654","patch":"@@ -36,6 +36,32 @@\n \n public class MyJPAJSONAnySearchDAO extends AbstractJPAJSONAnySearchDAO {\n \n+    @Override\n+    protected String buildAdminRealmsFilter(\n+            final Set<String> realmKeys,\n+            final SearchSupport svs,\n+            final List<Object> parameters) {\n+\n+        StringBuilder adminRealmsFilter = new StringBuilder(\"u.any_id IN (\").\n+                append(\"SELECT any_id FROM \").append(svs.field().name).\n+                append(\" WHERE realm_id IN (SELECT id AS realm_id FROM Realm\");\n+\n+        boolean firstRealm = true;\n+        for (String realmKey : realmKeys) {\n+            if (firstRealm) {\n+                adminRealmsFilter.append(\" WHERE\");\n+                firstRealm = false;\n+            } else {\n+                adminRealmsFilter.append(\" OR\");\n+            }\n+            adminRealmsFilter.append(\" id=?\").append(setParameter(parameters, realmKey));\n+        }\n+\n+        adminRealmsFilter.append(\"))\");\n+\n+        return adminRealmsFilter.toString();\n+    }\n+\n     @Override\n     protected void processOBS(\n             final SearchSupport svs,"},{"sha":"cbcf2520fe8e695567e27c161e3f78d1a19dd19b","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnySearchDAO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2bff895d5ecdcf2f1beab202b4ee818243faf654/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2bff895d5ecdcf2f1beab202b4ee818243faf654/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java?ref=2bff895d5ecdcf2f1beab202b4ee818243faf654","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.entity.JSONPlainAttr;\n+import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n \n public class PGJPAJSONAnySearchDAO extends AbstractJPAJSONAnySearchDAO {\n \n@@ -156,7 +157,7 @@ private void fillAttrQuery(\n                 String value = cond.getExpression();\n                 if (schema.getType() == AttrSchemaType.Date) {\n                     try {\n-                        value = String.valueOf(DATE_FORMAT.parse(value).getTime());\n+                        value = String.valueOf(FormatUtils.parseDate(value).getTime());\n                     } catch (ParseException e) {\n                         LOG.error(\"Could not parse {} as date\", value, e);\n                     }"},{"sha":"496b609f55cf1101a90a4d793548115f789a0eb7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2bff895d5ecdcf2f1beab202b4ee818243faf654/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2bff895d5ecdcf2f1beab202b4ee818243faf654/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=2bff895d5ecdcf2f1beab202b4ee818243faf654","patch":"@@ -154,10 +154,10 @@ protected Date findLastChange(final String key, final String table) {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public List<A> findByKeys(List<String> keys) {\n+    public List<A> findByKeys(final List<String> keys) {\n         Class<A> entityClass = anyUtils().anyClass();\n-        TypedQuery<A> query = entityManager()\n-                .createQuery(\"SELECT e FROM \" + entityClass.getSimpleName() + \" e WHERE e.id IN (:keys)\", entityClass);\n+        TypedQuery<A> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + entityClass.getSimpleName() + \" e WHERE e.id IN (:keys)\", entityClass);\n         query.setParameter(\"keys\", keys);\n         return query.getResultList();\n     }"},{"sha":"81624a5f22b9ff82f67d4a98da28b18429a60552","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java","status":"modified","additions":8,"deletions":25,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2bff895d5ecdcf2f1beab202b4ee818243faf654/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2bff895d5ecdcf2f1beab202b4ee818243faf654/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java?ref=2bff895d5ecdcf2f1beab202b4ee818243faf654","patch":"@@ -20,11 +20,8 @@\n \n import java.lang.annotation.Annotation;\n import java.lang.reflect.Field;\n-import java.util.ArrayList;\n import java.util.Optional;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.validation.ValidationException;\n@@ -299,32 +296,18 @@ protected String check(final MemberCond cond) {\n         return memberKey;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     protected <T extends Any<?>> List<T> buildResult(final List<Object> raw, final AnyTypeKind kind) {\n-        List<String> orderedAnyKeys = extractSortedAnyKeys(raw);\n-        return constructSortedAnyTOsBySortedKeys(findAnyTOs(kind, orderedAnyKeys), orderedAnyKeys, kind);\n-    }\n+        List<String> keys = raw.stream().\n+                map(key -> key instanceof Object[] ? (String) ((Object[]) key)[0] : ((String) key)).\n+                collect(Collectors.toList());\n \n-    private List<String> extractSortedAnyKeys(List<Object> raw) {\n-        return raw.stream().map(anyKey -> anyKey instanceof Object[]\n-                ? (String) ((Object[]) anyKey)[0]\n-                : ((String) anyKey))\n-                .collect(Collectors.toList());\n-    }\n+        List<Any<?>> anys = anyUtilsFactory.getInstance(kind).dao().findByKeys(keys);\n \n-    @SuppressWarnings(\"unchecked\")\n-    private <T extends Any<?>> List<T> findAnyTOs(AnyTypeKind kind, List<String> orderedAnyKeys) {\n-        return new ArrayList<>((List<T>) anyUtilsFactory.getInstance(kind).dao().findByKeys(orderedAnyKeys));\n-    }\n+        keys.stream().filter(key -> !anys.stream().anyMatch(any -> key.equals(any.getKey()))).\n+                forEach(key -> LOG.error(\"Could not find {} with id {}, even if returned by native query\", kind, key));\n \n-    private <T extends Any<?>> List<T> constructSortedAnyTOsBySortedKeys(List<T> anyTOs,\n-            List<String> sortedAnyKeys, AnyTypeKind kind) {\n-        Map<String, T> anyMap = anyTOs.stream().collect(Collectors.toMap(T::getKey, anyTO -> anyTO));\n-        return sortedAnyKeys.stream().map(key -> {\n-            if (anyMap.get(key) == null) {\n-                LOG.error(\"Could not find {} with id {}, even if returned by native query\", kind, key);\n-            }\n-            return anyMap.get(key);\n-        }).filter(Objects::nonNull).collect(Collectors.toList());\n+        return (List<T>) anys;\n     }\n \n     @Override"},{"sha":"dfe23c8bcea111aefb05484e01fd6a9db3767cc5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":13,"deletions":16,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2bff895d5ecdcf2f1beab202b4ee818243faf654/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2bff895d5ecdcf2f1beab202b4ee818243faf654/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=2bff895d5ecdcf2f1beab202b4ee818243faf654","patch":"@@ -64,6 +64,18 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {\n \n     protected static final String EMPTY_QUERY = \"SELECT any_id FROM user_search WHERE 1=2\";\n \n+    protected String buildAdminRealmsFilter(\n+            final Set<String> realmKeys,\n+            final SearchSupport svs,\n+            final List<Object> parameters) {\n+\n+        List<String> realmKeyArgs = realmKeys.stream().\n+                map(realmKey -> \"?\" + setParameter(parameters, realmKey)).\n+                collect(Collectors.toList());\n+        return \"u.any_id IN (SELECT any_id FROM \" + svs.field().name\n+                + \" WHERE realm_id IN (\" + StringUtils.join(realmKeyArgs, \", \") + \"))\";\n+    }\n+\n     private Pair<String, Set<String>> getAdminRealmsFilter(\n             final Set<String> adminRealms,\n             final SearchSupport svs,\n@@ -96,22 +108,7 @@ private Pair<String, Set<String>> getAdminRealmsFilter(\n                     map(Entity::getKey).collect(Collectors.toSet()));\n         }\n \n-        List<String> realmKeyArgs = getRealmKeySqlArgsAndFillParameters(parameters, realmKeys);\n-\n-        StringBuilder adminRealmFilter = new StringBuilder(\"u.any_id IN (\").\n-                append(\"SELECT any_id FROM \").append(svs.field().name)\n-                .append(\" WHERE realm_id IN (\")\n-                .append(StringUtils.join(realmKeyArgs, \", \"))\n-                .append(\"))\");\n-        return Pair.of(adminRealmFilter.toString(), dynRealmKeys);\n-    }\n-\n-    private List<String> getRealmKeySqlArgsAndFillParameters(List<Object> parameters, Set<String> realmKeys) {\n-        List<String> realmKeyArgs = new ArrayList<>();\n-        for (String realmKey : realmKeys) {\n-            realmKeyArgs.add(\"?\" + setParameter(parameters, realmKey));\n-        }\n-        return realmKeyArgs;\n+        return Pair.of(buildAdminRealmsFilter(realmKeys, svs, parameters), dynRealmKeys);\n     }\n \n     SearchSupport buildSearchSupport(final AnyTypeKind kind) {"}]}