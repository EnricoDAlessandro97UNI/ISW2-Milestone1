{"sha":"28b3368aae75866178ef935acb54de5087a90c69","node_id":"C_kwDOJfYA1toAKDI4YjMzNjhhYWU3NTg2NjE3OGVmOTM1YWNiNTRkZTUwODdhOTBjNjk","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-11-21T14:20:17Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-11-21T14:20:17Z"},"message":"Fixing openapi.json content from javadocs at first access","tree":{"sha":"e406e1e0d995024bd9eab7219f7715b157d21ef8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e406e1e0d995024bd9eab7219f7715b157d21ef8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/28b3368aae75866178ef935acb54de5087a90c69","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/28b3368aae75866178ef935acb54de5087a90c69","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/28b3368aae75866178ef935acb54de5087a90c69","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/28b3368aae75866178ef935acb54de5087a90c69/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"1bbbbc29b9eba6f7619828aecae4a825a169a064","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1bbbbc29b9eba6f7619828aecae4a825a169a064","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1bbbbc29b9eba6f7619828aecae4a825a169a064"}],"stats":{"total":104,"additions":48,"deletions":56},"files":[{"sha":"51755161c82553b08119fe3c5bd3dc1da56c57f0","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/IdRepoRESTCXFContext.java","status":"modified","additions":35,"deletions":5,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/28b3368aae75866178ef935acb54de5087a90c69/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/28b3368aae75866178ef935acb54de5087a90c69/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java?ref=28b3368aae75866178ef935acb54de5087a90c69","patch":"@@ -22,6 +22,7 @@\n import com.fasterxml.jackson.jaxrs.xml.JacksonXMLProvider;\n import com.fasterxml.jackson.jaxrs.yaml.JacksonYAMLProvider;\n import io.swagger.v3.oas.models.security.SecurityScheme;\n+import java.net.URL;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -35,6 +36,8 @@\n import org.apache.cxf.jaxrs.ext.search.SearchContextImpl;\n import org.apache.cxf.jaxrs.ext.search.SearchContextProvider;\n import org.apache.cxf.jaxrs.ext.search.SearchUtils;\n+import org.apache.cxf.jaxrs.model.doc.JavaDocProvider;\n+import org.apache.cxf.jaxrs.openapi.OpenApiCustomizer;\n import org.apache.cxf.jaxrs.openapi.OpenApiFeature;\n import org.apache.cxf.jaxrs.spring.JAXRSServerFactoryBeanDefinitionParser.SpringJAXRSServerFactoryBean;\n import org.apache.cxf.jaxrs.validation.JAXRSBeanValidationInInterceptor;\n@@ -130,6 +133,8 @@\n import org.apache.syncope.core.rest.cxf.service.TaskServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.UserSelfServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.UserServiceImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n@@ -146,6 +151,8 @@\n @Configuration(proxyBeanMethods = false)\n public class IdRepoRESTCXFContext {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(IdRepoRESTCXFContext.class);\n+\n     @Bean\n     public ThreadPoolTaskExecutor batchExecutor(final RESTProperties props) {\n         ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n@@ -243,11 +250,38 @@ public AddETagFilter addETagFilter() {\n         return new AddETagFilter();\n     }\n \n+    @ConditionalOnMissingBean(name = { \"openApiCustomizer\", \"syncopeOpenApiCustomizer\" })\n+    @Bean\n+    public OpenApiCustomizer openApiCustomizer(final DomainHolder domainHolder, final Environment env) {\n+        JavaDocProvider javaDocProvider = null;\n+\n+        URL[] javaDocURLs = JavaDocUtils.getJavaDocURLs();\n+        if (javaDocURLs == null) {\n+            String[] javaDocPaths = JavaDocUtils.getJavaDocPaths(env);\n+            if (javaDocPaths != null) {\n+                try {\n+                    javaDocProvider = new JavaDocProvider(javaDocPaths);\n+                } catch (Exception e) {\n+                    LOG.error(\"Could not set javadoc paths from {}\", List.of(javaDocPaths), e);\n+                }\n+            }\n+        } else {\n+            javaDocProvider = new JavaDocProvider(javaDocURLs);\n+        }\n+\n+        SyncopeOpenApiCustomizer openApiCustomizer = new SyncopeOpenApiCustomizer(domainHolder);\n+        openApiCustomizer.setDynamicBasePath(false);\n+        openApiCustomizer.setReplaceTags(false);\n+        openApiCustomizer.setJavadocProvider(javaDocProvider);\n+        return openApiCustomizer;\n+    }\n+\n     @ConditionalOnMissingBean\n     @Bean\n-    public OpenApiFeature openapiFeature(final ApplicationContext ctx) {\n+    public OpenApiFeature openapiFeature(final OpenApiCustomizer openApiCustomizer, final ApplicationContext ctx) {\n         String version = ctx.getEnvironment().getProperty(\"version\");\n         OpenApiFeature openapiFeature = new OpenApiFeature();\n+        openapiFeature.setUseContextBasedConfig(true);\n         openapiFeature.setTitle(\"Apache Syncope\");\n         openapiFeature.setVersion(version);\n         openapiFeature.setDescription(\"Apache Syncope \" + version);\n@@ -256,10 +290,6 @@ public OpenApiFeature openapiFeature(final ApplicationContext ctx) {\n         openapiFeature.setContactUrl(\"https://syncope.apache.org\");\n         openapiFeature.setScan(false);\n         openapiFeature.setResourcePackages(Set.of(\"org.apache.syncope.common.rest.api.service\"));\n-\n-        SyncopeOpenApiCustomizer openApiCustomizer = new SyncopeOpenApiCustomizer(ctx.getEnvironment());\n-        openApiCustomizer.setDynamicBasePath(false);\n-        openApiCustomizer.setReplaceTags(false);\n         openapiFeature.setCustomizer(openApiCustomizer);\n \n         Map<String, SecurityScheme> securityDefinitions = new HashMap<>();"},{"sha":"0d515e39afeab0fd7ad5e613512eb58611f496f2","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeOpenApiCustomizer.java","status":"modified","additions":7,"deletions":50,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/28b3368aae75866178ef935acb54de5087a90c69/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeOpenApiCustomizer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/28b3368aae75866178ef935acb54de5087a90c69/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeOpenApiCustomizer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeOpenApiCustomizer.java?ref=28b3368aae75866178ef935acb54de5087a90c69","patch":"@@ -33,8 +33,6 @@\n import io.swagger.v3.oas.models.responses.ApiResponse;\n import io.swagger.v3.oas.models.responses.ApiResponses;\n import io.swagger.v3.oas.models.servers.Server;\n-import java.net.URL;\n-import java.util.ArrayList;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n@@ -45,68 +43,27 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n import org.apache.cxf.jaxrs.model.OperationResourceInfo;\n-import org.apache.cxf.jaxrs.model.doc.JavaDocProvider;\n import org.apache.cxf.jaxrs.openapi.OpenApiCustomizer;\n import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ErrorTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.core.persistence.api.DomainHolder;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.core.env.Environment;\n \n public class SyncopeOpenApiCustomizer extends OpenApiCustomizer {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeOpenApiCustomizer.class);\n+    private final DomainHolder domainHolder;\n \n-    private final Environment env;\n-\n-    private List<String> domains;\n-\n-    private boolean inited = false;\n-\n-    public SyncopeOpenApiCustomizer(final Environment env) {\n-        this.env = env;\n-    }\n-\n-    private void init() {\n-        synchronized (this) {\n-            if (!inited) {\n-                JavaDocProvider javaDocProvider = null;\n-\n-                URL[] javaDocURLs = JavaDocUtils.getJavaDocURLs();\n-                if (javaDocURLs == null) {\n-                    String[] javaDocPaths = JavaDocUtils.getJavaDocPaths(env);\n-                    if (javaDocPaths != null) {\n-                        try {\n-                            javaDocProvider = new JavaDocProvider(javaDocPaths);\n-                        } catch (Exception e) {\n-                            LOG.error(\"Could not set javadoc paths from {}\", List.of(javaDocPaths), e);\n-                        }\n-                    }\n-                } else {\n-                    javaDocProvider = new JavaDocProvider(javaDocURLs);\n-                }\n-                super.setJavadocProvider(javaDocProvider);\n-\n-                domains = new ArrayList<>(ApplicationContextProvider.getApplicationContext().\n-                        getBean(DomainHolder.class).getDomains().keySet());\n-\n-                inited = true;\n-            }\n-        }\n+    public SyncopeOpenApiCustomizer(final DomainHolder domainHolder) {\n+        this.domainHolder = domainHolder;\n     }\n \n     @Override\n     public OpenAPIConfiguration customize(final OpenAPIConfiguration configuration) {\n-        init();\n         super.customize(configuration);\n \n-        MessageContext ctx = JAXRSUtils.createContextValue(\n-                JAXRSUtils.getCurrentMessage(), null, MessageContext.class);\n+        MessageContext ctx = JAXRSUtils.createContextValue(JAXRSUtils.getCurrentMessage(), null, MessageContext.class);\n \n         String url = StringUtils.substringBeforeLast(ctx.getUriInfo().getRequestUri().getRawPath(), \"/\");\n         configuration.getOpenAPI().setServers(List.of(new Server().url(url)));\n@@ -116,8 +73,8 @@ public OpenAPIConfiguration customize(final OpenAPIConfiguration configuration)\n \n     @Override\n     protected void addParameters(final List<Parameter> parameters) {\n-        Optional<Parameter> domainHeaderParameter = parameters.stream().filter(parameter\n-                -> parameter instanceof HeaderParameter && RESTHeaders.DOMAIN.equals(parameter.getName())).findFirst();\n+        Optional<Parameter> domainHeaderParameter = parameters.stream().\n+                filter(p -> p instanceof HeaderParameter && RESTHeaders.DOMAIN.equals(p.getName())).findFirst();\n         if (domainHeaderParameter.isEmpty()) {\n             HeaderParameter parameter = new HeaderParameter();\n             parameter.setName(RESTHeaders.DOMAIN);\n@@ -130,7 +87,7 @@ protected void addParameters(final List<Parameter> parameters) {\n             Schema<String> schema = new Schema<>();\n             schema.setDescription(\"Domains are built to facilitate multitenancy.\");\n             schema.setExternalDocs(extDoc);\n-            schema.setEnum(domains);\n+            schema.setEnum(domainHolder.getDomains().keySet().stream().sorted().collect(Collectors.toList()));\n             schema.setDefault(SyncopeConstants.MASTER_DOMAIN);\n             parameter.setSchema(schema);\n "},{"sha":"79a3818aaaf18dfdf899f80312d10b1961d4f6aa","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAJobStatusDAO.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/28b3368aae75866178ef935acb54de5087a90c69/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJobStatusDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/28b3368aae75866178ef935acb54de5087a90c69/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJobStatusDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJobStatusDAO.java?ref=28b3368aae75866178ef935acb54de5087a90c69","patch":"@@ -44,6 +44,5 @@ public void delete(final String key) {\n         if (jobStatus != null) {\n             entityManager().remove(jobStatus);\n         }\n-\n     }\n }"},{"sha":"ed39b658ccb7a3e0841e619eb45e9872afd5409f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/JobStatusUpdater.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/28b3368aae75866178ef935acb54de5087a90c69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobStatusUpdater.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/28b3368aae75866178ef935acb54de5087a90c69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobStatusUpdater.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobStatusUpdater.java?ref=28b3368aae75866178ef935acb54de5087a90c69","patch":"@@ -22,11 +22,15 @@\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.JobStatus;\n import org.apache.syncope.core.provisioning.api.event.JobStatusEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.context.event.EventListener;\n import org.springframework.scheduling.annotation.Async;\n \n public class JobStatusUpdater {\n \n+    protected static final Logger LOG = LoggerFactory.getLogger(JobStatusUpdater.class);\n+\n     protected final JobStatusDAO jobStatusDAO;\n \n     protected final EntityFactory entityFactory;\n@@ -50,8 +54,10 @@ public JobStatusUpdater(final JobStatusDAO jobStatusDAO, final EntityFactory ent\n     @EventListener\n     public void update(final JobStatusEvent event) {\n         if (event.getJobStatus() == null) {\n+            LOG.debug(\"Deleting status for job '{}'\", event.getJobRefDesc());\n             jobStatusDAO.delete(event.getJobRefDesc());\n         } else {\n+            LOG.debug(\"Updating job '{}' with status '{}'\", event.getJobRefDesc(), event.getJobStatus());\n             JobStatus jobStatus = entityFactory.newEntity(JobStatus.class);\n             jobStatus.setKey(event.getJobRefDesc());\n             jobStatus.setStatus(event.getJobStatus());"}]}