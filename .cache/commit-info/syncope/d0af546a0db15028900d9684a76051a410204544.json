{"sha":"d0af546a0db15028900d9684a76051a410204544","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQwYWY1NDZhMGRiMTUwMjg5MDBkOTY4NGE3NjA1MWE0MTAyMDQ1NDQ=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-10-07T09:07:07Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-10-07T09:07:07Z"},"message":"Merge from 0_1_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246571 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7816f21f4e6ffceb9b131a2ad38471fcd8c2314c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7816f21f4e6ffceb9b131a2ad38471fcd8c2314c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d0af546a0db15028900d9684a76051a410204544","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d0af546a0db15028900d9684a76051a410204544","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d0af546a0db15028900d9684a76051a410204544","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d0af546a0db15028900d9684a76051a410204544/comments","author":null,"committer":null,"parents":[{"sha":"5e1b7647150dcc94739dae4d538a450278d332a8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5e1b7647150dcc94739dae4d538a450278d332a8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5e1b7647150dcc94739dae4d538a450278d332a8"}],"stats":{"total":670,"additions":344,"deletions":326},"files":[{"sha":"388a0d2b24804fcf23f7c64464db1cbab1e67b5f","filename":"client/src/main/java/org/syncope/client/search/NodeCond.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d0af546a0db15028900d9684a76051a410204544/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FNodeCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d0af546a0db15028900d9684a76051a410204544/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FNodeCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FNodeCond.java?ref=d0af546a0db15028900d9684a76051a410204544","patch":"@@ -20,7 +20,7 @@ public class NodeCond extends AbstractBaseBean {\n \n     public enum Type {\n \n-        LEAF, AND, OR, NOT\n+        LEAF, NOT_LEAF, AND, OR\n     }\n     private Type type;\n     private AttributeCond attributeCond;\n@@ -46,6 +46,18 @@ public static NodeCond getLeafCond(final MembershipCond membershipCond) {\n         return nodeCond;\n     }\n \n+    public static NodeCond getNotLeafCond(final AttributeCond attributeCond) {\n+        NodeCond nodeCond = getLeafCond(attributeCond);\n+        nodeCond.type = Type.NOT_LEAF;\n+        return nodeCond;\n+    }\n+\n+    public static NodeCond getNotLeafCond(final MembershipCond membershipCond) {\n+        NodeCond nodeCond = getLeafCond(membershipCond);\n+        nodeCond.type = Type.NOT_LEAF;\n+        return nodeCond;\n+    }\n+\n     public static NodeCond getAndCond(final NodeCond leftCond,\n             final NodeCond rightCond) {\n \n@@ -70,15 +82,6 @@ public static NodeCond getOrCond(final NodeCond leftCond,\n         return nodeCond;\n     }\n \n-    public static NodeCond getNotCond(final NodeCond leftCond) {\n-        NodeCond nodeCond = new NodeCond();\n-\n-        nodeCond.type = Type.NOT;\n-        nodeCond.leftNodeCond = nodeCond;\n-\n-        return nodeCond;\n-    }\n-\n     public AttributeCond getAttributeCond() {\n         return attributeCond;\n     }\n@@ -126,6 +129,7 @@ public final boolean checkValidity() {\n \n         switch (type) {\n             case LEAF:\n+            case NOT_LEAF:\n                 return (attributeCond != null && membershipCond == null\n                         && attributeCond.checkValidity())\n                         || (attributeCond == null && membershipCond != null\n@@ -136,12 +140,8 @@ public final boolean checkValidity() {\n                         ? false\n                         : leftNodeCond.checkValidity()\n                         && rightNodeCond.checkValidity();\n-            case NOT:\n-                return leftNodeCond == null\n-                        ? false\n-                        : leftNodeCond.checkValidity();\n+            default:\n+                return false;\n         }\n-\n-        return false;\n     }\n }"},{"sha":"b8f26e2dc2936620c459fda1eef1835f886103f6","filename":"core/src/main/java/org/syncope/core/persistence/dao/ResourceDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d0af546a0db15028900d9684a76051a410204544/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d0af546a0db15028900d9684a76051a410204544/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceDAO.java?ref=d0af546a0db15028900d9684a76051a410204544","patch":"@@ -27,8 +27,7 @@ public interface ResourceDAO extends DAO {\n \n     TargetResource save(TargetResource resource);\n \n-    List<SchemaMapping> getMappings(final String schemaName,\n-            final SchemaType schemaType);\n+    List<SchemaMapping> getMappings(String schemaName, SchemaType schemaType);\n \n     void deleteMappings(String schemaName, SchemaType schemaType);\n "},{"sha":"261c694c3877c716eb5c3b8776589f34b930fd8e","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SearchUtils.java","status":"removed","additions":0,"deletions":244,"changes":244,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e1b7647150dcc94739dae4d538a450278d332a8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e1b7647150dcc94739dae4d538a450278d332a8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSearchUtils.java?ref=5e1b7647150dcc94739dae4d538a450278d332a8","patch":"@@ -1,244 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.persistence.dao.impl;\n-\n-import org.hibernate.Criteria;\n-import org.hibernate.Session;\n-import org.hibernate.criterion.Criterion;\n-import org.hibernate.criterion.Restrictions;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-import org.syncope.client.search.AttributeCond;\n-import org.syncope.client.search.NodeCond;\n-import org.syncope.core.persistence.beans.AbstractAttributeValue;\n-import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.beans.user.UserAttributeValue;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n-import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.validation.ValidationException;\n-\n-/**\n- * Utility class for searching the db.\n- */\n-@Component\n-public class SearchUtils {\n-\n-    /**\n-     * Logger.\n-     */\n-    private static final Logger LOG = LoggerFactory.getLogger(\n-            SearchUtils.class);\n-    @Autowired\n-    private SchemaDAO schemaDAO;\n-\n-    private Criterion getCriterion(final AttributeCond.Type type,\n-            final AbstractAttributeValue example) {\n-\n-        Criterion result = null;\n-        switch (type) {\n-            case EQ:\n-                result = Restrictions.disjunction().\n-                        add(Restrictions.eq(\"av.stringValue\",\n-                        example.getStringValue())).\n-                        add(Restrictions.eq(\"av.booleanValue\",\n-                        example.getBooleanValue())).\n-                        add(Restrictions.eq(\"av.longValue\",\n-                        example.getLongValue())).\n-                        add(Restrictions.eq(\"av.doubleValue\",\n-                        example.getDoubleValue())).\n-                        add(Restrictions.eq(\"av.dateValue\",\n-                        example.getDateValue()));\n-                break;\n-\n-            case GE:\n-                result = Restrictions.disjunction().\n-                        add(Restrictions.ge(\"av.stringValue\",\n-                        example.getStringValue())).\n-                        add(Restrictions.ge(\"av.booleanValue\",\n-                        example.getBooleanValue())).\n-                        add(Restrictions.ge(\"av.longValue\",\n-                        example.getLongValue())).\n-                        add(Restrictions.ge(\"av.doubleValue\",\n-                        example.getDoubleValue())).\n-                        add(Restrictions.ge(\"av.dateValue\",\n-                        example.getDateValue()));\n-                break;\n-\n-            case GT:\n-                result = Restrictions.disjunction().\n-                        add(Restrictions.gt(\"av.stringValue\",\n-                        example.getStringValue())).\n-                        add(Restrictions.gt(\"av.booleanValue\",\n-                        example.getBooleanValue())).\n-                        add(Restrictions.gt(\"av.longValue\",\n-                        example.getLongValue())).\n-                        add(Restrictions.gt(\"av.doubleValue\",\n-                        example.getDoubleValue())).\n-                        add(Restrictions.gt(\"av.dateValue\",\n-                        example.getDateValue()));\n-                break;\n-\n-            case ISNOTNULL:\n-                result = Restrictions.disjunction().\n-                        add(Restrictions.isNotNull(\"av.stringValue\")).\n-                        add(Restrictions.isNotNull(\"av.booleanValue\")).\n-                        add(Restrictions.isNotNull(\"av.longValue\")).\n-                        add(Restrictions.isNotNull(\"av.doubleValue\")).\n-                        add(Restrictions.isNotNull(\"av.dateValue\"));\n-                break;\n-\n-            case LE:\n-                result = Restrictions.disjunction().\n-                        add(Restrictions.le(\"av.stringValue\",\n-                        example.getStringValue())).\n-                        add(Restrictions.le(\"av.booleanValue\",\n-                        example.getBooleanValue())).\n-                        add(Restrictions.le(\"av.longValue\",\n-                        example.getLongValue())).\n-                        add(Restrictions.le(\"av.doubleValue\",\n-                        example.getDoubleValue())).\n-                        add(Restrictions.le(\"av.dateValue\",\n-                        example.getDateValue()));\n-                break;\n-\n-            case LIKE:\n-                result = Restrictions.disjunction().\n-                        add(Restrictions.like(\"av.stringValue\",\n-                        example.getStringValue())).\n-                        add(Restrictions.like(\"av.booleanValue\",\n-                        example.getBooleanValue())).\n-                        add(Restrictions.like(\"av.longValue\",\n-                        example.getLongValue())).\n-                        add(Restrictions.like(\"av.doubleValue\",\n-                        example.getDoubleValue())).\n-                        add(Restrictions.like(\"av.dateValue\",\n-                        example.getDateValue()));\n-                break;\n-\n-            case LT:\n-                result = Restrictions.disjunction().\n-                        add(Restrictions.lt(\"av.stringValue\",\n-                        example.getStringValue())).\n-                        add(Restrictions.lt(\"av.booleanValue\",\n-                        example.getBooleanValue())).\n-                        add(Restrictions.lt(\"av.longValue\",\n-                        example.getLongValue())).\n-                        add(Restrictions.lt(\"av.doubleValue\",\n-                        example.getDoubleValue())).\n-                        add(Restrictions.lt(\"av.dateValue\",\n-                        example.getDateValue()));\n-                break;\n-\n-            default:\n-        }\n-        return result;\n-    }\n-\n-    private Criterion getCriterion(final NodeCond nodeCond) {\n-\n-        Criterion result = null;\n-\n-        switch (nodeCond.getType()) {\n-            case LEAF:\n-                if (nodeCond.getMembershipCond() != null) {\n-                    if (nodeCond.getMembershipCond().getRoleId() != null) {\n-                        result = Restrictions.eq(\"r.id\",\n-                                nodeCond.getMembershipCond().getRoleId());\n-                    }\n-                    if (nodeCond.getMembershipCond().getRoleName() != null) {\n-                        result = Restrictions.eq(\"r.name\",\n-                                nodeCond.getMembershipCond().getRoleName());\n-                    }\n-                } else if (nodeCond.getAttributeCond() != null) {\n-                    UserSchema userSchema = schemaDAO.find(\n-                            nodeCond.getAttributeCond().getSchema(),\n-                            UserSchema.class);\n-                    if (userSchema == null) {\n-                        LOG.warn(\"Ignoring invalid schema '\"\n-                                + nodeCond.getAttributeCond().getSchema()\n-                                + \"'\");\n-                    } else {\n-                        if (nodeCond.getAttributeCond().getType()\n-                                == AttributeCond.Type.ISNULL) {\n-\n-                            result = Restrictions.and(\n-                                    Restrictions.eq(\"a.schema.name\",\n-                                    nodeCond.getAttributeCond().getSchema()),\n-                                    Restrictions.isEmpty(\"a.values\"));\n-                        } else {\n-                            try {\n-                                UserAttributeValue example =\n-                                        userSchema.getValidator().\n-                                        getValue(nodeCond.getAttributeCond().\n-                                        getExpression(),\n-                                        new UserAttributeValue());\n-                                result = Restrictions.and(\n-                                        Restrictions.eq(\"a.schema.name\",\n-                                        nodeCond.getAttributeCond().\n-                                        getSchema()),\n-                                        getCriterion(\n-                                        nodeCond.getAttributeCond().getType(),\n-                                        example));\n-                            } catch (ValidationException e) {\n-                                LOG.error(\"Could not validate expression '\"\n-                                        + nodeCond.getAttributeCond().\n-                                        getExpression() + \"'\", e);\n-                            }\n-                        }\n-                    }\n-\n-                }\n-                break;\n-\n-            case AND:\n-                result = Restrictions.and(\n-                        getCriterion(nodeCond.getLeftNodeCond()),\n-                        getCriterion(nodeCond.getRightNodeCond()));\n-                break;\n-\n-            case OR:\n-                result = Restrictions.or(\n-                        getCriterion(nodeCond.getLeftNodeCond()),\n-                        getCriterion(nodeCond.getRightNodeCond()));\n-                break;\n-\n-            case NOT:\n-                result = Restrictions.not(\n-                        getCriterion(nodeCond.getLeftNodeCond()));\n-                break;\n-\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    public Criteria buildUserCriteria(final Session hibernateSess,\n-            final NodeCond searchCondition) {\n-\n-        Criteria userCriteria = hibernateSess.createCriteria(SyncopeUser.class).\n-                createAlias(\"memberships\", \"m\").\n-                createAlias(\"m.syncopeRole\", \"r\").\n-                createAlias(\"attributes\", \"a\").\n-                createAlias(\"a.values\", \"av\");\n-\n-        userCriteria.add(getCriterion(searchCondition));\n-        userCriteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);\n-\n-        return userCriteria;\n-    }\n-}"},{"sha":"7dcfe7ac1e6a094f92ad83337fdd3bc756fd81df","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":241,"deletions":24,"changes":265,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d0af546a0db15028900d9684a76051a410204544/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d0af546a0db15028900d9684a76051a410204544/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=d0af546a0db15028900d9684a76051a410204544","patch":"@@ -20,21 +20,28 @@\n import javax.persistence.Query;\n import org.hibernate.Criteria;\n import org.hibernate.Session;\n+import org.hibernate.criterion.Criterion;\n+import org.hibernate.criterion.Restrictions;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.client.search.AttributeCond;\n import org.syncope.client.search.NodeCond;\n+import org.syncope.core.persistence.beans.AbstractAttributeValue;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UserAttributeValue;\n+import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.persistence.validation.ValidationException;\n \n @Repository\n public class SyncopeUserDAOImpl extends AbstractDAOImpl\n         implements SyncopeUserDAO {\n \n     @Autowired\n-    private SearchUtils searchUtils;\n+    private SchemaDAO schemaDAO;\n \n     @Override\n     @Transactional(readOnly = true)\n@@ -94,6 +101,30 @@ public final List<SyncopeUser> findAll() {\n         return query.getResultList();\n     }\n \n+    @Override\n+    public SyncopeUser save(SyncopeUser syncopeUser) {\n+        return entityManager.merge(syncopeUser);\n+    }\n+\n+    @Override\n+    public void delete(Long id) {\n+        SyncopeUser user = find(id);\n+        if (user == null) {\n+            return;\n+        }\n+\n+        for (Membership membership : user.getMemberships()) {\n+            membership.setSyncopeUser(null);\n+            membership.getSyncopeRole().removeMembership(membership);\n+            membership.setSyncopeRole(null);\n+\n+            entityManager.remove(membership);\n+        }\n+        user.setMemberships(Collections.EMPTY_LIST);\n+\n+        entityManager.remove(user);\n+    }\n+\n     @Override\n     @Transactional(readOnly = true)\n     public final List<SyncopeUser> search(final NodeCond searchCondition) {\n@@ -105,41 +136,227 @@ public final List<SyncopeUser> search(final NodeCond searchCondition) {\n \n         List<SyncopeUser> result = Collections.EMPTY_LIST;\n         try {\n-            Criteria userCriteria = searchUtils.buildUserCriteria(\n-                    hibernateSess, searchCondition);\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Criteria to be performed:\\n\" + userCriteria);\n-            }\n-\n-            result = userCriteria.list();\n+            result = doSearch(searchCondition);\n         } catch (Throwable t) {\n             LOG.error(\"While searching users\", t);\n         }\n \n         return result;\n     }\n \n-    @Override\n-    public final SyncopeUser save(final SyncopeUser syncopeUser) {\n-        return entityManager.merge(syncopeUser);\n-    }\n+    @Transactional(readOnly = true)\n+    private List<SyncopeUser> doSearch(final NodeCond nodeCond) {\n+        List<SyncopeUser> result = null;\n+        List<SyncopeUser> rightResult = null;\n \n-    @Override\n-    public final void delete(final Long id) {\n-        SyncopeUser user = find(id);\n-        if (user == null) {\n-            return;\n+        switch (nodeCond.getType()) {\n+            case LEAF:\n+            case NOT_LEAF:\n+                Criteria criteria = getBaseCriteria().\n+                        add(getCriterion(nodeCond));\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Criteria to be performed:\\n\" + criteria);\n+                }\n+\n+                result = criteria.list();\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Criteria result:\\n\" + result);\n+                }\n+                break;\n+\n+            case AND:\n+                result = doSearch(nodeCond.getLeftNodeCond());\n+                rightResult = doSearch(nodeCond.getRightNodeCond());\n+                result.retainAll(rightResult);\n+                break;\n+\n+            case OR:\n+                result = doSearch(nodeCond.getLeftNodeCond());\n+                rightResult = doSearch(nodeCond.getRightNodeCond());\n+                result.addAll(rightResult);\n+                break;\n+\n+            default:\n         }\n \n-        for (Membership membership : user.getMemberships()) {\n-            membership.setSyncopeUser(null);\n-            membership.getSyncopeRole().removeMembership(membership);\n-            membership.setSyncopeRole(null);\n+        return result;\n+    }\n \n-            entityManager.remove(membership);\n+    @Transactional(readOnly = true)\n+    private Criteria getBaseCriteria() {\n+        Session hibernateSess = (Session) entityManager.getDelegate();\n+        Criteria baseCriteria = hibernateSess.createCriteria(SyncopeUser.class).\n+                createAlias(\"memberships\", \"m\").\n+                createAlias(\"m.syncopeRole\", \"r\").\n+                createAlias(\"attributes\", \"a\").\n+                createAlias(\"a.values\", \"av\");\n+\n+        baseCriteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);\n+\n+        return baseCriteria;\n+    }\n+\n+    @Transactional(readOnly = true)\n+    private Criterion getCriterion(final NodeCond leafCond) {\n+        Criterion criterion = null;\n+\n+        switch (leafCond.getType()) {\n+            case LEAF:\n+                if (leafCond.getMembershipCond() != null) {\n+                    if (leafCond.getMembershipCond().getRoleId() != null) {\n+                        criterion = Restrictions.eq(\"r.id\",\n+                                leafCond.getMembershipCond().getRoleId());\n+                    }\n+                    if (leafCond.getMembershipCond().getRoleName() != null) {\n+                        criterion = Restrictions.eq(\"r.name\",\n+                                leafCond.getMembershipCond().getRoleName());\n+                    }\n+                } else if (leafCond.getAttributeCond() != null) {\n+                    UserSchema userSchema = schemaDAO.find(\n+                            leafCond.getAttributeCond().getSchema(),\n+                            UserSchema.class);\n+                    if (userSchema == null) {\n+                        LOG.warn(\"Ignoring invalid schema '\"\n+                                + leafCond.getAttributeCond().getSchema()\n+                                + \"'\");\n+                    } else {\n+                        if (leafCond.getAttributeCond().getType()\n+                                == AttributeCond.Type.ISNULL) {\n+\n+                            criterion = Restrictions.and(\n+                                    Restrictions.eq(\"a.schema.name\",\n+                                    leafCond.getAttributeCond().getSchema()),\n+                                    Restrictions.isEmpty(\"a.values\"));\n+                        } else {\n+                            try {\n+                                UserAttributeValue example =\n+                                        userSchema.getValidator().\n+                                        getValue(leafCond.getAttributeCond().\n+                                        getExpression(),\n+                                        new UserAttributeValue());\n+                                criterion = Restrictions.and(\n+                                        Restrictions.eq(\"a.schema.name\",\n+                                        leafCond.getAttributeCond().\n+                                        getSchema()),\n+                                        getCriterion(\n+                                        leafCond.getAttributeCond().getType(),\n+                                        example));\n+                            } catch (ValidationException e) {\n+                                LOG.error(\"Could not validate expression '\"\n+                                        + leafCond.getAttributeCond().\n+                                        getExpression() + \"'\", e);\n+                            }\n+                        }\n+                    }\n+\n+                }\n+\n+\n+                break;\n+\n+            case NOT_LEAF:\n+                leafCond.setType(NodeCond.Type.LEAF);\n+                criterion = Restrictions.not(getCriterion(leafCond));\n+                break;\n         }\n-        user.setMemberships(Collections.EMPTY_LIST);\n \n-        entityManager.remove(user);\n+        return criterion;\n+    }\n+\n+    @Transactional(readOnly = true)\n+    private Criterion getCriterion(final AttributeCond.Type type,\n+            final AbstractAttributeValue example) {\n+\n+        Criterion result = null;\n+        switch (type) {\n+            case EQ:\n+                result = Restrictions.disjunction().\n+                        add(Restrictions.eq(\"av.stringValue\",\n+                        example.getStringValue())).\n+                        add(Restrictions.eq(\"av.booleanValue\",\n+                        example.getBooleanValue())).\n+                        add(Restrictions.eq(\"av.longValue\",\n+                        example.getLongValue())).\n+                        add(Restrictions.eq(\"av.doubleValue\",\n+                        example.getDoubleValue())).\n+                        add(Restrictions.eq(\"av.dateValue\",\n+                        example.getDateValue()));\n+                break;\n+\n+            case GE:\n+                result = Restrictions.disjunction().\n+                        add(Restrictions.ge(\"av.stringValue\",\n+                        example.getStringValue())).\n+                        add(Restrictions.ge(\"av.booleanValue\",\n+                        example.getBooleanValue())).\n+                        add(Restrictions.ge(\"av.longValue\",\n+                        example.getLongValue())).\n+                        add(Restrictions.ge(\"av.doubleValue\",\n+                        example.getDoubleValue())).\n+                        add(Restrictions.ge(\"av.dateValue\",\n+                        example.getDateValue()));\n+                break;\n+\n+            case GT:\n+                result = Restrictions.disjunction().\n+                        add(Restrictions.gt(\"av.stringValue\",\n+                        example.getStringValue())).\n+                        add(Restrictions.gt(\"av.booleanValue\",\n+                        example.getBooleanValue())).\n+                        add(Restrictions.gt(\"av.longValue\",\n+                        example.getLongValue())).\n+                        add(Restrictions.gt(\"av.doubleValue\",\n+                        example.getDoubleValue())).\n+                        add(Restrictions.gt(\"av.dateValue\",\n+                        example.getDateValue()));\n+                break;\n+\n+            case ISNOTNULL:\n+                result = Restrictions.disjunction().\n+                        add(Restrictions.isNotNull(\"av.stringValue\")).\n+                        add(Restrictions.isNotNull(\"av.booleanValue\")).\n+                        add(Restrictions.isNotNull(\"av.longValue\")).\n+                        add(Restrictions.isNotNull(\"av.doubleValue\")).\n+                        add(Restrictions.isNotNull(\"av.dateValue\"));\n+                break;\n+\n+            case LE:\n+                result = Restrictions.disjunction().\n+                        add(Restrictions.le(\"av.stringValue\",\n+                        example.getStringValue())).\n+                        add(Restrictions.le(\"av.booleanValue\",\n+                        example.getBooleanValue())).\n+                        add(Restrictions.le(\"av.longValue\",\n+                        example.getLongValue())).\n+                        add(Restrictions.le(\"av.doubleValue\",\n+                        example.getDoubleValue())).\n+                        add(Restrictions.le(\"av.dateValue\",\n+                        example.getDateValue()));\n+                break;\n+\n+            case LIKE:\n+                // LIKE operator is meaningful for strings only\n+                result = Restrictions.disjunction().\n+                        add(Restrictions.like(\"av.stringValue\",\n+                        example.getStringValue()));\n+                break;\n+\n+            case LT:\n+                result = Restrictions.disjunction().\n+                        add(Restrictions.lt(\"av.stringValue\",\n+                        example.getStringValue())).\n+                        add(Restrictions.lt(\"av.booleanValue\",\n+                        example.getBooleanValue())).\n+                        add(Restrictions.lt(\"av.longValue\",\n+                        example.getLongValue())).\n+                        add(Restrictions.lt(\"av.doubleValue\",\n+                        example.getDoubleValue())).\n+                        add(Restrictions.lt(\"av.dateValue\",\n+                        example.getDateValue()));\n+                break;\n+\n+            default:\n+        }\n+        return result;\n     }\n }"},{"sha":"a0d29cda99cb097292dc51c91639024966cfb123","filename":"core/src/main/java/org/syncope/core/persistence/propagation/ResourceOperations.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d0af546a0db15028900d9684a76051a410204544/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FResourceOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d0af546a0db15028900d9684a76051a410204544/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FResourceOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FResourceOperations.java?ref=d0af546a0db15028900d9684a76051a410204544","patch":"@@ -189,9 +189,9 @@ public void setOldAccountId(final String oldAccountId) {\n \n     @Override\n     public String toString() {\n-        return \"To Be Created: \" + toBeCreated + \";\"\n-                + \"To Be Updated: \" + toBeUpdated + \";\"\n-                + \"To Be Deleted: \" + toBeDeleted + \";\"\n+        return \"To be Created: \" + toBeCreated + \";\\n\"\n+                + \"To be Updated: \" + toBeUpdated + \";\\n\"\n+                + \"To be Deleted: \" + toBeDeleted + \";\\n\"\n                 + \"Old account Id: \" + oldAccountId;\n     }\n }"},{"sha":"60f650863d1ead075803750dc365b67a9e8c3dae","filename":"core/src/test/java/org/syncope/core/test/persistence/SyncopeUserDAOTest.java","status":"modified","additions":13,"deletions":4,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d0af546a0db15028900d9684a76051a410204544/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeUserDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d0af546a0db15028900d9684a76051a410204544/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeUserDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeUserDAOTest.java?ref=d0af546a0db15028900d9684a76051a410204544","patch":"@@ -69,15 +69,24 @@ public final void search() {\n         MembershipCond membershipCond = new MembershipCond();\n         membershipCond.setRoleId(1L);\n \n-        NodeCond searchCondition = NodeCond.getAndCond(\n+        AttributeCond loginDateCond = new AttributeCond(AttributeCond.Type.EQ);\n+        loginDateCond.setSchema(\"loginDate\");\n+        loginDateCond.setExpression(\"2009-05-26\");\n+\n+        NodeCond subCond = NodeCond.getAndCond(\n                 NodeCond.getLeafCond(usernameLeafCond),\n                 NodeCond.getLeafCond(membershipCond));\n \n-        assertTrue(searchCondition.checkValidity());\n+        assertTrue(subCond.checkValidity());\n+\n+        NodeCond cond = NodeCond.getAndCond(subCond,\n+                NodeCond.getLeafCond(loginDateCond));\n+\n+        assertTrue(cond.checkValidity());\n \n-        List<SyncopeUser> users = syncopeUserDAO.search(searchCondition);\n+        List<SyncopeUser> users = syncopeUserDAO.search(cond);\n         assertNotNull(users);\n-        assertEquals(2, users.size());\n+        assertEquals(1, users.size());\n     }\n \n     @Test"},{"sha":"e4c8bdb144970e7cf365011e90a5bec070841857","filename":"identityconnectors/bundles/staticws/ws-target-resource/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/wstarget/ProvisioningImpl.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d0af546a0db15028900d9684a76051a410204544/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2FProvisioningImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d0af546a0db15028900d9684a76051a410204544/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2FProvisioningImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2FProvisioningImpl.java?ref=d0af546a0db15028900d9684a76051a410204544","patch":"@@ -140,14 +140,17 @@ public String update(String accountid, List<WSAttributeValue> data)\n             StringBuilder set = new StringBuilder();\n             for (WSAttributeValue attr : data) {\n                 if (!attr.isKey()) {\n-                    if (set.length() > 0 && attr.getValue() != null) {\n+                    if (set.length() > 0) {\n                         set.append(\",\");\n                     }\n+\n+                    set.append(attr.getName()).append('=');\n                     if (attr.getValue() != null) {\n-                        set.append(attr.getName()\n-                                + \"='\"\n-                                + attr.getValue().toString()\n-                                + \"'\");\n+                        set.append(\"'\").\n+                                append(attr.getValue().toString()).\n+                                append(\"'\");\n+                    } else {\n+                        set.append(\"null\");\n                     }\n                 }\n             }"},{"sha":"aa99a1f86d28c65c54c44ba7369f527f2b1937a6","filename":"identityconnectors/bundles/staticws/ws-target-resource/src/main/webapp/exploredb.jsp","status":"modified","additions":62,"deletions":28,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d0af546a0db15028900d9684a76051a410204544/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fwebapp%2Fexploredb.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d0af546a0db15028900d9684a76051a410204544/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fwebapp%2Fexploredb.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fwebapp%2Fexploredb.jsp?ref=d0af546a0db15028900d9684a76051a410204544","patch":"@@ -1,53 +1,87 @@\n-<%-- \n-    Document   : exploredb\n-    Created on : Jul 23, 2010, 5:03:59 PM\n-    Author     : fabio\n---%>\n-\n-<%@page contentType=\"text/html\" pageEncoding=\"MacRoman\"%>\n+<%@page contentType=\"text/html\" pageEncoding=\"UTF-8\"%>\n <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n     \"http://www.w3.org/TR/html4/loose.dtd\">\n \n <%@page import=\"\n         org.syncope.identityconnectors.bundles.staticwebservice.wstarget.DefaultContentLoader,\n         java.sql.*,\n         org.springframework.jdbc.datasource.DataSourceUtils\" %>\n+<%!\n+    private void logTableContent(Connection conn, String tableName,\n+            JspWriter out) throws Exception {\n \n-<%\n+        Statement stmt = null;\n+        ResultSet rs = null;\n+        try {\n+            stmt = conn.createStatement();\n \n-            Connection conn = DataSourceUtils.getConnection(\n-                    DefaultContentLoader.localDataSource);\n+            rs = stmt.executeQuery(\"SELECT * FROM \" + tableName);\n+            ResultSetMetaData metaData = rs.getMetaData();\n+            out.println(\"<a name=\\\"\" + tableName + \"\\\"><strong>Table: \"\n+                    + tableName + \"</strong></a>\");\n+            out.println(\"<a href=\\\"#top\\\">Back</a>\");\n \n-            Statement st = conn.createStatement();\n+            out.println(\"<table border=\\\"1\\\">\");\n+            out.println(\"<thead>\");\n+            for (int i = 0; i < metaData.getColumnCount(); i++) {\n+                out.println(\"<th>\" + metaData.getColumnLabel(i + 1) + \"</th>\");\n+            }\n+            out.println(\"</thead>\");\n+            out.println(\"<tbody>\");\n \n-            ResultSet rs = st.executeQuery(\"SELECT * FROM user\");\n+            while (rs.next()) {\n+                out.println(\"<tr>\");\n+                for (int i = 0; i < metaData.getColumnCount(); i++) {\n+                    if (rs.getString(i + 1) != null\n+                            && rs.getString(i + 1).length() > 100) {\n \n+                        out.println(\"<td>DATA</td>\");\n+                    } else {\n+                        out.println(\"<td>\" + rs.getString(i + 1) + \"</td>\");\n+                    }\n+                }\n+                out.println(\"</tr>\");\n+            }\n+            out.println(\"</tbody>\");\n+            out.println(\"</table>\");\n+            out.println(\"<br/>\");\n+        } catch (Exception e) {\n+            throw e;\n+        } finally {\n+            rs.close();\n+            stmt.close();\n+        }\n+    }\n %>\n <html>\n     <head>\n-        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=MacRoman\">\n-        <title>JSP Page</title>\n+        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n+        <title>DB content</title>\n     </head>\n     <body>\n         <%\n-            ResultSetMetaData metaData = rs.getMetaData();\n-            StringBuilder row = new StringBuilder();\n-\n-            while (rs.next()) {\n-                for (int i = 0; i < metaData.getColumnCount(); i++) {\n-                    row.append(metaData.getColumnLabel(i + 1)).append(\"=\").\n-                            append(rs.getString(i + 1)).append(\" \");\n-                }\n+                    Connection conn = DataSourceUtils.getConnection(\n+                            DefaultContentLoader.localDataSource);\n \n         %>\n-        <%=row.toString()%><br />;\n+        <h2><a href=\"?reset=true\">DB RESET</a></h2>\n         <%\n-                row.delete(0, row.length());\n-            }\n+                    if (request.getParameter(\"reset\") != null\n+                            && \"true\".equals(request.getParameter(\"reset\"))) {\n \n-            rs.close();\n-            st.close();\n-            conn.close();\n+                        Statement stmt = null;\n+                        try {\n+                            stmt = conn.createStatement();\n+                            stmt.executeUpdate(\"DELETE FROM user\");\n+                        } catch (Exception e) {\n+                        } finally {\n+                            stmt.close();\n+                        }\n+                    }\n+\n+                    logTableContent(conn, \"user\", out);\n+\n+                    conn.close();\n         %>\n     </body>\n </html>"}]}