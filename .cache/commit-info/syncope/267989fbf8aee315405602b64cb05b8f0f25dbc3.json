{"sha":"267989fbf8aee315405602b64cb05b8f0f25dbc3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjI2Nzk4OWZiZjhhZWUzMTU0MDU2MDJiNjRjYjA1YjhmMGYyNWRiYzM=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-09T15:42:54Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-09T15:42:54Z"},"message":"Full JPA 1.0 compliant implementation of store-related components for OSWorkflow + EntityManager with PersistenceContextType.TRANSACTION in order to manage concurrency\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246622 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3f7c817c5a44f091daa332218bea6f9c3cc5fd4a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3f7c817c5a44f091daa332218bea6f9c3cc5fd4a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/267989fbf8aee315405602b64cb05b8f0f25dbc3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/267989fbf8aee315405602b64cb05b8f0f25dbc3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/267989fbf8aee315405602b64cb05b8f0f25dbc3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/267989fbf8aee315405602b64cb05b8f0f25dbc3/comments","author":null,"committer":null,"parents":[{"sha":"9b7c24f5cb0e0c67f49aa8282cb485694283110e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9b7c24f5cb0e0c67f49aa8282cb485694283110e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9b7c24f5cb0e0c67f49aa8282cb485694283110e"}],"stats":{"total":2259,"additions":1687,"deletions":572},"files":[{"sha":"5819f1687881bf3c4eed85d0892401e9ae9820f5","filename":"console/src/main/resources/configuration.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/console%2Fsrc%2Fmain%2Fresources%2Fconfiguration.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/console%2Fsrc%2Fmain%2Fresources%2Fconfiguration.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Fconfiguration.properties?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -1 +1 @@\n-baseURL=http://192.168.0.138:8080/syncope/rest/\n+baseURL=http://localhost:8080/syncope/rest/"},{"sha":"30a2d9e90a79a531263236f7409c61ab144d55cd","filename":"core/pom.xml","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -166,8 +166,7 @@\n         </dependency>\n         <dependency>\n             <groupId>net.sf.ehcache</groupId>\n-            <artifactId>ehcache</artifactId>\n-            <type>pom</type>\n+            <artifactId>ehcache-core</artifactId>\n         </dependency>\n         <dependency>\n             <groupId>net.sf.ehcache</groupId>"},{"sha":"bdd159bb6dada8ab7cb63da5db2647cf67e7a7aa","filename":"core/src/main/java/jpasymphony/beans/AbstractJPAStep.java","status":"added","additions":145,"deletions":0,"changes":145,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FAbstractJPAStep.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FAbstractJPAStep.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FAbstractJPAStep.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -0,0 +1,145 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package jpasymphony.beans;\n+\n+import com.opensymphony.workflow.spi.Step;\n+import java.util.Date;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+import org.syncope.core.persistence.beans.AbstractBaseBean;\n+\n+@MappedSuperclass\n+public abstract class AbstractJPAStep extends AbstractBaseBean implements Step {\n+\n+    protected Integer actionId;\n+\n+    protected Integer stepId;\n+\n+    protected String caller;\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    protected Date finishDate;\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    protected Date startDate;\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    protected Date dueDate;\n+\n+    protected String owner;\n+\n+    protected String status;\n+\n+    @ManyToOne\n+    protected JPAWorkflowEntry workflowEntry;\n+\n+    public JPAWorkflowEntry getWorkflowEntry() {\n+        return workflowEntry;\n+    }\n+\n+    public void setWorkflowEntry(JPAWorkflowEntry workflowEntry) {\n+        this.workflowEntry = workflowEntry;\n+    }\n+\n+    public void setActionId(Integer actionId) {\n+        this.actionId = actionId;\n+    }\n+\n+    @Override\n+    public int getActionId() {\n+        return actionId;\n+    }\n+\n+    public void setCaller(String caller) {\n+        this.caller = caller;\n+    }\n+\n+    @Override\n+    public String getCaller() {\n+        return caller;\n+    }\n+\n+    public void setDueDate(Date dueDate) {\n+        this.dueDate = dueDate;\n+    }\n+\n+    @Override\n+    public Date getDueDate() {\n+        return dueDate;\n+    }\n+\n+    @Override\n+    public long getEntryId() {\n+        return workflowEntry.getId();\n+    }\n+\n+    public void setFinishDate(Date finishDate) {\n+        this.finishDate = finishDate;\n+    }\n+\n+    @Override\n+    public Date getFinishDate() {\n+        return finishDate;\n+    }\n+\n+    public void setOwner(String owner) {\n+        this.owner = owner;\n+    }\n+\n+    @Override\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    public void setStartDate(Date startDate) {\n+        this.startDate = startDate;\n+    }\n+\n+    @Override\n+    public Date getStartDate() {\n+        return startDate;\n+    }\n+\n+    public void setStatus(String status) {\n+        this.status = status;\n+    }\n+\n+    @Override\n+    public String getStatus() {\n+        return status;\n+    }\n+\n+    public void setStepId(Integer stepId) {\n+        this.stepId = stepId;\n+    }\n+\n+    @Override\n+    public int getStepId() {\n+        return stepId;\n+    }\n+\n+    /**\n+     * This is for backward compatibility, but current Store doesn't\n+     * persist this collection, nor is such property visibile outside\n+     * OSWF internal classes.\n+     * @return an empty long[]\n+     */\n+    @Override\n+    public final long[] getPreviousStepIds() {\n+        return new long[0];\n+    }\n+}"},{"sha":"b8f8fa6e546e50715756887e6639fa0866e87d98","filename":"core/src/main/java/jpasymphony/beans/JPACurrentStep.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FJPACurrentStep.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FJPACurrentStep.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FJPACurrentStep.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -0,0 +1,35 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package jpasymphony.beans;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"os_currentstep\")\n+public class JPACurrentStep extends AbstractJPAStep {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    private Long id;\n+\n+    @Override\n+    public long getId() {\n+        return id;\n+    }\n+}"},{"sha":"9711379cb8e5796b8682f79c712b90143531d374","filename":"core/src/main/java/jpasymphony/beans/JPAHistoryStep.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FJPAHistoryStep.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FJPAHistoryStep.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FJPAHistoryStep.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -0,0 +1,35 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package jpasymphony.beans;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"os_historystep\")\n+public class JPAHistoryStep extends AbstractJPAStep {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    private Long id;\n+\n+    @Override\n+    public long getId() {\n+        return id;\n+    }\n+}"},{"sha":"56507567704f7c3ead6c832ad33a1b84a34795c8","filename":"core/src/main/java/jpasymphony/beans/JPAPropertySetItem.java","status":"renamed","additions":38,"deletions":4,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FJPAPropertySetItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FJPAPropertySetItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FJPAPropertySetItem.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -2,19 +2,20 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.beans;\n+package jpasymphony.beans;\n \n import java.util.Date;\n+import javax.persistence.Basic;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n@@ -25,33 +26,58 @@\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n import javax.persistence.UniqueConstraint;\n+import org.syncope.core.persistence.beans.AbstractBaseBean;\n \n @Entity\n @Table(name = \"os_propertyset\", uniqueConstraints =\n @UniqueConstraint(columnNames = {\"workflowEntryId\", \"propertyKey\"}))\n-public class OSWorkflowProperty extends AbstractBaseBean {\n+public class JPAPropertySetItem extends AbstractBaseBean {\n \n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private Long id;\n+\n+    @Column(nullable = false)\n+    private Integer type;\n+\n     @Column(nullable = false)\n     private Long workflowEntryId;\n+\n     @Column(nullable = false)\n     private String propertyKey;\n+\n     private Boolean booleanValue;\n+\n     private Integer intValue;\n+\n     private Long longValue;\n+\n     private Double doubleValue;\n+\n     private String stringValue;\n+\n     @Lob\n     private String textValue;\n+\n     @Temporal(TemporalType.TIMESTAMP)\n     private Date dateValue;\n \n+    @Basic\n+    @Lob\n+    private byte[] dataValue;\n+\n     public Long getId() {\n         return id;\n     }\n \n+    public Integer getType() {\n+        return type;\n+    }\n+\n+    public void setType(Integer type) {\n+        this.type = type;\n+    }\n+\n     public String getPropertyKey() {\n         return propertyKey;\n     }\n@@ -123,4 +149,12 @@ public String getTextValue() {\n     public void setTextValue(String textValue) {\n         this.textValue = textValue;\n     }\n+\n+    public byte[] getDataValue() {\n+        return dataValue;\n+    }\n+\n+    public void setDataValue(byte[] dataValue) {\n+        this.dataValue = dataValue;\n+    }\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/beans/OSWorkflowProperty.java"},{"sha":"1c94b582f23aeb21fde366a63152ddc443e835c4","filename":"core/src/main/java/jpasymphony/beans/JPAWorkflowEntry.java","status":"added","additions":145,"deletions":0,"changes":145,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FJPAWorkflowEntry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FJPAWorkflowEntry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FJPAWorkflowEntry.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -0,0 +1,145 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package jpasymphony.beans;\n+\n+import com.opensymphony.workflow.spi.WorkflowEntry;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import org.hibernate.annotations.Cascade;\n+import org.syncope.core.persistence.beans.AbstractBaseBean;\n+\n+@Entity\n+@Table(name = \"os_wfentry\")\n+public class JPAWorkflowEntry extends AbstractBaseBean\n+        implements WorkflowEntry {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    private Long id;\n+\n+    private String workflowName;\n+\n+    private Integer workflowState;\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"workflowEntry\")\n+    @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n+    private List<JPACurrentStep> currentSteps;\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"workflowEntry\")\n+    @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n+    private List<JPAHistoryStep> historySteps;\n+\n+    public JPAWorkflowEntry() {\n+        currentSteps = new ArrayList<JPACurrentStep>();\n+        historySteps = new ArrayList<JPAHistoryStep>();\n+    }\n+\n+    @Override\n+    public long getId() {\n+        return id;\n+    }\n+\n+    @Override\n+    public int getState() {\n+        return workflowState;\n+    }\n+\n+    public Integer getWorkflowState() {\n+        return workflowState;\n+    }\n+\n+    public void setWorkflowState(final Integer workflowState) {\n+        this.workflowState = workflowState;\n+    }\n+\n+    @Override\n+    public boolean isInitialized() {\n+        return workflowState > 0;\n+    }\n+\n+    @Override\n+    public String getWorkflowName() {\n+        return workflowName;\n+    }\n+\n+    public void setWorkflowName(final String workflowName) {\n+        this.workflowName = workflowName;\n+    }\n+\n+    public boolean addCurrentStep(final JPACurrentStep currentStep) {\n+        currentStep.setWorkflowEntry(this);\n+        return currentSteps.add(currentStep);\n+    }\n+\n+    public boolean removeCurrentStep(final JPACurrentStep currentStep) {\n+        boolean result = currentSteps.remove(currentStep);\n+        currentStep.setWorkflowEntry(null);\n+        return result;\n+    }\n+\n+    public List<JPACurrentStep> getCurrentSteps() {\n+        return currentSteps;\n+    }\n+\n+    public void setCurrentSteps(final List<JPACurrentStep> currentSteps) {\n+        for (JPACurrentStep step : this.currentSteps) {\n+            step.setWorkflowEntry(null);\n+        }\n+        this.currentSteps.clear();\n+\n+        if (currentSteps != null && !currentSteps.isEmpty()) {\n+            this.currentSteps.addAll(currentSteps);\n+        }\n+        for (JPACurrentStep step : this.currentSteps) {\n+            step.setWorkflowEntry(this);\n+        }\n+    }\n+\n+    public boolean addHistoryStep(final JPAHistoryStep historyStep) {\n+        historyStep.setWorkflowEntry(this);\n+        return historySteps.add(historyStep);\n+    }\n+\n+    public boolean removeHistoryStep(final JPAHistoryStep historyStep) {\n+        boolean result = historySteps.remove(historyStep);\n+        historyStep.setWorkflowEntry(null);\n+        return result;\n+    }\n+\n+    public List<JPAHistoryStep> getHistorySteps() {\n+        return historySteps;\n+    }\n+\n+    public void setHistorySteps(final List<JPAHistoryStep> historySteps) {\n+        for (JPAHistoryStep step : this.historySteps) {\n+            step.setWorkflowEntry(null);\n+        }\n+        this.historySteps.clear();\n+\n+        if (historySteps != null && !historySteps.isEmpty()) {\n+            this.historySteps.addAll(historySteps);\n+        }\n+        for (JPAHistoryStep step : this.historySteps) {\n+            step.setWorkflowEntry(this);\n+        }\n+    }\n+}"},{"sha":"024d7adbfcfe4dd47831f42726fbf56a2cb716e2","filename":"core/src/main/java/jpasymphony/dao/JPAPropertySetItemDAO.java","status":"renamed","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2FJPAPropertySetItemDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2FJPAPropertySetItemDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2FJPAPropertySetItemDAO.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -2,32 +2,33 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.dao;\n+package jpasymphony.dao;\n \n import java.util.List;\n-import org.syncope.core.persistence.beans.OSWorkflowProperty;\n+import jpasymphony.beans.JPAPropertySetItem;\n+import org.syncope.core.persistence.dao.DAO;\n \n-public interface OSWorkflowPropertyDAO extends DAO {\n+public interface JPAPropertySetItemDAO extends DAO {\n \n-    OSWorkflowProperty find(Long id);\n+    JPAPropertySetItem find(Long id);\n \n-    OSWorkflowProperty find(Long workflowEntryId, String propertyKey);\n+    JPAPropertySetItem find(Long workflowEntryId, String propertyKey);\n \n-    List<OSWorkflowProperty> findAll();\n+    List<JPAPropertySetItem> findAll();\n \n-    List<OSWorkflowProperty> findAll(Long workflowEntryId);\n+    List<JPAPropertySetItem> findAll(Long workflowEntryId);\n \n-    OSWorkflowProperty save(OSWorkflowProperty property);\n+    JPAPropertySetItem save(JPAPropertySetItem property);\n \n     void delete(Long id);\n ","previous_filename":"core/src/main/java/org/syncope/core/persistence/dao/OSWorkflowPropertyDAO.java"},{"sha":"a893f5eef8ba2f16d293ee0d0068565736a50e68","filename":"core/src/main/java/jpasymphony/dao/JPAWorkflowEntryDAO.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2FJPAWorkflowEntryDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2FJPAWorkflowEntryDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2FJPAWorkflowEntryDAO.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -0,0 +1,32 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package jpasymphony.dao;\n+\n+import java.util.List;\n+import jpasymphony.beans.JPAWorkflowEntry;\n+import org.syncope.core.persistence.dao.DAO;\n+\n+public interface JPAWorkflowEntryDAO extends DAO {\n+\n+    JPAWorkflowEntry find(Long id);\n+\n+    List<JPAWorkflowEntry> findAll();\n+\n+    JPAWorkflowEntry save(JPAWorkflowEntry entry);\n+\n+    void delete(Long id);\n+\n+    void deleteCurrentStep(Long stepId);\n+}"},{"sha":"063e141d6345c1c09565591ca400ab0b9eff7938","filename":"core/src/main/java/jpasymphony/dao/impl/JPAPropertySetItemDAOImpl.java","status":"renamed","additions":25,"deletions":22,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2Fimpl%2FJPAPropertySetItemDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2Fimpl%2FJPAPropertySetItemDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2Fimpl%2FJPAPropertySetItemDAOImpl.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -2,49 +2,52 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.dao.impl;\n+package jpasymphony.dao.impl;\n \n import java.util.List;\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.beans.OSWorkflowProperty;\n-import org.syncope.core.persistence.dao.OSWorkflowPropertyDAO;\n+import jpasymphony.beans.JPAPropertySetItem;\n+import jpasymphony.dao.JPAPropertySetItemDAO;\n+import org.syncope.core.persistence.dao.impl.AbstractDAOImpl;\n \n @Repository\n-public class OSWorkflowPropertyDAOImpl extends AbstractDAOImpl\n-        implements OSWorkflowPropertyDAO {\n+public class JPAPropertySetItemDAOImpl extends AbstractDAOImpl\n+        implements JPAPropertySetItemDAO {\n \n     @Override\n     @Transactional(readOnly = true)\n-    public OSWorkflowProperty find(Long id) {\n-        return entityManager.find(OSWorkflowProperty.class, id);\n+    public JPAPropertySetItem find(final Long id) {\n+        return entityManager.find(JPAPropertySetItem.class, id);\n     }\n \n     @Override\n     @Transactional(readOnly = true)\n-    public OSWorkflowProperty find(Long workflowEntryId, String propertyKey) {\n+    public JPAPropertySetItem find(final Long workflowEntryId,\n+            final String propertyKey) {\n+\n         Query query = entityManager.createQuery(\n-                \"SELECT e FROM OSWorkflowProperty e \"\n+                \"SELECT e FROM JPAPropertySetItem e \"\n                 + \"WHERE e.workflowEntryId=:workflowEntryId \"\n                 + \"AND e.propertyKey=:propertyKey\");\n         query.setParameter(\"workflowEntryId\", workflowEntryId);\n         query.setParameter(\"propertyKey\", propertyKey);\n \n-        OSWorkflowProperty result = null;\n+        JPAPropertySetItem result = null;\n         try {\n-            result = (OSWorkflowProperty) query.getSingleResult();\n+            result = (JPAPropertySetItem) query.getSingleResult();\n         } catch (NoResultException e) {\n         } catch (Throwable t) {\n             LOG.error(\"Unexpected exception\", t);\n@@ -55,30 +58,30 @@ public OSWorkflowProperty find(Long workflowEntryId, String propertyKey) {\n \n     @Override\n     @Transactional(readOnly = true)\n-    public List<OSWorkflowProperty> findAll() {\n+    public List<JPAPropertySetItem> findAll() {\n         Query query = entityManager.createQuery(\n-                \"SELECT e FROM OSWorkflowProperty e\");\n+                \"SELECT e FROM JPAPropertySetItem e\");\n         return query.getResultList();\n     }\n \n     @Override\n     @Transactional(readOnly = true)\n-    public List<OSWorkflowProperty> findAll(Long workflowEntryId) {\n+    public List<JPAPropertySetItem> findAll(final Long workflowEntryId) {\n         Query query = entityManager.createQuery(\n-                \"SELECT e FROM OSWorkflowProperty e \"\n+                \"SELECT e FROM JPAPropertySetItem e \"\n                 + \"WHERE e.workflowEntryId=:workflowEntryId\");\n         query.setParameter(\"workflowEntryId\", workflowEntryId);\n         return query.getResultList();\n     }\n \n     @Override\n-    public OSWorkflowProperty save(OSWorkflowProperty property) {\n+    public JPAPropertySetItem save(final JPAPropertySetItem property) {\n         return entityManager.merge(property);\n     }\n \n     @Override\n-    public void delete(Long id) {\n-        OSWorkflowProperty osWorkflowProperty = find(id);\n+    public void delete(final Long id) {\n+        JPAPropertySetItem osWorkflowProperty = find(id);\n         if (osWorkflowProperty == null) {\n             return;\n         }\n@@ -87,8 +90,8 @@ public void delete(Long id) {\n     }\n \n     @Override\n-    public void delete(Long workflowEntryId, String propertyKey) {\n-        OSWorkflowProperty osWorkflowProperty =\n+    public void delete(final Long workflowEntryId, final String propertyKey) {\n+        JPAPropertySetItem osWorkflowProperty =\n                 find(workflowEntryId, propertyKey);\n         if (osWorkflowProperty == null) {\n             return;","previous_filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/OSWorkflowPropertyDAOImpl.java"},{"sha":"d68a2a336bd7425cc6637e0b3922f1a4696b1330","filename":"core/src/main/java/jpasymphony/dao/impl/JPAWorkflowEntryDAOImpl.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2Fimpl%2FJPAWorkflowEntryDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2Fimpl%2FJPAWorkflowEntryDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2Fimpl%2FJPAWorkflowEntryDAOImpl.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -0,0 +1,80 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package jpasymphony.dao.impl;\n+\n+import java.util.List;\n+import javax.persistence.Query;\n+import jpasymphony.beans.JPACurrentStep;\n+import jpasymphony.beans.JPAPropertySetItem;\n+import jpasymphony.beans.JPAWorkflowEntry;\n+import jpasymphony.dao.JPAPropertySetItemDAO;\n+import jpasymphony.dao.JPAWorkflowEntryDAO;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.dao.impl.AbstractDAOImpl;\n+\n+@Repository\n+public class JPAWorkflowEntryDAOImpl extends AbstractDAOImpl\n+        implements JPAWorkflowEntryDAO {\n+\n+    @Autowired\n+    private JPAPropertySetItemDAO propertySetItemDAO;\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public JPAWorkflowEntry find(final Long id) {\n+        return entityManager.find(JPAWorkflowEntry.class, id);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<JPAWorkflowEntry> findAll() {\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM JPAWorkflowEntry e\");\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public JPAWorkflowEntry save(final JPAWorkflowEntry entry) {\n+        return entityManager.merge(entry);\n+    }\n+\n+    @Override\n+    public void delete(final Long id) {\n+        JPAWorkflowEntry entry = find(id);\n+        if (entry == null) {\n+            return;\n+        }\n+\n+        List<JPAPropertySetItem> properties =\n+                propertySetItemDAO.findAll(entry.getId());\n+        if (properties != null) {\n+            for (JPAPropertySetItem property : properties) {\n+                propertySetItemDAO.delete(property.getId());\n+            }\n+        }\n+\n+        entityManager.remove(entry);\n+    }\n+\n+    @Override\n+    public void deleteCurrentStep(final Long stepId) {\n+        JPACurrentStep step = entityManager.find(JPACurrentStep.class, stepId);\n+        if (step != null) {\n+            entityManager.remove(step);\n+        }\n+    }\n+}"},{"sha":"d7e5afebe23ba206364676b76870446cc1db89cc","filename":"core/src/main/java/jpasymphony/module/propertyset/jpa/JPAPropertySet.java","status":"added","additions":298,"deletions":0,"changes":298,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fmodule%2Fpropertyset%2Fjpa%2FJPAPropertySet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fmodule%2Fpropertyset%2Fjpa%2FJPAPropertySet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fmodule%2Fpropertyset%2Fjpa%2FJPAPropertySet.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -0,0 +1,298 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package jpasymphony.module.propertyset.jpa;\n+\n+import com.opensymphony.module.propertyset.AbstractPropertySet;\n+import com.opensymphony.module.propertyset.PropertyException;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.bootstrap.DOMImplementationRegistry;\n+import org.w3c.dom.ls.DOMImplementationLS;\n+import org.w3c.dom.ls.LSInput;\n+import org.w3c.dom.ls.LSParser;\n+import org.w3c.dom.ls.LSSerializer;\n+import jpasymphony.beans.JPAPropertySetItem;\n+import jpasymphony.dao.JPAPropertySetItemDAO;\n+import jpasymphony.workflow.spi.jpa.JPAPropertySetDelegate;\n+\n+/**\n+ * The JPAPropertySet is a PropertySet implementation that\n+ * will store any primitive or object via JPA.\n+ *\n+ * @see com.opensymphony.module.propertyset.PropertySet\n+ */\n+public class JPAPropertySet extends AbstractPropertySet {\n+\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG =\n+            LoggerFactory.getLogger(JPAPropertySet.class);\n+\n+    private JPAPropertySetItemDAO propertySetItemDAO;\n+\n+    private long workflowEntryId;\n+\n+    @Override\n+    public void init(final Map config, final Map args) {\n+        super.init(config, args);\n+\n+        workflowEntryId = (Long) args.get(JPAPropertySetDelegate.ENTRY_ID);\n+        propertySetItemDAO =\n+                (JPAPropertySetItemDAO) args.get(JPAPropertySetDelegate.DAO);\n+    }\n+\n+    @Override\n+    public Collection getKeys()\n+            throws PropertyException {\n+\n+        return getKeys(null, Integer.MIN_VALUE);\n+    }\n+\n+    @Override\n+    public Collection getKeys(final int type)\n+            throws PropertyException {\n+\n+        return getKeys(null, type);\n+    }\n+\n+    @Override\n+    public Collection getKeys(final String prefix)\n+            throws PropertyException {\n+\n+        return getKeys(prefix, Integer.MIN_VALUE);\n+    }\n+\n+    @Override\n+    public Collection getKeys(final String prefix, final int type)\n+            throws PropertyException {\n+\n+        List<JPAPropertySetItem> properties =\n+                propertySetItemDAO.findAll(workflowEntryId);\n+\n+        Set<String> keys = new HashSet<String>();\n+        for (JPAPropertySetItem property : properties) {\n+            if (prefix != null\n+                    && property.getPropertyKey().startsWith(prefix)) {\n+                keys.add(property.getPropertyKey());\n+            }\n+            if (type != Integer.MIN_VALUE && property.getType() == type) {\n+                keys.add(property.getPropertyKey());\n+            }\n+        }\n+\n+        return keys;\n+    }\n+\n+    @Override\n+    public boolean exists(final String key)\n+            throws PropertyException {\n+\n+        return propertySetItemDAO.find(workflowEntryId, key) != null;\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void remove(final String key)\n+            throws PropertyException {\n+\n+        propertySetItemDAO.delete(workflowEntryId, key);\n+    }\n+\n+    @Override\n+    protected void setImpl(final int type, final String key, final Object value)\n+            throws PropertyException {\n+\n+        JPAPropertySetItem propertySet = new JPAPropertySetItem();\n+        propertySet.setPropertyKey(key);\n+        propertySet.setWorkflowEntryId(workflowEntryId);\n+        propertySet.setType(type);\n+\n+        try {\n+            switch (type) {\n+                case BOOLEAN:\n+                    propertySet.setBooleanValue((Boolean) value);\n+                    break;\n+\n+                case INT:\n+                    propertySet.setIntValue((Integer) value);\n+                    break;\n+\n+                case LONG:\n+                    propertySet.setLongValue((Long) value);\n+                    break;\n+\n+                case DOUBLE:\n+                    propertySet.setDoubleValue((Double) value);\n+                    break;\n+\n+                case STRING:\n+                    propertySet.setStringValue((String) value);\n+                    break;\n+\n+                case TEXT:\n+                    propertySet.setTextValue((String) value);\n+                    break;\n+\n+                case DATE:\n+                    propertySet.setDateValue((Date) value);\n+                    break;\n+\n+                case XML:\n+                    DOMImplementationRegistry domir =\n+                            DOMImplementationRegistry.newInstance();\n+                    DOMImplementationLS domils =\n+                            (DOMImplementationLS) domir.getDOMImplementation(\n+                            \"LS\");\n+                    LSSerializer lss = domils.createLSSerializer();\n+\n+                    propertySet.setTextValue(lss.writeToString(\n+                            (Document) value));\n+                    break;\n+\n+                case PROPERTIES:\n+                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+                    ((Properties) value).storeToXML(baos, \"\");\n+                    baos.close();\n+\n+                    propertySet.setDataValue(baos.toByteArray());\n+                    break;\n+\n+                case DATA:\n+                    propertySet.setDataValue((byte[]) value);\n+                    break;\n+\n+                case OBJECT:\n+                    baos = new ByteArrayOutputStream();\n+                    ObjectOutputStream oos = new ObjectOutputStream(baos);\n+                    oos.writeObject(value);\n+                    oos.close();\n+\n+                    propertySet.setDataValue(baos.toByteArray());\n+                    break;\n+            }\n+        } catch (Throwable t) {\n+            LOG.error(\"While setting property value\", t);\n+            throw new PropertyException(t.getMessage());\n+        }\n+\n+        propertySetItemDAO.save(propertySet);\n+    }\n+\n+    @Override\n+    protected Object get(int type, String key)\n+            throws PropertyException {\n+        JPAPropertySetItem propertySet =\n+                propertySetItemDAO.find(workflowEntryId, key);\n+\n+        Object result = null;\n+        try {\n+            switch (type) {\n+                case BOOLEAN:\n+                    result = propertySet.getBooleanValue();\n+                    break;\n+\n+                case INT:\n+                    result = propertySet.getIntValue();\n+                    break;\n+\n+                case LONG:\n+                    result = propertySet.getLongValue();\n+                    break;\n+\n+                case DOUBLE:\n+                    result = propertySet.getDoubleValue();\n+                    break;\n+\n+                case STRING:\n+                    result = propertySet.getStringValue();\n+                    break;\n+\n+                case TEXT:\n+                    result = propertySet.getTextValue();\n+                    break;\n+\n+                case DATE:\n+                    result = propertySet.getDateValue();\n+                    break;\n+\n+                case XML:\n+                    DOMImplementationRegistry domir =\n+                            DOMImplementationRegistry.newInstance();\n+                    DOMImplementationLS domils =\n+                            (DOMImplementationLS) domir.getDOMImplementation(\n+                            \"LS\");\n+                    LSInput lsi = domils.createLSInput();\n+                    lsi.setStringData(propertySet.getTextValue());\n+                    LSParser lsp = domils.createLSParser(\n+                            DOMImplementationLS.MODE_SYNCHRONOUS, null);\n+\n+                    result = lsp.parse(lsi);\n+                    break;\n+\n+                case PROPERTIES:\n+                    ByteArrayInputStream bais = new ByteArrayInputStream(\n+                            propertySet.getDataValue());\n+                    Properties props = new Properties();\n+                    props.loadFromXML(bais);\n+\n+                    result = props;\n+                    break;\n+\n+                case DATA:\n+                    result = propertySet.getDataValue();\n+                    break;\n+\n+                case OBJECT:\n+                    bais = new ByteArrayInputStream(propertySet.getDataValue());\n+                    ObjectInputStream ois = new ObjectInputStream(bais);\n+\n+                    result = ois.readObject();\n+                    break;\n+            }\n+        } catch (Throwable t) {\n+            LOG.error(\"While fetching property value\", t);\n+            throw new PropertyException(t.getMessage());\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public int getType(String key)\n+            throws PropertyException {\n+        JPAPropertySetItem propertySet =\n+                propertySetItemDAO.find(workflowEntryId, key);\n+        if (propertySet == null) {\n+            throw new PropertyException(\"Key '\" + key + \"' \"\n+                    + \"not found for workflow entry id \" + workflowEntryId);\n+        }\n+\n+        return propertySet.getType();\n+    }\n+}"},{"sha":"42d7ff5df631d50de82e3b7d41010f1ea84e8c95","filename":"core/src/main/java/jpasymphony/workflow/spi/jpa/JPAPropertySetDelegate.java","status":"renamed","additions":11,"deletions":13,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FJPAPropertySetDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FJPAPropertySetDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FJPAPropertySetDelegate.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -2,42 +2,40 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.workflow;\n+package jpasymphony.workflow.spi.jpa;\n \n import com.opensymphony.module.propertyset.PropertySet;\n import com.opensymphony.module.propertyset.PropertySetManager;\n import com.opensymphony.workflow.util.PropertySetDelegate;\n import java.util.HashMap;\n import java.util.Map;\n+import jpasymphony.dao.JPAPropertySetItemDAO;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.syncope.core.persistence.dao.OSWorkflowPropertyDAO;\n \n-public class PropertySetDelegateImpl implements PropertySetDelegate {\n+public class JPAPropertySetDelegate implements PropertySetDelegate {\n \n-    private OSWorkflowPropertyDAO osWorkflowPropertyDAO;\n+    final public static String DAO = \"propertySetItemDAO\";\n \n-    @Autowired\n-    public PropertySetDelegateImpl(\n-            OSWorkflowPropertyDAO osWorkflowPropertyDAO) {\n+    final public static String ENTRY_ID = \"entryId\";\n \n-        this.osWorkflowPropertyDAO = osWorkflowPropertyDAO;\n-    }\n+    @Autowired\n+    private JPAPropertySetItemDAO propertySetItemDAO;\n \n     @Override\n     public PropertySet getPropertySet(long entryId) {\n         Map<String, Object> args = new HashMap<String, Object>();\n-        args.put(\"entryId\", Long.valueOf(entryId));\n-        args.put(\"osWorkflowPropertyDAO\", osWorkflowPropertyDAO);\n+        args.put(ENTRY_ID, Long.valueOf(entryId));\n+        args.put(DAO, propertySetItemDAO);\n \n         return PropertySetManager.getInstance(\"jpa\", args);\n     }","previous_filename":"core/src/main/java/org/syncope/core/workflow/PropertySetDelegateImpl.java"},{"sha":"8096d43b0f9b8531c467ba2d6c7ae5a6fb6a656c","filename":"core/src/main/java/jpasymphony/workflow/spi/jpa/JPAWorkflowStore.java","status":"added","additions":435,"deletions":0,"changes":435,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FJPAWorkflowStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FJPAWorkflowStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FJPAWorkflowStore.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -0,0 +1,435 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package jpasymphony.workflow.spi.jpa;\n+\n+import com.opensymphony.module.propertyset.PropertySet;\n+import com.opensymphony.workflow.QueryNotSupportedException;\n+import com.opensymphony.workflow.StoreException;\n+import com.opensymphony.workflow.query.Expression;\n+import com.opensymphony.workflow.query.FieldExpression;\n+import com.opensymphony.workflow.query.NestedExpression;\n+import com.opensymphony.workflow.query.WorkflowExpressionQuery;\n+import com.opensymphony.workflow.query.WorkflowQuery;\n+import com.opensymphony.workflow.spi.Step;\n+import com.opensymphony.workflow.spi.WorkflowEntry;\n+import com.opensymphony.workflow.spi.WorkflowStore;\n+import com.opensymphony.workflow.util.PropertySetDelegate;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.PersistenceContextType;\n+import jpasymphony.beans.AbstractJPAStep;\n+import jpasymphony.beans.JPACurrentStep;\n+import jpasymphony.beans.JPAHistoryStep;\n+import jpasymphony.beans.JPAWorkflowEntry;\n+import jpasymphony.dao.JPAWorkflowEntryDAO;\n+import org.hibernate.Criteria;\n+import org.hibernate.Session;\n+import org.hibernate.criterion.Criterion;\n+import org.hibernate.criterion.Restrictions;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * JPA implementation of OSWorkflow's WorkflowStore.\n+ * Still using Hibernate's criteria API (available since JPA 2.0).\n+ */\n+@Transactional(rollbackFor = {\n+    Throwable.class\n+})\n+public class JPAWorkflowStore implements WorkflowStore {\n+\n+    @PersistenceContext(type = PersistenceContextType.TRANSACTION)\n+    private EntityManager entityManager;\n+\n+    @Autowired\n+    private JPAWorkflowEntryDAO workflowEntryDAO;\n+\n+    @Autowired\n+    private PropertySetDelegate propertySetDelegate;\n+\n+    @Override\n+    public void setEntryState(final long entryId, final int state)\n+            throws StoreException {\n+\n+        JPAWorkflowEntry entry = workflowEntryDAO.find(entryId);\n+        if (entry == null) {\n+            throw new StoreException(\n+                    \"Could not find workflow entry \" + entryId);\n+        }\n+\n+        entry.setWorkflowState(state);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public PropertySet getPropertySet(final long entryId)\n+            throws StoreException {\n+\n+        if (propertySetDelegate == null) {\n+            throw new StoreException(\n+                    \"PropertySetDelegate is not properly configured\");\n+        }\n+\n+        return propertySetDelegate.getPropertySet(entryId);\n+    }\n+\n+    @Override\n+    public Step createCurrentStep(final long entryId,\n+            final int stepId,\n+            final String owner,\n+            final Date startDate,\n+            final Date dueDate,\n+            final String status,\n+            final long[] previousIds)\n+            throws StoreException {\n+\n+        JPAWorkflowEntry entry = workflowEntryDAO.find(entryId);\n+        if (entry == null) {\n+            throw new StoreException(\n+                    \"Could not find workflow entry \" + entryId);\n+        }\n+\n+        JPACurrentStep step = new JPACurrentStep();\n+        step.setWorkflowEntry(entry);\n+        step.setStepId(stepId);\n+        step.setOwner(owner);\n+        step.setStartDate(startDate);\n+        step.setDueDate(dueDate);\n+        step.setStatus(status);\n+\n+        entry.addCurrentStep(step);\n+        entry = workflowEntryDAO.save(entry);\n+\n+        List<JPACurrentStep> currentSteps = entry.getCurrentSteps();\n+        return currentSteps.get(currentSteps.size() - 1);\n+    }\n+\n+    @Override\n+    public WorkflowEntry createEntry(final String workflowName)\n+            throws StoreException {\n+\n+        JPAWorkflowEntry entry = new JPAWorkflowEntry();\n+        entry.setWorkflowState(WorkflowEntry.CREATED);\n+        entry.setWorkflowName(workflowName);\n+\n+        return workflowEntryDAO.save(entry);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List findCurrentSteps(final long entryId)\n+            throws StoreException {\n+\n+        JPAWorkflowEntry entry = workflowEntryDAO.find(entryId);\n+        if (entry == null) {\n+            throw new StoreException(\n+                    \"Could not find workflow entry \" + entryId);\n+        }\n+\n+        return entry.getCurrentSteps();\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public WorkflowEntry findEntry(final long entryId)\n+            throws StoreException {\n+\n+        JPAWorkflowEntry entry = workflowEntryDAO.find(entryId);\n+        if (entry == null) {\n+            throw new StoreException(\n+                    \"Could not find workflow entry \" + entryId);\n+        }\n+\n+        return entry;\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List findHistorySteps(final long entryId)\n+            throws StoreException {\n+\n+        JPAWorkflowEntry entry = workflowEntryDAO.find(entryId);\n+        if (entry == null) {\n+            throw new StoreException(\n+                    \"Could not find workflow entry \" + entryId);\n+        }\n+\n+        return entry.getHistorySteps();\n+    }\n+\n+    @Override\n+    public void init(final Map props)\n+            throws StoreException {\n+    }\n+\n+    @Override\n+    public Step markFinished(final Step step,\n+            final int actionId,\n+            final Date finishDate,\n+            final String status,\n+            final String caller)\n+            throws StoreException {\n+\n+        JPACurrentStep currentStep = (JPACurrentStep) step;\n+\n+        currentStep.setActionId(actionId);\n+        currentStep.setFinishDate(finishDate);\n+        currentStep.setStatus(status);\n+        currentStep.setCaller(caller);\n+\n+        workflowEntryDAO.save(currentStep.getWorkflowEntry());\n+\n+        return currentStep;\n+    }\n+\n+    @Override\n+    public void moveToHistory(final Step step)\n+            throws StoreException {\n+\n+        JPACurrentStep currentStep = (JPACurrentStep) step;\n+        JPAWorkflowEntry entry = currentStep.getWorkflowEntry();\n+\n+        JPAHistoryStep historyStep = new JPAHistoryStep();\n+        historyStep.setActionId(currentStep.getActionId());\n+        historyStep.setCaller(currentStep.getCaller());\n+        historyStep.setDueDate(currentStep.getDueDate());\n+        historyStep.setFinishDate(currentStep.getFinishDate());\n+        historyStep.setOwner(currentStep.getOwner());\n+        historyStep.setStartDate(currentStep.getStartDate());\n+        historyStep.setStatus(currentStep.getStatus());\n+        historyStep.setStepId(currentStep.getStepId());\n+        historyStep.setWorkflowEntry(entry);\n+\n+        entry.removeCurrentStep(currentStep);\n+        workflowEntryDAO.deleteCurrentStep(currentStep.getId());\n+\n+        entry.addHistoryStep(historyStep);\n+        workflowEntryDAO.save(entry);\n+    }\n+\n+    @Override\n+    @Deprecated\n+    public List query(final WorkflowQuery query)\n+            throws StoreException {\n+\n+        throw new UnsupportedOperationException(\"Deprecated\");\n+    }\n+\n+    /**\n+     * @see com.opensymphony.workflow.spi.WorkflowStore\n+     * #query(com.opensymphony.workflow.query.WorkflowExpressionQuery)\n+     */\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List query(final WorkflowExpressionQuery query)\n+            throws StoreException {\n+\n+        Class entityClass = getQueryClass(query.getExpression(), null);\n+\n+        Criterion expr;\n+        if (query.getExpression().isNested()) {\n+            expr = buildNested((NestedExpression) query.getExpression());\n+        } else {\n+            expr = queryComparison((FieldExpression) query.getExpression());\n+        }\n+\n+        Session hibernateSess = (Session) entityManager.getDelegate();\n+        Criteria criteria = hibernateSess.createCriteria(entityClass);\n+        criteria.add(expr);\n+\n+        List<Long> results = new ArrayList<Long>();\n+        Object next;\n+        Long item;\n+        for (Iterator iter = criteria.list().iterator(); iter.hasNext();) {\n+            next = iter.next();\n+\n+            if (next instanceof AbstractJPAStep) {\n+                AbstractJPAStep step = (AbstractJPAStep) next;\n+                item = new Long(step.getEntryId());\n+            } else {\n+                WorkflowEntry entry = (WorkflowEntry) next;\n+                item = new Long(entry.getId());\n+            }\n+\n+            results.add(item);\n+        }\n+\n+        return results;\n+    }\n+\n+    private Class getQueryClass(Expression expr, Collection classesCache) {\n+        if (classesCache == null) {\n+            classesCache = new HashSet();\n+        }\n+\n+        if (expr instanceof FieldExpression) {\n+            FieldExpression fieldExpression = (FieldExpression) expr;\n+\n+            switch (fieldExpression.getContext()) {\n+                case FieldExpression.CURRENT_STEPS:\n+                    classesCache.add(JPACurrentStep.class);\n+\n+                    break;\n+\n+                case FieldExpression.HISTORY_STEPS:\n+                    classesCache.add(JPAHistoryStep.class);\n+\n+                    break;\n+\n+                case FieldExpression.ENTRY:\n+                    classesCache.add(JPAWorkflowEntry.class);\n+\n+                    break;\n+\n+                default:\n+                    throw new QueryNotSupportedException(\n+                            \"Query for unsupported context \" + fieldExpression.\n+                            getContext());\n+            }\n+        } else {\n+            NestedExpression nestedExpression = (NestedExpression) expr;\n+\n+            for (int i = 0; i < nestedExpression.getExpressionCount(); i++) {\n+                Expression expression = nestedExpression.getExpression(i);\n+\n+                if (expression.isNested()) {\n+                    classesCache.add(getQueryClass(nestedExpression.\n+                            getExpression(i), classesCache));\n+                } else {\n+                    classesCache.add(getQueryClass(expression, classesCache));\n+                }\n+            }\n+        }\n+\n+        if (classesCache.size() > 1) {\n+            throw new QueryNotSupportedException(\n+                    \"Store does not support nested queries of different types \"\n+                    + \"(types found:\" + classesCache + \")\");\n+        }\n+\n+        return (Class) classesCache.iterator().next();\n+    }\n+\n+    private Criterion buildNested(NestedExpression nestedExpression) {\n+        Criterion full = null;\n+\n+        for (int i = 0; i < nestedExpression.getExpressionCount(); i++) {\n+            Criterion expr;\n+            Expression expression = nestedExpression.getExpression(i);\n+\n+            if (expression.isNested()) {\n+                expr = buildNested((NestedExpression) nestedExpression.\n+                        getExpression(i));\n+            } else {\n+                FieldExpression sub = (FieldExpression) nestedExpression.\n+                        getExpression(i);\n+                expr = queryComparison(sub);\n+\n+                if (sub.isNegate()) {\n+                    expr = Restrictions.not(expr);\n+                }\n+            }\n+\n+            if (full == null) {\n+                full = expr;\n+            } else {\n+                switch (nestedExpression.getExpressionOperator()) {\n+                    case NestedExpression.AND:\n+                        full = Restrictions.and(full, expr);\n+                        break;\n+\n+                    case NestedExpression.OR:\n+                        full = Restrictions.or(full, expr);\n+                        break;\n+\n+                    default:\n+                }\n+            }\n+        }\n+\n+        return full;\n+    }\n+\n+    private Criterion queryComparison(FieldExpression expression) {\n+        int operator = expression.getOperator();\n+\n+        switch (operator) {\n+            case FieldExpression.EQUALS:\n+                return Restrictions.eq(getFieldName(expression.getField()),\n+                        expression.getValue());\n+\n+            case FieldExpression.NOT_EQUALS:\n+                return Restrictions.not(\n+                        Restrictions.like(getFieldName(expression.getField()),\n+                        expression.getValue()));\n+\n+            case FieldExpression.GT:\n+                return Restrictions.gt(getFieldName(expression.getField()),\n+                        expression.getValue());\n+\n+            case FieldExpression.LT:\n+                return Restrictions.lt(getFieldName(expression.getField()),\n+                        expression.getValue());\n+\n+            default:\n+                return Restrictions.eq(getFieldName(expression.getField()),\n+                        expression.getValue());\n+        }\n+    }\n+\n+    private String getFieldName(int field) {\n+        switch (field) {\n+            case FieldExpression.ACTION: // actionId\n+                return \"actionId\";\n+\n+            case FieldExpression.CALLER:\n+                return \"caller\";\n+\n+            case FieldExpression.FINISH_DATE:\n+                return \"finishDate\";\n+\n+            case FieldExpression.OWNER:\n+                return \"owner\";\n+\n+            case FieldExpression.START_DATE:\n+                return \"startDate\";\n+\n+            case FieldExpression.STEP: // stepId\n+                return \"stepId\";\n+\n+            case FieldExpression.STATUS:\n+                return \"status\";\n+\n+            case FieldExpression.STATE:\n+                return \"workflowState\";\n+\n+            case FieldExpression.NAME:\n+                return \"workflowName\";\n+\n+            case FieldExpression.DUE_DATE:\n+                return \"dueDate\";\n+\n+            default:\n+                return \"1\";\n+        }\n+    }\n+}"},{"sha":"1fef700a71619a0d71c16502fbbdaf0bb829460a","filename":"core/src/main/java/jpasymphony/workflow/spi/jpa/SpringWorkflowFactory.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FSpringWorkflowFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FSpringWorkflowFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FSpringWorkflowFactory.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -0,0 +1,53 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package jpasymphony.workflow.spi.jpa;\n+\n+import com.opensymphony.workflow.FactoryException;\n+import com.opensymphony.workflow.loader.XMLWorkflowFactory;\n+import java.util.Properties;\n+\n+public class SpringWorkflowFactory extends XMLWorkflowFactory {\n+\n+    private String resource;\n+\n+    public void setReload(String reload) {\n+        this.reload = Boolean.valueOf(reload).booleanValue();\n+    }\n+\n+    public void setResource(String resource) {\n+        this.resource = resource;\n+    }\n+\n+    public void init() {\n+        try {\n+            Properties props = new Properties();\n+            props.setProperty(\"reload\", getReload());\n+            props.setProperty(\"resource\", getResource());\n+\n+            super.init(props);\n+            initDone();\n+        } catch (FactoryException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private String getReload() {\n+        return String.valueOf(reload);\n+    }\n+\n+    private String getResource() {\n+        return resource;\n+    }\n+}"},{"sha":"c11214ef4b54341d7d5896a87576253ed0a8a3f6","filename":"core/src/main/java/org/syncope/core/identityconnectors/SLF4JLogger.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fidentityconnectors%2FSLF4JLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fidentityconnectors%2FSLF4JLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fidentityconnectors%2FSLF4JLogger.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"sha":"f8516985eac5808314078ea899fc9459e9d4cd07","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttribute.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttribute.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -19,18 +19,19 @@\n import javax.persistence.MappedSuperclass;\n import org.syncope.core.persistence.validation.ParseException;\n import org.syncope.core.persistence.validation.ValidationFailedException;\n+import org.syncope.core.rest.data.AttributableUtil;\n \n @MappedSuperclass\n public abstract class AbstractAttribute extends AbstractBaseBean {\n \n     public abstract Long getId();\n \n-    public <T extends AbstractAttributeValue> T addValue(String value,\n-            T attributeValue)\n+    public <T extends AbstractAttributeValue> T addValue(final String value,\n+            final AttributableUtil attributableUtil)\n             throws ParseException, ValidationFailedException {\n \n         T actualValue = getSchema().getValidator().getValue(value,\n-                attributeValue);\n+                (T) attributableUtil.newAttributeValue());\n         actualValue.setAttribute(this);\n \n         if (!getSchema().isMultivalue()) {"},{"sha":"c8b8a687c8116c602ebb424a2730a6c985d4a89f","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":18,"deletions":6,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -36,26 +36,35 @@ public abstract class AbstractSchema extends AbstractBaseBean {\n \n     @Id\n     private String name;\n+\n     @Column(nullable = false)\n     @Enumerated(STRING)\n     private SchemaValueType type;\n+\n     /**\n      * Specify if the attribute should be stored on the local repository.\n      */\n     @Basic\n     private Character virtual;\n+\n     @Column(nullable = false)\n     private String mandatoryCondition;\n+\n     @Basic\n     private Character multivalue;\n+\n     @Basic\n     private Character uniquevalue;\n+\n     @Basic\n     private Character readonly;\n+\n     @Column(nullable = true)\n     private String conversionPattern;\n+\n     @Column(nullable = true)\n     private String validatorClass;\n+\n     @Transient\n     private AbstractAttributeValidator validator;\n \n@@ -163,9 +172,9 @@ public void setValidatorClass(String validatorClass) {\n     }\n \n     public String getConversionPattern() {\n-        if (!getType().isConversionPatternNeeded() && LOG.isDebugEnabled()) {\n-            LOG.debug(\"Conversion pattern is not needed: \" + this\n-                    + \"'s type is \" + getType());\n+        if (!getType().isConversionPatternNeeded()) {\n+            LOG.debug(\"Conversion pattern is not needed: {}'s type is {}\",\n+                    this, getType());\n         }\n \n         return conversionPattern;\n@@ -180,7 +189,7 @@ public void setConversionPattern(String conversionPattern) {\n         this.conversionPattern = conversionPattern;\n     }\n \n-    public <T extends Format> T getFormatter(Class<T> reference) {\n+    public <T extends Format> T getFormatter(final Class<T> reference) {\n         T result = null;\n \n         switch (getType()) {\n@@ -204,9 +213,12 @@ public <T extends Format> T getFormatter(Class<T> reference) {\n                 SimpleDateFormat dateFormatter =\n                         (SimpleDateFormat) getType().getBasicFormatter();\n                 dateFormatter.applyPattern(getConversionPattern());\n+                dateFormatter.setLenient(false);\n \n                 result = (T) dateFormatter;\n                 break;\n+\n+            default:\n         }\n \n         return result;"},{"sha":"fa39e9a38c678bb09b14ae5c69fbf855ee7a529f","filename":"core/src/main/java/org/syncope/core/persistence/beans/ConnectorInstance.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -203,11 +203,10 @@ public Set<ConnectorCapability> getCapabilities() {\n         return capabilities;\n     }\n \n-    public void setCapabilities(Set<ConnectorCapability> capabilities) {\n-        if (capabilities == null || capabilities.isEmpty()) {\n-            this.capabilities.clear();\n-        } else {\n-            this.capabilities = capabilities;\n+    public void setCapabilities(final Set<ConnectorCapability> capabilities) {\n+        this.capabilities.clear();\n+        if (capabilities != null && !capabilities.isEmpty()) {\n+            this.capabilities.addAll(capabilities);\n         }\n     }\n }"},{"sha":"a0448df585de024c8bde9a2fe737581a64f86589","filename":"core/src/main/java/org/syncope/core/persistence/beans/TargetResource.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -69,33 +69,39 @@ public class TargetResource extends AbstractBaseBean {\n      */\n     @Id\n     private String name;\n+\n     /**\n      * Should this resource enforce the mandatory constraints?\n      */\n     @Column(nullable = false)\n     @Basic\n     private Character forceMandatoryConstraint;\n+\n     /**\n      * The resource type is identified by the associated connector.\n      */\n     @ManyToOne(fetch = FetchType.EAGER)\n     private ConnectorInstance connector;\n+\n     /**\n      * Users associated to this resource.\n      */\n     @ManyToMany(fetch = FetchType.EAGER, mappedBy = \"targetResources\")\n     private Set<SyncopeUser> users;\n+\n     /**\n      * Roles associated to this resource.\n      */\n     @ManyToMany(fetch = FetchType.EAGER, mappedBy = \"targetResources\")\n     private Set<SyncopeRole> roles;\n+\n     /**\n      * Attribute mappings.\n      */\n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"resource\")\n     @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n     private List<SchemaMapping> mappings;\n+\n     /**\n      * Tasks associated to this resource.\n      */"},{"sha":"a3dd3132c8bac51764d3a50b674813fd2dde3cf6","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MembershipAttribute.java","status":"modified","additions":17,"deletions":6,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipAttribute.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -81,16 +81,20 @@ public <T extends AbstractSchema> void setSchema(T schema) {\n \n     @Override\n     public <T extends AbstractAttributeValue> boolean addValue(\n-            T attributeValue) {\n+            final T attributeValue) {\n \n+        attributeValue.setAttribute(this);\n         return values.add((MembershipAttributeValue) attributeValue);\n     }\n \n     @Override\n     public <T extends AbstractAttributeValue> boolean removeValue(\n-            T attributeValue) {\n+            final T attributeValue) {\n \n-        return values.remove((MembershipAttributeValue) attributeValue);\n+        boolean result = values.remove(\n+                (MembershipAttributeValue) attributeValue);\n+        attributeValue.setAttribute(null);\n+        return result;\n     }\n \n     @Override\n@@ -100,9 +104,16 @@ public <T extends AbstractAttributeValue> List<T> getValues() {\n \n     @Override\n     public <T extends AbstractAttributeValue> void setValues(\n-            List<T> attributeValues) {\n-\n-        this.values = (List<MembershipAttributeValue>) attributeValues;\n+            final List<T> attributeValues) {\n+\n+        this.values.clear();\n+        if (attributeValues != null && !attributeValues.isEmpty()) {\n+            for (T mav : attributeValues) {\n+                mav.setAttribute(this);\n+            }\n+            this.values.addAll(\n+                    (List<MembershipAttributeValue>) attributeValues);\n+        }\n \n     }\n }"},{"sha":"5bc40a0a359afcd80f647768921b8997cab3e753","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MembershipSchema.java","status":"modified","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipSchema.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -41,6 +41,7 @@ public class MembershipSchema extends AbstractSchema {\n \n     @OneToMany(mappedBy = \"schema\")\n     private List<MembershipAttribute> attributes;\n+\n     @ManyToMany(mappedBy = \"schemas\")\n     private List<MembershipDerivedSchema> derivedSchemas;\n \n@@ -71,14 +72,14 @@ public void setAttributes(List<? extends AbstractAttribute> attributes) {\n \n     @Override\n     public <T extends AbstractDerivedSchema> boolean addDerivedSchema(\n-            T derivedSchema) {\n+            final T derivedSchema) {\n \n         return derivedSchemas.add((MembershipDerivedSchema) derivedSchema);\n     }\n \n     @Override\n     public <T extends AbstractDerivedSchema> boolean removeDerivedSchema(\n-            T derivedSchema) {\n+            final T derivedSchema) {\n \n         return derivedSchemas.remove((MembershipDerivedSchema) derivedSchema);\n     }\n@@ -90,8 +91,12 @@ public List<? extends AbstractDerivedSchema> getDerivedSchemas() {\n \n     @Override\n     public void setDerivedSchemas(\n-            List<? extends AbstractDerivedSchema> derivedSchemas) {\n+            final List<? extends AbstractDerivedSchema> derivedSchemas) {\n \n-        this.derivedSchemas = (List<MembershipDerivedSchema>) derivedSchemas;\n+        this.derivedSchemas.clear();\n+        if (derivedSchemas != null && !derivedSchemas.isEmpty()) {\n+            this.derivedSchemas.addAll(\n+                    (List<MembershipDerivedSchema>) derivedSchemas);\n+        }\n     }\n }"},{"sha":"8607e639fc8d8253cba268d070c9822a76d59a7c","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RoleSchema.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleSchema.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -41,6 +41,7 @@ public class RoleSchema extends AbstractSchema {\n \n     @OneToMany(mappedBy = \"schema\")\n     private List<RoleAttribute> attributes;\n+\n     @ManyToMany(mappedBy = \"schemas\")\n     private List<RoleDerivedSchema> derivedSchemas;\n "},{"sha":"8f5f52c6d77f8701492e20e0e4a12d93ff63df17","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserSchema.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserSchema.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -41,6 +41,7 @@ public class UserSchema extends AbstractSchema {\n \n     @OneToMany(mappedBy = \"schema\")\n     private List<UserAttribute> attributes;\n+\n     @ManyToMany(mappedBy = \"schemas\")\n     private List<UserDerivedSchema> derivedSchemas;\n "},{"sha":"0a3e4339e97ee6d0f34124ae75735754fdf5dc8a","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AbstractDAOImpl.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -25,7 +25,9 @@\n import org.syncope.core.persistence.dao.DAO;\n \n @Configurable\n-@Transactional(rollbackFor = {Throwable.class})\n+@Transactional(rollbackFor = {\n+    Throwable.class\n+})\n public abstract class AbstractDAOImpl implements DAO {\n \n     /**\n@@ -34,11 +36,11 @@ public abstract class AbstractDAOImpl implements DAO {\n     protected static final Logger LOG =\n             LoggerFactory.getLogger(AbstractDAOImpl.class);\n \n-    @PersistenceContext(type = PersistenceContextType.EXTENDED)\n+    @PersistenceContext(type = PersistenceContextType.TRANSACTION)\n     protected EntityManager entityManager;\n \n     @Override\n-    public <T extends AbstractBaseBean> T refresh(T entity) {\n+    public <T extends AbstractBaseBean> T refresh(final T entity) {\n         entityManager.refresh(entity);\n         return entity;\n     }"},{"sha":"c7881e3c2d2a8ad226f01eb51bf0f0c87ab2998b","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/DerivedAttributeDAOImpl.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedAttributeDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedAttributeDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedAttributeDAOImpl.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -28,15 +28,15 @@ public class DerivedAttributeDAOImpl extends AbstractDAOImpl\n     @Override\n     @Transactional(readOnly = true)\n     public <T extends AbstractDerivedAttribute> T find(\n-            Long id, Class<T> reference) {\n+            final Long id, final Class<T> reference) {\n \n         return entityManager.find(reference, id);\n     }\n \n     @Override\n     @Transactional(readOnly = true)\n     public <T extends AbstractDerivedAttribute> List<T> findAll(\n-            Class<T> reference) {\n+            final Class<T> reference) {\n \n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM \" + reference.getSimpleName() + \" e\");\n@@ -45,13 +45,15 @@ public <T extends AbstractDerivedAttribute> List<T> findAll(\n \n     @Override\n     @Transactional\n-    public <T extends AbstractDerivedAttribute> T save(T derivedAttribute) {\n+    public <T extends AbstractDerivedAttribute> T save(\n+            final T derivedAttribute) {\n+\n         return entityManager.merge(derivedAttribute);\n     }\n \n     @Override\n     public <T extends AbstractDerivedAttribute> void delete(\n-            Long id, Class<T> reference) {\n+            final Long id, final Class<T> reference) {\n \n         T derivedAttribute = find(id, reference);\n         if (derivedAttribute == null) {\n@@ -63,7 +65,7 @@ public <T extends AbstractDerivedAttribute> void delete(\n \n     @Override\n     public <T extends AbstractDerivedAttribute> void delete(\n-            T derivedAttribute) {\n+            final T derivedAttribute) {\n \n         if (derivedAttribute.getOwner() != null) {\n             derivedAttribute.getOwner().removeDerivedAttribute("},{"sha":"742a0453ac839f260e992cd310bfc5a961ba69c7","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/DerivedSchemaDAOImpl.java","status":"modified","additions":20,"deletions":15,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedSchemaDAOImpl.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -14,8 +14,9 @@\n  */\n package org.syncope.core.persistence.dao.impl;\n \n-import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import javax.persistence.Query;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n@@ -35,30 +36,30 @@ public class DerivedSchemaDAOImpl extends AbstractDAOImpl\n \n     @Override\n     @Transactional(readOnly = true)\n-    public <T extends AbstractDerivedSchema> T find(String name,\n-            Class<T> reference) {\n+    public <T extends AbstractDerivedSchema> T find(final String name,\n+            final Class<T> reference) {\n \n         return entityManager.find(reference, name);\n     }\n \n     @Override\n     @Transactional(readOnly = true)\n     public <T extends AbstractDerivedSchema> List<T> findAll(\n-            Class<T> reference) {\n+            final Class<T> reference) {\n \n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM \" + reference.getSimpleName() + \" e\");\n         return query.getResultList();\n     }\n \n     @Override\n-    public <T extends AbstractDerivedSchema> T save(T derivedSchema) {\n+    public <T extends AbstractDerivedSchema> T save(final T derivedSchema) {\n         return entityManager.merge(derivedSchema);\n     }\n \n     @Override\n-    public <T extends AbstractDerivedSchema> void delete(String name,\n-            Class<T> reference) {\n+    public <T extends AbstractDerivedSchema> void delete(final String name,\n+            final Class<T> reference) {\n \n         T derivedSchema = find(name, reference);\n         if (derivedSchema == null) {\n@@ -68,16 +69,20 @@ public <T extends AbstractDerivedSchema> void delete(String name,\n         for (AbstractSchema schema : derivedSchema.getSchemas()) {\n             schema.removeDerivedSchema(derivedSchema);\n         }\n-        derivedSchema.setSchemas(Collections.EMPTY_SET);\n+        derivedSchema.getSchemas().clear();\n \n-        for (AbstractDerivedAttribute derivedAttribute :\n+        Set<Long> derivedAttributeIds =\n+                new HashSet<Long>(derivedSchema.getDerivedAttributes().size());\n+        Class attributeClass = null;\n+        for (AbstractDerivedAttribute attribute :\n                 derivedSchema.getDerivedAttributes()) {\n \n-            derivedAttribute.setDerivedSchema(null);\n-            derivedAttributeDAO.delete(derivedAttribute.getId(),\n-                    derivedAttribute.getClass());\n+            derivedAttributeIds.add(attribute.getId());\n+            attributeClass = attribute.getClass();\n+        }\n+        for (Long derivedAttributeId : derivedAttributeIds) {\n+            derivedAttributeDAO.delete(derivedAttributeId, attributeClass);\n         }\n-        derivedSchema.setDerivedAttributes(Collections.EMPTY_LIST);\n \n         entityManager.remove(derivedSchema);\n     }"},{"sha":"4d46cb7c428bef704f9f5964f4dc553e71965b5d","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SchemaDAOImpl.java","status":"modified","additions":14,"deletions":8,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -14,8 +14,9 @@\n  */\n package org.syncope.core.persistence.dao.impl;\n \n-import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import javax.persistence.Query;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n@@ -35,6 +36,7 @@ public class SchemaDAOImpl extends AbstractDAOImpl\n \n     @Autowired\n     private AttributeDAO attributeDAO;\n+\n     @Autowired\n     private ResourceDAO resourceDAO;\n \n@@ -80,14 +82,18 @@ public <T extends AbstractSchema> void delete(String name,\n         for (AbstractDerivedSchema derivedSchema : schema.getDerivedSchemas()) {\n             derivedSchema.removeSchema(schema);\n         }\n+        schema.getDerivedSchemas().clear();\n \n-        schema.setDerivedSchemas(Collections.EMPTY_LIST);\n-\n+        Set<Long> attributeIds =\n+                new HashSet<Long>(schema.getAttributes().size());\n+        Class attributeClass = null;\n         for (AbstractAttribute attribute : schema.getAttributes()) {\n-            attribute.setSchema(null);\n-            attributeDAO.delete(attribute.getId(), attribute.getClass());\n+            attributeIds.add(attribute.getId());\n+            attributeClass = attribute.getClass();\n+        }\n+        for (Long attributeId : attributeIds) {\n+            attributeDAO.delete(attributeId, attributeClass);\n         }\n-        schema.setAttributes(Collections.EMPTY_LIST);\n \n         resourceDAO.deleteMappings(name, SchemaType.byClass(reference));\n "},{"sha":"9443aeec4bd748d745aa1c30b5b41313cedb71c8","filename":"core/src/main/java/org/syncope/core/persistence/validation/AbstractAttributeValidator.java","status":"modified","additions":9,"deletions":11,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAbstractAttributeValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAbstractAttributeValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAbstractAttributeValidator.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -24,8 +24,7 @@ public abstract class AbstractAttributeValidator implements AttributeValidator {\n \n     final protected AbstractSchema schema;\n \n-    public AbstractAttributeValidator(AbstractSchema schema) {\n-\n+    public AbstractAttributeValidator(final AbstractSchema schema) {\n         this.schema = schema;\n     }\n \n@@ -41,7 +40,8 @@ public <T extends AbstractAttributeValue> T getValue(String value,\n     }\n \n     private <T extends AbstractAttributeValue> T parseValue(String value,\n-            T attributeValue) throws ParseException {\n+            T attributeValue)\n+            throws ParseException {\n         Exception exception = null;\n \n         switch (schema.getType()) {\n@@ -76,11 +76,8 @@ private <T extends AbstractAttributeValue> T parseValue(String value,\n \n             case Date:\n                 try {\n-                    final SimpleDateFormat formatter =\n-                            schema.getFormatter(SimpleDateFormat.class);\n-                    formatter.setLenient(false);\n-                    attributeValue.setDateValue(\n-                            new Date(formatter.parse(value).getTime()));\n+                    attributeValue.setDateValue(new Date(schema.getFormatter(\n+                            SimpleDateFormat.class).parse(value).getTime()));\n                 } catch (java.text.ParseException pe) {\n                     exception = pe;\n                 }\n@@ -96,5 +93,6 @@ private <T extends AbstractAttributeValue> T parseValue(String value,\n     }\n \n     protected abstract <T extends AbstractAttributeValue> void doValidate(\n-            T attributeValue) throws ValidationFailedException;\n+            T attributeValue)\n+            throws ValidationFailedException;\n }"},{"sha":"b5d00f270891859218888a71b66518cf947cd8ca","filename":"core/src/main/java/org/syncope/core/persistence/validation/AttributeValidator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAttributeValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAttributeValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAttributeValidator.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"sha":"3466386502e278d5db16d961e680a17397097211","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -37,6 +37,7 @@ public class SchemaController extends AbstractController {\n \n     @Autowired\n     private SchemaDAO schemaDAO;\n+\n     @Autowired\n     private SchemaDataBinder schemaDataBinder;\n "},{"sha":"0c5b70522249c47b477df346a1876f178d356667","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -40,6 +40,7 @@\n import java.util.Set;\n import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n+import jpasymphony.dao.JPAWorkflowEntryDAO;\n import org.springframework.http.HttpStatus;\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.mod.UserMod;\n@@ -54,7 +55,6 @@\n import org.syncope.core.persistence.propagation.ResourceOperations;\n import org.syncope.core.rest.data.InvalidSearchConditionException;\n import org.syncope.core.workflow.Constants;\n-import org.syncope.core.workflow.SpringHibernateJPAWorkflowStore;\n import org.syncope.core.workflow.WorkflowInitException;\n import org.syncope.types.SyncopeClientExceptionType;\n \n@@ -65,15 +65,15 @@ public class UserController extends AbstractController {\n     @Autowired\n     private SyncopeUserDAO syncopeUserDAO;\n \n+    @Autowired\n+    private JPAWorkflowEntryDAO workflowEntryDAO;\n+\n     @Autowired\n     private UserDataBinder userDataBinder;\n \n     @Autowired\n     private Workflow userWorkflow;\n \n-    @Autowired(required = false)\n-    private SpringHibernateJPAWorkflowStore workflowStore;\n-\n     @Autowired\n     private PropagationManager propagationManager;\n \n@@ -333,8 +333,8 @@ public UserTO create(HttpServletResponse response,\n             wie = e;\n \n             // Removing dirty workflow entry\n-            if (workflowStore != null && e.getWorkflowEntryId() != null) {\n-                workflowStore.delete(e.getWorkflowEntryId());\n+            if (e.getWorkflowEntryId() != null) {\n+                workflowEntryDAO.delete(e.getWorkflowEntryId());\n             }\n \n             // Use the found workflow id\n@@ -492,8 +492,8 @@ public void delete(@PathVariable(\"userId\") Long userId,\n         propagationManager.delete(user, syncResourceNames);\n \n         // Now that delete has been propagated, let's remove everything\n-        if (workflowStore != null && user.getWorkflowId() != null) {\n-            workflowStore.delete(user.getWorkflowId());\n+        if (user.getWorkflowId() != null) {\n+            workflowEntryDAO.delete(user.getWorkflowId());\n         }\n         syncopeUserDAO.delete(userId);\n     }"},{"sha":"35f62722cef990b07e3ed74e20d61e680b5f0098","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":23,"deletions":45,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -114,12 +114,12 @@ private <T extends AbstractSchema> T getSchema(\n                 LOG.debug(\"Ignoring invalid schema \" + schemaName);\n             }\n         } else if (schema.isVirtual() || schema.isReadonly()) {\n-                schema = null;\n+            schema = null;\n \n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Ignoring virtual or readonly schema \" + schemaName);\n-                }\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Ignoring virtual or readonly schema \" + schemaName);\n             }\n+        }\n \n         return schema;\n     }\n@@ -137,13 +137,11 @@ private <T extends AbstractDerivedSchema> T getDerivedSchema(\n         return derivedSchema;\n     }\n \n-    private TargetResource getResource(String resourceName) {\n+    private TargetResource getResource(final String resourceName) {\n         TargetResource resource = resourceDAO.find(resourceName);\n \n         if (resource == null) {\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Ignoring invalid resource \" + resourceName);\n-            }\n+            LOG.debug(\"Ignoring invalid resource {} \", resourceName);\n         }\n \n         return resource;\n@@ -168,16 +166,11 @@ private void fillAttribute(List<String> values,\n         AbstractAttributeValue attributeValue;\n         for (String value : valuesProvided) {\n             if (value == null || value.isEmpty()) {\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Null value for \" + schema.getName()\n-                            + \", ignoring\");\n-                }\n+                LOG.debug(\"Null value for {}, ignoring\", schema.getName());\n             } else {\n-                attributeValue = attributableUtil.newAttributeValue();\n-\n                 try {\n                     attributeValue = attribute.addValue(value,\n-                            attributeValue);\n+                            attributableUtil);\n                 } catch (ValidationException e) {\n                     LOG.error(\"Invalid value for attribute \"\n                             + schema.getName() + \": \" + value, e);\n@@ -283,10 +276,7 @@ private <T extends AbstractSchema> SyncopeClientException checkMandatory(\n         resources.addAll(attributable.getTargetResources());\n         resources.addAll(attributable.getInheritedTargetResources());\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Check mandatory constraint among resources \"\n-                    + resources);\n-        }\n+        LOG.debug(\"Check mandatory constraint among resources {}\", resources);\n \n         // Check if there is some mandatory schema defined for which no value\n         // has been provided\n@@ -384,7 +374,7 @@ protected ResourceOperations fill(\n         }\n \n         // 2. attributes to be updated\n-        Set<Long> valuesToBeRemoved = null;\n+        Set<Long> valuesToBeRemoved;\n         for (AttributeMod attributeMod :\n                 attributableMod.getAttributesToBeUpdated()) {\n \n@@ -451,9 +441,7 @@ protected ResourceOperations fill(\n             compositeErrorException.addException(requiredValuesMissing);\n         }\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"About attributes to be updated:\\n\" + resourceOperations);\n-        }\n+        LOG.debug(\"About attributes to be updated:\\n{}\", resourceOperations);\n \n         // 3. derived attributes to be removed\n         for (String derivedAttributeToBeRemoved :\n@@ -473,20 +461,16 @@ protected ResourceOperations fill(\n                 derivedAttribute = attributable.getDerivedAttribute(\n                         derivedSchema.getName());\n                 if (derivedAttribute == null) {\n-                    if (LOG.isDebugEnabled()) {\n-                        LOG.debug(\"No derived attribute found for schema \"\n-                                + derivedSchema.getName());\n-                    }\n+                    LOG.debug(\"No derived attribute found for schema {}\",\n+                            derivedSchema.getName());\n                 } else {\n                     derivedAttributeDAO.delete(derivedAttribute);\n                 }\n             }\n         }\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"About derived attributes to be removed:\\n\"\n-                    + resourceOperations);\n-        }\n+        LOG.debug(\"About derived attributes to be removed:\\n{}\",\n+                resourceOperations);\n \n         // 4. derived attributes to be added\n         for (String derivedAttributeToBeAdded :\n@@ -510,13 +494,11 @@ protected ResourceOperations fill(\n             }\n         }\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"About derived attributes to be added:\\n\"\n-                    + resourceOperations);\n-        }\n+        LOG.debug(\"About derived attributes to be added:\\n{}\",\n+                resourceOperations);\n \n         // 5. resources to be removed\n-        TargetResource resource = null;\n+        TargetResource resource;\n         for (String resourceToBeRemoved :\n                 attributableMod.getResourcesToBeRemoved()) {\n \n@@ -536,9 +518,7 @@ protected ResourceOperations fill(\n             }\n         }\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"About resources to be removed:\\n\" + resourceOperations);\n-        }\n+        LOG.debug(\"About resources to be removed:\\n{}\", resourceOperations);\n \n         // 6. resources to be added\n         for (String resourceToBeAdded :\n@@ -560,9 +540,7 @@ protected ResourceOperations fill(\n             }\n         }\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"About resources to be added:\\n\" + resourceOperations);\n-        }\n+        LOG.debug(\"About resources to be added:\\n{}\", resourceOperations);\n \n         // Throw composite exception if there is at least one element set\n         // in the composing exceptions\n@@ -625,8 +603,8 @@ protected void fill(AbstractAttributable attributable,\n         }\n \n         // 2. derived attributes\n-        AbstractDerivedSchema derivedSchema = null;\n-        AbstractDerivedAttribute derivedAttribute = null;\n+        AbstractDerivedSchema derivedSchema;\n+        AbstractDerivedAttribute derivedAttribute;\n         for (AttributeTO attributeTO : attributableTO.getDerivedAttributes()) {\n \n             derivedSchema = getDerivedSchema(attributeTO.getSchema(),\n@@ -641,7 +619,7 @@ protected void fill(AbstractAttributable attributable,\n         }\n \n         // 3. resources\n-        TargetResource resource = null;\n+        TargetResource resource;\n         for (String resourceName : attributableTO.getResources()) {\n             resource = getResource(resourceName);\n "},{"sha":"05b3ff1165bcbb3fa1ef2e9628408ae7fbfd4d6f","filename":"core/src/main/java/org/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -32,7 +32,6 @@\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n-import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n@@ -46,10 +45,13 @@ public class SchemaDataBinder {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(\n             SchemaDataBinder.class);\n+\n     private static final String[] ignoreSchemaProperties = {\n         \"derivedSchemas\", \"attributes\"};\n+\n     @Autowired\n     private DerivedSchemaDAO derivedSchemaDAO;\n+\n     @Autowired\n     private JexlEngine jexlEngine;\n "},{"sha":"4c0308e5fa77ae16a24f918cb5f5da0728ae618e","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -163,21 +163,29 @@ public ResourceOperations update(SyncopeUser user, UserMod userMod)\n                 if (membershipToBeAddedRoleIds.contains(\n                         membership.getSyncopeRole().getId())) {\n \n+                    Set<Long> attributeIds = new HashSet<Long>(\n+                            membership.getAttributes().size());\n                     for (AbstractAttribute attribute :\n                             membership.getAttributes()) {\n \n-                        attributeDAO.delete(attribute.getId(),\n+                        attributeIds.add(attribute.getId());\n+                    }\n+                    for (Long attributeId : attributeIds) {\n+                        attributeDAO.delete(attributeId,\n                                 MembershipAttribute.class);\n                     }\n-                    membership.getAttributes().clear();\n \n+                    Set<Long> derivedAttributeIds = new HashSet<Long>(\n+                            membership.getDerivedAttributes().size());\n                     for (AbstractDerivedAttribute derivedAttribute :\n                             membership.getDerivedAttributes()) {\n \n-                        derivedAttributeDAO.delete(derivedAttribute.getId(),\n+                        derivedAttributeIds.add(derivedAttribute.getId());\n+                    }\n+                    for (Long derivedAttributeId : derivedAttributeIds) {\n+                        derivedAttributeDAO.delete(derivedAttributeId,\n                                 MembershipDerivedAttribute.class);\n                     }\n-                    membership.getDerivedAttributes().clear();\n                 } else {\n                     user.removeMembership(membership);\n "},{"sha":"8364ed3e38ede54ba849833f5a161e0f9ccd0061","filename":"core/src/main/java/org/syncope/core/workflow/JPAPropertySet.java","status":"removed","additions":0,"deletions":209,"changes":209,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b7c24f5cb0e0c67f49aa8282cb485694283110e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FJPAPropertySet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b7c24f5cb0e0c67f49aa8282cb485694283110e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FJPAPropertySet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FJPAPropertySet.java?ref=9b7c24f5cb0e0c67f49aa8282cb485694283110e","patch":"@@ -1,209 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.workflow;\n-\n-import com.opensymphony.module.propertyset.AbstractPropertySet;\n-import com.opensymphony.module.propertyset.PropertyException;\n-import com.opensymphony.module.propertyset.PropertySet;\n-import java.util.Collection;\n-import java.util.Date;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-import java.util.Set;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.beans.OSWorkflowProperty;\n-import org.syncope.core.persistence.dao.OSWorkflowPropertyDAO;\n-import org.w3c.dom.Document;\n-\n-/**\n- * The JPAPropertySet is a PropertySet implementation that\n- * will store any primitive or object via JPA.\n- *\n- * @see com.opensymphony.module.propertyset.PropertySet\n- */\n-public class JPAPropertySet extends AbstractPropertySet {\n-\n-    /**\n-     * Logger.\n-     */\n-    protected static final Logger LOG =\n-            LoggerFactory.getLogger(JPAPropertySet.class);\n-    private OSWorkflowPropertyDAO osWorkflowPropertyDAO;\n-    private long workflowEntryId;\n-\n-    @Override\n-    public void init(Map config, Map args) {\n-        super.init(config, args);\n-\n-        workflowEntryId = (Long) args.get(\"entryId\");\n-        osWorkflowPropertyDAO =\n-                (OSWorkflowPropertyDAO) args.get(\"osWorkflowPropertyDAO\");\n-    }\n-\n-    @Override\n-    public Collection getKeys(String prefix, int i)\n-            throws PropertyException {\n-\n-        List<OSWorkflowProperty> properties =\n-                osWorkflowPropertyDAO.findAll(workflowEntryId);\n-        Set<String> keys = new HashSet<String>();\n-        for (OSWorkflowProperty property : properties) {\n-            if (prefix != null\n-                    && property.getPropertyKey().startsWith(prefix)) {\n-\n-                keys.add(property.getPropertyKey());\n-            }\n-        }\n-        return keys;\n-    }\n-\n-    @Override\n-    public boolean exists(String key) throws PropertyException {\n-        return osWorkflowPropertyDAO.find(workflowEntryId, key) != null;\n-    }\n-\n-    @Override\n-    @Transactional\n-    public void remove(String string) throws PropertyException {\n-        osWorkflowPropertyDAO.delete(workflowEntryId, string);\n-    }\n-\n-    @Override\n-    protected void setImpl(int type, String key, Object value)\n-            throws PropertyException {\n-\n-        OSWorkflowProperty property = new OSWorkflowProperty();\n-        property.setPropertyKey(key);\n-        property.setWorkflowEntryId(workflowEntryId);\n-\n-        try {\n-            switch (type) {\n-                case BOOLEAN:\n-                    property.setBooleanValue((Boolean) value);\n-                    break;\n-\n-                case INT:\n-                    property.setIntValue((Integer) value);\n-                    break;\n-\n-                case LONG:\n-                    property.setLongValue((Long) value);\n-                    break;\n-\n-                case DOUBLE:\n-                    property.setDoubleValue((Double) value);\n-                    break;\n-\n-                case STRING:\n-                    property.setStringValue((String) value);\n-                    break;\n-\n-                case TEXT:\n-                    property.setTextValue((String) value);\n-                    break;\n-\n-                case DATE:\n-                    property.setDateValue((Date) value);\n-                    break;\n-\n-                case XML:\n-                    break;\n-                case DATA:\n-                    break;\n-                case PROPERTIES:\n-                    break;\n-                case OBJECT:\n-                    break;\n-            }\n-        } catch (Throwable t) {\n-            LOG.error(\"While setting property value\", t);\n-            throw new PropertyException(t.getMessage());\n-        }\n-\n-        osWorkflowPropertyDAO.save(property);\n-    }\n-\n-    @Override\n-    protected Object get(int type, String key) throws PropertyException {\n-        OSWorkflowProperty property =\n-                osWorkflowPropertyDAO.find(workflowEntryId, key);\n-\n-        Object result = null;\n-        switch (type) {\n-            case BOOLEAN:\n-                result = property.getBooleanValue();\n-                break;\n-\n-            case INT:\n-                result = property.getIntValue();\n-                break;\n-\n-            case LONG:\n-                result = property.getLongValue();\n-                break;\n-\n-            case DOUBLE:\n-                result = property.getDoubleValue();\n-                break;\n-\n-            case STRING:\n-                result = property.getStringValue();\n-                break;\n-\n-            case TEXT:\n-                result = property.getTextValue();\n-                break;\n-\n-            case DATE:\n-                result = property.getDateValue();\n-                break;\n-\n-            case XML:\n-                break;\n-            case DATA:\n-                break;\n-            case PROPERTIES:\n-                break;\n-            case OBJECT:\n-                break;\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public int getType(String key) throws PropertyException {\n-        throw new UnsupportedOperationException(\"Not supported yet.\");\n-    }\n-\n-    @Override\n-    public Object getObject(String key) {\n-        throw new UnsupportedOperationException(\"Not supported yet.\");\n-    }\n-\n-    @Override\n-    public Properties getProperties(String key) {\n-        throw new UnsupportedOperationException(\"Not supported yet.\");\n-    }\n-\n-    @Override\n-    public Document getXML(String key) {\n-        throw new UnsupportedOperationException(\"Not supported yet.\");\n-    }\n-}"},{"sha":"01906c915fb60e87017232b2cad33e5194af0533","filename":"core/src/main/java/org/syncope/core/workflow/SpringHibernateJPAWorkflowStore.java","status":"removed","additions":0,"deletions":70,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b7c24f5cb0e0c67f49aa8282cb485694283110e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FSpringHibernateJPAWorkflowStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b7c24f5cb0e0c67f49aa8282cb485694283110e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FSpringHibernateJPAWorkflowStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FSpringHibernateJPAWorkflowStore.java?ref=9b7c24f5cb0e0c67f49aa8282cb485694283110e","patch":"@@ -1,70 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.workflow;\n-\n-import com.opensymphony.workflow.StoreException;\n-import com.opensymphony.workflow.spi.hibernate.HibernateWorkflowEntry;\n-import com.opensymphony.workflow.spi.hibernate3.AbstractHibernateWorkflowStore;\n-import java.util.List;\n-import java.util.Map;\n-import javax.persistence.EntityManager;\n-import javax.persistence.EntityNotFoundException;\n-import javax.persistence.PersistenceContext;\n-import javax.persistence.PersistenceContextType;\n-import org.hibernate.Session;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Configurable;\n-import org.syncope.core.persistence.beans.OSWorkflowProperty;\n-import org.syncope.core.persistence.dao.OSWorkflowPropertyDAO;\n-\n-@Configurable\n-public class SpringHibernateJPAWorkflowStore\n-        extends AbstractHibernateWorkflowStore {\n-\n-    @PersistenceContext(type = PersistenceContextType.EXTENDED)\n-    private EntityManager entityManager;\n-    @Autowired\n-    private OSWorkflowPropertyDAO osWorkflowPropertyDAO;\n-\n-    @Override\n-    public void init(Map props) throws StoreException {\n-    }\n-\n-    @Override\n-    protected Object execute(InternalCallback action) throws StoreException {\n-        return action.doInHibernate((Session) entityManager.getDelegate());\n-    }\n-\n-    public void delete(Long entryId) {\n-        // 1. remove this workflow entry\n-        HibernateWorkflowEntry entry = null;\n-        try {\n-            entry = entityManager.find(HibernateWorkflowEntry.class, entryId);\n-        } catch (EntityNotFoundException e) {\n-        }\n-        if (entry != null) {\n-            entityManager.remove(entry);\n-        }\n-\n-        // 2. remove any property set associated with this workflow entry\n-        List<OSWorkflowProperty> properties =\n-                osWorkflowPropertyDAO.findAll(entryId);\n-        if (properties != null) {\n-            for (OSWorkflowProperty property : properties) {\n-                osWorkflowPropertyDAO.delete(property.getId());\n-            }\n-        }\n-    }\n-}"},{"sha":"ff1fe8d6e7bb2dc425be9c8ef0db688a486590c2","filename":"core/src/main/resources/META-INF/com/opensymphony/workflow/spi/hibernate3/HibernateCurrentStep.hbm.xml","status":"removed","additions":0,"deletions":20,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b7c24f5cb0e0c67f49aa8282cb485694283110e/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fcom%2Fopensymphony%2Fworkflow%2Fspi%2Fhibernate3%2FHibernateCurrentStep.hbm.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b7c24f5cb0e0c67f49aa8282cb485694283110e/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fcom%2Fopensymphony%2Fworkflow%2Fspi%2Fhibernate3%2FHibernateCurrentStep.hbm.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fcom%2Fopensymphony%2Fworkflow%2Fspi%2Fhibernate3%2FHibernateCurrentStep.hbm.xml?ref=9b7c24f5cb0e0c67f49aa8282cb485694283110e","patch":"@@ -1,20 +0,0 @@\n-<?xml version=\"1.0\"?>\n-<!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD//EN\" \"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd\">\n-\n-<hibernate-mapping>\n-    <class name=\"com.opensymphony.workflow.spi.hibernate.HibernateCurrentStep\" table=\"OS_CURRENTSTEP\">\n-        <id name=\"id\" unsaved-value=\"-1\">\n-            <generator class=\"native\"/>\n-        </id>\n-        <property name=\"actionId\" column=\"action_Id\"/>\n-        <property name=\"caller\" column=\"caller\"/>\n-        <property name=\"finishDate\" column=\"finish_Date\"/>\n-        <property name=\"startDate\" column=\"start_Date\"/>\n-        <property name=\"dueDate\" column=\"due_Date\"/>\n-        <property name=\"owner\" column=\"owner\"/>\n-        <property name=\"status\" column=\"status\"/>\n-        <property name=\"stepId\" column=\"step_Id\"/>\n-\n-        <many-to-one name=\"entry\" class=\"com.opensymphony.workflow.spi.hibernate.HibernateWorkflowEntry\" column=\"entry_Id\" cascade=\"none\"/>\n-    </class>\n-</hibernate-mapping>"},{"sha":"d9fed759b58263efff05e967363a3b414e99adf8","filename":"core/src/main/resources/META-INF/com/opensymphony/workflow/spi/hibernate3/HibernateHistoryStep.hbm.xml","status":"removed","additions":0,"deletions":20,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b7c24f5cb0e0c67f49aa8282cb485694283110e/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fcom%2Fopensymphony%2Fworkflow%2Fspi%2Fhibernate3%2FHibernateHistoryStep.hbm.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b7c24f5cb0e0c67f49aa8282cb485694283110e/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fcom%2Fopensymphony%2Fworkflow%2Fspi%2Fhibernate3%2FHibernateHistoryStep.hbm.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fcom%2Fopensymphony%2Fworkflow%2Fspi%2Fhibernate3%2FHibernateHistoryStep.hbm.xml?ref=9b7c24f5cb0e0c67f49aa8282cb485694283110e","patch":"@@ -1,20 +0,0 @@\n-<?xml version=\"1.0\"?>\n-<!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD//EN\" \"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd\">\n-\n-<hibernate-mapping>\n-    <class name=\"com.opensymphony.workflow.spi.hibernate.HibernateHistoryStep\" table=\"OS_HISTORYSTEP\">\n-        <id name=\"id\" unsaved-value=\"-1\">\n-            <generator class=\"native\"/>\n-        </id>\n-        <property name=\"actionId\" column=\"action_Id\"/>\n-        <property name=\"caller\" column=\"caller\"/>\n-        <property name=\"finishDate\" column=\"finish_Date\"/>\n-        <property name=\"startDate\" column=\"start_Date\"/>\n-        <property name=\"dueDate\" column=\"due_Date\"/>\n-        <property name=\"owner\" column=\"owner\"/>\n-        <property name=\"status\" column=\"status\"/>\n-        <property name=\"stepId\" column=\"step_Id\"/>\n-\n-        <many-to-one name=\"entry\" class=\"com.opensymphony.workflow.spi.hibernate.HibernateWorkflowEntry\" column=\"entry_Id\" cascade=\"none\"/>\n-    </class>\n-</hibernate-mapping>"},{"sha":"12e8a9f6bbaca20f14798c1aae2919e50e972b8f","filename":"core/src/main/resources/META-INF/com/opensymphony/workflow/spi/hibernate3/HibernateWorkflowEntry.hbm.xml","status":"removed","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b7c24f5cb0e0c67f49aa8282cb485694283110e/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fcom%2Fopensymphony%2Fworkflow%2Fspi%2Fhibernate3%2FHibernateWorkflowEntry.hbm.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b7c24f5cb0e0c67f49aa8282cb485694283110e/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fcom%2Fopensymphony%2Fworkflow%2Fspi%2Fhibernate3%2FHibernateWorkflowEntry.hbm.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fcom%2Fopensymphony%2Fworkflow%2Fspi%2Fhibernate3%2FHibernateWorkflowEntry.hbm.xml?ref=9b7c24f5cb0e0c67f49aa8282cb485694283110e","patch":"@@ -1,28 +0,0 @@\n-<?xml version=\"1.0\"?>\n-<!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD//EN\" \"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd\">\n-\n-<hibernate-mapping>\n-    <class name=\"com.opensymphony.workflow.spi.hibernate.HibernateWorkflowEntry\" table=\"OS_WFENTRY\">\n-        <id name=\"id\" unsaved-value=\"-1\">\n-            <generator class=\"native\"/>\n-        </id>\n-\n-\t\t<version name=\"version\"/>\n-\n-        <property name=\"workflowName\" column=\"name\"/>\n-        <property name=\"state\"/>\n-\n-        <bag name=\"currentSteps\" cascade=\"all-delete-orphan\" lazy=\"true\" inverse=\"true\">\n-            <key column=\"entry_Id\"/>\n-            <!-- index column=\"stepIndex\"/-->\n-            <one-to-many class=\"com.opensymphony.workflow.spi.hibernate.HibernateCurrentStep\"/>\n-        </bag>\n-\n-        <bag name=\"historySteps\" cascade=\"all\" lazy=\"true\" inverse=\"true\">\n-            <key column=\"entry_Id\"/>\n-            <!-- index column=\"stepIndex\"/-->\n-            <one-to-many class=\"com.opensymphony.workflow.spi.hibernate.HibernateHistoryStep\"/>\n-        </bag>\n-\n-    </class>\n-</hibernate-mapping>"},{"sha":"27c8f07c42a55c369e60c7344f1422b80915018b","filename":"core/src/main/resources/META-INF/persistence.xml","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fpersistence.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fpersistence.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fpersistence.xml?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -17,6 +17,5 @@\n              xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n              http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\n              version=\"1.0\">\n-    <!-- transaction-type is set to non-JTA by default, but changed by Spring, if configured -->\n     <persistence-unit name=\"syncopePersistenceUnit\" transaction-type=\"RESOURCE_LOCAL\"/>\n </persistence>"},{"sha":"31189e18ddb546aabbb0d21bd0802732cbbbd68e","filename":"core/src/main/resources/META-INF/propertyset.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fpropertyset.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fpropertyset.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fpropertyset.xml?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -1,4 +1,4 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <propertysets>\n-    <propertyset name=\"jpa\" class=\"org.syncope.core.workflow.JPAPropertySet\"/>\n+    <propertyset name=\"jpa\" class=\"jpasymphony.module.propertyset.jpa.JPAPropertySet\"/>\n </propertysets>"},{"sha":"350eb539088caa60852aa0aa2955d1c3c4e1c586","filename":"core/src/main/resources/workflowContext.xml","status":"modified","additions":18,"deletions":12,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -13,19 +13,22 @@\n   limitations under the License.\n -->\n <beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:context=\"http://www.springframework.org/schema/context\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n-       http://www.springframework.org/schema/beans/spring-beans.xsd\">\n-    \n-    <bean id=\"workflowStore\" class=\"org.syncope.core.workflow.SpringHibernateJPAWorkflowStore\">\n-        <property name=\"propertySetDelegate\">\n-            <bean id=\"propertySetDelegate\"\n-                  class=\"org.syncope.core.workflow.PropertySetDelegateImpl\"/>\n-        </property>\n-    </bean>\n+       http://www.springframework.org/schema/beans/spring-beans.xsd\n+       http://www.springframework.org/schema/context\n+       http://www.springframework.org/schema/context/spring-context.xsd\">\n+\n+    <context:component-scan base-package=\"jpasymphony.dao\"/>\n+\n+    <bean id=\"propertySetDelegate\"\n+          class=\"jpasymphony.workflow.spi.jpa.JPAPropertySetDelegate\"/>\n+    <bean id=\"workflowStore\"\n+          class=\"jpasymphony.workflow.spi.jpa.JPAWorkflowStore\"/>\n \n     <bean id=\"workflowFactory\"\n-          class=\"com.opensymphony.workflow.spi.hibernate.SpringWorkflowFactory\"\n+          class=\"jpasymphony.workflow.spi.jpa.SpringWorkflowFactory\"\n           init-method=\"init\">\n         <property name=\"resource\">\n             <value>workflows.xml</value>\n@@ -35,7 +38,8 @@\n         </property>\n     </bean>\n \n-    <bean id=\"osworkflowConfiguration\" class=\"com.opensymphony.workflow.config.SpringConfiguration\">\n+    <bean id=\"osworkflowConfiguration\"\n+          class=\"com.opensymphony.workflow.config.SpringConfiguration\">\n         <property name=\"store\">\n             <ref local=\"workflowStore\"/>\n         </property>\n@@ -44,9 +48,11 @@\n         </property>\n     </bean>\n \n-    <bean id=\"workflowTypeResolver\" class=\"com.opensymphony.workflow.util.SpringTypeResolver\"/>\n+    <bean id=\"workflowTypeResolver\"\n+          class=\"com.opensymphony.workflow.util.SpringTypeResolver\"/>\n \n-    <bean id=\"userWorkflow\" class=\"com.opensymphony.workflow.basic.BasicWorkflow\">\n+    <bean id=\"userWorkflow\"\n+          class=\"com.opensymphony.workflow.basic.BasicWorkflow\">\n         <constructor-arg>\n             <value>userWorkflow</value>\n         </constructor-arg>"},{"sha":"44efb38c0900be7a2f00af96edfeaf264f1a0a04","filename":"core/src/test/java/jpasymphony/dao/JPAWorkflowEntryTest.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Ftest%2Fjava%2Fjpasymphony%2Fdao%2FJPAWorkflowEntryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Ftest%2Fjava%2Fjpasymphony%2Fdao%2FJPAWorkflowEntryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Fjpasymphony%2Fdao%2FJPAWorkflowEntryTest.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -0,0 +1,53 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package jpasymphony.dao;\n+\n+import static org.junit.Assert.*;\n+\n+import com.opensymphony.workflow.spi.WorkflowEntry;\n+import jpasymphony.beans.JPAWorkflowEntry;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(locations = {\n+    \"classpath:persistenceContext.xml\",\n+    \"classpath:workflowContext.xml\"\n+})\n+public class JPAWorkflowEntryTest {\n+\n+    @Autowired\n+    private JPAWorkflowEntryDAO jpaWorkflowEntryDAO;\n+\n+    @Test\n+    public final void create() {\n+        JPAWorkflowEntry entry = new JPAWorkflowEntry();\n+        entry.setWorkflowName(\"userWorkflow\");\n+        entry.setWorkflowState(WorkflowEntry.CREATED);\n+\n+        entry = jpaWorkflowEntryDAO.save(entry);\n+        assertNotNull(entry);\n+\n+        JPAWorkflowEntry actual = jpaWorkflowEntryDAO.find(entry.getId());\n+        assertNotNull(actual);\n+\n+        assertEquals(entry, actual);\n+    }\n+}"},{"sha":"0fb4340a1db9c682d4201a2ca251b2d74a2aed02","filename":"core/src/test/java/jpasymphony/relationships/JPAWorkflowEntryTest.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Ftest%2Fjava%2Fjpasymphony%2Frelationships%2FJPAWorkflowEntryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Ftest%2Fjava%2Fjpasymphony%2Frelationships%2FJPAWorkflowEntryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Fjpasymphony%2Frelationships%2FJPAWorkflowEntryTest.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -0,0 +1,72 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package jpasymphony.relationships;\n+\n+import com.opensymphony.workflow.spi.WorkflowEntry;\n+import com.opensymphony.workflow.spi.WorkflowStore;\n+import static org.junit.Assert.*;\n+\n+import com.opensymphony.workflow.StoreException;\n+import com.opensymphony.workflow.config.SpringConfiguration;\n+import com.opensymphony.workflow.spi.Step;\n+import java.util.Date;\n+import jpasymphony.beans.JPACurrentStep;\n+import jpasymphony.dao.JPAWorkflowEntryDAO;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(locations = {\n+    \"classpath:persistenceContext.xml\",\n+    \"classpath:workflowContext.xml\"\n+})\n+public class JPAWorkflowEntryTest {\n+\n+    @Autowired\n+    private SpringConfiguration springConfiguration;\n+\n+    @Autowired\n+    private JPAWorkflowEntryDAO workflowEntryDAO;\n+\n+    @Test\n+    public final void delete()\n+            throws StoreException {\n+\n+        WorkflowStore workflowStore = springConfiguration.getWorkflowStore();\n+        WorkflowEntry entry = workflowStore.createEntry(\"userWorkflow\");\n+        assertNotNull(entry);\n+        Long entryId = entry.getId();\n+\n+        Step step = workflowStore.createCurrentStep(entry.getId(), 11,\n+                \"owner\", new Date(), new Date(), \"status\", new long[0]);\n+        assertNotNull(step);\n+\n+        ((JPACurrentStep) step).setActionId(999);\n+        workflowStore.moveToHistory(step);\n+        step = workflowStore.createCurrentStep(entry.getId(), 12,\n+                \"owner\", new Date(), new Date(), \"status\", new long[0]);\n+\n+        workflowEntryDAO.delete(entryId);\n+\n+        workflowEntryDAO.flush();\n+\n+        assertNull(workflowEntryDAO.find(entryId));\n+    }\n+}"},{"sha":"8324cc04d7a4acdc6acc337afe9e9b8504c33c17","filename":"core/src/test/java/org/syncope/core/persistence/dao/AttributeTest.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeTest.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -21,16 +21,17 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.user.UserAttribute;\n-import org.syncope.core.persistence.beans.user.UserAttributeValue;\n import org.syncope.core.persistence.beans.user.UserSchema;\n import org.syncope.core.persistence.validation.ValidationException;\n import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.rest.data.AttributableUtil;\n \n @Transactional\n public class AttributeTest extends AbstractTest {\n \n     @Autowired\n     private AttributeDAO attributeDAO;\n+\n     @Autowired\n     private SchemaDAO userSchemaDAO;\n \n@@ -52,7 +53,8 @@ public final void findById() {\n     }\n \n     @Test\n-    public final void save() throws ClassNotFoundException {\n+    public final void save()\n+            throws ClassNotFoundException {\n         UserSchema emailSchema = userSchemaDAO.find(\"email\", UserSchema.class);\n         assertNotNull(emailSchema);\n \n@@ -61,19 +63,16 @@ public final void save() throws ClassNotFoundException {\n \n         Exception thrown = null;\n         try {\n-            attribute.addValue(\"john.doe@gmail.com\",\n-                    new UserAttributeValue());\n-            attribute.addValue(\"mario.rossi@gmail.com\",\n-                    new UserAttributeValue());\n+            attribute.addValue(\"john.doe@gmail.com\", AttributableUtil.USER);\n+            attribute.addValue(\"mario.rossi@gmail.com\", AttributableUtil.USER);\n         } catch (ValidationException e) {\n             LOG.error(\"Unexpected exception\", e);\n             thrown = e;\n         }\n         assertNull(\"no validation exception expected here \", thrown);\n \n         try {\n-            attribute.addValue(\"http://www.apache.org\",\n-                    new UserAttributeValue());\n+            attribute.addValue(\"http://www.apache.org\", AttributableUtil.USER);\n         } catch (ValidationException e) {\n             thrown = e;\n         }"},{"sha":"2f907ccb60d27786877b7c1eee9d5026a4da0f92","filename":"core/src/test/java/org/syncope/core/persistence/dao/SchemaTest.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -22,8 +22,6 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.role.RoleSchema;\n import org.syncope.core.persistence.beans.user.UserSchema;\n-import org.syncope.core.persistence.dao.ResourceDAO;\n-import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.validation.MultiUniqueValueException;\n import org.syncope.core.persistence.AbstractTest;\n import org.syncope.types.SchemaValueType;\n@@ -33,8 +31,9 @@ public class SchemaTest extends AbstractTest {\n \n     @Autowired\n     private SchemaDAO schemaDAO;\n+\n     @Autowired\n-    private ResourceDAO resourceDAO;\n+    private AttributeDAO attributeDAO;\n \n     @Test\n     public final void findAll() {"},{"sha":"171e8f003d40fbbf4336f6183c344dfebdddf760","filename":"core/src/test/java/org/syncope/core/persistence/relationships/SchemaTest.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -37,12 +37,16 @@ public class SchemaTest extends AbstractTest {\n \n     @Autowired\n     private SyncopeUserDAO syncopeUserDAO;\n+\n     @Autowired\n     private SchemaDAO schemaDAO;\n+\n     @Autowired\n     private DerivedSchemaDAO derivedSchemaDAO;\n+\n     @Autowired\n     private AttributeDAO attributeDAO;\n+\n     @Autowired\n     private ResourceDAO resourceDAO;\n "},{"sha":"c9cbb5bc49abcf94c144d2375ebfc7e957e003fe","filename":"pom.xml","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/267989fbf8aee315405602b64cb05b8f0f25dbc3/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/267989fbf8aee315405602b64cb05b8f0f25dbc3/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=267989fbf8aee315405602b64cb05b8f0f25dbc3","patch":"@@ -113,8 +113,8 @@\n         <aspectj.version>1.6.9</aspectj.version>\n \n         <hibernate.version>3.4.0.GA</hibernate.version>\n-        <ehcache.version>2.2.0</ehcache.version>\n-        <ehcache-jgroupsreplication.version>1.3</ehcache-jgroupsreplication.version>\n+        <ehcache.version>2.3.0</ehcache.version>\n+        <ehcache-jgroupsreplication.version>1.4</ehcache-jgroupsreplication.version>\n         <jgroups.version>2.6.13.GA</jgroups.version>\n \n         <wicket.version>1.4.12</wicket.version>\n@@ -209,9 +209,8 @@\n             </dependency>\n             <dependency>\n                 <groupId>net.sf.ehcache</groupId>\n-                <artifactId>ehcache</artifactId>\n+                <artifactId>ehcache-core</artifactId>\n                 <version>${ehcache.version}</version>\n-                <type>pom</type>\n             </dependency>\n             <dependency>\n                 <groupId>net.sf.ehcache</groupId>"}]}