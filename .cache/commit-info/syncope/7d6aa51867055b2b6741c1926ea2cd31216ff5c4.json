{"sha":"7d6aa51867055b2b6741c1926ea2cd31216ff5c4","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjdkNmFhNTE4NjcwNTViMmI2NzQxYzE5MjZlYTJjZDMxMjE2ZmY1YzQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-06-09T10:49:55Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-06-09T11:28:15Z"},"message":"Upgrading commons-jexl + various changes to allow more for extendability","tree":{"sha":"d1f14954b933c9201eeb4dbd9a3a163865bbdba4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d1f14954b933c9201eeb4dbd9a3a163865bbdba4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7d6aa51867055b2b6741c1926ea2cd31216ff5c4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7d6aa51867055b2b6741c1926ea2cd31216ff5c4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7d6aa51867055b2b6741c1926ea2cd31216ff5c4","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7d6aa51867055b2b6741c1926ea2cd31216ff5c4/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d9f7f96a602e1d7b3e1e13523e332b6e256167fb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d9f7f96a602e1d7b3e1e13523e332b6e256167fb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d9f7f96a602e1d7b3e1e13523e332b6e256167fb"}],"stats":{"total":138,"additions":80,"deletions":58},"files":[{"sha":"cca3e2aeeaa261043a1eec920a4a14727ea81358","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskExecDAO.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7d6aa51867055b2b6741c1926ea2cd31216ff5c4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7d6aa51867055b2b6741c1926ea2cd31216ff5c4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java?ref=7d6aa51867055b2b6741c1926ea2cd31216ff5c4","patch":"@@ -128,12 +128,12 @@ public int count(final String taskKey) {\n     private static String toOrderByStatement(final List<OrderByClause> orderByClauses) {\n         StringBuilder statement = new StringBuilder();\n \n-        for (OrderByClause clause : orderByClauses) {\n+        orderByClauses.forEach(clause -> {\n             String field = clause.getField().trim();\n             if (ReflectionUtils.findField(JPATaskExec.class, field) != null) {\n                 statement.append(\"e.\").append(field).append(' ').append(clause.getDirection().name());\n             }\n-        }\n+        });\n \n         if (statement.length() == 0) {\n             statement.append(\"ORDER BY e.id DESC\");\n@@ -164,13 +164,14 @@ public <T extends Task> List<TaskExec> findAll(\n         return query.getResultList();\n     }\n \n+    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public TaskExec save(final TaskExec execution) {\n         return entityManager().merge(execution);\n     }\n \n-    @Override\n     @Transactional(rollbackFor = { Throwable.class })\n+    @Override\n     public void saveAndAdd(final String taskKey, final TaskExec execution) {\n         Task task = taskDAO.find(taskKey);\n         task.add(execution);"},{"sha":"985b32f076d67400b4d85d2a4b7644243d857073","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/jexl/SandboxUberspect.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7d6aa51867055b2b6741c1926ea2cd31216ff5c4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FSandboxUberspect.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7d6aa51867055b2b6741c1926ea2cd31216ff5c4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FSandboxUberspect.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FSandboxUberspect.java?ref=7d6aa51867055b2b6741c1926ea2cd31216ff5c4","patch":"@@ -29,6 +29,7 @@\n import java.util.Optional;\n import java.util.Set;\n import org.apache.commons.jexl3.JexlEngine;\n+import org.apache.commons.jexl3.internal.TemplateInterpreter;\n import org.apache.commons.jexl3.internal.introspection.Uberspect;\n import org.apache.commons.jexl3.introspection.JexlMethod;\n import org.apache.commons.jexl3.introspection.JexlPropertySet;\n@@ -65,7 +66,9 @@ public JexlMethod getConstructor(final Object ctorHandle, final Object... args)\n \n     @Override\n     public JexlMethod getMethod(final Object obj, final String method, final Object... args) {\n-        if (obj instanceof AnyTO || obj instanceof Any\n+        if (obj instanceof TemplateInterpreter) { // https://issues.apache.org/jira/browse/JEXL-351\n+            return super.getMethod(obj, method, args);\n+        } else if (obj instanceof AnyTO || obj instanceof Any\n                 || obj instanceof PlainAttr || obj instanceof Attr\n                 || obj instanceof MembershipTO || obj instanceof Membership\n                 || obj instanceof Realm || obj instanceof RealmTO) {"},{"sha":"0f2bce3e500d5e6050fd4034f6d52fb6e2eb318a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7d6aa51867055b2b6741c1926ea2cd31216ff5c4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7d6aa51867055b2b6741c1926ea2cd31216ff5c4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java?ref=7d6aa51867055b2b6741c1926ea2cd31216ff5c4","patch":"@@ -78,7 +78,7 @@ private static String getBeanName(final ExternalResource resource) {\n     @Override\n     public Connector getConnector(final ExternalResource resource) {\n         // Try to re-create connector bean from underlying resource (useful for managing failover scenarios)\n-        if (!ApplicationContextProvider.getBeanFactory().containsBean(getBeanName(resource))) {\n+        if (!ApplicationContextProvider.getBeanFactory().containsSingleton(getBeanName(resource))) {\n             registerConnector(resource);\n         }\n "},{"sha":"934f03a23619bc697f728bef4024f487325c8644","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAuditManager.java","status":"modified","additions":24,"deletions":22,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7d6aa51867055b2b6741c1926ea2cd31216ff5c4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAuditManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7d6aa51867055b2b6741c1926ea2cd31216ff5c4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAuditManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAuditManager.java?ref=7d6aa51867055b2b6741c1926ea2cd31216ff5c4","patch":"@@ -136,31 +136,33 @@ public void audit(\n             final Object output,\n             final Object... input) {\n \n-        Throwable throwable = null;\n-        if (output instanceof Throwable) {\n-            throwable = (Throwable) output;\n-        }\n-\n-        AuditEntry auditEntry = new AuditEntry();\n-        auditEntry.setWho(who);\n-        auditEntry.setLogger(new AuditLoggerName(type, category, subcategory, event, condition));\n-        auditEntry.setDate(new Date());\n-        auditEntry.setBefore(POJOHelper.serialize((maskSensitive(before))));\n-        if (throwable == null) {\n-            auditEntry.setOutput(POJOHelper.serialize((maskSensitive(output))));\n-        } else {\n-            auditEntry.setOutput(throwable.getMessage());\n-            auditEntry.setThrowable(ExceptionUtils2.getFullStackTrace(throwable));\n-        }\n-        if (input != null) {\n-            auditEntry.getInputs().addAll(Arrays.stream(input).\n-                    map(DefaultAuditManager::maskSensitive).map(POJOHelper::serialize).\n-                    collect(Collectors.toList()));\n-        }\n+        AuditLoggerName auditLoggerName = new AuditLoggerName(type, category, subcategory, event, condition);\n \n         org.apache.syncope.core.persistence.api.entity.Logger syncopeLogger =\n-                loggerDAO.find(auditEntry.getLogger().toLoggerName());\n+                loggerDAO.find(auditLoggerName.toLoggerName());\n         if (syncopeLogger != null && syncopeLogger.getLevel() == LoggerLevel.DEBUG) {\n+            Throwable throwable = null;\n+            if (output instanceof Throwable) {\n+                throwable = (Throwable) output;\n+            }\n+\n+            AuditEntry auditEntry = new AuditEntry();\n+            auditEntry.setWho(who);\n+            auditEntry.setLogger(auditLoggerName);\n+            auditEntry.setDate(new Date());\n+            auditEntry.setBefore(POJOHelper.serialize((maskSensitive(before))));\n+            if (throwable == null) {\n+                auditEntry.setOutput(POJOHelper.serialize((maskSensitive(output))));\n+            } else {\n+                auditEntry.setOutput(throwable.getMessage());\n+                auditEntry.setThrowable(ExceptionUtils2.getFullStackTrace(throwable));\n+            }\n+            if (input != null) {\n+                auditEntry.getInputs().addAll(Arrays.stream(input).\n+                        map(DefaultAuditManager::maskSensitive).map(POJOHelper::serialize).\n+                        collect(Collectors.toList()));\n+            }\n+\n             Logger logger = LoggerFactory.getLogger(\n                     AuditLoggerName.getAuditLoggerName(AuthContextUtils.getDomain()));\n             Logger eventLogger = LoggerFactory.getLogger("},{"sha":"08017a740e114d3fd2d439445bc6ba3c669d3f22","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractSchedTaskJobDelegate.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7d6aa51867055b2b6741c1926ea2cd31216ff5c4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7d6aa51867055b2b6741c1926ea2cd31216ff5c4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java?ref=7d6aa51867055b2b6741c1926ea2cd31216ff5c4","patch":"@@ -141,7 +141,7 @@ public void execute(final String taskKey, final boolean dryRun, final JobExecuti\n         execution.setEnd(new Date());\n \n         if (hasToBeRegistered(execution)) {\n-            taskExecDAO.saveAndAdd(taskKey, execution);\n+            register(execution);\n         }\n         task = taskDAO.save(task);\n \n@@ -189,4 +189,8 @@ protected abstract String doExecute(boolean dryRun, String executor, JobExecutio\n     protected boolean hasToBeRegistered(final TaskExec execution) {\n         return false;\n     }\n+\n+    protected void register(final TaskExec execution) {\n+        taskExecDAO.saveAndAdd(task.getKey(), execution);\n+    }\n }"},{"sha":"9d5a1712aa1be194ccb86b7d665509a73b693f15","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/DefaultNotificationManager.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7d6aa51867055b2b6741c1926ea2cd31216ff5c4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7d6aa51867055b2b6741c1926ea2cd31216ff5c4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java?ref=7d6aa51867055b2b6741c1926ea2cd31216ff5c4","patch":"@@ -295,6 +295,8 @@ public List<NotificationTask> createTasks(\n             final Object output,\n             final Object... input) {\n \n+        String currentEvent = AuditLoggerName.buildEvent(type, category, subcategory, event, condition);\n+\n         Any<?> any = null;\n \n         if (before instanceof UserTO) {\n@@ -333,12 +335,11 @@ public List<NotificationTask> createTasks(\n         List<NotificationTask> notifications = new ArrayList<>();\n         for (Notification notification : notificationDAO.findAll()) {\n             if (LOG.isDebugEnabled()) {\n-                notification.getAbouts().forEach(\n-                        about -> LOG.debug(\"Notification about {} defined: {}\", about.getAnyType(), about.get()));\n+                notification.getAbouts().\n+                        forEach(a -> LOG.debug(\"Notification about {} defined: {}\", a.getAnyType(), a.get()));\n             }\n \n             if (notification.isActive()) {\n-                String currentEvent = AuditLoggerName.buildEvent(type, category, subcategory, event, condition);\n                 if (!notification.getEvents().contains(currentEvent)) {\n                     LOG.debug(\"No events found about {}\", any);\n                 } else if (anyType == null || any == null\n@@ -348,7 +349,7 @@ public List<NotificationTask> createTasks(\n \n                     LOG.debug(\"Creating notification task for event {} about {}\", currentEvent, any);\n \n-                    final Map<String, Object> model = new HashMap<>();\n+                    Map<String, Object> model = new HashMap<>();\n                     model.put(\"who\", who);\n                     model.put(\"type\", type);\n                     model.put(\"category\", category);"},{"sha":"4ac8352155364b5ed381ff1e767397a5a57a9095","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java","status":"modified","additions":33,"deletions":24,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7d6aa51867055b2b6741c1926ea2cd31216ff5c4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7d6aa51867055b2b6741c1926ea2cd31216ff5c4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java?ref=7d6aa51867055b2b6741c1926ea2cd31216ff5c4","patch":"@@ -95,11 +95,11 @@ public void setLatestSyncToken(final ObjectClass objectClass, final SyncToken la\n \n     @Override\n     public void reportHandled(final ObjectClass objectClass, final Name name) {\n-        MutablePair<Integer, String> pair = handled.get(objectClass);\n-        if (pair == null) {\n-            pair = MutablePair.of(0, null);\n-            handled.put(objectClass, pair);\n-        }\n+        MutablePair<Integer, String> pair = Optional.ofNullable(handled.get(objectClass)).orElseGet(() -> {\n+            MutablePair<Integer, String> p = MutablePair.of(0, null);\n+            handled.put(objectClass, p);\n+            return p;\n+        });\n         pair.setLeft(pair.getLeft() + 1);\n         pair.setRight(name.getNameValue());\n     }\n@@ -160,17 +160,35 @@ protected void setGroupOwners(final GroupPullResultHandler ghandler) {\n         });\n     }\n \n-    protected static RealmPullResultHandler buildRealmHandler() {\n+    protected List<PullActions> buildPullActions(final PullTask pullTask) {\n+        List<PullActions> actions = new ArrayList<>();\n+        pullTask.getActions().forEach(impl -> {\n+            try {\n+                actions.add(ImplementationManager.build(impl));\n+            } catch (Exception e) {\n+                LOG.warn(\"While building {}\", impl, e);\n+            }\n+        });\n+        return actions;\n+    }\n+\n+    protected ReconFilterBuilder buildReconFilterBuilder(final PullTask pullTask)\n+            throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n+\n+        return ImplementationManager.build(pullTask.getReconFilterBuilder());\n+    }\n+\n+    protected RealmPullResultHandler buildRealmHandler() {\n         return (RealmPullResultHandler) ApplicationContextProvider.getBeanFactory().\n                 createBean(DefaultRealmPullResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n     }\n \n-    protected static AnyObjectPullResultHandler buildAnyObjectHandler() {\n+    protected AnyObjectPullResultHandler buildAnyObjectHandler() {\n         return (AnyObjectPullResultHandler) ApplicationContextProvider.getBeanFactory().\n                 createBean(DefaultAnyObjectPullResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n     }\n \n-    protected static UserPullResultHandler buildUserHandler() {\n+    protected UserPullResultHandler buildUserHandler() {\n         return (UserPullResultHandler) ApplicationContextProvider.getBeanFactory().\n                 createBean(DefaultUserPullResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n     }\n@@ -194,14 +212,7 @@ protected String doExecuteProvisioning(\n \n         LOG.debug(\"Executing pull on {}\", pullTask.getResource());\n \n-        List<PullActions> actions = new ArrayList<>();\n-        pullTask.getActions().forEach(impl -> {\n-            try {\n-                actions.add(ImplementationManager.build(impl));\n-            } catch (Exception e) {\n-                LOG.warn(\"While building {}\", impl, e);\n-            }\n-        });\n+        List<PullActions> actions = buildPullActions(pullTask);\n \n         profile = new ProvisioningProfile<>(connector, pullTask);\n         profile.getActions().addAll(actions);\n@@ -256,10 +267,9 @@ protected String doExecuteProvisioning(\n                         break;\n \n                     case FILTERED_RECONCILIATION:\n-                        ReconFilterBuilder filterBuilder =\n-                                ImplementationManager.build(pullTask.getReconFilterBuilder());\n-                        connector.filteredReconciliation(orgUnit.getObjectClass(),\n-                                filterBuilder,\n+                        connector.filteredReconciliation(\n+                                orgUnit.getObjectClass(),\n+                                buildReconFilterBuilder(pullTask),\n                                 handler,\n                                 options);\n                         break;\n@@ -340,7 +350,7 @@ protected String doExecuteProvisioning(\n                     case FILTERED_RECONCILIATION:\n                         connector.filteredReconciliation(\n                                 provision.getObjectClass(),\n-                                ImplementationManager.build(pullTask.getReconFilterBuilder()),\n+                                buildReconFilterBuilder(pullTask),\n                                 handler,\n                                 options);\n                         break;\n@@ -360,9 +370,8 @@ protected String doExecuteProvisioning(\n                             filter(result -> result.getUidValue() != null && result.getKey() != null\n                             && result.getOperation() == ResourceOperation.CREATE\n                             && result.getAnyType().equals(provision.getAnyType().getKey())).\n-                            forEach(result -> {\n-                                anyUtils.addAttr(result.getKey(), provision.getUidOnCreate(), result.getUidValue());\n-                            });\n+                            forEach(result -> anyUtils.addAttr(\n+                            result.getKey(), provision.getUidOnCreate(), result.getUidValue()));\n                 }\n             } catch (Throwable t) {\n                 throw new JobExecutionException(\"While pulling from connector\", t);"},{"sha":"490a45739c6fd3145d9e3a09b48f9a7987a05786","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7d6aa51867055b2b6741c1926ea2cd31216ff5c4/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7d6aa51867055b2b6741c1926ea2cd31216ff5c4/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java?ref=7d6aa51867055b2b6741c1926ea2cd31216ff5c4","patch":"@@ -131,9 +131,11 @@ public XContentBuilder builder(final Any<?> any, final String domain) throws IOE\n                 field(\"realm\", any.getRealm().getFullPath()).\n                 field(\"anyType\", any.getType().getKey()).\n                 field(\"creationDate\", any.getCreationDate()).\n+                field(\"creationContext\", any.getCreationContext()).\n                 field(\"creator\", any.getCreator()).\n                 field(\"lastChangeDate\", any.getLastChangeDate()).\n                 field(\"lastModifier\", any.getLastModifier()).\n+                field(\"lastChangeContext\", any.getLastChangeContext()).\n                 field(\"status\", any.getStatus()).\n                 field(\"resources\", resources).\n                 field(\"dynRealms\", dynRealms);\n@@ -169,7 +171,7 @@ public XContentBuilder builder(final Any<?> any, final String domain) throws IOE\n                 builder = builder.field(\"groupOwner\", group.getGroupOwner().getKey());\n             }\n \n-            List<String> members = new ArrayList<>();\n+            Set<String> members = new HashSet<>();\n             AuthContextUtils.callAsAdmin(domain, () -> {\n                 members.addAll(groupDAO.findUMemberships(group).stream().\n                         map(membership -> membership.getLeftEnd().getKey()).collect(Collectors.toList()));"},{"sha":"e8101091c6b43f52a506ae4aebbe50ef8f24cd6f","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7d6aa51867055b2b6741c1926ea2cd31216ff5c4/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7d6aa51867055b2b6741c1926ea2cd31216ff5c4/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=7d6aa51867055b2b6741c1926ea2cd31216ff5c4","patch":"@@ -439,7 +439,7 @@ under the License.\n     <log4j.version>2.14.1</log4j.version>\n     <disruptor.version>3.4.4</disruptor.version>\n     \n-    <commons-jexl.version>3.1</commons-jexl.version>\n+    <commons-jexl.version>3.2</commons-jexl.version>\n     <commons-lang.version>3.12.0</commons-lang.version>\n     <commons-text.version>1.9</commons-text.version>\n     <commons-codec.version>1.15</commons-codec.version>"}]}