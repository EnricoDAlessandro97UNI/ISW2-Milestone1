{"sha":"e6d4899f9c63888d8353a6936ec112877c1f43f0","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmU2ZDQ4OTlmOWM2Mzg4OGQ4MzUzYTY5MzZlYzExMjg3N2MxZjQzZjA=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-11-04T08:47:29Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-11-04T08:47:29Z"},"message":"Fixes issue 166\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247176 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7c438be9c65102848c067b01334acfdf4ce626c1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7c438be9c65102848c067b01334acfdf4ce626c1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e6d4899f9c63888d8353a6936ec112877c1f43f0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e6d4899f9c63888d8353a6936ec112877c1f43f0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e6d4899f9c63888d8353a6936ec112877c1f43f0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e6d4899f9c63888d8353a6936ec112877c1f43f0/comments","author":null,"committer":null,"parents":[{"sha":"94055c24765cdc943d7c0070e5673d3a21f97b2a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/94055c24765cdc943d7c0070e5673d3a21f97b2a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/94055c24765cdc943d7c0070e5673d3a21f97b2a"}],"stats":{"total":983,"additions":689,"deletions":294},"files":[{"sha":"233d123996c445d3f76d1bddee5c149b7c59c1f1","filename":"client/src/main/java/org/syncope/client/to/ResourceTO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -62,6 +62,8 @@ public class ResourceTO extends AbstractBaseBean {\n \n     private TraceLevel deleteTraceLevel;\n \n+    private TraceLevel syncTraceLevel;\n+\n     private Long passwordPolicy;\n \n     private Long accountPolicy;\n@@ -81,6 +83,7 @@ public ResourceTO() {\n         createTraceLevel = TraceLevel.ALL;\n         updateTraceLevel = TraceLevel.ALL;\n         deleteTraceLevel = TraceLevel.ALL;\n+        syncTraceLevel = TraceLevel.ALL;\n     }\n \n     public boolean isForceMandatoryConstraint() {\n@@ -213,6 +216,14 @@ public void setConnectorConfigurationProperties(\n                 connectorConfigurationProperties;\n     }\n \n+    public TraceLevel getSyncTraceLevel() {\n+        return syncTraceLevel;\n+    }\n+\n+    public void setSyncTraceLevel(TraceLevel syncTraceLevel) {\n+        this.syncTraceLevel = syncTraceLevel;\n+    }\n+\n     public String getSyncToken() {\n         return syncToken;\n     }"},{"sha":"af31e310cd9ff8a9a2f64026a88e74907a82bb09","filename":"client/src/main/java/org/syncope/types/TraceLevel.java","status":"modified","additions":17,"deletions":1,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FTraceLevel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FTraceLevel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FTraceLevel.java?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -16,5 +16,21 @@\n \n public enum TraceLevel {\n \n-    NONE, FAILURES, ALL\n+    /**\n+     * No details at all.\n+     */\n+    NONE,\n+    /**\n+     * Only failed entries.\n+     */\n+    FAILURES,\n+    /**\n+     * Only an overall summary.\n+     */\n+    SUMMARY,\n+    /**\n+     * All available information, including per-entry information.\n+     */\n+    ALL\n+\n }"},{"sha":"bc516da8fdb00a80feaa9407d4809f3a025da48b","filename":"console/src/main/java/org/syncope/console/pages/ResourceModalPage.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -233,6 +233,14 @@ protected List<ConnConfProperty> load() {\n         deleteTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));\n         form.add(deleteTraceLevel);        \n \n+        final AjaxDropDownChoicePanel<TraceLevel> syncTraceLevel =\n+                new AjaxDropDownChoicePanel<TraceLevel>(\"syncTraceLevel\",\n+                getString(\"syncTraceLevel\"),\n+                new PropertyModel(resourceTO, \"syncTraceLevel\"),\n+                false);\n+        syncTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));\n+        form.add(syncTraceLevel);\n+\n         final AjaxCheckBoxPanel resetToken = new AjaxCheckBoxPanel(\n                 \"resetToken\", getString(\"resetToken\"), new Model(null), false);\n         resetToken.getField().add("},{"sha":"fada40407a713bd2fa514206c47cbee0d8fc8e8d","filename":"console/src/main/java/org/syncope/console/pages/panels/GenericTasks.java","status":"modified","additions":46,"deletions":9,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FGenericTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FGenericTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FGenericTasks.java?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -40,8 +40,6 @@\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.request.http.WebResponse;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.syncope.client.to.SchedTaskTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.console.commons.Constants;\n@@ -58,12 +56,6 @@\n \n public class GenericTasks extends Panel {\n \n-    /**\n-     * Logger.\n-     */\n-    protected static final Logger LOG = LoggerFactory.getLogger(\n-            GenericTasks.class);\n-\n     private static final int WIN_HEIGHT = 500;\n \n     private static final int WIN_WIDTH = 700;\n@@ -183,7 +175,7 @@ public void populateItem(\n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n-                            restClient.startExecution(taskTO.getId());\n+                            restClient.startExecution(taskTO.getId(), false);\n                             getSession().info(getString(\"operation_succeded\"));\n                         } catch (SyncopeClientCompositeErrorException scce) {\n                             error(scce.getMessage());\n@@ -206,6 +198,51 @@ public void onClick(final AjaxRequestTarget target) {\n             }\n         });\n \n+        columns.add(new AbstractColumn<SchedTaskTO>(\n+                new ResourceModel(\"executeDryRun\")) {\n+\n+            private static final long serialVersionUID = 2054811145491901166L;\n+\n+            @Override\n+            public void populateItem(\n+                    final Item<ICellPopulator<SchedTaskTO>> cellItem,\n+                    final String componentId,\n+                    final IModel<SchedTaskTO> model) {\n+\n+                final SchedTaskTO taskTO = model.getObject();\n+\n+                AjaxLink executeLink = new IndicatingAjaxLink(\"link\") {\n+\n+                    private static final long serialVersionUID =\n+                            -7978723352517770644L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        try {\n+                            restClient.startExecution(taskTO.getId(), true);\n+                            getSession().info(getString(\"operation_succeded\"));\n+                        } catch (SyncopeClientCompositeErrorException scce) {\n+                            error(scce.getMessage());\n+                        }\n+\n+                        target.add(getPage().get(\"feedback\"));\n+                        target.add(container);\n+                    }\n+                };\n+\n+                executeLink.add(new Label(\"linkTitle\",\n+                        getString(\"executeDryRun\")));\n+\n+                LinkPanel panel = new LinkPanel(componentId);\n+                panel.add(executeLink);\n+\n+                MetaDataRoleAuthorizationStrategy.authorize(panel, ENABLE,\n+                        xmlRolesReader.getAllAllowedRoles(\"Tasks\", \"execute\"));\n+\n+                cellItem.add(panel);\n+            }\n+        });\n+\n         columns.add(new AbstractColumn<SchedTaskTO>(\n                 new ResourceModel(\"delete\")) {\n "},{"sha":"209110d7984c613f70dc4a66a007306950f2230d","filename":"console/src/main/java/org/syncope/console/pages/panels/PropagationTasks.java","status":"modified","additions":1,"deletions":9,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -45,8 +45,6 @@\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.request.http.WebResponse;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.syncope.client.to.PropagationTaskTO;\n import org.syncope.client.to.TaskTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -66,12 +64,6 @@\n  */\n public class PropagationTasks extends Panel {\n \n-    /**\n-     * Logger.\n-     */\n-    private static final Logger LOG = LoggerFactory.getLogger(\n-            PropagationTasks.class);\n-\n     private static final int WIN_HEIGHT = 500;\n \n     private static final int WIN_WIDTH = 700;\n@@ -189,7 +181,7 @@ public void populateItem(\n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n-                            restClient.startExecution(taskTO.getId());\n+                            restClient.startExecution(taskTO.getId(), false);\n                             getSession().info(getString(\"operation_succeded\"));\n                         } catch (SyncopeClientCompositeErrorException scce) {\n                             error(scce.getMessage());"},{"sha":"d47ad4195c99eff32a7265fb8de8c48647d81193","filename":"console/src/main/java/org/syncope/console/pages/panels/SyncTasks.java","status":"modified","additions":47,"deletions":10,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -39,8 +39,6 @@\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.request.http.WebResponse;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.syncope.client.to.SyncTaskTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.console.commons.Constants;\n@@ -57,12 +55,6 @@\n \n public class SyncTasks extends Panel {\n \n-    /**\n-     * Logger.\n-     */\n-    protected static final Logger LOG = LoggerFactory.getLogger(\n-            SyncTasks.class);\n-\n     private static final int WIN_HEIGHT = 500;\n \n     private static final int WIN_WIDTH = 700;\n@@ -81,7 +73,7 @@ public class SyncTasks extends Panel {\n \n     /**\n      * Response flag set by the Modal Window after the operation is completed:\n-     * TRUE if the operation succedes, FALSE otherwise\n+     * TRUE if the operation succedes, FALSE otherwise.\n      */\n     private boolean operationResult = false;\n \n@@ -184,7 +176,7 @@ public void populateItem(\n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n-                            restClient.startExecution(taskTO.getId());\n+                            restClient.startExecution(taskTO.getId(), false);\n                             getSession().info(getString(\"operation_succeded\"));\n                         } catch (SyncopeClientCompositeErrorException scce) {\n                             error(scce.getMessage());\n@@ -207,6 +199,51 @@ public void onClick(final AjaxRequestTarget target) {\n             }\n         });\n \n+        columns.add(new AbstractColumn<SyncTaskTO>(\n+                new ResourceModel(\"executeDryRun\")) {\n+\n+            private static final long serialVersionUID = 2054811145491901166L;\n+\n+            @Override\n+            public void populateItem(\n+                    final Item<ICellPopulator<SyncTaskTO>> cellItem,\n+                    final String componentId,\n+                    final IModel<SyncTaskTO> model) {\n+\n+                final SyncTaskTO taskTO = model.getObject();\n+\n+                AjaxLink executeLink = new IndicatingAjaxLink(\"link\") {\n+\n+                    private static final long serialVersionUID =\n+                            -7978723352517770644L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        try {\n+                            restClient.startExecution(taskTO.getId(), true);\n+                            getSession().info(getString(\"operation_succeded\"));\n+                        } catch (SyncopeClientCompositeErrorException scce) {\n+                            error(scce.getMessage());\n+                        }\n+\n+                        target.add(container);\n+                        target.add(getPage().get(\"feedback\"));\n+                    }\n+                };\n+\n+                executeLink.add(new Label(\"linkTitle\",\n+                        getString(\"executeDryRun\")));\n+\n+                LinkPanel panel = new LinkPanel(componentId);\n+                panel.add(executeLink);\n+\n+                MetaDataRoleAuthorizationStrategy.authorize(panel, ENABLE,\n+                        xmlRolesReader.getAllAllowedRoles(\"Tasks\", \"execute\"));\n+\n+                cellItem.add(panel);\n+            }\n+        });\n+\n         columns.add(new AbstractColumn<SyncTaskTO>(\n                 new ResourceModel(\"delete\")) {\n "},{"sha":"268596a962607c0611e30523a67817ad98b43e78","filename":"console/src/main/java/org/syncope/console/rest/TaskRestClient.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -135,10 +135,10 @@ public void delete(final Long taskId) {\n      * Start execution for the specified TaskTO.\n      * @param taskId task id\n      */\n-    public void startExecution(final Long taskId) {\n-        restTemplate.getForObject(\n-                baseURL + \"task/execute/{taskId}\",\n-                TaskExecTO.class, taskId);\n+    public void startExecution(final Long taskId, boolean dryRun) {\n+        restTemplate.postForObject(\n+                baseURL + \"task/execute/{taskId}?dryRun={dryRun}\",\n+                null, TaskExecTO.class, taskId, dryRun);\n     }\n \n     /**"},{"sha":"685f508effa99907ab272010f4d30f8708c678d1","filename":"console/src/main/resources/org/syncope/console/pages/ResourceModalPage.html","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.html?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -132,6 +132,15 @@\n                             </div>\n                         </div>\n \n+                        <div class=\"tablerow\">\n+                            <div class=\"tablecolumn_label medium_fixedsize\">\n+                                <label for=\"syncTraceLevel\"><wicket:message key=\"syncTraceLevel\"/></label>\n+                            </div>\n+                            <div class=\"tablecolumn_field medium_dynamicsize\">\n+                                <span wicket:id=\"syncTraceLevel\">[syncTraceLevel]</span>\n+                            </div>\n+                        </div>\n+\n                         <div class=\"tablerow\">\n                             <div class=\"tablecolumn_label medium_fixedsize\">\n                                 <label for=\"resetToken\"><wicket:message key=\"resetToken\"/></label>"},{"sha":"7b9d1c1772a911edace8be9983b91b15bfd97f8e","filename":"console/src/main/resources/org/syncope/console/pages/ResourceModalPage.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.properties?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -30,6 +30,7 @@ accountLink=Account link\n createTraceLevel=Create trace level\n updateTraceLevel=Update trace level\n deleteTraceLevel=Delete trace level\n+syncTraceLevel=Synchronization trace level\n propagationPriority=Propagation priority\n propagationPrimary=Propagation primary\n resetToken=Reset Token\n\\ No newline at end of file"},{"sha":"936b621e7b4693f83e0c2cfa55c37be48bd165b4","filename":"console/src/main/resources/org/syncope/console/pages/ResourceModalPage_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage_it.properties?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -31,6 +31,7 @@ accountLink=Account link\n createTraceLevel=Livello di tracciamento delle creazioni\n updateTraceLevel=Livello di tracciamento degli aggiornamenti\n deleteTraceLevel=Livello di tracciamento delle cancellazioni\n+syncTraceLevel=Livello di tracciamento delle sincronizzazioni\n propagationPriority=Priorit\\u00e0 in propagazione\n propagationPrimary=Primaria in propagazione\n resetToken=Reset Token"},{"sha":"de81fb1b69cc2fe6be8018c9b1af98b3acfe8ee2","filename":"console/src/main/resources/org/syncope/console/pages/panels/GenericTasks.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FGenericTasks.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FGenericTasks.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FGenericTasks.properties?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -6,4 +6,5 @@ detail=Detail\n delete=Delete\n edit=Edit\n execute=Execute\n+executeDryRun=Dry run\n create_task=Add New Task\n\\ No newline at end of file"},{"sha":"e04e2fab39aec048f96faa9e9e2311b4db72ab89","filename":"console/src/main/resources/org/syncope/console/pages/panels/GenericTasks_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FGenericTasks_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FGenericTasks_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FGenericTasks_it.properties?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -6,4 +6,5 @@ detail=Dettagli\n delete=Rimuovi\n edit=Modifica\n execute=Esegui\n+executeDryRun=Esecuzione simulata\n create_task=Aggiungi Nuovo Task\n\\ No newline at end of file"},{"sha":"7f2ff2cf7d7a84f5510a52c82fc2b75248d0995d","filename":"console/src/main/resources/org/syncope/console/pages/panels/SyncTasks.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.properties?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -6,4 +6,5 @@ detail=Detail\n delete=Delete\n edit=Edit\n execute=Execute\n+executeDryRun=Dry run\n create_task=Add New Task\n\\ No newline at end of file"},{"sha":"71699fcba28bf6292819cf55763e9ad4301d8ce7","filename":"console/src/main/resources/org/syncope/console/pages/panels/SyncTasks_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks_it.properties?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -6,4 +6,5 @@ detail=Dettagli\n delete=Rimuovi\n edit=Modifica\n execute=Esegui\n+executeDryRun=Esecuzione simulata\n create_task=Aggiungi Nuovo Task\n\\ No newline at end of file"},{"sha":"b37a7fcf7aa6fd54512ac285b5a46118a3633a4c","filename":"console/src/test/java/org/syncope/console/TaskTestITCase.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FTaskTestITCase.java?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -23,18 +23,19 @@ public void execute() {\n \n         selenium.click(\"css=img[alt=\\\"Tasks\\\"]\");\n         selenium.waitForPageToLoad(\"30000\");\n-        selenium.click(\"//div[@id='tabs']/ul/li[3]/a/span\");\n-        selenium.click(\n-                \"//div[3]/div[3]/span/div/span/table/tbody/tr/td[6]/span/a/span\");\n+        selenium.click(\"//div[@id='tabs']/ul/li[3]/a\");\n+        selenium.click(\"//div[3]/div[3]/span/div/span/\"\n+                + \"table/tbody/tr/td[6]/span/a\");\n         assertTrue(selenium.isTextPresent(\"Operation executed successfully\"));\n-        selenium.click(\"//div[3]/div[3]/span/div/span/table/tbody/tr/td[5]/span/a\");\n+        selenium.click(\"//div[3]/div[3]/span/div/span/\"\n+                + \"table/tbody/tr/td[5]/span/a\");\n         for (int second = 0;; second++) {\n             if (second >= 60) {\n                 fail(\"timeout\");\n             }\n             try {\n-                if (selenium.isElementPresent(\n-                        \"//input[@name=\\\"profile:id:textField\\\"]\")) {\n+                if (selenium.isElementPresent(\"//form/div[2]/div/div/span/\"\n+                        + \"div/div/div[2]/span/input\")) {\n \n                     break;\n                 }\n@@ -46,7 +47,6 @@ public void execute() {\n             }\n         }\n \n-        selenium.click(\"//div[@id='tabs']/ul/li[3]/a/span\");\n         assertTrue(selenium.isElementPresent(\n                 \"//form/div[2]/div[3]/span/table/tbody/tr/td\"));\n         selenium.click(\"css=a.w_close\");\n@@ -64,7 +64,8 @@ public void delete() {\n         selenium.click(\"css=img[alt=\\\"Tasks\\\"]\");\n         selenium.waitForPageToLoad(\"30000\");\n         selenium.click(\"//div[@id='tabs']/ul/li[2]/a/span\");\n-        selenium.click(\"//div[3]/div[2]/span/div/span/table/tbody/tr/td[7]/span/a\");\n+        selenium.click(\"//div[3]/div[2]/span/div/span/\"\n+                + \"table/tbody/tr/td[8]/span/a\");\n         assertTrue(selenium.getConfirmation().matches(\n                 \"^Do you really want to delete the selected item[\\\\s\\\\S]$\"));\n         assertTrue(selenium.isTextPresent(\"Operation executed successfully\"));"},{"sha":"389bcb28f54292fc3d2c9ee9afa48383633e2238","filename":"core/src/main/java/org/syncope/core/persistence/beans/ExternalResource.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -140,6 +140,10 @@ public class ExternalResource extends AbstractBaseBean {\n     @Column(nullable = false)\n     private TraceLevel deleteTraceLevel;\n \n+    @Enumerated(EnumType.STRING)\n+    @Column(nullable = false)\n+    private TraceLevel syncTraceLevel;\n+\n     @ManyToOne(fetch = FetchType.EAGER, optional = true)\n     private PasswordPolicy passwordPolicy;\n \n@@ -180,6 +184,7 @@ public ExternalResource() {\n         createTraceLevel = TraceLevel.FAILURES;\n         updateTraceLevel = TraceLevel.FAILURES;\n         deleteTraceLevel = TraceLevel.FAILURES;\n+        syncTraceLevel = TraceLevel.FAILURES;\n     }\n \n     public boolean isForceMandatoryConstraint() {\n@@ -349,6 +354,14 @@ public void setUpdateTraceLevel(TraceLevel updateTraceLevel) {\n         this.updateTraceLevel = updateTraceLevel;\n     }\n \n+    public TraceLevel getSyncTraceLevel() {\n+        return syncTraceLevel;\n+    }\n+\n+    public void setSyncTraceLevel(TraceLevel syncTraceLevel) {\n+        this.syncTraceLevel = syncTraceLevel;\n+    }\n+\n     public Policy getAccountPolicy() {\n         return accountPolicy;\n     }"},{"sha":"7e7df481ef3d15b07d447185a2eeefb6925e1424","filename":"core/src/main/java/org/syncope/core/rest/controller/TaskController.java","status":"modified","additions":13,"deletions":10,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -15,12 +15,6 @@\n package org.syncope.core.rest.controller;\n \n import java.lang.reflect.Modifier;\n-import org.quartz.SchedulerException;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.HashSet;\n@@ -29,13 +23,20 @@\n import java.util.Set;\n import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n+import org.quartz.JobDataMap;\n import org.quartz.JobDetail;\n import org.quartz.Scheduler;\n+import org.quartz.SchedulerException;\n import org.reflections.Reflections;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.mod.SchedTaskMod;\n@@ -327,10 +328,10 @@ public TaskExecTO readExecution(\n     }\n \n     @PreAuthorize(\"hasRole('TASK_EXECUTE')\")\n-    @RequestMapping(method = RequestMethod.GET,\n+    @RequestMapping(method = RequestMethod.POST,\n     value = \"/execute/{taskId}\")\n-    public TaskExecTO execute(\n-            @PathVariable(\"taskId\") final Long taskId)\n+    public TaskExecTO execute(@PathVariable(\"taskId\") final Long taskId,\n+            @RequestParam(value = \"dryRun\", defaultValue = \"false\") final boolean dryRun)\n             throws NotFoundException {\n \n         Task task = taskDAO.find(taskId);\n@@ -356,9 +357,11 @@ public TaskExecTO execute(\n                         JobInstanceLoader.getJobDetailName(task.getId()));\n                 jobDetail.setGroup(Scheduler.DEFAULT_GROUP);\n                 try {\n+                    JobDataMap map = new JobDataMap();\n+                    map.put(Job.DRY_RUN_JOBDETAIL_KEY, dryRun);\n                     scheduler.getScheduler().triggerJob(\n                             JobInstanceLoader.getJobDetailName(task.getId()),\n-                            Scheduler.DEFAULT_GROUP);\n+                            Scheduler.DEFAULT_GROUP, map);\n                 } catch (SchedulerException e) {\n                     LOG.error(\"While executing task {}\", task, e);\n "},{"sha":"08db1703682b5ecba164f79a2a78c32760ed2d9e","filename":"core/src/main/java/org/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -107,6 +107,7 @@ public ExternalResource getResource(final ExternalResource resource,\n         resource.setCreateTraceLevel(resourceTO.getCreateTraceLevel());\n         resource.setUpdateTraceLevel(resourceTO.getUpdateTraceLevel());\n         resource.setDeleteTraceLevel(resourceTO.getDeleteTraceLevel());\n+        resource.setSyncTraceLevel(resourceTO.getSyncTraceLevel());\n \n         resource.setPasswordPolicy(resourceTO.getPasswordPolicy() != null\n                 ? (PasswordPolicy) policyDAO.find(resourceTO.getPasswordPolicy())\n@@ -180,6 +181,7 @@ public ResourceTO getResourceTO(ExternalResource resource) {\n         resourceTO.setCreateTraceLevel(resource.getCreateTraceLevel());\n         resourceTO.setUpdateTraceLevel(resource.getUpdateTraceLevel());\n         resourceTO.setDeleteTraceLevel(resource.getDeleteTraceLevel());\n+        resourceTO.setSyncTraceLevel(resource.getSyncTraceLevel());\n \n         resourceTO.setPasswordPolicy(resource.getPasswordPolicy() != null\n                 ? resource.getPasswordPolicy().getId() : null);"},{"sha":"e2973aee39a4011062a152e77d8e89d663c5176e","filename":"core/src/main/java/org/syncope/core/scheduling/AbstractJob.java","status":"modified","additions":33,"deletions":18,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FAbstractJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FAbstractJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FAbstractJob.java?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -16,6 +16,7 @@\n import java.io.PrintWriter;\n import java.io.StringWriter;\n import java.util.Date;\n+import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -33,20 +34,20 @@\n public abstract class AbstractJob implements Job {\n \n     /**\n-     * Logger.\n+     * Task execution status.\n      */\n-    protected static final Logger LOG = LoggerFactory.getLogger(\n-            AbstractJob.class);\n+    protected enum Status {\n \n-    /**\n-     * Success task execution status.\n-     */\n-    protected static final String SUCCESS = \"SUCCESS\";\n+        SUCCESS,\n+        FAILURE\n+\n+    }\n \n     /**\n-     * Faliure task execution status.\n+     * Logger.\n      */\n-    protected static final String FAILURE = \"FAILURE\";\n+    protected static final Logger LOG = LoggerFactory.getLogger(\n+            AbstractJob.class);\n \n     /**\n      * Task DAO.\n@@ -80,7 +81,7 @@ public void setTaskId(final Long taskId) {\n     }\n \n     @Override\n-    public final void execute()\n+    public final void execute(final JobExecutionContext context)\n             throws JobExecutionException {\n \n         task = taskDAO.find(taskId);\n@@ -93,9 +94,11 @@ public final void execute()\n         execution.setTask(task);\n \n         try {\n-            execution.setMessage(doExecute());\n+            execution.setMessage(doExecute(\n+                    context.getMergedJobDataMap().\n+                    getBoolean(Job.DRY_RUN_JOBDETAIL_KEY)));\n \n-            execution.setStatus(SUCCESS);\n+            execution.setStatus(Status.SUCCESS.name());\n         } catch (JobExecutionException e) {\n             LOG.error(\"While executing task \" + taskId, e);\n \n@@ -104,19 +107,31 @@ public final void execute()\n             e.printStackTrace(new PrintWriter(exceptionWriter));\n             execution.setMessage(exceptionWriter.toString());\n \n-            execution.setStatus(FAILURE);\n+            execution.setStatus(Status.FAILURE.name());\n         }\n         execution.setEndDate(new Date());\n-\n-        taskExecDAO.save(execution);\n+        if (hasToBeRegistered(execution)) {\n+            taskExecDAO.save(execution);\n+        }\n     }\n \n     /**\n      * The actual execution, delegated to child classes.\n-     *\n+     * \n+     * @param dryRun whether to actually touch the data\n      * @return the task execution status to be set\n-     * @throws JobExecutionException \n+     * @throws JobExecutionException if anything goes wrong\n      */\n-    protected abstract String doExecute()\n+    protected abstract String doExecute(boolean dryRun)\n             throws JobExecutionException;\n+\n+    /**\n+     * Template method to determine whether this job's task execution has\n+     * to be persisted or not.\n+     * @param execution task execution\n+     * @return wether to persist or not\n+     */\n+    protected boolean hasToBeRegistered(final TaskExec execution) {\n+        return false;\n+    }\n }"},{"sha":"b0d95cdfdfc913d1253c620edaee9068287c10bb","filename":"core/src/main/java/org/syncope/core/scheduling/AppContextMethodInvokingJobDetailFactoryBean.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FAppContextMethodInvokingJobDetailFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FAppContextMethodInvokingJobDetailFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FAppContextMethodInvokingJobDetailFactoryBean.java?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -116,7 +116,7 @@ public boolean isSingleton() {\n      * by the JobListener implementation.</p>\n      *\n      * @param names to be set\n-     * @see SchedulerFactoryBean#setJobListeners\n+     * @see org.springframework.scheduling.quartz.SchedulerFactoryBean#setJobListeners\n      * @see org.quartz.JobListener#getName\n      */\n     public void setJobListenerNames(final String[] names) {\n@@ -236,6 +236,7 @@ protected void executeInternal(final JobExecutionContext context)\n             MethodInvoker methodInvoker = new MethodInvoker();\n             methodInvoker.setTargetObject(instance);\n             methodInvoker.setTargetMethod(targetMethod);\n+            methodInvoker.setArguments(new Object[]{context});\n \n             try {\n                 methodInvoker.prepare();"},{"sha":"b38ba906bae2cabd92d907e5c025a78376e1b8fc","filename":"core/src/main/java/org/syncope/core/scheduling/Job.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FJob.java?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -13,6 +13,7 @@\n  */\n package org.syncope.core.scheduling;\n \n+import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n \n /**\n@@ -21,11 +22,13 @@\n  */\n public interface Job {\n \n+    public static final String DRY_RUN_JOBDETAIL_KEY = \"dryRun\";\n+\n     /**\n      * The actual execution.\n-     *\n+     * @param context job execution context\n      * @throws JobExecutionException \n      */\n-    void execute()\n+    void execute(JobExecutionContext context)\n             throws JobExecutionException;\n }"},{"sha":"f0025595a8659cc99e224617657976477b428f89","filename":"core/src/main/java/org/syncope/core/scheduling/SampleJob.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSampleJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSampleJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSampleJob.java?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -15,6 +15,7 @@\n \n import org.quartz.JobExecutionException;\n import org.syncope.core.persistence.beans.SchedTask;\n+import org.syncope.core.persistence.beans.TaskExec;\n \n /**\n  * Sample implementation for execution a scheduled task.\n@@ -24,7 +25,7 @@\n public class SampleJob extends AbstractJob {\n \n     @Override\n-    protected String doExecute()\n+    protected String doExecute(final boolean dryRun)\n             throws JobExecutionException {\n \n         if (!(task instanceof SchedTask)) {\n@@ -33,8 +34,14 @@ protected String doExecute()\n         }\n         final SchedTask schedTask = (SchedTask) this.task;\n \n-        LOG.info(\"SampleJob running [SchedTask {}]\", schedTask.getId());\n+        LOG.info(\"SampleJob {}running [SchedTask {}]\",\n+                (dryRun ? \"dry \" : \"\"), schedTask.getId());\n \n-        return \"RUNNING\";\n+        return (dryRun ? \"DRY \" : \"\") + \"RUNNING\";\n+    }\n+\n+    @Override\n+    protected boolean hasToBeRegistered(final TaskExec execution) {\n+        return true;\n     }\n }"},{"sha":"1c1dab9181b2d0b202223112bd9065937d27d76a","filename":"core/src/main/java/org/syncope/core/scheduling/SpringBeanContextAwareJobFactory.java","status":"removed","additions":0,"deletions":98,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/94055c24765cdc943d7c0070e5673d3a21f97b2a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSpringBeanContextAwareJobFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/94055c24765cdc943d7c0070e5673d3a21f97b2a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSpringBeanContextAwareJobFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSpringBeanContextAwareJobFactory.java?ref=94055c24765cdc943d7c0070e5673d3a21f97b2a","patch":"@@ -1,98 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.syncope.core.scheduling;\n-\n-import org.quartz.SchedulerContext;\n-import org.quartz.spi.TriggerFiredBundle;\n-import org.springframework.beans.BeanWrapper;\n-import org.springframework.beans.MutablePropertyValues;\n-import org.springframework.beans.PropertyAccessorFactory;\n-import org.springframework.scheduling.quartz.SpringBeanJobFactory;\n-import org.springframework.web.context.support.XmlWebApplicationContext;\n-\n-/**\n- * From blog post at http://sloanseaman.com/wordpress/?p=120.\n- */\n-public class SpringBeanContextAwareJobFactory extends SpringBeanJobFactory {\n-\n-    /**\n-     * Properties to ignore.\n-     */\n-    private String[] ignoredUnknownProperties;\n-\n-    /**\n-     * Scheduler context.\n-     */\n-    private SchedulerContext schedulerContext;\n-\n-    @Override\n-    public void setIgnoredUnknownProperties(\n-            final String[] ignoredUnknownProperties) {\n-\n-        super.setIgnoredUnknownProperties(ignoredUnknownProperties);\n-        if (ignoredUnknownProperties != null) {\n-            this.ignoredUnknownProperties = ignoredUnknownProperties.clone();\n-        }\n-    }\n-\n-    @Override\n-    public void setSchedulerContext(final SchedulerContext schedulerContext) {\n-        super.setSchedulerContext(schedulerContext);\n-        this.schedulerContext = schedulerContext;\n-    }\n-\n-    /**\n-     * An implementation of SpringBeanJobFactory that retrieves the bean from\n-     * the Spring context so that autowiring and transactions work\n-     *\n-     * This method is overriden.\n-     * @see org.springframework.scheduling.quartz.SpringBeanJobFactory\n-     * #createJobInstance(org.quartz.spi.TriggerFiredBundle)\n-     *\n-     * @param bundle Spring's TriggerFiredBundle\n-     * @return the actual JobInstance\n-     * @throws Exception if anything goes wrong\n-     */\n-    @Override\n-    protected Object createJobInstance(final TriggerFiredBundle bundle)\n-            throws Exception {\n-\n-        XmlWebApplicationContext ctx =\n-                (XmlWebApplicationContext) schedulerContext.get(\n-                \"applicationContext\");\n-        Object job = ctx.getBean(bundle.getJobDetail().getName());\n-        BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(job);\n-        if (isEligibleForPropertyPopulation(bw.getWrappedInstance())) {\n-            MutablePropertyValues pvs = new MutablePropertyValues();\n-            if (this.schedulerContext != null) {\n-                pvs.addPropertyValues(this.schedulerContext);\n-            }\n-            pvs.addPropertyValues(bundle.getJobDetail().getJobDataMap());\n-            pvs.addPropertyValues(bundle.getTrigger().getJobDataMap());\n-            if (this.ignoredUnknownProperties != null) {\n-                for (String propName : this.ignoredUnknownProperties) {\n-                    if (pvs.contains(propName)\n-                            && !bw.isWritableProperty(propName)) {\n-\n-                        pvs.removePropertyValue(propName);\n-                    }\n-                }\n-                bw.setPropertyValues(pvs);\n-            } else {\n-                bw.setPropertyValues(pvs, true);\n-            }\n-        }\n-        return job;\n-    }\n-}"},{"sha":"7f2de28ca79ca19d1aac78f0073174cd1ca67788","filename":"core/src/main/java/org/syncope/core/scheduling/SyncJob.java","status":"modified","additions":290,"deletions":105,"changes":395,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -36,25 +36,28 @@\n import org.syncope.client.to.MembershipTO;\n import org.syncope.client.to.UserTO;\n import org.syncope.core.init.ConnInstanceLoader;\n-import org.syncope.core.persistence.beans.SchemaMapping;\n-import org.syncope.core.persistence.beans.SyncTask;\n import org.syncope.core.persistence.beans.ExternalResource;\n import org.syncope.core.persistence.beans.PropagationTask;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.persistence.beans.SyncTask;\n+import org.syncope.core.persistence.beans.TaskExec;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UAttrValue;\n import org.syncope.core.persistence.beans.user.UDerSchema;\n import org.syncope.core.persistence.beans.user.USchema;\n-import org.syncope.core.persistence.dao.ConnInstanceDAO;\n import org.syncope.core.persistence.dao.DerSchemaDAO;\n+import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.persistence.propagation.ConnectorFacadeProxy;\n import org.syncope.core.persistence.propagation.PropagationByResource;\n import org.syncope.core.persistence.propagation.PropagationException;\n import org.syncope.core.persistence.propagation.PropagationManager;\n import org.syncope.core.rest.controller.InvalidSearchConditionException;\n+import org.syncope.core.scheduling.SyncResult.Operation;\n import org.syncope.core.workflow.UserWorkflowAdapter;\n+import org.syncope.types.TraceLevel;\n \n /**\n  * Job for executing synchronization tasks.\n@@ -70,10 +73,10 @@ public class SyncJob extends AbstractJob {\n     private ConnInstanceLoader connInstanceLoader;\n \n     /**\n-     * Connector instance DAO.\n+     * Resource DAO.\n      */\n     @Autowired\n-    private ConnInstanceDAO connInstanceDAO;\n+    private ResourceDAO resourceDAO;\n \n     /**\n      * Schema DAO.\n@@ -345,14 +348,259 @@ private List<SyncopeUser> findExistingUsers(\n         return result;\n     }\n \n+    private SyncResult createUser(final SyncDelta delta,\n+            final Set<String> defaultResources,\n+            final Set<Long> defaultRoles, final boolean dryRun) {\n+\n+        SyncTask syncTask = (SyncTask) this.task;\n+        SyncResult result = new SyncResult();\n+        result.setOperation(Operation.CREATE);\n+\n+        UserTO userTO = getUserTO(delta.getObject(),\n+                syncTask.getResource().getMappings(),\n+                defaultRoles, defaultResources);\n+\n+        // shortcut in case of dry run.\n+        if (dryRun) {\n+            result.setUserId(0L);\n+            result.setUsername(userTO.getUsername());\n+            result.setStatus(SyncResult.Status.SUCCESS);\n+            return result;\n+        }\n+\n+        try {\n+            Map.Entry<Long, Boolean> created =\n+                    wfAdapter.create(userTO);\n+            List<PropagationTask> tasks =\n+                    propagationManager.getCreateTaskIds(\n+                    created.getKey(), userTO.getPassword(),\n+                    null, created.getValue(),\n+                    syncTask.getResource().getName());\n+            propagationManager.execute(tasks);\n+            result.setUserId(created.getKey());\n+            result.setUsername(userTO.getUsername());\n+            result.setStatus(SyncResult.Status.SUCCESS);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Could not propagate user \"\n+                    + delta.getUid().getUidValue(), e);\n+        } catch (Throwable t) {\n+            result.setStatus(SyncResult.Status.FAILURE);\n+            result.setMessage(t.getMessage());\n+            LOG.error(\"Could not create user \"\n+                    + delta.getUid().getUidValue(), t);\n+        }\n+        return result;\n+    }\n+\n+    private SyncResult updateUser(final SyncDelta delta,\n+            final SyncopeUser user, final Set<String> defaultResources,\n+            final Set<Long> defaultRoles, final boolean dryRun) {\n+\n+        SyncTask syncTask = (SyncTask) this.task;\n+\n+        SyncResult result = new SyncResult();\n+        result.setOperation(Operation.UPDATE);\n+        try {\n+            UserMod userMod = getUserMod(\n+                    user.getId(), delta.getObject(),\n+                    syncTask.getResource().getMappings(),\n+                    defaultRoles, defaultResources);\n+\n+            result.setStatus(SyncResult.Status.SUCCESS);\n+            result.setUserId(userMod.getId());\n+            result.setUsername(userMod.getUsername());\n+\n+            if (!dryRun) {\n+                Map.Entry<Long, PropagationByResource> updated =\n+                        wfAdapter.update(userMod);\n+                List<PropagationTask> tasks =\n+                        propagationManager.getUpdateTaskIds(\n+                        updated.getKey(), userMod.getPassword(),\n+                        null, null, null, updated.getValue(),\n+                        syncTask.getResource().getName());\n+                propagationManager.execute(tasks);\n+            }\n+        } catch (PropagationException e) {\n+            LOG.error(\"Could not propagate user \"\n+                    + delta.getUid().getUidValue(), e);\n+        } catch (Throwable t) {\n+            result.setStatus(SyncResult.Status.FAILURE);\n+            result.setMessage(t.getMessage());\n+            LOG.error(\"Could not update user \"\n+                    + delta.getUid().getUidValue(), t);\n+        }\n+        return result;\n+    }\n+\n+    private List<SyncResult> deleteUsers(\n+            final List<SyncopeUser> users, final boolean dryRun) {\n+\n+        LOG.debug(\"About to delete {}\", users);\n+        List<SyncResult> results =\n+                new ArrayList<SyncResult>();\n+\n+        for (SyncopeUser user : users) {\n+            Long userId = user.getId();\n+\n+            SyncResult result = new SyncResult();\n+            result.setUserId(userId);\n+            result.setUsername(user.getUsername());\n+            result.setOperation(Operation.DELETE);\n+            result.setStatus(SyncResult.Status.SUCCESS);\n+\n+            if (!dryRun) {\n+                try {\n+                    List<PropagationTask> tasks =\n+                            propagationManager.getDeleteTaskIds(userId,\n+                            ((SyncTask) this.task).getResource().getName());\n+                    propagationManager.execute(tasks);\n+                } catch (Exception e) {\n+                    LOG.error(\"Could not propagate user \" + userId, e);\n+                }\n+\n+                try {\n+                    wfAdapter.delete(userId);\n+                } catch (Throwable t) {\n+                    result.setStatus(SyncResult.Status.FAILURE);\n+                    result.setMessage(t.getMessage());\n+                    LOG.error(\"Could not delete user \" + userId, t);\n+                }\n+            }\n+            results.add(result);\n+        }\n+        return results;\n+    }\n+\n+    /**\n+     * Create a textual report of the synchronization, based on the trace level.\n+     * @return report as string\n+     */\n+    private String createReport(final List<SyncResult> syncResults,\n+            final TraceLevel syncTraceLevel, final boolean dryRun) {\n+\n+        if (syncTraceLevel == TraceLevel.NONE) {\n+            return null;\n+        }\n+\n+        StringBuilder report = new StringBuilder();\n+\n+        if (dryRun) {\n+            report.append(\"==>Dry run only, no modifications were made<==\\n\\n\");\n+        }\n+\n+        List<SyncResult> created =\n+                new ArrayList<SyncResult>();\n+        List<SyncResult> createdFailed =\n+                new ArrayList<SyncResult>();\n+        List<SyncResult> updated =\n+                new ArrayList<SyncResult>();\n+        List<SyncResult> updatedFailed =\n+                new ArrayList<SyncResult>();\n+        List<SyncResult> deleted =\n+                new ArrayList<SyncResult>();\n+        List<SyncResult> deletedFailed =\n+                new ArrayList<SyncResult>();\n+\n+        for (SyncResult syncResult : syncResults) {\n+            switch (syncResult.getStatus()) {\n+                case SUCCESS:\n+                    switch (syncResult.getOperation()) {\n+                        case CREATE:\n+                            created.add(syncResult);\n+                            break;\n+\n+                        case UPDATE:\n+                            updated.add(syncResult);\n+                            break;\n+\n+                        case DELETE:\n+                            deleted.add(syncResult);\n+                            break;\n+\n+                        default:\n+                    }\n+                    break;\n+\n+                case FAILURE:\n+                    switch (syncResult.getOperation()) {\n+                        case CREATE:\n+                            createdFailed.add(syncResult);\n+                            break;\n+\n+                        case UPDATE:\n+                            updatedFailed.add(syncResult);\n+                            break;\n+\n+                        case DELETE:\n+                            deletedFailed.add(syncResult);\n+                            break;\n+\n+                        default:\n+                    }\n+                    break;\n+\n+                default:\n+            }\n+        }\n+\n+        // Summary, also to be included for FAILURE and ALL, so create it\n+        // anyway.\n+        report.append(\"Users [created/failures]: \").\n+                append(created.size()).append('/').append(createdFailed.size()).\n+                append(' ').\n+                append(\"[updated/failures]: \").\n+                append(updated.size()).append('/').append(updatedFailed.size()).\n+                append(' ').\n+                append(\"[deleted/ failures]: \").\n+                append(deleted.size()).append('/').append(deletedFailed.size());\n+\n+        // Failures\n+        if (syncTraceLevel == TraceLevel.FAILURES\n+                || syncTraceLevel == TraceLevel.ALL) {\n+\n+            if (!createdFailed.isEmpty()) {\n+                report.append(\"\\n\\nFailed to create: \");\n+                report.append(SyncResult.reportSetOfSynchronizationResult(\n+                        createdFailed,\n+                        syncTraceLevel));\n+            }\n+            if (!updatedFailed.isEmpty()) {\n+                report.append(\"\\nFailed to update: \");\n+                report.append(SyncResult.reportSetOfSynchronizationResult(\n+                        updatedFailed,\n+                        syncTraceLevel));\n+            }\n+            if (!deletedFailed.isEmpty()) {\n+                report.append(\"\\nFailed to delete: \");\n+                report.append(SyncResult.reportSetOfSynchronizationResult(\n+                        deletedFailed,\n+                        syncTraceLevel));\n+            }\n+        }\n+\n+        // Succeeded, only if on 'ALL' level\n+        if (syncTraceLevel == TraceLevel.ALL) {\n+            report.append(\"\\n\\nCreated:\\n\").\n+                    append(SyncResult.reportSetOfSynchronizationResult(created,\n+                    syncTraceLevel)).\n+                    append(\"\\nUpdated:\\n\").append(SyncResult.\n+                    reportSetOfSynchronizationResult(updated, syncTraceLevel)).\n+                    append(\"\\nDeleted:\\n\").append(SyncResult.\n+                    reportSetOfSynchronizationResult(deleted, syncTraceLevel));\n+        }\n+\n+        return report.toString();\n+    }\n+\n     @Override\n-    protected String doExecute()\n+    protected String doExecute(final boolean dryRun)\n             throws JobExecutionException {\n \n         if (!(task instanceof SyncTask)) {\n             throw new JobExecutionException(\"Task \" + taskId\n                     + \" isn't a SyncTask\");\n         }\n+\n         final SyncTask syncTask = (SyncTask) this.task;\n \n         ConnectorFacadeProxy connector;\n@@ -395,131 +643,68 @@ protected String doExecute()\n             defaultRoles.add(role.getId());\n         }\n \n-        // counters\n-        int createdCounter = 0;\n-        int updatedCounter = 0;\n-        int deletedCounter = 0;\n-        int failCreatedCounter = 0;\n-        int failUpdatedCounter = 0;\n-        int failDeletedCounter = 0;\n-\n-        List<SyncopeUser> users;\n-        List<Long> userIds;\n-        SyncopeUser userToUpdate;\n+        List<SyncResult> results =\n+                new ArrayList<SyncResult>();\n         for (SyncDelta delta : deltas) {\n-            users = findExistingUsers(accountIdMap.getIntAttrName(),\n+            List<SyncopeUser> users =\n+                    findExistingUsers(accountIdMap.getIntAttrName(),\n                     delta.getUid().getUidValue(),\n                     delta.getPreviousUid() == null\n                     ? null : delta.getPreviousUid().getUidValue());\n \n             switch (delta.getDeltaType()) {\n                 case CREATE_OR_UPDATE:\n                     if (users.isEmpty()) {\n-                        try {\n-                            UserTO userTO = getUserTO(delta.getObject(),\n-                                    syncTask.getResource().getMappings(),\n-                                    defaultRoles, defaultResources);\n-                            Map.Entry<Long, Boolean> created =\n-                                    wfAdapter.create(userTO);\n-                            createdCounter++;\n-\n-                            List<PropagationTask> tasks =\n-                                    propagationManager.getCreateTaskIds(\n-                                    created.getKey(), userTO.getPassword(),\n-                                    null, created.getValue(),\n-                                    syncTask.getResource().getName());\n-                            propagationManager.execute(tasks);\n-                        } catch (PropagationException e) {\n-                            LOG.error(\"Could not propagate user \"\n-                                    + delta.getUid().getUidValue(), e);\n-                        } catch (Throwable t) {\n-                            failCreatedCounter++;\n-                            LOG.error(\"Could not create user \"\n-                                    + delta.getUid().getUidValue(), t);\n-                        }\n+                        results.add(createUser(delta, defaultResources,\n+                                defaultRoles, dryRun));\n                     } else if (users.size() == 1) {\n                         if (syncTask.isUpdateIdentities()) {\n-                            userToUpdate = users.iterator().next();\n-                            try {\n-                                UserMod userMod = getUserMod(\n-                                        userToUpdate.getId(), delta.getObject(),\n-                                        syncTask.getResource().getMappings(),\n-                                        defaultRoles, defaultResources);\n-\n-                                Map.Entry<Long, PropagationByResource> updated =\n-                                        wfAdapter.update(userMod);\n-                                updatedCounter++;\n-\n-                                List<PropagationTask> tasks =\n-                                        propagationManager.getUpdateTaskIds(\n-                                        updated.getKey(), userMod.getPassword(),\n-                                        null, null, null, updated.getValue(),\n-                                        syncTask.getResource().getName());\n-                                propagationManager.execute(tasks);\n-                            } catch (PropagationException e) {\n-                                LOG.error(\"Could not propagate user \"\n-                                        + delta.getUid().getUidValue(), e);\n-                            } catch (Throwable t) {\n-                                failUpdatedCounter++;\n-                                LOG.error(\"Could not update user \"\n-                                        + delta.getUid().getUidValue(), t);\n-                            }\n+                            results.add(updateUser(delta, users.get(0),\n+                                    defaultResources, defaultRoles, dryRun));\n                         }\n                     } else {\n                         LOG.error(\"More than one user matching {}\", users);\n                     }\n                     break;\n \n                 case DELETE:\n-                    LOG.debug(\"About to delete {}\", users);\n-\n-                    userIds = new ArrayList<Long>(users.size());\n-                    for (SyncopeUser user : users) {\n-                        userIds.add(user.getId());\n-                    }\n-                    for (Long userId : userIds) {\n-                        try {\n-                            List<PropagationTask> tasks =\n-                                    propagationManager.getDeleteTaskIds(userId,\n-                                    syncTask.getResource().getName());\n-                            propagationManager.execute(tasks);\n-                        } catch (Exception e) {\n-                            LOG.error(\"Could not propagate user \" + userId, e);\n-                        }\n-\n-                        try {\n-                            wfAdapter.delete(userId);\n-                            deletedCounter++;\n-                        } catch (Throwable t) {\n-                            failDeletedCounter++;\n-                            LOG.error(\"Could not delete user \" + userId, t);\n-                        }\n-                    }\n+                    results.addAll(deleteUsers(users, dryRun));\n                     break;\n \n                 default:\n             }\n         }\n \n-        StringBuilder result = new StringBuilder();\n-        result.append(\"Users [created/failures]: \").append(createdCounter).\n-                append('/').\n-                append(failCreatedCounter).append(' ').\n-                append(\"[updated/failures]: \").append(updatedCounter).append('/').\n-                append(failUpdatedCounter).append(' ').\n-                append(\"[deleted/ failures]: \").append(deletedCounter).append(\n-                '/').\n-                append(failDeletedCounter);\n+        String result = createReport(results, syncTask.getResource().\n+                getSyncTraceLevel(), dryRun);\n         LOG.debug(\"Sync result: {}\", result);\n \n-        try {\n-            syncTask.getResource().setSyncToken(\n-                    connector.getLatestSyncToken());\n-            connInstanceDAO.save(syncTask.getResource().getConnector());\n-        } catch (Throwable t) {\n-            throw new JobExecutionException(\"While updating SyncToken\", t);\n+        if (!dryRun) {\n+            try {\n+                syncTask.getResource().setSyncToken(\n+                        connector.getLatestSyncToken());\n+                resourceDAO.save(syncTask.getResource());\n+            } catch (Throwable t) {\n+                throw new JobExecutionException(\"While updating SyncToken\", t);\n+            }\n         }\n-\n         return result.toString();\n     }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected boolean hasToBeRegistered(final TaskExec execution) {\n+        SyncTask syncTask = (SyncTask) task;\n+\n+        // True if either failed and failures have to be registered, or if ALL\n+        // has to be registered.\n+        return (Status.valueOf(execution.getStatus())\n+                == Status.FAILURE\n+                && syncTask.getResource().getSyncTraceLevel().\n+                ordinal() >= TraceLevel.FAILURES.ordinal())\n+                || syncTask.getResource().getSyncTraceLevel()\n+                == TraceLevel.ALL;\n+    }\n }"},{"sha":"086b760619d4a986112619e452528cfa799531f1","filename":"core/src/main/java/org/syncope/core/scheduling/SyncResult.java","status":"added","additions":138,"deletions":0,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncResult.java?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -0,0 +1,138 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.scheduling;\n+\n+import java.util.Collection;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n+import org.apache.commons.lang.builder.ToStringStyle;\n+import org.syncope.types.TraceLevel;\n+\n+class SyncResult {\n+\n+    static enum Operation {\n+\n+        CREATE,\n+        UPDATE,\n+        DELETE\n+\n+    }\n+\n+    static enum Status {\n+\n+        SUCCESS,\n+        FAILURE\n+\n+    }\n+\n+    private String message;\n+\n+    private Status status;\n+\n+    private Operation operation;\n+\n+    private Long userId;\n+\n+    private String username;\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public void setMessage(final String message) {\n+        this.message = message;\n+    }\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(final String username) {\n+        this.username = username;\n+    }\n+\n+    public Long getUserId() {\n+        return userId;\n+    }\n+\n+    public void setUserId(Long userId) {\n+        this.userId = userId;\n+    }\n+\n+    public Status getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(final Status status) {\n+        this.status = status;\n+    }\n+\n+    public Operation getOperation() {\n+        return this.operation;\n+    }\n+\n+    public void setOperation(Operation t) {\n+        this.operation = t;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ReflectionToStringBuilder(this,\n+                ToStringStyle.SHORT_PREFIX_STYLE).toString();\n+    }\n+\n+    /**\n+     * Human readable report string, using the given trace level.\n+     * @param level trace level\n+     * @return String for certain levels, null for level NONE\n+     */\n+    public String getReportString(final TraceLevel level) {\n+        if (level == TraceLevel.SUMMARY) {\n+            // No per entry log in this case.\n+            return null;\n+        } else if (level == TraceLevel.FAILURES\n+                && status == Status.FAILURE) {\n+\n+            // only report failures\n+            return String.format(\"Failed %s (id/name): %d/%s with message: %s\",\n+                    operation, userId, username, message);\n+        } else {\n+            // All\n+            return String.format(\"%s %s (id/ name): %d/ %s %s\", operation, status,\n+                    userId, username,\n+                    StringUtils.isEmpty(message) ? \"\" : \"with message: \"\n+                    + message);\n+        }\n+    }\n+\n+    /**\n+     * Helper method to invoke logging per synchronization result for the\n+     * given trace level.\n+     * @param results synchronization result\n+     * @param level trace level\n+     * @return report as string\n+     */\n+    public static String reportSetOfSynchronizationResult(\n+            final Collection<SyncResult> results,\n+            final TraceLevel level) {\n+\n+        StringBuilder sb = new StringBuilder();\n+        for (SyncResult sr : results) {\n+            sb.append(sr.getReportString(level)).append(\"\\n\");\n+        }\n+        return sb.toString();\n+    }\n+}"},{"sha":"a24e0fa25a2057ab826c964883bd163e30640629","filename":"core/src/test/java/org/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":15,"deletions":6,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -164,8 +164,8 @@ public final void deal() {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n \n-        TaskExecTO execution = restTemplate.getForObject(\n-                BASE_URL + \"task/execute/{taskId}\",\n+        TaskExecTO execution = restTemplate.postForObject(\n+                BASE_URL + \"task/execute/{taskId}\", null,\n                 TaskExecTO.class, 1);\n         assertEquals(PropagationTaskExecStatus.SUBMITTED.toString(),\n                 execution.getStatus());\n@@ -204,8 +204,8 @@ public void sync() {\n                 BASE_URL + \"user/count.json\", Integer.class);\n         assertNotNull(usersPre);\n \n-        TaskExecTO execution = restTemplate.getForObject(\n-                BASE_URL + \"task/execute/{taskId}\",\n+        TaskExecTO execution = restTemplate.postForObject(\n+                BASE_URL + \"task/execute/{taskId}\", null,\n                 TaskExecTO.class, 4);\n         assertEquals(\"JOB_FIRED\", execution.getStatus());\n \n@@ -224,11 +224,20 @@ public void sync() {\n \n     @Test\n     public void issue196() {\n-        TaskExecTO execution = restTemplate.getForObject(\n-                BASE_URL + \"task/execute/{taskId}\",\n+        TaskExecTO execution = restTemplate.postForObject(\n+                BASE_URL + \"task/execute/{taskId}\", null,\n                 TaskExecTO.class, 6);\n         assertNotNull(execution);\n         assertEquals(0, execution.getId());\n         assertNotNull(execution.getTask());\n     }\n+\n+    @Test\n+    public void dryRun() {\n+        TaskExecTO execution = restTemplate.postForObject(\n+                BASE_URL + \"task/execute/{taskId}?dryRun=true\", null,\n+                TaskExecTO.class, 4);\n+        assertNotNull(execution);\n+        assertEquals(\"JOB_FIRED\", execution.getStatus());\n+    }\n }"},{"sha":"977ec9683908535e26997a866c323a46d1c0dd1d","filename":"core/src/test/resources/content.xml","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6d4899f9c63888d8353a6936ec112877c1f43f0/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6d4899f9c63888d8353a6936ec112877c1f43f0/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=e6d4899f9c63888d8353a6936ec112877c1f43f0","patch":"@@ -245,25 +245,25 @@\n     <ConnInstance_capabilities ConnInstance_id=\"104\" capabilities=\"SYNC\"/>\n     \n     <ExternalResource name=\"ws-target-resource-1\" connector_id=\"100\" forceMandatoryConstraint=\"0\" propagationMode=\"ASYNC\"\n-                      propagationPriority=\"0\" propagationPrimary=\"1\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\"/>\n+                      propagationPriority=\"0\" propagationPrimary=\"1\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n     <ExternalResource name=\"ws-target-resource-2\" connector_id=\"100\" forceMandatoryConstraint=\"1\" propagationMode=\"ASYNC\"\n-                      propagationPriority=\"0\" propagationPrimary=\"1\" createTraceLevel=\"FAILURES\" deleteTraceLevel=\"NONE\" updateTraceLevel=\"ALL\"/>\n+                      propagationPriority=\"0\" propagationPrimary=\"1\" createTraceLevel=\"FAILURES\" deleteTraceLevel=\"NONE\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n     <ExternalResource name=\"ws-target-resource-list-mappings-1\" connector_id=\"100\" forceMandatoryConstraint=\"0\" propagationMode=\"ASYNC\"\n-                      propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\"/>\n+                      propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n     <ExternalResource name=\"ws-target-resource-list-mappings-2\" connector_id=\"100\" forceMandatoryConstraint=\"1\" propagationMode=\"ASYNC\"\n-                      propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\"/>\n+                      propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n     <ExternalResource name=\"ws-target-resource-delete\" connector_id=\"102\" forceMandatoryConstraint=\"0\" propagationMode=\"ASYNC\"\n-                      propagationPriority=\"2\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\"/>\n+                      propagationPriority=\"2\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n     <ExternalResource name=\"ws-target-resource-update\" connector_id=\"100\" forceMandatoryConstraint=\"1\" propagationMode=\"ASYNC\"\n-                      propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\"/>\n+                      propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n     <ExternalResource name=\"ws-target-resource-nopropagation\" connector_id=\"103\" forceMandatoryConstraint=\"1\" propagationMode=\"ASYNC\"\n-                      propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" passwordPolicy_id=\"4\"/>\n+                      propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" passwordPolicy_id=\"4\"/>\n     <ExternalResource name=\"resource-testdb\" connector_id=\"101\" forceMandatoryConstraint=\"1\" propagationMode=\"SYNC\"\n-                      propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\"/>\n+                      propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n     <ExternalResource name=\"resource-csv\" connector_id=\"104\" forceMandatoryConstraint=\"0\" propagationMode=\"ASYNC\"\n-                      propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\"/>\n+                      propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n     <ExternalResource name=\"ws-target-resource-update-resetsynctoken\" connector_id=\"100\" forceMandatoryConstraint=\"1\" propagationMode=\"ASYNC\"\n-                      propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" serializedSyncToken=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E%3Cjava+version%3D%221.6.0_24%22+class%3D%22java.beans.XMLDecoder%22%3E%3C%2Fjava%3E\"/>\n+                      propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" serializedSyncToken=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E%3Cjava+version%3D%221.6.0_24%22+class%3D%22java.beans.XMLDecoder%22%3E%3C%2Fjava%3E\"/>\n                     \n     <SyncopeUser_ExternalResource users_id=\"3\" externalResources_name=\"ws-target-resource-delete\" />\n     <SyncopeRole_ExternalResource roles_id=\"3\" externalResources_name=\"ws-target-resource-list-mappings-1\" />"}]}