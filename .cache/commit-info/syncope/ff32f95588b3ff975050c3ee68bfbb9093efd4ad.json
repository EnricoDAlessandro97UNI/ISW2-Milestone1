{"sha":"ff32f95588b3ff975050c3ee68bfbb9093efd4ad","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmZmMzJmOTU1ODhiM2ZmOTc1MDUwYzNlZTY4YmZiYjkwOTNlZmQ0YWQ=","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2020-11-19T07:51:00Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-11-19T07:51:00Z"},"message":"SYNCOPE-1599: support for duo security mfa (#227)","tree":{"sha":"2f8e39d3b7627a1c3793f5c829d4aceef1d988ad","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2f8e39d3b7627a1c3793f5c829d4aceef1d988ad"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ff32f95588b3ff975050c3ee68bfbb9093efd4ad","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJftiPkCRBK7hj4Ov3rIwAAdHIIAIeIli3ujOQS/A1WOs8FPEhg\nm5sgZT/6kGAsoCuh2IjeN+YN2qGdC6ZTBuHNhC2n+ME+za2irc25piGQXPVeQLZt\n3UMoH6PMj6YcoZErmr7qG4eKSmui0r+tH9JjGsds1LjGYczLX0wSNpps5qBj7dsd\nZmp0qKnqwqiSZiwZqc2kIPIZFOk12oiXTcaJvS8jahoReI3sASmJoz9ZQCjn9+fg\nP9wYA3fo4sd6glkzM2/7MrXW3Wmoz5VpzvEwq4s2/Er3XkRhI/QJginD8a2vAxuM\n0OtTaoM1k0NaMqIBWHw7HTBuJSJdOyzGtHW6Bx0cCmjcl5LfhV95WXb80B60z24=\n=R3mu\n-----END PGP SIGNATURE-----\n","payload":"tree 2f8e39d3b7627a1c3793f5c829d4aceef1d988ad\nparent 61a03446a8416e281ea23082e75852edb30b3d6a\nauthor Misagh Moayyed <mm1844@gmail.com> 1605772260 +0400\ncommitter GitHub <noreply@github.com> 1605772260 +0330\n\nSYNCOPE-1599: support for duo security mfa (#227)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ff32f95588b3ff975050c3ee68bfbb9093efd4ad","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ff32f95588b3ff975050c3ee68bfbb9093efd4ad","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ff32f95588b3ff975050c3ee68bfbb9093efd4ad/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"61a03446a8416e281ea23082e75852edb30b3d6a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/61a03446a8416e281ea23082e75852edb30b3d6a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/61a03446a8416e281ea23082e75852edb30b3d6a"}],"stats":{"total":193,"additions":192,"deletions":1},"files":[{"sha":"15a49094b579e8b86caaae4b0d2517a5006b37f7","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/DuoMfaAuthModuleConf.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff32f95588b3ff975050c3ee68bfbb9093efd4ad/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FDuoMfaAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff32f95588b3ff975050c3ee68bfbb9093efd4ad/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FDuoMfaAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FDuoMfaAuthModuleConf.java?ref=ff32f95588b3ff975050c3ee68bfbb9093efd4ad","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.auth;\n+\n+public class DuoMfaAuthModuleConf extends AbstractAuthModuleConf {\n+\n+    private static final long serialVersionUID = -2883257599439312426L;\n+\n+    private String integrationKey;\n+\n+    private String secretKey;\n+\n+    private String applicationKey;\n+\n+    private String apiHost;\n+\n+    public String getIntegrationKey() {\n+        return integrationKey;\n+    }\n+\n+    public void setIntegrationKey(final String integrationKey) {\n+        this.integrationKey = integrationKey;\n+    }\n+\n+    public String getSecretKey() {\n+        return secretKey;\n+    }\n+\n+    public void setSecretKey(final String secretKey) {\n+        this.secretKey = secretKey;\n+    }\n+\n+    public String getApplicationKey() {\n+        return applicationKey;\n+    }\n+\n+    public void setApplicationKey(final String applicationKey) {\n+        this.applicationKey = applicationKey;\n+    }\n+\n+    public String getApiHost() {\n+        return apiHost;\n+    }\n+\n+    public void setApiHost(final String apiHost) {\n+        this.apiHost = apiHost;\n+    }\n+}"},{"sha":"e93becb658f30c2b072c9d3a51c4048c48430537","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff32f95588b3ff975050c3ee68bfbb9093efd4ad/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff32f95588b3ff975050c3ee68bfbb9093efd4ad/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=ff32f95588b3ff975050c3ee68bfbb9093efd4ad","patch":"@@ -67,6 +67,8 @@ under the License.\n               description=\"JDBC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.JDBCAuthModuleConf\",\"sql\":\"SELECT * FROM users_table WHERE name=?\", \"fieldPassword\": \"password\"}'/>\n   <AuthModule id=\"DefaultGoogleMfaAuthModule\"\n               description=\"Google Mfa auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf\",\"codeDigits\":6,\"issuer\":\"SyncopeTest\", \"label\":\"SyncopeTest\", \"timeStepSize\":30, \"windowSize\":3}'/>\n+  <AuthModule id=\"DefaultDuoMfaAuthModule\"\n+              description=\"Duo Mfa auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.DuoMfaAuthModuleConf\",\"integrationKey\":\"DIOXVRZD2UMZ8XXMNFQ5\",\"secretKey\":\"Q2IU2i8BFNd6VYflZT8Evl6lF7oPlj3PM15BmRU7\", \"applicationKey\":\"u1IHBaREMB7Cb5S4QMISAgHycpj8lPBkDGfWt23I\", \"apiHost\":\"theapi.duosecurity.com\"}'/>\n   <AuthModule id=\"DefaultOIDCAuthModule\"\n               description=\"OIDC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.OIDCAuthModuleConf\",\"discoveryUri\":\"https://accounts.google.com/.well-known/openid-configuration\", \"id\":\"client-id\", \"secret\": \"client-secret\" }'/>\n   <AuthModule id=\"DefaultSAML2IdPAuthModule\""},{"sha":"92edeec87ff82ebbfc6fdb13f2d6b0596c29a392","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AuthModuleTest.java","status":"modified","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff32f95588b3ff975050c3ee68bfbb9093efd4ad/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff32f95588b3ff975050c3ee68bfbb9093efd4ad/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java?ref=ff32f95588b3ff975050c3ee68bfbb9093efd4ad","patch":"@@ -28,6 +28,7 @@\n import java.util.UUID;\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.syncope.common.lib.auth.AuthModuleConf;\n+import org.apache.syncope.common.lib.auth.DuoMfaAuthModuleConf;\n import org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf;\n import org.apache.syncope.common.lib.auth.JDBCAuthModuleConf;\n import org.apache.syncope.common.lib.auth.JaasAuthModuleConf;\n@@ -74,6 +75,10 @@ public void find() {\n         assertNotNull(authModule);\n         assertTrue(authModule.getConf() instanceof GoogleMfaAuthModuleConf);\n \n+        authModule = authModuleDAO.find(\"DefaultDuoMfaAuthModule\");\n+        assertNotNull(authModule);\n+        assertTrue(authModule.getConf() instanceof DuoMfaAuthModuleConf);\n+\n         authModule = authModuleDAO.find(\"DefaultOIDCAuthModule\");\n         assertNotNull(authModule);\n         assertTrue(authModule.getConf() instanceof OIDCAuthModuleConf);\n@@ -115,6 +120,9 @@ public void findByType() {\n         assertTrue(authModules.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), GoogleMfaAuthModuleConf.class)\n                 && authModule.getKey().equals(\"DefaultGoogleMfaAuthModule\")));\n+        assertTrue(authModules.stream().anyMatch(\n+            authModule -> isSpecificConf(authModule.getConf(), DuoMfaAuthModuleConf.class)\n+                && authModule.getKey().equals(\"DefaultDuoMfaAuthModule\")));\n         assertTrue(authModules.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), OIDCAuthModuleConf.class)\n                 && authModule.getKey().equals(\"DefaultOIDCAuthModule\")));\n@@ -184,6 +192,16 @@ public void saveWithGoogleAuthenticatorModule() {\n         saveAuthModule(\"GoogleMfaAuthModuleTest\", conf);\n     }\n \n+    @Test\n+    public void saveWithDuoAuthenticatorModule() {\n+        DuoMfaAuthModuleConf conf = new DuoMfaAuthModuleConf();\n+        conf.setSecretKey(\"Q2IU2i6BFNd6VYflZT8Evl6lF7oPlj4PM15BmRU7\");\n+        conf.setIntegrationKey(\"DIOXVRZD1UMZ8XXMNFQ6\");\n+        conf.setApiHost(\"theapi.duosecurity.com\");\n+        conf.setApplicationKey(\"u4IHCaREMB7Cb0S6QMISAgHycpj6lPBkDGfWt99I\");\n+        saveAuthModule(\"DuoMfaAuthModuleTest\", conf);\n+    }\n+\n     @Test\n     public void saveWithOIDCAuthModule() {\n         OIDCAuthModuleConf conf = new OIDCAuthModuleConf();\n@@ -292,6 +310,24 @@ public void updateWithGoogleMfaModule() {\n         assertEquals(\"newLabel\", GoogleMfaAuthModuleConf.class.cast(found.getConf()).getLabel());\n     }\n \n+    @Test\n+    public void updateWithDuoMfaModule() {\n+        AuthModule module = authModuleDAO.find(\"DefaultDuoMfaAuthModule\");\n+        assertNotNull(module);\n+        AuthModuleConf conf = module.getConf();\n+        String secretKey = UUID.randomUUID().toString();\n+        DuoMfaAuthModuleConf.class.cast(conf).setSecretKey(secretKey);\n+        module.setConf(conf);\n+\n+        module = authModuleDAO.save(module);\n+        assertNotNull(module);\n+        assertNotNull(module.getKey());\n+        AuthModule found = authModuleDAO.find(module.getKey());\n+        assertNotNull(found);\n+        assertEquals(secretKey, DuoMfaAuthModuleConf.class.cast(found.getConf()).getSecretKey());\n+    }\n+\n+\n     @Test\n     public void updateWithSAML2IdPModule() {\n         AuthModule module = authModuleDAO.find(\"DefaultSAML2IdPAuthModule\");"},{"sha":"2068f098bd443bdc700305fdb891ae9703b65f41","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff32f95588b3ff975050c3ee68bfbb9093efd4ad/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff32f95588b3ff975050c3ee68bfbb9093efd4ad/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=ff32f95588b3ff975050c3ee68bfbb9093efd4ad","patch":"@@ -67,6 +67,8 @@ under the License.\n               description=\"JDBC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.JDBCAuthModuleConf\",\"sql\":\"SELECT * FROM users_table WHERE name=?\", \"fieldPassword\": \"password\"}'/>\n   <AuthModule id=\"DefaultGoogleMfaAuthModule\"\n               description=\"Google Mfa auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf\",\"codeDigits\":6,\"issuer\":\"SyncopeTest\", \"label\":\"SyncopeTest\", \"timeStepSize\":30, \"windowSize\":3}'/>\n+  <AuthModule id=\"DefaultDuoMfaAuthModule\"\n+              description=\"Duo Mfa auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.DuoMfaAuthModuleConf\",\"integrationKey\":\"DIOXVRZD2UMZ8XXMNFQ5\",\"secretKey\":\"Q2IU2i8BFNd6VYflZT8Evl6lF7oPlj3PM15BmRU7\", \"applicationKey\":\"u1IHBaREMB7Cb5S4QMISAgHycpj8lPBkDGfWt23I\", \"apiHost\":\"theapi.duosecurity.com\"}'/>\n   <AuthModule id=\"DefaultOIDCAuthModule\"\n               description=\"OIDC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.OIDCAuthModuleConf\",\"discoveryUri\":\"https://accounts.google.com/.well-known/openid-configuration\", \"id\":\"client-id\", \"secret\": \"client-secret\" }'/>\n   <AuthModule id=\"DefaultSAML2IdPAuthModule\""},{"sha":"e04fd318dbc93322f736c18ba4a3484af13bb211","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthModuleITCase.java","status":"modified","additions":47,"deletions":1,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff32f95588b3ff975050c3ee68bfbb9093efd4ad/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff32f95588b3ff975050c3ee68bfbb9093efd4ad/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java?ref=ff32f95588b3ff975050c3ee68bfbb9093efd4ad","patch":"@@ -25,6 +25,7 @@\n import static org.junit.jupiter.api.Assertions.fail;\n \n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.auth.DuoMfaAuthModuleConf;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Test;\n import java.io.IOException;\n@@ -52,6 +53,7 @@ public class AuthModuleITCase extends AbstractITCase {\n \n     private enum AuthModuleSupportedType {\n         GOOGLE_MFA,\n+        DUO,\n         SAML2_IDP,\n         STATIC,\n         SYNCOPE,\n@@ -91,6 +93,14 @@ private static AuthModuleTO buildAuthModuleTO(final AuthModuleSupportedType type\n                 GoogleMfaAuthModuleConf.class.cast(conf).setWindowSize(3);\n                 break;\n \n+            case DUO:\n+                conf = new DuoMfaAuthModuleConf();\n+                DuoMfaAuthModuleConf.class.cast(conf).setSecretKey(\"Q2IU2i6BFNd6VYflZT8Evl6lF7oPlj4PM15BmRU7\");\n+                DuoMfaAuthModuleConf.class.cast(conf).setIntegrationKey(\"DIOXVRZD1UMZ8XXMNFQ6\");\n+                DuoMfaAuthModuleConf.class.cast(conf).setApiHost(\"theapi.duosecurity.com\");\n+                DuoMfaAuthModuleConf.class.cast(conf).setApplicationKey(\"u4IHCaREMB7Cb0S6QMISAgHycpj6lPBkDGfWt99I\");\n+                break;\n+\n             case JAAS:\n                 conf = new JaasAuthModuleConf();\n                 JaasAuthModuleConf.class.cast(conf).setKerberosKdcSystemProperty(\"sample-value\");\n@@ -182,6 +192,9 @@ public void list() {\n         assertTrue(authModuleTOs.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), GoogleMfaAuthModuleConf.class)\n                 && authModule.getKey().equals(\"DefaultGoogleMfaAuthModule\")));\n+        assertTrue(authModuleTOs.stream().anyMatch(\n+            authModule -> isSpecificConf(authModule.getConf(), DuoMfaAuthModuleConf.class)\n+                && authModule.getKey().equals(\"DefaultDuoMfaAuthModule\")));\n         assertTrue(authModuleTOs.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), OIDCAuthModuleConf.class)\n                 && authModule.getKey().equals(\"DefaultOIDCAuthModule\")));\n@@ -235,6 +248,15 @@ public void getGoogleMfaAuthModule() {\n         assertFalse(isSpecificConf(authModuleTO.getConf(), OIDCAuthModuleConf.class));\n     }\n \n+    @Test\n+    public void getDuoMfaAuthModule() {\n+        AuthModuleTO authModuleTO = authModuleService.read(\"DefaultDuoMfaAuthModule\");\n+\n+        assertNotNull(authModuleTO);\n+        assertTrue(StringUtils.isNotBlank(authModuleTO.getDescription()));\n+        assertTrue(isSpecificConf(authModuleTO.getConf(), DuoMfaAuthModuleConf.class));\n+    }\n+\n     @Test\n     public void getOIDCAuthModule() {\n         AuthModuleTO authModuleTO = authModuleService.read(\"DefaultOIDCAuthModule\");\n@@ -306,7 +328,7 @@ public void getU2FAuthModule() {\n     }\n \n     @Test\n-    public void create() throws IOException {\n+    public void create() {\n         EnumSet.allOf(AuthModuleSupportedType.class).forEach(type -> {\n             AuthModuleTO authModuleTO = createAuthModule(buildAuthModuleTO(type));\n             assertNotNull(authModuleTO);\n@@ -338,6 +360,30 @@ public void updateGoogleMfaAuthModule() {\n         assertEquals(\"newLabel\", GoogleMfaAuthModuleConf.class.cast(conf).getLabel());\n     }\n \n+    @Test\n+    public void updateDuoMfaAuthModule() {\n+        AuthModuleTO duoMfaAuthModuleTO = authModuleService.read(\"DefaultDuoMfaAuthModule\");\n+        assertNotNull(duoMfaAuthModuleTO);\n+\n+        AuthModuleTO newDuoMfaAuthModuleTO = buildAuthModuleTO(AuthModuleSupportedType.DUO);\n+        newDuoMfaAuthModuleTO = createAuthModule(newDuoMfaAuthModuleTO);\n+        assertNotNull(newDuoMfaAuthModuleTO);\n+\n+        AuthModuleConf conf = duoMfaAuthModuleTO.getConf();\n+        assertNotNull(conf);\n+        String secretKey = UUID.randomUUID().toString();\n+        DuoMfaAuthModuleConf.class.cast(conf).setSecretKey(secretKey);\n+        newDuoMfaAuthModuleTO.setConf(conf);\n+\n+        // update new auth module\n+        authModuleService.update(newDuoMfaAuthModuleTO);\n+        newDuoMfaAuthModuleTO = authModuleService.read(newDuoMfaAuthModuleTO.getKey());\n+        assertNotNull(newDuoMfaAuthModuleTO);\n+\n+        conf = newDuoMfaAuthModuleTO.getConf();\n+        assertEquals(secretKey, DuoMfaAuthModuleConf.class.cast(conf).getSecretKey());\n+    }\n+\n     @Test\n     public void updateLDAPAuthModule() {\n         AuthModuleTO ldapAuthModuleTO = authModuleService.read(\"DefaultLDAPAuthModule\");"},{"sha":"5f5f5268cdf9ab6dcc1befcfa932566f77e79eaf","filename":"pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff32f95588b3ff975050c3ee68bfbb9093efd4ad/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff32f95588b3ff975050c3ee68bfbb9093efd4ad/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=ff32f95588b3ff975050c3ee68bfbb9093efd4ad","patch":"@@ -1622,6 +1622,11 @@ under the License.\n         <artifactId>cas-server-support-gauth</artifactId>\n         <version>${cas.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.apereo.cas</groupId>\n+        <artifactId>cas-server-support-duo</artifactId>\n+        <version>${cas.version}</version>\n+      </dependency>\n       <dependency>\n         <groupId>org.apereo.cas</groupId>\n         <artifactId>cas-server-support-gauth-core-mfa</artifactId>"},{"sha":"cee84b820461b7078d74d2d54f1e36bd614f35b7","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWAPropertySourceLocator.java","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff32f95588b3ff975050c3ee68bfbb9093efd4ad/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff32f95588b3ff975050c3ee68bfbb9093efd4ad/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java?ref=ff32f95588b3ff975050c3ee68bfbb9093efd4ad","patch":"@@ -20,13 +20,16 @@\n \n import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;\n import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;\n+\n+import java.util.List;\n import java.util.Map;\n import java.util.TreeMap;\n import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.auth.AuthModuleConf;\n+import org.apache.syncope.common.lib.auth.DuoMfaAuthModuleConf;\n import org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf;\n import org.apache.syncope.common.lib.auth.JDBCAuthModuleConf;\n import org.apache.syncope.common.lib.auth.JaasAuthModuleConf;\n@@ -48,6 +51,7 @@\n import org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.ldap.AbstractLdapAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties;\n+import org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorProperties;\n import org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.mfa.gauth.GoogleAuthenticatorMultifactorProperties;\n import org.apereo.cas.configuration.model.support.mfa.u2f.U2FMultifactorProperties;\n@@ -147,6 +151,32 @@ private static Map<String, Object> mapAuthModule(\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n+    private static Map<String, Object> mapAuthModule(\n+        final String authModule,\n+        final DuoMfaAuthModuleConf conf) {\n+        DuoSecurityMultifactorProperties props = new DuoSecurityMultifactorProperties();\n+        props.setName(authModule);\n+        props.setDuoApiHost(conf.getApiHost());\n+        props.setDuoApplicationKey(conf.getApplicationKey());\n+        props.setDuoIntegrationKey(conf.getIntegrationKey());\n+        props.setDuoSecretKey(conf.getSecretKey());\n+\n+        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n+        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n+        casProperties.getAuthn().getMfa().setDuo(List.of(props));\n+        \n+        filterProvider.\n+            addFilter(AuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n+                        AuthenticationProperties::getMfa))).\n+            addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(MultifactorAuthenticationProperties.class,\n+                        MultifactorAuthenticationProperties::getDuo)));\n+        return filterCasProperties(casProperties, filterProvider);\n+    }\n+\n     private static Map<String, Object> mapAuthModule(\n             final String authModule,\n             final GoogleMfaAuthModuleConf conf) {\n@@ -408,6 +438,8 @@ public PropertySource<?> locate(final Environment environment) {\n                         (SyncopeAuthModuleConf) authConf, syncopeClient.getAddress()));\n             } else if (authConf instanceof GoogleMfaAuthModuleConf) {\n                 properties.putAll(mapAuthModule(authModuleTO.getKey(), (GoogleMfaAuthModuleConf) authConf));\n+            } else if (authConf instanceof DuoMfaAuthModuleConf) {\n+                properties.putAll(mapAuthModule(authModuleTO.getKey(), (DuoMfaAuthModuleConf) authConf));\n             } else if (authConf instanceof JaasAuthModuleConf) {\n                 properties.putAll(mapAuthModule(authModuleTO.getKey(), (JaasAuthModuleConf) authConf));\n             } else if (authConf instanceof JDBCAuthModuleConf) {"},{"sha":"67a05194a369074b392f380109eda22bc4bacb8d","filename":"wa/starter/pom.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff32f95588b3ff975050c3ee68bfbb9093efd4ad/wa%2Fstarter%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff32f95588b3ff975050c3ee68bfbb9093efd4ad/wa%2Fstarter%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fpom.xml?ref=ff32f95588b3ff975050c3ee68bfbb9093efd4ad","patch":"@@ -238,6 +238,10 @@ under the License.\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-support-gauth</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-support-duo</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-support-gauth-core-mfa</artifactId>"}]}