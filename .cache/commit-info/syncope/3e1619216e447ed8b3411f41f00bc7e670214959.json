{"sha":"3e1619216e447ed8b3411f41f00bc7e670214959","node_id":"C_kwDOJfYA1toAKDNlMTYxOTIxNmU0NDdlZDhiMzQxMWY0MWYwMGJjN2U2NzAyMTQ5NTk","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-02-28T11:32:40Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2023-03-04T07:05:02Z"},"message":"[SYNCOPE-1736] Update template handling","tree":{"sha":"8adf840c97755efabacb629e44f2b443cebaff14","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8adf840c97755efabacb629e44f2b443cebaff14"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3e1619216e447ed8b3411f41f00bc7e670214959","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3e1619216e447ed8b3411f41f00bc7e670214959","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3e1619216e447ed8b3411f41f00bc7e670214959","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3e1619216e447ed8b3411f41f00bc7e670214959/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"ce8fa6bf798c49146c367c0276ace4097e205838","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ce8fa6bf798c49146c367c0276ace4097e205838","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ce8fa6bf798c49146c367c0276ace4097e205838"}],"stats":{"total":96,"additions":71,"deletions":25},"files":[{"sha":"7d063de1f8d0d58222f5b01abf97270ab5582111","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/TemplateUtils.java","status":"modified","additions":71,"deletions":25,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e1619216e447ed8b3411f41f00bc7e670214959/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e1619216e447ed8b3411f41f00bc7e670214959/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java?ref=3e1619216e447ed8b3411f41f00bc7e670214959","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.provisioning.java.utils;\n \n import java.util.Map;\n+import java.util.Objects;\n import java.util.Optional;\n import org.apache.commons.jexl3.MapContext;\n import org.apache.commons.lang3.StringUtils;\n@@ -37,8 +38,6 @@\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -179,11 +178,32 @@ public void apply(final RealmMember realmMember, final AnyTO template) {\n \n             fillRelationships((GroupableRelatableTO) realmMember, ((GroupableRelatableTO) template));\n             fillMemberships((GroupableRelatableTO) realmMember, ((GroupableRelatableTO) template));\n-            if (realmMember instanceof UserTO) {\n-                ((UserTO) realmMember).getRoles().addAll(((UserTO) template).getRoles());\n-            } else if (realmMember instanceof UserCR) {\n-                ((UserCR) realmMember).getRoles().addAll(((UserTO) template).getRoles());\n-            }\n+\n+            ((UserTO) template).getRoles().forEach(role -> {\n+                if (realmMember instanceof UserTO\n+                        && !((UserTO) realmMember).getRoles().contains(role)) {\n+\n+                    ((UserTO) realmMember).getRoles().add(role);\n+                } else if (realmMember instanceof UserCR\n+                        && !((UserCR) realmMember).getRoles().contains(role)) {\n+\n+                    ((UserCR) realmMember).getRoles().add(role);\n+                }\n+            });\n+\n+            ((UserTO) template).getLinkedAccounts().forEach(account -> {\n+                if (realmMember instanceof UserTO && ((UserTO) realmMember).getLinkedAccounts().stream().\n+                        noneMatch(a -> Objects.equals(account.getConnObjectKeyValue(), a.getConnObjectKeyValue())\n+                        && Objects.equals(account.getResource(), a.getResource()))) {\n+\n+                    ((UserTO) realmMember).getLinkedAccounts().add(account);\n+                } else if (realmMember instanceof UserCR && ((UserCR) realmMember).getLinkedAccounts().stream().\n+                        noneMatch(a -> Objects.equals(account.getConnObjectKeyValue(), a.getConnObjectKeyValue())\n+                        && Objects.equals(account.getResource(), a.getResource()))) {\n+\n+                    ((UserCR) realmMember).getLinkedAccounts().add(account);\n+                }\n+            });\n         } else if (template instanceof GroupTO) {\n             if (StringUtils.isNotBlank(((GroupTO) template).getName())) {\n                 String evaluated = JexlUtils.evaluate(((GroupTO) template).getName(), jexlContext).toString();\n@@ -196,26 +216,52 @@ public void apply(final RealmMember realmMember, final AnyTO template) {\n                 }\n             }\n \n-            if (((GroupTO) template).getUserOwner() != null) {\n-                final User userOwner = userDAO.find(((GroupTO) template).getUserOwner());\n-                if (userOwner != null) {\n-                    if (realmMember instanceof GroupTO) {\n-                        ((GroupTO) realmMember).setUserOwner(userOwner.getKey());\n-                    } else if (realmMember instanceof GroupCR) {\n-                        ((GroupCR) realmMember).setUserOwner(userOwner.getKey());\n-                    }\n+            Optional.ofNullable(((GroupTO) template).getUserOwner()).map(userDAO::find).ifPresent(userOwner -> {\n+                if (realmMember instanceof GroupTO) {\n+                    ((GroupTO) realmMember).setUserOwner(userOwner.getKey());\n+                } else if (realmMember instanceof GroupCR) {\n+                    ((GroupCR) realmMember).setUserOwner(userOwner.getKey());\n                 }\n-            }\n-            if (((GroupTO) template).getGroupOwner() != null) {\n-                final Group groupOwner = groupDAO.find(((GroupTO) template).getGroupOwner());\n-                if (groupOwner != null) {\n-                    if (realmMember instanceof GroupTO) {\n-                        ((GroupTO) realmMember).setGroupOwner(groupOwner.getKey());\n-                    } else if (realmMember instanceof GroupCR) {\n-                        ((GroupCR) realmMember).setGroupOwner(groupOwner.getKey());\n-                    }\n+            });\n+            Optional.ofNullable(((GroupTO) template).getGroupOwner()).map(groupDAO::find).ifPresent(groupOwner -> {\n+                if (realmMember instanceof GroupTO) {\n+                    ((GroupTO) realmMember).setGroupOwner(groupOwner.getKey());\n+                } else if (realmMember instanceof GroupCR) {\n+                    ((GroupCR) realmMember).setGroupOwner(groupOwner.getKey());\n                 }\n-            }\n+            });\n+\n+            Optional.ofNullable(((GroupTO) template).getUDynMembershipCond()).ifPresent(udynMembershipCond -> {\n+                if (realmMember instanceof GroupTO) {\n+                    ((GroupTO) realmMember).setUDynMembershipCond(udynMembershipCond);\n+                } else if (realmMember instanceof GroupCR) {\n+                    ((GroupCR) realmMember).setUDynMembershipCond(udynMembershipCond);\n+                }\n+            });\n+\n+            ((GroupTO) template).getADynMembershipConds().forEach((anyType, cond) -> {\n+                if (realmMember instanceof GroupTO\n+                        && !((GroupTO) realmMember).getADynMembershipConds().containsKey(anyType)) {\n+\n+                    ((GroupTO) realmMember).getADynMembershipConds().put(anyType, cond);\n+                } else if (realmMember instanceof GroupCR\n+                        && !((GroupCR) realmMember).getADynMembershipConds().containsKey(anyType)) {\n+\n+                    ((GroupCR) realmMember).getADynMembershipConds().put(anyType, cond);\n+                }\n+            });\n+\n+            ((GroupTO) template).getTypeExtensions().forEach(typeExt -> {\n+                if (realmMember instanceof GroupTO\n+                        && !((GroupTO) realmMember).getTypeExtensions().contains(typeExt)) {\n+\n+                    ((GroupTO) realmMember).getTypeExtensions().add(typeExt);\n+                } else if (realmMember instanceof GroupCR\n+                        && !((GroupCR) realmMember).getTypeExtensions().contains(typeExt)) {\n+\n+                    ((GroupCR) realmMember).getTypeExtensions().add(typeExt);\n+                }\n+            });\n         }\n     }\n "}]}