{"sha":"33d8fabfb8b453bd2fcded15945ffb56a490feb7","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjMzZDhmYWJmYjhiNDUzYmQyZmNkZWQxNTk0NWZmYjU2YTQ5MGZlYjc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-07-07T09:16:18Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-07-07T09:16:18Z"},"message":"Easier override for ActivitiUserWorkflowAdapter","tree":{"sha":"2ec5dcc3562728202ad6a91c6946322aac4f7c32","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2ec5dcc3562728202ad6a91c6946322aac4f7c32"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/33d8fabfb8b453bd2fcded15945ffb56a490feb7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/33d8fabfb8b453bd2fcded15945ffb56a490feb7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/33d8fabfb8b453bd2fcded15945ffb56a490feb7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/33d8fabfb8b453bd2fcded15945ffb56a490feb7/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"2612337228f1fbd3818f61c4dd3371b7bf1d37fb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2612337228f1fbd3818f61c4dd3371b7bf1d37fb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2612337228f1fbd3818f61c4dd3371b7bf1d37fb"}],"stats":{"total":48,"additions":24,"deletions":24},"files":[{"sha":"f974267e2164ac2eb7103a6eb92ce0fdef5689fb","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":24,"deletions":24,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/33d8fabfb8b453bd2fcded15945ffb56a490feb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/33d8fabfb8b453bd2fcded15945ffb56a490feb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=33d8fabfb8b453bd2fcded15945ffb56a490feb7","patch":"@@ -92,9 +92,9 @@ public class ActivitiUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n     /**\n      * Logger.\n      */\n-    private static final Logger LOG = LoggerFactory.getLogger(ActivitiUserWorkflowAdapter.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(ActivitiUserWorkflowAdapter.class);\n \n-    private static final String[] PROPERTY_IGNORE_PROPS = { \"type\" };\n+    protected static final String[] PROPERTY_IGNORE_PROPS = { \"type\" };\n \n     public static final String WF_PROCESS_ID = \"userWorkflow\";\n \n@@ -137,35 +137,35 @@ public class ActivitiUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n     public static final String EVENT = \"event\";\n \n     @Resource(name = \"adminUser\")\n-    private String adminUser;\n+    protected String adminUser;\n \n     @Autowired\n-    private RuntimeService runtimeService;\n+    protected RuntimeService runtimeService;\n \n     @Autowired\n-    private TaskService taskService;\n+    protected TaskService taskService;\n \n     @Autowired\n-    private FormService formService;\n+    protected FormService formService;\n \n     @Autowired\n-    private HistoryService historyService;\n+    protected HistoryService historyService;\n \n     @Autowired\n-    private RepositoryService repositoryService;\n+    protected RepositoryService repositoryService;\n \n     @Autowired\n-    private ActivitiImportUtils importUtils;\n+    protected ActivitiImportUtils importUtils;\n \n     @Autowired\n-    private UserDataBinder userDataBinder;\n+    protected UserDataBinder userDataBinder;\n \n     @Override\n     public Class<? extends WorkflowInstanceLoader> getLoaderClass() {\n         return ActivitiWorkflowLoader.class;\n     }\n \n-    private void throwException(final ActivitiException e, final String defaultMessage) {\n+    protected void throwException(final ActivitiException e, final String defaultMessage) {\n         if (e.getCause() != null) {\n             if (e.getCause().getCause() instanceof SyncopeClientException) {\n                 throw (SyncopeClientException) e.getCause().getCause();\n@@ -179,7 +179,7 @@ private void throwException(final ActivitiException e, final String defaultMessa\n         throw new WorkflowException(defaultMessage, e);\n     }\n \n-    private void updateStatus(final SyncopeUser user) {\n+    protected void updateStatus(final SyncopeUser user) {\n         List<Task> tasks = taskService.createTaskQuery().processInstanceId(user.getWorkflowId()).list();\n         if (tasks.isEmpty() || tasks.size() > 1) {\n             LOG.warn(\"While setting user status: unexpected task number ({})\", tasks.size());\n@@ -188,7 +188,7 @@ private void updateStatus(final SyncopeUser user) {\n         }\n     }\n \n-    private String getFormTask(final SyncopeUser user) {\n+    protected String getFormTask(final SyncopeUser user) {\n         String result = null;\n \n         List<Task> tasks = taskService.createTaskQuery().processInstanceId(user.getWorkflowId()).list();\n@@ -208,7 +208,7 @@ private String getFormTask(final SyncopeUser user) {\n         return result;\n     }\n \n-    private Set<String> getPerformedTasks(final SyncopeUser user) {\n+    protected Set<String> getPerformedTasks(final SyncopeUser user) {\n         final Set<String> result = new HashSet<String>();\n \n         for (HistoricActivityInstance task\n@@ -223,7 +223,7 @@ private Set<String> getPerformedTasks(final SyncopeUser user) {\n     /**\n      * Saves resources to be propagated and password for later - after form submission - propagation.\n      */\n-    private void saveForFormSubmit(final SyncopeUser user, final String password,\n+    protected void saveForFormSubmit(final SyncopeUser user, final String password,\n             final PropagationByResource propByRes) {\n \n         String formTaskId = getFormTask(user);\n@@ -297,7 +297,7 @@ public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, fina\n                 new SimpleEntry<Long, Boolean>(user.getId(), propagateEnable), propByRes, getPerformedTasks(user));\n     }\n \n-    private Set<String> doExecuteTask(final SyncopeUser user, final String task,\n+    protected Set<String> doExecuteTask(final SyncopeUser user, final String task,\n             final Map<String, Object> moreVariables) throws WorkflowException {\n \n         Set<String> preTasks = getPerformedTasks(user);\n@@ -562,7 +562,7 @@ public void importDefinition(final WorkflowDefinitionFormat format, final String\n         }\n     }\n \n-    private WorkflowFormPropertyType fromActivitiFormType(final FormType activitiFormType) {\n+    protected WorkflowFormPropertyType fromActivitiFormType(final FormType activitiFormType) {\n         WorkflowFormPropertyType result = WorkflowFormPropertyType.String;\n \n         if (\"string\".equals(activitiFormType.getName())) {\n@@ -584,19 +584,19 @@ private WorkflowFormPropertyType fromActivitiFormType(final FormType activitiFor\n         return result;\n     }\n \n-    private WorkflowFormTO getFormTO(final Task task) {\n+    protected WorkflowFormTO getFormTO(final Task task) {\n         return getFormTO(task, formService.getTaskFormData(task.getId()));\n     }\n \n-    private WorkflowFormTO getFormTO(final Task task, final TaskFormData fd) {\n+    protected WorkflowFormTO getFormTO(final Task task, final TaskFormData fd) {\n         final WorkflowFormTO formTO =\n                 getFormTO(task.getProcessInstanceId(), task.getId(), fd.getFormKey(), fd.getFormProperties());\n \n         BeanUtils.copyProperties(task, formTO);\n         return formTO;\n     }\n \n-    private WorkflowFormTO getFormTO(final HistoricTaskInstance task) {\n+    protected WorkflowFormTO getFormTO(final HistoricTaskInstance task) {\n         final List<HistoricFormPropertyEntity> props = new ArrayList<HistoricFormPropertyEntity>();\n \n         for (HistoricDetail historicDetail : historyService.createHistoricDetailQuery().taskId(task.getId()).list()) {\n@@ -621,7 +621,7 @@ private WorkflowFormTO getFormTO(final HistoricTaskInstance task) {\n         return formTO;\n     }\n \n-    private WorkflowFormTO getHistoricFormTO(\n+    protected WorkflowFormTO getHistoricFormTO(\n             final String processInstanceId,\n             final String taskId,\n             final String formKey,\n@@ -650,7 +650,7 @@ private WorkflowFormTO getHistoricFormTO(\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private WorkflowFormTO getFormTO(\n+    protected WorkflowFormTO getFormTO(\n             final String processInstanceId,\n             final String taskId,\n             final String formKey,\n@@ -730,7 +730,7 @@ public List<WorkflowFormTO> getForms(final String workflowId, final String name)\n         return forms;\n     }\n \n-    private <T extends Query<?, ?>, U extends Object> List<WorkflowFormTO> getForms(final Query<T, U> query) {\n+    protected <T extends Query<?, ?>, U extends Object> List<WorkflowFormTO> getForms(final Query<T, U> query) {\n         List<WorkflowFormTO> forms = new ArrayList<WorkflowFormTO>();\n \n         for (U obj : query.list()) {\n@@ -778,7 +778,7 @@ public WorkflowFormTO getForm(final String workflowId)\n         return result;\n     }\n \n-    private Map.Entry<Task, TaskFormData> checkTask(final String taskId, final String authUser) {\n+    protected Map.Entry<Task, TaskFormData> checkTask(final String taskId, final String authUser) {\n         Task task;\n         try {\n             task = taskService.createTaskQuery().taskId(taskId).singleResult();"}]}