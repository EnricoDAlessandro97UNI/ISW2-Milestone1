{"sha":"455805edffd32a916d863c2229f0f026330dba92","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ1NTgwNWVkZmZkMzJhOTE2ZDg2M2MyMjI5ZjBmMDI2MzMwZGJhOTI=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-05-06T16:12:38Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-05-06T16:12:38Z"},"message":"Has been implemented all the necessary to manage virtual attributes. Console must be aligned.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246908 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c7a8b5ff42c4f1a14ea95d8d1241408b70cc8abd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c7a8b5ff42c4f1a14ea95d8d1241408b70cc8abd"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/455805edffd32a916d863c2229f0f026330dba92","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/455805edffd32a916d863c2229f0f026330dba92","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/455805edffd32a916d863c2229f0f026330dba92","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/455805edffd32a916d863c2229f0f026330dba92/comments","author":null,"committer":null,"parents":[{"sha":"6317d431ba6b1dc4d959a1d39e178124dd58f967","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6317d431ba6b1dc4d959a1d39e178124dd58f967","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6317d431ba6b1dc4d959a1d39e178124dd58f967"}],"stats":{"total":2521,"additions":2279,"deletions":242},"files":[{"sha":"1787fcadbe9b7474b473084df3c56a4fb2e5db69","filename":"client/src/main/java/org/syncope/client/mod/AbstractAttributableMod.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAbstractAttributableMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAbstractAttributableMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAbstractAttributableMod.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -21,18 +21,30 @@\n public abstract class AbstractAttributableMod extends AbstractBaseBean {\n \n     protected long id;\n+\n     protected Set<AttributeMod> attributesToBeUpdated;\n+\n     protected Set<String> attributesToBeRemoved;\n+\n     protected Set<String> derivedAttributesToBeAdded;\n+\n     protected Set<String> derivedAttributesToBeRemoved;\n+\n+    protected Set<String> virtualAttributesToBeAdded;\n+\n+    protected Set<String> virtualAttributesToBeRemoved;\n+\n     protected Set<String> resourcesToBeAdded;\n+\n     protected Set<String> resourcesToBeRemoved;\n \n     public AbstractAttributableMod() {\n         attributesToBeUpdated = new HashSet<AttributeMod>();\n         attributesToBeRemoved = new HashSet<String>();\n         derivedAttributesToBeAdded = new HashSet<String>();\n         derivedAttributesToBeRemoved = new HashSet<String>();\n+        virtualAttributesToBeAdded = new HashSet<String>();\n+        virtualAttributesToBeRemoved = new HashSet<String>();\n         resourcesToBeAdded = new HashSet<String>();\n         resourcesToBeRemoved = new HashSet<String>();\n     }\n@@ -146,4 +158,20 @@ public Set<String> getResourcesToBeRemoved() {\n     public void setResourcesToBeRemoved(Set<String> resourcesToBeRemoved) {\n         this.resourcesToBeRemoved = resourcesToBeRemoved;\n     }\n+\n+    public Set<String> getVirtualAttributesToBeAdded() {\n+        return virtualAttributesToBeAdded;\n+    }\n+\n+    public void setVirtualAttributesToBeAdded(Set<String> virtualAttributesToBeAdded) {\n+        this.virtualAttributesToBeAdded = virtualAttributesToBeAdded;\n+    }\n+\n+    public Set<String> getVirtualAttributesToBeRemoved() {\n+        return virtualAttributesToBeRemoved;\n+    }\n+\n+    public void setVirtualAttributesToBeRemoved(Set<String> virtualAttributesToBeRemoved) {\n+        this.virtualAttributesToBeRemoved = virtualAttributesToBeRemoved;\n+    }\n }"},{"sha":"2b5a3ede2c38334d08ab30c27f5d92e14bf87969","filename":"client/src/main/java/org/syncope/client/mod/RoleMod.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FRoleMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FRoleMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FRoleMod.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -25,6 +25,8 @@ public class RoleMod extends AbstractAttributableMod {\n \n     private boolean changeInheritDerivedAttributes;\n \n+    private boolean changeInheritVirtualAttributes;\n+\n     private List<String> entitlements;\n \n     public RoleMod() {\n@@ -49,6 +51,16 @@ public void setChangeInheritDerivedAttributes(\n         this.changeInheritDerivedAttributes = changeInheritDerivedAttributes;\n     }\n \n+    public boolean isChangeInheritVirtualAttributes() {\n+        return changeInheritVirtualAttributes;\n+    }\n+\n+    public void setChangeInheritVirtualAttributes(\n+            boolean changeInheritVirtualAttributes) {\n+\n+        this.changeInheritVirtualAttributes = changeInheritVirtualAttributes;\n+    }\n+\n     public String getName() {\n         return name;\n     }"},{"sha":"5fe937b1f96f003837af4857c3866aa1477918c0","filename":"client/src/main/java/org/syncope/client/to/AbstractAttributableTO.java","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -31,11 +31,14 @@ public abstract class AbstractAttributableTO extends AbstractBaseBean {\n \n     private List<AttributeTO> derivedAttributes;\n \n+    private List<AttributeTO> virtualAttributes;\n+\n     private Set<String> resources;\n \n     protected AbstractAttributableTO() {\n         attributes = new ArrayList<AttributeTO>();\n         derivedAttributes = new ArrayList<AttributeTO>();\n+        virtualAttributes = new ArrayList<AttributeTO>();\n         resources = new HashSet<String>();\n     }\n \n@@ -85,6 +88,17 @@ public Map<String, List<String>> getDerivedAttributeMap() {\n         return result;\n     }\n \n+    @JsonIgnore\n+    public Map<String, List<String>> getVirtualAttributeMap() {\n+        Map<String, List<String>> result =\n+                new HashMap<String, List<String>>(virtualAttributes.size());\n+        for (AttributeTO attributeTO : virtualAttributes) {\n+            result.put(attributeTO.getSchema(), attributeTO.getValues());\n+        }\n+\n+        return result;\n+    }\n+\n     public boolean addDerivedAttribute(final AttributeTO derivedAttribute) {\n         return derivedAttributes.add(derivedAttribute);\n     }\n@@ -103,6 +117,24 @@ public void setDerivedAttributes(\n         this.derivedAttributes = derivedAttributes;\n     }\n \n+    public boolean addVirtualAttribute(final AttributeTO virtualAttribute) {\n+        return virtualAttributes.add(virtualAttribute);\n+    }\n+\n+    public boolean removeVirtualAttribute(final AttributeTO virtualAttribute) {\n+        return virtualAttributes.remove(virtualAttribute);\n+    }\n+\n+    public List<AttributeTO> getVirtualAttributes() {\n+        return virtualAttributes;\n+    }\n+\n+    public void setVirtualAttributes(\n+            final List<AttributeTO> virtualAttributes) {\n+\n+        this.virtualAttributes = virtualAttributes;\n+    }\n+\n     public boolean addResource(final String resource) {\n         return resources.add(resource);\n     }"},{"sha":"25f2f8a318858a9a9dd8de713d19b4686d1e4f9a","filename":"client/src/main/java/org/syncope/client/to/RoleTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -29,6 +29,8 @@ public class RoleTO extends AbstractAttributableTO {\n \n     private boolean inheritDerivedAttributes;\n \n+    private boolean inheritVirtualAttributes;\n+\n     private List<String> entitlements;\n \n     public RoleTO() {\n@@ -69,6 +71,14 @@ public void setInheritDerivedAttributes(\n         this.inheritDerivedAttributes = inheritDerivedAttributes;\n     }\n \n+    public boolean isInheritVirtualAttributes() {\n+        return inheritVirtualAttributes;\n+    }\n+\n+    public void setInheritVirtualAttributes(boolean inheritVirtualAttributes) {\n+        this.inheritVirtualAttributes = inheritVirtualAttributes;\n+    }\n+\n     public boolean addEntitlement(String entitlement) {\n         return entitlements.add(entitlement);\n     }"},{"sha":"7e6c31539a2ea32fade5dda7ac2085df73078c65","filename":"client/src/main/java/org/syncope/client/to/SchemaTO.java","status":"modified","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -23,8 +23,6 @@ public class SchemaTO extends AbstractBaseBean {\n \n     private SchemaType type;\n \n-    private boolean virtual;\n-\n     private String mandatoryCondition;\n \n     private boolean multivalue;\n@@ -48,15 +46,6 @@ public String getConversionPattern() {\n     public void setConversionPattern(String conversionPattern) {\n         this.conversionPattern = conversionPattern;\n     }\n-\n-    public boolean isVirtual() {\n-        return virtual;\n-    }\n-\n-    public void setVirtual(boolean virtual) {\n-        this.virtual = virtual;\n-    }\n-\n     public String getMandatoryCondition() {\n         return mandatoryCondition;\n     }"},{"sha":"75d53429cc1585602986540145dbb80e84f9d744","filename":"client/src/main/java/org/syncope/client/to/VirtualSchemaTO.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FVirtualSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FVirtualSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FVirtualSchemaTO.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -0,0 +1,31 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import org.syncope.client.AbstractBaseBean;\n+import org.syncope.types.SchemaType;\n+\n+public class VirtualSchemaTO extends AbstractBaseBean {\n+\n+    private String name;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"ba10f9f3807a9c1f467224ec77b6f5c14bf8f55e","filename":"client/src/main/java/org/syncope/types/SourceMappingType.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSourceMappingType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSourceMappingType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSourceMappingType.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -18,10 +18,13 @@ public enum SourceMappingType {\n \n     UserSchema,\n     UserDerivedSchema,\n+    UserVirtualSchema,\n     RoleSchema,\n     RoleDerivedSchema,\n+    RoleVirtualSchema,\n     MembershipSchema,\n     MembershipDerivedSchema,\n+    MembershipVirtualSchema,\n     SyncopeUserId,\n     Password;\n }"},{"sha":"cfa8a6e2cfba288392061c45548f4b96503c8229","filename":"console/src/test/resources/content.xml","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/console%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/console%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -64,37 +64,37 @@\n     <Membership id=\"4\" syncopeUser_id=\"4\" syncopeRole_id=\"7\"/>\n     <Membership id=\"5\" syncopeUser_id=\"1\" syncopeRole_id=\"8\"/>\n \n-    <USchema name=\"username\" type=\"String\" virtual=\"0\"\n+    <USchema name=\"username\" type=\"String\"\n                 mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"1\" readonly=\"0\"/>\n-    <USchema name=\"userId\" type=\"String\" virtual=\"0\"\n+    <USchema name=\"userId\" type=\"String\"\n                 mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"1\" readonly=\"0\"\n                 validatorClass=\"org.syncope.core.persistence.validation.attrvalue.EmailAddressValidator\"/>\n-    <USchema name=\"loginDate\" type=\"Date\" virtual=\"0\"\n+    <USchema name=\"loginDate\" type=\"Date\"\n                 mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"\n                 conversionPattern=\"yyyy-MM-dd\"/>\n-    <USchema name=\"firstname\" type=\"String\" virtual=\"0\"\n+    <USchema name=\"firstname\" type=\"String\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-    <USchema name=\"surname\" type=\"String\" virtual=\"0\"\n+    <USchema name=\"surname\" type=\"String\"\n                 mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-    <USchema name=\"type\" type=\"String\" virtual=\"0\"\n+    <USchema name=\"type\" type=\"String\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-    <USchema name=\"email\" type=\"String\" virtual=\"0\"\n+    <USchema name=\"email\" type=\"String\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                 validatorClass=\"org.syncope.core.persistence.validation.attrvalue.EmailAddressValidator\"/>\n-    <USchema name=\"activationDate\" type=\"Date\" virtual=\"0\"\n+    <USchema name=\"activationDate\" type=\"Date\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                 conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>\n-    <USchema name=\"uselessReadonly\" type=\"String\" virtual=\"0\"\n+    <USchema name=\"uselessReadonly\" type=\"String\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"1\"/>\n-    <USchema name=\"cool\" type=\"Boolean\" virtual=\"0\"\n+    <USchema name=\"cool\" type=\"Boolean\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n \n-    <RSchema name=\"icon\" type=\"String\" virtual=\"0\"\n+    <RSchema name=\"icon\" type=\"String\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-    <RSchema name=\"show\" type=\"Boolean\" virtual=\"0\"\n+    <RSchema name=\"show\" type=\"Boolean\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n \n-    <MSchema name=\"subscriptionDate\" type=\"Date\" virtual=\"0\"\n+    <MSchema name=\"subscriptionDate\" type=\"Date\"\n                       mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                       conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>\n "},{"sha":"6793c47769169015277cede0261b9c3b7af1bd07","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -71,6 +71,27 @@ public <T extends AbstractDerAttr> T getDerivedAttribute(\n         return result;\n     }\n \n+    public <T extends AbstractVirAttr> T getVirtualAttribute(\n+            final String virtualSchemaName) {\n+\n+        T result = null;\n+        T virtualAttribute;\n+        for (Iterator<? extends AbstractVirAttr> itor =\n+                getVirtualAttributes().iterator();\n+                result == null && itor.hasNext();) {\n+\n+            virtualAttribute = (T) itor.next();\n+            if (virtualAttribute.getVirtualSchema() != null\n+                    && virtualSchemaName.equals(\n+                    virtualAttribute.getVirtualSchema().getName())) {\n+\n+                result = virtualAttribute;\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n     public boolean addTargetResource(final TargetResource targetResource) {\n         if (targetResources == null) {\n             targetResources = new HashSet<TargetResource>();\n@@ -127,4 +148,15 @@ public abstract <T extends AbstractDerAttr> boolean removeDerivedAttribute(\n \n     public abstract void setDerivedAttributes(\n             List<? extends AbstractDerAttr> derivedAttributes);\n+\n+    public abstract <T extends AbstractVirAttr> boolean addVirtualAttribute(\n+            T virtualAttributes);\n+\n+    public abstract <T extends AbstractVirAttr> boolean removeVirtualAttribute(\n+            T virtualAttribute);\n+\n+    public abstract List<? extends AbstractVirAttr> getVirtualAttributes();\n+\n+    public abstract void setVirtualAttributes(\n+            List<? extends AbstractVirAttr> virtualAttributes);\n }"},{"sha":"2433f0b175271c2bc0f229e7ad3d0b55c7dd13b4","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractDerSchema.java","status":"modified","additions":17,"deletions":5,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerSchema.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -14,10 +14,10 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import java.util.List;\n import javax.persistence.Column;\n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n+import org.syncope.types.SchemaType;\n \n @MappedSuperclass\n public abstract class AbstractDerSchema extends AbstractBaseBean {\n@@ -44,11 +44,23 @@ public void setExpression(String expression) {\n         this.expression = expression;\n     }\n \n-    public abstract <T extends AbstractDerAttr> boolean addDerivedAttribute(T derivedAttribute);\n+    public SchemaType getType() {\n+        return SchemaType.String;\n+    }\n+\n+    public String getMandatoryCondition() {\n+        return Boolean.FALSE.toString().toLowerCase();\n+    }\n \n-    public abstract <T extends AbstractDerAttr> boolean removeDerivedAttribute(T derivedAttribute);\n+    public boolean isMultivalue() {\n+        return Boolean.TRUE;\n+    }\n \n-    public abstract List<? extends AbstractDerAttr> getDerivedAttributes();\n+    public boolean isUniqueConstraint() {\n+        return Boolean.FALSE;\n+    }\n \n-    public abstract <T extends AbstractDerAttr> void setDerivedAttributes(List<T> derivedAttributes);\n+    public boolean isReadonly() {\n+        return Boolean.FALSE;\n+    }\n }"},{"sha":"01f3f499e5e114f93b0115b118e55cf9c64bf00c","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":0,"deletions":16,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -61,13 +61,6 @@ protected DecimalFormat initialValue() {\n     @Enumerated(STRING)\n     private SchemaType type;\n \n-    /**\n-     * Specify if the attribute should be stored on the local repository.\n-     */\n-    @Basic\n-    @Range(min = 0, max = 1)\n-    private Integer virtual;\n-\n     @Column(nullable = false)\n     private String mandatoryCondition;\n \n@@ -96,7 +89,6 @@ public AbstractSchema() {\n         super();\n \n         type = SchemaType.String;\n-        virtual = getBooleanAsInteger(false);\n         mandatoryCondition = Boolean.FALSE.toString();\n         multivalue = getBooleanAsInteger(false);\n         uniqueConstraint = getBooleanAsInteger(false);\n@@ -119,14 +111,6 @@ public void setType(SchemaType type) {\n         this.type = type;\n     }\n \n-    public boolean isVirtual() {\n-        return isBooleanAsInteger(virtual);\n-    }\n-\n-    public void setVirtual(boolean virtual) {\n-        this.virtual = getBooleanAsInteger(virtual);\n-    }\n-\n     public String getMandatoryCondition() {\n         return mandatoryCondition;\n     }"},{"sha":"6db0474f172cb1c6dc72b7e68ad71873db964633","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractVirAttr.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -0,0 +1,92 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.Transient;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.syncope.core.persistence.propagation.PropagationManager;\n+import org.syncope.core.util.ApplicationContextManager;\n+import org.syncope.types.SourceMappingType;\n+\n+@MappedSuperclass\n+public abstract class AbstractVirAttr extends AbstractBaseBean {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    protected Long id;\n+\n+    @Transient\n+    protected List<String> values;\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setValues(List<String> values) {\n+        this.values = values;\n+    }\n+\n+    /**\n+     * @see http://commons.apache.org/jexl/reference/index.html\n+     * @return the value of this virtual attribute\n+     */\n+    public List<String> getValues() {\n+\n+        LOG.debug(\"{}: retrieve value for attribute {}\",\n+                new Object[]{getOwner(), getVirtualSchema().getName()});\n+\n+        if (values != null) {\n+            return values;\n+        }\n+\n+        ConfigurableApplicationContext context =\n+                ApplicationContextManager.getApplicationContext();\n+\n+        PropagationManager propagationManager =\n+                (PropagationManager) context.getBean(\"propagationManager\");\n+\n+        final Set<String> retrievedValues = propagationManager.getObjectAttributeValue(\n+                getOwner(),\n+                getVirtualSchema().getName(),\n+                SourceMappingType.UserVirtualSchema);\n+\n+        LOG.debug(\"Retrieved external values {}\", retrievedValues);\n+\n+        try {\n+\n+            return new ArrayList<String>(retrievedValues);\n+\n+        } catch (Throwable t) {\n+            // NullPointerException and ArrayIndexOutOfBoundsException\n+            return null;\n+        }\n+    }\n+\n+    public abstract <T extends AbstractAttributable> T getOwner();\n+\n+    public abstract <T extends AbstractAttributable> void setOwner(T owner);\n+\n+    public abstract <T extends AbstractVirSchema> T getVirtualSchema();\n+\n+    public abstract <T extends AbstractVirSchema> void setVirtualSchema(\n+            T derivedSchema);\n+}"},{"sha":"c750f4603e788732c14484ce5620e856656866a3","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractVirSchema.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirSchema.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -0,0 +1,55 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+import org.syncope.types.SchemaType;\n+\n+@MappedSuperclass\n+public abstract class AbstractVirSchema extends AbstractBaseBean {\n+\n+    @Id\n+    private String name;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public SchemaType getType() {\n+        return SchemaType.String;\n+    }\n+\n+    public String getMandatoryCondition() {\n+        return Boolean.FALSE.toString().toLowerCase();\n+    }\n+\n+    public boolean isMultivalue() {\n+        return Boolean.TRUE;\n+    }\n+\n+    public boolean isUniqueConstraint() {\n+        return Boolean.FALSE;\n+    }\n+\n+    public boolean isReadonly() {\n+        return Boolean.FALSE;\n+    }\n+}"},{"sha":"3c55ad04b4070e5babe7cb9c608600d95fc36c08","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MDerSchema.java","status":"modified","additions":3,"deletions":37,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMDerSchema.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -14,46 +14,12 @@\n  */\n package org.syncope.core.persistence.beans.membership;\n \n-import java.util.ArrayList;\n-import java.util.List;\n import javax.persistence.Entity;\n-import javax.persistence.OneToMany;\n-import org.syncope.core.persistence.beans.AbstractDerAttr;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n \n @Entity\n+@Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n public class MDerSchema extends AbstractDerSchema {\n-\n-    @OneToMany(mappedBy = \"derivedSchema\")\n-    private List<MDerAttr> derivedAttributes;\n-\n-    public MDerSchema() {\n-        derivedAttributes = new ArrayList<MDerAttr>();\n-    }\n-\n-    @Override\n-    public <T extends AbstractDerAttr> boolean addDerivedAttribute(\n-            T derivedAttribute) {\n-\n-        return derivedAttributes.add((MDerAttr) derivedAttribute);\n-    }\n-\n-    @Override\n-    public <T extends AbstractDerAttr> boolean removeDerivedAttribute(\n-            T derivedAttribute) {\n-\n-        return derivedAttributes.remove((MDerAttr) derivedAttribute);\n-    }\n-\n-    @Override\n-    public List<? extends AbstractDerAttr> getDerivedAttributes() {\n-        return derivedAttributes;\n-    }\n-\n-    @Override\n-    public <T extends AbstractDerAttr> void setDerivedAttributes(\n-            List<T> derivedAttributes) {\n-\n-        this.derivedAttributes = (List<MDerAttr>) derivedAttributes;\n-    }\n }"},{"sha":"0f81cb518d37149405c5b561b13bec5269c716b6","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MVirAttr.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMVirAttr.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -0,0 +1,54 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans.membership;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.ManyToOne;\n+import org.syncope.core.persistence.beans.AbstractAttributable;\n+import org.syncope.core.persistence.beans.AbstractVirAttr;\n+import org.syncope.core.persistence.beans.AbstractVirSchema;\n+\n+@Entity\n+public class MVirAttr extends AbstractVirAttr {\n+\n+    @ManyToOne\n+    private Membership owner;\n+\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    MVirSchema virtualSchema;\n+\n+    @Override\n+    public <T extends AbstractAttributable> T getOwner() {\n+        return (T) owner;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributable> void setOwner(T owner) {\n+        this.owner = (Membership) owner;\n+    }\n+\n+    @Override\n+    public <T extends AbstractVirSchema> T getVirtualSchema() {\n+        return (T) virtualSchema;\n+    }\n+\n+    @Override\n+    public <T extends AbstractVirSchema> void setVirtualSchema(\n+            T virtualSchema) {\n+\n+        this.virtualSchema = (MVirSchema) virtualSchema;\n+    }\n+}"},{"sha":"5ea35d169cf0061bf7d48da11c6843783fb8ffc0","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MVirSchema.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMVirSchema.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -0,0 +1,25 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans.membership;\n+\n+import javax.persistence.Entity;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+import org.syncope.core.persistence.beans.AbstractVirSchema;\n+\n+@Entity\n+@Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n+public class MVirSchema extends AbstractVirSchema {\n+}"},{"sha":"1eef54cc7b95ace8623554f720cf6604c694a6f4","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/Membership.java","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -29,6 +29,7 @@\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n+import org.syncope.core.persistence.beans.AbstractVirAttr;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -58,9 +59,14 @@ public class Membership extends AbstractAttributable {\n     @Valid\n     private List<MDerAttr> derivedAttributes;\n \n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n+    private List<MVirAttr> virtualAttributes;\n+\n     public Membership() {\n         attributes = new ArrayList<MAttr>();\n         derivedAttributes = new ArrayList<MDerAttr>();\n+        virtualAttributes = new ArrayList<MVirAttr>();\n         targetResources = Collections.EMPTY_SET;\n     }\n \n@@ -134,6 +140,32 @@ public void setDerivedAttributes(\n                 (List<MDerAttr>) derivedAttributes;\n     }\n \n+    @Override\n+    public <T extends AbstractVirAttr> boolean addVirtualAttribute(\n+            T virtualAttribute) {\n+\n+        return virtualAttributes.add((MVirAttr) virtualAttribute);\n+    }\n+\n+    @Override\n+    public <T extends AbstractVirAttr> boolean removeVirtualAttribute(\n+            T virtualAttribute) {\n+\n+        return virtualAttributes.remove((MVirAttr) virtualAttribute);\n+    }\n+\n+    @Override\n+    public List<? extends AbstractVirAttr> getVirtualAttributes() {\n+        return virtualAttributes;\n+    }\n+\n+    @Override\n+    public void setVirtualAttributes(\n+            List<? extends AbstractVirAttr> virtualAttributes) {\n+\n+        this.virtualAttributes = (List<MVirAttr>) virtualAttributes;\n+    }\n+\n     @Override\n     public boolean addTargetResource(TargetResource resource) {\n         return false;"},{"sha":"75eb028f4afa519f9c8ef914f7ffdcfa536850dd","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RDerSchema.java","status":"modified","additions":0,"deletions":27,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRDerSchema.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -18,7 +18,6 @@\n import java.util.List;\n import javax.persistence.Entity;\n import javax.persistence.OneToMany;\n-import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n \n @Entity\n@@ -30,30 +29,4 @@ public class RDerSchema extends AbstractDerSchema {\n     public RDerSchema() {\n         derivedAttributes = new ArrayList<RDerAttr>();\n     }\n-\n-    @Override\n-    public <T extends AbstractDerAttr> boolean addDerivedAttribute(\n-            T derivedAttribute) {\n-\n-        return derivedAttributes.add((RDerAttr) derivedAttribute);\n-    }\n-\n-    @Override\n-    public <T extends AbstractDerAttr> boolean removeDerivedAttribute(\n-            T derivedAttribute) {\n-\n-        return derivedAttributes.remove((RDerAttr) derivedAttribute);\n-    }\n-\n-    @Override\n-    public List<? extends AbstractDerAttr> getDerivedAttributes() {\n-        return derivedAttributes;\n-    }\n-\n-    @Override\n-    public <T extends AbstractDerAttr> void setDerivedAttributes(\n-            List<T> derivedAttributes) {\n-\n-        this.derivedAttributes = (List<RDerAttr>) derivedAttributes;\n-    }\n }"},{"sha":"d834d740e2b5ca668afb121d7430d39e4574b787","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RVirAttr.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRVirAttr.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -0,0 +1,54 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans.role;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.ManyToOne;\n+import org.syncope.core.persistence.beans.AbstractAttributable;\n+import org.syncope.core.persistence.beans.AbstractVirAttr;\n+import org.syncope.core.persistence.beans.AbstractVirSchema;\n+\n+@Entity\n+public class RVirAttr extends AbstractVirAttr {\n+\n+    @ManyToOne\n+    private SyncopeRole owner;\n+\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    RVirSchema virtualSchema;\n+\n+    @Override\n+    public <T extends AbstractAttributable> T getOwner() {\n+        return (T) owner;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributable> void setOwner(T owner) {\n+        this.owner = (SyncopeRole) owner;\n+    }\n+\n+    @Override\n+    public <T extends AbstractVirSchema> T getVirtualSchema() {\n+        return (T) virtualSchema;\n+    }\n+\n+    @Override\n+    public <T extends AbstractVirSchema> void setVirtualSchema(\n+            T virtualSchema) {\n+\n+        this.virtualSchema = (RVirSchema) virtualSchema;\n+    }\n+}"},{"sha":"e2a8d61dc12b2a4e309822950332c7e3a9fb8d79","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RVirSchema.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRVirSchema.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -0,0 +1,25 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans.role;\n+\n+import javax.persistence.Entity;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+import org.syncope.core.persistence.beans.AbstractVirSchema;\n+\n+@Entity\n+@Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n+public class RVirSchema extends AbstractVirSchema {\n+}"},{"sha":"561fa24df9d08608eb7d5402c713ad54a0369ac1","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -35,6 +35,7 @@\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n+import org.syncope.core.persistence.beans.AbstractVirAttr;\n import org.syncope.core.persistence.beans.Entitlement;\n import org.hibernate.validator.constraints.Range;\n \n@@ -67,6 +68,10 @@ public class SyncopeRole extends AbstractAttributable {\n     @Valid\n     private List<RDerAttr> derivedAttributes;\n \n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n+    private List<RVirAttr> virtualAttributes;\n+\n     @Basic\n     @Range(min = 0, max = 1)\n     private Integer inheritAttributes;\n@@ -75,14 +80,20 @@ public class SyncopeRole extends AbstractAttributable {\n     @Range(min = 0, max = 1)\n     private Integer inheritDerivedAttributes;\n \n+    @Basic\n+    @Range(min = 0, max = 1)\n+    private Integer inheritVirtualAttributes;\n+\n     public SyncopeRole() {\n         super();\n \n         entitlements = new HashSet<Entitlement>();\n         attributes = new ArrayList<RAttr>();\n         derivedAttributes = new ArrayList<RDerAttr>();\n+        virtualAttributes = new ArrayList<RVirAttr>();\n         inheritAttributes = getBooleanAsInteger(false);\n         inheritDerivedAttributes = getBooleanAsInteger(false);\n+        inheritVirtualAttributes = getBooleanAsInteger(false);\n     }\n \n     @Override\n@@ -169,6 +180,32 @@ public void setDerivedAttributes(\n         this.derivedAttributes = (List<RDerAttr>) derivedAttributes;\n     }\n \n+    @Override\n+    public <T extends AbstractVirAttr> boolean addVirtualAttribute(\n+            T virtualAttribute) {\n+\n+        return virtualAttributes.add((RVirAttr) virtualAttribute);\n+    }\n+\n+    @Override\n+    public <T extends AbstractVirAttr> boolean removeVirtualAttribute(\n+            T virtualAttribute) {\n+\n+        return virtualAttributes.remove((RVirAttr) virtualAttribute);\n+    }\n+\n+    @Override\n+    public List<? extends AbstractVirAttr> getVirtualAttributes() {\n+        return virtualAttributes;\n+    }\n+\n+    @Override\n+    public void setVirtualAttributes(\n+            List<? extends AbstractVirAttr> virtualAttributes) {\n+\n+        this.virtualAttributes = (List<RVirAttr>) virtualAttributes;\n+    }\n+\n     public boolean isInheritAttributes() {\n         return isBooleanAsInteger(inheritAttributes);\n     }\n@@ -190,12 +227,22 @@ public boolean isInheritDerivedAttributes() {\n         return isBooleanAsInteger(inheritDerivedAttributes);\n     }\n \n+    public boolean isInheritVirtualAttributes() {\n+        return isBooleanAsInteger(inheritVirtualAttributes);\n+    }\n+\n     public void setInheritDerivedAttributes(boolean inheritDerivedAttributes) {\n         this.inheritDerivedAttributes =\n                 getBooleanAsInteger(inheritDerivedAttributes);\n \n     }\n \n+    public void setInheritVirtualAttributes(boolean inheritVirtualAttributes) {\n+        this.inheritVirtualAttributes =\n+                getBooleanAsInteger(inheritVirtualAttributes);\n+\n+    }\n+\n     public List<RDerAttr> findInheritedDerivedAttributes() {\n         List<RDerAttr> result = new ArrayList<RDerAttr>(derivedAttributes);\n         if (isInheritDerivedAttributes() && getParent() != null) {\n@@ -204,4 +251,13 @@ public List<RDerAttr> findInheritedDerivedAttributes() {\n \n         return result;\n     }\n+\n+    public List<RVirAttr> findInheritedVirtualAttributes() {\n+        List<RVirAttr> result = new ArrayList<RVirAttr>(virtualAttributes);\n+        if (isInheritVirtualAttributes() && getParent() != null) {\n+            result.addAll(getParent().findInheritedVirtualAttributes());\n+        }\n+\n+        return result;\n+    }\n }"},{"sha":"4a1f8bf2973ec64bfd867d49c292165a3acec502","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -43,6 +43,7 @@\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n+import org.syncope.core.persistence.beans.AbstractVirAttr;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n@@ -82,6 +83,10 @@ public class SyncopeUser extends AbstractAttributable {\n     @Valid\n     private List<UDerAttr> derivedAttributes;\n \n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n+    private List<UVirAttr> virtualAttributes;\n+\n     @Column(nullable = true)\n     private Long workflowId;\n \n@@ -99,6 +104,7 @@ public SyncopeUser() {\n         memberships = new ArrayList<Membership>();\n         attributes = new ArrayList<UAttr>();\n         derivedAttributes = new ArrayList<UDerAttr>();\n+        virtualAttributes = new ArrayList<UVirAttr>();\n     }\n \n     @Override\n@@ -277,6 +283,32 @@ public void setDerivedAttributes(\n         this.derivedAttributes = (List<UDerAttr>) derivedAttributes;\n     }\n \n+    @Override\n+    public <T extends AbstractVirAttr> boolean addVirtualAttribute(\n+            T virtualAttribute) {\n+\n+        return virtualAttributes.add((UVirAttr) virtualAttribute);\n+    }\n+\n+    @Override\n+    public <T extends AbstractVirAttr> boolean removeVirtualAttribute(\n+            T virtualAttribute) {\n+\n+        return virtualAttributes.remove((UVirAttr) virtualAttribute);\n+    }\n+\n+    @Override\n+    public List<? extends AbstractVirAttr> getVirtualAttributes() {\n+        return virtualAttributes;\n+    }\n+\n+    @Override\n+    public void setVirtualAttributes(\n+            List<? extends AbstractVirAttr> virtualAttributes) {\n+\n+        this.virtualAttributes = (List<UVirAttr>) virtualAttributes;\n+    }\n+\n     public Long getWorkflowId() {\n         return workflowId;\n     }"},{"sha":"88df6f9d471945a9547f4ced526f497f0b9b15ba","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UDerAttr.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerAttr.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -26,6 +26,7 @@ public class UDerAttr extends AbstractDerAttr {\n \n     @ManyToOne\n     private SyncopeUser owner;\n+\n     @ManyToOne(fetch = FetchType.EAGER)\n     UDerSchema derivedSchema;\n "},{"sha":"fcf240b1fa93ba6b4c9acef22a0a3372fd61a7c2","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UDerSchema.java","status":"modified","additions":0,"deletions":27,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerSchema.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -18,7 +18,6 @@\n import java.util.List;\n import javax.persistence.Entity;\n import javax.persistence.OneToMany;\n-import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n \n @Entity\n@@ -30,30 +29,4 @@ public class UDerSchema extends AbstractDerSchema {\n     public UDerSchema() {\n         derivedAttributes = new ArrayList<UDerAttr>();\n     }\n-\n-    @Override\n-    public <T extends AbstractDerAttr> boolean addDerivedAttribute(\n-            T derivedAttribute) {\n-\n-        return derivedAttributes.add((UDerAttr) derivedAttribute);\n-    }\n-\n-    @Override\n-    public <T extends AbstractDerAttr> boolean removeDerivedAttribute(\n-            T derivedAttribute) {\n-\n-        return derivedAttributes.remove((UDerAttr) derivedAttribute);\n-    }\n-\n-    @Override\n-    public List<? extends AbstractDerAttr> getDerivedAttributes() {\n-        return derivedAttributes;\n-    }\n-\n-    @Override\n-    public <T extends AbstractDerAttr> void setDerivedAttributes(\n-            List<T> derivedAttributes) {\n-\n-        this.derivedAttributes = (List<UDerAttr>) derivedAttributes;\n-    }\n }"},{"sha":"458ff3130ddaac61675642bd32e16eb6ddff7640","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UVirAttr.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirAttr.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -0,0 +1,54 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans.user;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.ManyToOne;\n+import org.syncope.core.persistence.beans.AbstractAttributable;\n+import org.syncope.core.persistence.beans.AbstractVirAttr;\n+import org.syncope.core.persistence.beans.AbstractVirSchema;\n+\n+@Entity\n+public class UVirAttr extends AbstractVirAttr {\n+\n+    @ManyToOne\n+    private SyncopeUser owner;\n+\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    UVirSchema virtualSchema;\n+\n+    @Override\n+    public <T extends AbstractAttributable> T getOwner() {\n+        return (T) owner;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributable> void setOwner(T owner) {\n+        this.owner = (SyncopeUser) owner;\n+    }\n+\n+    @Override\n+    public <T extends AbstractVirSchema> T getVirtualSchema() {\n+        return (T) virtualSchema;\n+    }\n+\n+    @Override\n+    public <T extends AbstractVirSchema> void setVirtualSchema(\n+            T virtualSchema) {\n+\n+        this.virtualSchema = (UVirSchema) virtualSchema;\n+    }\n+}"},{"sha":"96f6826b7e86ff8f10a5a734d124537015be9c7b","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UVirSchema.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirSchema.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -0,0 +1,25 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans.user;\n+\n+import javax.persistence.Entity;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+import org.syncope.core.persistence.beans.AbstractVirSchema;\n+\n+@Entity\n+@Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n+public class UVirSchema extends AbstractVirSchema {\n+}"},{"sha":"fb038685bd529fa89a9ccf4b0811eb1aeb8c3155","filename":"core/src/main/java/org/syncope/core/persistence/dao/DerSchemaDAO.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaDAO.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -15,6 +15,7 @@\n package org.syncope.core.persistence.dao;\n \n import java.util.List;\n+import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.syncope.core.util.AttributableUtil;\n@@ -28,5 +29,8 @@ public interface DerSchemaDAO extends DAO {\n     <T extends AbstractDerSchema> T save(T derivedSchema)\n             throws InvalidEntityException;\n \n+    <T extends AbstractDerAttr> List<T> getAttributes(\n+            AbstractDerSchema schema, Class<T> reference);\n+\n     void delete(String name, AttributableUtil attributableUtil);\n }"},{"sha":"05902e455806aa05e6975a1c6246ab8798e6cc4b","filename":"core/src/main/java/org/syncope/core/persistence/dao/VirAttrDAO.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirAttrDAO.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -0,0 +1,33 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import java.util.List;\n+import org.syncope.core.persistence.beans.AbstractVirAttr;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n+\n+public interface VirAttrDAO extends DAO {\n+\n+    <T extends AbstractVirAttr> T find(Long id, Class<T> reference);\n+\n+    <T extends AbstractVirAttr> List<T> findAll(Class<T> reference);\n+\n+    <T extends AbstractVirAttr> T save(T virtualAttribute)\n+            throws InvalidEntityException;\n+\n+    <T extends AbstractVirAttr> void delete(Long id, Class<T> reference);\n+\n+    <T extends AbstractVirAttr> void delete(T virtualAttribute);\n+}"},{"sha":"ccdcbeabc749596c2ce7286060a7f74e2f0d8ec0","filename":"core/src/main/java/org/syncope/core/persistence/dao/VirSchemaDAO.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaDAO.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -0,0 +1,36 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import java.util.List;\n+import org.syncope.core.persistence.beans.AbstractVirAttr;\n+import org.syncope.core.persistence.beans.AbstractVirSchema;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n+import org.syncope.core.util.AttributableUtil;\n+\n+public interface VirSchemaDAO extends DAO {\n+\n+    <T extends AbstractVirSchema> T find(String name, Class<T> reference);\n+\n+    <T extends AbstractVirSchema> List<T> findAll(Class<T> reference);\n+\n+    <T extends AbstractVirSchema> T save(T virtualSchema)\n+            throws InvalidEntityException;\n+\n+    <T extends AbstractVirAttr> List<T> getAttributes(\n+            AbstractVirSchema virtualSchema, Class<T> reference);\n+\n+    void delete(String name, AttributableUtil attributableUtil);\n+}"},{"sha":"8d47f9c8aaf3795b3605680a708ecd64297c2304","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/DerAttrDAOImpl.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerAttrDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerAttrDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerAttrDAOImpl.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -63,11 +63,9 @@ public <T extends AbstractDerAttr> void delete(\n             final T derivedAttribute) {\n \n         if (derivedAttribute.getOwner() != null) {\n-            derivedAttribute.getOwner().removeDerivedAttribute(\n-                    derivedAttribute);\n+            derivedAttribute.getOwner().\n+                    removeDerivedAttribute(derivedAttribute);\n         }\n-        derivedAttribute.getDerivedSchema().removeDerivedAttribute(\n-                derivedAttribute);\n \n         entityManager.remove(derivedAttribute);\n     }"},{"sha":"8815bf08537108bf0eba8ffe2ce31d04d652024c","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/DerSchemaDAOImpl.java","status":"modified","additions":19,"deletions":4,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerSchemaDAOImpl.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -68,14 +68,16 @@ public void delete(final String name,\n             return;\n         }\n \n+        List<? extends AbstractDerAttr> attributes = getAttributes(\n+                derivedSchema,\n+                attributableUtil.derivedAttributeClass());\n+\n         final Set<Long> derivedAttributeIds =\n-                new HashSet<Long>(derivedSchema.getDerivedAttributes().size());\n+                new HashSet<Long>(attributes.size());\n \n         Class attributeClass = null;\n \n-        for (AbstractDerAttr attribute :\n-                derivedSchema.getDerivedAttributes()) {\n-\n+        for (AbstractDerAttr attribute : attributes) {\n             derivedAttributeIds.add(attribute.getId());\n             attributeClass = attribute.getClass();\n         }\n@@ -89,4 +91,17 @@ public void delete(final String name,\n \n         entityManager.remove(derivedSchema);\n     }\n+\n+    @Override\n+    public <T extends AbstractDerAttr> List<T> getAttributes(\n+            final AbstractDerSchema derivedSchema, final Class<T> reference) {\n+\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM \" + reference.getSimpleName() + \" e\"\n+                + \" WHERE e.derivedSchema=:schema\");\n+        \n+        query.setParameter(\"schema\", derivedSchema);\n+\n+        return query.getResultList();\n+    }\n }"},{"sha":"481a9484ff1ae3498d9c60c624226c698fcc025e","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserDAOImpl.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -25,6 +25,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n+import org.syncope.core.persistence.beans.AbstractVirAttr;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UAttrUniqueValue;\n@@ -226,7 +227,15 @@ public final Integer count(final Set<Long> adminRoles) {\n \n     @Override\n     public SyncopeUser save(final SyncopeUser user) {\n-        return entityManager.merge(user);\n+        SyncopeUser merged = entityManager.merge(user);\n+\n+        for (AbstractVirAttr virtual : merged.getVirtualAttributes()) {\n+            virtual.setValues(user.getVirtualAttribute(\n+                    virtual.getVirtualSchema().getName()).\n+                    getValues());\n+        }\n+        \n+        return merged;\n     }\n \n     @Override"},{"sha":"2f3e2374ecee5a62c8e78312365e4a2878fa50c7","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/VirAttrDAOImpl.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FVirAttrDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FVirAttrDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FVirAttrDAOImpl.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -0,0 +1,72 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao.impl;\n+\n+import java.util.List;\n+import javax.persistence.Query;\n+import org.springframework.stereotype.Repository;\n+import org.syncope.core.persistence.beans.AbstractVirAttr;\n+import org.syncope.core.persistence.dao.VirAttrDAO;\n+\n+@Repository\n+public class VirAttrDAOImpl extends AbstractDAOImpl implements VirAttrDAO {\n+\n+    @Override\n+    public <T extends AbstractVirAttr> T find(\n+            final Long id, final Class<T> reference) {\n+\n+        return entityManager.find(reference, id);\n+    }\n+\n+    @Override\n+    public <T extends AbstractVirAttr> List<T> findAll(\n+            final Class<T> reference) {\n+\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM \" + reference.getSimpleName() + \" e\");\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public <T extends AbstractVirAttr> T save(\n+            final T virtualAttribute) {\n+\n+        return entityManager.merge(virtualAttribute);\n+    }\n+\n+    @Override\n+    public <T extends AbstractVirAttr> void delete(\n+            final Long id, final Class<T> reference) {\n+\n+        T virtualAttribute = find(id, reference);\n+        if (virtualAttribute == null) {\n+            return;\n+        }\n+\n+        delete(virtualAttribute);\n+    }\n+\n+    @Override\n+    public <T extends AbstractVirAttr> void delete(\n+            final T virtualAttribute) {\n+\n+        if (virtualAttribute.getOwner() != null) {\n+            virtualAttribute.getOwner().\n+                    removeVirtualAttribute(virtualAttribute);\n+        }\n+\n+        entityManager.remove(virtualAttribute);\n+    }\n+}"},{"sha":"2535e6f78ae71112ba704c69c6112121d3d40250","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/VirSchemaDAOImpl.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FVirSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FVirSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FVirSchemaDAOImpl.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -0,0 +1,106 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao.impl;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.persistence.Query;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+import org.syncope.core.persistence.beans.AbstractVirAttr;\n+import org.syncope.core.persistence.beans.AbstractVirSchema;\n+import org.syncope.core.persistence.dao.ResourceDAO;\n+import org.syncope.core.persistence.dao.VirAttrDAO;\n+import org.syncope.core.persistence.dao.VirSchemaDAO;\n+import org.syncope.core.util.AttributableUtil;\n+\n+@Repository\n+public class VirSchemaDAOImpl extends AbstractDAOImpl implements VirSchemaDAO {\n+\n+    @Autowired\n+    private VirAttrDAO virtualAttributeDAO;\n+\n+    @Autowired\n+    private ResourceDAO resourceDAO;\n+\n+    @Override\n+    public <T extends AbstractVirSchema> T find(final String name,\n+            final Class<T> reference) {\n+\n+        return entityManager.find(reference, name);\n+    }\n+\n+    @Override\n+    public <T extends AbstractVirSchema> List<T> findAll(\n+            final Class<T> reference) {\n+\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM \" + reference.getSimpleName() + \" e\");\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public <T extends AbstractVirSchema> T save(final T virtualSchema) {\n+        return entityManager.merge(virtualSchema);\n+    }\n+\n+    @Override\n+    public void delete(final String name,\n+            final AttributableUtil attributableUtil) {\n+\n+        final AbstractVirSchema virtualSchema =\n+                find(name, attributableUtil.virtualSchemaClass());\n+\n+        if (virtualSchema == null) {\n+            return;\n+        }\n+\n+        List<? extends AbstractVirAttr> attributes = getAttributes(\n+                virtualSchema,\n+                attributableUtil.virtualAttributeClass());\n+\n+        final Set<Long> virtualAttributeIds =\n+                new HashSet<Long>(attributes.size());\n+\n+        Class attributeClass = null;\n+\n+        for (AbstractVirAttr attribute : attributes) {\n+            virtualAttributeIds.add(attribute.getId());\n+            attributeClass = attribute.getClass();\n+        }\n+\n+        for (Long virtualAttributeId : virtualAttributeIds) {\n+            virtualAttributeDAO.delete(virtualAttributeId, attributeClass);\n+        }\n+\n+        resourceDAO.deleteMappings(\n+                name, attributableUtil.virtualSourceMappingType());\n+\n+        entityManager.remove(virtualSchema);\n+    }\n+\n+    @Override\n+    public <T extends AbstractVirAttr> List<T> getAttributes(\n+            final AbstractVirSchema virtualSchema, final Class<T> reference) {\n+\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM \" + reference.getSimpleName() + \" e\"\n+                + \" WHERE e.virtualSchema=:schema\");\n+        query.setParameter(\"schema\", virtualSchema);\n+\n+        return query.getResultList();\n+    }\n+}"},{"sha":"9eb32a1eb310be0ce2b2baf19bac4f665e80ef11","filename":"core/src/main/java/org/syncope/core/persistence/propagation/ConnectorFacadeProxy.java","status":"modified","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -16,6 +16,8 @@\n \n import java.io.File;\n import java.net.URI;\n+import java.util.Collection;\n+import java.util.HashSet;\n import java.util.Set;\n import javassist.NotFoundException;\n import org.identityconnectors.common.security.GuardedByteArray;\n@@ -27,6 +29,7 @@\n import org.identityconnectors.framework.api.ConnectorInfo;\n import org.identityconnectors.framework.api.ConnectorKey;\n import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.OperationOptions;\n import org.identityconnectors.framework.common.objects.Uid;\n@@ -312,6 +315,60 @@ public void validate() {\n         connector.validate();\n     }\n \n+    public Set<Attribute> getObject(\n+            final ObjectClass objClass,\n+            final Uid uid,\n+            final OperationOptions options) {\n+        ConnectorObject object = connector.getObject(objClass, uid, options);\n+        return object.getAttributes();\n+    }\n+\n+    public Attribute getObjectAttribute(\n+            final ObjectClass objClass,\n+            final Uid uid,\n+            final OperationOptions options,\n+            final String attributeName) {\n+\n+        Attribute attribute = null;\n+\n+        try {\n+            final ConnectorObject object =\n+                    connector.getObject(objClass, uid, options);\n+\n+            attribute = object.getAttributeByName(attributeName);\n+\n+        } catch (NullPointerException e) {\n+            // ignore exception\n+            LOG.debug(\"Object for '{}' not found\", uid.getUidValue());\n+        }\n+\n+        return attribute;\n+    }\n+\n+    public Set<Attribute> getObjectAttributes(\n+            final ObjectClass objClass,\n+            final Uid uid,\n+            final OperationOptions options,\n+            final Collection<String> attributeNames) {\n+\n+        final Set<Attribute> attributes = new HashSet<Attribute>();\n+\n+        try {\n+\n+            final ConnectorObject object = connector.getObject(objClass, uid, options);\n+\n+            for (String attribute : attributeNames) {\n+                attributes.add(object.getAttributeByName(attribute));\n+            }\n+\n+        } catch (NullPointerException e) {\n+            // ignore exception\n+            LOG.debug(\"Object for '{}' not found\", uid.getUidValue());\n+        }\n+\n+        return attributes;\n+    }\n+\n     @Override\n     public String toString() {\n         return \"ConnectorFacadeProxy{\""},{"sha":"e88fe8ffbcba1005f2d32b16166a643f405f8aba","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":174,"deletions":5,"changes":179,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -18,6 +18,7 @@\n import com.opensymphony.workflow.WorkflowException;\n import java.io.PrintWriter;\n import java.io.StringWriter;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n@@ -38,25 +39,35 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.syncope.core.persistence.ConnInstanceLoader;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n+import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.beans.AbstractVirSchema;\n import org.syncope.core.persistence.beans.ConnInstance;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.Task;\n import org.syncope.core.persistence.beans.TaskExecution;\n+import org.syncope.core.persistence.beans.membership.MDerSchema;\n import org.syncope.core.persistence.beans.membership.MSchema;\n+import org.syncope.core.persistence.beans.membership.MVirSchema;\n import org.syncope.core.persistence.beans.membership.Membership;\n+import org.syncope.core.persistence.beans.role.RDerSchema;\n import org.syncope.core.persistence.beans.role.RSchema;\n+import org.syncope.core.persistence.beans.role.RVirSchema;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UAttr;\n import org.syncope.core.persistence.beans.user.UAttrValue;\n import org.syncope.core.persistence.beans.user.UDerAttr;\n+import org.syncope.core.persistence.beans.user.UDerSchema;\n import org.syncope.core.persistence.beans.user.USchema;\n+import org.syncope.core.persistence.beans.user.UVirAttr;\n+import org.syncope.core.persistence.beans.user.UVirSchema;\n import org.syncope.core.persistence.dao.DerSchemaDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.TaskDAO;\n import org.syncope.core.persistence.dao.TaskExecutionDAO;\n+import org.syncope.core.persistence.dao.VirSchemaDAO;\n import org.syncope.core.util.JexlUtil;\n import org.syncope.core.workflow.Constants;\n import org.syncope.core.workflow.WFUtils;\n@@ -89,6 +100,12 @@ public class PropagationManager {\n     @Autowired\n     private DerSchemaDAO derSchemaDAO;\n \n+    /**\n+     * Virtual Schema DAO.\n+     */\n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n     /**\n      * Task DAO.\n      */\n@@ -315,17 +332,31 @@ private Class getSourceMappingTypeClass(\n \n             case MembershipSchema:\n                 result = MSchema.class;\n+                break;\n \n             case UserDerivedSchema:\n-                result = USchema.class;\n+                result = UDerSchema.class;\n                 break;\n \n             case RoleDerivedSchema:\n-                result = RSchema.class;\n+                result = RDerSchema.class;\n                 break;\n \n             case MembershipDerivedSchema:\n-                result = MSchema.class;\n+                result = MDerSchema.class;\n+                break;\n+\n+            case UserVirtualSchema:\n+                result = UVirSchema.class;\n+                break;\n+\n+            case RoleVirtualSchema:\n+                result = RVirSchema.class;\n+                break;\n+\n+            case MembershipVirtualSchema:\n+                result = MVirSchema.class;\n+                break;\n \n             default:\n                 result = null;\n@@ -357,9 +388,11 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n         // syncope user attribute\n         UAttr attr;\n         UDerAttr derAttr;\n+        UVirAttr virAttr;\n \n         AbstractSchema schema;\n         AbstractDerSchema derSchema;\n+        AbstractVirSchema virSchema;\n \n         // syncope user attribute schema type\n         SchemaType schemaType = null;\n@@ -371,6 +404,7 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n \n             schema = null;\n             derSchema = null;\n+            virSchema = null;\n             values = null;\n \n             try {\n@@ -407,6 +441,42 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n                                     values});\n                         break;\n \n+                    case UserVirtualSchema:\n+                    case RoleVirtualSchema:\n+                    case MembershipVirtualSchema:\n+\n+                        virSchema = virSchemaDAO.find(\n+                                mapping.getSourceAttrName(),\n+                                getSourceMappingTypeClass(\n+                                mapping.getSourceMappingType()));\n+\n+\n+                        schemaType = SchemaType.String;\n+\n+                        virAttr = user.getVirtualAttribute(\n+                                mapping.getSourceAttrName());\n+\n+                        values = new ArrayList<AbstractAttrValue>();\n+                        AbstractAttrValue abstractValue;\n+\n+                        if (virAttr != null && virAttr.getValues() != null) {\n+                            for (String value : virAttr.getValues()) {\n+                                abstractValue = new UAttrValue();\n+                                abstractValue.setStringValue(value);\n+                                values.add(abstractValue);\n+                            }\n+                        }\n+\n+                        LOG.debug(\"Retrieved virtual attribute {}\", virAttr\n+                                + \"\\n* SourceAttrName {}\"\n+                                + \"\\n* SourceMappingType {}\"\n+                                + \"\\n* Attribute values {}\",\n+                                new Object[]{\n+                                    mapping.getSourceAttrName(),\n+                                    mapping.getSourceMappingType(),\n+                                    values});\n+                        break;\n+\n                     case UserDerivedSchema:\n                     case RoleDerivedSchema:\n                     case MembershipDerivedSchema:\n@@ -450,11 +520,13 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n \n                         AbstractAttrValue uAttrValue = new UAttrValue();\n \n-                        if (SourceMappingType.SyncopeUserId == mapping.getSourceMappingType()) {\n+                        if (SourceMappingType.SyncopeUserId\n+                                == mapping.getSourceMappingType()) {\n \n                             uAttrValue.setStringValue(user.getId().toString());\n                         }\n-                        if (SourceMappingType.Password == mapping.getSourceMappingType()\n+                        if (SourceMappingType.Password\n+                                == mapping.getSourceMappingType()\n                                 && password != null) {\n \n                             uAttrValue.setStringValue(password);\n@@ -573,6 +645,15 @@ public void propagate(final TaskExecution execution) {\n             switch (task.getResourceOperationType()) {\n                 case CREATE:\n                 case UPDATE:\n+\n+                    if (LOG.isDebugEnabled()) {\n+                        for (Attribute attr : task.getAttributes()) {\n+                            LOG.debug(\"Propagate attribute \"\n+                                    + attr.getName()\n+                                    + \" \" + attr.getValue());\n+                        }\n+                    }\n+\n                     Uid userUid = null;\n                     try {\n                         userUid = connector.resolveUsername(\n@@ -676,4 +757,92 @@ public void propagate(final TaskExecution execution) {\n             }\n         }\n     }\n+\n+    public <T extends AbstractAttributable> Set<String> getObjectAttributeValue(\n+            final T attributable,\n+            final String attributeName,\n+            final SourceMappingType sourceMappingType) {\n+\n+        List values = new ArrayList();\n+\n+        Set<String> attributeNames;\n+        ConnInstance connectorInstance;\n+        ConnectorFacadeProxy connector;\n+        Set<Attribute> attributes;\n+        String accountLink;\n+        String accountId = null;\n+\n+        LOG.debug(\"{}: retrieving external values for {}\",\n+                new Object[]{attributable, attributeName});\n+\n+        for (TargetResource resource :\n+                attributable.getInheritedTargetResources()) {\n+\n+            LOG.debug(\"Retrieving attribute mapped on {}\", resource);\n+\n+            attributeNames = new HashSet<String>();\n+\n+            accountLink = resource.getAccountLink();\n+\n+            for (SchemaMapping mapping : resource.getMappings()) {\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Processing mapping.\"\n+                            + \"\\n\\tID: \" + mapping.getId()\n+                            + \"\\n\\tSource: \" + mapping.getSourceAttrName()\n+                            + \"\\n\\tDestination: \" + mapping.getDestAttrName()\n+                            + \"\\n\\tType: \" + mapping.getSourceMappingType()\n+                            + \"\\n\\tMandatory condition: \"\n+                            + mapping.getMandatoryCondition()\n+                            + \"\\n\\tAccountId: \" + mapping.isAccountid()\n+                            + \"\\n\\tPassword: \" + mapping.isPassword());\n+                }\n+\n+                if (mapping.getSourceAttrName().equals(attributeName)\n+                        && mapping.getSourceMappingType() == sourceMappingType) {\n+\n+                    attributeNames.add(mapping.getDestAttrName());\n+                }\n+\n+                if (mapping.isAccountid()) {\n+                    try {\n+                        accountId = attributable.getAttribute(\n+                                mapping.getSourceAttrName()).\n+                                getValuesAsStrings().get(0);\n+                    } catch (NullPointerException e) {\n+                        // ignore exception\n+                        LOG.debug(\"Invalid accountId specified\", e);\n+                    }\n+                }\n+            }\n+\n+            if (accountId == null && accountLink != null) {\n+                accountId = jexlUtil.evaluateWithAttributes(\n+                        resource.getAccountLink(),\n+                        attributable.getAttributes());\n+            }\n+\n+            if (attributeNames != null && accountId != null) {\n+                LOG.debug(\"Get object attribute for entry {}\", accountId);\n+\n+                connectorInstance = resource.getConnector();\n+\n+                connector = ConnInstanceLoader.getConnector(\n+                        connectorInstance.getId().toString());\n+\n+                attributes = connector.getObjectAttributes(\n+                        ObjectClass.ACCOUNT,\n+                        new Uid(accountId),\n+                        null,\n+                        attributeNames);\n+\n+                LOG.debug(\"Retrieved {}\", attributes);\n+\n+                for (Attribute attribute : attributes) {\n+                    values.addAll(attribute.getValue());\n+                }\n+            }\n+        }\n+\n+        return new HashSet<String>(values);\n+    }\n }"},{"sha":"58b6bc8186b9d93b3e97728561df3443fdb55331","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -298,8 +298,7 @@ public List<UserTO> search(@RequestBody NodeCond searchCondition)\n         }\n \n         List<SyncopeUser> matchingUsers = userSearchDAO.search(\n-                EntitlementUtil.getRoleIds(EntitlementUtil.\n-                getOwnedEntitlementNames()), searchCondition);\n+                EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()), searchCondition);\n         List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {\n             result.add(userDataBinder.getUserTO(user, workflow));"},{"sha":"ddd9033c6afdb85be6d77618f23e34ce248bad80","filename":"core/src/main/java/org/syncope/core/rest/controller/VirtualSchemaController.java","status":"added","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -0,0 +1,123 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.controller;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javassist.NotFoundException;\n+import javax.servlet.http.HttpServletResponse;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.syncope.client.to.VirtualSchemaTO;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.core.persistence.beans.AbstractVirSchema;\n+import org.syncope.core.persistence.dao.VirSchemaDAO;\n+import org.syncope.core.rest.data.VirtualSchemaDataBinder;\n+\n+@Controller\n+@RequestMapping(\"/virtualSchema\")\n+public class VirtualSchemaController extends AbstractController {\n+\n+    @Autowired\n+    private VirSchemaDAO virtualSchemaDAO;\n+\n+    @Autowired\n+    private VirtualSchemaDataBinder virtualSchemaDataBinder;\n+\n+    @PreAuthorize(\"hasRole('SCHEMA_CREATE')\")\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/{kind}/create\")\n+    public VirtualSchemaTO create(final HttpServletResponse response,\n+            @RequestBody final VirtualSchemaTO virtualSchemaTO,\n+            @PathVariable(\"kind\") final String kind)\n+            throws SyncopeClientCompositeErrorException {\n+\n+        AbstractVirSchema virtualSchema =\n+                virtualSchemaDataBinder.create(\n+                virtualSchemaTO,\n+                getAttributableUtil(kind).newVirtualSchema(),\n+                getAttributableUtil(kind).schemaClass());\n+\n+        virtualSchema = virtualSchemaDAO.save(virtualSchema);\n+\n+        response.setStatus(HttpServletResponse.SC_CREATED);\n+        return virtualSchemaDataBinder.getVirtualSchemaTO(virtualSchema);\n+    }\n+\n+    @PreAuthorize(\"hasRole('SCHEMA_DELETE')\")\n+    @RequestMapping(method = RequestMethod.DELETE,\n+    value = \"/{kind}/delete/{schema}\")\n+    public void delete(HttpServletResponse response,\n+            @PathVariable(\"kind\") final String kind,\n+            @PathVariable(\"schema\") final String virtualSchemaName)\n+            throws NotFoundException {\n+\n+        Class reference = getAttributableUtil(kind).virtualSchemaClass();\n+        AbstractVirSchema virtualSchema =\n+                virtualSchemaDAO.find(virtualSchemaName, reference);\n+        if (virtualSchema == null) {\n+            LOG.error(\"Could not find virtual schema '\"\n+                    + virtualSchemaName + \"'\");\n+\n+            throw new NotFoundException(virtualSchemaName);\n+        } else {\n+            virtualSchemaDAO.delete(\n+                    virtualSchemaName, getAttributableUtil(kind));\n+        }\n+    }\n+\n+    @PreAuthorize(\"hasRole('SCHEMA_LIST')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/{kind}/list\")\n+    public List<VirtualSchemaTO> list(@PathVariable(\"kind\") final String kind) {\n+        Class reference = getAttributableUtil(kind).virtualSchemaClass();\n+        List<AbstractVirSchema> virtualAttributeSchemas =\n+                virtualSchemaDAO.findAll(reference);\n+\n+        List<VirtualSchemaTO> virtualSchemaTOs =\n+                new ArrayList<VirtualSchemaTO>(virtualAttributeSchemas.size());\n+        for (AbstractVirSchema virtualSchema : virtualAttributeSchemas) {\n+\n+            virtualSchemaTOs.add(virtualSchemaDataBinder.getVirtualSchemaTO(\n+                    virtualSchema));\n+        }\n+\n+        return virtualSchemaTOs;\n+    }\n+\n+    @PreAuthorize(\"hasRole('SCHEMA_READ')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/{kind}/read/{virtualSchema}\")\n+    public VirtualSchemaTO read(@PathVariable(\"kind\") final String kind,\n+            @PathVariable(\"virtualSchema\") final String virtualSchemaName)\n+            throws NotFoundException {\n+\n+        Class reference = getAttributableUtil(kind).virtualSchemaClass();\n+        AbstractVirSchema virtualSchema =\n+                virtualSchemaDAO.find(virtualSchemaName, reference);\n+        if (virtualSchema == null) {\n+            LOG.error(\"Could not find virtual schema '\"\n+                    + virtualSchemaName + \"'\");\n+            throw new NotFoundException(virtualSchemaName);\n+        }\n+\n+        return virtualSchemaDataBinder.getVirtualSchemaTO(virtualSchema);\n+    }\n+}"},{"sha":"548c46e548eb971136340cda9d1246ddc144a796","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":133,"deletions":5,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -37,6 +37,8 @@\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.beans.AbstractVirAttr;\n+import org.syncope.core.persistence.beans.AbstractVirSchema;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n@@ -51,6 +53,8 @@\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.RoleDAO;\n import org.syncope.core.persistence.dao.UserDAO;\n+import org.syncope.core.persistence.dao.VirAttrDAO;\n+import org.syncope.core.persistence.dao.VirSchemaDAO;\n import org.syncope.core.persistence.propagation.ResourceOperations;\n import org.syncope.core.util.JexlUtil;\n import org.syncope.types.ResourceOperationType;\n@@ -76,12 +80,18 @@ public abstract class AbstractAttributableDataBinder {\n     @Autowired\n     protected DerSchemaDAO derivedSchemaDAO;\n \n+    @Autowired\n+    protected VirSchemaDAO virtualSchemaDAO;\n+\n     @Autowired\n     protected AttrDAO attributeDAO;\n \n     @Autowired\n     protected DerAttrDAO derivedAttributeDAO;\n \n+    @Autowired\n+    protected VirAttrDAO virtualAttributeDAO;\n+\n     @Autowired\n     protected AttrValueDAO attributeValueDAO;\n \n@@ -106,7 +116,7 @@ private <T extends AbstractSchema> T getSchema(\n         // see http://code.google.com/p/syncope/issues/detail?id=17\n         if (schema == null) {\n             LOG.debug(\"Ignoring invalid schema {}\", schemaName);\n-        } else if (schema.isVirtual() || schema.isReadonly()) {\n+        } else if (schema.isReadonly()) {\n             schema = null;\n \n             LOG.debug(\"Ignoring virtual or readonly schema {}\", schemaName);\n@@ -121,12 +131,24 @@ private <T extends AbstractDerSchema> T getDerivedSchema(\n         T derivedSchema = derivedSchemaDAO.find(derSchemaName, reference);\n \n         if (derivedSchema == null) {\n-            LOG.debug(\"Ignoring invalid derivedschema {}\", derSchemaName);\n+            LOG.debug(\"Ignoring invalid derived schema {}\", derSchemaName);\n         }\n \n         return derivedSchema;\n     }\n \n+    private <T extends AbstractVirSchema> T getVirtualSchema(\n+            final String virSchemaName, final Class<T> reference) {\n+\n+        T virtualSchema = virtualSchemaDAO.find(virSchemaName, reference);\n+\n+        if (virtualSchema == null) {\n+            LOG.debug(\"Ignoring invalid virtual schema {}\", virSchemaName);\n+        }\n+\n+        return virtualSchema;\n+    }\n+\n     private TargetResource getResource(final String resourceName) {\n         TargetResource resource = resourceDAO.find(resourceName);\n \n@@ -244,7 +266,6 @@ private SyncopeClientException checkMandatory(\n \n         for (AbstractSchema schema : allSchemas) {\n             if (attributable.getAttribute(schema.getName()) == null\n-                    && !schema.isVirtual()\n                     && !schema.isReadonly()\n                     && (evaluateMandatoryCondition(\n                     schema.getMandatoryCondition(),\n@@ -284,6 +305,8 @@ protected ResourceOperations fill(\n         AbstractAttr attribute;\n         AbstractDerSchema derivedSchema;\n         AbstractDerAttr derivedAttribute;\n+        AbstractVirSchema virtualSchema;\n+        AbstractVirAttr virtualAttribute;\n \n         // 1. attributes to be removed\n         for (String attributeToBeRemoved :\n@@ -455,7 +478,52 @@ protected ResourceOperations fill(\n         LOG.debug(\"About derived attributes to be removed:\\n{}\",\n                 resourceOperations);\n \n-        // 4. derived attributes to be added\n+        // 4. virtual attributes to be removed\n+        for (String virtualAttributeToBeRemoved :\n+                attributableMod.getVirtualAttributesToBeRemoved()) {\n+\n+            virtualSchema = getVirtualSchema(virtualAttributeToBeRemoved,\n+                    attributableUtil.virtualSchemaClass());\n+\n+            if (virtualSchema != null) {\n+\n+                virtualAttribute = attributable.getVirtualAttribute(\n+                        virtualSchema.getName());\n+\n+                if (virtualAttribute == null) {\n+                    LOG.debug(\"No virtual attribute found for schema {}\",\n+                            virtualSchema.getName());\n+                } else {\n+                    virtualAttributeDAO.delete(virtualAttribute);\n+                }\n+\n+                for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n+                    if (mapping.getSourceAttrName().equals(\n+                            virtualSchema.getName())\n+                            && mapping.getSourceMappingType()\n+                            == attributableUtil.virtualSourceMappingType()\n+                            && mapping.getResource() != null\n+                            && resources.contains(mapping.getResource())) {\n+\n+                        resourceOperations.add(ResourceOperationType.UPDATE,\n+                                mapping.getResource());\n+\n+                        if (mapping.isAccountid() && virtualAttribute != null\n+                                && !virtualAttribute.getValues().isEmpty()) {\n+\n+                            resourceOperations.addOldAccountId(\n+                                    mapping.getResource().getName(),\n+                                    virtualAttribute.getValues().get(0));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        LOG.debug(\"About virtual attributes to be removed:\\n{}\",\n+                resourceOperations);\n+\n+        // 5. derived attributes to be added\n         for (String derivedAttributeToBeAdded :\n                 attributableMod.getDerivedAttributesToBeAdded()) {\n \n@@ -486,7 +554,38 @@ protected ResourceOperations fill(\n         LOG.debug(\"About derived attributes to be added:\\n{}\",\n                 resourceOperations);\n \n-        // 5. resources to be removed\n+        // 6. virtual attributes to be added\n+        for (String virtualAttributeToBeAdded :\n+                attributableMod.getVirtualAttributesToBeAdded()) {\n+\n+            virtualSchema = getVirtualSchema(virtualAttributeToBeAdded,\n+                    attributableUtil.virtualSchemaClass());\n+\n+            if (virtualSchema != null) {\n+                for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n+                    if (mapping.getSourceAttrName().equals(\n+                            virtualSchema.getName())\n+                            && mapping.getSourceMappingType()\n+                            == attributableUtil.virtualSourceMappingType()\n+                            && mapping.getResource() != null\n+                            && resources.contains(mapping.getResource())) {\n+\n+                        resourceOperations.add(ResourceOperationType.UPDATE,\n+                                mapping.getResource());\n+                    }\n+                }\n+\n+                virtualAttribute = attributableUtil.newVirtualAttribute();\n+                virtualAttribute.setVirtualSchema(virtualSchema);\n+                virtualAttribute.setOwner(attributable);\n+                attributable.addVirtualAttribute(virtualAttribute);\n+            }\n+        }\n+\n+        LOG.debug(\"About virtual attributes to be added:\\n{}\",\n+                resourceOperations);\n+\n+        // 7. resources to be removed\n         TargetResource resource;\n         for (String resourceToBeRemoved :\n                 attributableMod.getResourcesToBeRemoved()) {\n@@ -608,6 +707,23 @@ protected void fill(AbstractAttributable attributable,\n             }\n         }\n \n+        // 3. virtual attributes\n+        AbstractVirSchema virtualSchema;\n+        AbstractVirAttr virtualAttribute;\n+        for (AttributeTO attributeTO : attributableTO.getVirtualAttributes()) {\n+\n+            virtualSchema = getVirtualSchema(attributeTO.getSchema(),\n+                    attributableUtil.virtualSchemaClass());\n+\n+            if (virtualSchema != null) {\n+                virtualAttribute = attributableUtil.newVirtualAttribute();\n+                virtualAttribute.setVirtualSchema(virtualSchema);\n+                virtualAttribute.setOwner(attributable);\n+                virtualAttribute.setValues(attributeTO.getValues());\n+                attributable.addVirtualAttribute(virtualAttribute);\n+            }\n+        }\n+\n         // 3. resources\n         TargetResource resource;\n         for (String resourceName : attributableTO.getResources()) {\n@@ -636,6 +752,7 @@ public void fillTO(\n             AbstractAttributableTO abstractAttributableTO,\n             Collection<? extends AbstractAttr> attributes,\n             Collection<? extends AbstractDerAttr> derivedAttributes,\n+            Collection<? extends AbstractVirAttr> virtualAttributes,\n             Collection<TargetResource> resources) {\n \n         AttributeTO attributeTO;\n@@ -658,6 +775,17 @@ public void fillTO(\n             abstractAttributableTO.addDerivedAttribute(attributeTO);\n         }\n \n+        for (AbstractVirAttr virtualAttribute : virtualAttributes) {\n+\n+            attributeTO = new AttributeTO();\n+            attributeTO.setSchema(\n+                    virtualAttribute.getVirtualSchema().getName());\n+            attributeTO.setValues(virtualAttribute.getValues());\n+            attributeTO.setReadonly(true);\n+\n+            abstractAttributableTO.addVirtualAttribute(attributeTO);\n+        }\n+\n         for (TargetResource resource : resources) {\n             abstractAttributableTO.addResource(resource.getName());\n         }"},{"sha":"49f420370bf10ebf62172f9dd8f7aa23a8690591","filename":"core/src/main/java/org/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":13,"deletions":2,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -41,6 +41,8 @@ public SyncopeRole create(final RoleTO roleTO)\n         role.setInheritAttributes(roleTO.isInheritAttributes());\n         role.setInheritDerivedAttributes(\n                 roleTO.isInheritDerivedAttributes());\n+        role.setInheritVirtualAttributes(\n+                roleTO.isInheritVirtualAttributes());\n \n         SyncopeClientCompositeErrorException scce =\n                 new SyncopeClientCompositeErrorException(\n@@ -80,7 +82,7 @@ public SyncopeRole create(final RoleTO roleTO)\n             invalidRoles.addElement(roleTO.getName());\n         }\n \n-        // attributes, derived attributes and resources\n+        // attributes, derived attributes, virtual attributes and resources\n         fill(role, roleTO, AttributableUtil.ROLE, scce);\n \n         // entitlements\n@@ -134,6 +136,12 @@ public ResourceOperations update(SyncopeRole role, RoleMod roleMod)\n                     !role.isInheritDerivedAttributes());\n         }\n \n+        // inherited virtual attributes\n+        if (roleMod.isChangeInheritVirtualAttributes()) {\n+            role.setInheritVirtualAttributes(\n+                    !role.isInheritVirtualAttributes());\n+        }\n+\n         // entitlements\n         role.getEntitlements().clear();\n         Entitlement entitlement;\n@@ -146,7 +154,7 @@ public ResourceOperations update(SyncopeRole role, RoleMod roleMod)\n             }\n         }\n \n-        // attributes, derived attributes and resources\n+        // attributes, derived attributes, virtual attributes and resources\n         return fill(role, roleMod, AttributableUtil.ROLE, scce);\n     }\n \n@@ -156,13 +164,16 @@ public RoleTO getRoleTO(SyncopeRole role) {\n         roleTO.setName(role.getName());\n         roleTO.setInheritAttributes(role.isInheritAttributes());\n         roleTO.setInheritDerivedAttributes(role.isInheritDerivedAttributes());\n+        roleTO.setInheritVirtualAttributes(role.isInheritVirtualAttributes());\n+\n         if (role.getParent() != null) {\n             roleTO.setParent(role.getParent().getId());\n         }\n \n         fillTO(roleTO,\n                 role.findInheritedAttributes(),\n                 role.findInheritedDerivedAttributes(),\n+                role.findInheritedVirtualAttributes(),\n                 role.getTargetResources());\n \n         for (Entitlement entitlement : role.getEntitlements()) {"},{"sha":"dee52e83594d68f791493dfaa8fe604fb4b679b6","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":40,"deletions":8,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -34,14 +34,17 @@\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n+import org.syncope.core.persistence.beans.AbstractVirAttr;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.membership.MAttr;\n import org.syncope.core.persistence.beans.membership.MDerAttr;\n+import org.syncope.core.persistence.beans.membership.MVirAttr;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UAttr;\n import org.syncope.core.persistence.beans.user.UDerAttr;\n+import org.syncope.core.persistence.beans.user.UVirAttr;\n import org.syncope.core.persistence.propagation.ResourceOperations;\n import org.syncope.types.CipherAlgorithm;\n import org.syncope.types.ResourceOperationType;\n@@ -119,6 +122,15 @@ public void empty(final SyncopeUser user) {\n         }\n         user.getDerivedAttributes().clear();\n \n+        ids.clear();\n+        for (AbstractVirAttr virtualAttribute : user.getVirtualAttributes()) {\n+            ids.add(virtualAttribute.getId());\n+        }\n+        for (Long virAttrId : ids) {\n+            virtualAttributeDAO.delete(virAttrId, UVirAttr.class);\n+        }\n+        user.getVirtualAttributes().clear();\n+\n         ids.clear();\n         for (Membership membership : user.getMemberships()) {\n             ids.add(membership.getId());\n@@ -188,7 +200,7 @@ public void create(final SyncopeUser user, final UserTO userTO)\n             }\n         }\n \n-        // attributes, derived attributes and resources\n+        // attributes, derived attributes, virtual attributes and resources\n         fill(user, userTO, AttributableUtil.USER, scce);\n     }\n \n@@ -204,7 +216,7 @@ public ResourceOperations update(SyncopeUser user, UserMod userMod)\n             user.setPassword(userMod.getPassword(), getCipherAlgoritm());\n         }\n \n-        // attributes, derived attributes and resources\n+        // attributes, derived attributes, virtual attributes and resources\n         ResourceOperations resourceOperations =\n                 fill(user, userMod, AttributableUtil.USER, scce);\n \n@@ -266,17 +278,33 @@ public ResourceOperations update(SyncopeUser user, UserMod userMod)\n                                 MAttr.class);\n                     }\n \n-                    Set<Long> derivedAttributeIds = new HashSet<Long>(\n-                            membership.getDerivedAttributes().size());\n+                    attributeIds.clear();\n+                    // remove derived attributes\n+\n                     for (AbstractDerAttr derivedAttribute :\n                             membership.getDerivedAttributes()) {\n \n-                        derivedAttributeIds.add(derivedAttribute.getId());\n+                        attributeIds.add(derivedAttribute.getId());\n                     }\n-                    for (Long derivedAttributeId : derivedAttributeIds) {\n+\n+                    for (Long derivedAttributeId : attributeIds) {\n                         derivedAttributeDAO.delete(derivedAttributeId,\n                                 MDerAttr.class);\n                     }\n+\n+                    attributeIds.clear();\n+                    // remove virtual attributes\n+\n+                    for (AbstractVirAttr virtulaAttribute :\n+                            membership.getVirtualAttributes()) {\n+\n+                        attributeIds.add(virtulaAttribute.getId());\n+                    }\n+\n+                    for (Long virtualAttributeId : attributeIds) {\n+                        virtualAttributeDAO.delete(\n+                                virtualAttributeId, MVirAttr.class);\n+                    }\n                 } else {\n                     user.removeMembership(membership);\n \n@@ -343,8 +371,11 @@ public UserTO getUserTO(SyncopeUser user, Workflow userWorkflow) {\n                     + user.getWorkflowId());\n         }\n \n-        fillTO(userTO, user.getAttributes(),\n-                user.getDerivedAttributes(), user.getTargetResources());\n+        fillTO(userTO,\n+                user.getAttributes(),\n+                user.getDerivedAttributes(),\n+                user.getVirtualAttributes(),\n+                user.getTargetResources());\n \n         MembershipTO membershipTO;\n         for (Membership membership : user.getMemberships()) {\n@@ -356,6 +387,7 @@ public UserTO getUserTO(SyncopeUser user, Workflow userWorkflow) {\n             fillTO(membershipTO,\n                     membership.getAttributes(),\n                     membership.getDerivedAttributes(),\n+                    membership.getVirtualAttributes(),\n                     membership.getTargetResources());\n \n             userTO.addMembership(membershipTO);"},{"sha":"314266a92df8bc73102be6076e1dbf13ae3feac8","filename":"core/src/main/java/org/syncope/core/rest/data/VirtualSchemaDataBinder.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FVirtualSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FVirtualSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FVirtualSchemaDataBinder.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -0,0 +1,82 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.data;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Component;\n+import org.syncope.client.to.VirtualSchemaTO;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.core.persistence.beans.AbstractVirSchema;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n+\n+@Component\n+public class VirtualSchemaDataBinder {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(\n+            VirtualSchemaDataBinder.class);\n+\n+    private static final String[] ignoreVirtualSchemaProperties = {\n+        \"schemas\", \"virtualAttributes\"};\n+\n+    private <T extends AbstractSchema> AbstractVirSchema populate(\n+            AbstractVirSchema virtualSchema,\n+            final VirtualSchemaTO virtualSchemaTO,\n+            final Class<T> reference,\n+            final SyncopeClientCompositeErrorException scce)\n+            throws SyncopeClientCompositeErrorException {\n+\n+        BeanUtils.copyProperties(virtualSchemaTO, virtualSchema,\n+                ignoreVirtualSchemaProperties);\n+\n+        return virtualSchema;\n+    }\n+\n+    public <T extends AbstractSchema> AbstractVirSchema create(\n+            final VirtualSchemaTO virtualSchemaTO,\n+            AbstractVirSchema virtualSchema,\n+            final Class<T> reference) {\n+\n+        return populate(virtualSchema, virtualSchemaTO, reference,\n+                new SyncopeClientCompositeErrorException(\n+                HttpStatus.BAD_REQUEST));\n+    }\n+\n+    public <K extends AbstractSchema> AbstractVirSchema update(\n+            final VirtualSchemaTO virtualSchemaTO,\n+            AbstractVirSchema virtualSchema,\n+            final Class<K> reference) {\n+\n+        return populate(virtualSchema, virtualSchemaTO, reference,\n+                new SyncopeClientCompositeErrorException(\n+                HttpStatus.BAD_REQUEST));\n+    }\n+\n+    public <T extends AbstractVirSchema> VirtualSchemaTO getVirtualSchemaTO(\n+            final T virtualSchema) {\n+\n+        VirtualSchemaTO virtualSchemaTO = new VirtualSchemaTO();\n+        BeanUtils.copyProperties(virtualSchema, virtualSchemaTO,\n+                ignoreVirtualSchemaProperties);\n+\n+        return virtualSchemaTO;\n+    }\n+}"},{"sha":"fab5635312ad1b482eced7ec1bad857470843a62","filename":"core/src/main/java/org/syncope/core/util/AttributableUtil.java","status":"modified","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -19,24 +19,32 @@\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.beans.AbstractVirAttr;\n+import org.syncope.core.persistence.beans.AbstractVirSchema;\n import org.syncope.core.persistence.beans.membership.MAttr;\n import org.syncope.core.persistence.beans.membership.MAttrUniqueValue;\n import org.syncope.core.persistence.beans.membership.MAttrValue;\n import org.syncope.core.persistence.beans.membership.MDerAttr;\n import org.syncope.core.persistence.beans.membership.MDerSchema;\n import org.syncope.core.persistence.beans.membership.MSchema;\n+import org.syncope.core.persistence.beans.membership.MVirAttr;\n+import org.syncope.core.persistence.beans.membership.MVirSchema;\n import org.syncope.core.persistence.beans.role.RAttr;\n import org.syncope.core.persistence.beans.role.RAttrUniqueValue;\n import org.syncope.core.persistence.beans.role.RAttrValue;\n import org.syncope.core.persistence.beans.role.RDerAttr;\n import org.syncope.core.persistence.beans.role.RDerSchema;\n import org.syncope.core.persistence.beans.role.RSchema;\n+import org.syncope.core.persistence.beans.role.RVirAttr;\n+import org.syncope.core.persistence.beans.role.RVirSchema;\n import org.syncope.core.persistence.beans.user.UAttr;\n import org.syncope.core.persistence.beans.user.UAttrUniqueValue;\n import org.syncope.core.persistence.beans.user.UAttrValue;\n import org.syncope.core.persistence.beans.user.UDerAttr;\n import org.syncope.core.persistence.beans.user.UDerSchema;\n import org.syncope.core.persistence.beans.user.USchema;\n+import org.syncope.core.persistence.beans.user.UVirAttr;\n+import org.syncope.core.persistence.beans.user.UVirSchema;\n import org.syncope.types.SourceMappingType;\n \n public enum AttributableUtil {\n@@ -79,6 +87,24 @@ public SourceMappingType derivedSourceMappingType() {\n         return result;\n     }\n \n+    public SourceMappingType virtualSourceMappingType() {\n+        SourceMappingType result = null;\n+\n+        switch (this) {\n+            case USER:\n+                result = SourceMappingType.UserVirtualSchema;\n+                break;\n+            case ROLE:\n+                result = SourceMappingType.RoleVirtualSchema;\n+                break;\n+            case MEMBERSHIP:\n+                result = SourceMappingType.MembershipVirtualSchema;\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n     public <T extends AbstractSchema> Class<T> schemaClass() {\n         Class result = null;\n \n@@ -133,6 +159,24 @@ public <T extends AbstractDerSchema> Class<T> derivedSchemaClass() {\n         return result;\n     }\n \n+    public <T extends AbstractVirSchema> Class<T> virtualSchemaClass() {\n+        Class result = null;\n+\n+        switch (this) {\n+            case USER:\n+                result = UVirSchema.class;\n+                break;\n+            case ROLE:\n+                result = RVirSchema.class;\n+                break;\n+            case MEMBERSHIP:\n+                result = MVirSchema.class;\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n     public <T extends AbstractDerSchema> T newDerivedSchema() {\n         T result = null;\n \n@@ -205,6 +249,24 @@ public <T extends AbstractDerAttr> Class<T> derivedAttributeClass() {\n         return result;\n     }\n \n+    public <T extends AbstractVirAttr> Class<T> virtualAttributeClass() {\n+        Class result = null;\n+\n+        switch (this) {\n+            case USER:\n+                result = UVirAttr.class;\n+                break;\n+            case ROLE:\n+                result = RVirAttr.class;\n+                break;\n+            case MEMBERSHIP:\n+                result = MVirAttr.class;\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n     public <T extends AbstractDerAttr> T newDerivedAttribute() {\n         T result = null;\n \n@@ -223,6 +285,42 @@ public <T extends AbstractDerAttr> T newDerivedAttribute() {\n         return result;\n     }\n \n+    public <T extends AbstractVirAttr> T newVirtualAttribute() {\n+        T result = null;\n+\n+        switch (this) {\n+            case USER:\n+                result = (T) new UVirAttr();\n+                break;\n+            case ROLE:\n+                result = (T) new RVirAttr();\n+                break;\n+            case MEMBERSHIP:\n+                result = (T) new MVirAttr();\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    public <T extends AbstractVirSchema> T newVirtualSchema() {\n+        T result = null;\n+\n+        switch (this) {\n+            case USER:\n+                result = (T) new UVirSchema();\n+                break;\n+            case ROLE:\n+                result = (T) new RVirSchema();\n+                break;\n+            case MEMBERSHIP:\n+                result = (T) new MVirSchema();\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n     public <T extends AbstractAttrValue> Class<T> attributeValueClass() {\n         Class result = null;\n "},{"sha":"937d6d29d2581c45ee647e4a5aff9d60bb9b7504","filename":"core/src/main/resources/content.xml","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -44,19 +44,19 @@\n     <SyncopeConf key=\"identityconnectors.bundle.directory\" value=\"${bundles.directory}\"/>\n     <SyncopeConf key=\"password.cipher.algorithm\" value=\"MD5\"/>\n \n-    <USchema name=\"surname\" type=\"String\" virtual=\"0\"\n+    <USchema name=\"surname\" type=\"String\"\n                 mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-    <USchema name=\"firstname\" type=\"String\" virtual=\"0\"\n+    <USchema name=\"firstname\" type=\"String\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-    <USchema name=\"email\" type=\"String\" virtual=\"0\"\n+    <USchema name=\"email\" type=\"String\"\n                 mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"\n                 validatorClass=\"org.syncope.core.persistence.validation.attrvalue.EmailAddressValidator\"/>\n                \n     <UDerSchema name=\"username\" expression=\"firstname + '.' + surname\"/>\n \n-    <SyncopeRole id=\"0\" name=\"/\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\"/>\n+    <SyncopeRole id=\"0\" name=\"/\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\" inheritVirtualAttributes=\"0\"/>\n \n-    <MSchema name=\"subscriptionDate\" type=\"Date\" virtual=\"0\"\n+    <MSchema name=\"subscriptionDate\" type=\"Date\"\n                       mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                       conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>\n "},{"sha":"d9eb793260e144be42a6bad730edadbc0ffbd3f1","filename":"core/src/test/java/org/syncope/core/persistence/dao/DerAttrTest.java","status":"modified","additions":79,"deletions":1,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerAttrTest.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -25,6 +25,14 @@\n import org.syncope.core.persistence.beans.user.UDerAttr;\n import org.syncope.core.persistence.beans.user.UDerSchema;\n import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.persistence.beans.membership.MAttrValue;\n+import org.syncope.core.persistence.beans.membership.MDerAttr;\n+import org.syncope.core.persistence.beans.membership.MDerSchema;\n+import org.syncope.core.persistence.beans.membership.Membership;\n+import org.syncope.core.persistence.beans.role.RAttrValue;\n+import org.syncope.core.persistence.beans.role.RDerAttr;\n+import org.syncope.core.persistence.beans.role.RDerSchema;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n \n @Transactional\n public class DerAttrTest extends AbstractTest {\n@@ -35,6 +43,12 @@ public class DerAttrTest extends AbstractTest {\n     @Autowired\n     private UserDAO userDAO;\n \n+    @Autowired\n+    private MembershipDAO membershipDAO;\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n     @Autowired\n     private DerSchemaDAO derSchemaDAO;\n \n@@ -55,7 +69,7 @@ public final void findById() {\n     }\n \n     @Test\n-    public final void save()\n+    public final void saveUDerAttribute()\n             throws ClassNotFoundException {\n         UDerSchema cnSchema =\n                 derSchemaDAO.find(\"cn\", UDerSchema.class);\n@@ -87,6 +101,70 @@ public final void save()\n                 derivedAttribute.getValue(owner.getAttributes()));\n     }\n \n+    @Test\n+    public final void saveMDerAttribute()\n+            throws ClassNotFoundException {\n+        MDerSchema deriveddata =\n+                derSchemaDAO.find(\"deriveddata\", MDerSchema.class);\n+        assertNotNull(deriveddata);\n+\n+        Membership owner = membershipDAO.find(1L);\n+        assertNotNull(\"did not get expected user\", owner);\n+\n+        MDerAttr derivedAttribute = new MDerAttr();\n+        derivedAttribute.setOwner(owner);\n+        derivedAttribute.setDerivedSchema(deriveddata);\n+\n+        derivedAttribute = derAttrDAO.save(derivedAttribute);\n+\n+        MDerAttr actual = derAttrDAO.find(\n+                derivedAttribute.getId(), MDerAttr.class);\n+        assertNotNull(\"expected save to work\", actual);\n+        assertEquals(derivedAttribute, actual);\n+\n+        MAttrValue sx =\n+                (MAttrValue) owner.getAttribute(\n+                \"derived_sx\").getValues().iterator().next();\n+        MAttrValue dx =\n+                (MAttrValue) owner.getAttribute(\n+                \"derived_dx\").getValues().iterator().next();\n+\n+        assertEquals(sx.getValue() + \"-\" + dx.getValue(),\n+                derivedAttribute.getValue(owner.getAttributes()));\n+    }\n+\n+    @Test\n+    public final void saveRDerAttribute()\n+            throws ClassNotFoundException {\n+        RDerSchema deriveddata =\n+                derSchemaDAO.find(\"deriveddata\", RDerSchema.class);\n+        assertNotNull(deriveddata);\n+\n+        SyncopeRole owner = roleDAO.find(1L);\n+        assertNotNull(\"did not get expected user\", owner);\n+\n+        RDerAttr derivedAttribute = new RDerAttr();\n+        derivedAttribute.setOwner(owner);\n+        derivedAttribute.setDerivedSchema(deriveddata);\n+\n+        derivedAttribute = derAttrDAO.save(derivedAttribute);\n+\n+        RDerAttr actual = derAttrDAO.find(\n+                derivedAttribute.getId(), RDerAttr.class);\n+        assertNotNull(\"expected save to work\", actual);\n+        assertEquals(derivedAttribute, actual);\n+\n+        RAttrValue sx =\n+                (RAttrValue) owner.getAttribute(\n+                \"derived_sx\").getValues().iterator().next();\n+        RAttrValue dx =\n+                (RAttrValue) owner.getAttribute(\n+                \"derived_dx\").getValues().iterator().next();\n+\n+        assertEquals(sx.getValue() + \"-\" + dx.getValue(),\n+                derivedAttribute.getValue(owner.getAttributes()));\n+    }\n+\n     @Test\n     public final void delete() {\n         UDerAttr attribute = derAttrDAO.find(1000L,"},{"sha":"aa87017bdacebbc5e81d0ea9ec8f585fff8983b2","filename":"core/src/test/java/org/syncope/core/persistence/dao/SchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -41,7 +41,7 @@ public final void findAll() {\n         assertEquals(10, userList.size());\n \n         List<RSchema> roleList = schemaDAO.findAll(RSchema.class);\n-        assertEquals(2, roleList.size());\n+        assertEquals(4, roleList.size());\n     }\n \n     @Test"},{"sha":"c5438b2dbc9ded6cf45138067fce53c95cc993e5","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserSearchTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -182,7 +182,7 @@ public final void searchWithNotCondition() {\n         ids.add(users.get(0).getId());\n         ids.add(users.get(1).getId());\n         assertTrue(ids.contains(1L));\n-        assertTrue(ids.contains(4L));\n+        assertTrue(ids.contains(3L));\n     }\n \n     @Test"},{"sha":"37dfcbaffeb22941602c3ae73038479304c8a35e","filename":"core/src/test/java/org/syncope/core/persistence/dao/VirAttrTest.java","status":"added","additions":152,"deletions":0,"changes":152,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirAttrTest.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -0,0 +1,152 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.List;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.persistence.beans.membership.MVirAttr;\n+import org.syncope.core.persistence.beans.membership.MVirSchema;\n+import org.syncope.core.persistence.beans.membership.Membership;\n+import org.syncope.core.persistence.beans.role.RVirAttr;\n+import org.syncope.core.persistence.beans.role.RVirSchema;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.beans.user.UVirAttr;\n+import org.syncope.core.persistence.beans.user.UVirSchema;\n+\n+@Transactional\n+public class VirAttrTest extends AbstractTest {\n+\n+    @Autowired\n+    private VirAttrDAO virAttrDAO;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n+    @Autowired\n+    private MembershipDAO membershipDAO;\n+\n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n+    @Test\n+    public final void findAll() {\n+        List<UVirAttr> list = virAttrDAO.findAll(UVirAttr.class);\n+        assertEquals(\n+                \"did not get expected number of derived attributes \",\n+                1, list.size());\n+    }\n+\n+    @Test\n+    public final void findById() {\n+        UVirAttr attribute = virAttrDAO.find(1000L, UVirAttr.class);\n+        assertNotNull(\n+                \"did not find expected attribute schema\",\n+                attribute);\n+    }\n+\n+    @Test\n+    public final void saveUVirAttribute()\n+            throws ClassNotFoundException {\n+        UVirSchema virtualSchema =\n+                virSchemaDAO.find(\"virtualdata\", UVirSchema.class);\n+        assertNotNull(virtualSchema);\n+\n+        SyncopeUser owner = userDAO.find(3L);\n+        assertNotNull(\"did not get expected user\", owner);\n+\n+        UVirAttr virtualAttribute = new UVirAttr();\n+        virtualAttribute.setOwner(owner);\n+        virtualAttribute.setVirtualSchema(virtualSchema);\n+\n+        virtualAttribute = virAttrDAO.save(virtualAttribute);\n+\n+        UVirAttr actual = virAttrDAO.find(\n+                virtualAttribute.getId(), UVirAttr.class);\n+        assertNotNull(\"expected save to work\", actual);\n+        assertEquals(virtualAttribute, actual);\n+    }\n+\n+    @Test\n+    public final void saveMVirAttribute()\n+            throws ClassNotFoundException {\n+\n+        MVirSchema virtualSchema = new MVirSchema();\n+        virtualSchema.setName(\"mvirtualdata\");\n+\n+        Membership owner = membershipDAO.find(3L);\n+        assertNotNull(\"did not get expected membership\", owner);\n+\n+        MVirAttr virtualAttribute = new MVirAttr();\n+        virtualAttribute.setOwner(owner);\n+        virtualAttribute.setVirtualSchema(virtualSchema);\n+\n+        virtualAttribute = virAttrDAO.save(virtualAttribute);\n+\n+        MVirAttr actual = virAttrDAO.find(\n+                virtualAttribute.getId(), MVirAttr.class);\n+        assertNotNull(\"expected save to work\", actual);\n+        assertEquals(virtualAttribute, actual);\n+    }\n+\n+    @Test\n+    public final void saveRVirAttribute()\n+            throws ClassNotFoundException {\n+\n+        RVirSchema virtualSchema = new RVirSchema();\n+        virtualSchema.setName(\"rvirtualdata\");\n+\n+        SyncopeRole owner = roleDAO.find(3L);\n+        assertNotNull(\"did not get expected membership\", owner);\n+\n+        RVirAttr virtualAttribute = new RVirAttr();\n+        virtualAttribute.setOwner(owner);\n+        virtualAttribute.setVirtualSchema(virtualSchema);\n+\n+        virtualAttribute = virAttrDAO.save(virtualAttribute);\n+\n+        RVirAttr actual = virAttrDAO.find(\n+                virtualAttribute.getId(), RVirAttr.class);\n+        assertNotNull(\"expected save to work\", actual);\n+        assertEquals(virtualAttribute, actual);\n+    }\n+\n+    @Test\n+    public final void delete() {\n+        UVirAttr attribute = virAttrDAO.find(1000L, UVirAttr.class);\n+        String attributeSchemaName = attribute.getVirtualSchema().getName();\n+\n+        virAttrDAO.delete(attribute.getId(), UVirAttr.class);\n+\n+        UVirAttr actual = virAttrDAO.find(1000L, UVirAttr.class);\n+        assertNull(\"delete did not work\", actual);\n+\n+        UVirSchema attributeSchema =\n+                virSchemaDAO.find(attributeSchemaName,\n+                UVirSchema.class);\n+\n+        assertNotNull(\"user virtual attribute schema deleted \"\n+                + \"when deleting values\",\n+                attributeSchema);\n+    }\n+}"},{"sha":"762d1f0473f1c7d9880c5f7c1396f1e4e39ef1b2","filename":"core/src/test/java/org/syncope/core/persistence/dao/VirSchemaTest.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -0,0 +1,78 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.List;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.persistence.beans.user.UVirSchema;\n+import org.syncope.core.util.AttributableUtil;\n+\n+@Transactional\n+public class VirSchemaTest extends AbstractTest {\n+\n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n+    @Autowired\n+    private SchemaDAO schemaDAO;\n+\n+    @Test\n+    public final void findAll() {\n+        List<UVirSchema> list =\n+                virSchemaDAO.findAll(UVirSchema.class);\n+        assertEquals(1, list.size());\n+    }\n+\n+    @Test\n+    public final void findByName() {\n+        UVirSchema attributeSchema =\n+                virSchemaDAO.find(\"virtualdata\", UVirSchema.class);\n+        assertNotNull(\"did not find expected virtual attribute schema\",\n+                attributeSchema);\n+    }\n+\n+    @Test\n+    public final void save() {\n+        UVirSchema virtualAttributeSchema =\n+                new UVirSchema();\n+        virtualAttributeSchema.setName(\"virtual\");\n+\n+        virSchemaDAO.save(virtualAttributeSchema);\n+\n+        UVirSchema actual =\n+                virSchemaDAO.find(\"virtual\", UVirSchema.class);\n+        assertNotNull(\"expected save to work\", actual);\n+        assertEquals(virtualAttributeSchema, actual);\n+    }\n+\n+    @Test\n+    public final void delete() {\n+        UVirSchema attributeSchema =\n+                virSchemaDAO.find(\"virtualdata\", UVirSchema.class);\n+\n+        virSchemaDAO.delete(\n+                attributeSchema.getName(),\n+                AttributableUtil.USER);\n+\n+        UVirSchema actual =\n+                virSchemaDAO.find(\"virtualdata\", UVirSchema.class);\n+        assertNull(\"delete did not work\", actual);\n+    }\n+}"},{"sha":"7a528cbb5d8de77e76f6f9bbc9c1ad2e810a56d5","filename":"core/src/test/java/org/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":6,"deletions":13,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -91,8 +91,7 @@ private UserTO getSampleTO(final String email) {\n \n     @Test\n     public void testEntitlements() {\n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\"1\", \"password\"));\n \n         String[] entsArray = restTemplate.getForObject(BASE_URL\n@@ -167,8 +166,7 @@ public void testUserSchemaAuthorization() {\n         assertNotNull(schemaTO);\n \n         // 4. read the schema created above (as user) - success\n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 String.valueOf(userTO.getId()), \"password\"));\n \n@@ -179,7 +177,6 @@ public void testUserSchemaAuthorization() {\n         // 5. update the schema create above (as user) - failure\n         HttpClientErrorException exception = null;\n         try {\n-            schemaTO.setVirtual(true);\n             restTemplate.postForObject(BASE_URL\n                     + \"schema/role/update\", schemaTO, SchemaTO.class);\n         } catch (HttpClientErrorException e) {\n@@ -208,17 +205,15 @@ public void testUserRead() {\n                 userTO, UserTO.class);\n         assertNotNull(userTO);\n \n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 Long.valueOf(userTO.getId()).toString(), \"password\"));\n \n         UserTO readUserTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\", UserTO.class, 1);\n         assertNotNull(readUserTO);\n \n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\"2\", \"password\"));\n \n         HttpClientErrorException exception = null;\n@@ -251,8 +246,7 @@ public void testUserSearch() {\n                 userTO, UserTO.class);\n         assertNotNull(userTO);\n \n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 Long.valueOf(userTO.getId()).toString(), \"password\"));\n \n@@ -272,8 +266,7 @@ public void testUserSearch() {\n         }\n         assertTrue(userIds.contains(1L));\n \n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\"2\", \"password\"));\n \n         matchedUsers = Arrays.asList("},{"sha":"b1ed7ec98e7588153aa81c17a60acfbdc1673b13","filename":"core/src/test/java/org/syncope/core/rest/DerivedSchemaTestITCase.java","status":"modified","additions":70,"deletions":3,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -14,29 +14,96 @@\n  */\n package org.syncope.core.rest;\n \n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import java.util.Arrays;\n import java.util.List;\n import org.syncope.client.to.DerivedSchemaTO;\n import org.junit.Test;\n+import org.syncope.types.SyncopeClientExceptionType;\n import static org.junit.Assert.*;\n \n public class DerivedSchemaTestITCase extends AbstractTest {\n \n     @Test\n-    public void derivedList() {\n+    public void list() {\n         List<DerivedSchemaTO> derivedSchemas = Arrays.asList(\n                 restTemplate.getForObject(BASE_URL\n                 + \"derivedSchema/user/list.json\", DerivedSchemaTO[].class));\n         assertFalse(derivedSchemas.isEmpty());\n-        for (DerivedSchemaTO derivedSchemaTO: derivedSchemas) {\n+        for (DerivedSchemaTO derivedSchemaTO : derivedSchemas) {\n             assertNotNull(derivedSchemaTO);\n         }\n     }\n \n     @Test\n-    public void derivedRead() {\n+    public void read() {\n         DerivedSchemaTO derivedSchemaTO = restTemplate.getForObject(BASE_URL\n                 + \"derivedSchema/user/read/cn.json\", DerivedSchemaTO.class);\n         assertNotNull(derivedSchemaTO);\n     }\n+\n+    @Test\n+    public void create() {\n+        DerivedSchemaTO schema = new DerivedSchemaTO();\n+        schema.setName(\"derived\");\n+        schema.setExpression(\"derived_sx + '_' + derived_dx\");\n+\n+        DerivedSchemaTO actual = restTemplate.postForObject(BASE_URL\n+                + \"derivedSchema/user/create.json\",\n+                schema,\n+                DerivedSchemaTO.class);\n+        assertNotNull(actual);\n+\n+        actual = restTemplate.getForObject(BASE_URL\n+                + \"derivedSchema/user/read/\" + actual.getName() + \".json\",\n+                DerivedSchemaTO.class);\n+        assertNotNull(actual);\n+        assertEquals(actual.getExpression(), \"derived_sx + '_' + derived_dx\");\n+    }\n+\n+    @Test\n+    public void delete() {\n+        DerivedSchemaTO schema = restTemplate.getForObject(BASE_URL\n+                + \"derivedSchema/role/read/deriveddata.json\",\n+                DerivedSchemaTO.class);\n+        assertNotNull(schema);\n+\n+        restTemplate.delete(\n+                BASE_URL + \"derivedSchema/role/delete/{schema}\",\n+                schema.getName());\n+\n+        Throwable t = null;\n+        try {\n+            restTemplate.getForObject(BASE_URL\n+                    + \"derivedSchema/role/read/deriveddata.json\",\n+                    DerivedSchemaTO.class);\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            t = e;\n+            assertNotNull(e.getException(SyncopeClientExceptionType.NotFound));\n+        }\n+        assertNotNull(t);\n+    }\n+\n+    @Test\n+    public void update() {\n+        DerivedSchemaTO schema = restTemplate.getForObject(BASE_URL\n+                + \"derivedSchema/membership/read/deriveddata.json\",\n+                DerivedSchemaTO.class);\n+        assertNotNull(schema);\n+        assertEquals(\"derived_sx + '-' + derived_dx\", schema.getExpression());\n+\n+        schema.setExpression(\"derived_sx + '.' + derived_dx\");\n+\n+        schema = restTemplate.postForObject(BASE_URL\n+                + \"derivedSchema/membership/update.json\",\n+                schema,\n+                DerivedSchemaTO.class);\n+        assertNotNull(schema);\n+\n+        schema = restTemplate.getForObject(BASE_URL\n+                + \"derivedSchema/membership/read/deriveddata.json\",\n+                DerivedSchemaTO.class);\n+        assertNotNull(schema);\n+        assertEquals(\"derived_sx + '.' + derived_dx\", schema.getExpression());\n+    }\n }"},{"sha":"dc3c55c75e8aa71fc61187110fc1268e72fcf9f7","filename":"core/src/test/java/org/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -101,7 +101,6 @@ public void update() {\n                 + \"schema/role/read/icon.json\", SchemaTO.class);\n         assertNotNull(schemaTO);\n \n-        schemaTO.setVirtual(true);\n         SchemaTO updatedTO = restTemplate.postForObject(BASE_URL\n                 + \"schema/role/update\", schemaTO, SchemaTO.class);\n         assertEquals(schemaTO, updatedTO);"},{"sha":"b54f3359889f485c779c900003cd87e64f95f61c","filename":"core/src/test/java/org/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -18,6 +18,7 @@\n import static org.junit.Assert.*;\n \n import java.util.List;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n import org.springframework.web.client.HttpStatusCodeException;"},{"sha":"a1019dbfd96997001d9cd701b62ff361c20c6a5d","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":27,"deletions":5,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -24,6 +24,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n import org.springframework.test.annotation.ExpectedException;\n@@ -92,6 +93,12 @@ private UserTO getSampleTO(final String email) {\n         cnTO.setSchema(\"cn\");\n         userTO.addDerivedAttribute(cnTO);\n \n+        // add a virtual attribute\n+        AttributeTO virtualdata = new AttributeTO();\n+        virtualdata.setSchema(\"virtualdata\");\n+        virtualdata.setValues(Collections.singletonList(\"virtualvalue\"));\n+        userTO.addVirtualAttribute(virtualdata);\n+\n         return userTO;\n     }\n \n@@ -248,6 +255,21 @@ public final void create() {\n                 restTemplate.getForObject(BASE_URL + \"user/status/\"\n                 + newUserTO.getId(), String.class));\n \n+        // 3. check for virtual attribute value\n+        newUserTO = restTemplate.getForObject(\n+                BASE_URL + \"user/read/{userId}.json\",\n+                UserTO.class,\n+                newUserTO.getId());\n+        assertNotNull(newUserTO);\n+\n+        assertNotNull(newUserTO.getVirtualAttributeMap());\n+        assertNotNull(newUserTO.getVirtualAttributeMap().get(\"virtualdata\"));\n+        assertFalse(newUserTO.getVirtualAttributeMap().get(\"virtualdata\").\n+                isEmpty());\n+        assertEquals(\n+                newUserTO.getVirtualAttributeMap().get(\"virtualdata\").get(0),\n+                \"virtualvalue\");\n+\n         // get the new task list\n         tasks = Arrays.asList(\n                 restTemplate.getForObject(\n@@ -339,15 +361,15 @@ public final void createWithRequiredValueMissing() {\n         fType.addValue(\"F\");\n         userTO.addAttribute(fType);\n \n-        AttributeTO firstname = null;\n+        AttributeTO surname = null;\n         for (AttributeTO attributeTO : userTO.getAttributes()) {\n-            if (\"firstname\".equals(attributeTO.getSchema())) {\n-                firstname = attributeTO;\n+            if (\"surname\".equals(attributeTO.getSchema())) {\n+                surname = attributeTO;\n             }\n         }\n-        userTO.removeAttribute(firstname);\n+        userTO.removeAttribute(surname);\n \n-        // 2. create user without firstname (mandatory when type == 'F')\n+        // 2. create user without surname (mandatory when type == 'F')\n         ex = null;\n         try {\n             restTemplate.postForObject("},{"sha":"5565be34e6125270ee94cfb380d1818510ef1902","filename":"core/src/test/java/org/syncope/core/rest/VirtualSchemaTestITCase.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -0,0 +1,85 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest;\n+\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.types.SyncopeClientExceptionType;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.syncope.client.to.VirtualSchemaTO;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+\n+public class VirtualSchemaTestITCase extends AbstractTest {\n+\n+    @Test\n+    public void list() {\n+        List<VirtualSchemaTO> VirtualSchemas = Arrays.asList(\n+                restTemplate.getForObject(BASE_URL\n+                + \"virtualSchema/user/list.json\", VirtualSchemaTO[].class));\n+        assertFalse(VirtualSchemas.isEmpty());\n+        for (VirtualSchemaTO VirtualSchemaTO : VirtualSchemas) {\n+            assertNotNull(VirtualSchemaTO);\n+        }\n+    }\n+\n+    @Test\n+    public void read() {\n+        VirtualSchemaTO VirtualSchemaTO = restTemplate.getForObject(BASE_URL\n+                + \"virtualSchema/membership/read/mvirtualdata.json\",\n+                VirtualSchemaTO.class);\n+        assertNotNull(VirtualSchemaTO);\n+    }\n+\n+    @Test\n+    public void create() {\n+        VirtualSchemaTO schema = new VirtualSchemaTO();\n+        schema.setName(\"virtual\");\n+\n+        VirtualSchemaTO actual = restTemplate.postForObject(BASE_URL\n+                + \"virtualSchema/user/create.json\",\n+                schema,\n+                VirtualSchemaTO.class);\n+        assertNotNull(actual);\n+\n+        actual = restTemplate.getForObject(BASE_URL\n+                + \"virtualSchema/user/read/\" + actual.getName() + \".json\",\n+                VirtualSchemaTO.class);\n+        assertNotNull(actual);\n+    }\n+\n+    @Test\n+    public void delete() {\n+        VirtualSchemaTO schema = restTemplate.getForObject(BASE_URL\n+                + \"virtualSchema/role/read/rvirtualdata.json\",\n+                VirtualSchemaTO.class);\n+        assertNotNull(schema);\n+\n+        restTemplate.delete(\n+                BASE_URL + \"virtualSchema/role/delete/{schema}\",\n+                schema.getName());\n+\n+        Throwable t = null;\n+        try {\n+            schema = restTemplate.getForObject(BASE_URL\n+                    + \"virtualSchema/role/read/rvirtualdata.json\",\n+                    VirtualSchemaTO.class);\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            t = e;\n+            assertNotNull(e.getException(SyncopeClientExceptionType.NotFound));\n+        }\n+        assertNotNull(t);\n+    }\n+}"},{"sha":"ca83fddd6b31f9786f0e609db82734c5ea5e776e","filename":"core/src/test/resources/content.xml","status":"modified","additions":78,"deletions":40,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -49,96 +49,134 @@\n     <SyncopeUser id=\"3\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"/>\n     <SyncopeUser id=\"4\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"/>\n \n-    <SyncopeRole id=\"1\" name=\"root\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\"/>\n-    <SyncopeRole id=\"2\" name=\"child\" parent_id=\"1\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\"/>\n-    <SyncopeRole id=\"3\" name=\"citizen\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\"/>\n-    <SyncopeRole id=\"4\" name=\"employee\" parent_id=\"3\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\"/>\n-    <SyncopeRole id=\"5\" name=\"secretary\" parent_id=\"4\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\"/>\n-    <SyncopeRole id=\"6\" name=\"director\" parent_id=\"4\" inheritAttributes=\"1\" inheritDerivedAttributes=\"1\"/>\n-    <SyncopeRole id=\"7\" name=\"managingDirector\" parent_id=\"6\" inheritAttributes=\"1\" inheritDerivedAttributes=\"1\"/>\n-    <SyncopeRole id=\"8\" name=\"otherchild\" parent_id=\"1\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\"/>\n+    <SyncopeRole id=\"1\" name=\"root\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\" inheritVirtualAttributes=\"0\"/>\n+    <SyncopeRole id=\"2\" name=\"child\" parent_id=\"1\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\" inheritVirtualAttributes=\"0\"/>\n+    <SyncopeRole id=\"3\" name=\"citizen\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\" inheritVirtualAttributes=\"0\"/>\n+    <SyncopeRole id=\"4\" name=\"employee\" parent_id=\"3\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\" inheritVirtualAttributes=\"0\"/>\n+    <SyncopeRole id=\"5\" name=\"secretary\" parent_id=\"4\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\" inheritVirtualAttributes=\"0\"/>\n+    <SyncopeRole id=\"6\" name=\"director\" parent_id=\"4\" inheritAttributes=\"1\" inheritDerivedAttributes=\"1\" inheritVirtualAttributes=\"1\"/>\n+    <SyncopeRole id=\"7\" name=\"managingDirector\" parent_id=\"6\" inheritAttributes=\"1\" inheritDerivedAttributes=\"1\" inheritVirtualAttributes=\"1\"/>\n+    <SyncopeRole id=\"8\" name=\"otherchild\" parent_id=\"1\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\" inheritVirtualAttributes=\"1\"/>\n \n     <Membership id=\"1\" syncopeUser_id=\"1\" syncopeRole_id=\"1\"/>\n     <Membership id=\"2\" syncopeUser_id=\"2\" syncopeRole_id=\"1\"/>\n     <Membership id=\"3\" syncopeUser_id=\"2\" syncopeRole_id=\"2\"/>\n     <Membership id=\"4\" syncopeUser_id=\"4\" syncopeRole_id=\"7\"/>\n     <Membership id=\"5\" syncopeUser_id=\"1\" syncopeRole_id=\"8\"/>\n \n-    <USchema name=\"username\" type=\"String\" virtual=\"0\"\n+    <USchema name=\"username\" type=\"String\"\n                 mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"1\" readonly=\"0\"/>\n-    <USchema name=\"userId\" type=\"String\" virtual=\"0\"\n+    <USchema name=\"userId\" type=\"String\"\n                 mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"1\" readonly=\"0\"\n                 validatorClass=\"org.syncope.core.persistence.validation.attrvalue.EmailAddressValidator\"/>\n-    <USchema name=\"loginDate\" type=\"Date\" virtual=\"0\"\n+    <USchema name=\"loginDate\" type=\"Date\"\n                 mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"\n                 conversionPattern=\"yyyy-MM-dd\"/>\n-    <USchema name=\"firstname\" type=\"String\" virtual=\"0\"\n+    <USchema name=\"firstname\" type=\"String\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-    <USchema name=\"surname\" type=\"String\" virtual=\"0\"\n+    <USchema name=\"surname\" type=\"String\"\n                 mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-    <USchema name=\"type\" type=\"String\" virtual=\"0\"\n+    <USchema name=\"type\" type=\"String\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-    <USchema name=\"email\" type=\"String\" virtual=\"0\"\n+    <USchema name=\"email\" type=\"String\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                 validatorClass=\"org.syncope.core.persistence.validation.attrvalue.EmailAddressValidator\"/>\n-    <USchema name=\"activationDate\" type=\"Date\" virtual=\"0\"\n+    <USchema name=\"activationDate\" type=\"Date\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                 conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>\n-    <USchema name=\"uselessReadonly\" type=\"String\" virtual=\"0\"\n+    <USchema name=\"uselessReadonly\" type=\"String\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"1\"/>\n-    <USchema name=\"cool\" type=\"Boolean\" virtual=\"0\"\n+    <USchema name=\"cool\" type=\"Boolean\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n \n-    <RSchema name=\"icon\" type=\"String\" virtual=\"0\"\n+    <RSchema name=\"icon\" type=\"String\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-    <RSchema name=\"show\" type=\"Boolean\" virtual=\"0\"\n+                \n+    <RSchema name=\"show\" type=\"Boolean\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n \n-    <MSchema name=\"subscriptionDate\" type=\"Date\" virtual=\"0\"\n+    <RSchema name=\"derived_sx\" type=\"String\"\n+                      mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+\n+    <RSchema name=\"derived_dx\" type=\"String\"\n+                      mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+\n+    <MSchema name=\"subscriptionDate\" type=\"Date\"\n                       mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                       conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>\n \n+    <MSchema name=\"derived_sx\" type=\"String\"\n+                      mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+\n+    <MSchema name=\"derived_dx\" type=\"String\"\n+                      mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+\n     <UAttr id=\"100\" owner_id=\"1\" schema_name=\"username\"/>\n+    <UAttrUniqueValue id=\"10\" attribute_id=\"100\" schema_name=\"username\" stringValue=\"chicchiricco\"/>\n     <UAttr id=\"200\" owner_id=\"1\" schema_name=\"loginDate\"/>\n+    <UAttrValue attribute_id=\"200\" id=\"20\" dateValue=\"2009-05-26\"/>\n+    <UAttrValue attribute_id=\"200\" id=\"21\" dateValue=\"2010-05-26 15:40:04\"/>\n+\n     <UAttr id=\"300\" owner_id=\"2\" schema_name=\"username\"/>\n+    <UAttrUniqueValue id=\"11\" attribute_id=\"300\" schema_name=\"username\" stringValue=\"fabio.martelli\"/>\n+\n     <UAttr id=\"400\" owner_id=\"3\" schema_name=\"firstname\"/>\n+    <UAttrValue attribute_id=\"400\" id=\"30\" stringValue=\"John\"/>\n     <UAttr id=\"500\" owner_id=\"3\" schema_name=\"surname\"/>\n+    <UAttrValue attribute_id=\"500\" id=\"31\" stringValue=\"Doe\"/>\n+    <UAttr id=\"540\" owner_id=\"3\" schema_name=\"username\"/>\n+    <UAttrUniqueValue id=\"12\" attribute_id=\"540\" schema_name=\"username\" stringValue=\"test1\"/>\n+\n     <UAttr id=\"550\" owner_id=\"4\" schema_name=\"loginDate\"/>\n+    <UAttrValue attribute_id=\"550\" id=\"22\" dateValue=\"2009-06-24\"/>\n     <UAttr id=\"560\" owner_id=\"4\" schema_name=\"cool\"/>\n-    <UAttr id=\"570\" owner_id=\"4\" schema_name=\"username\"/>\n-\n+    <UAttrValue attribute_id=\"560\" id=\"23\" booleanValue=\"1\"/>\n+    \n     <RAttr id=\"600\" owner_id=\"1\" schema_name=\"icon\"/>\n     <RAttr id=\"700\" owner_id=\"2\" schema_name=\"icon\"/>\n     <RAttr id=\"800\" owner_id=\"1\" schema_name=\"show\"/>\n     <RAttr id=\"900\" owner_id=\"6\" schema_name=\"icon\"/>\n     <RAttr id=\"950\" owner_id=\"4\" schema_name=\"icon\"/>\n \n-    <MAttr id=\"1000\" owner_id=\"4\" schema_name=\"subscriptionDate\"/>\n-\n-    <UAttrUniqueValue id=\"10\" attribute_id=\"100\" schema_name=\"username\" stringValue=\"chicchiricco\"/>\n-    <UAttrUniqueValue id=\"11\" attribute_id=\"300\" schema_name=\"username\" stringValue=\"fabio.martelli\"/>\n-    <UAttrUniqueValue id=\"12\" attribute_id=\"570\" schema_name=\"username\" stringValue=\"john.doe\"/>\n-\n-    <UAttrValue attribute_id=\"200\" id=\"20\" dateValue=\"2009-05-26\"/>\n-    <UAttrValue attribute_id=\"200\" id=\"21\" dateValue=\"2010-05-26 15:40:04\"/>\n-    <UAttrValue attribute_id=\"400\" id=\"30\" stringValue=\"John\"/>\n-    <UAttrValue attribute_id=\"500\" id=\"31\" stringValue=\"Doe\"/>\n-    <UAttrValue attribute_id=\"550\" id=\"22\" dateValue=\"2009-06-24\"/>\n-    <UAttrValue attribute_id=\"560\" id=\"23\" booleanValue=\"1\"/>\n-\n     <RAttrValue attribute_id=\"600\" id=\"40\" stringValue=\"niceIcon\"/>\n     <RAttrValue attribute_id=\"700\" id=\"41\" stringValue=\"badIcon\"/>\n     <RAttrValue attribute_id=\"800\" id=\"42\" booleanValue=\"1\"/>\n     <RAttrValue attribute_id=\"900\" id=\"43\" stringValue=\"icon6\"/>\n     <RAttrValue attribute_id=\"950\" id=\"44\" stringValue=\"icon4\"/>\n \n+    <RAttr id=\"1002\" owner_id=\"1\" schema_name=\"derived_sx\"/>\n+    <RAttrValue attribute_id=\"1002\" id=\"92\" stringValue=\"sx\"/>\n+\n+    <RAttr id=\"1003\" owner_id=\"1\" schema_name=\"derived_dx\"/>\n+    <RAttrValue attribute_id=\"1003\" id=\"93\" stringValue=\"dx\"/>\n+\n+    <RDerSchema name=\"deriveddata\" expression=\"derived_sx + '-' + derived_dx\"/>\n+    <RDerAttr id=\"1000\" derivedSchema_name=\"deriveddata\" owner_id=\"1\"/>\n+\n+\n+    <MAttr id=\"1000\" owner_id=\"4\" schema_name=\"subscriptionDate\"/>\n+\n     <MAttrValue attribute_id=\"1000\" id=\"90\" dateValue=\"2009-05-26\"/>\n     <MAttrValue attribute_id=\"1000\" id=\"91\" dateValue=\"2010-05-26 15:40:04\"/>\n \n+    <MAttr id=\"1002\" owner_id=\"1\" schema_name=\"derived_sx\"/>\n+    <MAttrValue attribute_id=\"1002\" id=\"92\" stringValue=\"sx\"/>\n+\n+    <MAttr id=\"1003\" owner_id=\"1\" schema_name=\"derived_dx\"/>\n+    <MAttrValue attribute_id=\"1003\" id=\"93\" stringValue=\"dx\"/>\n+\n+    <MDerSchema name=\"deriveddata\" expression=\"derived_sx + '-' + derived_dx\"/>\n+    <MDerAttr id=\"1000\" derivedSchema_name=\"deriveddata\" owner_id=\"1\"/>\n+\n+    <UVirSchema name=\"virtualdata\"/>\n+    <UVirAttr id=\"1000\" virtualSchema_name=\"virtualdata\" owner_id=\"3\"/>\n+\n     <UDerSchema name=\"cn\" expression=\"surname + ', ' + firstname\"/>\n-    \n     <UDerAttr id=\"1000\" derivedSchema_name=\"cn\" owner_id=\"3\"/>\n \n+    <MVirSchema name=\"mvirtualdata\"/>\n+    <RVirSchema name=\"rvirtualdata\"/>\n+\n     <ConnInstance id=\"100\" displayName=\"ConnInstance100\"\n                        bundleName=\"org.syncope.identityconnectors.bundles.staticws\"\n                        connectorName=\"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\"\n@@ -208,7 +246,7 @@\n                    sourceAttrName=\"email\" sourceMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n                    accountid=\"0\" password=\"0\"/>\n \n-    <SchemaMapping id=\"101\" destAttrName=\"username\"\n+    <SchemaMapping id=\"101\" destAttrName=\"userId\"\n                    resource_name=\"ws-target-resource-2\"\n                    sourceAttrName=\"username\" sourceMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n                    accountid=\"1\" password=\"0\"/>\n@@ -250,7 +288,7 @@\n \n     <SchemaMapping id=\"109\" destAttrName=\"surname\"\n                    resource_name=\"ws-target-resource-2\"\n-                   sourceAttrName=\"surname\" sourceMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                   sourceAttrName=\"surname\" sourceMappingType=\"UserSchema\" mandatoryCondition=\"type == 'F'\"\n                    accountid=\"0\" password=\"0\"/>\n \n     <SchemaMapping id=\"110\" destAttrName=\"email\"\n@@ -270,7 +308,7 @@\n \n     <SchemaMapping id=\"113\" destAttrName=\"name\"\n                    resource_name=\"ws-target-resource-2\"\n-                   sourceAttrName=\"firstname\" sourceMappingType=\"UserSchema\" mandatoryCondition=\"type == 'F'\"\n+                   sourceAttrName=\"virtualdata\" sourceMappingType=\"UserVirtualSchema\" mandatoryCondition=\"type == 'F'\"\n                    accountid=\"0\" password=\"0\"/>\n \n     <SchemaMapping id=\"114\" destAttrName=\"fullname\""},{"sha":"a5f3f0f4cb485ea30a4346f1720e1397d6b845e0","filename":"identityconnectors/bundles/staticws/ws-target-resource/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/wstarget/ProvisioningImpl.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/455805edffd32a916d863c2229f0f026330dba92/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2FProvisioningImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/455805edffd32a916d863c2229f0f026330dba92/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2FProvisioningImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2FProvisioningImpl.java?ref=455805edffd32a916d863c2229f0f026330dba92","patch":"@@ -204,9 +204,11 @@ public List<WSUser> query(Operand query) {\n             String queryString =\n                     \"SELECT * FROM user WHERE \" + query.toString();\n \n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Execute query: \" + queryString);\n-            }\n+            queryString = queryString.replaceAll(\"__NAME__\", \"userId\").\n+                    replaceAll(\"__UID__\", \"userId\").\n+                    replaceAll(\"__PASSWORD__\", \"password\");\n+\n+            LOG.debug(\"Execute query: {}\", queryString);\n \n             if (queryString == null || queryString.length() == 0) {\n                 throw new SQLException(\"Invalid query [\" + queryString + \"]\");\n@@ -219,7 +221,7 @@ public List<WSUser> query(Operand query) {\n \n             ResultSetMetaData metaData = rs.getMetaData();\n \n-            LOG.debug(\"Metadata: \" + metaData.toString());\n+            LOG.debug(\"Metadata: {}\", metaData.toString());\n \n             WSUser user = null;\n             WSAttributeValue attr = null;\n@@ -246,7 +248,7 @@ public List<WSUser> query(Operand query) {\n                 results.add(user);\n             }\n \n-            LOG.debug(\"Retrieved users: \" + results);\n+            LOG.debug(\"Retrieved users: {}\", results);\n         } catch (SQLException e) {\n             LOG.error(\"Search operation failed\", e);\n         } finally {"}]}