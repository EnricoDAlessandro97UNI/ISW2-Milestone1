{"sha":"21ea877bd398689c81e74a7b760ea1095d13e084","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjIxZWE4NzdiZDM5ODY4OWM4MWU3NGE3Yjc2MGVhMTA5NWQxM2UwODQ=","commit":{"author":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2017-07-04T10:09:45Z"},"committer":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2017-07-13T12:22:32Z"},"message":"[SYNCOPE-1144] configurable audit appenders with message rewrite option. This closes #52.","tree":{"sha":"47ff1363af7f97f4e2b69e1b2189c3933989d604","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/47ff1363af7f97f4e2b69e1b2189c3933989d604"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/21ea877bd398689c81e74a7b760ea1095d13e084","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/21ea877bd398689c81e74a7b760ea1095d13e084","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/21ea877bd398689c81e74a7b760ea1095d13e084","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/21ea877bd398689c81e74a7b760ea1095d13e084/comments","author":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"committer":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"bb5bf2961e75f4c3bf1ee08da32f6f0d17dca0d0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bb5bf2961e75f4c3bf1ee08da32f6f0d17dca0d0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bb5bf2961e75f4c3bf1ee08da32f6f0d17dca0d0"}],"stats":{"total":922,"additions":910,"deletions":12},"files":[{"sha":"5383a812ab43c1f20dea1b60fa6ea2659ed5a547","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAuditAppender.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAuditAppender.java?ref=21ea877bd398689c81e74a7b760ea1095d13e084","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import org.apache.logging.log4j.core.Appender;\n+import org.apache.logging.log4j.core.appender.rewrite.RewriteAppender;\n+import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;\n+\n+public abstract class AbstractAuditAppender implements AuditAppender {\n+\n+    protected String domainName;\n+\n+    protected Appender targetAppender;\n+\n+    protected RewriteAppender rewriteAppender;\n+\n+    @Override\n+    public abstract void init();\n+\n+    public abstract void initTargetAppender();\n+\n+    public abstract void initRewriteAppender();\n+\n+    @Override\n+    public abstract RewritePolicy getRewritePolicy();\n+\n+    @Override\n+    public String getDomainName() {\n+        return domainName;\n+    }\n+\n+    @Override\n+    public void setDomainName(final String domainName) {\n+        this.domainName = domainName;\n+    }\n+\n+    @Override\n+    public abstract String getTargetAppenderName();\n+\n+    @Override\n+    public boolean isRewriteEnabled() {\n+        return rewriteAppender != null;\n+    }\n+\n+    @Override\n+    public RewriteAppender getRewriteAppender() {\n+        return rewriteAppender;\n+    }\n+\n+    @Override\n+    public Appender getTargetAppender() {\n+        return targetAppender;\n+    }\n+\n+}"},{"sha":"93dbfedd7968d4b68dc55b278836f51a7ce428fb","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AuditAppender.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditAppender.java?ref=21ea877bd398689c81e74a7b760ea1095d13e084","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.util.Set;\n+import org.apache.logging.log4j.core.Appender;\n+import org.apache.logging.log4j.core.appender.rewrite.RewriteAppender;\n+import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+\n+/**\n+ * Basic interface to implement to define a custom audit appender\n+ *\n+ * @see org.apache.syncope.core.logic.DefaultRewriteAuditAppender or org.apache.syncope.core.logic.DefaultAuditAppender\n+ */\n+public interface AuditAppender {\n+\n+    void init();\n+\n+    Set<AuditLoggerName> getEvents();\n+\n+    Appender getTargetAppender();\n+\n+    RewritePolicy getRewritePolicy();\n+\n+    String getTargetAppenderName();\n+    \n+    void setDomainName(String name);\n+\n+    String getDomainName();\n+\n+    boolean isRewriteEnabled();\n+\n+    RewriteAppender getRewriteAppender();\n+}"},{"sha":"1fd9e5e846e61affa6f44f97cd36debc6458b48b","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/DefaultAuditAppender.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDefaultAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDefaultAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDefaultAuditAppender.java?ref=21ea877bd398689c81e74a7b760ea1095d13e084","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+\n+/**\n+ * Default (abstract) implementation of custom audit appender.\n+ * It is bound to an empty collection of events, i.e. it does not create any logger.\n+ * This class has to be extended by non-rewrite appenders\n+ *\n+ * @see org.apache.syncope.fit.core.reference.TestFileAuditAppender\n+ */\n+public abstract class DefaultAuditAppender extends AbstractAuditAppender {\n+\n+    @Override\n+    public void init() {\n+        initTargetAppender();\n+    }\n+\n+    @Override\n+    public Set<AuditLoggerName> getEvents() {\n+        return Collections.emptySet();\n+    }\n+\n+    @Override\n+    public void initRewriteAppender() {\n+    }\n+\n+    @Override\n+    public RewritePolicy getRewritePolicy() {\n+        return null;\n+    }\n+\n+}"},{"sha":"207502edc828a80bf08b7f1661fce9507b8226d4","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/DefaultRewriteAuditAppender.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDefaultRewriteAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDefaultRewriteAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDefaultRewriteAuditAppender.java?ref=21ea877bd398689c81e74a7b760ea1095d13e084","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.appender.rewrite.RewriteAppender;\n+import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;\n+import org.apache.logging.log4j.core.config.AppenderRef;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+\n+/**\n+ * Default (abstract) implementation of custom rewriting audit appender; it provides rewrite appender definition and \n+ * a default \"pass-through\" policy. It is bound to an empty collection of events, i.e. it does not create any logger.\n+ * This class has to be extended by rewrite appenders.\n+ *\n+ * @see org.apache.syncope.fit.core.reference.TestFileRewriteAuditAppender\n+ */\n+public abstract class DefaultRewriteAuditAppender extends AbstractAuditAppender {\n+\n+    @Override\n+    public void init() {\n+        initTargetAppender();\n+        initRewriteAppender();\n+    }\n+\n+    @Override\n+    public void initRewriteAppender() {\n+        rewriteAppender = RewriteAppender.createAppender(getTargetAppenderName() + \"_rewrite\",\n+                \"true\",\n+                new AppenderRef[] { AppenderRef.createAppenderRef(getTargetAppenderName(), Level.DEBUG, null) },\n+                ((LoggerContext) LogManager.getContext(false)).getConfiguration(), getRewritePolicy(), null);\n+    }\n+\n+    @Override\n+    public Set<AuditLoggerName> getEvents() {\n+        return Collections.emptySet();\n+    }\n+\n+    @Override\n+    public RewritePolicy getRewritePolicy() {\n+        return PassThroughRewritePolicy.createPolicy();\n+    }\n+\n+}"},{"sha":"667efc8f96f3b57869921b77608ce7f54906fd97","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":44,"deletions":2,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=21ea877bd398689c81e74a7b760ea1095d13e084","patch":"@@ -25,7 +25,9 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.IteratorUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.PredicateUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.collections4.TransformerUtils;\n@@ -60,9 +62,11 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Logger;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n+import org.apache.syncope.core.provisioning.java.AuditManagerImpl;\n import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate;\n import org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n@@ -216,10 +220,41 @@ private LoggerTO setLevel(final String name, final Level level, final LoggerType\n         syncopeLogger.setLevel(LoggerLevel.fromLevel(level));\n         syncopeLogger = loggerDAO.save(syncopeLogger);\n \n+        boolean isAudit = LoggerType.AUDIT.equals(syncopeLogger.getType());\n         LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n+        String domainAuditLoggerName =\n+                AuditManagerImpl.getDomainAuditEventLoggerName(AuthContextUtils.getDomain(), syncopeLogger.\n+                        getKey());\n         LoggerConfig logConf = SyncopeConstants.ROOT_LOGGER.equals(name)\n                 ? ctx.getConfiguration().getLoggerConfig(LogManager.ROOT_LOGGER_NAME)\n-                : ctx.getConfiguration().getLoggerConfig(name);\n+                : isAudit\n+                        ? ctx.getConfiguration().getLoggerConfig(domainAuditLoggerName)\n+                        : ctx.getConfiguration().getLoggerConfig(name);\n+\n+        if (isAudit) {\n+            // SYNCOPE-1144 For each custom audit appender class add related appenders to log4j logger\n+            List<AuditAppender> auditAppenders = loggerLoader.auditAppenders(AuthContextUtils.getDomain());\n+            boolean isRootLogConf = LogManager.ROOT_LOGGER_NAME.equals(logConf.getName());\n+            final String loggerKey = syncopeLogger.getKey();\n+            if (isRootLogConf) {\n+                logConf = new LoggerConfig(domainAuditLoggerName, null, false);\n+            }\n+            for (AuditAppender auditAppender : auditAppenders) {\n+\n+                if (IterableUtils.matchesAny(auditAppender.getEvents(), new Predicate<AuditLoggerName>() {\n+\n+                    @Override\n+                    public boolean evaluate(final AuditLoggerName auditLoggerName) {\n+                        return loggerKey.equalsIgnoreCase(auditLoggerName.toLoggerName());\n+                    }\n+                })) {\n+                    loggerLoader.addAppenderToContext(ctx, auditAppender, logConf);\n+                }\n+            }\n+            if (isRootLogConf) {\n+                ctx.getConfiguration().addLogger(domainAuditLoggerName, logConf);\n+            }\n+        }\n         logConf.setLevel(level);\n         ctx.updateLoggers();\n \n@@ -254,6 +289,7 @@ private LoggerTO delete(final String name, final LoggerType expectedType) {\n         if (expectedType != syncopeLogger.getType()) {\n             throwInvalidLogger(expectedType);\n         }\n+        boolean isAudit = LoggerType.AUDIT.equals(syncopeLogger.getType());\n \n         LoggerTO loggerToDelete = new LoggerTO();\n         BeanUtils.copyProperties(syncopeLogger, loggerToDelete);\n@@ -263,8 +299,14 @@ private LoggerTO delete(final String name, final LoggerType expectedType) {\n \n         // set log level to OFF in order to disable configured logger until next reboot\n         LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n+        String domainAuditLoggerName =\n+                AuditManagerImpl.getDomainAuditEventLoggerName(AuthContextUtils.getDomain(), syncopeLogger.\n+                        getKey());\n         org.apache.logging.log4j.core.Logger logger = SyncopeConstants.ROOT_LOGGER.equals(name)\n-                ? ctx.getLogger(LogManager.ROOT_LOGGER_NAME) : ctx.getLogger(name);\n+                ? ctx.getLogger(LogManager.ROOT_LOGGER_NAME)\n+                : isAudit\n+                        ? ctx.getLogger(domainAuditLoggerName)\n+                        : ctx.getLogger(name);\n         logger.setLevel(Level.OFF);\n         ctx.updateLoggers();\n "},{"sha":"08c6c4ec899ca2bf178eb6188d72bfb6d44bf4fb","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/PassThroughRewritePolicy.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPassThroughRewritePolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPassThroughRewritePolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPassThroughRewritePolicy.java?ref=21ea877bd398689c81e74a7b760ea1095d13e084","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import org.apache.logging.log4j.core.Core;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n+\n+@Plugin(name = \"PassThroughRewritePolicy\", category = Core.CATEGORY_NAME, elementType = \"rewritePolicy\",\n+        printObject = true)\n+public class PassThroughRewritePolicy implements RewritePolicy {\n+\n+    @Override\n+    public LogEvent rewrite(final LogEvent event) {\n+        return event;\n+    }\n+\n+    @PluginFactory\n+    public static PassThroughRewritePolicy createPolicy() {\n+        return new PassThroughRewritePolicy();\n+    }\n+\n+}"},{"sha":"902fa4d4880c282e7be60bbca1dfc790c47acbe2","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=21ea877bd398689c81e74a7b760ea1095d13e084","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.core.logic.AuditAppender;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n@@ -77,6 +78,8 @@ public class ClassPathScanImplementationLookup implements ImplementationLookup {\n \n     private Map<Class<? extends PasswordRuleConf>, Class<? extends PasswordRule>> passwordRuleClasses;\n \n+    private Set<Class<?>> auditAppenderClasses;\n+    \n     @Override\n     public Integer getPriority() {\n         return 400;\n@@ -103,6 +106,7 @@ public void load() {\n         reportletClasses = new HashMap<>();\n         accountRuleClasses = new HashMap<>();\n         passwordRuleClasses = new HashMap<>();\n+        auditAppenderClasses = new HashSet<>();\n \n         ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n         scanner.addIncludeFilter(new AssignableTypeFilter(JWTSSOProvider.class));\n@@ -119,6 +123,7 @@ public void load() {\n         scanner.addIncludeFilter(new AssignableTypeFilter(PullCorrelationRule.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(Validator.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(NotificationRecipientsProvider.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(AuditAppender.class));\n \n         for (BeanDefinition bd : scanner.findCandidateComponents(getBasePackage())) {\n             try {\n@@ -207,6 +212,11 @@ public void load() {\n                 if (NotificationRecipientsProvider.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n                     classNames.get(Type.NOTIFICATION_RECIPIENTS_PROVIDER).add(bd.getBeanClassName());\n                 }\n+\n+                if (AuditAppender.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n+                    classNames.get(Type.AUDIT_APPENDER).add(clazz.getName());\n+                    auditAppenderClasses.add(clazz);\n+                }\n             } catch (Throwable t) {\n                 LOG.warn(\"Could not inspect class {}\", bd.getBeanClassName(), t);\n             }\n@@ -249,4 +259,9 @@ public Class<? extends PasswordRule> getPasswordRuleClass(\n \n         return passwordRuleClasses.get(passwordRuleConfClass);\n     }\n+\n+    @Override\n+    public Set<Class<?>> getAuditAppenderClasses() {\n+        return auditAppenderClasses;\n+    }\n }"},{"sha":"675fd94bb70d0de3edfd12661c5c028ec9794123","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerAccessor.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerAccessor.java?ref=21ea877bd398689c81e74a7b760ea1095d13e084","patch":"@@ -30,6 +30,7 @@\n import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Logger;\n+import org.apache.syncope.core.provisioning.java.AuditManagerImpl;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n@@ -57,7 +58,8 @@ public void synchronizeLog4J(final LoggerContext ctx) {\n             }\n         }\n         for (Logger syncopeLogger : loggerDAO.findAll(LoggerType.AUDIT)) {\n-            syncopeLoggers.put(syncopeLogger.getKey(), syncopeLogger);\n+            syncopeLoggers.put(AuditManagerImpl.getDomainAuditEventLoggerName(AuthContextUtils.getDomain(),\n+                    syncopeLogger.getKey()), syncopeLogger);\n         }\n \n         /*\n@@ -71,7 +73,8 @@ public void synchronizeLog4J(final LoggerContext ctx) {\n                 if (syncopeLoggers.containsKey(loggerName)) {\n                     logConf.setLevel(syncopeLoggers.get(loggerName).getLevel().getLevel());\n                     syncopeLoggers.remove(loggerName);\n-                } else if (!loggerName.equals(LoggerType.AUDIT.getPrefix())) {\n+                } else if (!loggerName.startsWith(LoggerType.AUDIT.getPrefix()) || !loggerName.startsWith(\n+                        AuthContextUtils.getDomain() + \".\" + LoggerType.AUDIT.getPrefix())) {\n                     Logger syncopeLogger = entityFactory.newEntity(Logger.class);\n                     syncopeLogger.setKey(loggerName);\n                     syncopeLogger.setLevel(LoggerLevel.fromLevel(logConf.getLevel()));\n@@ -84,8 +87,9 @@ public void synchronizeLog4J(final LoggerContext ctx) {\n         /*\n          * Foreach SyncopeLogger not found in log4j create a new log4j logger with given name and level.\n          */\n-        for (Logger syncopeLogger : syncopeLoggers.values()) {\n-            LoggerConfig logConf = ctx.getConfiguration().getLoggerConfig(syncopeLogger.getKey());\n+        for (Map.Entry<String, Logger> entry : syncopeLoggers.entrySet()) {\n+            Logger syncopeLogger = entry.getValue();\n+            LoggerConfig logConf = ctx.getConfiguration().getLoggerConfig(entry.getKey());\n             logConf.setLevel(syncopeLogger.getLevel().getLevel());\n         }\n "},{"sha":"4a24d327cf377484e232ee161599267ba2a1db2d","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java","status":"modified","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java?ref=21ea877bd398689c81e74a7b760ea1095d13e084","patch":"@@ -20,7 +20,9 @@\n \n import java.sql.Connection;\n import java.sql.SQLException;\n+import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import javax.sql.DataSource;\n import org.apache.logging.log4j.Level;\n@@ -31,13 +33,20 @@\n import org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig;\n import org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource;\n import org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender;\n+import org.apache.logging.log4j.core.appender.rewrite.RewriteAppender;\n import org.apache.logging.log4j.core.config.LoggerConfig;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+import org.apache.syncope.core.logic.AuditAppender;\n import org.apache.syncope.core.logic.MemoryAppender;\n import org.apache.syncope.core.provisioning.java.AuditManagerImpl;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.persistence.api.DomainsHolder;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.SyncopeLoader;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.jdbc.datasource.DataSourceUtils;\n import org.springframework.stereotype.Component;\n \n@@ -50,6 +59,9 @@ public class LoggerLoader implements SyncopeLoader {\n     @Autowired\n     private LoggerAccessor loggerAccessor;\n \n+    @Autowired\n+    private ImplementationLookup implementationLookup;\n+\n     private final Map<String, MemoryAppender> memoryAppenders = new HashMap<>();\n \n     @Override\n@@ -81,6 +93,7 @@ public void load() {\n             setConfiguration(ctx.getConfiguration()).setName(\"THROWABLE\").setPattern(\"%ex{full}\").build()\n         };\n         ColumnMapping[] columnMappings = new ColumnMapping[0];\n+\n         for (Map.Entry<String, DataSource> entry : domainsHolder.getDomains().entrySet()) {\n             Appender appender = ctx.getConfiguration().getAppender(\"audit_for_\" + entry.getKey());\n             if (appender == null) {\n@@ -103,6 +116,9 @@ public void load() {\n             logConf.setLevel(Level.DEBUG);\n             ctx.getConfiguration().addLogger(AuditManagerImpl.getDomainAuditLoggerName(entry.getKey()), logConf);\n \n+            // SYNCOPE-1144 For each custom audit appender class add related appenders to log4j logger\n+            configureCustomAppenders(entry.getKey(), ctx);\n+\n             AuthContextUtils.execWithAuthContext(entry.getKey(), new AuthContextUtils.Executable<Void>() {\n \n                 @Override\n@@ -120,6 +136,69 @@ public Map<String, MemoryAppender> getMemoryAppenders() {\n         return memoryAppenders;\n     }\n \n+    public void configureCustomAppenders(final String domainName, final LoggerContext ctx) {\n+        List<AuditAppender> auditAppenders = auditAppenders(domainName);\n+        for (AuditAppender auditAppender : auditAppenders) {\n+            for (AuditLoggerName event : auditAppender.getEvents()) {\n+                String domainAuditLoggerName =\n+                        AuditManagerImpl.getDomainAuditEventLoggerName(domainName, event.toLoggerName());\n+                LoggerConfig eventLogConf = ctx.getConfiguration().getLoggerConfig(domainAuditLoggerName);\n+                boolean isRootLogConf = LogManager.ROOT_LOGGER_NAME.equals(eventLogConf.getName());\n+\n+                if (isRootLogConf) {\n+                    eventLogConf = new LoggerConfig(domainAuditLoggerName, null, false);\n+                }\n+                addAppenderToContext(ctx, auditAppender, eventLogConf);\n+                eventLogConf.setLevel(Level.DEBUG);\n+                if (isRootLogConf) {\n+                    ctx.getConfiguration().addLogger(domainAuditLoggerName, eventLogConf);\n+                }\n+            }\n+        }\n+    }\n+\n+    public List<AuditAppender> auditAppenders(final String domainName) throws BeansException {\n+        List<AuditAppender> auditAppenders = new ArrayList<>();\n+        for (Class<?> clazz : implementationLookup.getAuditAppenderClasses()) {\n+            AuditAppender auditAppender;\n+            if (ApplicationContextProvider.getBeanFactory().containsSingleton(clazz.getName())) {\n+                auditAppender = (AuditAppender) ApplicationContextProvider.getBeanFactory().\n+                        getSingleton(clazz.getName());\n+            } else {\n+                auditAppender = (AuditAppender) ApplicationContextProvider.getBeanFactory().\n+                        createBean(clazz, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n+                auditAppender.setDomainName(domainName);\n+                auditAppender.init();\n+            }\n+            auditAppenders.add(auditAppender);\n+        }\n+        return auditAppenders;\n+    }\n+\n+    public void addAppenderToContext(\n+            final LoggerContext ctx,\n+            final AuditAppender auditAppender,\n+            final LoggerConfig eventLogConf) {\n+        Appender targetAppender = ctx.getConfiguration().getAppender(auditAppender.getTargetAppenderName());\n+        if (targetAppender == null) {\n+            targetAppender = auditAppender.getTargetAppender();\n+        }\n+        targetAppender.start();\n+        ctx.getConfiguration().addAppender(targetAppender);\n+        if (auditAppender.isRewriteEnabled()) {\n+            RewriteAppender rewriteAppender = ctx.getConfiguration().getAppender(auditAppender.\n+                    getTargetAppenderName() + \"_rewrite\");\n+            if (rewriteAppender == null) {\n+                rewriteAppender = auditAppender.getRewriteAppender();\n+            }\n+            rewriteAppender.start();\n+            ctx.getConfiguration().addAppender(rewriteAppender);\n+            eventLogConf.addAppender(rewriteAppender, Level.DEBUG, null);\n+        } else {\n+            eventLogConf.addAppender(targetAppender, Level.DEBUG, null);\n+        }\n+    }\n+\n     private static class DataSourceConnectionSource implements ConnectionSource {\n \n         private final DataSource dataSource;"},{"sha":"c5106772f0ccceb42804782637fedc5bd5ab19b1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/ImplementationLookup.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java?ref=21ea877bd398689c81e74a7b760ea1095d13e084","patch":"@@ -43,7 +43,8 @@ enum Type {\n         PUSH_ACTIONS,\n         PULL_CORRELATION_RULE,\n         VALIDATOR,\n-        NOTIFICATION_RECIPIENTS_PROVIDER;\n+        NOTIFICATION_RECIPIENTS_PROVIDER,\n+        AUDIT_APPENDER;\n \n     }\n \n@@ -56,4 +57,6 @@ enum Type {\n     Class<? extends AccountRule> getAccountRuleClass(Class<? extends AccountRuleConf> accountRuleConfClass);\n \n     Class<? extends PasswordRule> getPasswordRuleClass(Class<? extends PasswordRuleConf> passwordRuleConfClass);\n+\n+    Set<Class<?>> getAuditAppenderClasses();\n }"},{"sha":"1875fb1608d7d6421bfd16b436f53c56d5714703","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/DummyImplementationLookup.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java?ref=21ea877bd398689c81e74a7b760ea1095d13e084","patch":"@@ -75,4 +75,9 @@ public Class<? extends PasswordRule> getPasswordRuleClass(\n         return DefaultPasswordRule.class;\n     }\n \n+    @Override\n+    public Set<Class<?>> getAuditAppenderClasses() {\n+        return Collections.emptySet();\n+    }\n+\n }"},{"sha":"760a9fa1079aa0c3469be65b0e19e90b4910e0a9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AuditManagerImpl.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAuditManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAuditManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAuditManagerImpl.java?ref=21ea877bd398689c81e74a7b760ea1095d13e084","patch":"@@ -45,6 +45,10 @@ public static String getDomainAuditLoggerName(final String domain) {\n         return LoggerType.AUDIT.getPrefix() + \".\" + domain;\n     }\n \n+    public static String getDomainAuditEventLoggerName(final String domain, final String loggerName) {\n+        return domain + \".\" + loggerName;\n+    }\n+\n     @Override\n     public boolean auditRequested(\n             final AuditElements.EventCategoryType type,\n@@ -118,10 +122,15 @@ public void audit(\n                 loggerDAO.find(auditEntry.getLogger().toLoggerName());\n         if (syncopeLogger != null && syncopeLogger.getLevel() == LoggerLevel.DEBUG) {\n             Logger logger = LoggerFactory.getLogger(getDomainAuditLoggerName(AuthContextUtils.getDomain()));\n+            Logger eventLogger = LoggerFactory.getLogger(getDomainAuditEventLoggerName(AuthContextUtils.getDomain(),\n+                    syncopeLogger.getKey()));\n+            String serializedAuditEntry = POJOHelper.serialize(auditEntry);\n             if (throwable == null) {\n-                logger.debug(POJOHelper.serialize(auditEntry));\n+                logger.debug(serializedAuditEntry);\n+                eventLogger.debug(POJOHelper.serialize(auditEntry));\n             } else {\n-                logger.debug(POJOHelper.serialize(auditEntry), throwable);\n+                logger.debug(serializedAuditEntry, throwable);\n+                eventLogger.debug(serializedAuditEntry, throwable);\n             }\n         }\n     }"},{"sha":"a14ba2fd14089d300e23bc1236f7789fc6f6621b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=21ea877bd398689c81e74a7b760ea1095d13e084","patch":"@@ -508,7 +508,7 @@ protected TaskExec execute(final PropagationTask task, final PropagationReporter\n         for (PropagationActions action : actions) {\n             action.after(task, execution, afterObj);\n         }\n-\n+        // SYNCOPE-1136\n         String anyTypeKind = task.getAnyTypeKind() == null ? \"realm\" : task.getAnyTypeKind().name().toLowerCase();\n         String operation = task.getOperation().name().toLowerCase();\n         boolean notificationsAvailable = notificationManager.notificationsAvailable("},{"sha":"cac936d48e13240a30e24d6f8c2da138d47a1a81","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/DummyImplementationLookup.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21ea877bd398689c81e74a7b760ea1095d13e084/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java?ref=21ea877bd398689c81e74a7b760ea1095d13e084","patch":"@@ -75,4 +75,9 @@ public Class<? extends PasswordRule> getPasswordRuleClass(\n         return DefaultPasswordRule.class;\n     }\n \n+    @Override\n+    public Set<Class<?>> getAuditAppenderClasses() {\n+        return Collections.emptySet();\n+    }\n+\n }"},{"sha":"81f94b9811eda98c64da720f5f5062b87d3c1e90","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21ea877bd398689c81e74a7b760ea1095d13e084/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21ea877bd398689c81e74a7b760ea1095d13e084/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=21ea877bd398689c81e74a7b760ea1095d13e084","patch":"@@ -146,6 +146,11 @@ public class ITImplementationLookup implements ImplementationLookup {\n             classNames = new HashSet<>();\n             classNames.add(TestNotificationRecipientsProvider.class.getName());\n             put(Type.NOTIFICATION_RECIPIENTS_PROVIDER, classNames);\n+\n+            classNames = new HashSet<>();\n+            classNames.add(TestFileRewriteAuditAppender.class.getName());\n+            classNames.add(TestFileAuditAppender.class.getName());\n+            put(Type.AUDIT_APPENDER, classNames);\n         }\n     };\n \n@@ -256,4 +261,12 @@ public Class<? extends PasswordRule> getPasswordRuleClass(\n \n         return PASSWORD_RULE_CLASSES.get(passwordRuleConfClass);\n     }\n+\n+    @Override\n+    public Set<Class<?>> getAuditAppenderClasses() {\n+        Set<Class<?>> classes = new HashSet<>();\n+        classes.add(TestFileRewriteAuditAppender.class);\n+        classes.add(TestFileAuditAppender.class);\n+        return classes;\n+    }\n }"},{"sha":"9a192dfcb440d20a95316f4e998eb66e2de5b346","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/SyslogRewriteAuditAppender.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21ea877bd398689c81e74a7b760ea1095d13e084/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyslogRewriteAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21ea877bd398689c81e74a7b760ea1095d13e084/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyslogRewriteAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyslogRewriteAuditAppender.java?ref=21ea877bd398689c81e74a7b760ea1095d13e084","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.logging.log4j.core.appender.SyslogAppender;\n+import org.apache.logging.log4j.core.layout.PatternLayout;\n+import org.apache.logging.log4j.core.net.Facility;\n+import org.apache.logging.log4j.core.net.Protocol;\n+import org.apache.syncope.common.lib.types.AuditElements;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+import org.apache.syncope.core.logic.ConnectorLogic;\n+import org.apache.syncope.core.logic.DefaultRewriteAuditAppender;\n+import org.apache.syncope.core.logic.ResourceLogic;\n+\n+public class SyslogRewriteAuditAppender extends DefaultRewriteAuditAppender {\n+\n+    @Override\n+    public Set<AuditLoggerName> getEvents() {\n+        Set<AuditLoggerName> events = new HashSet<>();\n+        events.add(\n+                new AuditLoggerName(\n+                        AuditElements.EventCategoryType.LOGIC,\n+                        ResourceLogic.class.getSimpleName(),\n+                        null,\n+                        \"update\",\n+                        AuditElements.Result.SUCCESS));\n+        events.add(\n+                new AuditLoggerName(\n+                        AuditElements.EventCategoryType.LOGIC,\n+                        ConnectorLogic.class.getSimpleName(),\n+                        null,\n+                        \"update\",\n+                        AuditElements.Result.SUCCESS));\n+        events.add(\n+                new AuditLoggerName(\n+                        AuditElements.EventCategoryType.LOGIC,\n+                        ResourceLogic.class.getSimpleName(),\n+                        null,\n+                        \"delete\",\n+                        AuditElements.Result.SUCCESS));\n+        return events;\n+    }\n+\n+    @Override\n+    public void initTargetAppender() {\n+        targetAppender = SyslogAppender.newSyslogAppenderBuilder()\n+                .withName(getTargetAppenderName())\n+                .withHost(\"localhost\")\n+                .withPort(514)\n+                .withProtocol(Protocol.UDP)\n+                .withLayout(\n+                        PatternLayout.newBuilder().withPattern(\"%d{ISO8601} %-5level %logger - %msg%n\").build())\n+                .setFacility(Facility.LOCAL1)\n+                .build();\n+    }\n+\n+    @Override\n+    public String getTargetAppenderName() {\n+        return \"audit_for_\" + domainName + \"_syslog\";\n+    }\n+\n+}"},{"sha":"cffc8f7e9bda1a00490de248fbd64c04a47ce3e2","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestFileAuditAppender.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21ea877bd398689c81e74a7b760ea1095d13e084/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21ea877bd398689c81e74a7b760ea1095d13e084/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileAuditAppender.java?ref=21ea877bd398689c81e74a7b760ea1095d13e084","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import java.io.File;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.appender.FileAppender;\n+import org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender;\n+import org.apache.logging.log4j.core.layout.PatternLayout;\n+import org.apache.syncope.common.lib.types.AuditElements;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+import org.apache.syncope.core.logic.ConnectorLogic;\n+import org.apache.syncope.core.logic.DefaultAuditAppender;\n+import org.apache.syncope.core.logic.ResourceLogic;\n+\n+public class TestFileAuditAppender extends DefaultAuditAppender {\n+\n+    @Override\n+    public Set<AuditLoggerName> getEvents() {\n+        Set<AuditLoggerName> events = new HashSet<>();\n+        events.add(\n+                new AuditLoggerName(\n+                        AuditElements.EventCategoryType.LOGIC,\n+                        ResourceLogic.class.getSimpleName(),\n+                        null,\n+                        \"create\",\n+                        AuditElements.Result.SUCCESS));\n+        events.add(\n+                new AuditLoggerName(\n+                        AuditElements.EventCategoryType.LOGIC,\n+                        ConnectorLogic.class.getSimpleName(),\n+                        null,\n+                        \"update\",\n+                        AuditElements.Result.SUCCESS));\n+        return events;\n+    }\n+\n+    @Override\n+    public void initTargetAppender() {\n+        LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n+        // get log file path from existing file appender\n+        RollingRandomAccessFileAppender mainFile =\n+                (RollingRandomAccessFileAppender) ctx.getConfiguration().getAppender(\"mainFile\");\n+\n+        String pathPrefix = mainFile == null\n+                ? System.getProperty(\"user.dir\") + StringUtils.replace(\"/target/log\", \"/\", File.separator)\n+                + File.separator\n+                : StringUtils.replace(mainFile.getFileName(), \"core.log\", StringUtils.EMPTY);\n+\n+        targetAppender = FileAppender.newBuilder()\n+                .withName(getTargetAppenderName())\n+                .withAppend(true)\n+                .withFileName(pathPrefix + getTargetAppenderName() + \".log\")\n+                .withLayout(\n+                        PatternLayout.newBuilder()\n+                                .withPattern(\"%d{HH:mm:ss.SSS} %-5level %logger - %msg%n\")\n+                                .build()).\n+                build();\n+    }\n+\n+    @Override\n+    public String getTargetAppenderName() {\n+        return \"audit_for_\" + domainName + \"_norewrite_file\";\n+    }\n+\n+}"},{"sha":"932ce5600581b62c2e92d42b31178d382ee26c2c","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestFileRewriteAuditAppender.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21ea877bd398689c81e74a7b760ea1095d13e084/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileRewriteAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21ea877bd398689c81e74a7b760ea1095d13e084/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileRewriteAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileRewriteAuditAppender.java?ref=21ea877bd398689c81e74a7b760ea1095d13e084","patch":"@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import java.io.File;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.appender.FileAppender;\n+import org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender;\n+import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;\n+import org.apache.logging.log4j.core.layout.PatternLayout;\n+import org.apache.syncope.common.lib.types.AuditElements;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+import org.apache.syncope.core.logic.DefaultRewriteAuditAppender;\n+import org.apache.syncope.core.logic.ResourceLogic;\n+\n+public class TestFileRewriteAuditAppender extends DefaultRewriteAuditAppender {\n+\n+    @Override\n+    public Set<AuditLoggerName> getEvents() {\n+        Set<AuditLoggerName> events = new HashSet<>();\n+        events.add(\n+                new AuditLoggerName(\n+                        AuditElements.EventCategoryType.LOGIC,\n+                        ResourceLogic.class.getSimpleName(),\n+                        null,\n+                        \"update\",\n+                        AuditElements.Result.SUCCESS));\n+        return events;\n+    }\n+\n+    @Override\n+    public void initTargetAppender() {\n+        LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n+        // get log file path from existing file appender\n+        RollingRandomAccessFileAppender mainFile =\n+                (RollingRandomAccessFileAppender) ctx.getConfiguration().getAppender(\"mainFile\");\n+\n+        String pathPrefix = mainFile == null\n+                ? System.getProperty(\"user.dir\") + StringUtils.replace(\"/target/log\", \"/\", File.separator)\n+                + File.separator\n+                : StringUtils.replace(mainFile.getFileName(), \"core.log\", StringUtils.EMPTY);\n+\n+        targetAppender = FileAppender.newBuilder()\n+                .withName(getTargetAppenderName())\n+                .withAppend(true)\n+                .withFileName(pathPrefix + getTargetAppenderName() + \".log\")\n+                .withLayout(\n+                        PatternLayout.newBuilder()\n+                                .withPattern(\"%d{HH:mm:ss.SSS} %-5level %logger - %msg%n\")\n+                                .build())\n+                .build();\n+    }\n+\n+    @Override\n+    public String getTargetAppenderName() {\n+        return \"audit_for_\" + domainName + \"_file\";\n+    }\n+\n+    @Override\n+    public RewritePolicy getRewritePolicy() {\n+        return TestRewritePolicy.createPolicy();\n+    }\n+\n+}"},{"sha":"641f203db90b34c2e827bbaab724a77482489b32","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestRewritePolicy.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21ea877bd398689c81e74a7b760ea1095d13e084/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestRewritePolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21ea877bd398689c81e74a7b760ea1095d13e084/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestRewritePolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestRewritePolicy.java?ref=21ea877bd398689c81e74a7b760ea1095d13e084","patch":"@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import org.apache.logging.log4j.core.Core;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n+import org.apache.logging.log4j.core.impl.Log4jLogEvent;\n+import org.apache.logging.log4j.message.SimpleMessage;\n+import org.apache.logging.log4j.status.StatusLogger;\n+\n+@Plugin(name = \"TestRewritePolicy\", category = Core.CATEGORY_NAME, elementType = \"rewritePolicy\",\n+        printObject = true)\n+public class TestRewritePolicy implements RewritePolicy {\n+\n+    protected static final StatusLogger LOGGER = StatusLogger.getLogger();\n+\n+    @Override\n+    public LogEvent rewrite(final LogEvent event) {\n+        return new Log4jLogEvent.Builder(event).setMessage(new SimpleMessage(\"This is a static test message\")).build();\n+    }\n+\n+    @PluginFactory\n+    public static TestRewritePolicy createPolicy() {\n+        return new TestRewritePolicy();\n+    }\n+\n+}"},{"sha":"9bc6ed65583817b76a9126aef7853f241f1cb8ff","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LoggerITCase.java","status":"modified","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21ea877bd398689c81e74a7b760ea1095d13e084/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21ea877bd398689c81e74a7b760ea1095d13e084/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java?ref=21ea877bd398689c81e74a7b760ea1095d13e084","patch":"@@ -24,17 +24,27 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.fail;\n \n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n import java.text.ParseException;\n import java.util.List;\n+import java.util.Properties;\n import javax.ws.rs.core.Response;\n import javax.xml.ws.WebServiceException;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.log.EventCategoryTO;\n import org.apache.syncope.common.lib.log.LogAppender;\n import org.apache.syncope.common.lib.log.LogStatementTO;\n import org.apache.syncope.common.lib.log.LoggerTO;\n+import org.apache.syncope.common.lib.to.ConnInstanceTO;\n+import org.apache.syncope.common.lib.to.ConnPoolConfTO;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.EventCategoryType;\n@@ -43,11 +53,13 @@\n import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.rest.api.LoggerWrapper;\n+import org.apache.syncope.core.logic.ConnectorLogic;\n import org.apache.syncope.core.logic.ReportLogic;\n import org.apache.syncope.core.logic.ResourceLogic;\n import org.apache.syncope.core.logic.GroupLogic;\n import org.apache.syncope.core.logic.UserLogic;\n import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.Assert;\n import org.junit.Test;\n \n public class LoggerITCase extends AbstractITCase {\n@@ -270,4 +282,85 @@ public boolean evaluate(final EventCategoryTO object) {\n         assertNotNull(userLogic);\n         assertEquals(1, IterableUtils.frequency(userLogic.getEvents(), \"create\"));\n     }\n+\n+    @Test\n+    public void testCustomAuditAppender() throws IOException, InterruptedException {\n+        InputStream propStream = null;\n+        try {\n+            Properties props = new Properties();\n+            propStream = getClass().getResourceAsStream(\"/core-test.properties\");\n+            props.load(propStream);\n+\n+            final String auditFilePath = props.getProperty(\"test.log.dir\") + File.separator\n+                    + \"audit_for_Master_file.log\";\n+            final String auditNoRewriteFilePath = props.getProperty(\"test.log.dir\") + File.separator\n+                    + \"audit_for_Master_norewrite_file.log\";\n+            // 1. Enable audit for resource update -> catched by FileRewriteAuditAppender\n+            AuditLoggerName auditLoggerResUpd = new AuditLoggerName(\n+                    EventCategoryType.LOGIC,\n+                    ResourceLogic.class.getSimpleName(),\n+                    null,\n+                    \"update\",\n+                    AuditElements.Result.SUCCESS);\n+\n+            LoggerTO loggerTOUpd = new LoggerTO();\n+            loggerTOUpd.setKey(auditLoggerResUpd.toLoggerName());\n+            loggerTOUpd.setLevel(LoggerLevel.DEBUG);\n+            loggerService.update(LoggerType.AUDIT, loggerTOUpd);\n+            // 2. Enable audit for connector update -> NOT catched by FileRewriteAuditAppender\n+            AuditLoggerName auditLoggerConnUpd = new AuditLoggerName(\n+                    EventCategoryType.LOGIC,\n+                    ConnectorLogic.class.getSimpleName(),\n+                    null,\n+                    \"update\",\n+                    AuditElements.Result.SUCCESS);\n+\n+            LoggerTO loggerTOConnUpd = new LoggerTO();\n+            loggerTOConnUpd.setKey(auditLoggerConnUpd.toLoggerName());\n+            loggerTOConnUpd.setLevel(LoggerLevel.DEBUG);\n+            loggerService.update(LoggerType.AUDIT, loggerTOConnUpd);\n+\n+            // 3. check that resource update is transformed and logged onto an audit file.\n+            ResourceTO resource = resourceService.read(RESOURCE_NAME_CSV);\n+            assertNotNull(resource);\n+            resource.setPropagationPriority(100);\n+            resourceService.update(resource);\n+\n+            ConnInstanceTO connector = connectorService.readByResource(RESOURCE_NAME_CSV, null);\n+            assertNotNull(connector);\n+            connector.setPoolConf(new ConnPoolConfTO());\n+            connectorService.update(connector);\n+\n+            File auditTempFile = new File(auditFilePath);\n+            // check audit_for_Master_file.log, it should contain only a static message\n+            String auditLog = FileUtils.readFileToString(auditTempFile, \"UTF-8\");\n+\n+            Assert.assertTrue(StringUtils.contains(auditLog,\n+                    \"DEBUG Master.syncope.audit.[LOGIC]:[ResourceLogic]:[]:[update]:[SUCCESS]\"\n+                    + \" - This is a static test message\"));\n+            File auditNoRewriteTempFile = new File(auditNoRewriteFilePath);\n+            // check audit_for_Master_file.log, it should contain only a static message\n+            String auditLogNoRewrite = FileUtils.readFileToString(auditNoRewriteTempFile, \"UTF-8\");\n+\n+            Assert.assertFalse(StringUtils.contains(auditLogNoRewrite,\n+                    \"DEBUG Master.syncope.audit.[LOGIC]:[ResourceLogic]:[]:[update]:[SUCCESS]\"\n+                    + \" - This is a static test message\"));\n+\n+            // clean audit_for_Master_file.log\n+            FileUtils.writeStringToFile(auditTempFile, StringUtils.EMPTY, \"UTF-8\");\n+            loggerService.delete(LoggerType.AUDIT, \"syncope.audit.[LOGIC]:[ResourceLogic]:[]:[update]:[SUCCESS]\");\n+\n+            resource = resourceService.read(RESOURCE_NAME_CSV);\n+            assertNotNull(resource);\n+            resource.setPropagationPriority(200);\n+            resourceService.update(resource);\n+\n+            // check that nothing has been written to audit_for_Master_file.log\n+            assertTrue(StringUtils.isEmpty(FileUtils.readFileToString(auditTempFile, \"UTF-8\")));\n+        } catch (IOException e) {\n+            fail(\"Unable to read/write log files\" + e.getMessage());\n+        } finally {\n+            IOUtils.closeQuietly(propStream);\n+        }\n+    }\n }"},{"sha":"2f523e972ffaafb8b9da8b58659b05ec6d07ce0c","filename":"fit/core-reference/src/test/resources/core-test.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21ea877bd398689c81e74a7b760ea1095d13e084/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fcore-test.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21ea877bd398689c81e74a7b760ea1095d13e084/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fcore-test.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fcore-test.properties?ref=21ea877bd398689c81e74a7b760ea1095d13e084","patch":"@@ -16,3 +16,4 @@\n # under the License.\n test.csv.src=${project.build.directory}/test-classes/test.csv\n test.csv.dst=${test.csvdir.path}/test.csv\n+test.log.dir=${log.directory}"},{"sha":"78c38d3f4af35f80ccfb5d8e997af60c139670b0","filename":"src/main/asciidoc/reference-guide/concepts/audit.adoc","status":"modified","additions":48,"deletions":2,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21ea877bd398689c81e74a7b760ea1095d13e084/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Faudit.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21ea877bd398689c81e74a7b760ea1095d13e084/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Faudit.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Faudit.adoc?ref=21ea877bd398689c81e74a7b760ea1095d13e084","patch":"@@ -19,9 +19,10 @@\n === Audit\n \n The audit feature allows to capture <<audit-events,events>> occurring within the <<core>> and to log relevant information\n-about them as entries into the `SYNCOPEAUDIT` table of the internal storage.\n+about them. By default events are logged as entries into the `SYNCOPEAUDIT` table of the internal storage,\n+but can also be logged on some additional Log4j2 appenders defined through simple customization mechanisms.\n \n-Once events are reported in the table above, they can be used as input for external tools.\n+Once events are reported, they can be used as input for external tools.\n \n [TIP]\n ====\n@@ -32,3 +33,48 @@ An example of how audit entries can be extracted for reporting is shown by the <\n \n The information provided for <<notification-events,notification events>> is also valid for audit events, including examples -\n except for the admin console <<console-configuration-audit,tooling>>, which is naturally distinct.\n+\n+==== Audit Customization\n+\n+As mentioned above, events are, basically, logged in a database table, but this behavior can be extended through \n+`AuditAppender` interface implementation which allows an user to define additional logging supports that we address \n+as appenders.\n+\n+Appender is a Log4j entity that allows to write whatever log message on different destinations (file, queues, syslog, \n+other appenders, etc.). Moreover it provides the ability to edit (rewrite) the message, that is flowing through appenders,\n+in order to customize information.\n+Audit customization relies on Log4j appenders. To implement a custom audit appender an user just needs to extend to basic \n+classes:\n+\n+. DefaultAuditAppender\n+. DefaultRewriteAuditAppender\n+\n+The first is intended to add custom appender without any rewrtining of the message, the second allows message rewriting.\n+\n+What is needed to implement a well formed appender:\n+ \n+. Events: a set of events to which the appender is bound. Appender will log only if one of those events occurs.\n+. Target Appender: the Log4j appender that writes message somewhere. See \n+  https://github.com/andrea-patricelli/syncope/blob/2_0_X/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestFileRewriteAuditAppender.java[TestFileRewriteAuditAppender^] or \n+  https://github.com/andrea-patricelli/syncope/blob/2_0_X/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestFileAuditAppender.java[TestFileAuditAppender^].\n+. Rewrite policy (if needed): in case of rewrite enabled a rewrite policy should be defined, by implementing Log4j \n+  `RewritePolicy` interface. Some examples are \n+  https://github.com/andrea-patricelli/syncope/blob/2_0_X/core/logic/src/main/java/org/apache/syncope/core/logic/PassThroughRewritePolicy.java[PassThroughRewritePolicy^] \n+  and https://github.com/andrea-patricelli/syncope/blob/2_0_X/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestRewritePolicy.java[TestRewritePolicy^].\n+  If no rewrite policy is specified `PassThroughRewritePolicy` will be used.\n+\n+[TIP]\n+====\n+Be careful while assigning names to the appenders. The name of the target appender should be unique and should depend on\n+the domain. \n+A best practice is to assign different names to the appenders in order to avoid names collisions and strange behavior of\n+the logging framework.\n+====\n+\n+===== How custom appenders work\n+\n+An appender is bound to specific events. While enabling audit on some event, if that event is \"catched\" also by the custom\n+appender, it automatically activates. Once the audit is enabled the same audit message will be logged by the \n+default audit appender and all the extensions bound to those events. While disabling audit all audit extensions are \n+disabled.\n+To enable an audit extension an user just needs to implement his custom `AuditAppender` in the sources, build application and deploy.\n\\ No newline at end of file"},{"sha":"c166583d346b770cac6b5122578a4dcc727327ea","filename":"src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21ea877bd398689c81e74a7b760ea1095d13e084/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fcustomization.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21ea877bd398689c81e74a7b760ea1095d13e084/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fcustomization.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fcustomization.adoc?ref=21ea877bd398689c81e74a7b760ea1095d13e084","patch":"@@ -691,3 +691,9 @@ Moreover, `defaultValues` do not overwrite any existing value.\n For example, the http://www.chorevolution.eu/[CHOReVOLUTION^] IdM - based on Apache Syncope - provides\n https://gitlab.ow2.org/chorevolution/syncope/tree/master/ext/choreography[an extension^]\n for managing via the <<core>> and visualizing via the <<admin-console-component>> the running choreography instances.\n+\n+[[audit-customization]]\n+==== Audit Extensions\n+\n+<<audit>> by default, if enabled, logs on a specific database table, though this functionality could be extended to log \n+also on different supports (file, queue, syslog, etc.)."}]}