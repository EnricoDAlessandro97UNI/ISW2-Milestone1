{"sha":"bac5e828fd81fc16122b60010ec9b42ee289b0bd","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmJhYzVlODI4ZmQ4MWZjMTYxMjJiNjAwMTBlYzliNDJlZTI4OWIwYmQ=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2012-02-14T06:53:39Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2012-02-14T06:53:39Z"},"message":"Update issue 283\nUserReportlet completed with full XML export: now it's time to do some XSLT...\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247403 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"02edaef7637489760c53c2f16fab4f643484f5e8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/02edaef7637489760c53c2f16fab4f643484f5e8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/bac5e828fd81fc16122b60010ec9b42ee289b0bd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bac5e828fd81fc16122b60010ec9b42ee289b0bd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bac5e828fd81fc16122b60010ec9b42ee289b0bd","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bac5e828fd81fc16122b60010ec9b42ee289b0bd/comments","author":null,"committer":null,"parents":[{"sha":"35bb81b807e59b4383a8d87f955783af1931dd63","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/35bb81b807e59b4383a8d87f955783af1931dd63","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/35bb81b807e59b4383a8d87f955783af1931dd63"}],"stats":{"total":479,"additions":442,"deletions":37},"files":[{"sha":"442865ba197c8e64e3b48d883b0be3ebdb8e25a9","filename":"client/src/main/java/org/syncope/client/to/UserTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac5e828fd81fc16122b60010ec9b42ee289b0bd/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac5e828fd81fc16122b60010ec9b42ee289b0bd/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java?ref=bac5e828fd81fc16122b60010ec9b42ee289b0bd","patch":"@@ -32,7 +32,7 @@ public class UserTO extends AbstractAttributableTO {\n \n     private List<MembershipTO> memberships;\n \n-    List<PropagationTO> propagationTOs;\n+    private List<PropagationTO> propagationTOs;\n \n     private String status;\n "},{"sha":"7c0861815038ec3943e00cee657c358eff9751dc","filename":"core/src/main/java/org/syncope/core/init/JobInstanceLoader.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java?ref=bac5e828fd81fc16122b60010ec9b42ee289b0bd","patch":"@@ -131,7 +131,7 @@ public void registerJob(final Task task, final String jobClassName,\n             throws Exception {\n \n         Class jobClass = Class.forName(jobClassName);\n-        Job jobInstance = (Job) getBeanFactory().autowire(jobClass,\n+        Job jobInstance = (Job) getBeanFactory().createBean(jobClass,\n                 AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n         if (jobInstance instanceof AbstractTaskJob) {\n             ((AbstractTaskJob) jobInstance).setTaskId(task.getId());\n@@ -150,7 +150,7 @@ public void registerJob(final Task task, final String jobClassName,\n                 }\n             }\n             SyncJobActions syncJobActions =\n-                    (SyncJobActions) getBeanFactory().autowire(\n+                    (SyncJobActions) getBeanFactory().createBean(\n                     syncJobActionsClass,\n                     AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n \n@@ -163,7 +163,7 @@ public void registerJob(final Task task, final String jobClassName,\n     public void registerJob(final Report report)\n             throws Exception {\n \n-        Job jobInstance = (Job) getBeanFactory().autowire(ReportJob.class,\n+        Job jobInstance = (Job) getBeanFactory().createBean(ReportJob.class,\n                 AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n         ((ReportJob) jobInstance).setReportId(report.getId());\n "},{"sha":"70a55c7fbbd82c525a827643e30ceb1ee9a253e5","filename":"core/src/main/java/org/syncope/core/policy/PolicyEvaluator.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java?ref=bac5e828fd81fc16122b60010ec9b42ee289b0bd","patch":"@@ -49,7 +49,8 @@ public <T extends AbstractPolicySpec> T evaluate(\n                 case PASSWORD:\n                 case GLOBAL_PASSWORD:\n                     final PasswordPolicySpec pspec = policy.getSpecification();\n-                    final PasswordPolicySpec passwordPolicy = new PasswordPolicySpec();\n+                    final PasswordPolicySpec passwordPolicy =\n+                            new PasswordPolicySpec();\n \n                     BeanUtils.copyProperties(\n                             pspec,\n@@ -77,8 +78,10 @@ public <T extends AbstractPolicySpec> T evaluate(\n                     if (((SyncopeUser) attributable).verifyPasswordHistory(\n                             ((SyncopeUser) attributable).getClearPassword(),\n                             pspec.getHistoryLength())) {\n-                        passwordPolicy.getWordsNotPermitted().add(\n-                                ((SyncopeUser) attributable).getClearPassword());\n+\n+                        passwordPolicy.getWordsNotPermitted().\n+                                add(((SyncopeUser) attributable).\n+                                getClearPassword());\n                     } else {\n \n                         if (pspec.getHistoryLength() > 0 && password != null) {\n@@ -88,6 +91,7 @@ public <T extends AbstractPolicySpec> T evaluate(\n                         if (pspec.getHistoryLength() < passwordHistory.size()) {\n                             for (int i = 0; i < passwordHistory.size()\n                                     - pspec.getHistoryLength(); i++) {\n+\n                                 passwordHistory.remove(i);\n                             }\n                         }\n@@ -98,7 +102,8 @@ public <T extends AbstractPolicySpec> T evaluate(\n                 case ACCOUNT:\n                 case GLOBAL_ACCOUNT:\n                     final AccountPolicySpec spec = policy.getSpecification();\n-                    final AccountPolicySpec accountPolicy = new AccountPolicySpec();\n+                    final AccountPolicySpec accountPolicy =\n+                            new AccountPolicySpec();\n \n                     BeanUtils.copyProperties(\n                             spec,"},{"sha":"95a26c54d23f8aa824b45d2dbb628c0fde79032e","filename":"core/src/main/java/org/syncope/core/report/ReportException.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Freport%2FReportException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Freport%2FReportException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Freport%2FReportException.java?ref=bac5e828fd81fc16122b60010ec9b42ee289b0bd","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.report;\n+\n+public class ReportException extends Exception {\n+\n+    private static final long serialVersionUID = 6719507778589395283L;\n+\n+    public ReportException(final Throwable cause) {\n+        super(cause);\n+    }\n+\n+    public ReportException(final String message, final Throwable cause) {\n+        super(message, cause);\n+    }\n+}"},{"sha":"c722c252879730844c917ea7b708f113a103c43c","filename":"core/src/main/java/org/syncope/core/report/Reportlet.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Freport%2FReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Freport%2FReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Freport%2FReportlet.java?ref=bac5e828fd81fc16122b60010ec9b42ee289b0bd","patch":"@@ -26,15 +26,18 @@ public interface Reportlet {\n \n     /**\n      * Set this reportlet configuration.\n+     *\n+     * @param conf configuration\n      */\n     void setConf(ReportletConf conf);\n \n     /**\n      * Actual data extraction for reporting.\n      *\n      * @param handler SAX content handler for streaming result\n-     * @throws SAXException if anything goes wrong\n+     * @throws SAXException if ther is any problem in SAX handling\n+     * @throws ReportException if anything goes wrong\n      */\n     void extract(ContentHandler handler)\n-            throws SAXException;\n+            throws SAXException, ReportException;\n }"},{"sha":"85f0d4b85b59b8188f498562cfcf99b11288cb2c","filename":"core/src/main/java/org/syncope/core/report/UserReportlet.java","status":"modified","additions":324,"deletions":2,"changes":326,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Freport%2FUserReportlet.java?ref=bac5e828fd81fc16122b60010ec9b42ee289b0bd","patch":"@@ -13,27 +13,349 @@\n  */\n package org.syncope.core.report;\n \n+import java.text.SimpleDateFormat;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.client.SyncopeConstants;\n import org.syncope.client.report.UserReportletConf;\n+import org.syncope.client.report.UserReportletConf.Feature;\n+import org.syncope.client.to.AbstractAttributableTO;\n+import org.syncope.client.to.AttributeTO;\n+import org.syncope.client.to.MembershipTO;\n+import org.syncope.client.to.UserTO;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.EntitlementDAO;\n import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.persistence.dao.UserSearchDAO;\n+import org.syncope.core.rest.data.UserDataBinder;\n+import static org.syncope.core.scheduling.ReportXMLConst.*;\n+import org.syncope.core.util.EntitlementUtil;\n import org.xml.sax.ContentHandler;\n import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.AttributesImpl;\n \n public class UserReportlet extends AbstractReportlet {\n \n-    private UserReportletConf conf;\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG =\n+            LoggerFactory.getLogger(UserReportlet.class);\n+\n+    private final static int PAGE_SIZE = 10;\n+\n+    private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT =\n+            new ThreadLocal<SimpleDateFormat>() {\n+\n+                @Override\n+                protected SimpleDateFormat initialValue() {\n+                    return new SimpleDateFormat(\n+                            SyncopeConstants.DEFAULT_DATE_PATTERN);\n+                }\n+            };\n+\n+    @Autowired\n+    private EntitlementDAO entitlementDAO;\n \n     @Autowired\n     private UserDAO userDAO;\n \n     @Autowired\n     private UserSearchDAO searchDAO;\n \n+    @Autowired\n+    private UserDataBinder dataBinder;\n+\n+    private List<SyncopeUser> getPagedUsers(final UserReportletConf conf,\n+            final int page) {\n+\n+        Set<Long> adminRoleIds =\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll());\n+\n+        return conf.getMatchingCond() == null\n+                ? userDAO.findAll(adminRoleIds, page, PAGE_SIZE)\n+                : searchDAO.search(adminRoleIds, conf.getMatchingCond(),\n+                page, PAGE_SIZE);\n+    }\n+\n+    private int count(final UserReportletConf conf) {\n+        Set<Long> adminRoleIds =\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll());\n+\n+        return conf.getMatchingCond() == null\n+                ? userDAO.count(adminRoleIds)\n+                : searchDAO.count(adminRoleIds, conf.getMatchingCond());\n+    }\n+\n+    private void doExtractResources(final ContentHandler handler,\n+            final AbstractAttributableTO attributableTO)\n+            throws SAXException {\n+\n+        if (attributableTO.getResources().isEmpty()) {\n+            LOG.debug(\"No resources found for {}[{}]\",\n+                    attributableTO.getClass().getSimpleName(),\n+                    attributableTO.getId());\n+        } else {\n+            AttributesImpl atts = new AttributesImpl();\n+            handler.startElement(\"\", \"\", \"resources\", null);\n+\n+            for (String resourceName : attributableTO.getResources()) {\n+                atts.clear();\n+\n+                atts.addAttribute(\"\", \"\", ATTR_NAME, XSD_STRING, resourceName);\n+                handler.startElement(\"\", \"\", \"resource\", atts);\n+                handler.endElement(\"\", \"\", \"resource\");\n+            }\n+\n+            handler.endElement(\"\", \"\", \"resources\");\n+        }\n+    }\n+\n+    private void doExtractAttributes(final ContentHandler handler,\n+            final AbstractAttributableTO attributableTO,\n+            final Collection<String> attrs,\n+            final Collection<String> derAttrs,\n+            final Collection<String> virAttrs)\n+            throws SAXException {\n+\n+        AttributesImpl atts = new AttributesImpl();\n+        if (!attrs.isEmpty()) {\n+            Map<String, AttributeTO> attrMap = attributableTO.getAttributeMap();\n+\n+            handler.startElement(\"\", \"\", \"attributes\", null);\n+            for (String attrName : attrs) {\n+                atts.clear();\n+\n+                atts.addAttribute(\"\", \"\", ATTR_NAME, XSD_STRING, attrName);\n+                handler.startElement(\"\", \"\", \"attribute\", atts);\n+\n+                if (attrMap.containsKey(attrName)) {\n+                    for (String value : attrMap.get(attrName).getValues()) {\n+                        handler.startElement(\"\", \"\", \"value\", null);\n+                        handler.characters(\n+                                value.toCharArray(), 0, value.length());\n+                        handler.endElement(\"\", \"\", \"value\");\n+                    }\n+                } else {\n+                    LOG.debug(\"{} not found for {}[{}]\", new Object[]{\n+                                attrName,\n+                                attributableTO.getClass().getSimpleName(),\n+                                attributableTO.getId()});\n+                }\n+\n+                handler.endElement(\"\", \"\", \"attribute\");\n+            }\n+            handler.endElement(\"\", \"\", \"attributes\");\n+        }\n+\n+        if (!derAttrs.isEmpty()) {\n+            Map<String, AttributeTO> derAttrMap =\n+                    attributableTO.getDerivedAttributeMap();\n+\n+            handler.startElement(\"\", \"\", \"derivedAttributes\", null);\n+            for (String attrName : derAttrs) {\n+                atts.clear();\n+\n+                atts.addAttribute(\"\", \"\", ATTR_NAME, XSD_STRING, attrName);\n+                handler.startElement(\"\", \"\", \"derivedAttribute\", atts);\n+\n+                if (derAttrMap.containsKey(attrName)) {\n+                    for (String value : derAttrMap.get(attrName).getValues()) {\n+                        handler.startElement(\"\", \"\", \"value\", null);\n+                        handler.characters(\n+                                value.toCharArray(), 0, value.length());\n+                        handler.endElement(\"\", \"\", \"value\");\n+                    }\n+                } else {\n+                    LOG.debug(\"{} not found for {}[{}]\", new Object[]{\n+                                attrName,\n+                                attributableTO.getClass().getSimpleName(),\n+                                attributableTO.getId()});\n+                }\n+\n+                handler.endElement(\"\", \"\", \"derivedAttribute\");\n+            }\n+            handler.endElement(\"\", \"\", \"derivedAttributes\");\n+        }\n+\n+        if (!virAttrs.isEmpty()) {\n+            Map<String, AttributeTO> virAttrMap =\n+                    attributableTO.getVirtualAttributeMap();\n+\n+            handler.startElement(\"\", \"\", \"virtualAttributes\", null);\n+            for (String attrName : virAttrs) {\n+                atts.clear();\n+\n+                atts.addAttribute(\"\", \"\", ATTR_NAME, XSD_STRING, attrName);\n+                handler.startElement(\"\", \"\", \"virtualAttribute\", atts);\n+\n+                if (virAttrMap.containsKey(attrName)) {\n+                    for (String value : virAttrMap.get(attrName).getValues()) {\n+                        handler.startElement(\"\", \"\", \"value\", null);\n+                        handler.characters(\n+                                value.toCharArray(), 0, value.length());\n+                        handler.endElement(\"\", \"\", \"value\");\n+                    }\n+                } else {\n+                    LOG.debug(\"{} not found for {}[{}]\", new Object[]{\n+                                attrName,\n+                                attributableTO.getClass().getSimpleName(),\n+                                attributableTO.getId()});\n+                }\n+\n+                handler.endElement(\"\", \"\", \"virtualAttribute\");\n+            }\n+            handler.endElement(\"\", \"\", \"virtualAttributes\");\n+        }\n+    }\n+\n+    private void doExtract(final ContentHandler handler,\n+            final UserReportletConf conf,\n+            final List<SyncopeUser> users)\n+            throws SAXException, ReportException {\n+\n+        AttributesImpl atts = new AttributesImpl();\n+        for (SyncopeUser user : users) {\n+            atts.clear();\n+\n+            for (Feature feature : conf.getFeatures()) {\n+                String type = null;\n+                String value = null;\n+                switch (feature) {\n+                    case id:\n+                        type = XSD_LONG;\n+                        value = String.valueOf(user.getId());\n+                        break;\n+\n+                    case username:\n+                        type = XSD_STRING;\n+                        value = user.getUsername();\n+                        break;\n+\n+                    case workflowId:\n+                        type = XSD_LONG;\n+                        value = String.valueOf(user.getWorkflowId());\n+                        break;\n+\n+                    case status:\n+                        type = XSD_STRING;\n+                        value = user.getStatus();\n+                        break;\n+\n+                    case creationDate:\n+                        type = XSD_DATETIME;\n+                        value = user.getCreationDate() == null ? \"\"\n+                                : DATE_FORMAT.get().format(\n+                                user.getCreationDate());\n+                        break;\n+\n+                    case lastLoginDate:\n+                        type = XSD_DATETIME;\n+                        value = user.getLastLoginDate() == null ? \"\"\n+                                : DATE_FORMAT.get().\n+                                format(user.getLastLoginDate());\n+                        break;\n+\n+                    case changePwdDate:\n+                        type = XSD_DATETIME;\n+                        value = user.getChangePwdDate() == null ? \"\"\n+                                : DATE_FORMAT.get().format(\n+                                user.getChangePwdDate());\n+                        break;\n+\n+                    case passwordHistorySize:\n+                        type = XSD_INT;\n+                        value = String.valueOf(\n+                                user.getPasswordHistory().size());\n+                        break;\n+\n+                    case failedLoginCount:\n+                        type = XSD_INT;\n+                        value = String.valueOf(user.getFailedLogins());\n+                        break;\n+\n+                    default:\n+                }\n+\n+                if (type != null && value != null) {\n+                    atts.addAttribute(\"\", \"\", feature.name(), type, value);\n+                }\n+            }\n+\n+            handler.startElement(\"\", \"\", \"user\", atts);\n+\n+            // Using UserTO for attribute values, since the conversion logic of\n+            // values to String is already encapsulated there\n+            UserTO userTO = dataBinder.getUserTO(user);\n+\n+            doExtractAttributes(handler, userTO, conf.getAttrs(),\n+                    conf.getDerAttrs(), conf.getVirAttrs());\n+\n+            if (conf.getFeatures().contains(Feature.memberships)) {\n+                handler.startElement(\"\", \"\", \"memberships\", null);\n+\n+                for (MembershipTO memb : userTO.getMemberships()) {\n+                    atts.clear();\n+\n+                    atts.addAttribute(\"\", \"\", \"id\", XSD_LONG,\n+                            String.valueOf(memb.getId()));\n+                    atts.addAttribute(\"\", \"\", \"roleId\", XSD_LONG,\n+                            String.valueOf(memb.getRoleId()));\n+                    atts.addAttribute(\"\", \"\", \"roleName\", XSD_STRING,\n+                            String.valueOf(memb.getRoleName()));\n+                    handler.startElement(\"\", \"\", \"membership\", atts);\n+\n+                    doExtractAttributes(handler, memb,\n+                            memb.getAttributeMap().keySet(),\n+                            memb.getDerivedAttributeMap().keySet(),\n+                            memb.getVirtualAttributeMap().keySet());\n+\n+                    if (conf.getFeatures().contains(Feature.resources)) {\n+                        doExtractResources(handler, memb);\n+                    }\n+\n+                    handler.endElement(\"\", \"\", \"membership\");\n+                }\n+\n+                handler.endElement(\"\", \"\", \"memberships\");\n+            }\n+\n+            if (conf.getFeatures().contains(Feature.resources)) {\n+                doExtractResources(handler, userTO);\n+            }\n+\n+            handler.endElement(\"\", \"\", \"user\");\n+        }\n+    }\n+\n     @Override\n     @Transactional(readOnly = true)\n     public void extract(final ContentHandler handler)\n-            throws SAXException {\n+            throws SAXException, ReportException {\n+\n+        if (getConf() == null || !(getConf() instanceof UserReportletConf)) {\n+            throw new ReportException(\n+                    new IllegalArgumentException(\"Expected \"\n+                    + UserReportletConf.class.getName()\n+                    + \", got \" + getConf()));\n+        }\n+\n+        UserReportletConf conf = (UserReportletConf) getConf();\n+\n+        AttributesImpl atts = new AttributesImpl();\n+        atts.addAttribute(\"\", \"\", ATTR_NAME, XSD_STRING, getConf().getName());\n+        handler.startElement(\"\", \"\", ELEMENT_REPORTLET, atts);\n+\n+        for (int i = 1; i <= (count(conf) / PAGE_SIZE) + 1; i++) {\n+            doExtract(handler, conf, getPagedUsers(conf, i));\n+        }\n+\n+        handler.endElement(\"\", \"\", ELEMENT_REPORTLET);\n     }\n }"},{"sha":"6e172ebfce8ed34ed5a28f57daed2842b59d9a5c","filename":"core/src/main/java/org/syncope/core/rest/controller/AbstractController.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java?ref=bac5e828fd81fc16122b60010ec9b42ee289b0bd","patch":"@@ -15,7 +15,6 @@\n  */\n package org.syncope.core.rest.controller;\n \n-import org.syncope.core.util.AttributableUtil;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.TypeMismatchException;\n@@ -29,6 +28,7 @@\n import org.syncope.core.persistence.beans.SchedTask;\n import org.syncope.core.persistence.beans.SyncTask;\n import org.syncope.core.persistence.beans.Task;\n+import org.syncope.core.util.AttributableUtil;\n import org.syncope.core.util.TaskUtil;\n \n @Transactional(rollbackFor = {"},{"sha":"7d9c63208895a5ed3b4cb590d9cdc96832708742","filename":"core/src/main/java/org/syncope/core/rest/controller/ReportController.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=bac5e828fd81fc16122b60010ec9b42ee289b0bd","patch":"@@ -45,8 +45,6 @@\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.servlet.ModelAndView;\n-import org.syncope.core.report.AbstractReportlet;\n-import org.syncope.core.report.Reportlet;\n import org.syncope.client.to.ReportExecTO;\n import org.syncope.client.to.ReportTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -56,6 +54,8 @@\n import org.syncope.core.persistence.beans.ReportExec;\n import org.syncope.core.persistence.dao.ReportDAO;\n import org.syncope.core.persistence.dao.ReportExecDAO;\n+import org.syncope.core.report.AbstractReportlet;\n+import org.syncope.core.report.Reportlet;\n import org.syncope.core.rest.data.ReportDataBinder;\n import org.syncope.types.ReportExecExportFormat;\n import org.syncope.types.ReportExecStatus;\n@@ -297,7 +297,7 @@ public void exportExecutionResult(\n             sce.addElement(reportExec.getExecResult() == null\n                     ? \"No report data produced\"\n                     : \"Report did not run successfully\");\n-\n+            sccee.addException(sce);\n             throw sccee;\n         }\n "},{"sha":"974ee761930a1c9a4ce27e7f88cd16c366e0a416","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=bac5e828fd81fc16122b60010ec9b42ee289b0bd","patch":"@@ -352,12 +352,11 @@ public PropagationByResource update(final SyncopeUser user,\n         }\n \n         // memberships to be added\n-        SyncopeRole role = null;\n         for (MembershipMod membershipMod : userMod.getMembershipsToBeAdded()) {\n             LOG.debug(\"Membership to be added: role({})\",\n                     membershipMod.getRole());\n \n-            role = roleDAO.find(membershipMod.getRole());\n+            SyncopeRole role = roleDAO.find(membershipMod.getRole());\n             if (role == null) {\n                 LOG.debug(\"Ignoring invalid role {}\", membershipMod.getRole());\n             } else {"},{"sha":"67ed8e78f2f1aaa4074764aa9e774fdbb1d1c348","filename":"core/src/main/java/org/syncope/core/scheduling/ReportJob.java","status":"modified","additions":26,"deletions":18,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FReportJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FReportJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FReportJob.java?ref=bac5e828fd81fc16122b60010ec9b42ee289b0bd","patch":"@@ -39,10 +39,13 @@\n import org.syncope.core.persistence.beans.ReportExec;\n import org.syncope.core.persistence.dao.ReportDAO;\n import org.syncope.core.persistence.dao.ReportExecDAO;\n+import org.syncope.core.report.ReportException;\n import org.syncope.core.report.Reportlet;\n+import static org.syncope.core.scheduling.ReportXMLConst.ATTR_NAME;\n+import static org.syncope.core.scheduling.ReportXMLConst.ELEMENT_REPORT;\n+import static org.syncope.core.scheduling.ReportXMLConst.XSD_STRING;\n import org.syncope.core.util.ApplicationContextManager;\n import org.syncope.types.ReportExecStatus;\n-import org.xml.sax.SAXException;\n import org.xml.sax.helpers.AttributesImpl;\n \n /**\n@@ -56,12 +59,6 @@ public class ReportJob implements StatefulJob {\n     private static final Logger LOG = LoggerFactory.getLogger(\n             ReportJob.class);\n \n-    private static String TYPE_TEXT = \"CDATA\";\n-\n-    private static String ELEMENT_REPORT = \"report\";\n-\n-    private static String ATTR_NAME = \"name\";\n-\n     /**\n      * Report DAO.\n      */\n@@ -137,12 +134,13 @@ public void execute(final JobExecutionContext context)\n                 getBeanFactory();\n \n         // 3. actual report execution\n-        String reportExecutionMessage = null;\n+        StringBuilder reportExecutionMessage = new StringBuilder();\n+        StringWriter exceptionWriter = new StringWriter();\n         try {\n             // report header\n             handler.startDocument();\n             AttributesImpl atts = new AttributesImpl();\n-            atts.addAttribute(\"\", \"\", ATTR_NAME, TYPE_TEXT, report.getName());\n+            atts.addAttribute(\"\", \"\", ATTR_NAME, XSD_STRING, report.getName());\n             handler.startElement(\"\", \"\", ELEMENT_REPORT, atts);\n \n             // iterate over reportlet instances defined for this report\n@@ -159,16 +157,23 @@ public void execute(final JobExecutionContext context)\n \n                 if (reportletClass != null) {\n                     Reportlet autowired =\n-                            (Reportlet) beanFactory.autowire(reportletClass,\n+                            (Reportlet) beanFactory.createBean(reportletClass,\n                             AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n                     autowired.setConf(reportletConf);\n \n                     // invoke reportlet\n                     try {\n                         autowired.extract(handler);\n-                    } catch (SAXException e) {\n-                        LOG.error(\"While extracting from reportlet {}\",\n-                                reportletConf.getName(), e);\n+                    } catch (Exception e) {\n+                        execution.setStatus(ReportExecStatus.FAILURE);\n+\n+                        Throwable t = e instanceof ReportException\n+                                ? e.getCause() : e;\n+                        exceptionWriter.write(t.getMessage() + \"\\n\\n\");\n+                        t.printStackTrace(new PrintWriter(exceptionWriter));\n+                        reportExecutionMessage.append(\n+                                exceptionWriter.toString()).\n+                                append(\"\\n==================\\n\");\n                     }\n                 }\n             }\n@@ -177,14 +182,17 @@ public void execute(final JobExecutionContext context)\n             handler.endElement(\"\", \"\", ELEMENT_REPORT);\n             handler.endDocument();\n \n-            execution.setStatus(ReportExecStatus.SUCCESS);\n-        } catch (SAXException e) {\n+            if (!ReportExecStatus.FAILURE.name().\n+                    equals(execution.getStatus())) {\n+\n+                execution.setStatus(ReportExecStatus.SUCCESS);\n+            }\n+        } catch (Exception e) {\n             execution.setStatus(ReportExecStatus.FAILURE);\n \n-            StringWriter exceptionWriter = new StringWriter();\n             exceptionWriter.write(e.getMessage() + \"\\n\\n\");\n             e.printStackTrace(new PrintWriter(exceptionWriter));\n-            reportExecutionMessage = exceptionWriter.toString();\n+            reportExecutionMessage.append(exceptionWriter.toString());\n \n             throw new JobExecutionException(e, true);\n         } finally {\n@@ -197,7 +205,7 @@ public void execute(final JobExecutionContext context)\n             }\n \n             execution.setExecResult(baos.toByteArray());\n-            execution.setMessage(reportExecutionMessage);\n+            execution.setMessage(reportExecutionMessage.toString());\n             execution.setEndDate(new Date());\n             reportExecDAO.save(execution);\n         }"},{"sha":"b90351768e1267d961ec34d3ca6f2af418ec8d82","filename":"core/src/main/java/org/syncope/core/scheduling/ReportXMLConst.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FReportXMLConst.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FReportXMLConst.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FReportXMLConst.java?ref=bac5e828fd81fc16122b60010ec9b42ee289b0bd","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.scheduling;\n+\n+public class ReportXMLConst {\n+\n+    public static final String XSD_STRING = \"xsd:string\";\n+\n+    public static final String XSD_INT = \"xsd:integer\";\n+\n+    public static final String XSD_LONG = \"xsd:long\";\n+\n+    public static final String XSD_BOOLEAN = \"xsd:boolean\";\n+\n+    public static final String XSD_DATETIME = \"xsd:dateTime\";\n+\n+    public static final String ELEMENT_REPORT = \"report\";\n+\n+    public static final String ATTR_NAME = \"name\";\n+\n+    public static final String ELEMENT_REPORTLET = \"reportlet\";\n+\n+}"},{"sha":"2e872624e4818cd87ad7438e94305f98be7e78a5","filename":"core/src/test/java/org/syncope/core/rest/ReportTestITCase.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java?ref=bac5e828fd81fc16122b60010ec9b42ee289b0bd","patch":"@@ -20,6 +20,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import org.apache.http.Header;\n import org.apache.http.HttpResponse;\n import org.apache.http.client.methods.HttpGet;\n import org.apache.http.util.EntityUtils;\n@@ -185,6 +186,12 @@ public void executeAndExport()\n         postExecIds.removeAll(preExecIds);\n         assertEquals(1, postExecIds.size());\n \n+        // wait for report exec XML to be stored...\n+        try {\n+            Thread.sleep(3000);\n+        } catch (InterruptedException e) {\n+        }\n+\n         HttpGet getMethod = new HttpGet(BASE_URL + \"report/execution/export/\"\n                 + postExecIds.iterator().next());\n         HttpResponse response ="},{"sha":"e41a813f6dd8f7d3d4ea2c51ce8ac6d1823827a2","filename":"core/src/test/resources/content.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac5e828fd81fc16122b60010ec9b42ee289b0bd/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=bac5e828fd81fc16122b60010ec9b42ee289b0bd","patch":"@@ -580,6 +580,6 @@\n     <Notification_events Notification_id=\"101\" events=\"unexisting2\"/>\n     \n     <Report id=\"1\" name=\"test\"/>\n-    <Report_reportletConfs Report_id=\"1\" reportletConfs=\"%3Corg.syncope.client.report.UserReportletConf%3E%0A++%3Cname%3Eorg.syncope.client.report.UserReportletConf%3C%2Fname%3E%0A++%3Cattrs%2F%3E%0A++%3CderAttrs%2F%3E%0A++%3CvirAttrs%2F%3E%0A++%3Cfeatures%2F%3E%0A%3C%2Forg.syncope.client.report.UserReportletConf%3E\"/>\n+    <Report_reportletConfs Report_id=\"1\" reportletConfs=\"%3Corg.syncope.client.report.UserReportletConf%3E%0A++%3Cname%3EtestUserReportlet%3C%2Fname%3E%0A++%3Cattrs%3E%0A++++%3Cstring%3Efullname%3C%2Fstring%3E%0A++++%3Cstring%3Egender%3C%2Fstring%3E%0A++%3C%2Fattrs%3E%0A++%3CderAttrs+class%3D%22singleton-list%22%3E%0A++++%3Cstring%3Ecn%3C%2Fstring%3E%0A++%3C%2FderAttrs%3E%0A++%3CvirAttrs+class%3D%22singleton-list%22%3E%0A++++%3Cstring%3Evirtualdata%3C%2Fstring%3E%0A++%3C%2FvirAttrs%3E%0A++%3Cfeatures+class%3D%22java.util.Arrays%24ArrayList%22%3E%0A++++%3Ca+class%3D%22org.syncope.client.report.UserReportletConf%24Feature-array%22%3E%0A++++++%3Corg.syncope.client.report.UserReportletConf_-Feature%3Eid%3C%2Forg.syncope.client.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.syncope.client.report.UserReportletConf_-Feature%3Eusername%3C%2Forg.syncope.client.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.syncope.client.report.UserReportletConf_-Feature%3EworkflowId%3C%2Forg.syncope.client.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.syncope.client.report.UserReportletConf_-Feature%3Estatus%3C%2Forg.syncope.client.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.syncope.client.report.UserReportletConf_-Feature%3EcreationDate%3C%2Forg.syncope.client.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.syncope.client.report.UserReportletConf_-Feature%3ElastLoginDate%3C%2Forg.syncope.client.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.syncope.client.report.UserReportletConf_-Feature%3EchangePwdDate%3C%2Forg.syncope.client.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.syncope.client.report.UserReportletConf_-Feature%3EpasswordHistorySize%3C%2Forg.syncope.client.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.syncope.client.report.UserReportletConf_-Feature%3EfailedLoginCount%3C%2Forg.syncope.client.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.syncope.client.report.UserReportletConf_-Feature%3Ememberships%3C%2Forg.syncope.client.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.syncope.client.report.UserReportletConf_-Feature%3Eresources%3C%2Forg.syncope.client.report.UserReportletConf_-Feature%3E%0A++++%3C%2Fa%3E%0A++%3C%2Ffeatures%3E%0A%3C%2Forg.syncope.client.report.UserReportletConf%3E\"/>\n     <ReportExec Report_id=\"1\" id=\"1\" status=\"SUCCESS\" startDate=\"2012-02-26 15:40:04\" endDate=\"2012-02-26 15:41:04\"/>\n </dataset>"}]}