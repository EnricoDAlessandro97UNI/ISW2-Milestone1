{"sha":"2b7415f19c83b234b3392202e55d3a1dd9bb305e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjJiNzQxNWYxOWM4M2IyMzRiMzM5MjIwMmU1NWQzYTFkZDliYjMwNWU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-01-17T13:01:39Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-01-17T13:01:39Z"},"message":"Temp work around for https://github.com/spring-cloud/spring-cloud-gateway/issues/1532","tree":{"sha":"7005d0ccdd1f51fc86c04b228736afbbeaba3cf3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7005d0ccdd1f51fc86c04b228736afbbeaba3cf3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2b7415f19c83b234b3392202e55d3a1dd9bb305e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2b7415f19c83b234b3392202e55d3a1dd9bb305e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2b7415f19c83b234b3392202e55d3a1dd9bb305e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2b7415f19c83b234b3392202e55d3a1dd9bb305e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d4afae90c844544de90808f749240e23abaefa8d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d4afae90c844544de90808f749240e23abaefa8d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d4afae90c844544de90808f749240e23abaefa8d"}],"stats":{"total":95,"additions":95,"deletions":0},"files":[{"sha":"d607fcf5baf4b13642d802ec869d10e7f3c726c4","filename":"sra/src/main/java/org/apache/syncope/sra/SyncopeSRAApplication.java","status":"modified","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2b7415f19c83b234b3392202e55d3a1dd9bb305e/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2b7415f19c83b234b3392202e55d3a1dd9bb305e/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAApplication.java?ref=2b7415f19c83b234b3392202e55d3a1dd9bb305e","patch":"@@ -18,12 +18,19 @@\n  */\n package org.apache.syncope.sra;\n \n+import io.netty.channel.ChannelOption;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n+import java.security.cert.X509Certificate;\n import java.util.Objects;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.actuate.autoconfigure.security.reactive.EndpointRequest;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.cloud.gateway.config.HttpClientProperties;\n import org.springframework.cloud.gateway.route.Route;\n import org.springframework.cloud.gateway.route.RouteLocator;\n import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;\n@@ -39,14 +46,21 @@\n import org.springframework.security.web.server.SecurityWebFilterChain;\n import org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher;\n import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n+import org.springframework.boot.context.properties.PropertyMapper;\n+import org.springframework.util.StringUtils;\n import reactor.core.publisher.Flux;\n+import reactor.netty.http.client.HttpClient;\n+import reactor.netty.resources.ConnectionProvider;\n+import reactor.netty.tcp.ProxyProvider;\n \n @PropertySource(\"classpath:sra.properties\")\n @PropertySource(value = \"file:${conf.directory}/sra.properties\", ignoreResourceNotFound = true)\n @EnableWebFluxSecurity\n @SpringBootApplication\n public class SyncopeSRAApplication implements EnvironmentAware {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeSRAApplication.class);\n+\n     public static void main(final String[] args) {\n         SpringApplication.run(SyncopeSRAApplication.class, args);\n     }\n@@ -85,4 +99,85 @@ public MapReactiveUserDetailsService userDetailsService() {\n                 build();\n         return new MapReactiveUserDetailsService(user);\n     }\n+\n+    /**\n+     * Temp work around https://github.com/spring-cloud/spring-cloud-gateway/issues/1532 .\n+     *\n+     * @param properties Gateway HTTP Client properties\n+     * @return Gateway HTTP Client instance\n+     */\n+    @Bean\n+    public HttpClient gatewayHttpClient(final HttpClientProperties properties) {\n+        // configure pool resources\n+        HttpClientProperties.Pool pool = properties.getPool();\n+\n+        ConnectionProvider connectionProvider;\n+        if (pool.getType() == HttpClientProperties.Pool.PoolType.DISABLED) {\n+            connectionProvider = ConnectionProvider.newConnection();\n+        } else if (pool.getType() == HttpClientProperties.Pool.PoolType.FIXED) {\n+            connectionProvider = ConnectionProvider.fixed(\n+                    pool.getName(), pool.getMaxConnections(), pool.getAcquireTimeout(), pool.getMaxIdleTime(), null);\n+        } else {\n+            connectionProvider = ConnectionProvider.elastic(pool.getName(), pool.getMaxIdleTime(), null);\n+        }\n+\n+        HttpClient httpClient = HttpClient.create(connectionProvider).tcpConfiguration(tcpClient -> {\n+            if (properties.getConnectTimeout() != null) {\n+                tcpClient = tcpClient.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, properties.getConnectTimeout());\n+            }\n+\n+            // configure proxy if proxy host is set.\n+            HttpClientProperties.Proxy proxy = properties.getProxy();\n+\n+            if (StringUtils.hasText(proxy.getHost())) {\n+                tcpClient = tcpClient.proxy(proxySpec -> {\n+                    ProxyProvider.Builder builder = proxySpec.type(ProxyProvider.Proxy.HTTP).host(proxy.getHost());\n+\n+                    PropertyMapper map = PropertyMapper.get();\n+\n+                    map.from(proxy::getPort).whenNonNull().to(builder::port);\n+                    map.from(proxy::getUsername).whenHasText().to(builder::username);\n+                    map.from(proxy::getPassword).whenHasText().to(password -> builder.password(s -> password));\n+                    map.from(proxy::getNonProxyHostsPattern).whenHasText().to(builder::nonProxyHosts);\n+                });\n+            }\n+            return tcpClient;\n+        });\n+\n+        HttpClientProperties.Ssl ssl = properties.getSsl();\n+        if ((ssl.getKeyStore() != null && ssl.getKeyStore().length() > 0)\n+                || ssl.getTrustedX509CertificatesForTrustManager().length > 0\n+                || ssl.isUseInsecureTrustManager()) {\n+\n+            httpClient = httpClient.secure(sslContextSpec -> {\n+                // configure ssl\n+                SslContextBuilder sslContextBuilder = SslContextBuilder.forClient();\n+\n+                X509Certificate[] trustedX509Certificates = ssl.getTrustedX509CertificatesForTrustManager();\n+                if (trustedX509Certificates.length > 0) {\n+                    sslContextBuilder = sslContextBuilder.trustManager(trustedX509Certificates);\n+                } else if (ssl.isUseInsecureTrustManager()) {\n+                    sslContextBuilder = sslContextBuilder.trustManager(InsecureTrustManagerFactory.INSTANCE);\n+                }\n+\n+                try {\n+                    sslContextBuilder = sslContextBuilder.keyManager(ssl.getKeyManagerFactory());\n+                } catch (Exception e) {\n+                    LOG.error(\"During SSL configuration\", e);\n+                }\n+\n+                sslContextSpec.sslContext(sslContextBuilder).\n+                        defaultConfiguration(ssl.getDefaultConfigurationType()).\n+                        handshakeTimeout(ssl.getHandshakeTimeout()).\n+                        closeNotifyFlushTimeout(ssl.getCloseNotifyFlushTimeout()).\n+                        closeNotifyReadTimeout(ssl.getCloseNotifyReadTimeout());\n+            });\n+        }\n+\n+        if (properties.isWiretap()) {\n+            httpClient = httpClient.wiretap(true);\n+        }\n+\n+        return httpClient;\n+    }\n }"}]}