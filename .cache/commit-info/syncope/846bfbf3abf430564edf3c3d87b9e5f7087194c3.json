{"sha":"846bfbf3abf430564edf3c3d87b9e5f7087194c3","node_id":"C_kwDOJfYA1toAKDg0NmJmYmYzYWJmNDMwNTY0ZWRmM2MzZDg3YjllNWY3MDg3MTk0YzM","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-11-08T10:57:16Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-11-08T10:57:16Z"},"message":"[SYNCOPE-1697] Better support to find actual CommandArgs class","tree":{"sha":"1f131567bd52bd56787a919116e3d78944a56253","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1f131567bd52bd56787a919116e3d78944a56253"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/846bfbf3abf430564edf3c3d87b9e5f7087194c3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/846bfbf3abf430564edf3c3d87b9e5f7087194c3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/846bfbf3abf430564edf3c3d87b9e5f7087194c3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/846bfbf3abf430564edf3c3d87b9e5f7087194c3/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"309d6ef9682612ce700d0caa60c13e68350bb007","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/309d6ef9682612ce700d0caa60c13e68350bb007","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/309d6ef9682612ce700d0caa60c13e68350bb007"}],"stats":{"total":31,"additions":26,"deletions":5},"files":[{"sha":"ea8e1455a3c6ba2da0c948553b8557ac16b95ff2","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/implementation/ImplementationManager.java","status":"modified","additions":26,"deletions":5,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/846bfbf3abf430564edf3c3d87b9e5f7087194c3/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fimplementation%2FImplementationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/846bfbf3abf430564edf3c3d87b9e5f7087194c3/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fimplementation%2FImplementationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fimplementation%2FImplementationManager.java?ref=846bfbf3abf430564edf3c3d87b9e5f7087194c3","patch":"@@ -21,6 +21,7 @@\n import groovy.lang.GroovyClassLoader;\n import java.lang.reflect.Modifier;\n import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n@@ -35,6 +36,7 @@\n import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n+import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n@@ -184,19 +186,38 @@ public static Optional<PushCorrelationRule> buildPushCorrelationRule(\n         }\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    private static Class<? extends CommandArgs> findCommandArgsClass(final Type type) {\n+        if (type.getTypeName().startsWith(\n+                ImplementationTypesHolder.getInstance().getValues().get(IdRepoImplementationType.COMMAND) + \"<\")) {\n+\n+            return (Class<? extends CommandArgs>) ((ParameterizedType) type).getActualTypeArguments()[0];\n+        }\n+\n+        if (type instanceof Class) {\n+            for (Type i : ((Class) type).getGenericInterfaces()) {\n+                Class<? extends CommandArgs> r = findCommandArgsClass(i);\n+                if (r != null) {\n+                    return r;\n+                }\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n     public static CommandArgs emptyArgs(final Implementation impl) throws Exception {\n         if (!IdRepoImplementationType.COMMAND.equals(impl.getType())) {\n             throw new IllegalArgumentException(\"This method can be only called on implementations\");\n         }\n \n         Class<Object> commandClass = getClass(impl).getLeft();\n \n-        @SuppressWarnings(\"unchecked\")\n-        Class<? extends CommandArgs> commandArgsClass =\n-                (Class<? extends CommandArgs>) (((ParameterizedType) commandClass.getGenericInterfaces()[0]).\n-                        getActualTypeArguments()[0]);\n+        Class<? extends CommandArgs> commandArgsClass = findCommandArgsClass(commandClass);\n+        if (commandArgsClass != null\n+                && (commandArgsClass.getEnclosingClass() == null\n+                || Modifier.isStatic(commandArgsClass.getModifiers()))) {\n \n-        if (commandArgsClass.getEnclosingClass() == null || Modifier.isStatic(commandArgsClass.getModifiers())) {\n             return commandArgsClass.getDeclaredConstructor().newInstance();\n         }\n "}]}