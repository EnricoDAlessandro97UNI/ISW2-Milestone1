{"sha":"7bb3e38f11a22d09e0e3d3f30939068ddbefef06","node_id":"C_kwDOJfYA1toAKDdiYjNlMzhmMTFhMjJkMDllMGUzZDNmMzA5MzkwNjhkZGJlZmVmMDY","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2023-03-15T16:37:39Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-03-15T16:45:25Z"},"message":"[SYNCOPE-1740] Introducing UsernameAttributeProviderConf (#426)","tree":{"sha":"03a003e7a2f53dc65dd67621d0ac0e2dae17899c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/03a003e7a2f53dc65dd67621d0ac0e2dae17899c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7bb3e38f11a22d09e0e3d3f30939068ddbefef06","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7bb3e38f11a22d09e0e3d3f30939068ddbefef06","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7bb3e38f11a22d09e0e3d3f30939068ddbefef06","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"3106f99013a684867f64a59544e5c21f91811aca","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3106f99013a684867f64a59544e5c21f91811aca","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3106f99013a684867f64a59544e5c21f91811aca"}],"stats":{"total":953,"additions":821,"deletions":132},"files":[{"sha":"b6c1f4492e75831c4681eb4d09dec8e33d954104","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/clientapps/ClientAppDirectoryPanel.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -128,6 +128,21 @@ public void onClick(final AjaxRequestTarget target, final ClientAppTO ignore) {\n             }\n         }, ActionLink.ActionType.EDIT, AMEntitlement.CLIENTAPP_UPDATE);\n \n+        panel.add(new ActionLink<>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final ClientAppTO ignore) {\n+                model.setObject(ClientAppRestClient.read(type, model.getObject().getKey()));\n+                modal.setContent(new UsernameAttributeProviderModalPanelBuilder<>(\n+                        type, model.getObject(), modal, pageRef).build(actualId, 1, AjaxWizard.Mode.EDIT));\n+                modal.header(new Model<>(getString(\"usernameAttributeProviderConf.title\", model)));\n+                modal.show(true);\n+                target.add(modal);\n+            }\n+        }, ActionLink.ActionType.COMPOSE, AMEntitlement.CLIENTAPP_UPDATE);\n+\n         panel.add(new ActionLink<>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;"},{"sha":"62a31da3a5716162dc18fa0a358654efe2c794c4","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/clientapps/ClientAppModalPanelBuilder.java","status":"modified","additions":16,"deletions":2,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppModalPanelBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppModalPanelBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppModalPanelBuilder.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -186,6 +186,22 @@ protected Iterator<String> getChoices(final String input) {\n                     \"field\", \"logo\",\n                     new PropertyModel<>(clientAppTO, \"logo\"), false));\n \n+            fields.add(new AjaxTextFieldPanel(\n+                    \"field\", \"theme\",\n+                    new PropertyModel<>(clientAppTO, \"theme\"), false));\n+\n+            AjaxTextFieldPanel informationUrl = new AjaxTextFieldPanel(\n+                    \"field\", \"informationUrl\",\n+                    new PropertyModel<>(clientAppTO, \"informationUrl\"), false);\n+            informationUrl.addValidator(new UrlValidator());\n+            fields.add(informationUrl);\n+\n+            AjaxTextFieldPanel privacyUrl = new AjaxTextFieldPanel(\n+                    \"field\", \"privacyUrl\",\n+                    new PropertyModel<>(clientAppTO, \"privacyUrl\"), false);\n+            privacyUrl.addValidator(new UrlValidator());\n+            fields.add(privacyUrl);\n+\n             AjaxDropDownChoicePanel<String> accessPolicy = new AjaxDropDownChoicePanel<>(\n                     \"field\", \"accessPolicy\", new PropertyModel<>(clientAppTO, \"accessPolicy\"), false);\n             accessPolicy.setChoiceRenderer(new PolicyRenderer(accessPolicies.getObject()));\n@@ -208,8 +224,6 @@ protected Iterator<String> getChoices(final String input) {\n             ((AbstractSingleSelectChoice<?>) authPolicy.getField()).setNullValid(true);\n             fields.add(authPolicy);\n \n-            fields.add(new AjaxTextFieldPanel(\"field\", \"theme\", new PropertyModel<>(clientAppTO, \"theme\"), false));\n-\n             switch (type) {\n                 case CASSP:\n                     fields.add(new AjaxTextFieldPanel("},{"sha":"c70d211529f31c1a26fe88a8a30ea8286d68a79a","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/clientapps/UsernameAttributeProviderModalPanelBuilder.java","status":"added","additions":150,"deletions":0,"changes":150,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FUsernameAttributeProviderModalPanelBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FUsernameAttributeProviderModalPanelBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FUsernameAttributeProviderModalPanelBuilder.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.clientapps;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.SyncopeWebApplication;\n+import org.apache.syncope.client.console.panels.AbstractModalPanel;\n+import org.apache.syncope.client.console.panels.BeanPanel;\n+import org.apache.syncope.client.console.rest.ClientAppRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n+import org.apache.syncope.client.ui.commons.panels.WizardModalPanel;\n+import org.apache.syncope.client.ui.commons.wizards.AbstractModalPanelBuilder;\n+import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n+import org.apache.syncope.common.lib.clientapps.UsernameAttributeProviderConf;\n+import org.apache.syncope.common.lib.to.ClientAppTO;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxEventBehavior;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.springframework.util.ClassUtils;\n+\n+public class UsernameAttributeProviderModalPanelBuilder<T extends ClientAppTO> extends AbstractModalPanelBuilder<T> {\n+\n+    private static final long serialVersionUID = -4106998301911573852L;\n+\n+    private final LoadableDetachableModel<List<String>> usernameAttributeProviderConfs =\n+            new LoadableDetachableModel<>() {\n+\n+        private static final long serialVersionUID = 5275935387613157437L;\n+\n+        @Override\n+        protected List<String> load() {\n+            return SyncopeWebApplication.get().getLookup().getClasses(UsernameAttributeProviderConf.class).stream().\n+                    map(Class::getName).sorted().collect(Collectors.toList());\n+        }\n+    };\n+\n+    private final BaseModal<T> modal;\n+\n+    private final ClientAppType type;\n+\n+    public UsernameAttributeProviderModalPanelBuilder(\n+            final ClientAppType type, final T defaultItem, final BaseModal<T> modal, final PageReference pageRef) {\n+\n+        super(defaultItem, pageRef);\n+        this.type = type;\n+        this.modal = modal;\n+    }\n+\n+    @Override\n+    public WizardModalPanel<T> build(final String id, final int index, final AjaxWizard.Mode mode) {\n+        return new Profile(newModelObject(), modal, pageRef);\n+    }\n+\n+    private class Profile extends AbstractModalPanel<T> {\n+\n+        private static final long serialVersionUID = 7647959917047450318L;\n+\n+        private final T clientAppTO;\n+\n+        Profile(final T clientAppTO, final BaseModal<T> modal, final PageReference pageRef) {\n+            super(modal, pageRef);\n+            modal.setFormModel(clientAppTO);\n+\n+            this.clientAppTO = clientAppTO;\n+\n+            AjaxDropDownChoicePanel<String> conf = new AjaxDropDownChoicePanel<>(\n+                    \"conf\", \"conf\", new Model<>());\n+            Optional.ofNullable(clientAppTO.getUsernameAttributeProviderConf()).\n+                    ifPresent(uapc -> conf.setModelObject(uapc.getClass().getName()));\n+            conf.setChoices(usernameAttributeProviderConfs.getObject());\n+            conf.setNullValid(true);\n+            add(conf);\n+\n+            PropertyModel<UsernameAttributeProviderConf> beanPanelModel =\n+                    new PropertyModel<>(clientAppTO, \"usernameAttributeProviderConf\");\n+            BeanPanel<UsernameAttributeProviderConf> bean = new BeanPanel<>(\n+                    \"bean\",\n+                    beanPanelModel,\n+                    pageRef,\n+                    Constants.NAME_FIELD_NAME,\n+                    \"reportlet\");\n+            add(bean.setRenderBodyOnly(false));\n+\n+            conf.add(new AjaxEventBehavior(Constants.ON_CHANGE) {\n+\n+                private static final long serialVersionUID = -7133385027739964990L;\n+\n+                @SuppressWarnings(\"unchecked\")\n+                @Override\n+                protected void onEvent(final AjaxRequestTarget target) {\n+                    if (conf.getModelObject() == null) {\n+                        beanPanelModel.setObject(null);\n+                    } else {\n+                        try {\n+                            Class<? extends UsernameAttributeProviderConf> clazz =\n+                                    (Class<? extends UsernameAttributeProviderConf>) ClassUtils.resolveClassName(\n+                                            conf.getModelObject(), ClassUtils.getDefaultClassLoader());\n+\n+                            beanPanelModel.setObject(clazz.getConstructor().newInstance());\n+                        } catch (Exception e) {\n+                            LOG.error(\"Cannot instantiate {}\", conf.getModelObject(), e);\n+                        }\n+                    }\n+\n+                    target.add(bean);\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onSubmit(final AjaxRequestTarget target) {\n+            try {\n+                ClientAppRestClient.update(type, clientAppTO);\n+\n+                SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n+                UsernameAttributeProviderModalPanelBuilder.Profile.this.modal.close(target);\n+            } catch (Exception e) {\n+                LOG.error(\"While creating/updating clientApp\", e);\n+                SyncopeConsoleSession.get().onException(e);\n+            }\n+            ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+        }\n+    }\n+}"},{"sha":"f995e5de2ad217c4fadbc7d60f8923a5b0037993","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/init/AMClassPathScanImplementationContributor.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FAMClassPathScanImplementationContributor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FAMClassPathScanImplementationContributor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FAMClassPathScanImplementationContributor.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -21,6 +21,7 @@\n import java.util.Optional;\n import org.apache.syncope.common.lib.attr.AttrRepoConf;\n import org.apache.syncope.common.lib.auth.AuthModuleConf;\n+import org.apache.syncope.common.lib.clientapps.UsernameAttributeProviderConf;\n import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n@@ -38,6 +39,7 @@ public void extend(final ClassPathScanningCandidateComponentProvider scanner) {\n         scanner.addIncludeFilter(new AssignableTypeFilter(AccessPolicyConf.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(AttrReleasePolicyConf.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(AuthPolicyConf.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(UsernameAttributeProviderConf.class));\n     }\n \n     @Override\n@@ -57,6 +59,9 @@ public Optional<String> getLabel(final Class<?> clazz) {\n         if (AuthPolicyConf.class.isAssignableFrom(clazz)) {\n             return Optional.of(AuthPolicyConf.class.getName());\n         }\n+        if (UsernameAttributeProviderConf.class.isAssignableFrom(clazz)) {\n+            return Optional.of(UsernameAttributeProviderConf.class.getName());\n+        }\n         return Optional.empty();\n     }\n }"},{"sha":"b07475b0a4ea4113aa5733c94f288eaa372e79f5","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/wizards/AuthModuleWizardBuilder.java","status":"modified","additions":11,"deletions":14,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -52,24 +52,21 @@ public class AuthModuleWizardBuilder extends BaseAjaxWizardBuilder<AuthModuleTO>\n \n     private static final long serialVersionUID = -6163230263062920394L;\n \n-    protected final LoadableDetachableModel<List<String>> authModuleConfs;\n+    protected final LoadableDetachableModel<List<String>> authModuleConfs = new LoadableDetachableModel<>() {\n+\n+        private static final long serialVersionUID = 5275935387613157437L;\n+\n+        @Override\n+        protected List<String> load() {\n+            return SyncopeWebApplication.get().getLookup().getClasses(AuthModuleConf.class).stream().\n+                    map(Class::getName).sorted().collect(Collectors.toList());\n+        }\n+    };\n \n     protected Model<Class<? extends AuthModuleConf>> authModuleConfClass = Model.of();\n \n     public AuthModuleWizardBuilder(final AuthModuleTO defaultItem, final PageReference pageRef) {\n-\n         super(defaultItem, pageRef);\n-\n-        authModuleConfs = new LoadableDetachableModel<>() {\n-\n-            private static final long serialVersionUID = 5275935387613157437L;\n-\n-            @Override\n-            protected List<String> load() {\n-                return SyncopeWebApplication.get().getLookup().getClasses(AuthModuleConf.class).stream().\n-                        map(Class::getName).sorted().collect(Collectors.toList());\n-            }\n-        };\n     }\n \n     @Override\n@@ -152,7 +149,7 @@ protected void onEvent(final AjaxRequestTarget target) {\n                         authModule.setConf(clazz.getConstructor().newInstance());\n                         authModuleConfClass.setObject(clazz);\n                     } catch (Exception e) {\n-                        LOG.error(\"During deserialization\", e);\n+                        LOG.error(\"Cannot instantiate {}\", conf.getModelObject(), e);\n                     }\n                 }\n             });"},{"sha":"c238d9877bc1b651c8e2c04a9dd398ce5663c615","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/clientapps/ClientAppDirectoryPanel.properties","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel.properties?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -59,3 +59,8 @@ properties.title=Properties for ${name}\n type_extensions.title=properties\n bypassApprovalPrompt=Bypass Approval Prompt\n scopes=Scopes\n+logo=Logo\n+informationUrl=Information URL\n+privacyUrl=Privacy URL\n+compose.title=username attribute provider\n+usernameAttributeProviderConf.title=Username Attribute Provider for ${name}"},{"sha":"a32e6c062653508f9f86cb3de29903dcaf95d859","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/clientapps/ClientAppDirectoryPanel_fr_CA.properties","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_fr_CA.properties?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -59,3 +59,8 @@ properties.title=Properties for ${name}\n type_extensions.title=properties\n bypassApprovalPrompt=Bypass Approval Prompt\n scopes=Scopes\n+logo=Logo\n+informationUrl=Information URL\n+privacyUrl=Privacy URL\n+compose.title=username attribute provider\n+usernameAttributeProviderConf.title=Username Attribute Provider for ${name}"},{"sha":"61a171ccef599cb7a82bd546294041b875dcee63","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/clientapps/ClientAppDirectoryPanel_it.properties","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_it.properties?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -59,3 +59,8 @@ properties.title=Propriet\\u00e0 di ${name}\n type_extensions.title=propriet\\u00e0\n bypassApprovalPrompt=Salta richiesta approvazione\n scopes=Scope\n+logo=Logo\n+informationUrl=URL informativa\n+privacyUrl=URL privacy\n+compose.title=username attribute provider\n+usernameAttributeProviderConf.title=Username Attribute Provider per ${name}"},{"sha":"670175063f07eabeb9dfeb690e73cce3c7971ac2","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/clientapps/ClientAppDirectoryPanel_ja.properties","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_ja.properties?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -59,3 +59,8 @@ properties.title=Properties for ${name}\n type_extensions.title=properties\n bypassApprovalPrompt=Bypass Approval Prompt\n scopes=Scopes\n+logo=Logo\n+informationUrl=Information URL\n+privacyUrl=Privacy URL\n+compose.title=username attribute provider\n+usernameAttributeProviderConf.title=Username Attribute Provider for ${name}"},{"sha":"c238d9877bc1b651c8e2c04a9dd398ce5663c615","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/clientapps/ClientAppDirectoryPanel_pt_BR.properties","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_pt_BR.properties?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -59,3 +59,8 @@ properties.title=Properties for ${name}\n type_extensions.title=properties\n bypassApprovalPrompt=Bypass Approval Prompt\n scopes=Scopes\n+logo=Logo\n+informationUrl=Information URL\n+privacyUrl=Privacy URL\n+compose.title=username attribute provider\n+usernameAttributeProviderConf.title=Username Attribute Provider for ${name}"},{"sha":"a88ccce74699d2b00383b09ab0fcd725ae21b74a","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/clientapps/ClientAppDirectoryPanel_ru.properties","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_ru.properties?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -60,3 +60,8 @@ properties.title=Properties for ${name}\n type_extensions.title=properties\n bypassApprovalPrompt=Bypass Approval Prompt\n scopes=Scopes\n+logo=Logo\n+informationUrl=Information URL\n+privacyUrl=Privacy URL\n+compose.title=username attribute provider\n+usernameAttributeProviderConf.title=Username Attribute Provider for ${name}"},{"sha":"d86e0019271c66aab8583b6173d0f42e8559f24d","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/clientapps/UsernameAttributeProviderModalPanelBuilder$Profile.html","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FUsernameAttributeProviderModalPanelBuilder%24Profile.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FUsernameAttributeProviderModalPanelBuilder%24Profile.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FUsernameAttributeProviderModalPanelBuilder%24Profile.html?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -0,0 +1,24 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div class=\"form-group\"><span wicket:id=\"conf\">[conf]</span></div>\n+    <span wicket:id=\"bean\"/>\n+  </wicket:panel>\n+</html>"},{"sha":"bdbb57d96398fb8e6047fafe117abf1886b43404","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java","status":"modified","additions":3,"deletions":59,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -34,18 +34,11 @@\n import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.time.DateFormatUtils;\n-import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.SyncopeWebApplication;\n-import org.apache.syncope.client.console.panels.search.AnyObjectSearchPanel;\n-import org.apache.syncope.client.console.panels.search.GroupSearchPanel;\n-import org.apache.syncope.client.console.panels.search.SearchClause;\n-import org.apache.syncope.client.console.panels.search.SearchUtils;\n-import org.apache.syncope.client.console.panels.search.UserSearchPanel;\n import org.apache.syncope.client.console.rest.SchemaRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n-import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.ui.commons.DateOps;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDateTimeFieldPanel;\n@@ -55,8 +48,6 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxSpinnerFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.FieldPanel;\n-import org.apache.syncope.common.lib.report.SearchCondition;\n-import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.PageReference;\n@@ -75,8 +66,6 @@\n import org.apache.wicket.model.util.ListModel;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.BeanWrapper;\n-import org.springframework.beans.PropertyAccessorFactory;\n import org.springframework.util.ClassUtils;\n import org.springframework.util.ReflectionUtils;\n \n@@ -88,24 +77,10 @@\n \n     private final List<String> excluded;\n \n-    private final Map<String, Pair<AbstractFiqlSearchConditionBuilder<?, ?, ?>, List<SearchClause>>> sCondWrapper;\n-\n     public BeanPanel(final String id, final IModel<T> bean, final PageReference pageRef, final String... excluded) {\n-        this(id, bean, null, pageRef, excluded);\n-    }\n-\n-    public BeanPanel(\n-            final String id,\n-            final IModel<T> bean,\n-            final Map<String, Pair<AbstractFiqlSearchConditionBuilder<?, ?, ?>, List<SearchClause>>> sCondWrapper,\n-            final PageReference pageRef,\n-            final String... excluded) {\n-\n         super(id, bean);\n         setOutputMarkupId(true);\n \n-        this.sCondWrapper = sCondWrapper;\n-\n         this.excluded = new ArrayList<>(List.of(excluded));\n         this.excluded.add(\"serialVersionUID\");\n         this.excluded.add(\"class\");\n@@ -157,7 +132,7 @@ protected String createRelAttribute() {\n                 item.replace(fragment);\n             }\n \n-            @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+            @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n             @Override\n             protected void populateItem(final ListItem<String> item) {\n                 item.add(new Fragment(\"required\", \"emptyFragment\", this));\n@@ -172,40 +147,9 @@ protected void populateItem(final ListItem<String> item) {\n                     return;\n                 }\n \n-                BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(bean.getObject());\n-\n                 Panel panel;\n \n-                SearchCondition scondAnnot = field.getAnnotation(SearchCondition.class);\n-                if (scondAnnot != null) {\n-                    String fiql = (String) wrapper.getPropertyValue(fieldName);\n-\n-                    List<SearchClause> clauses = SearchUtils.getSearchClauses(fiql);\n-\n-                    AbstractFiqlSearchConditionBuilder<?, ?, ?> builder;\n-                    switch (scondAnnot.type()) {\n-                        case \"USER\":\n-                            panel = new UserSearchPanel.Builder(\n-                                    new ListModel<>(clauses), pageRef).required(false).build(\"value\");\n-                            builder = SyncopeClient.getUserSearchConditionBuilder();\n-                            break;\n-\n-                        case \"GROUP\":\n-                            panel = new GroupSearchPanel.Builder(\n-                                    new ListModel<>(clauses), pageRef).required(false).build(\"value\");\n-                            builder = SyncopeClient.getGroupSearchConditionBuilder();\n-                            break;\n-\n-                        default:\n-                            panel = new AnyObjectSearchPanel.Builder(\n-                                    scondAnnot.type(),\n-                                    new ListModel<>(clauses), pageRef).required(false).build(\"value\");\n-                            builder = SyncopeClient.getAnyObjectSearchConditionBuilder(scondAnnot.type());\n-                    }\n-\n-                    Optional.ofNullable(BeanPanel.this.sCondWrapper).\n-                            ifPresent(scw -> scw.put(fieldName, Pair.of(builder, clauses)));\n-                } else if (List.class.equals(field.getType())) {\n+                if (List.class.equals(field.getType())) {\n                     Class<?> listItemType = field.getGenericType() instanceof ParameterizedType\n                             ? (Class<?>) ((ParameterizedType) field.getGenericType()).getActualTypeArguments()[0]\n                             : String.class;\n@@ -278,7 +222,7 @@ protected void populateItem(final ListItem<String> item) {\n \n                 item.add(panel.setRenderBodyOnly(true));\n             }\n-        }.setReuseItems(true).setOutputMarkupId(true));\n+        }.setReuseItems(false));\n     }\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })"},{"sha":"8eb63d4ef74446032d84c2748aefda6843d125d6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/AttrWizardBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrWizardBuilder.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -30,7 +30,7 @@\n \n public abstract class AttrWizardBuilder extends BaseAjaxWizardBuilder<Attr> {\n \n-    private static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = 7618745848468848923L;\n \n     public AttrWizardBuilder(final Attr defaultItem, final PageReference pageRef) {\n         super(defaultItem, pageRef);"},{"sha":"86fbde228271c371fb2a81832cb2166cbc5b683e","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/OAuth20AuthModuleConf.java","status":"modified","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOAuth20AuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOAuth20AuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOAuth20AuthModuleConf.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.common.lib.auth;\n \n-import java.util.LinkedHashMap;\n import java.util.Map;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n \n@@ -30,8 +29,6 @@ public class OAuth20AuthModuleConf extends AbstractOIDCAuthModuleConf implements\n \n     protected String profileUrl;\n \n-    protected Map<String, String> profileAttrs = new LinkedHashMap<>();\n-\n     protected boolean withState;\n \n     protected String profileVerb = \"POST\";\n@@ -44,14 +41,6 @@ public void setAuthUrl(final String authUrl) {\n         this.authUrl = authUrl;\n     }\n \n-    public Map<String, String> getProfileAttrs() {\n-        return profileAttrs;\n-    }\n-\n-    public void setProfileAttrs(final Map<String, String> profileAttrs) {\n-        this.profileAttrs = profileAttrs;\n-    }\n-\n     public boolean isWithState() {\n         return withState;\n     }"},{"sha":"101f145a895dc199a02fc973bccded7a9cc00eef","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/clientapps/AnonymousUsernameAttributeProviderConf.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fclientapps%2FAnonymousUsernameAttributeProviderConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fclientapps%2FAnonymousUsernameAttributeProviderConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fclientapps%2FAnonymousUsernameAttributeProviderConf.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.clientapps;\n+\n+import java.util.Objects;\n+import org.apache.syncope.common.lib.types.PersistentIdGenerator;\n+\n+public class AnonymousUsernameAttributeProviderConf implements UsernameAttributeProviderConf {\n+\n+    private static final long serialVersionUID = -4762223354637243358L;\n+\n+    private PersistentIdGenerator persistentIdGenerator = PersistentIdGenerator.SHIBBOLETH;\n+\n+    public PersistentIdGenerator getPersistentIdGenerator() {\n+        return persistentIdGenerator;\n+    }\n+\n+    public void setPersistentIdGenerator(final PersistentIdGenerator persistentIdGenerator) {\n+        this.persistentIdGenerator = persistentIdGenerator;\n+    }\n+\n+    @Override\n+    public void map(final Mapper mapper) {\n+        mapper.map(this);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 7;\n+        hash = 97 * hash + Objects.hashCode(this.persistentIdGenerator);\n+        return hash;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final AnonymousUsernameAttributeProviderConf other =\n+                (AnonymousUsernameAttributeProviderConf) obj;\n+        return Objects.equals(this.persistentIdGenerator, other.persistentIdGenerator);\n+    }\n+}"},{"sha":"b72113a9cfba6ee5518c3259616211ccb6dab8e7","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/clientapps/DefaultUsernameAttributeProviderConf.java","status":"renamed","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fclientapps%2FDefaultUsernameAttributeProviderConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fclientapps%2FDefaultUsernameAttributeProviderConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fclientapps%2FDefaultUsernameAttributeProviderConf.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -16,16 +16,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.report;\n+package org.apache.syncope.common.lib.clientapps;\n \n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n+public class DefaultUsernameAttributeProviderConf implements UsernameAttributeProviderConf {\n \n-@Target({ ElementType.FIELD })\n-@Retention(RetentionPolicy.RUNTIME)\n-public @interface SearchCondition {\n+    private static final long serialVersionUID = 4315599812817709524L;\n \n-    String type() default \"USER\";\n+    @Override\n+    public void map(final Mapper mapper) {\n+        mapper.map(this);\n+    }\n }","previous_filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/report/SearchCondition.java"},{"sha":"1c00786bd70635d398d36d110e3e5c599b41a15f","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/clientapps/GroovyUsernameAttributeProviderConf.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fclientapps%2FGroovyUsernameAttributeProviderConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fclientapps%2FGroovyUsernameAttributeProviderConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fclientapps%2FGroovyUsernameAttributeProviderConf.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.clientapps;\n+\n+import java.util.Objects;\n+\n+public class GroovyUsernameAttributeProviderConf implements UsernameAttributeProviderConf {\n+\n+    private static final long serialVersionUID = -4762223354637243358L;\n+\n+    private String groovyScript;\n+\n+    public String getGroovyScript() {\n+        return groovyScript;\n+    }\n+\n+    public void setGroovyScript(final String groovyScript) {\n+        this.groovyScript = groovyScript;\n+    }\n+\n+    @Override\n+    public void map(final Mapper mapper) {\n+        mapper.map(this);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 7;\n+        hash = 97 * hash + Objects.hashCode(this.groovyScript);\n+        return hash;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final GroovyUsernameAttributeProviderConf other =\n+                (GroovyUsernameAttributeProviderConf) obj;\n+        return Objects.equals(this.groovyScript, other.groovyScript);\n+    }\n+}"},{"sha":"9cf00f514a85b163f2170079ba6b2294cc223aaa","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/clientapps/PairwiseOidcUsernameAttributeProviderConf.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fclientapps%2FPairwiseOidcUsernameAttributeProviderConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fclientapps%2FPairwiseOidcUsernameAttributeProviderConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fclientapps%2FPairwiseOidcUsernameAttributeProviderConf.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.clientapps;\n+\n+import java.util.Objects;\n+import org.apache.syncope.common.lib.types.PersistentIdGenerator;\n+\n+public class PairwiseOidcUsernameAttributeProviderConf implements UsernameAttributeProviderConf {\n+\n+    private static final long serialVersionUID = -4762223354637243358L;\n+\n+    private PersistentIdGenerator persistentIdGenerator = PersistentIdGenerator.OIDC;\n+\n+    public PersistentIdGenerator getPersistentIdGenerator() {\n+        return persistentIdGenerator;\n+    }\n+\n+    public void setPersistentIdGenerator(final PersistentIdGenerator persistentIdGenerator) {\n+        this.persistentIdGenerator = persistentIdGenerator;\n+    }\n+\n+    @Override\n+    public void map(final Mapper mapper) {\n+        mapper.map(this);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 7;\n+        hash = 97 * hash + Objects.hashCode(this.persistentIdGenerator);\n+        return hash;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final PairwiseOidcUsernameAttributeProviderConf other =\n+                (PairwiseOidcUsernameAttributeProviderConf) obj;\n+        return Objects.equals(this.persistentIdGenerator, other.persistentIdGenerator);\n+    }\n+}"},{"sha":"4f9c4121bd7b43933b7ce020f92f021da2a7cad6","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/clientapps/PrincipalAttributeUsernameAttributeProviderConf.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fclientapps%2FPrincipalAttributeUsernameAttributeProviderConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fclientapps%2FPrincipalAttributeUsernameAttributeProviderConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fclientapps%2FPrincipalAttributeUsernameAttributeProviderConf.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.clientapps;\n+\n+import java.util.Objects;\n+\n+public class PrincipalAttributeUsernameAttributeProviderConf implements UsernameAttributeProviderConf {\n+\n+    private static final long serialVersionUID = -4762223354637243358L;\n+\n+    private String usernameAttribute;\n+\n+    public String getUsernameAttribute() {\n+        return usernameAttribute;\n+    }\n+\n+    public void setUsernameAttribute(final String usernameAttribute) {\n+        this.usernameAttribute = usernameAttribute;\n+    }\n+\n+    @Override\n+    public void map(final Mapper mapper) {\n+        mapper.map(this);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 7;\n+        hash = 97 * hash + Objects.hashCode(this.usernameAttribute);\n+        return hash;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final PrincipalAttributeUsernameAttributeProviderConf other =\n+                (PrincipalAttributeUsernameAttributeProviderConf) obj;\n+        return Objects.equals(this.usernameAttribute, other.usernameAttribute);\n+    }\n+}"},{"sha":"d349670d5a447724f030d316eadc2abd177e6163","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/clientapps/UsernameAttributeProviderConf.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fclientapps%2FUsernameAttributeProviderConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fclientapps%2FUsernameAttributeProviderConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fclientapps%2FUsernameAttributeProviderConf.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.clientapps;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import org.apache.syncope.common.lib.BaseBean;\n+\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"_class\")\n+public interface UsernameAttributeProviderConf extends BaseBean {\n+\n+    interface Mapper {\n+\n+        void map(AnonymousUsernameAttributeProviderConf conf);\n+\n+        void map(DefaultUsernameAttributeProviderConf conf);\n+\n+        void map(GroovyUsernameAttributeProviderConf conf);\n+\n+        void map(PairwiseOidcUsernameAttributeProviderConf conf);\n+\n+        void map(PrincipalAttributeUsernameAttributeProviderConf conf);\n+    }\n+\n+    void map(Mapper mapper);\n+}"},{"sha":"b25a8b9dfc603eac7760447eacced61ad4711871","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/ClientAppTO.java","status":"modified","additions":49,"deletions":12,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FClientAppTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FClientAppTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FClientAppTO.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -30,6 +30,7 @@\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.clientapps.UsernameAttributeProviderConf;\n \n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = \"_class\")\n @JsonPropertyOrder(value = { \"_class\", \"key\", \"description\" })\n@@ -55,14 +56,20 @@ public abstract class ClientAppTO implements NamedEntityTO {\n \n     private String logo;\n \n+    private String theme;\n+\n+    private String informationUrl;\n+\n+    private String privacyUrl;\n+\n+    private UsernameAttributeProviderConf usernameAttributeProviderConf;\n+\n     private String authPolicy;\n \n     private String accessPolicy;\n \n     private String attrReleasePolicy;\n \n-    private String theme;\n-\n     private final List<Attr> properties = new ArrayList<>();\n \n     @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED)\n@@ -96,14 +103,6 @@ public void setAuthPolicy(final String authPolicy) {\n         this.authPolicy = authPolicy;\n     }\n \n-    public String getTheme() {\n-        return theme;\n-    }\n-\n-    public void setTheme(final String theme) {\n-        this.theme = theme;\n-    }\n-\n     @Override\n     public String getKey() {\n         return key;\n@@ -157,6 +156,38 @@ public void setLogo(final String logo) {\n         this.logo = logo;\n     }\n \n+    public String getTheme() {\n+        return theme;\n+    }\n+\n+    public void setTheme(final String theme) {\n+        this.theme = theme;\n+    }\n+\n+    public String getInformationUrl() {\n+        return informationUrl;\n+    }\n+\n+    public void setInformationUrl(final String informationUrl) {\n+        this.informationUrl = informationUrl;\n+    }\n+\n+    public String getPrivacyUrl() {\n+        return privacyUrl;\n+    }\n+\n+    public void setPrivacyUrl(final String privacyUrl) {\n+        this.privacyUrl = privacyUrl;\n+    }\n+\n+    public UsernameAttributeProviderConf getUsernameAttributeProviderConf() {\n+        return usernameAttributeProviderConf;\n+    }\n+\n+    public void setUsernameAttributeProviderConf(final UsernameAttributeProviderConf usernameAttributeProviderConf) {\n+        this.usernameAttributeProviderConf = usernameAttributeProviderConf;\n+    }\n+\n     @JacksonXmlElementWrapper(localName = \"properties\")\n     @JacksonXmlProperty(localName = \"property\")\n     public List<Attr> getProperties() {\n@@ -173,10 +204,13 @@ public int hashCode() {\n                 .append(name)\n                 .append(description)\n                 .append(logo)\n+                .append(theme)\n+                .append(informationUrl)\n+                .append(privacyUrl)\n+                .append(usernameAttributeProviderConf)\n                 .append(authPolicy)\n                 .append(accessPolicy)\n                 .append(attrReleasePolicy)\n-                .append(theme)\n                 .append(properties)\n                 .toHashCode();\n     }\n@@ -201,10 +235,13 @@ public boolean equals(final Object obj) {\n                 .append(this.name, rhs.name)\n                 .append(this.description, rhs.description)\n                 .append(this.logo, rhs.logo)\n+                .append(this.theme, rhs.theme)\n+                .append(this.informationUrl, rhs.informationUrl)\n+                .append(this.privacyUrl, rhs.privacyUrl)\n+                .append(this.usernameAttributeProviderConf, rhs.usernameAttributeProviderConf)\n                 .append(this.authPolicy, rhs.authPolicy)\n                 .append(this.accessPolicy, rhs.accessPolicy)\n                 .append(this.attrReleasePolicy, rhs.attrReleasePolicy)\n-                .append(this.theme, rhs.theme)\n                 .append(this.properties, rhs.properties)\n                 .isEquals();\n     }"},{"sha":"f30c0818e03dc04d1ff1d02f22452df7aaf72767","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/PersistentIdGenerator.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPersistentIdGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPersistentIdGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPersistentIdGenerator.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+public enum PersistentIdGenerator {\n+    SHIBBOLETH,\n+    OIDC;\n+\n+}"},{"sha":"e82890ee0dce24372c76c79148670a96bb611203","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/am/ClientApp.java","status":"modified","additions":17,"deletions":4,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fam%2FClientApp.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.clientapps.UsernameAttributeProviderConf;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n@@ -44,6 +45,22 @@ public interface ClientApp extends Entity {\n \n     void setLogo(String logo);\n \n+    void setTheme(String name);\n+\n+    String getTheme();\n+\n+    String getInformationUrl();\n+\n+    void setInformationUrl(String informationUrl);\n+\n+    String getPrivacyUrl();\n+\n+    void setPrivacyUrl(String privacyUrl);\n+\n+    UsernameAttributeProviderConf getUsernameAttributeProviderConf();\n+\n+    void setUsernameAttributeProviderConf(UsernameAttributeProviderConf conf);\n+\n     AuthPolicy getAuthPolicy();\n \n     void setAuthPolicy(AuthPolicy policy);\n@@ -60,10 +77,6 @@ public interface ClientApp extends Entity {\n \n     void setRealm(Realm realm);\n \n-    void setTheme(String name);\n-\n-    String getTheme();\n-\n     List<Attr> getProperties();\n \n     void setProperties(List<Attr> properties);"},{"sha":"223c6b07193ae61c055ae94aa377059de3c63421","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -88,8 +88,7 @@ under the License.\n   <AuthModule id=\"DefaultU2FAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"U2F auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.U2FAuthModuleConf\",\"expireDevices\":40}'/>\n   <AuthModule id=\"DefaultOAuth20AuthModule\" description=\"OAuth20 auth module\" authModuleOrder=\"0\" \n-              jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.OAuth20AuthModuleConf\",\"clientName\":\"oauth20\",\"clientId\":\"OAUTH20\",\"clientSecret\":\"secret\",\"enabled\":true,\"customParams\":{},\"tokenUrl\":\"https://localhost/oauth2/token\",\"responseType\":\"code\",\"scope\":\"oauth test\",\"userIdAttribute\":\"username\",\"authUrl\":\"https://localhost/oauth2/auth\",\"profileUrl\":\"https://localhost/oauth2/profile\",\"profileAttrs\":{},\"withState\":false,\"profileVerb\":\"POST\"}' authModuleState=\"ACTIVE\"/>\n-\n+              jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.OAuth20AuthModuleConf\",\"clientName\":\"oauth20\",\"clientId\":\"OAUTH20\",\"clientSecret\":\"secret\",\"enabled\":true,\"customParams\":{},\"tokenUrl\":\"https://localhost/oauth2/token\",\"responseType\":\"code\",\"scope\":\"oauth test\",\"userIdAttribute\":\"username\",\"authUrl\":\"https://localhost/oauth2/auth\",\"profileUrl\":\"https://localhost/oauth2/profile\",\"withState\":false,\"profileVerb\":\"POST\"}' authModuleState=\"ACTIVE\"/>\n \n   <!-- Attribute repositories -->\n   <AttrRepo id=\"DefaultLDAPAttrRepo\" attrRepoState=\"ACTIVE\""},{"sha":"8a76bb9ed9de3f0715923d54abd2b077a7896c61","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/AbstractClientApp.java","status":"modified","additions":50,"deletions":13,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FAbstractClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FAbstractClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FAbstractClientApp.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -26,7 +26,9 @@\n import jakarta.persistence.MappedSuperclass;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.clientapps.UsernameAttributeProviderConf;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.am.ClientApp;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n@@ -53,15 +55,19 @@ public class AbstractClientApp extends AbstractGeneratedKeyEntity implements Cli\n     @Column(unique = true, nullable = false)\n     private Long clientAppId;\n \n-    @Column\n     private String description;\n \n-    @Column\n     private String logo;\n \n-    @Column\n+    @Lob\n+    private String usernameAttributeProviderConf;\n+\n     private String theme;\n \n+    private String informationUrl;\n+\n+    private String privacyUrl;\n+\n     @ManyToOne(fetch = FetchType.EAGER)\n     private JPARealm realm;\n \n@@ -117,6 +123,47 @@ public void setLogo(final String logo) {\n         this.logo = logo;\n     }\n \n+    @Override\n+    public String getTheme() {\n+        return theme;\n+    }\n+\n+    @Override\n+    public void setTheme(final String theme) {\n+        this.theme = theme;\n+    }\n+\n+    @Override\n+    public String getInformationUrl() {\n+        return informationUrl;\n+    }\n+\n+    @Override\n+    public void setInformationUrl(final String informationUrl) {\n+        this.informationUrl = informationUrl;\n+    }\n+\n+    @Override\n+    public String getPrivacyUrl() {\n+        return privacyUrl;\n+    }\n+\n+    @Override\n+    public void setPrivacyUrl(final String privacyUrl) {\n+        this.privacyUrl = privacyUrl;\n+    }\n+\n+    @Override\n+    public UsernameAttributeProviderConf getUsernameAttributeProviderConf() {\n+        return Optional.ofNullable(usernameAttributeProviderConf).\n+                map(conf -> POJOHelper.deserialize(conf, UsernameAttributeProviderConf.class)).orElse(null);\n+    }\n+\n+    @Override\n+    public void setUsernameAttributeProviderConf(final UsernameAttributeProviderConf conf) {\n+        this.usernameAttributeProviderConf = conf == null ? null : POJOHelper.serialize(conf);\n+    }\n+\n     @Override\n     public JPAAuthPolicy getAuthPolicy() {\n         return authPolicy;\n@@ -161,16 +208,6 @@ public void setRealm(final Realm realm) {\n         this.realm = (JPARealm) realm;\n     }\n \n-    @Override\n-    public String getTheme() {\n-        return theme;\n-    }\n-\n-    @Override\n-    public void setTheme(final String theme) {\n-        this.theme = theme;\n-    }\n-\n     @Override\n     public List<Attr> getProperties() {\n         return properties == null"},{"sha":"a2f86a8566782a8c7345ce72587dda949ddaf97b","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -88,7 +88,7 @@ under the License.\n   <AuthModule id=\"DefaultU2FAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"U2F auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.U2FAuthModuleConf\",\"expireDevices\":40}'/>\n   <AuthModule id=\"DefaultOAuth20AuthModule\" description=\"OAuth20 auth module\" authModuleOrder=\"0\"\n-              jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.OAuth20AuthModuleConf\",\"clientName\":\"oauth20\",\"clientId\":\"OAUTH20\",\"clientSecret\":\"secret\",\"enabled\":true,\"customParams\":{},\"tokenUrl\":\"https://localhost/oauth2/token\",\"responseType\":\"code\",\"scope\":\"oauth test\",\"userIdAttribute\":\"username\",\"authUrl\":\"https://localhost/oauth2/auth\",\"profileUrl\":\"https://localhost/oauth2/profile\",\"profileAttrs\":{},\"withState\":false,\"profileVerb\":\"POST\"}' authModuleState=\"ACTIVE\"/>\n+              jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.OAuth20AuthModuleConf\",\"clientName\":\"oauth20\",\"clientId\":\"OAUTH20\",\"clientSecret\":\"secret\",\"enabled\":true,\"customParams\":{},\"tokenUrl\":\"https://localhost/oauth2/token\",\"responseType\":\"code\",\"scope\":\"oauth test\",\"userIdAttribute\":\"username\",\"authUrl\":\"https://localhost/oauth2/auth\",\"profileUrl\":\"https://localhost/oauth2/profile\",\"withState\":false,\"profileVerb\":\"POST\"}' authModuleState=\"ACTIVE\"/>\n \n   <!-- Attribute repositories -->\n   <AttrRepo id=\"DefaultLDAPAttrRepo\" attrRepoState=\"ACTIVE\""},{"sha":"d5c441c7c5c6ccc77ef9e1b5649c3e30109189ca","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ClientAppDataBinderImpl.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -154,10 +154,13 @@ protected void copyToTO(final ClientApp clientApp, final ClientAppTO clientAppTO\n         clientAppTO.setKey(clientApp.getKey());\n         clientAppTO.setRealm(Optional.ofNullable(clientApp.getRealm()).map(Realm::getFullPath).orElse(null));\n         clientAppTO.setName(clientApp.getName());\n+        clientAppTO.setClientAppId(clientApp.getClientAppId());\n         clientAppTO.setDescription(clientApp.getDescription());\n         clientAppTO.setLogo(clientApp.getLogo());\n-        clientAppTO.setClientAppId(clientApp.getClientAppId());\n         clientAppTO.setTheme(clientApp.getTheme());\n+        clientAppTO.setInformationUrl(clientApp.getInformationUrl());\n+        clientAppTO.setPrivacyUrl(clientApp.getPrivacyUrl());\n+        clientAppTO.setUsernameAttributeProviderConf(clientApp.getUsernameAttributeProviderConf());\n \n         clientAppTO.setAuthPolicy(\n                 Optional.ofNullable(clientApp.getAuthPolicy()).map(AuthPolicy::getKey).orElse(null));\n@@ -274,6 +277,9 @@ protected void copyToEntity(final ClientApp clientApp, final ClientAppTO clientA\n         clientApp.setDescription(clientAppTO.getDescription());\n         clientApp.setLogo(clientAppTO.getLogo());\n         clientApp.setTheme(clientAppTO.getTheme());\n+        clientApp.setInformationUrl(clientAppTO.getInformationUrl());\n+        clientApp.setPrivacyUrl(clientAppTO.getPrivacyUrl());\n+        clientApp.setUsernameAttributeProviderConf(clientAppTO.getUsernameAttributeProviderConf());\n \n         if (clientAppTO.getAuthPolicy() == null) {\n             clientApp.setAuthPolicy(null);"},{"sha":"99bd35631b5be953ff51bd17b954b4187e65ed2f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthModuleITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -147,7 +147,6 @@ private static AuthModuleTO buildAuthModuleTO(final AuthModuleSupportedType type\n                 OAuth20AuthModuleConf.class.cast(conf).setEnabled(true);\n                 OAuth20AuthModuleConf.class.cast(conf).setCustomParams(Map.of(\"param1\", \"param1\"));\n                 OAuth20AuthModuleConf.class.cast(conf).setAuthUrl(\"https://localhost/oauth2/auth\");\n-                OAuth20AuthModuleConf.class.cast(conf).setProfileAttrs(Map.of(\"uid\", \"id\"));\n                 OAuth20AuthModuleConf.class.cast(conf).setProfileUrl(\"https://localhost/oauth2/profile\");\n                 OAuth20AuthModuleConf.class.cast(conf).setTokenUrl(\"https://localhost/oauth2/token\");\n                 OAuth20AuthModuleConf.class.cast(conf).setResponseType(\"code\");"},{"sha":"dd7b1a949493b0bb1c1096fe6f00fab2511fab1f","filename":"src/main/asciidoc/reference-guide/concepts/clientapplications.adoc","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fclientapplications.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fclientapplications.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fclientapplications.adoc?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -30,8 +30,11 @@ Depending on the communication protocol, the following client applications are s\n When defining a client application, the following parameters shall be specified:\n \n . id - unique number identifier of the current client application\n+. <<realms,realm>> - used to inherit policies\n . name - regular expression to match requests\n . description - optional textual description\n+. username attribute provider, mapping to\n+https://apereo.github.io/cas/6.6.x/integration/Attribute-Release-PrincipalId-Attribute.html[CAS Attribute-based Principal Id^]\n . <<policies-authentication,authentication policy>>\n . <<policies-access,access policy>>\n . <<policies-attribute-release,attribute release policy>>"},{"sha":"04386f5606c69b8b80d07ec249b6e141e5613e78","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/AuthModulePropertySourceMapper.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapper.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -176,7 +176,6 @@ public Map<String, Object> map(final AuthModuleTO authModuleTO, final OAuth20Aut\n         props.setEnabled(authModuleTO.getState() == AuthModuleState.ACTIVE);\n         props.setCustomParams(conf.getCustomParams());\n         props.setAuthUrl(conf.getAuthUrl());\n-        props.setProfileAttrs(conf.getProfileAttrs());\n         props.setProfileVerb(conf.getProfileVerb());\n         props.setProfileUrl(conf.getProfileUrl());\n         props.setTokenUrl(conf.getTokenUrl());"},{"sha":"a6934e0c6ab0a401658451d5da34968766c9baf8","filename":"wa/bootstrap/src/test/java/org/apache/syncope/wa/bootstrap/AuthModulePropertySourceMapperTest.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/wa%2Fbootstrap%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapperTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/wa%2Fbootstrap%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapperTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapperTest.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -62,7 +62,6 @@ public void mapOAuth20AuthModuleConf() {\n         conf.setEnabled(true);\n         conf.setCustomParams(Map.of(\"param1\", \"param1\"));\n         conf.setAuthUrl(\"https://localhost/oauth2/auth\");\n-        conf.setProfileAttrs(Map.of(\"uid\", \"id\"));\n         conf.setProfileUrl(\"https://localhost/oauth2/profile\");\n         conf.setTokenUrl(\"https://localhost/oauth2/token\");\n         conf.setResponseType(\"code\");"},{"sha":"75aebb103041be5982f3854bdd718c356ffb5500","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AbstractClientAppMapper.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAbstractClientAppMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAbstractClientAppMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAbstractClientAppMapper.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.wa.starter.mapping;\n \n import java.util.Map;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.to.ClientAppTO;\n@@ -37,6 +38,11 @@ protected void setCommon(final BaseWebBasedRegisteredService service, final Clie\n         service.setName(clientApp.getName());\n         service.setDescription(clientApp.getDescription());\n         service.setLogo(clientApp.getLogo());\n+        service.setTheme(clientApp.getTheme());\n+        service.setInformationUrl(clientApp.getInformationUrl());\n+        service.setPrivacyUrl(clientApp.getPrivacyUrl());\n+        Optional.ofNullable(clientApp.getUsernameAttributeProviderConf()).\n+                ifPresent(conf -> conf.map(new DefaultUsernameAttributeProviderConfMapper(service)));\n \n         if (!clientApp.getProperties().isEmpty()) {\n             Map<String, RegisteredServiceProperty> properties = clientApp.getProperties().stream()."},{"sha":"10746e8b796c854350131e49a81dc6b296a6539c","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/DefaultUsernameAttributeProviderConfMapper.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultUsernameAttributeProviderConfMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7bb3e38f11a22d09e0e3d3f30939068ddbefef06/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultUsernameAttributeProviderConfMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultUsernameAttributeProviderConfMapper.java?ref=7bb3e38f11a22d09e0e3d3f30939068ddbefef06","patch":"@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter.mapping;\n+\n+import java.util.Optional;\n+import org.apache.syncope.common.lib.clientapps.AnonymousUsernameAttributeProviderConf;\n+import org.apache.syncope.common.lib.clientapps.DefaultUsernameAttributeProviderConf;\n+import org.apache.syncope.common.lib.clientapps.GroovyUsernameAttributeProviderConf;\n+import org.apache.syncope.common.lib.clientapps.PairwiseOidcUsernameAttributeProviderConf;\n+import org.apache.syncope.common.lib.clientapps.PrincipalAttributeUsernameAttributeProviderConf;\n+import org.apache.syncope.common.lib.clientapps.UsernameAttributeProviderConf;\n+import org.apache.syncope.common.lib.types.PersistentIdGenerator;\n+import org.apereo.cas.authentication.principal.OidcPairwisePersistentIdGenerator;\n+import org.apereo.cas.authentication.principal.ShibbolethCompatiblePersistentIdGenerator;\n+import org.apereo.cas.services.AnonymousRegisteredServiceUsernameAttributeProvider;\n+import org.apereo.cas.services.BaseWebBasedRegisteredService;\n+import org.apereo.cas.services.DefaultRegisteredServiceUsernameProvider;\n+import org.apereo.cas.services.GroovyRegisteredServiceUsernameProvider;\n+import org.apereo.cas.services.PairwiseOidcRegisteredServiceUsernameAttributeProvider;\n+import org.apereo.cas.services.PrincipalAttributeRegisteredServiceUsernameProvider;\n+import org.apereo.cas.util.RandomUtils;\n+\n+public class DefaultUsernameAttributeProviderConfMapper implements UsernameAttributeProviderConf.Mapper {\n+\n+    protected static Optional<org.apereo.cas.authentication.principal.PersistentIdGenerator> toPersistentIdGenerator(\n+            final PersistentIdGenerator persistentIdGenerator) {\n+\n+        if (persistentIdGenerator == null) {\n+            return Optional.empty();\n+        }\n+\n+        org.apereo.cas.authentication.principal.PersistentIdGenerator result = null;\n+        switch (persistentIdGenerator) {\n+            case SHIBBOLETH:\n+                result = new ShibbolethCompatiblePersistentIdGenerator(RandomUtils.randomAlphanumeric(16));\n+                break;\n+\n+            case OIDC:\n+                result = new OidcPairwisePersistentIdGenerator();\n+                break;\n+\n+            default:\n+        }\n+\n+        return Optional.ofNullable(result);\n+    }\n+\n+    protected final BaseWebBasedRegisteredService service;\n+\n+    public DefaultUsernameAttributeProviderConfMapper(final BaseWebBasedRegisteredService service) {\n+        this.service = service;\n+    }\n+\n+    @Override\n+    public void map(final AnonymousUsernameAttributeProviderConf conf) {\n+        AnonymousRegisteredServiceUsernameAttributeProvider arsuap =\n+                new AnonymousRegisteredServiceUsernameAttributeProvider();\n+        toPersistentIdGenerator(conf.getPersistentIdGenerator()).ifPresent(arsuap::setPersistentIdGenerator);\n+        service.setUsernameAttributeProvider(arsuap);\n+    }\n+\n+    @Override\n+    public void map(final DefaultUsernameAttributeProviderConf conf) {\n+        service.setUsernameAttributeProvider(new DefaultRegisteredServiceUsernameProvider());\n+    }\n+\n+    @Override\n+    public void map(final GroovyUsernameAttributeProviderConf conf) {\n+        service.setUsernameAttributeProvider(new GroovyRegisteredServiceUsernameProvider(conf.getGroovyScript()));\n+    }\n+\n+    @Override\n+    public void map(final PairwiseOidcUsernameAttributeProviderConf conf) {\n+        PairwiseOidcRegisteredServiceUsernameAttributeProvider porsuap =\n+                new PairwiseOidcRegisteredServiceUsernameAttributeProvider();\n+        toPersistentIdGenerator(conf.getPersistentIdGenerator()).ifPresent(porsuap::setPersistentIdGenerator);\n+        service.setUsernameAttributeProvider(porsuap);\n+    }\n+\n+    @Override\n+    public void map(final PrincipalAttributeUsernameAttributeProviderConf conf) {\n+        service.setUsernameAttributeProvider(\n+                new PrincipalAttributeRegisteredServiceUsernameProvider(conf.getUsernameAttribute()));\n+    }\n+}"}]}