{"sha":"24f789932141ee05fa12d81eca9d43178953f508","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjI0Zjc4OTkzMjE0MWVlMDVmYTEyZDgxZWNhOWQ0MzE3ODk1M2Y1MDg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-04-13T07:04:17Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-04-13T07:25:23Z"},"message":"[SYNCOPE-1301] Reworking logic to avoid conficts","tree":{"sha":"cb0298fdca4fa4cf4a42962da6d1233b704b8502","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/cb0298fdca4fa4cf4a42962da6d1233b704b8502"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/24f789932141ee05fa12d81eca9d43178953f508","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/24f789932141ee05fa12d81eca9d43178953f508","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/24f789932141ee05fa12d81eca9d43178953f508","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/24f789932141ee05fa12d81eca9d43178953f508/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"9a7afc0ced2f0af511b14576ea259ccfb7e85a87","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9a7afc0ced2f0af511b14576ea259ccfb7e85a87","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9a7afc0ced2f0af511b14576ea259ccfb7e85a87"}],"stats":{"total":108,"additions":52,"deletions":56},"files":[{"sha":"e3bc87307015ff856522ee968b0303728f71fc8d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAccessToken.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24f789932141ee05fa12d81eca9d43178953f508/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccessToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24f789932141ee05fa12d81eca9d43178953f508/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccessToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccessToken.java?ref=24f789932141ee05fa12d81eca9d43178953f508","patch":"@@ -44,7 +44,7 @@ public class JPAAccessToken extends AbstractProvidedKeyEntity implements AccessT\n     @Temporal(TemporalType.TIMESTAMP)\n     private Date expiryTime;\n \n-    @Column(nullable = true)\n+    @Column(unique = true)\n     private String owner;\n \n     @Lob"},{"sha":"d50fc22d3c1760115228f66e1288c9ca7038b4fd","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/AccessTokenDataBinder.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24f789932141ee05fa12d81eca9d43178953f508/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAccessTokenDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24f789932141ee05fa12d81eca9d43178953f508/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAccessTokenDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAccessTokenDataBinder.java?ref=24f789932141ee05fa12d81eca9d43178953f508","patch":"@@ -21,16 +21,14 @@\n import java.util.Date;\n import java.util.Map;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.to.AccessTokenTO;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n \n public interface AccessTokenDataBinder {\n \n-    Triple<String, String, Date> generateJWT(String subject, long duration, Map<String, Object> claims);\n+    Pair<String, Date> generateJWT(String tokenId, String subject, long duration, Map<String, Object> claims);\n \n-    Pair<String, Date> create(\n-            String subject, Map<String, Object> claims, byte[] authorities, boolean replaceExisting);\n+    Pair<String, Date> create(String subject, Map<String, Object> claims, byte[] authorities, boolean replace);\n \n     Pair<String, Date> update(AccessToken accessToken, byte[] authorities);\n "},{"sha":"0b2e4b604e0c497743f8bb790c5bf5a86871bcaa","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java","status":"modified","additions":41,"deletions":42,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24f789932141ee05fa12d81eca9d43178953f508/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24f789932141ee05fa12d81eca9d43178953f508/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java?ref=24f789932141ee05fa12d81eca9d43178953f508","patch":"@@ -24,7 +24,6 @@\n import java.util.Map;\n import javax.annotation.Resource;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.commons.lang3.tuple.Triple;\n import org.apache.cxf.rs.security.jose.common.JoseType;\n import org.apache.cxf.rs.security.jose.jws.JwsHeaders;\n import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactConsumer;\n@@ -46,8 +45,6 @@\n @Component\n public class AccessTokenDataBinderImpl implements AccessTokenDataBinder {\n \n-    private static final String[] IGNORE_PROPERTIES = { \"owner\" };\n-\n     private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator();\n \n     @Resource(name = \"adminUser\")\n@@ -72,16 +69,19 @@ public class AccessTokenDataBinderImpl implements AccessTokenDataBinder {\n     private DefaultCredentialChecker credentialChecker;\n \n     @Override\n-    public Triple<String, String, Date> generateJWT(\n-            final String subject, final long duration, final Map<String, Object> claims) {\n+    public Pair<String, Date> generateJWT(\n+            final String tokenId,\n+            final String subject,\n+            final long duration,\n+            final Map<String, Object> claims) {\n \n         credentialChecker.checkIsDefaultJWSKeyInUse();\n \n         long currentTime = new Date().getTime() / 1000L;\n         long expiryTime = currentTime + 60L * duration;\n \n         JwtClaims jwtClaims = new JwtClaims();\n-        jwtClaims.setTokenId(UUID_GENERATOR.generate().toString());\n+        jwtClaims.setTokenId(tokenId);\n         jwtClaims.setSubject(subject);\n         jwtClaims.setIssuedAt(currentTime);\n         jwtClaims.setIssuer(jwtIssuer);\n@@ -97,52 +97,52 @@ public Triple<String, String, Date> generateJWT(\n \n         String signed = producer.signWith(jwsSignatureProvider);\n \n-        return Triple.of(jwtClaims.getTokenId(), signed, new Date(expiryTime * 1000L));\n+        return Pair.of(signed, new Date(expiryTime * 1000L));\n     }\n \n-    @Override\n-    public Pair<String, Date> create(\n+    private AccessToken replace(\n             final String subject,\n             final Map<String, Object> claims,\n             final byte[] authorities,\n-            final boolean replaceExisting) {\n-\n-        String body = null;\n-        Date expiryTime = null;\n-\n-        AccessToken existing = accessTokenDAO.findByOwner(subject);\n-        if (existing != null) {\n-            body = existing.getBody();\n-            expiryTime = existing.getExpiryTime();\n-        }\n-\n-        if (replaceExisting || body == null) {\n-            Triple<String, String, Date> created = generateJWT(\n-                    subject,\n-                    confDAO.find(\"jwt.lifetime.minutes\", 120L),\n-                    claims);\n-\n-            body = created.getMiddle();\n-            expiryTime = created.getRight();\n+            final AccessToken accessToken) {\n \n-            AccessToken accessToken = entityFactory.newEntity(AccessToken.class);\n-            accessToken.setKey(created.getLeft());\n-            accessToken.setBody(body);\n-            accessToken.setExpiryTime(expiryTime);\n-            accessToken.setOwner(subject);\n+        Pair<String, Date> generated = generateJWT(\n+                accessToken.getKey(),\n+                subject,\n+                confDAO.find(\"jwt.lifetime.minutes\", 120L),\n+                claims);\n \n-            if (!adminUser.equals(accessToken.getOwner())) {\n-                accessToken.setAuthorities(authorities);\n-            }\n+        accessToken.setBody(generated.getLeft());\n+        accessToken.setExpiryTime(generated.getRight());\n+        accessToken.setOwner(subject);\n \n-            accessTokenDAO.save(accessToken);\n+        if (!adminUser.equals(accessToken.getOwner())) {\n+            accessToken.setAuthorities(authorities);\n         }\n \n-        if (replaceExisting && existing != null) {\n-            accessTokenDAO.delete(existing);\n+        return accessTokenDAO.save(accessToken);\n+    }\n+\n+    @Override\n+    public Pair<String, Date> create(\n+            final String subject,\n+            final Map<String, Object> claims,\n+            final byte[] authorities,\n+            final boolean replace) {\n+\n+        AccessToken accessToken = accessTokenDAO.findByOwner(subject);\n+        if (accessToken == null) {\n+            // no AccessToken found: create new\n+            accessToken = entityFactory.newEntity(AccessToken.class);\n+            accessToken.setKey(UUID_GENERATOR.generate().toString());\n+\n+            accessToken = replace(subject, claims, authorities, accessToken);\n+        } else if (replace) {\n+            // AccessToken found, but replace requested: update existing\n+            accessToken = replace(subject, claims, authorities, accessToken);\n         }\n \n-        return Pair.of(body, expiryTime);\n+        return Pair.of(accessToken.getBody(), accessToken.getExpiryTime());\n     }\n \n     @Override\n@@ -179,8 +179,7 @@ public Pair<String, Date> update(final AccessToken accessToken, final byte[] aut\n     @Override\n     public AccessTokenTO getAccessTokenTO(final AccessToken accessToken) {\n         AccessTokenTO accessTokenTO = new AccessTokenTO();\n-        BeanUtils.copyProperties(accessToken, accessTokenTO, IGNORE_PROPERTIES);\n-        accessTokenTO.setOwner(accessToken.getOwner());\n+        BeanUtils.copyProperties(accessToken, accessTokenTO);\n \n         return accessTokenTO;\n     }"},{"sha":"3ea54e5ff223a5ec421b661fcbd55da71f946f5c","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24f789932141ee05fa12d81eca9d43178953f508/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24f789932141ee05fa12d81eca9d43178953f508/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java?ref=24f789932141ee05fa12d81eca9d43178953f508","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.logic;\n \n-import org.apache.syncope.core.logic.saml2.SAML2UserManager;\n import com.fasterxml.uuid.Generators;\n import com.fasterxml.uuid.impl.RandomBasedGenerator;\n import java.io.OutputStream;\n@@ -34,7 +33,6 @@\n import javax.annotation.Resource;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.commons.lang3.tuple.Triple;\n import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactConsumer;\n import org.apache.cxf.rs.security.jose.jws.JwsSignatureVerifier;\n import org.apache.cxf.rs.security.saml.sso.SSOValidatorResponse;\n@@ -52,6 +50,7 @@\n import org.apache.syncope.core.logic.saml2.SAML2ReaderWriter;\n import org.apache.syncope.core.logic.saml2.SAML2IdPCache;\n import org.apache.syncope.core.logic.saml2.SAML2IdPEntity;\n+import org.apache.syncope.core.logic.saml2.SAML2UserManager;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.SAML2IdPDAO;\n@@ -324,13 +323,13 @@ public SAML2RequestTO createLoginRequest(final String spEntityID, final String i\n             // 3. generate relay state as JWT\n             Map<String, Object> claims = new HashMap<>();\n             claims.put(JWT_CLAIM_IDP_DEFLATE, idp.isUseDeflateEncoding());\n-            Triple<String, String, Date> relayState =\n-                    accessTokenDataBinder.generateJWT(authnRequest.getID(), JWT_RELAY_STATE_DURATION, claims);\n+            Pair<String, Date> relayState = accessTokenDataBinder.generateJWT(\n+                    UUID_GENERATOR.generate().toString(), authnRequest.getID(), JWT_RELAY_STATE_DURATION, claims);\n \n             // 4. sign and encode AuthnRequest\n             switch (idp.getBindingType()) {\n                 case REDIRECT:\n-                    requestTO.setRelayState(URLEncoder.encode(relayState.getMiddle(), StandardCharsets.UTF_8.name()));\n+                    requestTO.setRelayState(URLEncoder.encode(relayState.getLeft(), StandardCharsets.UTF_8.name()));\n                     requestTO.setContent(URLEncoder.encode(\n                             saml2rw.encode(authnRequest, true), StandardCharsets.UTF_8.name()));\n                     requestTO.setSignAlg(URLEncoder.encode(saml2rw.getSigAlgo(), StandardCharsets.UTF_8.name()));\n@@ -341,7 +340,7 @@ public SAML2RequestTO createLoginRequest(final String spEntityID, final String i\n \n                 case POST:\n                 default:\n-                    requestTO.setRelayState(relayState.getMiddle());\n+                    requestTO.setRelayState(relayState.getLeft());\n                     saml2rw.sign(authnRequest);\n                     requestTO.setContent(saml2rw.encode(authnRequest, idp.isUseDeflateEncoding()));\n             }\n@@ -606,9 +605,9 @@ public SAML2RequestTO createLogoutRequest(final String accessToken, final String\n             Map<String, Object> claims = new HashMap<>();\n             claims.put(JWT_CLAIM_IDP_DEFLATE,\n                     idp.getBindingType() == SAML2BindingType.REDIRECT ? true : idp.isUseDeflateEncoding());\n-            Triple<String, String, Date> relayState =\n-                    accessTokenDataBinder.generateJWT(logoutRequest.getID(), JWT_RELAY_STATE_DURATION, claims);\n-            requestTO.setRelayState(relayState.getMiddle());\n+            Pair<String, Date> relayState = accessTokenDataBinder.generateJWT(\n+                    UUID_GENERATOR.generate().toString(), logoutRequest.getID(), JWT_RELAY_STATE_DURATION, claims);\n+            requestTO.setRelayState(relayState.getLeft());\n \n             // 4. sign and encode AuthnRequest\n             switch (idp.getBindingType()) {"}]}