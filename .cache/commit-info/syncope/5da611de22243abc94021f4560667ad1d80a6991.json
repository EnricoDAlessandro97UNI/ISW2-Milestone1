{"sha":"5da611de22243abc94021f4560667ad1d80a6991","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjVkYTYxMWRlMjIyNDNhYmM5NDAyMWY0NTYwNjY3YWQxZDgwYTY5OTE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-24T11:30:43Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-24T11:30:43Z"},"message":"Cleaning up implementation classes discovery","tree":{"sha":"70ba214f507d31075fc978c972aaa096ed3721dd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/70ba214f507d31075fc978c972aaa096ed3721dd"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5da611de22243abc94021f4560667ad1d80a6991","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5da611de22243abc94021f4560667ad1d80a6991","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5da611de22243abc94021f4560667ad1d80a6991","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5da611de22243abc94021f4560667ad1d80a6991/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"966484b4c07d19c1bce3ddf6b2103639969306f5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/966484b4c07d19c1bce3ddf6b2103639969306f5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/966484b4c07d19c1bce3ddf6b2103639969306f5"}],"stats":{"total":438,"additions":307,"deletions":131},"files":[{"sha":"1354f67077e90b9d3bb4e0aff4d18a384d5a7a64","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":13,"deletions":14,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5da611de22243abc94021f4560667ad1d80a6991/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5da611de22243abc94021f4560667ad1d80a6991/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=5da611de22243abc94021f4560667ad1d80a6991","patch":"@@ -18,18 +18,17 @@\n  */\n package org.apache.syncope.core.logic;\n \n-import static org.apache.syncope.core.logic.init.ImplementationClassNamesLoader.Type;\n-\n import java.io.IOException;\n import java.lang.reflect.Method;\n import java.net.URI;\n import java.util.HashSet;\n import java.util.Set;\n import javax.annotation.Resource;\n import org.apache.syncope.common.lib.to.SyncopeTO;\n-import org.apache.syncope.core.logic.init.ImplementationClassNamesLoader;\n import org.apache.syncope.core.misc.security.PasswordGenerator;\n import org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup.Type;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n import org.apache.syncope.core.provisioning.api.AnyTransformer;\n@@ -87,7 +86,7 @@ public class SyncopeLogic extends AbstractLogic<SyncopeTO> {\n     private PasswordGenerator passwordGenerator;\n \n     @Autowired\n-    private ImplementationClassNamesLoader classNamesLoader;\n+    private ImplementationLookup implementationLookup;\n \n     @Resource(name = \"velocityResourceLoader\")\n     private ResourceWithFallbackLoader resourceLoader;\n@@ -135,16 +134,16 @@ public SyncopeTO info() {\n         syncopeTO.setVirAttrCache(virAttrCache.getClass().getName());\n         syncopeTO.setPasswordGenerator(passwordGenerator.getClass().getName());\n \n-        syncopeTO.getReportlets().addAll(classNamesLoader.getClassNames(Type.REPORTLET));\n-        syncopeTO.getAccountRules().addAll(classNamesLoader.getClassNames(Type.ACCOUNT_RULE));\n-        syncopeTO.getPasswordRules().addAll(classNamesLoader.getClassNames(Type.PASSWORD_RULE));\n-        syncopeTO.getTaskJobs().addAll(classNamesLoader.getClassNames(Type.TASKJOBDELEGATE));\n-        syncopeTO.getPropagationActions().addAll(classNamesLoader.getClassNames(Type.PROPAGATION_ACTIONS));\n-        syncopeTO.getSyncActions().addAll(classNamesLoader.getClassNames(Type.SYNC_ACTIONS));\n-        syncopeTO.getPushActions().addAll(classNamesLoader.getClassNames(Type.PUSH_ACTIONS));\n-        syncopeTO.getSyncCorrelationRules().addAll(classNamesLoader.getClassNames(Type.SYNC_CORRELATION_RULE));\n-        syncopeTO.getPushCorrelationRules().addAll(classNamesLoader.getClassNames(Type.PUSH_CORRELATION_RULE));\n-        syncopeTO.getValidators().addAll(classNamesLoader.getClassNames(Type.VALIDATOR));\n+        syncopeTO.getReportlets().addAll(implementationLookup.getClassNames(Type.REPORTLET));\n+        syncopeTO.getAccountRules().addAll(implementationLookup.getClassNames(Type.ACCOUNT_RULE));\n+        syncopeTO.getPasswordRules().addAll(implementationLookup.getClassNames(Type.PASSWORD_RULE));\n+        syncopeTO.getTaskJobs().addAll(implementationLookup.getClassNames(Type.TASKJOBDELEGATE));\n+        syncopeTO.getPropagationActions().addAll(implementationLookup.getClassNames(Type.PROPAGATION_ACTIONS));\n+        syncopeTO.getSyncActions().addAll(implementationLookup.getClassNames(Type.SYNC_ACTIONS));\n+        syncopeTO.getPushActions().addAll(implementationLookup.getClassNames(Type.PUSH_ACTIONS));\n+        syncopeTO.getSyncCorrelationRules().addAll(implementationLookup.getClassNames(Type.SYNC_CORRELATION_RULE));\n+        syncopeTO.getPushCorrelationRules().addAll(implementationLookup.getClassNames(Type.PUSH_CORRELATION_RULE));\n+        syncopeTO.getValidators().addAll(implementationLookup.getClassNames(Type.VALIDATOR));\n \n         Set<String> htmlTemplates = new HashSet<>();\n         Set<String> textTemplates = new HashSet<>();"},{"sha":"2305e707f232353aa7336d9126064f4ffd56b5eb","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"renamed","additions":64,"deletions":21,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5da611de22243abc94021f4560667ad1d80a6991/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5da611de22243abc94021f4560667ad1d80a6991/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=5da611de22243abc94021f4560667ad1d80a6991","patch":"@@ -21,20 +21,27 @@\n import java.lang.reflect.Modifier;\n import java.util.Collections;\n import java.util.EnumMap;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n-import org.apache.syncope.core.provisioning.api.sync.PushActions;\n-import org.apache.syncope.core.provisioning.api.sync.SyncActions;\n-import org.apache.syncope.core.provisioning.api.sync.SyncCorrelationRule;\n-import org.apache.syncope.core.logic.report.Reportlet;\n-import org.apache.syncope.core.persistence.api.SyncopeLoader;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.core.persistence.api.dao.Reportlet;\n+import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n+import org.apache.syncope.core.persistence.api.dao.AccountRuleConfClass;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRuleConfClass;\n import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n+import org.apache.syncope.core.provisioning.api.sync.PushActions;\n+import org.apache.syncope.core.provisioning.api.sync.SyncActions;\n+import org.apache.syncope.core.provisioning.api.sync.SyncCorrelationRule;\n import org.apache.syncope.core.provisioning.java.sync.PushJobDelegate;\n import org.apache.syncope.core.provisioning.java.sync.SyncJobDelegate;\n import org.slf4j.Logger;\n@@ -49,39 +56,35 @@\n  * Cache class names for all implementations of Syncope interfaces found in classpath, for later usage.\n  */\n @Component\n-public class ImplementationClassNamesLoader implements SyncopeLoader {\n+public class ClassPathScanImplementationLookup implements ImplementationLookup {\n \n-    public enum Type {\n+    private static final Logger LOG = LoggerFactory.getLogger(ImplementationLookup.class);\n \n-        REPORTLET,\n-        ACCOUNT_RULE,\n-        PASSWORD_RULE,\n-        TASKJOBDELEGATE,\n-        PROPAGATION_ACTIONS,\n-        SYNC_ACTIONS,\n-        PUSH_ACTIONS,\n-        SYNC_CORRELATION_RULE,\n-        PUSH_CORRELATION_RULE,\n-        VALIDATOR\n+    private Map<Type, Set<String>> classNames;\n \n-    }\n+    private Map<Class<? extends ReportletConf>, Class<? extends Reportlet>> reportletClasses;\n \n-    private static final Logger LOG = LoggerFactory.getLogger(ImplementationClassNamesLoader.class);\n+    private Map<Class<? extends AccountRuleConf>, Class<? extends AccountRule>> accountRuleClasses;\n \n-    private Map<Type, Set<String>> classNames;\n+    private Map<Class<? extends PasswordRuleConf>, Class<? extends PasswordRule>> passwordRuleClasses;\n \n     @Override\n     public Integer getPriority() {\n         return 400;\n     }\n \n     @Override\n+    @SuppressWarnings(\"unchecked\")\n     public void load() {\n         classNames = new EnumMap<>(Type.class);\n         for (Type type : Type.values()) {\n             classNames.put(type, new HashSet<String>());\n         }\n \n+        reportletClasses = new HashMap<>();\n+        accountRuleClasses = new HashMap<>();\n+        passwordRuleClasses = new HashMap<>();\n+\n         ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n         scanner.addIncludeFilter(new AssignableTypeFilter(Reportlet.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(AccountRule.class));\n@@ -103,13 +106,27 @@ public void load() {\n \n                 if (Reportlet.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n                     classNames.get(Type.REPORTLET).add(clazz.getName());\n+\n+                    ReportletConfClass annotation = clazz.getAnnotation(ReportletConfClass.class);\n+                    if (annotation != null) {\n+                        reportletClasses.put(annotation.value(), (Class<? extends Reportlet>) clazz);\n+                    }\n                 }\n \n                 if (AccountRule.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n                     classNames.get(Type.ACCOUNT_RULE).add(clazz.getName());\n+\n+                    AccountRuleConfClass annotation = clazz.getAnnotation(AccountRuleConfClass.class);\n+                    if (annotation != null) {\n+                        accountRuleClasses.put(annotation.value(), (Class<? extends AccountRule>) clazz);\n+                    }\n                 }\n                 if (PasswordRule.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n                     classNames.get(Type.PASSWORD_RULE).add(clazz.getName());\n+                    PasswordRuleConfClass annotation = clazz.getAnnotation(PasswordRuleConfClass.class);\n+                    if (annotation != null) {\n+                        passwordRuleClasses.put(annotation.value(), (Class<? extends PasswordRule>) clazz);\n+                    }\n                 }\n \n                 if (SchedTaskJobDelegate.class.isAssignableFrom(clazz) && !isAbsractClazz\n@@ -147,11 +164,37 @@ public void load() {\n             }\n         }\n         classNames = Collections.unmodifiableMap(classNames);\n+        reportletClasses = Collections.unmodifiableMap(reportletClasses);\n+        accountRuleClasses = Collections.unmodifiableMap(accountRuleClasses);\n+        passwordRuleClasses = Collections.unmodifiableMap(passwordRuleClasses);\n \n         LOG.debug(\"Implementation classes found: {}\", classNames);\n     }\n \n+    @Override\n     public Set<String> getClassNames(final Type type) {\n         return classNames.get(type);\n     }\n+\n+    @Override\n+    public Class<? extends Reportlet> getReportletClass(\n+            final Class<? extends ReportletConf> reportletConfClass) {\n+\n+        return reportletClasses.get(reportletConfClass);\n+    }\n+\n+    @Override\n+    public Class<? extends AccountRule> getAccountRuleClass(\n+            final Class<? extends AccountRuleConf> accountRuleConfClass) {\n+\n+        return accountRuleClasses.get(accountRuleConfClass);\n+    }\n+\n+    @Override\n+    public Class<? extends PasswordRule> getPasswordRuleClass(\n+            final Class<? extends PasswordRuleConf> passwordRuleConfClass) {\n+\n+        return passwordRuleClasses.get(passwordRuleConfClass);\n+    }\n+\n }","previous_filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/ImplementationClassNamesLoader.java"},{"sha":"69e6b4f069a0b11ea523339cc604a9629b6faa69","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/AbstractReportlet.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5da611de22243abc94021f4560667ad1d80a6991/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FAbstractReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5da611de22243abc94021f4560667ad1d80a6991/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FAbstractReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FAbstractReportlet.java?ref=5da611de22243abc94021f4560667ad1d80a6991","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.logic.report;\n \n+import org.apache.syncope.core.persistence.api.dao.Reportlet;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;"},{"sha":"ec9a745c21277f3e33fae99c5545ce764f06e8ed","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/GroupReportlet.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5da611de22243abc94021f4560667ad1d80a6991/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FGroupReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5da611de22243abc94021f4560667ad1d80a6991/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FGroupReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FGroupReportlet.java?ref=5da611de22243abc94021f4560667ad1d80a6991","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.logic.report;\n \n+import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;"},{"sha":"2b63d1bbe3e81c8e18d1de7dff4e68226d2c026a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/ReportJobDelegate.java","status":"modified","additions":7,"deletions":35,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5da611de22243abc94021f4560667ad1d80a6991/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5da611de22243abc94021f4560667ad1d80a6991/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJobDelegate.java?ref=5da611de22243abc94021f4560667ad1d80a6991","patch":"@@ -20,10 +20,7 @@\n \n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n-import java.lang.reflect.Modifier;\n import java.util.Date;\n-import java.util.HashMap;\n-import java.util.Map;\n import java.util.zip.Deflater;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipOutputStream;\n@@ -33,61 +30,32 @@\n import javax.xml.transform.sax.TransformerHandler;\n import javax.xml.transform.stream.StreamResult;\n import org.apache.commons.io.IOUtils;\n-import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.types.ReportExecStatus;\n import org.apache.syncope.core.misc.ExceptionUtils2;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n import org.apache.syncope.core.persistence.api.dao.ReportExecDAO;\n+import org.apache.syncope.core.persistence.api.dao.Reportlet;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.config.BeanDefinition;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n-import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\n-import org.springframework.core.type.filter.AssignableTypeFilter;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.util.ClassUtils;\n import org.xml.sax.helpers.AttributesImpl;\n \n @Component\n public class ReportJobDelegate {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ReportJobDelegate.class);\n \n-    private static final Map<Class<? extends ReportletConf>, Class<Reportlet>> REPORTLET_CLASSES = new HashMap<>();\n-\n-    static {\n-        initReportletClasses();\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    private static void initReportletClasses() {\n-        ClassPathScanningCandidateComponentProvider scanner =\n-                new ClassPathScanningCandidateComponentProvider(false);\n-        scanner.addIncludeFilter(new AssignableTypeFilter(Reportlet.class));\n-\n-        for (BeanDefinition bd : scanner.findCandidateComponents(StringUtils.EMPTY)) {\n-            Class<?> clazz = ClassUtils.resolveClassName(\n-                    bd.getBeanClassName(), ClassUtils.getDefaultClassLoader());\n-            boolean isAbstract = Modifier.isAbstract(clazz.getModifiers());\n-\n-            if (Reportlet.class.isAssignableFrom(clazz) && !isAbstract) {\n-                ReportletConfClass annotation = clazz.getAnnotation(ReportletConfClass.class);\n-                if (annotation != null) {\n-                    REPORTLET_CLASSES.put(annotation.value(), (Class<Reportlet>) clazz);\n-                }\n-            }\n-        }\n-    }\n-\n     /**\n      * Report DAO.\n      */\n@@ -103,6 +71,9 @@ private static void initReportletClasses() {\n     @Autowired\n     private EntityFactory entityFactory;\n \n+    @Autowired\n+    private ImplementationLookup implementationLookup;\n+\n     @Transactional\n     public void execute(final Long reportKey) throws JobExecutionException {\n         Report report = reportDAO.find(reportKey);\n@@ -156,7 +127,8 @@ public void execute(final Long reportKey) throws JobExecutionException {\n \n             // iterate over reportlet instances defined for this report\n             for (ReportletConf reportletConf : report.getReportletConfs()) {\n-                Class<Reportlet> reportletClass = REPORTLET_CLASSES.get(reportletConf.getClass());\n+                Class<? extends Reportlet> reportletClass =\n+                        implementationLookup.getReportletClass(reportletConf.getClass());\n                 if (reportletClass == null) {\n                     LOG.warn(\"Could not find matching reportlet for {}\", reportletConf.getClass());\n                 } else {"},{"sha":"b7db39fc6698ba22da476d5acbe0e9de8e3aeadb","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/StaticReportlet.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5da611de22243abc94021f4560667ad1d80a6991/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FStaticReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5da611de22243abc94021f4560667ad1d80a6991/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FStaticReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FStaticReportlet.java?ref=5da611de22243abc94021f4560667ad1d80a6991","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.logic.report;\n \n+import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.report.StaticReportletConf;\n import org.apache.syncope.core.misc.DataFormat;"},{"sha":"91715a7a54759ee818c5dd5484eb84fdf04fe4f1","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/UserReportlet.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5da611de22243abc94021f4560667ad1d80a6991/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5da611de22243abc94021f4560667ad1d80a6991/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java?ref=5da611de22243abc94021f4560667ad1d80a6991","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.logic.report;\n \n+import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;"},{"sha":"b00d3d4f01939aeeed2616ce1038b3b23cdcf462","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/ImplementationLookup.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5da611de22243abc94021f4560667ad1d80a6991/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5da611de22243abc94021f4560667ad1d80a6991/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java?ref=5da611de22243abc94021f4560667ad1d80a6991","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api;\n+\n+import java.util.Set;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.core.persistence.api.dao.AccountRule;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n+import org.apache.syncope.core.persistence.api.dao.Reportlet;\n+\n+public interface ImplementationLookup extends SyncopeLoader {\n+\n+    public enum Type {\n+\n+        REPORTLET,\n+        ACCOUNT_RULE,\n+        PASSWORD_RULE,\n+        TASKJOBDELEGATE,\n+        PROPAGATION_ACTIONS,\n+        SYNC_ACTIONS,\n+        PUSH_ACTIONS,\n+        SYNC_CORRELATION_RULE,\n+        PUSH_CORRELATION_RULE,\n+        VALIDATOR\n+\n+    }\n+\n+    Set<String> getClassNames(Type type);\n+\n+    Class<? extends Reportlet> getReportletClass(Class<? extends ReportletConf> reportletConfClass);\n+\n+    Class<? extends AccountRule> getAccountRuleClass(Class<? extends AccountRuleConf> accountRuleConfClass);\n+\n+    Class<? extends PasswordRule> getPasswordRuleClass(Class<? extends PasswordRuleConf> passwordRuleConfClass);\n+}"},{"sha":"81808314c24a8a1f1180d440eb68235b6c7e2993","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/Reportlet.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5da611de22243abc94021f4560667ad1d80a6991/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5da611de22243abc94021f4560667ad1d80a6991/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportlet.java?ref=5da611de22243abc94021f4560667ad1d80a6991","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.logic.report;\n+package org.apache.syncope.core.persistence.api.dao;\n \n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.xml.sax.ContentHandler;","previous_filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/Reportlet.java"},{"sha":"c1b3040cf517a13ad77adb1cbbf434443a429c8a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ReportletConfClass.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5da611de22243abc94021f4560667ad1d80a6991/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportletConfClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5da611de22243abc94021f4560667ad1d80a6991/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportletConfClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportletConfClass.java?ref=5da611de22243abc94021f4560667ad1d80a6991","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.logic.report;\n+package org.apache.syncope.core.persistence.api.dao;\n \n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;","previous_filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/ReportletConfClass.java"},{"sha":"bdc552e6cfdd31814ceb83c2b8fab833e1f7a595","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":18,"deletions":59,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5da611de22243abc94021f4560667ad1d80a6991/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5da611de22243abc94021f4560667ad1d80a6991/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=5da611de22243abc94021f4560667ad1d80a6991","patch":"@@ -18,107 +18,61 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n import javax.annotation.Resource;\n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n-import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n-import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.core.misc.policy.AccountPolicyException;\n import org.apache.syncope.core.misc.policy.PasswordPolicyException;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.security.UnauthorizedException;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n-import org.apache.syncope.core.persistence.api.dao.AccountRuleConfClass;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n-import org.apache.syncope.core.persistence.api.dao.PasswordRuleConfClass;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n-import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.config.BeanDefinition;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n-import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\n-import org.springframework.core.type.filter.AssignableTypeFilter;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.util.ClassUtils;\n \n @Repository\n public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n \n-    private static final Map<Class<? extends AccountRuleConf>, Class<AccountRule>> ACCOUNT_RULES_CLASSES =\n-            new HashMap<>();\n-\n-    private static final Map<Class<? extends PasswordRuleConf>, Class<PasswordRule>> PASSWORD_RULES_CLASSES =\n-            new HashMap<>();\n-\n-    static {\n-        initRules();\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    private static void initRules() {\n-        ClassPathScanningCandidateComponentProvider scanner =\n-                new ClassPathScanningCandidateComponentProvider(false);\n-        scanner.addIncludeFilter(new AssignableTypeFilter(AccountRule.class));\n-        scanner.addIncludeFilter(new AssignableTypeFilter(PasswordRule.class));\n-\n-        for (BeanDefinition bd : scanner.findCandidateComponents(StringUtils.EMPTY)) {\n-            Class<?> clazz = ClassUtils.resolveClassName(\n-                    bd.getBeanClassName(), ClassUtils.getDefaultClassLoader());\n-            boolean isAbstract = Modifier.isAbstract(clazz.getModifiers());\n-\n-            if (AccountRule.class.isAssignableFrom(clazz) && !isAbstract) {\n-                AccountRuleConfClass annotation = clazz.getAnnotation(AccountRuleConfClass.class);\n-                if (annotation != null) {\n-                    ACCOUNT_RULES_CLASSES.put(annotation.value(), (Class<AccountRule>) clazz);\n-                }\n-            }\n-            if (PasswordRule.class.isAssignableFrom(clazz) && !isAbstract) {\n-                PasswordRuleConfClass annotation = clazz.getAnnotation(PasswordRuleConfClass.class);\n-                if (annotation != null) {\n-                    PASSWORD_RULES_CLASSES.put(annotation.value(), (Class<PasswordRule>) clazz);\n-                }\n-            }\n-        }\n-    }\n-\n     @Autowired\n     private RealmDAO realmDAO;\n \n@@ -128,6 +82,9 @@ private static void initRules() {\n     @Autowired\n     private RoleDAO roleDAO;\n \n+    @Autowired\n+    private ImplementationLookup implementationLookup;\n+\n     @Resource(name = \"adminUser\")\n     private String adminUser;\n \n@@ -280,7 +237,8 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n                 }\n \n                 for (PasswordRuleConf ruleConf : policy.getRuleConfs()) {\n-                    Class<PasswordRule> ruleClass = PASSWORD_RULES_CLASSES.get(ruleConf.getClass());\n+                    Class<? extends PasswordRule> ruleClass =\n+                            implementationLookup.getPasswordRuleClass(ruleConf.getClass());\n                     if (ruleClass == null) {\n                         LOG.warn(\"Could not find matching password rule for {}\", ruleConf.getClass());\n                     } else {\n@@ -342,7 +300,8 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n \n             for (AccountPolicy policy : getAccountPolicies(user)) {\n                 for (AccountRuleConf ruleConf : policy.getRuleConfs()) {\n-                    Class<AccountRule> ruleClass = ACCOUNT_RULES_CLASSES.get(ruleConf.getClass());\n+                    Class<? extends AccountRule> ruleClass =\n+                            implementationLookup.getAccountRuleClass(ruleConf.getClass());\n                     if (ruleClass == null) {\n                         LOG.warn(\"Could not find matching password rule for {}\", ruleConf.getClass());\n                     } else {"},{"sha":"dd761b40f1223fea81326797f445c86444b56c26","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/DummyImplementationLookup.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5da611de22243abc94021f4560667ad1d80a6991/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5da611de22243abc94021f4560667ad1d80a6991/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java?ref=5da611de22243abc94021f4560667ad1d80a6991","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.dao.AccountRule;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n+import org.apache.syncope.core.persistence.api.dao.Reportlet;\n+import org.apache.syncope.core.persistence.jpa.dao.DefaultAccountRule;\n+import org.apache.syncope.core.persistence.jpa.dao.DefaultPasswordRule;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DummyImplementationLookup implements ImplementationLookup {\n+\n+    @Override\n+    public Integer getPriority() {\n+        return -1;\n+    }\n+\n+    @Override\n+    public void load() {\n+        // do nothing\n+    }\n+\n+    @Override\n+    public Set<String> getClassNames(final Type type) {\n+        return Collections.emptySet();\n+    }\n+\n+    @Override\n+    public Class<Reportlet> getReportletClass(\n+            final Class<? extends ReportletConf> reportletConfClass) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Class<? extends AccountRule> getAccountRuleClass(\n+            final Class<? extends AccountRuleConf> accountRuleConfClass) {\n+\n+        return DefaultAccountRule.class;\n+    }\n+\n+    @Override\n+    public Class<? extends PasswordRule> getPasswordRuleClass(\n+            final Class<? extends PasswordRuleConf> passwordRuleConfClass) {\n+\n+        return DefaultPasswordRule.class;\n+    }\n+\n+}"},{"sha":"06715d846ed784ece32cef50e602318bf45f1771","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/DummyImplementationLookup.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5da611de22243abc94021f4560667ad1d80a6991/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5da611de22243abc94021f4560667ad1d80a6991/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java?ref=5da611de22243abc94021f4560667ad1d80a6991","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.dao.AccountRule;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n+import org.apache.syncope.core.persistence.api.dao.Reportlet;\n+import org.apache.syncope.core.persistence.jpa.dao.DefaultAccountRule;\n+import org.apache.syncope.core.persistence.jpa.dao.DefaultPasswordRule;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DummyImplementationLookup implements ImplementationLookup {\n+\n+    @Override\n+    public Integer getPriority() {\n+        return -1;\n+    }\n+\n+    @Override\n+    public void load() {\n+        // do nothing\n+    }\n+\n+    @Override\n+    public Set<String> getClassNames(final Type type) {\n+        return Collections.emptySet();\n+    }\n+\n+    @Override\n+    public Class<Reportlet> getReportletClass(\n+            final Class<? extends ReportletConf> reportletConfClass) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Class<? extends AccountRule> getAccountRuleClass(\n+            final Class<? extends AccountRuleConf> accountRuleConfClass) {\n+\n+        return DefaultAccountRule.class;\n+    }\n+\n+    @Override\n+    public Class<? extends PasswordRule> getPasswordRuleClass(\n+            final Class<? extends PasswordRuleConf> passwordRuleConfClass) {\n+\n+        return DefaultPasswordRule.class;\n+    }\n+\n+}"}]}