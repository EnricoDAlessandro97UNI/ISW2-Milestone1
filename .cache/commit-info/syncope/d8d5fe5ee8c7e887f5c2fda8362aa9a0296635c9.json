{"sha":"d8d5fe5ee8c7e887f5c2fda8362aa9a0296635c9","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ4ZDVmZTVlZThjN2U4ODdmNWMyZmRhODM2MmFhOWEwMjk2NjM1Yzk=","commit":{"author":{"name":"Colm O hEigeartaigh","email":"coheigea@apache.org","date":"2017-08-11T11:38:06Z"},"committer":{"name":"Colm O hEigeartaigh","email":"coheigea@apache.org","date":"2017-08-11T12:15:07Z"},"message":"Dynamically generate a keypair for use in the SAML signing tests","tree":{"sha":"ecd8ad3fe89d542114e5b81e62a36885cc735bd0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ecd8ad3fe89d542114e5b81e62a36885cc735bd0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d8d5fe5ee8c7e887f5c2fda8362aa9a0296635c9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d8d5fe5ee8c7e887f5c2fda8362aa9a0296635c9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d8d5fe5ee8c7e887f5c2fda8362aa9a0296635c9","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d8d5fe5ee8c7e887f5c2fda8362aa9a0296635c9/comments","author":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"committer":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"parents":[{"sha":"a22a6b55f83846bf06bbb322e9acc234a9425ea5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a22a6b55f83846bf06bbb322e9acc234a9425ea5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a22a6b55f83846bf06bbb322e9acc234a9425ea5"}],"stats":{"total":127,"additions":108,"deletions":19},"files":[{"sha":"45a6214644f12d8123ba92779ba29a3867c5be2f","filename":"fit/core-reference/pom.xml","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d8d5fe5ee8c7e887f5c2fda8362aa9a0296635c9/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d8d5fe5ee8c7e887f5c2fda8362aa9a0296635c9/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=d8d5fe5ee8c7e887f5c2fda8362aa9a0296635c9","patch":"@@ -176,6 +176,13 @@ under the License.\n       <artifactId>junit</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcpkix-jdk15on</artifactId>\n+      <version>${bouncycastle.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+\n   </dependencies>\n \n   <build>"},{"sha":"9ee5653995d393f6f848ae5c75cd24664eee579c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2ITCase.java","status":"modified","additions":98,"deletions":6,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d8d5fe5ee8c7e887f5c2fda8362aa9a0296635c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d8d5fe5ee8c7e887f5c2fda8362aa9a0296635c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java?ref=d8d5fe5ee8c7e887f5c2fda8362aa9a0296635c9","patch":"@@ -26,12 +26,23 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import java.io.File;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.math.BigInteger;\n import java.nio.charset.StandardCharsets;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n import java.security.KeyStore;\n+import java.security.SecureRandom;\n+import java.security.cert.Certificate;\n import java.security.cert.X509Certificate;\n import java.util.Collections;\n+import java.util.Date;\n import java.util.Optional;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n@@ -71,6 +82,13 @@\n import org.apache.wss4j.dom.WSConstants;\n import org.apache.wss4j.dom.engine.WSSConfig;\n import org.apache.xml.security.signature.XMLSignature;\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.asn1.x500.style.RFC4519Style;\n+import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;\n+import org.bouncycastle.cert.X509v3CertificateBuilder;\n+import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n+import org.bouncycastle.operator.ContentSigner;\n+import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n import org.joda.time.DateTime;\n import org.junit.AfterClass;\n import org.junit.Assume;\n@@ -85,6 +103,8 @@\n public class SAML2ITCase extends AbstractITCase {\n \n     private static SyncopeClient anonymous;\n+    private static Path keystorePath;\n+    private static Path truststorePath;\n \n     @BeforeClass\n     public static void setup() {\n@@ -97,13 +117,17 @@ public static void setup() {\n     }\n \n     @BeforeClass\n-    public static void importFromIdPMetadata() {\n+    public static void importFromIdPMetadata() throws Exception {\n         if (!SAML2SPDetector.isSAML2SPAvailable()) {\n             return;\n         }\n \n         assertTrue(saml2IdPService.list().isEmpty());\n \n+        createKeystores();\n+\n+        updateMetadataWithCert();\n+\n         WebClient.client(saml2IdPService).\n                 accept(MediaType.APPLICATION_XML_TYPE).\n                 type(MediaType.APPLICATION_XML_TYPE);\n@@ -123,14 +147,17 @@ public static void importFromIdPMetadata() {\n     }\n \n     @AfterClass\n-    public static void clearIdPs() {\n+    public static void clearIdPs() throws Exception {\n         if (!SAML2SPDetector.isSAML2SPAvailable()) {\n             return;\n         }\n \n         for (SAML2IdPTO idp : saml2IdPService.list()) {\n             saml2IdPService.delete(idp.getKey());\n         }\n+\n+        Files.delete(keystorePath);\n+        Files.delete(truststorePath);\n     }\n \n     @Test\n@@ -409,16 +436,81 @@ private org.opensaml.saml.saml2.core.Response createResponse(\n         if (signAssertion) {\n             Crypto issuerCrypto = new Merlin();\n             KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n-            ClassLoader loader = Loader.getClassLoader(getClass());\n-            InputStream input = Merlin.loadInputStream(loader, \"keystore\");\n-            keyStore.load(input, \"changeit\".toCharArray());\n+            InputStream input = Files.newInputStream(keystorePath);\n+            keyStore.load(input, \"security\".toCharArray());\n             ((Merlin) issuerCrypto).setKeyStore(keyStore);\n \n-            assertion.signAssertion(\"sp\", \"changeit\", issuerCrypto, false);\n+            assertion.signAssertion(\"subject\", \"security\", issuerCrypto, false);\n         }\n \n         response.getAssertions().add(assertion.getSaml2());\n \n         return response;\n     }\n+\n+    private static void createKeystores() throws Exception {\n+        // Create KeyPair\n+        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n+        keyPairGenerator.initialize(1024, new SecureRandom());\n+        KeyPair keyPair = keyPairGenerator.generateKeyPair();\n+\n+        Date currentDate = new Date();\n+        Date expiryDate = new Date(currentDate.getTime() + 365L * 24L * 60L * 60L * 1000L);\n+\n+        // Create X509Certificate\n+        String issuerName = \"CN=Issuer\";\n+        String subjectName = \"CN=Subject\";\n+        BigInteger serial = new BigInteger(\"123456\");\n+        X509v3CertificateBuilder certBuilder =\n+                        new X509v3CertificateBuilder(new X500Name(RFC4519Style.INSTANCE, issuerName), serial, currentDate, expiryDate,\n+                                        new X500Name(RFC4519Style.INSTANCE, subjectName),\n+                                        SubjectPublicKeyInfo.getInstance(keyPair.getPublic().getEncoded()));\n+        ContentSigner contentSigner = new JcaContentSignerBuilder(\"SHA256WithRSAEncryption\").build(keyPair.getPrivate());\n+        X509Certificate certificate = new JcaX509CertificateConverter().getCertificate(certBuilder.build(contentSigner));\n+\n+        // Store Private Key + Certificate in Keystore\n+        KeyStore keystore = KeyStore.getInstance(\"JKS\");\n+        keystore.load(null, \"security\".toCharArray());\n+        keystore.setKeyEntry(\"subject\", keyPair.getPrivate(), \"security\".toCharArray(), new Certificate[] {certificate});\n+\n+        File keystoreFile = File.createTempFile(\"samlkeystore\", \".jks\");\n+        try (OutputStream output = Files.newOutputStream(keystoreFile.toPath())) {\n+            keystore.store(output, \"security\".toCharArray());\n+        }\n+        keystorePath = keystoreFile.toPath();\n+\n+        // Now store the Certificate in the truststore\n+        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+        trustStore.load(null, \"security\".toCharArray());\n+\n+        trustStore.setCertificateEntry(\"subject\", certificate);\n+\n+        File truststoreFile = File.createTempFile(\"samltruststore\", \".jks\");\n+        try (OutputStream output = Files.newOutputStream(truststoreFile.toPath())) {\n+            trustStore.store(output, \"security\".toCharArray());\n+        }\n+        truststorePath = truststoreFile.toPath();\n+    }\n+\n+    private static void updateMetadataWithCert() throws Exception {\n+        // Get encoded truststore cert\n+        KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+        InputStream input = Files.newInputStream(truststorePath);\n+        keyStore.load(input, \"security\".toCharArray());\n+        X509Certificate cert = (X509Certificate)keyStore.getCertificate(\"subject\");\n+        String certEncoded = java.util.Base64.getMimeEncoder().encodeToString(cert.getEncoded());\n+\n+        // Replace the \"cert-placeholder\" string in the metadata with the actual cert\n+        String basedir = System.getProperty(\"basedir\");\n+        if (basedir == null) {\n+            basedir = new File(\".\").getCanonicalPath();\n+        }\n+        Path path = FileSystems.getDefault().getPath(basedir, \"/src/test/resources/fediz.xml\");\n+        String content = new String(Files.readAllBytes(path), StandardCharsets.UTF_8);\n+        content = content.replaceAll(\"cert-placeholder\", certEncoded);\n+\n+        Path path2 = FileSystems.getDefault().getPath(basedir, \"/target/test-classes/fediz.xml\");\n+        Files.write(path2, content.getBytes());\n+    }\n+\n }"},{"sha":"b8cbda05a23bf5754b8edcc5c1a1b7b47a04235f","filename":"fit/core-reference/src/test/resources/fediz.xml","status":"modified","additions":1,"deletions":13,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d8d5fe5ee8c7e887f5c2fda8362aa9a0296635c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ffediz.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d8d5fe5ee8c7e887f5c2fda8362aa9a0296635c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ffediz.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ffediz.xml?ref=d8d5fe5ee8c7e887f5c2fda8362aa9a0296635c9","patch":"@@ -23,19 +23,7 @@ under the License.\n             <ds:KeyInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n                 <ds:X509Data>\n                     <ds:X509Certificate>\n-MIICwTCCAamgAwIBAgIEINqJ9TANBgkqhkiG9w0BAQsFADARMQ8wDQYDVQQDEwZSRUFMTUEwHhcN\n-MTUwNjEwMTU0NDE3WhcNMjUwNDE4MTU0NDE3WjARMQ8wDQYDVQQDEwZSRUFMTUEwggEiMA0GCSqG\n-SIb3DQEBAQUAA4IBDwAwggEKAoIBAQCJDSXn2lDR+JM+AsJarFG3/XGH7K+9AfAbQIz2IgB9MCpO\n-KVWTUPCvuo1I+Fp5nEGreuHYLEwgIiam3o+C9tvpLgtDDaDkmXjDzkWpk8z6+im72HZ/ODF93Rqw\n-jIiY5ZCzgDumFyPzdKiGwChThamidy+rd6oheSoi6qRVSMMcnwiEUmvkfFvV3izXRqeT5nGQwsin\n-y9mCEiGx8jkfxP++H0RQjVjhOwzfQ7epsR7dTQNf2ZhkBR3o6wKV9QnF2IBWHZpA9EK58rWU9H6j\n-G7b631rYvwsbOUF9HcZ8DI2BFh+4p18jDN/fnjNGSLr9rYOExpsIiF1cHBK7Tr7WwCmDAgMBAAGj\n-ITAfMB0GA1UdDgQWBBRHy0qYoLm9jx/1L6r61NznHKun2jANBgkqhkiG9w0BAQsFAAOCAQEAR9rU\n-5Sp1FsOErdvKNFqeaKl0oq6Fuz7BWcGm2kK6+1ZbWE8IOv6Vh+BlLuOe5hF7aLUbm8UIjhKsmg0M\n-Ey5MBwkBZktT1qhQteMuiKgYR7CxayCxO0f125RYvvwntJa5rI7bUrzOqX29VQD1qQ/Tb+08fULT\n-L7oURP+g88Ff99dn3IpO4VZxZdsbl4+KZRtqQvPAdXNYjOajJtPzS489+/DtfWJ6wPm/7YZ4did4\n-1fYcrdwyEZ15L0/5i931z7sztNickm5WhO40qEVDKN6KrlV2Eyea0+933v2Pwe4resTlko9G2T5h\n-dEaSbvht2Q/JOMMmT91daeto2oS8HTKhTA==\n+cert-placeholder\n                    </ds:X509Certificate>\n                 </ds:X509Data>\n             </ds:KeyInfo>"},{"sha":"b3eb5e574da3fa342b2ebf3a07959196e7ef5959","filename":"pom.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d8d5fe5ee8c7e887f5c2fda8362aa9a0296635c9/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d8d5fe5ee8c7e887f5c2fda8362aa9a0296635c9/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=d8d5fe5ee8c7e887f5c2fda8362aa9a0296635c9","patch":"@@ -356,6 +356,8 @@ under the License.\n   <properties>\n     <syncope.version>${project.version}</syncope.version>\n \n+    <bouncycastle.version>1.57</bouncycastle.version>\n+\n     <connid.version>1.4.3.0</connid.version>\n     <connid.soap.version>1.4.2-SNAPSHOT</connid.soap.version>\n     <connid.rest.version>1.0.1</connid.rest.version>"}]}