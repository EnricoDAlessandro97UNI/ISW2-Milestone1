{"sha":"4821d51b4cd155377b35d3807cb7da7254d1d59c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ4MjFkNTFiNGNkMTU1Mzc3YjM1ZDM4MDdjYjdkYTcyNTRkMWQ1OWM=","commit":{"author":{"name":"Davide Cortellucci","email":"davide.cor94@gmail.com","date":"2020-01-03T12:07:41Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@apache.org","date":"2020-01-03T12:28:22Z"},"message":"Setting up test class for LDAPMembershipPullActions (#148)","tree":{"sha":"fa2c166453d38d8b03b7e5abaa9326821cc9264c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/fa2c166453d38d8b03b7e5abaa9326821cc9264c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4821d51b4cd155377b35d3807cb7da7254d1d59c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4821d51b4cd155377b35d3807cb7da7254d1d59c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4821d51b4cd155377b35d3807cb7da7254d1d59c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4821d51b4cd155377b35d3807cb7da7254d1d59c/comments","author":{"login":"Dodoveloper","id":17781050,"node_id":"MDQ6VXNlcjE3NzgxMDUw","avatar_url":"https://avatars.githubusercontent.com/u/17781050?v=4","gravatar_id":"","url":"https://api.github.com/users/Dodoveloper","html_url":"https://github.com/Dodoveloper","followers_url":"https://api.github.com/users/Dodoveloper/followers","following_url":"https://api.github.com/users/Dodoveloper/following{/other_user}","gists_url":"https://api.github.com/users/Dodoveloper/gists{/gist_id}","starred_url":"https://api.github.com/users/Dodoveloper/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Dodoveloper/subscriptions","organizations_url":"https://api.github.com/users/Dodoveloper/orgs","repos_url":"https://api.github.com/users/Dodoveloper/repos","events_url":"https://api.github.com/users/Dodoveloper/events{/privacy}","received_events_url":"https://api.github.com/users/Dodoveloper/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"91c7ae52d57361ab3a2585e1d71e43bf9ff0e3e5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/91c7ae52d57361ab3a2585e1d71e43bf9ff0e3e5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/91c7ae52d57361ab3a2585e1d71e43bf9ff0e3e5"}],"stats":{"total":278,"additions":278,"deletions":0},"files":[{"sha":"12fe7f57a890aa870af06876604a34c1b0d8ed47","filename":"core/provisioning-java/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4821d51b4cd155377b35d3807cb7da7254d1d59c/core%2Fprovisioning-java%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4821d51b4cd155377b35d3807cb7da7254d1d59c/core%2Fprovisioning-java%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fpom.xml?ref=4821d51b4cd155377b35d3807cb7da7254d1d59c","patch":"@@ -146,6 +146,11 @@ under the License.\n       <artifactId>junit-jupiter</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n \n   <build>"},{"sha":"1f5cac7ffe25914f66ae30937431997547f7c890","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/AbstractTest.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4821d51b4cd155377b35d3807cb7da7254d1d59c/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4821d51b4cd155377b35d3807cb7da7254d1d59c/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAbstractTest.java?ref=4821d51b4cd155377b35d3807cb7da7254d1d59c","patch":"@@ -26,10 +26,15 @@\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.junit.jupiter.MockitoExtension;\n import org.springframework.orm.jpa.EntityManagerFactoryUtils;\n import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n \n @SpringJUnitConfig(classes = { ProvisioningTestContext.class })\n+@ExtendWith(MockitoExtension.class)\n public abstract class AbstractTest {\n \n     protected EntityManager entityManager() {\n@@ -49,4 +54,9 @@ public static void init() {\n         EntitlementsHolder.getInstance().addAll(IdMEntitlement.values());\n         EntitlementsHolder.getInstance().addAll(AMEntitlement.values());\n     }\n+\n+    @BeforeEach\n+    public void initMocks() {\n+        MockitoAnnotations.initMocks(this);\n+    }\n }"},{"sha":"2b43b3f0b773e2db6da11638aea7d2de73542883","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActionsTest.java","status":"added","additions":244,"deletions":0,"changes":244,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4821d51b4cd155377b35d3807cb7da7254d1d59c/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActionsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4821d51b4cd155377b35d3807cb7da7254d1d59c/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActionsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActionsTest.java?ref=4821d51b4cd155377b35d3807cb7da7254d1d59c","patch":"@@ -0,0 +1,244 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.pushpull;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.ConnConfPropSchema;\n+import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.common.lib.types.MatchType;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.PullMatch;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n+import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n+import org.apache.syncope.core.provisioning.api.Connector;\n+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n+import org.apache.syncope.core.provisioning.java.AbstractTest;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.SyncDelta;\n+import org.identityconnectors.framework.common.objects.Uid;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.quartz.JobExecutionException;\n+import org.quartz.Scheduler;\n+import org.quartz.SchedulerException;\n+import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+public class LDAPMembershipPullActionsTest extends AbstractTest {\n+\n+    @Mock\n+    private AnyTypeDAO anyTypeDAO;\n+\n+    @Mock\n+    private GroupDAO groupDAO;\n+\n+    @Mock\n+    private InboundMatcher inboundMatcher;\n+\n+    @InjectMocks\n+    private LDAPMembershipPullActions ldapMembershipPullActions;\n+\n+    @Mock\n+    private SyncDelta syncDelta;\n+\n+    @Mock\n+    private ProvisioningProfile<?, ?> profile;\n+\n+    @Mock\n+    private ProvisioningReport result;\n+\n+    @Mock\n+    private Map<String, Set<String>> membershipsAfter;\n+\n+    @Mock\n+    private ProvisioningTask provisioningTask;\n+\n+    @Mock\n+    private ExternalResource externalResource;\n+\n+    @Mock\n+    private Connector connector;\n+\n+    @Mock\n+    private ConnectorObject connectorObj;\n+\n+    @Mock\n+    private ConnInstance connInstance;\n+\n+    private EntityTO entity;\n+\n+    private AnyPatch anyPatch;\n+\n+    private Map<String, Set<String>> membershipsBefore;\n+\n+    private User user;\n+\n+    Set<ConnConfProperty> connConfProperties;\n+\n+    @BeforeEach\n+    public void initTest() {\n+        List<UMembership> uMembList = new ArrayList<>();\n+        UMembership uMembership = new JPAUMembership();\n+        user = new JPAUser();\n+        uMembership.setLeftEnd(user);\n+        ReflectionTestUtils.setField(user, \"id\", UUID.randomUUID().toString());\n+        uMembList.add(uMembership);\n+\n+        anyPatch = new UserPatch();\n+        membershipsBefore = new HashMap<>();\n+        ReflectionTestUtils.setField(ldapMembershipPullActions, \"membershipsBefore\", membershipsBefore);\n+        ReflectionTestUtils.setField(ldapMembershipPullActions, \"membershipsAfter\", membershipsAfter);\n+\n+        lenient().when(groupDAO.findUMemberships(groupDAO.find(anyString()))).thenReturn(uMembList);\n+\n+        ConnConfPropSchema connConfPropSchema = new ConnConfPropSchema();\n+        connConfPropSchema.setName(\"testSchemaName\");\n+        ConnConfProperty connConfProperty = new ConnConfProperty();\n+        connConfProperty.setSchema(connConfPropSchema);\n+        connConfProperties = new HashSet<>();\n+        connConfProperties.add(connConfProperty);\n+\n+        lenient().when(profile.getTask()).thenReturn(provisioningTask);\n+        lenient().when(provisioningTask.getResource()).thenReturn(externalResource);\n+        lenient().when(anyTypeDAO.findUser()).thenReturn(new JPAAnyType());\n+\n+        lenient().when(profile.getConnector()).thenReturn(connector);\n+        lenient().when(syncDelta.getObject()).thenReturn(connectorObj);\n+        lenient().when(connector.getConnInstance()).thenReturn(connInstance);\n+        lenient().when(connInstance.getConf()).thenReturn(connConfProperties);\n+    }\n+\n+    @Test\n+    public void beforeUpdateWithGroupTOAndEmptyMemberships() throws JobExecutionException {\n+        entity = new GroupTO();\n+        entity.setKey(UUID.randomUUID().toString());\n+        Set<String> expected = new HashSet<>();\n+        expected.add(entity.getKey());\n+\n+        ldapMembershipPullActions.beforeUpdate(profile, syncDelta, entity, anyPatch);\n+\n+        assertTrue(entity instanceof GroupTO);\n+        assertEquals(1, membershipsBefore.get(user.getKey()).size());\n+        assertEquals(expected, membershipsBefore.get(user.getKey()));\n+    }\n+\n+    @Test\n+    public void beforeUpdate() throws JobExecutionException {\n+        entity = new UserTO();\n+        entity.setKey(UUID.randomUUID().toString());\n+        Set<String> memb = new HashSet<>();\n+        memb.add(entity.getKey());\n+        membershipsBefore.put(user.getKey(), memb);\n+\n+        ldapMembershipPullActions.beforeUpdate(profile, syncDelta, entity, anyPatch);\n+\n+        assertTrue(!(entity instanceof GroupTO));\n+        assertEquals(1, membershipsBefore.get(user.getKey()).size());\n+    }\n+\n+    @Test\n+    @SuppressWarnings(value = { \"rawtypes\", \"unchecked\" })\n+    public void afterWithEmptyAttributes(@Mock Attribute attribute) throws JobExecutionException {\n+        entity = new GroupTO();\n+        Optional provision = Optional.of(new JPAProvision());\n+\n+        when(connectorObj.getAttributeByName(anyString())).thenReturn(attribute);\n+        when(externalResource.getProvision(any(AnyType.class))).thenReturn(provision);\n+\n+        ldapMembershipPullActions.after(profile, syncDelta, entity, result);\n+\n+        assertTrue(entity instanceof GroupTO);\n+        assertTrue(provision.isPresent());\n+        assertEquals(new LinkedList<>(), attribute.getValue());\n+    }\n+\n+    @Test\n+    @SuppressWarnings(value = { \"rawtypes\", \"unchecked\" })\n+    public void after() throws JobExecutionException {\n+        entity = new UserTO();\n+        Optional provision = Optional.empty();\n+        Optional match = Optional.of(new PullMatch(MatchType.ANY, user));\n+        String expectedUid = UUID.randomUUID().toString();\n+        Attribute attribute = new Uid(expectedUid);\n+        List<Object> expected = new LinkedList<>();\n+        expected.add(expectedUid);\n+\n+        when(connectorObj.getAttributeByName(anyString())).thenReturn(attribute);\n+        when(externalResource.getProvision(any(AnyType.class))).thenReturn(provision);\n+        when(inboundMatcher.match(any(AnyType.class), anyString(), any(ExternalResource.class), any(Connector.class))).\n+                thenReturn(match);\n+\n+        ldapMembershipPullActions.after(profile, syncDelta, entity, result);\n+\n+        verify(membershipsAfter).get(anyString());\n+        verify(membershipsAfter).put(anyString(), any());\n+        assertTrue(!(entity instanceof GroupTO));\n+        assertTrue(!provision.isPresent());\n+        assertEquals(expected, attribute.getValue());\n+        assertTrue(match.isPresent());\n+    }\n+\n+    @Test\n+    public void afterAll(\n+            @Mock Map<String, Object> jobMap,\n+            @Mock SchedulerFactoryBean schedulerFactoryBean,\n+            @Mock Scheduler scheduler) throws JobExecutionException, SchedulerException {\n+        ReflectionTestUtils.setField(ldapMembershipPullActions, \"scheduler\", schedulerFactoryBean);\n+        when(schedulerFactoryBean.getScheduler()).thenReturn(scheduler);\n+\n+        ldapMembershipPullActions.afterAll(profile);\n+\n+        verify(scheduler).scheduleJob(any(), any());\n+    }\n+\n+}"},{"sha":"5895d206007323a27bd4667f236415c60cb74db6","filename":"core/provisioning-java/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4821d51b4cd155377b35d3807cb7da7254d1d59c/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fresources%2Fmockito-extensions%2Forg.mockito.plugins.MockMaker","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4821d51b4cd155377b35d3807cb7da7254d1d59c/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fresources%2Fmockito-extensions%2Forg.mockito.plugins.MockMaker","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fresources%2Fmockito-extensions%2Forg.mockito.plugins.MockMaker?ref=4821d51b4cd155377b35d3807cb7da7254d1d59c","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+mock-maker-inline"},{"sha":"1ed03551af1581a09c998519e520090e42504f76","filename":"pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4821d51b4cd155377b35d3807cb7da7254d1d59c/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4821d51b4cd155377b35d3807cb7da7254d1d59c/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=4821d51b4cd155377b35d3807cb7da7254d1d59c","patch":"@@ -452,6 +452,7 @@ under the License.\n     <h2.version>1.4.200</h2.version>\n \n     <junit.version>5.5.2</junit.version>\n+\n     <mockito.version>3.2.4</mockito.version>\n \n     <conf.directory>${project.build.directory}/test-classes</conf.directory>"}]}