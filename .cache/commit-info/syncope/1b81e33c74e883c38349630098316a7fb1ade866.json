{"sha":"1b81e33c74e883c38349630098316a7fb1ade866","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjFiODFlMzNjNzRlODgzYzM4MzQ5NjMwMDk4MzE2YTdmYjFhZGU4NjY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-29T16:31:58Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-29T16:32:32Z"},"message":"[SYNCOPE-141][SYNCOPE-142] Implementation completed","tree":{"sha":"40eb70db74413aae3b35dc7289fa2d1755b2c028","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/40eb70db74413aae3b35dc7289fa2d1755b2c028"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1b81e33c74e883c38349630098316a7fb1ade866","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1b81e33c74e883c38349630098316a7fb1ade866","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1b81e33c74e883c38349630098316a7fb1ade866","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1b81e33c74e883c38349630098316a7fb1ade866/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"6d368c8b264e11e35d709365e39e663ede7bc57e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6d368c8b264e11e35d709365e39e663ede7bc57e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6d368c8b264e11e35d709365e39e663ede7bc57e"}],"stats":{"total":3298,"additions":1808,"deletions":1490},"files":[{"sha":"ad8b658a5ddc934f23cbf967f95023bba1c5906f","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskResultManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -113,7 +113,7 @@ private void printPropagationTask(final PropagationTaskTO propagationTaskTO) {\n         System.out.println(\"     latest execution status: \"\n                 + propagationTaskTO.getLatestExecStatus());\n         System.out.println(\"     class name: \" + propagationTaskTO.getObjectClassName());\n-        System.out.println(\"     xml attribute: \" + propagationTaskTO.getXmlAttributes());\n+        System.out.println(\"     attributes: \" + propagationTaskTO.getAttributes());\n         System.out.println(\"     start date: \" + propagationTaskTO.getStartDate());\n         System.out.println(\"     end date: \" + propagationTaskTO.getEndDate());\n         System.out.println(\"     operation: \" + propagationTaskTO.getOperation());"},{"sha":"b175842890b06cde8289e9889a81e6f6a5621098","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserResultManager.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserResultManager.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -58,8 +58,6 @@ private void printUser(final UserTO userTO) {\n         System.out.println(\"    last change: \" + userTO.getLastChangeDate());\n         System.out.println(\"    last login: \" + userTO.getLastLoginDate());\n         System.out.println(\"    failed logins: \" + userTO.getFailedLogins());\n-        System.out.println(\"PROPAGATIONS:\");\n-        printPropagationStatus(userTO.getPropagationStatusTOs());\n         System.out.println(\"RELATIONSHIPS:\");\n         printRelationships(userTO.getRelationships());\n         System.out.println(\"    security question id: \" + userTO.getSecurityQuestion());"},{"sha":"4a2101dbe73b150a360f1f44ecd4fa67e066aa6d","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Realms.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.console.pages;\n \n-import static org.apache.wicket.Component.ENABLE;\n-\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.panels.Realm;"},{"sha":"8a28b16cb33493798acf2da267024ffb9714c8b1","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/Realm.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import static org.apache.syncope.common.lib.types.AnyTypeKind.USER;\n-\n import com.googlecode.wicket.jquery.core.panel.LabelPanel;\n import de.agilecoders.wicket.core.markup.html.bootstrap.tabs.AjaxBootstrapTabbedPanel;\n import java.util.ArrayList;"},{"sha":"7e6aee6b53b9fc9704f9be09551fb26315e16d04","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/RealmModalPanel.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmModalPanel.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import static org.apache.wicket.Component.ENABLE;\n-\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.pages.AbstractBasePage;"},{"sha":"905fb4c316410bae6e259bf802b855f80623ab4e","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -254,6 +254,19 @@ public <T> T prefer(final Class<T> serviceClass, final Preference preference) {\n         return header(serviceClass, RESTHeaders.PREFER, preference.toString());\n     }\n \n+    /**\n+     * Asks for asynchronous propagation towards external resources with null priority.\n+     *\n+     * @param <T> any service class\n+     * @param serviceClass service class reference\n+     * @param nullPriorityAsync whether asynchronous propagation towards external resources with null priority is\n+     * requested\n+     * @return service instance of the given reference class, with related header set\n+     */\n+    public <T> T nullPriorityAsync(final Class<T> serviceClass, final boolean nullPriorityAsync) {\n+        return header(serviceClass, RESTHeaders.NULL_PRIORITY_ASYNC, nullPriorityAsync);\n+    }\n+\n     /**\n      * Sets the {@code If-Match} or {@code If-None-Match} header on the given service instance.\n      *"},{"sha":"93e6b9e02b8a48152003c4192c4fe091f4450594","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/PasswordPatch.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FPasswordPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FPasswordPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FPasswordPatch.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -55,7 +55,7 @@ public Builder resource(final String resource) {\n             return this;\n         }\n \n-        public Builder values(final String... resources) {\n+        public Builder resources(final String... resources) {\n             CollectionUtils.addAll(getInstance().getResources(), resources);\n             return this;\n         }"},{"sha":"ce4a58f2e7a0e97321911c668e9f5ab820860790","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyTO.java","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -58,8 +58,6 @@ public abstract class AnyTO extends ConnObjectTO {\n \n     private final Set<String> resources = new HashSet<>();\n \n-    private final List<PropagationStatus> propagationStatusTOs = new ArrayList<>();\n-\n     public long getKey() {\n         return key;\n     }\n@@ -140,11 +138,4 @@ public Set<String> getResources() {\n         return resources;\n     }\n \n-    @XmlElementWrapper(name = \"propagationStatuses\")\n-    @XmlElement(name = \"propagationStatus\")\n-    @JsonProperty(\"propagationStatuses\")\n-    public List<PropagationStatus> getPropagationStatusTOs() {\n-        return propagationStatusTOs;\n-    }\n-\n }"},{"sha":"c2caa60276c84ee458be6a5d582011226d2ee2a6","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/PropagationStatus.java","status":"modified","additions":0,"deletions":50,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationStatus.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -57,92 +57,42 @@ public class PropagationStatus extends AbstractBaseBean {\n      */\n     private String failureReason;\n \n-    /**\n-     * After object getter.\n-     *\n-     * @return after object.\n-     */\n     public ConnObjectTO getAfterObj() {\n         return afterObj;\n     }\n \n-    /**\n-     * After object setter.\n-     *\n-     * @param afterObj object.\n-     */\n     public void setAfterObj(final ConnObjectTO afterObj) {\n         this.afterObj = afterObj;\n     }\n \n-    /**\n-     * Before object getter.\n-     *\n-     * @return before object.\n-     */\n     public ConnObjectTO getBeforeObj() {\n         return beforeObj;\n     }\n \n-    /**\n-     * Before object setter.\n-     *\n-     * @param beforeObj object.\n-     */\n     public void setBeforeObj(final ConnObjectTO beforeObj) {\n         this.beforeObj = beforeObj;\n     }\n \n-    /**\n-     * resource name getter.\n-     *\n-     * @return resource name.\n-     */\n     public String getResource() {\n         return resource;\n     }\n \n-    /**\n-     * Resource name setter.\n-     *\n-     * @param resource resource name\n-     */\n     public void setResource(final String resource) {\n         this.resource = resource;\n     }\n \n-    /**\n-     * Propagation execution status getter.\n-     *\n-     * @return status\n-     */\n     public PropagationTaskExecStatus getStatus() {\n         return status;\n     }\n \n-    /**\n-     * Propagation execution status setter.\n-     *\n-     * @param status propagation execution status\n-     */\n     public void setStatus(final PropagationTaskExecStatus status) {\n         this.status = status;\n     }\n \n-    /**\n-     * Propagation execution message getter.\n-     *\n-     * @return failureReason.\n-     */\n     public String getFailureReason() {\n         return failureReason;\n     }\n \n-    /**\n-     * Propagation execution failure message setter.\n-     *\n-     * @param failureReason describes why this propagation failed\n-     */\n     public void setFailureReason(final String failureReason) {\n         this.failureReason = failureReason;\n     }"},{"sha":"d176bb2a4bf4a8c8a2f32c463efc792b1f290c35","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/PropagationTaskTO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationTaskTO.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -35,7 +35,7 @@ public class PropagationTaskTO extends AbstractTaskTO {\n \n     private String oldConnObjectKey;\n \n-    private String xmlAttributes;\n+    private String attributes;\n \n     private String resource;\n \n@@ -77,12 +77,12 @@ public void setOperation(final ResourceOperation operation) {\n         this.operation = operation;\n     }\n \n-    public String getXmlAttributes() {\n-        return xmlAttributes;\n+    public String getAttributes() {\n+        return attributes;\n     }\n \n-    public void setXmlAttributes(final String xmlAttributes) {\n-        this.xmlAttributes = xmlAttributes;\n+    public void setAttributes(final String attributes) {\n+        this.attributes = attributes;\n     }\n \n     public String getObjectClassName() {"},{"sha":"f2a5bc1012f855a669230562c47a30b562ecfe36","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ProvisioningResult.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisioningResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisioningResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisioningResult.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"provisioningResult\")\n+@XmlType\n+public class ProvisioningResult<A extends AnyTO> extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 351317476398082746L;\n+\n+    private A any;\n+\n+    private final List<PropagationStatus> propagationStatuses = new ArrayList<>();\n+\n+    public A getAny() {\n+        return any;\n+    }\n+\n+    public void setAny(final A any) {\n+        this.any = any;\n+    }\n+\n+    @XmlElementWrapper(name = \"propagationStatuses\")\n+    @XmlElement(name = \"propagationStatus\")\n+    @JsonProperty(\"propagationStatuses\")\n+    public List<PropagationStatus> getPropagationStatuses() {\n+        return propagationStatuses;\n+    }\n+\n+}"},{"sha":"a74042f0aba2661534894c82a3282c608ed8e93c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ResourceTO.java","status":"modified","additions":3,"deletions":13,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -56,9 +56,7 @@ public class ResourceTO extends AbstractAnnotatedBean {\n \n     private final List<ProvisionTO> provisions = new ArrayList<>();\n \n-    private boolean propagationPrimary;\n-\n-    private int propagationPriority = 0;\n+    private Integer propagationPriority;\n \n     private boolean randomPwdIfNotProvided;\n \n@@ -119,19 +117,11 @@ public void setConnectorDisplayName(final String connectorDisplayName) {\n         this.connectorDisplayName = connectorDisplayName;\n     }\n \n-    public boolean isPropagationPrimary() {\n-        return propagationPrimary;\n-    }\n-\n-    public void setPropagationPrimary(final boolean propagationPrimary) {\n-        this.propagationPrimary = propagationPrimary;\n-    }\n-\n-    public int getPropagationPriority() {\n+    public Integer getPropagationPriority() {\n         return propagationPriority;\n     }\n \n-    public void setPropagationPriority(final int propagationPriority) {\n+    public void setPropagationPriority(final Integer propagationPriority) {\n         this.propagationPriority = propagationPriority;\n     }\n "},{"sha":"0b69531e4a0ba2b310cc5b679b4593552c35e8c2","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/RESTHeaders.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -33,6 +33,11 @@ public final class RESTHeaders {\n \n     public static final String RESOURCE_KEY = \"X-Syncope-Key\";\n \n+    /**\n+     * Asks for asynchronous propagation towards external resources with null priority.\n+     */\n+    public static final String NULL_PRIORITY_ASYNC = \"X-Syncope-Null-Priority-Async\";\n+\n     /**\n      * Declares the type of exception being raised.\n      *"},{"sha":"ec8495c1395788643aa9a0145a922b3eb07382c1","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyService.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -111,7 +111,7 @@ AttrTO read(\n      *\n      * @param anyTO any object to be created\n      * @return Response object featuring Location header of created any object as well as the any\n-     * object itself enriched with propagation status information - AnyTO as Entity\n+     * object itself enriched with propagation status information - ProvisioningResult as Entity\n      */\n     @POST\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n@@ -123,7 +123,7 @@ AttrTO read(\n      *\n      * @param anyPatch modification to be applied to any object matching the provided key\n      * @return Response object featuring the updated any object enriched with propagation status information\n-     * - AnyTO as Entity\n+     * - ProvisioningResult as Entity\n      */\n     @PATCH\n     @Path(\"{key}\")\n@@ -153,7 +153,7 @@ Response update(\n      *\n      * @param anyTO complete update\n      * @return Response object featuring the updated any object enriched with propagation status information\n-     * - AnyTO as Entity\n+     * - ProvisioningResult as Entity\n      */\n     @PUT\n     @Path(\"{key}\")\n@@ -182,7 +182,7 @@ void delete(\n      *\n      * @param key key of any object to be deleted\n      * @return Response object featuring the deleted any object enriched with propagation status information\n-     * - AnyTO as Entity\n+     * - ProvisioningResult as Entity\n      */\n     @DELETE\n     @Path(\"{key}\")"},{"sha":"21140ed0a747554918a6297d7afe6c07b25346c7","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -56,7 +56,7 @@ public interface UserSelfService extends JAXRSService {\n      * @param userTO user to be created\n      * @param storePassword whether password shall be stored internally\n      * @return Response object featuring Location header of self-registered user as well as the user\n-     * itself - UserTO as Entity\n+     * itself - ProvisioningResult as Entity\n      */\n     @POST\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n@@ -68,7 +68,7 @@ Response create(@NotNull UserTO userTO,\n      * Self-updates user.\n      *\n      * @param patch modification to be applied to self\n-     * @return Response object featuring the updated user - UserTO as Entity\n+     * @return Response object featuring the updated user - ProvisioningResult as Entity\n      */\n     @PATCH\n     @Path(\"{key}\")\n@@ -80,7 +80,7 @@ Response create(@NotNull UserTO userTO,\n      * Self-updates user.\n      *\n      * @param user complete update\n-     * @return Response object featuring the updated user - UserTO as Entity\n+     * @return Response object featuring the updated user - ProvisioningResult as Entity\n      */\n     @PUT\n     @Path(\"{key}\")\n@@ -91,7 +91,7 @@ Response create(@NotNull UserTO userTO,\n     /**\n      * Self-deletes user.\n      *\n-     * @return Response object featuring the deleted user - UserTO as Entity\n+     * @return Response object featuring the deleted user - ProvisioningResult as Entity\n      */\n     @DELETE\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n@@ -102,7 +102,7 @@ Response create(@NotNull UserTO userTO,\n      *\n      * @param password the password value to update\n      *\n-     * @return Response object featuring the updated user - UserTO as Entity\n+     * @return Response object featuring the updated user - ProvisioningResult as Entity\n      */\n     @POST\n     @Path(\"changePassword\")"},{"sha":"e23e6cd5eed681f4e4ae29002e2087d99226131e","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -65,7 +65,7 @@ public interface UserService extends AnyService<UserTO, UserPatch> {\n      * @param userTO user to be created\n      * @param storePassword whether password shall be stored internally\n      * @return Response object featuring Location header of created user as well as the user itself\n-     * enriched with propagation status information - UserTO as Entity\n+     * enriched with propagation status information - ProvisioningResult as Entity\n      */\n     @POST\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n@@ -79,7 +79,7 @@ Response create(\n      *\n      * @param statusPatch status update details\n      * @return Response object featuring the updated user enriched with propagation status information\n-     * - UserTO as Entity\n+     * - ProvisioningResult as Entity\n      */\n     @POST\n     @Path(\"{key}/status\")"},{"sha":"987595d91e8c95fea266b2e6d68d93e0e414a526","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":14,"deletions":26,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -31,6 +31,8 @@\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.PropagationStatus;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -111,16 +113,6 @@ protected Pair<TO, List<LogicActions>> beforeCreate(final TO input) {\n         return ImmutablePair.of(any, actions);\n     }\n \n-    protected TO afterCreate(final TO input, final List<LogicActions> actions) {\n-        TO any = input;\n-\n-        for (LogicActions action : actions) {\n-            any = action.afterCreate(any);\n-        }\n-\n-        return any;\n-    }\n-\n     protected Pair<P, List<LogicActions>> beforeUpdate(final P input, final String realmPath) {\n         Realm realm = realmDAO.find(realmPath);\n         if (realm == null) {\n@@ -141,16 +133,6 @@ protected Pair<P, List<LogicActions>> beforeUpdate(final P input, final String r\n         return ImmutablePair.of(mod, actions);\n     }\n \n-    protected TO afterUpdate(final TO input, final List<LogicActions> actions) {\n-        TO any = input;\n-\n-        for (LogicActions action : actions) {\n-            any = action.afterUpdate(any);\n-        }\n-\n-        return any;\n-    }\n-\n     protected Pair<TO, List<LogicActions>> beforeDelete(final TO input) {\n         Realm realm = realmDAO.find(input.getRealm());\n         if (realm == null) {\n@@ -171,14 +153,20 @@ protected Pair<TO, List<LogicActions>> beforeDelete(final TO input) {\n         return ImmutablePair.of(any, actions);\n     }\n \n-    protected TO afterDelete(final TO input, final List<LogicActions> actions) {\n+    protected ProvisioningResult<TO> after(\n+            final TO input, final List<PropagationStatus> statuses, final List<LogicActions> actions) {\n+\n         TO any = input;\n \n         for (LogicActions action : actions) {\n-            any = action.afterDelete(any);\n+            any = action.afterCreate(any);\n         }\n \n-        return any;\n+        ProvisioningResult<TO> result = new ProvisioningResult<>();\n+        result.setAny(any);\n+        result.getPropagationStatuses().addAll(statuses);\n+\n+        return result;\n     }\n \n     private static class StartsWithPredicate implements Predicate<String> {\n@@ -238,11 +226,11 @@ public boolean evaluate(final String ownedRealm) {\n \n     public abstract int count(List<String> realms);\n \n-    public abstract TO create(TO anyTO);\n+    public abstract ProvisioningResult<TO> create(TO anyTO, boolean nullPriorityAsync);\n \n-    public abstract TO update(P anyPatch);\n+    public abstract ProvisioningResult<TO> update(P anyPatch, boolean nullPriorityAsync);\n \n-    public abstract TO delete(Long key);\n+    public abstract ProvisioningResult<TO> delete(Long key, boolean nullPriorityAsync);\n \n     public abstract List<TO> list(\n             int page, int size, List<OrderByClause> orderBy,"},{"sha":"3bd4492eafec9b562e32dae3cf67285471ecc002","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractResourceAssociator.java","status":"modified","additions":12,"deletions":7,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractResourceAssociator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractResourceAssociator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractResourceAssociator.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -20,18 +20,23 @@\n \n import java.util.Collection;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n \n-public abstract class AbstractResourceAssociator<T extends AnyTO> extends AbstractLogic<T> {\n+public abstract class AbstractResourceAssociator<A extends AnyTO> extends AbstractLogic<A> {\n \n-    public abstract T unlink(Long id, Collection<String> resources);\n+    public abstract A unlink(Long key, Collection<String> resources);\n \n-    public abstract T link(Long id, Collection<String> resources);\n+    public abstract A link(Long key, Collection<String> resources);\n \n-    public abstract T unassign(Long id, Collection<String> resources);\n+    public abstract ProvisioningResult<A> unassign(\n+            Long key, Collection<String> resources, boolean nullPriorityAsync);\n \n-    public abstract T assign(Long id, Collection<String> resources, boolean changepwd, String password);\n+    public abstract ProvisioningResult<A> assign(\n+            Long key, Collection<String> resources, boolean changepwd, String password, boolean nullPriorityAsync);\n \n-    public abstract T deprovision(Long userId, Collection<String> resources);\n+    public abstract ProvisioningResult<A> deprovision(\n+            Long key, Collection<String> resources, boolean nullPriorityAsync);\n \n-    public abstract T provision(Long userId, Collection<String> resources, boolean changepwd, String password);\n+    public abstract ProvisioningResult<A> provision(\n+            Long key, Collection<String> resources, boolean changepwd, String password, boolean nullPriorityAsync);\n }"},{"sha":"b3f7a4a8f9fb646ae6f8e126fb8303ff28eb69ca","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":39,"deletions":30,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -24,7 +24,6 @@\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n@@ -37,6 +36,7 @@\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.Entitlement;\n@@ -147,7 +147,7 @@ public AnyObjectTO transform(final AnyObject input) {\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_CREATE + \"')\")\n     @Override\n-    public AnyObjectTO create(final AnyObjectTO anyObjectTO) {\n+    public ProvisioningResult<AnyObjectTO> create(final AnyObjectTO anyObjectTO, final boolean nullPriorityAsync) {\n         Pair<AnyObjectTO, List<LogicActions>> before = beforeCreate(anyObjectTO);\n \n         if (before.getLeft().getRealm() == null) {\n@@ -163,16 +163,17 @@ public AnyObjectTO create(final AnyObjectTO anyObjectTO) {\n             throw SyncopeClientException.build(ClientExceptionType.InvalidAnyType);\n         }\n \n-        Map.Entry<Long, List<PropagationStatus>> created = provisioningManager.create(before.getLeft());\n-        AnyObjectTO savedTO = binder.getAnyObjectTO(created.getKey());\n-        savedTO.getPropagationStatusTOs().addAll(created.getValue());\n+        Pair<Long, List<PropagationStatus>> created =\n+                provisioningManager.create(before.getLeft(), nullPriorityAsync);\n \n-        return afterCreate(savedTO, before.getValue());\n+        return after(binder.getAnyObjectTO(created.getKey()), created.getRight(), before.getRight());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n     @Override\n-    public AnyObjectTO update(final AnyObjectPatch anyObjectPatch) {\n+    public ProvisioningResult<AnyObjectTO> update(\n+            final AnyObjectPatch anyObjectPatch, final boolean nullPriorityAsync) {\n+\n         AnyObjectTO anyObjectTO = binder.getAnyObjectTO(anyObjectPatch.getKey());\n         Pair<AnyObjectPatch, List<LogicActions>> before = beforeUpdate(anyObjectPatch, anyObjectTO.getRealm());\n \n@@ -185,17 +186,15 @@ public AnyObjectTO update(final AnyObjectPatch anyObjectPatch) {\n             securityChecks(effectiveRealms, before.getLeft().getRealm().getValue(), before.getLeft().getKey());\n         }\n \n-        Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(anyObjectPatch);\n-\n-        AnyObjectTO updatedTO = binder.getAnyObjectTO(updated.getKey());\n-        updatedTO.getPropagationStatusTOs().addAll(updated.getValue());\n+        Pair<Long, List<PropagationStatus>> updated =\n+                provisioningManager.update(anyObjectPatch, nullPriorityAsync);\n \n-        return afterUpdate(updatedTO, before.getRight());\n+        return after(binder.getAnyObjectTO(updated.getKey()), updated.getRight(), before.getRight());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_DELETE + \"')\")\n     @Override\n-    public AnyObjectTO delete(final Long key) {\n+    public ProvisioningResult<AnyObjectTO> delete(final Long key, final boolean nullPriorityAsync) {\n         AnyObjectTO anyObject = binder.getAnyObjectTO(key);\n         Pair<AnyObjectTO, List<LogicActions>> before = beforeDelete(anyObject);\n \n@@ -204,13 +203,12 @@ public AnyObjectTO delete(final Long key) {\n                 Collections.singleton(before.getLeft().getRealm()));\n         securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n \n-        List<PropagationStatus> statuses = provisioningManager.delete(before.getLeft().getKey());\n+        List<PropagationStatus> statuses = provisioningManager.delete(before.getLeft().getKey(), nullPriorityAsync);\n \n         AnyObjectTO anyObjectTO = new AnyObjectTO();\n         anyObjectTO.setKey(before.getLeft().getKey());\n-        anyObjectTO.getPropagationStatusTOs().addAll(statuses);\n \n-        return afterDelete(anyObjectTO, before.getRight());\n+        return after(anyObjectTO, statuses, before.getRight());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n@@ -261,7 +259,9 @@ public StringPatchItem transform(final String resource) {\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n     @Override\n-    public AnyObjectTO unassign(final Long key, final Collection<String> resources) {\n+    public ProvisioningResult<AnyObjectTO> unassign(\n+            final Long key, final Collection<String> resources, final boolean nullPriorityAsync) {\n+\n         // security checks\n         AnyObjectTO anyObject = binder.getAnyObjectTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n@@ -279,16 +279,17 @@ public StringPatchItem transform(final String resource) {\n             }\n         }));\n \n-        return update(patch);\n+        return update(patch, nullPriorityAsync);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n     @Override\n-    public AnyObjectTO assign(\n+    public ProvisioningResult<AnyObjectTO> assign(\n             final Long key,\n             final Collection<String> resources,\n             final boolean changepwd,\n-            final String password) {\n+            final String password,\n+            final boolean nullPriorityAsync) {\n \n         // security checks\n         AnyObjectTO anyObject = binder.getAnyObjectTO(key);\n@@ -307,33 +308,37 @@ public StringPatchItem transform(final String resource) {\n             }\n         }));\n \n-        return update(patch);\n+        return update(patch, nullPriorityAsync);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n     @Override\n-    public AnyObjectTO deprovision(final Long key, final Collection<String> resources) {\n+    public ProvisioningResult<AnyObjectTO> deprovision(\n+            final Long key, final Collection<String> resources, final boolean nullPriorityAsync) {\n+\n         // security checks\n         AnyObjectTO anyObject = binder.getAnyObjectTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_UPDATE),\n                 Collections.singleton(anyObject.getRealm()));\n         securityChecks(effectiveRealms, anyObject.getRealm(), anyObject.getKey());\n \n-        List<PropagationStatus> statuses = provisioningManager.deprovision(key, resources);\n+        List<PropagationStatus> statuses = provisioningManager.deprovision(key, resources, nullPriorityAsync);\n \n-        AnyObjectTO updatedTO = binder.getAnyObjectTO(key);\n-        updatedTO.getPropagationStatusTOs().addAll(statuses);\n-        return updatedTO;\n+        ProvisioningResult<AnyObjectTO> result = new ProvisioningResult<>();\n+        result.setAny(binder.getAnyObjectTO(key));\n+        result.getPropagationStatuses().addAll(statuses);\n+        return result;\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n     @Override\n-    public AnyObjectTO provision(\n+    public ProvisioningResult<AnyObjectTO> provision(\n             final Long key,\n             final Collection<String> resources,\n             final boolean changePwd,\n-            final String password) {\n+            final String password,\n+            final boolean nullPriorityAsync) {\n \n         // security checks\n         AnyObjectTO anyObject = binder.getAnyObjectTO(key);\n@@ -342,8 +347,12 @@ public AnyObjectTO provision(\n                 Collections.singleton(anyObject.getRealm()));\n         securityChecks(effectiveRealms, anyObject.getRealm(), anyObject.getKey());\n \n-        anyObject.getPropagationStatusTOs().addAll(provisioningManager.provision(key, resources));\n-        return anyObject;\n+        List<PropagationStatus> statuses = provisioningManager.provision(key, resources, nullPriorityAsync);\n+\n+        ProvisioningResult<AnyObjectTO> result = new ProvisioningResult<>();\n+        result.setAny(binder.getAnyObjectTO(key));\n+        result.getPropagationStatuses().addAll(statuses);\n+        return result;\n     }\n \n     @Override"},{"sha":"60249f25d6e5ef987fd32f8aa1d921807ac136cb","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":36,"deletions":30,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -24,7 +24,6 @@\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n@@ -38,6 +37,7 @@\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.Entitlement;\n@@ -171,7 +171,7 @@ public GroupTO transform(final Group input) {\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_CREATE + \"')\")\n     @Override\n-    public GroupTO create(final GroupTO groupTO) {\n+    public ProvisioningResult<GroupTO> create(final GroupTO groupTO, final boolean nullPriorityAsync) {\n         Pair<GroupTO, List<LogicActions>> before = beforeCreate(groupTO);\n \n         if (before.getLeft().getRealm() == null) {\n@@ -183,16 +183,15 @@ public GroupTO create(final GroupTO groupTO) {\n                 Collections.singleton(before.getLeft().getRealm()));\n         securityChecks(effectiveRealms, before.getLeft().getRealm(), null);\n \n-        Map.Entry<Long, List<PropagationStatus>> created = provisioningManager.create(before.getLeft());\n-        GroupTO savedTO = binder.getGroupTO(created.getKey());\n-        savedTO.getPropagationStatusTOs().addAll(created.getValue());\n+        Pair<Long, List<PropagationStatus>> created =\n+                provisioningManager.create(before.getLeft(), nullPriorityAsync);\n \n-        return afterCreate(savedTO, before.getValue());\n+        return after(binder.getGroupTO(created.getKey()), created.getRight(), before.getRight());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n     @Override\n-    public GroupTO update(final GroupPatch groupPatch) {\n+    public ProvisioningResult<GroupTO> update(final GroupPatch groupPatch, final boolean nullPriorityAsync) {\n         GroupTO groupTO = binder.getGroupTO(groupPatch.getKey());\n         Pair<GroupPatch, List<LogicActions>> before = beforeUpdate(groupPatch, groupTO.getRealm());\n \n@@ -205,17 +204,14 @@ public GroupTO update(final GroupPatch groupPatch) {\n             securityChecks(effectiveRealms, before.getLeft().getRealm().getValue(), before.getLeft().getKey());\n         }\n \n-        Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(groupPatch);\n+        Pair<Long, List<PropagationStatus>> updated = provisioningManager.update(groupPatch, nullPriorityAsync);\n \n-        GroupTO updatedTO = binder.getGroupTO(updated.getKey());\n-        updatedTO.getPropagationStatusTOs().addAll(updated.getValue());\n-\n-        return afterUpdate(updatedTO, before.getRight());\n+        return after(binder.getGroupTO(updated.getKey()), updated.getRight(), before.getRight());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_DELETE + \"')\")\n     @Override\n-    public GroupTO delete(final Long key) {\n+    public ProvisioningResult<GroupTO> delete(final Long key, final boolean nullPriorityAsync) {\n         GroupTO group = binder.getGroupTO(key);\n         Pair<GroupTO, List<LogicActions>> before = beforeDelete(group);\n \n@@ -237,13 +233,12 @@ public String transform(final Group group) {\n             throw sce;\n         }\n \n-        List<PropagationStatus> statuses = provisioningManager.delete(before.getLeft().getKey());\n+        List<PropagationStatus> statuses = provisioningManager.delete(before.getLeft().getKey(), nullPriorityAsync);\n \n         GroupTO groupTO = new GroupTO();\n         groupTO.setKey(before.getLeft().getKey());\n-        groupTO.getPropagationStatusTOs().addAll(statuses);\n \n-        return afterDelete(groupTO, before.getRight());\n+        return after(groupTO, statuses, before.getRight());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n@@ -294,7 +289,9 @@ public StringPatchItem transform(final String resource) {\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n     @Override\n-    public GroupTO unassign(final Long key, final Collection<String> resources) {\n+    public ProvisioningResult<GroupTO> unassign(\n+            final Long key, final Collection<String> resources, final boolean nullPriorityAsync) {\n+\n         // security checks\n         GroupTO group = binder.getGroupTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n@@ -312,16 +309,17 @@ public StringPatchItem transform(final String resource) {\n             }\n         }));\n \n-        return update(patch);\n+        return update(patch, nullPriorityAsync);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n     @Override\n-    public GroupTO assign(\n+    public ProvisioningResult<GroupTO> assign(\n             final Long key,\n             final Collection<String> resources,\n             final boolean changepwd,\n-            final String password) {\n+            final String password,\n+            final boolean nullPriorityAsync) {\n \n         // security checks\n         GroupTO group = binder.getGroupTO(key);\n@@ -340,33 +338,37 @@ public StringPatchItem transform(final String resource) {\n             }\n         }));\n \n-        return update(patch);\n+        return update(patch, nullPriorityAsync);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n     @Override\n-    public GroupTO deprovision(final Long key, final Collection<String> resources) {\n+    public ProvisioningResult<GroupTO> deprovision(\n+            final Long key, final Collection<String> resources, final boolean nullPriorityAsync) {\n+\n         // security checks\n         GroupTO group = binder.getGroupTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_UPDATE),\n                 Collections.singleton(group.getRealm()));\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n-        List<PropagationStatus> statuses = provisioningManager.deprovision(key, resources);\n+        List<PropagationStatus> statuses = provisioningManager.deprovision(key, resources, nullPriorityAsync);\n \n-        GroupTO updatedTO = binder.getGroupTO(key);\n-        updatedTO.getPropagationStatusTOs().addAll(statuses);\n-        return updatedTO;\n+        ProvisioningResult<GroupTO> result = new ProvisioningResult<>();\n+        result.setAny(binder.getGroupTO(key));\n+        result.getPropagationStatuses().addAll(statuses);\n+        return result;\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n     @Override\n-    public GroupTO provision(\n+    public ProvisioningResult<GroupTO> provision(\n             final Long key,\n             final Collection<String> resources,\n             final boolean changePwd,\n-            final String password) {\n+            final String password,\n+            final boolean nullPriorityAsync) {\n \n         // security checks\n         GroupTO group = binder.getGroupTO(key);\n@@ -375,8 +377,12 @@ public GroupTO provision(\n                 Collections.singleton(group.getRealm()));\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n-        group.getPropagationStatusTOs().addAll(provisioningManager.provision(key, resources));\n-        return group;\n+        List<PropagationStatus> statuses = provisioningManager.provision(key, resources, nullPriorityAsync);\n+\n+        ProvisioningResult<GroupTO> result = new ProvisioningResult<>();\n+        result.setAny(binder.getGroupTO(key));\n+        result.getPropagationStatuses().addAll(statuses);\n+        return result;\n     }\n \n     @Override"},{"sha":"22b7ab5a83876676d732c1f689892098655dbd75","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":80,"deletions":57,"changes":137,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -24,7 +24,6 @@\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n@@ -39,6 +38,7 @@\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -169,22 +169,31 @@ public UserTO transform(final User input) {\n     }\n \n     @PreAuthorize(\"isAnonymous() or hasRole('\" + Entitlement.ANONYMOUS + \"')\")\n-    public UserTO selfCreate(final UserTO userTO, final boolean storePassword) {\n-        return doCreate(userTO, storePassword, true);\n+    public ProvisioningResult<UserTO> selfCreate(\n+            final UserTO userTO, final boolean storePassword, final boolean nullPriorityAsync) {\n+\n+        return doCreate(userTO, storePassword, true, nullPriorityAsync);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_CREATE + \"')\")\n     @Override\n-    public UserTO create(final UserTO userTO) {\n-        return create(userTO, true);\n+    public ProvisioningResult<UserTO> create(final UserTO userTO, final boolean nullPriorityAsync) {\n+        return doCreate(userTO, true, false, nullPriorityAsync);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_CREATE + \"')\")\n-    public UserTO create(final UserTO userTO, final boolean storePassword) {\n-        return doCreate(userTO, storePassword, false);\n+    public ProvisioningResult<UserTO> create(\n+            final UserTO userTO, final boolean storePassword, final boolean nullPriorityAsync) {\n+\n+        return doCreate(userTO, storePassword, false, nullPriorityAsync);\n     }\n \n-    protected UserTO doCreate(final UserTO userTO, final boolean storePassword, final boolean self) {\n+    protected ProvisioningResult<UserTO> doCreate(\n+            final UserTO userTO,\n+            final boolean storePassword,\n+            final boolean self,\n+            final boolean nullPriorityAsync) {\n+\n         Pair<UserTO, List<LogicActions>> before = beforeCreate(userTO);\n \n         if (before.getLeft().getRealm() == null) {\n@@ -198,28 +207,28 @@ protected UserTO doCreate(final UserTO userTO, final boolean storePassword, fina\n             securityChecks(effectiveRealms, before.getLeft().getRealm(), null);\n         }\n \n-        Map.Entry<Long, List<PropagationStatus>> created = provisioningManager.create(before.getLeft(), storePassword);\n+        Pair<Long, List<PropagationStatus>> created =\n+                provisioningManager.create(before.getLeft(), storePassword, nullPriorityAsync);\n \n-        UserTO savedTO = binder.getUserTO(created.getKey());\n-        savedTO.getPropagationStatusTOs().addAll(created.getValue());\n-\n-        return binder.returnUserTO(afterCreate(savedTO, before.getValue()));\n+        return after(binder.returnUserTO(binder.getUserTO(created.getKey())), created.getRight(), before.getRight());\n     }\n \n     @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + Entitlement.ANONYMOUS + \"'))\")\n-    public UserTO selfUpdate(final UserPatch userPatch) {\n+    public ProvisioningResult<UserTO> selfUpdate(final UserPatch userPatch, final boolean nullPriorityAsync) {\n         UserTO userTO = binder.getAuthenticatedUserTO();\n         userPatch.setKey(userTO.getKey());\n-        return doUpdate(userPatch, true);\n+        return doUpdate(userPatch, true, nullPriorityAsync);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n     @Override\n-    public UserTO update(final UserPatch userPatch) {\n-        return doUpdate(userPatch, false);\n+    public ProvisioningResult<UserTO> update(final UserPatch userPatch, final boolean nullPriorityAsync) {\n+        return doUpdate(userPatch, false, nullPriorityAsync);\n     }\n \n-    protected UserTO doUpdate(final UserPatch userPatch, final boolean self) {\n+    protected ProvisioningResult<UserTO> doUpdate(\n+            final UserPatch userPatch, final boolean self, final boolean nullPriorityAsync) {\n+\n         UserTO userTO = binder.getUserTO(userPatch.getKey());\n         Pair<UserPatch, List<LogicActions>> before = beforeUpdate(userPatch, userTO.getRealm());\n \n@@ -235,29 +244,28 @@ protected UserTO doUpdate(final UserPatch userPatch, final boolean self) {\n             securityChecks(effectiveRealms, before.getLeft().getRealm().getValue(), before.getLeft().getKey());\n         }\n \n-        Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(before.getLeft());\n-\n-        UserTO updatedTO = binder.getUserTO(updated.getKey());\n-        updatedTO.getPropagationStatusTOs().addAll(updated.getValue());\n+        Pair<Long, List<PropagationStatus>> updated = provisioningManager.update(before.getLeft(), nullPriorityAsync);\n \n-        return binder.returnUserTO(afterUpdate(updatedTO, before.getRight()));\n+        return after(binder.returnUserTO(binder.getUserTO(updated.getKey())), updated.getRight(), before.getRight());\n     }\n \n-    protected Map.Entry<Long, List<PropagationStatus>> setStatusOnWfAdapter(final StatusPatch statusPatch) {\n-        Map.Entry<Long, List<PropagationStatus>> updated;\n+    protected Pair<Long, List<PropagationStatus>> setStatusOnWfAdapter(\n+            final StatusPatch statusPatch, final boolean nullPriorityAsync) {\n+\n+        Pair<Long, List<PropagationStatus>> updated;\n \n         switch (statusPatch.getType()) {\n             case SUSPEND:\n-                updated = provisioningManager.suspend(statusPatch);\n+                updated = provisioningManager.suspend(statusPatch, nullPriorityAsync);\n                 break;\n \n             case REACTIVATE:\n-                updated = provisioningManager.reactivate(statusPatch);\n+                updated = provisioningManager.reactivate(statusPatch, nullPriorityAsync);\n                 break;\n \n             case ACTIVATE:\n             default:\n-                updated = provisioningManager.activate(statusPatch);\n+                updated = provisioningManager.activate(statusPatch, nullPriorityAsync);\n                 break;\n \n         }\n@@ -266,26 +274,28 @@ protected Map.Entry<Long, List<PropagationStatus>> setStatusOnWfAdapter(final St\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n-    public UserTO status(final StatusPatch statusPatch) {\n+    public ProvisioningResult<UserTO> status(final StatusPatch statusPatch, final boolean nullPriorityAsync) {\n         // security checks\n         UserTO toUpdate = binder.getUserTO(statusPatch.getKey());\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(Entitlement.USER_UPDATE),\n                 Collections.singleton(toUpdate.getRealm()));\n         securityChecks(effectiveRealms, toUpdate.getRealm(), toUpdate.getKey());\n \n-        Map.Entry<Long, List<PropagationStatus>> updated = setStatusOnWfAdapter(statusPatch);\n-        UserTO savedTO = binder.getUserTO(updated.getKey());\n-        savedTO.getPropagationStatusTOs().addAll(updated.getValue());\n-        return binder.returnUserTO(savedTO);\n+        Pair<Long, List<PropagationStatus>> updated = setStatusOnWfAdapter(statusPatch, nullPriorityAsync);\n+\n+        return after(\n+                binder.returnUserTO(binder.getUserTO(updated.getKey())),\n+                updated.getRight(),\n+                Collections.<LogicActions>emptyList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.MUST_CHANGE_PASSWORD + \"')\")\n-    public UserTO changePassword(final String password) {\n+    public ProvisioningResult<UserTO> changePassword(final String password, final boolean nullPriorityAsync) {\n         UserPatch userPatch = new UserPatch();\n         userPatch.setPassword(new PasswordPatch.Builder().value(password).build());\n         userPatch.setMustChangePassword(new BooleanReplacePatchItem.Builder().value(false).build());\n-        return selfUpdate(userPatch);\n+        return selfUpdate(userPatch, nullPriorityAsync);\n     }\n \n     @PreAuthorize(\"isAnonymous() or hasRole('\" + Entitlement.ANONYMOUS + \"')\")\n@@ -320,19 +330,21 @@ public void confirmPasswordReset(final String token, final String password) {\n     }\n \n     @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + Entitlement.ANONYMOUS + \"'))\")\n-    public UserTO selfDelete() {\n+    public ProvisioningResult<UserTO> selfDelete(final boolean nullPriorityAsync) {\n         UserTO userTO = binder.getAuthenticatedUserTO();\n-        return doDelete(userTO, true);\n+        return doDelete(userTO, true, nullPriorityAsync);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_DELETE + \"')\")\n     @Override\n-    public UserTO delete(final Long key) {\n+    public ProvisioningResult<UserTO> delete(final Long key, final boolean nullPriorityAsync) {\n         UserTO userTO = binder.getUserTO(key);\n-        return doDelete(userTO, false);\n+        return doDelete(userTO, false, nullPriorityAsync);\n     }\n \n-    protected UserTO doDelete(final UserTO userTO, final boolean self) {\n+    protected ProvisioningResult<UserTO> doDelete(\n+            final UserTO userTO, final boolean self, final boolean nullPriorityAsync) {\n+\n         Pair<UserTO, List<LogicActions>> before = beforeDelete(userTO);\n \n         if (!self) {\n@@ -355,7 +367,7 @@ public String transform(final Group group) {\n             throw sce;\n         }\n \n-        List<PropagationStatus> statuses = provisioningManager.delete(before.getLeft().getKey());\n+        List<PropagationStatus> statuses = provisioningManager.delete(before.getLeft().getKey(), nullPriorityAsync);\n \n         UserTO deletedTO;\n         if (userDAO.find(before.getLeft().getKey()) == null) {\n@@ -364,9 +376,8 @@ public String transform(final Group group) {\n         } else {\n             deletedTO = binder.getUserTO(before.getLeft().getKey());\n         }\n-        deletedTO.getPropagationStatusTOs().addAll(statuses);\n \n-        return binder.returnUserTO(afterDelete(deletedTO, before.getRight()));\n+        return after(binder.returnUserTO(deletedTO), statuses, before.getRight());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n@@ -417,7 +428,9 @@ public StringPatchItem transform(final String resource) {\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n     @Override\n-    public UserTO unassign(final Long key, final Collection<String> resources) {\n+    public ProvisioningResult<UserTO> unassign(\n+            final Long key, final Collection<String> resources, final boolean nullPriorityAsync) {\n+\n         // security checks\n         UserTO user = binder.getUserTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n@@ -435,16 +448,17 @@ public StringPatchItem transform(final String resource) {\n             }\n         }));\n \n-        return update(patch);\n+        return update(patch, nullPriorityAsync);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n     @Override\n-    public UserTO assign(\n+    public ProvisioningResult<UserTO> assign(\n             final Long key,\n             final Collection<String> resources,\n             final boolean changepwd,\n-            final String password) {\n+            final String password,\n+            final boolean nullPriorityAsync) {\n \n         // security checks\n         UserTO user = binder.getUserTO(key);\n@@ -468,33 +482,37 @@ public StringPatchItem transform(final String resource) {\n                     value(password).onSyncope(false).resources(resources).build());\n         }\n \n-        return update(patch);\n+        return update(patch, nullPriorityAsync);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n     @Override\n-    public UserTO deprovision(final Long key, final Collection<String> resources) {\n+    public ProvisioningResult<UserTO> deprovision(\n+            final Long key, final Collection<String> resources, final boolean nullPriorityAsync) {\n+\n         // security checks\n         UserTO user = binder.getUserTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(Entitlement.USER_UPDATE),\n                 Collections.singleton(user.getRealm()));\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n-        List<PropagationStatus> statuses = provisioningManager.deprovision(key, resources);\n+        List<PropagationStatus> statuses = provisioningManager.deprovision(key, resources, nullPriorityAsync);\n \n-        UserTO updatedTO = binder.getUserTO(key);\n-        updatedTO.getPropagationStatusTOs().addAll(statuses);\n-        return binder.returnUserTO(updatedTO);\n+        ProvisioningResult<UserTO> result = new ProvisioningResult<>();\n+        result.setAny(binder.returnUserTO(binder.getUserTO(key)));\n+        result.getPropagationStatuses().addAll(statuses);\n+        return result;\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n     @Override\n-    public UserTO provision(\n+    public ProvisioningResult<UserTO> provision(\n             final Long key,\n             final Collection<String> resources,\n             final boolean changePwd,\n-            final String password) {\n+            final String password,\n+            final boolean nullPriorityAsync) {\n \n         // security checks\n         UserTO user = binder.getUserTO(key);\n@@ -503,8 +521,13 @@ public UserTO provision(\n                 Collections.singleton(user.getRealm()));\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n-        user.getPropagationStatusTOs().addAll(provisioningManager.provision(key, changePwd, password, resources));\n-        return binder.returnUserTO(user);\n+        List<PropagationStatus> statuses =\n+                provisioningManager.provision(key, changePwd, password, resources, nullPriorityAsync);\n+\n+        ProvisioningResult<UserTO> result = new ProvisioningResult<>();\n+        result.setAny(binder.returnUserTO(binder.getUserTO(key)));\n+        result.getPropagationStatuses().addAll(statuses);\n+        return result;\n     }\n \n     @Override"},{"sha":"968b7794c18b88e50c889f303ad83de36f5b4cc5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/ExternalResource.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -87,10 +87,6 @@ public interface ExternalResource extends AnnotatedEntity<String> {\n \n     void setEnforceMandatoryCondition(boolean enforce);\n \n-    boolean isPropagationPrimary();\n-\n-    void setPropagationPrimary(boolean condition);\n-\n     boolean isRandomPwdIfNotProvided();\n \n     void setRandomPwdIfNotProvided(boolean condition);"},{"sha":"842cf860a7c479685791433812a1eefee4c264d8","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/PropagationTask.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -34,6 +34,8 @@ public interface PropagationTask extends Task {\n \n     void setOldConnObjectKey(String oldConnObjectKey);\n \n+    String getSerializedAttributes();\n+\n     Set<Attribute> getAttributes();\n \n     void setAttributes(Set<Attribute> attributes);"},{"sha":"0653cf34d4068bccc4aa36a012b14f1fe379f189","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAExternalResource.java","status":"modified","additions":0,"deletions":21,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -99,19 +99,9 @@ public class JPAExternalResource extends AbstractAnnotatedEntity<String> impleme\n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"resource\")\n     private List<JPAProvision> provisions = new ArrayList<>();\n \n-    /**\n-     * Is this resource primary, for propagations?\n-     */\n-    @NotNull\n-    @Basic\n-    @Min(0)\n-    @Max(1)\n-    private Integer propagationPrimary;\n-\n     /**\n      * Priority index for propagation ordering.\n      */\n-    @NotNull\n     private Integer propagationPriority;\n \n     /**\n@@ -182,7 +172,6 @@ public JPAExternalResource() {\n         super();\n \n         enforceMandatoryCondition = getBooleanAsInteger(false);\n-        propagationPrimary = 0;\n         propagationPriority = 0;\n         randomPwdIfNotProvided = 0;\n         overrideCapabilities = 0;\n@@ -253,16 +242,6 @@ public List<? extends Provision> getProvisions() {\n         return provisions;\n     }\n \n-    @Override\n-    public boolean isPropagationPrimary() {\n-        return isBooleanAsInteger(propagationPrimary);\n-    }\n-\n-    @Override\n-    public void setPropagationPrimary(final boolean propagationPrimary) {\n-        this.propagationPrimary = getBooleanAsInteger(propagationPrimary);\n-    }\n-\n     @Override\n     public Integer getPropagationPriority() {\n         return propagationPriority;"},{"sha":"94c7d8d988c72d1ab8be9ddcca97c46bdefeb0aa","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPropagationTask.java","status":"modified","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -68,7 +68,7 @@ public class JPAPropagationTask extends AbstractTask implements PropagationTask\n      * Attributes to be propagated.\n      */\n     @Lob\n-    private String xmlAttributes;\n+    private String attributes;\n \n     private String objectClassName;\n \n@@ -110,19 +110,24 @@ public void setOldConnObjectKey(final String oldConnObjectKey) {\n         this.oldConnObjectKey = oldConnObjectKey;\n     }\n \n+    @Override\n+    public String getSerializedAttributes() {\n+        return this.attributes;\n+    }\n+\n     @Override\n     public Set<Attribute> getAttributes() {\n-        Set<Attribute> attributes = new HashSet<>();\n-        if (!StringUtils.isBlank(xmlAttributes)) {\n-            CollectionUtils.addAll(attributes, POJOHelper.deserialize(xmlAttributes, Attribute[].class));\n+        Set<Attribute> result = new HashSet<>();\n+        if (StringUtils.isNotBlank(this.attributes)) {\n+            CollectionUtils.addAll(result, POJOHelper.deserialize(this.attributes, Attribute[].class));\n         }\n \n-        return attributes;\n+        return result;\n     }\n \n     @Override\n     public void setAttributes(final Set<Attribute> attributes) {\n-        xmlAttributes = POJOHelper.serialize(attributes);\n+        this.attributes = POJOHelper.serialize(attributes);\n     }\n \n     @Override"},{"sha":"be37d88d43e6600f74c64978adf341d94a8948ff","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ResourceTest.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -105,7 +105,6 @@ public void save() {\n         ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n         resource.setKey(\"ws-target-resource-basic-save\");\n         resource.setPropagationPriority(2);\n-        resource.setPropagationPrimary(true);\n \n         Provision provision = entityFactory.newEntity(Provision.class);\n         provision.setAnyType(anyTypeDAO.findUser());\n@@ -135,7 +134,6 @@ public void save() {\n         assertNotNull(actual.getProvision(anyTypeDAO.findUser()).getMapping());\n         assertFalse(actual.getProvision(anyTypeDAO.findUser()).getMapping().getItems().isEmpty());\n         assertEquals(Integer.valueOf(2), actual.getPropagationPriority());\n-        assertTrue(actual.isPropagationPrimary());\n     }\n \n     @Test(expected = InvalidEntityException.class)\n@@ -264,7 +262,6 @@ public void saveVirtualMapping() {\n         ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n         resource.setKey(\"ws-target-resource-virtual-mapping\");\n         resource.setPropagationPriority(2);\n-        resource.setPropagationPrimary(true);\n \n         Provision provision = entityFactory.newEntity(Provision.class);\n         provision.setAnyType(anyTypeDAO.findUser());"},{"sha":"20baa6b790d901db295df08ba87d6b9c84e49faa","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -581,113 +581,113 @@ under the License.\n   \n   <ExternalResource name=\"ws-target-resource-1\" connector_id=\"100\"\n                     randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"0\" overrideCapabilities=\"0\"\n-                    propagationPriority=\"0\" propagationPrimary=\"1\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n+                    propagationPriority=\"1\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\"\n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"ws-target-resource-2\" connector_id=\"100\"\n                     randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n-                    propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"FAILURES\" deleteTraceLevel=\"NONE\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n+                    createTraceLevel=\"FAILURES\" deleteTraceLevel=\"NONE\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     syncPolicy_id=\"9\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"ws-target-resource-timeout\" connector_id=\"102\"\n                     randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n-                    propagationPriority=\"0\" propagationPrimary=\"1\" createTraceLevel=\"FAILURES\" deleteTraceLevel=\"NONE\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n+                    propagationPriority=\"1\" createTraceLevel=\"FAILURES\" deleteTraceLevel=\"NONE\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     jsonConf='[{\"schema\":{\"name\":\"endpoint\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":true,\"values\":[\"http://localhost:${cargo.servlet.port}/syncope-fit-build-tools/services/provisioning\"]}]'\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"ws-target-resource-list-mappings-1\" connector_id=\"100\"\n                     randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"0\" overrideCapabilities=\"0\"\n-                    propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n+                    createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"ws-target-resource-list-mappings-2\" connector_id=\"100\"\n                     randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n-                    propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n+                    createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"ws-target-resource-delete\" connector_id=\"102\"\n                     randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"0\" overrideCapabilities=\"0\"\n-                    propagationPriority=\"2\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n+                    propagationPriority=\"2\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"ws-target-resource-update\" connector_id=\"100\"\n                     randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n-                    propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n+                    createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"resource-testdb\" connector_id=\"101\"\n                     randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n-                    propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n+                    createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"resource-testdb2\" connector_id=\"106\"\n                     randomPwdIfNotProvided=\"1\" enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n-                    propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n+                    createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"resource-csv\" connector_id=\"104\"\n                     randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"0\" overrideCapabilities=\"0\"\n                     syncPolicy_id=\"3\"\n-                    propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n+                    createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"ws-target-resource-update-resetsynctoken\" connector_id=\"100\" enforceMandatoryCondition=\"1\"\n-                    randomPwdIfNotProvided=\"0\" propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n+                    randomPwdIfNotProvided=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"resource-ldap\" connector_id=\"105\"\n                     randomPwdIfNotProvided=\"1\" enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n-                    propagationPriority=\"0\" propagationPrimary=\"1\"\n+                    propagationPriority=\"1\"\n                     createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource_PropActions resource_name=\"resource-ldap\"\n                                 actionClassName=\"org.apache.syncope.core.provisioning.java.propagation.LDAPMembershipPropagationActions\"/>\n   <ExternalResource name=\"ws-target-resource-nopropagation\" connector_id=\"103\"\n                     randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n-                    propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" \n+                    createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" \n                     passwordPolicy_id=\"4\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   \n   <!-- The following three resources have been added to verify the issue SYNCOPE-68 -->\n   <ExternalResource name=\"ws-target-resource-nopropagation2\" connector_id=\"103\" \n                     enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n-                    randomPwdIfNotProvided=\"0\" propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n+                    randomPwdIfNotProvided=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"ws-target-resource-nopropagation3\" connector_id=\"103\" \n                     enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n-                    randomPwdIfNotProvided=\"0\" propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n+                    randomPwdIfNotProvided=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"ws-target-resource-nopropagation4\" connector_id=\"103\" \n                     enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n-                    randomPwdIfNotProvided=\"0\" propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n+                    randomPwdIfNotProvided=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n                     \n   <!-- External resource for issue SYNCOPE-230 -->\n   <ExternalResource name=\"resource-db-sync\" connector_id=\"107\"\n                     randomPwdIfNotProvided=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" updateTraceLevel=\"ALL\"\n                     enforceMandatoryCondition=\"0\" \n-                    propagationPrimary=\"0\" propagationPriority=\"0\" overrideCapabilities=\"0\"\n+                    overrideCapabilities=\"0\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n                     \n   <!-- External resource for issue SYNCOPE-267 -->\n   <ExternalResource name=\"resource-db-virattr\" connector_id=\"107\"\n                     randomPwdIfNotProvided=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" updateTraceLevel=\"ALL\"\n                     enforceMandatoryCondition=\"0\" \n-                    propagationPrimary=\"0\" propagationPriority=\"0\" overrideCapabilities=\"0\"\n+                    overrideCapabilities=\"0\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n \n   <ExternalResource name=\"resource-db-scripted\" connector_id=\"108\"\n                     randomPwdIfNotProvided=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" updateTraceLevel=\"ALL\"\n                     enforceMandatoryCondition=\"0\"\n-                    propagationPrimary=\"0\" propagationPriority=\"0\" overrideCapabilities=\"0\"\n+                    overrideCapabilities=\"0\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n \n@@ -968,34 +968,34 @@ under the License.\n     \n   <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"1\" operation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-2\" anyTypeKind=\"USER\" anyKey=\"1\"\n-        xmlAttributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n+        attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n   <TaskExec id=\"1\" task_id=\"1\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"2\" operation=\"CREATE\"\n         objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-2\" anyTypeKind=\"USER\" anyKey=\"1\"\n-        xmlAttributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n+        attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n   <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"3\" operation=\"DELETE\"\n         objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-2\" anyTypeKind=\"USER\" anyKey=\"1\"\n-        xmlAttributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n+        attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"4\" name=\"CSV (update matching; assign unmatching)\" resource_name=\"resource-csv\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n         unmatchingRule=\"ASSIGN\" matchingRule=\"UPDATE\"/>\n   <AnyTemplateSyncTask id=\"41\" syncTask_id=\"4\" anyType_name=\"USER\"\n-                       template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[\"csv\"],\"derAttrs\":[{\"schema\":\"cn\",\"readonly\":false,\"values\":[\"\"]}],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"relationships\":[],\"memberships\":[{\"leftType\":null,\"leftKey\":0,\"rightType\":\"GROUP\",\"rightKey\":8,\"groupName\":null}],\"dynGroups\":[],\"roles\":[],\"dynRoles\":[],\"plainAttrs\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"email == &apos;test8@syncope.apache.org&apos;? &apos;TYPE_8&apos;: &apos;TYPE_OTHER&apos;\"]}]}'/>\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[\"csv\"],\"derAttrs\":[{\"schema\":\"cn\",\"readonly\":false,\"values\":[\"\"]}],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"relationships\":[],\"memberships\":[{\"leftType\":null,\"leftKey\":0,\"rightType\":\"GROUP\",\"rightKey\":8,\"groupName\":null}],\"dynGroups\":[],\"roles\":[],\"dynRoles\":[],\"plainAttrs\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"email == &apos;test8@syncope.apache.org&apos;? &apos;TYPE_8&apos;: &apos;TYPE_OTHER&apos;\"]}]}'/>\n   <AnyTemplateSyncTask id=\"42\" syncTask_id=\"4\" anyType_name=\"GROUP\"\n-                       template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[]}'/>\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"plainAttrs\":[]}'/>\n   <Task DTYPE=\"SchedTask\" type=\"SCHEDULED\" id=\"5\" name=\"SampleJob Task\" \n         jobDelegateClassName=\"org.apache.syncope.fit.core.reference.TestSampleJobDelegate\" cronExpression=\"0 0 0 1 * ?\"/>\n   <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"6\" operation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-nopropagation\" anyTypeKind=\"USER\" anyKey=\"1\"\n-        xmlAttributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n+        attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n   <TaskExec id=\"6\" task_id=\"6\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"7\" name=\"TestDB Task\" resource_name=\"resource-testdb\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" fullReconciliation=\"1\"\n         unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n   <AnyTemplateSyncTask id=\"71\" syncTask_id=\"7\" anyType_name=\"USER\"\n-                       template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"roles\":[],\"dynRoles\":[],\"plainAttrs\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"&apos;type a&apos;\"]},{\"schema\":\"userId\",\"readonly\":false,\"values\":[\"&apos;reconciled@syncope.apache.org&apos;\"]},{\"schema\":\"fullname\",\"readonly\":false,\"values\":[\"&apos;reconciled fullname&apos;\"]},{\"schema\":\"surname\",\"readonly\":false,\"values\":[\"&apos;surname&apos;\"]}]}'/>\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"roles\":[],\"dynRoles\":[],\"plainAttrs\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"&apos;type a&apos;\"]},{\"schema\":\"userId\",\"readonly\":false,\"values\":[\"&apos;reconciled@syncope.apache.org&apos;\"]},{\"schema\":\"fullname\",\"readonly\":false,\"values\":[\"&apos;reconciled fullname&apos;\"]},{\"schema\":\"surname\",\"readonly\":false,\"values\":[\"&apos;surname&apos;\"]}]}'/>\n   <AnyTemplateSyncTask id=\"72\" syncTask_id=\"7\" anyType_name=\"GROUP\"\n-                       template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[]}'/>\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"plainAttrs\":[]}'/>\n   <Task DTYPE=\"NotificationTask\" type=\"NOTIFICATION\" id=\"8\" sender=\"admin@prova.org\" subject=\"Notification for SYNCOPE-81\" \n         textBody=\"NOTIFICATION-81\" htmlBody=\"NOTIFICATION-81\" traceLevel=\"ALL\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"9\" name=\"TestDB2 Task\" resource_name=\"resource-testdb2\"\n@@ -1008,9 +1008,9 @@ under the License.\n         destinationRealm_id=\"1\" fullReconciliation=\"1\" performCreate=\"1\" performDelete=\"1\" performUpdate=\"1\" syncStatus=\"0\"\n         unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n   <AnyTemplateSyncTask id=\"1\" syncTask_id=\"11\" anyType_name=\"USER\"\n-                       template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[{\"schema\":\"virtualReadOnly\",\"readonly\":true,\"values\":[\"\"]}],\"resources\":[\"resource-ldap\"],\"propagationStatuses\":[],\"roles\":[],\"dynRoles\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"plainAttrs\":[]}'/>\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[{\"schema\":\"virtualReadOnly\",\"readonly\":true,\"values\":[\"\"]}],\"resources\":[\"resource-ldap\"],\"roles\":[],\"dynRoles\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"plainAttrs\":[]}'/>\n   <AnyTemplateSyncTask id=\"2\" syncTask_id=\"11\" anyType_name=\"GROUP\"\n-                       template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[{\"schema\":\"show\",\"readonly\":false,\"values\":[\"true\"]}]}'/>\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"plainAttrs\":[{\"schema\":\"show\",\"readonly\":false,\"values\":[\"true\"]}]}'/>\n   <SyncTask_actionsClassNames SyncTask_id=\"11\" actionClassName=\"org.apache.syncope.core.provisioning.java.sync.LDAPMembershipSyncActions\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"12\" name=\"VirAttrCache test\" resource_name=\"resource-csv\"\n         destinationRealm_id=\"1\" performCreate=\"0\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"0\" fullReconciliation=\"1\"\n@@ -1075,9 +1075,9 @@ under the License.\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n         unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n   <AnyTemplateSyncTask id=\"3\" syncTask_id=\"24\" anyType_name=\"USER\"\n-                       template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"roles\":[],\"dynRoles\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"plainAttrs\":[{\"schema\":\"firstname\",\"readonly\":false,\"values\":[\"\"]},{\"schema\":\"userId\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"fullname\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"surname\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]}]}'/>\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"roles\":[],\"dynRoles\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"plainAttrs\":[{\"schema\":\"firstname\",\"readonly\":false,\"values\":[\"\"]},{\"schema\":\"userId\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"fullname\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"surname\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]}]}'/>\n   <AnyTemplateSyncTask id=\"4\" syncTask_id=\"24\" anyType_name=\"GROUP\"\n-                       template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[]}'/>\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"plainAttrs\":[]}'/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"25\" name=\"CSV (unlink matching; ignore unmatching)\" resource_name=\"resource-csv\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n         unmatchingRule=\"IGNORE\" matchingRule=\"UNLINK\"/>\n@@ -1086,7 +1086,7 @@ under the License.\n         unmatchingRule=\"ASSIGN\" matchingRule=\"IGNORE\"/>\n   <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"27\" operation=\"CREATE\"\n         objectClassName=\"__ACCOUNT__\" resource_name=\"resource-testdb\" anyTypeKind=\"USER\" anyKey=\"1\"\n-        xmlAttributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n+        attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"28\" name=\"Scripted SQL\" resource_name=\"resource-db-scripted\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"0\" fullReconciliation=\"0\"\n         unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>"},{"sha":"df9a204ce9fe8b8cdc0ac9045682b5bfe8e0b0a8","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AnyObjectProvisioningManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -26,5 +26,5 @@\n \n public interface AnyObjectProvisioningManager extends ProvisioningManager<AnyObjectTO, AnyObjectPatch> {\n \n-    List<PropagationStatus> provision(Long key, Collection<String> resources);\n+    List<PropagationStatus> provision(Long key, Collection<String> resources, boolean nullPriorityAsync);\n }"},{"sha":"3aae89f383f8548a3b1b1d989ac098ababb869d0","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/GroupProvisioningManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -30,8 +30,8 @@\n public interface GroupProvisioningManager extends ProvisioningManager<GroupTO, GroupPatch> {\n \n     Pair<Long, List<PropagationStatus>> create(\n-            GroupTO groupTO, Map<Long, String> groupOwnerMap, Set<String> excludedResources);\n+            GroupTO groupTO, Map<Long, String> groupOwnerMap, Set<String> excludedResources, boolean nullPriorityAsync);\n \n-    List<PropagationStatus> provision(Long key, Collection<String> resources);\n+    List<PropagationStatus> provision(Long key, Collection<String> resources, boolean nullPriorityAsync);\n \n }"},{"sha":"72a12539d054af31c8139a0bb5618ce55b95bd34","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ProvisioningManager.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -28,22 +28,22 @@\n \n public interface ProvisioningManager<T extends AnyTO, P extends AnyPatch> {\n \n-    Pair<Long, List<PropagationStatus>> create(T anyTO);\n+    Pair<Long, List<PropagationStatus>> create(T anyTO, boolean nullPriorityAsync);\n \n-    Pair<Long, List<PropagationStatus>> create(T anyTO, Set<String> excludedResources);\n+    Pair<Long, List<PropagationStatus>> create(T anyTO, Set<String> excludedResources, boolean nullPriorityAsync);\n \n-    Pair<Long, List<PropagationStatus>> update(P anyMod);\n+    Pair<Long, List<PropagationStatus>> update(P patch, boolean nullPriorityAsync);\n \n-    Pair<Long, List<PropagationStatus>> update(P anyMod, Set<String> excludedResources);\n+    Pair<Long, List<PropagationStatus>> update(P patch, Set<String> excludedResources, boolean nullPriorityAsync);\n \n-    List<PropagationStatus> delete(Long anyKey);\n+    List<PropagationStatus> delete(Long anyKey, boolean nullPriorityAsync);\n \n-    List<PropagationStatus> delete(Long anyKey, Set<String> excludedResources);\n+    List<PropagationStatus> delete(Long anyKey, Set<String> excludedResources, boolean nullPriorityAsync);\n \n     Long unlink(P anyMod);\n \n     Long link(P anyMod);\n \n-    List<PropagationStatus> deprovision(Long anyKey, Collection<String> resources);\n+    List<PropagationStatus> deprovision(Long anyKey, Collection<String> resources, boolean nullPriorityAsync);\n \n }"},{"sha":"1f9b7ef65afcaf2fb931053d678b3b555e832aac","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/UserProvisioningManager.java","status":"modified","additions":20,"deletions":10,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -26,30 +26,40 @@\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n+import org.apache.syncope.core.provisioning.api.sync.ProvisioningReport;\n \n public interface UserProvisioningManager extends ProvisioningManager<UserTO, UserPatch> {\n \n-    Pair<Long, List<PropagationStatus>> activate(StatusPatch statusPatch);\n+    Pair<Long, List<PropagationStatus>> activate(StatusPatch statusPatch, boolean nullPriorityAsync);\n \n-    Pair<Long, List<PropagationStatus>> reactivate(StatusPatch statusPatch);\n+    Pair<Long, List<PropagationStatus>> reactivate(StatusPatch statusPatch, boolean nullPriorityAsync);\n \n-    Pair<Long, List<PropagationStatus>> suspend(StatusPatch statusPatch);\n+    Pair<Long, List<PropagationStatus>> suspend(StatusPatch statusPatch, boolean nullPriorityAsync);\n \n     void internalSuspend(Long key);\n \n-    Pair<Long, List<PropagationStatus>> create(UserTO userTO, boolean storePassword);\n+    Pair<Long, List<PropagationStatus>> create(UserTO userTO, boolean storePassword, boolean nullPriorityAsync);\n \n-    Pair<Long, List<PropagationStatus>> create(UserTO userTO, boolean storePassword,\n-            boolean disablePwdPolicyCheck, Boolean enabled, Set<String> excludedResources);\n+    Pair<Long, List<PropagationStatus>> create(\n+            UserTO userTO,\n+            boolean storePassword,\n+            boolean disablePwdPolicyCheck,\n+            Boolean enabled,\n+            Set<String> excludedResources,\n+            boolean nullPriorityAsync);\n \n-    Pair<Long, List<PropagationStatus>> update(UserPatch userPatch, Long key,\n-            ProvisioningResult result, Boolean enabled, Set<String> excludedResources);\n+    Pair<Long, List<PropagationStatus>> update(\n+            UserPatch userPatch,\n+            ProvisioningReport result,\n+            Boolean enabled,\n+            Set<String> excludedResources,\n+            boolean nullPriorityAsync);\n \n     void requestPasswordReset(Long key);\n \n     void confirmPasswordReset(Long key, String token, String password);\n \n-    List<PropagationStatus> provision(Long key, boolean changePwd, String password, Collection<String> resources);\n+    List<PropagationStatus> provision(\n+            Long key, boolean changePwd, String password, Collection<String> resources, boolean nullPriorityAsync);\n \n }"},{"sha":"d96b1a7397fd7e03958b2f077e56ec871ae91189","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationReporter.java","status":"modified","additions":18,"deletions":12,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationReporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationReporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationReporter.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.propagation;\n \n+import java.util.Collection;\n import java.util.List;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n@@ -30,24 +31,29 @@\n public interface PropagationReporter {\n \n     /**\n-     * Report propagation status after executions in case of success or non-blocking failure\n-     * (e.g. on secondary resources).\n+     * Report propagation status after executions in case blocking failure (e.g. on priority resources).\n      *\n-     * @param resourceName resource name.\n-     * @param execStatus propagation execution status.\n-     * @param failureReason propagation execution failure message.\n-     * @param beforeObj retrieved connector object before operation execution.\n-     * @param afterObj retrieved connector object after operation execution.\n+     * @param failingResource failing resource name\n+     * @param tasks propagation tasks performed before failure\n      */\n-    void onSuccessOrSecondaryResourceFailures(String resourceName, PropagationTaskExecStatus execStatus,\n-            String failureReason, ConnectorObject beforeObj, ConnectorObject afterObj);\n+    void onPriorityResourceFailure(String failingResource, Collection<PropagationTask> tasks);\n \n     /**\n-     * Report propagation status after executions in case blocking failure (e.g. on primary resources).\n+     * Report propagation status after executions in case of success or non-blocking failure\n+     * (e.g. on non-priority resources).\n      *\n-     * @param tasks propagation tasks performed before failure\n+     * @param propagationTask propagation task\n+     * @param execStatus propagation execution status\n+     * @param failureReason propagation execution failure message\n+     * @param beforeObj retrieved connector object before operation execution\n+     * @param afterObj retrieved connector object after operation execution\n      */\n-    void onPrimaryResourceFailure(List<PropagationTask> tasks);\n+    void onSuccessOrNonPriorityResourceFailures(\n+            PropagationTask propagationTask,\n+            PropagationTaskExecStatus execStatus,\n+            String failureReason,\n+            ConnectorObject beforeObj,\n+            ConnectorObject afterObj);\n \n     /**\n      * Returns the list of propagation statuses."},{"sha":"84c486473b3b2b004805c07f6746a6c339a91a1f","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskCallable.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskCallable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskCallable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskCallable.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.propagation;\n+\n+import java.util.concurrent.Callable;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n+\n+public interface PropagationTaskCallable extends Callable<TaskExec> {\n+\n+    void setExecutor(PropagationTaskExecutor executor);\n+\n+    void setTask(PropagationTask task);\n+\n+    void setReporter(PropagationReporter reporter);\n+}"},{"sha":"ace29a205ccde331b2f31f50c03888fdf1f18a47","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskExecutor.java","status":"modified","additions":17,"deletions":4,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -42,7 +42,18 @@ public interface PropagationTaskExecutor {\n     String MANDATORY_NULL_OR_EMPTY_ATTR_NAME = \"__MANDATORY_NULL_OR_EMPTY__\";\n \n     /**\n-     * Execute the given PropagationTask and returns the generated TaskExec.\n+     * Creates new instances of {@link PropagationTaskCallable} for usage with\n+     * {@link java.util.concurrent.CompletionService}.\n+     *\n+     * @param task to be executed\n+     * @param reporter to report propagation execution status\n+     * @return new {@link PropagationTaskCallable} instance for usage with\n+     * {@link java.util.concurrent.CompletionService}\n+     */\n+    PropagationTaskCallable newPropagationTaskCallable(PropagationTask task, PropagationReporter reporter);\n+\n+    /**\n+     * Execute the given PropagationTask and returns the generated {@link TaskExec}.\n      *\n      * @param task to be executed\n      * @return the generated TaskExec\n@@ -67,11 +78,13 @@ public interface PropagationTaskExecutor {\n     void execute(Collection<PropagationTask> tasks);\n \n     /**\n-     * Execute a collection of PropagationTask objects and invoke the given handler on each of these.\n-     * The process is interrupted as soon as the result of the communication with a primary resource is in error.\n+     * Execute a collection of PropagationTask objects.\n+     * The process is interrupted as soon as the result of the communication with a resource with non-null priority is\n+     * in error.\n      *\n      * @param tasks to be execute, in given order\n      * @param reporter to report propagation execution status\n+     * @param nullPriorityAsync asynchronously executes tasks related to resources with no priority\n      */\n-    void execute(Collection<PropagationTask> tasks, PropagationReporter reporter);\n+    void execute(Collection<PropagationTask> tasks, PropagationReporter reporter, boolean nullPriorityAsync);\n }"},{"sha":"2e6e055fe35318ac19da01a52749b854c14e0441","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/sync/ProvisioningProfile.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FProvisioningProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FProvisioningProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FProvisioningProfile.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -34,7 +34,7 @@\n \n     private final T task;\n \n-    private final List<ProvisioningResult> results = new ArrayList<>();\n+    private final List<ProvisioningReport> results = new ArrayList<>();\n \n     private boolean dryRun;\n \n@@ -55,7 +55,7 @@ public T getTask() {\n         return task;\n     }\n \n-    public Collection<ProvisioningResult> getResults() {\n+    public Collection<ProvisioningReport> getResults() {\n         return results;\n     }\n "},{"sha":"9e3c28a22b0bcdb7ed1ebb4217457d5844ec37af","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/sync/ProvisioningReport.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FProvisioningReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FProvisioningReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FProvisioningReport.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.TraceLevel;\n \n-public class ProvisioningResult {\n+public class ProvisioningReport {\n \n     public enum Status {\n \n@@ -130,9 +130,9 @@ public String getReportString(final TraceLevel level) {\n      * @param level trace level\n      * @return report as string\n      */\n-    public static String produceReport(final Collection<ProvisioningResult> results, final TraceLevel level) {\n+    public static String produceReport(final Collection<ProvisioningReport> results, final TraceLevel level) {\n         StringBuilder sb = new StringBuilder();\n-        for (ProvisioningResult result : results) {\n+        for (ProvisioningReport result : results) {\n             sb.append(result.getReportString(level)).append('\\n');\n         }\n         return sb.toString();","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/sync/ProvisioningResult.java"},{"sha":"fee3a4547c29f4bef928137f53c7e2b6119f9508","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/sync/PushActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FPushActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FPushActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FPushActions.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -145,7 +145,7 @@ public interface PushActions extends ProvisioningActions {\n     <A extends Any<?, ?>> void onError(\n             ProvisioningProfile<?, ?> profile,\n             A any,\n-            ProvisioningResult result,\n+            ProvisioningReport result,\n             Exception error) throws JobExecutionException;\n \n     /**\n@@ -160,5 +160,5 @@ public interface PushActions extends ProvisioningActions {\n     <A extends Any<?, ?>> void after(\n             ProvisioningProfile<?, ?> profile,\n             A any,\n-            ProvisioningResult result) throws JobExecutionException;\n+            ProvisioningReport result) throws JobExecutionException;\n }"},{"sha":"e7c8d8c4eb87515c3ca842381d066afb4d779341","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/sync/SyncActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FSyncActions.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -182,7 +182,7 @@ <A extends AnyTO> SyncDelta beforeDelete(\n     void onError(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            ProvisioningResult result,\n+            ProvisioningReport result,\n             Exception error) throws JobExecutionException;\n \n     /**\n@@ -200,5 +200,5 @@ <A extends AnyTO> void after(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n             A any,\n-            ProvisioningResult result) throws JobExecutionException;\n+            ProvisioningReport result) throws JobExecutionException;\n }"},{"sha":"f2b489f86bcf74c73621a295e065dbd2466715b5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java","status":"modified","additions":26,"deletions":46,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -35,21 +35,16 @@\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n \n public class DefaultAnyObjectProvisioningManager implements AnyObjectProvisioningManager {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(AnyObjectProvisioningManager.class);\n-\n     @Autowired\n     protected AnyObjectWorkflowAdapter awfAdapter;\n \n@@ -66,13 +61,13 @@ public class DefaultAnyObjectProvisioningManager implements AnyObjectProvisionin\n     protected AnyObjectDAO anyObjectDAO;\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> create(final AnyObjectTO anyObjectTO) {\n-        return create(anyObjectTO, Collections.<String>emptySet());\n+    public Pair<Long, List<PropagationStatus>> create(final AnyObjectTO anyObjectTO, final boolean nullPriorityAsync) {\n+        return create(anyObjectTO, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Override\n     public Pair<Long, List<PropagationStatus>> create(\n-            final AnyObjectTO anyObjectTO, final Set<String> excludedResources) {\n+            final AnyObjectTO anyObjectTO, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n \n         WorkflowResult<Long> created = awfAdapter.create(anyObjectTO);\n \n@@ -84,24 +79,21 @@ public Pair<Long, List<PropagationStatus>> create(\n                 excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         return new ImmutablePair<>(created.getResult(), propagationReporter.getStatuses());\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> update(final AnyObjectPatch anyObjectPatch) {\n-        return update(anyObjectPatch, Collections.<String>emptySet());\n+    public Pair<Long, List<PropagationStatus>> update(\n+            final AnyObjectPatch anyObjectPatch, final boolean nullPriorityAsync) {\n+\n+        return update(anyObjectPatch, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Override\n     public Pair<Long, List<PropagationStatus>> update(\n-            final AnyObjectPatch anyObjectPatch, final Set<String> excludedResources) {\n+            final AnyObjectPatch anyObjectPatch, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n \n         WorkflowResult<Long> updated = awfAdapter.update(anyObjectPatch);\n \n@@ -115,36 +107,28 @@ public Pair<Long, List<PropagationStatus>> update(\n                 excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         return new ImmutablePair<>(updated.getResult(), propagationReporter.getStatuses());\n     }\n \n     @Override\n-    public List<PropagationStatus> delete(final Long key) {\n-        return delete(key, Collections.<String>emptySet());\n+    public List<PropagationStatus> delete(final Long key, final boolean nullPriorityAsync) {\n+        return delete(key, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Override\n-    public List<PropagationStatus> delete(final Long key, final Set<String> excludedResources) {\n+    public List<PropagationStatus> delete(\n+            final Long key, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n+\n         List<PropagationTask> tasks = propagationManager.getDeleteTasks(\n                 AnyTypeKind.ANY_OBJECT,\n                 key,\n                 null,\n                 excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         awfAdapter.delete(key);\n \n@@ -162,7 +146,9 @@ public Long link(final AnyObjectPatch anyObjectPatch) {\n     }\n \n     @Override\n-    public List<PropagationStatus> provision(final Long key, final Collection<String> resources) {\n+    public List<PropagationStatus> provision(\n+            final Long key, final Collection<String> resources, final boolean nullPriorityAsync) {\n+\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.UPDATE, resources);\n \n@@ -176,17 +162,15 @@ public List<PropagationStatus> provision(final Long key, final Collection<String\n                 null);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n+\n         return propagationReporter.getStatuses();\n     }\n \n     @Override\n-    public List<PropagationStatus> deprovision(final Long key, final Collection<String> resources) {\n+    public List<PropagationStatus> deprovision(\n+            final Long key, final Collection<String> resources, final boolean nullPriorityAsync) {\n+\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.DELETE, resources);\n \n@@ -197,12 +181,8 @@ public List<PropagationStatus> deprovision(final Long key, final Collection<Stri\n                 CollectionUtils.removeAll(anyObjectDAO.findAllResourceNames(anyObjectDAO.authFind(key)), resources));\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n+\n         return propagationReporter.getStatuses();\n     }\n }"},{"sha":"831e41f501792000a09a916e6fd4eb8649de612d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":31,"deletions":53,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -25,8 +25,6 @@\n import java.util.Collections;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n@@ -42,7 +40,6 @@\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n@@ -52,8 +49,6 @@\n \n public class DefaultGroupProvisioningManager implements GroupProvisioningManager {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(GroupProvisioningManager.class);\n-\n     @Autowired\n     protected GroupWorkflowAdapter gwfAdapter;\n \n@@ -70,12 +65,14 @@ public class DefaultGroupProvisioningManager implements GroupProvisioningManager\n     protected VirAttrHandler virtAttrHandler;\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> create(final GroupTO group) {\n-        return create(group, Collections.<String>emptySet());\n+    public Pair<Long, List<PropagationStatus>> create(final GroupTO group, final boolean nullPriorityAsync) {\n+        return create(group, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> create(final GroupTO groupTO, final Set<String> excludedResources) {\n+    public Pair<Long, List<PropagationStatus>> create(\n+            final GroupTO groupTO, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n+\n         WorkflowResult<Long> created = gwfAdapter.create(groupTO);\n \n         List<PropagationTask> tasks = propagationManager.getCreateTasks(\n@@ -86,19 +83,17 @@ public Pair<Long, List<PropagationStatus>> create(final GroupTO groupTO, final S\n                 excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         return new ImmutablePair<>(created.getResult(), propagationReporter.getStatuses());\n     }\n \n     @Override\n     public Pair<Long, List<PropagationStatus>> create(\n-            final GroupTO groupTO, final Map<Long, String> groupOwnerMap, final Set<String> excludedResources) {\n+            final GroupTO groupTO,\n+            final Map<Long, String> groupOwnerMap,\n+            final Set<String> excludedResources,\n+            final boolean nullPriorityAsync) {\n \n         WorkflowResult<Long> created = gwfAdapter.create(groupTO);\n \n@@ -116,24 +111,19 @@ public Pair<Long, List<PropagationStatus>> create(\n                 excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         return new ImmutablePair<>(created.getResult(), null);\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> update(final GroupPatch groupPatch) {\n-        return update(groupPatch, Collections.<String>emptySet());\n+    public Pair<Long, List<PropagationStatus>> update(final GroupPatch groupPatch, final boolean nullPriorityAsync) {\n+        return update(groupPatch, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Override\n     public Pair<Long, List<PropagationStatus>> update(\n-            final GroupPatch groupPatch, final Set<String> excludedResources) {\n+            final GroupPatch groupPatch, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n \n         WorkflowResult<Long> updated = gwfAdapter.update(groupPatch);\n \n@@ -147,23 +137,20 @@ public Pair<Long, List<PropagationStatus>> update(\n                 excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         return new ImmutablePair<>(updated.getResult(), propagationReporter.getStatuses());\n     }\n \n     @Override\n-    public List<PropagationStatus> delete(final Long key) {\n-        return delete(key, Collections.<String>emptySet());\n+    public List<PropagationStatus> delete(final Long key, final boolean nullPriorityAsync) {\n+        return delete(key, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Override\n-    public List<PropagationStatus> delete(final Long key, final Set<String> excludedResources) {\n+    public List<PropagationStatus> delete(\n+            final Long key, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n+\n         List<PropagationTask> tasks = new ArrayList<>();\n \n         // Generate propagation tasks for deleting users and any objects from group resources, \n@@ -196,12 +183,7 @@ public List<PropagationStatus> delete(final Long key, final Set<String> excluded\n \n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         gwfAdapter.delete(key);\n \n@@ -215,7 +197,9 @@ public Long unlink(final GroupPatch groupPatch) {\n     }\n \n     @Override\n-    public List<PropagationStatus> provision(final Long key, final Collection<String> resources) {\n+    public List<PropagationStatus> provision(\n+            final Long key, final Collection<String> resources, final boolean nullPriorityAsync) {\n+\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.UPDATE, resources);\n \n@@ -229,17 +213,15 @@ public List<PropagationStatus> provision(final Long key, final Collection<String\n                 null);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n+\n         return propagationReporter.getStatuses();\n     }\n \n     @Override\n-    public List<PropagationStatus> deprovision(final Long key, final Collection<String> resources) {\n+    public List<PropagationStatus> deprovision(\n+            final Long key, final Collection<String> resources, final boolean nullPriorityAsync) {\n+\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.DELETE, resources);\n \n@@ -250,12 +232,8 @@ public List<PropagationStatus> deprovision(final Long key, final Collection<Stri\n                 CollectionUtils.removeAll(groupDAO.authFind(key).getResourceNames(), resources));\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n+\n         return propagationReporter.getStatuses();\n     }\n "},{"sha":"d9028af3eb6df152249cd2d85ca1827d9aaa8b56","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":72,"deletions":80,"changes":152,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -47,9 +47,9 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n+import org.apache.syncope.core.provisioning.api.sync.ProvisioningReport;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -75,23 +75,32 @@ public class DefaultUserProvisioningManager implements UserProvisioningManager {\n     protected UserDAO userDAO;\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> create(final UserTO userTO) {\n-        return create(userTO, true, false, null, Collections.<String>emptySet());\n+    public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final boolean nullPriorityAsync) {\n+        return create(userTO, true, false, null, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final boolean storePassword) {\n-        return create(userTO, storePassword, false, null, Collections.<String>emptySet());\n+    public Pair<Long, List<PropagationStatus>> create(\n+            final UserTO userTO, final boolean storePassword, final boolean nullPriorityAsync) {\n+\n+        return create(userTO, storePassword, false, null, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final Set<String> excludedResources) {\n-        return create(userTO, false, false, null, excludedResources);\n+    public Pair<Long, List<PropagationStatus>> create(\n+            final UserTO userTO, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n+\n+        return create(userTO, false, false, null, excludedResources, nullPriorityAsync);\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final boolean storePassword,\n-            final boolean disablePwdPolicyCheck, final Boolean enabled, final Set<String> excludedResources) {\n+    public Pair<Long, List<PropagationStatus>> create(\n+            final UserTO userTO,\n+            final boolean storePassword,\n+            final boolean disablePwdPolicyCheck,\n+            final Boolean enabled,\n+            final Set<String> excludedResources,\n+            final boolean nullPriorityAsync) {\n \n         WorkflowResult<Pair<Long, Boolean>> created =\n                 uwfAdapter.create(userTO, disablePwdPolicyCheck, enabled, storePassword);\n@@ -105,49 +114,46 @@ public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final boo\n                 excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         return new ImmutablePair<>(created.getResult().getKey(), propagationReporter.getStatuses());\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> update(final UserPatch userPatch) {\n+    public Pair<Long, List<PropagationStatus>> update(final UserPatch userPatch, final boolean nullPriorityAsync) {\n         WorkflowResult<Pair<UserPatch, Boolean>> updated = uwfAdapter.update(userPatch);\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(updated);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         return new ImmutablePair<>(updated.getResult().getKey().getKey(), propagationReporter.getStatuses());\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> update(final UserPatch userPatch, final Set<String> excludedResources) {\n-        return update(userPatch, userPatch.getKey(), new ProvisioningResult(), null, excludedResources);\n+    public Pair<Long, List<PropagationStatus>> update(\n+            final UserPatch userPatch, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n+\n+        return update(userPatch, new ProvisioningReport(), null, excludedResources, nullPriorityAsync);\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> update(final UserPatch userPatch, final Long key,\n-            final ProvisioningResult result, final Boolean enabled, final Set<String> excludedResources) {\n+    public Pair<Long, List<PropagationStatus>> update(\n+            final UserPatch userPatch,\n+            final ProvisioningReport result,\n+            final Boolean enabled,\n+            final Set<String> excludedResources,\n+            final boolean nullPriorityAsync) {\n \n         WorkflowResult<Pair<UserPatch, Boolean>> updated;\n         try {\n             updated = uwfAdapter.update(userPatch);\n         } catch (Exception e) {\n-            LOG.error(\"Update of user {} failed, trying to sync its status anyway (if configured)\", key, e);\n+            LOG.error(\"Update of user {} failed, trying to sync its status anyway (if configured)\",\n+                    userPatch.getKey(), e);\n \n-            result.setStatus(ProvisioningResult.Status.FAILURE);\n+            result.setStatus(ProvisioningReport.Status.FAILURE);\n             result.setMessage(\"Update failed, trying to sync status anyway (if configured)\\n\" + e.getMessage());\n \n             updated = new WorkflowResult<Pair<UserPatch, Boolean>>(\n@@ -156,15 +162,15 @@ public Pair<Long, List<PropagationStatus>> update(final UserPatch userPatch, fin\n         }\n \n         if (enabled != null) {\n-            User user = userDAO.find(key);\n+            User user = userDAO.find(userPatch.getKey());\n \n             WorkflowResult<Long> enableUpdate = null;\n             if (user.isSuspended() == null) {\n-                enableUpdate = uwfAdapter.activate(key, null);\n+                enableUpdate = uwfAdapter.activate(userPatch.getKey(), null);\n             } else if (enabled && user.isSuspended()) {\n-                enableUpdate = uwfAdapter.reactivate(key);\n+                enableUpdate = uwfAdapter.reactivate(userPatch.getKey());\n             } else if (!enabled && !user.isSuspended()) {\n-                enableUpdate = uwfAdapter.suspend(key);\n+                enableUpdate = uwfAdapter.suspend(userPatch.getKey());\n             }\n \n             if (enableUpdate != null) {\n@@ -180,23 +186,20 @@ public Pair<Long, List<PropagationStatus>> update(final UserPatch userPatch, fin\n                 updated, updated.getResult().getKey().getPassword() != null, excludedResources);\n         PropagationReporter propagationReporter = ApplicationContextProvider.getBeanFactory().\n                 getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         return new ImmutablePair<>(updated.getResult().getKey().getKey(), propagationReporter.getStatuses());\n     }\n \n     @Override\n-    public List<PropagationStatus> delete(final Long key) {\n-        return delete(key, Collections.<String>emptySet());\n+    public List<PropagationStatus> delete(final Long key, final boolean nullPriorityAsync) {\n+        return delete(key, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Override\n-    public List<PropagationStatus> delete(final Long key, final Set<String> excludedResources) {\n+    public List<PropagationStatus> delete(\n+            final Long key, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n+\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.set(ResourceOperation.DELETE, userDAO.findAllResourceNames(userDAO.authFind(key)));\n \n@@ -212,12 +215,7 @@ public List<PropagationStatus> delete(final Long key, final Set<String> excluded\n                 excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         try {\n             uwfAdapter.delete(key);\n@@ -240,33 +238,41 @@ public Long link(final UserPatch userPatch) {\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> activate(final StatusPatch statusPatch) {\n+    public Pair<Long, List<PropagationStatus>> activate(\n+            final StatusPatch statusPatch, final boolean nullPriorityAsync) {\n+\n         WorkflowResult<Long> updated = statusPatch.isOnSyncope()\n                 ? uwfAdapter.activate(statusPatch.getKey(), statusPatch.getToken())\n                 : new WorkflowResult<>(statusPatch.getKey(), null, statusPatch.getType().name().toLowerCase());\n \n-        return new ImmutablePair<>(updated.getResult(), propagateStatus(statusPatch));\n+        return new ImmutablePair<>(updated.getResult(), propagateStatus(statusPatch, nullPriorityAsync));\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> reactivate(final StatusPatch statusPatch) {\n+    public Pair<Long, List<PropagationStatus>> reactivate(\n+            final StatusPatch statusPatch, final boolean nullPriorityAsync) {\n+\n         WorkflowResult<Long> updated = statusPatch.isOnSyncope()\n                 ? uwfAdapter.reactivate(statusPatch.getKey())\n                 : new WorkflowResult<>(statusPatch.getKey(), null, statusPatch.getType().name().toLowerCase());\n \n-        return new ImmutablePair<>(updated.getResult(), propagateStatus(statusPatch));\n+        return new ImmutablePair<>(updated.getResult(), propagateStatus(statusPatch, nullPriorityAsync));\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> suspend(final StatusPatch statusPatch) {\n+    public Pair<Long, List<PropagationStatus>> suspend(\n+            final StatusPatch statusPatch, final boolean nullPriorityAsync) {\n+\n         WorkflowResult<Long> updated = statusPatch.isOnSyncope()\n                 ? uwfAdapter.suspend(statusPatch.getKey())\n                 : new WorkflowResult<>(statusPatch.getKey(), null, statusPatch.getType().name().toLowerCase());\n \n-        return new ImmutablePair<>(updated.getResult(), propagateStatus(statusPatch));\n+        return new ImmutablePair<>(updated.getResult(), propagateStatus(statusPatch, nullPriorityAsync));\n     }\n \n-    protected List<PropagationStatus> propagateStatus(final StatusPatch statusPatch) {\n+    protected List<PropagationStatus> propagateStatus(\n+            final StatusPatch statusPatch, final boolean nullPriorityAsync) {\n+\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.UPDATE, statusPatch.getResources());\n         List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n@@ -279,12 +285,7 @@ protected List<PropagationStatus> propagateStatus(final StatusPatch statusPatch)\n                 null);\n         PropagationReporter propReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propReporter, nullPriorityAsync);\n \n         return propReporter.getStatuses();\n     }\n@@ -308,7 +309,11 @@ public void internalSuspend(final Long key) {\n \n     @Override\n     public List<PropagationStatus> provision(\n-            final Long key, final boolean changePwd, final String password, final Collection<String> resources) {\n+            final Long key,\n+            final boolean changePwd,\n+            final String password,\n+            final Collection<String> resources,\n+            final boolean nullPriorityAsync) {\n \n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(key);\n@@ -338,18 +343,15 @@ public StringPatchItem transform(final String input) {\n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(wfResult, changePwd, null);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         return propagationReporter.getStatuses();\n     }\n \n     @Override\n-    public List<PropagationStatus> deprovision(final Long key, final Collection<String> resources) {\n+    public List<PropagationStatus> deprovision(\n+            final Long key, final Collection<String> resources, final boolean nullPriorityAsync) {\n+\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.set(ResourceOperation.DELETE, resources);\n \n@@ -360,12 +362,7 @@ public List<PropagationStatus> deprovision(final Long key, final Collection<Stri\n                 CollectionUtils.removeAll(userDAO.findAllResourceNames(userDAO.authFind(key)), resources));\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         return propagationReporter.getStatuses();\n     }\n@@ -383,11 +380,6 @@ public void confirmPasswordReset(final Long key, final String token, final Strin\n \n         PropagationReporter propReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propReporter, false);\n     }\n }"},{"sha":"bd7fb02482c6f25e5473632723a1369fb21c3661","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -681,7 +681,10 @@ protected Map<String, String> getConnObjectKeys(final Any<?, ?> any) {\n                             + \" on resource '\" + resource.getKey() + \"'\");\n                 }\n \n-                connObjectKeys.put(resource.getKey(), mappingUtils.getConnObjectKeyValue(any, provision));\n+                String connObjectKey = mappingUtils.getConnObjectKeyValue(any, provision);\n+                if (connObjectKey != null) {\n+                    connObjectKeys.put(resource.getKey(), connObjectKey);\n+                }\n             }\n         }\n "},{"sha":"5f0decf39fbad4999d23e5e22af4401e9712be02","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -101,8 +101,6 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n \n         resource.setEnforceMandatoryCondition(resourceTO.isEnforceMandatoryCondition());\n \n-        resource.setPropagationPrimary(resourceTO.isPropagationPrimary());\n-\n         resource.setPropagationPriority(resourceTO.getPropagationPriority());\n \n         resource.setRandomPwdIfNotProvided(resourceTO.isRandomPwdIfNotProvided());\n@@ -335,8 +333,6 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n \n         resourceTO.setEnforceMandatoryCondition(resource.isEnforceMandatoryCondition());\n \n-        resourceTO.setPropagationPrimary(resource.isPropagationPrimary());\n-\n         resourceTO.setPropagationPriority(resource.getPropagationPriority());\n \n         resourceTO.setRandomPwdIfNotProvided(resource.isRandomPwdIfNotProvided());"},{"sha":"3207bd258a502230f565f39fd0d8474dd08b51e3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -299,6 +299,7 @@ public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtils t\n                             + task.getClass().getName());\n                 }\n                 ((PropagationTaskTO) taskTO).setResource(((PropagationTask) task).getResource().getKey());\n+                ((PropagationTaskTO) taskTO).setAttributes(((PropagationTask) task).getSerializedAttributes());\n                 break;\n \n             case SCHEDULED:"},{"sha":"7104f52169d482c87923d282fa9a8ebc66ea2059","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/SchedulerShutdown.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSchedulerShutdown.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSchedulerShutdown.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSchedulerShutdown.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java.job;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.DisposableBean;\n import org.springframework.context.ApplicationContext;\n@@ -31,8 +29,6 @@\n  */\n public class SchedulerShutdown implements ApplicationContextAware, DisposableBean {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SchedulerShutdown.class);\n-\n     private ApplicationContext ctx;\n \n     @Override"},{"sha":"713566cacc0aa60222fe013dde62ace05d7770e7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/SpringBeanJobFactory.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSpringBeanJobFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSpringBeanJobFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSpringBeanJobFactory.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -51,10 +51,10 @@ public void setSchedulerContext(final SchedulerContext schedulerContext) {\n \n     @Override\n     protected Object createJobInstance(final TriggerFiredBundle bundle) throws Exception {\n-        final ApplicationContext ctx = ((ConfigurableApplicationContext) schedulerContext.get(\"applicationContext\"));\n+        ApplicationContext ctx = ((ConfigurableApplicationContext) schedulerContext.get(\"applicationContext\"));\n \n-        final Object job = ctx.getBean(bundle.getJobDetail().getKey().getName());\n-        final BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(job);\n+        Object job = ctx.getBean(bundle.getJobDetail().getKey().getName());\n+        BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(job);\n         if (isEligibleForPropertyPopulation(wrapper.getWrappedInstance())) {\n             final MutablePropertyValues pvs = new MutablePropertyValues();\n             if (this.schedulerContext != null) {"},{"sha":"c6f08a3c5cadab5795e96a7fe52aba1fb0ea7b01","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/NotificationManagerImpl.java","status":"modified","additions":13,"deletions":6,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n@@ -272,16 +273,22 @@ public List<NotificationTask> createTasks(\n \n         if (before instanceof UserTO) {\n             any = userDAO.find(((UserTO) before).getKey());\n-        } else if (output instanceof UserTO) {\n-            any = userDAO.find(((UserTO) output).getKey());\n+        } else if (output instanceof ProvisioningResult\n+                && ((ProvisioningResult) output).getAny() instanceof UserTO) {\n+\n+            any = userDAO.find(((ProvisioningResult) output).getAny().getKey());\n         } else if (before instanceof AnyObjectTO) {\n             any = anyObjectDAO.find(((AnyObjectTO) before).getKey());\n-        } else if (output instanceof AnyObjectTO) {\n-            any = anyObjectDAO.find(((AnyObjectTO) output).getKey());\n+        } else if (output instanceof ProvisioningResult\n+                && ((ProvisioningResult) output).getAny() instanceof AnyObjectTO) {\n+\n+            any = anyObjectDAO.find(((ProvisioningResult) output).getAny().getKey());\n         } else if (before instanceof GroupTO) {\n             any = groupDAO.find(((GroupTO) before).getKey());\n-        } else if (output instanceof GroupTO) {\n-            any = groupDAO.find(((GroupTO) output).getKey());\n+        } else if (output instanceof ProvisioningResult\n+                && ((ProvisioningResult) output).getAny() instanceof GroupTO) {\n+\n+            any = groupDAO.find(((ProvisioningResult) output).getAny().getKey());\n         }\n \n         AnyType anyType = any == null ? null : any.getType();"},{"sha":"cbc26f541625317501e5a427f4055390e78f2fc6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":27,"deletions":12,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -62,6 +62,7 @@\n import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n import org.apache.syncope.core.provisioning.api.cache.VirAttrCacheValue;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.identityconnectors.framework.common.exceptions.ConnectorException;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n@@ -311,17 +312,17 @@ protected void delete(\n         } else {\n             /*\n              * We must choose here whether to\n-             * a. actually delete the provided user / group from the external resource\n-             * b. just update the provided user / group data onto the external resource\n+             * a. actually delete the provided any object from the external resource\n+             * b. just update the provided any object data onto the external resource\n              *\n-             * (a) happens when either there is no user / group associated with the PropagationTask (this takes place\n+             * (a) happens when either there is no any object associated with the PropagationTask (this takes place\n              * when the task is generated via UserLogic.delete() / GroupLogic.delete()) or the provided updated\n-             * user / group hasn't the current resource assigned (when the task is generated via\n+             * any object hasn't the current resource assigned (when the task is generated via\n              * UserController.update() / GroupLogic.update()).\n              *\n-             * (b) happens when the provided updated user / group does have the current resource assigned (when the task\n+             * (b) happens when the provided updated any object does have the current resource assigned (when the task\n              * is generated via UserLogic.update() / GroupLogic.updae()): this basically means that before such\n-             * update, this user / group used to have the current resource assigned by more than one mean (for example,\n+             * update, this any object used to have the current resource assigned by more than one mean (for example,\n              * two different memberships with the same resource).\n              */\n             Any<?, ?> any = getAny(task);\n@@ -452,13 +453,13 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n                 task.addExec(execution);\n \n                 taskDAO.save(task);\n-                // this flush call is needed to generate a value for the execution id\n+                // needed to generate a value for the execution key\n                 taskDAO.flush();\n             }\n \n             if (reporter != null) {\n-                reporter.onSuccessOrSecondaryResourceFailures(\n-                        task.getResource().getKey(),\n+                reporter.onSuccessOrNonPriorityResourceFailures(\n+                        task,\n                         PropagationTaskExecStatus.valueOf(execution.getStatus()),\n                         failureReason,\n                         beforeObj,\n@@ -491,16 +492,30 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n \n     @Override\n     public void execute(final Collection<PropagationTask> tasks) {\n-        execute(tasks, null);\n+        execute(tasks, null, false);\n     }\n \n+    protected abstract void doExecute(\n+            Collection<PropagationTask> tasks, PropagationReporter reporter, boolean nullPriorityAsync);\n+\n     @Override\n-    public abstract void execute(Collection<PropagationTask> tasks, final PropagationReporter reporter);\n+    public void execute(\n+            final Collection<PropagationTask> tasks,\n+            final PropagationReporter reporter,\n+            final boolean nullPriorityAsync) {\n+\n+        try {\n+            doExecute(tasks, reporter, nullPriorityAsync);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation priority resource\", e);\n+            reporter.onPriorityResourceFailure(e.getResourceName(), tasks);\n+        }\n+    }\n \n     /**\n      * Check whether an execution has to be stored, for a given task.\n      *\n-     * @param task execution's task\n+     * @param task propagation task\n      * @param execution to be decide whether to store or not\n      * @return true if execution has to be store, false otherwise\n      */"},{"sha":"8e780f4d7c32687f27bbf8a86d1a629d54e0b5c2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationReporter.java","status":"modified","additions":48,"deletions":32,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -19,7 +19,11 @@\n package org.apache.syncope.core.provisioning.java.propagation;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n@@ -39,56 +43,68 @@ public class DefaultPropagationReporter implements PropagationReporter {\n \n     protected final List<PropagationStatus> statuses = new ArrayList<>();\n \n+    protected boolean add(final PropagationStatus status) {\n+        return CollectionUtils.exists(statuses, new Predicate<PropagationStatus>() {\n+\n+            @Override\n+            public boolean evaluate(final PropagationStatus item) {\n+                return item.getResource().equals(status.getResource());\n+            }\n+        })\n+                ? false\n+                : statuses.add(status);\n+    }\n+\n     @Override\n-    public void onSuccessOrSecondaryResourceFailures(final String resource,\n+    public void onSuccessOrNonPriorityResourceFailures(\n+            final PropagationTask propagationTask,\n             final PropagationTaskExecStatus executionStatus,\n-            final String failureReason, final ConnectorObject beforeObj, final ConnectorObject afterObj) {\n+            final String failureReason,\n+            final ConnectorObject beforeObj,\n+            final ConnectorObject afterObj) {\n \n-        PropagationStatus propagation = new PropagationStatus();\n-        propagation.setResource(resource);\n-        propagation.setStatus(executionStatus);\n-        propagation.setFailureReason(failureReason);\n+        PropagationStatus status = new PropagationStatus();\n+        status.setResource(propagationTask.getResource().getKey());\n+        status.setStatus(executionStatus);\n+        status.setFailureReason(failureReason);\n \n         if (beforeObj != null) {\n-            propagation.setBeforeObj(connObjectUtils.getConnObjectTO(beforeObj));\n+            status.setBeforeObj(connObjectUtils.getConnObjectTO(beforeObj));\n         }\n \n         if (afterObj != null) {\n-            propagation.setAfterObj(connObjectUtils.getConnObjectTO(afterObj));\n+            status.setAfterObj(connObjectUtils.getConnObjectTO(afterObj));\n         }\n \n-        statuses.add(propagation);\n-    }\n-\n-    private boolean containsPropagationStatusTO(final String resourceName) {\n-        for (PropagationStatus status : statuses) {\n-            if (resourceName.equals(status.getResource())) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        add(status);\n     }\n \n     @Override\n-    public void onPrimaryResourceFailure(final List<PropagationTask> tasks) {\n-        final String failedResource = statuses.get(statuses.size() - 1).getResource();\n-\n-        LOG.debug(\"Propagation error: {} primary resource failed to propagate\", failedResource);\n-\n-        for (PropagationTask propagationTask : tasks) {\n-            if (!containsPropagationStatusTO(propagationTask.getResource().getKey())) {\n-                PropagationStatus propagationStatusTO = new PropagationStatus();\n-                propagationStatusTO.setResource(propagationTask.getResource().getKey());\n-                propagationStatusTO.setStatus(PropagationTaskExecStatus.FAILURE);\n-                propagationStatusTO.setFailureReason(\n-                        \"Propagation error: \" + failedResource + \" primary resource failed to propagate.\");\n-                statuses.add(propagationStatusTO);\n+    public void onPriorityResourceFailure(final String failingResource, final Collection<PropagationTask> tasks) {\n+        LOG.debug(\"Propagation error: {} priority resource failed to propagate\", failingResource);\n+\n+        final PropagationTask propagationTask = CollectionUtils.find(tasks, new Predicate<PropagationTask>() {\n+\n+            @Override\n+            public boolean evaluate(final PropagationTask task) {\n+                return task.getResource().getKey().equals(failingResource);\n             }\n+        });\n+\n+        if (propagationTask == null) {\n+            LOG.error(\"Could not find {} for {}\", PropagationTask.class.getName(), failingResource);\n+        } else {\n+            PropagationStatus status = new PropagationStatus();\n+            status.setResource(propagationTask.getResource().getKey());\n+            status.setStatus(PropagationTaskExecStatus.FAILURE);\n+            status.setFailureReason(\n+                    \"Propagation error: \" + failingResource + \" priority resource failed to propagate.\");\n+            add(status);\n         }\n     }\n \n     @Override\n     public List<PropagationStatus> getStatuses() {\n-        return statuses;\n+        return Collections.unmodifiableList(statuses);\n     }\n }"},{"sha":"5ea6616c0e422f59e6ead2fc895cb6019304ad49","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java","status":"modified","additions":110,"deletions":51,"changes":161,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -23,90 +23,148 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n-import org.apache.syncope.common.lib.types.AuditElements;\n-import org.apache.syncope.common.lib.types.AuditElements.Result;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletionService;\n+import java.util.concurrent.ExecutorCompletionService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Resource;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskCallable;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n \n /**\n- * Sort the given collection by looking at related ExternalResource's priority, then execute.\n+ * Sorts the tasks to be executed according to related\n+ * {@link org.apache.syncope.core.persistence.api.entity.resource.ExternalResource}'s priority, then execute.\n+ * Tasks related to resources with NULL priority are executed after other tasks, concurrently.\n+ * Failure during execution of a task related to resource with non-NULL priority are treated as fatal and will interrupt\n+ * the whole process, resulting in a global failure.\n  */\n public class PriorityPropagationTaskExecutor extends AbstractPropagationTaskExecutor {\n \n+    @Resource(name = \"propagationTaskExecutorAsyncExecutor\")\n+    protected ThreadPoolTaskExecutor executor;\n+\n     @Override\n-    public void execute(final Collection<PropagationTask> tasks, final PropagationReporter reporter) {\n-        List<PropagationTask> prioritizedTasks = new ArrayList<>(tasks);\n-        Collections.sort(prioritizedTasks, new PriorityComparator());\n+    public PropagationTaskCallable newPropagationTaskCallable(\n+            final PropagationTask task, final PropagationReporter reporter) {\n \n-        LOG.debug(\"Propagation tasks sorted by priority, before execution: {}\", prioritizedTasks);\n+        PropagationTaskCallable callable = (PropagationTaskCallable) ApplicationContextProvider.getBeanFactory().\n+                createBean(PropagationTaskCallableImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+        callable.setExecutor(this);\n+        callable.setTask(task);\n+        callable.setReporter(reporter);\n \n-        Result result = Result.SUCCESS;\n+        return callable;\n+    }\n \n-        try {\n-            for (PropagationTask task : prioritizedTasks) {\n-                LOG.debug(\"Execution started for {}\", task);\n+    @Override\n+    protected void doExecute(\n+            final Collection<PropagationTask> tasks,\n+            final PropagationReporter reporter,\n+            final boolean nullPriorityAsync) {\n \n-                TaskExec execution = execute(task, reporter);\n+        List<PropagationTask> prioritizedTasks = CollectionUtils.select(tasks, new Predicate<PropagationTask>() {\n \n-                LOG.debug(\"Execution finished for {}, {}\", task, execution);\n+            @Override\n+            public boolean evaluate(final PropagationTask task) {\n+                return task.getResource().getPropagationPriority() != null;\n+            }\n+        }, new ArrayList<PropagationTask>());\n+        Collections.sort(prioritizedTasks, new PriorityComparator());\n+        LOG.debug(\"Propagation tasks sorted by priority, for serial execution: {}\", prioritizedTasks);\n \n-                // Propagation is interrupted as soon as the result of the\n-                // communication with a primary resource is in error\n-                PropagationTaskExecStatus execStatus;\n-                try {\n-                    execStatus = PropagationTaskExecStatus.valueOf(execution.getStatus());\n-                } catch (IllegalArgumentException e) {\n-                    LOG.error(\"Unexpected execution status found {}\", execution.getStatus());\n-                    execStatus = PropagationTaskExecStatus.FAILURE;\n+        Collection<PropagationTask> concurrentTasks = CollectionUtils.subtract(tasks, prioritizedTasks);\n+        LOG.debug(\"Propagation tasks for concurrent execution: {}\", concurrentTasks);\n+\n+        // first process priority resources sequentially and fail as soon as any propagation failure is reported\n+        for (PropagationTask task : prioritizedTasks) {\n+            TaskExec execution = null;\n+            PropagationTaskExecStatus execStatus;\n+            try {\n+                execution = newPropagationTaskCallable(task, reporter).call();\n+                execStatus = PropagationTaskExecStatus.valueOf(execution.getStatus());\n+            } catch (Exception e) {\n+                LOG.error(\"Unexpected exception\", e);\n+                execStatus = PropagationTaskExecStatus.FAILURE;\n+            }\n+            if (execStatus != PropagationTaskExecStatus.SUCCESS) {\n+                throw new PropagationException(\n+                        task.getResource().getKey(), execution == null ? null : execution.getMessage());\n+            }\n+        }\n+\n+        // then process non-priority resources concurrently...\n+        final CompletionService<TaskExec> completionService = new ExecutorCompletionService<>(executor);\n+        Map<PropagationTask, Future<TaskExec>> nullPriority = new HashMap<>(concurrentTasks.size());\n+        for (PropagationTask task : concurrentTasks) {\n+            try {\n+                nullPriority.put(\n+                        task,\n+                        completionService.submit(newPropagationTaskCallable(task, reporter)));\n+            } catch (Exception e) {\n+                LOG.error(\"Unexpected exception\", e);\n+            }\n+        }\n+        // ...waiting for all callables to complete, if async processing was not required\n+        if (!nullPriority.isEmpty()) {\n+            if (nullPriorityAsync) {\n+                for (Map.Entry<PropagationTask, Future<TaskExec>> entry : nullPriority.entrySet()) {\n+                    reporter.onSuccessOrNonPriorityResourceFailures(\n+                            entry.getKey(), PropagationTaskExecStatus.CREATED, null, null, null);\n                 }\n-                if (task.getResource().isPropagationPrimary() && execStatus != PropagationTaskExecStatus.SUCCESS) {\n-                    result = Result.FAILURE;\n-                    throw new PropagationException(task.getResource().getKey(), execution.getMessage());\n+            } else {\n+                final Set<Future<TaskExec>> nullPriorityFutures = new HashSet<>(nullPriority.values());\n+                try {\n+                    executor.submit(new Runnable() {\n+\n+                        @Override\n+                        public void run() {\n+                            while (!nullPriorityFutures.isEmpty()) {\n+                                try {\n+                                    nullPriorityFutures.remove(completionService.take());\n+                                } catch (Exception e) {\n+                                    LOG.error(\"Unexpected exception\", e);\n+                                }\n+                            }\n+                        }\n+                    }).get(60, TimeUnit.SECONDS);\n+                } catch (Exception e) {\n+                    LOG.error(\"Unexpected exception\", e);\n+                } finally {\n+                    for (Future<TaskExec> future : nullPriorityFutures) {\n+                        future.cancel(true);\n+                    }\n+                    nullPriorityFutures.clear();\n+                    nullPriority.clear();\n                 }\n             }\n-        } finally {\n-            notificationManager.createTasks(\n-                    AuditElements.EventCategoryType.PROPAGATION,\n-                    null,\n-                    null,\n-                    null,\n-                    result,\n-                    reporter == null ? null : reporter.getStatuses(),\n-                    tasks);\n-\n-            auditManager.audit(\n-                    AuditElements.EventCategoryType.PROPAGATION,\n-                    null,\n-                    null,\n-                    null,\n-                    result,\n-                    reporter == null ? null : reporter.getStatuses(),\n-                    tasks);\n         }\n     }\n \n     /**\n      * Compare propagation tasks according to related ExternalResource's priority.\n-     *\n-     * @see PropagationTask\n-     * @see org.apache.syncope.core.persistence.beans.ExternalResource#propagationPriority\n      */\n     protected static class PriorityComparator implements Comparator<PropagationTask>, Serializable {\n \n         private static final long serialVersionUID = -1969355670784448878L;\n \n         @Override\n         public int compare(final PropagationTask task1, final PropagationTask task2) {\n-            int prop1 = task1.getResource().getPropagationPriority() == null\n-                    ? Integer.MIN_VALUE\n-                    : task1.getResource().getPropagationPriority();\n-            int prop2 = task2.getResource().getPropagationPriority() == null\n-                    ? Integer.MIN_VALUE\n-                    : task2.getResource().getPropagationPriority();\n+            int prop1 = task1.getResource().getPropagationPriority();\n+            int prop2 = task2.getResource().getPropagationPriority();\n \n             return prop1 > prop2\n                     ? 1\n@@ -115,4 +173,5 @@ public int compare(final PropagationTask task1, final PropagationTask task2) {\n                             : -1;\n         }\n     }\n+\n }"},{"sha":"4e6b875ae2c5f9d86685eb954f7216364cca7c8e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationTaskCallableImpl.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationTaskCallableImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationTaskCallableImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationTaskCallableImpl.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.propagation;\n+\n+import java.util.Collection;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n+import org.apache.syncope.core.misc.security.SyncopeAuthenticationDetails;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskCallable;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.context.SecurityContext;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.core.userdetails.User;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(rollbackFor = { Throwable.class })\n+public class PropagationTaskCallableImpl implements PropagationTaskCallable {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PropagationTaskCallable.class);\n+\n+    private final String domain;\n+\n+    private final String username;\n+\n+    private final Collection<? extends GrantedAuthority> authorities;\n+\n+    private PropagationTaskExecutor executor;\n+\n+    private PropagationTask task;\n+\n+    private PropagationReporter reporter;\n+\n+    public PropagationTaskCallableImpl() {\n+        SecurityContext ctx = SecurityContextHolder.getContext();\n+        domain = AuthContextUtils.getDomain();\n+        username = ctx.getAuthentication().getName();\n+        authorities = ctx.getAuthentication().getAuthorities();\n+    }\n+\n+    @Override\n+    public void setExecutor(final PropagationTaskExecutor executor) {\n+        this.executor = executor;\n+    }\n+\n+    @Override\n+    public void setTask(final PropagationTask task) {\n+        this.task = task;\n+    }\n+\n+    @Override\n+    public void setReporter(final PropagationReporter reporter) {\n+        this.reporter = reporter;\n+    }\n+\n+    @Override\n+    public TaskExec call() throws Exception {\n+        // set security context according to the one gathered at instantiation time from the calling thread\n+        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n+                new User(username, \"FAKE_PASSWORD\", authorities), \"FAKE_PASSWORD\", authorities);\n+        auth.setDetails(new SyncopeAuthenticationDetails(domain));\n+        SecurityContextHolder.getContext().setAuthentication(auth);\n+\n+        LOG.debug(\"Execution started for {}\", task);\n+\n+        TaskExec execution = executor.execute(task, reporter);\n+\n+        LOG.debug(\"Execution completed for {}, {}\", task, execution);\n+\n+        return execution;\n+    }\n+\n+}"},{"sha":"d6f4c15bf2b301eea0686780844f436905b1456c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractProvisioningJobDelegate.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJobDelegate.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -34,7 +34,7 @@\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n-import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n+import org.apache.syncope.core.provisioning.api.sync.ProvisioningReport;\n import org.apache.syncope.core.provisioning.java.job.AbstractSchedTaskJobDelegate;\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n import org.quartz.JobExecutionException;\n@@ -75,7 +75,7 @@\n      * @param dryRun dry run?\n      * @return report as string\n      */\n-    protected String createReport(final Collection<ProvisioningResult> provResults, final TraceLevel syncTraceLevel,\n+    protected String createReport(final Collection<ProvisioningReport> provResults, final TraceLevel syncTraceLevel,\n             final boolean dryRun) {\n \n         if (syncTraceLevel == TraceLevel.NONE) {\n@@ -88,32 +88,32 @@ protected String createReport(final Collection<ProvisioningResult> provResults,\n             report.append(\"==>Dry run only, no modifications were made<==\\n\\n\");\n         }\n \n-        List<ProvisioningResult> uSuccCreate = new ArrayList<>();\n-        List<ProvisioningResult> uFailCreate = new ArrayList<>();\n-        List<ProvisioningResult> uSuccUpdate = new ArrayList<>();\n-        List<ProvisioningResult> uFailUpdate = new ArrayList<>();\n-        List<ProvisioningResult> uSuccDelete = new ArrayList<>();\n-        List<ProvisioningResult> uFailDelete = new ArrayList<>();\n-        List<ProvisioningResult> uSuccNone = new ArrayList<>();\n-        List<ProvisioningResult> uIgnore = new ArrayList<>();\n-        List<ProvisioningResult> gSuccCreate = new ArrayList<>();\n-        List<ProvisioningResult> gFailCreate = new ArrayList<>();\n-        List<ProvisioningResult> gSuccUpdate = new ArrayList<>();\n-        List<ProvisioningResult> gFailUpdate = new ArrayList<>();\n-        List<ProvisioningResult> gSuccDelete = new ArrayList<>();\n-        List<ProvisioningResult> gFailDelete = new ArrayList<>();\n-        List<ProvisioningResult> gSuccNone = new ArrayList<>();\n-        List<ProvisioningResult> gIgnore = new ArrayList<>();\n-        List<ProvisioningResult> aSuccCreate = new ArrayList<>();\n-        List<ProvisioningResult> aFailCreate = new ArrayList<>();\n-        List<ProvisioningResult> aSuccUpdate = new ArrayList<>();\n-        List<ProvisioningResult> aFailUpdate = new ArrayList<>();\n-        List<ProvisioningResult> aSuccDelete = new ArrayList<>();\n-        List<ProvisioningResult> aFailDelete = new ArrayList<>();\n-        List<ProvisioningResult> aSuccNone = new ArrayList<>();\n-        List<ProvisioningResult> aIgnore = new ArrayList<>();\n-\n-        for (ProvisioningResult provResult : provResults) {\n+        List<ProvisioningReport> uSuccCreate = new ArrayList<>();\n+        List<ProvisioningReport> uFailCreate = new ArrayList<>();\n+        List<ProvisioningReport> uSuccUpdate = new ArrayList<>();\n+        List<ProvisioningReport> uFailUpdate = new ArrayList<>();\n+        List<ProvisioningReport> uSuccDelete = new ArrayList<>();\n+        List<ProvisioningReport> uFailDelete = new ArrayList<>();\n+        List<ProvisioningReport> uSuccNone = new ArrayList<>();\n+        List<ProvisioningReport> uIgnore = new ArrayList<>();\n+        List<ProvisioningReport> gSuccCreate = new ArrayList<>();\n+        List<ProvisioningReport> gFailCreate = new ArrayList<>();\n+        List<ProvisioningReport> gSuccUpdate = new ArrayList<>();\n+        List<ProvisioningReport> gFailUpdate = new ArrayList<>();\n+        List<ProvisioningReport> gSuccDelete = new ArrayList<>();\n+        List<ProvisioningReport> gFailDelete = new ArrayList<>();\n+        List<ProvisioningReport> gSuccNone = new ArrayList<>();\n+        List<ProvisioningReport> gIgnore = new ArrayList<>();\n+        List<ProvisioningReport> aSuccCreate = new ArrayList<>();\n+        List<ProvisioningReport> aFailCreate = new ArrayList<>();\n+        List<ProvisioningReport> aSuccUpdate = new ArrayList<>();\n+        List<ProvisioningReport> aFailUpdate = new ArrayList<>();\n+        List<ProvisioningReport> aSuccDelete = new ArrayList<>();\n+        List<ProvisioningReport> aFailDelete = new ArrayList<>();\n+        List<ProvisioningReport> aSuccNone = new ArrayList<>();\n+        List<ProvisioningReport> aIgnore = new ArrayList<>();\n+\n+        for (ProvisioningReport provResult : provResults) {\n             AnyType anyType = anyTypeDAO.find(provResult.getAnyType());\n \n             switch (provResult.getStatus()) {\n@@ -293,76 +293,76 @@ protected String createReport(final Collection<ProvisioningResult> provResults,\n         if (syncTraceLevel == TraceLevel.FAILURES || syncTraceLevel == TraceLevel.ALL) {\n             if (!uFailCreate.isEmpty()) {\n                 report.append(\"\\n\\nUsers failed to create: \");\n-                report.append(ProvisioningResult.produceReport(uFailCreate, syncTraceLevel));\n+                report.append(ProvisioningReport.produceReport(uFailCreate, syncTraceLevel));\n             }\n             if (!uFailUpdate.isEmpty()) {\n                 report.append(\"\\nUsers failed to update: \");\n-                report.append(ProvisioningResult.produceReport(uFailUpdate, syncTraceLevel));\n+                report.append(ProvisioningReport.produceReport(uFailUpdate, syncTraceLevel));\n             }\n             if (!uFailDelete.isEmpty()) {\n                 report.append(\"\\nUsers failed to delete: \");\n-                report.append(ProvisioningResult.produceReport(uFailDelete, syncTraceLevel));\n+                report.append(ProvisioningReport.produceReport(uFailDelete, syncTraceLevel));\n             }\n \n             if (!gFailCreate.isEmpty()) {\n                 report.append(\"\\n\\nGroups failed to create: \");\n-                report.append(ProvisioningResult.produceReport(gFailCreate, syncTraceLevel));\n+                report.append(ProvisioningReport.produceReport(gFailCreate, syncTraceLevel));\n             }\n             if (!gFailUpdate.isEmpty()) {\n                 report.append(\"\\nGroups failed to update: \");\n-                report.append(ProvisioningResult.produceReport(gFailUpdate, syncTraceLevel));\n+                report.append(ProvisioningReport.produceReport(gFailUpdate, syncTraceLevel));\n             }\n             if (!gFailDelete.isEmpty()) {\n                 report.append(\"\\nGroups failed to delete: \");\n-                report.append(ProvisioningResult.produceReport(gFailDelete, syncTraceLevel));\n+                report.append(ProvisioningReport.produceReport(gFailDelete, syncTraceLevel));\n             }\n \n             if (!aFailCreate.isEmpty()) {\n                 report.append(\"\\nAny objects failed to create: \");\n-                report.append(ProvisioningResult.produceReport(aFailCreate, syncTraceLevel));\n+                report.append(ProvisioningReport.produceReport(aFailCreate, syncTraceLevel));\n             }\n             if (!aFailUpdate.isEmpty()) {\n                 report.append(\"\\nAny objects failed to update: \");\n-                report.append(ProvisioningResult.produceReport(aFailUpdate, syncTraceLevel));\n+                report.append(ProvisioningReport.produceReport(aFailUpdate, syncTraceLevel));\n             }\n             if (!aFailDelete.isEmpty()) {\n                 report.append(\"\\nAny objects failed to delete: \");\n-                report.append(ProvisioningResult.produceReport(aFailDelete, syncTraceLevel));\n+                report.append(ProvisioningReport.produceReport(aFailDelete, syncTraceLevel));\n             }\n         }\n \n         // Succeeded, only if on 'ALL' level\n         if (syncTraceLevel == TraceLevel.ALL) {\n             report.append(\"\\n\\nUsers created:\\n\").\n-                    append(ProvisioningResult.produceReport(uSuccCreate, syncTraceLevel)).\n+                    append(ProvisioningReport.produceReport(uSuccCreate, syncTraceLevel)).\n                     append(\"\\nUsers updated:\\n\").\n-                    append(ProvisioningResult.produceReport(uSuccUpdate, syncTraceLevel)).\n+                    append(ProvisioningReport.produceReport(uSuccUpdate, syncTraceLevel)).\n                     append(\"\\nUsers deleted:\\n\").\n-                    append(ProvisioningResult.produceReport(uSuccDelete, syncTraceLevel)).\n+                    append(ProvisioningReport.produceReport(uSuccDelete, syncTraceLevel)).\n                     append(\"\\nUsers no operation:\\n\").\n-                    append(ProvisioningResult.produceReport(uSuccNone, syncTraceLevel)).\n+                    append(ProvisioningReport.produceReport(uSuccNone, syncTraceLevel)).\n                     append(\"\\nUsers ignored:\\n\").\n-                    append(ProvisioningResult.produceReport(uIgnore, syncTraceLevel));\n+                    append(ProvisioningReport.produceReport(uIgnore, syncTraceLevel));\n             report.append(\"\\n\\nGroups created:\\n\").\n-                    append(ProvisioningResult.produceReport(gSuccCreate, syncTraceLevel)).\n+                    append(ProvisioningReport.produceReport(gSuccCreate, syncTraceLevel)).\n                     append(\"\\nGroups updated:\\n\").\n-                    append(ProvisioningResult.produceReport(gSuccUpdate, syncTraceLevel)).\n+                    append(ProvisioningReport.produceReport(gSuccUpdate, syncTraceLevel)).\n                     append(\"\\nGroups deleted:\\n\").\n-                    append(ProvisioningResult.produceReport(gSuccDelete, syncTraceLevel)).\n+                    append(ProvisioningReport.produceReport(gSuccDelete, syncTraceLevel)).\n                     append(\"\\nGroups no operation:\\n\").\n-                    append(ProvisioningResult.produceReport(gSuccNone, syncTraceLevel)).\n+                    append(ProvisioningReport.produceReport(gSuccNone, syncTraceLevel)).\n                     append(\"\\nGroups ignored:\\n\").\n-                    append(ProvisioningResult.produceReport(gSuccNone, syncTraceLevel));\n+                    append(ProvisioningReport.produceReport(gSuccNone, syncTraceLevel));\n             report.append(\"\\n\\nAny objects created:\\n\").\n-                    append(ProvisioningResult.produceReport(aSuccCreate, syncTraceLevel)).\n+                    append(ProvisioningReport.produceReport(aSuccCreate, syncTraceLevel)).\n                     append(\"\\nAny objects updated:\\n\").\n-                    append(ProvisioningResult.produceReport(aSuccUpdate, syncTraceLevel)).\n+                    append(ProvisioningReport.produceReport(aSuccUpdate, syncTraceLevel)).\n                     append(\"\\nAny objects deleted:\\n\").\n-                    append(ProvisioningResult.produceReport(aSuccDelete, syncTraceLevel)).\n+                    append(ProvisioningReport.produceReport(aSuccDelete, syncTraceLevel)).\n                     append(\"\\nAny objects no operation:\\n\").\n-                    append(ProvisioningResult.produceReport(aSuccNone, syncTraceLevel)).\n+                    append(ProvisioningReport.produceReport(aSuccNone, syncTraceLevel)).\n                     append(\"\\nAny objects ignored:\\n\").\n-                    append(ProvisioningResult.produceReport(aSuccNone, syncTraceLevel));\n+                    append(ProvisioningReport.produceReport(aSuccNone, syncTraceLevel));\n         }\n \n         return report.toString();"},{"sha":"5daea515825091acd255f7dc4f3598818df386fd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractPushResultHandler.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -35,7 +35,7 @@\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n+import org.apache.syncope.core.provisioning.api.sync.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.sync.PushActions;\n import org.apache.syncope.core.misc.utils.MappingUtils;\n import org.apache.syncope.core.persistence.api.entity.Any;\n@@ -154,10 +154,10 @@ public boolean handle(final long anyKey) {\n             doHandle(any);\n             return true;\n         } catch (IgnoreProvisionException e) {\n-            ProvisioningResult result = new ProvisioningResult();\n+            ProvisioningReport result = new ProvisioningReport();\n             result.setOperation(ResourceOperation.NONE);\n             result.setAnyType(any == null ? null : any.getType().getKey());\n-            result.setStatus(ProvisioningResult.Status.IGNORE);\n+            result.setStatus(ProvisioningReport.Status.IGNORE);\n             result.setKey(anyKey);\n             profile.getResults().add(result);\n \n@@ -172,7 +172,7 @@ public boolean handle(final long anyKey) {\n     protected final void doHandle(final Any<?, ?> any) throws JobExecutionException {\n         AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n \n-        ProvisioningResult result = new ProvisioningResult();\n+        ProvisioningReport result = new ProvisioningReport();\n         profile.getResults().add(result);\n \n         result.setKey(any.getKey());\n@@ -204,7 +204,7 @@ protected final void doHandle(final Any<?, ?> any) throws JobExecutionException\n             } else {\n                 result.setOperation(getResourceOperation(profile.getTask().getMatchingRule()));\n             }\n-            result.setStatus(ProvisioningResult.Status.SUCCESS);\n+            result.setStatus(ProvisioningReport.Status.SUCCESS);\n         } else {\n             try {\n                 if (beforeObj == null) {\n@@ -338,13 +338,13 @@ protected final void doHandle(final Any<?, ?> any) throws JobExecutionException\n                     action.after(this.getProfile(), any, result);\n                 }\n \n-                result.setStatus(ProvisioningResult.Status.SUCCESS);\n+                result.setStatus(ProvisioningReport.Status.SUCCESS);\n                 resultStatus = AuditElements.Result.SUCCESS;\n                 output = getRemoteObject(connObjecKey, provision.getObjectClass());\n             } catch (IgnoreProvisionException e) {\n                 throw e;\n             } catch (Exception e) {\n-                result.setStatus(ProvisioningResult.Status.FAILURE);\n+                result.setStatus(ProvisioningReport.Status.FAILURE);\n                 result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n                 resultStatus = AuditElements.Result.FAILURE;\n                 output = e;"},{"sha":"2c5bbb956b2e2bd020214be555e65d7c7f8f98f3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractSyncResultHandler.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -46,7 +46,7 @@\n import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n import org.apache.syncope.core.provisioning.api.cache.VirAttrCacheValue;\n import org.apache.syncope.core.provisioning.api.sync.IgnoreProvisionException;\n-import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n+import org.apache.syncope.core.provisioning.api.sync.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.sync.SyncopeSyncResultHandler;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n@@ -72,7 +72,7 @@ public abstract class AbstractSyncResultHandler extends AbstractSyncopeResultHan\n \n     protected abstract ProvisioningManager<?, ?> getProvisioningManager();\n \n-    protected abstract AnyTO doCreate(AnyTO anyTO, SyncDelta delta, ProvisioningResult result);\n+    protected abstract AnyTO doCreate(AnyTO anyTO, SyncDelta delta, ProvisioningReport result);\n \n     protected AnyTO doLink(final AnyTO before, final boolean unlink) {\n         AnyPatch patch = newPatch(before.getKey());\n@@ -84,7 +84,7 @@ protected AnyTO doLink(final AnyTO before, final boolean unlink) {\n         return getAnyTO(update(patch).getResult());\n     }\n \n-    protected abstract AnyTO doUpdate(AnyTO before, AnyPatch anyPatch, SyncDelta delta, ProvisioningResult result);\n+    protected abstract AnyTO doUpdate(AnyTO before, AnyPatch anyPatch, SyncDelta delta, ProvisioningReport result);\n \n     protected void doDeprovision(final AnyTypeKind kind, final Long key, final boolean unlink) {\n         PropagationByResource propByRes = new PropagationByResource();\n@@ -118,7 +118,7 @@ protected void doDelete(final AnyTypeKind kind, final Long key) {\n             LOG.error(\"Could not propagate anyObject \" + key, e);\n         }\n \n-        getProvisioningManager().delete(key);\n+        getProvisioningManager().delete(key, true);\n     }\n \n     @Override\n@@ -134,11 +134,11 @@ public boolean handle(final SyncDelta delta) {\n             doHandle(delta, provision);\n             return true;\n         } catch (IgnoreProvisionException e) {\n-            ProvisioningResult result = new ProvisioningResult();\n+            ProvisioningReport result = new ProvisioningReport();\n             result.setOperation(ResourceOperation.NONE);\n             result.setAnyType(provision == null\n                     ? getAnyUtils().getAnyTypeKind().name() : provision.getAnyType().getKey());\n-            result.setStatus(ProvisioningResult.Status.IGNORE);\n+            result.setStatus(ProvisioningReport.Status.IGNORE);\n             result.setKey(0L);\n             result.setName(delta.getObject().getName().getNameValue());\n             profile.getResults().add(result);\n@@ -151,23 +151,23 @@ public boolean handle(final SyncDelta delta) {\n         }\n     }\n \n-    protected List<ProvisioningResult> assign(\n+    protected List<ProvisioningReport> assign(\n             final SyncDelta delta, final Provision provision, final AnyUtils anyUtils)\n             throws JobExecutionException {\n \n         if (!profile.getTask().isPerformCreate()) {\n             LOG.debug(\"SyncTask not configured for create\");\n-            return Collections.<ProvisioningResult>emptyList();\n+            return Collections.<ProvisioningReport>emptyList();\n         }\n \n         AnyTO anyTO = connObjectUtils.getAnyTO(delta.getObject(), profile.getTask(), provision, anyUtils);\n \n         anyTO.getResources().add(profile.getTask().getResource().getKey());\n \n-        ProvisioningResult result = new ProvisioningResult();\n+        ProvisioningReport result = new ProvisioningReport();\n         result.setOperation(ResourceOperation.CREATE);\n         result.setAnyType(provision.getAnyType().getKey());\n-        result.setStatus(ProvisioningResult.Status.SUCCESS);\n+        result.setStatus(ProvisioningReport.Status.SUCCESS);\n         result.setName(getName(anyTO));\n \n         if (profile.isDryRun()) {\n@@ -184,21 +184,21 @@ protected List<ProvisioningResult> assign(\n         return Collections.singletonList(result);\n     }\n \n-    protected List<ProvisioningResult> provision(\n+    protected List<ProvisioningReport> provision(\n             final SyncDelta delta, final Provision provision, final AnyUtils anyUtils)\n             throws JobExecutionException {\n \n         if (!profile.getTask().isPerformCreate()) {\n             LOG.debug(\"SyncTask not configured for create\");\n-            return Collections.<ProvisioningResult>emptyList();\n+            return Collections.<ProvisioningReport>emptyList();\n         }\n \n         AnyTO anyTO = connObjectUtils.getAnyTO(delta.getObject(), profile.getTask(), provision, anyUtils);\n \n-        ProvisioningResult result = new ProvisioningResult();\n+        ProvisioningReport result = new ProvisioningReport();\n         result.setOperation(ResourceOperation.CREATE);\n         result.setAnyType(provision.getAnyType().getKey());\n-        result.setStatus(ProvisioningResult.Status.SUCCESS);\n+        result.setStatus(ProvisioningReport.Status.SUCCESS);\n         result.setName(getName(anyTO));\n \n         if (profile.isDryRun()) {\n@@ -219,7 +219,7 @@ private void create(\n             final AnyTO anyTO,\n             final SyncDelta delta,\n             final String operation,\n-            final ProvisioningResult result)\n+            final ProvisioningReport result)\n             throws JobExecutionException {\n \n         Object output;\n@@ -247,7 +247,7 @@ private void create(\n                 action.onError(this.getProfile(), delta, result, e);\n             }\n         } catch (Exception e) {\n-            result.setStatus(ProvisioningResult.Status.FAILURE);\n+            result.setStatus(ProvisioningReport.Status.FAILURE);\n             result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n             LOG.error(\"Could not create {} {} \", anyTO.getType(), delta.getUid().getUidValue(), e);\n             output = e;\n@@ -261,31 +261,31 @@ private void create(\n         audit(operation, resultStatus, null, output, delta);\n     }\n \n-    protected List<ProvisioningResult> update(final SyncDelta delta, final List<Long> anys,\n+    protected List<ProvisioningReport> update(final SyncDelta delta, final List<Long> anys,\n             final Provision provision) throws JobExecutionException {\n \n         if (!profile.getTask().isPerformUpdate()) {\n             LOG.debug(\"SyncTask not configured for update\");\n-            return Collections.<ProvisioningResult>emptyList();\n+            return Collections.<ProvisioningReport>emptyList();\n         }\n \n         LOG.debug(\"About to update {}\", anys);\n \n-        List<ProvisioningResult> results = new ArrayList<>();\n+        List<ProvisioningReport> results = new ArrayList<>();\n \n         SyncDelta workingDelta = delta;\n         for (Long key : anys) {\n             LOG.debug(\"About to update {}\", key);\n \n-            ProvisioningResult result = new ProvisioningResult();\n+            ProvisioningReport result = new ProvisioningReport();\n             result.setOperation(ResourceOperation.UPDATE);\n             result.setAnyType(provision.getAnyType().getKey());\n-            result.setStatus(ProvisioningResult.Status.SUCCESS);\n+            result.setStatus(ProvisioningReport.Status.SUCCESS);\n             result.setKey(key);\n \n             AnyTO before = getAnyTO(key);\n             if (before == null) {\n-                result.setStatus(ProvisioningResult.Status.FAILURE);\n+                result.setStatus(ProvisioningReport.Status.FAILURE);\n                 result.setMessage(String.format(\"Any '%s(%d)' not found\", provision.getAnyType().getKey(), key));\n             } else {\n                 result.setName(getName(before));\n@@ -335,7 +335,7 @@ protected List<ProvisioningResult> update(final SyncDelta delta, final List<Long\n                             action.onError(this.getProfile(), workingDelta, result, e);\n                         }\n                     } catch (Exception e) {\n-                        result.setStatus(ProvisioningResult.Status.FAILURE);\n+                        result.setStatus(ProvisioningReport.Status.FAILURE);\n                         result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n                         LOG.error(\"Could not update {} {}\",\n                                 provision.getAnyType().getKey(), workingDelta.getUid().getUidValue(), e);\n@@ -354,7 +354,7 @@ protected List<ProvisioningResult> update(final SyncDelta delta, final List<Long\n         return results;\n     }\n \n-    protected List<ProvisioningResult> deprovision(\n+    protected List<ProvisioningReport> deprovision(\n             final SyncDelta delta,\n             final List<Long> anys,\n             final Provision provision,\n@@ -363,29 +363,29 @@ protected List<ProvisioningResult> deprovision(\n \n         if (!profile.getTask().isPerformUpdate()) {\n             LOG.debug(\"SyncTask not configured for update\");\n-            return Collections.<ProvisioningResult>emptyList();\n+            return Collections.<ProvisioningReport>emptyList();\n         }\n \n         LOG.debug(\"About to update {}\", anys);\n \n-        final List<ProvisioningResult> updResults = new ArrayList<>();\n+        final List<ProvisioningReport> updResults = new ArrayList<>();\n \n         for (Long key : anys) {\n             LOG.debug(\"About to unassign resource {}\", key);\n \n             Object output;\n             Result resultStatus;\n \n-            ProvisioningResult result = new ProvisioningResult();\n+            ProvisioningReport result = new ProvisioningReport();\n             result.setOperation(ResourceOperation.DELETE);\n             result.setAnyType(provision.getAnyType().getKey());\n-            result.setStatus(ProvisioningResult.Status.SUCCESS);\n+            result.setStatus(ProvisioningReport.Status.SUCCESS);\n             result.setKey(key);\n \n             AnyTO before = getAnyTO(key);\n \n             if (before == null) {\n-                result.setStatus(ProvisioningResult.Status.FAILURE);\n+                result.setStatus(ProvisioningReport.Status.FAILURE);\n                 result.setMessage(String.format(\"Any '%s(%d)' not found\", provision.getAnyType().getKey(), key));\n             }\n \n@@ -430,7 +430,7 @@ protected List<ProvisioningResult> deprovision(\n                             action.onError(this.getProfile(), delta, result, e);\n                         }\n                     } catch (Exception e) {\n-                        result.setStatus(ProvisioningResult.Status.FAILURE);\n+                        result.setStatus(ProvisioningReport.Status.FAILURE);\n                         result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n                         LOG.error(\"Could not update {} {}\",\n                                 provision.getAnyType().getKey(), delta.getUid().getUidValue(), e);\n@@ -452,7 +452,7 @@ protected List<ProvisioningResult> deprovision(\n         return updResults;\n     }\n \n-    protected List<ProvisioningResult> link(\n+    protected List<ProvisioningReport> link(\n             final SyncDelta delta,\n             final List<Long> anys,\n             final Provision provision,\n@@ -461,29 +461,29 @@ protected List<ProvisioningResult> link(\n \n         if (!profile.getTask().isPerformUpdate()) {\n             LOG.debug(\"SyncTask not configured for update\");\n-            return Collections.<ProvisioningResult>emptyList();\n+            return Collections.<ProvisioningReport>emptyList();\n         }\n \n         LOG.debug(\"About to update {}\", anys);\n \n-        final List<ProvisioningResult> updResults = new ArrayList<>();\n+        final List<ProvisioningReport> updResults = new ArrayList<>();\n \n         for (Long key : anys) {\n             LOG.debug(\"About to unassign resource {}\", key);\n \n             Object output;\n             Result resultStatus;\n \n-            ProvisioningResult result = new ProvisioningResult();\n+            ProvisioningReport result = new ProvisioningReport();\n             result.setOperation(ResourceOperation.NONE);\n             result.setAnyType(provision.getAnyType().getKey());\n-            result.setStatus(ProvisioningResult.Status.SUCCESS);\n+            result.setStatus(ProvisioningReport.Status.SUCCESS);\n             result.setKey(key);\n \n             AnyTO before = getAnyTO(key);\n \n             if (before == null) {\n-                result.setStatus(ProvisioningResult.Status.FAILURE);\n+                result.setStatus(ProvisioningReport.Status.FAILURE);\n                 result.setMessage(String.format(\"Any '%s(%d)' not found\", provision.getAnyType().getKey(), key));\n             }\n \n@@ -527,7 +527,7 @@ protected List<ProvisioningResult> link(\n                             action.onError(this.getProfile(), delta, result, e);\n                         }\n                     } catch (Exception e) {\n-                        result.setStatus(ProvisioningResult.Status.FAILURE);\n+                        result.setStatus(ProvisioningReport.Status.FAILURE);\n                         result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n                         LOG.error(\"Could not update {} {}\",\n                                 provision.getAnyType().getKey(), delta.getUid().getUidValue(), e);\n@@ -548,27 +548,27 @@ protected List<ProvisioningResult> link(\n         return updResults;\n     }\n \n-    protected List<ProvisioningResult> delete(\n+    protected List<ProvisioningReport> delete(\n             final SyncDelta delta,\n             final List<Long> anys,\n             final Provision provision)\n             throws JobExecutionException {\n \n         if (!profile.getTask().isPerformDelete()) {\n             LOG.debug(\"SyncTask not configured for delete\");\n-            return Collections.<ProvisioningResult>emptyList();\n+            return Collections.<ProvisioningReport>emptyList();\n         }\n \n         LOG.debug(\"About to delete {}\", anys);\n \n-        List<ProvisioningResult> delResults = new ArrayList<>();\n+        List<ProvisioningReport> delResults = new ArrayList<>();\n \n         SyncDelta workingDelta = delta;\n         for (Long key : anys) {\n             Object output;\n             Result resultStatus = Result.FAILURE;\n \n-            ProvisioningResult result = new ProvisioningResult();\n+            ProvisioningReport result = new ProvisioningReport();\n \n             try {\n                 AnyTO before = getAnyTO(key);\n@@ -577,7 +577,7 @@ protected List<ProvisioningResult> delete(\n                 result.setName(getName(before));\n                 result.setOperation(ResourceOperation.DELETE);\n                 result.setAnyType(provision.getAnyType().getKey());\n-                result.setStatus(ProvisioningResult.Status.SUCCESS);\n+                result.setStatus(ProvisioningReport.Status.SUCCESS);\n \n                 if (!profile.isDryRun()) {\n                     for (SyncActions action : profile.getActions()) {\n@@ -595,7 +595,7 @@ protected List<ProvisioningResult> delete(\n                     } catch (IgnoreProvisionException e) {\n                         throw e;\n                     } catch (Exception e) {\n-                        result.setStatus(ProvisioningResult.Status.FAILURE);\n+                        result.setStatus(ProvisioningReport.Status.FAILURE);\n                         result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n                         LOG.error(\"Could not delete {} {}\", provision.getAnyType().getKey(), key, e);\n                         output = e;\n@@ -621,22 +621,22 @@ protected List<ProvisioningResult> delete(\n         return delResults;\n     }\n \n-    private List<ProvisioningResult> ignore(\n+    private List<ProvisioningReport> ignore(\n             final SyncDelta delta,\n             final Provision provision,\n             final boolean matching)\n             throws JobExecutionException {\n \n         LOG.debug(\"Any to ignore {}\", delta.getObject().getUid().getUidValue());\n \n-        final List<ProvisioningResult> ignoreResults = new ArrayList<>();\n-        ProvisioningResult result = new ProvisioningResult();\n+        final List<ProvisioningReport> ignoreResults = new ArrayList<>();\n+        ProvisioningReport result = new ProvisioningReport();\n \n         result.setKey(null);\n         result.setName(delta.getObject().getUid().getUidValue());\n         result.setOperation(ResourceOperation.NONE);\n         result.setAnyType(provision.getAnyType().getKey());\n-        result.setStatus(ProvisioningResult.Status.SUCCESS);\n+        result.setStatus(ProvisioningReport.Status.SUCCESS);\n         ignoreResults.add(result);\n \n         if (!profile.isDryRun()) {"},{"sha":"75703b3bc338d032c5d5f122c07cf3a09955f44a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AnyObjectSyncResultHandlerImpl.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectSyncResultHandlerImpl.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.provisioning.api.ProvisioningManager;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n+import org.apache.syncope.core.provisioning.api.sync.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.sync.AnyObjectSyncResultHandler;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n \n@@ -81,11 +81,11 @@ protected WorkflowResult<Long> update(final AnyPatch patch) {\n     }\n \n     @Override\n-    protected AnyTO doCreate(final AnyTO anyTO, final SyncDelta delta, final ProvisioningResult result) {\n+    protected AnyTO doCreate(final AnyTO anyTO, final SyncDelta delta, final ProvisioningReport result) {\n         AnyObjectTO anyObjectTO = AnyObjectTO.class.cast(anyTO);\n \n         Map.Entry<Long, List<PropagationStatus>> created = anyObjectProvisioningManager.create(\n-                anyObjectTO, Collections.singleton(profile.getTask().getResource().getKey()));\n+                anyObjectTO, Collections.singleton(profile.getTask().getResource().getKey()), true);\n \n         result.setKey(created.getKey());\n         result.setName(getName(anyTO));\n@@ -98,11 +98,12 @@ protected AnyTO doUpdate(\n             final AnyTO before,\n             final AnyPatch anyPatch,\n             final SyncDelta delta,\n-            final ProvisioningResult result) {\n+            final ProvisioningReport result) {\n \n         AnyObjectPatch anyObjectPatch = AnyObjectPatch.class.cast(anyPatch);\n \n-        Map.Entry<Long, List<PropagationStatus>> updated = anyObjectProvisioningManager.update(anyObjectPatch);\n+        Map.Entry<Long, List<PropagationStatus>> updated =\n+                anyObjectProvisioningManager.update(anyObjectPatch, true);\n \n         AnyObjectTO after = anyObjectDataBinder.getAnyObjectTO(updated.getKey());\n         result.setName(getName(after));"},{"sha":"4032b23cf86618e1114296b75f7dc53b8d7db838","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/DBPasswordSyncActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDBPasswordSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDBPasswordSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDBPasswordSyncActions.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningProfile;\n-import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n+import org.apache.syncope.core.provisioning.api.sync.ProvisioningReport;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n@@ -128,7 +128,7 @@ public <A extends AnyTO> void after(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n             final A any,\n-            final ProvisioningResult result) throws JobExecutionException {\n+            final ProvisioningReport result) throws JobExecutionException {\n \n         if (any instanceof UserTO && encodedPassword != null && cipher != null) {\n             User syncopeUser = userDAO.find(any.getKey());"},{"sha":"bb75f66ddf1973c3c8631fc90b1943d3a5db41ad","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/DefaultPushActions.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultPushActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultPushActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultPushActions.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -21,7 +21,7 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.provisioning.api.sync.PushActions;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningProfile;\n-import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n+import org.apache.syncope.core.provisioning.api.sync.ProvisioningReport;\n import org.quartz.JobExecutionException;\n \n /**\n@@ -77,15 +77,15 @@ public void beforeAll(final ProvisioningProfile<?, ?> profile) throws JobExecuti\n \n     @Override\n     public <A extends Any<?, ?>> void onError(\n-            final ProvisioningProfile<?, ?> profile, final A any, final ProvisioningResult result,\n+            final ProvisioningProfile<?, ?> profile, final A any, final ProvisioningReport result,\n             final Exception error) throws JobExecutionException {\n \n         // do nothing\n     }\n \n     @Override\n     public <A extends Any<?, ?>> void after(\n-            final ProvisioningProfile<?, ?> profile, final A any, final ProvisioningResult result)\n+            final ProvisioningProfile<?, ?> profile, final A any, final ProvisioningReport result)\n             throws JobExecutionException {\n \n         // do nothing"},{"sha":"1612b6dc4a23f73a85ccc76034b9ee3c17893e88","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/DefaultSyncActions.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultSyncActions.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -22,7 +22,7 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.core.provisioning.api.sync.SyncActions;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningProfile;\n-import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n+import org.apache.syncope.core.provisioning.api.sync.ProvisioningReport;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.quartz.JobExecutionException;\n \n@@ -103,14 +103,14 @@ public <A extends AnyTO> SyncDelta beforeUnlink(\n \n     @Override\n     public void onError(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final ProvisioningResult result,\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final ProvisioningReport result,\n             final Exception error) throws JobExecutionException {\n     }\n \n     @Override\n     public <A extends AnyTO> void after(\n             final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any,\n-            final ProvisioningResult result)\n+            final ProvisioningReport result)\n             throws JobExecutionException {\n     }\n "},{"sha":"db05ccd8b2016254e307513ba4b87d4028e7e223","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/GroupSyncResultHandlerImpl.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -34,7 +34,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.provisioning.api.ProvisioningManager;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n+import org.apache.syncope.core.provisioning.api.sync.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.sync.GroupSyncResultHandler;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n \n@@ -90,11 +90,14 @@ protected WorkflowResult<Long> update(final AnyPatch patch) {\n     }\n \n     @Override\n-    protected AnyTO doCreate(final AnyTO anyTO, final SyncDelta delta, final ProvisioningResult result) {\n+    protected AnyTO doCreate(final AnyTO anyTO, final SyncDelta delta, final ProvisioningReport result) {\n         GroupTO groupTO = GroupTO.class.cast(anyTO);\n \n         Map.Entry<Long, List<PropagationStatus>> created = groupProvisioningManager.create(\n-                groupTO, groupOwnerMap, Collections.singleton(profile.getTask().getResource().getKey()));\n+                groupTO,\n+                groupOwnerMap,\n+                Collections.singleton(profile.getTask().getResource().getKey()),\n+                true);\n \n         result.setKey(created.getKey());\n         result.setName(getName(anyTO));\n@@ -107,11 +110,11 @@ protected AnyTO doUpdate(\n             final AnyTO before,\n             final AnyPatch anyPatch,\n             final SyncDelta delta,\n-            final ProvisioningResult result) {\n+            final ProvisioningReport result) {\n \n         GroupPatch groupPatch = GroupPatch.class.cast(anyPatch);\n \n-        Map.Entry<Long, List<PropagationStatus>> updated = groupProvisioningManager.update(groupPatch);\n+        Map.Entry<Long, List<PropagationStatus>> updated = groupProvisioningManager.update(groupPatch, true);\n \n         String groupOwner = null;\n         for (AttrPatch attrPatch : groupPatch.getPlainAttrs()) {"},{"sha":"ff81b02bc4014d48e2a7206e4392f0248f79081e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/LDAPMembershipSyncActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -46,7 +46,7 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningProfile;\n-import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n+import org.apache.syncope.core.provisioning.api.sync.ProvisioningReport;\n import org.apache.syncope.core.misc.AuditManager;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -317,7 +317,7 @@ public <A extends AnyTO> void after(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n             final A any,\n-            final ProvisioningResult result) throws JobExecutionException {\n+            final ProvisioningReport result) throws JobExecutionException {\n \n         if (!(profile.getTask() instanceof SyncTask)) {\n             return;"},{"sha":"3f0870479580116ce994ffde3ba7a75367392308","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/LDAPPasswordSyncActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPPasswordSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPPasswordSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPPasswordSyncActions.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningProfile;\n-import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n+import org.apache.syncope.core.provisioning.api.sync.ProvisioningReport;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n@@ -106,7 +106,7 @@ public <A extends AnyTO> void after(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n             final A any,\n-            final ProvisioningResult result) throws JobExecutionException {\n+            final ProvisioningReport result) throws JobExecutionException {\n \n         if (any instanceof UserTO && encodedPassword != null && cipher != null) {\n             User syncopeUser = userDAO.find(any.getKey());"},{"sha":"14ba28e7d527252e754873f81721230b0b71067a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/PlainAttrsSyncCorrelationRule.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPlainAttrsSyncCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPlainAttrsSyncCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPlainAttrsSyncCorrelationRule.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java.sync;\n \n-import static org.apache.syncope.core.misc.utils.MappingUtils.getMappingItemTransformers;\n-\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.List;\n@@ -66,7 +64,9 @@ public SearchCond getSearchCond(final ConnectorObject connObj) {\n             }\n \n             List<Object> values = attr.getValue();\n-            for (MappingItemTransformer transformer : getMappingItemTransformers(mappingItems.get(schema))) {\n+            for (MappingItemTransformer transformer\n+                    : MappingUtils.getMappingItemTransformers(mappingItems.get(schema))) {\n+\n                 values = transformer.beforeSync(values);\n             }\n "},{"sha":"530319e608c35717a06ac37b95b37585d044b94d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/UserSyncResultHandlerImpl.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.provisioning.api.ProvisioningManager;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n+import org.apache.syncope.core.provisioning.api.sync.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.sync.UserSyncResultHandler;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n \n@@ -83,13 +83,13 @@ protected WorkflowResult<Long> update(final AnyPatch patch) {\n     }\n \n     @Override\n-    protected AnyTO doCreate(final AnyTO anyTO, final SyncDelta delta, final ProvisioningResult result) {\n+    protected AnyTO doCreate(final AnyTO anyTO, final SyncDelta delta, final ProvisioningReport result) {\n         UserTO userTO = UserTO.class.cast(anyTO);\n \n         Boolean enabled = syncUtilities.readEnabled(delta.getObject(), profile.getTask());\n         Map.Entry<Long, List<PropagationStatus>> created =\n                 userProvisioningManager.create(userTO, true, true, enabled,\n-                        Collections.singleton(profile.getTask().getResource().getKey()));\n+                        Collections.singleton(profile.getTask().getResource().getKey()), true);\n \n         result.setKey(created.getKey());\n         result.setName(getName(anyTO));\n@@ -102,25 +102,26 @@ protected AnyTO doUpdate(\n             final AnyTO before,\n             final AnyPatch anyPatch,\n             final SyncDelta delta,\n-            final ProvisioningResult result) {\n+            final ProvisioningReport result) {\n \n         UserPatch userPatch = UserPatch.class.cast(anyPatch);\n         Boolean enabled = syncUtilities.readEnabled(delta.getObject(), profile.getTask());\n \n         Map.Entry<Long, List<PropagationStatus>> updated = userProvisioningManager.update(\n-                userPatch, before.getKey(),\n+                userPatch,\n                 result,\n                 enabled,\n-                Collections.singleton(profile.getTask().getResource().getKey()));\n+                Collections.singleton(profile.getTask().getResource().getKey()),\n+                true);\n \n         return getAnyTO(updated.getKey());\n     }\n \n     @Override\n     protected void doDelete(final AnyTypeKind kind, final Long key) {\n         try {\n-            userProvisioningManager.\n-                    delete(key, Collections.<String>singleton(profile.getTask().getResource().getKey()));\n+            userProvisioningManager.delete(\n+                    key, Collections.<String>singleton(profile.getTask().getResource().getKey()), true);\n         } catch (Exception e) {\n             // A propagation failure doesn't imply a synchronization failure.\n             // The propagation exception status will be reported into the propagation task execution."},{"sha":"b7e405d3484f9d424bc5e4b497f90e33bc575aa8","filename":"core/provisioning-java/src/main/resources/provisioning.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -15,6 +15,10 @@\n # specific language governing permissions and limitations\n # under the License.\n asyncConnectorFacadeExecutor.poolSize=10\n+\n+# see http://docs.spring.io/spring/docs/current/spring-framework-reference/html/scheduling.html#scheduling-task-namespace-executor\n+propagationTaskExecutorAsyncExecutor.poolSize=5-25\n+propagationTaskExecutorAsyncExecutor.queueCapacity=100\n propagationTaskExecutor=org.apache.syncope.core.provisioning.java.propagation.PriorityPropagationTaskExecutor\n \n userProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultUserProvisioningManager"},{"sha":"333f2026542347452b5ee29f94c44c5f00d39faa","filename":"core/provisioning-java/src/main/resources/provisioningContext.xml","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -32,8 +32,14 @@ under the License.\n \n   <!-- Used by AsyncConnectorFacade -->\n   <task:annotation-driven executor=\"AsyncConnectorFacadeExecutor\"/>\n-  <task:executor id=\"AsyncConnectorFacadeExecutor\" pool-size=\"${asyncConnectorFacadeExecutor.poolSize}\"/>\n-  \n+  <task:executor id=\"AsyncConnectorFacadeExecutor\"\n+                 pool-size=\"${asyncConnectorFacadeExecutor.poolSize}\"/>\n+\n+  <!-- Used by PriorityPropagationTaskExecutor -->\n+  <task:executor id=\"propagationTaskExecutorAsyncExecutor\"\n+                 pool-size=\"${propagationTaskExecutorAsyncExecutor.poolSize}\"\n+                 queue-capacity=\"${propagationTaskExecutorAsyncExecutor.queueCapacity}\"\n+                 rejection-policy=\"ABORT\"/>\n   <bean class=\"${propagationTaskExecutor}\"/>\n   \n   <bean class=\"${userProvisioningManager}\"/>\n@@ -60,7 +66,7 @@ under the License.\n   </bean>\n \n   <bean id=\"scheduler\" class=\"org.springframework.scheduling.quartz.SchedulerFactoryBean\"\n-        lazy-init=\"false\" depends-on=\"quartzDataSourceInit\">\n+      lazy-init=\"false\" depends-on=\"quartzDataSourceInit\">\n     <property name=\"autoStartup\" value=\"true\"/>\n     <property name=\"applicationContextSchedulerContextKey\" value=\"applicationContext\"/>\n     <property name=\"waitForJobsToCompleteOnShutdown\" value=\"true\"/>"},{"sha":"1558267bdf0d5352e061d5460beb2d8392991206","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/AddETagFilter.java","status":"modified","additions":13,"deletions":5,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAddETagFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAddETagFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAddETagFilter.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -27,6 +27,7 @@\n import javax.ws.rs.ext.Provider;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.AbstractAnnotatedBean;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n \n /**\n  * Adds the <tt>ETag</tt> header to any response containing an instance of {@link AbstractAnnotatedBean} as entity.\n@@ -37,11 +38,18 @@ public class AddETagFilter implements ContainerResponseFilter {\n \n     @Override\n     public void filter(final ContainerRequestContext reqCtx, final ContainerResponseContext resCtx) throws IOException {\n-        if (resCtx.getEntity() instanceof AbstractAnnotatedBean && resCtx.getEntityTag() == null) {\n-            AbstractAnnotatedBean sysInfo = (AbstractAnnotatedBean) resCtx.getEntity();\n-            String etagValue = sysInfo.getETagValue();\n-            if (StringUtils.isNotBlank(etagValue)) {\n-                resCtx.getHeaders().add(HttpHeaders.ETAG, new EntityTag(etagValue).toString());\n+        if (resCtx.getEntityTag() == null) {\n+            AbstractAnnotatedBean annotated = null;\n+            if (resCtx.getEntity() instanceof AbstractAnnotatedBean) {\n+                annotated = (AbstractAnnotatedBean) resCtx.getEntity();\n+            } else if (resCtx.getEntity() instanceof ProvisioningResult) {\n+                annotated = ((ProvisioningResult<?>) resCtx.getEntity()).getAny();\n+            }\n+            if (annotated != null) {\n+                String etagValue = annotated.getETagValue();\n+                if (StringUtils.isNotBlank(etagValue)) {\n+                    resCtx.getHeaders().add(HttpHeaders.ETAG, new EntityTag(etagValue).toString());\n+                }\n             }\n         }\n     }"},{"sha":"97f2876619e38768df4cbbba53ba41404a5139d6","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":34,"deletions":25,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -36,6 +36,7 @@\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n@@ -156,8 +157,8 @@ public String transform(final String input) {\n \n     @Override\n     public Response create(final TO anyTO) {\n-        TO created = getAnyLogic().create(anyTO);\n-        return createResponse(created.getKey(), created);\n+        ProvisioningResult<TO> created = getAnyLogic().create(anyTO, isNullPriorityAsync());\n+        return createResponse(created);\n     }\n \n     @Override\n@@ -166,7 +167,7 @@ public Response update(final P anyPatch) {\n \n         checkETag(any.getETagValue());\n \n-        TO updated = getAnyLogic().update(anyPatch);\n+        ProvisioningResult<TO> updated = getAnyLogic().update(anyPatch, isNullPriorityAsync());\n         return modificationResponse(updated);\n     }\n \n@@ -197,7 +198,6 @@ private void addUpdateOrReplaceAttr(\n     }\n \n     @Override\n-    @SuppressWarnings(\"unchecked\")\n     public Response update(final Long key, final SchemaType schemaType, final AttrTO attrTO) {\n         addUpdateOrReplaceAttr(key, schemaType, attrTO, PatchOperation.ADD_REPLACE);\n         return modificationResponse(read(key, schemaType, attrTO.getSchema()));\n@@ -209,8 +209,8 @@ public Response update(final TO anyTO) {\n \n         checkETag(before.getETagValue());\n \n-        @SuppressWarnings(\"unchecked\")\n-        TO updated = getAnyLogic().update((P) AnyOperations.diff(anyTO, before, false));\n+        ProvisioningResult<TO> updated =\n+                getAnyLogic().update(AnyOperations.<TO, P>diff(anyTO, before, false), isNullPriorityAsync());\n         return modificationResponse(updated);\n     }\n \n@@ -225,7 +225,7 @@ public Response delete(final Long key) {\n \n         checkETag(group.getETagValue());\n \n-        TO deleted = getAnyLogic().delete(key);\n+        ProvisioningResult<TO> deleted = getAnyLogic().delete(key, isNullPriorityAsync());\n         return modificationResponse(deleted);\n     }\n \n@@ -235,35 +235,37 @@ public Response deassociate(final DeassociationPatch patch) {\n \n         checkETag(any.getETagValue());\n \n-        TO updated;\n+        ProvisioningResult<TO> updated;\n         switch (patch.getAction()) {\n             case UNLINK:\n-                updated = getAnyLogic().unlink(patch.getKey(), patch.getResources());\n+                updated = new ProvisioningResult<>();\n+                updated.setAny(getAnyLogic().unlink(patch.getKey(), patch.getResources()));\n                 break;\n \n             case UNASSIGN:\n-                updated = getAnyLogic().unassign(patch.getKey(), patch.getResources());\n+                updated = getAnyLogic().unassign(patch.getKey(), patch.getResources(), isNullPriorityAsync());\n                 break;\n \n             case DEPROVISION:\n-                updated = getAnyLogic().deprovision(patch.getKey(), patch.getResources());\n+                updated = getAnyLogic().deprovision(patch.getKey(), patch.getResources(), isNullPriorityAsync());\n                 break;\n \n             default:\n-                updated = getAnyLogic().read(patch.getKey());\n+                updated = new ProvisioningResult<>();\n+                updated.setAny(getAnyLogic().read(patch.getKey()));\n         }\n \n         BulkActionResult result = new BulkActionResult();\n \n         if (patch.getAction() == ResourceDeassociationAction.UNLINK) {\n             for (String resource : patch.getResources()) {\n                 result.getResults().put(resource,\n-                        updated.getResources().contains(resource)\n+                        updated.getAny().getResources().contains(resource)\n                                 ? BulkActionResult.Status.FAILURE\n                                 : BulkActionResult.Status.SUCCESS);\n             }\n         } else {\n-            for (PropagationStatus propagationStatusTO : updated.getPropagationStatusTOs()) {\n+            for (PropagationStatus propagationStatusTO : updated.getPropagationStatuses()) {\n                 result.getResults().put(propagationStatusTO.getResource(),\n                         BulkActionResult.Status.valueOf(propagationStatusTO.getStatus().toString()));\n             }\n@@ -278,45 +280,49 @@ public Response associate(final AssociationPatch patch) {\n \n         checkETag(any.getETagValue());\n \n-        TO updated;\n+        ProvisioningResult<TO> updated;\n         switch (patch.getAction()) {\n             case LINK:\n-                updated = getAnyLogic().link(\n+                updated = new ProvisioningResult<>();\n+                updated.setAny(getAnyLogic().link(\n                         patch.getKey(),\n-                        patch.getResources());\n+                        patch.getResources()));\n                 break;\n \n             case ASSIGN:\n                 updated = getAnyLogic().assign(\n                         patch.getKey(),\n                         patch.getResources(),\n                         patch.getValue() != null,\n-                        patch.getValue());\n+                        patch.getValue(),\n+                        isNullPriorityAsync());\n                 break;\n \n             case PROVISION:\n                 updated = getAnyLogic().provision(\n                         patch.getKey(),\n                         patch.getResources(),\n                         patch.getValue() != null,\n-                        patch.getValue());\n+                        patch.getValue(),\n+                        isNullPriorityAsync());\n                 break;\n \n             default:\n-                updated = getAnyLogic().read(patch.getKey());\n+                updated = new ProvisioningResult<>();\n+                updated.setAny(getAnyLogic().read(patch.getKey()));\n         }\n \n         BulkActionResult result = new BulkActionResult();\n \n         if (patch.getAction() == ResourceAssociationAction.LINK) {\n             for (String resource : patch.getResources()) {\n                 result.getResults().put(resource,\n-                        updated.getResources().contains(resource)\n+                        updated.getAny().getResources().contains(resource)\n                                 ? BulkActionResult.Status.FAILURE\n                                 : BulkActionResult.Status.SUCCESS);\n             }\n         } else {\n-            for (PropagationStatus propagationStatusTO : updated.getPropagationStatusTOs()) {\n+            for (PropagationStatus propagationStatusTO : updated.getPropagationStatuses()) {\n                 result.getResults().put(propagationStatusTO.getResource(),\n                         BulkActionResult.Status.valueOf(propagationStatusTO.getStatus().toString()));\n             }\n@@ -336,7 +342,8 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n                 for (String key : bulkAction.getTargets()) {\n                     try {\n                         result.getResults().put(\n-                                String.valueOf(logic.delete(Long.valueOf(key)).getKey()),\n+                                String.valueOf(logic.delete(Long.valueOf(key), isNullPriorityAsync()).\n+                                        getAny().getKey()),\n                                 BulkActionResult.Status.SUCCESS);\n                     } catch (Exception e) {\n                         LOG.error(\"Error performing delete for user {}\", key, e);\n@@ -353,7 +360,8 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n                         statusPatch.setType(StatusPatchType.SUSPEND);\n                         try {\n                             result.getResults().put(\n-                                    String.valueOf(((UserLogic) logic).status(statusPatch).getKey()),\n+                                    String.valueOf(((UserLogic) logic).\n+                                            status(statusPatch, isNullPriorityAsync()).getAny().getKey()),\n                                     BulkActionResult.Status.SUCCESS);\n                         } catch (Exception e) {\n                             LOG.error(\"Error performing suspend for user {}\", key, e);\n@@ -370,7 +378,8 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n                     statusPatch.setType(StatusPatchType.REACTIVATE);\n                     try {\n                         result.getResults().put(\n-                                String.valueOf(((UserLogic) logic).status(statusPatch).getKey()),\n+                                String.valueOf(((UserLogic) logic).\n+                                        status(statusPatch, isNullPriorityAsync()).getAny().getKey()),\n                                 BulkActionResult.Status.SUCCESS);\n                     } catch (Exception e) {\n                         LOG.error(\"Error performing reactivate for user {}\", key, e);"},{"sha":"85f035f0f67237a60ead97d12e55a2e1fbabde60","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java","status":"modified","additions":18,"deletions":12,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -28,6 +28,7 @@\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.UriBuilder;\n import javax.ws.rs.core.UriInfo;\n+import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n import org.apache.cxf.jaxrs.ext.search.SearchBean;\n@@ -36,6 +37,7 @@\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n import org.apache.syncope.common.rest.api.Preference;\n@@ -61,27 +63,31 @@ abstract class AbstractServiceImpl implements JAXRSService {\n     @Context\n     protected SearchContext searchContext;\n \n+    protected boolean isNullPriorityAsync() {\n+        return BooleanUtils.toBoolean(messageContext.getHttpHeaders().getHeaderString(RESTHeaders.NULL_PRIORITY_ASYNC));\n+    }\n+\n     /**\n-     * Reads <tt>Prefer</tt> header from request and parses into a <tt>Preference</tt> instance.\n+     * Reads {@code Prefer} header from request and parses into a {@code Preference} instance.\n      *\n-     * @return a <tt>Preference</tt> instance matching the passed <tt>Prefer</tt> header,\n-     * or <tt>Preference.NONE</tt> if missing.\n+     * @return a {@code Preference} instance matching the passed {@code Prefer} header,\n+     * or {@code Preference.NONE} if missing.\n      */\n     protected Preference getPreference() {\n         return Preference.fromString(messageContext.getHttpHeaders().getHeaderString(RESTHeaders.PREFER));\n     }\n \n     /**\n-     * Builds response to successful <tt>create</tt> request, taking into account any <tt>Prefer</tt> header.\n+     * Builds response to successful {@code create} request, taking into account any {@code Prefer} header.\n      *\n-     * @param id identifier of the created entity\n-     * @param entity the entity just created\n-     * @return response to successful <tt>create</tt> request\n+     * @param provisioningResult the entity just created\n+     * @return response to successful {@code create} request\n      */\n-    protected Response createResponse(final Object id, final Object entity) {\n+    protected Response createResponse(final ProvisioningResult<?> provisioningResult) {\n+        String entityId = String.valueOf(provisioningResult.getAny().getKey());\n         Response.ResponseBuilder builder = Response.\n-                created(uriInfo.getAbsolutePathBuilder().path(String.valueOf(id)).build()).\n-                header(RESTHeaders.RESOURCE_KEY, id);\n+                created(uriInfo.getAbsolutePathBuilder().path(entityId).build()).\n+                header(RESTHeaders.RESOURCE_KEY, entityId);\n \n         switch (getPreference()) {\n             case RETURN_NO_CONTENT:\n@@ -90,7 +96,7 @@ protected Response createResponse(final Object id, final Object entity) {\n             case RETURN_CONTENT:\n             case NONE:\n             default:\n-                builder = builder.entity(entity);\n+                builder = builder.entity(provisioningResult);\n                 break;\n \n         }\n@@ -102,7 +108,7 @@ protected Response createResponse(final Object id, final Object entity) {\n     }\n \n     /**\n-     * Builds response to successful modification request, taking into account any <tt>Prefer</tt> header.\n+     * Builds response to successful modification request, taking into account any {@code Prefer} header.\n      *\n      * @param entity the entity just modified\n      * @return response to successful modification request"},{"sha":"a7e88d3128580c72481c9e539924d2a2f89082a0","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -148,11 +148,11 @@ public BulkActionResult bulkDeassociation(final ResourceDeassociationPatch patch\n             try {\n                 switch (patch.getAction()) {\n                     case DEPROVISION:\n-                        associator.deprovision(anyKey, resources);\n+                        associator.deprovision(anyKey, resources, isNullPriorityAsync());\n                         break;\n \n                     case UNASSIGN:\n-                        associator.unassign(anyKey, resources);\n+                        associator.unassign(anyKey, resources, isNullPriorityAsync());\n                         break;\n \n                     case UNLINK:"},{"sha":"3ccfd8255b3890d74e1eef66631e81801743d770","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserSelfServiceImpl.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -23,6 +23,7 @@\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -49,8 +50,8 @@ public Response create(final UserTO userTO, final boolean storePassword) {\n             throw sce;\n         }\n \n-        UserTO created = logic.selfCreate(userTO, storePassword);\n-        return createResponse(created.getKey(), created);\n+        ProvisioningResult<UserTO> created = logic.selfCreate(userTO, storePassword, isNullPriorityAsync());\n+        return createResponse(created);\n     }\n \n     @Override\n@@ -65,7 +66,7 @@ public Response read() {\n \n     @Override\n     public Response update(final UserPatch patch) {\n-        UserTO updated = logic.selfUpdate(patch);\n+        ProvisioningResult<UserTO> updated = logic.selfUpdate(patch, isNullPriorityAsync());\n         return modificationResponse(updated);\n     }\n \n@@ -77,13 +78,13 @@ public Response update(final UserTO user) {\n \n     @Override\n     public Response delete() {\n-        UserTO deleted = logic.selfDelete();\n+        ProvisioningResult<UserTO> deleted = logic.selfDelete(isNullPriorityAsync());\n         return modificationResponse(deleted);\n     }\n \n     @Override\n     public Response changePassword(final String password) {\n-        UserTO updated = logic.changePassword(password);\n+        ProvisioningResult<UserTO> updated = logic.changePassword(password, isNullPriorityAsync());\n         return modificationResponse(updated);\n     }\n "},{"sha":"0f62925174c43e2bf9d49daa43469138e7d68981","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserServiceImpl.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -22,6 +22,7 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.patch.StatusPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.UserService;\n@@ -64,8 +65,8 @@ public Response getUserKey(final String username) {\n \n     @Override\n     public Response create(final UserTO userTO, final boolean storePassword) {\n-        UserTO created = logic.create(userTO, storePassword);\n-        return createResponse(created.getKey(), created);\n+        ProvisioningResult<UserTO> created = logic.create(userTO, storePassword, isNullPriorityAsync());\n+        return createResponse(created);\n     }\n \n     @Override\n@@ -74,7 +75,7 @@ public Response status(final StatusPatch statusPatch) {\n \n         checkETag(user.getETagValue());\n \n-        UserTO updated = logic.status(statusPatch);\n+        ProvisioningResult<UserTO> updated = logic.status(statusPatch, isNullPriorityAsync());\n         return modificationResponse(updated);\n     }\n }"},{"sha":"3e2f9f8c1bbef326f6117abc205cf8ee0d8e5786","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelAnyObjectProvisioningManager.java","status":"modified","additions":24,"deletions":13,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelAnyObjectProvisioningManager.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -36,19 +36,20 @@\n         extends AbstractCamelProvisioningManager implements AnyObjectProvisioningManager {\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> create(final AnyObjectTO any) {\n-        return create(any, Collections.<String>emptySet());\n+    public Pair<Long, List<PropagationStatus>> create(final AnyObjectTO any, final boolean nullPriorityAsync) {\n+        return create(any, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public Pair<Long, List<PropagationStatus>> create(\n-            final AnyObjectTO anyObjectTO, final Set<String> excludedResources) {\n+            final AnyObjectTO anyObjectTO, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n \n         PollingConsumer pollingConsumer = getConsumer(\"direct:createAnyObjectPort\");\n \n         Map<String, Object> props = new HashMap<>();\n         props.put(\"excludedResources\", excludedResources);\n+        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n         sendMessage(\"direct:createAnyObject\", anyObjectTO, props);\n \n@@ -62,19 +63,20 @@ public Pair<Long, List<PropagationStatus>> create(\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> update(final AnyObjectPatch anyPatch) {\n-        return update(anyPatch, Collections.<String>emptySet());\n+    public Pair<Long, List<PropagationStatus>> update(final AnyObjectPatch anyPatch, final boolean nullPriorityAsync) {\n+        return update(anyPatch, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public Pair<Long, List<PropagationStatus>> update(\n-            final AnyObjectPatch anyPatch, final Set<String> excludedResources) {\n+            final AnyObjectPatch anyPatch, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n \n         PollingConsumer pollingConsumer = getConsumer(\"direct:updateAnyObjectPort\");\n \n         Map<String, Object> props = new HashMap<>();\n         props.put(\"excludedResources\", excludedResources);\n+        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n         sendMessage(\"direct:updateAnyObject\", anyPatch, props);\n \n@@ -88,19 +90,22 @@ public Pair<Long, List<PropagationStatus>> update(\n     }\n \n     @Override\n-    public List<PropagationStatus> delete(final Long anyObjectObjectKey) {\n-        return delete(anyObjectObjectKey, Collections.<String>emptySet());\n+    public List<PropagationStatus> delete(final Long anyObjectObjectKey, final boolean nullPriorityAsync) {\n+        return delete(anyObjectObjectKey, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public List<PropagationStatus> delete(final Long anyObjectKey, final Set<String> excludedResources) {\n+    public List<PropagationStatus> delete(\n+            final Long key, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n+\n         PollingConsumer pollingConsumer = getConsumer(\"direct:deleteAnyObjectPort\");\n \n         Map<String, Object> props = new HashMap<>();\n         props.put(\"excludedResources\", excludedResources);\n+        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n-        sendMessage(\"direct:deleteAnyObject\", anyObjectKey, props);\n+        sendMessage(\"direct:deleteAnyObject\", key, props);\n \n         Exchange exchange = pollingConsumer.receive();\n \n@@ -143,11 +148,14 @@ public Long link(final AnyObjectPatch anyObjectPatch) {\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public List<PropagationStatus> provision(final Long key, final Collection<String> resources) {\n+    public List<PropagationStatus> provision(\n+            final Long key, final Collection<String> resources, final boolean nullPriorityAsync) {\n+\n         PollingConsumer pollingConsumer = getConsumer(\"direct:provisionAnyObjectPort\");\n \n         Map<String, Object> props = new HashMap<>();\n         props.put(\"resources\", resources);\n+        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n         sendMessage(\"direct:provisionAnyObject\", key, props);\n \n@@ -162,13 +170,16 @@ public List<PropagationStatus> provision(final Long key, final Collection<String\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public List<PropagationStatus> deprovision(final Long anyObjectKey, final Collection<String> resources) {\n+    public List<PropagationStatus> deprovision(\n+            final Long key, final Collection<String> resources, final boolean nullPriorityAsync) {\n+\n         PollingConsumer pollingConsumer = getConsumer(\"direct:deprovisionAnyObjectPort\");\n \n         Map<String, Object> props = new HashMap<>();\n         props.put(\"resources\", resources);\n+        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n-        sendMessage(\"direct:deprovisionAnyObject\", anyObjectKey, props);\n+        sendMessage(\"direct:deprovisionAnyObject\", key, props);\n \n         Exchange exchange = pollingConsumer.receive();\n "},{"sha":"7cdf9d133dcce256db8fd0239841897f4399f480","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelGroupProvisioningManager.java","status":"modified","additions":31,"deletions":14,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -36,17 +36,20 @@\n         extends AbstractCamelProvisioningManager implements GroupProvisioningManager {\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> create(final GroupTO any) {\n-        return create(any, Collections.<String>emptySet());\n+    public Pair<Long, List<PropagationStatus>> create(final GroupTO any, final boolean nullPriorityAsync) {\n+        return create(any, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Pair<Long, List<PropagationStatus>> create(final GroupTO groupTO, final Set<String> excludedResources) {\n+    public Pair<Long, List<PropagationStatus>> create(\n+            final GroupTO groupTO, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n+\n         PollingConsumer pollingConsumer = getConsumer(\"direct:createGroupPort\");\n \n         Map<String, Object> props = new HashMap<>();\n         props.put(\"excludedResources\", excludedResources);\n+        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n         sendMessage(\"direct:createGroup\", groupTO, props);\n \n@@ -61,14 +64,18 @@ public Pair<Long, List<PropagationStatus>> create(final GroupTO groupTO, final S\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Pair<Long, List<PropagationStatus>> create(final GroupTO groupTO, final Map<Long, String> groupOwnerMap,\n-            final Set<String> excludedResources) {\n+    public Pair<Long, List<PropagationStatus>> create(\n+            final GroupTO groupTO,\n+            final Map<Long, String> groupOwnerMap,\n+            final Set<String> excludedResources,\n+            final boolean nullPriorityAsync) {\n \n         PollingConsumer pollingConsumer = getConsumer(\"direct:createGroupInSyncPort\");\n \n         Map<String, Object> props = new HashMap<>();\n         props.put(\"groupOwnerMap\", groupOwnerMap);\n         props.put(\"excludedResources\", excludedResources);\n+        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n         sendMessage(\"direct:createGroupInSync\", groupTO, props);\n \n@@ -82,19 +89,20 @@ public Pair<Long, List<PropagationStatus>> create(final GroupTO groupTO, final M\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> update(final GroupPatch anyPatch) {\n-        return update(anyPatch, Collections.<String>emptySet());\n+    public Pair<Long, List<PropagationStatus>> update(final GroupPatch anyPatch, final boolean nullPriorityAsync) {\n+        return update(anyPatch, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public Pair<Long, List<PropagationStatus>> update(\n-            final GroupPatch anyPatch, final Set<String> excludedResources) {\n+            final GroupPatch anyPatch, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n \n         PollingConsumer pollingConsumer = getConsumer(\"direct:updateGroupPort\");\n \n         Map<String, Object> props = new HashMap<>();\n         props.put(\"excludedResources\", excludedResources);\n+        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n         sendMessage(\"direct:updateGroup\", anyPatch, props);\n \n@@ -108,19 +116,22 @@ public Pair<Long, List<PropagationStatus>> update(\n     }\n \n     @Override\n-    public List<PropagationStatus> delete(final Long groupObjectKey) {\n-        return delete(groupObjectKey, Collections.<String>emptySet());\n+    public List<PropagationStatus> delete(final Long key, final boolean nullPriorityAsync) {\n+        return delete(key, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public List<PropagationStatus> delete(final Long groupKey, final Set<String> excludedResources) {\n+    public List<PropagationStatus> delete(\n+            final Long key, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n+\n         PollingConsumer pollingConsumer = getConsumer(\"direct:deleteGroupPort\");\n \n         Map<String, Object> props = new HashMap<>();\n         props.put(\"excludedResources\", excludedResources);\n+        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n-        sendMessage(\"direct:deleteGroup\", groupKey, props);\n+        sendMessage(\"direct:deleteGroup\", key, props);\n \n         Exchange exchange = pollingConsumer.receive();\n \n@@ -163,11 +174,14 @@ public Long link(final GroupPatch groupPatch) {\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public List<PropagationStatus> provision(final Long key, final Collection<String> resources) {\n+    public List<PropagationStatus> provision(\n+            final Long key, final Collection<String> resources, final boolean nullPriorityAsync) {\n+\n         PollingConsumer pollingConsumer = getConsumer(\"direct:provisionGroupPort\");\n \n         Map<String, Object> props = new HashMap<>();\n         props.put(\"resources\", resources);\n+        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n         sendMessage(\"direct:provisionGroup\", key, props);\n \n@@ -182,11 +196,14 @@ public List<PropagationStatus> provision(final Long key, final Collection<String\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public List<PropagationStatus> deprovision(final Long key, final Collection<String> resources) {\n+    public List<PropagationStatus> deprovision(\n+            final Long key, final Collection<String> resources, final boolean nullPriorityAsync) {\n+\n         PollingConsumer pollingConsumer = getConsumer(\"direct:deprovisionGroupPort\");\n \n         Map<String, Object> props = new HashMap<>();\n         props.put(\"resources\", resources);\n+        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n         sendMessage(\"direct:deprovisionGroup\", key, props);\n "},{"sha":"1a918a521f522d2c3664ea3b134c85b56ae1cd25","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelUserProvisioningManager.java","status":"modified","additions":73,"deletions":33,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -36,7 +36,7 @@\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n+import org.apache.syncope.core.provisioning.api.sync.ProvisioningReport;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -45,24 +45,33 @@ public class CamelUserProvisioningManager extends AbstractCamelProvisioningManag\n     private static final Logger LOG = LoggerFactory.getLogger(CamelUserProvisioningManager.class);\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> create(final UserTO userTO) {\n-        return create(userTO, true, false, null, Collections.<String>emptySet());\n+    public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final boolean nullPriorityAsync) {\n+        return create(userTO, true, false, null, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final boolean storePassword) {\n-        return create(userTO, storePassword, false, null, Collections.<String>emptySet());\n+    public Pair<Long, List<PropagationStatus>> create(\n+            final UserTO userTO, final boolean storePassword, final boolean nullPriorityAsync) {\n+\n+        return create(userTO, storePassword, false, null, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final Set<String> excludedResources) {\n-        return create(userTO, false, false, null, excludedResources);\n+    public Pair<Long, List<PropagationStatus>> create(\n+            final UserTO userTO, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n+\n+        return create(userTO, false, false, null, excludedResources, nullPriorityAsync);\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final boolean storePassword,\n-            final boolean disablePwdPolicyCheck, final Boolean enabled, final Set<String> excludedResources) {\n+    public Pair<Long, List<PropagationStatus>> create(\n+            final UserTO userTO,\n+            final boolean storePassword,\n+            final boolean disablePwdPolicyCheck,\n+            final Boolean enabled,\n+            final Set<String> excludedResources,\n+            final boolean nullPriorityAsync) {\n \n         PollingConsumer pollingConsumer = getConsumer(\"direct:createPort\");\n \n@@ -71,6 +80,7 @@ public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final boo\n         props.put(\"disablePwdPolicyCheck\", disablePwdPolicyCheck);\n         props.put(\"enabled\", enabled);\n         props.put(\"excludedResources\", excludedResources);\n+        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n         sendMessage(\"direct:createUser\", userTO, props);\n \n@@ -85,10 +95,13 @@ public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final boo\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Pair<Long, List<PropagationStatus>> update(final UserPatch userPatch) {\n+    public Pair<Long, List<PropagationStatus>> update(final UserPatch userPatch, final boolean nullPriorityAsync) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:updatePort\");\n \n-        sendMessage(\"direct:updateUser\", userPatch);\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n+\n+        sendMessage(\"direct:updateUser\", userPatch, props);\n \n         Exchange exchange = pollingConsumer.receive();\n \n@@ -100,24 +113,29 @@ public Pair<Long, List<PropagationStatus>> update(final UserPatch userPatch) {\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> update(final UserPatch anyPatch, final Set<String> excludedResources) {\n-        return update(anyPatch, anyPatch.getKey(), new ProvisioningResult(), null, excludedResources);\n+    public Pair<Long, List<PropagationStatus>> update(\n+            final UserPatch anyPatch, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n+\n+        return update(anyPatch, new ProvisioningReport(), null, excludedResources, nullPriorityAsync);\n     }\n \n     @Override\n-    public List<PropagationStatus> delete(final Long userKey) {\n-        return delete(userKey, Collections.<String>emptySet());\n+    public List<PropagationStatus> delete(final Long key, final boolean nullPriorityAsync) {\n+        return delete(key, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public List<PropagationStatus> delete(final Long userKey, final Set<String> excludedResources) {\n+    public List<PropagationStatus> delete(\n+            final Long key, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n+\n         PollingConsumer pollingConsumer = getConsumer(\"direct:deletePort\");\n \n         Map<String, Object> props = new HashMap<>();\n         props.put(\"excludedResources\", excludedResources);\n+        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n-        sendMessage(\"direct:deleteUser\", userKey, props);\n+        sendMessage(\"direct:deleteUser\", key, props);\n \n         Exchange exchange = pollingConsumer.receive();\n \n@@ -146,13 +164,16 @@ public Long unlink(final UserPatch userPatch) {\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Pair<Long, List<PropagationStatus>> activate(final StatusPatch statusPatch) {\n+    public Pair<Long, List<PropagationStatus>> activate(\n+            final StatusPatch statusPatch, final boolean nullPriorityAsync) {\n+\n         PollingConsumer pollingConsumer = getConsumer(\"direct:statusPort\");\n \n         Map<String, Object> props = new HashMap<>();\n         props.put(\"token\", statusPatch.getToken());\n-        props.put(\"userKey\", statusPatch.getKey());\n+        props.put(\"key\", statusPatch.getKey());\n         props.put(\"statusPatch\", statusPatch);\n+        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n         if (statusPatch.isOnSyncope()) {\n             sendMessage(\"direct:activateUser\", statusPatch.getKey(), props);\n@@ -173,12 +194,15 @@ public Pair<Long, List<PropagationStatus>> activate(final StatusPatch statusPatc\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Pair<Long, List<PropagationStatus>> reactivate(final StatusPatch statusPatch) {\n+    public Pair<Long, List<PropagationStatus>> reactivate(\n+            final StatusPatch statusPatch, final boolean nullPriorityAsync) {\n+\n         PollingConsumer pollingConsumer = getConsumer(\"direct:statusPort\");\n \n         Map<String, Object> props = new HashMap<>();\n-        props.put(\"userKey\", statusPatch.getKey());\n+        props.put(\"key\", statusPatch.getKey());\n         props.put(\"statusPatch\", statusPatch);\n+        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n         if (statusPatch.isOnSyncope()) {\n             sendMessage(\"direct:reactivateUser\", statusPatch.getKey(), props);\n@@ -199,12 +223,15 @@ public Pair<Long, List<PropagationStatus>> reactivate(final StatusPatch statusPa\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Pair<Long, List<PropagationStatus>> suspend(final StatusPatch statusPatch) {\n+    public Pair<Long, List<PropagationStatus>> suspend(\n+            final StatusPatch statusPatch, final boolean nullPriorityAsync) {\n+\n         PollingConsumer pollingConsumer = getConsumer(\"direct:statusPort\");\n \n         Map<String, Object> props = new HashMap<>();\n-        props.put(\"userKey\", statusPatch.getKey());\n+        props.put(\"key\", statusPatch.getKey());\n         props.put(\"statusPatch\", statusPatch);\n+        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n         if (statusPatch.isOnSyncope()) {\n             sendMessage(\"direct:suspendUser\", statusPatch.getKey(), props);\n@@ -242,7 +269,11 @@ public Long link(final UserPatch anyPatch) {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public List<PropagationStatus> provision(\n-            final Long key, final boolean changePwd, final String password, final Collection<String> resources) {\n+            final Long key,\n+            final boolean changePwd,\n+            final String password,\n+            final Collection<String> resources,\n+            final boolean nullPriorityAsync) {\n \n         PollingConsumer pollingConsumer = getConsumer(\"direct:provisionPort\");\n \n@@ -251,6 +282,7 @@ public List<PropagationStatus> provision(\n         props.put(\"changePwd\", changePwd);\n         props.put(\"password\", password);\n         props.put(\"resources\", resources);\n+        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n         sendMessage(\"direct:provisionUser\", key, props);\n \n@@ -265,11 +297,14 @@ public List<PropagationStatus> provision(\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public List<PropagationStatus> deprovision(final Long user, final Collection<String> resources) {\n+    public List<PropagationStatus> deprovision(\n+            final Long user, final Collection<String> resources, final boolean nullPriorityAsync) {\n+\n         PollingConsumer pollingConsumer = getConsumer(\"direct:deprovisionPort\");\n \n         Map<String, Object> props = new HashMap<>();\n         props.put(\"resources\", resources);\n+        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n         sendMessage(\"direct:deprovisionUser\", user, props);\n \n@@ -285,26 +320,31 @@ public List<PropagationStatus> deprovision(final Long user, final Collection<Str\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public Pair<Long, List<PropagationStatus>> update(\n-            final UserPatch userPatch, final Long key, final ProvisioningResult result,\n-            final Boolean enabled, final Set<String> excludedResources) {\n+            final UserPatch userPatch,\n+            final ProvisioningReport result,\n+            final Boolean enabled,\n+            final Set<String> excludedResources,\n+            final boolean nullPriorityAsync) {\n \n         PollingConsumer pollingConsumer = getConsumer(\"direct:updateInSyncPort\");\n \n         Map<String, Object> props = new HashMap<>();\n-        props.put(\"userKey\", key);\n+        props.put(\"key\", userPatch.getKey());\n         props.put(\"result\", result);\n         props.put(\"enabled\", enabled);\n         props.put(\"excludedResources\", excludedResources);\n+        props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n         sendMessage(\"direct:updateUserInSync\", userPatch, props);\n \n         Exchange exchange = pollingConsumer.receive();\n \n         Exception ex = (Exception) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n         if (ex != null) {\n-            LOG.error(\"Update of user {} failed, trying to sync its status anyway (if configured)\", key, ex);\n+            LOG.error(\"Update of user {} failed, trying to sync its status anyway (if configured)\",\n+                    nullPriorityAsync, ex);\n \n-            result.setStatus(ProvisioningResult.Status.FAILURE);\n+            result.setStatus(ProvisioningReport.Status.FAILURE);\n             result.setMessage(\"Update failed, trying to sync status anyway (if configured)\\n\" + ex.getMessage());\n \n             WorkflowResult<Pair<UserPatch, Boolean>> updated = new WorkflowResult<Pair<UserPatch, Boolean>>(\n@@ -331,10 +371,10 @@ public void internalSuspend(final Long key) {\n     }\n \n     @Override\n-    public void requestPasswordReset(final Long userKey) {\n+    public void requestPasswordReset(final Long key) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:requestPwdResetPort\");\n \n-        sendMessage(\"direct:requestPwdReset\", userKey);\n+        sendMessage(\"direct:requestPwdReset\", key);\n \n         Exchange exchange = pollingConsumer.receive();\n \n@@ -348,7 +388,7 @@ public void confirmPasswordReset(final Long key, final String token, final Strin\n         PollingConsumer pollingConsumer = getConsumer(\"direct:confirmPwdResetPort\");\n \n         Map<String, Object> props = new HashMap<>();\n-        props.put(\"userKey\", key);\n+        props.put(\"key\", key);\n         props.put(\"token\", token);\n         props.put(\"password\", password);\n "},{"sha":"443e6aafdb8df20e4a83abf5dbd2292958e5c7e3","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/AnyObjectCreateProcessor.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectCreateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectCreateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectCreateProcessor.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -28,20 +28,15 @@\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class AnyObjectCreateProcessor implements Processor {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(AnyObjectCreateProcessor.class);\n-\n     @Autowired\n     protected PropagationManager propagationManager;\n \n@@ -54,6 +49,7 @@ public void process(final Exchange exchange) {\n         WorkflowResult<Long> created = (WorkflowResult) exchange.getIn().getBody();\n         AnyObjectTO any = exchange.getProperty(\"any\", AnyObjectTO.class);\n         Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n+        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n         List<PropagationTask> tasks = propagationManager.getCreateTasks(\n                 AnyTypeKind.ANY_OBJECT,\n@@ -63,12 +59,7 @@ public void process(final Exchange exchange) {\n                 excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         exchange.getOut().setBody(new ImmutablePair<>(created.getResult(), propagationReporter.getStatuses()));\n     }"},{"sha":"189480bef56499de9fc15782c590188958ceed7e","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/AnyObjectDeleteProcessor.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeleteProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeleteProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeleteProcessor.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -25,21 +25,16 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class AnyObjectDeleteProcessor implements Processor {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(AnyObjectDeleteProcessor.class);\n-\n     @Autowired\n     protected AnyObjectWorkflowAdapter gwfAdapter;\n \n@@ -54,6 +49,7 @@ public void process(final Exchange exchange) throws Exception {\n         Long key = exchange.getIn().getBody(Long.class);\n         @SuppressWarnings(\"unchecked\")\n         Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n+        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n         List<PropagationTask> tasks = propagationManager.getDeleteTasks(\n                 AnyTypeKind.ANY_OBJECT,\n@@ -62,12 +58,7 @@ public void process(final Exchange exchange) throws Exception {\n                 excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         exchange.setProperty(\"statuses\", propagationReporter.getStatuses());\n     }"},{"sha":"5a6fe5274ba22cc453da14b1b747ba815376f689","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/AnyObjectDeprovisionProcessor.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeprovisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeprovisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeprovisionProcessor.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -28,20 +28,15 @@\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class AnyObjectDeprovisionProcessor implements Processor {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(UserDeprovisionProcessor.class);\n-\n     @Autowired\n     protected PropagationManager propagationManager;\n \n@@ -56,6 +51,7 @@ public class AnyObjectDeprovisionProcessor implements Processor {\n     public void process(final Exchange exchange) {\n         Long key = exchange.getIn().getBody(Long.class);\n         List<String> resources = exchange.getProperty(\"resources\", List.class);\n+        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.DELETE, resources);\n@@ -67,12 +63,7 @@ public void process(final Exchange exchange) {\n                 CollectionUtils.removeAll(anyObjectDAO.findAllResourceNames(anyObjectDAO.authFind(key)), resources));\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         exchange.getOut().setBody(propagationReporter.getStatuses());\n     }"},{"sha":"2a8a318bbee0df207a8686f8692f9d9ea287dced","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/AnyObjectProvisionProcessor.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectProvisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectProvisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectProvisionProcessor.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -26,20 +26,15 @@\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class AnyObjectProvisionProcessor implements Processor {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(AnyObjectProvisionProcessor.class);\n-\n     @Autowired\n     protected PropagationManager propagationManager;\n \n@@ -51,6 +46,7 @@ public class AnyObjectProvisionProcessor implements Processor {\n     public void process(final Exchange exchange) {\n         Long key = exchange.getIn().getBody(Long.class);\n         List<String> resources = exchange.getProperty(\"resources\", List.class);\n+        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.UPDATE, resources);\n@@ -65,12 +61,7 @@ public void process(final Exchange exchange) {\n                 null);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         exchange.getOut().setBody(propagationReporter.getStatuses());\n     }"},{"sha":"a33296d6ce6f3f17f365a49b7eede09193fe8503","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/AnyObjectUpdateProcessor.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectUpdateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectUpdateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectUpdateProcessor.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -29,20 +29,15 @@\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class AnyObjectUpdateProcessor implements Processor {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(UserUpdateProcessor.class);\n-\n     @Autowired\n     protected PropagationManager propagationManager;\n \n@@ -58,6 +53,7 @@ public void process(final Exchange exchange) {\n         WorkflowResult<Long> updated = (WorkflowResult) exchange.getIn().getBody();\n         AnyObjectPatch anyObjectPatch = exchange.getProperty(\"anyPatch\", AnyObjectPatch.class);\n         Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n+        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n         List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n                 AnyTypeKind.ANY_OBJECT,\n@@ -69,12 +65,7 @@ public void process(final Exchange exchange) {\n                 excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         exchange.getOut().setBody(new ImmutablePair<>(updated.getResult(), propagationReporter.getStatuses()));\n     }"},{"sha":"fbe34d1d949f1df811b7585c98e6e810baa78f7c","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupCreateInSyncProcessor.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateInSyncProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateInSyncProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateInSyncProcessor.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -32,19 +32,14 @@\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n \n @Component\n public class GroupCreateInSyncProcessor implements Processor {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(GroupCreateInSyncProcessor.class);\n-\n     @Autowired\n     protected PropagationManager propagationManager;\n \n@@ -59,6 +54,7 @@ public void process(final Exchange exchange) {\n         GroupTO groupTO = exchange.getProperty(\"any\", GroupTO.class);\n         Map<Long, String> groupOwnerMap = exchange.getProperty(\"groupOwnerMap\", Map.class);\n         Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n+        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n         AttrTO groupOwner = groupTO.getPlainAttrMap().get(StringUtils.EMPTY);\n         if (groupOwner != null) {\n@@ -73,12 +69,7 @@ public void process(final Exchange exchange) {\n                 excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         exchange.getOut().setBody(new ImmutablePair<>(created.getResult(), null));\n     }"},{"sha":"1c08e8afb3bab1c546901b063d074125e78cb615","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupCreateProcessor.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateProcessor.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -28,20 +28,15 @@\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class GroupCreateProcessor implements Processor {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(GroupCreateProcessor.class);\n-\n     @Autowired\n     protected PropagationManager propagationManager;\n \n@@ -54,6 +49,7 @@ public void process(final Exchange exchange) {\n         WorkflowResult<Long> created = (WorkflowResult) exchange.getIn().getBody();\n         GroupTO any = exchange.getProperty(\"any\", GroupTO.class);\n         Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n+        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n         List<PropagationTask> tasks = propagationManager.getCreateTasks(\n                 AnyTypeKind.GROUP,\n@@ -63,12 +59,7 @@ public void process(final Exchange exchange) {\n                 excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         exchange.getOut().setBody(new ImmutablePair<>(\n                 created.getResult(), propagationReporter.getStatuses()));"},{"sha":"8603af210c09e2d31dd863004dbb445a75eada44","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupDeleteProcessor.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeleteProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeleteProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeleteProcessor.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -29,21 +29,16 @@\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class GroupDeleteProcessor implements Processor {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(GroupDeleteProcessor.class);\n-\n     @Autowired\n     protected GroupWorkflowAdapter gwfAdapter;\n \n@@ -61,6 +56,7 @@ public void process(final Exchange exchange) throws Exception {\n         Long key = exchange.getIn().getBody(Long.class);\n         @SuppressWarnings(\"unchecked\")\n         Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n+        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n         List<PropagationTask> tasks = new ArrayList<>();\n \n@@ -94,12 +90,7 @@ public void process(final Exchange exchange) throws Exception {\n \n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         exchange.setProperty(\"statuses\", propagationReporter.getStatuses());\n     }"},{"sha":"dd50c455530486b1a2ee8d0353e21d4692baa06d","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupDeprovisionProcessor.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeprovisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeprovisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeprovisionProcessor.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -28,20 +28,15 @@\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class GroupDeprovisionProcessor implements Processor {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(GroupDeprovisionProcessor.class);\n-\n     @Autowired\n     protected PropagationManager propagationManager;\n \n@@ -56,6 +51,7 @@ public class GroupDeprovisionProcessor implements Processor {\n     public void process(final Exchange exchange) {\n         Long key = exchange.getIn().getBody(Long.class);\n         List<String> resources = exchange.getProperty(\"resources\", List.class);\n+        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.DELETE, resources);\n@@ -67,12 +63,7 @@ public void process(final Exchange exchange) {\n                 CollectionUtils.removeAll(groupDAO.authFind(key).getResourceNames(), resources));\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         exchange.getOut().setBody(propagationReporter.getStatuses());\n     }"},{"sha":"def3ca37ed7bf26013446a64df78940dfbc27480","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupProvisionProcessor.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupProvisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupProvisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupProvisionProcessor.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -26,20 +26,15 @@\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class GroupProvisionProcessor implements Processor {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(GroupProvisionProcessor.class);\n-\n     @Autowired\n     protected PropagationManager propagationManager;\n \n@@ -51,6 +46,7 @@ public class GroupProvisionProcessor implements Processor {\n     public void process(final Exchange exchange) {\n         Long key = exchange.getIn().getBody(Long.class);\n         List<String> resources = exchange.getProperty(\"resources\", List.class);\n+        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.UPDATE, resources);\n@@ -65,12 +61,7 @@ public void process(final Exchange exchange) {\n                 null);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         exchange.getOut().setBody(propagationReporter.getStatuses());\n     }"},{"sha":"18aeac2991a319f4c7be50e7d54d1796704bf31b","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupUpdateProcessor.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupUpdateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupUpdateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupUpdateProcessor.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -29,7 +29,6 @@\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n@@ -58,6 +57,7 @@ public void process(final Exchange exchange) {\n         WorkflowResult<Long> updated = (WorkflowResult) exchange.getIn().getBody();\n         GroupPatch groupPatch = exchange.getProperty(\"anyPatch\", GroupPatch.class);\n         Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n+        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n         List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n                 AnyTypeKind.GROUP,\n@@ -69,12 +69,7 @@ public void process(final Exchange exchange) {\n                 excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         exchange.getOut().setBody(new ImmutablePair<>(updated.getResult(), propagationReporter.getStatuses()));\n     }"},{"sha":"05b2e7551dae217ef98aee7aead378e6bf721033","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserConfirmPwdResetProcessor.java","status":"modified","additions":1,"deletions":11,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserConfirmPwdResetProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserConfirmPwdResetProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserConfirmPwdResetProcessor.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -26,20 +26,15 @@\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class UserConfirmPwdResetProcessor implements Processor {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(UserConfirmPwdResetProcessor.class);\n-\n     @Autowired\n     protected PropagationManager propagationManager;\n \n@@ -55,11 +50,6 @@ public void process(final Exchange exchange) {\n \n         PropagationReporter propReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propReporter, false);\n     }\n }"},{"sha":"51b8e83f61bb09e44528784e6f48483ba486b593","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserCreateProcessor.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserCreateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserCreateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserCreateProcessor.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -28,7 +28,6 @@\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n@@ -55,6 +54,7 @@ public void process(final Exchange exchange) {\n             WorkflowResult<Pair<Long, Boolean>> created = (WorkflowResult) exchange.getIn().getBody();\n             UserTO actual = exchange.getProperty(\"actual\", UserTO.class);\n             Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n+            Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n             List<PropagationTask> tasks = propagationManager.getUserCreateTasks(\n                     created.getResult().getKey(),\n@@ -65,12 +65,7 @@ public void process(final Exchange exchange) {\n                     excludedResources);\n             PropagationReporter propagationReporter =\n                     ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-            try {\n-                taskExecutor.execute(tasks, propagationReporter);\n-            } catch (PropagationException e) {\n-                LOG.error(\"Error propagation primary resource {}\", e);\n-                propagationReporter.onPrimaryResourceFailure(tasks);\n-            }\n+            taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n             exchange.getOut().setBody(\n                     new ImmutablePair<>(created.getResult().getKey(), propagationReporter.getStatuses()));"},{"sha":"328b091421d232c7b4d46e4e456b5c8063d14843","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserDeleteProcessor.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeleteProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeleteProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeleteProcessor.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -28,20 +28,15 @@\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class UserDeleteProcessor implements Processor {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(UserDeleteProcessor.class);\n-\n     @Autowired\n     protected UserDAO userDAO;\n \n@@ -56,6 +51,7 @@ public class UserDeleteProcessor implements Processor {\n     public void process(final Exchange exchange) throws Exception {\n         Long key = (Long) exchange.getIn().getBody();\n         Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n+        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.set(ResourceOperation.DELETE, userDAO.findAllResourceNames(userDAO.authFind(key)));\n@@ -73,12 +69,7 @@ public void process(final Exchange exchange) throws Exception {\n \n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         exchange.setProperty(\"statuses\", propagationReporter.getStatuses());\n     }"},{"sha":"2438f1752e2f191d8fdef0de7c74f2be2f28c154","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserDeprovisionProcessor.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeprovisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeprovisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeprovisionProcessor.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -28,20 +28,15 @@\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class UserDeprovisionProcessor implements Processor {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(UserDeprovisionProcessor.class);\n-\n     @Autowired\n     protected PropagationManager propagationManager;\n \n@@ -56,6 +51,7 @@ public void process(final Exchange exchange) {\n         Long key = exchange.getIn().getBody(Long.class);\n         @SuppressWarnings(\"unchecked\")\n         List<String> resources = exchange.getProperty(\"resources\", List.class);\n+        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.set(ResourceOperation.DELETE, resources);\n@@ -67,12 +63,7 @@ public void process(final Exchange exchange) {\n                 CollectionUtils.removeAll(userDAO.findAllResourceNames(userDAO.authFind(key)), resources));\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         exchange.getOut().setBody(propagationReporter.getStatuses());\n     }"},{"sha":"324d54c1fd4d35071aff31aa0f8c41dd5b397d28","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserProvisionProcessor.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserProvisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserProvisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserProvisionProcessor.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -35,20 +35,15 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class UserProvisionProcessor implements Processor {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(UserProvisionProcessor.class);\n-\n     @Autowired\n     protected PropagationManager propagationManager;\n \n@@ -65,6 +60,7 @@ public void process(final Exchange exchange) {\n         String password = exchange.getProperty(\"password\", String.class);\n         @SuppressWarnings(\"unchecked\")\n         List<String> resources = exchange.getProperty(\"resources\", List.class);\n+        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(key);\n@@ -92,12 +88,7 @@ public StringPatchItem transform(final String resource) {\n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(wfResult, changePwd, null);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         exchange.getOut().setBody(propagationReporter.getStatuses());\n     }"},{"sha":"ead8d4fc5dd406dbf12b212c5749cee7fcc87bec","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserSetStatusInSyncProcessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserSetStatusInSyncProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserSetStatusInSyncProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserSetStatusInSyncProcessor.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -44,7 +44,7 @@ public void process(final Exchange exchange) {\n         WorkflowResult<Map.Entry<UserPatch, Boolean>> updated = (WorkflowResult) exchange.getIn().getBody();\n \n         Boolean enabled = exchange.getProperty(\"enabled\", Boolean.class);\n-        Long key = exchange.getProperty(\"userKey\", Long.class);\n+        Long key = exchange.getProperty(\"key\", Long.class);\n \n         if (enabled != null) {\n             User user = userDAO.find(key);"},{"sha":"48771408d9d2092f97d80e5318f700a1ceaf550a","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserStatusPropagationProcessor.java","status":"modified","additions":2,"deletions":12,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -31,20 +31,15 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class UserStatusPropagationProcessor implements Processor {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(UserStatusPropagationProcessor.class);\n-\n     @Autowired\n     protected PropagationManager propagationManager;\n \n@@ -58,8 +53,8 @@ public class UserStatusPropagationProcessor implements Processor {\n     @Override\n     public void process(final Exchange exchange) {\n         WorkflowResult<Long> updated = (WorkflowResult) exchange.getIn().getBody();\n-\n         StatusPatch statusPatch = exchange.getProperty(\"statusPatch\", StatusPatch.class);\n+        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.UPDATE, statusPatch.getResources());\n@@ -74,12 +69,7 @@ public void process(final Exchange exchange) {\n \n         PropagationReporter propReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propReporter, nullPriorityAsync);\n \n         exchange.getOut().setBody(new ImmutablePair<>(updated.getResult(), propReporter.getStatuses()));\n     }"},{"sha":"6c1d3a368efdc21935210fc925c0accbd62768d1","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserUpdateInSyncProcessor.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateInSyncProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateInSyncProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateInSyncProcessor.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -28,7 +28,6 @@\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n@@ -53,17 +52,13 @@ public class UserUpdateInSyncProcessor implements Processor {\n     public void process(final Exchange exchange) {\n         WorkflowResult<Pair<UserPatch, Boolean>> updated = (WorkflowResult) exchange.getIn().getBody();\n         Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n+        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n                 updated, updated.getResult().getKey().getPassword() != null, excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         exchange.getOut().setBody(new ImmutablePair<>(\n                 updated.getResult().getKey().getKey(), propagationReporter.getStatuses()));"},{"sha":"57233a606efb7bc202987485c46883eb4d62e62f","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserUpdateProcessor.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -28,20 +28,15 @@\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class UserUpdateProcessor implements Processor {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(UserUpdateProcessor.class);\n-\n     @Autowired\n     protected PropagationManager propagationManager;\n \n@@ -55,16 +50,12 @@ public class UserUpdateProcessor implements Processor {\n     @SuppressWarnings(\"unchecked\")\n     public void process(final Exchange exchange) {\n         WorkflowResult<Pair<UserPatch, Boolean>> updated = (WorkflowResult) exchange.getIn().getBody();\n+        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(updated);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        taskExecutor.execute(tasks, propagationReporter, nullPriorityAsync);\n \n         exchange.getOut().setBody(new ImmutablePair<>(\n                 updated.getResult().getKey().getKey(), propagationReporter.getStatuses()));"},{"sha":"41f21ad1b188b981b7100286b634d1f785b9d68b","filename":"ext/camel/provisioning-camel/src/main/resources/provisioning.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -17,6 +17,10 @@\n camel.directory=${conf.directory}\n \n asyncConnectorFacadeExecutor.poolSize=10\n+\n+# see http://docs.spring.io/spring/docs/current/spring-framework-reference/html/scheduling.html#scheduling-task-namespace-executor\n+propagationTaskExecutorAsyncExecutor.poolSize=5-25\n+propagationTaskExecutorAsyncExecutor.queueCapacity=100\n propagationTaskExecutor=org.apache.syncope.core.provisioning.java.propagation.PriorityPropagationTaskExecutor\n \n userProvisioningManager=org.apache.syncope.core.provisioning.camel.CamelUserProvisioningManager"},{"sha":"cbf2902f11a793cdd4502243d9e910035798166f","filename":"ext/camel/provisioning-camel/src/main/resources/userRoutes.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -232,7 +232,7 @@ under the License.\n   <route id=\"confirmPwdReset\">\n     <from uri=\"direct:confirmPwdReset\"/>\n     <doTry>\n-      <bean ref=\"uwfAdapter\" method=\"confirmPasswordReset(${property.userKey},${property.token},${property.password})\"/>\n+      <bean ref=\"uwfAdapter\" method=\"confirmPasswordReset(${property.key},${property.token},${property.password})\"/>\n       <process ref=\"userConfirmPwdResetProcessor\"/>\n       <to uri=\"direct:confirmPwdResetPort\"/>\n       <doCatch>        "},{"sha":"8147828c86be5cf56f32b56cb074ddb2682b0ad8","filename":"fit/core-reference/src/main/resources/all/provisioning.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fprovisioning.properties?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -17,6 +17,10 @@\n camel.directory=${conf.directory}\n \n asyncConnectorFacadeExecutor.poolSize=10\n+\n+# see http://docs.spring.io/spring/docs/current/spring-framework-reference/html/scheduling.html#scheduling-task-namespace-executor\n+propagationTaskExecutorAsyncExecutor.poolSize=5-25\n+propagationTaskExecutorAsyncExecutor.queueCapacity=100\n propagationTaskExecutor=org.apache.syncope.core.provisioning.java.propagation.PriorityPropagationTaskExecutor\n \n userProvisioningManager=org.apache.syncope.core.provisioning.camel.CamelUserProvisioningManager"},{"sha":"5b6539daa81803287ff03b1300a55895d6cb5c93","filename":"fit/core-reference/src/main/resources/mariadb/provisioning.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmariadb%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmariadb%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmariadb%2Fprovisioning.properties?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -15,6 +15,10 @@\n # specific language governing permissions and limitations\n # under the License.\n asyncConnectorFacadeExecutor.poolSize=10\n+\n+# see http://docs.spring.io/spring/docs/current/spring-framework-reference/html/scheduling.html#scheduling-task-namespace-executor\n+propagationTaskExecutorAsyncExecutor.poolSize=5-25\n+propagationTaskExecutorAsyncExecutor.queueCapacity=100\n propagationTaskExecutor=org.apache.syncope.core.provisioning.java.propagation.PriorityPropagationTaskExecutor\n \n userProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultUserProvisioningManager"},{"sha":"acb8a8a7095e1709e9c12dc43345a432e63af562","filename":"fit/core-reference/src/main/resources/mysql/provisioning.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmysql%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmysql%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmysql%2Fprovisioning.properties?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -15,6 +15,10 @@\n # specific language governing permissions and limitations\n # under the License.\n asyncConnectorFacadeExecutor.poolSize=10\n+\n+# see http://docs.spring.io/spring/docs/current/spring-framework-reference/html/scheduling.html#scheduling-task-namespace-executor\n+propagationTaskExecutorAsyncExecutor.poolSize=5-25\n+propagationTaskExecutorAsyncExecutor.queueCapacity=100\n propagationTaskExecutor=org.apache.syncope.core.provisioning.java.propagation.PriorityPropagationTaskExecutor\n \n userProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultUserProvisioningManager"},{"sha":"a71d41e28b91c84c001449facac8038c2657c9a6","filename":"fit/core-reference/src/main/resources/oracle/provisioning.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Foracle%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Foracle%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Foracle%2Fprovisioning.properties?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -15,6 +15,10 @@\n # specific language governing permissions and limitations\n # under the License.\n asyncConnectorFacadeExecutor.poolSize=10\n+\n+# see http://docs.spring.io/spring/docs/current/spring-framework-reference/html/scheduling.html#scheduling-task-namespace-executor\n+propagationTaskExecutorAsyncExecutor.poolSize=5-25\n+propagationTaskExecutorAsyncExecutor.queueCapacity=100\n propagationTaskExecutor=org.apache.syncope.core.provisioning.java.propagation.PriorityPropagationTaskExecutor\n \n userProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultUserProvisioningManager"},{"sha":"4b578ba4805e6d5aabc5f22fdbfcd2388075ced4","filename":"fit/core-reference/src/main/resources/postgres/provisioning.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpostgres%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpostgres%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpostgres%2Fprovisioning.properties?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -15,6 +15,10 @@\n # specific language governing permissions and limitations\n # under the License.\n asyncConnectorFacadeExecutor.poolSize=10\n+\n+# see http://docs.spring.io/spring/docs/current/spring-framework-reference/html/scheduling.html#scheduling-task-namespace-executor\n+propagationTaskExecutorAsyncExecutor.poolSize=5-25\n+propagationTaskExecutorAsyncExecutor.queueCapacity=100\n propagationTaskExecutor=org.apache.syncope.core.provisioning.java.propagation.PriorityPropagationTaskExecutor\n \n userProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultUserProvisioningManager"},{"sha":"dae8ca8caee834ff8c2e84611e03a3e747db8882","filename":"fit/core-reference/src/main/resources/provisioning.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -15,6 +15,10 @@\n # specific language governing permissions and limitations\n # under the License.\n asyncConnectorFacadeExecutor.poolSize=10\n+\n+# see http://docs.spring.io/spring/docs/current/spring-framework-reference/html/scheduling.html#scheduling-task-namespace-executor\n+propagationTaskExecutorAsyncExecutor.poolSize=5-25\n+propagationTaskExecutorAsyncExecutor.queueCapacity=100\n propagationTaskExecutor=org.apache.syncope.core.provisioning.java.propagation.PriorityPropagationTaskExecutor\n \n userProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultUserProvisioningManager"},{"sha":"510eae0b9a5e670a41412dfe9ba1cd9e57c56b56","filename":"fit/core-reference/src/main/resources/sqlserver/provisioning.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fsqlserver%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fsqlserver%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fsqlserver%2Fprovisioning.properties?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -15,6 +15,10 @@\n # specific language governing permissions and limitations\n # under the License.\n asyncConnectorFacadeExecutor.poolSize=10\n+\n+# see http://docs.spring.io/spring/docs/current/spring-framework-reference/html/scheduling.html#scheduling-task-namespace-executor\n+propagationTaskExecutorAsyncExecutor.poolSize=5-25\n+propagationTaskExecutorAsyncExecutor.queueCapacity=100\n propagationTaskExecutor=org.apache.syncope.core.provisioning.java.propagation.PriorityPropagationTaskExecutor\n \n userProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultUserProvisioningManager"},{"sha":"9aaf03474a41489aa4fdad0462f9b22e99dcdfd6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractITCase.java","status":"modified","additions":56,"deletions":40,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -30,6 +30,7 @@\n import javax.naming.NamingException;\n import javax.naming.directory.InitialDirContext;\n import javax.sql.DataSource;\n+import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -46,6 +47,7 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n@@ -274,34 +276,6 @@ protected static AttrPatch attrAddReplacePatch(final String schema, final String\n         return new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).attrTO(attrTO(schema, value)).build();\n     }\n \n-    protected UserTO createUser(final UserTO userTO) {\n-        return createUser(userTO, true);\n-    }\n-\n-    protected UserTO createUser(final UserTO userTO, final boolean storePassword) {\n-        Response response = userService.create(userTO, storePassword);\n-        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n-            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n-            if (ex != null) {\n-                throw (RuntimeException) ex;\n-            }\n-        }\n-        return response.readEntity(UserTO.class);\n-    }\n-\n-    protected UserTO readUser(final String username) {\n-        return userService.read(Long.valueOf(\n-                userService.getUserKey(username).getHeaderString(RESTHeaders.USER_KEY)));\n-    }\n-\n-    protected UserTO updateUser(final UserPatch userPatch) {\n-        return userService.update(userPatch).readEntity(UserTO.class);\n-    }\n-\n-    protected UserTO deleteUser(final Long key) {\n-        return userService.delete(key).readEntity(UserTO.class);\n-    }\n-\n     public <T> T getObject(final URI location, final Class<?> serviceClass, final Class<T> resultClass) {\n         WebClient webClient = WebClient.fromClient(WebClient.client(adminClient.getService(serviceClass)));\n         webClient.accept(clientFactory.getContentType().getMediaType()).to(location.toASCIIString(), false);\n@@ -333,42 +307,84 @@ protected RoleTO createRole(final RoleTO roleTO) {\n         return getObject(response.getLocation(), RoleService.class, RoleTO.class);\n     }\n \n-    protected AnyObjectTO createAnyObject(final AnyObjectTO anyObjectTO) {\n+    protected UserTO readUser(final String username) {\n+        return userService.read(Long.valueOf(userService.getUserKey(username).getHeaderString(RESTHeaders.USER_KEY)));\n+    }\n+\n+    protected ProvisioningResult<UserTO> createUser(final UserTO userTO) {\n+        return createUser(userTO, true);\n+    }\n+\n+    protected ProvisioningResult<UserTO> createUser(final UserTO userTO, final boolean storePassword) {\n+        Response response = userService.create(userTO, storePassword);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n+            if (ex != null) {\n+                throw (RuntimeException) ex;\n+            }\n+        }\n+        return response.readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        });\n+    }\n+\n+    protected ProvisioningResult<UserTO> updateUser(final UserPatch userPatch) {\n+        return userService.update(userPatch).\n+                readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+                });\n+    }\n+\n+    protected ProvisioningResult<UserTO> deleteUser(final Long key) {\n+        return userService.delete(key).\n+                readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+                });\n+    }\n+\n+    protected ProvisioningResult<AnyObjectTO> createAnyObject(final AnyObjectTO anyObjectTO) {\n         Response response = anyObjectService.create(anyObjectTO);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n             Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n             if (ex != null) {\n                 throw (RuntimeException) ex;\n             }\n         }\n-        return response.readEntity(AnyObjectTO.class);\n+        return response.readEntity(new GenericType<ProvisioningResult<AnyObjectTO>>() {\n+        });\n     }\n \n-    protected AnyObjectTO updateAnyObject(final AnyObjectPatch anyObjectPatch) {\n-        return anyObjectService.update(anyObjectPatch).readEntity(AnyObjectTO.class);\n+    protected ProvisioningResult<AnyObjectTO> updateAnyObject(final AnyObjectPatch anyObjectPatch) {\n+        return anyObjectService.update(anyObjectPatch).\n+                readEntity(new GenericType<ProvisioningResult<AnyObjectTO>>() {\n+                });\n     }\n \n-    protected AnyObjectTO deleteAnyObject(final Long key) {\n-        return anyObjectService.delete(key).readEntity(AnyObjectTO.class);\n+    protected ProvisioningResult<AnyObjectTO> deleteAnyObject(final Long key) {\n+        return anyObjectService.delete(key).\n+                readEntity(new GenericType<ProvisioningResult<AnyObjectTO>>() {\n+                });\n     }\n \n-    protected GroupTO createGroup(final GroupTO groupTO) {\n+    protected ProvisioningResult<GroupTO> createGroup(final GroupTO groupTO) {\n         Response response = groupService.create(groupTO);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n             Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n             if (ex != null) {\n                 throw (RuntimeException) ex;\n             }\n         }\n-        return response.readEntity(GroupTO.class);\n+        return response.readEntity(new GenericType<ProvisioningResult<GroupTO>>() {\n+        });\n     }\n \n-    protected GroupTO updateGroup(final GroupPatch groupPatch) {\n-        return groupService.update(groupPatch).readEntity(GroupTO.class);\n+    protected ProvisioningResult<GroupTO> updateGroup(final GroupPatch groupPatch) {\n+        return groupService.update(groupPatch).\n+                readEntity(new GenericType<ProvisioningResult<GroupTO>>() {\n+                });\n     }\n \n-    protected GroupTO deleteGroup(final Long key) {\n-        return groupService.delete(key).readEntity(GroupTO.class);\n+    protected ProvisioningResult<GroupTO> deleteGroup(final Long key) {\n+        return groupService.delete(key).\n+                readEntity(new GenericType<ProvisioningResult<GroupTO>>() {\n+                });\n     }\n \n     @SuppressWarnings(\"unchecked\")"},{"sha":"78bb01112213b47958591648287dcda7321b90fa","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AnyObjectITCase.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyObjectITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyObjectITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyObjectITCase.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -57,7 +57,7 @@ public static AnyObjectTO getSampleTO(final String location) {\n     public void create() {\n         AnyObjectTO anyObjectTO = getSampleTO(\"create\");\n \n-        anyObjectTO = createAnyObject(anyObjectTO);\n+        anyObjectTO = createAnyObject(anyObjectTO).getAny();\n         assertNotNull(anyObjectTO);\n \n         ConnObjectTO connObjectTO =\n@@ -78,10 +78,10 @@ public void delete() {\n         AnyObjectTO anyObjectTO = getSampleTO(\"deletable\");\n         anyObjectTO.setRealm(\"/even\");\n \n-        anyObjectTO = createAnyObject(anyObjectTO);\n+        anyObjectTO = createAnyObject(anyObjectTO).getAny();\n         assertNotNull(anyObjectTO);\n \n-        AnyObjectTO deletedAnyObject = deleteAnyObject(anyObjectTO.getKey());\n+        AnyObjectTO deletedAnyObject = deleteAnyObject(anyObjectTO.getKey()).getAny();\n         assertNotNull(deletedAnyObject);\n \n         try {\n@@ -113,7 +113,7 @@ public void read() {\n     @Test\n     public void update() {\n         AnyObjectTO anyObjectTO = getSampleTO(\"update\");\n-        anyObjectTO = createAnyObject(anyObjectTO);\n+        anyObjectTO = createAnyObject(anyObjectTO).getAny();\n \n         assertEquals(1, anyObjectTO.getPlainAttrs().size());\n \n@@ -122,15 +122,15 @@ public void update() {\n         String newLocation = \"new\" + getUUIDString();\n         anyObjectPatch.getPlainAttrs().add(attrAddReplacePatch(\"location\", newLocation));\n \n-        anyObjectTO = updateAnyObject(anyObjectPatch);\n+        anyObjectTO = updateAnyObject(anyObjectPatch).getAny();\n \n         assertEquals(newLocation, anyObjectTO.getPlainAttrMap().get(\"location\").getValues().get(0));\n     }\n \n     @Test\n     public void readAttrs() {\n         AnyObjectTO anyObjectTO = getSampleTO(\"readAttrs\");\n-        anyObjectTO = createAnyObject(anyObjectTO);\n+        anyObjectTO = createAnyObject(anyObjectTO).getAny();\n         assertNotNull(anyObjectTO);\n \n         Set<AttrTO> attrs = anyObjectService.read(anyObjectTO.getKey(), SchemaType.PLAIN);\n@@ -143,7 +143,7 @@ public void readAttrs() {\n     @Test\n     public void updateAttr() {\n         AnyObjectTO anyObjectTO = getSampleTO(\"updateAttr\");\n-        anyObjectTO = createAnyObject(anyObjectTO);\n+        anyObjectTO = createAnyObject(anyObjectTO).getAny();\n         assertNotNull(anyObjectTO);\n \n         AttrTO updated = attrTO(\"location\", \"newlocation\");\n@@ -156,7 +156,7 @@ public void updateAttr() {\n     @Test\n     public void deleteAttr() {\n         AnyObjectTO anyObjectTO = getSampleTO(\"deleteAttr\");\n-        anyObjectTO = createAnyObject(anyObjectTO);\n+        anyObjectTO = createAnyObject(anyObjectTO).getAny();\n         assertNotNull(anyObjectTO);\n         assertNotNull(anyObjectTO.getPlainAttrMap().get(\"location\"));\n "},{"sha":"e5cf78b158a910a2e6998213fec1963e0c9fd2be","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AuthenticationITCase.java","status":"modified","additions":17,"deletions":12,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -28,6 +28,7 @@\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n+import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n@@ -45,6 +46,7 @@\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\n@@ -140,7 +142,7 @@ public void testUserSchemaAuthorization() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"auth@test.org\");\n         userTO.getRoles().add(roleTO.getKey());\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n \n         // 3. read the schema created above (as admin) - success\n@@ -170,7 +172,7 @@ public void testUserRead() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"testuserread@test.org\");\n         userTO.getRoles().add(2L);\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n \n         UserService userService2 = clientFactory.create(userTO.getUsername(), \"password123\").\n@@ -195,7 +197,7 @@ public void testUserSearch() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"testusersearch@test.org\");\n         userTO.getRoles().add(1L);\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n \n         // 1. user assigned to role 1, with search entitlement on realms /odd and /even: won't find anything with \n@@ -257,7 +259,7 @@ public void delegatedUserCRUD() {\n             // 2. as admin, create delegated admin user, and assign the role just created\n             UserTO delegatedAdmin = UserITCase.getUniqueSampleTO(\"admin@syncope.apache.org\");\n             delegatedAdmin.getRoles().add(roleKey);\n-            delegatedAdmin = createUser(delegatedAdmin);\n+            delegatedAdmin = createUser(delegatedAdmin).getAny();\n             delegatedAdminKey = delegatedAdmin.getKey();\n \n             // 3. instantiate a delegate user service client, for further operatins\n@@ -279,7 +281,8 @@ public void delegatedUserCRUD() {\n             Response response = delegatedUserService.create(user);\n             assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n \n-            user = response.readEntity(UserTO.class);\n+            user = response.readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+            }).getAny();\n             assertEquals(\"surname\", user.getPlainAttrMap().get(\"surname\").getValues().get(0));\n \n             // 5. as delegated, update user attempting to move under realm / -> fail\n@@ -301,7 +304,8 @@ public void delegatedUserCRUD() {\n             response = delegatedUserService.update(userPatch);\n             assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n \n-            user = response.readEntity(UserTO.class);\n+            user = response.readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+            }).getAny();\n             assertEquals(\"surname2\", user.getPlainAttrMap().get(\"surname\").getValues().get(0));\n \n             // 7. as delegated, delete user\n@@ -328,7 +332,7 @@ public void checkFailedLogins() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"checkFailedLogin@syncope.apache.org\");\n         userTO.getRoles().add(2L);\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n         long userId = userTO.getKey();\n \n@@ -354,7 +358,7 @@ public void checkUserSuspension() {\n         userTO.setRealm(\"/odd\");\n         userTO.getRoles().add(2L);\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         long userKey = userTO.getKey();\n         assertNotNull(userTO);\n \n@@ -384,7 +388,8 @@ public void checkUserSuspension() {\n         StatusPatch reactivate = new StatusPatch();\n         reactivate.setKey(userTO.getKey());\n         reactivate.setType(StatusPatchType.REACTIVATE);\n-        userTO = userService.status(reactivate).readEntity(UserTO.class);\n+        userTO = userService.status(reactivate).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getAny();\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n \n@@ -399,7 +404,7 @@ public void issueSYNCOPE434() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"createWithReject@syncope.apache.org\");\n         userTO.getMemberships().add(new MembershipTO.Builder().group(9L).build());\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n         assertEquals(\"createApproval\", userTO.getStatus());\n \n@@ -437,7 +442,7 @@ public void issueSYNCOPE164() throws Exception {\n         user.setRealm(\"/even/two\");\n         user.setPassword(\"password123\");\n         user.getResources().add(RESOURCE_NAME_TESTDB);\n-        user = createUser(user);\n+        user = createUser(user).getAny();\n         assertNotNull(user);\n \n         // 2. unlink the resource from the created user\n@@ -451,7 +456,7 @@ public void issueSYNCOPE164() throws Exception {\n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(user.getKey());\n         userPatch.setPassword(new PasswordPatch.Builder().value(\"password234\").build());\n-        user = updateUser(userPatch);\n+        user = updateUser(userPatch).getAny();\n         assertNotNull(user);\n \n         // 4. check that the db resource has still the initial password value"},{"sha":"7b18109007269f4c0054d08f80bcf94173f4360f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/CamelRouteITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCamelRouteITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCamelRouteITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCamelRouteITCase.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -164,7 +164,7 @@ public void scriptingUpdate() {\n             userTO.getPlainAttrs().add(attrTO(\"surname\", userId));\n             userTO.getPlainAttrs().add(attrTO(\"camelAttribute\", \"false\"));\n \n-            userTO = createUser(userTO);\n+            userTO = createUser(userTO).getAny();\n             assertNotNull(userTO);\n             assertEquals(\"true\", CollectionUtils.get(userTO.getPlainAttrs(), 3).getValues().get(0));\n         } finally {"},{"sha":"3ddb2c82fd601d965eb64e9c7f2a6559b2c9f6ae","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/GroupITCase.java","status":"modified","additions":54,"deletions":48,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -34,6 +34,7 @@\n import javax.naming.directory.DirContext;\n import javax.naming.directory.SearchControls;\n import javax.naming.directory.SearchResult;\n+import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n@@ -61,6 +62,7 @@\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n@@ -85,7 +87,7 @@ public class GroupITCase extends AbstractITCase {\n \n     public static GroupTO getBasicSampleTO(final String name) {\n         GroupTO groupTO = new GroupTO();\n-        groupTO.setRealm(\"/\");\n+        groupTO.setRealm(SyncopeConstants.ROOT_REALM);\n         groupTO.setName(name + getUUIDString());\n         return groupTO;\n     }\n@@ -105,7 +107,7 @@ public void create() {\n         groupTO.getVirAttrs().add(attrTO(\"rvirtualdata\", \"rvirtualvalue\"));\n         groupTO.setGroupOwner(8L);\n \n-        groupTO = createGroup(groupTO);\n+        groupTO = createGroup(groupTO).getAny();\n         assertNotNull(groupTO);\n \n         assertNotNull(groupTO.getVirAttrMap());\n@@ -125,7 +127,7 @@ public void create() {\n         groupPatch.setKey(groupTO.getKey());\n         groupPatch.setGroupOwner(new LongReplacePatchItem());\n \n-        assertNull(updateGroup(groupPatch).getGroupOwner());\n+        assertNull(updateGroup(groupPatch).getAny().getGroupOwner());\n     }\n \n     @Test\n@@ -142,10 +144,10 @@ public void delete() {\n \n         groupTO.getResources().add(RESOURCE_NAME_LDAP);\n \n-        groupTO = createGroup(groupTO);\n+        groupTO = createGroup(groupTO).getAny();\n         assertNotNull(groupTO);\n \n-        GroupTO deletedGroup = deleteGroup(groupTO.getKey());\n+        GroupTO deletedGroup = deleteGroup(groupTO.getKey()).getAny();\n         assertNotNull(deletedGroup);\n \n         try {\n@@ -206,7 +208,7 @@ public boolean evaluate(final GroupTO group) {\n     @Test\n     public void update() {\n         GroupTO groupTO = getSampleTO(\"latestGroup\" + getUUIDString());\n-        groupTO = createGroup(groupTO);\n+        groupTO = createGroup(groupTO).getAny();\n \n         assertEquals(1, groupTO.getPlainAttrs().size());\n \n@@ -216,7 +218,7 @@ public void update() {\n         groupPatch.setName(new StringReplacePatchItem.Builder().value(modName).build());\n         groupPatch.getPlainAttrs().add(attrAddReplacePatch(\"show\", \"FALSE\"));\n \n-        groupTO = updateGroup(groupPatch);\n+        groupTO = updateGroup(groupPatch).getAny();\n \n         assertEquals(modName, groupTO.getName());\n         assertEquals(2, groupTO.getPlainAttrs().size());\n@@ -227,7 +229,7 @@ public void updateRemovingDerAttribute() {\n         GroupTO groupTO = getBasicSampleTO(\"withderived\" + getUUIDString());\n         groupTO.getDerAttrs().add(attrTO(\"rderivedschema\", null));\n \n-        groupTO = createGroup(groupTO);\n+        groupTO = createGroup(groupTO).getAny();\n \n         assertNotNull(groupTO);\n         assertEquals(1, groupTO.getDerAttrs().size());\n@@ -238,7 +240,7 @@ public void updateRemovingDerAttribute() {\n                 attrTO(new AttrTO.Builder().schema(\"rderivedschema\").build()).\n                 build());\n \n-        groupTO = updateGroup(groupPatch);\n+        groupTO = updateGroup(groupPatch).getAny();\n         assertNotNull(groupTO);\n         assertTrue(groupTO.getDerAttrs().isEmpty());\n     }\n@@ -274,7 +276,8 @@ public void updateAsGroupOwner() {\n         // 4. update as puccini, owner of group 6 - success\n         GroupService groupService3 = clientFactory.create(\"puccini\", ADMIN_PWD).getService(GroupService.class);\n \n-        groupTO = groupService3.update(groupPatch).readEntity(GroupTO.class);\n+        groupTO = groupService3.update(groupPatch).readEntity(new GenericType<ProvisioningResult<GroupTO>>() {\n+        }).getAny();\n         assertEquals(\"Director\", groupTO.getName());\n \n         // issue SYNCOPE-15\n@@ -292,7 +295,7 @@ public void issue178() {\n         groupTO.setName(groupName);\n         groupTO.setRealm(\"/\");\n \n-        GroupTO actual = createGroup(groupTO);\n+        GroupTO actual = createGroup(groupTO).getAny();\n \n         assertNotNull(actual);\n         assertEquals(groupName, actual.getName());\n@@ -302,14 +305,14 @@ public void issue178() {\n         String renamedGroup = \"renamed\" + getUUIDString();\n         groupPatch.setName(new StringReplacePatchItem.Builder().value(renamedGroup).build());\n \n-        actual = updateGroup(groupPatch);\n+        actual = updateGroup(groupPatch).getAny();\n         assertNotNull(actual);\n         assertEquals(renamedGroup, actual.getName());\n     }\n \n     @Test\n     public void unlink() {\n-        GroupTO actual = createGroup(getSampleTO(\"unlink\"));\n+        GroupTO actual = createGroup(getSampleTO(\"unlink\")).getAny();\n         assertNotNull(actual);\n \n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey()));\n@@ -333,7 +336,7 @@ public void link() {\n         GroupTO groupTO = getSampleTO(\"link\");\n         groupTO.getResources().clear();\n \n-        GroupTO actual = createGroup(groupTO);\n+        GroupTO actual = createGroup(groupTO).getAny();\n         assertNotNull(actual);\n \n         try {\n@@ -363,7 +366,7 @@ public void link() {\n \n     @Test\n     public void unassign() {\n-        GroupTO actual = createGroup(getSampleTO(\"unassign\"));\n+        GroupTO actual = createGroup(getSampleTO(\"unassign\")).getAny();\n         assertNotNull(actual);\n \n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey()));\n@@ -392,7 +395,7 @@ public void assign() {\n         GroupTO groupTO = getSampleTO(\"assign\");\n         groupTO.getResources().clear();\n \n-        GroupTO actual = createGroup(groupTO);\n+        GroupTO actual = createGroup(groupTO).getAny();\n         assertNotNull(actual);\n \n         try {\n@@ -416,7 +419,7 @@ public void assign() {\n \n     @Test\n     public void deprovision() {\n-        GroupTO actual = createGroup(getSampleTO(\"deprovision\"));\n+        GroupTO actual = createGroup(getSampleTO(\"deprovision\")).getAny();\n         assertNotNull(actual);\n         assertNotNull(actual.getKey());\n \n@@ -446,7 +449,7 @@ public void provision() {\n         GroupTO groupTO = getSampleTO(\"assign\" + getUUIDString());\n         groupTO.getResources().clear();\n \n-        GroupTO actual = createGroup(groupTO);\n+        GroupTO actual = createGroup(groupTO).getAny();\n         assertNotNull(actual);\n \n         try {\n@@ -474,7 +477,7 @@ public void deprovisionUnlinked() {\n         GroupTO groupTO = getSampleTO(\"assign\" + getUUIDString());\n         groupTO.getResources().clear();\n \n-        GroupTO actual = createGroup(groupTO);\n+        GroupTO actual = createGroup(groupTO).getAny();\n         assertNotNull(actual);\n \n         try {\n@@ -526,7 +529,7 @@ public void createWithMandatorySchema() {\n         // 2. create a group *without* an attribute for that schema: it works\n         GroupTO groupTO = getSampleTO(\"lastGroup\");\n         assertFalse(groupTO.getPlainAttrMap().containsKey(badge.getKey()));\n-        groupTO = createGroup(groupTO);\n+        groupTO = createGroup(groupTO).getAny();\n         assertNotNull(groupTO);\n         assertFalse(groupTO.getPlainAttrMap().containsKey(badge.getKey()));\n \n@@ -554,7 +557,7 @@ public void createWithMandatorySchema() {\n             // 5. also add an actual attribute for badge - it will work        \n             groupPatch.getPlainAttrs().add(attrAddReplacePatch(badge.getKey(), \"xxxxxxxxxx\"));\n \n-            groupTO = updateGroup(groupPatch);\n+            groupTO = updateGroup(groupPatch).getAny();\n             assertNotNull(groupTO);\n             assertTrue(groupTO.getPlainAttrMap().containsKey(badge.getKey()));\n         } finally {\n@@ -619,7 +622,7 @@ public void dynMembership() {\n \n         GroupTO group = getBasicSampleTO(\"dynMembership\");\n         group.setUDynMembershipCond(\"cool==true\");\n-        group = createGroup(group);\n+        group = createGroup(group).getAny();\n         assertNotNull(group);\n \n         assertTrue(userService.read(4L).getDynGroups().contains(group.getKey()));\n@@ -652,23 +655,25 @@ public void capabilitiesOverride() {\n             group.getPlainAttrs().add(attrTO(\"title\", \"first\"));\n             group.getResources().add(RESOURCE_NAME_LDAP);\n \n-            group = createGroup(group);\n-            assertNotNull(group);\n-            assertEquals(1, group.getPropagationStatusTOs().size());\n-            assertEquals(RESOURCE_NAME_LDAP, group.getPropagationStatusTOs().get(0).getResource());\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, group.getPropagationStatusTOs().get(0).getStatus());\n+            ProvisioningResult<GroupTO> result = createGroup(group);\n+            assertNotNull(result);\n+            assertEquals(1, result.getPropagationStatuses().size());\n+            assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n+            assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+            group = result.getAny();\n \n             // 2. update succeeds\n             GroupPatch patch = new GroupPatch();\n             patch.setKey(group.getKey());\n             patch.getPlainAttrs().add(new AttrPatch.Builder().\n                     operation(PatchOperation.ADD_REPLACE).attrTO(attrTO(\"title\", \"second\")).build());\n \n-            group = groupService.update(patch).readEntity(GroupTO.class);\n-            assertNotNull(group);\n-            assertEquals(1, group.getPropagationStatusTOs().size());\n-            assertEquals(RESOURCE_NAME_LDAP, group.getPropagationStatusTOs().get(0).getResource());\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, group.getPropagationStatusTOs().get(0).getStatus());\n+            result = updateGroup(patch);\n+            assertNotNull(result);\n+            assertEquals(1, result.getPropagationStatuses().size());\n+            assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n+            assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+            group = result.getAny();\n \n             // 3. set capability override with only search allowed, but not enable\n             ldap.getCapabilitiesOverride().add(ConnectorCapability.SEARCH);\n@@ -685,11 +690,12 @@ public void capabilitiesOverride() {\n             patch.getPlainAttrs().add(new AttrPatch.Builder().\n                     operation(PatchOperation.ADD_REPLACE).attrTO(attrTO(\"title\", \"third\")).build());\n \n-            group = groupService.update(patch).readEntity(GroupTO.class);\n-            assertNotNull(group);\n-            assertEquals(1, group.getPropagationStatusTOs().size());\n-            assertEquals(RESOURCE_NAME_LDAP, group.getPropagationStatusTOs().get(0).getResource());\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, group.getPropagationStatusTOs().get(0).getStatus());\n+            result = updateGroup(patch);\n+            assertNotNull(result);\n+            assertEquals(1, result.getPropagationStatuses().size());\n+            assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n+            assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+            group = result.getAny();\n \n             // 5. enable capability override\n             ldap.setOverrideCapabilities(true);\n@@ -706,11 +712,11 @@ public void capabilitiesOverride() {\n             patch.getPlainAttrs().add(new AttrPatch.Builder().\n                     operation(PatchOperation.ADD_REPLACE).attrTO(attrTO(\"title\", \"fourth\")).build());\n \n-            group = groupService.update(patch).readEntity(GroupTO.class);\n-            assertNotNull(group);\n-            assertEquals(1, group.getPropagationStatusTOs().size());\n-            assertEquals(RESOURCE_NAME_LDAP, group.getPropagationStatusTOs().get(0).getResource());\n-            assertEquals(PropagationTaskExecStatus.NOT_ATTEMPTED, group.getPropagationStatusTOs().get(0).getStatus());\n+            result = updateGroup(patch);\n+            assertNotNull(result);\n+            assertEquals(1, result.getPropagationStatuses().size());\n+            assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n+            assertEquals(PropagationTaskExecStatus.NOT_ATTEMPTED, result.getPropagationStatuses().get(0).getStatus());\n         } finally {\n             ldap.getCapabilitiesOverride().clear();\n             ldap.setOverrideCapabilities(false);\n@@ -725,7 +731,7 @@ public void issueSYNCOPE632() {\n             // 1. create new LDAP resource having ConnObjectKey mapped to a derived attribute\n             ResourceTO newLDAP = resourceService.read(RESOURCE_NAME_LDAP);\n             newLDAP.setKey(\"new-ldap\");\n-            newLDAP.setPropagationPrimary(true);\n+            newLDAP.setPropagationPriority(0);\n \n             for (ProvisionTO provision : newLDAP.getProvisions()) {\n                 provision.getVirSchemas().clear();\n@@ -756,15 +762,15 @@ public void issueSYNCOPE632() {\n             groupTO.getResources().clear();\n             groupTO.getResources().add(\"new-ldap\");\n \n-            groupTO = createGroup(groupTO);\n+            groupTO = createGroup(groupTO).getAny();\n             assertNotNull(groupTO);\n \n             // 3. update the group\n             GroupPatch groupPatch = new GroupPatch();\n             groupPatch.setKey(groupTO.getKey());\n             groupPatch.getPlainAttrs().add(attrAddReplacePatch(\"icon\", \"anotherIcon\"));\n \n-            groupTO = updateGroup(groupPatch);\n+            groupTO = updateGroup(groupPatch).getAny();\n             assertNotNull(groupTO);\n \n             // 4. check that a single group exists in LDAP for the group created and updated above\n@@ -826,7 +832,7 @@ public void issueSYNCOPE717() {\n         GroupTO groupTO = getBasicSampleTO(\"syncope717\");\n         groupTO.getPlainAttrs().add(attrTO(doubleSchemaName, \"11.23\"));\n \n-        groupTO = createGroup(groupTO);\n+        groupTO = createGroup(groupTO).getAny();\n         assertNotNull(groupTO);\n         assertEquals(\"11.23\", groupTO.getPlainAttrMap().get(doubleSchemaName).getValues().get(0));\n \n@@ -844,7 +850,7 @@ public void issueSYNCOPE717() {\n         patch.setKey(groupTO.getKey());\n         patch.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(doubleSchemaName, \"11.257\")).build());\n \n-        groupTO = updateGroup(patch);\n+        groupTO = updateGroup(patch).getAny();\n         assertNotNull(groupTO);\n         assertEquals(\"11.257\", groupTO.getPlainAttrMap().get(doubleSchemaName).getValues().get(0));\n \n@@ -857,7 +863,7 @@ public void issueSYNCOPE717() {\n         patch.setKey(groupTO.getKey());\n         patch.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(doubleSchemaName, \"11.23\")).build());\n \n-        groupTO = updateGroup(patch);\n+        groupTO = updateGroup(patch).getAny();\n         assertNotNull(groupTO);\n         assertEquals(\"11.23\", groupTO.getPlainAttrMap().get(doubleSchemaName).getValues().get(0));\n     }"},{"sha":"64f000858ad2d3a92e21f482c0608983a7bac076","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/MultitenancyITCase.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -26,6 +26,7 @@\n import java.security.AccessControlException;\n import java.util.List;\n import java.util.Locale;\n+import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n@@ -36,6 +37,7 @@\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n@@ -120,7 +122,8 @@ public void createUser() {\n         Response response = adminClient.getService(UserService.class).create(user);\n         assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n \n-        user = response.readEntity(UserTO.class);\n+        user = response.readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getAny();\n         assertNotNull(user);\n     }\n "},{"sha":"853b17c48d844038f94147df6828cccdeb8a3168","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/NotificationTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationTaskITCase.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -329,7 +329,7 @@ public void issueSYNCOPE446() throws Exception {\n         GroupTO groupTO = new GroupTO();\n         groupTO.setName(groupName);\n         groupTO.setRealm(\"/even/two\");\n-        groupTO = createGroup(groupTO);\n+        groupTO = createGroup(groupTO).getAny();\n         assertNotNull(groupTO);\n \n         // 3. verify\n@@ -385,7 +385,7 @@ private String createNotificationTask(final boolean active, final boolean includ\n         UserTO userTO = UserITCase.getUniqueSampleTO(MAIL_ADDRESS);\n         userTO.getMemberships().add(new MembershipTO.Builder().group(7L).build());\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n         return userTO.getUsername();\n     }"},{"sha":"d275712b2c560584668e03128bfcda63143955e8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PlainSchemaITCase.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -27,12 +27,14 @@\n \n import java.security.AccessControlException;\n import java.util.List;\n+import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -213,7 +215,7 @@ public void issue258() {\n         userTO.getAuxClasses().add(typeClass.getKey());\n         userTO.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"1.2\"));\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n \n         schemaTO.setType(AttrSchemaType.Long);\n@@ -241,13 +243,14 @@ public void issue259() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"issue259@syncope.apache.org\");\n         userTO.getAuxClasses().add(typeClass.getKey());\n         userTO.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"1\"));\n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n \n         UserTO newUserTO = SerializationUtils.clone(userTO);\n         newUserTO.getMemberships().add(new MembershipTO.Builder().group(2L).build());\n \n-        userTO = userService.update(newUserTO).readEntity(UserTO.class);\n+        userTO = userService.update(newUserTO).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getAny();\n         assertNotNull(userTO);\n     }\n \n@@ -267,7 +270,7 @@ public void issue260() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"issue260@syncope.apache.org\");\n         userTO.getAuxClasses().add(typeClass.getKey());\n         userTO.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"1.2\"));\n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n \n         schemaTO.setUniqueConstraint(false);"},{"sha":"91b784001f867b4b6d3031243c984af3668997d1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PushTaskITCase.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -274,7 +274,7 @@ public void issueSYNCOPE598() {\n \n         groupTO.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"all\"));\n \n-        groupTO = createGroup(groupTO);\n+        groupTO = createGroup(groupTO).getAny();\n         assertNotNull(groupTO);\n \n         String resourceName = \"resource-ldap-grouponly\";\n@@ -319,6 +319,8 @@ public void issueSYNCOPE598() {\n             task.setPerformUpdate(true);\n             task.setUnmatchingRule(UnmatchingRule.ASSIGN);\n             task.setMatchingRule(MatchingRule.UPDATE);\n+            task.getFilters().put(AnyTypeKind.GROUP.name(),\n+                    SyncopeClient.getGroupSearchConditionBuilder().is(\"name\").equalTo(groupTO.getName()).query());\n \n             response = taskService.create(task);\n             PushTaskTO push = getObject(response.getLocation(), TaskService.class, PushTaskTO.class);"},{"sha":"86f3b1dc646a2a3a377544e3445b5958449e368f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ReportITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -140,7 +140,7 @@ public void delete() {\n     }\n \n     private void checkExport(final Long execId, final ReportExecExportFormat fmt) throws IOException {\n-        final Response response = reportService.exportExecutionResult(execId, fmt);\n+        Response response = reportService.exportExecutionResult(execId, fmt);\n         assertNotNull(response);\n         assertEquals(Response.Status.OK.getStatusCode(), response.getStatusInfo().getStatusCode());\n         assertNotNull(response.getHeaderString(HttpHeaders.CONTENT_DISPOSITION));"},{"sha":"90f57963e61133592b45d7b4dcf9b0db3fe65c04","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ResourceITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -455,7 +455,7 @@ public void list() {\n     public void read() {\n         ResourceTO resource = resourceService.read(RESOURCE_NAME_DBVIRATTR);\n         assertNotNull(resource);\n-        \n+\n         ProvisionTO provision = resource.getProvision(AnyTypeKind.USER.name());\n         assertNotNull(provision);\n         assertFalse(provision.getMapping().getItems().isEmpty());\n@@ -535,7 +535,7 @@ public void listConnObjects() {\n         for (int i = 0; i < 10; i++) {\n             GroupTO group = GroupITCase.getSampleTO(\"group\");\n             group.getResources().add(RESOURCE_NAME_LDAP);\n-            group = createGroup(group);\n+            group = createGroup(group).getAny();\n             groupKeys.add(group.getKey());\n         }\n \n@@ -575,7 +575,7 @@ public String transform(final ConnObjectTO input) {\n                     builder.pagedResultsCookie(list.getPagedResultsCookie());\n                 }\n             } while (list.getPagedResultsCookie() != null);\n-            \n+\n             assertEquals(totalRead, read.size());\n             assertTrue(totalRead >= 10);\n         } finally {"},{"sha":"59d158dc190899e0a7f2c79ac1e87727ccf939fa","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SearchITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -119,7 +119,7 @@ public boolean evaluate(final UserTO user) {\n     public void searchByDynGroup() {\n         GroupTO group = GroupITCase.getBasicSampleTO(\"dynMembership\");\n         group.setUDynMembershipCond(\"cool==true\");\n-        group = createGroup(group);\n+        group = createGroup(group).getAny();\n         assertNotNull(group);\n \n         PagedResult<UserTO> matchingUsers = userService.search("},{"sha":"aed0682642c9d931e73ef6da4a4b3934788bb015","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SyncTaskITCase.java","status":"modified","additions":14,"deletions":12,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -53,6 +53,7 @@\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.policy.SyncPolicyTO;\n import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -153,7 +154,7 @@ public void sync() throws Exception {\n         inUserTO.getAuxClasses().add(\"csv\");\n         inUserTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n-        inUserTO = createUser(inUserTO);\n+        inUserTO = createUser(inUserTO).getAny();\n         assertNotNull(inUserTO);\n         assertFalse(inUserTO.getResources().contains(RESOURCE_NAME_CSV));\n \n@@ -388,7 +389,7 @@ public boolean evaluate(final MappingItemTO object) {\n             String originalLocation = anyObjectTO.getPlainAttrMap().get(\"location\").getValues().get(0);\n             assertFalse(originalLocation.startsWith(PrefixMappingItemTransformer.PREFIX));\n \n-            anyObjectTO = createAnyObject(anyObjectTO);\n+            anyObjectTO = createAnyObject(anyObjectTO).getAny();\n             assertNotNull(anyObjectTO);\n \n             // 2. verify that PrefixMappingItemTransformer was applied during propagation\n@@ -456,7 +457,7 @@ public void issueSYNCOPE68() {\n \n         userTO.getMemberships().add(new MembershipTO.Builder().group(7L).build());\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n         assertEquals(\"testuser2\", userTO.getUsername());\n         assertEquals(1, userTO.getMemberships().size());\n@@ -496,7 +497,7 @@ public void issueSYNCOPE68() {\n             assertEquals(2, userTO.getMemberships().size());\n             assertEquals(4, userTO.getResources().size());\n         } finally {\n-            UserTO dUserTO = deleteUser(userTO.getKey());\n+            UserTO dUserTO = deleteUser(userTO.getKey()).getAny();\n             assertNotNull(dUserTO);\n         }\n     }\n@@ -560,7 +561,7 @@ public void issueSYNCOPE258() {\n         userTO.getResources().clear();\n         userTO.getResources().add(RESOURCE_NAME_WS2);\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n \n         // change email in order to unmatch the second user\n         UserPatch userPatch = new UserPatch();\n@@ -587,11 +588,12 @@ public void issueSYNCOPE272() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope272@syncope.apache.org\");\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n \n-        userTO = createUser(userTO);\n+        ProvisioningResult<UserTO> result = createUser(userTO);\n+        userTO = result.getAny();\n         try {\n             assertNotNull(userTO);\n-            assertEquals(1, userTO.getPropagationStatusTOs().size());\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationStatusTOs().get(0).getStatus());\n+            assertEquals(1, result.getPropagationStatuses().size());\n+            assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n \n             TaskExecTO taskExecTO = execProvisioningTask(taskService, 24L, 50, false);\n \n@@ -621,7 +623,7 @@ public void issueSYNCOPE307() {\n         userTO.getResources().clear();\n         userTO.getResources().add(RESOURCE_NAME_WS2);\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n \n         userTO = userService.read(userTO.getKey());\n@@ -665,7 +667,7 @@ public void issueSYNCOPE313DB() throws Exception {\n         UserTO user = UserITCase.getUniqueSampleTO(\"syncope313-db@syncope.apache.org\");\n         user.setPassword(\"security123\");\n         user.getResources().add(RESOURCE_NAME_TESTDB);\n-        user = createUser(user);\n+        user = createUser(user).getAny();\n         assertNotNull(user);\n         assertFalse(user.getResources().isEmpty());\n \n@@ -721,7 +723,7 @@ public void issueSYNCOPE313LDAP() throws Exception {\n         UserTO user = UserITCase.getUniqueSampleTO(\"syncope313-ldap@syncope.apache.org\");\n         user.setPassword(oldCleanPassword);\n         user.getResources().add(RESOURCE_NAME_LDAP);\n-        user = createUser(user);\n+        user = createUser(user).getAny();\n         assertNotNull(user);\n         assertFalse(user.getResources().isEmpty());\n \n@@ -730,7 +732,7 @@ public void issueSYNCOPE313LDAP() throws Exception {\n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(user.getKey());\n         userPatch.setPassword(new PasswordPatch.Builder().value(newCleanPassword).build());\n-        user = updateUser(userPatch);\n+        user = updateUser(userPatch).getAny();\n \n         // 3. Check that the Syncope user now has the changed password\n         Pair<Map<String, Set<String>>, UserTO> self = clientFactory.create(user.getUsername(), newCleanPassword).self();"},{"sha":"0fb428d9735da399013d10196e748a38d3cce5c8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":273,"deletions":193,"changes":466,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -33,13 +33,17 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Date;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import javax.naming.NamingException;\n import javax.ws.rs.core.EntityTag;\n+import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.common.util.Base64Utility;\n@@ -72,6 +76,7 @@\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -164,12 +169,12 @@ public void createUserWithNoPropagation() {\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n-        long newMaxId = tasks.getResult().iterator().next().getKey();\n+        long newMaxKey = tasks.getResult().iterator().next().getKey();\n \n-        assertTrue(newMaxId > maxKey);\n+        assertTrue(newMaxKey > maxKey);\n \n         // get last task\n-        PropagationTaskTO taskTO = taskService.read(newMaxId);\n+        PropagationTaskTO taskTO = taskService.read(newMaxKey);\n         assertNotNull(taskTO);\n         assertFalse(taskTO.getExecutions().isEmpty());\n         assertEquals(PropagationTaskExecStatus.NOT_ATTEMPTED.name(), taskTO.getExecutions().get(0).getStatus());\n@@ -188,7 +193,7 @@ public void issue186() {\n         userTO.getPlainAttrs().add(attrTO(\"fullname\", userId));\n         userTO.getPlainAttrs().add(attrTO(\"surname\", userId));\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n         assertTrue(userTO.getResources().isEmpty());\n \n@@ -200,25 +205,26 @@ public void issue186() {\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS2).build());\n \n         try {\n-            userTO = updateUser(userPatch);\n+            userTO = updateUser(userPatch).getAny();\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n         }\n \n         // 3. update assigning a resource NOT forcing mandatory constraints\n-        // AND primary: must fail with PropagationException\n+        // AND priority: must fail with PropagationException\n         userPatch = new UserPatch();\n         userPatch.setKey(userTO.getKey());\n         userPatch.setPassword(new PasswordPatch.Builder().value(\"newPassword123\").build());\n         userPatch.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS1).build());\n \n-        userTO = updateUser(userPatch);\n-        assertNotNull(userTO.getPropagationStatusTOs().get(0).getFailureReason());\n+        ProvisioningResult<UserTO> result = updateUser(userPatch);\n+        assertNotNull(result.getPropagationStatuses().get(0).getFailureReason());\n+        userTO = result.getAny();\n \n         // 4. update assigning a resource NOT forcing mandatory constraints\n-        // BUT not primary: must succeed\n+        // BUT not priority: must succeed\n         userPatch = new UserPatch();\n         userPatch.setKey(userTO.getKey());\n         userPatch.setPassword(new PasswordPatch.Builder().value(\"newPassword123456\").build());\n@@ -244,14 +250,14 @@ public void enforceMandatoryCondition() {\n         userTO.getPlainAttrs().remove(type);\n \n         try {\n-            userTO = createUser(userTO);\n+            userTO = createUser(userTO).getAny();\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n         }\n \n         userTO.getPlainAttrs().add(type);\n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n     }\n \n@@ -271,7 +277,7 @@ public void enforceMandatoryConditionOnDerived() {\n         userTO.setPassword(\"newPassword12\");\n \n         try {\n-            userTO = createUser(userTO);\n+            userTO = createUser(userTO).getAny();\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n@@ -280,7 +286,7 @@ public void enforceMandatoryConditionOnDerived() {\n         userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n         assertEquals(Collections.singleton(\"resource-csv-enforcing\"), userTO.getResources());\n     }\n@@ -289,10 +295,10 @@ public void enforceMandatoryConditionOnDerived() {\n     public void createUserWithDbPropagation() {\n         UserTO userTO = getUniqueSampleTO(\"yyy@yyy.yyy\");\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n-        userTO = createUser(userTO);\n-        assertNotNull(userTO);\n-        assertEquals(1, userTO.getPropagationStatusTOs().size());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationStatusTOs().get(0).getStatus());\n+        ProvisioningResult<UserTO> result = createUser(userTO);\n+        assertNotNull(result);\n+        assertEquals(1, result.getPropagationStatuses().size());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n     }\n \n     @Test(expected = SyncopeClientException.class)\n@@ -368,7 +374,7 @@ public void create() {\n         userTO.getPlainAttrs().add(attrTO(\"activationDate\", null));\n \n         // 1. create user\n-        UserTO newUserTO = createUser(userTO);\n+        UserTO newUserTO = createUser(userTO).getAny();\n \n         assertNotNull(newUserTO);\n \n@@ -480,19 +486,19 @@ public void delete() {\n         // specify a propagation\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n \n         long key = userTO.getKey();\n \n-        userTO = deleteUser(key);\n-\n-        assertNotNull(userTO);\n+        ProvisioningResult<UserTO> result = deleteUser(key);\n+        assertNotNull(result);\n+        userTO = result.getAny();\n         assertEquals(key, userTO.getKey());\n         assertTrue(userTO.getPlainAttrs().isEmpty());\n \n         // check for propagation result\n-        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationStatusTOs().get(0).getStatus());\n+        assertFalse(result.getPropagationStatuses().isEmpty());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n \n         try {\n             userService.delete(userTO.getKey());\n@@ -508,19 +514,20 @@ public void deleteByUsername() {\n         // specify a propagation\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n \n-        long id = userTO.getKey();\n-        userTO = userService.read(id);\n-        userTO = deleteUser(userTO.getKey());\n+        long key = userTO.getKey();\n+        userTO = userService.read(key);\n \n-        assertNotNull(userTO);\n-        assertEquals(id, userTO.getKey());\n+        ProvisioningResult<UserTO> result = deleteUser(userTO.getKey());\n+        assertNotNull(result);\n+        userTO = result.getAny();\n+        assertEquals(key, userTO.getKey());\n         assertTrue(userTO.getPlainAttrs().isEmpty());\n \n         // check for propagation result\n-        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationStatusTOs().get(0).getStatus());\n+        assertFalse(result.getPropagationStatuses().isEmpty());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n \n         try {\n             userService.read(userTO.getKey());\n@@ -577,7 +584,7 @@ public void read() {\n \n     @Test\n     public void readWithMailAddressAsUserName() {\n-        UserTO userTO = createUser(getUniqueSampleTO(\"mail@domain.org\"));\n+        UserTO userTO = createUser(getUniqueSampleTO(\"mail@domain.org\")).getAny();\n         userTO = userService.read(userTO.getKey());\n         assertNotNull(userTO);\n     }\n@@ -586,7 +593,7 @@ public void readWithMailAddressAsUserName() {\n     public void updateWithouPassword() {\n         UserTO userTO = getUniqueSampleTO(\"updatewithout@password.com\");\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n \n         assertNotNull(userTO);\n \n@@ -596,7 +603,7 @@ public void updateWithouPassword() {\n                 attrTO(new AttrTO.Builder().schema(\"cn\").build()).\n                 build());\n \n-        userTO = updateUser(userPatch);\n+        userTO = updateUser(userPatch).getAny();\n \n         assertNotNull(userTO);\n         assertNotNull(userTO.getDerAttrMap());\n@@ -607,7 +614,7 @@ public void updateWithouPassword() {\n     public void updateInvalidPassword() {\n         UserTO userTO = getSampleTO(\"updateinvalid@password.com\");\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n \n         UserPatch userPatch = new UserPatch();\n@@ -622,7 +629,7 @@ public void updateSamePassword() {\n         UserTO userTO = getUniqueSampleTO(\"updatesame@password.com\");\n         userTO.setRealm(\"/even/two\");\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n \n         UserPatch userPatch = new UserPatch();\n@@ -638,7 +645,7 @@ public void update() {\n \n         userTO.getMemberships().add(new MembershipTO.Builder().group(8L).build());\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n \n         assertFalse(userTO.getDerAttrs().isEmpty());\n         assertEquals(1, userTO.getMemberships().size());\n@@ -660,7 +667,7 @@ public void update() {\n         userPatch.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n                 membershipTO(userTO.getMemberships().get(0)).build());\n \n-        userTO = updateUser(userPatch);\n+        userTO = updateUser(userPatch).getAny();\n         assertNotNull(userTO);\n \n         // issue SYNCOPE-15\n@@ -689,13 +696,13 @@ public void updatePasswordOnly() {\n         UserTO userTO = getUniqueSampleTO(\"pwdonly@t.com\");\n         userTO.getMemberships().add(new MembershipTO.Builder().group(8L).build());\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n \n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(userTO.getKey());\n         userPatch.setPassword(new PasswordPatch.Builder().value(\"newPassword123\").resource(RESOURCE_NAME_WS2).build());\n \n-        userTO = updateUser(userPatch);\n+        userTO = updateUser(userPatch).getAny();\n \n         // check for changePwdDate\n         assertNotNull(userTO.getChangePwdDate());\n@@ -728,7 +735,7 @@ public void verifyTaskRegistration() {\n         userTO.getMemberships().add(new MembershipTO.Builder().group(8L).build());\n \n         // 1. create user\n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n \n         // get the new task list\n@@ -753,7 +760,7 @@ public void verifyTaskRegistration() {\n \n         userPatch.getPlainAttrs().add(attrAddReplacePatch(\"surname\", \"surname2\"));\n \n-        userTO = updateUser(userPatch);\n+        userTO = updateUser(userPatch).getAny();\n \n         assertNotNull(userTO);\n \n@@ -800,7 +807,7 @@ public void createActivate() {\n \n         userTO.getMemberships().add(new MembershipTO.Builder().group(11L).build());\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n \n         assertNotNull(userTO);\n         assertNotNull(userTO.getToken());\n@@ -812,7 +819,8 @@ public void createActivate() {\n         statusPatch.setKey(userTO.getKey());\n         statusPatch.setType(StatusPatchType.ACTIVATE);\n         statusPatch.setToken(userTO.getToken());\n-        userTO = userService.status(statusPatch).readEntity(UserTO.class);\n+        userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getAny();\n \n         assertNotNull(userTO);\n         assertNull(userTO.getToken());\n@@ -826,7 +834,7 @@ public void suspendReactivate() {\n \n         userTO.getMemberships().add(new MembershipTO.Builder().group(7L).build());\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n \n         assertNotNull(userTO);\n         assertEquals(ActivitiDetector.isActivitiEnabledForUsers(syncopeService)\n@@ -836,14 +844,16 @@ public void suspendReactivate() {\n         StatusPatch statusPatch = new StatusPatch();\n         statusPatch.setKey(userTO.getKey());\n         statusPatch.setType(StatusPatchType.SUSPEND);\n-        userTO = userService.status(statusPatch).readEntity(UserTO.class);\n+        userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getAny();\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n         statusPatch = new StatusPatch();\n         statusPatch.setKey(userTO.getKey());\n         statusPatch.setType(StatusPatchType.REACTIVATE);\n-        userTO = userService.status(statusPatch).readEntity(UserTO.class);\n+        userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getAny();\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n     }\n@@ -862,7 +872,7 @@ public void suspendReactivateOnResource() {\n         userTO.getResources().clear();\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n         userTO.getResources().add(RESOURCE_NAME_LDAP);\n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n         assertEquals(ActivitiDetector.isActivitiEnabledForUsers(syncopeService)\n                 ? \"active\"\n@@ -876,7 +886,8 @@ public void suspendReactivateOnResource() {\n         statusPatch.setOnSyncope(true);\n         statusPatch.getResources().add(RESOURCE_NAME_TESTDB);\n         statusPatch.getResources().add(RESOURCE_NAME_LDAP);\n-        userTO = userService.status(statusPatch).readEntity(UserTO.class);\n+        userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getAny();\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n@@ -895,7 +906,8 @@ public void suspendReactivateOnResource() {\n         statusPatch.getResources().add(RESOURCE_NAME_LDAP);\n         userService.status(statusPatch);\n         statusPatch.setType(StatusPatchType.REACTIVATE);\n-        userTO = userService.status(statusPatch).readEntity(UserTO.class);\n+        userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getAny();\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n@@ -909,7 +921,8 @@ public void suspendReactivateOnResource() {\n         statusPatch.setOnSyncope(true);\n         statusPatch.getResources().add(RESOURCE_NAME_TESTDB);\n \n-        userTO = userService.status(statusPatch).readEntity(UserTO.class);\n+        userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getAny();\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n \n@@ -924,7 +937,7 @@ public void updateMultivalueAttribute() {\n         userTO.getDerAttrs().clear();\n         userTO.getVirAttrs().clear();\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n \n         AttrTO loginDate = userTO.getPlainAttrMap().get(\"loginDate\");\n@@ -938,20 +951,71 @@ public void updateMultivalueAttribute() {\n         userPatch.getPlainAttrs().add(new AttrPatch.Builder().\n                 operation(PatchOperation.ADD_REPLACE).attrTO(loginDate).build());\n \n-        userTO = updateUser(userPatch);\n+        userTO = updateUser(userPatch).getAny();\n         assertNotNull(userTO);\n \n         loginDate = userTO.getPlainAttrMap().get(\"loginDate\");\n         assertNotNull(loginDate);\n         assertEquals(2, loginDate.getValues().size());\n     }\n \n+    private void verifyAsyncResult(final List<PropagationStatus> statuses) {\n+        assertEquals(3, statuses.size());\n+\n+        Map<String, PropagationStatus> byResource = new HashMap<>(3);\n+        MapUtils.populateMap(byResource, statuses, new Transformer<PropagationStatus, String>() {\n+\n+            @Override\n+            public String transform(final PropagationStatus status) {\n+                return status.getResource();\n+            }\n+        });\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, byResource.get(RESOURCE_NAME_LDAP).getStatus());\n+        assertEquals(PropagationTaskExecStatus.CREATED, byResource.get(RESOURCE_NAME_TESTDB).getStatus());\n+        assertEquals(PropagationTaskExecStatus.CREATED, byResource.get(RESOURCE_NAME_TESTDB2).getStatus());\n+    }\n+\n+    @Test\n+    public void async() {\n+        UserService asyncService =\n+                clientFactory.create(ADMIN_UNAME, ADMIN_PWD).nullPriorityAsync(UserService.class, true);\n+\n+        UserTO user = getUniqueSampleTO(\"async@syncope.apache.org\");\n+        user.getResources().add(RESOURCE_NAME_TESTDB);\n+        user.getResources().add(RESOURCE_NAME_TESTDB2);\n+        user.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        ProvisioningResult<UserTO> result = asyncService.create(user).readEntity(\n+                new GenericType<ProvisioningResult<UserTO>>() {\n+                });\n+        assertNotNull(result);\n+        verifyAsyncResult(result.getPropagationStatuses());\n+\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(result.getAny().getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().\n+                onSyncope(true).resources(RESOURCE_NAME_LDAP, RESOURCE_NAME_TESTDB, RESOURCE_NAME_TESTDB2).\n+                value(\"password321\").build());\n+\n+        result = asyncService.update(userPatch).readEntity(\n+                new GenericType<ProvisioningResult<UserTO>>() {\n+                });\n+        assertNotNull(result);\n+        verifyAsyncResult(result.getPropagationStatuses());\n+\n+        result = asyncService.delete(result.getAny().getKey()).readEntity(\n+                new GenericType<ProvisioningResult<UserTO>>() {\n+                });\n+        assertNotNull(result);\n+        verifyAsyncResult(result.getPropagationStatuses());\n+    }\n+\n     @Test(expected = EmptyResultDataAccessException.class)\n     public void issue213() {\n         UserTO userTO = getUniqueSampleTO(\"issue213@syncope.apache.org\");\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n         assertEquals(1, userTO.getResources().size());\n \n@@ -968,7 +1032,7 @@ public void issue213() {\n         userPatch.getResources().add(\n                 new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(RESOURCE_NAME_TESTDB).build());\n \n-        userTO = updateUser(userPatch);\n+        userTO = updateUser(userPatch).getAny();\n         assertTrue(userTO.getResources().isEmpty());\n \n         jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\", String.class, userTO.getUsername());\n@@ -979,15 +1043,15 @@ public void issue234() {\n         UserTO inUserTO = getUniqueSampleTO(\"issue234@syncope.apache.org\");\n         inUserTO.getResources().add(RESOURCE_NAME_LDAP);\n \n-        UserTO userTO = createUser(inUserTO);\n+        UserTO userTO = createUser(inUserTO).getAny();\n         assertNotNull(userTO);\n \n         UserPatch userPatch = new UserPatch();\n \n         userPatch.setKey(userTO.getKey());\n         userPatch.setUsername(new StringReplacePatchItem.Builder().value(\"1\" + userTO.getUsername()).build());\n \n-        userTO = updateUser(userPatch);\n+        userTO = updateUser(userPatch).getAny();\n         assertNotNull(userTO);\n         assertEquals(\"1\" + inUserTO.getUsername(), userTO.getUsername());\n     }\n@@ -999,7 +1063,7 @@ public final void issue280() {\n         userTO.getMemberships().clear();\n         userTO.getDerAttrs().clear();\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n \n         UserPatch userPatch = new UserPatch();\n@@ -1009,10 +1073,10 @@ public final void issue280() {\n         userPatch.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());\n \n-        userTO = updateUser(userPatch);\n-        assertNotNull(userTO);\n+        ProvisioningResult<UserTO> result = updateUser(userPatch);\n+        assertNotNull(result);\n \n-        List<PropagationStatus> propagations = userTO.getPropagationStatusTOs();\n+        List<PropagationStatus> propagations = result.getPropagationStatuses();\n         assertNotNull(propagations);\n         assertEquals(1, propagations.size());\n \n@@ -1030,13 +1094,12 @@ public void issue281() {\n         userTO.getDerAttrs().clear();\n         userTO.getResources().add(RESOURCE_NAME_CSV);\n \n-        userTO = createUser(userTO);\n-        assertNotNull(userTO);\n+        ProvisioningResult<UserTO> result = createUser(userTO);\n+        assertNotNull(result);\n \n-        List<PropagationStatus> propagations = userTO.getPropagationStatusTOs();\n+        List<PropagationStatus> propagations = result.getPropagationStatuses();\n         assertNotNull(propagations);\n         assertEquals(1, propagations.size());\n-\n         assertNotEquals(PropagationTaskExecStatus.SUCCESS, propagations.get(0).getStatus());\n \n         String resource = propagations.get(0).getResource();\n@@ -1071,7 +1134,7 @@ public void groupAttrPropagation() {\n \n         userTO.getResources().add(RESOURCE_NAME_CSV);\n \n-        UserTO actual = createUser(userTO);\n+        UserTO actual = createUser(userTO).getAny();\n         assertNotNull(actual);\n         assertNotNull(actual.getDerAttrMap().get(\"csvuserid\"));\n \n@@ -1159,7 +1222,7 @@ public void customPolicyRules() {\n             }\n \n             user.setUsername(\"YYY\" + user.getUsername());\n-            user = createUser(user);\n+            user = createUser(user).getAny();\n             assertNotNull(user);\n         } finally {\n             realm.setAccountPolicy(oldAccountPolicy);\n@@ -1186,66 +1249,66 @@ public void issueSYNCOPE108() {\n \n         userTO.getResources().add(RESOURCE_NAME_CSV);\n \n-        UserTO actual = createUser(userTO);\n-        assertNotNull(actual);\n-        assertEquals(2, actual.getMemberships().size());\n-        assertEquals(1, actual.getResources().size());\n+        userTO = createUser(userTO).getAny();\n+        assertNotNull(userTO);\n+        assertEquals(2, userTO.getMemberships().size());\n+        assertEquals(1, userTO.getResources().size());\n \n         ConnObjectTO connObjectTO =\n-                resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey());\n+                resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n         assertNotNull(connObjectTO);\n \n         // -----------------------------------\n         // Remove the first membership: de-provisioning shouldn't happen\n         // -----------------------------------\n         UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(actual.getKey());\n+        userPatch.setKey(userTO.getKey());\n \n         userPatch.getMemberships().add(new MembershipPatch.Builder().\n-                operation(PatchOperation.DELETE).membershipTO(actual.getMemberships().get(0)).build());\n+                operation(PatchOperation.DELETE).membershipTO(userTO.getMemberships().get(0)).build());\n \n-        actual = updateUser(userPatch);\n-        assertNotNull(actual);\n-        assertEquals(1, actual.getMemberships().size());\n+        userTO = updateUser(userPatch).getAny();\n+        assertNotNull(userTO);\n+        assertEquals(1, userTO.getMemberships().size());\n \n-        connObjectTO = resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey());\n+        connObjectTO = resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n         assertNotNull(connObjectTO);\n         // -----------------------------------\n \n         // -----------------------------------\n         // Remove the resource assigned directly: de-provisioning shouldn't happen\n         // -----------------------------------\n         userPatch = new UserPatch();\n-        userPatch.setKey(actual.getKey());\n+        userPatch.setKey(userTO.getKey());\n \n         userPatch.getResources().add(new StringPatchItem.Builder().operation(PatchOperation.DELETE).\n-                value(actual.getResources().iterator().next()).build());\n+                value(userTO.getResources().iterator().next()).build());\n \n-        actual = updateUser(userPatch);\n-        assertNotNull(actual);\n-        assertEquals(1, actual.getMemberships().size());\n-        assertFalse(actual.getResources().isEmpty());\n+        userTO = updateUser(userPatch).getAny();\n+        assertNotNull(userTO);\n+        assertEquals(1, userTO.getMemberships().size());\n+        assertFalse(userTO.getResources().isEmpty());\n \n-        connObjectTO = resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey());\n+        connObjectTO = resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n         assertNotNull(connObjectTO);\n         // -----------------------------------\n \n         // -----------------------------------\n         // Remove the first membership: de-provisioning should happen\n         // -----------------------------------\n         userPatch = new UserPatch();\n-        userPatch.setKey(actual.getKey());\n+        userPatch.setKey(userTO.getKey());\n \n         userPatch.getMemberships().add(new MembershipPatch.Builder().\n-                operation(PatchOperation.DELETE).membershipTO(actual.getMemberships().get(0)).build());\n+                operation(PatchOperation.DELETE).membershipTO(userTO.getMemberships().get(0)).build());\n \n-        actual = updateUser(userPatch);\n-        assertNotNull(actual);\n-        assertTrue(actual.getMemberships().isEmpty());\n-        assertTrue(actual.getResources().isEmpty());\n+        userTO = updateUser(userPatch).getAny();\n+        assertNotNull(userTO);\n+        assertTrue(userTO.getMemberships().isEmpty());\n+        assertTrue(userTO.getResources().isEmpty());\n \n         try {\n-            resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey());\n+            resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n             fail(\"Read should not succeeed\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n@@ -1259,11 +1322,12 @@ public void issueSYNCOPE185() {\n         userTO.getVirAttrs().clear();\n         userTO.getResources().add(RESOURCE_NAME_LDAP);\n \n-        userTO = createUser(userTO);\n-        assertNotNull(userTO);\n-        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n-        assertEquals(RESOURCE_NAME_LDAP, userTO.getPropagationStatusTOs().get(0).getResource());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationStatusTOs().get(0).getStatus());\n+        ProvisioningResult<UserTO> result = createUser(userTO);\n+        assertNotNull(result);\n+        assertFalse(result.getPropagationStatuses().isEmpty());\n+        assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        userTO = result.getAny();\n \n         // 2. delete this user\n         userService.delete(userTO.getKey());\n@@ -1315,11 +1379,12 @@ public void issueSYNCOPE267() {\n         userTO.getResources().clear();\n         userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n \n-        userTO = createUser(userTO);\n-        assertNotNull(userTO);\n-        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n-        assertEquals(RESOURCE_NAME_DBVIRATTR, userTO.getPropagationStatusTOs().get(0).getResource());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationStatusTOs().get(0).getStatus());\n+        ProvisioningResult<UserTO> result = createUser(userTO);\n+        assertNotNull(result);\n+        assertFalse(result.getPropagationStatuses().isEmpty());\n+        assertEquals(RESOURCE_NAME_DBVIRATTR, result.getPropagationStatuses().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        userTO = result.getAny();\n \n         ConnObjectTO connObjectTO =\n                 resourceService.readConnObject(RESOURCE_NAME_DBVIRATTR, AnyTypeKind.USER.name(), userTO.getKey());\n@@ -1339,7 +1404,7 @@ public void issueSYNCOPE266() {\n         UserTO userTO = getUniqueSampleTO(\"syncope266@apache.org\");\n         userTO.getResources().clear();\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n \n         UserPatch userPatch = new UserPatch();\n@@ -1349,7 +1414,7 @@ public void issueSYNCOPE266() {\n         userPatch.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_UPDATE).build());\n \n-        userTO = updateUser(userPatch);\n+        userTO = updateUser(userPatch).getAny();\n         assertNotNull(userTO);\n     }\n \n@@ -1358,10 +1423,10 @@ public void issueSYNCOPE279() {\n         UserTO userTO = getUniqueSampleTO(\"syncope279@apache.org\");\n         userTO.getResources().clear();\n         userTO.getResources().add(RESOURCE_NAME_TIMEOUT);\n-        userTO = createUser(userTO);\n-        assertEquals(RESOURCE_NAME_TIMEOUT, userTO.getPropagationStatusTOs().get(0).getResource());\n-        assertNotNull(userTO.getPropagationStatusTOs().get(0).getFailureReason());\n-        assertEquals(PropagationTaskExecStatus.FAILURE, userTO.getPropagationStatusTOs().get(0).getStatus());\n+        ProvisioningResult<UserTO> result = createUser(userTO);\n+        assertEquals(RESOURCE_NAME_TIMEOUT, result.getPropagationStatuses().get(0).getResource());\n+        assertNotNull(result.getPropagationStatuses().get(0).getFailureReason());\n+        assertEquals(PropagationTaskExecStatus.FAILURE, result.getPropagationStatuses().get(0).getStatus());\n     }\n \n     @Test\n@@ -1373,7 +1438,7 @@ public void issueSYNCOPE122() {\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n         userTO.getResources().add(RESOURCE_NAME_TESTDB2);\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_TESTDB));\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_TESTDB2));\n@@ -1402,12 +1467,13 @@ public void issueSYNCOPE122() {\n         userPatch.setPassword(new PasswordPatch.Builder().value(getUUIDString()).onSyncope(false).\n                 resource(RESOURCE_NAME_TESTDB).build());\n \n-        userTO = updateUser(userPatch);\n+        ProvisioningResult<UserTO> result = updateUser(userPatch);\n+        userTO = result.getAny();\n \n         // 3a. Chech that only a single propagation took place\n-        assertNotNull(userTO.getPropagationStatusTOs());\n-        assertEquals(1, userTO.getPropagationStatusTOs().size());\n-        assertEquals(RESOURCE_NAME_TESTDB, userTO.getPropagationStatusTOs().iterator().next().getResource());\n+        assertNotNull(result.getPropagationStatuses());\n+        assertEquals(1, result.getPropagationStatuses().size());\n+        assertEquals(RESOURCE_NAME_TESTDB, result.getPropagationStatuses().iterator().next().getResource());\n \n         // 3b. verify that password hasn't changed on Syncope\n         assertEquals(pwdOnSyncope, userTO.getPassword());\n@@ -1444,21 +1510,22 @@ public void isseSYNCOPE136AES() {\n             UserTO userTO = getUniqueSampleTO(\"syncope136_AES@apache.org\");\n             userTO.getResources().clear();\n \n-            userTO = createUser(userTO);\n+            userTO = createUser(userTO).getAny();\n             assertNotNull(userTO);\n \n-            // 4. update user, assign a propagation primary resource but don't provide any password\n+            // 4. update user, assign a propagation priority resource but don't provide any password\n             UserPatch userPatch = new UserPatch();\n             userPatch.setKey(userTO.getKey());\n             userPatch.getResources().add(new StringPatchItem.Builder().\n                     operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS1).build());\n             userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_WS1).build());\n \n-            userTO = updateUser(userPatch);\n-            assertNotNull(userTO);\n+            ProvisioningResult<UserTO> result = updateUser(userPatch);\n+            assertNotNull(result);\n+            userTO = result.getAny();\n \n             // 5. verify that propagation was successful\n-            List<PropagationStatus> props = userTO.getPropagationStatusTOs();\n+            List<PropagationStatus> props = result.getPropagationStatuses();\n             assertNotNull(props);\n             assertEquals(1, props.size());\n             PropagationStatus prop = props.iterator().next();\n@@ -1477,21 +1544,21 @@ public void isseSYNCOPE136Random() {\n         // 1. create user with no resources\n         UserTO userTO = getUniqueSampleTO(\"syncope136_Random@apache.org\");\n         userTO.getResources().clear();\n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n \n-        // 2. update user, assign a propagation primary resource but don't provide any password\n+        // 2. update user, assign a propagation priority resource but don't provide any password\n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(userTO.getKey());\n         userPatch.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_LDAP).build());\n         userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_LDAP).build());\n \n-        userTO = updateUser(userPatch);\n-        assertNotNull(userTO);\n+        ProvisioningResult<UserTO> result = updateUser(userPatch);\n+        assertNotNull(result);\n \n         // 3. verify that propagation was successful\n-        List<PropagationStatus> props = userTO.getPropagationStatusTOs();\n+        List<PropagationStatus> props = result.getPropagationStatuses();\n         assertNotNull(props);\n         assertEquals(1, props.size());\n         PropagationStatus prop = props.iterator().next();\n@@ -1512,11 +1579,11 @@ public void mappingPurpose() {\n         userTO.getResources().clear();\n         userTO.getResources().add(RESOURCE_NAME_CSV);\n \n-        UserTO actual = createUser(userTO);\n-        assertNotNull(actual);\n+        userTO = createUser(userTO).getAny();\n+        assertNotNull(userTO);\n \n         ConnObjectTO connObjectTO =\n-                resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey());\n+                resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n         assertNull(connObjectTO.getPlainAttrMap().get(\"email\"));\n     }\n \n@@ -1528,7 +1595,7 @@ public void issueSYNCOPE265() {\n \n             userPatch.getPlainAttrs().add(attrAddReplacePatch(\"type\", \"a type\"));\n \n-            UserTO userTO = updateUser(userPatch);\n+            UserTO userTO = updateUser(userPatch).getAny();\n \n             assertEquals(\"a type\", userTO.getPlainAttrMap().get(\"type\").getValues().get(0));\n         }\n@@ -1540,7 +1607,7 @@ public void bulkActions() {\n \n         for (int i = 0; i < 10; i++) {\n             UserTO userTO = getUniqueSampleTO(\"bulk_\" + i + \"@apache.org\");\n-            bulkAction.getTargets().add(String.valueOf(createUser(userTO).getKey()));\n+            bulkAction.getTargets().add(String.valueOf(createUser(userTO).getAny().getKey()));\n         }\n \n         // check for a fail\n@@ -1585,15 +1652,15 @@ public void issueSYNCOPE354() {\n         groupTO.setRealm(\"/\");\n         groupTO.getResources().add(RESOURCE_NAME_LDAP);\n \n-        groupTO = createGroup(groupTO);\n+        groupTO = createGroup(groupTO).getAny();\n         assertNotNull(groupTO);\n \n         // 2. create user with LDAP resource and membership of the above group\n         UserTO userTO = getUniqueSampleTO(\"syncope354@syncope.apache.org\");\n         userTO.getResources().add(RESOURCE_NAME_LDAP);\n         userTO.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n \n         // 3. read group on resource, check that user DN is included in uniqueMember\n@@ -1609,7 +1676,7 @@ public void issueSYNCOPE354() {\n         userPatch.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.DELETE).\n                 membershipTO(userTO.getMemberships().get(0)).build());\n \n-        userTO = updateUser(userPatch);\n+        userTO = updateUser(userPatch).getAny();\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n \n         // 5. read group on resource, check that user DN was removed from uniqueMember\n@@ -1635,7 +1702,7 @@ public void issueSYNCOPE357() throws IOException {\n         groupTO.setRealm(\"/\");\n         groupTO.getResources().add(RESOURCE_NAME_LDAP);\n \n-        groupTO = createGroup(groupTO);\n+        groupTO = createGroup(groupTO).getAny();\n         assertNotNull(groupTO);\n \n         // 2. create user with membership of the above group\n@@ -1645,7 +1712,7 @@ public void issueSYNCOPE357() throws IOException {\n                 Base64Utility.encode(IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/favicon.jpg\")))));\n         userTO.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n         assertNotNull(userTO.getPlainAttrMap().get(\"obscure\"));\n         assertNotNull(userTO.getPlainAttrMap().get(\"photo\"));\n@@ -1678,28 +1745,33 @@ public void issueSYNCOPE383() {\n         // 1. create user without resources\n         UserTO userTO = getUniqueSampleTO(\"syncope383@apache.org\");\n         userTO.getResources().clear();\n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n \n         // 2. assign resource without specifying a new pwd and check propagation failure\n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(userTO.getKey());\n         userPatch.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());\n-        userTO = updateUser(userPatch);\n+\n+        ProvisioningResult<UserTO> result = updateUser(userPatch);\n+        assertNotNull(result);\n+        userTO = result.getAny();\n         assertEquals(RESOURCE_NAME_TESTDB, userTO.getResources().iterator().next());\n-        assertNotEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationStatusTOs().get(0).getStatus());\n-        assertNotNull(userTO.getPropagationStatusTOs().get(0).getFailureReason());\n+        assertNotEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        assertNotNull(result.getPropagationStatuses().get(0).getFailureReason());\n+        userTO = result.getAny();\n \n         // 3. request to change password only on testdb\n         userPatch = new UserPatch();\n         userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().value(getUUIDString() + \"abbcbcbddd123\").\n-                resource(RESOURCE_NAME_TESTDB).build());\n+        userPatch.setPassword(\n+                new PasswordPatch.Builder().value(getUUIDString() + \"abbcbcbddd123\").resource(RESOURCE_NAME_TESTDB).\n+                build());\n \n-        userTO = updateUser(userPatch);\n+        result = updateUser(userPatch);\n         assertEquals(RESOURCE_NAME_TESTDB, userTO.getResources().iterator().next());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationStatusTOs().get(0).getStatus());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n     }\n \n     @Test\n@@ -1715,22 +1787,22 @@ public void issueSYNCOPE402() {\n         userTO.getPlainAttrs().add(attrTO(\"fullname\", userId));\n         userTO.getPlainAttrs().add(attrTO(\"surname\", userId));\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n         assertTrue(userTO.getResources().isEmpty());\n \n         // 2. update assigning a resource NOT forcing mandatory constraints\n-        // AND primary: must fail with PropagationException\n+        // AND priority: must fail with PropagationException\n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(userTO.getKey());\n         userPatch.setPassword(new PasswordPatch.Builder().value(\"newPassword123\").build());\n         userPatch.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS1).build());\n         userPatch.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());\n-        userTO = updateUser(userPatch);\n+        ProvisioningResult<UserTO> result = updateUser(userPatch);\n \n-        List<PropagationStatus> propagationStatuses = userTO.getPropagationStatusTOs();\n+        List<PropagationStatus> propagationStatuses = result.getPropagationStatuses();\n         PropagationStatus ws1PropagationStatus = null;\n         if (propagationStatuses != null) {\n             for (PropagationStatus propStatus : propagationStatuses) {\n@@ -1757,7 +1829,7 @@ public void unlink() {\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n         userTO.getResources().add(RESOURCE_NAME_CSV);\n \n-        UserTO actual = createUser(userTO);\n+        UserTO actual = createUser(userTO).getAny();\n         assertNotNull(actual);\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n \n@@ -1785,7 +1857,7 @@ public void link() {\n         userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n-        UserTO actual = createUser(userTO);\n+        UserTO actual = createUser(userTO).getAny();\n         assertNotNull(actual);\n         assertTrue(actual.getResources().isEmpty());\n \n@@ -1826,7 +1898,7 @@ public void unassign() {\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n         userTO.getResources().add(RESOURCE_NAME_CSV);\n \n-        UserTO actual = createUser(userTO);\n+        UserTO actual = createUser(userTO).getAny();\n         assertNotNull(actual);\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n \n@@ -1859,7 +1931,7 @@ public void assign() {\n         userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n-        UserTO actual = createUser(userTO);\n+        UserTO actual = createUser(userTO).getAny();\n         assertNotNull(actual);\n         assertTrue(actual.getResources().isEmpty());\n \n@@ -1895,7 +1967,7 @@ public void deprovision() {\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n         userTO.getResources().add(RESOURCE_NAME_CSV);\n \n-        UserTO actual = createUser(userTO);\n+        UserTO actual = createUser(userTO).getAny();\n         assertNotNull(actual);\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n \n@@ -1928,7 +2000,7 @@ public void provision() {\n         userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n-        UserTO actual = createUser(userTO);\n+        UserTO actual = createUser(userTO).getAny();\n         assertNotNull(actual);\n         assertTrue(actual.getResources().isEmpty());\n \n@@ -1963,7 +2035,7 @@ public void deprovisionUnlinked() {\n         userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n-        UserTO actual = createUser(userTO);\n+        UserTO actual = createUser(userTO).getAny();\n         assertNotNull(actual);\n         assertTrue(actual.getResources().isEmpty());\n \n@@ -2017,27 +2089,28 @@ public void issueSYNCOPE420() {\n         userTO.setRealm(realm.getFullPath());\n         userTO.getPlainAttrs().add(attrTO(\"makeItDouble\", \"3\"));\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertEquals(\"6\", userTO.getPlainAttrMap().get(\"makeItDouble\").getValues().get(0));\n \n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(userTO.getKey());\n         userPatch.getPlainAttrs().add(attrAddReplacePatch(\"makeItDouble\", \"7\"));\n \n-        userTO = updateUser(userPatch);\n+        userTO = updateUser(userPatch).getAny();\n         assertEquals(\"14\", userTO.getPlainAttrMap().get(\"makeItDouble\").getValues().get(0));\n     }\n \n     @Test\n     public void issueSYNCOPE426() {\n         UserTO userTO = getUniqueSampleTO(\"syncope426@syncope.apache.org\");\n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n \n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(userTO.getKey());\n         userPatch.setPassword(new PasswordPatch.Builder().value(\"anotherPassword123\").build());\n-        userTO = userService.update(userPatch).readEntity(UserTO.class);\n+        userTO = userService.update(userPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getAny();\n         assertNotNull(userTO);\n     }\n \n@@ -2046,7 +2119,7 @@ public void issueSYNCOPE435() {\n         // 1. create user without password\n         UserTO userTO = getUniqueSampleTO(\"syncope435@syncope.apache.org\");\n         userTO.setPassword(null);\n-        userTO = createUser(userTO, false);\n+        userTO = createUser(userTO, false).getAny();\n         assertNotNull(userTO);\n \n         // 2. try to update user by subscribing a resource - works but propagation is not even attempted\n@@ -2055,17 +2128,20 @@ public void issueSYNCOPE435() {\n         userPatch.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS1).build());\n \n-        userTO = userService.update(userPatch).readEntity(UserTO.class);\n+        ProvisioningResult<UserTO> result = updateUser(userPatch);\n+        assertNotNull(result);\n+        userTO = result.getAny();\n         assertEquals(Collections.singleton(RESOURCE_NAME_WS1), userTO.getResources());\n-        assertNotEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationStatusTOs().get(0).getStatus());\n-        assertTrue(userTO.getPropagationStatusTOs().get(0).getFailureReason().\n+        assertNotEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        assertTrue(result.getPropagationStatuses().get(0).getFailureReason().\n                 startsWith(\"Not attempted because there are mandatory attributes without value(s): [__PASSWORD__]\"));\n     }\n \n     @Test\n     public void ifMatch() {\n         UserTO userTO = userService.create(getUniqueSampleTO(\"ifmatch@syncope.apache.org\"), true).\n-                readEntity(UserTO.class);\n+                readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+                }).getAny();\n         assertNotNull(userTO);\n         assertNotNull(userTO.getKey());\n \n@@ -2076,7 +2152,8 @@ public void ifMatch() {\n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(userTO.getKey());\n         userPatch.setUsername(new StringReplacePatchItem.Builder().value(userTO.getUsername() + \"XX\").build());\n-        userTO = userService.update(userPatch).readEntity(UserTO.class);\n+        userTO = userService.update(userPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getAny();\n         assertTrue(userTO.getUsername().endsWith(\"XX\"));\n         EntityTag etag1 = adminClient.getLatestEntityTag(userService);\n         assertFalse(etag.getValue().equals(etag1.getValue()));\n@@ -2099,7 +2176,7 @@ public void issueSYNCOPE454() throws NamingException {\n         // 1. create user with LDAP resource (with 'Generate password if missing' enabled)\n         UserTO userTO = getUniqueSampleTO(\"syncope454@syncope.apache.org\");\n         userTO.getResources().add(RESOURCE_NAME_LDAP);\n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n \n         // 2. read resource configuration for LDAP binding\n@@ -2132,10 +2209,11 @@ public void issueSYNCOPE493() {\n         // 1.  create user and check that firstname is not propagated on resource with mapping for firstname set to NONE\n         UserTO userTO = getUniqueSampleTO(\"issueSYNCOPE493@test.org\");\n         userTO.getResources().add(RESOURCE_NAME_WS1);\n-        userTO = createUser(userTO);\n+        ProvisioningResult<UserTO> result = createUser(userTO);\n         assertNotNull(userTO);\n-        assertEquals(1, userTO.getPropagationStatusTOs().size());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationStatusTOs().get(0).getStatus());\n+        assertEquals(1, result.getPropagationStatuses().size());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        userTO = result.getAny();\n \n         ConnObjectTO actual =\n                 resourceService.readConnObject(RESOURCE_NAME_WS1, AnyTypeKind.USER.name(), userTO.getKey());\n@@ -2172,10 +2250,11 @@ public void issueSYNCOPE493() {\n         userPatch.setPassword(new PasswordPatch());\n         userPatch.getPlainAttrs().add(attrAddReplacePatch(\"firstname\", \"firstnameNew\"));\n \n-        userTO = updateUser(userPatch);\n+        result = updateUser(userPatch);\n         assertNotNull(userTO);\n-        assertEquals(1, userTO.getPropagationStatusTOs().size());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationStatusTOs().get(0).getStatus());\n+        assertEquals(1, result.getPropagationStatuses().size());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        userTO = result.getAny();\n \n         ConnObjectTO newUser =\n                 resourceService.readConnObject(RESOURCE_NAME_WS1, AnyTypeKind.USER.name(), userTO.getKey());\n@@ -2202,7 +2281,7 @@ public void issueSYNCOPE505DB() throws Exception {\n         // 1. create user\n         UserTO user = UserITCase.getUniqueSampleTO(\"syncope505-db@syncope.apache.org\");\n         user.setPassword(\"security123\");\n-        user = createUser(user);\n+        user = createUser(user).getAny();\n         assertNotNull(user);\n         assertTrue(user.getResources().isEmpty());\n \n@@ -2220,7 +2299,7 @@ public void issueSYNCOPE505DB() throws Exception {\n \n         userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_TESTDB).build());\n \n-        user = updateUser(userPatch);\n+        user = updateUser(userPatch).getAny();\n         assertNotNull(user);\n         assertEquals(1, user.getResources().size());\n \n@@ -2242,7 +2321,7 @@ public void issueSYNCOPE505LDAP() throws Exception {\n         // 1. create user\n         UserTO user = UserITCase.getUniqueSampleTO(\"syncope505-ldap@syncope.apache.org\");\n         user.setPassword(\"security123\");\n-        user = createUser(user);\n+        user = createUser(user).getAny();\n         assertNotNull(user);\n         assertTrue(user.getResources().isEmpty());\n \n@@ -2261,7 +2340,7 @@ public void issueSYNCOPE505LDAP() throws Exception {\n \n         userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_LDAP).build());\n \n-        user = updateUser(userPatch);\n+        user = updateUser(userPatch).getAny();\n         assertNotNull(user);\n         assertEquals(1, user.getResources().size());\n \n@@ -2288,7 +2367,7 @@ public void issueSYNCOPE391() {\n         UserTO userTO = getUniqueSampleTO(\"syncope391@syncope.apache.org\");\n         userTO.setPassword(null);\n \n-        userTO = createUser(userTO, false);\n+        userTO = createUser(userTO, false).getAny();\n         assertNotNull(userTO);\n         assertNull(userTO.getPassword());\n \n@@ -2307,7 +2386,7 @@ public void issueSYNCOPE391() {\n \n         userTO.getAuxClasses().add(\"csv\");\n         userTO.getResources().add(RESOURCE_NAME_CSV);\n-        userTO = createUser(userTO, false);\n+        userTO = createUser(userTO, false).getAny();\n         assertNotNull(userTO);\n \n         ConnObjectTO connObjectTO =\n@@ -2329,7 +2408,7 @@ public void issueSYNCOPE391() {\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n         userTO.getResources().add(RESOURCE_NAME_CSV);\n-        userTO = createUser(userTO, false);\n+        userTO = createUser(userTO, false).getAny();\n         assertNotNull(userTO);\n \n         connObjectTO =\n@@ -2351,7 +2430,7 @@ public void issueSYNCOPE391() {\n \n         userTO.getResources().add(RESOURCE_NAME_CSV);\n         // storePassword true by default\n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n@@ -2407,7 +2486,7 @@ public void issueSYNCOPE647() {\n \n         userTO.getResources().add(RESOURCE_NAME_LDAP);\n \n-        UserTO actual = createUser(userTO);\n+        UserTO actual = createUser(userTO).getAny();\n         assertNotNull(actual);\n         assertNotNull(actual.getDerAttrMap().get(\"csvuserid\"));\n \n@@ -2420,7 +2499,7 @@ public void issueSYNCOPE647() {\n         userPatch.setKey(actual.getKey());\n         userPatch.getPlainAttrs().add(attrAddReplacePatch(\"postalAddress\", \"newPostalAddress\"));\n \n-        actual = updateUser(userPatch);\n+        actual = updateUser(userPatch).getAny();\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), actual.getKey());\n         assertNotNull(connObjectTO);\n@@ -2457,7 +2536,7 @@ public void issueSYNCOPE626() {\n             }\n \n             user.setPassword(\"password123\");\n-            user = createUser(user);\n+            user = createUser(user).getAny();\n             assertNotNull(user);\n         } finally {\n             realm.setPasswordPolicy(oldPasswordPolicy);\n@@ -2482,14 +2561,14 @@ public void issueSYNCOPE686() {\n             // 3. create group with LDAP resource assigned\n             GroupTO group = GroupITCase.getBasicSampleTO(\"syncope686\");\n             group.getResources().add(RESOURCE_NAME_LDAP);\n-            group = createGroup(group);\n+            group = createGroup(group).getAny();\n             assertNotNull(group);\n \n             // 4. create user with no resources\n             UserTO userTO = getUniqueSampleTO(\"syncope686@apache.org\");\n             userTO.getResources().clear();\n \n-            userTO = createUser(userTO);\n+            userTO = createUser(userTO).getAny();\n             assertNotNull(userTO);\n \n             // 5. update user with the new group, and don't provide any password\n@@ -2498,11 +2577,11 @@ public void issueSYNCOPE686() {\n             userPatch.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n                     membershipTO(new MembershipTO.Builder().group(group.getKey()).build()).build());\n \n-            userTO = updateUser(userPatch);\n-            assertNotNull(userTO);\n+            ProvisioningResult<UserTO> result = updateUser(userPatch);\n+            assertNotNull(result);\n \n             // 5. verify that propagation was successful\n-            List<PropagationStatus> props = userTO.getPropagationStatusTOs();\n+            List<PropagationStatus> props = result.getPropagationStatuses();\n             assertNotNull(props);\n             assertEquals(1, props.size());\n             PropagationStatus prop = props.iterator().next();\n@@ -2521,11 +2600,11 @@ public void issueSYNCOPE710() {\n         // 1. create groups for indirect resource assignment\n         GroupTO ldapGroup = GroupITCase.getBasicSampleTO(\"syncope710.ldap\");\n         ldapGroup.getResources().add(RESOURCE_NAME_LDAP);\n-        ldapGroup = createGroup(ldapGroup);\n+        ldapGroup = createGroup(ldapGroup).getAny();\n \n         GroupTO dbGroup = GroupITCase.getBasicSampleTO(\"syncope710.db\");\n         dbGroup.getResources().add(RESOURCE_NAME_TESTDB);\n-        dbGroup = createGroup(dbGroup);\n+        dbGroup = createGroup(dbGroup).getAny();\n \n         // 2. create user with memberships for the groups created above\n         UserTO userTO = getUniqueSampleTO(\"syncope710@syncope.apache.org\");\n@@ -2534,17 +2613,18 @@ public void issueSYNCOPE710() {\n         userTO.getMemberships().add(new MembershipTO.Builder().group(ldapGroup.getKey()).build());\n         userTO.getMemberships().add(new MembershipTO.Builder().group(dbGroup.getKey()).build());\n \n-        userTO = createUser(userTO);\n-        assertEquals(2, userTO.getPropagationStatusTOs().size());\n+        ProvisioningResult<UserTO> result = createUser(userTO);\n+        assertEquals(2, result.getPropagationStatuses().size());\n+        userTO = result.getAny();\n \n         // 3. request to propagate passwod only to db\n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(userTO.getKey());\n         userPatch.setPassword(new PasswordPatch.Builder().\n                 onSyncope(false).resource(RESOURCE_NAME_TESTDB).value(\"newpassword123\").build());\n \n-        userTO = updateUser(userPatch);\n-        assertEquals(1, userTO.getPropagationStatusTOs().size());\n-        assertEquals(RESOURCE_NAME_TESTDB, userTO.getPropagationStatusTOs().get(0).getResource());\n+        result = updateUser(userPatch);\n+        assertEquals(1, result.getPropagationStatuses().size());\n+        assertEquals(RESOURCE_NAME_TESTDB, result.getPropagationStatuses().get(0).getResource());\n     }\n }"},{"sha":"23722f8c09a1282eda18a64453e5572c6bc6ee9b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserSelfITCase.java","status":"modified","additions":17,"deletions":9,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -31,6 +31,7 @@\n import java.security.AccessControlException;\n import java.util.Map;\n import java.util.Set;\n+import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -44,6 +45,7 @@\n import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n@@ -85,7 +87,8 @@ public void create() {\n         SyncopeClient anonClient = clientFactory.create();\n         UserTO self = anonClient.getService(UserSelfService.class).\n                 create(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\"), true).\n-                readEntity(UserTO.class);\n+                readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+                }).getAny();\n         assertNotNull(self);\n         assertEquals(\"createApproval\", self.getStatus());\n     }\n@@ -102,7 +105,8 @@ public void createAndApprove() {\n         SyncopeClient anonClient = clientFactory.create();\n         userTO = anonClient.getService(UserSelfService.class).\n                 create(userTO, true).\n-                readEntity(UserTO.class);\n+                readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+                }).getAny();\n         assertNotNull(userTO);\n         assertEquals(\"createApproval\", userTO.getStatus());\n         assertFalse(userTO.getMemberships().isEmpty());\n@@ -146,7 +150,7 @@ public void read() {\n     @Test\n     public void updateWithoutApproval() {\n         // 1. create user as admin\n-        UserTO created = createUser(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\"));\n+        UserTO created = createUser(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\")).getAny();\n         assertNotNull(created);\n         assertFalse(created.getUsername().endsWith(\"XX\"));\n \n@@ -157,7 +161,8 @@ public void updateWithoutApproval() {\n \n         SyncopeClient authClient = clientFactory.create(created.getUsername(), \"password123\");\n         UserTO updated = authClient.getService(UserSelfService.class).update(userPatch).\n-                readEntity(UserTO.class);\n+                readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+                }).getAny();\n         assertNotNull(updated);\n         assertEquals(ActivitiDetector.isActivitiEnabledForUsers(syncopeService)\n                 ? \"active\" : \"created\", updated.getStatus());\n@@ -169,7 +174,7 @@ public void updateWithApproval() {\n         Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers(syncopeService));\n \n         // 1. create user as admin\n-        UserTO created = createUser(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\"));\n+        UserTO created = createUser(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\")).getAny();\n         assertNotNull(created);\n         assertFalse(created.getUsername().endsWith(\"XX\"));\n \n@@ -188,7 +193,8 @@ public void updateWithApproval() {\n \n         SyncopeClient authClient = clientFactory.create(created.getUsername(), \"password123\");\n         UserTO updated = authClient.getService(UserSelfService.class).update(userPatch).\n-                readEntity(UserTO.class);\n+                readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+                }).getAny();\n         assertNotNull(updated);\n         assertEquals(\"updateApproval\", updated.getStatus());\n         assertFalse(updated.getUsername().endsWith(\"XX\"));\n@@ -223,11 +229,13 @@ public void updateWithApproval() {\n \n     @Test\n     public void delete() {\n-        UserTO created = createUser(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\"));\n+        UserTO created = createUser(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\")).getAny();\n         assertNotNull(created);\n \n         SyncopeClient authClient = clientFactory.create(created.getUsername(), \"password123\");\n-        UserTO deleted = authClient.getService(UserSelfService.class).delete().readEntity(UserTO.class);\n+        UserTO deleted = authClient.getService(UserSelfService.class).delete().readEntity(\n+                new GenericType<ProvisioningResult<UserTO>>() {\n+                }).getAny();\n         assertNotNull(deleted);\n         assertEquals(ActivitiDetector.isActivitiEnabledForUsers(syncopeService)\n                 ? \"deleteApproval\" : null, deleted.getStatus());\n@@ -373,7 +381,7 @@ public void mustChangePassword() {\n         userPatch = new UserPatch();\n         userPatch.setKey(3L);\n         userPatch.setMustChangePassword(new BooleanReplacePatchItem.Builder().value(true).build());\n-        UserTO vivaldi = updateUser(userPatch);\n+        UserTO vivaldi = updateUser(userPatch).getAny();\n         assertTrue(vivaldi.isMustChangePassword());\n \n         // 2. attempt to access -> fail"},{"sha":"cb0bdce485db8881b2270f5d867731e2360863f6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserWorkflowITCase.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserWorkflowITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserWorkflowITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserWorkflowITCase.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n@@ -61,7 +62,7 @@ public void createWithReject() {\n         userTO.getMemberships().add(new MembershipTO.Builder().group(9L).build());\n \n         // 1. create user with group 9\n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n         assertEquals(1, userTO.getMemberships().size());\n         assertEquals(9, userTO.getMemberships().get(0).getRightKey());\n@@ -83,7 +84,7 @@ public void createWithReject() {\n             userPatch.setKey(1L);\n             userPatch.getRoles().add(new LongPatchItem.Builder().\n                     operation(PatchOperation.ADD_REPLACE).value(2L).build());\n-            rossini = updateUser(userPatch);\n+            rossini = updateUser(userPatch).getAny();\n         }\n         assertTrue(rossini.getRoles().contains(2L));\n \n@@ -142,14 +143,15 @@ public void createWithApproval() {\n         userTO.getMemberships().add(new MembershipTO.Builder().group(9L).build());\n \n         // 1. create user with group 9 (and verify that no propagation occurred)\n-        userTO = createUser(userTO);\n-        assertNotNull(userTO);\n+        ProvisioningResult<UserTO> result = createUser(userTO);\n+        assertNotNull(result);\n+        userTO = result.getAny();\n         assertEquals(1, userTO.getMemberships().size());\n         assertEquals(9, userTO.getMemberships().get(0).getRightKey());\n         assertEquals(\"createApproval\", userTO.getStatus());\n         assertEquals(Collections.singleton(RESOURCE_NAME_TESTDB), userTO.getResources());\n \n-        assertTrue(userTO.getPropagationStatusTOs().isEmpty());\n+        assertTrue(result.getPropagationStatuses().isEmpty());\n \n         JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n \n@@ -203,7 +205,7 @@ public void createWithApproval() {\n         userPatch.setKey(userTO.getKey());\n         userPatch.setPassword(new PasswordPatch.Builder().value(\"anotherPassword123\").build());\n \n-        userTO = updateUser(userPatch);\n+        userTO = updateUser(userPatch).getAny();\n         assertNotNull(userTO);\n     }\n \n@@ -226,7 +228,7 @@ public void issueSYNCOPE15() {\n         userTO.getMemberships().add(new MembershipTO.Builder().group(9L).build());\n \n         // 1. create user with group 9 (and verify that no propagation occurred)\n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n         assertNotEquals(0L, userTO.getKey());\n         assertNotNull(userTO.getCreationDate());"},{"sha":"db297f32e6e394f9d96dacb7680617498a30a8d5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/VirAttrITCase.java","status":"modified","additions":47,"deletions":39,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -18,14 +18,14 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n-import static org.apache.syncope.fit.core.reference.AbstractITCase.getUUIDString;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n import java.util.Locale;\n import java.util.Map;\n+import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n@@ -44,6 +44,7 @@\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -73,7 +74,7 @@ public void issueSYNCOPE16() {\n         userTO.getMemberships().add(new MembershipTO.Builder().group(8L).build());\n \n         // 1. create user\n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n \n         // 2. check for virtual attribute value\n@@ -86,7 +87,7 @@ public void issueSYNCOPE16() {\n         userPatch.getVirAttrs().add(attrTO(\"virtualdata\", \"virtualupdated\"));\n \n         // 3. update virtual attribute\n-        userTO = updateUser(userPatch);\n+        userTO = updateUser(userPatch).getAny();\n         assertNotNull(userTO);\n \n         // 4. check for virtual attribute value\n@@ -124,11 +125,12 @@ public void issueSYNCOPE260() {\n         userTO.getVirAttrs().add(attrTO(virSchema.getKey(), \"virtualvalue\"));\n         userTO.getResources().add(RESOURCE_NAME_WS2);\n \n-        userTO = createUser(userTO);\n-        assertNotNull(userTO);\n-        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n-        assertEquals(RESOURCE_NAME_WS2, userTO.getPropagationStatusTOs().get(0).getResource());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationStatusTOs().get(0).getStatus());\n+        ProvisioningResult<UserTO> result = createUser(userTO);\n+        assertNotNull(result);\n+        assertFalse(result.getPropagationStatuses().isEmpty());\n+        assertEquals(RESOURCE_NAME_WS2, result.getPropagationStatuses().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        userTO = result.getAny();\n \n         ConnObjectTO connObjectTO =\n                 resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n@@ -142,11 +144,12 @@ public void issueSYNCOPE260() {\n         userPatch.setKey(userTO.getKey());\n         userPatch.getVirAttrs().add(attrTO(virSchema.getKey(), \"virtualvalue2\"));\n \n-        userTO = updateUser(userPatch);\n-        assertNotNull(userTO);\n-        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n-        assertEquals(RESOURCE_NAME_WS2, userTO.getPropagationStatusTOs().get(0).getResource());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationStatusTOs().get(0).getStatus());\n+        result = updateUser(userPatch);\n+        assertNotNull(result);\n+        assertFalse(result.getPropagationStatuses().isEmpty());\n+        assertEquals(RESOURCE_NAME_WS2, result.getPropagationStatuses().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        userTO = result.getAny();\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n         assertEquals(\"virtualvalue2\", connObjectTO.getPlainAttrMap().get(\"COMPANYNAME\").getValues().get(0));\n@@ -158,7 +161,8 @@ public void issueSYNCOPE260() {\n         StatusPatch statusPatch = new StatusPatch();\n         statusPatch.setKey(userTO.getKey());\n         statusPatch.setType(StatusPatchType.SUSPEND);\n-        userTO = userService.status(statusPatch).readEntity(UserTO.class);\n+        userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getAny();\n         assertEquals(\"suspended\", userTO.getStatus());\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n@@ -167,7 +171,8 @@ public void issueSYNCOPE260() {\n         statusPatch = new StatusPatch();\n         statusPatch.setKey(userTO.getKey());\n         statusPatch.setType(StatusPatchType.REACTIVATE);\n-        userTO = userService.status(statusPatch).readEntity(UserTO.class);\n+        userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getAny();\n         assertEquals(\"active\", userTO.getStatus());\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n@@ -181,11 +186,12 @@ public void issueSYNCOPE260() {\n         userPatch.setKey(userTO.getKey());\n         userPatch.getPlainAttrs().add(attrAddReplacePatch(\"surname\", \"Surname2\"));\n \n-        userTO = updateUser(userPatch);\n-        assertNotNull(userTO);\n-        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n-        assertEquals(RESOURCE_NAME_WS2, userTO.getPropagationStatusTOs().get(0).getResource());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationStatusTOs().get(0).getStatus());\n+        result = updateUser(userPatch);\n+        assertNotNull(result);\n+        assertFalse(result.getPropagationStatuses().isEmpty());\n+        assertEquals(RESOURCE_NAME_WS2, result.getPropagationStatuses().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        userTO = result.getAny();\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n         assertEquals(\"Surname2\", connObjectTO.getPlainAttrMap().get(\"SURNAME\").getValues().get(0));\n@@ -211,7 +217,7 @@ public void virAttrCache() {\n         userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n \n         // 1. create user\n-        UserTO actual = createUser(userTO);\n+        UserTO actual = createUser(userTO).getAny();\n         assertNotNull(actual);\n \n         // 2. check for virtual attribute value\n@@ -240,7 +246,7 @@ public void virAttrCache() {\n         userPatch.getVirAttrs().add(attrTO(\"virtualdata\", \"virtualupdated\"));\n \n         // 5. update virtual attribute\n-        actual = updateUser(userPatch);\n+        actual = updateUser(userPatch).getAny();\n         assertNotNull(actual);\n \n         // 6. check for virtual attribute value\n@@ -303,7 +309,7 @@ public boolean evaluate(final MappingItemTO item) {\n             // assign resource-csv to user\n             userTO.getResources().add(RESOURCE_NAME_CSV);\n             // save user\n-            userTO = createUser(userTO);\n+            userTO = createUser(userTO).getAny();\n             // make std controls about user\n             assertNotNull(userTO);\n             assertTrue(RESOURCE_NAME_CSV.equals(userTO.getResources().iterator().next()));\n@@ -327,11 +333,12 @@ public boolean evaluate(final MappingItemTO item) {\n                     resource(RESOURCE_NAME_WS2).\n                     build());\n \n-            toBeUpdated = updateUser(userPatch);\n-            assertNotNull(toBeUpdated);\n+            ProvisioningResult<UserTO> result = updateUser(userPatch);\n+            assertNotNull(result);\n+            toBeUpdated = result.getAny();\n             assertTrue(toBeUpdated.getVirAttrs().iterator().next().getValues().contains(\"test@testoneone.com\"));\n             // check if propagates correctly with assertEquals on size of tasks list\n-            assertEquals(2, toBeUpdated.getPropagationStatusTOs().size());\n+            assertEquals(2, result.getPropagationStatuses().size());\n         } finally {\n             // restore mapping of resource-csv\n             csv.getProvisions().get(0).setMapping(origMapping);\n@@ -354,7 +361,7 @@ public void issueSYNCOPE442() {\n         userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n \n         // 1. create user\n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n \n         // 2. check for virtual attribute value\n@@ -419,7 +426,7 @@ public void issueSYNCOPE442() {\n         userPatch.setKey(userTO.getKey());\n         userPatch.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS2).build());\n-        userTO = updateUser(userPatch);\n+        userTO = updateUser(userPatch).getAny();\n         assertNotNull(userTO);\n \n         userTO = userService.read(userTO.getKey());\n@@ -433,7 +440,7 @@ public void issueSYNCOPE436() {\n         userTO.getResources().clear();\n         userTO.getResources().add(RESOURCE_NAME_LDAP);\n         userTO.getVirAttrs().add(attrTO(\"virtualReadOnly\", \"readOnly\"));\n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n         // finding no values because the virtual attribute is readonly \n         assertTrue(userTO.getVirAttrMap().get(\"virtualReadOnly\").getValues().isEmpty());\n     }\n@@ -493,7 +500,7 @@ public void issueSYNCOPE453() {\n         groupTO.setRealm(\"/\");\n         groupTO.getVirAttrs().add(attrTO(\"rvirtualdata\", \"ml@group.it\"));\n         groupTO.getResources().add(RESOURCE_NAME_LDAP);\n-        groupTO = createGroup(groupTO);\n+        groupTO = createGroup(groupTO).getAny();\n         assertEquals(1, groupTO.getVirAttrs().size());\n         assertEquals(\"ml@group.it\", groupTO.getVirAttrs().iterator().next().getValues().get(0));\n         // -------------------------------------------\n@@ -511,10 +518,11 @@ public void issueSYNCOPE453() {\n \n         userTO.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n \n-        userTO = createUser(userTO);\n-        assertEquals(2, userTO.getPropagationStatusTOs().size());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationStatusTOs().get(0).getStatus());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationStatusTOs().get(1).getStatus());\n+        ProvisioningResult<UserTO> result = createUser(userTO);\n+        assertEquals(2, result.getPropagationStatuses().size());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(1).getStatus());\n+        userTO = result.getAny();\n \n         JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n \n@@ -542,7 +550,7 @@ public void issueSYNCOPE459() {\n         userTO.getMemberships().clear();\n         userTO.getVirAttrs().clear();\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n \n         assertNotNull(userTO.getVirAttrMap().get(\"virtualReadOnly\"));\n     }\n@@ -560,7 +568,7 @@ public void issueSYNCOPE501() {\n         // virtualdata is mapped with username\n         userTO.getVirAttrs().add(attrTO(\"virtualdata\", \"syncope501@apache.org\"));\n \n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO).getAny();\n \n         assertNotNull(userTO.getVirAttrMap().get(\"virtualdata\"));\n         assertEquals(\"syncope501@apache.org\", userTO.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n@@ -571,7 +579,7 @@ public void issueSYNCOPE501() {\n         // change virtual attribute value\n         userPatch.getVirAttrs().add(attrTO(\"virtualdata\", \"syncope501_updated@apache.org\"));\n \n-        userTO = updateUser(userPatch);\n+        userTO = updateUser(userPatch).getAny();\n         assertNotNull(userTO);\n \n         // 3. check that user virtual attribute has really been updated \n@@ -633,7 +641,7 @@ public boolean evaluate(final MappingItemTO item) {\n             // assign resource-ldap691 to user\n             userTO.getResources().add(ldap.getKey());\n             // save user\n-            userTO = createUser(userTO);\n+            userTO = createUser(userTO).getAny();\n             // make std controls about user\n             assertNotNull(userTO);\n             assertTrue(ldap.getKey().equals(userTO.getResources().iterator().next()));\n@@ -652,7 +660,7 @@ public boolean evaluate(final MappingItemTO item) {\n                     value(\"test@issue691.dom4.org\").\n                     build());\n \n-            UserTO updated = updateUser(userPatch);\n+            UserTO updated = updateUser(userPatch).getAny();\n             assertNotNull(updated);\n             assertEquals(2, updated.getVirAttrs().iterator().next().getValues().size(), 0);\n             assertTrue(updated.getVirAttrs().iterator().next().getValues().contains(\"test@issue691.dom3.org\"));"},{"sha":"bfdfd51daa69bbddb22a14a93e969ad5b29bde83","filename":"pom.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1b81e33c74e883c38349630098316a7fb1ade866/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1b81e33c74e883c38349630098316a7fb1ade866/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=1b81e33c74e883c38349630098316a7fb1ade866","patch":"@@ -801,7 +801,7 @@ under the License.\n         <artifactId>avalon-framework-impl</artifactId>\n         <version>4.3.1</version>\n       </dependency>\n-      \n+            \n       <!-- Activiti -->\n       <dependency>\n         <groupId>org.activiti</groupId>\n@@ -1282,7 +1282,7 @@ under the License.\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-shade-plugin</artifactId>\n-          <version>2.4.1</version>\n+          <version>2.4.2</version>\n         </plugin>\n         \n         <plugin>\n@@ -1663,7 +1663,7 @@ under the License.\n                       <link>http://camel.apache.org/maven/current/camel-core/apidocs/</link>\n                       <link>http://camel.apache.org/maven/current/camel-spring/apidocs/</link>\n                       <link>http://ci.apache.org/projects/wicket/apidocs/7.x/</link>\n-                      <link>http://docs.spring.io/spring/docs/4.1.x/javadoc-api/</link>\n+                      <link>http://docs.spring.io/spring/docs/4.2.x/javadoc-api/</link>\n                       <link>http://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/</link>\n                       <link>http://activiti.org/javadocs/</link>\n                     </links>"}]}