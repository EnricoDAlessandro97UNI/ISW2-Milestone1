{"sha":"af43767bfe1b0fa840abc0a58986350b69e2f719","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmFmNDM3NjdiZmUxYjBmYTg0MGFiYzBhNTg5ODYzNTBiNjllMmY3MTk=","commit":{"author":{"name":"Marco Di Sabatino Di Diodoro","email":"marco.disabatino@tirasa.net","date":"2019-11-29T06:58:04Z"},"committer":{"name":"Francesco ChicchiriccÃ²","email":"ilgrosso@apache.org","date":"2019-11-29T07:50:15Z"},"message":"[SYNCOPE-1515] Realm selector","tree":{"sha":"b74a86c7d2bad98aa7697021977c4634e7423bfe","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b74a86c7d2bad98aa7697021977c4634e7423bfe"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/af43767bfe1b0fa840abc0a58986350b69e2f719","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/af43767bfe1b0fa840abc0a58986350b69e2f719","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/af43767bfe1b0fa840abc0a58986350b69e2f719","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/af43767bfe1b0fa840abc0a58986350b69e2f719/comments","author":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"599b090ad5714a21d443cfe1409c9d14881a3431","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/599b090ad5714a21d443cfe1409c9d14881a3431","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/599b090ad5714a21d443cfe1409c9d14881a3431"}],"stats":{"total":375,"additions":248,"deletions":127},"files":[{"sha":"a2623c3115396b41713c373f09eddcd8c9835ca2","filename":"client/idrepo/common-ui/src/main/resources/META-INF/resources/ui-commons/css/syncopeUI.scss","status":"modified","additions":17,"deletions":2,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/af43767bfe1b0fa840abc0a58986350b69e2f719/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fui-commons%2Fcss%2FsyncopeUI.scss","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/af43767bfe1b0fa840abc0a58986350b69e2f719/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fui-commons%2Fcss%2FsyncopeUI.scss","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fui-commons%2Fcss%2FsyncopeUI.scss?ref=af43767bfe1b0fa840abc0a58986350b69e2f719","patch":"@@ -1112,9 +1112,24 @@ div#tablehandling ul.menu li a {\n   padding: 0px !important;\n }\n \n+.realm-live-search .dropdown-menu li a {\n+  height: 22px;\n+}\n \n+.realm-live-search #bs-select-1-0 {\n+  display: none;\n+}\n \n-\n+.realm-live-search.dropdown.bootstrap-select .bs-caret {\n+    display: none;\n+}\n+.realm-live-search.bootstrap-select>.dropdown-toggle {\n+    width: 50px;\n+    background: transparent;\n+    border: none;\n+    color: #3c8dbc;\n+    float: right;\n+}\n \n /* Form wrappers\n ============================================================================= */\n@@ -1139,4 +1154,4 @@ div#tablehandling ul.menu li a {\n \n .max_height {\n   height: 100% !important;\n-}\n\\ No newline at end of file\n+}"},{"sha":"738fafb7d9040a34440f1f81338f451a821c82f8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RealmChoicePanel.java","status":"modified","additions":208,"deletions":112,"changes":320,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/af43767bfe1b0fa840abc0a58986350b69e2f719/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/af43767bfe1b0fa840abc0a58986350b69e2f719/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java?ref=af43767bfe1b0fa840abc0a58986350b69e2f719","patch":"@@ -25,30 +25,41 @@\n import de.agilecoders.wicket.core.markup.html.bootstrap.button.dropdown.DropDownButton;\n import de.agilecoders.wicket.core.markup.html.bootstrap.image.GlyphIconType;\n import de.agilecoders.wicket.core.markup.html.bootstrap.image.IconType;\n+import de.agilecoders.wicket.extensions.markup.html.bootstrap.form.select.BootstrapSelect;\n+import de.agilecoders.wicket.extensions.markup.html.bootstrap.form.select.BootstrapSelectConfig;\n+import de.agilecoders.wicket.jquery.Key;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Comparator;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.rest.RealmRestClient;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.DynRealmTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.event.Broadcast;\n import org.apache.wicket.markup.ComponentTag;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.IChoiceRenderer;\n import org.apache.wicket.markup.html.link.AbstractLink;\n+import org.apache.wicket.markup.html.panel.Fragment;\n import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.ResourceModel;\n@@ -57,6 +68,8 @@ public class RealmChoicePanel extends Panel {\n \n     private static final long serialVersionUID = -1100228004207271270L;\n \n+    private static final int REALMS_VIEW_SIZE = 15;\n+\n     private final PageReference pageRef;\n \n     private final LoadableDetachableModel<List<Pair<String, RealmTO>>> realmTree;\n@@ -65,14 +78,14 @@ public class RealmChoicePanel extends Panel {\n \n     private final WebMarkupContainer container;\n \n+    private Model<RealmTO> model;\n+\n     private final Collection<String> availableRealms;\n \n     private final Map<String, Pair<RealmTO, List<RealmTO>>> tree;\n \n     private final List<AbstractLink> links = new ArrayList<>();\n \n-    private Model<RealmTO> model;\n-\n     public RealmChoicePanel(final String id, final PageReference pageRef) {\n         super(id);\n         this.pageRef = pageRef;\n@@ -159,135 +172,218 @@ public final void reloadRealmTree() {\n         label.setOutputMarkupId(true);\n         container.addOrReplace(label);\n \n-        final DropDownButton realms = new DropDownButton(\n-                \"realms\", new ResourceModel(\"select\", \"\"), new Model<IconType>(GlyphIconType.folderopen)) {\n+        if ((realmTree.getObject().size() + dynRealmTree.getObject().size()) > REALMS_VIEW_SIZE) {\n+            List<Pair<String, RealmTO>> realms = Stream.of(\n+                    realmTree.getObject(),\n+                    dynRealmTree.getObject().stream().map(\n+                            item -> {\n+                                final RealmTO realmTO = new RealmTO();\n+                                realmTO.setKey(item.getKey());\n+                                realmTO.setName(item.getKey());\n+                                realmTO.setFullPath(item.getKey());\n+                                return Pair.of(item.getKey(), realmTO);\n+                            }).collect(Collectors.toList())).flatMap(Collection::stream).collect(Collectors.toList());\n+\n+            BootstrapSelectConfig config = new BootstrapSelectConfig().withLiveSearch(true);\n+            config.put(new Key<>(\"styleBase\", \"btn\"), \"btn glyphicon glyphicon-folder-open\");\n+            BootstrapSelect<Pair<String, RealmTO>> select =\n+                    new BootstrapSelect<Pair<String, RealmTO>>(\"realmsLiveSearch\", new Model<>(), realms) {\n+\n+                private static final long serialVersionUID = -12358873583862012L;\n+\n+                @Override\n+                protected boolean isDisabled(\n+                        final Pair<String, RealmTO> object,\n+                        final int index,\n+                        final String selected) {\n+                    return availableRealms.stream().anyMatch(availableRealm -> {\n+                        return !SyncopeConstants.ROOT_REALM.equals(availableRealm)\n+                                && !object.getValue().getFullPath().equals(availableRealm);\n+                    });\n+                }\n+            };\n \n-            private static final long serialVersionUID = -5560086780455361131L;\n+            select.with(config);\n+            select.setOutputMarkupId(true);\n+            select.setChoiceRenderer(new IChoiceRenderer<Pair<String, RealmTO>>() {\n \n-            @Override\n-            protected List<AbstractLink> newSubMenuButtons(final String buttonMarkupId) {\n-                RealmChoicePanel.this.links.clear();\n+                private static final long serialVersionUID = 5978544741356774985L;\n \n-                RealmChoicePanel.this.links.add(new BootstrapAjaxLink<RealmTO>(\n-                        ButtonList.getButtonMarkupId(),\n-                        new Model<RealmTO>(),\n-                        Buttons.Type.Link,\n-                        new ResourceModel(\"realms\", \"Realms\")) {\n+                @Override\n+                public Object getDisplayValue(final Pair<String, RealmTO> object) {\n+                    return object.getKey();\n+                }\n \n-                    private static final long serialVersionUID = -7978723352517770744L;\n+                @Override\n+                public String getIdValue(final Pair<String, RealmTO> object, final int index) {\n+                    return object.getKey();\n+                }\n \n-                    @Override\n-                    public void onClick(final AjaxRequestTarget target) {\n-                    }\n+                @Override\n+                public Pair<String, RealmTO> getObject(final String id,\n+                        final IModel<? extends List<? extends Pair<String, RealmTO>>> choices) {\n+                    return IterableUtils.find(choices.getObject(), new Predicate<Pair<String, RealmTO>>() {\n \n-                    @Override\n-                    public boolean isEnabled() {\n-                        return false;\n-                    }\n+                        @Override\n+                        public boolean evaluate(final Pair<String, RealmTO> object) {\n+                            return object.getKey().equals(id);\n+                        }\n+                    });\n+                }\n+            });\n+            select.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+                private static final long serialVersionUID = -6139318907146065915L;\n+\n+                @Override\n+                protected void onUpdate(final AjaxRequestTarget target) {\n+                    model.setObject(select.getModelObject().getValue());\n+                    label.setDefaultModelObject(model.getObject().getFullPath());\n+                    realmLabel.setDefaultModel(new ResourceModel(\"realmLabel\", \"Realm\"));\n+                    target.add(label);\n+                    send(pageRef.getPage(), Broadcast.EXACT,\n+                            new ChosenRealm<>(select.getModelObject().getValue(), target));\n+                }\n+            });\n+            buildRealmLinks(label, realmLabel);\n+            Fragment fragment = new Fragment(\"realmsFragment\", \"realmsSearchFragment\", container);\n+            fragment.addOrReplace(select);\n+            container.addOrReplace(fragment);\n+        } else {\n+            final DropDownButton realms = new DropDownButton(\n+                    \"realms\", new ResourceModel(\"select\", \"\"), new Model<IconType>(GlyphIconType.folderopen)) {\n \n-                    @Override\n-                    protected void onComponentTag(final ComponentTag tag) {\n-                        tag.put(\"class\", \"panel box box-primary box-header with-border\");\n-                        tag.put(\"style\", \"margin: 20px 5px 0px 5px; width: 90%\");\n-                    }\n-                });\n+                private static final long serialVersionUID = -5560086780455361131L;\n \n-                for (Pair<String, RealmTO> link : realmTree.getObject()) {\n-                    final RealmTO realmTO = link.getValue();\n-                    RealmChoicePanel.this.links.add(new BootstrapAjaxLink<RealmTO>(\n-                            ButtonList.getButtonMarkupId(),\n-                            Model.of(realmTO),\n-                            Buttons.Type.Link,\n-                            new Model<>(link.getKey())) {\n+                @Override\n+                protected List<AbstractLink> newSubMenuButtons(final String buttonMarkupId) {\n+                    buildRealmLinks(label, realmLabel);\n+                    return RealmChoicePanel.this.links;\n+                }\n+            };\n+            realms.setOutputMarkupId(true);\n+            realms.setAlignment(AlignmentBehavior.Alignment.RIGHT);\n+            realms.setType(Buttons.Type.Menu);\n+\n+            MetaDataRoleAuthorizationStrategy.authorize(realms, ENABLE, IdRepoEntitlement.REALM_LIST);\n+            Fragment fragment = new Fragment(\"realmsFragment\", \"realmsListFragment\", container);\n+            fragment.addOrReplace(realms);\n+            container.addOrReplace(fragment);\n+        }\n+    }\n \n-                        private static final long serialVersionUID = -7978723352517770644L;\n+    private void buildRealmLinks(final Label label, final Label realmLabel) {\n+        RealmChoicePanel.this.links.clear();\n+        RealmChoicePanel.this.links.add(new BootstrapAjaxLink<RealmTO>(\n+                ButtonList.getButtonMarkupId(),\n+                new Model<RealmTO>(),\n+                Buttons.Type.Link,\n+                new ResourceModel(\"realms\", \"Realms\")) {\n \n-                        @Override\n-                        public void onClick(final AjaxRequestTarget target) {\n-                            model.setObject(realmTO);\n-                            label.setDefaultModelObject(model.getObject().getFullPath());\n-                            realmLabel.setDefaultModel(new ResourceModel(\"realmLabel\", \"Realm\"));\n-                            target.add(label);\n-                            send(pageRef.getPage(), Broadcast.EXACT, new ChosenRealm<>(realmTO, target));\n-                        }\n+            private static final long serialVersionUID = -7978723352517770744L;\n \n-                        @Override\n-                        public boolean isEnabled() {\n-                            return availableRealms.stream().\n-                                    anyMatch(availableRealm -> realmTO.getFullPath().startsWith(availableRealm));\n-                        }\n-                    });\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+            }\n+\n+            @Override\n+            public boolean isEnabled() {\n+                return false;\n+            }\n+\n+            @Override\n+            protected void onComponentTag(final ComponentTag tag) {\n+                tag.put(\"class\", \"panel box box-primary box-header with-border\");\n+                tag.put(\"style\", \"margin: 20px 5px 0px 5px; width: 90%\");\n+            }\n+        });\n+\n+        for (Pair<String, RealmTO> link : realmTree.getObject()) {\n+            final RealmTO realmTO = link.getValue();\n+            RealmChoicePanel.this.links.add(new BootstrapAjaxLink<RealmTO>(\n+                    ButtonList.getButtonMarkupId(),\n+                    Model.of(realmTO),\n+                    Buttons.Type.Link,\n+                    new Model<>(link.getKey())) {\n+\n+                private static final long serialVersionUID = -7978723352517770644L;\n+\n+                @Override\n+                public void onClick(final AjaxRequestTarget target) {\n+                    model.setObject(realmTO);\n+                    label.setDefaultModelObject(model.getObject().getFullPath());\n+                    realmLabel.setDefaultModel(new ResourceModel(\"realmLabel\", \"Realm\"));\n+                    target.add(label);\n+                    send(pageRef.getPage(), Broadcast.EXACT, new ChosenRealm<>(realmTO, target));\n                 }\n \n-                if (!dynRealmTree.getObject().isEmpty()) {\n-                    RealmChoicePanel.this.links.add(new BootstrapAjaxLink<RealmTO>(\n-                            ButtonList.getButtonMarkupId(),\n-                            new Model<RealmTO>(),\n-                            Buttons.Type.Link,\n-                            new ResourceModel(\"dynrealms\", \"Dynamic Realms\")) {\n+                @Override\n+                public boolean isEnabled() {\n+                    return availableRealms.stream().\n+                            anyMatch(availableRealm -> realmTO.getFullPath().startsWith(availableRealm));\n+                }\n+            });\n+        }\n \n-                        private static final long serialVersionUID = -7978723352517770744L;\n+        if (!dynRealmTree.getObject().isEmpty()) {\n+            RealmChoicePanel.this.links.add(new BootstrapAjaxLink<RealmTO>(\n+                    ButtonList.getButtonMarkupId(),\n+                    new Model<RealmTO>(),\n+                    Buttons.Type.Link,\n+                    new ResourceModel(\"dynrealms\", \"Dynamic Realms\")) {\n \n-                        @Override\n-                        public void onClick(final AjaxRequestTarget target) {\n+                private static final long serialVersionUID = -7978723352517770744L;\n \n-                        }\n+                @Override\n+                public void onClick(final AjaxRequestTarget target) {\n \n-                        @Override\n-                        public boolean isEnabled() {\n-                            return false;\n-                        }\n+                }\n \n-                        @Override\n-                        protected void onComponentTag(final ComponentTag tag) {\n-                            tag.put(\"class\", \"panel box box-primary box-header with-border\");\n-                            tag.put(\"style\", \"margin: 20px 5px 0px 5px; width: 90%\");\n-                        }\n-                    });\n+                @Override\n+                public boolean isEnabled() {\n+                    return false;\n+                }\n \n-                    for (DynRealmTO dynRealmTO : dynRealmTree.getObject()) {\n-                        final RealmTO realmTO = new RealmTO();\n-                        realmTO.setKey(dynRealmTO.getKey());\n-                        realmTO.setName(dynRealmTO.getKey());\n-                        realmTO.setFullPath(dynRealmTO.getKey());\n-\n-                        RealmChoicePanel.this.links.add(new BootstrapAjaxLink<RealmTO>(\n-                                ButtonList.getButtonMarkupId(),\n-                                new Model<RealmTO>(),\n-                                Buttons.Type.Link,\n-                                new Model<>(realmTO.getKey())) {\n-\n-                            private static final long serialVersionUID = -7978723352517770644L;\n-\n-                            @Override\n-                            public void onClick(final AjaxRequestTarget target) {\n-                                model.setObject(realmTO);\n-                                label.setDefaultModelObject(realmTO.getKey());\n-                                realmLabel.setDefaultModel(new ResourceModel(\"dynRealmLabel\", \"Dynamic Realm\"));\n-                                target.add(label);\n-                                send(pageRef.getPage(), Broadcast.EXACT, new ChosenRealm<>(realmTO, target));\n-                            }\n-\n-                            @Override\n-                            public boolean isEnabled() {\n-                                return availableRealms.stream()\n-                                        .anyMatch(availableRealm -> SyncopeConstants.ROOT_REALM.equals(availableRealm)\n-                                        || realmTO.getKey().equals(availableRealm));\n-                            }\n-                        });\n-                    }\n+                @Override\n+                protected void onComponentTag(final ComponentTag tag) {\n+                    tag.put(\"class\", \"panel box box-primary box-header with-border\");\n+                    tag.put(\"style\", \"margin: 20px 5px 0px 5px; width: 90%\");\n                 }\n+            });\n \n-                return RealmChoicePanel.this.links;\n-            }\n-        };\n-        realms.setOutputMarkupId(true);\n-        realms.setAlignment(AlignmentBehavior.Alignment.RIGHT);\n-        realms.setType(Buttons.Type.Menu);\n+            for (DynRealmTO dynRealmTO : dynRealmTree.getObject()) {\n+                final RealmTO realmTO = new RealmTO();\n+                realmTO.setKey(dynRealmTO.getKey());\n+                realmTO.setName(dynRealmTO.getKey());\n+                realmTO.setFullPath(dynRealmTO.getKey());\n \n-        MetaDataRoleAuthorizationStrategy.authorize(realms, ENABLE, IdRepoEntitlement.REALM_LIST);\n+                RealmChoicePanel.this.links.add(new BootstrapAjaxLink<RealmTO>(\n+                        ButtonList.getButtonMarkupId(),\n+                        new Model<RealmTO>(),\n+                        Buttons.Type.Link,\n+                        new Model<>(realmTO.getKey())) {\n+\n+                    private static final long serialVersionUID = -7978723352517770644L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        model.setObject(realmTO);\n+                        label.setDefaultModelObject(realmTO.getKey());\n+                        realmLabel.setDefaultModel(new ResourceModel(\"dynRealmLabel\", \"Dynamic Realm\"));\n+                        target.add(label);\n+                        send(pageRef.getPage(), Broadcast.EXACT, new ChosenRealm<>(realmTO, target));\n+                    }\n \n-        container.addOrReplace(realms);\n+                    @Override\n+                    public boolean isEnabled() {\n+                        return availableRealms.stream().anyMatch(availableRealm -> {\n+                            return SyncopeConstants.ROOT_REALM.equals(availableRealm)\n+                                    || realmTO.getKey().equals(availableRealm);\n+                        });\n+                    }\n+                });\n+            }\n+        }\n     }\n \n     public final RealmChoicePanel reloadRealmTree(final AjaxRequestTarget target) {\n@@ -360,10 +456,6 @@ public RealmTO moveToParentRealm(final String key) {\n         return null;\n     }\n \n-    public List<AbstractLink> getLinks() {\n-        return links;\n-    }\n-\n     public static class ChosenRealm<T> {\n \n         private final AjaxRequestTarget target;\n@@ -383,4 +475,8 @@ public AjaxRequestTarget getTarget() {\n             return target;\n         }\n     }\n+\n+    public List<AbstractLink> getLinks() {\n+        return links;\n+    }\n }"},{"sha":"a6271bb8ae951f56fb76ea1d52b4416b23a1f090","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/RealmChoicePanel.html","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/af43767bfe1b0fa840abc0a58986350b69e2f719/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/af43767bfe1b0fa840abc0a58986350b69e2f719/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.html?ref=af43767bfe1b0fa840abc0a58986350b69e2f719","patch":"@@ -22,9 +22,18 @@\n       <div class=\"realm-label\">\n         <label wicket:id=\"realmLabel\"/>: <label wicket:id=\"realm\"/>\n       </div>\n-      <div class=\"realm-choice\">\n-        <button wicket:id=\"realms\"></button>\n-      </div>\n+      <span wicket:id=\"realmsFragment\"></span>\n+\n+      <wicket:fragment wicket:id=\"realmsSearchFragment\">\n+        <div class=\"realm-choice\">\n+          <select wicket:id=\"realmsLiveSearch\" class=\"realm-live-search\"></select> \n+        </div>\n+      </wicket:fragment>\n+      <wicket:fragment wicket:id=\"realmsListFragment\">\n+        <div class=\"realm-choice\">\n+          <button wicket:id=\"realms\"></button>\n+        </div>\n+      </wicket:fragment>\n     </div>\n   </wicket:panel>\n </html>\n\\ No newline at end of file"},{"sha":"ebdec1dbb40972382f80d5c9484a7fe4b5769125","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/RealmsITCase.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/af43767bfe1b0fa840abc0a58986350b69e2f719/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRealmsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/af43767bfe1b0fa840abc0a58986350b69e2f719/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRealmsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRealmsITCase.java?ref=af43767bfe1b0fa840abc0a58986350b69e2f719","patch":"@@ -67,10 +67,10 @@ public void create() {\n         // remove the new realm just created\n         UTILITY_UI.getTester().clickLink(\"body:realmsLI:realms\");\n \n-        UTILITY_UI.getTester().\n-                executeAjaxEvent(\"body:content:realmChoicePanel:container:realms:btn\", Constants.ON_CLICK);\n         UTILITY_UI.getTester().executeAjaxEvent(\n-                \"body:content:realmChoicePanel:container:realms:dropdown-menu:buttons:5:button\",\n+                \"body:content:realmChoicePanel:container:realmsFragment:realms:btn\", Constants.ON_CLICK);\n+        UTILITY_UI.getTester().executeAjaxEvent(\n+                \"body:content:realmChoicePanel:container:realmsFragment:realms:dropdown-menu:buttons:5:button\",\n                 Constants.ON_CLICK);\n \n         UTILITY_UI.getTester().assertLabel(\"body:content:realmChoicePanel:container:realm\", \"/testRealm\");\n@@ -109,10 +109,11 @@ public void update() {\n \n     @Test\n     public void addUserTemplate() {\n-        UTILITY_UI.getTester().\n-                executeAjaxEvent(\"body:content:realmChoicePanel:container:realms:btn\", Constants.ON_CLICK);\n         UTILITY_UI.getTester().executeAjaxEvent(\n-                \"body:content:realmChoicePanel:container:realms:dropdown-menu:buttons:4:button\",\n+                \"body:content:realmChoicePanel:container:realmsFragment:realms:btn\",\n+                Constants.ON_CLICK);\n+        UTILITY_UI.getTester().executeAjaxEvent(\n+                \"body:content:realmChoicePanel:container:realmsFragment:realms:dropdown-menu:buttons:4:button\",\n                 Constants.ON_CLICK);\n \n         UTILITY_UI.getTester().assertLabel(\"body:content:realmChoicePanel:container:realm\", \"/odd\");\n@@ -161,10 +162,10 @@ public void addUserTemplate() {\n \n     @Test\n     public void verifyPropagation() {\n-        UTILITY_UI.getTester().\n-                executeAjaxEvent(\"body:content:realmChoicePanel:container:realms:btn\", Constants.ON_CLICK);\n-        UTILITY_UI.getTester().executeAjaxEvent(\n-                \"body:content:realmChoicePanel:container:realms:dropdown-menu:buttons:2:button\",\n+        UTILITY_UI.getTester().executeAjaxEvent(\"body:content:realmChoicePanel:container\"\n+                + \":realmsFragment:realms:btn\", Constants.ON_CLICK);\n+        UTILITY_UI.getTester().executeAjaxEvent(\"body:content:realmChoicePanel:container\"\n+                + \":realmsFragment:realms:dropdown-menu:buttons:2:button\",\n                 Constants.ON_CLICK);\n \n         UTILITY_UI.getTester().clickLink("}]}