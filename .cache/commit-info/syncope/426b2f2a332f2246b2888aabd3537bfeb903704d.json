{"sha":"426b2f2a332f2246b2888aabd3537bfeb903704d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQyNmIyZjJhMzMyZjIyNDZiMjg4OGFhYmQzNTM3YmZlYjkwMzcwNGQ=","commit":{"author":{"name":"Matteo Alessandroni","email":"skylark17@apache.org","date":"2020-04-09T10:58:10Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@users.noreply.github.com","date":"2020-04-10T08:27:53Z"},"message":"[SYNCOPE-160] AuthModule service","tree":{"sha":"715a5028fd95707590250e0a993d3bdb22d35e76","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/715a5028fd95707590250e0a993d3bdb22d35e76"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/426b2f2a332f2246b2888aabd3537bfeb903704d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/426b2f2a332f2246b2888aabd3537bfeb903704d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/426b2f2a332f2246b2888aabd3537bfeb903704d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/426b2f2a332f2246b2888aabd3537bfeb903704d/comments","author":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d42c2cf923d22b1cb865ef263d55db945589d5d9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d42c2cf923d22b1cb865ef263d55db945589d5d9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d42c2cf923d22b1cb865ef263d55db945589d5d9"}],"stats":{"total":3488,"additions":3488,"deletions":0},"files":[{"sha":"a4399d69a886bcbc46b0d07cdf879f502c777a87","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/AbstractAuthModuleConf.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAbstractAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAbstractAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAbstractAuthModuleConf.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.auth;\n+\n+import java.io.Serializable;\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlType\n+@XmlSeeAlso({ JaasAuthModuleConf.class, StaticAuthModuleConf.class, LDAPAuthModuleConf.class,\n+    OIDCAuthModuleConf.class, GoogleMfaAuthModuleConf.class, SAML2IdPAuthModuleConf.class, U2FAuthModuleConf.class,\n+    JDBCAuthModuleConf.class, SyncopeAuthModuleConf.class, RadiusAuthModuleConf.class })\n+public abstract class AbstractAuthModuleConf implements Serializable, AuthModuleConf {\n+\n+    private static final long serialVersionUID = 4153200197344709778L;\n+\n+    private String name;\n+\n+    public AbstractAuthModuleConf() {\n+        setName(getClass().getName());\n+    }\n+\n+    @Override\n+    public final String getName() {\n+        return name;\n+    }\n+\n+    public final void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+}"},{"sha":"28c13577e96ed3bfd057e18a40de01b37a3a88d6","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/AuthModuleConf.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAuthModuleConf.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.auth;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import java.io.Serializable;\n+import javax.xml.bind.annotation.XmlTransient;\n+\n+@XmlTransient\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n+public interface AuthModuleConf extends Serializable {\n+\n+    /**\n+     * Given name of related authentication module instance.\n+     *\n+     * @return name of this authentication module instance\n+     */\n+    String getName();\n+}"},{"sha":"a2e41682c5d1caaf4dd6de49463304dc851c636a","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/GoogleMfaAuthModuleConf.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FGoogleMfaAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FGoogleMfaAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FGoogleMfaAuthModuleConf.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.auth;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"googleMfaAuthModuleConf\")\n+@XmlType\n+public class GoogleMfaAuthModuleConf extends AbstractAuthModuleConf {\n+\n+    private static final long serialVersionUID = -7883257599139312426L;\n+\n+    /**\n+     * Issuer used in the barcode when dealing with device registration events.\n+     * Used in the registration URL to identify CAS.\n+     */\n+    private String issuer = \"Syncope\";\n+\n+    /**\n+     * Label used in the barcode when dealing with device registration events.\n+     * Used in the registration URL to identify CAS.\n+     */\n+    private String label = \"Syncope\";\n+\n+    /**\n+     * Length of the generated code.\n+     */\n+    private int codeDigits = 6;\n+\n+    /**\n+     * The expiration time of the generated code in seconds.\n+     */\n+    private long timeStepSize = 30;\n+\n+    /**\n+     * Since TOTP passwords are time-based, it is essential that\n+     * the clock of both the server and\n+     * the client are synchronised within\n+     * the tolerance defined here as the window size.\n+     */\n+    private int windowSize = 3;\n+\n+    public String getIssuer() {\n+        return issuer;\n+    }\n+\n+    public void setIssuer(final String issuer) {\n+        this.issuer = issuer;\n+    }\n+\n+    public String getLabel() {\n+        return label;\n+    }\n+\n+    public void setLabel(final String label) {\n+        this.label = label;\n+    }\n+\n+    public int getCodeDigits() {\n+        return codeDigits;\n+    }\n+\n+    public void setCodeDigits(final int codeDigits) {\n+        this.codeDigits = codeDigits;\n+    }\n+\n+    public long getTimeStepSize() {\n+        return timeStepSize;\n+    }\n+\n+    public void setTimeStepSize(final long timeStepSize) {\n+        this.timeStepSize = timeStepSize;\n+    }\n+\n+    public int getWindowSize() {\n+        return windowSize;\n+    }\n+\n+    public void setWindowSize(final int windowSize) {\n+        this.windowSize = windowSize;\n+    }\n+}"},{"sha":"01410784f96d0e8f884fa78ddc721981917166b5","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/JDBCAuthModuleConf.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FJDBCAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FJDBCAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FJDBCAuthModuleConf.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.auth;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import javax.xml.bind.annotation.XmlType;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlRootElement(name = \"jdbcAuthModuleConf\")\n+@XmlType\n+public class JDBCAuthModuleConf extends AbstractAuthModuleConf {\n+\n+    private static final long serialVersionUID = 8383233437907219385L;\n+\n+    /**\n+     * SQL query to execute. Example: {@code SELECT * FROM table WHERE name=?}.\n+     */\n+    private String sql;\n+\n+    /**\n+     * Password field/column name to retrieve.\n+     */\n+    private String fieldPassword;\n+\n+    /**\n+     * Boolean field that should indicate whether the account is expired.\n+     */\n+    private String fieldExpired;\n+\n+    /**\n+     * Boolean field that should indicate whether the account is disabled.\n+     */\n+    private String fieldDisabled;\n+\n+    /**\n+     * List of column names to fetch as user attributes.\n+     */\n+    private final List<String> principalAttributeList = new ArrayList<>();\n+\n+    public String getSql() {\n+        return sql;\n+    }\n+\n+    public void setSql(final String sql) {\n+        this.sql = sql;\n+    }\n+\n+    public String getFieldPassword() {\n+        return fieldPassword;\n+    }\n+\n+    public void setFieldPassword(final String fieldPassword) {\n+        this.fieldPassword = fieldPassword;\n+    }\n+\n+    public String getFieldExpired() {\n+        return fieldExpired;\n+    }\n+\n+    public void setFieldExpired(final String fieldExpired) {\n+        this.fieldExpired = fieldExpired;\n+    }\n+\n+    public String getFieldDisabled() {\n+        return fieldDisabled;\n+    }\n+\n+    public void setFieldDisabled(final String fieldDisabled) {\n+        this.fieldDisabled = fieldDisabled;\n+    }\n+\n+    @XmlElementWrapper(name = \"principalAttributeList\")\n+    @XmlElement(name = \"principalAttributeList\")\n+    @JsonProperty(\"principalAttributeList\")\n+    public List<String> getPrincipalAttributeList() {\n+        return principalAttributeList;\n+    }\n+\n+}"},{"sha":"b8627ab84c8f142d56d0153fe0d9c84871528dd1","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/JaasAuthModuleConf.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FJaasAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FJaasAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FJaasAuthModuleConf.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.auth;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"jaasAuthModuleConf\")\n+@XmlType\n+public class JaasAuthModuleConf extends AbstractAuthModuleConf {\n+\n+    private static final long serialVersionUID = -7775771400318503131L;\n+\n+    /**\n+     * The realm that contains the login module information.\n+     */\n+    private String realm;\n+\n+    /**\n+     * System property value to overwrite the realm in krb5 config.\n+     */\n+    private String kerberosRealmSystemProperty;\n+\n+    /**\n+     * System property value to overwrite the kdc in krb5 config.\n+     */\n+    private String kerberosKdcSystemProperty;\n+\n+    private String loginConfigType;\n+\n+    private String loginConfigurationFile;\n+\n+    public String getRealm() {\n+        return realm;\n+    }\n+\n+    public void setRealm(final String realm) {\n+        this.realm = realm;\n+    }\n+\n+    public String getKerberosRealmSystemProperty() {\n+        return kerberosRealmSystemProperty;\n+    }\n+\n+    public void setKerberosRealmSystemProperty(final String kerberosRealmSystemProperty) {\n+        this.kerberosRealmSystemProperty = kerberosRealmSystemProperty;\n+    }\n+\n+    public String getKerberosKdcSystemProperty() {\n+        return kerberosKdcSystemProperty;\n+    }\n+\n+    public void setKerberosKdcSystemProperty(final String kerberosKdcSystemProperty) {\n+        this.kerberosKdcSystemProperty = kerberosKdcSystemProperty;\n+    }\n+\n+    public String getLoginConfigType() {\n+        return loginConfigType;\n+    }\n+\n+    public void setLoginConfigType(final String loginConfigType) {\n+        this.loginConfigType = loginConfigType;\n+    }\n+\n+    public String getLoginConfigurationFile() {\n+        return loginConfigurationFile;\n+    }\n+\n+    public void setLoginConfigurationFile(final String loginConfigurationFile) {\n+        this.loginConfigurationFile = loginConfigurationFile;\n+    }\n+}"},{"sha":"afd7f90166031a87cbcd784802652d2226035ff8","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/LDAPAuthModuleConf.java","status":"added","additions":126,"deletions":0,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FLDAPAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FLDAPAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FLDAPAuthModuleConf.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.auth;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"ldapAuthModuleConf\")\n+@XmlType\n+public class LDAPAuthModuleConf extends AbstractAuthModuleConf {\n+\n+    private static final long serialVersionUID = -471527731042579422L;\n+\n+    protected String searchFilter;\n+\n+    /**\n+     * The attribute value that should be used\n+     * for the authenticated username, upon a successful authentication\n+     * attempt.\n+     */\n+    private String userIdAttribute;\n+\n+    /**\n+     * Whether subtree searching is allowed.\n+     */\n+    private boolean subtreeSearch = true;\n+\n+    private String ldapUrl;\n+\n+    /**\n+     * The bind DN to use when connecting to LDAP.\n+     * LDAP connection configuration injected into the LDAP connection pool\n+     * can be initialized with the following parameters:\n+     * <ul>\n+     * <li>{@code bindDn/bindCredential} provided - Use the provided credentials\n+     * to bind when initializing connections.</li>\n+     * <li>{@code bindDn/bindCredential} set to {@code *} - Use a fast-bind\n+     * strategy to initialize the pool.</li>\n+     * <li>{@code bindDn/bindCredential} set to blank - Skip connection\n+     * initializing; perform operations anonymously.</li>\n+     * <li>SASL mechanism provided - Use the given SASL mechanism\n+     * to bind when initializing connections. </li>\n+     * </ul>\n+     */\n+    private String bindDn;\n+\n+    /**\n+     * The bind credential to use when connecting to LDAP.\n+     */\n+    private String bindCredential;\n+\n+    private String baseDn;\n+\n+    public String getSearchFilter() {\n+        return searchFilter;\n+    }\n+\n+    public void setSearchFilter(final String searchFilter) {\n+        this.searchFilter = searchFilter;\n+    }\n+\n+    public String getUserIdAttribute() {\n+        return userIdAttribute;\n+    }\n+\n+    public void setUserIdAttribute(final String userIdAttribute) {\n+        this.userIdAttribute = userIdAttribute;\n+    }\n+\n+    public boolean isSubtreeSearch() {\n+        return subtreeSearch;\n+    }\n+\n+    public void setSubtreeSearch(final boolean subtreeSearch) {\n+        this.subtreeSearch = subtreeSearch;\n+    }\n+\n+    public String getLdapUrl() {\n+        return ldapUrl;\n+    }\n+\n+    public void setLdapUrl(final String ldapUrl) {\n+        this.ldapUrl = ldapUrl;\n+    }\n+\n+    public String getBindDn() {\n+        return bindDn;\n+    }\n+\n+    public void setBindDn(final String bindDn) {\n+        this.bindDn = bindDn;\n+    }\n+\n+    public String getBindCredential() {\n+        return bindCredential;\n+    }\n+\n+    public void setBindCredential(final String bindCredential) {\n+        this.bindCredential = bindCredential;\n+    }\n+\n+    public String getBaseDn() {\n+        return baseDn;\n+    }\n+\n+    public void setBaseDn(final String baseDn) {\n+        this.baseDn = baseDn;\n+    }\n+\n+}"},{"sha":"d59b34ddde5ecfebac4986d25ec4c899b5118193","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/OIDCAuthModuleConf.java","status":"added","additions":182,"deletions":0,"changes":182,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOIDCAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOIDCAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOIDCAuthModuleConf.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,182 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.auth;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import javax.xml.bind.annotation.XmlType;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n+\n+@XmlRootElement(name = \"oidcAuthModuleConf\")\n+@XmlType\n+public class OIDCAuthModuleConf extends AbstractAuthModuleConf {\n+\n+    private static final long serialVersionUID = -471527731042579422L;\n+\n+    /**\n+     * The client id.\n+     */\n+    private String id;\n+\n+    /**\n+     * The client secret.\n+     */\n+    private String secret;\n+\n+    /**\n+     * The attribute value that should be used\n+     * for the authenticated username, upon a successful authentication\n+     * attempt.\n+     */\n+    private String userIdAttribute;\n+\n+    private String discoveryUri;\n+\n+    /**\n+     * Whether an initial nonce should be to used\n+     * initially for replay attack mitigation.\n+     */\n+    private boolean useNonce;\n+\n+    /**\n+     * Requested scope(s).\n+     */\n+    private String scope;\n+\n+    /**\n+     * The JWS algorithm to use forcefully when validating ID tokens.\n+     * If none is defined, the first algorithm from metadata will be used.\n+     */\n+    private String preferredJwsAlgorithm;\n+\n+    /**\n+     * Clock skew in order to account for drift, when validating id tokens.\n+     */\n+    private int maxClockSkew;\n+\n+    /**\n+     * Custom parameters to send along in authZ requests, etc.\n+     */\n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n+    private final Map<String, String> customParams = new HashMap<>(0);\n+\n+    /**\n+     * The response mode specifies how the result of the authorization request is formatted.\n+     * Possible values includes \"query\", \"fragment\", \"form_post\", or \"web_message\"\n+     */\n+    private String responseMode;\n+\n+    /**\n+     * The response type tells the authorization server which grant to execute.\n+     * Possibles values includes \"code\", \"token\" or \"id_token\".\n+     */\n+    private String responseType;\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(final String id) {\n+        this.id = id;\n+    }\n+\n+    public String getSecret() {\n+        return secret;\n+    }\n+\n+    public void setSecret(final String secret) {\n+        this.secret = secret;\n+    }\n+\n+    public String getUserIdAttribute() {\n+        return userIdAttribute;\n+    }\n+\n+    public void setUserIdAttribute(final String userIdAttribute) {\n+        this.userIdAttribute = userIdAttribute;\n+    }\n+\n+    public String getDiscoveryUri() {\n+        return discoveryUri;\n+    }\n+\n+    public void setDiscoveryUri(final String discoveryUri) {\n+        this.discoveryUri = discoveryUri;\n+    }\n+\n+    public boolean isUseNonce() {\n+        return useNonce;\n+    }\n+\n+    public void setUseNonce(final boolean useNonce) {\n+        this.useNonce = useNonce;\n+    }\n+\n+    public String getScope() {\n+        return scope;\n+    }\n+\n+    public void setScope(final String scope) {\n+        this.scope = scope;\n+    }\n+\n+    public String getPreferredJwsAlgorithm() {\n+        return preferredJwsAlgorithm;\n+    }\n+\n+    public void setPreferredJwsAlgorithm(final String preferredJwsAlgorithm) {\n+        this.preferredJwsAlgorithm = preferredJwsAlgorithm;\n+    }\n+\n+    public int getMaxClockSkew() {\n+        return maxClockSkew;\n+    }\n+\n+    public void setMaxClockSkew(final int maxClockSkew) {\n+        this.maxClockSkew = maxClockSkew;\n+    }\n+\n+    @XmlElementWrapper(name = \"customParams\")\n+    @XmlElement(name = \"customParam\")\n+    @JsonProperty(\"customParams\")\n+    public Map<String, String> getCustomParams() {\n+        return customParams;\n+    }\n+\n+    public String getResponseMode() {\n+        return responseMode;\n+    }\n+\n+    public void setResponseMode(final String responseMode) {\n+        this.responseMode = responseMode;\n+    }\n+\n+    public String getResponseType() {\n+        return responseType;\n+    }\n+\n+    public void setResponseType(final String responseType) {\n+        this.responseType = responseType;\n+    }\n+}"},{"sha":"7cd543c83765d779a7c0b08b392f641d3847f4b2","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/RadiusAuthModuleConf.java","status":"added","additions":172,"deletions":0,"changes":172,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FRadiusAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FRadiusAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FRadiusAuthModuleConf.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.auth;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"radiusAuthModuleConf\")\n+@XmlType\n+public class RadiusAuthModuleConf extends AbstractAuthModuleConf {\n+\n+    private static final long serialVersionUID = -2235771400318503131L;\n+\n+    /**\n+     * Radius protocol to use when communicating with the server.\n+     */\n+    private String protocol = \"EAP_MSCHAPv2\";\n+\n+    private String inetAddress;\n+\n+    private String sharedSecret;\n+\n+    private int socketTimeout;\n+\n+    private int authenticationPort = 1812;\n+\n+    private int accountingPort = 1813;\n+\n+    private int retries = 3;\n+\n+    private String nasIdentifier;\n+\n+    private long nasPort = -1;\n+\n+    private long nasPortId = -1;\n+\n+    private long nasRealPort = -1;\n+\n+    private int nasPortType = -1;\n+\n+    private String nasIpAddress;\n+\n+    private String nasIpv6Address;\n+\n+    public String getProtocol() {\n+        return protocol;\n+    }\n+\n+    public void setProtocol(final String protocol) {\n+        this.protocol = protocol;\n+    }\n+\n+    public int getRetries() {\n+        return retries;\n+    }\n+\n+    public void setRetries(final int retries) {\n+        this.retries = retries;\n+    }\n+\n+    public String getNasIdentifier() {\n+        return nasIdentifier;\n+    }\n+\n+    public void setNasIdentifier(final String nasIdentifier) {\n+        this.nasIdentifier = nasIdentifier;\n+    }\n+\n+    public long getNasPort() {\n+        return nasPort;\n+    }\n+\n+    public void setNasPort(final long nasPort) {\n+        this.nasPort = nasPort;\n+    }\n+\n+    public long getNasPortId() {\n+        return nasPortId;\n+    }\n+\n+    public void setNasPortId(final long nasPortId) {\n+        this.nasPortId = nasPortId;\n+    }\n+\n+    public long getNasRealPort() {\n+        return nasRealPort;\n+    }\n+\n+    public void setNasRealPort(final long nasRealPort) {\n+        this.nasRealPort = nasRealPort;\n+    }\n+\n+    public int getNasPortType() {\n+        return nasPortType;\n+    }\n+\n+    public void setNasPortType(final int nasPortType) {\n+        this.nasPortType = nasPortType;\n+    }\n+\n+    public String getNasIpAddress() {\n+        return nasIpAddress;\n+    }\n+\n+    public void setNasIpAddress(final String nasIpAddress) {\n+        this.nasIpAddress = nasIpAddress;\n+    }\n+\n+    public String getNasIpv6Address() {\n+        return nasIpv6Address;\n+    }\n+\n+    public void setNasIpv6Address(final String nasIpv6Address) {\n+        this.nasIpv6Address = nasIpv6Address;\n+    }\n+\n+    public String getInetAddress() {\n+        return inetAddress;\n+    }\n+\n+    public void setInetAddress(final String inetAddress) {\n+        this.inetAddress = inetAddress;\n+    }\n+\n+    public String getSharedSecret() {\n+        return sharedSecret;\n+    }\n+\n+    public void setSharedSecret(final String sharedSecret) {\n+        this.sharedSecret = sharedSecret;\n+    }\n+\n+    public int getSocketTimeout() {\n+        return socketTimeout;\n+    }\n+\n+    public void setSocketTimeout(final int socketTimeout) {\n+        this.socketTimeout = socketTimeout;\n+    }\n+\n+    public int getAuthenticationPort() {\n+        return authenticationPort;\n+    }\n+\n+    public void setAuthenticationPort(final int authenticationPort) {\n+        this.authenticationPort = authenticationPort;\n+    }\n+\n+    public int getAccountingPort() {\n+        return accountingPort;\n+    }\n+\n+    public void setAccountingPort(final int accountingPort) {\n+        this.accountingPort = accountingPort;\n+    }\n+}"},{"sha":"03b6aedb6c3fd0ee13c76918219066976f2e1364","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/SAML2IdPAuthModuleConf.java","status":"added","additions":430,"deletions":0,"changes":430,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSAML2IdPAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSAML2IdPAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSAML2IdPAuthModuleConf.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,430 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.auth;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"saml2IdPAuthModuleConf\")\n+@XmlType\n+public class SAML2IdPAuthModuleConf extends AbstractAuthModuleConf {\n+\n+    private static final long serialVersionUID = -471527731042579422L;\n+\n+    /**\n+     * The attribute value that should be used\n+     * for the authenticated username, upon a successful authentication\n+     * attempt.\n+     */\n+    private String userIdAttribute;\n+\n+    /**\n+     * The destination binding to use\n+     * when creating authentication requests.\n+     */\n+    private String destinationBinding = \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\";\n+\n+    /**\n+     * The password to use when generating the SP keystore.\n+     */\n+    private String keystorePassword;\n+\n+    /**\n+     * The password to use when generating the private key for the SP keystore.\n+     */\n+    private String privateKeyPassword;\n+\n+    /**\n+     * Location of the keystore to use and generate the SP keystore.\n+     */\n+    private String keystorePath;\n+\n+    /**\n+     * The metadata location of the identity provider that is to handle authentications.\n+     */\n+    private String identityProviderMetadataPath;\n+\n+    /**\n+     * Flag to indicate whether the allow-create flags\n+     * for nameid policies should be set to true, false or ignored/defined.\n+     * Accepted values are true, false or undefined.\n+     */\n+    private String nameIdPolicyAllowCreate = \"undefined\";\n+\n+    /**\n+     * Once you have an authenticated session on the identity provider, usually it won't prompt you again to enter your\n+     * credentials and it will automatically generate a new assertion for you. By default, the SAML client\n+     * will accept assertions based on a previous authentication for one hour.\n+     * You can adjust this behavior by modifying this setting. The unit of time here is seconds.\n+     */\n+    private int maximumAuthenticationLifetime = 3600;\n+\n+    /**\n+     * Maximum skew in seconds between SP and IDP clocks.\n+     * This skew is added onto the {@code NotOnOrAfter} field in seconds\n+     * for the SAML response validation.\n+     */\n+    private int acceptedSkew = 300;\n+\n+    /**\n+     * The entity id of the SP that is used in the SP metadata generation process.\n+     */\n+    private String serviceProviderEntityId;\n+\n+    /**\n+     * Location of the SP metadata to use and generate.\n+     */\n+    private String serviceProviderMetadataPath;\n+\n+    /**\n+     * Whether authentication requests should be tagged as forced auth.\n+     */\n+    private boolean forceAuth;\n+\n+    /**\n+     * Whether authentication requests should be tagged as passive.\n+     */\n+    private boolean passive;\n+\n+    /**\n+     * Requested authentication context class in authn requests.\n+     */\n+    private final List<String> authnContextClassRefs = new ArrayList<>(0);\n+\n+    /**\n+     * Specifies the comparison rule that should be used to evaluate the specified authentication methods.\n+     * For example, if exact is specified, the authentication method used must match one of the authentication\n+     * methods specified by the AuthnContextClassRef elements.\n+     * AuthContextClassRef element require comparison rule to be used to evaluate the specified\n+     * authentication methods. If not explicitly specified \"exact\" rule will be used by default.\n+     * Other acceptable values are minimum, maximum, better.\n+     */\n+    private String authnContextComparisonType = \"exact\";\n+\n+    /**\n+     * The key alias used in the keystore.\n+     */\n+    private String keystoreAlias;\n+\n+    /**\n+     * NameID policy to request in the authentication requests.\n+     */\n+    private String nameIdPolicyFormat;\n+\n+    /**\n+     * Whether metadata should be marked to request sign assertions.\n+     */\n+    private boolean wantsAssertionsSigned;\n+\n+    /**\n+     * AttributeConsumingServiceIndex attribute of AuthnRequest element.\n+     * The given index points out a specific AttributeConsumingService structure, declared into the\n+     * Service Provider (SP)'s metadata, to be used to specify all the attributes that the Service Provider\n+     * is asking to be released within the authentication assertion returned by the Identity Provider (IdP).\n+     * This attribute won't be sent with the request unless a positive value (including 0) is defined.\n+     */\n+    private int attributeConsumingServiceIndex;\n+\n+    /**\n+     * Allows the SAML client to select a specific ACS url from the metadata, if defined.\n+     * A negative value de-activates the selection process and is the default.\n+     */\n+    private int assertionConsumerServiceIndex = -1;\n+\n+    /**\n+     * Whether name qualifiers should be produced\n+     * in the final saml response.\n+     */\n+    private boolean useNameQualifier = true;\n+\n+    /**\n+     * Whether or not SAML SP metadata should be signed when generated.\n+     */\n+    private boolean signServiceProviderMetadata;\n+\n+    /**\n+     * Whether or not the authnRequest should be signed.\n+     */\n+    private boolean signAuthnRequest;\n+\n+    /**\n+     * Whether or not the Logout Request sent from the SP should be signed.\n+     */\n+    private boolean signServiceProviderLogoutRequest;\n+\n+    /**\n+     * Collection of signing signature blacklisted algorithms, if any, to override the global defaults.\n+     */\n+    private final List<String> blackListedSignatureSigningAlgorithms = new ArrayList<>(0);\n+\n+    /**\n+     * Collection of signing signature algorithms, if any, to override the global defaults.\n+     */\n+    private final List<String> signatureAlgorithms = new ArrayList<>(0);\n+\n+    /**\n+     * Collection of signing signature reference digest methods, if any, to override the global defaults.\n+     */\n+    private final List<String> signatureReferenceDigestMethods = new ArrayList<>(0);\n+\n+    /**\n+     * The signing signature canonicalization algorithm, if any, to override the global defaults.\n+     */\n+    private String signatureCanonicalizationAlgorithm;\n+\n+    /**\n+     * Provider name set for the saml authentication request.\n+     * Sets the human-readable name of the requester for use by\n+     * the presenter's user agent or the identity provider.\n+     */\n+    private String providerName;\n+\n+    public String getUserIdAttribute() {\n+        return userIdAttribute;\n+    }\n+\n+    public void setUserIdAttribute(final String userIdAttribute) {\n+        this.userIdAttribute = userIdAttribute;\n+    }\n+\n+    public String getDestinationBinding() {\n+        return destinationBinding;\n+    }\n+\n+    public void setDestinationBinding(final String destinationBinding) {\n+        this.destinationBinding = destinationBinding;\n+    }\n+\n+    public String getKeystorePassword() {\n+        return keystorePassword;\n+    }\n+\n+    public void setKeystorePassword(final String keystorePassword) {\n+        this.keystorePassword = keystorePassword;\n+    }\n+\n+    public String getPrivateKeyPassword() {\n+        return privateKeyPassword;\n+    }\n+\n+    public void setPrivateKeyPassword(final String privateKeyPassword) {\n+        this.privateKeyPassword = privateKeyPassword;\n+    }\n+\n+    public String getKeystorePath() {\n+        return keystorePath;\n+    }\n+\n+    public void setKeystorePath(final String keystorePath) {\n+        this.keystorePath = keystorePath;\n+    }\n+\n+    public String getIdentityProviderMetadataPath() {\n+        return identityProviderMetadataPath;\n+    }\n+\n+    public void setIdentityProviderMetadataPath(final String identityProviderMetadataPath) {\n+        this.identityProviderMetadataPath = identityProviderMetadataPath;\n+    }\n+\n+    public int getMaximumAuthenticationLifetime() {\n+        return maximumAuthenticationLifetime;\n+    }\n+\n+    public void setMaximumAuthenticationLifetime(final int maximumAuthenticationLifetime) {\n+        this.maximumAuthenticationLifetime = maximumAuthenticationLifetime;\n+    }\n+\n+    public int getAcceptedSkew() {\n+        return acceptedSkew;\n+    }\n+\n+    public void setAcceptedSkew(final int acceptedSkew) {\n+        this.acceptedSkew = acceptedSkew;\n+    }\n+\n+    public String getServiceProviderEntityId() {\n+        return serviceProviderEntityId;\n+    }\n+\n+    public void setServiceProviderEntityId(final String serviceProviderEntityId) {\n+        this.serviceProviderEntityId = serviceProviderEntityId;\n+    }\n+\n+    public String getServiceProviderMetadataPath() {\n+        return serviceProviderMetadataPath;\n+    }\n+\n+    public void setServiceProviderMetadataPath(final String serviceProviderMetadataPath) {\n+        this.serviceProviderMetadataPath = serviceProviderMetadataPath;\n+    }\n+\n+    public boolean isForceAuth() {\n+        return forceAuth;\n+    }\n+\n+    public void setForceAuth(final boolean forceAuth) {\n+        this.forceAuth = forceAuth;\n+    }\n+\n+    public boolean isPassive() {\n+        return passive;\n+    }\n+\n+    public void setPassive(final boolean passive) {\n+        this.passive = passive;\n+    }\n+\n+    public String getNameIdPolicyAllowCreate() {\n+        return nameIdPolicyAllowCreate;\n+    }\n+\n+    public void setNameIdPolicyAllowCreate(final String nameIdPolicyAllowCreate) {\n+        this.nameIdPolicyAllowCreate = nameIdPolicyAllowCreate;\n+    }\n+\n+    @XmlElementWrapper(name = \"authnContextClassRefs\")\n+    @XmlElement(name = \"authnContextClassRef\")\n+    @JsonProperty(\"authnContextClassRefs\")\n+    public List<String> getAuthnContextClassRefs() {\n+        return authnContextClassRefs;\n+    }\n+\n+    public String getAuthnContextComparisonType() {\n+        return authnContextComparisonType;\n+    }\n+\n+    public void setAuthnContextComparisonType(final String authnContextComparisonType) {\n+        this.authnContextComparisonType = authnContextComparisonType;\n+    }\n+\n+    public String getKeystoreAlias() {\n+        return keystoreAlias;\n+    }\n+\n+    public void setKeystoreAlias(final String keystoreAlias) {\n+        this.keystoreAlias = keystoreAlias;\n+    }\n+\n+    public String getNameIdPolicyFormat() {\n+        return nameIdPolicyFormat;\n+    }\n+\n+    public void setNameIdPolicyFormat(final String nameIdPolicyFormat) {\n+        this.nameIdPolicyFormat = nameIdPolicyFormat;\n+    }\n+\n+    public boolean isWantsAssertionsSigned() {\n+        return wantsAssertionsSigned;\n+    }\n+\n+    public void setWantsAssertionsSigned(final boolean wantsAssertionsSigned) {\n+        this.wantsAssertionsSigned = wantsAssertionsSigned;\n+    }\n+\n+    public int getAttributeConsumingServiceIndex() {\n+        return attributeConsumingServiceIndex;\n+    }\n+\n+    public void setAttributeConsumingServiceIndex(final int attributeConsumingServiceIndex) {\n+        this.attributeConsumingServiceIndex = attributeConsumingServiceIndex;\n+    }\n+\n+    public int getAssertionConsumerServiceIndex() {\n+        return assertionConsumerServiceIndex;\n+    }\n+\n+    public void setAssertionConsumerServiceIndex(final int assertionConsumerServiceIndex) {\n+        this.assertionConsumerServiceIndex = assertionConsumerServiceIndex;\n+    }\n+\n+    public boolean isUseNameQualifier() {\n+        return useNameQualifier;\n+    }\n+\n+    public void setUseNameQualifier(final boolean useNameQualifier) {\n+        this.useNameQualifier = useNameQualifier;\n+    }\n+\n+    public boolean isSignServiceProviderMetadata() {\n+        return signServiceProviderMetadata;\n+    }\n+\n+    public void setSignServiceProviderMetadata(final boolean signServiceProviderMetadata) {\n+        this.signServiceProviderMetadata = signServiceProviderMetadata;\n+    }\n+\n+    public boolean isSignAuthnRequest() {\n+        return signAuthnRequest;\n+    }\n+\n+    public void setSignAuthnRequest(final boolean signAuthnRequest) {\n+        this.signAuthnRequest = signAuthnRequest;\n+    }\n+\n+    public boolean isSignServiceProviderLogoutRequest() {\n+        return signServiceProviderLogoutRequest;\n+    }\n+\n+    public void setSignServiceProviderLogoutRequest(final boolean signServiceProviderLogoutRequest) {\n+        this.signServiceProviderLogoutRequest = signServiceProviderLogoutRequest;\n+    }\n+\n+    @XmlElementWrapper(name = \"blackListedSignatureSigningAlgorithms\")\n+    @XmlElement(name = \"blackListedSignatureSigningAlgorithm\")\n+    @JsonProperty(\"blackListedSignatureSigningAlgorithms\")\n+    public List<String> getBlackListedSignatureSigningAlgorithms() {\n+        return blackListedSignatureSigningAlgorithms;\n+    }\n+\n+    @XmlElementWrapper(name = \"signatureAlgorithms\")\n+    @XmlElement(name = \"signatureAlgorithm\")\n+    @JsonProperty(\"signatureAlgorithms\")\n+    public List<String> getSignatureAlgorithms() {\n+        return signatureAlgorithms;\n+    }\n+\n+    @XmlElementWrapper(name = \"signatureReferenceDigestMethods\")\n+    @XmlElement(name = \"signatureReferenceDigestMethod\")\n+    @JsonProperty(\"signatureReferenceDigestMethods\")\n+    public List<String> getSignatureReferenceDigestMethods() {\n+        return signatureReferenceDigestMethods;\n+    }\n+\n+    public String getSignatureCanonicalizationAlgorithm() {\n+        return signatureCanonicalizationAlgorithm;\n+    }\n+\n+    public void setSignatureCanonicalizationAlgorithm(final String signatureCanonicalizationAlgorithm) {\n+        this.signatureCanonicalizationAlgorithm = signatureCanonicalizationAlgorithm;\n+    }\n+\n+    public String getProviderName() {\n+        return providerName;\n+    }\n+\n+    public void setProviderName(final String providerName) {\n+        this.providerName = providerName;\n+    }\n+}"},{"sha":"60d2751f088e5f59cab9bebc83642accc398da6b","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/StaticAuthModuleConf.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FStaticAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FStaticAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FStaticAuthModuleConf.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.auth;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import javax.xml.bind.annotation.XmlType;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n+\n+@XmlRootElement(name = \"staticAuthModuleConf\")\n+@XmlType\n+public class StaticAuthModuleConf extends AbstractAuthModuleConf {\n+\n+    private static final long serialVersionUID = -7775771400318503131L;\n+\n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n+    private final Map<String, String> users = new HashMap<>();\n+\n+    @XmlElementWrapper(name = \"users\")\n+    @XmlElement(name = \"user\")\n+    @JsonProperty(\"users\")\n+    public Map<String, String> getUsers() {\n+        return users;\n+    }\n+\n+}"},{"sha":"2ac2192b2fc581482be6f4e8f4495cdd727471a0","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/SyncopeAuthModuleConf.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSyncopeAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSyncopeAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSyncopeAuthModuleConf.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.auth;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"syncopeAuthModuleConf\")\n+@XmlType\n+public class SyncopeAuthModuleConf extends AbstractAuthModuleConf {\n+\n+    private static final long serialVersionUID = -3334329948161152222L;\n+\n+    /**\n+     * Syncope domain used for authentication, etc.\n+     */\n+    private String domain = \"Master\";\n+\n+    /**\n+     * Syncope instance URL primary used for REST.\n+     */\n+    private String url;\n+\n+    public String getDomain() {\n+        return domain;\n+    }\n+\n+    public void setDomain(final String domain) {\n+        this.domain = domain;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(final String url) {\n+        this.url = url;\n+    }\n+\n+}"},{"sha":"cc127dac9218921edf96a6fbf59f3ace94e89a3a","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/U2FAuthModuleConf.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FU2FAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FU2FAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FU2FAuthModuleConf.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.auth;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"u2fAuthModuleConf\")\n+@XmlType\n+public class U2FAuthModuleConf extends AbstractAuthModuleConf {\n+\n+    private static final long serialVersionUID = -1235771400318503131L;\n+\n+    private long expireRegistrations = 30;\n+\n+    private String expireRegistrationsTimeUnit = \"SECONDS\";\n+\n+    private long expireDevices = 30;\n+\n+    private String expireDevicesTimeUnit = \"DAYS\";\n+\n+    public long getExpireRegistrations() {\n+        return expireRegistrations;\n+    }\n+\n+    public void setExpireRegistrations(final long expireRegistrations) {\n+        this.expireRegistrations = expireRegistrations;\n+    }\n+\n+    public String getExpireRegistrationsTimeUnit() {\n+        return expireRegistrationsTimeUnit;\n+    }\n+\n+    public void setExpireRegistrationsTimeUnit(final String expireRegistrationsTimeUnit) {\n+        this.expireRegistrationsTimeUnit = expireRegistrationsTimeUnit;\n+    }\n+\n+    public long getExpireDevices() {\n+        return expireDevices;\n+    }\n+\n+    public void setExpireDevices(final long expireDevices) {\n+        this.expireDevices = expireDevices;\n+    }\n+\n+    public String getExpireDevicesTimeUnit() {\n+        return expireDevicesTimeUnit;\n+    }\n+\n+    public void setExpireDevicesTimeUnit(final String expireDevicesTimeUnit) {\n+        this.expireDevicesTimeUnit = expireDevicesTimeUnit;\n+    }\n+}"},{"sha":"e3765a0d60fef3de2641b61363b05a79b226edf8","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/package-info.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2Fpackage-info.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+@XmlSchema(namespace = SyncopeConstants.NS)\n+@XmlJavaTypeAdapters({ @XmlJavaTypeAdapter(type = Date.class, value = DateAdapter.class), })\n+package org.apache.syncope.common.lib.auth;\n+\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.jaxb.DateAdapter;\n+\n+import javax.xml.bind.annotation.XmlSchema;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapters;\n+\n+import java.util.Date;"},{"sha":"492227fe0f37a07328091ec25f852bd0f19029bc","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/AuthModuleTO.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthModuleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthModuleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthModuleTO.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.common.lib.BaseBean;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.auth.AuthModuleConf;\n+\n+@XmlRootElement(name = \"authModule\")\n+@XmlType\n+public class AuthModuleTO extends BaseBean implements EntityTO {\n+\n+    private static final long serialVersionUID = -7490425997956703057L;\n+\n+    private String key;\n+\n+    private String name;\n+\n+    private String description;\n+\n+    private final List<ItemTO> profileItems = new ArrayList<>();\n+\n+    private AuthModuleConf conf;\n+\n+    @Override\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    @Override\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(final String description) {\n+        this.description = description;\n+    }\n+\n+    public AuthModuleConf getConf() {\n+        return conf;\n+    }\n+\n+    public void setConf(final AuthModuleConf conf) {\n+        this.conf = conf;\n+    }\n+\n+    @XmlElementWrapper(name = \"profileItems\")\n+    @XmlElement(name = \"profileItem\")\n+    @JsonProperty(\"profileItems\")\n+    public List<ItemTO> getProfileItems() {\n+        return profileItems;\n+    }\n+\n+    public boolean add(final ItemTO item) {\n+        return Optional.ofNullable(item)\n+                .filter(itemTO -> this.profileItems.contains(itemTO) || this.profileItems.add(itemTO)).isPresent();\n+    }\n+\n+    public boolean remove(final ItemTO item) {\n+        return this.profileItems.remove(item);\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        AuthModuleTO other = (AuthModuleTO) obj;\n+        return new EqualsBuilder().\n+                append(key, other.key).\n+                append(name, other.name).\n+                append(description, other.description).\n+                append(profileItems, other.profileItems).\n+                append(conf, other.conf).\n+                build();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(key).\n+                append(name).\n+                append(description).\n+                append(profileItems).\n+                append(conf).\n+                build();\n+    }\n+\n+}"},{"sha":"83e60154c35cbdc3afecd4752e6992299e07384c","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AuthModuleService.java","status":"added","additions":126,"deletions":0,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthModuleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthModuleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthModuleService.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.AuthModuleTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+\n+/**\n+ * REST operations for authentication modules.\n+ */\n+@Tag(name = \"AuthModules\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\") })\n+@Path(\"authModules\")\n+public interface AuthModuleService extends JAXRSService {\n+\n+    /**\n+     * Returns the authentication module matching the given key.\n+     *\n+     * @param key key of requested authentication module\n+     * @return authentication module with matching id\n+     */\n+    @GET\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    AuthModuleTO read(\n+            @NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Returns a list of authentication modules of the matching type.\n+     *\n+     * @return list of authentication modules with matching type\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    List<AuthModuleTO> list();\n+\n+    /**\n+     * Create a new authentication module.\n+     *\n+     * @param authModuleTO AuthModule to be created (needs to match type)\n+     * @return Response object featuring Location header of created authentication module\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"AuthModule successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"UUID generated for the entity created\"),\n+                @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    Response create(\n+            @NotNull AuthModuleTO authModuleTO);\n+\n+    /**\n+     * Updates authentication module matching the given key.\n+     *\n+     * @param authModuleTO AuthModule to replace existing authentication module\n+     */\n+    @Parameter(name = \"key\", description = \"AuthModule's key\", in = ParameterIn.PATH, schema =\n+            @Schema(type = \"string\"))\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @PUT\n+    @Path(\"{key}\")\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void update(\n+            @NotNull AuthModuleTO authModuleTO);\n+\n+    /**\n+     * Delete authentication module matching the given key.\n+     *\n+     * @param key key of authentication module to be deleted\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @DELETE\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void delete(\n+            @NotNull @PathParam(\"key\") String key);\n+}"},{"sha":"538dc8259af90908d7eb08de1241ca0e723d07b5","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/AuthModuleLogic.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthModuleLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthModuleLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthModuleLogic.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import static org.apache.syncope.core.logic.AbstractLogic.LOG;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.to.AuthModuleTO;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.auth.AuthModuleDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n+import org.apache.syncope.core.provisioning.api.data.AuthModuleDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class AuthModuleLogic extends AbstractTransactionalLogic<AuthModuleTO> {\n+\n+    @Autowired\n+    private AuthModuleDataBinder binder;\n+\n+    @Autowired\n+    private AuthModuleDAO authModuleDAO;\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.AUTH_MODULE_CREATE + \"')\")\n+    public AuthModuleTO create(final AuthModuleTO authModuleTO) {\n+        return binder.getAuthModuleTO(authModuleDAO.save(binder.create(authModuleTO)));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.AUTH_MODULE_UPDATE + \"')\")\n+    public AuthModuleTO update(final AuthModuleTO authModuleTO) {\n+        AuthModule authModule = authModuleDAO.find(authModuleTO.getKey());\n+        if (authModule == null) {\n+            throw new NotFoundException(\"AuthModule \" + authModuleTO.getKey() + \" not found\");\n+        }\n+\n+        return binder.getAuthModuleTO(authModuleDAO.save(binder.update(authModule, authModuleTO)));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.AUTH_MODULE_LIST + \"')\")\n+    @Transactional(readOnly = true)\n+    public List<AuthModuleTO> list() {\n+        return authModuleDAO.findAll().stream().\n+                filter(Objects::nonNull).\n+                map(authModule -> {\n+                    AuthModuleTO result = null;\n+                    try {\n+                        result = binder.getAuthModuleTO(authModule);\n+                    } catch (NotFoundException e) {\n+                        LOG.error(\"Authentication module '{}' not found\", authModule.getName());\n+                    }\n+\n+                    return result;\n+                }).collect(Collectors.toList());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.AUTH_MODULE_READ + \"')\")\n+    @Transactional(readOnly = true)\n+    public AuthModuleTO read(final String key) {\n+        AuthModule authModule = authModuleDAO.find(key);\n+        if (authModule == null) {\n+            throw new NotFoundException(\"AuthModule \" + key + \" not found\");\n+        }\n+\n+        return binder.getAuthModuleTO(authModule);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.AUTH_MODULE_DELETE + \"')\")\n+    public AuthModuleTO delete(final String key) {\n+        AuthModule authModule = authModuleDAO.find(key);\n+        if (authModule == null) {\n+            throw new NotFoundException(\"AuthModule \" + key + \" not found\");\n+        }\n+\n+        AuthModuleTO deleted = binder.getAuthModuleTO(authModule);\n+        authModuleDAO.delete(authModule);\n+\n+        return deleted;\n+    }\n+\n+    @Override\n+    protected AuthModuleTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n+        String key = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof AuthModuleTO) {\n+                    key = ((AuthModuleTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (key != null) {\n+            try {\n+                return binder.getAuthModuleTO(authModuleDAO.find(key));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+}"},{"sha":"68bdd9023f97674356a90272f6e083b88c78642c","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AuthModuleServiceImpl.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuthModuleServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuthModuleServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuthModuleServiceImpl.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.net.URI;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.AuthModuleTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.AuthModuleService;\n+import org.apache.syncope.core.logic.AuthModuleLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class AuthModuleServiceImpl extends AbstractServiceImpl implements AuthModuleService {\n+\n+    @Autowired\n+    private AuthModuleLogic logic;\n+\n+    @Override\n+    public Response create(final AuthModuleTO authModuleTO) {\n+        AuthModuleTO authModule = logic.create(authModuleTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(authModule.getKey()).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_KEY, authModule.getKey()).\n+                build();\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        logic.delete(key);\n+    }\n+\n+    @Override\n+    public List<AuthModuleTO> list() {\n+        return logic.list();\n+    }\n+\n+    @Override\n+    public AuthModuleTO read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public void update(final AuthModuleTO authModuleTO) {\n+        logic.update(authModuleTO);\n+    }\n+}"},{"sha":"fc5e18c68e9e716b0dddb28884eb5032a6de505b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/AuthModuleDAO.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FAuthModuleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FAuthModuleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FAuthModuleDAO.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao.auth;\n+\n+import org.apache.syncope.core.persistence.api.dao.DAO;\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n+\n+public interface AuthModuleDAO extends DAO<AuthModule> {\n+\n+    AuthModule find(String key);\n+\n+    List<AuthModule> findAll();\n+\n+    AuthModule save(AuthModule authModule);\n+\n+    void delete(String key);\n+\n+    void delete(AuthModule authModule);\n+\n+}"},{"sha":"5d2393e83b9cbbcbdecebc1fddd19ff553a3d7c6","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/AuthModule.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthModule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthModule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthModule.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.auth;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.auth.AuthModuleConf;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n+\n+public interface AuthModule extends Entity {\n+\n+    String getName();\n+\n+    void setName(String name);\n+\n+    String getDescription();\n+\n+    void setDescription(String description);\n+\n+    /**\n+     * Specify the mapping items for the attributes fetched from the source.\n+     *\n+     * @return list of mapping items\n+     */\n+    List<? extends Item> getProfileItems();\n+\n+    boolean add(Item profileItem);\n+\n+    AuthModuleConf getConf();\n+\n+    void setConf(AuthModuleConf description);\n+}"},{"sha":"9f249e4ddbe7089b8c4cf9a81767c3d46bf5185a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/AuthModuleItem.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthModuleItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthModuleItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthModuleItem.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.auth;\n+\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n+\n+public interface AuthModuleItem extends Item {\n+\n+}"},{"sha":"dd765adb0d4cf0f91cc479549ff6ad93565b552e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPAAuthModuleDAO.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthModuleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthModuleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthModuleDAO.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao.auth;\n+\n+import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+import javax.persistence.TypedQuery;\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.dao.auth.AuthModuleDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthModule;\n+\n+@Repository\n+public class JPAAuthModuleDAO extends AbstractDAO<AuthModule> implements AuthModuleDAO {\n+\n+    @Override\n+    public AuthModule find(final String key) {\n+        return entityManager().find(JPAAuthModule.class, key);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<AuthModule> findAll() {\n+        TypedQuery<AuthModule> query = entityManager().createQuery(\"SELECT e FROM \" + JPAAuthModule.class.\n+                getSimpleName() + \" e\", AuthModule.class);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public AuthModule save(final AuthModule authModule) {\n+        return entityManager().merge(authModule);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        AuthModule authModule = find(key);\n+        if (authModule == null) {\n+            return;\n+        }\n+\n+        delete(authModule);\n+    }\n+\n+    @Override\n+    public void delete(final AuthModule authModule) {\n+        entityManager().remove(authModule);\n+    }\n+\n+}"},{"sha":"e2b65861a550f85e3d8298215fa5261482526855","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAAuthModule.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthModule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthModule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthModule.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.auth;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Lob;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.auth.AuthModuleConf;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+\n+@Entity\n+@Table(name = JPAAuthModule.TABLE)\n+public class JPAAuthModule extends AbstractGeneratedKeyEntity implements AuthModule {\n+\n+    public static final String TABLE = \"AuthModule\";\n+\n+    private static final long serialVersionUID = 5681033638234853077L;\n+\n+    @Column(unique = true, nullable = false)\n+    private String name;\n+\n+    @Column(nullable = false)\n+    private String description;\n+\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"mapping\")\n+    private final List<JPAAuthModuleItem> profileItems = new ArrayList<>();\n+\n+    @Lob\n+    private String jsonConf;\n+\n+    @Override\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    @Override\n+    public void setDescription(final String description) {\n+        this.description = description;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public List<? extends Item> getProfileItems() {\n+        return profileItems;\n+    }\n+\n+    @Override\n+    public boolean add(final Item profileItem) {\n+        checkType(profileItem, JPAAuthModuleItem.class);\n+        return profileItems.contains((JPAAuthModuleItem) profileItem)\n+                || profileItems.add((JPAAuthModuleItem) profileItem);\n+    }\n+\n+    @Override\n+    public AuthModuleConf getConf() {\n+        AuthModuleConf conf = null;\n+        if (!StringUtils.isBlank(jsonConf)) {\n+            conf = POJOHelper.deserialize(jsonConf, AuthModuleConf.class);\n+        }\n+\n+        return conf;\n+    }\n+\n+    @Override\n+    public void setConf(final AuthModuleConf conf) {\n+        jsonConf = POJOHelper.serialize(conf);\n+    }\n+\n+}"},{"sha":"bc92d490c70bbffe987eacd6242844dc01c34a30","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAAuthModuleItem.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthModuleItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthModuleItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthModuleItem.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.auth;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Cacheable;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthModuleItem;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.AbstractItem;\n+\n+@Entity\n+@Table(name = JPAAuthModuleItem.TABLE)\n+@Cacheable\n+public class JPAAuthModuleItem extends AbstractItem implements AuthModuleItem {\n+\n+    public static final String TABLE = \"AuthModuleItem\";\n+\n+    private static final long serialVersionUID = 3165440920144995781L;\n+\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(name = TABLE + \"Transformer\",\n+            joinColumns =\n+            @JoinColumn(name = \"item_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"implementation_id\"),\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"item_id\", \"implementation_id\" }))\n+    private final List<JPAImplementation> transformers = new ArrayList<>();\n+\n+    @Override\n+    public boolean add(final Implementation transformer) {\n+        checkType(transformer, JPAImplementation.class);\n+        checkImplementationType(transformer, IdMImplementationType.ITEM_TRANSFORMER);\n+        return transformers.contains((JPAImplementation) transformer)\n+                || this.transformers.add((JPAImplementation) transformer);\n+    }\n+\n+    @Override\n+    public List<? extends Implementation> getTransformers() {\n+        return transformers;\n+    }\n+\n+}"},{"sha":"27c0d22e5572832a545942574e17536ab228f3f6","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AuthModuleTest.java","status":"added","additions":502,"deletions":0,"changes":502,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,502 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.inner;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.List;\n+import java.util.UUID;\n+import org.apache.commons.lang3.ClassUtils;\n+import org.apache.syncope.common.lib.auth.AuthModuleConf;\n+import org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.JDBCAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.JaasAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.LDAPAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.OIDCAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.RadiusAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.StaticAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.U2FAuthModuleConf;\n+import org.apache.syncope.core.persistence.api.dao.auth.AuthModuleDAO;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthModuleItem;\n+\n+@Transactional(\"Master\")\n+public class AuthModuleTest extends AbstractTest {\n+\n+    @Autowired\n+    private AuthModuleDAO authModuleDAO;\n+\n+    @Test\n+    public void find() {\n+        AuthModule authModule = authModuleDAO.find(\"be456831-593d-4003-b273-4c3fb61700df\");\n+        assertNotNull(authModule);\n+\n+        authModule = authModuleDAO.find(\"4c3ed8f6-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(authModule);\n+\n+        authModule = authModuleDAO.find(\"4c3edbbc-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(authModule);\n+\n+        authModule = authModuleDAO.find(\"4c3ed7e8-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(authModule);\n+\n+        authModule = authModuleDAO.find(\"4c3ed4e6-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(authModule);\n+\n+        authModule = authModuleDAO.find(\"4c3edc98-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(authModule);\n+\n+        authModule = authModuleDAO.find(\"4c3ed9d2-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(authModule);\n+\n+        authModule = authModuleDAO.find(\"4c3edd60-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(authModule);\n+\n+        authModule = authModuleDAO.find(\"07c528f3-63b4-4dc1-a4da-87f35b8bdec8\");\n+        assertNotNull(authModule);\n+\n+        authModule = authModuleDAO.find(\"f6e1288d-50d9-45fe-82ee-597c42242205\");\n+        assertNotNull(authModule);\n+\n+        authModule = authModuleDAO.find(UUID.randomUUID().toString());\n+        assertNull(authModule);\n+    }\n+\n+    @Test\n+    public void findAll() {\n+        List<AuthModule> modules = authModuleDAO.findAll();\n+        assertNotNull(modules);\n+        assertFalse(modules.isEmpty());\n+        assertTrue(modules.size() >= 10);\n+    }\n+\n+    @Test\n+    public void findByAuthModuleImpl() {\n+        AuthModule ldapAuthModule = authModuleDAO.find(\"be456831-593d-4003-b273-4c3fb61700df\");\n+        assertNotNull(ldapAuthModule);\n+        AuthModule jdbcAuthModule = authModuleDAO.find(\"4c3ed7e8-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(jdbcAuthModule);\n+        AuthModule googleMfaAuthModule = authModuleDAO.find(\"4c3ed4e6-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(googleMfaAuthModule);\n+        AuthModule oidcAuthModule = authModuleDAO.find(\"4c3ed8f6-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(oidcAuthModule);\n+        AuthModule saml2IdPAuthModule = authModuleDAO.find(\"4c3ed9d2-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(saml2IdPAuthModule);\n+        AuthModule jaasAuthModule = authModuleDAO.find(\"4c3edbbc-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(jaasAuthModule);\n+        AuthModule staticAuthModule = authModuleDAO.find(\"4c3edc98-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(staticAuthModule);\n+        AuthModule syncopeAuthModule = authModuleDAO.find(\"4c3edd60-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(syncopeAuthModule);\n+        AuthModule radiusAuthModule = authModuleDAO.find(\"07c528f3-63b4-4dc1-a4da-87f35b8bdec8\");\n+        assertNotNull(radiusAuthModule);\n+        AuthModule u2fAuthModule = authModuleDAO.find(\"f6e1288d-50d9-45fe-82ee-597c42242205\");\n+        assertNotNull(u2fAuthModule);\n+\n+        assertTrue(isSpecificConf(ldapAuthModule.getConf(), LDAPAuthModuleConf.class));\n+        assertFalse(isSpecificConf(ldapAuthModule.getConf(), JDBCAuthModuleConf.class));\n+\n+        assertTrue(isSpecificConf(jdbcAuthModule.getConf(), JDBCAuthModuleConf.class));\n+        assertFalse(isSpecificConf(jdbcAuthModule.getConf(), GoogleMfaAuthModuleConf.class));\n+\n+        assertTrue(isSpecificConf(googleMfaAuthModule.getConf(), GoogleMfaAuthModuleConf.class));\n+        assertFalse(isSpecificConf(googleMfaAuthModule.getConf(), OIDCAuthModuleConf.class));\n+\n+        assertTrue(isSpecificConf(oidcAuthModule.getConf(), OIDCAuthModuleConf.class));\n+        assertFalse(isSpecificConf(oidcAuthModule.getConf(), SAML2IdPAuthModuleConf.class));\n+\n+        assertTrue(isSpecificConf(saml2IdPAuthModule.getConf(), SAML2IdPAuthModuleConf.class));\n+        assertFalse(isSpecificConf(saml2IdPAuthModule.getConf(), JaasAuthModuleConf.class));\n+\n+        assertTrue(isSpecificConf(jaasAuthModule.getConf(), JaasAuthModuleConf.class));\n+        assertFalse(isSpecificConf(jaasAuthModule.getConf(), StaticAuthModuleConf.class));\n+\n+        assertTrue(isSpecificConf(staticAuthModule.getConf(), StaticAuthModuleConf.class));\n+        assertFalse(isSpecificConf(staticAuthModule.getConf(), SyncopeAuthModuleConf.class));\n+\n+        assertTrue(isSpecificConf(syncopeAuthModule.getConf(), SyncopeAuthModuleConf.class));\n+        assertFalse(isSpecificConf(syncopeAuthModule.getConf(), RadiusAuthModuleConf.class));\n+\n+        assertTrue(isSpecificConf(radiusAuthModule.getConf(), RadiusAuthModuleConf.class));\n+        assertFalse(isSpecificConf(radiusAuthModule.getConf(), U2FAuthModuleConf.class));\n+\n+        assertTrue(isSpecificConf(u2fAuthModule.getConf(), U2FAuthModuleConf.class));\n+        assertFalse(isSpecificConf(u2fAuthModule.getConf(), LDAPAuthModuleConf.class));\n+    }\n+\n+    @Test\n+    public void findByType() {\n+        List<AuthModule> authModules = authModuleDAO.findAll();\n+        assertTrue(authModules.stream().anyMatch(\n+                authModule -> isSpecificConf(authModule.getConf(), LDAPAuthModuleConf.class)\n+                && authModule.getName().equals(\"DefaultLDAPAuthModule\")));\n+        assertTrue(authModules.stream().anyMatch(\n+                authModule -> isSpecificConf(authModule.getConf(), JDBCAuthModuleConf.class)\n+                && authModule.getName().equals(\"DefaultJDBCAuthModule\")));\n+        assertTrue(authModules.stream().anyMatch(\n+                authModule -> isSpecificConf(authModule.getConf(), GoogleMfaAuthModuleConf.class)\n+                && authModule.getName().equals(\"DefaultGoogleMfaAuthModule\")));\n+        assertTrue(authModules.stream().anyMatch(\n+                authModule -> isSpecificConf(authModule.getConf(), OIDCAuthModuleConf.class)\n+                && authModule.getName().equals(\"DefaultOIDCAuthModule\")));\n+        assertTrue(authModules.stream().anyMatch(\n+                authModule -> isSpecificConf(authModule.getConf(), SAML2IdPAuthModuleConf.class)\n+                && authModule.getName().equals(\"DefaultSAML2IdPAuthModule\")));\n+        assertTrue(authModules.stream().anyMatch(\n+                authModule -> isSpecificConf(authModule.getConf(), JaasAuthModuleConf.class)\n+                && authModule.getName().equals(\"DefaultJaasAuthModule\")));\n+        assertTrue(authModules.stream().anyMatch(\n+                authModule -> isSpecificConf(authModule.getConf(), StaticAuthModuleConf.class)\n+                && authModule.getName().equals(\"DefaultStaticAuthModule\")));\n+        assertTrue(authModules.stream().anyMatch(\n+                authModule -> isSpecificConf(authModule.getConf(), SyncopeAuthModuleConf.class)\n+                && authModule.getName().equals(\"DefaultSyncopeAuthModule\")));\n+        assertTrue(authModules.stream().anyMatch(\n+                authModule -> isSpecificConf(authModule.getConf(), RadiusAuthModuleConf.class)\n+                && authModule.getName().equals(\"DefaultRadiusAuthModule\")));\n+        assertTrue(authModules.stream().anyMatch(\n+                authModule -> isSpecificConf(authModule.getConf(), U2FAuthModuleConf.class)\n+                && authModule.getName().equals(\"DefaultU2FAuthModule\")));\n+    }\n+\n+    @Test\n+    public void saveWithStaticModule() {\n+        StaticAuthModuleConf conf = new StaticAuthModuleConf();\n+        conf.getUsers().put(\"user1\", UUID.randomUUID().toString());\n+        conf.getUsers().put(\"user2\", \"user2Password123\");\n+\n+        saveAuthModule(\"StaticAuthModuleTest\", conf);\n+    }\n+\n+    @Test\n+    public void saveWithJaasModule() {\n+        JaasAuthModuleConf conf = new JaasAuthModuleConf();\n+        conf.setKerberosKdcSystemProperty(\"sample-value\");\n+        conf.setKerberosRealmSystemProperty(\"sample-value\");\n+        conf.setLoginConfigType(\"JavaLoginConfig\");\n+        conf.setRealm(\"SYNCOPE\");\n+        conf.setLoginConfigurationFile(\"/opt/jaas/login.conf\");\n+\n+        saveAuthModule(\"JaasAuthModuleTest\", conf);\n+    }\n+\n+    @Test\n+    public void saveWithLdapModule() {\n+        LDAPAuthModuleConf conf = new LDAPAuthModuleConf();\n+        conf.setBaseDn(\"dc=example,dc=org\");\n+        conf.setSearchFilter(\"cn={user}\");\n+        conf.setSubtreeSearch(true);\n+        conf.setLdapUrl(\"ldap://localhost:1389\");\n+        conf.setUserIdAttribute(\"uid\");\n+        conf.setBindCredential(\"Password\");\n+\n+        saveAuthModule(\"LDAPAuthModuleTest\", conf);\n+    }\n+\n+    @Test\n+    public void saveWithGoogleAuthenticatorModule() {\n+        GoogleMfaAuthModuleConf conf = new GoogleMfaAuthModuleConf();\n+        conf.setCodeDigits(6);\n+        conf.setIssuer(\"SyncopeTest\");\n+        conf.setLabel(\"Syncope\");\n+        conf.setTimeStepSize(30);\n+        conf.setWindowSize(3);\n+\n+        saveAuthModule(\"GoogleMfaAuthModuleTest\", conf);\n+    }\n+\n+    @Test\n+    public void saveWithOIDCAuthModule() {\n+        OIDCAuthModuleConf conf = new OIDCAuthModuleConf();\n+        conf.setId(\"OIDCTestId\");\n+        conf.setDiscoveryUri(\"www.testurl.com\");\n+        conf.setUserIdAttribute(\"username\");\n+        conf.setResponseType(\"code\");\n+        conf.setScope(\"openid email profile\");\n+\n+        saveAuthModule(\"OIDCAuthModuleTest\", conf);\n+    }\n+\n+    @Test\n+    public void saveWithJDBCModule() {\n+        JDBCAuthModuleConf conf = new JDBCAuthModuleConf();\n+        conf.setSql(\"SELECT * FROM table WHERE name=?\");\n+        conf.setFieldPassword(\"password\");\n+        conf.getPrincipalAttributeList().addAll(List.of(\"sn\", \"cn:commonName\", \"givenName\"));\n+\n+        saveAuthModule(\"JDBCAuthModuleTest\", conf);\n+    }\n+\n+    @Test\n+    public void saveWithSyncopeModule() {\n+        SyncopeAuthModuleConf conf = new SyncopeAuthModuleConf();\n+        conf.setDomain(\"Master\");\n+        conf.setUrl(\"http://mydomain.com/syncope/rest\");\n+\n+        saveAuthModule(\"SyncopeAuthModuleTest\", conf);\n+    }\n+\n+    @Test\n+    public void saveWithSAML2IdPModule() {\n+        SAML2IdPAuthModuleConf conf = new SAML2IdPAuthModuleConf();\n+        conf.setServiceProviderEntityId(\"testEntityId\");\n+        conf.setProviderName(\"testProviderName\");\n+        conf.setServiceProviderMetadataPath(\"file:/etc/metadata\");\n+\n+        saveAuthModule(\"SAML2IdPAuthModuleTest\", conf);\n+    }\n+\n+    @Test\n+    public void saveWithRadiusModule() {\n+        RadiusAuthModuleConf conf = new RadiusAuthModuleConf();\n+        conf.setProtocol(\"MSCHAPv2\");\n+        conf.setInetAddress(\"1.2.3.4\");\n+        conf.setSharedSecret(\"xyz\");\n+        conf.setSocketTimeout(40);\n+\n+        saveAuthModule(\"RadiusAuthModuleTest\", conf);\n+    }\n+\n+    @Test\n+    public void saveWithU2FModule() {\n+        U2FAuthModuleConf conf = new U2FAuthModuleConf();\n+        conf.setExpireDevices(50);\n+\n+        saveAuthModule(\"U2FAuthModuleTest\", conf);\n+    }\n+\n+    @Test\n+    public void updateWithLDAPModule() {\n+        AuthModule module = authModuleDAO.find(\"be456831-593d-4003-b273-4c3fb61700df\");\n+        assertNotNull(module);\n+        AuthModuleConf conf = module.getConf();\n+        LDAPAuthModuleConf.class.cast(conf).setBaseDn(\"dc=example2,dc=org\");\n+        LDAPAuthModuleConf.class.cast(conf).setSearchFilter(\"cn={user2}\");\n+        module.setConf(conf);\n+\n+        module = authModuleDAO.save(module);\n+        assertNotNull(module);\n+        assertNotNull(module.getKey());\n+        AuthModule found = authModuleDAO.find(module.getKey());\n+        assertNotNull(found);\n+        assertEquals(\"dc=example2,dc=org\", LDAPAuthModuleConf.class.cast(found.getConf()).getBaseDn());\n+        assertEquals(\"cn={user2}\", LDAPAuthModuleConf.class.cast(found.getConf()).getSearchFilter());\n+    }\n+\n+    @Test\n+    public void updateWithJDBCModule() {\n+        AuthModule module = authModuleDAO.find(\"4c3ed7e8-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(module);\n+        AuthModuleConf conf = module.getConf();\n+        JDBCAuthModuleConf.class.cast(conf).setSql(\"SELECT * FROM otherTable WHERE name=?\");\n+        module.setConf(conf);\n+\n+        module = authModuleDAO.save(module);\n+        assertNotNull(module);\n+        assertNotNull(module.getKey());\n+        AuthModule found = authModuleDAO.find(module.getKey());\n+        assertNotNull(found);\n+        assertEquals(\"SELECT * FROM otherTable WHERE name=?\",\n+                JDBCAuthModuleConf.class.cast(found.getConf()).getSql());\n+    }\n+\n+    @Test\n+    public void updateWithGoogleMfaModule() {\n+        AuthModule module = authModuleDAO.find(\"4c3ed4e6-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(module);\n+        AuthModuleConf conf = module.getConf();\n+        GoogleMfaAuthModuleConf.class.cast(conf).setLabel(\"newLabel\");\n+        module.setConf(conf);\n+\n+        module = authModuleDAO.save(module);\n+        assertNotNull(module);\n+        assertNotNull(module.getKey());\n+        AuthModule found = authModuleDAO.find(module.getKey());\n+        assertNotNull(found);\n+        assertEquals(\"newLabel\", GoogleMfaAuthModuleConf.class.cast(found.getConf()).getLabel());\n+    }\n+\n+    @Test\n+    public void updateWithSAML2IdPModule() {\n+        AuthModule module = authModuleDAO.find(\"4c3ed9d2-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(module);\n+        AuthModuleConf conf = module.getConf();\n+        SAML2IdPAuthModuleConf.class.cast(conf).setServiceProviderEntityId(\"newEntityId\");\n+        module.setConf(conf);\n+\n+        module = authModuleDAO.save(module);\n+        assertNotNull(module);\n+        assertNotNull(module.getKey());\n+        AuthModule found = authModuleDAO.find(module.getKey());\n+        assertNotNull(found);\n+        assertEquals(\"newEntityId\", SAML2IdPAuthModuleConf.class.cast(found.getConf()).getServiceProviderEntityId());\n+    }\n+\n+    @Test\n+    public void updateWithOIDCModule() {\n+        AuthModule module = authModuleDAO.find(\"4c3ed8f6-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(module);\n+        AuthModuleConf conf = module.getConf();\n+        OIDCAuthModuleConf.class.cast(conf).setResponseType(\"newCode\");\n+        module.setConf(conf);\n+\n+        module = authModuleDAO.save(module);\n+        assertNotNull(module);\n+        assertNotNull(module.getKey());\n+        AuthModule found = authModuleDAO.find(module.getKey());\n+        assertNotNull(found);\n+        assertEquals(\"newCode\", OIDCAuthModuleConf.class.cast(found.getConf()).getResponseType());\n+    }\n+\n+    @Test\n+    public void updateWithJaasModule() {\n+        AuthModule module = authModuleDAO.find(\"4c3edbbc-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(module);\n+        AuthModuleConf conf = module.getConf();\n+        JaasAuthModuleConf.class.cast(conf).setRealm(\"SYNCOPE_NEW\");\n+        module.setConf(conf);\n+\n+        module = authModuleDAO.save(module);\n+        assertNotNull(module);\n+        assertNotNull(module.getKey());\n+        AuthModule found = authModuleDAO.find(module.getKey());\n+        assertNotNull(found);\n+        assertEquals(\"SYNCOPE_NEW\", JaasAuthModuleConf.class.cast(found.getConf()).getRealm());\n+    }\n+\n+    @Test\n+    public void updateWithStaticModule() {\n+        AuthModule module = authModuleDAO.find(\"4c3edc98-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(module);\n+        assertEquals(1, StaticAuthModuleConf.class.cast(module.getConf()).getUsers().size());\n+        AuthModuleConf conf = module.getConf();\n+        StaticAuthModuleConf.class.cast(conf).getUsers().put(\"user3\", \"user3Password123\");\n+        module.setConf(conf);\n+\n+        module = authModuleDAO.save(module);\n+        assertNotNull(module);\n+        assertNotNull(module.getKey());\n+        AuthModule found = authModuleDAO.find(module.getKey());\n+        assertNotNull(found);\n+        assertEquals(2, StaticAuthModuleConf.class.cast(found.getConf()).getUsers().size());\n+    }\n+\n+    @Test\n+    public void updateWithRadiusModule() {\n+        AuthModule module = authModuleDAO.find(\"07c528f3-63b4-4dc1-a4da-87f35b8bdec8\");\n+        assertNotNull(module);\n+        AuthModuleConf conf = module.getConf();\n+        RadiusAuthModuleConf.class.cast(conf).setSocketTimeout(45);\n+        module.setConf(conf);\n+\n+        module = authModuleDAO.save(module);\n+        assertNotNull(module);\n+        assertNotNull(module.getKey());\n+        AuthModule found = authModuleDAO.find(module.getKey());\n+        assertNotNull(found);\n+        assertEquals(45, RadiusAuthModuleConf.class.cast(found.getConf()).getSocketTimeout());\n+    }\n+\n+    @Test\n+    public void updateWithU2fModule() {\n+        AuthModule module = authModuleDAO.find(\"f6e1288d-50d9-45fe-82ee-597c42242205\");\n+        assertNotNull(module);\n+        AuthModuleConf conf = module.getConf();\n+        U2FAuthModuleConf.class.cast(conf).setExpireDevices(24);\n+        module.setConf(conf);\n+\n+        module = authModuleDAO.save(module);\n+        assertNotNull(module);\n+        assertNotNull(module.getKey());\n+        AuthModule found = authModuleDAO.find(module.getKey());\n+        assertNotNull(found);\n+        assertEquals(24, U2FAuthModuleConf.class.cast(found.getConf()).getExpireDevices());\n+    }\n+\n+    @Test\n+    public void updateWithSyncopeModule() {\n+        AuthModule module = authModuleDAO.find(\"4c3edd60-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(module);\n+        AuthModuleConf conf = module.getConf();\n+        SyncopeAuthModuleConf.class.cast(conf).setDomain(\"Two\");\n+        module.setConf(conf);\n+\n+        module = authModuleDAO.save(module);\n+        assertNotNull(module);\n+        assertNotNull(module.getKey());\n+        AuthModule found = authModuleDAO.find(module.getKey());\n+        assertNotNull(found);\n+        assertEquals(\"Two\", SyncopeAuthModuleConf.class.cast(found.getConf()).getDomain());\n+    }\n+\n+    @Test\n+    public void delete() {\n+        testDelete(\"be456831-593d-4003-b273-4c3fb61700df\");\n+        testDelete(\"4c3ed8f6-7008-11ea-bc55-0242ac130003\");\n+        testDelete(\"4c3edbbc-7008-11ea-bc55-0242ac130003\");\n+        testDelete(\"4c3ed7e8-7008-11ea-bc55-0242ac130003\");\n+        testDelete(\"4c3ed4e6-7008-11ea-bc55-0242ac130003\");\n+        testDelete(\"4c3edc98-7008-11ea-bc55-0242ac130003\");\n+        testDelete(\"4c3ed9d2-7008-11ea-bc55-0242ac130003\");\n+        testDelete(\"4c3edd60-7008-11ea-bc55-0242ac130003\");\n+        testDelete(\"07c528f3-63b4-4dc1-a4da-87f35b8bdec8\");\n+        testDelete(\"f6e1288d-50d9-45fe-82ee-597c42242205\");\n+    }\n+\n+    private void saveAuthModule(final String name, final AuthModuleConf conf) {\n+        AuthModule module = entityFactory.newEntity(AuthModule.class);\n+        module.setName(name);\n+        module.setDescription(\"An authentication module\");\n+        module.setConf(conf);\n+        AuthModuleItem keyMapping = entityFactory.newEntity(AuthModuleItem.class);\n+        keyMapping.setIntAttrName(\"uid\");\n+        keyMapping.setExtAttrName(\"username\");\n+        AuthModuleItem fullnameMapping = entityFactory.newEntity(AuthModuleItem.class);\n+        fullnameMapping.setIntAttrName(\"cn\");\n+        fullnameMapping.setExtAttrName(\"fullname\");\n+        module.add(keyMapping);\n+        module.add(fullnameMapping);\n+        authModuleDAO.save(module);\n+        assertNotNull(module);\n+        assertNotNull(module.getKey());\n+        assertNotNull(authModuleDAO.find(module.getKey()));\n+    }\n+\n+    private void testDelete(final String key) {\n+        AuthModule authModule = authModuleDAO.find(key);\n+        assertNotNull(authModule);\n+        authModuleDAO.delete(key);\n+        authModule = authModuleDAO.find(key);\n+        assertNull(authModule);\n+    }\n+\n+    private boolean isSpecificConf(final AuthModuleConf conf, final Class<? extends AuthModuleConf> clazz) {\n+        return ClassUtils.isAssignable(clazz, conf.getClass());\n+    }\n+}"},{"sha":"1eab9f4f48e7d5a89a6606fc0d95f454bf9cecc6","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/AuthModuleDataBinder.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAuthModuleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAuthModuleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAuthModuleDataBinder.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.to.AuthModuleTO;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n+\n+public interface AuthModuleDataBinder {\n+\n+    AuthModule create(AuthModuleTO authModuleTO);\n+\n+    AuthModule update(AuthModule authModule, AuthModuleTO authModuleTO);\n+\n+    AuthModuleTO getAuthModuleTO(AuthModule authModule);\n+\n+}"},{"sha":"0b0e38b8ae6468cd791fb76a5daac3e816d29f21","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AuthModuleDataBinderImpl.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthModuleDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthModuleDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthModuleDataBinderImpl.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.apache.syncope.common.lib.to.AuthModuleTO;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n+import org.apache.syncope.core.provisioning.api.data.AuthModuleDataBinder;\n+\n+@Component\n+public class AuthModuleDataBinderImpl implements AuthModuleDataBinder {\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    private AuthModule getAuthModule(final AuthModule authModule, final AuthModuleTO authModuleTO) {\n+        AuthModule result = authModule;\n+\n+        if (result == null) {\n+            result = entityFactory.newEntity(AuthModule.class);\n+        }\n+\n+        AuthModule authenticationModule = AuthModule.class.cast(result);\n+        AuthModuleTO authenticationModuleTO = AuthModuleTO.class.cast(authModuleTO);\n+\n+        authenticationModule.setName(authenticationModuleTO.getName());\n+        authenticationModule.setConf(authenticationModuleTO.getConf());\n+        authenticationModule.setDescription(authenticationModuleTO.getDescription());\n+        // remove all profile items not contained in the TO\n+        authenticationModule.getProfileItems().\n+                removeIf(item -> !authenticationModuleTO.getProfileItems().stream().\n+                anyMatch(otherItem -> item.getKey().equals(otherItem.getKey())));\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public AuthModule create(final AuthModuleTO authModuleTO) {\n+        return getAuthModule(null, authModuleTO);\n+    }\n+\n+    @Override\n+    public AuthModule update(final AuthModule authModule, final AuthModuleTO authModuleTO) {\n+        return getAuthModule(authModule, authModuleTO);\n+    }\n+\n+    @Override\n+    public AuthModuleTO getAuthModuleTO(final AuthModule authModule) {\n+        AuthModuleTO authModuleTO = new AuthModuleTO();\n+\n+        authModuleTO.setName(authModule.getName());\n+        authModuleTO.setKey(authModule.getKey());\n+        authModuleTO.setDescription(authModule.getDescription());\n+        authModuleTO.setConf(authModule.getConf());\n+        authModuleTO.getProfileItems().forEach(item -> {\n+            authModuleTO.add(item);\n+        });\n+\n+        return authModuleTO;\n+    }\n+}"},{"sha":"a13c4fafd1f307edaf2c35097dc7194e00a74393","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthModuleITCase.java","status":"added","additions":589,"deletions":0,"changes":589,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/426b2f2a332f2246b2888aabd3537bfeb903704d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/426b2f2a332f2246b2888aabd3537bfeb903704d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java?ref=426b2f2a332f2246b2888aabd3537bfeb903704d","patch":"@@ -0,0 +1,589 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Test;\n+import java.io.IOException;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.UUID;\n+import org.apache.commons.lang3.ClassUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.auth.AuthModuleConf;\n+import org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.JDBCAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.JaasAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.LDAPAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.OIDCAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.RadiusAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.StaticAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.U2FAuthModuleConf;\n+import org.apache.syncope.common.lib.to.AuthModuleTO;\n+\n+public class AuthModuleITCase extends AbstractITCase {\n+\n+    private enum AuthModuleSupportedType {\n+        GOOGLE_MFA,\n+        SAML2_IDP,\n+        STATIC,\n+        SYNCOPE,\n+        LDAP,\n+        JAAS,\n+        JDBC,\n+        U2F,\n+        RADIUS,\n+        OIDC;\n+\n+    };\n+\n+    private static AuthModuleTO buildAuthModuleTO(final AuthModuleSupportedType type) {\n+        AuthModuleTO authModuleTO = new AuthModuleTO();\n+        authModuleTO.setName(\"Test\" + type + \"AuthenticationModule\" + getUUIDString());\n+        authModuleTO.setDescription(\"A test \" + type + \" Authentication Module\");\n+        AuthModuleConf conf;\n+\n+        switch (type) {\n+            case LDAP:\n+                conf = new LDAPAuthModuleConf();\n+                LDAPAuthModuleConf.class.cast(conf).setName(\"TestConf\" + getUUIDString());\n+                LDAPAuthModuleConf.class.cast(conf).setBaseDn(\"dc=example,dc=org\");\n+                LDAPAuthModuleConf.class.cast(conf).setSearchFilter(\"cn={user}\");\n+                LDAPAuthModuleConf.class.cast(conf).setSubtreeSearch(true);\n+                LDAPAuthModuleConf.class.cast(conf).setLdapUrl(\"ldap://localhost:1389\");\n+                LDAPAuthModuleConf.class.cast(conf).setUserIdAttribute(\"uid\");\n+                LDAPAuthModuleConf.class.cast(conf).setBaseDn(\"cn=Directory Manager,dc=example,dc=org\");\n+                LDAPAuthModuleConf.class.cast(conf).setBindCredential(\"Password\");\n+                break;\n+\n+            case GOOGLE_MFA:\n+                conf = new GoogleMfaAuthModuleConf();\n+                GoogleMfaAuthModuleConf.class.cast(conf).setName(\"TestConf\" + getUUIDString());\n+                GoogleMfaAuthModuleConf.class.cast(conf).setCodeDigits(6);\n+                GoogleMfaAuthModuleConf.class.cast(conf).setIssuer(\"SyncopeTest\");\n+                GoogleMfaAuthModuleConf.class.cast(conf).setLabel(\"Syncope\");\n+                GoogleMfaAuthModuleConf.class.cast(conf).setTimeStepSize(30);\n+                GoogleMfaAuthModuleConf.class.cast(conf).setWindowSize(3);\n+                break;\n+\n+            case JAAS:\n+                conf = new JaasAuthModuleConf();\n+                JaasAuthModuleConf.class.cast(conf).setName(\"TestConf\" + getUUIDString());\n+                JaasAuthModuleConf.class.cast(conf).setKerberosKdcSystemProperty(\"sample-value\");\n+                JaasAuthModuleConf.class.cast(conf).setKerberosRealmSystemProperty(\"sample-value\");\n+                JaasAuthModuleConf.class.cast(conf).setLoginConfigType(\"JavaLoginConfig\");\n+                JaasAuthModuleConf.class.cast(conf).setRealm(\"SYNCOPE\");\n+                JaasAuthModuleConf.class.cast(conf).setLoginConfigurationFile(\"/opt/jaas/login.conf\");\n+                break;\n+\n+            case JDBC:\n+                conf = new JDBCAuthModuleConf();\n+                JDBCAuthModuleConf.class.cast(conf).setName(\"TestConf\" + getUUIDString());\n+                JDBCAuthModuleConf.class.cast(conf).setSql(\"SELECT * FROM table WHERE name=?\");\n+                JDBCAuthModuleConf.class.cast(conf).setFieldPassword(\"password\");\n+                JDBCAuthModuleConf.class.cast(conf).getPrincipalAttributeList().addAll(\n+                        List.of(\"sn\", \"cn:commonName\", \"givenName\"));\n+                break;\n+\n+            case OIDC:\n+                conf = new OIDCAuthModuleConf();\n+                OIDCAuthModuleConf.class.cast(conf).setName(\"TestConf\" + getUUIDString());\n+                OIDCAuthModuleConf.class.cast(conf).setId(\"OIDCTestId\");\n+                OIDCAuthModuleConf.class.cast(conf).setDiscoveryUri(\"www.testurl.com\");\n+                OIDCAuthModuleConf.class.cast(conf).setUserIdAttribute(\"username\");\n+                OIDCAuthModuleConf.class.cast(conf).setResponseType(\"code\");\n+                OIDCAuthModuleConf.class.cast(conf).setScope(\"openid email profile\");\n+                break;\n+\n+            case SAML2_IDP:\n+                conf = new SAML2IdPAuthModuleConf();\n+                SAML2IdPAuthModuleConf.class.cast(conf).setName(\"TestConf\" + getUUIDString());\n+                SAML2IdPAuthModuleConf.class.cast(conf).setServiceProviderEntityId(\"testEntityId\");\n+                SAML2IdPAuthModuleConf.class.cast(conf).setProviderName(\"testProviderName\");\n+                SAML2IdPAuthModuleConf.class.cast(conf).setServiceProviderMetadataPath(\n+                        \"file:/etc/metadata\");\n+                break;\n+\n+            case SYNCOPE:\n+                conf = new SyncopeAuthModuleConf();\n+                SyncopeAuthModuleConf.class.cast(conf).setName(\"TestConf\" + getUUIDString());\n+                SyncopeAuthModuleConf.class.cast(conf).setDomain(\"Master\");\n+                SyncopeAuthModuleConf.class.cast(conf).setUrl(\"http://mydomain.com/syncope/rest\");\n+                break;\n+\n+            case U2F:\n+                conf = new U2FAuthModuleConf();\n+                U2FAuthModuleConf.class.cast(conf).setName(\"TestConf\" + getUUIDString());\n+                U2FAuthModuleConf.class.cast(conf).setExpireDevices(50);\n+                break;\n+\n+            case RADIUS:\n+                conf = new RadiusAuthModuleConf();\n+                RadiusAuthModuleConf.class.cast(conf).setName(\"TestConf\" + getUUIDString());\n+                RadiusAuthModuleConf.class.cast(conf).setProtocol(\"MSCHAPv2\");\n+                RadiusAuthModuleConf.class.cast(conf).setInetAddress(\"1.2.3.4\");\n+                RadiusAuthModuleConf.class.cast(conf).setSharedSecret(\"xyz\");\n+                RadiusAuthModuleConf.class.cast(conf).setSocketTimeout(40);\n+                break;\n+\n+            case STATIC:\n+            default:\n+                conf = new StaticAuthModuleConf();\n+                StaticAuthModuleConf.class.cast(conf).setName(\"TestConf\" + getUUIDString());\n+                StaticAuthModuleConf.class.cast(conf).getUsers().put(\"user1\", UUID.randomUUID().toString());\n+                StaticAuthModuleConf.class.cast(conf).getUsers().put(\"user2\", \"user2Password123\");\n+                break;\n+        }\n+        authModuleTO.setConf(conf);\n+\n+        return authModuleTO;\n+    }\n+\n+    @Test\n+    public void findAll() {\n+        List<AuthModuleTO> authModuleTOs = authModuleService.list();\n+        assertNotNull(authModuleTOs);\n+        assertFalse(authModuleTOs.isEmpty());\n+        assertTrue(authModuleTOs.size() >= 10);\n+    }\n+\n+    @Test\n+    public void listByType() {\n+        List<AuthModuleTO> authModuleTOs = authModuleService.list();\n+        assertNotNull(authModuleTOs);\n+        assertFalse(authModuleTOs.isEmpty());\n+\n+        assertTrue(authModuleTOs.stream().anyMatch(\n+                authModule -> isSpecificConf(authModule.getConf(), LDAPAuthModuleConf.class)\n+                && authModule.getName().equals(\"DefaultLDAPAuthModule\")));\n+        assertTrue(authModuleTOs.stream().anyMatch(\n+                authModule -> isSpecificConf(authModule.getConf(), JDBCAuthModuleConf.class)\n+                && authModule.getName().equals(\"DefaultJDBCAuthModule\")));\n+        assertTrue(authModuleTOs.stream().anyMatch(\n+                authModule -> isSpecificConf(authModule.getConf(), GoogleMfaAuthModuleConf.class)\n+                && authModule.getName().equals(\"DefaultGoogleMfaAuthModule\")));\n+        assertTrue(authModuleTOs.stream().anyMatch(\n+                authModule -> isSpecificConf(authModule.getConf(), OIDCAuthModuleConf.class)\n+                && authModule.getName().equals(\"DefaultOIDCAuthModule\")));\n+        assertTrue(authModuleTOs.stream().anyMatch(\n+                authModule -> isSpecificConf(authModule.getConf(), SAML2IdPAuthModuleConf.class)\n+                && authModule.getName().equals(\"DefaultSAML2IdPAuthModule\")));\n+        assertTrue(authModuleTOs.stream().anyMatch(\n+                authModule -> isSpecificConf(authModule.getConf(), JaasAuthModuleConf.class)\n+                && authModule.getName().equals(\"DefaultJaasAuthModule\")));\n+        assertTrue(authModuleTOs.stream().anyMatch(\n+                authModule -> isSpecificConf(authModule.getConf(), StaticAuthModuleConf.class)\n+                && authModule.getName().equals(\"DefaultStaticAuthModule\")));\n+        assertTrue(authModuleTOs.stream().anyMatch(\n+                authModule -> isSpecificConf(authModule.getConf(), SyncopeAuthModuleConf.class)\n+                && authModule.getName().equals(\"DefaultSyncopeAuthModule\")));\n+        assertTrue(authModuleTOs.stream().anyMatch(\n+                authModule -> isSpecificConf(authModule.getConf(), U2FAuthModuleConf.class)\n+                && authModule.getName().equals(\"DefaultU2FAuthModule\")));\n+        assertTrue(authModuleTOs.stream().anyMatch(\n+                authModule -> isSpecificConf(authModule.getConf(), RadiusAuthModuleConf.class)\n+                && authModule.getName().equals(\"DefaultRadiusAuthModule\")));\n+    }\n+\n+    @Test\n+    public void getLDAPAuthModule() {\n+        AuthModuleTO authModuleTO = authModuleService.read(\"be456831-593d-4003-b273-4c3fb61700df\");\n+\n+        assertNotNull(authModuleTO);\n+        assertTrue(StringUtils.isNotBlank(authModuleTO.getName()));\n+        assertTrue(StringUtils.isNotBlank(authModuleTO.getDescription()));\n+        assertTrue(isSpecificConf(authModuleTO.getConf(), LDAPAuthModuleConf.class));\n+        assertFalse(isSpecificConf(authModuleTO.getConf(), JDBCAuthModuleConf.class));\n+    }\n+\n+    @Test\n+    public void getJDBCAuthModule() {\n+        AuthModuleTO authModuleTO = authModuleService.read(\"4c3ed7e8-7008-11ea-bc55-0242ac130003\");\n+\n+        assertNotNull(authModuleTO);\n+        assertTrue(StringUtils.isNotBlank(authModuleTO.getName()));\n+        assertTrue(StringUtils.isNotBlank(authModuleTO.getDescription()));\n+        assertTrue(isSpecificConf(authModuleTO.getConf(), JDBCAuthModuleConf.class));\n+        assertFalse(isSpecificConf(authModuleTO.getConf(), GoogleMfaAuthModuleConf.class));\n+    }\n+\n+    @Test\n+    public void getGoogleMfaAuthModule() {\n+        AuthModuleTO authModuleTO = authModuleService.read(\"4c3ed4e6-7008-11ea-bc55-0242ac130003\");\n+\n+        assertNotNull(authModuleTO);\n+        assertTrue(StringUtils.isNotBlank(authModuleTO.getName()));\n+        assertTrue(StringUtils.isNotBlank(authModuleTO.getDescription()));\n+        assertTrue(isSpecificConf(authModuleTO.getConf(), GoogleMfaAuthModuleConf.class));\n+        assertFalse(isSpecificConf(authModuleTO.getConf(), OIDCAuthModuleConf.class));\n+    }\n+\n+    @Test\n+    public void getOIDCAuthModule() {\n+        AuthModuleTO authModuleTO = authModuleService.read(\"4c3ed8f6-7008-11ea-bc55-0242ac130003\");\n+\n+        assertNotNull(authModuleTO);\n+        assertTrue(StringUtils.isNotBlank(authModuleTO.getName()));\n+        assertTrue(StringUtils.isNotBlank(authModuleTO.getDescription()));\n+        assertTrue(isSpecificConf(authModuleTO.getConf(), OIDCAuthModuleConf.class));\n+        assertFalse(isSpecificConf(authModuleTO.getConf(), SAML2IdPAuthModuleConf.class));\n+    }\n+\n+    @Test\n+    public void getSAML2IdPAuthModule() {\n+        AuthModuleTO authModuleTO = authModuleService.read(\"4c3ed9d2-7008-11ea-bc55-0242ac130003\");\n+\n+        assertNotNull(authModuleTO);\n+        assertTrue(StringUtils.isNotBlank(authModuleTO.getName()));\n+        assertTrue(StringUtils.isNotBlank(authModuleTO.getDescription()));\n+        assertTrue(isSpecificConf(authModuleTO.getConf(), SAML2IdPAuthModuleConf.class));\n+        assertFalse(isSpecificConf(authModuleTO.getConf(), JaasAuthModuleConf.class));\n+    }\n+\n+    @Test\n+    public void getJaasAuthModule() {\n+        AuthModuleTO authModuleTO = authModuleService.read(\"4c3edbbc-7008-11ea-bc55-0242ac130003\");\n+\n+        assertNotNull(authModuleTO);\n+        assertTrue(StringUtils.isNotBlank(authModuleTO.getName()));\n+        assertTrue(StringUtils.isNotBlank(authModuleTO.getDescription()));\n+        assertTrue(isSpecificConf(authModuleTO.getConf(), JaasAuthModuleConf.class));\n+        assertFalse(isSpecificConf(authModuleTO.getConf(), StaticAuthModuleConf.class));\n+    }\n+\n+    @Test\n+    public void getStaticAuthModule() {\n+        AuthModuleTO authModuleTO = authModuleService.read(\"4c3edc98-7008-11ea-bc55-0242ac130003\");\n+\n+        assertNotNull(authModuleTO);\n+        assertTrue(StringUtils.isNotBlank(authModuleTO.getName()));\n+        assertTrue(StringUtils.isNotBlank(authModuleTO.getDescription()));\n+        assertTrue(isSpecificConf(authModuleTO.getConf(), StaticAuthModuleConf.class));\n+        assertFalse(isSpecificConf(authModuleTO.getConf(), SyncopeAuthModuleConf.class));\n+    }\n+\n+    @Test\n+    public void getSyncopeAuthModule() {\n+        AuthModuleTO authModuleTO = authModuleService.read(\"4c3edd60-7008-11ea-bc55-0242ac130003\");\n+\n+        assertNotNull(authModuleTO);\n+        assertTrue(StringUtils.isNotBlank(authModuleTO.getName()));\n+        assertTrue(StringUtils.isNotBlank(authModuleTO.getDescription()));\n+        assertTrue(isSpecificConf(authModuleTO.getConf(), SyncopeAuthModuleConf.class));\n+        assertFalse(isSpecificConf(authModuleTO.getConf(), RadiusAuthModuleConf.class));\n+    }\n+\n+    @Test\n+    public void getRadiusAuthModule() {\n+        AuthModuleTO authModuleTO = authModuleService.read(\"07c528f3-63b4-4dc1-a4da-87f35b8bdec8\");\n+\n+        assertNotNull(authModuleTO);\n+        assertTrue(StringUtils.isNotBlank(authModuleTO.getName()));\n+        assertTrue(StringUtils.isNotBlank(authModuleTO.getDescription()));\n+        assertTrue(isSpecificConf(authModuleTO.getConf(), RadiusAuthModuleConf.class));\n+        assertFalse(isSpecificConf(authModuleTO.getConf(), U2FAuthModuleConf.class));\n+    }\n+\n+    @Test\n+    public void getU2FAuthModule() {\n+        AuthModuleTO authModuleTO = authModuleService.read(\"f6e1288d-50d9-45fe-82ee-597c42242205\");\n+\n+        assertNotNull(authModuleTO);\n+        assertTrue(StringUtils.isNotBlank(authModuleTO.getName()));\n+        assertTrue(StringUtils.isNotBlank(authModuleTO.getDescription()));\n+        assertTrue(isSpecificConf(authModuleTO.getConf(), U2FAuthModuleConf.class));\n+        assertFalse(isSpecificConf(authModuleTO.getConf(), LDAPAuthModuleConf.class));\n+    }\n+\n+    @Test\n+    public void create() throws IOException {\n+        EnumSet.allOf(AuthModuleSupportedType.class).forEach(type -> testCreate(type));\n+    }\n+\n+    @Test\n+    public void updateGoogleMfaAuthModule() {\n+        AuthModuleTO googleMfaAuthModuleTO = authModuleService.read(\"4c3ed4e6-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(googleMfaAuthModuleTO);\n+\n+        AuthModuleTO newGoogleMfaAuthModuleTO = buildAuthModuleTO(AuthModuleSupportedType.GOOGLE_MFA);\n+        newGoogleMfaAuthModuleTO = createAuthModule(newGoogleMfaAuthModuleTO);\n+        assertNotNull(newGoogleMfaAuthModuleTO);\n+\n+        AuthModuleConf conf = googleMfaAuthModuleTO.getConf();\n+        assertNotNull(conf);\n+        GoogleMfaAuthModuleConf.class.cast(conf).setLabel(\"newLabel\");\n+        newGoogleMfaAuthModuleTO.setConf(conf);\n+\n+        // update new auth module\n+        authModuleService.update(newGoogleMfaAuthModuleTO);\n+        newGoogleMfaAuthModuleTO = authModuleService.read(newGoogleMfaAuthModuleTO.getKey());\n+        assertNotNull(newGoogleMfaAuthModuleTO);\n+\n+        conf = newGoogleMfaAuthModuleTO.getConf();\n+        assertEquals(\"newLabel\", GoogleMfaAuthModuleConf.class.cast(conf).getLabel());\n+    }\n+\n+    @Test\n+    public void updateLDAPAuthModule() {\n+        AuthModuleTO ldapAuthModuleTO = authModuleService.read(\"be456831-593d-4003-b273-4c3fb61700df\");\n+        assertNotNull(ldapAuthModuleTO);\n+\n+        AuthModuleTO newLdapAuthModuleTO = buildAuthModuleTO(AuthModuleSupportedType.LDAP);\n+        newLdapAuthModuleTO = createAuthModule(newLdapAuthModuleTO);\n+        assertNotNull(newLdapAuthModuleTO);\n+\n+        AuthModuleConf conf = ldapAuthModuleTO.getConf();\n+        assertNotNull(conf);\n+        LDAPAuthModuleConf.class.cast(conf).setSubtreeSearch(false);\n+        newLdapAuthModuleTO.setConf(conf);\n+\n+        // update new auth module\n+        authModuleService.update(newLdapAuthModuleTO);\n+        newLdapAuthModuleTO = authModuleService.read(newLdapAuthModuleTO.getKey());\n+        assertNotNull(newLdapAuthModuleTO);\n+\n+        conf = newLdapAuthModuleTO.getConf();\n+        assertFalse(LDAPAuthModuleConf.class.cast(conf).isSubtreeSearch());\n+    }\n+\n+    @Test\n+    public void updateSAML2IdPAuthModule() {\n+        AuthModuleTO saml2IdpAuthModuleTO = authModuleService.read(\"4c3ed9d2-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(saml2IdpAuthModuleTO);\n+\n+        AuthModuleTO newsaml2IdpAuthModuleTO = buildAuthModuleTO(AuthModuleSupportedType.SAML2_IDP);\n+        newsaml2IdpAuthModuleTO = createAuthModule(newsaml2IdpAuthModuleTO);\n+        assertNotNull(newsaml2IdpAuthModuleTO);\n+\n+        AuthModuleConf conf = saml2IdpAuthModuleTO.getConf();\n+        assertNotNull(conf);\n+        SAML2IdPAuthModuleConf.class.cast(conf).setServiceProviderEntityId(\"newEntityId\");\n+        newsaml2IdpAuthModuleTO.setConf(conf);\n+\n+        // update new auth module\n+        authModuleService.update(newsaml2IdpAuthModuleTO);\n+        newsaml2IdpAuthModuleTO = authModuleService.read(newsaml2IdpAuthModuleTO.getKey());\n+        assertNotNull(newsaml2IdpAuthModuleTO);\n+\n+        conf = newsaml2IdpAuthModuleTO.getConf();\n+        assertEquals(\"newEntityId\", SAML2IdPAuthModuleConf.class.cast(conf).getServiceProviderEntityId());\n+    }\n+\n+    @Test\n+    public void updateOIDCAuthModule() {\n+        AuthModuleTO oidcAuthModuleTO = authModuleService.read(\"4c3ed8f6-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(oidcAuthModuleTO);\n+\n+        AuthModuleTO newOIDCAuthModuleTO = buildAuthModuleTO(AuthModuleSupportedType.OIDC);\n+        newOIDCAuthModuleTO = createAuthModule(newOIDCAuthModuleTO);\n+        assertNotNull(newOIDCAuthModuleTO);\n+\n+        AuthModuleConf conf = oidcAuthModuleTO.getConf();\n+        assertNotNull(conf);\n+        OIDCAuthModuleConf.class.cast(conf).setResponseType(\"newCode\");\n+        newOIDCAuthModuleTO.setConf(conf);\n+\n+        // update new auth module\n+        authModuleService.update(newOIDCAuthModuleTO);\n+        newOIDCAuthModuleTO = authModuleService.read(newOIDCAuthModuleTO.getKey());\n+        assertNotNull(newOIDCAuthModuleTO);\n+\n+        conf = newOIDCAuthModuleTO.getConf();\n+        assertEquals(\"newCode\", OIDCAuthModuleConf.class.cast(conf).getResponseType());\n+    }\n+\n+    @Test\n+    public void updateJDBCAuthModule() {\n+        AuthModuleTO jdbcAuthModuleTO = authModuleService.read(\"4c3ed7e8-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(jdbcAuthModuleTO);\n+\n+        AuthModuleTO newJDBCAuthModuleTO = buildAuthModuleTO(AuthModuleSupportedType.JDBC);\n+        newJDBCAuthModuleTO = createAuthModule(newJDBCAuthModuleTO);\n+        assertNotNull(newJDBCAuthModuleTO);\n+\n+        AuthModuleConf conf = jdbcAuthModuleTO.getConf();\n+        assertNotNull(conf);\n+        JDBCAuthModuleConf.class.cast(conf).setFieldPassword(\"uPassword\");\n+        newJDBCAuthModuleTO.setConf(conf);\n+\n+        // update new auth module\n+        authModuleService.update(newJDBCAuthModuleTO);\n+        newJDBCAuthModuleTO = authModuleService.read(newJDBCAuthModuleTO.getKey());\n+        assertNotNull(newJDBCAuthModuleTO);\n+\n+        conf = newJDBCAuthModuleTO.getConf();\n+        assertEquals(\"uPassword\", JDBCAuthModuleConf.class.cast(conf).getFieldPassword());\n+    }\n+\n+    @Test\n+    public void updateJaasAuthModule() {\n+        AuthModuleTO jaasAuthModuleTO = authModuleService.read(\"4c3edbbc-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(jaasAuthModuleTO);\n+\n+        AuthModuleTO newJaasAuthModuleTO = buildAuthModuleTO(AuthModuleSupportedType.JAAS);\n+        newJaasAuthModuleTO = createAuthModule(newJaasAuthModuleTO);\n+        assertNotNull(newJaasAuthModuleTO);\n+\n+        AuthModuleConf conf = jaasAuthModuleTO.getConf();\n+        assertNotNull(conf);\n+        JaasAuthModuleConf.class.cast(conf).setRealm(\"SYNCOPE_NEW\");\n+        newJaasAuthModuleTO.setConf(conf);\n+\n+        // update new auth module\n+        authModuleService.update(newJaasAuthModuleTO);\n+        newJaasAuthModuleTO = authModuleService.read(newJaasAuthModuleTO.getKey());\n+        assertNotNull(newJaasAuthModuleTO);\n+\n+        conf = newJaasAuthModuleTO.getConf();\n+        assertEquals(\"SYNCOPE_NEW\", JaasAuthModuleConf.class.cast(conf).getRealm());\n+    }\n+\n+    @Test\n+    public void updateStaticAuthModule() {\n+        AuthModuleTO staticAuthModuleTO = authModuleService.read(\"4c3edc98-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(staticAuthModuleTO);\n+\n+        AuthModuleTO newStaticAuthModuleTO = buildAuthModuleTO(AuthModuleSupportedType.STATIC);\n+        newStaticAuthModuleTO = createAuthModule(newStaticAuthModuleTO);\n+        assertNotNull(newStaticAuthModuleTO);\n+\n+        AuthModuleConf conf = staticAuthModuleTO.getConf();\n+        assertNotNull(conf);\n+        assertEquals(1, StaticAuthModuleConf.class.cast(conf).getUsers().size());\n+        StaticAuthModuleConf.class.cast(conf).getUsers().put(\"user3\", \"user3Password123\");\n+        newStaticAuthModuleTO.setConf(conf);\n+\n+        // update new auth module\n+        authModuleService.update(newStaticAuthModuleTO);\n+        newStaticAuthModuleTO = authModuleService.read(newStaticAuthModuleTO.getKey());\n+        assertNotNull(newStaticAuthModuleTO);\n+\n+        conf = newStaticAuthModuleTO.getConf();\n+        assertEquals(2, StaticAuthModuleConf.class.cast(conf).getUsers().size());\n+    }\n+\n+    @Test\n+    public void updateRadiusAuthModule() {\n+        AuthModuleTO radiusAuthModuleTO = authModuleService.read(\"07c528f3-63b4-4dc1-a4da-87f35b8bdec8\");\n+        assertNotNull(radiusAuthModuleTO);\n+\n+        AuthModuleTO newRadiusAuthModuleTO = buildAuthModuleTO(AuthModuleSupportedType.RADIUS);\n+        newRadiusAuthModuleTO = createAuthModule(newRadiusAuthModuleTO);\n+        assertNotNull(newRadiusAuthModuleTO);\n+\n+        AuthModuleConf conf = radiusAuthModuleTO.getConf();\n+        assertNotNull(conf);\n+        RadiusAuthModuleConf.class.cast(conf).setSocketTimeout(45);\n+        newRadiusAuthModuleTO.setConf(conf);\n+\n+        // update new auth module\n+        authModuleService.update(newRadiusAuthModuleTO);\n+        newRadiusAuthModuleTO = authModuleService.read(newRadiusAuthModuleTO.getKey());\n+        assertNotNull(newRadiusAuthModuleTO);\n+\n+        conf = newRadiusAuthModuleTO.getConf();\n+        assertEquals(45, RadiusAuthModuleConf.class.cast(conf).getSocketTimeout());\n+    }\n+\n+    @Test\n+    public void updateU2fAuthModule() {\n+        AuthModuleTO u2fAuthModuleTO = authModuleService.read(\"f6e1288d-50d9-45fe-82ee-597c42242205\");\n+        assertNotNull(u2fAuthModuleTO);\n+\n+        AuthModuleTO newU2fAuthModuleTO = buildAuthModuleTO(AuthModuleSupportedType.U2F);\n+        newU2fAuthModuleTO = createAuthModule(newU2fAuthModuleTO);\n+        assertNotNull(newU2fAuthModuleTO);\n+\n+        AuthModuleConf conf = u2fAuthModuleTO.getConf();\n+        assertNotNull(conf);\n+        U2FAuthModuleConf.class.cast(conf).setExpireDevices(24);\n+        newU2fAuthModuleTO.setConf(conf);\n+\n+        // update new auth module\n+        authModuleService.update(newU2fAuthModuleTO);\n+        newU2fAuthModuleTO = authModuleService.read(newU2fAuthModuleTO.getKey());\n+        assertNotNull(newU2fAuthModuleTO);\n+\n+        conf = newU2fAuthModuleTO.getConf();\n+        assertEquals(24, U2FAuthModuleConf.class.cast(conf).getExpireDevices());\n+    }\n+\n+    @Test\n+    public void updateSyncopeAuthModule() {\n+        AuthModuleTO syncopeAuthModuleTO = authModuleService.read(\"4c3edd60-7008-11ea-bc55-0242ac130003\");\n+        assertNotNull(syncopeAuthModuleTO);\n+\n+        AuthModuleTO newSyncopeAuthModuleTO = buildAuthModuleTO(AuthModuleSupportedType.SYNCOPE);\n+        newSyncopeAuthModuleTO = createAuthModule(newSyncopeAuthModuleTO);\n+        assertNotNull(newSyncopeAuthModuleTO);\n+\n+        AuthModuleConf conf = syncopeAuthModuleTO.getConf();\n+        assertNotNull(conf);\n+        SyncopeAuthModuleConf.class.cast(conf).setDomain(\"Two\");\n+        newSyncopeAuthModuleTO.setConf(conf);\n+\n+        // update new auth module\n+        authModuleService.update(newSyncopeAuthModuleTO);\n+        newSyncopeAuthModuleTO = authModuleService.read(newSyncopeAuthModuleTO.getKey());\n+        assertNotNull(newSyncopeAuthModuleTO);\n+\n+        conf = newSyncopeAuthModuleTO.getConf();\n+        assertEquals(\"Two\", SyncopeAuthModuleConf.class.cast(conf).getDomain());\n+    }\n+\n+    @Test\n+    public void delete() throws IOException {\n+        EnumSet.allOf(AuthModuleSupportedType.class).forEach(type -> testDelete(type));\n+    }\n+\n+    private void testCreate(final AuthModuleSupportedType type) {\n+        AuthModuleTO authModuleTO = createAuthModule(buildAuthModuleTO(type));\n+        assertNotNull(authModuleTO);\n+        assertTrue(authModuleTO.getName().contains(\n+                \"Test\" + type + \"AuthenticationModule\"));\n+        assertTrue(authModuleTO.getDescription().contains(\n+                \"A test \" + type + \" Authentication Module\"));\n+    }\n+\n+    private void testDelete(final AuthModuleSupportedType type) {\n+        AuthModuleTO authModuleTO = buildAuthModuleTO(type);\n+        AuthModuleTO read = createAuthModule(authModuleTO);\n+        assertNotNull(read);\n+        authModuleService.delete(read.getKey());\n+        try {\n+            authModuleService.read(read.getKey());\n+            fail(\"This should not happen\");\n+        } catch (SyncopeClientException e) {\n+            assertNotNull(e);\n+        }\n+    }\n+\n+    private boolean isSpecificConf(final AuthModuleConf conf, final Class<? extends AuthModuleConf> clazz) {\n+        return ClassUtils.isAssignable(clazz, conf.getClass());\n+    }\n+}"}]}