{"sha":"319fff45d0197e5d139180c9ddde675ce7bd9882","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjMxOWZmZjQ1ZDAxOTdlNWQxMzkxODBjOWRkZGU2NzVjZTdiZDk4ODI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-01-24T09:17:50Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-01-24T09:17:57Z"},"message":"[SYNCOPE-999] Adding specific test case for checking 401 and 403 response statuses","tree":{"sha":"f8efc7e42b98deccb850695a0e4eff6dbb2f5bdd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f8efc7e42b98deccb850695a0e4eff6dbb2f5bdd"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/319fff45d0197e5d139180c9ddde675ce7bd9882","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/319fff45d0197e5d139180c9ddde675ce7bd9882","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/319fff45d0197e5d139180c9ddde675ce7bd9882","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/319fff45d0197e5d139180c9ddde675ce7bd9882/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"2b0a38dc2b80a0cfcf904a3912186641dcadc375","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2b0a38dc2b80a0cfcf904a3912186641dcadc375","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2b0a38dc2b80a0cfcf904a3912186641dcadc375"}],"stats":{"total":31,"additions":31,"deletions":0},"files":[{"sha":"9d8d9206b6b96ac452472422181f267b864a30e7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RESTITCase.java","status":"modified","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/319fff45d0197e5d139180c9ddde675ce7bd9882/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRESTITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/319fff45d0197e5d139180c9ddde675ce7bd9882/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRESTITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRESTITCase.java?ref=319fff45d0197e5d139180c9ddde675ce7bd9882","patch":"@@ -26,6 +26,9 @@\n \n import java.io.IOException;\n import java.io.InputStream;\n+import java.security.AccessControlException;\n+import java.util.List;\n+import javax.ws.rs.ForbiddenException;\n import javax.ws.rs.core.EntityTag;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.HttpHeaders;\n@@ -42,20 +45,48 @@\n import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.Preference;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n+import org.apache.syncope.common.rest.api.service.ConnectorService;\n import org.apache.syncope.common.rest.api.service.GroupService;\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.Test;\n \n public class RESTITCase extends AbstractITCase {\n \n+    @Test\n+    public void unauthorizedOrForbidden() {\n+        // service as admin: it works\n+        List<ConnInstanceTO> connectors = connectorService.list(null);\n+        assertNotNull(connectors);\n+        assertFalse(connectors.isEmpty());\n+\n+        // service with bad password: 401 unauthorized\n+        SyncopeClient badClient = clientFactory.create(\"bellini\", \"passwor\");\n+        try {\n+            badClient.getService(ConnectorService.class).list(null);\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n+\n+        // service with good password, but no entitlements owned: 403 forbidden\n+        SyncopeClient goodClient = clientFactory.create(\"bellini\", \"password\");\n+        try {\n+            goodClient.getService(ConnectorService.class).list(null);\n+            fail();\n+        } catch (ForbiddenException e) {\n+            assertNotNull(e);\n+        }\n+    }\n+\n     @Test\n     public void noContent() throws IOException {\n         SyncopeClient noContentclient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);"}]}