{"sha":"b96970ce7c3511d990b6a0ca7e871ff21e156ce3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmI5Njk3MGNlN2MzNTExZDk5MGI2YTBjYTdlODcxZmYyMWUxNTZjZTM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-07-22T07:46:23Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-07-22T07:46:23Z"},"message":"[SYNCOPE-1583] Fix","tree":{"sha":"c5633e76bcb1d297a4a543516820864371b7b97d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c5633e76bcb1d297a4a543516820864371b7b97d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b96970ce7c3511d990b6a0ca7e871ff21e156ce3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b96970ce7c3511d990b6a0ca7e871ff21e156ce3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b96970ce7c3511d990b6a0ca7e871ff21e156ce3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b96970ce7c3511d990b6a0ca7e871ff21e156ce3/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"8cbc1380d0e63021ff773a41127dd4d5e587c319","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8cbc1380d0e63021ff773a41127dd4d5e587c319","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8cbc1380d0e63021ff773a41127dd4d5e587c319"}],"stats":{"total":92,"additions":87,"deletions":5},"files":[{"sha":"23f9f8a04f79a963511078e5b40d25fd28c2a876","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b96970ce7c3511d990b6a0ca7e871ff21e156ce3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b96970ce7c3511d990b6a0ca7e871ff21e156ce3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=b96970ce7c3511d990b6a0ca7e871ff21e156ce3","patch":"@@ -623,8 +623,14 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n \n             if (intAttrName.getEnclosingGroup() != null) {\n                 Group group = groupDAO.findByName(intAttrName.getEnclosingGroup());\n-                if (group == null || groupableRelatable.getMembership(group.getKey()).isEmpty()) {\n-                    LOG.warn(\"No membership for {} in {}, ignoring\",\n+                if (group == null\n+                        || any instanceof User\n+                                ? !userDAO.findAllGroupKeys((User) any).contains(group.getKey())\n+                                : any instanceof AnyObject\n+                                        ? !anyObjectDAO.findAllGroupKeys((AnyObject) any).contains(group.getKey())\n+                                        : false) {\n+\n+                    LOG.warn(\"No (dyn) membership for {} in {}, ignoring\",\n                             intAttrName.getEnclosingGroup(), groupableRelatable);\n                 } else {\n                     references.add(group);\n@@ -649,7 +655,7 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n                 }\n             } else if (intAttrName.getRelationshipAnyType() != null && intAttrName.getRelationshipType() != null) {\n                 RelationshipType relationshipType = relationshipTypeDAO.find(intAttrName.getRelationshipType());\n-                final AnyType anyType = anyTypeDAO.find(intAttrName.getRelationshipAnyType());\n+                AnyType anyType = anyTypeDAO.find(intAttrName.getRelationshipAnyType());\n                 if (relationshipType == null || groupableRelatable.getRelationships(relationshipType).isEmpty()) {\n                     LOG.warn(\"No relationship for type {} in {}, ignoring\",\n                             intAttrName.getRelationshipType(), groupableRelatable);"},{"sha":"d00bfb104f0a4afff0d46f7972ce2990c1098a49","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ClientAppDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b96970ce7c3511d990b6a0ca7e871ff21e156ce3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b96970ce7c3511d990b6a0ca7e871ff21e156ce3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java?ref=b96970ce7c3511d990b6a0ca7e871ff21e156ce3","patch":"@@ -106,7 +106,7 @@ private void doUpdate(final SAML2SP clientApp, final SAML2SPTO clientAppTO) {\n         clientApp.setClientAppId(clientAppTO.getClientAppId());\n         clientApp.setEntityId(clientAppTO.getEntityId());\n         clientApp.setMetadataLocation(clientAppTO.getMetadataLocation());\n-        clientApp.setMetadataSignatureLocation(clientAppTO.getMetadataLocation());\n+        clientApp.setMetadataSignatureLocation(clientAppTO.getMetadataSignatureLocation());\n         clientApp.setSignAssertions(clientAppTO.isSignAssertions());\n         clientApp.setSignResponses(clientAppTO.isSignResponses());\n         clientApp.setEncryptionOptional(clientAppTO.isEncryptionOptional());\n@@ -170,7 +170,7 @@ private static SAML2SPTO getClientAppTO(final SAML2SP clientApp) {\n         clientAppTO.setClientAppId(clientApp.getClientAppId());\n         clientAppTO.setEntityId(clientApp.getEntityId());\n         clientAppTO.setMetadataLocation(clientApp.getMetadataLocation());\n-        clientAppTO.setMetadataSignatureLocation(clientApp.getMetadataLocation());\n+        clientAppTO.setMetadataSignatureLocation(clientApp.getMetadataSignatureLocation());\n         clientAppTO.setSignAssertions(clientApp.isSignAssertions());\n         clientAppTO.setSignResponses(clientApp.isSignResponses());\n         clientAppTO.setEncryptionOptional(clientApp.isEncryptionOptional());"},{"sha":"b8137f4e6a0e96420e20b08d0cb9f80a12ff94b0","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/MappingManagerImplTest.java","status":"modified","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b96970ce7c3511d990b6a0ca7e871ff21e156ce3/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImplTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b96970ce7c3511d990b6a0ca7e871ff21e156ce3/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImplTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImplTest.java?ref=b96970ce7c3511d990b6a0ca7e871ff21e156ce3","patch":"@@ -20,18 +20,29 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import java.util.List;\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n+import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.identityconnectors.common.security.SecurityUtil;\n@@ -53,6 +64,21 @@ public class MappingManagerImplTest extends AbstractTest {\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n+    @Autowired\n+    private GroupDAO groupDAO;\n+\n+    @Autowired\n+    private AnyTypeClassDAO anyTypeClassDAO;\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n@@ -202,4 +228,54 @@ public void prepareAttrsForLinkedAccount() {\n                 provision);\n         assertNull(AttributeUtil.getPasswordValue(attrs));\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1583() {\n+        // 0. create user matching the condition below\n+        User user = entityFactory.newEntity(User.class);\n+        user.setUsername(\"username\");\n+        user.setRealm(realmDAO.findByFullPath(\"/even/two\"));\n+        user.add(anyTypeClassDAO.find(\"other\"));\n+\n+        UPlainAttr cool = entityFactory.newEntity(UPlainAttr.class);\n+        cool.setOwner(user);\n+        cool.setSchema(plainSchemaDAO.find(\"cool\"));\n+        cool.add(\"true\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+        user.add(cool);\n+\n+        user = userDAO.save(user);\n+        String newUserKey = user.getKey();\n+        assertNotNull(newUserKey);\n+\n+        // 1. update group with dynamic membership\n+        Group group = groupDAO.findByName(\"root\");\n+        assertNotNull(group);\n+\n+        UDynGroupMembership dynMembership = entityFactory.newEntity(UDynGroupMembership.class);\n+        dynMembership.setFIQLCond(\"cool==true\");\n+        dynMembership.setGroup(group);\n+        group.setUDynMembership(dynMembership);\n+\n+        group = groupDAO.saveAndRefreshDynMemberships(group);\n+        assertNotNull(group);\n+\n+        entityManager().flush();\n+\n+        // 2. verify that dynamic membership is in place\n+        assertTrue(userDAO.findAllGroupKeys(user).contains(group.getKey()));\n+\n+        // 3.\n+        ExternalResource csv = resourceDAO.find(\"resource-csv\");\n+        Provision provision = csv.getProvision(AnyTypeKind.USER.name()).get();\n+        assertNotNull(provision);\n+\n+        Pair<String, Set<Attribute>> attrs = mappingManager.prepareAttrsFromAny(\n+                user,\n+                null,\n+                false,\n+                Boolean.TRUE,\n+                provision);\n+        assertTrue(attrs.getRight().stream().anyMatch(\n+                attr -> \"theirgroup\".equals(attr.getName()) && List.of(\"sx-dx\").equals(attr.getValue())));\n+    }\n }"}]}