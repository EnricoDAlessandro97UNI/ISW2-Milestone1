{"sha":"dad0fa5780d446315d9acebdcdd724a1bc5baeb6","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRhZDBmYTU3ODBkNDQ2MzE1ZDlhY2ViZGNkZDcyNGExYmM1YmFlYjY=","commit":{"author":{"name":"skylark17","email":"matteo.alessandroni@tirasa.net","date":"2018-05-02T14:56:24Z"},"committer":{"name":"skylark17","email":"matteo.alessandroni@tirasa.net","date":"2018-06-07T08:15:33Z"},"message":"[SYNCOPE-1295] New structured wizard to edit SCIM 2.0 configuration","tree":{"sha":"7a44d2cbcb2b9078c11e1efe800a0b23886dd8b9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7a44d2cbcb2b9078c11e1efe800a0b23886dd8b9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/dad0fa5780d446315d9acebdcdd724a1bc5baeb6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dad0fa5780d446315d9acebdcdd724a1bc5baeb6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dad0fa5780d446315d9acebdcdd724a1bc5baeb6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/comments","author":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"committer":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"parents":[{"sha":"71993ccf35d1590cb5e306cf918c0fba4dc046c5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/71993ccf35d1590cb5e306cf918c0fba4dc046c5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/71993ccf35d1590cb5e306cf918c0fba4dc046c5"}],"stats":{"total":2402,"additions":2075,"deletions":327},"files":[{"sha":"22ac2f461d0ce06d454130e8d0bf86636e6117b8","filename":"client/console/src/main/java/org/apache/syncope/client/console/init/ClassPathScanImplementationLookup.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -18,12 +18,16 @@\n  */\n package org.apache.syncope.client.console.init;\n \n+import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.ObjectUtils;\n import org.apache.syncope.client.console.pages.BaseExtPage;\n@@ -38,6 +42,9 @@\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\n@@ -50,6 +57,33 @@ public class ClassPathScanImplementationLookup {\n \n     private static final String DEFAULT_BASE_PACKAGE = \"org.apache.syncope\";\n \n+    public static final Set<String> USER_FIELD_NAMES = new HashSet<>();\n+\n+    public static final Set<String> GROUP_FIELD_NAMES = new HashSet<>();\n+\n+    public static final Set<String> ANY_OBJECT_FIELD_NAMES = new HashSet<>();\n+\n+    static {\n+        initFieldNames(UserTO.class, USER_FIELD_NAMES);\n+        initFieldNames(GroupTO.class, GROUP_FIELD_NAMES);\n+        initFieldNames(AnyObjectTO.class, ANY_OBJECT_FIELD_NAMES);\n+    }\n+\n+    private static void initFieldNames(final Class<?> entityClass, final Set<String> keys) {\n+        List<Class<?>> classes = org.apache.commons.lang3.ClassUtils.getAllSuperclasses(entityClass);\n+        classes.add(entityClass);\n+        for (Class<?> clazz : classes) {\n+            for (Field field : clazz.getDeclaredFields()) {\n+                if (!Modifier.isStatic(field.getModifiers())\n+                        && !Collection.class.isAssignableFrom(field.getType())\n+                        && !Map.class.isAssignableFrom(field.getType())) {\n+\n+                    keys.add(field.getName());\n+                }\n+            }\n+        }\n+    }\n+\n     private List<Class<? extends BasePage>> pages;\n \n     private List<Class<? extends AbstractBinaryPreviewer>> previewers;"},{"sha":"1d1dc2d609b7cb4876338642c193935b009d4269","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/AbstractMappingPanel.java","status":"modified","additions":0,"deletions":37,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAbstractMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAbstractMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAbstractMappingPanel.java?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -22,16 +22,9 @@\n import de.agilecoders.wicket.core.markup.html.bootstrap.components.PopoverConfig;\n import de.agilecoders.wicket.core.markup.html.bootstrap.components.TooltipConfig;\n import java.io.Serializable;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Collections;\n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import org.apache.commons.lang3.ClassUtils;\n import org.apache.syncope.client.console.commons.ConnIdSpecialName;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n@@ -46,10 +39,7 @@\n import org.apache.syncope.client.console.widgets.ItemTransformerWidget;\n import org.apache.syncope.client.console.wizards.resources.JEXLTransformersTogglePanel;\n import org.apache.syncope.client.console.wizards.resources.ItemTransformersTogglePanel;\n-import org.apache.syncope.common.lib.to.AnyObjectTO;\n-import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ItemTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -70,33 +60,6 @@ public abstract class AbstractMappingPanel extends Panel {\n \n     private static final long serialVersionUID = -8295587900937040104L;\n \n-    protected static final Set<String> USER_FIELD_NAMES = new HashSet<>();\n-\n-    protected static final Set<String> GROUP_FIELD_NAMES = new HashSet<>();\n-\n-    protected static final Set<String> ANY_OBJECT_FIELD_NAMES = new HashSet<>();\n-\n-    static {\n-        initFieldNames(UserTO.class, USER_FIELD_NAMES);\n-        initFieldNames(GroupTO.class, GROUP_FIELD_NAMES);\n-        initFieldNames(AnyObjectTO.class, ANY_OBJECT_FIELD_NAMES);\n-    }\n-\n-    private static void initFieldNames(final Class<?> entityClass, final Set<String> keys) {\n-        List<Class<?>> classes = ClassUtils.getAllSuperclasses(entityClass);\n-        classes.add(entityClass);\n-        classes.forEach(clazz -> {\n-            for (Field field : clazz.getDeclaredFields()) {\n-                if (!Modifier.isStatic(field.getModifiers())\n-                        && !Collection.class.isAssignableFrom(field.getType())\n-                        && !Map.class.isAssignableFrom(field.getType())) {\n-\n-                    keys.add(field.getName());\n-                }\n-            }\n-        });\n-    }\n-\n     /**\n      * Any type rest client.\n      */"},{"sha":"655f46200bd0be7f521350b15bc7ca74c838f691","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceMappingPanel.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceMappingPanel.java?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -23,6 +23,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import org.apache.syncope.client.console.init.ClassPathScanImplementationLookup;\n import org.apache.syncope.client.console.rest.ConnectorRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wizards.AbstractMappingPanel;\n@@ -152,15 +153,15 @@ protected void setAttrNames(final AjaxTextFieldPanel toBeUpdated) {\n \n             switch (provision.getAnyType()) {\n                 case \"USER\":\n-                    choices.addAll(USER_FIELD_NAMES);\n+                    choices.addAll(ClassPathScanImplementationLookup.USER_FIELD_NAMES);\n                     break;\n \n                 case \"GROUP\":\n-                    choices.addAll(GROUP_FIELD_NAMES);\n+                    choices.addAll(ClassPathScanImplementationLookup.GROUP_FIELD_NAMES);\n                     break;\n \n                 default:\n-                    choices.addAll(ANY_OBJECT_FIELD_NAMES);\n+                    choices.addAll(ClassPathScanImplementationLookup.ANY_OBJECT_FIELD_NAMES);\n             }\n \n             anyTypeClassTOs.forEach(anyTypeClassTO -> {"},{"sha":"330899202a0a1fec7b5d0d123be748e758446801","filename":"ext/oidcclient/client-console/src/main/java/org/apache/syncope/client/console/wizards/OIDCProviderMappingPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderMappingPanel.java?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import org.apache.syncope.client.console.init.ClassPathScanImplementationLookup;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wizards.resources.ItemTransformersTogglePanel;\n import org.apache.syncope.client.console.wizards.resources.JEXLTransformersTogglePanel;\n@@ -87,7 +88,7 @@ protected void setAttrNames(final AjaxTextFieldPanel toBeUpdated) {\n         toBeUpdated.setRequired(true);\n         toBeUpdated.setEnabled(true);\n \n-        List<String> choices = new ArrayList<>(USER_FIELD_NAMES);\n+        List<String> choices = new ArrayList<>(ClassPathScanImplementationLookup.USER_FIELD_NAMES);\n \n         for (AnyTypeClassTO anyTypeClassTO : anyTypeClassRestClient.list(\n                 anyTypeRestClient.read(AnyTypeKind.USER.name()).getClasses())) {"},{"sha":"21e80a6ea5a044ca74a1b584484f61e736eca7ec","filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/wizards/SAML2IdPMappingPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPMappingPanel.java?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import org.apache.syncope.client.console.init.ClassPathScanImplementationLookup;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wizards.resources.JEXLTransformersTogglePanel;\n import org.apache.syncope.client.console.wizards.resources.ItemTransformersTogglePanel;\n@@ -70,7 +71,7 @@ protected void setAttrNames(final AjaxTextFieldPanel toBeUpdated) {\n         toBeUpdated.setRequired(true);\n         toBeUpdated.setEnabled(true);\n \n-        List<String> choices = new ArrayList<>(USER_FIELD_NAMES);\n+        List<String> choices = new ArrayList<>(ClassPathScanImplementationLookup.USER_FIELD_NAMES);\n \n         for (AnyTypeClassTO anyTypeClassTO : anyTypeClassRestClient.list(\n                 anyTypeRestClient.read(AnyTypeKind.USER.name()).getClasses())) {"},{"sha":"ac5a375ca77230296c19715ed9f52790ddd05ac9","filename":"ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/pages/SCIMConf.java","status":"removed","additions":0,"deletions":137,"changes":137,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/71993ccf35d1590cb5e306cf918c0fba4dc046c5/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/71993ccf35d1590cb5e306cf918c0fba4dc046c5/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConf.java?ref=71993ccf35d1590cb5e306cf918c0fba4dc046c5","patch":"@@ -1,137 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.pages;\n-\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n-import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.syncope.client.console.annotations.ExtPage;\n-import org.apache.syncope.client.console.commons.Constants;\n-import org.apache.syncope.client.console.rest.SCIMConfRestClient;\n-import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n-import org.apache.syncope.client.console.wicket.markup.html.form.JsonEditorPanel;\n-import org.apache.syncope.common.lib.scim.SCIMComplexConf;\n-import org.apache.syncope.common.lib.scim.SCIMEnterpriseUserConf;\n-import org.apache.syncope.common.lib.scim.SCIMUserConf;\n-import org.apache.syncope.common.lib.scim.SCIMUserNameConf;\n-import org.apache.syncope.common.lib.scim.types.EmailCanonicalType;\n-import org.apache.syncope.common.lib.scim.types.SCIMEntitlement;\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.markup.html.AjaxLink;\n-import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n-import org.apache.wicket.markup.html.WebMarkupContainer;\n-import org.apache.wicket.markup.html.form.Form;\n-import org.apache.wicket.model.Model;\n-import org.apache.wicket.model.ResourceModel;\n-import org.apache.wicket.request.mapper.parameter.PageParameters;\n-\n-@ExtPage(label = \"SCIM 2.0\", icon = \"fa-cloud\", listEntitlement = SCIMEntitlement.SCIM_CONF_GET, priority = 400)\n-public class SCIMConf extends BaseExtPage {\n-\n-    private static final long serialVersionUID = 9128779230455599119L;\n-\n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n-\n-    private final SCIMConfRestClient restClient = new SCIMConfRestClient();\n-\n-    public SCIMConf(final PageParameters parameters) {\n-        super(parameters);\n-\n-        body.add(BookmarkablePageLinkBuilder.build(\"dashboard\", \"dashboardBr\", Dashboard.class));\n-\n-        final BaseModal<String> modal = new BaseModal<>(\"modal\");\n-        modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n-\n-            private static final long serialVersionUID = 8804221891699487139L;\n-\n-            @Override\n-            public void onClose(final AjaxRequestTarget target) {\n-                modal.show(false);\n-            }\n-        });\n-        modal.size(Modal.Size.Large);\n-        modal.addSubmitButton();\n-        body.add(modal);\n-\n-        WebMarkupContainer content = new WebMarkupContainer(\"content\");\n-        content.setOutputMarkupId(true);\n-        body.add(content);\n-\n-        String confString = \"\";\n-        try {\n-            org.apache.syncope.common.lib.scim.SCIMConf conf = restClient.get();\n-            if (conf.getUserConf() == null) {\n-                conf.setUserConf(new SCIMUserConf());\n-            }\n-            if (conf.getUserConf().getName() == null) {\n-                conf.getUserConf().setName(new SCIMUserNameConf());\n-            }\n-            if (conf.getUserConf().getEmails().isEmpty()) {\n-                conf.getUserConf().getEmails().add(new SCIMComplexConf<EmailCanonicalType>());\n-            }\n-\n-            if (conf.getEnterpriseUserConf() == null) {\n-                conf.setEnterpriseUserConf(new SCIMEnterpriseUserConf());\n-            }\n-\n-            confString = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(conf);\n-        } catch (Exception e) {\n-            LOG.error(\"While reading SCIM configuration\", e);\n-            SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage())\n-                    ? e.getClass().getName() : e.getMessage());\n-        }\n-        final Model<String> confModel = Model.of(confString);\n-\n-        content.add(new AjaxLink<Void>(\"edit\") {\n-\n-            private static final long serialVersionUID = -4331619903296515985L;\n-\n-            @Override\n-            public void onClick(final AjaxRequestTarget target) {\n-                modal.header(new ResourceModel(\"editConf\"));\n-                modal.setContent(new JsonEditorPanel(modal, confModel, false, getPageReference()) {\n-\n-                    private static final long serialVersionUID = -8927036362466990179L;\n-\n-                    @Override\n-                    public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n-                        try {\n-                            restClient.set(MAPPER.readValue(\n-                                    confModel.getObject(), org.apache.syncope.common.lib.scim.SCIMConf.class));\n-\n-                            SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n-                            modal.show(false);\n-                            modal.close(target);\n-                        } catch (Exception e) {\n-                            LOG.error(\"While setting SCIM configuration\", e);\n-                            SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage())\n-                                    ? e.getClass().getName() : e.getMessage());\n-                        }\n-                        ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n-                    }\n-                });\n-                modal.show(true);\n-                target.add(modal);\n-            }\n-        });\n-    }\n-\n-}"},{"sha":"4eded72d6d255701c9368c6eb8e36286de84948f","filename":"ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/pages/SCIMConfPage.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage.java?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.Serializable;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.annotations.ExtPage;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.panels.SCIMConfPanel;\n+import org.apache.syncope.client.console.rest.SCIMConfRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.syncope.client.console.wizards.any.ResultPage;\n+import org.apache.syncope.common.lib.scim.SCIMConf;\n+import org.apache.syncope.common.lib.scim.types.SCIMEntitlement;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ExtPage(label = \"SCIM 2.0\", icon = \"fa-cloud\", listEntitlement = SCIMEntitlement.SCIM_CONF_GET, priority = 100)\n+public class SCIMConfPage extends BaseExtPage {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(SCIMConfPage.class);\n+\n+    private static final long serialVersionUID = -8156063343062111770L;\n+\n+    private final SCIMConfRestClient restClient = new SCIMConfRestClient();\n+\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final WebMarkupContainer content;\n+\n+    public SCIMConfPage(final PageParameters parameters) {\n+        super(parameters);\n+\n+        body.add(BookmarkablePageLinkBuilder.build(\"dashboard\", \"dashboardBr\", Dashboard.class));\n+\n+        content = new WebMarkupContainer(\"content\");\n+\n+        content.add(new Label(\"body\", \"General\"));\n+        content.setOutputMarkupId(true);\n+        body.add(content);\n+\n+        updateSCIMGeneralConfContent(restClient.get());\n+    }\n+\n+    private WebMarkupContainer updateSCIMGeneralConfContent(final SCIMConf scimConf) {\n+        if (scimConf == null) {\n+            return content;\n+        }\n+        content.addOrReplace(new SCIMConfPanel(\"body\", scimConf, SCIMConfPage.this.getPageReference()) {\n+\n+            private static final long serialVersionUID = 8221398624379357183L;\n+\n+            @Override\n+            protected void setWindowClosedReloadCallback(final BaseModal<?> modal) {\n+                modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n+\n+                    private static final long serialVersionUID = 8804221891699487139L;\n+\n+                    @Override\n+                    public void onClose(final AjaxRequestTarget target) {\n+                        if (modal.getContent() instanceof ResultPage) {\n+                            Serializable result = ResultPage.class.cast(modal.getContent()).getResult();\n+                            try {\n+                                restClient.set(MAPPER.readValue(result.toString(), SCIMConf.class));\n+\n+                                SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n+                                modal.show(false);\n+                                target.add(content);\n+                            } catch (Exception e) {\n+                                LOG.error(\"While setting SCIM configuration\", e);\n+                                SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage())\n+                                        ? e.getClass().getName() : e.getMessage());\n+                            }\n+                            ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+                        }\n+                    }\n+                });\n+            }\n+\n+        });\n+\n+        return content;\n+    }\n+\n+}"},{"sha":"1a2d68723f485277ef1dfba10f8ff3d8790169d3","filename":"ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/panels/SCIMConfAccordionContainer.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfAccordionContainer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfAccordionContainer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfAccordionContainer.java?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.util.List;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.markup.html.panel.Panel;\n+\n+public class SCIMConfAccordionContainer extends Panel {\n+\n+    private static final long serialVersionUID = 8186681102688613299L;\n+\n+    SCIMConfAccordionContainer(final String id, final List<AjaxTextFieldPanel> fieldPanels) {\n+        super(id);\n+\n+        add(new ListView<AjaxTextFieldPanel>(\"accordionContainer\", fieldPanels) {\n+\n+            private static final long serialVersionUID = 4949588177564901031L;\n+\n+            @Override\n+            protected void populateItem(final ListItem<AjaxTextFieldPanel> item) {\n+                item.add(item.getModelObject());\n+            }\n+        });\n+    }\n+}"},{"sha":"e127bbcb2c50355de73f03efeb0cd5a2870249c8","filename":"ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/panels/SCIMConfEnterpriseUserPanel.java","status":"added","additions":235,"deletions":0,"changes":235,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfEnterpriseUserPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfEnterpriseUserPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfEnterpriseUserPanel.java?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -0,0 +1,235 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.tabs.Accordion;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.scim.SCIMConf;\n+import org.apache.syncope.common.lib.scim.SCIMEnterpriseUserConf;\n+import org.apache.syncope.common.lib.scim.SCIMManagerConf;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n+import org.apache.wicket.extensions.markup.html.tabs.ITab;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SCIMConfEnterpriseUserPanel extends SCIMConfTabPanel {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(SCIMConfEnterpriseUserPanel.class);\n+\n+    private static final long serialVersionUID = -4183306437598820588L;\n+\n+    private final SCIMEnterpriseUserConf scimEnterpriseUserConf;\n+\n+    public SCIMConfEnterpriseUserPanel(\n+            final String id,\n+            final SCIMConf scimConf) {\n+        super(id, scimConf);\n+\n+        if (scimConf.getEnterpriseUserConf() == null) {\n+            scimConf.setEnterpriseUserConf(new SCIMEnterpriseUserConf());\n+        }\n+        if (scimConf.getEnterpriseUserConf().getManager() == null) {\n+            scimConf.getEnterpriseUserConf().setManager(new SCIMManagerConf());\n+        }\n+        scimEnterpriseUserConf = scimConf.getEnterpriseUserConf();\n+\n+        AjaxTextFieldPanel costCenterPanel =\n+                new AjaxTextFieldPanel(\"costCenter\", \"costCenter\",\n+                        new PropertyModel<String>(\"costCenter\", \"costCenter\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return scimEnterpriseUserConf.getCostCenter();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimEnterpriseUserConf.setCostCenter(object);\n+                    }\n+\n+                });\n+        costCenterPanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel departmentPanel =\n+                new AjaxTextFieldPanel(\"department\", \"department\",\n+                        new PropertyModel<String>(\"department\", \"department\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return scimEnterpriseUserConf.getDepartment();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimEnterpriseUserConf.setDepartment(object);\n+                    }\n+\n+                });\n+        departmentPanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel divisionPanel =\n+                new AjaxTextFieldPanel(\"division\", \"division\",\n+                        new PropertyModel<String>(\"division\", \"division\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return scimEnterpriseUserConf.getDivision();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimEnterpriseUserConf.setDivision(object);\n+                    }\n+\n+                });\n+        divisionPanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel employeeNumberPanel =\n+                new AjaxTextFieldPanel(\"employeeNumber\", \"employeeNumber\",\n+                        new PropertyModel<String>(\"employeeNumber\", \"employeeNumber\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return scimEnterpriseUserConf.getEmployeeNumber();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimEnterpriseUserConf.setEmployeeNumber(object);\n+                    }\n+\n+                });\n+        employeeNumberPanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel organizationPanel =\n+                new AjaxTextFieldPanel(\"organization\", \"organization\",\n+                        new PropertyModel<String>(\"organization\", \"organization\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return scimEnterpriseUserConf.getOrganization();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimEnterpriseUserConf.setOrganization(object);\n+                    }\n+\n+                });\n+        organizationPanel.setChoices(plainSchemaNames);\n+\n+        // manager\n+        buildManagerAccordion();\n+\n+        add(costCenterPanel);\n+        add(departmentPanel);\n+        add(divisionPanel);\n+        add(employeeNumberPanel);\n+        add(organizationPanel);\n+    }\n+\n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        super.onEvent(event);\n+    }\n+\n+    private void buildManagerAccordion() {\n+        final Accordion accordion = new Accordion(\"managerAccordion\",\n+                Collections.<ITab>singletonList(new AbstractTab(Model.of(\"manager\")) {\n+\n+                    private static final long serialVersionUID = -5861786415855103549L;\n+\n+                    @Override\n+                    public WebMarkupContainer getPanel(final String panelId) {\n+                        return buildNameAccordionContent(panelId);\n+                    }\n+\n+                }), Model.of(-1)); // accordion closed at beginning\n+        add(accordion.setOutputMarkupId(true));\n+\n+    }\n+\n+    private SCIMConfAccordionContainer buildNameAccordionContent(final String panelId) {\n+        final List<AjaxTextFieldPanel> panelList = new ArrayList<>();\n+\n+        AjaxTextFieldPanel managerKeyPanel =\n+                new AjaxTextFieldPanel(\"accordionContent\", \"manager.key\",\n+                        new PropertyModel<String>(scimEnterpriseUserConf.getManager(), \"accordionContent\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return scimEnterpriseUserConf.getManager().getKey();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimEnterpriseUserConf.getManager().setKey(object);\n+                    }\n+\n+                });\n+        managerKeyPanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel managerDisplaNamePanel =\n+                new AjaxTextFieldPanel(\"accordionContent\", \"manager.displayName\",\n+                        new PropertyModel<String>(scimEnterpriseUserConf.getManager(), \"accordionContent\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return scimEnterpriseUserConf.getManager().getDisplayName();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimEnterpriseUserConf.getManager().setDisplayName(object);\n+                    }\n+\n+                });\n+        managerDisplaNamePanel.setChoices(plainSchemaNames);\n+\n+        panelList.add(managerKeyPanel);\n+        panelList.add(managerDisplaNamePanel);\n+        \n+        add(new Label(\"managerLabel\", Model.of(\"manager\")));\n+\n+        return new SCIMConfAccordionContainer(panelId, panelList);\n+    }\n+\n+}"},{"sha":"29f457cfd30b650403041a6d9160d9335d702f0f","filename":"ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/panels/SCIMConfGeneralPanel.java","status":"added","additions":161,"deletions":0,"changes":161,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfGeneralPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfGeneralPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfGeneralPanel.java?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.util.Date;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDateTimeFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.scim.SCIMConf;\n+import org.apache.syncope.common.lib.scim.SCIMGeneralConf;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+\n+public class SCIMConfGeneralPanel extends SCIMConfTabPanel {\n+\n+    private static final long serialVersionUID = 2765863608539154422L;\n+\n+    public SCIMConfGeneralPanel(\n+            final String id,\n+            final SCIMConf scimConf) {\n+        super(id, scimConf);\n+\n+        final SCIMGeneralConf scimGeneralConf = scimConf.getGeneralConf();\n+\n+        AjaxDateTimeFieldPanel creationDatePanel =\n+                new AjaxDateTimeFieldPanel(\"creationDate\", \"creationDate\", new Model<Date>() {\n+\n+                    private static final long serialVersionUID = 7075312408615929880L;\n+\n+                    @Override\n+                    public Date getObject() {\n+                        return scimGeneralConf.getCreationDate();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final Date object) {\n+                        scimGeneralConf.setCreationDate(object);\n+                    }\n+\n+                }, SyncopeConstants.DEFAULT_DATE_PATTERN);\n+        creationDatePanel.setEnabled(false);\n+\n+        AjaxDateTimeFieldPanel lastChangeDatePanel =\n+                new AjaxDateTimeFieldPanel(\"lastChangeDate\", \"lastChangeDate\", new Model<Date>() {\n+\n+                    private static final long serialVersionUID = 7075312408615929880L;\n+\n+                    @Override\n+                    public Date getObject() {\n+                        return scimGeneralConf.getLastChangeDate();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final Date object) {\n+                        scimGeneralConf.setLastChangeDate(object);\n+                    }\n+\n+                }, SyncopeConstants.DEFAULT_DATE_PATTERN);\n+        lastChangeDatePanel.setEnabled(false);\n+\n+        AjaxTextFieldPanel bulkMaxOperationsPanel =\n+                new AjaxTextFieldPanel(\"bulkMaxOperations\", \"bulkMaxOperations\",\n+                        new PropertyModel<String>(\"bulkMaxOperations\", \"bulkMaxOperations\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return String.valueOf(scimGeneralConf.getBulkMaxOperations());\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimGeneralConf.setBulkMaxOperations(Integer.parseInt(object));\n+                    }\n+\n+                });\n+        bulkMaxOperationsPanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel bulkMaxMaxPayloadSizePanel =\n+                new AjaxTextFieldPanel(\"bulkMaxMaxPayloadSize\", \"bulkMaxMaxPayloadSize\",\n+                        new PropertyModel<String>(\"bulkMaxMaxPayloadSize\", \"bulkMaxMaxPayloadSize\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return String.valueOf(scimGeneralConf.getBulkMaxPayloadSize());\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimGeneralConf.setBulkMaxPayloadSize(Integer.parseInt(object));\n+                    }\n+\n+                });\n+        bulkMaxMaxPayloadSizePanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel filterMaxResultsPanel =\n+                new AjaxTextFieldPanel(\"filterMaxResults\", \"filterMaxResults\",\n+                        new PropertyModel<String>(\"filterMaxResults\", \"filterMaxResults\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return String.valueOf(scimGeneralConf.getFilterMaxResults());\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimGeneralConf.setFilterMaxResults(Integer.parseInt(object));\n+                    }\n+\n+                });\n+        filterMaxResultsPanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel eTagValuePanel =\n+                new AjaxTextFieldPanel(\"eTagValue\", \"eTagValue\",\n+                        new PropertyModel<String>(\"eTagValue\", \"eTagValue\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return scimGeneralConf.getETagValue();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+\n+                    }\n+\n+                });\n+        eTagValuePanel.setEnabled(false);\n+\n+        add(creationDatePanel);\n+        add(lastChangeDatePanel);\n+        add(bulkMaxOperationsPanel);\n+        add(bulkMaxMaxPayloadSizePanel);\n+        add(filterMaxResultsPanel);\n+        add(eTagValuePanel);\n+    }\n+\n+}"},{"sha":"d006bb1458292a2c3b801acbc592b26d5fedae39","filename":"ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/panels/SCIMConfPanel.java","status":"added","additions":143,"deletions":0,"changes":143,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel.java?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n+import de.agilecoders.wicket.core.markup.html.bootstrap.tabs.AjaxBootstrapTabbedPanel;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.client.console.commons.ITabComponent;\n+import org.apache.syncope.client.console.rest.SCIMConfRestClient;\n+import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n+import org.apache.syncope.common.lib.scim.SCIMConf;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.extensions.markup.html.tabs.ITab;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.Model;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class SCIMConfPanel extends WizardMgtPanel<SCIMConf> {\n+\n+    private static final long serialVersionUID = -1100228004207271270L;\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(SCIMConfPanel.class);\n+\n+    private final SCIMConf scimConfTO;\n+\n+    private final SCIMConfRestClient scimConfRestClient = new SCIMConfRestClient();\n+\n+    public SCIMConfPanel(\n+            final String id,\n+            final SCIMConf scimConfTO,\n+            final PageReference pageRef) {\n+        super(id, true);\n+\n+        this.scimConfTO = scimConfTO;\n+        this.pageRef = pageRef;\n+\n+        setPageRef(pageRef);\n+\n+        AjaxBootstrapTabbedPanel<ITab> tabbedPanel =\n+                new AjaxBootstrapTabbedPanel<>(\"tabbedPanel\", buildTabList());\n+        tabbedPanel.setSelectedTab(0);\n+        addInnerObject(tabbedPanel);\n+\n+        AjaxLink<String> saveButton = new AjaxLink<String>(\"saveButton\") {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+                scimConfRestClient.set(SCIMConfPanel.this.scimConfTO);\n+            }\n+        };\n+        addInnerObject(saveButton);\n+\n+        setShowResultPage(true);\n+\n+        modal.size(Modal.Size.Large);\n+        setWindowClosedReloadCallback(modal);\n+    }\n+\n+    private List<ITab> buildTabList() {\n+        List<ITab> tabs = new ArrayList<>();\n+\n+        tabs.add(new ITabComponent(new Model<>(getString(\"tab1\"))) {\n+\n+            private static final long serialVersionUID = -5861786415855103549L;\n+\n+            @Override\n+            public Panel getPanel(final String panelId) {\n+                return new SCIMConfGeneralPanel(panelId, scimConfTO);\n+            }\n+\n+            @Override\n+            public boolean isVisible() {\n+                return true;\n+            }\n+        });\n+\n+        tabs.add(new ITabComponent(\n+                new Model<>(getString(\"tab2\")), getString(\"tab2\")) {\n+\n+            private static final long serialVersionUID = 1998052474181916792L;\n+\n+            @Override\n+            public WebMarkupContainer getPanel(final String panelId) {\n+                return new SCIMConfUserPanel(panelId, scimConfTO);\n+            }\n+\n+            @Override\n+            public boolean isVisible() {\n+                return true;\n+            }\n+        });\n+\n+        tabs.add(new ITabComponent(\n+                new Model<>(getString(\"tab3\")), getString(\"tab3\")) {\n+\n+            private static final long serialVersionUID = 1998052474181916792L;\n+\n+            @Override\n+            public WebMarkupContainer getPanel(final String panelId) {\n+                return new SCIMConfEnterpriseUserPanel(panelId, scimConfTO);\n+            }\n+\n+            @Override\n+            public boolean isVisible() {\n+                return true;\n+            }\n+        });\n+\n+        return tabs;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected Panel customResultBody(final String panelId, final SCIMConf item, final Serializable result) {\n+\n+        return null;\n+    }\n+\n+}"},{"sha":"12acbb29de186a7d2926a7ab3ca4e7739105a9a2","filename":"ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/panels/SCIMConfTabPanel.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfTabPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfTabPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfTabPanel.java?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.client.console.init.ClassPathScanImplementationLookup;\n+import org.apache.syncope.client.console.rest.SchemaRestClient;\n+import org.apache.syncope.common.lib.scim.SCIMConf;\n+import org.apache.syncope.common.lib.to.SchemaTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.wicket.markup.html.panel.Panel;\n+\n+public class SCIMConfTabPanel extends Panel implements ModalPanel {\n+\n+    private static final long serialVersionUID = -4482885585790492795L;\n+\n+    protected final List<String> plainSchemaNames = getPlainSchemas();\n+\n+    public SCIMConfTabPanel(\n+            final String id,\n+            final SCIMConf scimConf) {\n+        super(id);\n+    }\n+\n+    private static List<String> getPlainSchemas() {\n+        final List<String> names = new ArrayList<>(ClassPathScanImplementationLookup.USER_FIELD_NAMES);\n+        names.addAll(CollectionUtils.collect(new SchemaRestClient().getSchemas(SchemaType.PLAIN, AnyTypeKind.USER),\n+                new Transformer<SchemaTO, String>() {\n+\n+            @Override\n+            public String transform(final SchemaTO input) {\n+                return input.getKey();\n+            }\n+        }, new ArrayList<String>()));\n+        names.remove(\"password\");\n+        Collections.sort(names);\n+\n+        return names;\n+    }\n+\n+}"},{"sha":"ab5fbdbc1ecc8faa72e64d448c13d90beb9d6e8e","filename":"ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/panels/SCIMConfUserPanel.java","status":"added","additions":700,"deletions":0,"changes":700,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfUserPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfUserPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfUserPanel.java?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -0,0 +1,700 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.tabs.Accordion;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n+import org.apache.syncope.common.lib.scim.SCIMComplexConf;\n+import org.apache.syncope.common.lib.scim.SCIMConf;\n+import org.apache.syncope.common.lib.scim.SCIMUserAddressConf;\n+import org.apache.syncope.common.lib.scim.SCIMUserConf;\n+import org.apache.syncope.common.lib.scim.SCIMUserNameConf;\n+import org.apache.syncope.common.lib.scim.types.AddressCanonicalType;\n+import org.apache.syncope.common.lib.scim.types.EmailCanonicalType;\n+import org.apache.syncope.common.lib.scim.types.IMCanonicalType;\n+import org.apache.syncope.common.lib.scim.types.PhoneNumberCanonicalType;\n+import org.apache.syncope.common.lib.scim.types.PhotoCanonicalType;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteSettings;\n+import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n+import org.apache.wicket.extensions.markup.html.tabs.ITab;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.util.ListModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SCIMConfUserPanel extends SCIMConfTabPanel {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(SCIMConfUserPanel.class);\n+\n+    private static final long serialVersionUID = 8747864142447220523L;\n+\n+    private final SCIMUserConf scimUserConf;\n+\n+    public SCIMConfUserPanel(\n+            final String id,\n+            final SCIMConf scimConf) {\n+        super(id, scimConf);\n+\n+        if (scimConf.getUserConf() == null) {\n+            scimConf.setUserConf(new SCIMUserConf());\n+        }\n+        if (scimConf.getUserConf().getName() == null) {\n+            scimConf.getUserConf().setName(new SCIMUserNameConf());\n+        }\n+        scimUserConf = scimConf.getUserConf();\n+\n+        final AutoCompleteSettings settings = new AutoCompleteSettings();\n+        settings.setShowCompleteListOnFocusGain(true);\n+        settings.setShowListOnEmptyInput(true);\n+        settings.setCssClassName(\"custom-autocomplete-box\");\n+\n+        AjaxTextFieldPanel displayNamePanel =\n+                new AjaxTextFieldPanel(\"displayName\", \"displayName\",\n+                        new PropertyModel<String>(\"displayName\", \"displayName\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return scimUserConf.getDisplayName();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimUserConf.setDisplayName(object);\n+                    }\n+\n+                });\n+        displayNamePanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel localePanel =\n+                new AjaxTextFieldPanel(\"locale\", \"locale\",\n+                        new PropertyModel<String>(\"locale\", \"locale\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return scimUserConf.getLocale();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimUserConf.setLocale(object);\n+                    }\n+\n+                });\n+        localePanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel nickNamePanel =\n+                new AjaxTextFieldPanel(\"nickName\", \"nickName\",\n+                        new PropertyModel<String>(\"nickName\", \"nickName\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return scimUserConf.getNickName();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimUserConf.setNickName(object);\n+                    }\n+\n+                });\n+        nickNamePanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel preferredLanguagePanel =\n+                new AjaxTextFieldPanel(\"preferredLanguage\", \"preferredLanguage\",\n+                        new PropertyModel<String>(\"preferredLanguage\", \"preferredLanguage\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return scimUserConf.getPreferredLanguage();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimUserConf.setPreferredLanguage(object);\n+                    }\n+\n+                });\n+        preferredLanguagePanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel profileUrlPanel =\n+                new AjaxTextFieldPanel(\"profileUrl\", \"profileUrl\",\n+                        new PropertyModel<String>(\"profileUrl\", \"profileUrl\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return scimUserConf.getProfileUrl();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimUserConf.setProfileUrl(object);\n+                    }\n+\n+                });\n+        profileUrlPanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel timezonePanel =\n+                new AjaxTextFieldPanel(\"timezone\", \"timezone\",\n+                        new PropertyModel<String>(\"timezone\", \"timezone\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return scimUserConf.getTimezone();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimUserConf.setTimezone(object);\n+                    }\n+\n+                });\n+        timezonePanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel titlePanel =\n+                new AjaxTextFieldPanel(\"title\", \"title\",\n+                        new PropertyModel<String>(\"title\", \"title\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return scimUserConf.getTitle();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimUserConf.setTitle(object);\n+                    }\n+\n+                });\n+        titlePanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel userTypePanel =\n+                new AjaxTextFieldPanel(\"userType\", \"userType\",\n+                        new PropertyModel<String>(\"userType\", \"userType\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return scimUserConf.getUserType();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimUserConf.setUserType(object);\n+                    }\n+\n+                });\n+        userTypePanel.setChoices(plainSchemaNames);\n+\n+        // name\n+        buildNameAccordion();\n+\n+        // x509certificates\n+        final AjaxTextFieldPanel x509CertificatesPanel = new AjaxTextFieldPanel(\"panel\", \"x509CertificatesPanel\",\n+                new Model<String>(null));\n+        x509CertificatesPanel.setChoices(plainSchemaNames);\n+        MultiFieldPanel<String> x509CertificatesMultiPanel = new MultiFieldPanel.Builder<>(\n+                new ListModel<>(scimUserConf.getX509Certificates())).build(\n+                \"x509Certificates\",\n+                \"x509Certificates\",\n+                x509CertificatesPanel);\n+\n+        // addresses\n+        List<SCIMUserAddressConf> addresses = new ArrayList<>();\n+        for (final AddressCanonicalType canonicalType : AddressCanonicalType.values()) {\n+            SCIMUserAddressConf address = IterableUtils.find(scimUserConf.getAddresses(),\n+                    new Predicate<SCIMUserAddressConf>() {\n+\n+                @Override\n+                public boolean evaluate(final SCIMUserAddressConf object) {\n+                    return object.getType().equals(canonicalType);\n+                }\n+            });\n+\n+            if (address == null) {\n+                address = new SCIMUserAddressConf();\n+                address.setType(canonicalType);\n+            }\n+            buildAddressAccordion(address, canonicalType);\n+            addresses.add(address);\n+        }\n+        scimUserConf.getAddresses().clear();\n+        scimUserConf.getAddresses().addAll(addresses);\n+\n+        // complex objects\n+        buildComplexPanels(scimUserConf.getEmails(), \"emailsAccordion\", \"emails\", EmailCanonicalType.values());\n+        buildComplexPanels(scimUserConf.getPhoneNumbers(), \"phoneNumbersAccordion\", \"phoneNumbers\",\n+                PhoneNumberCanonicalType.values());\n+        buildComplexPanels(scimUserConf.getIms(), \"imsAccordion\", \"ims\", IMCanonicalType.values());\n+        buildComplexPanels(scimUserConf.getPhotos(), \"photosAccordion\", \"photos\", PhotoCanonicalType.values());\n+\n+        add(displayNamePanel);\n+        add(localePanel);\n+        add(nickNamePanel);\n+        add(preferredLanguagePanel);\n+        add(profileUrlPanel);\n+        add(timezonePanel);\n+        add(titlePanel);\n+        add(userTypePanel);\n+\n+        add(x509CertificatesMultiPanel);\n+\n+        add(new Label(\"nameLabel\", Model.of(\"name\")));\n+        add(new Label(\"addressesLabel\", Model.of(\"addresses\")));\n+        add(new Label(\"emailsLabel\", Model.of(\"emails\")));\n+        add(new Label(\"phoneNumbersLabel\", Model.of(\"phoneNumbers\")));\n+        add(new Label(\"imsLabel\", Model.of(\"ims\")));\n+        add(new Label(\"photosLabel\", Model.of(\"photos\")));\n+\n+    }\n+\n+    private <T extends Enum<?>> void buildComplexPanels(final List<SCIMComplexConf<T>> complexes,\n+            final String basePanelId,\n+            final String baseTabId,\n+            final T[] canonicalTypes) {\n+        List<SCIMComplexConf<T>> newElems = new ArrayList<>();\n+        for (final T canonicalType : canonicalTypes) {\n+            SCIMComplexConf<T> complex = IterableUtils.find(complexes,\n+                    new Predicate<SCIMComplexConf<T>>() {\n+\n+                @Override\n+                public boolean evaluate(final SCIMComplexConf<T> object) {\n+                    return object.getType().equals(canonicalType);\n+                }\n+            });\n+            if (complex == null) {\n+                complex = new SCIMComplexConf<>();\n+                complex.setType(canonicalType);\n+            }\n+            buildComplexAccordion(complex, basePanelId, baseTabId, canonicalType);\n+            newElems.add(complex);\n+        }\n+        complexes.clear();\n+        complexes.addAll(newElems);\n+    }\n+\n+    private void buildNameAccordion() {\n+        final Accordion accordion = new Accordion(\"nameAccordion\",\n+                Collections.<ITab>singletonList(new AbstractTab(Model.of(\"name\")) {\n+\n+                    private static final long serialVersionUID = -5861786415855103549L;\n+\n+                    @Override\n+                    public WebMarkupContainer getPanel(final String panelId) {\n+                        return buildNameAccordionContent(panelId);\n+                    }\n+\n+                }), Model.of(-1)); // accordion closed at beginning\n+        add(accordion.setOutputMarkupId(true));\n+    }\n+\n+    private void buildAddressAccordion(final SCIMUserAddressConf address,\n+            final AddressCanonicalType canonicalType) {\n+        final Accordion accordion = new Accordion(\"addressesAccordion_\" + address.getType().name(),\n+                Collections.<ITab>singletonList(new AbstractTab(Model.of(\"address.\" + address.getType().name())) {\n+\n+                    private static final long serialVersionUID = -5861786415855103549L;\n+\n+                    @Override\n+                    public WebMarkupContainer getPanel(final String panelId) {\n+                        return buildAddressAccordionContent(address, canonicalType, panelId);\n+                    }\n+\n+                }), Model.of(-1)); // accordion closed at beginning\n+        add(accordion.setOutputMarkupId(true));\n+    }\n+\n+    private <T extends Enum<?>> void buildComplexAccordion(final SCIMComplexConf<T> complex,\n+            final String basePanelId,\n+            final String baseTabId,\n+            final T canonicalType) {\n+        final Accordion accordion = new Accordion(basePanelId + \"_\" + complex.getType().name(),\n+                Collections.<ITab>singletonList(\n+                        new AbstractTab(Model.of(baseTabId + \".\" + complex.getType().name())) {\n+\n+                    private static final long serialVersionUID = -5861786415855103549L;\n+\n+                    @Override\n+                    public WebMarkupContainer getPanel(final String panelId) {\n+                        return buildComplexAccordionContent(complex, canonicalType, panelId);\n+                    }\n+\n+                }), Model.of(-1)); // accordion closed at beginning\n+        add(accordion.setOutputMarkupId(true));\n+    }\n+\n+    private SCIMConfAccordionContainer buildNameAccordionContent(final String panelId) {\n+        final List<AjaxTextFieldPanel> panelList = new ArrayList<>();\n+\n+        AjaxTextFieldPanel nameFamilyNamePanel =\n+                new AjaxTextFieldPanel(\"accordionContent\", \"name.familyName\",\n+                        new PropertyModel<String>(scimUserConf.getName(), \"accordionContent\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return scimUserConf.getName().getFamilyName();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimUserConf.getName().setFamilyName(object);\n+                    }\n+\n+                });\n+        nameFamilyNamePanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel nameFormattedPanel =\n+                new AjaxTextFieldPanel(\"accordionContent\", \"name.formatted\",\n+                        new PropertyModel<String>(scimUserConf.getName(), \"accordionContent\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return scimUserConf.getName().getFormatted();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimUserConf.getName().setFormatted(object);\n+                    }\n+\n+                });\n+        nameFormattedPanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel nameGivenNamePanel =\n+                new AjaxTextFieldPanel(\"accordionContent\", \"name.givenName\",\n+                        new PropertyModel<String>(scimUserConf.getName(), \"accordionContent\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return scimUserConf.getName().getGivenName();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimUserConf.getName().setGivenName(object);\n+                    }\n+\n+                });\n+        nameGivenNamePanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel nameHonorificPrefixPanel =\n+                new AjaxTextFieldPanel(\"accordionContent\", \"name.honorificPrefix\",\n+                        new PropertyModel<String>(scimUserConf.getName(), \"accordionContent\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return scimUserConf.getName().getHonorificPrefix();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimUserConf.getName().setHonorificPrefix(object);\n+                    }\n+\n+                });\n+        nameHonorificPrefixPanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel nameHonorificSuffixPanel =\n+                new AjaxTextFieldPanel(\"accordionContent\", \"name.honorificSuffix\",\n+                        new PropertyModel<String>(scimUserConf.getName(), \"accordionContent\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return scimUserConf.getName().getHonorificSuffix();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimUserConf.getName().setHonorificSuffix(object);\n+                    }\n+\n+                });\n+        nameHonorificSuffixPanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel nameMiddleNamePanel =\n+                new AjaxTextFieldPanel(\"accordionContent\", \"name.middleName\",\n+                        new PropertyModel<String>(scimUserConf.getName(), \"accordionContent\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return scimUserConf.getName().getMiddleName();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimUserConf.getName().setMiddleName(object);\n+                    }\n+\n+                });\n+        nameMiddleNamePanel.setChoices(plainSchemaNames);\n+\n+        panelList.add(nameFamilyNamePanel);\n+        panelList.add(nameFormattedPanel);\n+        panelList.add(nameGivenNamePanel);\n+        panelList.add(nameHonorificPrefixPanel);\n+        panelList.add(nameHonorificSuffixPanel);\n+        panelList.add(nameMiddleNamePanel);\n+\n+        return new SCIMConfAccordionContainer(panelId, panelList);\n+    }\n+\n+    private <T extends Enum<?>> SCIMConfAccordionContainer buildComplexAccordionContent(\n+            final SCIMComplexConf<T> complex,\n+            final T canonicalType,\n+            final String panelId) {\n+        final List<AjaxTextFieldPanel> panelList = new ArrayList<>();\n+        final String fieldName = panelId + \".\" + canonicalType.name();\n+\n+        AjaxTextFieldPanel displayPanel =\n+                new AjaxTextFieldPanel(\"accordionContent\", fieldName + \".display\",\n+                        new PropertyModel<String>(complex, \"accordionContent\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return complex.getDisplay();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        complex.setDisplay(object);\n+                    }\n+\n+                });\n+        displayPanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel valuePanel =\n+                new AjaxTextFieldPanel(\"accordionContent\", fieldName + \".value\",\n+                        new PropertyModel<String>(complex, \"accordionContent\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return complex.getValue();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        complex.setValue(object);\n+                    }\n+\n+                });\n+        valuePanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel primaryPanel =\n+                new AjaxTextFieldPanel(\"accordionContent\", fieldName + \".primary\",\n+                        new PropertyModel<String>(complex, \"accordionContent\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return String.valueOf(complex.isPrimary());\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        complex.setPrimary(Boolean.valueOf(object));\n+                    }\n+\n+                });\n+        primaryPanel.setChoices(Arrays.asList(\"true\", \"false\"));\n+\n+        panelList.add(displayPanel);\n+        panelList.add(valuePanel);\n+        panelList.add(primaryPanel);\n+\n+        return new SCIMConfAccordionContainer(panelId, panelList);\n+    }\n+\n+    private SCIMConfAccordionContainer buildAddressAccordionContent(final SCIMUserAddressConf address,\n+            final AddressCanonicalType canonicalType,\n+            final String panelId) {\n+        final List<AjaxTextFieldPanel> panelList = new ArrayList<>();\n+        final String fieldName = \"addresses.\" + canonicalType.name();\n+\n+        AjaxTextFieldPanel addressCountryPanel =\n+                new AjaxTextFieldPanel(\"accordionContent\", fieldName + \".country\",\n+                        new PropertyModel<String>(address, \"accordionContent\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return address.getCountry();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        address.setCountry(object);\n+                    }\n+\n+                });\n+        addressCountryPanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel addressFormattedPanel =\n+                new AjaxTextFieldPanel(\"accordionContent\", fieldName + \".formatted\",\n+                        new PropertyModel<String>(address, \"accordionContent\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return address.getFormatted();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        address.setFormatted(object);\n+                    }\n+\n+                });\n+        addressFormattedPanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel addressLocalityPanel =\n+                new AjaxTextFieldPanel(\"accordionContent\", fieldName + \".locality\",\n+                        new PropertyModel<String>(address, \"accordionContent\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return address.getLocality();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        address.setLocality(object);\n+                    }\n+\n+                });\n+        addressLocalityPanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel addressRegionPanel =\n+                new AjaxTextFieldPanel(\"accordionContent\", fieldName + \".region\",\n+                        new PropertyModel<String>(address, \"accordionContent\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return address.getRegion();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        address.setRegion(object);\n+                    }\n+\n+                });\n+        addressRegionPanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel addressPostalCodePanel =\n+                new AjaxTextFieldPanel(\"accordionContent\", fieldName + \".postalCode\",\n+                        new PropertyModel<String>(address, \"accordionContent\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return address.getPostalCode();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        address.setPostalCode(object);\n+                    }\n+\n+                });\n+        addressPostalCodePanel.setChoices(plainSchemaNames);\n+\n+        AjaxTextFieldPanel addressPrimaryPanel =\n+                new AjaxTextFieldPanel(\"accordionContent\", fieldName + \".primary\",\n+                        new PropertyModel<String>(address, \"accordionContent\") {\n+\n+                    private static final long serialVersionUID = -6427731218492117883L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return String.valueOf(address.isPrimary());\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        address.setPrimary(Boolean.valueOf(object));\n+                    }\n+\n+                });\n+        addressPrimaryPanel.setChoices(Arrays.asList(\"true\", \"false\"));\n+\n+        panelList.add(addressCountryPanel);\n+        panelList.add(addressFormattedPanel);\n+        panelList.add(addressLocalityPanel);\n+        panelList.add(addressRegionPanel);\n+        panelList.add(addressPostalCodePanel);\n+        panelList.add(addressPrimaryPanel);\n+\n+        return new SCIMConfAccordionContainer(panelId, panelList);\n+    }\n+\n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        super.onEvent(event);\n+    }\n+\n+}"},{"sha":"25a5a93fdb7f7310611ff8b1774a711a20419a14","filename":"ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConfPage.html","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage.html?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -0,0 +1,37 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:extend>\n+    <section class=\"content-header\">\n+      <h1>&nbsp;</h1>\n+      <ol class=\"breadcrumb\">\n+        <li><a wicket:id=\"dashboardBr\"><i class=\"fa fa-dashboard\"></i> <wicket:message key=\"dashboard\"></wicket:message></a></li>\n+        <li class=\"active\"><wicket:message key=\"scimConfGeneral\"></wicket:message></li>\n+      </ol>\n+    </section>\n+\n+    <section class=\"content\" wicket:id=\"content\">\n+      <div class=\"box\">\n+        <div class=\"box-body\">\n+          <wicket:container wicket:id=\"body\"/>\n+        </div>\n+      </div>\n+    </section>\n+  </wicket:extend>\n+</html>\n\\ No newline at end of file"},{"sha":"cbcf4a3254d45ef54b1673c7e2f85c079a08b515","filename":"ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConfPage.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage.properties?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+scimConfGeneral=General"},{"sha":"cbcf4a3254d45ef54b1673c7e2f85c079a08b515","filename":"ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConfPage_it.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage_it.properties?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+scimConfGeneral=General"},{"sha":"cbcf4a3254d45ef54b1673c7e2f85c079a08b515","filename":"ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConfPage_pt_BR.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage_pt_BR.properties?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+scimConfGeneral=General"},{"sha":"cbcf4a3254d45ef54b1673c7e2f85c079a08b515","filename":"ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/pages/SCIMConfPage_ru.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage_ru.properties?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+scimConfGeneral=General"},{"sha":"265a1380f15aa08cb60a69cbcb455c577ccd3b50","filename":"ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/panels/SCIMConfAccordionContainer.html","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfAccordionContainer.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfAccordionContainer.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfAccordionContainer.html?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -0,0 +1,29 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div wicket:id=\"accordionContainer\">\n+      <div class=\"form-group\">\n+        <span wicket:id=\"accordionContent\">\n+          [accordionContent]\n+        </span>\n+      </div>\n+    </div>\n+  </wicket:panel>\n+</html>\n\\ No newline at end of file"},{"sha":"8892d4cd1dd2eec7d1208b1ad69e475462fabd71","filename":"ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/panels/SCIMConfEnterpriseUserPanel.html","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfEnterpriseUserPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfEnterpriseUserPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfEnterpriseUserPanel.html?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -0,0 +1,32 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div wicket:id=\"costCenter\"/>\n+    <div wicket:id=\"department\"/>\n+    <div wicket:id=\"division\"/>\n+    <div wicket:id=\"employeeNumber\"/>\n+    <div wicket:id=\"organization\"/>\n+\n+    <div style=\"margin-top: 15px;\">\n+      <label wicket:id=\"managerLabel\"/>\n+      <div wicket:id=\"managerAccordion\"></div>\n+    </div>\n+  </wicket:panel>\n+</html>\n\\ No newline at end of file"},{"sha":"dba58652870533daba3ed589113a95444b328dd2","filename":"ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/panels/SCIMConfGeneralPanel.html","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfGeneralPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfGeneralPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfGeneralPanel.html?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -0,0 +1,28 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div wicket:id=\"creationDate\"></div>\n+    <div wicket:id=\"lastChangeDate\"></div>\n+    <div wicket:id=\"bulkMaxOperations\"></div>\n+    <div wicket:id=\"bulkMaxMaxPayloadSize\"></div>\n+    <div wicket:id=\"filterMaxResults\"></div>\n+    <div wicket:id=\"eTagValue\"></div>\n+  </wicket:panel>\n+</html>\n\\ No newline at end of file"},{"sha":"27194afe1d3ae3275b094f1ed997b4fd8fa533f7","filename":"ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/panels/SCIMConfPanel.html","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel.html?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -0,0 +1,32 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:extend>\n+    <div wicket:id=\"tabbedPanel\"></div>\n+    <div class=\"modal-footer\">\n+      <a href=\"#\" \n+         class=\"btn btn-primary\" \n+         wicket:id=\"saveButton\"\n+         alt=\"Save\" \n+         title=\"Save\">\n+        <wicket:message key=\"saveButton\"/>\n+      </a>\n+    </div>\n+  </wicket:extend>\n+</html>\n\\ No newline at end of file"},{"sha":"40063bde60539612088fed31321758cc377746fa","filename":"ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/panels/SCIMConfPanel.properties","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel.properties?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+tab1=General\n+tab2=User\n+tab3=EnterpriseUser\n+\n+saveButton=Save"},{"sha":"40063bde60539612088fed31321758cc377746fa","filename":"ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/panels/SCIMConfPanel_it.properties","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel_it.properties?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+tab1=General\n+tab2=User\n+tab3=EnterpriseUser\n+\n+saveButton=Save"},{"sha":"40063bde60539612088fed31321758cc377746fa","filename":"ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/panels/SCIMConfPanel_pt_BR.properties","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel_pt_BR.properties?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+tab1=General\n+tab2=User\n+tab3=EnterpriseUser\n+\n+saveButton=Save"},{"sha":"40063bde60539612088fed31321758cc377746fa","filename":"ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/panels/SCIMConfPanel_ru.properties","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel_ru.properties?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+tab1=General\n+tab2=User\n+tab3=EnterpriseUser\n+\n+saveButton=Save"},{"sha":"5208aca0fa5fa2d450766439c80430b317caba10","filename":"ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/panels/SCIMConfUserPanel.html","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfUserPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfUserPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfUserPanel.html?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -0,0 +1,81 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div wicket:id=\"displayName\"/>\n+    <div wicket:id=\"locale\"/>\n+    <div wicket:id=\"nickName\"/>\n+    <div wicket:id=\"preferredLanguage\"/>\n+    <div wicket:id=\"profileUrl\"/>\n+    <div wicket:id=\"timezone\"/>\n+    <div wicket:id=\"title\"/>\n+    <div wicket:id=\"userType\"/>\n+\n+    <div style=\"margin-top: 15px;\">\n+      <label wicket:id=\"nameLabel\"/>\n+      <div wicket:id=\"nameAccordion\"/>\n+    </div>\n+\n+    <span wicket:id=\"x509Certificates\">\n+      [x509Certificates]\n+    </span>\n+\n+    <div style=\"margin-top: 15px;\">\n+      <label wicket:id=\"addressesLabel\"/>\n+      <div wicket:id=\"addressesAccordion_work\"/>\n+      <div wicket:id=\"addressesAccordion_home\"/>\n+      <div wicket:id=\"addressesAccordion_other\"/>\n+    </div>\n+\n+    <div style=\"margin-top: 15px;\">\n+      <label wicket:id=\"emailsLabel\"/>\n+      <div wicket:id=\"emailsAccordion_work\"/>\n+      <div wicket:id=\"emailsAccordion_home\"/>\n+      <div wicket:id=\"emailsAccordion_other\"/>      \n+    </div>\n+\n+    <div style=\"margin-top: 15px;\">\n+      <label wicket:id=\"phoneNumbersLabel\"/>\n+      <div wicket:id=\"phoneNumbersAccordion_work\"/>\n+      <div wicket:id=\"phoneNumbersAccordion_home\"/>\n+      <div wicket:id=\"phoneNumbersAccordion_other\"/>\n+      <div wicket:id=\"phoneNumbersAccordion_mobile\"/>\n+      <div wicket:id=\"phoneNumbersAccordion_fax\"/>\n+      <div wicket:id=\"phoneNumbersAccordion_pager\"/>\n+    </div>\n+\n+    <div style=\"margin-top: 15px;\">\n+      <label wicket:id=\"imsLabel\"/>\n+      <div wicket:id=\"imsAccordion_aim\"/>\n+      <div wicket:id=\"imsAccordion_gtalk\"/>\n+      <div wicket:id=\"imsAccordion_icq\"/>\n+      <div wicket:id=\"imsAccordion_xmpp\"/>\n+      <div wicket:id=\"imsAccordion_msn\"/>\n+      <div wicket:id=\"imsAccordion_skype\"/>\n+      <div wicket:id=\"imsAccordion_qq\"/>\n+      <div wicket:id=\"imsAccordion_yahoo\"/>\n+    </div>\n+\n+    <div style=\"margin-top: 15px;\">\n+      <label wicket:id=\"photosLabel\"/>\n+      <div wicket:id=\"photosAccordion_photo\"/>\n+      <div wicket:id=\"photosAccordion_thumbnail\"/>\n+    </div>\n+  </wicket:panel>\n+</html>\n\\ No newline at end of file"},{"sha":"1875ebaf6eae49c35a13b10b99d3b53156e9d951","filename":"ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMConf.java","status":"modified","additions":5,"deletions":72,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMConf.java?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -18,93 +18,26 @@\n  */\n package org.apache.syncope.common.lib.scim;\n \n-import com.fasterxml.jackson.annotation.JsonIgnore;\n import java.io.Serializable;\n-import java.util.Date;\n-import org.apache.commons.lang3.StringUtils;\n \n public class SCIMConf implements Serializable {\n \n     private static final long serialVersionUID = 5032136914118958611L;\n \n     public static final String KEY = \"scimv2.conf\";\n \n-    private Date creationDate = new Date();\n-\n-    private Date lastChangeDate = new Date();\n-\n-    private int bulkMaxOperations = 1000;\n-\n-    private int bulkMaxPayloadSize = 1048576;\n-\n-    private int filterMaxResults = 200;\n+    private SCIMGeneralConf generalConf;\n \n     private SCIMUserConf userConf;\n \n     private SCIMEnterpriseUserConf enterpriseUserConf;\n \n-    public Date getCreationDate() {\n-        if (creationDate != null) {\n-            return new Date(creationDate.getTime());\n-        }\n-        return null;\n-    }\n-\n-    public void setCreationDate(final Date creationDate) {\n-        if (creationDate != null) {\n-            this.creationDate = new Date(creationDate.getTime());\n-        } else {\n-            this.creationDate = null;\n-        }\n-    }\n-\n-    public Date getLastChangeDate() {\n-        if (lastChangeDate != null) {\n-            return new Date(lastChangeDate.getTime());\n-        }\n-        return null;\n-    }\n-\n-    public void setLastChangeDate(final Date lastChangeDate) {\n-        if (lastChangeDate != null) {\n-            this.lastChangeDate = new Date(lastChangeDate.getTime());\n-        } else {\n-            this.lastChangeDate = null;\n-        }\n-    }\n-\n-    @JsonIgnore\n-    public String getETagValue() {\n-        Date etagDate = getLastChangeDate() == null\n-                ? getCreationDate() : getLastChangeDate();\n-        return etagDate == null\n-                ? StringUtils.EMPTY\n-                : String.valueOf(etagDate.getTime());\n-\n-    }\n-\n-    public int getBulkMaxOperations() {\n-        return bulkMaxOperations;\n-    }\n-\n-    public void setBulkMaxOperations(final int bulkMaxOperations) {\n-        this.bulkMaxOperations = bulkMaxOperations;\n-    }\n-\n-    public int getBulkMaxPayloadSize() {\n-        return bulkMaxPayloadSize;\n-    }\n-\n-    public void setBulkMaxPayloadSize(final int bulkMaxPayloadSize) {\n-        this.bulkMaxPayloadSize = bulkMaxPayloadSize;\n-    }\n-\n-    public int getFilterMaxResults() {\n-        return filterMaxResults;\n+    public SCIMGeneralConf getGeneralConf() {\n+        return generalConf;\n     }\n \n-    public void setFilterMaxResults(final int filterMaxResults) {\n-        this.filterMaxResults = filterMaxResults;\n+    public void setGeneralConf(final SCIMGeneralConf generalConf) {\n+        this.generalConf = generalConf;\n     }\n \n     public SCIMUserConf getUserConf() {"},{"sha":"cf9bc71e30ddccf235b1688ebe8933da8317bfcf","filename":"ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMGeneralConf.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMGeneralConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMGeneralConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMGeneralConf.java?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.scim;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import java.io.Serializable;\n+import java.util.Date;\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class SCIMGeneralConf implements Serializable {\n+\n+    private static final long serialVersionUID = 3228349133950736647L;\n+\n+    private Date creationDate = new Date();\n+\n+    private Date lastChangeDate = new Date();\n+\n+    private int bulkMaxOperations = 1000;\n+\n+    private int bulkMaxPayloadSize = 1048576;\n+\n+    private int filterMaxResults = 200;\n+\n+    public Date getCreationDate() {\n+        if (creationDate != null) {\n+            return new Date(creationDate.getTime());\n+        }\n+        return null;\n+    }\n+\n+    public void setCreationDate(final Date creationDate) {\n+        if (creationDate != null) {\n+            this.creationDate = new Date(creationDate.getTime());\n+        } else {\n+            this.creationDate = null;\n+        }\n+    }\n+\n+    public Date getLastChangeDate() {\n+        if (lastChangeDate != null) {\n+            return new Date(lastChangeDate.getTime());\n+        }\n+        return null;\n+    }\n+\n+    public void setLastChangeDate(final Date lastChangeDate) {\n+        if (lastChangeDate != null) {\n+            this.lastChangeDate = new Date(lastChangeDate.getTime());\n+        } else {\n+            this.lastChangeDate = null;\n+        }\n+    }\n+\n+    @JsonIgnore\n+    public String getETagValue() {\n+        Date etagDate = getLastChangeDate() == null\n+                ? getCreationDate() : getLastChangeDate();\n+        return etagDate == null\n+                ? StringUtils.EMPTY\n+                : String.valueOf(etagDate.getTime());\n+\n+    }\n+\n+    public int getBulkMaxOperations() {\n+        return bulkMaxOperations;\n+    }\n+\n+    public void setBulkMaxOperations(final int bulkMaxOperations) {\n+        this.bulkMaxOperations = bulkMaxOperations;\n+    }\n+\n+    public int getBulkMaxPayloadSize() {\n+        return bulkMaxPayloadSize;\n+    }\n+\n+    public void setBulkMaxPayloadSize(final int bulkMaxPayloadSize) {\n+        this.bulkMaxPayloadSize = bulkMaxPayloadSize;\n+    }\n+\n+    public int getFilterMaxResults() {\n+        return filterMaxResults;\n+    }\n+\n+    public void setFilterMaxResults(final int filterMaxResults) {\n+        this.filterMaxResults = filterMaxResults;\n+    }\n+\n+}"},{"sha":"efb1b3388958ea4179e33c78463f6e992ab35e70","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java","status":"modified","additions":67,"deletions":68,"changes":135,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -161,6 +161,7 @@ public SCIMUser toSCIMUser(\n         attrs.putAll(EntityTOUtils.buildAttrMap(userTO.getPlainAttrs()));\n         attrs.putAll(EntityTOUtils.buildAttrMap(userTO.getDerAttrs()));\n         attrs.putAll(EntityTOUtils.buildAttrMap(userTO.getVirAttrs()));\n+        attrs.put(\"username\", new AttrTO.Builder().schema(\"username\").value(userTO.getUsername()).build());\n \n         if (conf.getUserConf() != null) {\n             if (output(attributes, excludedAttributes, \"name\") && conf.getUserConf().getName() != null) {\n@@ -454,78 +455,72 @@ public UserTO toUserTO(final SCIMUser user) {\n                 if (conf.getUserConf().getName().getFamilyName() != null\n                         && user.getName().getFamilyName() != null) {\n \n-                    userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                            schema(conf.getUserConf().getName().getFamilyName()).\n-                            value(user.getName().getFamilyName()).build());\n+                    setAttribute(userTO, conf.getUserConf().getName().getFamilyName(),\n+                            user.getName().getFamilyName());\n                 }\n                 if (conf.getUserConf().getName().getFormatted() != null\n                         && user.getName().getFormatted() != null) {\n \n-                    userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                            schema(conf.getUserConf().getName().getFormatted()).\n-                            value(user.getName().getFormatted()).build());\n+                    setAttribute(userTO, conf.getUserConf().getName().getFormatted(),\n+                            user.getName().getFormatted());\n                 }\n                 if (conf.getUserConf().getName().getGivenName() != null\n                         && user.getName().getGivenName() != null) {\n \n-                    userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                            schema(conf.getUserConf().getName().getGivenName()).\n-                            value(user.getName().getGivenName()).build());\n+                    setAttribute(userTO, conf.getUserConf().getName().getGivenName(),\n+                            user.getName().getGivenName());\n                 }\n                 if (conf.getUserConf().getName().getHonorificPrefix() != null\n                         && user.getName().getHonorificPrefix() != null) {\n \n-                    userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                            schema(conf.getUserConf().getName().getHonorificPrefix()).\n-                            value(user.getName().getHonorificPrefix()).build());\n+                    setAttribute(userTO, conf.getUserConf().getName().getHonorificPrefix(),\n+                            user.getName().getHonorificPrefix());\n                 }\n                 if (conf.getUserConf().getName().getHonorificSuffix() != null\n                         && user.getName().getHonorificSuffix() != null) {\n \n-                    userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                            schema(conf.getUserConf().getName().getHonorificSuffix()).\n-                            value(user.getName().getHonorificSuffix()).build());\n+                    setAttribute(userTO, conf.getUserConf().getName().getHonorificSuffix(),\n+                            user.getName().getHonorificSuffix());\n                 }\n                 if (conf.getUserConf().getName().getMiddleName() != null\n                         && user.getName().getMiddleName() != null) {\n \n-                    userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                            schema(conf.getUserConf().getName().getMiddleName()).\n-                            value(user.getName().getMiddleName()).build());\n+                    setAttribute(userTO, conf.getUserConf().getName().getMiddleName(),\n+                            user.getName().getMiddleName());\n                 }\n             }\n \n             if (conf.getUserConf().getDisplayName() != null && user.getDisplayName() != null) {\n-                userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                        schema(conf.getUserConf().getDisplayName()).value(user.getDisplayName()).build());\n+                setAttribute(userTO, conf.getUserConf().getDisplayName(),\n+                        user.getDisplayName());\n             }\n             if (conf.getUserConf().getNickName() != null && user.getNickName() != null) {\n-                userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                        schema(conf.getUserConf().getNickName()).value(user.getNickName()).build());\n+                setAttribute(userTO, conf.getUserConf().getNickName(),\n+                        user.getNickName());\n             }\n             if (conf.getUserConf().getProfileUrl() != null && user.getProfileUrl() != null) {\n-                userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                        schema(conf.getUserConf().getProfileUrl()).value(user.getProfileUrl()).build());\n+                setAttribute(userTO, conf.getUserConf().getProfileUrl(),\n+                        user.getProfileUrl());\n             }\n             if (conf.getUserConf().getTitle() != null && user.getTitle() != null) {\n-                userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                        schema(conf.getUserConf().getTitle()).value(user.getTitle()).build());\n+                setAttribute(userTO, conf.getUserConf().getTitle(),\n+                        user.getTitle());\n             }\n             if (conf.getUserConf().getUserType() != null && user.getUserType() != null) {\n-                userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                        schema(conf.getUserConf().getUserType()).value(user.getUserType()).build());\n+                setAttribute(userTO, conf.getUserConf().getUserType(),\n+                        user.getUserType());\n             }\n             if (conf.getUserConf().getPreferredLanguage() != null && user.getPreferredLanguage() != null) {\n-                userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                        schema(conf.getUserConf().getPreferredLanguage()).value(user.getPreferredLanguage()).build());\n+                setAttribute(userTO, conf.getUserConf().getPreferredLanguage(),\n+                        user.getPreferredLanguage());\n             }\n             if (conf.getUserConf().getLocale() != null && user.getLocale() != null) {\n-                userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                        schema(conf.getUserConf().getLocale()).value(user.getLocale()).build());\n+                setAttribute(userTO, conf.getUserConf().getLocale(),\n+                        user.getLocale());\n             }\n             if (conf.getUserConf().getTimezone() != null && user.getTimezone() != null) {\n-                userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                        schema(conf.getUserConf().getTimezone()).value(user.getTimezone()).build());\n+                setAttribute(userTO, conf.getUserConf().getTimezone(),\n+                        user.getTimezone());\n             }\n \n             fill(userTO.getPlainAttrs(), conf.getUserConf().getEmails(), user.getEmails());\n@@ -538,38 +533,37 @@ public UserTO toUserTO(final SCIMUser user) {\n                         filter(object -> address.getType().equals(object.getType().name())).findFirst();\n                 if (addressConf.isPresent()) {\n                     if (addressConf.get().getFormatted() != null && address.getFormatted() != null) {\n-                        userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                                schema(addressConf.get().getFormatted()).value(address.getFormatted()).build());\n+                        setAttribute(userTO, addressConf.get().getFormatted(),\n+                                address.getFormatted());\n                     }\n                     if (addressConf.get().getStreetAddress() != null && address.getStreetAddress() != null) {\n-                        userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                                schema(addressConf.get().getStreetAddress()).value(address.getStreetAddress()).build());\n+                        setAttribute(userTO, addressConf.get().getStreetAddress(),\n+                                address.getStreetAddress());\n                     }\n                     if (addressConf.get().getLocality() != null && address.getLocality() != null) {\n-                        userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                                schema(addressConf.get().getLocality()).value(address.getLocality()).build());\n+                        setAttribute(userTO, addressConf.get().getLocality(),\n+                                address.getLocality());\n                     }\n-                    if (addressConf.get().getRegion() != null && address.getFormatted() != null) {\n-                        userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                                schema(addressConf.get().getFormatted()).value(address.getFormatted()).build());\n+                    if (addressConf.get().getRegion() != null && address.getRegion() != null) {\n+                        setAttribute(userTO, addressConf.get().getRegion(),\n+                                address.getRegion());\n                     }\n                     if (addressConf.get().getPostalCode() != null && address.getPostalCode() != null) {\n-                        userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                                schema(addressConf.get().getPostalCode()).value(address.getPostalCode()).build());\n+                        setAttribute(userTO, addressConf.get().getPostalCode(),\n+                                address.getPostalCode());\n                     }\n                     if (addressConf.get().getCountry() != null && address.getCountry() != null) {\n-                        userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                                schema(addressConf.get().getCountry()).value(address.getCountry()).build());\n+                        setAttribute(userTO, addressConf.get().getCountry(),\n+                                address.getCountry());\n                     }\n                 }\n             });\n \n             for (int i = 0; i < user.getX509Certificates().size(); i++) {\n                 Value certificate = user.getX509Certificates().get(i);\n                 if (conf.getUserConf().getX509Certificates().size() > i) {\n-                    userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                            schema(conf.getUserConf().getX509Certificates().get(i)).\n-                            value(certificate.getValue()).build());\n+                    setAttribute(userTO, conf.getUserConf().getX509Certificates().get(i),\n+                            certificate.getValue());\n                 }\n             }\n         }\n@@ -578,46 +572,40 @@ public UserTO toUserTO(final SCIMUser user) {\n             if (conf.getEnterpriseUserConf().getEmployeeNumber() != null\n                     && user.getEnterpriseInfo().getEmployeeNumber() != null) {\n \n-                userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                        schema(conf.getEnterpriseUserConf().getEmployeeNumber()).\n-                        value(user.getEnterpriseInfo().getEmployeeNumber()).build());\n+                setAttribute(userTO, conf.getEnterpriseUserConf().getEmployeeNumber(),\n+                        user.getEnterpriseInfo().getEmployeeNumber());\n             }\n             if (conf.getEnterpriseUserConf().getCostCenter() != null\n                     && user.getEnterpriseInfo().getCostCenter() != null) {\n \n-                userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                        schema(conf.getEnterpriseUserConf().getCostCenter()).\n-                        value(user.getEnterpriseInfo().getCostCenter()).build());\n+                setAttribute(userTO, conf.getEnterpriseUserConf().getCostCenter(),\n+                        user.getEnterpriseInfo().getCostCenter());\n             }\n             if (conf.getEnterpriseUserConf().getOrganization() != null\n                     && user.getEnterpriseInfo().getOrganization() != null) {\n \n-                userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                        schema(conf.getEnterpriseUserConf().getOrganization()).\n-                        value(user.getEnterpriseInfo().getOrganization()).build());\n+                setAttribute(userTO, conf.getEnterpriseUserConf().getOrganization(),\n+                        user.getEnterpriseInfo().getOrganization());\n             }\n             if (conf.getEnterpriseUserConf().getDivision() != null\n                     && user.getEnterpriseInfo().getDivision() != null) {\n \n-                userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                        schema(conf.getEnterpriseUserConf().getDivision()).\n-                        value(user.getEnterpriseInfo().getDivision()).build());\n+                setAttribute(userTO, conf.getEnterpriseUserConf().getDivision(),\n+                        user.getEnterpriseInfo().getDivision());\n             }\n             if (conf.getEnterpriseUserConf().getDepartment() != null\n                     && user.getEnterpriseInfo().getDepartment() != null) {\n \n-                userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                        schema(conf.getEnterpriseUserConf().getDepartment()).\n-                        value(user.getEnterpriseInfo().getDepartment()).build());\n+                setAttribute(userTO, conf.getEnterpriseUserConf().getDepartment(),\n+                        user.getEnterpriseInfo().getDepartment());\n             }\n             if (conf.getEnterpriseUserConf().getManager() != null\n                     && conf.getEnterpriseUserConf().getManager().getKey() != null\n                     && user.getEnterpriseInfo().getManager() != null\n                     && user.getEnterpriseInfo().getManager().getValue() != null) {\n \n-                userTO.getPlainAttrs().add(new AttrTO.Builder().\n-                        schema(conf.getEnterpriseUserConf().getManager().getKey()).\n-                        value(user.getEnterpriseInfo().getManager().getValue()).build());\n+                setAttribute(userTO, conf.getEnterpriseUserConf().getManager().getKey(),\n+                        user.getEnterpriseInfo().getManager().getValue());\n             }\n         }\n \n@@ -632,6 +620,17 @@ public UserTO toUserTO(final SCIMUser user) {\n         return userTO;\n     }\n \n+    private void setAttribute(final UserTO userTO, final String schema, final String value) {\n+        switch (schema) {\n+            case \"username\":\n+                userTO.setUsername(value);\n+                break;\n+\n+            default:\n+                userTO.getPlainAttrs().add(new AttrTO.Builder().schema(schema).value(value).build());\n+        }\n+    }\n+\n     public SCIMGroup toSCIMGroup(\n             final GroupTO groupTO,\n             final String location,"},{"sha":"f09bdebd8ea0d1274ba057b4086a75f98cdff40a","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMLogic.java?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -98,13 +98,15 @@ public ServiceProviderConfig serviceProviderConfig(final UriBuilder uriBuilder)\n                 SERVICE_PROVIDER_CONFIG = new ServiceProviderConfig(\n                         new Meta(\n                                 Resource.ServiceProviderConfig,\n-                                conf.getCreationDate(),\n-                                conf.getLastChangeDate(),\n-                                conf.getETagValue(),\n+                                conf.getGeneralConf().getCreationDate(),\n+                                conf.getGeneralConf().getLastChangeDate(),\n+                                conf.getGeneralConf().getETagValue(),\n                                 uriBuilder.build().toASCIIString()),\n                         new ConfigurationOption(false),\n-                        new BulkConfigurationOption(false, conf.getBulkMaxOperations(), conf.getBulkMaxPayloadSize()),\n-                        new FilterConfigurationOption(true, conf.getFilterMaxResults()),\n+                        new BulkConfigurationOption(false,\n+                                conf.getGeneralConf().getBulkMaxOperations(),\n+                                conf.getGeneralConf().getBulkMaxPayloadSize()),\n+                        new FilterConfigurationOption(true, conf.getGeneralConf().getFilterMaxResults()),\n                         new ConfigurationOption(true),\n                         new ConfigurationOption(true),\n                         new ConfigurationOption(true));"},{"sha":"2804d78a782e9edbc9071f551af4ec71c926afde","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SCIMConfManager.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMConfManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMConfManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMConfManager.java?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -21,6 +21,7 @@\n import java.util.Date;\n import javax.ws.rs.core.MediaType;\n import org.apache.syncope.common.lib.scim.SCIMConf;\n+import org.apache.syncope.common.lib.scim.SCIMGeneralConf;\n import org.apache.syncope.common.lib.scim.types.SCIMEntitlement;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n@@ -84,7 +85,8 @@ public void set(final SCIMConf conf) {\n             scimConf.setMimeType(MediaType.APPLICATION_JSON);\n             schemaLogic.create(SchemaType.PLAIN, scimConf);\n         }\n-        conf.setLastChangeDate(new Date());\n+        conf.setGeneralConf(new SCIMGeneralConf());\n+        conf.getGeneralConf().setLastChangeDate(new Date());\n \n         configurationLogic.set(new AttrTO.Builder().\n                 schema(SCIMConf.KEY).value(Base64.encode(POJOHelper.serialize(conf).getBytes())).build());"},{"sha":"6bec6e26dbe68c4111e31c755a09c039d83fb7dd","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dad0fa5780d446315d9acebdcdd724a1bc5baeb6/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java?ref=dad0fa5780d446315d9acebdcdd724a1bc5baeb6","patch":"@@ -189,7 +189,7 @@ protected ListResponse<R> doSearch(\n             throw new UnsupportedOperationException();\n         }\n \n-        if (request.getCount() > confManager().get().getFilterMaxResults()) {\n+        if (request.getCount() > confManager().get().getGeneralConf().getFilterMaxResults()) {\n             throw new BadRequestException(ErrorType.tooMany, \"Too many results requested\");\n         }\n \n@@ -223,7 +223,7 @@ protected ListResponse<R> doSearch(\n                 SyncopeConstants.ROOT_REALM,\n                 false);\n \n-        if (result.getLeft() > confManager().get().getFilterMaxResults()) {\n+        if (result.getLeft() > confManager().get().getGeneralConf().getFilterMaxResults()) {\n             throw new BadRequestException(ErrorType.tooMany, \"Too many results found\");\n         }\n "}]}