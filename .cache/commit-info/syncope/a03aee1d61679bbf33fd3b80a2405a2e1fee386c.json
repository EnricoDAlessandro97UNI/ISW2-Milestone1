{"sha":"a03aee1d61679bbf33fd3b80a2405a2e1fee386c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmEwM2FlZTFkNjE2NzliYmYzM2ZkM2I4MGEyNDA1YTJlMWZlZTM4NmM=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-11-27T13:46:15Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-11-27T13:46:15Z"},"message":"Fixes SYNCOPE-442 even onto the trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1546033 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8032772e8ff8133c45cc5c26abe27863c11227ab","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8032772e8ff8133c45cc5c26abe27863c11227ab"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a03aee1d61679bbf33fd3b80a2405a2e1fee386c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a03aee1d61679bbf33fd3b80a2405a2e1fee386c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a03aee1d61679bbf33fd3b80a2405a2e1fee386c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a03aee1d61679bbf33fd3b80a2405a2e1fee386c/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"ddf0b2590d3ba291fde3f5ee86d12dad55dbd19a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ddf0b2590d3ba291fde3f5ee86d12dad55dbd19a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ddf0b2590d3ba291fde3f5ee86d12dad55dbd19a"},{"sha":"8c28a231c828f1d78279582f1dc350ed35f13eca","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8c28a231c828f1d78279582f1dc350ed35f13eca","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8c28a231c828f1d78279582f1dc350ed35f13eca"}],"stats":{"total":1021,"additions":610,"deletions":411},"files":[{"sha":"70fdbb9eaecfa8aaef8490d463f8f52032c2c7cd","filename":"core/src/main/java/org/apache/syncope/core/connid/ConnObjectUtil.java","status":"modified","additions":28,"deletions":11,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03aee1d61679bbf33fd3b80a2405a2e1fee386c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03aee1d61679bbf33fd3b80a2405a2e1fee386c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java?ref=a03aee1d61679bbf33fd3b80a2405a2e1fee386c","patch":"@@ -63,6 +63,7 @@\n import org.apache.syncope.core.util.MappingUtil;\n import org.apache.syncope.core.util.SecureRandomUtil;\n import org.apache.syncope.core.util.VirAttrCache;\n+import org.apache.syncope.core.util.VirAttrCacheValue;\n import org.identityconnectors.common.security.GuardedByteArray;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -516,15 +517,22 @@ private void retrieveVirAttrValue(\n             final ConnectorFactory connFactory) {\n \n         final String schemaName = virAttr.getSchema().getName();\n-        final List<String> values = virAttrCache.get(attrUtil.getType(), owner.getId(), schemaName);\n+        final VirAttrCacheValue virAttrCacheValue = virAttrCache.get(attrUtil.getType(), owner.getId(), schemaName);\n \n         LOG.debug(\"Retrieve values for virtual attribute {} ({})\", schemaName, type);\n \n-        if (values == null) {\n-            // non cached ...\n+        if (virAttrCache.isValidEntry(virAttrCacheValue)) {\n+            // cached ...\n+            LOG.debug(\"Values found in cache {}\", virAttrCacheValue);\n+            virAttr.setValues(new ArrayList<String>(virAttrCacheValue.getValues()));\n+        } else {\n+            // not cached ...\n             LOG.debug(\"Need one or more remote connections\");\n+\n+            final VirAttrCacheValue toBeCached = new VirAttrCacheValue();\n+\n             for (ExternalResource resource : getTargetResource(virAttr, type, attrUtil)) {\n-                LOG.debug(\"Seach values into {}\", resource.getName());\n+                LOG.debug(\"Search values into {}\", resource.getName());\n                 try {\n                     final List<AbstractMappingItem> mappings = attrUtil.getMappingItems(resource, MappingPurpose.BOTH);\n \n@@ -569,19 +577,28 @@ private void retrieveVirAttrValue(\n                                 }\n                             }\n                         }\n-                    }\n \n-                    LOG.debug(\"Retrieved values {}\", virAttr.getValues());\n+                        toBeCached.setResourceValues(resource.getName(), new HashSet<String>(virAttr.getValues()));\n+\n+                        LOG.debug(\"Retrieved values {}\", virAttr.getValues());\n+                    }\n                 } catch (Exception e) {\n                     LOG.error(\"Error reading connector object from {}\", resource.getName(), e);\n+\n+                    if (virAttrCacheValue != null) {\n+                        toBeCached.forceExpiring();\n+                        LOG.debug(\"Search for a cached value (even expired!) ...\");\n+                        final Set<String> cachedValues = virAttrCacheValue.getValues(resource.getName());\n+                        if (cachedValues != null) {\n+                            LOG.debug(\"Use cached value {}\", cachedValues);\n+                            virAttr.getValues().addAll(cachedValues);\n+                            toBeCached.setResourceValues(resource.getName(), new HashSet<String>(cachedValues));\n+                        }\n+                    }\n                 }\n             }\n \n-            virAttrCache.put(attrUtil.getType(), owner.getId(), schemaName, virAttr.getValues());\n-        } else {\n-            // cached ...\n-            LOG.debug(\"Values found in cache {}\", values);\n-            virAttr.setValues(values);\n+            virAttrCache.put(attrUtil.getType(), owner.getId(), schemaName, toBeCached);\n         }\n     }\n "},{"sha":"66a0d15519f9f18c5f0c752dbef0babee98808b3","filename":"core/src/main/java/org/apache/syncope/core/util/VirAttrCache.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03aee1d61679bbf33fd3b80a2405a2e1fee386c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FVirAttrCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03aee1d61679bbf33fd3b80a2405a2e1fee386c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FVirAttrCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FVirAttrCache.java?ref=a03aee1d61679bbf33fd3b80a2405a2e1fee386c","patch":"@@ -21,7 +21,6 @@\n import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import org.apache.syncope.common.types.AttributableType;\n@@ -59,14 +58,18 @@ public VirAttrCache(final int ttl, final int maxCacheSize) {\n      * @param schemaName virtual attribute name\n      * @param values virtual attribute values\n      */\n-    public void put(final AttributableType type, final Long id, final String schemaName, final List<String> values) {\n+    public void put(\n+            final AttributableType type,\n+            final Long id,\n+            final String schemaName,\n+            final VirAttrCacheValue value) {\n         synchronized (cache) {\n             // this operations (retrieve cache space and put entry on) have to be thread safe.\n             if (this.cache.size() >= this.maxCacheSize) {\n                 free();\n             }\n \n-            cache.put(new VirAttrCacheKey(type, id, schemaName), new VirAttrCacheValue(values));\n+            cache.put(new VirAttrCacheKey(type, id, schemaName), value);\n         }\n     }\n \n@@ -76,11 +79,10 @@ public void put(final AttributableType type, final Long id, final String schemaN\n      * @param type user or role\n      * @param id user or role id\n      * @param schemaName virtual attribute schema name.\n-     * @return cached values or null in case of virtual attribute not found.\n+     * @return cached values or null if virtual attribute is not cached.\n      */\n-    public List<String> get(final AttributableType type, final Long id, final String schemaName) {\n-        final VirAttrCacheValue value = cache.get(new VirAttrCacheKey(type, id, schemaName));\n-        return isValidEntry(value) ? value.getValues() : null;\n+    public VirAttrCacheValue get(final AttributableType type, final Long id, final String schemaName) {\n+        return cache.get(new VirAttrCacheKey(type, id, schemaName));\n     }\n \n     /**\n@@ -134,7 +136,7 @@ private void free() {\n      * @param value cache entry value.\n      * @return TRUE if the value is valid; FALSE otherwise.\n      */\n-    private boolean isValidEntry(final VirAttrCacheValue value) {\n+    public boolean isValidEntry(final VirAttrCacheValue value) {\n         final Date expiringDate = new Date(value == null ? 0 : value.getCreationDate().getTime() + ttl * 1000);\n         return expiringDate.after(new Date());\n     }"},{"sha":"bca5acf610620cd187390150544962eee1407dbb","filename":"core/src/main/java/org/apache/syncope/core/util/VirAttrCacheValue.java","status":"modified","additions":23,"deletions":6,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03aee1d61679bbf33fd3b80a2405a2e1fee386c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FVirAttrCacheValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03aee1d61679bbf33fd3b80a2405a2e1fee386c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FVirAttrCacheValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FVirAttrCacheValue.java?ref=a03aee1d61679bbf33fd3b80a2405a2e1fee386c","patch":"@@ -19,7 +19,10 @@\n package org.apache.syncope.core.util;\n \n import java.util.Date;\n-import java.util.List;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n \n /**\n  * Cache entry value.\n@@ -29,7 +32,7 @@ public class VirAttrCacheValue {\n     /**\n      * Virtual attribute values.\n      */\n-    private final List<String> values;\n+    private final Map<String, Set<String>> values;\n \n     /**\n      * Entry creation date.\n@@ -41,10 +44,14 @@ public class VirAttrCacheValue {\n      */\n     private Date lastAccessDate;\n \n-    public VirAttrCacheValue(final List<String> values) {\n-        this.values = values;\n+    public VirAttrCacheValue() {\n         this.creationDate = new Date();\n         this.lastAccessDate = new Date();\n+        values = new HashMap<String, Set<String>>();\n+    }\n+\n+    public void setResourceValues(final String resourceName, final Set<String> values) {\n+        this.values.put(resourceName, values);\n     }\n \n     public Date getCreationDate() {\n@@ -55,8 +62,18 @@ public void forceExpiring() {\n         creationDate = new Date(0);\n     }\n \n-    public List<String> getValues() {\n-        return values;\n+    public Set<String> getValues(final String resourceName) {\n+        return values.get(resourceName);\n+    }\n+\n+    public Set<String> getValues() {\n+        final Set<String> res = new HashSet<String>();\n+\n+        for (Set<String> value : values.values()) {\n+            res.addAll(value);\n+        }\n+\n+        return res;\n     }\n \n     public Date getLastAccessDate() {"},{"sha":"a2219b00b3ba9bad6971f90dfbda2362491cba3a","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":43,"deletions":2,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03aee1d61679bbf33fd3b80a2405a2e1fee386c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03aee1d61679bbf33fd3b80a2405a2e1fee386c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=a03aee1d61679bbf33fd3b80a2405a2e1fee386c","patch":"@@ -49,9 +49,10 @@\n import org.apache.syncope.common.services.UserService;\n import org.apache.syncope.common.services.UserWorkflowService;\n import org.apache.syncope.common.services.WorkflowService;\n+import org.apache.syncope.common.to.AbstractPolicyTO;\n import org.apache.syncope.common.to.AbstractSchemaTO;\n import org.apache.syncope.common.to.AttributeTO;\n-import org.apache.syncope.common.to.AbstractPolicyTO;\n+import org.apache.syncope.common.to.ConnObjectTO;\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n@@ -68,7 +69,7 @@\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = { \"classpath:testJDBCContext.xml\" })\n+@ContextConfiguration(locations = {\"classpath:testJDBCContext.xml\"})\n public abstract class AbstractTest {\n \n     /**\n@@ -86,12 +87,48 @@ public abstract class AbstractTest {\n \n     protected static final SyncopeClientFactoryBean clientFactory = new SyncopeClientFactoryBean().setAddress(ADDRESS);\n \n+    protected static final String RESOURCE_NAME_WS1 = \"ws-target-resource-1\";\n+\n+    protected static final String RESOURCE_NAME_WS2 = \"ws-target-resource-2\";\n+\n     protected static final String RESOURCE_NAME_LDAP = \"resource-ldap\";\n \n     protected static final String RESOURCE_NAME_TESTDB = \"resource-testdb\";\n \n+    protected static final String RESOURCE_NAME_TESTDB2 = \"resource-testdb2\";\n+\n     protected static final String RESOURCE_NAME_CSV = \"resource-csv\";\n \n+    protected static final String RESOURCE_NAME_DBSYNC = \"resource-db-sync\";\n+\n+    protected static final String RESOURCE_NAME_DBVIRATTR = \"resource-db-virattr\";\n+\n+    protected static final String RESOURCE_NAME_NOPROPAGATION = \"ws-target-resource-nopropagation\";\n+\n+    protected static final String RESOURCE_NAME_NOPROPAGATION2 = \"ws-target-resource-nopropagation2\";\n+\n+    protected static final String RESOURCE_NAME_NOPROPAGATION3 = \"ws-target-resource-nopropagation3\";\n+\n+    protected static final String RESOURCE_NAME_NOPROPAGATION4 = \"ws-target-resource-nopropagation4\";\n+\n+    protected static final String RESOURCE_NAME_RESETSYNCTOKEN = \"ws-target-resource-update-resetsynctoken\";\n+\n+    protected static final String RESOURCE_NAME_TIMEOUT = \"ws-target-resource-timeout\";\n+\n+    protected static final String RESOURCE_NAME_MAPPINGS1 = \"ws-target-resource-list-mappings-1\";\n+\n+    protected static final String RESOURCE_NAME_MAPPINGS2 = \"ws-target-resource-list-mappings-2\";\n+\n+    protected static final String RESOURCE_NAME_CREATE = \"ws-target-resource-create\";\n+\n+    protected static final String RESOURCE_NAME_CREATE_SINGLE = \"ws-target-resource-create-single\";\n+\n+    protected static final String RESOURCE_NAME_CREATE_WRONG = \"ws-target-resource-create-wrong\";\n+\n+    protected static final String RESOURCE_NAME_DELETE = \"ws-target-resource-delete\";\n+\n+    protected static final String RESOURCE_NAME_UPDATE = \"ws-target-resource-update\";\n+\n     protected static String ANONYMOUS_UNAME;\n \n     protected static String ANONYMOUS_KEY;\n@@ -178,6 +215,10 @@ public static void restSetup() {\n         schemaService = adminClient.getService(SchemaService.class);\n     }\n \n+//    protected ConnObjectTO readConnectorObject(final String resourceName, final Long userId, AttributableType type) {\n+//        return resourceService.getConnectorObject(resourceName, type, userId);\n+//    }\n+\n     protected static String getUUIDString() {\n         return UUID.randomUUID().toString().substring(0, 8);\n     }"},{"sha":"58927f0075bf87ed5979b8a398ba7e8551547416","filename":"core/src/test/java/org/apache/syncope/core/rest/LoggerTestITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03aee1d61679bbf33fd3b80a2405a2e1fee386c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03aee1d61679bbf33fd3b80a2405a2e1fee386c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java?ref=a03aee1d61679bbf33fd3b80a2405a2e1fee386c","patch":"@@ -169,7 +169,7 @@ public void listAuditEvents() {\n         found = false;\n         for (EventCategoryTO eventCategoryTO : events) {\n             if (AttributableType.USER.name().toLowerCase().equals(eventCategoryTO.getCategory())) {\n-                if (\"resource-ldap\".equals(eventCategoryTO.getSubcategory())\n+                if (RESOURCE_NAME_LDAP.equals(eventCategoryTO.getSubcategory())\n                         && EventCategoryType.SYNCHRONIZATION == eventCategoryTO.getType()) {\n                     assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.CREATE.name().toLowerCase()));\n                     assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.UPDATE.name().toLowerCase()));\n@@ -183,7 +183,7 @@ public void listAuditEvents() {\n         found = false;\n         for (EventCategoryTO eventCategoryTO : events) {\n             if (AttributableType.USER.name().toLowerCase().equals(eventCategoryTO.getCategory())) {\n-                if (\"resource-csv\".equals(eventCategoryTO.getSubcategory())\n+                if (RESOURCE_NAME_CSV.equals(eventCategoryTO.getSubcategory())\n                         && EventCategoryType.PROPAGATION == eventCategoryTO.getType()) {\n                     assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.CREATE.name().toLowerCase()));\n                     assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.UPDATE.name().toLowerCase()));"},{"sha":"41c94dd169e2a6dbd926032b692b129d8b406a46","filename":"core/src/test/java/org/apache/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03aee1d61679bbf33fd3b80a2405a2e1fee386c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03aee1d61679bbf33fd3b80a2405a2e1fee386c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=a03aee1d61679bbf33fd3b80a2405a2e1fee386c","patch":"@@ -97,7 +97,7 @@ public void getPropagationActionsClasses() {\n \n     @Test\n     public void create() {\n-        String resourceName = \"ws-target-resource-create\";\n+        String resourceName = RESOURCE_NAME_CREATE;\n         ResourceTO resourceTO = buildResourceTO(resourceName);\n \n         Response response = resourceService.create(resourceTO);\n@@ -166,7 +166,7 @@ public void createOverridingProps() {\n \n     @Test\n     public void createWithSingleMappingItem() {\n-        String resourceName = \"ws-target-resource-create-single\";\n+        String resourceName = RESOURCE_NAME_CREATE_SINGLE;\n         ResourceTO resourceTO = new ResourceTO();\n         resourceTO.setName(resourceName);\n         resourceTO.setConnectorId(102L);\n@@ -205,7 +205,7 @@ public void createWithSingleMappingItem() {\n \n     @Test\n     public void createWithInvalidMapping() {\n-        String resourceName = \"ws-target-resource-create-wrong\";\n+        String resourceName = RESOURCE_NAME_CREATE_WRONG;\n         ResourceTO resourceTO = new ResourceTO();\n         resourceTO.setName(resourceName);\n         resourceTO.setConnectorId(102L);\n@@ -236,7 +236,7 @@ public void createWithInvalidMapping() {\n \n     @Test(expected = SyncopeClientException.class)\n     public void createWithoutExtAttr() {\n-        String resourceName = \"ws-target-resource-create-wrong\";\n+        String resourceName = RESOURCE_NAME_CREATE_WRONG;\n         ResourceTO resourceTO = new ResourceTO();\n         resourceTO.setName(resourceName);\n         resourceTO.setConnectorId(102L);\n@@ -304,7 +304,7 @@ public void updateWithException() {\n \n     @Test\n     public void update() {\n-        String resourceName = \"ws-target-resource-update\";\n+        String resourceName = RESOURCE_NAME_UPDATE;\n         ResourceTO resourceTO = new ResourceTO();\n         resourceTO.setName(resourceName);\n         resourceTO.setConnectorId(101L);\n@@ -361,7 +361,7 @@ public void deleteWithException() {\n     @Test\n     public void updateResetSyncToken() {\n         // create resource with sync token\n-        String resourceName = \"ws-target-resource-update-resetsynctoken\" + getUUIDString();\n+        String resourceName = RESOURCE_NAME_RESETSYNCTOKEN + getUUIDString();\n         ResourceTO pre = buildResourceTO(resourceName);\n         pre.setUsyncToken(\"test\");\n         resourceService.create(pre);\n@@ -414,13 +414,13 @@ public void listByType() {\n \n     @Test\n     public void read() {\n-        ResourceTO actual = resourceService.read(\"resource-testdb\");\n+        ResourceTO actual = resourceService.read(RESOURCE_NAME_TESTDB);\n         assertNotNull(actual);\n     }\n \n     @Test\n     public void issueSYNCOPE323() {\n-        ResourceTO actual = resourceService.read(\"resource-testdb\");\n+        ResourceTO actual = resourceService.read(RESOURCE_NAME_TESTDB);\n         assertNotNull(actual);\n \n         try {"},{"sha":"a60460b9f7cfdd3220f4bdd47770b27dd91245b7","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":11,"deletions":14,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03aee1d61679bbf33fd3b80a2405a2e1fee386c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03aee1d61679bbf33fd3b80a2405a2e1fee386c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=a03aee1d61679bbf33fd3b80a2405a2e1fee386c","patch":"@@ -71,14 +71,10 @@ private RoleTO buildRoleTO(final String name) {\n         roleTO.getRAttrTemplates().add(\"icon\");\n         roleTO.getAttrs().add(attributeTO(\"icon\", \"anIcon\"));\n \n-        roleTO.getResources().add(\"resource-ldap\");\n+        roleTO.getResources().add(RESOURCE_NAME_LDAP);\n         return roleTO;\n     }\n \n-    private ConnObjectTO readConnectorObject(final String resourceName, final Long roleId) {\n-        return resourceService.getConnectorObject(resourceName, AttributableType.ROLE, roleId);\n-    }\n-\n     @Test\n     public void createWithException() {\n         RoleTO newRoleTO = new RoleTO();\n@@ -113,9 +109,10 @@ public void create() {\n         assertNotNull(roleTO.getPasswordPolicy());\n         assertEquals(4L, (long) roleTO.getPasswordPolicy());\n \n-        assertTrue(roleTO.getResources().contains(\"resource-ldap\"));\n+        assertTrue(roleTO.getResources().contains(RESOURCE_NAME_LDAP));\n \n-        ConnObjectTO connObjectTO = readConnectorObject(\"resource-ldap\", roleTO.getId());\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_LDAP, AttributableType.ROLE, roleTO.getId());\n         assertNotNull(connObjectTO);\n         assertNotNull(connObjectTO.getAttrMap().get(\"owner\"));\n     }\n@@ -148,7 +145,7 @@ public void delete() {\n         roleTO.setName(\"toBeDeleted\" + getUUIDString());\n         roleTO.setParent(8L);\n \n-        roleTO.getResources().add(\"resource-ldap\");\n+        roleTO.getResources().add(RESOURCE_NAME_LDAP);\n \n         roleTO = createRole(roleTO);\n         assertNotNull(roleTO);\n@@ -395,7 +392,7 @@ public void unlink() {\n         RoleTO actual = createRole(buildRoleTO(\"unlink\"));\n         assertNotNull(actual);\n \n-        assertNotNull(readConnectorObject(\"resource-ldap\", actual.getId()));\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_LDAP, AttributableType.ROLE, actual.getId()));\n \n         actual = roleService.associate(actual.getId(),\n                 ResourceAssociationActionType.UNLINK,\n@@ -409,15 +406,15 @@ public void unlink() {\n \n         assertTrue(actual.getResources().isEmpty());\n \n-        assertNotNull(readConnectorObject(\"resource-ldap\", actual.getId()));\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_LDAP, AttributableType.ROLE, actual.getId()));\n     }\n \n     @Test\n     public void unassign() {\n         RoleTO actual = createRole(buildRoleTO(\"unassign\"));\n         assertNotNull(actual);\n \n-        assertNotNull(readConnectorObject(\"resource-ldap\", actual.getId()));\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_LDAP, AttributableType.ROLE, actual.getId()));\n \n         actual = roleService.associate(actual.getId(),\n                 ResourceAssociationActionType.UNASSIGN,\n@@ -431,7 +428,7 @@ public void unassign() {\n         assertTrue(actual.getResources().isEmpty());\n \n         try {\n-            readConnectorObject(\"resource-ldap\", actual.getId());\n+            resourceService.getConnectorObject(RESOURCE_NAME_LDAP, AttributableType.ROLE, actual.getId());\n             fail();\n         } catch (Exception e) {\n             assertNotNull(e);\n@@ -443,7 +440,7 @@ public void deprovision() {\n         RoleTO actual = createRole(buildRoleTO(\"deprovision\"));\n         assertNotNull(actual);\n \n-        assertNotNull(readConnectorObject(\"resource-ldap\", actual.getId()));\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_LDAP, AttributableType.ROLE, actual.getId()));\n \n         actual = roleService.associate(actual.getId(),\n                 ResourceAssociationActionType.DEPROVISION,\n@@ -457,7 +454,7 @@ public void deprovision() {\n         assertFalse(actual.getResources().isEmpty());\n \n         try {\n-            readConnectorObject(\"resource-ldap\", actual.getId());\n+            resourceService.getConnectorObject(RESOURCE_NAME_LDAP, AttributableType.ROLE, actual.getId());\n             fail();\n         } catch (Exception e) {\n             assertNotNull(e);"},{"sha":"2fe65a65f2a2681ea89823399d77c06367ba8c38","filename":"core/src/test/java/org/apache/syncope/core/rest/SearchTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03aee1d61679bbf33fd3b80a2405a2e1fee386c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03aee1d61679bbf33fd3b80a2405a2e1fee386c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java?ref=a03aee1d61679bbf33fd3b80a2405a2e1fee386c","patch":"@@ -135,7 +135,7 @@ public void searchUserByResourceName() throws InvalidSearchConditionException {\n         ws2.setResourceName(\"ws-target-resource2\");\n \n         ResourceCond ws1 = new ResourceCond();\n-        ws1.setResourceName(\"ws-target-resource-list-mappings-2\");\n+        ws1.setResourceName(RESOURCE_NAME_MAPPINGS2);\n \n         NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getNotLeafCond(ws2), NodeCond.getLeafCond(ws1));\n "},{"sha":"593510cae88dfa6df3d941c46cdc22bbe7ceb02d","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":21,"deletions":20,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03aee1d61679bbf33fd3b80a2405a2e1fee386c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03aee1d61679bbf33fd3b80a2405a2e1fee386c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=a03aee1d61679bbf33fd3b80a2405a2e1fee386c","patch":"@@ -107,17 +107,18 @@ public void getSyncActionsClasses() {\n     public void create() {\n         SyncTaskTO task = new SyncTaskTO();\n         task.setName(\"Test create Sync\");\n-        task.setResource(\"ws-target-resource-2\");\n+        task.setResource(RESOURCE_NAME_WS2);\n \n         UserTO userTemplate = new UserTO();\n-        userTemplate.getResources().add(\"ws-target-resource-2\");\n+        userTemplate.getResources().add(RESOURCE_NAME_WS2);\n+\n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(8L);\n         userTemplate.getMemberships().add(membershipTO);\n         task.setUserTemplate(userTemplate);\n \n         RoleTO roleTemplate = new RoleTO();\n-        roleTemplate.getResources().add(\"resource-ldap\");\n+        roleTemplate.getResources().add(RESOURCE_NAME_LDAP);\n         task.setRoleTemplate(roleTemplate);\n \n         Response response = taskService.create(task);\n@@ -275,7 +276,7 @@ public void sync() {\n             template.getAttrs().add(attributeTO(\"type\",\n                     \"email == 'test8@syncope.apache.org'? 'TYPE_8': 'TYPE_OTHER'\"));\n             template.getDerAttrs().add(attributeTO(\"cn\", null));\n-            template.getResources().add(\"resource-testdb\");\n+            template.getResources().add(RESOURCE_NAME_TESTDB);\n \n             MembershipTO membershipTO = new MembershipTO();\n             membershipTO.setRoleId(8L);\n@@ -307,8 +308,8 @@ public void sync() {\n             assertNotNull(userTO);\n             assertEquals(\"TYPE_OTHER\", userTO.getAttrMap().get(\"type\").getValues().get(0));\n             assertEquals(2, userTO.getResources().size());\n-            assertTrue(userTO.getResources().contains(\"resource-testdb\"));\n-            assertTrue(userTO.getResources().contains(\"ws-target-resource-2\"));\n+            assertTrue(userTO.getResources().contains(RESOURCE_NAME_TESTDB));\n+            assertTrue(userTO.getResources().contains(RESOURCE_NAME_WS2));\n             assertEquals(1, userTO.getMemberships().size());\n             assertTrue(userTO.getMemberships().get(0).getAttrMap().containsKey(\"subscriptionDate\"));\n \n@@ -394,7 +395,7 @@ public void reconcileFromLDAP()\n \n         //  add user template\n         final UserTO userTemplate = task.getUserTemplate();\n-        userTemplate.getResources().add(\"resource-ldap\");\n+        userTemplate.getResources().add(RESOURCE_NAME_LDAP);\n         userTemplate.getVirAttrs().add(attributeTO(\"virtualReadOnly\", \"\"));\n \n         task.setUserTemplate(userTemplate);\n@@ -601,8 +602,8 @@ public void issueSYNCOPE68() {\n         userTO.getAttrs().add(attributeTO(\"userId\", \"testuser2@syncope.apache.org\"));\n         userTO.getAttrs().add(attributeTO(\"email\", \"testuser2@syncope.apache.org\"));\n \n-        userTO.getResources().add(\"ws-target-resource-nopropagation2\");\n-        userTO.getResources().add(\"ws-target-resource-nopropagation4\");\n+        userTO.getResources().add(RESOURCE_NAME_NOPROPAGATION2);\n+        userTO.getResources().add(RESOURCE_NAME_NOPROPAGATION4);\n \n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(7L);\n@@ -627,7 +628,7 @@ public void issueSYNCOPE68() {\n \n             template.getMemberships().add(membershipTO);\n \n-            template.getResources().add(\"ws-target-resource-nopropagation4\");\n+            template.getResources().add(RESOURCE_NAME_NOPROPAGATION4);\n             //-----------------------------\n \n             // Update sync task\n@@ -753,7 +754,7 @@ public void issueSYNCOPE272() {\n \n         // create user with testdb resource\n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"syncope272@syncope.apache.org\");\n-        userTO.getResources().add(\"resource-testdb\");\n+        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n \n         userTO = createUser(userTO);\n         try {\n@@ -775,7 +776,7 @@ public void issueSYNCOPE272() {\n             template.getAttrs().add(attributeTO(\"userId\", \"'test'\"));\n             template.getAttrs().add(attributeTO(\"fullname\", \"'test'\"));\n             template.getAttrs().add(attributeTO(\"surname\", \"'test'\"));\n-            template.getResources().add(\"resource-testdb\");\n+            template.getResources().add(RESOURCE_NAME_TESTDB);\n \n             task.setUserTemplate(template);\n \n@@ -812,7 +813,7 @@ public void issueSYNCOPE258() {\n \n         SyncTaskTO task = new SyncTaskTO();\n         task.setName(\"Test Sync Rule\");\n-        task.setResource(\"ws-target-resource-2\");\n+        task.setResource(RESOURCE_NAME_WS2);\n         task.setFullReconciliation(true);\n         task.setPerformCreate(true);\n         task.setPerformDelete(true);\n@@ -824,13 +825,13 @@ public void issueSYNCOPE258() {\n \n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"s258_1@apache.org\");\n         userTO.getResources().clear();\n-        userTO.getResources().add(\"ws-target-resource-2\");\n+        userTO.getResources().add(RESOURCE_NAME_WS2);\n \n-        userTO = createUser(userTO);\n+        createUser(userTO);\n \n         userTO = UserTestITCase.getUniqueSampleTO(\"s258_2@apache.org\");\n         userTO.getResources().clear();\n-        userTO.getResources().add(\"ws-target-resource-2\");\n+        userTO.getResources().add(RESOURCE_NAME_WS2);\n \n         userTO = createUser(userTO);\n \n@@ -861,8 +862,8 @@ public void issueSYNCOPE307() {\n         userTO.getDerAttrs().add(csvuserid);\n \n         userTO.getResources().clear();\n-        userTO.getResources().add(\"ws-target-resource-2\");\n-        userTO.getResources().add(\"resource-csv\");\n+        userTO.getResources().add(RESOURCE_NAME_WS2);\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n \n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n@@ -876,7 +877,7 @@ public void issueSYNCOPE307() {\n \n         //  add user template\n         UserTO template = new UserTO();\n-        template.getResources().add(\"resource-db-virattr\");\n+        template.getResources().add(RESOURCE_NAME_DBVIRATTR);\n \n         AttributeTO userId = attributeTO(\"userId\", \"'s307@apache.org'\");\n         template.getAttrs().add(userId);\n@@ -910,7 +911,7 @@ public void bulkAction() {\n \n         // create user with testdb resource\n         final UserTO userTO = UserTestITCase.getUniqueSampleTO(\"taskBulk@apache.org\");\n-        userTO.getResources().add(\"resource-testdb\");\n+        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n         createUser(userTO);\n \n         final List<PropagationTaskTO> after = new ArrayList<PropagationTaskTO>("},{"sha":"8cc608f9f989aca711c1ba2ac8543348a2d960e2","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":26,"deletions":339,"changes":365,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03aee1d61679bbf33fd3b80a2405a2e1fee386c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03aee1d61679bbf33fd3b80a2405a2e1fee386c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=a03aee1d61679bbf33fd3b80a2405a2e1fee386c","patch":"@@ -33,7 +33,6 @@\n import java.util.List;\n \n import javax.ws.rs.core.Response;\n-import org.apache.commons.lang3.SerializationUtils;\n \n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.mod.MembershipMod;\n@@ -49,7 +48,6 @@\n import org.apache.syncope.common.to.ConfigurationTO;\n import org.apache.syncope.common.to.ConnObjectTO;\n import org.apache.syncope.common.to.MappingItemTO;\n-import org.apache.syncope.common.to.MappingTO;\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n import org.apache.syncope.common.to.PropagationStatusTO;\n@@ -60,8 +58,6 @@\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.CipherAlgorithm;\n-import org.apache.syncope.common.types.IntMappingType;\n-import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.types.ClientExceptionType;\n@@ -143,7 +139,7 @@ public void createUserWithNoPropagation() {\n         UserTO userTO = getUniqueSampleTO(\"xxx@xxx.xxx\");\n \n         userTO.setPassword(\"password123\");\n-        userTO.getResources().add(\"ws-target-resource-nopropagation\");\n+        userTO.getResources().add(RESOURCE_NAME_NOPROPAGATION);\n \n         createUser(userTO);\n \n@@ -203,7 +199,7 @@ public void issue186() {\n         UserMod userMod = new UserMod();\n         userMod.setId(userTO.getId());\n         userMod.setPassword(\"newPassword\");\n-        userMod.getResourcesToAdd().add(\"ws-target-resource-2\");\n+        userMod.getResourcesToAdd().add(RESOURCE_NAME_WS2);\n \n         try {\n             userTO = updateUser(userMod);\n@@ -217,7 +213,7 @@ public void issue186() {\n         userMod = new UserMod();\n         userMod.setId(userTO.getId());\n         userMod.setPassword(\"newPassword\");\n-        userMod.getResourcesToAdd().add(\"ws-target-resource-1\");\n+        userMod.getResourcesToAdd().add(RESOURCE_NAME_WS1);\n \n         userTO = updateUser(userMod);\n         assertNotNull(userTO.getPropagationStatusTOs().get(0).getFailureReason());\n@@ -240,7 +236,7 @@ public void issue186() {\n     @Test\n     public void testEnforceMandatoryCondition() {\n         UserTO userTO = getUniqueSampleTO(\"enforce@apache.org\");\n-        userTO.getResources().add(\"ws-target-resource-2\");\n+        userTO.getResources().add(RESOURCE_NAME_WS2);\n         userTO.setPassword(\"newPassword\");\n \n         AttributeTO type = null;\n@@ -329,9 +325,7 @@ public void createWithInvalidPasswordByRes() {\n \n         // configured to be minLength=16\n         userTO.setPassword(\"password1\");\n-\n-        userTO.getResources().add(\"ws-target-resource-nopropagation\");\n-\n+        userTO.getResources().add(RESOURCE_NAME_NOPROPAGATION);\n         createUser(userTO);\n     }\n \n@@ -1202,38 +1196,6 @@ public void membershipAttrPropagation() {\n         assertEquals(\"sx-dx\", connObjectTO.getAttrMap().get(\"MEMBERSHIP\").getValues().get(0));\n     }\n \n-    @Test\n-    public void issueSYNCOPE16() {\n-        UserTO userTO = getUniqueSampleTO(\"issue16@apache.org\");\n-\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRoleId(8L);\n-        userTO.getMemberships().add(membershipTO);\n-\n-        // 1. create user\n-        UserTO actual = createUser(userTO);\n-        assertNotNull(actual);\n-\n-        // 2. check for virtual attribute value\n-        actual = userService.read(actual.getId());\n-        assertNotNull(actual);\n-        assertEquals(\"virtualvalue\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n-\n-        UserMod userMod = new UserMod();\n-        userMod.setId(actual.getId());\n-        userMod.getVirAttrsToRemove().add(\"virtualdata\");\n-        userMod.getVirAttrsToUpdate().add(attributeMod(\"virtualdata\", \"virtualupdated\"));\n-\n-        // 3. update virtual attribute\n-        actual = updateUser(userMod);\n-        assertNotNull(actual);\n-\n-        // 4. check for virtual attribute value\n-        actual = userService.read(actual.getId());\n-        assertNotNull(actual);\n-        assertEquals(\"virtualupdated\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n-    }\n-\n     @Test\n     public void issueSYNCOPE108() {\n         UserTO userTO = getUniqueSampleTO(\"syncope108@syncope.apache.org\");\n@@ -1276,8 +1238,7 @@ public void issueSYNCOPE108() {\n         assertNotNull(actual);\n         assertEquals(1, actual.getMemberships().size());\n \n-        connObjectTO =\n-                resourceService.getConnectorObject(RESOURCE_NAME_CSV, AttributableType.USER, actual.getId());\n+        connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_CSV, AttributableType.USER, actual.getId());\n         assertNotNull(connObjectTO);\n         // -----------------------------------\n \n@@ -1294,8 +1255,7 @@ public void issueSYNCOPE108() {\n         assertEquals(1, actual.getMemberships().size());\n         assertFalse(actual.getResources().isEmpty());\n \n-        connObjectTO =\n-                resourceService.getConnectorObject(RESOURCE_NAME_CSV, AttributableType.USER, actual.getId());\n+        connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_CSV, AttributableType.USER, actual.getId());\n         assertNotNull(connObjectTO);\n         // -----------------------------------\n \n@@ -1374,8 +1334,7 @@ public void issueSYNCOPE111() {\n         assertNotNull(actual);\n         assertEquals(1, actual.getMemberships().size());\n \n-        connObjectTO =\n-                resourceService.getConnectorObject(RESOURCE_NAME_LDAP, AttributableType.USER, actual.getId());\n+        connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_LDAP, AttributableType.USER, actual.getId());\n         assertNotNull(connObjectTO);\n \n         postalAddress = connObjectTO.getAttrMap().get(\"postalAddress\");\n@@ -1444,143 +1403,19 @@ public void issueSYNCOPE51() {\n         assertEquals(defaultConfigurationTO, oldConfTO);\n     }\n \n-    @Test\n-    public void issueSYNCOPE260() {\n-        // ----------------------------------\n-        // create user and check virtual attribute value propagation\n-        // ----------------------------------\n-        UserTO userTO = getUniqueSampleTO(\"260@a.com\");\n-        userTO.getResources().add(\"ws-target-resource-2\");\n-\n-        userTO = createUser(userTO);\n-        assertNotNull(userTO);\n-        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n-        assertEquals(\"ws-target-resource-2\", userTO.getPropagationStatusTOs().get(0).getResource());\n-        assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n-\n-        ConnObjectTO connObjectTO =\n-                resourceService.getConnectorObject(\"ws-target-resource-2\", AttributableType.USER, userTO.getId());\n-        assertNotNull(connObjectTO);\n-        assertEquals(\"virtualvalue\", connObjectTO.getAttrMap().get(\"NAME\").getValues().get(0));\n-        // ----------------------------------\n-\n-        // ----------------------------------\n-        // update user virtual attribute and check virtual attribute value update propagation\n-        // ----------------------------------\n-        UserMod userMod = new UserMod();\n-        userMod.setId(userTO.getId());\n-\n-        AttributeMod attrMod = new AttributeMod();\n-        attrMod.setSchema(\"virtualdata\");\n-        attrMod.getValuesToBeRemoved().add(\"virtualvalue\");\n-        attrMod.getValuesToBeAdded().add(\"virtualvalue2\");\n-\n-        userMod.getVirAttrsToUpdate().add(attrMod);\n-\n-        userTO = updateUser(userMod);\n-        assertNotNull(userTO);\n-        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n-        assertEquals(\"ws-target-resource-2\", userTO.getPropagationStatusTOs().get(0).getResource());\n-        assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n-\n-        connObjectTO =\n-                resourceService.getConnectorObject(\"ws-target-resource-2\", AttributableType.USER, userTO.getId());\n-        assertNotNull(connObjectTO);\n-        assertEquals(\"virtualvalue2\", connObjectTO.getAttrMap().get(\"NAME\").getValues().get(0));\n-        // ----------------------------------\n-\n-        // ----------------------------------\n-        // suspend/reactivate user and check virtual attribute value (unchanged)\n-        // ----------------------------------\n-        StatusMod statusMod = new StatusMod();\n-        statusMod.setType(StatusMod.ModType.SUSPEND);\n-        userTO = userService.status(userTO.getId(), statusMod).readEntity(UserTO.class);\n-        assertEquals(\"suspended\", userTO.getStatus());\n-\n-        connObjectTO =\n-                resourceService.getConnectorObject(\"ws-target-resource-2\", AttributableType.USER, userTO.getId());\n-        assertNotNull(connObjectTO);\n-        assertFalse(connObjectTO.getAttrMap().get(\"NAME\").getValues().isEmpty());\n-        assertEquals(\"virtualvalue2\", connObjectTO.getAttrMap().get(\"NAME\").getValues().get(0));\n-\n-        statusMod = new StatusMod();\n-        statusMod.setType(StatusMod.ModType.REACTIVATE);\n-        userTO = userService.status(userTO.getId(), statusMod).readEntity(UserTO.class);\n-        assertEquals(\"active\", userTO.getStatus());\n-\n-        connObjectTO =\n-                resourceService.getConnectorObject(\"ws-target-resource-2\", AttributableType.USER, userTO.getId());\n-        assertNotNull(connObjectTO);\n-        assertFalse(connObjectTO.getAttrMap().get(\"NAME\").getValues().isEmpty());\n-        assertEquals(\"virtualvalue2\", connObjectTO.getAttrMap().get(\"NAME\").getValues().get(0));\n-        // ----------------------------------\n-\n-        // ----------------------------------\n-        // update user attribute and check virtual attribute value (unchanged)\n-        // ----------------------------------\n-        userMod = new UserMod();\n-        userMod.setId(userTO.getId());\n-\n-        attrMod = new AttributeMod();\n-        attrMod.setSchema(\"surname\");\n-        attrMod.getValuesToBeRemoved().add(\"Surname\");\n-        attrMod.getValuesToBeAdded().add(\"Surname2\");\n-\n-        userMod.getAttrsToUpdate().add(attrMod);\n-\n-        userTO = updateUser(userMod);\n-        assertNotNull(userTO);\n-        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n-        assertEquals(\"ws-target-resource-2\", userTO.getPropagationStatusTOs().get(0).getResource());\n-        assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n-\n-        connObjectTO =\n-                resourceService.getConnectorObject(\"ws-target-resource-2\", AttributableType.USER, userTO.getId());\n-        assertNotNull(connObjectTO);\n-        assertEquals(\"Surname2\", connObjectTO.getAttrMap().get(\"SURNAME\").getValues().get(0));\n-\n-        // attribute \"name\" mapped on virtual attribute \"virtualdata\" shouldn't be changed\n-        assertFalse(connObjectTO.getAttrMap().get(\"NAME\").getValues().isEmpty());\n-        assertEquals(\"virtualvalue2\", connObjectTO.getAttrMap().get(\"NAME\").getValues().get(0));\n-        // ----------------------------------\n-\n-        // ----------------------------------\n-        // remove user virtual attribute and check virtual attribute value (reset)\n-        // ----------------------------------\n-        userMod = new UserMod();\n-        userMod.setId(userTO.getId());\n-        userMod.getVirAttrsToRemove().add(\"virtualdata\");\n-\n-        userTO = updateUser(userMod);\n-        assertNotNull(userTO);\n-        assertTrue(userTO.getVirAttrs().isEmpty());\n-        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n-        assertEquals(\"ws-target-resource-2\", userTO.getPropagationStatusTOs().get(0).getResource());\n-        assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n-\n-        connObjectTO =\n-                resourceService.getConnectorObject(\"ws-target-resource-2\", AttributableType.USER, userTO.getId());\n-        assertNotNull(connObjectTO);\n-\n-        // attribute \"name\" mapped on virtual attribute \"virtualdata\" should be reset\n-        assertTrue(connObjectTO.getAttrMap().get(\"NAME\").getValues() == null\n-                || connObjectTO.getAttrMap().get(\"NAME\").getValues().isEmpty());\n-        // ----------------------------------\n-    }\n-\n     @Test\n     public void issueSYNCOPE267() {\n         // ----------------------------------\n         // create user and check virtual attribute value propagation\n         // ----------------------------------\n         UserTO userTO = getUniqueSampleTO(\"syncope267@apache.org\");\n         userTO.getResources().clear();\n-        userTO.getResources().add(\"resource-db-virattr\");\n+        userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n \n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n         assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n-        assertEquals(\"resource-db-virattr\", userTO.getPropagationStatusTOs().get(0).getResource());\n+        assertEquals(RESOURCE_NAME_DBVIRATTR, userTO.getPropagationStatusTOs().get(0).getResource());\n         assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n \n         ConnObjectTO connObjectTO =\n@@ -1608,7 +1443,7 @@ public void issueSYNCOPE266() {\n         userMod.setId(userTO.getId());\n \n         // this resource has not a mapping for Password\n-        userMod.getResourcesToAdd().add(\"ws-target-resource-update\");\n+        userMod.getResourcesToAdd().add(RESOURCE_NAME_UPDATE);\n \n         userTO = updateUser(userMod);\n         assertNotNull(userTO);\n@@ -1618,9 +1453,9 @@ public void issueSYNCOPE266() {\n     public void issueSYNCOPE279() {\n         UserTO userTO = getUniqueSampleTO(\"syncope279@apache.org\");\n         userTO.getResources().clear();\n-        userTO.getResources().add(\"ws-target-resource-timeout\");\n+        userTO.getResources().add(RESOURCE_NAME_TIMEOUT);\n         userTO = createUser(userTO);\n-        assertEquals(\"ws-target-resource-timeout\", userTO.getPropagationStatusTOs().get(0).getResource());\n+        assertEquals(RESOURCE_NAME_TIMEOUT, userTO.getPropagationStatusTOs().get(0).getResource());\n         assertNotNull(userTO.getPropagationStatusTOs().get(0).getFailureReason());\n         assertEquals(PropagationTaskExecStatus.UNSUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n     }\n@@ -1630,13 +1465,14 @@ public void issueSYNCOPE122() {\n         // 1. create user on testdb and testdb2\n         UserTO userTO = getUniqueSampleTO(\"syncope122@apache.org\");\n         userTO.getResources().clear();\n+\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n-        userTO.getResources().add(\"resource-testdb2\");\n+        userTO.getResources().add(RESOURCE_NAME_TESTDB2);\n \n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_TESTDB));\n-        assertTrue(userTO.getResources().contains(\"resource-testdb2\"));\n+        assertTrue(userTO.getResources().contains(RESOURCE_NAME_TESTDB2));\n \n         final String pwdOnSyncope = userTO.getPassword();\n \n@@ -1649,7 +1485,7 @@ public void issueSYNCOPE122() {\n         final String pwdOnTestDb = pwdOnTestDbAttr.getValues().iterator().next();\n \n         ConnObjectTO userOnDb2 = resourceService.getConnectorObject(\n-                \"resource-testdb2\", AttributableType.USER, userTO.getId());\n+                RESOURCE_NAME_TESTDB2, AttributableType.USER, userTO.getId());\n         final AttributeTO pwdOnTestDb2Attr = userOnDb2.getAttrMap().get(OperationalAttributes.PASSWORD_NAME);\n         assertNotNull(pwdOnTestDb2Attr);\n         assertNotNull(pwdOnTestDb2Attr.getValues());\n@@ -1684,7 +1520,7 @@ public void issueSYNCOPE122() {\n         assertNotEquals(pwdOnTestDb, pwdOnTestDbAttrAfter.getValues().iterator().next());\n \n         // 3d. verify that password hasn't changed on testdb2\n-        userOnDb2 = resourceService.getConnectorObject(\"resource-testdb2\", AttributableType.USER, userTO.getId());\n+        userOnDb2 = resourceService.getConnectorObject(RESOURCE_NAME_TESTDB2, AttributableType.USER, userTO.getId());\n         final AttributeTO pwdOnTestDb2AttrAfter = userOnDb2.getAttrMap().get(OperationalAttributes.PASSWORD_NAME);\n         assertNotNull(pwdOnTestDb2AttrAfter);\n         assertNotNull(pwdOnTestDb2AttrAfter.getValues());\n@@ -1712,7 +1548,7 @@ public void isseSYNCOPE136AES() {\n         // 4. update user, assign a propagation primary resource but don't provide any password\n         UserMod userMod = new UserMod();\n         userMod.setId(userTO.getId());\n-        userMod.getResourcesToAdd().add(\"ws-target-resource-1\");\n+        userMod.getResourcesToAdd().add(RESOURCE_NAME_WS1);\n \n         userTO = updateUser(userMod);\n         assertNotNull(userTO);\n@@ -1723,7 +1559,7 @@ public void isseSYNCOPE136AES() {\n         assertEquals(1, props.size());\n         PropagationStatusTO prop = props.iterator().next();\n         assertNotNull(prop);\n-        assertEquals(\"ws-target-resource-1\", prop.getResource());\n+        assertEquals(RESOURCE_NAME_WS1, prop.getResource());\n         assertEquals(PropagationTaskExecStatus.SUBMITTED, prop.getStatus());\n \n         // 6. restore initial cipher algorithm\n@@ -1758,71 +1594,6 @@ public void isseSYNCOPE136Random() {\n         assertEquals(PropagationTaskExecStatus.SUCCESS, prop.getStatus());\n     }\n \n-    @Test\n-    public void virAttrCache() {\n-        UserTO userTO = getUniqueSampleTO(\"virattrcache@apache.org\");\n-        userTO.getVirAttrs().clear();\n-\n-        AttributeTO virAttrTO = new AttributeTO();\n-        virAttrTO.setSchema(\"virtualdata\");\n-        virAttrTO.getValues().add(\"virattrcache\");\n-        userTO.getVirAttrs().add(virAttrTO);\n-\n-        userTO.getMemberships().clear();\n-        userTO.getResources().clear();\n-        userTO.getResources().add(\"resource-db-virattr\");\n-\n-        // 1. create user\n-        UserTO actual = createUser(userTO);\n-        assertNotNull(actual);\n-\n-        // 2. check for virtual attribute value\n-        actual = userService.read(actual.getId());\n-        assertEquals(\"virattrcache\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n-\n-        Exception exception = null;\n-        try {\n-            final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n-\n-            String value = jdbcTemplate.queryForObject(\n-                    \"SELECT USERNAME FROM testsync WHERE ID=?\", String.class, actual.getId());\n-            assertEquals(\"virattrcache\", value);\n-\n-            jdbcTemplate.update(\"UPDATE testsync set USERNAME='virattrcache2' WHERE ID=?\", userTO.getId());\n-\n-            value = jdbcTemplate.queryForObject(\n-                    \"SELECT USERNAME FROM testsync WHERE ID=?\", String.class, userTO.getId());\n-            assertEquals(\"virattrcache2\", value);\n-\n-        } catch (EmptyResultDataAccessException e) {\n-            exception = e;\n-        }\n-        assertNotNull(exception);\n-\n-        // 2. check for cached attribute value\n-        actual = userService.read(actual.getId());\n-        assertEquals(\"virattrcache\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n-\n-        UserMod userMod = new UserMod();\n-        userMod.setId(actual.getId());\n-\n-        AttributeMod virtualdata = new AttributeMod();\n-        virtualdata.setSchema(\"virtualdata\");\n-        virtualdata.getValuesToBeAdded().add(\"virtualupdated\");\n-\n-        userMod.getVirAttrsToRemove().add(\"virtualdata\");\n-        userMod.getVirAttrsToUpdate().add(virtualdata);\n-\n-        // 3. update virtual attribute\n-        actual = updateUser(userMod);\n-        assertNotNull(actual);\n-\n-        // 4. check for virtual attribute value\n-        actual = userService.read(actual.getId());\n-        assertNotNull(actual);\n-        assertEquals(\"virtualupdated\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n-    }\n-\n     @Test\n     public void mappingPurpose() {\n         UserTO userTO = getUniqueSampleTO(\"mpurpose@apache.org\");\n@@ -2021,79 +1792,6 @@ public void issueSYNCOPE383() {\n         assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n     }\n \n-    @Test\n-    public void issueSYNCOPE397() {\n-        ResourceTO csv = resourceService.read(RESOURCE_NAME_CSV);\n-        // change mapping of resource-csv\n-        MappingTO origMapping = SerializationUtils.clone(csv.getUmapping());\n-        assertNotNull(origMapping);\n-        for (MappingItemTO item : csv.getUmapping().getItems()) {\n-            if (\"email\".equals(item.getIntAttrName())) {\n-                // unset internal attribute mail and set virtual attribute virtualdata as mapped to external email\n-                item.setIntMappingType(IntMappingType.UserVirtualSchema);\n-                item.setIntAttrName(\"virtualdata\");\n-                item.setPurpose(MappingPurpose.BOTH);\n-                item.setExtAttrName(\"email\");\n-            }\n-        }\n-\n-        resourceService.update(csv.getName(), csv);\n-        csv = resourceService.read(RESOURCE_NAME_CSV);\n-        assertNotNull(csv.getUmapping());\n-\n-        boolean found = false;\n-        for (MappingItemTO item : csv.getUmapping().getItems()) {\n-            if (\"email\".equals(item.getExtAttrName()) && \"virtualdata\".equals(item.getIntAttrName())) {\n-                found = true;\n-            }\n-        }\n-\n-        assertTrue(found);\n-\n-        // create a new user\n-        UserTO userTO = getUniqueSampleTO(\"syncope397@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n-        userTO.getDerAttrs().clear();\n-        userTO.getVirAttrs().clear();\n-\n-        userTO.getDerAttrs().add(attributeTO(\"csvuserid\", null));\n-        userTO.getDerAttrs().add(attributeTO(\"cn\", null));\n-        userTO.getVirAttrs().add(attributeTO(\"virtualdata\", \"test@testone.org\"));\n-        // assign resource-csv to user\n-        userTO.getResources().add(RESOURCE_NAME_CSV);\n-        // save user\n-        UserTO created = createUser(userTO);\n-        // make std controls about user\n-        assertNotNull(created);\n-        assertTrue(RESOURCE_NAME_CSV.equals(created.getResources().iterator().next()));\n-        // update user\n-        UserTO toBeUpdated = userService.read(created.getId());\n-        UserMod userMod = new UserMod();\n-        userMod.setId(toBeUpdated.getId());\n-        userMod.setPassword(\"password2\");\n-        // assign new resource to user\n-        userMod.getResourcesToAdd().add(\"ws-target-resource-2\");\n-        //modify virtual attribute\n-        userMod.getVirAttrsToRemove().add(\"virtualdata\");\n-        userMod.getVirAttrsToUpdate().add(attributeMod(\"virtualdata\", \"test@testoneone.com\"));\n-\n-        // check Syncope change password\n-        StatusMod pwdPropRequest = new StatusMod();\n-        pwdPropRequest.setOnSyncope(true);\n-        pwdPropRequest.getResourceNames().add(\"ws-target-resource-2\");\n-        userMod.setPwdPropRequest(pwdPropRequest);\n-\n-        toBeUpdated = updateUser(userMod);\n-        assertNotNull(toBeUpdated);\n-        assertEquals(\"test@testoneone.com\", toBeUpdated.getVirAttrs().get(0).getValues().get(0));\n-        // check if propagates correctly with assertEquals on size of tasks list\n-        assertEquals(2, toBeUpdated.getPropagationStatusTOs().size());\n-        // restore mapping of resource-csv\n-        csv.setUmapping(origMapping);\n-        resourceService.update(csv.getName(), csv);\n-    }\n-\n     @Test\n     public void issueSYNCOPE402() {\n         // 1. create an user with strict mandatory attributes only\n@@ -2115,10 +1813,11 @@ public void issueSYNCOPE402() {\n         UserMod userMod = new UserMod();\n         userMod.setId(userTO.getId());\n         userMod.setPassword(\"newPassword\");\n-        userMod.getResourcesToAdd().add(\"ws-target-resource-1\");\n-        userMod.getResourcesToAdd().add(\"resource-testdb\");\n+\n+        userMod.getResourcesToAdd().add(RESOURCE_NAME_WS1);\n+        userMod.getResourcesToAdd().add(RESOURCE_NAME_TESTDB);\n         userTO = updateUser(userMod);\n-        assertEquals(\"ws-target-resource-1\", userTO.getPropagationStatusTOs().get(1).getResource());\n+        assertEquals(RESOURCE_NAME_WS1, userTO.getPropagationStatusTOs().get(1).getResource());\n         assertNotNull(userTO.getPropagationStatusTOs().get(1).getFailureReason());\n         assertEquals(PropagationTaskExecStatus.UNSUBMITTED, userTO.getPropagationStatusTOs().get(1).getStatus());\n     }\n@@ -2277,24 +1976,12 @@ public void issueSYNCOPE435() {\n \n         // 2. try to update user by subscribing a resource - works but propagation is not even attempted\n         UserMod userMod = new UserMod();\n-        userMod.getResourcesToAdd().add(\"ws-target-resource-1\");\n+        userMod.getResourcesToAdd().add(RESOURCE_NAME_WS1);\n \n         userTO = userService.update(userTO.getId(), userMod).readEntity(UserTO.class);\n-        assertEquals(Collections.singleton(\"ws-target-resource-1\"), userTO.getResources());\n+        assertEquals(Collections.singleton(RESOURCE_NAME_WS1), userTO.getResources());\n         assertFalse(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n         assertTrue(userTO.getPropagationStatusTOs().get(0).getFailureReason().\n                 startsWith(\"Not attempted because there are mandatory attributes without value(s): [__PASSWORD__]\"));\n     }\n-\n-    @Test\n-    public void issueSYNCOPE436() {\n-        UserTO userTO = getUniqueSampleTO(\"syncope436@syncope.apache.org\");\n-        userTO.getMemberships().clear();\n-        userTO.getResources().clear();\n-        userTO.getResources().add(RESOURCE_NAME_LDAP);\n-        userTO.getVirAttrs().add(attributeTO(\"virtualReadOnly\", \"readOnly\"));\n-        userTO = createUser(userTO);\n-        //Finding no values because the virtual attribute is readonly \n-        assertTrue(userTO.getVirAttrMap().get(\"virtualReadOnly\").getValues().isEmpty());\n-    }\n }"},{"sha":"9b3ae37fc3f496b1d6ad22ddae289ad73c6c55a4","filename":"core/src/test/java/org/apache/syncope/core/rest/VirAttrTestITCase.java","status":"added","additions":437,"deletions":0,"changes":437,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03aee1d61679bbf33fd3b80a2405a2e1fee386c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03aee1d61679bbf33fd3b80a2405a2e1fee386c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java?ref=a03aee1d61679bbf33fd3b80a2405a2e1fee386c","patch":"@@ -0,0 +1,437 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest;\n+\n+import static org.apache.syncope.core.rest.AbstractTest.RESOURCE_NAME_DBVIRATTR;\n+import static org.apache.syncope.core.rest.AbstractTest.attributeMod;\n+import static org.apache.syncope.core.rest.UserTestITCase.getUniqueSampleTO;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.syncope.common.mod.AttributeMod;\n+import org.apache.syncope.common.mod.StatusMod;\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.to.AttributeTO;\n+import org.apache.syncope.common.to.ConnInstanceTO;\n+import org.apache.syncope.common.to.ConnObjectTO;\n+import org.apache.syncope.common.to.MappingItemTO;\n+import org.apache.syncope.common.to.MappingTO;\n+import org.apache.syncope.common.to.MembershipTO;\n+import org.apache.syncope.common.to.ResourceTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.ConnConfProperty;\n+import org.apache.syncope.common.types.IntMappingType;\n+import org.apache.syncope.common.types.MappingPurpose;\n+import org.apache.syncope.common.types.PropagationTaskExecStatus;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class VirAttrTestITCase extends AbstractTest {\n+\n+    @Test\n+    public void issueSYNCOPE16() {\n+        UserTO userTO = getUniqueSampleTO(\"issue16@apache.org\");\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(8L);\n+        userTO.getMemberships().add(membershipTO);\n+\n+        // 1. create user\n+        UserTO actual = createUser(userTO);\n+        assertNotNull(actual);\n+\n+        // 2. check for virtual attribute value\n+        actual = userService.read(actual.getId());\n+        assertNotNull(actual);\n+        assertEquals(\"virtualvalue\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setId(actual.getId());\n+        userMod.getVirAttrsToRemove().add(\"virtualdata\");\n+        userMod.getVirAttrsToUpdate().add(attributeMod(\"virtualdata\", \"virtualupdated\"));\n+\n+        // 3. update virtual attribute\n+        actual = updateUser(userMod);\n+        assertNotNull(actual);\n+\n+        // 4. check for virtual attribute value\n+        actual = userService.read(actual.getId());\n+        assertNotNull(actual);\n+        assertEquals(\"virtualupdated\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE260() {\n+        // ----------------------------------\n+        // create user and check virtual attribute value propagation\n+        // ----------------------------------\n+        UserTO userTO = getUniqueSampleTO(\"260@a.com\");\n+        userTO.getResources().add(RESOURCE_NAME_WS2);\n+\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n+        assertEquals(RESOURCE_NAME_WS2, userTO.getPropagationStatusTOs().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n+\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_WS2, AttributableType.USER, userTO.getId());\n+        assertNotNull(connObjectTO);\n+        assertEquals(\"virtualvalue\", connObjectTO.getAttrMap().get(\"NAME\").getValues().get(0));\n+        // ----------------------------------\n+\n+        // ----------------------------------\n+        // update user virtual attribute and check virtual attribute value update propagation\n+        // ----------------------------------\n+        UserMod userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+\n+        AttributeMod attrMod = new AttributeMod();\n+        attrMod.setSchema(\"virtualdata\");\n+        attrMod.getValuesToBeRemoved().add(\"virtualvalue\");\n+        attrMod.getValuesToBeAdded().add(\"virtualvalue2\");\n+\n+        userMod.getVirAttrsToUpdate().add(attrMod);\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n+        assertEquals(\"ws-target-resource-2\", userTO.getPropagationStatusTOs().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n+\n+        connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_WS2, AttributableType.USER, userTO.getId());\n+        assertNotNull(connObjectTO);\n+        assertEquals(\"virtualvalue2\", connObjectTO.getAttrMap().get(\"NAME\").getValues().get(0));\n+        // ----------------------------------\n+\n+        // ----------------------------------\n+        // suspend/reactivate user and check virtual attribute value (unchanged)\n+        // ----------------------------------\n+        StatusMod statusMod = new StatusMod();\n+        statusMod.setType(StatusMod.ModType.SUSPEND);\n+        userTO = userService.status(userTO.getId(), statusMod).readEntity(UserTO.class);\n+        assertEquals(\"suspended\", userTO.getStatus());\n+\n+        connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_WS2, AttributableType.USER, userTO.getId());\n+        assertNotNull(connObjectTO);\n+        assertFalse(connObjectTO.getAttrMap().get(\"NAME\").getValues().isEmpty());\n+        assertEquals(\"virtualvalue2\", connObjectTO.getAttrMap().get(\"NAME\").getValues().get(0));\n+\n+        statusMod = new StatusMod();\n+        statusMod.setType(StatusMod.ModType.REACTIVATE);\n+        userTO = userService.status(userTO.getId(), statusMod).readEntity(UserTO.class);\n+        assertEquals(\"active\", userTO.getStatus());\n+\n+        connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_WS2, AttributableType.USER, userTO.getId());\n+        assertNotNull(connObjectTO);\n+        assertFalse(connObjectTO.getAttrMap().get(\"NAME\").getValues().isEmpty());\n+        assertEquals(\"virtualvalue2\", connObjectTO.getAttrMap().get(\"NAME\").getValues().get(0));\n+        // ----------------------------------\n+\n+        // ----------------------------------\n+        // update user attribute and check virtual attribute value (unchanged)\n+        // ----------------------------------\n+        userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+\n+        attrMod = new AttributeMod();\n+        attrMod.setSchema(\"surname\");\n+        attrMod.getValuesToBeRemoved().add(\"Surname\");\n+        attrMod.getValuesToBeAdded().add(\"Surname2\");\n+\n+        userMod.getAttrsToUpdate().add(attrMod);\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n+        assertEquals(RESOURCE_NAME_WS2, userTO.getPropagationStatusTOs().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n+\n+        connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_WS2, AttributableType.USER, userTO.getId());\n+        assertNotNull(connObjectTO);\n+        assertEquals(\"Surname2\", connObjectTO.getAttrMap().get(\"SURNAME\").getValues().get(0));\n+\n+        // attribute \"name\" mapped on virtual attribute \"virtualdata\" shouldn't be changed\n+        assertFalse(connObjectTO.getAttrMap().get(\"NAME\").getValues().isEmpty());\n+        assertEquals(\"virtualvalue2\", connObjectTO.getAttrMap().get(\"NAME\").getValues().get(0));\n+        // ----------------------------------\n+\n+        // ----------------------------------\n+        // remove user virtual attribute and check virtual attribute value (reset)\n+        // ----------------------------------\n+        userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.getVirAttrsToRemove().add(\"virtualdata\");\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+        assertTrue(userTO.getVirAttrs().isEmpty());\n+        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n+        assertEquals(RESOURCE_NAME_WS2, userTO.getPropagationStatusTOs().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n+\n+        connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_WS2, AttributableType.USER, userTO.getId());\n+        assertNotNull(connObjectTO);\n+\n+        // attribute \"name\" mapped on virtual attribute \"virtualdata\" should be reset\n+        assertTrue(connObjectTO.getAttrMap().get(\"NAME\").getValues() == null\n+                || connObjectTO.getAttrMap().get(\"NAME\").getValues().isEmpty());\n+        // ----------------------------------\n+    }\n+\n+    @Test\n+    public void virAttrCache() {\n+        UserTO userTO = getUniqueSampleTO(\"virattrcache@apache.org\");\n+        userTO.getVirAttrs().clear();\n+\n+        AttributeTO virAttrTO = new AttributeTO();\n+        virAttrTO.setSchema(\"virtualdata\");\n+        virAttrTO.getValues().add(\"virattrcache\");\n+        userTO.getVirAttrs().add(virAttrTO);\n+\n+        userTO.getMemberships().clear();\n+        userTO.getResources().clear();\n+        userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n+\n+        // 1. create user\n+        UserTO actual = createUser(userTO);\n+        assertNotNull(actual);\n+\n+        // 2. check for virtual attribute value\n+        actual = userService.read(actual.getId());\n+        assertEquals(\"virattrcache\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+\n+        // 3. update virtual attribute directly\n+        final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+\n+        String value = jdbcTemplate.queryForObject(\n+                \"SELECT USERNAME FROM testsync WHERE ID=?\", String.class, actual.getId());\n+        assertEquals(\"virattrcache\", value);\n+\n+        jdbcTemplate.update(\"UPDATE testsync set USERNAME='virattrcache2' WHERE ID=?\", actual.getId());\n+\n+        value = jdbcTemplate.queryForObject(\n+                \"SELECT USERNAME FROM testsync WHERE ID=?\", String.class, actual.getId());\n+        assertEquals(\"virattrcache2\", value);\n+\n+        // 4. check for cached attribute value\n+        actual = userService.read(actual.getId());\n+        assertEquals(\"virattrcache\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setId(actual.getId());\n+\n+        AttributeMod virtualdata = new AttributeMod();\n+        virtualdata.setSchema(\"virtualdata\");\n+        virtualdata.getValuesToBeAdded().add(\"virtualupdated\");\n+\n+        userMod.getVirAttrsToRemove().add(\"virtualdata\");\n+        userMod.getVirAttrsToUpdate().add(virtualdata);\n+\n+        // 5. update virtual attribute\n+        actual = updateUser(userMod);\n+        assertNotNull(actual);\n+\n+        // 6. check for virtual attribute value\n+        actual = userService.read(actual.getId());\n+        assertNotNull(actual);\n+        assertEquals(\"virtualupdated\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE397() {\n+        ResourceTO csv = resourceService.read(RESOURCE_NAME_CSV);\n+        // change mapping of resource-csv\n+        MappingTO origMapping = SerializationUtils.clone(csv.getUmapping());\n+        assertNotNull(origMapping);\n+        for (MappingItemTO item : csv.getUmapping().getItems()) {\n+            if (\"email\".equals(item.getIntAttrName())) {\n+                // unset internal attribute mail and set virtual attribute virtualdata as mapped to external email\n+                item.setIntMappingType(IntMappingType.UserVirtualSchema);\n+                item.setIntAttrName(\"virtualdata\");\n+                item.setPurpose(MappingPurpose.BOTH);\n+                item.setExtAttrName(\"email\");\n+            }\n+        }\n+\n+        resourceService.update(csv.getName(), csv);\n+        csv = resourceService.read(RESOURCE_NAME_CSV);\n+        assertNotNull(csv.getUmapping());\n+\n+        boolean found = false;\n+        for (MappingItemTO item : csv.getUmapping().getItems()) {\n+            if (\"email\".equals(item.getExtAttrName()) && \"virtualdata\".equals(item.getIntAttrName())) {\n+                found = true;\n+            }\n+        }\n+\n+        assertTrue(found);\n+\n+        // create a new user\n+        UserTO userTO = getUniqueSampleTO(\"syncope397@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+\n+        userTO.getDerAttrs().add(attributeTO(\"csvuserid\", null));\n+        userTO.getDerAttrs().add(attributeTO(\"cn\", null));\n+        userTO.getVirAttrs().add(attributeTO(\"virtualdata\", \"test@testone.org\"));\n+        // assign resource-csv to user\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n+        // save user\n+        UserTO created = createUser(userTO);\n+        // make std controls about user\n+        assertNotNull(created);\n+        assertTrue(RESOURCE_NAME_CSV.equals(created.getResources().iterator().next()));\n+        // update user\n+        UserTO toBeUpdated = userService.read(created.getId());\n+        UserMod userMod = new UserMod();\n+        userMod.setId(toBeUpdated.getId());\n+        userMod.setPassword(\"password2\");\n+        // assign new resource to user\n+        userMod.getResourcesToAdd().add(RESOURCE_NAME_WS2);\n+        //modify virtual attribute\n+        userMod.getVirAttrsToRemove().add(\"virtualdata\");\n+        userMod.getVirAttrsToUpdate().add(attributeMod(\"virtualdata\", \"test@testoneone.com\"));\n+\n+        // check Syncope change password\n+        StatusMod pwdPropRequest = new StatusMod();\n+        pwdPropRequest.setOnSyncope(true);\n+        pwdPropRequest.getResourceNames().add(RESOURCE_NAME_WS2);\n+        userMod.setPwdPropRequest(pwdPropRequest);\n+\n+        toBeUpdated = updateUser(userMod);\n+        assertNotNull(toBeUpdated);\n+        assertEquals(\"test@testoneone.com\", toBeUpdated.getVirAttrs().get(0).getValues().get(0));\n+        // check if propagates correctly with assertEquals on size of tasks list\n+        assertEquals(2, toBeUpdated.getPropagationStatusTOs().size());\n+        // restore mapping of resource-csv\n+        csv.setUmapping(origMapping);\n+        resourceService.update(csv.getName(), csv);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE442() {\n+        UserTO userTO = getUniqueSampleTO(\"syncope442@apache.org\");\n+        userTO.getVirAttrs().clear();\n+\n+        AttributeTO virAttrTO = new AttributeTO();\n+        virAttrTO.setSchema(\"virtualdata\");\n+        virAttrTO.getValues().add(\"virattrcache\");\n+        userTO.getVirAttrs().add(virAttrTO);\n+\n+        userTO.getMemberships().clear();\n+        userTO.getResources().clear();\n+        userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n+\n+        // 1. create user\n+        UserTO actual = createUser(userTO);\n+        assertNotNull(actual);\n+\n+        // 2. check for virtual attribute value\n+        actual = userService.read(actual.getId());\n+        assertEquals(\"virattrcache\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+\n+        // ----------------------------------------\n+        // 3. force cache expiring without any modification\n+        // ----------------------------------------\n+        String jdbcURL = null;\n+        ConnInstanceTO connInstanceBean = connectorService.readByResource(RESOURCE_NAME_DBVIRATTR);\n+        for (ConnConfProperty prop : connInstanceBean.getConfiguration()) {\n+            if (\"jdbcUrlTemplate\".equals(prop.getSchema().getName())) {\n+                jdbcURL = prop.getValues().iterator().next().toString();\n+                prop.getValues().clear();\n+                prop.getValues().add(\"jdbc:h2:tcp://localhost:9092/xxx\");\n+            }\n+        }\n+\n+        connectorService.update(connInstanceBean.getId(), connInstanceBean);\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setId(actual.getId());\n+\n+        AttributeMod virtualdata = new AttributeMod();\n+        virtualdata.setSchema(\"virtualdata\");\n+        virtualdata.getValuesToBeAdded().add(\"virtualupdated\");\n+\n+        userMod.getVirAttrsToRemove().add(\"virtualdata\");\n+        userMod.getVirAttrsToUpdate().add(virtualdata);\n+\n+        actual = updateUser(userMod);\n+        assertNotNull(actual);\n+        // ----------------------------------------\n+\n+        // ----------------------------------------\n+        // 4. update virtual attribute\n+        // ----------------------------------------\n+        final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+\n+        String value = jdbcTemplate.queryForObject(\n+                \"SELECT USERNAME FROM testsync WHERE ID=?\", String.class, actual.getId());\n+        assertEquals(\"virattrcache\", value);\n+\n+        jdbcTemplate.update(\"UPDATE testsync set USERNAME='virattrcache2' WHERE ID=?\", actual.getId());\n+\n+        value = jdbcTemplate.queryForObject(\n+                \"SELECT USERNAME FROM testsync WHERE ID=?\", String.class, actual.getId());\n+        assertEquals(\"virattrcache2\", value);\n+        // ----------------------------------------\n+\n+        actual = userService.read(actual.getId());\n+        assertEquals(\"virattrcache\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+\n+        // ----------------------------------------\n+        // 5. restore connector\n+        // ----------------------------------------\n+        for (ConnConfProperty prop : connInstanceBean.getConfiguration()) {\n+            if (\"jdbcUrlTemplate\".equals(prop.getSchema().getName())) {\n+                prop.getValues().clear();\n+                prop.getValues().add(jdbcURL);\n+            }\n+        }\n+\n+        connectorService.update(connInstanceBean.getId(), connInstanceBean);\n+        // ----------------------------------------\n+\n+        actual = userService.read(actual.getId());\n+        assertEquals(\"virattrcache2\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE436() {\n+        UserTO userTO = getUniqueSampleTO(\"syncope436@syncope.apache.org\");\n+        userTO.getMemberships().clear();\n+        userTO.getResources().clear();\n+        userTO.getResources().add(RESOURCE_NAME_LDAP);\n+        userTO.getVirAttrs().add(attributeTO(\"virtualReadOnly\", \"readOnly\"));\n+        userTO = createUser(userTO);\n+        //Finding no values because the virtual attribute is readonly \n+        assertTrue(userTO.getVirAttrMap().get(\"virtualReadOnly\").getValues().isEmpty());\n+    }\n+}"}]}