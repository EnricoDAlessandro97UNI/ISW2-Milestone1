{"sha":"1c1db2405b431e4782b15195dee83732754f64e8","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjFjMWRiMjQwNWI0MzFlNDc4MmIxNTE5NWRlZTgzNzMyNzU0ZjY0ZTg=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2016-09-16T14:47:57Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2016-09-16T14:53:21Z"},"message":"[SYNCOPE-944] fixes assignable groups collection used to verify group assignment validity","tree":{"sha":"d83f4485e4e9732f4168395b0bd2bad579ee883e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d83f4485e4e9732f4168395b0bd2bad579ee883e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1c1db2405b431e4782b15195dee83732754f64e8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1c1db2405b431e4782b15195dee83732754f64e8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1c1db2405b431e4782b15195dee83732754f64e8","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1c1db2405b431e4782b15195dee83732754f64e8/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"7fb3434bc4c047f9c92ad7c0fcb8cf2d8625ad9c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7fb3434bc4c047f9c92ad7c0fcb8cf2d8625ad9c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7fb3434bc4c047f9c92ad7c0fcb8cf2d8625ad9c"}],"stats":{"total":56,"additions":32,"deletions":24},"files":[{"sha":"74940094aeb74fa1450ccb460b44127eee3bedc6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":16,"deletions":12,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c1db2405b431e4782b15195dee83732754f64e8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c1db2405b431e4782b15195dee83732754f64e8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=1c1db2405b431e4782b15195dee83732754f64e8","patch":"@@ -170,8 +170,9 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n             assignableCond.setRealmFullPath(anyObject.getRealm().getFullPath());\n \n             // relationships\n-            List<AnyObject> assignableAnyObjects =\n-                    searchDAO.search(SearchCond.getLeafCond(assignableCond), AnyTypeKind.ANY_OBJECT);\n+            Collection<String> assignableAnyObjects = CollectionUtils.collect(\n+                    searchDAO.search(SearchCond.getLeafCond(assignableCond), AnyTypeKind.ANY_OBJECT),\n+                    EntityUtils.keyTransformer());\n \n             for (RelationshipTO relationshipTO : anyObjectTO.getRelationships()) {\n                 if (StringUtils.isBlank(relationshipTO.getRightType())\n@@ -187,7 +188,7 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n                     AnyObject otherEnd = anyObjectDAO.find(relationshipTO.getRightKey());\n                     if (otherEnd == null) {\n                         LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n-                    } else if (assignableAnyObjects.contains(otherEnd)) {\n+                    } else if (assignableAnyObjects.contains(otherEnd.getKey())) {\n                         RelationshipType relationshipType = relationshipTypeDAO.find(relationshipTO.getType());\n                         if (relationshipType == null) {\n                             LOG.debug(\"Ignoring invalid relationship type {}\", relationshipTO.getType());\n@@ -211,8 +212,9 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n             }\n \n             // memberships\n-            List<Group> assignableGroups =\n-                    searchDAO.search(SearchCond.getLeafCond(assignableCond), AnyTypeKind.GROUP);\n+            Collection<String> assignableGroups = CollectionUtils.collect(\n+                    searchDAO.search(SearchCond.getLeafCond(assignableCond), AnyTypeKind.GROUP),\n+                    EntityUtils.keyTransformer());\n \n             for (MembershipTO membershipTO : anyObjectTO.getMemberships()) {\n                 Group group = membershipTO.getRightKey() == null\n@@ -221,7 +223,7 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n                 if (group == null) {\n                     LOG.debug(\"Ignoring invalid group \"\n                             + membershipTO.getRightKey() + \" / \" + membershipTO.getGroupName());\n-                } else if (assignableGroups.contains(group)) {\n+                } else if (assignableGroups.contains(group.getKey())) {\n                     AMembership membership = entityFactory.newEntity(AMembership.class);\n                     membership.setRightEnd(group);\n                     membership.setLeftEnd(anyObject);\n@@ -283,8 +285,9 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n         Set<String> toBeProvisioned = new HashSet<>();\n \n         // relationships\n-        List<AnyObject> assignableAnyObjects =\n-                searchDAO.searchAssignable(anyObject.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT);\n+        Collection<String> assignableAnyObjects = CollectionUtils.collect(\n+                searchDAO.searchAssignable(anyObject.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT),\n+                EntityUtils.keyTransformer());\n \n         for (RelationshipPatch patch : anyObjectPatch.getRelationships()) {\n             if (patch.getRelationshipTO() != null) {\n@@ -315,7 +318,7 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n                             AnyObject otherEnd = anyObjectDAO.find(patch.getRelationshipTO().getRightKey());\n                             if (otherEnd == null) {\n                                 LOG.debug(\"Ignoring invalid any object {}\", patch.getRelationshipTO().getRightKey());\n-                            } else if (assignableAnyObjects.contains(otherEnd)) {\n+                            } else if (assignableAnyObjects.contains(otherEnd.getKey())) {\n                                 relationship = entityFactory.newEntity(ARelationship.class);\n                                 relationship.setType(relationshipType);\n                                 relationship.setRightEnd(otherEnd);\n@@ -342,8 +345,9 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         // memberships\n-        List<Group> assignableGroups =\n-                searchDAO.searchAssignable(anyObject.getRealm().getFullPath(), AnyTypeKind.GROUP);\n+        Collection<String> assignableGroups = CollectionUtils.collect(\n+                searchDAO.searchAssignable(anyObject.getRealm().getFullPath(), AnyTypeKind.GROUP),\n+                EntityUtils.keyTransformer());\n \n         for (MembershipPatch membPatch : anyObjectPatch.getMemberships()) {\n             if (membPatch.getGroup() != null) {\n@@ -363,7 +367,7 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n                     Group group = groupDAO.find(membPatch.getGroup());\n                     if (group == null) {\n                         LOG.debug(\"Ignoring invalid group {}\", membPatch.getGroup());\n-                    } else if (assignableGroups.contains(group)) {\n+                    } else if (assignableGroups.contains(group.getKey())) {\n                         membership = entityFactory.newEntity(AMembership.class);\n                         membership.setRightEnd(group);\n                         membership.setLeftEnd(anyObject);"},{"sha":"eeef4fd78b4c01d0509aa139fb5ebb14d2c6f006","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":16,"deletions":12,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c1db2405b431e4782b15195dee83732754f64e8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c1db2405b431e4782b15195dee83732754f64e8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=1c1db2405b431e4782b15195dee83732754f64e8","patch":"@@ -196,14 +196,15 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n             assignableCond.setRealmFullPath(user.getRealm().getFullPath());\n \n             // relationships\n-            List<AnyObject> assignableAnyObjects =\n-                    searchDAO.search(SearchCond.getLeafCond(assignableCond), AnyTypeKind.ANY_OBJECT);\n+            Collection<String> assignableAnyObjects = CollectionUtils.collect(\n+                    searchDAO.search(SearchCond.getLeafCond(assignableCond), AnyTypeKind.ANY_OBJECT),\n+                    EntityUtils.keyTransformer());\n \n             for (RelationshipTO relationshipTO : userTO.getRelationships()) {\n                 AnyObject otherEnd = anyObjectDAO.find(relationshipTO.getRightKey());\n                 if (otherEnd == null) {\n                     LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n-                } else if (assignableAnyObjects.contains(otherEnd)) {\n+                } else if (assignableAnyObjects.contains(otherEnd.getKey())) {\n                     RelationshipType relationshipType = relationshipTypeDAO.find(relationshipTO.getType());\n                     if (relationshipType == null) {\n                         LOG.debug(\"Ignoring invalid relationship type {}\", relationshipTO.getType());\n@@ -227,8 +228,9 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n             }\n \n             // memberships\n-            List<Group> assignableGroups =\n-                    searchDAO.search(SearchCond.getLeafCond(assignableCond), AnyTypeKind.GROUP);\n+            Collection<String> assignableGroups = CollectionUtils.collect(\n+                    searchDAO.search(SearchCond.getLeafCond(assignableCond), AnyTypeKind.GROUP),\n+                    EntityUtils.keyTransformer());\n \n             for (MembershipTO membershipTO : userTO.getMemberships()) {\n                 Group group = membershipTO.getRightKey() == null\n@@ -237,7 +239,7 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n                 if (group == null) {\n                     LOG.debug(\"Ignoring invalid group \"\n                             + membershipTO.getRightKey() + \" / \" + membershipTO.getGroupName());\n-                } else if (assignableGroups.contains(group)) {\n+                } else if (assignableGroups.contains(group.getKey())) {\n                     UMembership membership = entityFactory.newEntity(UMembership.class);\n                     membership.setRightEnd(group);\n                     membership.setLeftEnd(user);\n@@ -389,8 +391,9 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n         Set<String> toBeProvisioned = new HashSet<>();\n \n         // relationships\n-        List<AnyObject> assignableAnyObjects =\n-                searchDAO.searchAssignable(user.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT);\n+        Collection<String> assignableAnyObjects = CollectionUtils.collect(\n+                searchDAO.searchAssignable(user.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT),\n+                EntityUtils.keyTransformer());\n \n         for (RelationshipPatch patch : userPatch.getRelationships()) {\n             if (patch.getRelationshipTO() != null) {\n@@ -411,7 +414,7 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n                         AnyObject otherEnd = anyObjectDAO.find(patch.getRelationshipTO().getRightKey());\n                         if (otherEnd == null) {\n                             LOG.debug(\"Ignoring invalid any object {}\", patch.getRelationshipTO().getRightKey());\n-                        } else if (assignableAnyObjects.contains(otherEnd)) {\n+                        } else if (assignableAnyObjects.contains(otherEnd.getKey())) {\n                             relationship = entityFactory.newEntity(URelationship.class);\n                             relationship.setType(relationshipType);\n                             relationship.setRightEnd(otherEnd);\n@@ -437,8 +440,9 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         // memberships\n-        List<Group> assignableGroups =\n-                searchDAO.searchAssignable(user.getRealm().getFullPath(), AnyTypeKind.GROUP);\n+        Collection<String> assignableGroups = CollectionUtils.collect(\n+                searchDAO.searchAssignable(user.getRealm().getFullPath(), AnyTypeKind.GROUP),\n+                EntityUtils.keyTransformer());\n \n         for (MembershipPatch membPatch : userPatch.getMemberships()) {\n             if (membPatch.getGroup() != null) {\n@@ -459,7 +463,7 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n                     Group group = groupDAO.find(membPatch.getGroup());\n                     if (group == null) {\n                         LOG.debug(\"Ignoring invalid group {}\", membPatch.getGroup());\n-                    } else if (assignableGroups.contains(group)) {\n+                    } else if (assignableGroups.contains(group.getKey())) {\n                         membership = entityFactory.newEntity(UMembership.class);\n                         membership.setRightEnd(group);\n                         membership.setLeftEnd(user);"}]}