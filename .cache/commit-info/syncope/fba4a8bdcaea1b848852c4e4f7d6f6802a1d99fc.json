{"sha":"fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmZiYTRhOGJkY2FlYTFiODQ4ODUyYzRlNGY3ZDZmNjgwMmExZDk5ZmM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-12-12T15:37:00Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-12-12T15:53:38Z"},"message":"[SYNCOPE-152] Create, replace and delete Users and Groups","tree":{"sha":"4ce3e947e52bb9c8a4559e51e3cf02a296281ecf","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4ce3e947e52bb9c8a4559e51e3cf02a296281ecf"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0c411285d63efdb59ce301fa87ecbf067e74a633","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0c411285d63efdb59ce301fa87ecbf067e74a633","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0c411285d63efdb59ce301fa87ecbf067e74a633"}],"stats":{"total":995,"additions":807,"deletions":188},"files":[{"sha":"3a4df520b4bc067d5a8606b88df1436acdf7f353","filename":"deb/console/pom.xml","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/deb%2Fconsole%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/deb%2Fconsole%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/deb%2Fconsole%2Fpom.xml?ref=fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc","patch":"@@ -38,6 +38,12 @@ under the License.\n   </properties>\n   \n   <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.client</groupId>\n+      <artifactId>syncope-client-console</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.apache.syncope.ext.camel</groupId>\n       <artifactId>syncope-ext-camel-client-console</artifactId>\n@@ -49,8 +55,8 @@ under the License.\n       <version>${project.version}</version>\n     </dependency>\n     <dependency>\n-      <groupId>org.apache.syncope.client</groupId>\n-      <artifactId>syncope-client-console</artifactId>\n+      <groupId>org.apache.syncope.ext.scimv2</groupId>\n+      <artifactId>syncope-ext-scimv2-client-console</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n     \n@@ -102,7 +108,7 @@ under the License.\n         <filtering>true</filtering>\n       </resource>\n       <resource>\n-\t<directory>${project.basedir}/../../ext/saml2sp/agent/src/main/resources</directory>\n+        <directory>${project.basedir}/../../ext/saml2sp/agent/src/main/resources</directory>\n         <includes>\n           <include>saml2sp-agent.properties</include>\n         </includes>"},{"sha":"a17d476c7ddd351123145a1567ac766d4805fdc3","filename":"deb/core/pom.xml","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/deb%2Fcore%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/deb%2Fcore%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/deb%2Fcore%2Fpom.xml?ref=fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc","patch":"@@ -85,7 +85,17 @@ under the License.\n       <artifactId>syncope-ext-saml2sp-persistence-jpa</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n-        \n+    <dependency>\n+      <groupId>org.apache.syncope.ext.scimv2</groupId>\n+      <artifactId>syncope-ext-scimv2-rest-cxf</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.scimv2</groupId>\n+      <artifactId>syncope-ext-scimv2-scim-rest-cxf</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.apache.syncope.ext</groupId>\n       <artifactId>syncope-ext-swagger-ui</artifactId>\n@@ -191,7 +201,7 @@ under the License.\n         <filtering>true</filtering>\n       </resource>\n       <resource>\n-\t<directory>${project.basedir}/../../ext/saml2sp/logic/src/main/resources</directory>\n+        <directory>${project.basedir}/../../ext/saml2sp/logic/src/main/resources</directory>\n         <includes>\n           <include>saml2sp-logic.properties</include>\n         </includes>"},{"sha":"521e2e381bdfb3f3cd0e874ab1ae5352dfe7e129","filename":"ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMManagerConf.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMManagerConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMManagerConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMManagerConf.java?ref=fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc","patch":"@@ -24,16 +24,16 @@ public class SCIMManagerConf implements Serializable {\n \n     private static final long serialVersionUID = -1443695570207406613L;\n \n-    private String manager;\n+    private String key;\n \n     private String displayName;\n \n-    public String getManager() {\n-        return manager;\n+    public String getKey() {\n+        return key;\n     }\n \n-    public void setManager(final String manager) {\n-        this.manager = manager;\n+    public void setKey(final String key) {\n+        this.key = key;\n     }\n \n     public String getDisplayName() {"},{"sha":"c72c9bd589aef33c01294341f3559c7989fcf3b4","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java","status":"modified","additions":243,"deletions":15,"changes":258,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java?ref=fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc","patch":"@@ -19,24 +19,30 @@\n package org.apache.syncope.core.logic;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.scim.SCIMComplexConf;\n import org.apache.syncope.common.lib.scim.SCIMConf;\n+import org.apache.syncope.common.lib.scim.SCIMUserAddressConf;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.logic.scim.SCIMConfManager;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.spring.security.AuthDataAccessor;\n+import org.apache.syncope.ext.scimv2.api.BadRequestException;\n import org.apache.syncope.ext.scimv2.api.data.Value;\n import org.apache.syncope.ext.scimv2.api.data.Group;\n import org.apache.syncope.ext.scimv2.api.data.Member;\n@@ -48,6 +54,7 @@\n import org.apache.syncope.ext.scimv2.api.data.SCIMUserAddress;\n import org.apache.syncope.ext.scimv2.api.data.SCIMUserManager;\n import org.apache.syncope.ext.scimv2.api.data.SCIMUserName;\n+import org.apache.syncope.ext.scimv2.api.type.ErrorType;\n import org.apache.syncope.ext.scimv2.api.type.Function;\n import org.apache.syncope.ext.scimv2.api.type.Resource;\n import org.slf4j.Logger;\n@@ -60,6 +67,13 @@ public class SCIMDataBinder {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(SCIMDataBinder.class);\n \n+    private static final List<String> USER_SCHEMAS = Collections.singletonList(Resource.User.schema());\n+\n+    private static final List<String> ENTERPRISE_USER_SCHEMAS =\n+            Arrays.asList(Resource.User.schema(), Resource.EnterpriseUser.schema());\n+\n+    private static final List<String> GROUP_SCHEMAS = Collections.singletonList(Resource.Group.schema());\n+\n     @Autowired\n     private SCIMConfManager confManager;\n \n@@ -196,49 +210,42 @@ public SCIMUser toSCIMUser(\n \n                 user.setDisplayName(attrs.get(conf.getUserConf().getDisplayName()).getValues().get(0));\n             }\n-\n             if (output(attributes, excludedAttributes, \"nickName\")\n                     && conf.getUserConf().getNickName() != null\n                     && attrs.containsKey(conf.getUserConf().getNickName())) {\n \n                 user.setNickName(attrs.get(conf.getUserConf().getNickName()).getValues().get(0));\n             }\n-\n             if (output(attributes, excludedAttributes, \"profileUrl\")\n                     && conf.getUserConf().getProfileUrl() != null\n                     && attrs.containsKey(conf.getUserConf().getProfileUrl())) {\n \n                 user.setProfileUrl(attrs.get(conf.getUserConf().getProfileUrl()).getValues().get(0));\n             }\n-\n             if (output(attributes, excludedAttributes, \"title\")\n                     && conf.getUserConf().getTitle() != null\n                     && attrs.containsKey(conf.getUserConf().getTitle())) {\n \n                 user.setTitle(attrs.get(conf.getUserConf().getTitle()).getValues().get(0));\n             }\n-\n             if (output(attributes, excludedAttributes, \"userType\")\n                     && conf.getUserConf().getUserType() != null\n                     && attrs.containsKey(conf.getUserConf().getUserType())) {\n \n                 user.setUserType(attrs.get(conf.getUserConf().getUserType()).getValues().get(0));\n             }\n-\n             if (output(attributes, excludedAttributes, \"preferredLanguage\")\n                     && conf.getUserConf().getPreferredLanguage() != null\n                     && attrs.containsKey(conf.getUserConf().getPreferredLanguage())) {\n \n                 user.setPreferredLanguage(attrs.get(conf.getUserConf().getPreferredLanguage()).getValues().get(0));\n             }\n-\n             if (output(attributes, excludedAttributes, \"locale\")\n                     && conf.getUserConf().getLocale() != null\n                     && attrs.containsKey(conf.getUserConf().getLocale())) {\n \n                 user.setLocale(attrs.get(conf.getUserConf().getLocale()).getValues().get(0));\n             }\n-\n             if (output(attributes, excludedAttributes, \"timezone\")\n                     && conf.getUserConf().getTimezone() != null\n                     && attrs.containsKey(conf.getUserConf().getTimezone())) {\n@@ -289,7 +296,6 @@ public SCIMUser toSCIMUser(\n                     }\n                 });\n             }\n-\n             if (output(attributes, excludedAttributes, \"x509Certificates\")) {\n                 conf.getUserConf().getX509Certificates().stream().\n                         filter(certificate -> attrs.containsKey(certificate)).\n@@ -341,12 +347,12 @@ public SCIMUser toSCIMUser(\n \n                     SCIMUserManager manager = new SCIMUserManager();\n \n-                    if (conf.getEnterpriseUserConf().getManager().getManager() != null\n-                            && attrs.containsKey(conf.getEnterpriseUserConf().getManager().getManager())) {\n+                    if (conf.getEnterpriseUserConf().getManager().getKey() != null\n+                            && attrs.containsKey(conf.getEnterpriseUserConf().getManager().getKey())) {\n \n                         try {\n                             UserTO userManager = userLogic.read(attrs.get(\n-                                    conf.getEnterpriseUserConf().getManager().getManager()).getValues().get(0));\n+                                    conf.getEnterpriseUserConf().getManager().getKey()).getValues().get(0));\n                             manager.setValue(userManager.getKey());\n                             manager.setRef(\n                                     StringUtils.substringBefore(location, \"/Users\") + \"/Users/\" + userManager.getKey());\n@@ -367,8 +373,7 @@ public SCIMUser toSCIMUser(\n                                 }\n                             }\n                         } catch (Exception e) {\n-                            LOG.error(\"Could not read user {}\",\n-                                    conf.getEnterpriseUserConf().getManager().getManager(), e);\n+                            LOG.error(\"Could not read user {}\", conf.getEnterpriseUserConf().getManager().getKey(), e);\n                         }\n                     }\n \n@@ -416,6 +421,217 @@ public SCIMUser toSCIMUser(\n         return user;\n     }\n \n+    private <E extends Enum<?>> void fill(\n+            final Set<AttrTO> attrs,\n+            final List<SCIMComplexConf<E>> confs,\n+            final List<SCIMComplexValue> values) {\n+\n+        values.forEach(value -> {\n+            if (value.getType() != null) {\n+                Optional<SCIMComplexConf<E>> conf = confs.stream().\n+                        filter(object -> value.getType().equals(object.getType().name())).findFirst();\n+                if (conf.isPresent()) {\n+                    attrs.add(new AttrTO.Builder().schema(conf.get().getValue()).value(value.getValue()).build());\n+                }\n+            }\n+        });\n+    }\n+\n+    public UserTO toUserTO(final SCIMUser user) {\n+        if (!USER_SCHEMAS.equals(user.getSchemas()) && !ENTERPRISE_USER_SCHEMAS.equals(user.getSchemas())) {\n+            throw new BadRequestException(ErrorType.invalidValue);\n+        }\n+\n+        UserTO userTO = new UserTO();\n+        userTO.setRealm(SyncopeConstants.ROOT_REALM);\n+        userTO.setKey(user.getId());\n+        userTO.setUsername(user.getUserName());\n+\n+        SCIMConf conf = confManager.get();\n+\n+        if (conf.getUserConf() != null) {\n+            if (conf.getUserConf().getName() != null && user.getName() != null) {\n+                if (conf.getUserConf().getName().getFamilyName() != null\n+                        && user.getName().getFamilyName() != null) {\n+\n+                    userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                            schema(conf.getUserConf().getName().getFamilyName()).\n+                            value(user.getName().getFamilyName()).build());\n+                }\n+                if (conf.getUserConf().getName().getFormatted() != null\n+                        && user.getName().getFormatted() != null) {\n+\n+                    userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                            schema(conf.getUserConf().getName().getFormatted()).\n+                            value(user.getName().getFormatted()).build());\n+                }\n+                if (conf.getUserConf().getName().getGivenName() != null\n+                        && user.getName().getGivenName() != null) {\n+\n+                    userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                            schema(conf.getUserConf().getName().getGivenName()).\n+                            value(user.getName().getGivenName()).build());\n+                }\n+                if (conf.getUserConf().getName().getHonorificPrefix() != null\n+                        && user.getName().getHonorificPrefix() != null) {\n+\n+                    userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                            schema(conf.getUserConf().getName().getHonorificPrefix()).\n+                            value(user.getName().getHonorificPrefix()).build());\n+                }\n+                if (conf.getUserConf().getName().getHonorificSuffix() != null\n+                        && user.getName().getHonorificSuffix() != null) {\n+\n+                    userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                            schema(conf.getUserConf().getName().getHonorificSuffix()).\n+                            value(user.getName().getHonorificSuffix()).build());\n+                }\n+                if (conf.getUserConf().getName().getMiddleName() != null\n+                        && user.getName().getMiddleName() != null) {\n+\n+                    userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                            schema(conf.getUserConf().getName().getMiddleName()).\n+                            value(user.getName().getMiddleName()).build());\n+                }\n+            }\n+\n+            if (conf.getUserConf().getDisplayName() != null && user.getDisplayName() != null) {\n+                userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                        schema(conf.getUserConf().getDisplayName()).value(user.getDisplayName()).build());\n+            }\n+            if (conf.getUserConf().getNickName() != null && user.getNickName() != null) {\n+                userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                        schema(conf.getUserConf().getNickName()).value(user.getNickName()).build());\n+            }\n+            if (conf.getUserConf().getProfileUrl() != null && user.getProfileUrl() != null) {\n+                userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                        schema(conf.getUserConf().getProfileUrl()).value(user.getProfileUrl()).build());\n+            }\n+            if (conf.getUserConf().getTitle() != null && user.getTitle() != null) {\n+                userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                        schema(conf.getUserConf().getTitle()).value(user.getTitle()).build());\n+            }\n+            if (conf.getUserConf().getUserType() != null && user.getUserType() != null) {\n+                userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                        schema(conf.getUserConf().getUserType()).value(user.getUserType()).build());\n+            }\n+            if (conf.getUserConf().getPreferredLanguage() != null && user.getPreferredLanguage() != null) {\n+                userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                        schema(conf.getUserConf().getPreferredLanguage()).value(user.getPreferredLanguage()).build());\n+            }\n+            if (conf.getUserConf().getLocale() != null && user.getLocale() != null) {\n+                userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                        schema(conf.getUserConf().getLocale()).value(user.getLocale()).build());\n+            }\n+            if (conf.getUserConf().getTimezone() != null && user.getTimezone() != null) {\n+                userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                        schema(conf.getUserConf().getTimezone()).value(user.getTimezone()).build());\n+            }\n+\n+            fill(userTO.getPlainAttrs(), conf.getUserConf().getEmails(), user.getEmails());\n+            fill(userTO.getPlainAttrs(), conf.getUserConf().getPhoneNumbers(), user.getPhoneNumbers());\n+            fill(userTO.getPlainAttrs(), conf.getUserConf().getIms(), user.getIms());\n+            fill(userTO.getPlainAttrs(), conf.getUserConf().getPhotos(), user.getPhotos());\n+\n+            user.getAddresses().stream().filter(address -> address.getType() != null).forEach(address -> {\n+                Optional<SCIMUserAddressConf> addressConf = conf.getUserConf().getAddresses().stream().\n+                        filter(object -> address.getType().equals(object.getType().name())).findFirst();\n+                if (addressConf.isPresent()) {\n+                    if (addressConf.get().getFormatted() != null && address.getFormatted() != null) {\n+                        userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                                schema(addressConf.get().getFormatted()).value(address.getFormatted()).build());\n+                    }\n+                    if (addressConf.get().getStreetAddress() != null && address.getStreetAddress() != null) {\n+                        userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                                schema(addressConf.get().getStreetAddress()).value(address.getStreetAddress()).build());\n+                    }\n+                    if (addressConf.get().getLocality() != null && address.getLocality() != null) {\n+                        userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                                schema(addressConf.get().getLocality()).value(address.getLocality()).build());\n+                    }\n+                    if (addressConf.get().getRegion() != null && address.getFormatted() != null) {\n+                        userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                                schema(addressConf.get().getFormatted()).value(address.getFormatted()).build());\n+                    }\n+                    if (addressConf.get().getPostalCode() != null && address.getPostalCode() != null) {\n+                        userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                                schema(addressConf.get().getPostalCode()).value(address.getPostalCode()).build());\n+                    }\n+                    if (addressConf.get().getCountry() != null && address.getCountry() != null) {\n+                        userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                                schema(addressConf.get().getCountry()).value(address.getCountry()).build());\n+                    }\n+                }\n+            });\n+\n+            for (int i = 0; i < user.getX509Certificates().size(); i++) {\n+                Value certificate = user.getX509Certificates().get(i);\n+                if (conf.getUserConf().getX509Certificates().size() > i) {\n+                    userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                            schema(conf.getUserConf().getX509Certificates().get(i)).\n+                            value(certificate.getValue()).build());\n+                }\n+            }\n+        }\n+\n+        if (conf.getEnterpriseUserConf() != null) {\n+            if (conf.getEnterpriseUserConf().getEmployeeNumber() != null\n+                    && user.getEnterpriseInfo().getEmployeeNumber() != null) {\n+\n+                userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                        schema(conf.getEnterpriseUserConf().getEmployeeNumber()).\n+                        value(user.getEnterpriseInfo().getEmployeeNumber()).build());\n+            }\n+            if (conf.getEnterpriseUserConf().getCostCenter() != null\n+                    && user.getEnterpriseInfo().getCostCenter() != null) {\n+\n+                userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                        schema(conf.getEnterpriseUserConf().getCostCenter()).\n+                        value(user.getEnterpriseInfo().getCostCenter()).build());\n+            }\n+            if (conf.getEnterpriseUserConf().getOrganization() != null\n+                    && user.getEnterpriseInfo().getOrganization() != null) {\n+\n+                userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                        schema(conf.getEnterpriseUserConf().getOrganization()).\n+                        value(user.getEnterpriseInfo().getOrganization()).build());\n+            }\n+            if (conf.getEnterpriseUserConf().getDivision() != null\n+                    && user.getEnterpriseInfo().getDivision() != null) {\n+\n+                userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                        schema(conf.getEnterpriseUserConf().getDivision()).\n+                        value(user.getEnterpriseInfo().getDivision()).build());\n+            }\n+            if (conf.getEnterpriseUserConf().getDepartment() != null\n+                    && user.getEnterpriseInfo().getDepartment() != null) {\n+\n+                userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                        schema(conf.getEnterpriseUserConf().getDepartment()).\n+                        value(user.getEnterpriseInfo().getDepartment()).build());\n+            }\n+            if (conf.getEnterpriseUserConf().getManager() != null\n+                    && conf.getEnterpriseUserConf().getManager().getKey() != null\n+                    && user.getEnterpriseInfo().getManager() != null\n+                    && user.getEnterpriseInfo().getManager().getValue() != null) {\n+\n+                userTO.getPlainAttrs().add(new AttrTO.Builder().\n+                        schema(conf.getEnterpriseUserConf().getManager().getKey()).\n+                        value(user.getEnterpriseInfo().getManager().getValue()).build());\n+            }\n+        }\n+\n+        user.getGroups().forEach(group -> {\n+            userTO.getMemberships().add(new MembershipTO.Builder().group(group.getValue()).build());\n+        });\n+\n+        user.getRoles().forEach(role -> {\n+            userTO.getRoles().add(role.getValue());\n+        });\n+\n+        return userTO;\n+    }\n+\n     public SCIMGroup toSCIMGroup(\n             final GroupTO groupTO,\n             final String location,\n@@ -455,12 +671,24 @@ public SCIMGroup toSCIMGroup(\n                     group.getMembers().add(new Member(\n                             userTO.getKey(),\n                             StringUtils.substringBefore(location, \"/Groups\") + \"/Users/\" + userTO.getKey(),\n-                            userTO.getUsername(),\n-                            Resource.User));\n+                            userTO.getUsername()));\n                 });\n             }\n         }\n \n         return group;\n     }\n+\n+    public GroupTO toGroupTO(final SCIMGroup group) {\n+        if (!GROUP_SCHEMAS.equals(group.getSchemas())) {\n+            throw new BadRequestException(ErrorType.invalidValue);\n+        }\n+\n+        GroupTO groupTO = new GroupTO();\n+        groupTO.setRealm(SyncopeConstants.ROOT_REALM);\n+        groupTO.setKey(group.getId());\n+        groupTO.setName(group.getDisplayName());\n+        return groupTO;\n+    }\n+\n }"},{"sha":"34eded014ef34af53f6052639787ce37674baba4","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMLogic.java?ref=fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc","patch":"@@ -28,11 +28,11 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import javax.ws.rs.NotFoundException;\n import javax.ws.rs.core.UriBuilder;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.scim.SCIMConf;\n import org.apache.syncope.core.logic.scim.SCIMConfManager;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.ext.scimv2.api.data.AuthenticationScheme;\n import org.apache.syncope.ext.scimv2.api.data.BulkConfigurationOption;\n import org.apache.syncope.ext.scimv2.api.data.ConfigurationOption;\n@@ -182,7 +182,7 @@ public String schema(final String schema) {\n \n         String found = SCHEMA_MAP.get(schema);\n         if (found == null) {\n-            throw new NotFoundException(\"Schema \" + schema);\n+            throw new NotFoundException(\"Schema \" + schema + \" not found\");\n         }\n \n         return found;"},{"sha":"8948cbbd762aae15effa3b5ebd84256d95a615a2","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondConverter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondConverter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondConverter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondConverter.java?ref=fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc","patch":"@@ -21,7 +21,7 @@\n import org.antlr.v4.runtime.CharStreams;\n import org.antlr.v4.runtime.CommonTokenStream;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n-import org.apache.syncope.ext.scimv2.api.SCIMBadRequestException;\n+import org.apache.syncope.ext.scimv2.api.BadRequestException;\n import org.apache.syncope.ext.scimv2.api.type.ErrorType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -45,8 +45,8 @@ public static SearchCond convert(final SearchCondVisitor visitor, final String f\n         try {\n             return visitor.visit(parser.scimFilter());\n         } catch (Exception e) {\n-            LOG.error(\"Could not parse {}\", filter, e);\n-            throw new SCIMBadRequestException(ErrorType.invalidFilter, e.getMessage());\n+            LOG.error(\"Could not parse '{}'\", filter, e);\n+            throw new BadRequestException(ErrorType.invalidFilter, \"Could not parse '\" + filter + \"'\");\n         }\n     }\n "},{"sha":"d67e3f321983e6af1174c73da138283768af8dde","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondVisitor.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondVisitor.java?ref=fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc","patch":"@@ -117,10 +117,10 @@ public AttributeCond createAttributeCond(final String schema) {\n                 }\n \n                 if (conf.getEnterpriseUserConf().getManager() != null\n-                        && conf.getEnterpriseUserConf().getManager().getManager() != null) {\n+                        && conf.getEnterpriseUserConf().getManager().getKey() != null) {\n \n                     attributeCond = new AttributeCond();\n-                    attributeCond.setSchema(conf.getEnterpriseUserConf().getManager().getManager());\n+                    attributeCond.setSchema(conf.getEnterpriseUserConf().getManager().getKey());\n                 }\n             }\n         }"},{"sha":"9ec456d56f43eacc81917f82c3c6a3e43eff5ec7","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/BadRequestException.java","status":"renamed","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2FBadRequestException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2FBadRequestException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2FBadRequestException.java?ref=fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc","patch":"@@ -18,21 +18,20 @@\n  */\n package org.apache.syncope.ext.scimv2.api;\n \n-import javax.ws.rs.BadRequestException;\n import org.apache.syncope.ext.scimv2.api.type.ErrorType;\n \n-public class SCIMBadRequestException extends BadRequestException {\n+public class BadRequestException extends RuntimeException {\n \n     private static final long serialVersionUID = -2588839750716910491L;\n \n     private final ErrorType errorType;\n \n-    public SCIMBadRequestException(final ErrorType errorType) {\n+    public BadRequestException(final ErrorType errorType) {\n         super();\n         this.errorType = errorType;\n     }\n \n-    public SCIMBadRequestException(final ErrorType errorType, final String detail) {\n+    public BadRequestException(final ErrorType errorType, final String detail) {\n         super(detail);\n         this.errorType = errorType;\n     }","previous_filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/SCIMBadRequestException.java"},{"sha":"d211a35fdc961ff74cb449f800d0a14d8b3c6c8d","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/ConflictException.java","status":"removed","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0c411285d63efdb59ce301fa87ecbf067e74a633/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2FConflictException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0c411285d63efdb59ce301fa87ecbf067e74a633/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2FConflictException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2FConflictException.java?ref=0c411285d63efdb59ce301fa87ecbf067e74a633","patch":"@@ -1,36 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.ext.scimv2.api;\n-\n-import javax.ws.rs.ClientErrorException;\n-import javax.ws.rs.core.Response;\n-\n-public class ConflictException extends ClientErrorException {\n-\n-    private static final long serialVersionUID = -6845464464868163175L;\n-\n-    public ConflictException() {\n-        super(Response.Status.CONFLICT);\n-    }\n-\n-    public ConflictException(final String message) {\n-        super(message, Response.Status.CONFLICT);\n-    }\n-\n-}"},{"sha":"e6ab1952859932b51c49430df4c14318509aa080","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/PayloadTooLargeException.java","status":"removed","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0c411285d63efdb59ce301fa87ecbf067e74a633/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2FPayloadTooLargeException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0c411285d63efdb59ce301fa87ecbf067e74a633/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2FPayloadTooLargeException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2FPayloadTooLargeException.java?ref=0c411285d63efdb59ce301fa87ecbf067e74a633","patch":"@@ -1,36 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.ext.scimv2.api;\n-\n-import javax.ws.rs.ClientErrorException;\n-import javax.ws.rs.core.Response;\n-\n-public class PayloadTooLargeException extends ClientErrorException {\n-\n-    private static final long serialVersionUID = -3980136349506530672L;\n-\n-    public PayloadTooLargeException() {\n-        super(Response.Status.REQUEST_ENTITY_TOO_LARGE);\n-    }\n-\n-    public PayloadTooLargeException(final String message) {\n-        super(message, Response.Status.REQUEST_ENTITY_TOO_LARGE);\n-    }\n-\n-}"},{"sha":"f2513625b48459257dde415e7f1fe7e56f532c40","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Member.java","status":"modified","additions":2,"deletions":14,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FMember.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FMember.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FMember.java?ref=fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc","patch":"@@ -18,32 +18,20 @@\n  */\n package org.apache.syncope.ext.scimv2.api.data;\n \n-import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n-import org.apache.syncope.ext.scimv2.api.type.Resource;\n \n-@JsonPropertyOrder({ \"value\", \"$ref\", \"display\", \"type\" })\n+@JsonPropertyOrder({ \"value\", \"$ref\", \"display\" })\n public class Member extends Reference {\n \n     private static final long serialVersionUID = 75245960461062907L;\n \n-    @JsonIgnore\n-    private final Resource type;\n-\n     public Member(\n             @JsonProperty(\"value\") final String value,\n             @JsonProperty(\"$ref\") final String ref,\n-            @JsonProperty(\"display\") final String display,\n-            @JsonProperty(\"type\") final Resource type) {\n+            @JsonProperty(\"display\") final String display) {\n \n         super(value, display, ref);\n-        this.type = type;\n-    }\n-\n-    @JsonProperty\n-    public String getType() {\n-        return type == null ? null : type.name();\n     }\n \n }"},{"sha":"cf1813f607926cd2e2328ed6e1ce37ad1d27c379","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMError.java","status":"modified","additions":12,"deletions":7,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMError.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMError.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMError.java?ref=fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc","patch":"@@ -22,35 +22,40 @@\n import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.annotation.JsonFormat.Shape;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import java.util.Arrays;\n import java.util.List;\n-import org.apache.syncope.ext.scimv2.api.SCIMBadRequestException;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.ext.scimv2.api.BadRequestException;\n import org.apache.syncope.ext.scimv2.api.type.ErrorType;\n import org.apache.syncope.ext.scimv2.api.type.Resource;\n \n+@JsonPropertyOrder({ \"schemas\", \"scimType\", \"detail\", \"status\" })\n public class SCIMError extends SCIMBean {\n \n     private static final long serialVersionUID = -8836902509266522394L;\n \n     private final List<String> schemas = Arrays.asList(Resource.Error.schema());\n \n-    private final ErrorType scimType;\n-\n-    private final String detail;\n+    private ErrorType scimType;\n \n     @JsonFormat(shape = Shape.STRING)\n-    private final int status = 400;\n+    private int status;\n+\n+    private final String detail;\n \n-    public SCIMError(final SCIMBadRequestException ex) {\n-        this(ex.getErrorType(), ex.getMessage());\n+    public SCIMError(final BadRequestException ex) {\n+        this(ex.getErrorType(), Response.Status.BAD_REQUEST.getStatusCode(), ex.getMessage());\n     }\n \n     @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n     public SCIMError(\n             @JsonProperty(\"scimType\") final ErrorType scimType,\n+            @JsonProperty(\"status\") final int status,\n             @JsonProperty(\"detail\") final String detail) {\n \n         this.scimType = scimType;\n+        this.status = status;\n         this.detail = detail;\n     }\n "},{"sha":"8ae45459a1088891f187bdff3469613ae34f598a","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMGroup.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMGroup.java?ref=fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc","patch":"@@ -31,7 +31,7 @@ public class SCIMGroup extends SCIMResource {\n \n     private static final long serialVersionUID = -2935466041674390279L;\n \n-    private final String displayName;\n+    private String displayName;\n \n     private final List<Member> members = new ArrayList<>();\n \n@@ -45,6 +45,10 @@ public SCIMGroup(\n         this.displayName = displayName;\n     }\n \n+    public void setDisplayName(final String displayName) {\n+        this.displayName = displayName;\n+    }\n+\n     public String getDisplayName() {\n         return displayName;\n     }"},{"sha":"8010218a750ff3b0576e8615038e1a57bd45cc01","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fservice%2FGroupService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fservice%2FGroupService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fservice%2FGroupService.java?ref=fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc","patch":"@@ -37,22 +37,22 @@ public interface GroupService extends ReadService<SCIMGroup> {\n     @POST\n     @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })\n     @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })\n-    Response create();\n+    Response create(SCIMGroup group);\n \n-    @PUT\n+    @PATCH\n     @Path(\"{id}\")\n     @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })\n     @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })\n-    Response replace(@NotNull @PathParam(\"id\") String id);\n+    Response update(@NotNull @PathParam(\"id\") String id);\n \n-    @DELETE\n+    @PUT\n     @Path(\"{id}\")\n     @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })\n-    Response delete(@NotNull @PathParam(\"id\") String id);\n+    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })\n+    Response replace(@NotNull @PathParam(\"id\") String id, SCIMGroup group);\n \n-    @PATCH\n+    @DELETE\n     @Path(\"{id}\")\n     @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })\n-    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })\n-    Response update(@NotNull @PathParam(\"id\") String id);\n+    Response delete(@NotNull @PathParam(\"id\") String id);\n }"},{"sha":"62ddc21be1cc6c3c26e2a0b20c08912fbf9ee492","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fservice%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fservice%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fservice%2FUserService.java?ref=fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc","patch":"@@ -37,22 +37,23 @@ public interface UserService extends ReadService<SCIMUser> {\n     @POST\n     @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })\n     @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })\n-    Response create();\n+    Response create(SCIMUser user);\n+\n+    @PATCH\n+    @Path(\"{id}\")\n+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })\n+    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })\n+    Response update(@NotNull @PathParam(\"id\") String id);\n \n     @PUT\n     @Path(\"{id}\")\n     @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })\n     @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })\n-    Response replace(@NotNull @PathParam(\"id\") String id);\n+    Response replace(@NotNull @PathParam(\"id\") String id, SCIMUser user);\n \n     @DELETE\n     @Path(\"{id}\")\n     @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })\n     Response delete(@NotNull @PathParam(\"id\") String id);\n \n-    @PATCH\n-    @Path(\"{id}\")\n-    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })\n-    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })\n-    Response update(@NotNull @PathParam(\"id\") String id);\n }"},{"sha":"98a21ef3ab54948ac52cc986b6d2afc2e112b91b","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java","status":"modified","additions":15,"deletions":18,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMExceptionMapper.java?ref=fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc","patch":"@@ -23,7 +23,6 @@\n import javax.validation.ValidationException;\n import javax.ws.rs.ForbiddenException;\n import javax.ws.rs.NotAuthorizedException;\n-import javax.ws.rs.NotFoundException;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.Response.ResponseBuilder;\n import javax.ws.rs.ext.ExceptionMapper;\n@@ -36,12 +35,11 @@\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n import org.apache.syncope.core.persistence.api.dao.MalformedPathException;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.apache.syncope.core.workflow.api.WorkflowException;\n-import org.apache.syncope.ext.scimv2.api.ConflictException;\n-import org.apache.syncope.ext.scimv2.api.PayloadTooLargeException;\n-import org.apache.syncope.ext.scimv2.api.SCIMBadRequestException;\n+import org.apache.syncope.ext.scimv2.api.BadRequestException;\n import org.apache.syncope.ext.scimv2.api.data.SCIMError;\n import org.apache.syncope.ext.scimv2.api.type.ErrorType;\n import org.identityconnectors.framework.common.exceptions.ConfigurationException;\n@@ -89,13 +87,14 @@ public Response toResponse(final Exception ex) {\n \n         if (ex instanceof AccessDeniedException\n                 || ex instanceof ForbiddenException\n-                || ex instanceof NotAuthorizedException\n-                || ex instanceof NotFoundException\n-                || ex instanceof ConflictException\n-                || ex instanceof PayloadTooLargeException) {\n+                || ex instanceof NotAuthorizedException) {\n \n             // leaves the default exception processing\n             builder = null;\n+        } else if (ex instanceof NotFoundException) {\n+            return Response.status(Response.Status.NOT_FOUND).entity(new SCIMError(null,\n+                    Response.Status.NOT_FOUND.getStatusCode(), ExceptionUtils.getRootCauseMessage(ex))).\n+                    build();\n         } else if (ex instanceof SyncopeClientException) {\n             SyncopeClientException sce = (SyncopeClientException) ex;\n             builder = builder(sce.getType(), ExceptionUtils.getRootCauseMessage(ex));\n@@ -188,8 +187,8 @@ private ResponseBuilder processBadRequestExceptions(final Exception ex) {\n             return builder(ClientExceptionType.InvalidValues, ExceptionUtils.getRootCauseMessage(ex));\n         } else if (ex instanceof MalformedPathException) {\n             return builder(ClientExceptionType.InvalidPath, ExceptionUtils.getRootCauseMessage(ex));\n-        } else if (ex instanceof SCIMBadRequestException) {\n-            return Response.status(Response.Status.BAD_REQUEST).entity(new SCIMError((SCIMBadRequestException) ex));\n+        } else if (ex instanceof BadRequestException) {\n+            return Response.status(Response.Status.BAD_REQUEST).entity(new SCIMError((BadRequestException) ex));\n         }\n \n         return null;\n@@ -198,15 +197,13 @@ private ResponseBuilder processBadRequestExceptions(final Exception ex) {\n     private ResponseBuilder builder(final ClientExceptionType hType, final String msg) {\n         ResponseBuilder builder = Response.status(hType.getResponseStatus());\n \n-        if (hType.getResponseStatus() == Response.Status.BAD_REQUEST) {\n-            ErrorType scimType = null;\n-            if (hType.name().startsWith(\"Invalid\") || hType == ClientExceptionType.RESTValidation) {\n-                scimType = ErrorType.invalidValue;\n-            }\n-\n-            builder = builder.entity(new SCIMError(scimType, msg));\n+        ErrorType scimType = null;\n+        if (hType.name().startsWith(\"Invalid\") || hType == ClientExceptionType.RESTValidation) {\n+            scimType = ErrorType.invalidValue;\n+        } else if (hType == ClientExceptionType.DataIntegrityViolation) {\n+            scimType = ErrorType.uniqueness;\n         }\n \n-        return builder;\n+        return builder.entity(new SCIMError(scimType, hType.getResponseStatus().getStatusCode(), msg));\n     }\n }"},{"sha":"6e2715f5dc2644311ace5fc9436c9907438b6020","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java","status":"modified","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java?ref=fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc","patch":"@@ -19,8 +19,12 @@\n package org.apache.syncope.ext.scimv2.cxf.service;\n \n import java.util.Collections;\n+import java.util.Date;\n import java.util.List;\n import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.EntityTag;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.Response.ResponseBuilder;\n import javax.ws.rs.core.UriInfo;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -37,6 +41,9 @@\n import org.apache.syncope.core.logic.scim.SearchCondConverter;\n import org.apache.syncope.core.logic.scim.SearchCondVisitor;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.ext.scimv2.api.data.ListResponse;\n@@ -57,6 +64,10 @@\n     @Context\n     protected MessageContext messageContext;\n \n+    private UserDAO userDAO;\n+\n+    private GroupDAO groupDAO;\n+\n     private UserLogic userLogic;\n \n     private GroupLogic groupLogic;\n@@ -65,6 +76,24 @@\n \n     private SCIMConfManager confManager;\n \n+    protected UserDAO userDAO() {\n+        synchronized (this) {\n+            if (userDAO == null) {\n+                userDAO = ApplicationContextProvider.getApplicationContext().getBean(UserDAO.class);\n+            }\n+        }\n+        return userDAO;\n+    }\n+\n+    protected GroupDAO groupDAO() {\n+        synchronized (this) {\n+            if (groupDAO == null) {\n+                groupDAO = ApplicationContextProvider.getApplicationContext().getBean(GroupDAO.class);\n+            }\n+        }\n+        return groupDAO;\n+    }\n+\n     protected UserLogic userLogic() {\n         synchronized (this) {\n             if (userLogic == null) {\n@@ -92,6 +121,19 @@ protected SCIMDataBinder binder() {\n         return binder;\n     }\n \n+    protected AnyDAO<?> anyDAO(final Resource type) {\n+        switch (type) {\n+            case User:\n+                return userDAO();\n+\n+            case Group:\n+                return groupDAO();\n+\n+            default:\n+                throw new UnsupportedOperationException();\n+        }\n+    }\n+\n     protected AbstractAnyLogic<?, ?> anyLogic(final Resource type) {\n         switch (type) {\n             case User:\n@@ -114,6 +156,28 @@ protected SCIMConfManager confManager() {\n         return confManager;\n     }\n \n+    protected Response createResponse(final String key, final SCIMResource resource) {\n+        return Response.created(uriInfo.getAbsolutePathBuilder().path(key).build()).\n+                entity(resource).\n+                build();\n+    }\n+\n+    protected Response updateResponse(final String key, final SCIMResource resource) {\n+        return Response.ok(uriInfo.getAbsolutePathBuilder().path(key).build()).\n+                entity(resource).\n+                build();\n+    }\n+\n+    protected ResponseBuilder checkETag(final Resource resource, final String key) {\n+        Date lastChange = anyDAO(resource).findLastChange(key);\n+        if (lastChange == null) {\n+            throw new NotFoundException(\"Resource\" + key + \" not found\");\n+        }\n+\n+        return messageContext.getRequest().\n+                evaluatePreconditions(new EntityTag(String.valueOf(lastChange.getTime()), true));\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     protected ListResponse<R> doSearch(\n             final Resource type,"},{"sha":"fc7757356675dea28e0f5ee3201b0b6da07c9d21","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java","status":"modified","additions":128,"deletions":7,"changes":135,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java?ref=fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc","patch":"@@ -19,21 +19,64 @@\n package org.apache.syncope.ext.scimv2.cxf.service;\n \n import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.Response.ResponseBuilder;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.AnyOperations;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.patch.MembershipPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.ext.scimv2.api.BadRequestException;\n import org.apache.syncope.ext.scimv2.api.data.ListResponse;\n+import org.apache.syncope.ext.scimv2.api.data.Member;\n import org.apache.syncope.ext.scimv2.api.data.SCIMGroup;\n import org.apache.syncope.ext.scimv2.api.data.SCIMSearchRequest;\n import org.apache.syncope.ext.scimv2.api.service.GroupService;\n+import org.apache.syncope.ext.scimv2.api.type.ErrorType;\n import org.apache.syncope.ext.scimv2.api.type.Resource;\n import org.apache.syncope.ext.scimv2.api.type.SortOrder;\n \n public class GroupServiceImpl extends AbstractService<SCIMGroup> implements GroupService {\n \n     @Override\n-    public Response create() {\n-        return Response.status(Response.Status.NOT_IMPLEMENTED).build();\n+    public Response create(final SCIMGroup group) {\n+        // first create group, no members assigned\n+        ProvisioningResult<GroupTO> result = groupLogic().create(binder().toGroupTO(group), false);\n+\n+        // then assign members\n+        for (Member member : group.getMembers()) {\n+            UserPatch patch = new UserPatch();\n+            patch.setKey(member.getValue());\n+            patch.getMemberships().add(new MembershipPatch.Builder().\n+                    operation(PatchOperation.ADD_REPLACE).group(result.getEntity().getKey()).build());\n+\n+            try {\n+                userLogic().update(patch, false);\n+            } catch (Exception e) {\n+                LOG.error(\"While setting membership of {} to {}\", result.getEntity().getKey(), member.getValue(), e);\n+            }\n+        }\n+\n+        return createResponse(\n+                result.getEntity().getKey(),\n+                binder().toSCIMGroup(\n+                        result.getEntity(),\n+                        uriInfo.getAbsolutePathBuilder().path(result.getEntity().getKey()).build().toASCIIString(),\n+                        Collections.<String>emptyList(),\n+                        Collections.<String>emptyList()));\n     }\n \n     @Override\n@@ -49,18 +92,96 @@ public SCIMGroup get(final String id,\n     }\n \n     @Override\n-    public Response replace(final String id) {\n+    public Response update(final String id) {\n         return Response.status(Response.Status.NOT_IMPLEMENTED).build();\n     }\n \n     @Override\n-    public Response delete(final String id) {\n-        return Response.status(Response.Status.NOT_IMPLEMENTED).build();\n+    public Response replace(final String id, final SCIMGroup group) {\n+        if (!id.equals(group.getId())) {\n+            throw new BadRequestException(ErrorType.invalidPath, \"Expected \" + id + \", found \" + group.getId());\n+        }\n+\n+        ResponseBuilder builder = checkETag(Resource.Group, id);\n+        if (builder != null) {\n+            return builder.build();\n+        }\n+\n+        // save current group members\n+        Set<String> beforeMembers = new HashSet<>();\n+\n+        MembershipCond membCond = new MembershipCond();\n+        membCond.setGroup(id);\n+        SearchCond searchCond = SearchCond.getLeafCond(membCond);\n+        int count = userLogic().search(searchCond,\n+                1, 1, Collections.<OrderByClause>emptyList(),\n+                SyncopeConstants.ROOT_REALM, false).getLeft();\n+        for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+            beforeMembers.addAll(userLogic().search(\n+                    searchCond,\n+                    page,\n+                    AnyDAO.DEFAULT_PAGE_SIZE,\n+                    Collections.<OrderByClause>emptyList(),\n+                    SyncopeConstants.ROOT_REALM,\n+                    false).\n+                    getRight().stream().map(EntityTO::getKey).collect(Collectors.toSet()));\n+        }\n+\n+        // update group, don't change members\n+        ProvisioningResult<GroupTO> result = groupLogic().update(\n+                AnyOperations.diff(binder().toGroupTO(group), groupLogic().read(id), false), false);\n+\n+        // assign new members\n+        Set<String> afterMembers = new HashSet<>();\n+        group.getMembers().forEach(member -> {\n+            afterMembers.add(member.getValue());\n+\n+            if (!beforeMembers.contains(member.getValue())) {\n+                UserPatch patch = new UserPatch();\n+                patch.setKey(member.getValue());\n+                patch.getMemberships().add(new MembershipPatch.Builder().\n+                        operation(PatchOperation.ADD_REPLACE).group(result.getEntity().getKey()).build());\n+\n+                try {\n+                    userLogic().update(patch, false);\n+                } catch (Exception e) {\n+                    LOG.error(\"While setting membership of {} to {}\",\n+                            result.getEntity().getKey(), member.getValue(), e);\n+                }\n+            }\n+        });\n+        // remove unconfirmed members\n+        beforeMembers.stream().filter(member -> !afterMembers.contains(member)).forEach(user -> {\n+            UserPatch patch = new UserPatch();\n+            patch.setKey(user);\n+            patch.getMemberships().add(new MembershipPatch.Builder().\n+                    operation(PatchOperation.DELETE).group(result.getEntity().getKey()).build());\n+\n+            try {\n+                userLogic().update(patch, false);\n+            } catch (Exception e) {\n+                LOG.error(\"While removing membership of {} from {}\", result.getEntity().getKey(), user, e);\n+            }\n+        });\n+\n+        return updateResponse(\n+                result.getEntity().getKey(),\n+                binder().toSCIMGroup(\n+                        result.getEntity(),\n+                        uriInfo.getAbsolutePathBuilder().path(result.getEntity().getKey()).build().toASCIIString(),\n+                        Collections.<String>emptyList(),\n+                        Collections.<String>emptyList()));\n     }\n \n     @Override\n-    public Response update(final String id) {\n-        return Response.status(Response.Status.NOT_IMPLEMENTED).build();\n+    public Response delete(final String id) {\n+        ResponseBuilder builder = checkETag(Resource.Group, id);\n+        if (builder != null) {\n+            return builder.build();\n+        }\n+\n+        anyLogic(Resource.Group).delete(id, false);\n+        return Response.noContent().build();\n     }\n \n     @Override"},{"sha":"2c73f447634ed5e9a7add7059c7bc1128be2731f","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java","status":"modified","additions":44,"deletions":7,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FUserServiceImpl.java?ref=fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc","patch":"@@ -19,21 +19,35 @@\n package org.apache.syncope.ext.scimv2.cxf.service;\n \n import java.util.Arrays;\n+import java.util.Collections;\n import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.Response.ResponseBuilder;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.AnyOperations;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.ext.scimv2.api.BadRequestException;\n import org.apache.syncope.ext.scimv2.api.data.ListResponse;\n import org.apache.syncope.ext.scimv2.api.data.SCIMSearchRequest;\n import org.apache.syncope.ext.scimv2.api.data.SCIMUser;\n import org.apache.syncope.ext.scimv2.api.service.UserService;\n+import org.apache.syncope.ext.scimv2.api.type.ErrorType;\n import org.apache.syncope.ext.scimv2.api.type.Resource;\n import org.apache.syncope.ext.scimv2.api.type.SortOrder;\n \n public class UserServiceImpl extends AbstractService<SCIMUser> implements UserService {\n \n     @Override\n-    public Response create() {\n-        return Response.status(Response.Status.NOT_IMPLEMENTED).build();\n+    public Response create(final SCIMUser user) {\n+        ProvisioningResult<UserTO> result = userLogic().create(binder().toUserTO(user), false);\n+        return createResponse(\n+                result.getEntity().getKey(),\n+                binder().toSCIMUser(\n+                        result.getEntity(),\n+                        uriInfo.getAbsolutePathBuilder().path(result.getEntity().getKey()).build().toASCIIString(),\n+                        Collections.<String>emptyList(),\n+                        Collections.<String>emptyList()));\n     }\n \n     @Override\n@@ -49,18 +63,41 @@ public SCIMUser get(final String id,\n     }\n \n     @Override\n-    public Response replace(final String id) {\n+    public Response update(final String id) {\n         return Response.status(Response.Status.NOT_IMPLEMENTED).build();\n     }\n \n     @Override\n-    public Response delete(final String id) {\n-        return Response.status(Response.Status.NOT_IMPLEMENTED).build();\n+    public Response replace(final String id, final SCIMUser user) {\n+        if (!id.equals(user.getId())) {\n+            throw new BadRequestException(ErrorType.invalidPath, \"Expected \" + id + \", found \" + user.getId());\n+        }\n+\n+        ResponseBuilder builder = checkETag(Resource.User, id);\n+        if (builder != null) {\n+            return builder.build();\n+        }\n+\n+        ProvisioningResult<UserTO> result = userLogic().update(\n+                AnyOperations.diff(binder().toUserTO(user), userLogic().read(id), false), false);\n+        return updateResponse(\n+                result.getEntity().getKey(),\n+                binder().toSCIMUser(\n+                        result.getEntity(),\n+                        uriInfo.getAbsolutePathBuilder().path(result.getEntity().getKey()).build().toASCIIString(),\n+                        Collections.<String>emptyList(),\n+                        Collections.<String>emptyList()));\n     }\n \n     @Override\n-    public Response update(final String id) {\n-        return Response.status(Response.Status.NOT_IMPLEMENTED).build();\n+    public Response delete(final String id) {\n+        ResponseBuilder builder = checkETag(Resource.User, id);\n+        if (builder != null) {\n+            return builder.build();\n+        }\n+\n+        anyLogic(Resource.User).delete(id, false);\n+        return Response.noContent().build();\n     }\n \n     @Override"},{"sha":"7e01a3a3f3f901c423f96afccc6a5a57a8ce7a86","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SCIMITCase.java","status":"modified","additions":242,"deletions":11,"changes":253,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java?ref=fba4a8bdcaea1b848852c4e4f7d6f6802a1d99fc","patch":"@@ -25,30 +25,43 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n+import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.node.ArrayNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.UUID;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.scim.SCIMComplexConf;\n import org.apache.syncope.common.lib.scim.SCIMConf;\n import org.apache.syncope.common.lib.scim.SCIMUserConf;\n+import org.apache.syncope.common.lib.scim.SCIMUserNameConf;\n+import org.apache.syncope.common.lib.scim.types.EmailCanonicalType;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.ext.scimv2.api.SCIMConstants;\n+import org.apache.syncope.ext.scimv2.api.data.Group;\n import org.apache.syncope.ext.scimv2.api.data.ListResponse;\n+import org.apache.syncope.ext.scimv2.api.data.Member;\n import org.apache.syncope.ext.scimv2.api.data.ResourceType;\n+import org.apache.syncope.ext.scimv2.api.data.SCIMComplexValue;\n+import org.apache.syncope.ext.scimv2.api.data.SCIMError;\n import org.apache.syncope.ext.scimv2.api.data.SCIMGroup;\n import org.apache.syncope.ext.scimv2.api.data.SCIMSearchRequest;\n import org.apache.syncope.ext.scimv2.api.data.SCIMUser;\n+import org.apache.syncope.ext.scimv2.api.data.SCIMUserName;\n import org.apache.syncope.ext.scimv2.api.data.ServiceProviderConfig;\n+import org.apache.syncope.ext.scimv2.api.data.Value;\n+import org.apache.syncope.ext.scimv2.api.type.ErrorType;\n import org.apache.syncope.ext.scimv2.api.type.Resource;\n import org.apache.syncope.ext.scimv2.cxf.JacksonSCIMJsonProvider;\n import org.apache.syncope.fit.AbstractITCase;\n@@ -59,6 +72,8 @@ public class SCIMITCase extends AbstractITCase {\n \n     public static final String SCIM_ADDRESS = \"http://localhost:9080/syncope/scim/v2\";\n \n+    private static final SCIMConf CONF;\n+\n     private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = new ThreadLocal<SimpleDateFormat>() {\n \n         @Override\n@@ -69,6 +84,27 @@ protected SimpleDateFormat initialValue() {\n         }\n     };\n \n+    static {\n+        CONF = new SCIMConf();\n+        CONF.setUserConf(new SCIMUserConf());\n+\n+        CONF.getUserConf().setDisplayName(\"cn\");\n+\n+        CONF.getUserConf().setName(new SCIMUserNameConf());\n+        CONF.getUserConf().getName().setGivenName(\"firstname\");\n+        CONF.getUserConf().getName().setFamilyName(\"surname\");\n+        CONF.getUserConf().getName().setFormatted(\"fullname\");\n+\n+        SCIMComplexConf<EmailCanonicalType> email = new SCIMComplexConf<>();\n+        email.setValue(\"userId\");\n+        email.setType(EmailCanonicalType.work);\n+        CONF.getUserConf().getEmails().add(email);\n+        email = new SCIMComplexConf<>();\n+        email.setValue(\"email\");\n+        email.setType(EmailCanonicalType.home);\n+        CONF.getUserConf().getEmails().add(email);\n+    }\n+\n     private WebClient webClient() {\n         return WebClient.create(SCIM_ADDRESS, Arrays.asList(new JacksonSCIMJsonProvider())).\n                 accept(SCIMConstants.APPLICATION_SCIM_JSON_TYPE).\n@@ -144,7 +180,13 @@ public void schemas() {\n     public void read() throws IOException {\n         assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n \n-        Response response = webClient().path(\"Users\").path(\"1417acbe-cbf6-4277-9372-e75e04f97000\").get();\n+        Response response = webClient().path(\"Users\").path(\"missing\").get();\n+        assertEquals(Response.Status.NOT_FOUND.getStatusCode(), response.getStatus());\n+\n+        SCIMError error = response.readEntity(SCIMError.class);\n+        assertEquals(Response.Status.NOT_FOUND.getStatusCode(), error.getStatus());\n+\n+        response = webClient().path(\"Users\").path(\"1417acbe-cbf6-4277-9372-e75e04f97000\").get();\n         assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n         assertEquals(\n                 SCIMConstants.APPLICATION_SCIM_JSON,\n@@ -179,15 +221,7 @@ public void conf() {\n         SCIMConf conf = scimConfService.get();\n         assertNotNull(conf);\n \n-        SCIMUserConf userConf = conf.getUserConf();\n-        if (userConf == null) {\n-            userConf = new SCIMUserConf();\n-            conf.setUserConf(userConf);\n-        }\n-        assertNull(userConf.getDisplayName());\n-        userConf.setDisplayName(\"cn\");\n-\n-        scimConfService.set(conf);\n+        scimConfService.set(CONF);\n \n         Response response = webClient().path(\"Users\").path(\"1417acbe-cbf6-4277-9372-e75e04f97000\").get();\n         assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n@@ -230,8 +264,16 @@ public void list() throws IOException {\n     public void search() {\n         assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n \n+        // invalid filter\n+        Response response = webClient().path(\"Groups\").query(\"filter\", \"invalid\").get();\n+        assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());\n+\n+        SCIMError error = response.readEntity(SCIMError.class);\n+        assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), error.getStatus());\n+        assertEquals(ErrorType.invalidFilter, error.getScimType());\n+\n         // eq\n-        Response response = webClient().path(\"Groups\").query(\"filter\", \"displayName eq \\\"additional\\\"\").get();\n+        response = webClient().path(\"Groups\").query(\"filter\", \"displayName eq \\\"additional\\\"\").get();\n         assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n         assertEquals(\n                 SCIMConstants.APPLICATION_SCIM_JSON,\n@@ -282,4 +324,193 @@ public void search() {\n         SCIMUser newSCIMUser = users.getResources().get(0);\n         assertEquals(newUser.getUsername(), newSCIMUser.getUserName());\n     }\n+\n+    private SCIMUser getSampleUser(final String username) {\n+        SCIMUser user = new SCIMUser(null, Collections.singletonList(Resource.User.schema()), null, username, true);\n+\n+        SCIMUserName name = new SCIMUserName();\n+        name.setGivenName(username);\n+        name.setFamilyName(\"surname\");\n+        name.setFormatted(username);\n+        user.setName(name);\n+\n+        SCIMComplexValue userId = new SCIMComplexValue();\n+        userId.setType(EmailCanonicalType.work.name());\n+        userId.setValue(username + \"@syncope.apache.org\");\n+        user.getEmails().add(userId);\n+\n+        SCIMComplexValue email = new SCIMComplexValue();\n+        email.setType(EmailCanonicalType.home.name());\n+        email.setValue(username + \"@syncope.apache.org\");\n+        user.getEmails().add(email);\n+\n+        return user;\n+    }\n+\n+    @Test\n+    public void createUser() throws JsonProcessingException {\n+        assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n+\n+        scimConfService.set(CONF);\n+\n+        SCIMUser user = getSampleUser(UUID.randomUUID().toString());\n+        user.getRoles().add(new Value(\"User reviewer\"));\n+        user.getGroups().add(new Group(\"37d15e4c-cdc1-460b-a591-8505c8133806\", null, null, null));\n+\n+        Response response = webClient().path(\"Users\").post(user);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+\n+        user = response.readEntity(SCIMUser.class);\n+        assertNotNull(user.getId());\n+        assertTrue(response.getLocation().toASCIIString().endsWith(user.getId()));\n+\n+        UserTO userTO = userService.read(user.getId());\n+        assertEquals(user.getUserName(), userTO.getUsername());\n+        assertTrue(user.isActive());\n+        assertEquals(user.getDisplayName(), userTO.getDerAttr(\"cn\").get().getValues().get(0));\n+        assertEquals(user.getName().getGivenName(), userTO.getPlainAttr(\"firstname\").get().getValues().get(0));\n+        assertEquals(user.getName().getFamilyName(), userTO.getPlainAttr(\"surname\").get().getValues().get(0));\n+        assertEquals(user.getName().getFormatted(), userTO.getPlainAttr(\"fullname\").get().getValues().get(0));\n+        assertEquals(user.getEmails().get(0).getValue(), userTO.getPlainAttr(\"userId\").get().getValues().get(0));\n+        assertEquals(user.getEmails().get(1).getValue(), userTO.getPlainAttr(\"email\").get().getValues().get(0));\n+        assertEquals(user.getRoles().get(0).getValue(), userTO.getRoles().get(0));\n+        assertEquals(user.getGroups().get(0).getValue(), userTO.getMemberships().get(0).getGroupKey());\n+    }\n+\n+    @Test\n+    public void replaceUser() {\n+        assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n+\n+        scimConfService.set(CONF);\n+\n+        SCIMUser user = getSampleUser(UUID.randomUUID().toString());\n+\n+        Response response = webClient().path(\"Users\").post(user);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+\n+        user = response.readEntity(SCIMUser.class);\n+        assertNotNull(user.getId());\n+\n+        user.getName().setFormatted(\"new\" + user.getUserName());\n+\n+        response = webClient().path(\"Users\").path(user.getId()).put(user);\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+\n+        user = response.readEntity(SCIMUser.class);\n+        assertTrue(user.getName().getFormatted().startsWith(\"new\"));\n+    }\n+\n+    @Test\n+    public void deleteUser() {\n+        assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n+\n+        scimConfService.set(CONF);\n+\n+        SCIMUser user = getSampleUser(UUID.randomUUID().toString());\n+\n+        Response response = webClient().path(\"Users\").post(user);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+\n+        user = response.readEntity(SCIMUser.class);\n+        assertNotNull(user.getId());\n+\n+        response = webClient().path(\"Users\").path(user.getId()).get();\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+\n+        response = webClient().path(\"Users\").path(user.getId()).delete();\n+        assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n+\n+        response = webClient().path(\"Users\").path(user.getId()).get();\n+        assertEquals(Response.Status.NOT_FOUND.getStatusCode(), response.getStatus());\n+    }\n+\n+    @Test\n+    public void createGroup() {\n+        assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n+\n+        String displayName = UUID.randomUUID().toString();\n+\n+        SCIMGroup group = new SCIMGroup(null, null, displayName);\n+        group.getMembers().add(new Member(\"1417acbe-cbf6-4277-9372-e75e04f97000\", null, null));\n+        assertNull(group.getId());\n+        assertEquals(displayName, group.getDisplayName());\n+\n+        Response response = webClient().path(\"Groups\").post(group);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+\n+        group = response.readEntity(SCIMGroup.class);\n+        assertNotNull(group.getId());\n+        assertTrue(response.getLocation().toASCIIString().endsWith(group.getId()));\n+        assertEquals(1, group.getMembers().size());\n+        assertEquals(\"1417acbe-cbf6-4277-9372-e75e04f97000\", group.getMembers().get(0).getValue());\n+\n+        response = webClient().path(\"Users\").path(\"1417acbe-cbf6-4277-9372-e75e04f97000\").get();\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+\n+        SCIMUser user = response.readEntity(SCIMUser.class);\n+        assertEquals(\"1417acbe-cbf6-4277-9372-e75e04f97000\", user.getId());\n+\n+        response = webClient().path(\"Groups\").post(group);\n+        assertEquals(Response.Status.CONFLICT.getStatusCode(), response.getStatus());\n+\n+        SCIMError error = response.readEntity(SCIMError.class);\n+        assertEquals(Response.Status.CONFLICT.getStatusCode(), error.getStatus());\n+        assertEquals(ErrorType.uniqueness, error.getScimType());\n+    }\n+\n+    @Test\n+    public void replaceGroup() {\n+        assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n+\n+        SCIMGroup group = new SCIMGroup(null, null, UUID.randomUUID().toString());\n+        group.getMembers().add(new Member(\"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\", null, null));\n+        Response response = webClient().path(\"Groups\").post(group);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+\n+        group = response.readEntity(SCIMGroup.class);\n+        assertNotNull(group.getId());\n+        assertEquals(1, group.getMembers().size());\n+        assertEquals(\"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\", group.getMembers().get(0).getValue());\n+\n+        group.setDisplayName(\"other\" + group.getId());\n+        group.getMembers().add(new Member(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\", null, null));\n+\n+        response = webClient().path(\"Groups\").path(group.getId()).put(group);\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+\n+        group = response.readEntity(SCIMGroup.class);\n+        assertTrue(group.getDisplayName().startsWith(\"other\"));\n+        assertEquals(2, group.getMembers().size());\n+\n+        group.getMembers().clear();\n+        group.getMembers().add(new Member(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\", null, null));\n+\n+        response = webClient().path(\"Groups\").path(group.getId()).put(group);\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+\n+        group = response.readEntity(SCIMGroup.class);\n+        assertEquals(1, group.getMembers().size());\n+        assertEquals(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\", group.getMembers().get(0).getValue());\n+    }\n+\n+    @Test\n+    public void deleteGroup() {\n+        assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n+\n+        SCIMGroup group = new SCIMGroup(null, null, UUID.randomUUID().toString());\n+        Response response = webClient().path(\"Groups\").post(group);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+\n+        group = response.readEntity(SCIMGroup.class);\n+        assertNotNull(group.getId());\n+\n+        response = webClient().path(\"Groups\").path(group.getId()).get();\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+\n+        response = webClient().path(\"Groups\").path(group.getId()).delete();\n+        assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n+\n+        response = webClient().path(\"Groups\").path(group.getId()).get();\n+        assertEquals(Response.Status.NOT_FOUND.getStatusCode(), response.getStatus());\n+    }\n }"}]}