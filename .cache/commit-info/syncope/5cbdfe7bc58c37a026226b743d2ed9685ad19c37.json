{"sha":"5cbdfe7bc58c37a026226b743d2ed9685ad19c37","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjVjYmRmZTdiYzU4YzM3YTAyNjIyNmI3NDNkMmVkOTY4NWFkMTljMzc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-02-13T17:24:07Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-02-13T17:24:07Z"},"message":"[SYNCOPE-1262] Last matrix parameter still there","tree":{"sha":"20cf3d3fbe897c44dc95f4d3de3b75a1c0a51b08","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/20cf3d3fbe897c44dc95f4d3de3b75a1c0a51b08"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5cbdfe7bc58c37a026226b743d2ed9685ad19c37","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5cbdfe7bc58c37a026226b743d2ed9685ad19c37","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5cbdfe7bc58c37a026226b743d2ed9685ad19c37","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"7958ebd48fadf04ad4b6d4f8a10507b6d5d078a0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7958ebd48fadf04ad4b6d4f8a10507b6d5d078a0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7958ebd48fadf04ad4b6d4f8a10507b6d5d078a0"}],"stats":{"total":177,"additions":108,"deletions":69},"files":[{"sha":"4aaea7860f383b4a6d7e8404f1def93772840f25","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ImplementationDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationDirectoryPanel.java?ref=5cbdfe7bc58c37a026226b743d2ed9685ad19c37","patch":"@@ -160,7 +160,7 @@ public void onClick(final AjaxRequestTarget target, final ImplementationTO ignor\n             @Override\n             public void onClick(final AjaxRequestTarget target, final ImplementationTO ignore) {\n                 try {\n-                    restClient.delete(model.getObject().getKey());\n+                    restClient.delete(model.getObject().getType(), model.getObject().getKey());\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                 } catch (SyncopeClientException e) {"},{"sha":"600ebd855051ed4cc286ae0fa52221db4955887f","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java?ref=5cbdfe7bc58c37a026226b743d2ed9685ad19c37","patch":"@@ -48,6 +48,7 @@\n import org.apache.syncope.common.lib.policy.RuleConf;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -82,6 +83,8 @@\n \n     private final PolicyType type;\n \n+    private final ImplementationType implementationType;\n+\n     private final String policy;\n \n     protected PolicyRuleDirectoryPanel(\n@@ -92,6 +95,9 @@ protected PolicyRuleDirectoryPanel(\n \n         this.baseModal = baseModal;\n         this.type = type;\n+        this.implementationType = type == PolicyType.ACCOUNT\n+                ? ImplementationType.ACCOUNT_RULE\n+                : ImplementationType.PASSWORD_RULE;\n         this.policy = policy;\n         this.restClient = new PolicyRestClient();\n \n@@ -234,7 +240,7 @@ public PolicyRuleDataProvider(final int paginatorRows) {\n         @SuppressWarnings(\"unchecked\")\n         private List<PolicyRuleWrapper> getPolicyRuleWrappers(final ComposablePolicy policy) {\n             return policy.getRules().stream().map(rule -> {\n-                ImplementationTO implementation = implementationClient.read(rule);\n+                ImplementationTO implementation = implementationClient.read(implementationType, rule);\n \n                 PolicyRuleWrapper wrapper = new PolicyRuleWrapper(false).\n                         setImplementationKey(implementation.getKey())."},{"sha":"855837ea62d475967852b7d934d1ae70346683cc","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleWizardBuilder.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java?ref=5cbdfe7bc58c37a026226b743d2ed9685ad19c37","patch":"@@ -59,6 +59,8 @@ public class PolicyRuleWizardBuilder extends AjaxWizardBuilder<PolicyRuleWrapper\n \n     private final PolicyType type;\n \n+    private final ImplementationType implementationType;\n+\n     public PolicyRuleWizardBuilder(\n             final String policy,\n             final PolicyType type,\n@@ -69,6 +71,9 @@ public PolicyRuleWizardBuilder(\n \n         this.policy = policy;\n         this.type = type;\n+        this.implementationType = type == PolicyType.ACCOUNT\n+                ? ImplementationType.ACCOUNT_RULE\n+                : ImplementationType.PASSWORD_RULE;\n     }\n \n     @Override\n@@ -83,7 +88,7 @@ protected Serializable onApplyInternal(final PolicyRuleWrapper modelObject) {\n         }\n \n         if (modelObject.getImplementationEngine() == ImplementationEngine.JAVA) {\n-            ImplementationTO rule = implementationClient.read(modelObject.getImplementationKey());\n+            ImplementationTO rule = implementationClient.read(implementationType, modelObject.getImplementationKey());\n             try {\n                 rule.setBody(MAPPER.writeValueAsString(modelObject.getConf()));\n                 implementationClient.update(rule);\n@@ -145,11 +150,11 @@ public Profile(final PolicyRuleWrapper rule) {\n \n                 @Override\n                 protected void onEvent(final AjaxRequestTarget target) {\n-                    ImplementationTO implementation = implementationClient.read(conf.getModelObject());\n-                    rule.setImplementationEngine(implementation.getEngine());\n-                    if (implementation.getEngine() == ImplementationEngine.JAVA) {\n+                    ImplementationTO impl = implementationClient.read(implementationType, conf.getModelObject());\n+                    rule.setImplementationEngine(impl.getEngine());\n+                    if (impl.getEngine() == ImplementationEngine.JAVA) {\n                         try {\n-                            RuleConf ruleConf = MAPPER.readValue(implementation.getBody(), RuleConf.class);\n+                            RuleConf ruleConf = MAPPER.readValue(impl.getBody(), RuleConf.class);\n                             rule.setConf(ruleConf);\n                         } catch (Exception e) {\n                             LOG.error(\"During deserialization\", e);"},{"sha":"6ac03e2c20a3e8273f90256505354e14d552e1d4","filename":"client/console/src/main/java/org/apache/syncope/client/console/reports/ReportletDirectoryPanel.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java?ref=5cbdfe7bc58c37a026226b743d2ed9685ad19c37","patch":"@@ -47,6 +47,7 @@\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -224,14 +225,14 @@ public ReportDataProvider(final int paginatorRows) {\n \n         private List<ReportletWrapper> getReportletWrappers(final ReportTO reportTO) {\n             return reportTO.getReportlets().stream().map(reportlet -> {\n-                ImplementationTO implementation = implementationClient.read(reportlet);\n+                ImplementationTO impl = implementationClient.read(ImplementationType.REPORTLET, reportlet);\n \n                 ReportletWrapper wrapper = new ReportletWrapper(false).\n-                        setImplementationKey(implementation.getKey()).\n-                        setImplementationEngine(implementation.getEngine());\n-                if (implementation.getEngine() == ImplementationEngine.JAVA) {\n+                        setImplementationKey(impl.getKey()).\n+                        setImplementationEngine(impl.getEngine());\n+                if (impl.getEngine() == ImplementationEngine.JAVA) {\n                     try {\n-                        ReportletConf reportletConf = MAPPER.readValue(implementation.getBody(), ReportletConf.class);\n+                        ReportletConf reportletConf = MAPPER.readValue(impl.getBody(), ReportletConf.class);\n                         wrapper.setConf(reportletConf);\n                     } catch (Exception e) {\n                         LOG.error(\"During deserialization\", e);"},{"sha":"17785b0e87526f7a584c6b49011e38de406ee11e","filename":"client/console/src/main/java/org/apache/syncope/client/console/reports/ReportletWizardBuilder.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java?ref=5cbdfe7bc58c37a026226b743d2ed9685ad19c37","patch":"@@ -64,7 +64,8 @@ public ReportletWizardBuilder(\n     @Override\n     protected Serializable onApplyInternal(final ReportletWrapper modelObject) {\n         if (modelObject.getImplementationEngine() == ImplementationEngine.JAVA) {\n-            ImplementationTO reportlet = implementationClient.read(modelObject.getImplementationKey());\n+            ImplementationTO reportlet = implementationClient.read(\n+                    ImplementationType.REPORTLET, modelObject.getImplementationKey());\n             try {\n                 reportlet.setBody(MAPPER.writeValueAsString(modelObject.getConf()));\n                 implementationClient.update(reportlet);\n@@ -109,11 +110,12 @@ public Profile(final ReportletWrapper reportlet) {\n \n                 @Override\n                 protected void onEvent(final AjaxRequestTarget target) {\n-                    ImplementationTO implementation = implementationClient.read(conf.getModelObject());\n-                    reportlet.setImplementationEngine(implementation.getEngine());\n-                    if (implementation.getEngine() == ImplementationEngine.JAVA) {\n+                    ImplementationTO impl = implementationClient.read(\n+                            ImplementationType.REPORTLET, conf.getModelObject());\n+                    reportlet.setImplementationEngine(impl.getEngine());\n+                    if (impl.getEngine() == ImplementationEngine.JAVA) {\n                         try {\n-                            ReportletConf conf = MAPPER.readValue(implementation.getBody(), ReportletConf.class);\n+                            ReportletConf conf = MAPPER.readValue(impl.getBody(), ReportletConf.class);\n                             reportlet.setConf(conf);\n                         } catch (Exception e) {\n                             LOG.error(\"During deserialization\", e);"},{"sha":"7d99c7cd2488478f5ca5044420d8f4c01abc2e4a","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ImplementationRestClient.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FImplementationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FImplementationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FImplementationRestClient.java?ref=5cbdfe7bc58c37a026226b743d2ed9685ad19c37","patch":"@@ -32,8 +32,8 @@ public List<ImplementationTO> list(final ImplementationType type) {\n         return getService(ImplementationService.class).list(type);\n     }\n \n-    public ImplementationTO read(final String key) {\n-        return getService(ImplementationService.class).read(key);\n+    public ImplementationTO read(final ImplementationType type, final String key) {\n+        return getService(ImplementationService.class).read(type, key);\n     }\n \n     public ImplementationTO create(final ImplementationTO implementation) {\n@@ -46,8 +46,8 @@ public void update(final ImplementationTO implementation) {\n         getService(ImplementationService.class).update(implementation);\n     }\n \n-    public void delete(final String key) {\n-        getService(ImplementationService.class).delete(key);\n+    public void delete(final ImplementationType type, final String key) {\n+        getService(ImplementationService.class).delete(type, key);\n     }\n \n }"},{"sha":"842045e91ac8e8b50e691f968662977afeb2a88d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ImplementationTO.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FImplementationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FImplementationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FImplementationTO.java?ref=5cbdfe7bc58c37a026226b743d2ed9685ad19c37","patch":"@@ -62,6 +62,7 @@ public ImplementationType getType() {\n         return type;\n     }\n \n+    @PathParam(\"type\")\n     public void setType(final ImplementationType type) {\n         this.type = type;\n     }"},{"sha":"32e87a2e12c69bac19b617e389b24247d04217bd","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/AuditElements.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditElements.java?ref=5cbdfe7bc58c37a026226b743d2ed9685ad19c37","patch":"@@ -20,7 +20,6 @@\n \n import java.io.Serializable;\n import javax.xml.bind.annotation.XmlEnum;\n-import org.apache.commons.lang3.StringUtils;\n \n public final class AuditElements implements Serializable {\n \n@@ -33,12 +32,12 @@ public final class AuditElements implements Serializable {\n     @XmlEnum\n     public enum EventCategoryType {\n \n-        LOGIC(StringUtils.EMPTY),\n-        TASK(StringUtils.EMPTY),\n+        LOGIC(\"LOGIC\"),\n+        TASK(\"TASK\"),\n         PROPAGATION(\"PropagationTask\"),\n         PULL(\"PullTask\"),\n         PUSH(\"PushTask\"),\n-        CUSTOM(StringUtils.EMPTY);\n+        CUSTOM(\"CUSTOM\");\n \n         private final String value;\n "},{"sha":"31622ec52bd49653cf205e5da45da9cd376b16a1","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/AuditLoggerName.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java?ref=5cbdfe7bc58c37a026226b743d2ed9685ad19c37","patch":"@@ -185,11 +185,7 @@ public static String buildEvent(\n \n         eventBuilder.append('[');\n         if (type != null) {\n-            if (StringUtils.isNotBlank(type.toString())) {\n-                eventBuilder.append(type.toString());\n-            } else {\n-                eventBuilder.append(type.name());\n-            }\n+            eventBuilder.append(type.toString());\n         }\n         eventBuilder.append(\"]:[\");\n         if (StringUtils.isNotBlank(category)) {"},{"sha":"620d3fc890cf65bd5dd5043083df0a1f673e30e3","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ImplementationService.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FImplementationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FImplementationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FImplementationService.java?ref=5cbdfe7bc58c37a026226b743d2ed9685ad19c37","patch":"@@ -26,7 +26,6 @@\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n-import javax.ws.rs.MatrixParam;\n import javax.ws.rs.POST;\n import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n@@ -54,19 +53,21 @@ public interface ImplementationService extends JAXRSService {\n      * @return list of all implementations.\n      */\n     @GET\n+    @Path(\"{type}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    List<ImplementationTO> list(@NotNull @MatrixParam(\"type\") ImplementationType type);\n+    List<ImplementationTO> list(@NotNull @PathParam(\"type\") ImplementationType type);\n \n     /**\n      * Returns implementation with matching key.\n      *\n+     * @param type implementation type\n      * @param key key of implementation to be read\n      * @return implementation with matching key\n      */\n     @GET\n-    @Path(\"{key}\")\n+    @Path(\"{type}/{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    ImplementationTO read(@NotNull @PathParam(\"key\") String key);\n+    ImplementationTO read(@NotNull @PathParam(\"type\") ImplementationType type, @NotNull @PathParam(\"key\") String key);\n \n     /**\n      * Creates a new implementation.\n@@ -75,6 +76,7 @@ public interface ImplementationService extends JAXRSService {\n      * @return Response object featuring Location header of created implementation\n      */\n     @POST\n+    @Path(\"{type}/{key}\")\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     Response create(@NotNull ImplementationTO implementationTO);\n@@ -86,19 +88,21 @@ public interface ImplementationService extends JAXRSService {\n      * @return an empty response if operation was successful\n      */\n     @PUT\n+    @Path(\"{type}/{key}\")\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     Response update(@NotNull ImplementationTO implementationTO);\n \n     /**\n      * Deletes the implementation matching the given key.\n      *\n+     * @param type implementation type\n      * @param key key for implementation to be deleted\n      * @return an empty response if operation was successful\n      */\n     @DELETE\n-    @Path(\"{key}\")\n+    @Path(\"{type}/{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    Response delete(@NotNull @PathParam(\"key\") String key);\n+    Response delete(@NotNull @PathParam(\"type\") ImplementationType type, @NotNull @PathParam(\"key\") String key);\n \n }"},{"sha":"83bc933c12ab4fe39fa6d96917d855a750403c1a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ImplementationLogic.java","status":"modified","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java?ref=5cbdfe7bc58c37a026226b743d2ed9685ad19c37","patch":"@@ -81,14 +81,20 @@ public List<ImplementationTO> list(final ImplementationType type) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.IMPLEMENTATION_READ + \"')\")\n-    public ImplementationTO read(final String key) {\n+    public ImplementationTO read(final ImplementationType type, final String key) {\n         Implementation implementation = implementationDAO.find(key);\n         if (implementation == null) {\n             LOG.error(\"Could not find implementation '\" + key + \"'\");\n \n             throw new NotFoundException(key);\n         }\n \n+        if (implementation.getType() != type) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRequest);\n+            sce.getElements().add(\"Found \" + type + \", expected \" + implementation.getType());\n+            throw sce;\n+        }\n+\n         return binder.getImplementationTO(implementation);\n     }\n \n@@ -124,14 +130,20 @@ public ImplementationTO update(final ImplementationTO implementationTO) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.IMPLEMENTATION_DELETE + \"')\")\n-    public void delete(final String key) {\n+    public void delete(final ImplementationType type, final String key) {\n         Implementation implementation = implementationDAO.find(key);\n         if (implementation == null) {\n             LOG.error(\"Could not find implementation '\" + key + \"'\");\n \n             throw new NotFoundException(key);\n         }\n \n+        if (implementation.getType() != type) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRequest);\n+            sce.getElements().add(\"Found \" + type + \", expected \" + implementation.getType());\n+            throw sce;\n+        }\n+\n         boolean inUse = false;\n         switch (implementation.getType()) {\n             case REPORTLET:"},{"sha":"6113c810c5764093486759ac1f4c4cf564a70b23","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ImplementationServiceImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FImplementationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FImplementationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FImplementationServiceImpl.java?ref=5cbdfe7bc58c37a026226b743d2ed9685ad19c37","patch":"@@ -41,8 +41,8 @@ public List<ImplementationTO> list(final ImplementationType type) {\n     }\n \n     @Override\n-    public ImplementationTO read(final String key) {\n-        return logic.read(key);\n+    public ImplementationTO read(final ImplementationType type, final String key) {\n+        return logic.read(type, key);\n     }\n \n     @Override\n@@ -61,8 +61,8 @@ public Response update(final ImplementationTO implementationTO) {\n     }\n \n     @Override\n-    public Response delete(final String key) {\n-        logic.delete(key);\n+    public Response delete(final ImplementationType type, final String key) {\n+        logic.delete(type, key);\n         return Response.noContent().build();\n     }\n "},{"sha":"7b5bb7ec7e7e1c2c1158f6518f4889c161bfa7f7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ImplementationITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FImplementationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FImplementationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FImplementationITCase.java?ref=5cbdfe7bc58c37a026226b743d2ed9685ad19c37","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.TaskType;\n-import org.apache.syncope.common.rest.api.service.ImplementationService;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.core.reference.TestPullActions;\n import org.junit.jupiter.api.Test;\n@@ -63,8 +63,8 @@ public void create() {\n             }\n         }\n \n-        ImplementationTO actual =\n-                getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+        ImplementationTO actual = implementationService.read(\n+                implementationTO.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n         assertNotNull(actual);\n         assertEquals(actual, implementationTO);\n     }\n@@ -95,7 +95,7 @@ public void delete() {\n \n         // fails because the implementation is used\n         try {\n-            implementationService.delete(implementationTO.getKey());\n+            implementationService.delete(implementationTO.getType(), implementationTO.getKey());\n             fail(\"Unexpected\");\n         } catch (SyncopeClientException e) {\n             assertEquals(e.getType(), ClientExceptionType.InUse);\n@@ -104,7 +104,7 @@ public void delete() {\n         pullTask.getActions().remove(implementationTO.getKey());\n         taskService.update(TaskType.PULL, pullTask);\n \n-        implementationService.delete(implementationTO.getKey());\n+        implementationService.delete(implementationTO.getType(), implementationTO.getKey());\n     }\n \n }"},{"sha":"ea2714fe001ca21530c76febee958f3724a6f32b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/NotificationTaskITCase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java?ref=5cbdfe7bc58c37a026226b743d2ed9685ad19c37","patch":"@@ -39,9 +39,9 @@\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n-import org.apache.syncope.common.rest.api.service.ImplementationService;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n import org.apache.syncope.core.provisioning.java.job.notification.NotificationJob;\n import org.apache.syncope.fit.core.reference.TestNotificationRecipientsProvider;\n@@ -231,7 +231,8 @@ public void issueSYNCOPE446() throws Exception {\n         recipientsProvider.setType(ImplementationType.RECIPIENTS_PROVIDER);\n         recipientsProvider.setBody(TestNotificationRecipientsProvider.class.getName());\n         Response response = implementationService.create(recipientsProvider);\n-        recipientsProvider = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+        recipientsProvider = implementationService.read(\n+                recipientsProvider.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n         assertNotNull(recipientsProvider);\n \n         NotificationTO notification = new NotificationTO();"},{"sha":"7ae759f533d7fd3448bd278388d087e619335db9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PolicyITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java?ref=5cbdfe7bc58c37a026226b743d2ed9685ad19c37","patch":"@@ -45,7 +45,6 @@\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.ImplementationService;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.core.reference.DummyPullCorrelationRule;\n@@ -56,7 +55,7 @@ public class PolicyITCase extends AbstractITCase {\n     private PullPolicyTO buildPullPolicyTO() throws IOException {\n         ImplementationTO corrRule = null;\n         try {\n-            corrRule = implementationService.read(\"TestPullRule\");\n+            corrRule = implementationService.read(ImplementationType.PULL_CORRELATION_RULE, \"TestPullRule\");\n         } catch (SyncopeClientException e) {\n             if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n                 corrRule = new ImplementationTO();\n@@ -66,7 +65,8 @@ private PullPolicyTO buildPullPolicyTO() throws IOException {\n                 corrRule.setBody(IOUtils.toString(\n                         getClass().getResourceAsStream(\"/TestPullRule.groovy\"), StandardCharsets.UTF_8));\n                 Response response = implementationService.create(corrRule);\n-                corrRule = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+                corrRule = implementationService.read(\n+                        corrRule.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n                 assertNotNull(corrRule);\n             }\n         }\n@@ -132,7 +132,7 @@ public void update() {\n         assertNotNull(policy);\n         assertNotEquals(\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\", policy.getKey());\n \n-        ImplementationTO rule = implementationService.read(policy.getRules().get(0));\n+        ImplementationTO rule = implementationService.read(ImplementationType.PASSWORD_RULE, policy.getRules().get(0));\n         assertNotNull(rule);\n \n         DefaultPasswordRuleConf ruleConf = POJOHelper.deserialize(rule.getBody(), DefaultPasswordRuleConf.class);"},{"sha":"3e6d67afa3cb9912f5c9bf15a299f9d4f8d8ec05","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":16,"deletions":9,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=5cbdfe7bc58c37a026226b743d2ed9685ad19c37","patch":"@@ -78,10 +78,10 @@\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n-import org.apache.syncope.common.rest.api.service.ImplementationService;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.core.provisioning.java.pushpull.DBPasswordPullActions;\n import org.apache.syncope.core.provisioning.java.pushpull.LDAPPasswordPullActions;\n@@ -105,7 +105,8 @@ public class PullTaskITCase extends AbstractTaskITCase {\n     public static void testPullActionsSetup() {\n         ImplementationTO pullActions = null;\n         try {\n-            pullActions = implementationService.read(TestPullActions.class.getSimpleName());\n+            pullActions = implementationService.read(\n+                    ImplementationType.PULL_ACTIONS, TestPullActions.class.getSimpleName());\n         } catch (SyncopeClientException e) {\n             if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n                 pullActions = new ImplementationTO();\n@@ -114,7 +115,8 @@ public static void testPullActionsSetup() {\n                 pullActions.setType(ImplementationType.PULL_ACTIONS);\n                 pullActions.setBody(TestPullActions.class.getName());\n                 Response response = implementationService.create(pullActions);\n-                pullActions = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+                pullActions = implementationService.read(\n+                        pullActions.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n                 assertNotNull(pullActions);\n             }\n         }\n@@ -444,7 +446,8 @@ public void reconcileFromScriptedSQL() throws IOException {\n         transformer.setBody(IOUtils.toString(\n                 getClass().getResourceAsStream(\"/PrefixItemTransformer.groovy\"), StandardCharsets.UTF_8));\n         Response response = implementationService.create(transformer);\n-        transformer = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+        transformer = implementationService.read(\n+                transformer.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n         assertNotNull(transformer);\n \n         mappingItem.getTransformers().clear();\n@@ -534,7 +537,8 @@ public void filteredReconciliation() throws IOException {\n             reconFilterBuilder.setBody(IOUtils.toString(\n                     getClass().getResourceAsStream(\"/TestReconFilterBuilder.groovy\"), StandardCharsets.UTF_8));\n             Response response = implementationService.create(reconFilterBuilder);\n-            reconFilterBuilder = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+            reconFilterBuilder = implementationService.read(\n+                    reconFilterBuilder.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n             assertNotNull(reconFilterBuilder);\n \n             task = taskService.read(TaskType.PULL, \"7c2242f4-14af-4ab5-af31-cdae23783655\", true);\n@@ -763,7 +767,7 @@ public void issueSYNCOPE258() throws IOException {\n         // -----------------------------\n         ImplementationTO corrRule = null;\n         try {\n-            corrRule = implementationService.read(\"TestPullRule\");\n+            corrRule = implementationService.read(ImplementationType.PULL_CORRELATION_RULE, \"TestPullRule\");\n         } catch (SyncopeClientException e) {\n             if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n                 corrRule = new ImplementationTO();\n@@ -773,7 +777,8 @@ public void issueSYNCOPE258() throws IOException {\n                 corrRule.setBody(IOUtils.toString(\n                         getClass().getResourceAsStream(\"/TestPullRule.groovy\"), StandardCharsets.UTF_8));\n                 Response response = implementationService.create(corrRule);\n-                corrRule = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+                corrRule = implementationService.read(\n+                        corrRule.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n                 assertNotNull(corrRule);\n             }\n         }\n@@ -927,7 +932,8 @@ public void issueSYNCOPE313DB() throws Exception {\n         pullActions.setType(ImplementationType.PULL_ACTIONS);\n         pullActions.setBody(DBPasswordPullActions.class.getName());\n         Response response = implementationService.create(pullActions);\n-        pullActions = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+        pullActions = implementationService.read(\n+                pullActions.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n         assertNotNull(pullActions);\n \n         PullTaskTO pullTask = new PullTaskTO();\n@@ -1016,7 +1022,8 @@ public void issueSYNCOPE313LDAP() throws Exception {\n             pullActions.setType(ImplementationType.PULL_ACTIONS);\n             pullActions.setBody(LDAPPasswordPullActions.class.getName());\n             Response response = implementationService.create(pullActions);\n-            pullActions = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+            pullActions = implementationService.read(\n+                    pullActions.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n             assertNotNull(pullActions);\n \n             pullTask = new PullTaskTO();"},{"sha":"48cbe702fcfd87570dc14d1cbbccab05c265f0f9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SchedTaskITCase.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java?ref=5cbdfe7bc58c37a026226b743d2ed9685ad19c37","patch":"@@ -89,7 +89,8 @@ public void update() {\n \n     @Test\n     public void deferred() {\n-        ImplementationTO taskJobDelegate = implementationService.read(TestSampleJobDelegate.class.getSimpleName());\n+        ImplementationTO taskJobDelegate = implementationService.read(\n+                ImplementationType.TASKJOB_DELEGATE, TestSampleJobDelegate.class.getSimpleName());\n         assertNotNull(taskJobDelegate);\n \n         SchedTaskTO task = new SchedTaskTO();\n@@ -134,7 +135,8 @@ public void deferred() {\n \n     @Test\n     public void issueSYNCOPE144() {\n-        ImplementationTO taskJobDelegate = implementationService.read(TestSampleJobDelegate.class.getSimpleName());\n+        ImplementationTO taskJobDelegate = implementationService.read(\n+                ImplementationType.TASKJOB_DELEGATE, TestSampleJobDelegate.class.getSimpleName());\n         assertNotNull(taskJobDelegate);\n \n         SchedTaskTO task = new SchedTaskTO();\n@@ -168,7 +170,8 @@ public void issueSYNCOPE660() {\n         List<JobTO> jobs = taskService.listJobs();\n         int old_size = jobs.size();\n \n-        ImplementationTO taskJobDelegate = implementationService.read(TestSampleJobDelegate.class.getSimpleName());\n+        ImplementationTO taskJobDelegate = implementationService.read(\n+                ImplementationType.TASKJOB_DELEGATE, TestSampleJobDelegate.class.getSimpleName());\n         assertNotNull(taskJobDelegate);\n \n         SchedTaskTO task = new SchedTaskTO();"},{"sha":"3e9024e49e1c335ed21b3a045ad09c17311da938","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cbdfe7bc58c37a026226b743d2ed9685ad19c37/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=5cbdfe7bc58c37a026226b743d2ed9685ad19c37","patch":"@@ -74,7 +74,6 @@\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.ImplementationService;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.provisioning.java.propagation.DBPasswordPropagationActions;\n import org.apache.syncope.core.provisioning.java.propagation.LDAPPasswordPropagationActions;\n@@ -806,7 +805,8 @@ public void issueSYNCOPE420() throws IOException {\n         logicActions.setBody(org.apache.commons.io.IOUtils.toString(\n                 getClass().getResourceAsStream(\"/DoubleValueLogicActions.groovy\"), StandardCharsets.UTF_8));\n         Response response = implementationService.create(logicActions);\n-        logicActions = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+        logicActions = implementationService.read(\n+                logicActions.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n         assertNotNull(logicActions);\n \n         RealmTO realm = realmService.list(\"/even/two\").iterator().next();\n@@ -987,7 +987,8 @@ public void issueSYNCOPE505DB() throws Exception {\n         propagationActions.setType(ImplementationType.PROPAGATION_ACTIONS);\n         propagationActions.setBody(DBPasswordPropagationActions.class.getName());\n         Response response = implementationService.create(propagationActions);\n-        propagationActions = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+        propagationActions = implementationService.read(\n+                propagationActions.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n         assertNotNull(propagationActions);\n \n         ResourceTO resourceTO = resourceService.read(RESOURCE_NAME_TESTDB);\n@@ -1036,7 +1037,8 @@ public void issueSYNCOPE505LDAP() throws Exception {\n         propagationActions.setType(ImplementationType.PROPAGATION_ACTIONS);\n         propagationActions.setBody(LDAPPasswordPropagationActions.class.getName());\n         Response response = implementationService.create(propagationActions);\n-        propagationActions = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n+        propagationActions = implementationService.read(\n+                propagationActions.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n         assertNotNull(propagationActions);\n \n         ResourceTO resourceTO = resourceService.read(RESOURCE_NAME_LDAP);"}]}