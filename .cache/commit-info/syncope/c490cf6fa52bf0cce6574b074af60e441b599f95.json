{"sha":"c490cf6fa52bf0cce6574b074af60e441b599f95","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmM0OTBjZjZmYTUyYmYwY2NlNjU3NGIwNzRhZjYwZTQ0MWI1OTlmOTU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-11-11T16:56:53Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-11-11T16:56:53Z"},"message":"[SYNCOPE-435] Adding logic to asses whether mandatory attributes defined in mapping are actually provided during create() or update() on connectors\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_1_X@1540775 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e57d772a4b575aee4c072460da691a6ffa00c92e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e57d772a4b575aee4c072460da691a6ffa00c92e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c490cf6fa52bf0cce6574b074af60e441b599f95","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c490cf6fa52bf0cce6574b074af60e441b599f95","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c490cf6fa52bf0cce6574b074af60e441b599f95","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c490cf6fa52bf0cce6574b074af60e441b599f95/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"861bf57bbc50139a9cbc967e2634d1c3f36b9f3a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/861bf57bbc50139a9cbc967e2634d1c3f36b9f3a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/861bf57bbc50139a9cbc967e2634d1c3f36b9f3a"}],"stats":{"total":361,"additions":202,"deletions":159},"files":[{"sha":"6642faf4c92f0e20557f94b8235784eeb7fae997","filename":"core/src/main/java/org/apache/syncope/core/connid/ConnObjectUtil.java","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java?ref=c490cf6fa52bf0cce6574b074af60e441b599f95","patch":"@@ -85,12 +85,6 @@ public class ConnObjectUtil {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(ConnObjectUtil.class);\n \n-    /**\n-     * JEXL engine for evaluating connector's account link.\n-     */\n-    @Autowired\n-    private JexlUtil jexlUtil;\n-\n     /**\n      * User data binder.\n      */\n@@ -350,14 +344,14 @@ private <T extends AbstractAttributableTO> T getAttributableTOFromConnObject(fin\n         if (template != null) {\n             if (template instanceof UserTO) {\n                 if (StringUtils.isNotBlank(((UserTO) template).getUsername())) {\n-                    String evaluated = jexlUtil.evaluate(((UserTO) template).getUsername(), attributableTO);\n+                    String evaluated = JexlUtil.evaluate(((UserTO) template).getUsername(), attributableTO);\n                     if (StringUtils.isNotBlank(evaluated)) {\n                         ((UserTO) attributableTO).setUsername(evaluated);\n                     }\n                 }\n \n                 if (StringUtils.isNotBlank(((UserTO) template).getPassword())) {\n-                    String evaluated = jexlUtil.evaluate(((UserTO) template).getPassword(), attributableTO);\n+                    String evaluated = JexlUtil.evaluate(((UserTO) template).getPassword(), attributableTO);\n                     if (StringUtils.isNotBlank(evaluated)) {\n                         ((UserTO) attributableTO).setPassword(evaluated);\n                     }\n@@ -378,7 +372,7 @@ private <T extends AbstractAttributableTO> T getAttributableTOFromConnObject(fin\n             }\n             if (template instanceof RoleTO) {\n                 if (StringUtils.isNotBlank(((RoleTO) template).getName())) {\n-                    String evaluated = jexlUtil.evaluate(((RoleTO) template).getName(), attributableTO);\n+                    String evaluated = JexlUtil.evaluate(((RoleTO) template).getName(), attributableTO);\n                     if (StringUtils.isNotBlank(evaluated)) {\n                         ((RoleTO) attributableTO).setName(evaluated);\n                     }\n@@ -635,7 +629,7 @@ private AttributeTO evaluateAttrTemplate(final AbstractAttributableTO attributab\n \n         if (template.getValues() != null && !template.getValues().isEmpty()) {\n             for (String value : template.getValues()) {\n-                String evaluated = jexlUtil.evaluate(value, attributableTO);\n+                String evaluated = JexlUtil.evaluate(value, attributableTO);\n                 if (StringUtils.isNotBlank(evaluated)) {\n                     result.addValue(evaluated);\n                 }"},{"sha":"7583879a3da2436cd1bb0b800ee0599054f21c26","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractDerAttr.java","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java?ref=c490cf6fa52bf0cce6574b074af60e441b599f95","patch":"@@ -25,9 +25,7 @@\n import javax.persistence.MappedSuperclass;\n import org.apache.commons.jexl2.JexlContext;\n import org.apache.commons.jexl2.MapContext;\n-import org.apache.syncope.core.util.ApplicationContextProvider;\n import org.apache.syncope.core.util.JexlUtil;\n-import org.springframework.context.ConfigurableApplicationContext;\n \n @MappedSuperclass\n public abstract class AbstractDerAttr extends AbstractBaseBean {\n@@ -48,16 +46,13 @@ public Long getId() {\n      * @return the value of this derived attribute\n      */\n     public String getValue(final Collection<? extends AbstractAttr> attributes) {\n-        final ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n-        final JexlUtil jexlUtil = context.getBean(JexlUtil.class);\n-\n         // Prepare context using user attributes\n         final JexlContext jexlContext = new MapContext();\n-        jexlUtil.addAttrsToContext(attributes, jexlContext);\n-        jexlUtil.addFieldsToContext(getOwner(), jexlContext);\n+        JexlUtil.addAttrsToContext(attributes, jexlContext);\n+        JexlUtil.addFieldsToContext(getOwner(), jexlContext);\n \n         // Evaluate expression using the context prepared before\n-        return jexlUtil.evaluate(getDerivedSchema().getExpression(), jexlContext);\n+        return JexlUtil.evaluate(getDerivedSchema().getExpression(), jexlContext);\n     }\n \n     public abstract <T extends AbstractAttributable> T getOwner();"},{"sha":"0492acffd077908cd0622de276aa2d170a6247f2","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=c490cf6fa52bf0cce6574b074af60e441b599f95","patch":"@@ -69,7 +69,7 @@ public class SyncopeUser extends AbstractAttributable {\n     @Id\n     private Long id;\n \n-    @NotNull\n+    @NotNull(message = \"Blank password\")\n     private String password;\n \n     @Transient\n@@ -119,7 +119,7 @@ public class SyncopeUser extends AbstractAttributable {\n      * Username/Login.\n      */\n     @Column(unique = true)\n-    @NotNull\n+    @NotNull(message = \"Blank username\")\n     private String username;\n \n     /**\n@@ -507,8 +507,8 @@ public boolean verifyPasswordHistory(final String password, final int size) {\n                 res = passwordHistory.subList(size >= passwordHistory.size()\n                         ? 0\n                         : passwordHistory.size() - size, passwordHistory.size()).contains(cipherAlgorithm == null\n-                        ? password\n-                        : PasswordEncoder.encode(password, cipherAlgorithm));\n+                                ? password\n+                                : PasswordEncoder.encode(password, cipherAlgorithm));\n             } catch (Exception e) {\n                 LOG.error(\"Error evaluating password history\", e);\n             }"},{"sha":"66eb274fda8f9642ec1cae31ec81659e8f6a2a10","filename":"core/src/main/java/org/apache/syncope/core/propagation/PropagationException.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationException.java?ref=c490cf6fa52bf0cce6574b074af60e441b599f95","patch":"@@ -37,7 +37,6 @@ public class PropagationException extends RuntimeException {\n      * @param stackTrace original stacktrace\n      */\n     public PropagationException(final String resourceName, final String stackTrace) {\n-\n         super(\"Exception during provision on resource \" + resourceName + \"\\n\" + stackTrace);\n \n         this.resourceName = resourceName;"},{"sha":"97fe79d561c0d86464417ebf976b9aa1e7bdf05b","filename":"core/src/main/java/org/apache/syncope/core/propagation/PropagationTaskExecutor.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationTaskExecutor.java?ref=c490cf6fa52bf0cce6574b074af60e441b599f95","patch":"@@ -30,6 +30,18 @@\n  */\n public interface PropagationTaskExecutor {\n \n+    /**\n+     * Name for special propagation attribute used to indicate whether there are attributes, marked as mandatory in the\n+     * mapping but not to be propagated.\n+     */\n+    String MANDATORY_MISSING_ATTR_NAME = \"__MANDATORY_MISSING__\";\n+\n+    /**\n+     * Name for special propagation attribute used to indicate whether there are attributes, marked as mandatory in the\n+     * mapping but about to be propagated as null or empty.\n+     */\n+    String MANDATORY_NULL_OR_EMPTY_ATTR_NAME = \"__MANDATORY_NULL_OR_EMPTY__\";\n+\n     /**\n      * Execute the given PropagationTask and returns the generated TaskExec.\n      *"},{"sha":"1e0007872c9af33fe23a2b333ef7acccc1a915ee","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/AbstractPropagationTaskExecutor.java","status":"modified","additions":30,"deletions":6,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java?ref=c490cf6fa52bf0cce6574b074af60e441b599f95","patch":"@@ -20,10 +20,12 @@\n \n import java.io.PrintWriter;\n import java.io.StringWriter;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.lang.StringUtils;\n@@ -33,6 +35,7 @@\n import org.apache.syncope.common.types.PropagationMode;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.types.TraceLevel;\n+import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.notification.NotificationManager;\n@@ -66,7 +69,7 @@\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional(rollbackFor = {Throwable.class})\n+@Transactional(rollbackFor = { Throwable.class })\n public abstract class AbstractPropagationTaskExecutor implements PropagationTaskExecutor {\n \n     /**\n@@ -137,11 +140,32 @@ protected PropagationActions getPropagationActions(final ExternalResource resour\n     }\n \n     protected void createOrUpdate(final PropagationTask task, final ConnectorObject beforeObj,\n-            final Connector connector, final Set<String> propagationAttempted) {\n+            final Connector connector, final Set<String> propagationAttempted) throws SyncopeClientException {\n \n         // set of attributes to be propagated\n         final Set<Attribute> attributes = new HashSet<Attribute>(task.getAttributes());\n \n+        // check if there is any missing or null / empty mandatory attribute\n+        List<Object> mandatoryAttrNames = new ArrayList<Object>();\n+        Attribute mandatoryMissing = AttributeUtil.find(MANDATORY_MISSING_ATTR_NAME, task.getAttributes());\n+        if (mandatoryMissing != null) {\n+            attributes.remove(mandatoryMissing);\n+\n+            if (beforeObj == null) {\n+                mandatoryAttrNames.addAll(mandatoryMissing.getValue());\n+            }\n+        }\n+        Attribute mandatoryNullOrEmpty = AttributeUtil.find(MANDATORY_NULL_OR_EMPTY_ATTR_NAME, task.getAttributes());\n+        if (mandatoryNullOrEmpty != null) {\n+            attributes.remove(mandatoryNullOrEmpty);\n+\n+            mandatoryAttrNames.addAll(mandatoryNullOrEmpty.getValue());\n+        }\n+        if (!mandatoryAttrNames.isEmpty()) {\n+            throw new IllegalArgumentException(\n+                    \"Not attempted because there are mandatory attributes without value(s): \" + mandatoryAttrNames);\n+        }\n+\n         if (beforeObj == null) {\n             // 1. get accountId\n             final String accountId = task.getAccountId();\n@@ -245,7 +269,7 @@ protected AbstractAttributable getSubject(final PropagationTask task) {\n     }\n \n     protected void delete(final PropagationTask task, final ConnectorObject beforeObj,\n-            final Connector connector, final Set<String> propagationAttempted) {\n+            final Connector connector, final Set<String> propagationAttempted) throws SyncopeClientException {\n \n         if (beforeObj == null) {\n             LOG.debug(\"{} not found on external resource: ignoring delete\", task.getAccountId());\n@@ -408,7 +432,7 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n                 task.getPropagationOperation().name().toLowerCase(),\n                 result,\n                 beforeObj, // searching for before object is too much expensive ... \n-                new Object[] {execution, afterObj},\n+                new Object[] { execution, afterObj },\n                 task);\n \n         auditManager.audit(\n@@ -418,7 +442,7 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n                 task.getPropagationOperation().name().toLowerCase(),\n                 result,\n                 beforeObj, // searching for before object is too much expensive ... \n-                new Object[] {execution, afterObj},\n+                new Object[] { execution, afterObj },\n                 task);\n \n         return execution;\n@@ -490,7 +514,7 @@ protected ConnectorObject getRemoteObject(final PropagationTask task, final Conn\n                     new ObjectClass(task.getObjectClassName()),\n                     new Uid(accountId),\n                     connector.getOperationOptions(AttributableUtil.getInstance(task.getSubjectType()).\n-                    getMappingItems(task.getResource(), MappingPurpose.PROPAGATION)));\n+                            getMappingItems(task.getResource(), MappingPurpose.PROPAGATION)));\n         } catch (TimeoutException toe) {\n             LOG.debug(\"Request timeout\", toe);\n             throw toe;"},{"sha":"cab9242176db94dacf8a3c59a7c285cc14f18d93","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/LDAPMembershipPropagationActions.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FLDAPMembershipPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FLDAPMembershipPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FLDAPMembershipPropagationActions.java?ref=c490cf6fa52bf0cce6574b074af60e441b599f95","patch":"@@ -55,9 +55,6 @@ public class LDAPMembershipPropagationActions extends DefaultPropagationActions\n     @Autowired\n     protected UserDAO userDAO;\n \n-    @Autowired\n-    protected JexlUtil jexlUtil;\n-\n     /**\n      * Allows easy subclassing for the ConnId AD connector bundle.\n      *\n@@ -83,11 +80,11 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n                         LOG.debug(\"Evaluating accountLink for {}\", role);\n \n                         final JexlContext jexlContext = new MapContext();\n-                        jexlUtil.addFieldsToContext(role, jexlContext);\n-                        jexlUtil.addAttrsToContext(role.getAttributes(), jexlContext);\n-                        jexlUtil.addDerAttrsToContext(role.getDerivedAttributes(), role.getAttributes(), jexlContext);\n+                        JexlUtil.addFieldsToContext(role, jexlContext);\n+                        JexlUtil.addAttrsToContext(role.getAttributes(), jexlContext);\n+                        JexlUtil.addDerAttrsToContext(role.getDerivedAttributes(), role.getAttributes(), jexlContext);\n                         final String roleAccountLink =\n-                                jexlUtil.evaluate(task.getResource().getRmapping().getAccountLink(), jexlContext);\n+                                JexlUtil.evaluate(task.getResource().getRmapping().getAccountLink(), jexlContext);\n                         LOG.debug(\"AccountLink for {} is '{}'\", role, roleAccountLink);\n                         if (StringUtils.isNotBlank(roleAccountLink)) {\n                             roleAccountLinks.add(roleAccountLink);"},{"sha":"bc7ef8059ed80abe82ff81a66885c9e39f1190d4","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/PropagationManager.java","status":"modified","additions":37,"deletions":11,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java?ref=c490cf6fa52bf0cce6574b074af60e441b599f95","patch":"@@ -45,11 +45,13 @@\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n import org.apache.syncope.core.propagation.PropagationByResource;\n+import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.apache.syncope.core.rest.data.AbstractAttributableDataBinder;\n import org.apache.syncope.core.rest.data.RoleDataBinder;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.util.AttributableUtil;\n+import org.apache.syncope.core.util.JexlUtil;\n import org.apache.syncope.core.util.MappingUtil;\n import org.apache.syncope.core.util.VirAttrCache;\n import org.apache.syncope.core.workflow.WorkflowResult;\n@@ -64,7 +66,7 @@\n /**\n  * Manage the data propagation to external resources.\n  */\n-@Transactional(rollbackFor = {Throwable.class})\n+@Transactional(rollbackFor = { Throwable.class })\n public class PropagationManager {\n \n     /**\n@@ -446,6 +448,7 @@ protected List<PropagationTask> getDeleteTaskIds(final AbstractAttributable attr\n      * Prepare attributes for sending to a connector instance.\n      *\n      * @param <T> user / role\n+     * @param attrUtil user / role\n      * @param subject given user / role\n      * @param password clear-text password\n      * @param vAttrsToBeRemoved virtual attributes to be removed\n@@ -454,17 +457,16 @@ protected List<PropagationTask> getDeleteTaskIds(final AbstractAttributable attr\n      * @param resource target resource\n      * @return account link + prepared attributes\n      */\n-    protected <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> prepareAttributes(final T subject,\n-            final String password, final Set<String> vAttrsToBeRemoved,\n-            final Map<String, AttributeMod> vAttrsToBeUpdated, final Boolean enable, final ExternalResource resource) {\n+    protected <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> prepareAttributes(\n+            final AttributableUtil attrUtil, final T subject, final String password,\n+            final Set<String> vAttrsToBeRemoved, final Map<String, AttributeMod> vAttrsToBeUpdated,\n+            final Boolean enable, final ExternalResource resource) {\n \n         LOG.debug(\"Preparing resource attributes for {} on resource {} with attributes {}\",\n                 subject, resource, subject.getAttributes());\n \n         Set<Attribute> attributes = new HashSet<Attribute>();\n         String accountId = null;\n-\n-        final AttributableUtil attrUtil = AttributableUtil.getInstance(subject);\n         for (AbstractMappingItem mapping : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n             LOG.debug(\"Processing schema {}\", mapping.getIntAttrName());\n \n@@ -473,6 +475,7 @@ protected <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> pre\n                         && mapping.getIntMappingType() == IntMappingType.UserVirtualSchema)\n                         || (attrUtil.getType() == AttributableType.ROLE\n                         && mapping.getIntMappingType() == IntMappingType.RoleVirtualSchema)) {\n+\n                     LOG.debug(\"Expire entry cache {}-{}\", subject.getId(), mapping.getIntAttrName());\n                     virAttrCache.expire(attrUtil.getType(), subject.getId(), mapping.getIntAttrName());\n                 }\n@@ -485,9 +488,7 @@ protected <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> pre\n                 }\n \n                 if (preparedAttribute.getValue() != null) {\n-                    final Attribute alreadyAdded = AttributeUtil.find(preparedAttribute.getValue().getName(),\n-                            attributes);\n-\n+                    Attribute alreadyAdded = AttributeUtil.find(preparedAttribute.getValue().getName(), attributes);\n                     if (alreadyAdded == null) {\n                         attributes.add(preparedAttribute.getValue());\n                     } else {\n@@ -578,11 +579,36 @@ protected <T extends AbstractAttributable> List<PropagationTask> createTasks(fin\n                     task.setPropagationMode(resource.getPropagationMode());\n                     task.setOldAccountId(propByRes.getOldAccountId(resource.getName()));\n \n-                    Map.Entry<String, Set<Attribute>> preparedAttrs = prepareAttributes(subject, password,\n+                    Map.Entry<String, Set<Attribute>> preparedAttrs = prepareAttributes(attrUtil, subject, password,\n                             vAttrsToBeRemoved, vAttrsToBeUpdated, enable, resource);\n                     task.setAccountId(preparedAttrs.getKey());\n-                    task.setAttributes(preparedAttrs.getValue());\n \n+                    // Check if any of mandatory attributes (in the mapping) is missing or not received any value: \n+                    // if so, add special attributes that will be evaluated by PropagationTaskExecutor\n+                    List<String> mandatoryMissing = new ArrayList<String>();\n+                    List<String> mandatoryNullOrEmpty = new ArrayList<String>();\n+                    for (AbstractMappingItem item : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n+                        if (!item.isAccountid()\n+                                && JexlUtil.evaluateMandatoryCondition(item.getMandatoryCondition(), subject)) {\n+\n+                            Attribute attr = AttributeUtil.find(item.getExtAttrName(), preparedAttrs.getValue());\n+                            if (attr == null) {\n+                                mandatoryMissing.add(item.getExtAttrName());\n+                            } else if (attr.getValue() == null || attr.getValue().isEmpty()) {\n+                                mandatoryNullOrEmpty.add(item.getExtAttrName());\n+                            }\n+                        }\n+                    }\n+                    if (!mandatoryMissing.isEmpty()) {\n+                        preparedAttrs.getValue().add(AttributeBuilder.build(\n+                                PropagationTaskExecutor.MANDATORY_MISSING_ATTR_NAME, mandatoryMissing));\n+                    }\n+                    if (!mandatoryNullOrEmpty.isEmpty()) {\n+                        preparedAttrs.getValue().add(AttributeBuilder.build(\n+                                PropagationTaskExecutor.MANDATORY_NULL_OR_EMPTY_ATTR_NAME, mandatoryNullOrEmpty));\n+                    }\n+\n+                    task.setAttributes(preparedAttrs.getValue());\n                     tasks.add(task);\n \n                     LOG.debug(\"PropagationTask created: {}\", task);"},{"sha":"f81696a738bc48b52b5854f3d682fbf027192e0a","filename":"core/src/main/java/org/apache/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":2,"deletions":16,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=c490cf6fa52bf0cce6574b074af60e441b599f95","patch":"@@ -117,9 +117,6 @@ public abstract class AbstractAttributableDataBinder {\n     @Autowired\n     protected PolicyDAO policyDAO;\n \n-    @Autowired\n-    private JexlUtil jexlUtil;\n-\n     private <T extends AbstractSchema> T getSchema(final String schemaName, final Class<T> reference) {\n         T schema = null;\n         if (StringUtils.isNotBlank(schemaName)) {\n@@ -205,17 +202,6 @@ protected void fillAttribute(final List<String> values, final AttributableUtil a\n         }\n     }\n \n-    private boolean evaluateMandatoryCondition(final String mandatoryCondition,\n-            final AbstractAttributable attributable) {\n-\n-        JexlContext jexlContext = new MapContext();\n-        jexlUtil.addAttrsToContext(attributable.getAttributes(), jexlContext);\n-        jexlUtil.addDerAttrsToContext(attributable.getDerivedAttributes(), attributable.getAttributes(), jexlContext);\n-        jexlUtil.addVirAttrsToContext(attributable.getVirtualAttributes(), jexlContext);\n-\n-        return Boolean.parseBoolean(jexlUtil.evaluate(mandatoryCondition, jexlContext));\n-    }\n-\n     private boolean evaluateMandatoryCondition(final AttributableUtil attrUtil, final ExternalResource resource,\n             final AbstractAttributable attributable, final String intAttrName, final IntMappingType intMappingType) {\n \n@@ -225,7 +211,7 @@ private boolean evaluateMandatoryCondition(final AttributableUtil attrUtil, fina\n                 attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION), intAttrName, intMappingType);\n         for (Iterator<AbstractMappingItem> itor = mappings.iterator(); itor.hasNext() && !result;) {\n             final AbstractMappingItem mapping = itor.next();\n-            result |= evaluateMandatoryCondition(mapping.getMandatoryCondition(), attributable);\n+            result |= JexlUtil.evaluateMandatoryCondition(mapping.getMandatoryCondition(), attributable);\n         }\n \n         return result;\n@@ -258,7 +244,7 @@ private SyncopeClientException checkMandatory(final AttributableUtil attrUtil,\n         for (AbstractSchema schema : schemaDAO.findAll(attrUtil.schemaClass())) {\n             if (attributable.getAttribute(schema.getName()) == null\n                     && !schema.isReadonly()\n-                    && (evaluateMandatoryCondition(schema.getMandatoryCondition(), attributable)\n+                    && (JexlUtil.evaluateMandatoryCondition(schema.getMandatoryCondition(), attributable)\n                     || evaluateMandatoryCondition(attrUtil, attributable, schema.getName(),\n                     attrUtil.intMappingType()))) {\n "},{"sha":"fc97fa2a4424c18cd67f811be4c9891deb485347","filename":"core/src/main/java/org/apache/syncope/core/rest/data/DerivedSchemaDataBinder.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java?ref=c490cf6fa52bf0cce6574b074af60e441b599f95","patch":"@@ -26,16 +26,12 @@\n import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n import org.apache.syncope.core.util.JexlUtil;\n import org.springframework.beans.BeanUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n @Component\n public class DerivedSchemaDataBinder {\n \n-    @Autowired\n-    private JexlUtil jexlUtil;\n-\n     private AbstractDerSchema populate(final AbstractDerSchema derSchema, final DerivedSchemaTO derSchemaTO) {\n         SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n@@ -45,7 +41,7 @@ private AbstractDerSchema populate(final AbstractDerSchema derSchema, final Deri\n             requiredValuesMissing.addElement(\"expression\");\n \n             scce.addException(requiredValuesMissing);\n-        } else if (!jexlUtil.isExpressionValid(derSchemaTO.getExpression())) {\n+        } else if (!JexlUtil.isExpressionValid(derSchemaTO.getExpression())) {\n             SyncopeClientException invalidMandatoryCondition = new SyncopeClientException(\n                     SyncopeClientExceptionType.InvalidValues);\n             invalidMandatoryCondition.addElement(derSchemaTO.getExpression());"},{"sha":"0265a5fb84b265a0d7ba2dd2fc8100c252b54498","filename":"core/src/main/java/org/apache/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=c490cf6fa52bf0cce6574b074af60e441b599f95","patch":"@@ -64,14 +64,11 @@ public class ResourceDataBinder {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(ResourceDataBinder.class);\n \n-    private static final String[] MAPPINGITEM_IGNORE_PROPERTIES = {\"id\", \"mapping\"};\n+    private static final String[] MAPPINGITEM_IGNORE_PROPERTIES = { \"id\", \"mapping\" };\n \n     @Autowired\n     private ConnInstanceDAO connInstanceDAO;\n \n-    @Autowired\n-    private JexlUtil jexlUtil;\n-\n     @Autowired\n     private PolicyDAO policyDAO;\n \n@@ -204,7 +201,7 @@ private AbstractMappingItem getMappingItem(final MappingItemTO itemTO, final Abs\n         }\n \n         // no mandatory condition implies mandatory condition false\n-        if (!jexlUtil.isExpressionValid(itemTO.getMandatoryCondition() == null\n+        if (!JexlUtil.isExpressionValid(itemTO.getMandatoryCondition() == null\n                 ? \"false\" : itemTO.getMandatoryCondition())) {\n \n             SyncopeClientException invalidMandatoryCondition = new SyncopeClientException("},{"sha":"dfe7a7c0948b617ce530e3cac1217cc1f213f5f1","filename":"core/src/main/java/org/apache/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=c490cf6fa52bf0cce6574b074af60e441b599f95","patch":"@@ -40,11 +40,8 @@ public class SchemaDataBinder {\n     @Autowired\n     private SchemaDAO schemaDAO;\n \n-    @Autowired\n-    private JexlUtil jexlUtil;\n-\n     private <T extends AbstractDerSchema> void populate(final AbstractSchema schema, final SchemaTO schemaTO) {\n-        if (!jexlUtil.isExpressionValid(schemaTO.getMandatoryCondition())) {\n+        if (!JexlUtil.isExpressionValid(schemaTO.getMandatoryCondition())) {\n             SyncopeClientCompositeErrorException scce =\n                     new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n "},{"sha":"a9ff93c0ad58ebd1be3a0a53069ca09aa86a7d82","filename":"core/src/main/java/org/apache/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=c490cf6fa52bf0cce6574b074af60e441b599f95","patch":"@@ -65,9 +65,9 @@ public class TaskDataBinder {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(TaskDataBinder.class);\n \n-    private static final String[] IGNORE_TASK_PROPERTIES = {\"executions\", \"resource\",};\n+    private static final String[] IGNORE_TASK_PROPERTIES = { \"executions\", \"resource\", };\n \n-    private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = {\"id\", \"task\"};\n+    private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = { \"id\", \"task\" };\n \n     @Autowired\n     private ResourceDAO resourceDAO;\n@@ -78,17 +78,14 @@ public class TaskDataBinder {\n     @Autowired\n     private SchedulerFactoryBean scheduler;\n \n-    @Autowired\n-    private JexlUtil jexlUtil;\n-\n     private void checkJexl(final AbstractAttributableTO attributableTO, final SyncopeClientException sce) {\n         for (AttributeTO attrTO : attributableTO.getAttributes()) {\n-            if (!attrTO.getValues().isEmpty() && !jexlUtil.isExpressionValid(attrTO.getValues().get(0))) {\n+            if (!attrTO.getValues().isEmpty() && !JexlUtil.isExpressionValid(attrTO.getValues().get(0))) {\n                 sce.addElement(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n             }\n         }\n         for (AttributeTO attrTO : attributableTO.getVirtualAttributes()) {\n-            if (!attrTO.getValues().isEmpty() && !jexlUtil.isExpressionValid(attrTO.getValues().get(0))) {\n+            if (!attrTO.getValues().isEmpty() && !JexlUtil.isExpressionValid(attrTO.getValues().get(0))) {\n                 sce.addElement(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n             }\n         }\n@@ -101,10 +98,10 @@ private void fill(final SyncTask task, final SyncTaskTO taskTO) {\n         if (taskTO.getUserTemplate() != null) {\n             UserTO template = taskTO.getUserTemplate();\n \n-            if (StringUtils.isNotBlank(template.getUsername()) && !jexlUtil.isExpressionValid(template.getUsername())) {\n+            if (StringUtils.isNotBlank(template.getUsername()) && !JexlUtil.isExpressionValid(template.getUsername())) {\n                 sce.addElement(\"Invalid JEXL: \" + template.getUsername());\n             }\n-            if (StringUtils.isNotBlank(template.getPassword()) && !jexlUtil.isExpressionValid(template.getPassword())) {\n+            if (StringUtils.isNotBlank(template.getPassword()) && !JexlUtil.isExpressionValid(template.getPassword())) {\n                 sce.addElement(\"Invalid JEXL: \" + template.getPassword());\n             }\n \n@@ -117,7 +114,7 @@ private void fill(final SyncTask task, final SyncTaskTO taskTO) {\n         if (taskTO.getRoleTemplate() != null) {\n             RoleTO template = taskTO.getRoleTemplate();\n \n-            if (StringUtils.isNotBlank(template.getName()) && !jexlUtil.isExpressionValid(template.getName())) {\n+            if (StringUtils.isNotBlank(template.getName()) && !JexlUtil.isExpressionValid(template.getName())) {\n                 sce.addElement(\"Invalid JEXL: \" + template.getName());\n             }\n "},{"sha":"dde7259a6edb94cdc1530efbd5affe6fce18d968","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=c490cf6fa52bf0cce6574b074af60e441b599f95","patch":"@@ -288,7 +288,6 @@ public PropagationByResource update(final SyncopeUser user, final UserMod userMo\n             if (membership == null) {\n                 LOG.debug(\"Invalid membership id specified to be removed: {}\", membershipId);\n             } else {\n-\n                 if (!membershipToBeAddedRoleIds.contains(membership.getSyncopeRole().getId())) {\n                     toBeDeprovisioned.addAll(membership.getSyncopeRole().getResourceNames());\n                 }\n@@ -311,7 +310,6 @@ public PropagationByResource update(final SyncopeUser user, final UserMod userMo\n \n                     // remove derived attributes\n                     for (AbstractDerAttr derAttr : membership.getDerivedAttributes()) {\n-\n                         attributeIds.add(derAttr.getId());\n                     }\n                     for (Long derAttrId : attributeIds) {"},{"sha":"f686e9d2a978699a60a1f70f56c1ff201e9869b9","filename":"core/src/main/java/org/apache/syncope/core/util/AttributableUtil.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java?ref=c490cf6fa52bf0cce6574b074af60e441b599f95","patch":"@@ -232,14 +232,17 @@ public <T extends AbstractMappingItem> List<T> getMappingItems(\n                     }\n                 }\n                 break;\n+\n             case PROPAGATION:\n                 for (T item : items) {\n                     if (MappingPurpose.SYNCHRONIZATION != item.getPurpose()) {\n                         result.add(item);\n                     }\n                 }\n                 break;\n+\n             case BOTH:\n+            default:\n                 result.addAll(items);\n         }\n "},{"sha":"dd701741187cf0feb812e213b26640ff2e617501","filename":"core/src/main/java/org/apache/syncope/core/util/JexlUtil.java","status":"modified","additions":51,"deletions":50,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java?ref=c490cf6fa52bf0cce6574b074af60e441b599f95","patch":"@@ -33,11 +33,11 @@\n import org.apache.syncope.common.to.AbstractAttributableTO;\n import org.apache.syncope.common.to.AttributeTO;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n+import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractDerAttr;\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * @see http://commons.apache.org/jexl/reference/index.html\n@@ -50,15 +50,24 @@ public class JexlUtil {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(JexlUtil.class);\n \n-    private static final String[] IGNORE_FIELDS = {\"password\", \"clearPassword\", \"serialVersionUID\"};\n+    private static final String[] IGNORE_FIELDS = { \"password\", \"clearPassword\", \"serialVersionUID\" };\n \n-    @Autowired\n-    private JexlEngine jexlEngine;\n+    private static JexlEngine jexlEngine;\n \n-    public boolean isExpressionValid(final String expression) {\n+    private static JexlEngine getEngine() {\n+        synchronized (LOG) {\n+            if (jexlEngine == null) {\n+                jexlEngine = ApplicationContextProvider.getApplicationContext().getBean(JexlEngine.class);\n+            }\n+        }\n+\n+        return jexlEngine;\n+    }\n+\n+    public static boolean isExpressionValid(final String expression) {\n         boolean result;\n         try {\n-            jexlEngine.createExpression(expression);\n+            getEngine().createExpression(expression);\n             result = true;\n         } catch (JexlException e) {\n             LOG.error(\"Invalid jexl expression: \" + expression, e);\n@@ -68,12 +77,12 @@ public boolean isExpressionValid(final String expression) {\n         return result;\n     }\n \n-    public String evaluate(final String expression, final JexlContext jexlContext) {\n-        String result = \"\";\n+    public static String evaluate(final String expression, final JexlContext jexlContext) {\n+        String result = StringUtils.EMPTY;\n \n         if (StringUtils.isNotBlank(expression) && jexlContext != null) {\n             try {\n-                Expression jexlExpression = jexlEngine.createExpression(expression);\n+                Expression jexlExpression = getEngine().createExpression(expression);\n                 Object evaluated = jexlExpression.evaluate(jexlContext);\n                 if (evaluated != null) {\n                     result = evaluated.toString();\n@@ -88,15 +97,10 @@ public String evaluate(final String expression, final JexlContext jexlContext) {\n         return result;\n     }\n \n-    public JexlContext addFieldsToContext(final Object attributable, final JexlContext jexlContext) {\n-        JexlContext context = jexlContext == null\n-                ? new MapContext()\n-                : jexlContext;\n-\n+    public static void addFieldsToContext(final Object attributable, final JexlContext jexlContext) {\n         final Field[] fields = attributable.getClass().getDeclaredFields();\n-        for (int i = 0; i < fields.length; i++) {\n+        for (Field field : fields) {\n             try {\n-                Field field = fields[i];\n                 field.setAccessible(true);\n                 final String fieldName = field.getName();\n                 if ((!field.isSynthetic()) && (!fieldName.startsWith(\"pc\"))\n@@ -106,8 +110,8 @@ public JexlContext addFieldsToContext(final Object attributable, final JexlConte\n \n                     final Object fieldValue = field.get(attributable);\n \n-                    context.set(fieldName, fieldValue == null\n-                            ? \"\"\n+                    jexlContext.set(fieldName, fieldValue == null\n+                            ? StringUtils.EMPTY\n                             : (field.getType().equals(Date.class)\n                             ? DataFormat.format((Date) fieldValue, false)\n                             : fieldValue));\n@@ -118,82 +122,73 @@ public JexlContext addFieldsToContext(final Object attributable, final JexlConte\n                 LOG.error(\"Reading class attributes error\", e);\n             }\n         }\n-\n-        return context;\n     }\n \n-    public JexlContext addAttrsToContext(final Collection<? extends AbstractAttr> attributes,\n+    public static void addAttrsToContext(final Collection<? extends AbstractAttr> attributes,\n             final JexlContext jexlContext) {\n \n-        JexlContext context = jexlContext == null\n-                ? new MapContext()\n-                : jexlContext;\n-\n         for (AbstractAttr attr : attributes) {\n             List<String> attributeValues = attr.getValuesAsStrings();\n             String expressionValue = attributeValues.isEmpty()\n-                    ? \"\"\n+                    ? StringUtils.EMPTY\n                     : attributeValues.get(0);\n \n             LOG.debug(\"Add attribute {} with value {}\", attr.getSchema().getName(), expressionValue);\n \n-            context.set(attr.getSchema().getName(), expressionValue);\n+            jexlContext.set(attr.getSchema().getName(), expressionValue);\n         }\n-\n-        return context;\n     }\n \n-    public JexlContext addDerAttrsToContext(final Collection<? extends AbstractDerAttr> derAttrs,\n+    public static void addDerAttrsToContext(final Collection<? extends AbstractDerAttr> derAttrs,\n             final Collection<? extends AbstractAttr> attrs, final JexlContext jexlContext) {\n \n-        JexlContext context = jexlContext == null\n-                ? new MapContext()\n-                : jexlContext;\n-\n         for (AbstractDerAttr derAttr : derAttrs) {\n             String expressionValue = derAttr.getValue(attrs);\n             if (expressionValue == null) {\n-                expressionValue = \"\";\n+                expressionValue = StringUtils.EMPTY;\n             }\n \n             LOG.debug(\"Add derived attribute {} with value {}\", derAttr.getDerivedSchema().getName(), expressionValue);\n \n-            context.set(derAttr.getDerivedSchema().getName(), expressionValue);\n+            jexlContext.set(derAttr.getDerivedSchema().getName(), expressionValue);\n         }\n-\n-        return context;\n     }\n \n-    public JexlContext addVirAttrsToContext(final Collection<? extends AbstractVirAttr> virAttrs,\n+    public static void addVirAttrsToContext(final Collection<? extends AbstractVirAttr> virAttrs,\n             final JexlContext jexlContext) {\n \n-        JexlContext context = jexlContext == null\n-                ? new MapContext()\n-                : jexlContext;\n-\n         for (AbstractVirAttr virAttr : virAttrs) {\n             List<String> attributeValues = virAttr.getValues();\n             String expressionValue = attributeValues.isEmpty()\n-                    ? \"\"\n+                    ? StringUtils.EMPTY\n                     : attributeValues.get(0);\n \n             LOG.debug(\"Add virtual attribute {} with value {}\", virAttr.getVirtualSchema().getName(), expressionValue);\n \n-            context.set(virAttr.getVirtualSchema().getName(), expressionValue);\n+            jexlContext.set(virAttr.getVirtualSchema().getName(), expressionValue);\n         }\n+    }\n+\n+    public static boolean evaluateMandatoryCondition(final String mandatoryCondition,\n+            final AbstractAttributable attributable) {\n+\n+        JexlContext jexlContext = new MapContext();\n+        addAttrsToContext(attributable.getAttributes(), jexlContext);\n+        addDerAttrsToContext(attributable.getDerivedAttributes(), attributable.getAttributes(), jexlContext);\n+        addVirAttrsToContext(attributable.getVirtualAttributes(), jexlContext);\n \n-        return context;\n+        return Boolean.parseBoolean(evaluate(mandatoryCondition, jexlContext));\n     }\n \n-    public String evaluate(final String expression, final AbstractAttributableTO attributableTO) {\n+    public static String evaluate(final String expression, final AbstractAttributableTO attributableTO) {\n         final JexlContext context = new MapContext();\n \n         addFieldsToContext(attributableTO, context);\n \n         for (AttributeTO attr : attributableTO.getAttributes()) {\n             List<String> values = attr.getValues();\n             String expressionValue = values.isEmpty()\n-                    ? \"\"\n+                    ? StringUtils.EMPTY\n                     : values.get(0);\n \n             LOG.debug(\"Add attribute {} with value {}\", attr.getSchema(), expressionValue);\n@@ -203,7 +198,7 @@ public String evaluate(final String expression, final AbstractAttributableTO att\n         for (AttributeTO derAttr : attributableTO.getDerivedAttributes()) {\n             List<String> values = derAttr.getValues();\n             String expressionValue = values.isEmpty()\n-                    ? \"\"\n+                    ? StringUtils.EMPTY\n                     : values.get(0);\n \n             LOG.debug(\"Add derived attribute {} with value {}\", derAttr.getSchema(), expressionValue);\n@@ -213,7 +208,7 @@ public String evaluate(final String expression, final AbstractAttributableTO att\n         for (AttributeTO virAttr : attributableTO.getVirtualAttributes()) {\n             List<String> values = virAttr.getValues();\n             String expressionValue = values.isEmpty()\n-                    ? \"\"\n+                    ? StringUtils.EMPTY\n                     : values.get(0);\n \n             LOG.debug(\"Add virtual attribute {} with value {}\", virAttr.getSchema(), expressionValue);\n@@ -224,4 +219,10 @@ public String evaluate(final String expression, final AbstractAttributableTO att\n         // Evaluate expression using the context prepared before\n         return evaluate(expression, context);\n     }\n+\n+    /**\n+     * Private default constructor, for static-only classes.\n+     */\n+    private JexlUtil() {\n+    }\n }"},{"sha":"6fa18192ffa06712014d94d36d05c62abfa11898","filename":"core/src/main/java/org/apache/syncope/core/util/MappingUtil.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java?ref=c490cf6fa52bf0cce6574b074af60e441b599f95","patch":"@@ -30,7 +30,6 @@\n import org.apache.commons.jexl2.MapContext;\n import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.common.mod.AttributeMod;\n-import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.core.connid.PasswordGenerator;\n@@ -60,6 +59,7 @@\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.Name;\n+import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.context.ConfigurableApplicationContext;\n@@ -125,7 +125,6 @@ public static <T extends AbstractMappingItem> Set<T> getMatchingMappingItems(fin\n      * @param vAttrsToBeRemoved virtual attributes to be removed\n      * @param vAttrsToBeUpdated virtual attributes to be added\n      * @return account link + prepared attribute\n-     * @throws ClassNotFoundException if schema type for given mapping does not exists in current class loader\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T extends AbstractAttributable> Map.Entry<String, Attribute> prepareAttribute(\n@@ -267,14 +266,11 @@ public static <T extends AbstractAttributable> Name evaluateNAME(final T subject\n         // Evaluate AccountLink expression\n         String evalAccountLink = null;\n         if (StringUtils.isNotBlank(attrUtil.getAccountLink(resource))) {\n-            final ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n-            final JexlUtil jexlUtil = context.getBean(JexlUtil.class);\n-\n             final JexlContext jexlContext = new MapContext();\n-            jexlUtil.addFieldsToContext(subject, jexlContext);\n-            jexlUtil.addAttrsToContext(subject.getAttributes(), jexlContext);\n-            jexlUtil.addDerAttrsToContext(subject.getDerivedAttributes(), subject.getAttributes(), jexlContext);\n-            evalAccountLink = jexlUtil.evaluate(attrUtil.getAccountLink(resource), jexlContext);\n+            JexlUtil.addFieldsToContext(subject, jexlContext);\n+            JexlUtil.addAttrsToContext(subject.getAttributes(), jexlContext);\n+            JexlUtil.addDerAttrsToContext(subject.getDerivedAttributes(), subject.getAttributes(), jexlContext);\n+            evalAccountLink = JexlUtil.evaluate(attrUtil.getAccountLink(resource), jexlContext);\n         }\n \n         // If AccountLink evaluates to an empty string, just use the provided AccountId as Name(),"},{"sha":"1b53760d5a4687689307cbcc7eca9048c4efa011","filename":"core/src/main/resources/syncopeContext.xml","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml?ref=c490cf6fa52bf0cce6574b074af60e441b599f95","patch":"@@ -91,8 +91,6 @@ under the License.\n     <property name=\"silent\" value=\"false\"/>\n   </bean>\n   \n-  <bean id=\"jexlUtil\" class=\"org.apache.syncope.core.util.JexlUtil\"/>\n-  \n   <bean id=\"virAttrCache\" class=\"org.apache.syncope.core.util.VirAttrCache\" scope=\"singleton\">\n     <constructor-arg value=\"60\"/>\n     <constructor-arg value=\"5000\"/>"},{"sha":"c853a754da6f99f05c68e686022f3a6997ef48a6","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":36,"deletions":9,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c490cf6fa52bf0cce6574b074af60e441b599f95/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=c490cf6fa52bf0cce6574b074af60e441b599f95","patch":"@@ -2199,7 +2199,7 @@ public void issueSYNCOPE373() {\n \n     @Test\n     public void issueSYNCOPE383() {\n-        // 1. create user on testdb and testdb2\n+        // 1. create user without resources\n         UserTO userTO = getUniqueSampleTO(\"syncope383@apache.org\");\n         userTO.getResources().clear();\n         userTO = createUser(userTO);\n@@ -2281,19 +2281,17 @@ public void issueSYNCOPE397() {\n         //modify virtual attribute\n         userMod.addVirtualAttributeToBeRemoved(\"virtualdata\");\n         userMod.addVirtualAttributeToBeUpdated(attributeMod(\"virtualdata\", \"test@testoneone.com\"));\n+        \n         // check Syncope change password\n-\n         PropagationRequestTO pwdPropRequest = new PropagationRequestTO();\n-        //change pwd on Syncope\n-        pwdPropRequest.addResource(\"ws-target-resource-2\");\n-        //change pwd on Syncope\n         pwdPropRequest.setOnSyncope(true);\n+        pwdPropRequest.addResource(\"ws-target-resource-2\");\n         userMod.setPwdPropRequest(pwdPropRequest);\n+        \n         toBeUpdated = userService.update(userMod.getId(), userMod);\n         assertNotNull(toBeUpdated);\n         assertEquals(\"test@testoneone.com\", toBeUpdated.getVirtualAttributes().get(0).getValues().get(0));\n         // check if propagates correctly with assertEquals on size of tasks list\n-\n         assertEquals(2, toBeUpdated.getPropagationStatusTOs().size());\n     }\n \n@@ -2355,15 +2353,44 @@ public void issueSYNCOPE426() {\n         assertNotNull(userTO);\n     }\n \n-    private boolean getBooleanAttribute(ConnObjectTO connObjectTO, String attrName) {\n+    @Test\n+    public void issueSYNCOPE435() {\n+        // 1. try to create user without password - fail\n+        UserTO userTO = getUniqueSampleTO(\"syncope435@syncope.apache.org\");\n+        userTO.setPassword(null);\n+        userTO.getMemberships().clear();\n+\n+        try {\n+            createUser(userTO);\n+            fail();\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            assertNotNull(e.getException(SyncopeClientExceptionType.InvalidSyncopeUser));\n+        }\n+\n+        userTO.setPassword(\"password123\");\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        // 2. try to update user by subscribing a resource - works but propagation is not even attempted\n+        UserMod userMod = new UserMod();\n+        userMod.getResourcesToBeAdded().add(\"ws-target-resource-1\");\n+\n+        userTO = userService.update(userTO.getId(), userMod);\n+        assertEquals(Collections.singleton(\"ws-target-resource-1\"), userTO.getResources());\n+        assertFalse(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n+        assertTrue(userTO.getPropagationStatusTOs().get(0).getFailureReason().\n+                startsWith(\"Not attempted because there are mandatory attributes without value(s): [__PASSWORD__]\"));\n+    }\n+\n+    private boolean getBooleanAttribute(final ConnObjectTO connObjectTO, final String attrName) {\n         return Boolean.parseBoolean(getStringAttribute(connObjectTO, attrName));\n     }\n \n-    private String getStringAttribute(ConnObjectTO connObjectTO, String attrName) {\n+    private String getStringAttribute(final ConnObjectTO connObjectTO, final String attrName) {\n         return connObjectTO.getAttributeMap().get(attrName).getValues().get(0);\n     }\n \n-    private long getMaxTaskId(List<PropagationTaskTO> tasks) {\n+    private long getMaxTaskId(final List<PropagationTaskTO> tasks) {\n         long newMaxId = Long.MIN_VALUE;\n         for (PropagationTaskTO task : tasks) {\n             if (task.getId() > newMaxId) {"}]}