{"sha":"5d9e6826f91305b890bfd2f2ce8bd1c298dded72","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjVkOWU2ODI2ZjkxMzA1Yjg5MGJmZDJmMmNlOGJkMWMyOThkZGVkNzI=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-03-12T16:20:33Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-03-12T16:20:33Z"},"message":"SYNCOPE-22 #comment provided a separate method to be called to evaluate virtual attributes: ConnObjectUtil.retrieveVirAttrValues(...)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1299730 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f88f55d2a71b77dfad8ee68856426205ced55dd8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f88f55d2a71b77dfad8ee68856426205ced55dd8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5d9e6826f91305b890bfd2f2ce8bd1c298dded72","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5d9e6826f91305b890bfd2f2ce8bd1c298dded72","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5d9e6826f91305b890bfd2f2ce8bd1c298dded72","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"e92e325bb93fbb2a2f46050bde0b323893c8df4e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e92e325bb93fbb2a2f46050bde0b323893c8df4e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e92e325bb93fbb2a2f46050bde0b323893c8df4e"}],"stats":{"total":620,"additions":405,"deletions":215},"files":[{"sha":"6fa5b7b51a687a872b346893ad92c15cfe00cfa3","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttr.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java?ref=5d9e6826f91305b890bfd2f2ce8bd1c298dded72","patch":"@@ -81,8 +81,7 @@ public abstract <T extends AbstractAttrValue> boolean removeValue(\n     public List<String> getValuesAsStrings() {\n         List<String> result;\n         if (getUniqueValue() != null) {\n-            result = Collections.singletonList(\n-                    getUniqueValue().getValueAsString());\n+            result = Collections.singletonList(getUniqueValue().getValueAsString());\n         } else {\n             result = new ArrayList<String>(getValues().size());\n             for (AbstractAttrValue attributeValue : getValues()) {"},{"sha":"8704b7fbb01e70b2c52a97b00f045a41d2fab95c","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":9,"deletions":19,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=5d9e6826f91305b890bfd2f2ce8bd1c298dded72","patch":"@@ -38,7 +38,6 @@ public <T extends AbstractAttr> T getAttribute(final String schemaName) {\n                 result = attribute;\n             }\n         }\n-\n         return result;\n     }\n \n@@ -112,38 +111,29 @@ protected Map<AbstractVirSchema, AbstractVirAttr> getVirAttrMap() {\n \n     public abstract Long getId();\n \n-    public abstract <T extends AbstractAttr> boolean addAttribute(\n-            T attribute);\n+    public abstract <T extends AbstractAttr> boolean addAttribute(T attribute);\n \n-    public abstract <T extends AbstractAttr> boolean removeAttribute(\n-            T attribute);\n+    public abstract <T extends AbstractAttr> boolean removeAttribute(T attribute);\n \n     public abstract List<? extends AbstractAttr> getAttributes();\n \n-    public abstract void setAttributes(\n-            List<? extends AbstractAttr> attributes);\n+    public abstract void setAttributes(List<? extends AbstractAttr> attributes);\n \n-    public abstract <T extends AbstractDerAttr> boolean addDerivedAttribute(\n-            T derivedAttribute);\n+    public abstract <T extends AbstractDerAttr> boolean addDerivedAttribute(T derivedAttribute);\n \n-    public abstract <T extends AbstractDerAttr> boolean removeDerivedAttribute(\n-            T derivedAttribute);\n+    public abstract <T extends AbstractDerAttr> boolean removeDerivedAttribute(T derivedAttribute);\n \n     public abstract List<? extends AbstractDerAttr> getDerivedAttributes();\n \n-    public abstract void setDerivedAttributes(\n-            List<? extends AbstractDerAttr> derivedAttributes);\n+    public abstract void setDerivedAttributes(List<? extends AbstractDerAttr> derivedAttributes);\n \n-    public abstract <T extends AbstractVirAttr> boolean addVirtualAttribute(\n-            T virtualAttributes);\n+    public abstract <T extends AbstractVirAttr> boolean addVirtualAttribute(T virtualAttributes);\n \n-    public abstract <T extends AbstractVirAttr> boolean removeVirtualAttribute(\n-            T virtualAttribute);\n+    public abstract <T extends AbstractVirAttr> boolean removeVirtualAttribute(T virtualAttribute);\n \n     public abstract List<? extends AbstractVirAttr> getVirtualAttributes();\n \n-    public abstract void setVirtualAttributes(\n-            List<? extends AbstractVirAttr> virtualAttributes);\n+    public abstract void setVirtualAttributes(List<? extends AbstractVirAttr> virtualAttributes);\n \n     protected abstract Set<ExternalResource> resources();\n "},{"sha":"fbd0d550c16c4fec9dbc88155a16a6c0429fedb7","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractVirAttr.java","status":"modified","additions":6,"deletions":92,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java?ref=5d9e6826f91305b890bfd2f2ce8bd1c298dded72","patch":"@@ -19,24 +19,12 @@\n package org.syncope.core.persistence.beans;\n \n import java.util.ArrayList;\n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n import javax.persistence.Transient;\n-import org.identityconnectors.framework.common.objects.Attribute;\n-import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.identityconnectors.framework.common.objects.OperationOptionsBuilder;\n-import org.identityconnectors.framework.common.objects.Uid;\n-import org.springframework.context.ConfigurableApplicationContext;\n-import org.syncope.core.init.ConnInstanceLoader;\n-import org.syncope.core.propagation.ConnectorFacadeProxy;\n-import org.syncope.core.util.ApplicationContextManager;\n-import org.syncope.core.util.SchemaMappingUtil;\n-import org.syncope.types.IntMappingType;\n \n @MappedSuperclass\n public abstract class AbstractVirAttr extends AbstractBaseBean {\n@@ -58,87 +46,14 @@ public void setValues(final List<String> values) {\n         this.values = values;\n     }\n \n-    protected <T extends AbstractAttributable> List<Object> retrieveValues(\n-            final T attributable, final String attributeName, final IntMappingType intMappingType) {\n-\n-        LOG.debug(\"{}: retrieving external values for {}\", new Object[]{attributable, attributeName});\n-\n-        List<Object> virAttrValues = new ArrayList<Object>();\n-\n-        // if attributable is not defined it won't be possible to retrieve values from external resources.\n-        if (attributable == null) {\n-            return virAttrValues;\n+    public void addValue(final String value) {\n+        if (values == null) {\n+            values = new ArrayList<String>();\n         }\n \n-        ConfigurableApplicationContext context = ApplicationContextManager.getApplicationContext();\n-        ConnInstanceLoader connInstanceLoader = context.getBean(ConnInstanceLoader.class);\n-\n-        if (connInstanceLoader == null) {\n-            LOG.error(\"Could not get to ConnInstanceLoader\");\n-            return null;\n+        if (!values.contains(value)) {\n+            values.add(value);\n         }\n-\n-        for (ExternalResource resource : attributable.getResources()) {\n-            LOG.debug(\"Retrieving attribute mapped on {}\", resource);\n-\n-            Set<String> attributeNames = new HashSet<String>();\n-\n-            String accountId = null;\n-\n-            for (SchemaMapping mapping : resource.getMappings()) {\n-                final String extAttrName = SchemaMappingUtil.getExtAttrName(mapping);\n-\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Processing mapping.\"\n-                            + \"\\n\\tID: \" + mapping.getId()\n-                            + \"\\n\\tSource: \" + mapping.getIntAttrName()\n-                            + \"\\n\\tDestination: \" + extAttrName\n-                            + \"\\n\\tType: \" + mapping.getIntMappingType()\n-                            + \"\\n\\tMandatory condition: \" + mapping.getMandatoryCondition()\n-                            + \"\\n\\tAccountId: \" + mapping.isAccountid()\n-                            + \"\\n\\tPassword: \" + mapping.isPassword());\n-                }\n-\n-                if (attributeName.equals(mapping.getIntAttrName()) && mapping.getIntMappingType() == intMappingType) {\n-                    attributeNames.add(extAttrName);\n-                }\n-\n-                if (mapping.isAccountid()) {\n-                    try {\n-                        final List<String> values = SchemaMappingUtil.getIntValueAsStrings(attributable, mapping);\n-                        accountId = values == null ? null : values.get(0);\n-                    } catch (NullPointerException e) {\n-                        // ignore exception\n-                        LOG.debug(\"Invalid accountId specified\", e);\n-                    }\n-                }\n-            }\n-\n-            if (attributeNames != null && accountId != null) {\n-                LOG.debug(\"Get object attribute for entry {}\", accountId);\n-\n-                try {\n-                    final OperationOptionsBuilder oob = new OperationOptionsBuilder();\n-                    oob.setAttributesToGet(attributeNames);\n-\n-                    final ConnectorFacadeProxy connector = connInstanceLoader.getConnector(resource);\n-\n-                    Set<Attribute> attributes = connector.getObjectAttributes(\n-                            ObjectClass.ACCOUNT, new Uid(accountId), oob.build(), attributeNames);\n-\n-                    LOG.debug(\"Retrieved {}\", attributes);\n-\n-                    for (Attribute attribute : attributes) {\n-                        virAttrValues.addAll(attribute.getValue());\n-                    }\n-                } catch (Exception e) {\n-                    LOG.warn(\"Error connecting to {}\", resource.getName(), e);\n-                    // ignore exception and go ahead\n-                }\n-            }\n-        }\n-\n-        return virAttrValues;\n     }\n \n     public abstract List<String> getValues();\n@@ -149,6 +64,5 @@ protected <T extends AbstractAttributable> List<Object> retrieveValues(\n \n     public abstract <T extends AbstractVirSchema> T getVirtualSchema();\n \n-    public abstract <T extends AbstractVirSchema> void setVirtualSchema(\n-            T derivedSchema);\n+    public abstract <T extends AbstractVirSchema> void setVirtualSchema(T derivedSchema);\n }"},{"sha":"8b65363e5ee38f342921186017d40d950a5cc662","filename":"core/src/main/java/org/syncope/core/persistence/beans/ExternalResource.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java?ref=5d9e6826f91305b890bfd2f2ce8bd1c298dded72","patch":"@@ -227,18 +227,6 @@ public Set<SchemaMapping> getMappings(final String intAttrName, final IntMapping\n         return result;\n     }\n \n-    public SchemaMapping getAccountIdMapping() {\n-        SchemaMapping result = null;\n-\n-        for (SchemaMapping mapping : mappings) {\n-            if (mapping.isAccountid()) {\n-                result = mapping;\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n     public boolean removeMapping(SchemaMapping mapping) {\n         return mappings.remove(mapping);\n     }"},{"sha":"160c25635c511be3def4be06a8c99a8b9335c27e","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=5d9e6826f91305b890bfd2f2ce8bd1c298dded72","patch":"@@ -367,7 +367,7 @@ public List<? extends AbstractVirAttr> getVirtualAttributes() {\n     @Override\n     public void setVirtualAttributes(final List<? extends AbstractVirAttr> virtualAttributes) {\n         this.virtualAttributes.clear();\n-        \n+\n         if (virtualAttributes != null && !virtualAttributes.isEmpty()) {\n             this.virtualAttributes.addAll((List<UVirAttr>) virtualAttributes);\n         }"},{"sha":"2b3964df165da0c845e70f5cc5e67f282dc56e12","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UVirAttr.java","status":"modified","additions":3,"deletions":19,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirAttr.java?ref=5d9e6826f91305b890bfd2f2ce8bd1c298dded72","patch":"@@ -26,7 +26,6 @@\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractVirAttr;\n import org.syncope.core.persistence.beans.AbstractVirSchema;\n-import org.syncope.types.IntMappingType;\n \n @Entity\n public class UVirAttr extends AbstractVirAttr {\n@@ -63,24 +62,9 @@ public <T extends AbstractVirSchema> void setVirtualSchema(\n \n     @Override\n     public List<String> getValues() {\n-        LOG.debug(\"{}: retrieve value for attribute {}\", new Object[]{getOwner(), getVirtualSchema().getName()});\n-\n-        if (values != null) {\n-            return values;\n-        }\n-\n-        final List<Object> retrievedValues =\n-                retrieveValues(getOwner(), getVirtualSchema().getName(), IntMappingType.UserVirtualSchema);\n-\n-        LOG.debug(\"Retrieved external values {}\", retrievedValues);\n-\n-        List<String> stringValues = new ArrayList<String>();\n-        for (Object value : retrievedValues) {\n-            if (value != null) {\n-                stringValues.add(value.toString());\n-            }\n+        if (values == null) {\n+            values = new ArrayList<String>();\n         }\n-\n-        return stringValues;\n+        return values;\n     }\n }"},{"sha":"3857eb87ea60fe6b3a3d278ce60177eb4a783bea","filename":"core/src/main/java/org/syncope/core/propagation/ConnectorFacadeProxy.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java?ref=5d9e6826f91305b890bfd2f2ce8bd1c298dded72","patch":"@@ -21,7 +21,6 @@\n import java.io.File;\n import java.net.URI;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -480,15 +479,14 @@ public Attribute getObjectAttribute(\n     public Set<Attribute> getObjectAttributes(\n             final ObjectClass objectClass,\n             final Uid uid,\n-            final OperationOptions options,\n-            final Collection<String> attributeNames) {\n+            final OperationOptions options) {\n \n         final Set<Attribute> attributes = new HashSet<Attribute>();\n \n         try {\n             final ConnectorObject object = connector.getObject(objectClass, uid, options);\n \n-            for (String attribute : attributeNames) {\n+            for (String attribute : options.getAttributesToGet()) {\n                 attributes.add(object.getAttributeByName(attribute));\n             }\n         } catch (NullPointerException e) {"},{"sha":"8020aef35a9b0c5bbad388f1a98b9001d6233a2f","filename":"core/src/main/java/org/syncope/core/propagation/PropagationManager.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java?ref=5d9e6826f91305b890bfd2f2ce8bd1c298dded72","patch":"@@ -160,7 +160,7 @@ private SyncopeUser getSyncopeUser(final Long userId)\n      */\n     public List<PropagationTask> getCreateTaskIds(\n             final WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n-            final String password, \n+            final String password,\n             final List<AttributeTO> vAttrs)\n             throws NotFoundException {\n \n@@ -463,8 +463,7 @@ private Map.Entry<String, Attribute> prepareAttribute(\n      * @return account link + prepared attributes\n      */\n     private Map.Entry<String, Set<Attribute>> prepareAttributes(\n-            final SyncopeUser user, final String password,\n-            final Boolean enable, final ExternalResource resource) {\n+            final SyncopeUser user, final String password, final Boolean enable, final ExternalResource resource) {\n \n         LOG.debug(\"Preparing resource attributes for {}\"\n                 + \" on resource {}\""},{"sha":"fce7de530de612ebcc61af5add7b114b5b28735b","filename":"core/src/main/java/org/syncope/core/report/UserReportlet.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Freport%2FUserReportlet.java?ref=5d9e6826f91305b890bfd2f2ce8bd1c298dded72","patch":"@@ -273,8 +273,7 @@ private void doExtract(final ContentHandler handler, final List<SyncopeUser> use\n             // values to String is already encapsulated there\n             UserTO userTO = userDataBinder.getUserTO(user);\n \n-            doExtractAttributes(handler, userTO, conf.getAttrs(),\n-                    conf.getDerAttrs(), conf.getVirAttrs());\n+            doExtractAttributes(handler, userTO, conf.getAttrs(), conf.getDerAttrs(), conf.getVirAttrs());\n \n             if (conf.getFeatures().contains(Feature.memberships)) {\n                 handler.startElement(\"\", \"\", \"memberships\", null);"},{"sha":"b76aa289edc7206140252d2c9e69e0e8b462e2dc","filename":"core/src/main/java/org/syncope/core/rest/controller/UserRequestController.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java?ref=5d9e6826f91305b890bfd2f2ce8bd1c298dded72","patch":"@@ -72,8 +72,7 @@ public UserTO read()\n     }\n \n     private Boolean isCreateAllowedByConf() {\n-        SyncopeConf createRequestAllowed =\n-                confDAO.find(\"createRequest.allowed\", \"false\");\n+        SyncopeConf createRequestAllowed = confDAO.find(\"createRequest.allowed\", \"false\");\n \n         return Boolean.valueOf(createRequestAllowed.getValue());\n     }"},{"sha":"48090fb00506f23c6e6609e78f66d30ade6d7023","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":7,"deletions":12,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=5d9e6826f91305b890bfd2f2ce8bd1c298dded72","patch":"@@ -400,29 +400,25 @@ protected PropagationByResource fill(\n \n         // 1. resources to be removed\n         ExternalResource resource;\n-        for (String resourceToBeRemoved :\n-                attributableMod.getResourcesToBeRemoved()) {\n+        for (String resourceToBeRemoved : attributableMod.getResourcesToBeRemoved()) {\n \n             resource = getResource(resourceToBeRemoved);\n \n             if (resource != null) {\n                 propByRes.add(PropagationOperation.DELETE, resource.getName());\n-\n                 attributable.removeResource(resource);\n             }\n         }\n \n         LOG.debug(\"Resources to be removed:\\n{}\", propByRes);\n \n         // 2. resources to be added\n-        for (String resourceToBeAdded :\n-                attributableMod.getResourcesToBeAdded()) {\n+        for (String resourceToBeAdded : attributableMod.getResourcesToBeAdded()) {\n \n             resource = getResource(resourceToBeAdded);\n \n             if (resource != null) {\n                 propByRes.add(PropagationOperation.CREATE, resource.getName());\n-\n                 attributable.addResource(resource);\n             }\n         }\n@@ -619,7 +615,7 @@ protected PropagationByResource fill(\n \n         LOG.debug(\"Derived attributes to be added:\\n{}\", propByRes);\n \n-        // 7. virtual attributes: for users this is delegated to  PropagationManager\n+        // 7. virtual attributes: for users this is delegated to PropagationManager\n         if (AttributableType.USER != attributableUtil.getType()) {\n             fillVirtual(attributable,\n                     attributableMod.getVirtualAttributesToBeRemoved(),\n@@ -691,11 +687,9 @@ protected void fill(\n \n         // Only consider attributeTO with values\n         for (AttributeTO attributeTO : attributableTO.getAttributes()) {\n-            if (attributeTO.getValues() != null\n-                    && !attributeTO.getValues().isEmpty()) {\n+            if (attributeTO.getValues() != null && !attributeTO.getValues().isEmpty()) {\n \n-                schema = getSchema(attributeTO.getSchema(),\n-                        attributableUtil.schemaClass());\n+                schema = getSchema(attributeTO.getSchema(), attributableUtil.schemaClass());\n \n                 if (schema != null) {\n                     attribute = attributable.getAttribute(schema.getName());\n@@ -704,7 +698,8 @@ protected void fill(\n                         attribute.setSchema(schema);\n                     }\n \n-                    fillAttribute(attributeTO.getValues(),\n+                    fillAttribute(\n+                            attributeTO.getValues(),\n                             attributableUtil,\n                             schema,\n                             attribute,"},{"sha":"e636f35e9699f641cc76981c07dfccbae8529e13","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=5d9e6826f91305b890bfd2f2ce8bd1c298dded72","patch":"@@ -19,7 +19,6 @@\n package org.syncope.core.rest.data;\n \n import java.util.Date;\n-import org.syncope.core.util.AttributableUtil;\n import java.util.HashSet;\n import java.util.Set;\n import javassist.NotFoundException;\n@@ -38,19 +37,19 @@\n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.beans.AbstractVirAttr;\n-import org.syncope.core.persistence.beans.Policy;\n import org.syncope.core.persistence.beans.ExternalResource;\n+import org.syncope.core.persistence.beans.Policy;\n import org.syncope.core.persistence.beans.SchemaMapping;\n-import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.membership.MAttr;\n import org.syncope.core.persistence.beans.membership.MDerAttr;\n import org.syncope.core.persistence.beans.membership.MVirAttr;\n+import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.dao.TaskDAO;\n-import org.syncope.core.persistence.dao.TaskExecDAO;\n import org.syncope.core.propagation.PropagationByResource;\n import org.syncope.core.rest.controller.UnauthorizedRoleException;\n+import org.syncope.core.util.AttributableUtil;\n+import org.syncope.core.util.ConnObjectUtil;\n import org.syncope.core.util.EntitlementUtil;\n import org.syncope.types.AttributableType;\n import org.syncope.types.CipherAlgorithm;\n@@ -73,10 +72,7 @@ public class UserDataBinder extends AbstractAttributableDataBinder {\n         \"resources\"};\n \n     @Autowired\n-    private TaskDAO taskDAO;\n-\n-    @Autowired\n-    private TaskExecDAO taskExecDAO;\n+    private ConnObjectUtil connObjectUtil;\n \n     @Transactional(readOnly = true)\n     public SyncopeUser getUserFromId(final Long userId)\n@@ -376,10 +372,14 @@ public PropagationByResource update(final SyncopeUser user,\n \n     @Transactional(readOnly = true)\n     public UserTO getUserTO(final SyncopeUser user) {\n+\n         UserTO userTO = new UserTO();\n \n         BeanUtils.copyProperties(user, userTO, IGNORE_USER_PROPERTIES);\n \n+        // retrieve virtual values\n+        connObjectUtil.retrieveVirAttrValues(user);\n+\n         fillTO(userTO,\n                 user.getAttributes(),\n                 user.getDerivedAttributes(),"},{"sha":"e5451dea9eb1331307b74f803f5c2aca3493c86b","filename":"core/src/main/java/org/syncope/core/rest/data/UserRequestDataBinder.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserRequestDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserRequestDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserRequestDataBinder.java?ref=5d9e6826f91305b890bfd2f2ce8bd1c298dded72","patch":"@@ -70,9 +70,7 @@ public SyncopeUser getUserFromId(final Long userId)\n     public UserTO getAuthUserTO()\n             throws NotFoundException {\n \n-        SyncopeUser authUser = userDAO.find(\n-                SecurityContextHolder.getContext().\n-                getAuthentication().getName());\n+        SyncopeUser authUser = userDAO.find(SecurityContextHolder.getContext().getAuthentication().getName());\n         return userDataBinder.getUserTO(authUser);\n     }\n "},{"sha":"16d98c799d7bc402f9de2df54ae604ef7ef00c24","filename":"core/src/main/java/org/syncope/core/scheduling/SyncJob.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java?ref=5d9e6826f91305b890bfd2f2ce8bd1c298dded72","patch":"@@ -230,7 +230,8 @@ private List<Long> findExistingUsers(final SyncDelta delta) {\n             final SyncopeUser found;\n             List<SyncopeUser> users;\n \n-            final SchemaMapping accountIdMap = syncTask.getResource().getAccountIdMapping();\n+            final SchemaMapping accountIdMap =\n+                    SchemaMappingUtil.getAccountIdMapping(syncTask.getResource().getMappings());\n \n             switch (accountIdMap.getIntMappingType()) {\n                 case Username:\n@@ -596,7 +597,7 @@ protected String doExecute(final boolean dryRun)\n             throw new JobExecutionException(msg, e);\n         }\n \n-        final SchemaMapping accountIdMap = syncTask.getResource().getAccountIdMapping();\n+        final SchemaMapping accountIdMap = SchemaMappingUtil.getAccountIdMapping(syncTask.getResource().getMappings());\n \n         if (accountIdMap == null) {\n             throw new JobExecutionException(\"Invalid account id mapping for resource \" + syncTask.getResource());"},{"sha":"7f89655ea0a120c50bb3680327e0f86c37637e29","filename":"core/src/main/java/org/syncope/core/util/ConnObjectUtil.java","status":"modified","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java?ref=5d9e6826f91305b890bfd2f2ce8bd1c298dded72","patch":"@@ -18,20 +18,28 @@\n  */\n package org.syncope.core.util;\n \n+import java.util.Collection;\n import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import javassist.NotFoundException;\n import org.apache.commons.lang.RandomStringUtils;\n import org.apache.commons.lang.StringUtils;\n import org.identityconnectors.common.security.GuardedByteArray;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.OperationOptionsBuilder;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n+import org.identityconnectors.framework.common.objects.Uid;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.stereotype.Component;\n import org.syncope.client.mod.AttributeMod;\n import org.syncope.client.mod.UserMod;\n@@ -40,8 +48,13 @@\n import org.syncope.client.to.ConnObjectTO;\n import org.syncope.client.to.MembershipTO;\n import org.syncope.client.to.UserTO;\n+import org.syncope.core.init.ConnInstanceLoader;\n+import org.syncope.core.persistence.beans.AbstractAttributable;\n+import org.syncope.core.persistence.beans.AbstractVirAttr;\n+import org.syncope.core.persistence.beans.ExternalResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.SyncTask;\n+import org.syncope.core.propagation.ConnectorFacadeProxy;\n import org.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.syncope.core.rest.data.UserDataBinder;\n \n@@ -322,6 +335,82 @@ public ConnObjectTO getConnObjectTO(final ConnectorObject connObject) {\n         return connObjectTO;\n     }\n \n+    public void retrieveVirAttrValues(final AbstractAttributable owner) {\n+        final ConfigurableApplicationContext context = ApplicationContextManager.getApplicationContext();\n+        final ConnInstanceLoader connInstanceLoader = context.getBean(ConnInstanceLoader.class);\n+\n+        final Map<SchemaMappingUtil.SchemaMappingsWrapper, ConnectorObject> remoteObjects =\n+                new HashMap<SchemaMappingUtil.SchemaMappingsWrapper, ConnectorObject>();\n+\n+        for (ExternalResource resource : owner.getResources()) {\n+            LOG.debug(\"Retrieve remote object from '{}'\", resource.getName());\n+            try {\n+                final ConnectorFacadeProxy connector = connInstanceLoader.getConnector(resource);\n+\n+                final SchemaMappingUtil.SchemaMappingsWrapper mappings =\n+                        new SchemaMappingUtil.SchemaMappingsWrapper(resource.getMappings());\n+\n+                final String accountId = SchemaMappingUtil.getAccountIdValue(owner, mappings.getAccountIdMapping());\n+\n+                LOG.debug(\"Search for object with accountId '{}'\", accountId);\n+\n+                if (StringUtils.isNotBlank(accountId)) {\n+                    // Retrieve attributes to get\n+                    final Set<String> extAttrNames = new HashSet<String>();\n+\n+                    for (Collection<SchemaMapping> virAttrMappings : mappings.getuVirMappings().values()) {\n+                        for (SchemaMapping virAttrMapping : virAttrMappings) {\n+                            extAttrNames.add(SchemaMappingUtil.getExtAttrName(virAttrMapping));\n+                        }\n+                    }\n+\n+                    // Search for remote object\n+                    if (extAttrNames != null) {\n+                        final OperationOptionsBuilder oob = new OperationOptionsBuilder();\n+                        oob.setAttributesToGet(extAttrNames);\n+\n+                        final ConnectorObject connectorObject =\n+                                connector.getObject(ObjectClass.ACCOUNT, new Uid(accountId), oob.build());\n+\n+                        if (connectorObject != null) {\n+                            remoteObjects.put(mappings, connectorObject);\n+                        }\n+\n+                        LOG.debug(\"Retrieved remotye object {}\", connectorObject);\n+                    }\n+                }\n+            } catch (NotFoundException e) {\n+                LOG.error(\"Unable to retrieve virtual attribute values on '{}'\", resource.getName(), e);\n+            }\n+        }\n+\n+        for (AbstractVirAttr virAttr : owner.getVirtualAttributes()) {\n+            LOG.debug(\"Provide value for virtual attribute '{}'\", virAttr.getVirtualSchema().getName());\n+\n+            for (SchemaMappingUtil.SchemaMappingsWrapper mappings : remoteObjects.keySet()) {\n+                Collection<SchemaMapping> virAttrMappings =\n+                        mappings.getuVirMappings().get(virAttr.getVirtualSchema().getName());\n+\n+                if (virAttrMappings != null) {\n+                    for (SchemaMapping virAttrMapping : virAttrMappings) {\n+                        String extAttrName = SchemaMappingUtil.getExtAttrName(virAttrMapping);\n+                        Attribute extAttr = remoteObjects.get(mappings).getAttributeByName(extAttrName);\n+\n+                        if (extAttr != null && extAttr.getValue() != null && !extAttr.getValue().isEmpty()) {\n+                            for (Object obj : extAttr.getValue()) {\n+                                if (obj != null) {\n+                                    virAttr.addValue(obj.toString());\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        LOG.debug(\"Virtual attribute evaluation ended\");\n+    }\n+\n     private void fillFromTemplate(final AbstractAttributableTO attributableTO, final AbstractAttributableTO template) {\n \n         Map<String, AttributeTO> currentAttrMap ="},{"sha":"24f6ac100b53d011a2def5c86944419fc2911d7c","filename":"core/src/main/java/org/syncope/core/util/SchemaMappingUtil.java","status":"modified","additions":270,"deletions":33,"changes":303,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FSchemaMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5d9e6826f91305b890bfd2f2ce8bd1c298dded72/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FSchemaMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FSchemaMappingUtil.java?ref=5d9e6826f91305b890bfd2f2ce8bd1c298dded72","patch":"@@ -19,14 +19,19 @@\n package org.syncope.core.util;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import org.apache.commons.collections.keyvalue.DefaultMapEntry;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n@@ -89,6 +94,33 @@ public static String getIntAttrName(final SchemaMapping mapping) {\n         return name;\n     }\n \n+    public static Set<SchemaMapping> getMappings(\n+            final Collection<SchemaMapping> mappings, final String intAttrName, final IntMappingType type) {\n+\n+        final Set<SchemaMapping> result = new HashSet<SchemaMapping>();\n+\n+        for (SchemaMapping schemaMapping : mappings) {\n+            if (schemaMapping.getIntMappingType() == type && intAttrName.equals(getIntAttrName(schemaMapping))) {\n+                result.add(schemaMapping);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    public static Set<SchemaMapping> getMappings(final Collection<SchemaMapping> mappings, final String intAttrName) {\n+\n+        final Set<SchemaMapping> result = new HashSet<SchemaMapping>();\n+\n+        for (SchemaMapping schemaMapping : mappings) {\n+            if (intAttrName.equals(getIntAttrName(schemaMapping))) {\n+                result.add(schemaMapping);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n     public static String getIntAttrName(final SchemaMapping mapping, final IntMappingType type) {\n         return type == mapping.getIntMappingType() ? getIntAttrName(mapping) : null;\n     }\n@@ -226,40 +258,47 @@ public static List<String> getIntValueAsStrings(\n     public static List<String> getIntValueAsStrings(\n             final AbstractAttributable attributable, final SchemaMapping mapping, String clearPassword) {\n \n-        final List<String> value;\n+        List<String> value = new ArrayList<String>();\n \n-        switch (mapping.getIntMappingType()) {\n-            case Username:\n-                value = new ArrayList<String>();\n-                value.add(((SyncopeUser) attributable).getUsername());\n-                break;\n-            case Password:\n-                if (clearPassword == null) {\n-                    value = null;\n-                } else {\n-                    value = new ArrayList<String>();\n-                    value.add(clearPassword);\n-                }\n-                break;\n-            case UserSchema:\n-            case RoleSchema:\n-            case MembershipSchema:\n-                value = attributable.getAttribute(mapping.getIntAttrName()).getValuesAsStrings();\n-                break;\n-            case UserVirtualSchema:\n-            case RoleVirtualSchema:\n-            case MembershipVirtualSchema:\n-                value = attributable.getVirtualAttribute(mapping.getIntAttrName()).getValues();\n-                break;\n-            case UserDerivedSchema:\n-            case RoleDerivedSchema:\n-            case MembershipDerivedSchema:\n-                value = new ArrayList<String>();\n-                value.add(attributable.getDerivedAttribute(mapping.getIntAttrName()).getValue(\n-                        attributable.getAttributes()));\n-                break;\n-            default:\n-                value = null;\n+        if (mapping != null) {\n+            switch (mapping.getIntMappingType()) {\n+                case Username:\n+                    value.add(((SyncopeUser) attributable).getUsername());\n+                    break;\n+                case Password:\n+                    if (clearPassword != null) {\n+                        value.add(clearPassword);\n+                    }\n+                    break;\n+                case UserSchema:\n+                case RoleSchema:\n+                case MembershipSchema:\n+                    AbstractAttr abstractAttr = attributable.getAttribute(mapping.getIntAttrName());\n+                    if (abstractAttr != null && abstractAttr.getValues() != null) {\n+                        value.addAll(abstractAttr.getValuesAsStrings());\n+                    }\n+                    break;\n+                case UserVirtualSchema:\n+                case RoleVirtualSchema:\n+                case MembershipVirtualSchema:\n+                    AbstractVirAttr abstractVirAttr = attributable.getVirtualAttribute(mapping.getIntAttrName());\n+                    if (abstractVirAttr != null && abstractVirAttr.getValues() != null) {\n+                        value.addAll(abstractVirAttr.getValues());\n+                    }\n+                    break;\n+                case UserDerivedSchema:\n+                case RoleDerivedSchema:\n+                case MembershipDerivedSchema:\n+                    AbstractDerAttr abstractDerAttr = attributable.getDerivedAttribute(mapping.getIntAttrName());\n+                    if (abstractDerAttr != null) {\n+                        String abstractDerAttrValue = abstractDerAttr.getValue(attributable.getAttributes());\n+                        if (abstractDerAttrValue != null) {\n+                            value.add(abstractDerAttrValue);\n+                        }\n+                    }\n+                    break;\n+                default:\n+            }\n         }\n \n         return value;\n@@ -312,4 +351,202 @@ public static Class getIntMappingTypeClass(final IntMappingType intMappingType)\n \n         return result;\n     }\n+\n+    /**\n+     * Get first occurance of accountId mapping from a collection of mappings.\n+     *\n+     * @param mappings collection of SchemaMapping.\n+     * @return AccountId mapping or null if no occurences found.\n+     */\n+    public static final SchemaMapping getAccountIdMapping(final Collection<SchemaMapping> mappings) {\n+\n+        for (SchemaMapping mapping : mappings) {\n+            if (mapping.isAccountid()) {\n+                return mapping;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Get accountId internal value.\n+     *\n+     * @param attributable attributable.\n+     * @param mappings collection of SchemaMapping.\n+     * @return accountId internal value.\n+     */\n+    public static final String getAccountIdValue(\n+            final AbstractAttributable attributable, final Collection<SchemaMapping> mappings) {\n+        final List<String> values = getIntValueAsStrings(attributable, getAccountIdMapping(mappings));\n+        return values == null || values.isEmpty() ? null : values.get(0);\n+    }\n+\n+    /**\n+     * Get accountId internal value.\n+     *\n+     * @param attributable attributable.\n+     * @param mappings accountId mapping.\n+     * @return accountId internal value.\n+     */\n+    public static final String getAccountIdValue(final AbstractAttributable attributable, final SchemaMapping mapping) {\n+        final List<String> values = getIntValueAsStrings(attributable, mapping);\n+        return values == null || values.isEmpty() ? null : values.get(0);\n+    }\n+\n+    public static class SchemaMappingsWrapper {\n+\n+        SchemaMapping accountIdMapping = null;\n+\n+        SchemaMapping passwordMapping = null;\n+\n+        final Map<String, Collection<SchemaMapping>> uMappings = new HashMap<String, Collection<SchemaMapping>>();\n+\n+        final Map<String, Collection<SchemaMapping>> uVirMappings = new HashMap<String, Collection<SchemaMapping>>();\n+\n+        final Map<String, Collection<SchemaMapping>> uDerMappings = new HashMap<String, Collection<SchemaMapping>>();\n+\n+        final Map<String, Collection<SchemaMapping>> rMappings = new HashMap<String, Collection<SchemaMapping>>();\n+\n+        final Map<String, Collection<SchemaMapping>> rVirMappings = new HashMap<String, Collection<SchemaMapping>>();\n+\n+        final Map<String, Collection<SchemaMapping>> rDerMappings = new HashMap<String, Collection<SchemaMapping>>();\n+\n+        final Map<String, Collection<SchemaMapping>> mMappings = new HashMap<String, Collection<SchemaMapping>>();\n+\n+        final Map<String, Collection<SchemaMapping>> mVirMappings = new HashMap<String, Collection<SchemaMapping>>();\n+\n+        final Map<String, Collection<SchemaMapping>> mDerMappings = new HashMap<String, Collection<SchemaMapping>>();\n+\n+        public SchemaMappingsWrapper(final Collection<SchemaMapping> mappings) {\n+            if (mappings == null) {\n+                return;\n+            }\n+\n+            for (SchemaMapping mapping : mappings) {\n+                if (mapping.isAccountid() && accountIdMapping == null) {\n+\n+                    accountIdMapping = mapping;\n+\n+                } else if (mapping.isPassword() && passwordMapping == null) {\n+\n+                    passwordMapping = mapping;\n+\n+                } else {\n+                    final String intAttrName = getIntAttrName(mapping);\n+\n+                    switch (mapping.getIntMappingType()) {\n+                        case Password:\n+                            if (passwordMapping == null) {\n+                                passwordMapping = mapping;\n+                            }\n+                            break;\n+                        case Username:\n+                        case SyncopeUserId:\n+                        case UserSchema:\n+                            if (uMappings.get(intAttrName) == null) {\n+                                uMappings.put(intAttrName, new HashSet<SchemaMapping>());\n+                            }\n+                            uMappings.get(intAttrName).add(mapping);\n+                            break;\n+                        case RoleSchema:\n+                            if (rMappings.get(intAttrName) == null) {\n+                                rMappings.put(intAttrName, new HashSet<SchemaMapping>());\n+                            }\n+                            rMappings.get(intAttrName).add(mapping);\n+                            break;\n+                        case MembershipSchema:\n+                            if (mMappings.get(intAttrName) == null) {\n+                                mMappings.put(intAttrName, new HashSet<SchemaMapping>());\n+                            }\n+                            mMappings.get(intAttrName).add(mapping);\n+                            break;\n+\n+                        case UserDerivedSchema:\n+                            if (uDerMappings.get(intAttrName) == null) {\n+                                uDerMappings.put(intAttrName, new HashSet<SchemaMapping>());\n+                            }\n+                            uDerMappings.get(intAttrName).add(mapping);\n+                            break;\n+                        case RoleDerivedSchema:\n+                            if (rDerMappings.get(intAttrName) == null) {\n+                                rDerMappings.put(intAttrName, new HashSet<SchemaMapping>());\n+                            }\n+                            rDerMappings.get(intAttrName).add(mapping);\n+                            break;\n+                        case MembershipDerivedSchema:\n+                            if (mDerMappings.get(intAttrName) == null) {\n+                                mDerMappings.put(intAttrName, new HashSet<SchemaMapping>());\n+                            }\n+                            mDerMappings.get(intAttrName).add(mapping);\n+                            break;\n+\n+                        case UserVirtualSchema:\n+                            if (uVirMappings.get(intAttrName) == null) {\n+                                uVirMappings.put(intAttrName, new HashSet<SchemaMapping>());\n+                            }\n+                            uVirMappings.get(intAttrName).add(mapping);\n+                            break;\n+                        case RoleVirtualSchema:\n+                            if (rVirMappings.get(intAttrName) == null) {\n+                                rVirMappings.put(intAttrName, new HashSet<SchemaMapping>());\n+                            }\n+                            rVirMappings.get(intAttrName).add(mapping);\n+                            break;\n+                        case MembershipVirtualSchema:\n+                            if (mVirMappings.get(intAttrName) == null) {\n+                                mVirMappings.put(intAttrName, new HashSet<SchemaMapping>());\n+                            }\n+                            mVirMappings.get(intAttrName).add(mapping);\n+                            break;\n+                        default:\n+                    }\n+                }\n+            }\n+        }\n+\n+        public SchemaMapping getAccountIdMapping() {\n+            return accountIdMapping;\n+        }\n+\n+        public Map<String, Collection<SchemaMapping>> getmDerMappings() {\n+            return mDerMappings;\n+        }\n+\n+        public Map<String, Collection<SchemaMapping>> getmMappings() {\n+            return mMappings;\n+        }\n+\n+        public Map<String, Collection<SchemaMapping>> getmVirMappings() {\n+            return mVirMappings;\n+        }\n+\n+        public SchemaMapping getPasswordMapping() {\n+            return passwordMapping;\n+        }\n+\n+        public Map<String, Collection<SchemaMapping>> getrDerMappings() {\n+            return rDerMappings;\n+        }\n+\n+        public Map<String, Collection<SchemaMapping>> getrMappings() {\n+            return rMappings;\n+        }\n+\n+        public Map<String, Collection<SchemaMapping>> getrVirMappings() {\n+            return rVirMappings;\n+        }\n+\n+        public Map<String, Collection<SchemaMapping>> getuDerMappings() {\n+            return uDerMappings;\n+        }\n+\n+        public Map<String, Collection<SchemaMapping>> getuMappings() {\n+            return uMappings;\n+        }\n+\n+        public Map<String, Collection<SchemaMapping>> getuVirMappings() {\n+            return uVirMappings;\n+        }\n+    }\n }"}]}