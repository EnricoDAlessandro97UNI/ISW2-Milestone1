{"sha":"9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjk4NDBjZDBkOTNmMTEzODE2N2Q4ZmZjM2MyYmM2NmFjMGU3NTg1ZmM=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2015-11-27T15:17:24Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2015-11-27T15:17:24Z"},"message":"[SYNCOPE-156] changed AjaxPalette in order to support filtering","tree":{"sha":"4f3a54c14c3c3d7015f2f96a5702dc9346e58faa","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4f3a54c14c3c3d7015f2f96a5702dc9346e58faa"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"992f6002fed3a30ca553242ca9d4dc9c0a636b7d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/992f6002fed3a30ca553242ca9d4dc9c0a636b7d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/992f6002fed3a30ca553242ca9d4dc9c0a636b7d"}],"stats":{"total":384,"additions":302,"deletions":82},"files":[{"sha":"473e3485287bdba8173f98a8b3978214d2b6e43c","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/Constants.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FConstants.java?ref=9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc","patch":"@@ -24,6 +24,8 @@ public final class Constants {\n \n     public static final String ON_CHANGE = \"onchange\";\n \n+    public static final String ON_KEYUP = \"onkeyup\";\n+\n     public static final String ON_BLUR = \"onblur\";\n \n     public static final String PNG_EXT = \".png\";"},{"sha":"e18f788985e271aeeac055f89b3fb1eae8c0065a","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxPaletteConf.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPaletteConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPaletteConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPaletteConf.java?ref=9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wicket.markup.html.form;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * To be overridden in order to change the default filter option.\n+ */\n+public class AjaxPaletteConf implements Serializable {\n+\n+    private static final long serialVersionUID = -1;\n+\n+    private static final String DEFAULT_FILTER = \"*\";\n+\n+    public String getDefaultFilter() {\n+        return DEFAULT_FILTER;\n+    }\n+}"},{"sha":"76f62857772dedc13ad89f1e303cbf96933ceb80","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxPalettePanel.java","status":"modified","additions":189,"deletions":26,"changes":215,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java?ref=9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc","patch":"@@ -19,54 +19,113 @@\n package org.apache.syncope.client.console.wicket.markup.html.form;\n \n import java.io.Serializable;\n+import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.wicket.Component;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink;\n import org.apache.wicket.extensions.markup.html.form.palette.Palette;\n import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.form.IChoiceRenderer;\n import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.Model;\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.model.util.ListModel;\n+import org.apache.wicket.util.string.Strings;\n \n-public class AjaxPalettePanel<T> extends AbstractFieldPanel<List<T>> {\n+public class AjaxPalettePanel<T extends Serializable> extends AbstractFieldPanel<List<T>> {\n \n     private static final long serialVersionUID = 7738499668258805567L;\n \n-    protected final Palette<T> palette;\n+    protected Palette<T> palette;\n \n-    public AjaxPalettePanel(final String id,\n-            final IModel<List<T>> model, final ListModel<T> choices,\n-            final IChoiceRenderer<T> renderer, final boolean allowOrder,\n-            final boolean allowMoveAll, final String availableLabel, final String selectedLabel) {\n+    private final Model<String> queryFilter = new Model<String>(StringUtils.EMPTY);\n \n+    private final List<T> availableBefore = new ArrayList<T>();\n+\n+    private final LoadableDetachableModel<List<T>> choicesModel;\n+\n+    public AjaxPalettePanel(\n+            final String id, final IModel<List<T>> model, final Builder.Query<T> choices, final Builder<T> builder) {\n         super(id, id, model);\n \n-        this.palette = createPalette(model, choices, renderer, allowOrder, allowMoveAll, availableLabel, selectedLabel);\n-        add(palette.setOutputMarkupId(true));\n-        setOutputMarkupId(true);\n+        choicesModel = new PaletteLoadableDetachableModel(builder) {\n+\n+            private static final long serialVersionUID = 1L;\n+\n+            @Override\n+            protected List<T> getChoices() {\n+                return choices.execute(getFilter());\n+            }\n+        };\n+        initialize(model, builder);\n     }\n \n-    protected final Palette<T> createPalette(\n-            final IModel<List<T>> model, final ListModel<T> choices,\n-            final IChoiceRenderer<T> renderer,\n-            final boolean allowOrder, final boolean allowMoveAll,\n-            final String availableLabel, final String selectedLabel) {\n+    public AjaxPalettePanel(\n+            final String id, final IModel<List<T>> model, final ListModel<T> choices, final Builder<T> builder) {\n+        super(id, id, model);\n \n-        return new NonI18nPalette<T>(\"paletteField\", model, choices, renderer, 8, allowOrder, allowMoveAll) {\n+        choicesModel = new PaletteLoadableDetachableModel(builder) {\n \n-            private static final long serialVersionUID = -3074655279011678437L;\n+            private static final long serialVersionUID = 1L;\n \n             @Override\n-            protected Component newAvailableHeader(final String componentId) {\n-                return new Label(componentId, new ResourceModel(\"palette.available\", availableLabel));\n+            protected List<T> getChoices() {\n+                return builder.filtered\n+                        ? getFilteredList(choices.getObject(), getFilter().replaceAll(\"\\\\*\", \"\\\\.\\\\*\"))\n+                        : choices.getObject();\n             }\n+        };\n+        initialize(model, builder);\n+    }\n+\n+    private void initialize(final IModel<List<T>> model, final Builder<T> builder) {\n+        setOutputMarkupId(true);\n+\n+        this.palette = new NonI18nPalette<T>(\n+                \"paletteField\", model, choicesModel, builder.renderer, 8, builder.allowOrder, builder.allowMoveAll) {\n+\n+                    private static final long serialVersionUID = -3074655279011678437L;\n+\n+                    @Override\n+                    protected Component newAvailableHeader(final String componentId) {\n+                        return new Label(componentId, new ResourceModel(\"palette.available\", builder.availableLabel));\n+                    }\n+\n+                    @Override\n+                    protected Component newSelectedHeader(final String componentId) {\n+                        return new Label(componentId, new ResourceModel(\"palette.selected\", builder.selectedLabel));\n+                    }\n+                };\n+\n+        add(palette.setOutputMarkupId(true));\n+\n+        final Form<?> form = new Form<>(\"form\");\n+        add(form.setEnabled(builder.filtered).setVisible(builder.filtered));\n+\n+        final AjaxTextFieldPanel filter = new AjaxTextFieldPanel(\"filter\", \"filter\", queryFilter, false);\n+        filter.hideLabel().setOutputMarkupId(true);\n+        form.add(filter);\n+\n+        form.add(new AjaxSubmitLink(\"search\") {\n+\n+            private static final long serialVersionUID = 1L;\n \n             @Override\n-            protected Component newSelectedHeader(final String componentId) {\n-                return new Label(componentId, new ResourceModel(\"palette.selected\", selectedLabel));\n+            protected void onAfterSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                super.onAfterSubmit(target, form);\n+                target.add(palette);\n             }\n-        };\n+        });\n     }\n \n     @Override\n@@ -79,7 +138,9 @@ public Collection<T> getModelCollection() {\n         return palette.getModelCollection();\n     }\n \n-    public static class Builder<T extends Serializable> {\n+    public static class Builder<T extends Serializable> implements Serializable {\n+\n+        private static final long serialVersionUID = 1L;\n \n         private IChoiceRenderer<T> renderer;\n \n@@ -91,9 +152,16 @@ public Collection<T> getModelCollection() {\n \n         private String availableLabel;\n \n+        private boolean filtered;\n+\n+        private final AjaxPaletteConf conf = new AjaxPaletteConf();\n+\n+        private String filter = conf.getDefaultFilter();\n+\n         public Builder() {\n             this.allowMoveAll = false;\n             this.allowOrder = false;\n+            this.filtered = false;\n             this.renderer = new SelectChoiceRenderer<>();\n         }\n \n@@ -122,10 +190,105 @@ public Builder<T> setRenderer(final IChoiceRenderer<T> renderer) {\n             return this;\n         }\n \n-        public AjaxPalettePanel<T> build(\n-                final String id, final IModel<List<T>> model, final ListModel<T> choices) {\n-            return new AjaxPalettePanel<>(id, model,\n-                    choices, renderer, allowOrder, allowMoveAll, availableLabel, selectedLabel);\n+        public Builder<T> withFilter() {\n+            this.filtered = true;\n+            return this;\n+        }\n+\n+        public Builder<T> withFilter(final String defaultFilter) {\n+            this.filtered = true;\n+            this.filter = defaultFilter;\n+            return this;\n+        }\n+\n+        public AjaxPalettePanel<T> build(final String id, final IModel<List<T>> model, final ListModel<T> choices) {\n+            return new AjaxPalettePanel<>(id, model, choices, this);\n+        }\n+\n+        public AjaxPalettePanel<T> build(final String id, final IModel<List<T>> model, final Query<T> choices) {\n+            return new AjaxPalettePanel<>(id, model, choices, this);\n+        }\n+\n+        public abstract static class Query<T extends Serializable> implements Serializable {\n+\n+            private static final long serialVersionUID = 1L;\n+\n+            public abstract List<T> execute(final String filter);\n+        }\n+    }\n+\n+    private abstract class PaletteLoadableDetachableModel extends LoadableDetachableModel<List<T>> {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        private final Builder<T> builder;\n+\n+        PaletteLoadableDetachableModel(final Builder<T> builder) {\n+            super();\n+            this.builder = builder;\n+        }\n+\n+        protected abstract List<T> getChoices();\n+\n+        protected String getFilter() {\n+            return StringUtils.isBlank(queryFilter.getObject()) ? builder.filter : queryFilter.getObject();\n+        }\n+\n+        @Override\n+        protected List<T> load() {\n+            final List<T> selected = availableBefore.isEmpty()\n+                    ? new ArrayList<>(palette.getModelCollection())\n+                    : getSelectedList(availableBefore, palette.getRecorderComponent().getValue());\n+\n+            availableBefore.clear();\n+            availableBefore.addAll(ListUtils.sum(selected, getChoices()));\n+            return availableBefore;\n+        }\n+\n+        private List<T> getSelectedList(final Collection<T> choices, final String selection) {\n+            final IChoiceRenderer<? super T> renderer = palette.getChoiceRenderer();\n+            final List<T> selected = new ArrayList<>();\n+\n+            final Map<T, String> idForChoice = new HashMap<>();\n+            for (final T choice : choices) {\n+                idForChoice.put(choice, renderer.getIdValue(choice, 0));\n+            }\n+\n+            for (final String id : Strings.split(selection, ',')) {\n+                final Iterator<T> iter = choices.iterator();\n+                boolean found = false;\n+                while (!found && iter.hasNext()) {\n+                    final T choice = iter.next();\n+                    final String idValue = idForChoice.get(choice);\n+                    if (id.equals(idValue)) {\n+                        selected.add(choice);\n+                        found = true;\n+                    }\n+                }\n+            }\n+\n+            return selected;\n+        }\n+\n+        protected List<T> getFilteredList(final Collection<T> choices, final String filter) {\n+            final IChoiceRenderer<? super T> renderer = palette.getChoiceRenderer();\n+            final List<T> selected = new ArrayList<>(choices.size());\n+\n+            final Map<T, String> idForChoice = new HashMap<>();\n+            for (final T choice : choices) {\n+                idForChoice.put(choice, renderer.getIdValue(choice, 0));\n+            }\n+\n+            final Pattern pattern = Pattern.compile(filter, Pattern.CASE_INSENSITIVE);\n+\n+            for (T choice : choices) {\n+                final String idValue = idForChoice.get(choice);\n+                if (pattern.matcher(idValue).matches()) {\n+                    selected.add(choice);\n+                }\n+            }\n+\n+            return selected;\n         }\n     }\n }"},{"sha":"e90be4231ed0314cfb97006ce4728f009fb8f947","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AuxClasses.java","status":"modified","additions":66,"deletions":54,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAuxClasses.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAuxClasses.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAuxClasses.java?ref=9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc","patch":"@@ -22,13 +22,12 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.rest.GroupRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n@@ -37,7 +36,9 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.apache.wicket.extensions.wizard.WizardStep;\n+import org.apache.wicket.markup.html.form.IChoiceRenderer;\n import org.apache.wicket.markup.html.panel.Fragment;\n+import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.util.ListModel;\n \n@@ -47,8 +48,6 @@ public class AuxClasses extends WizardStep {\n \n     private final GroupRestClient groupRestClient = new GroupRestClient();\n \n-    private static final Pattern GROUP_ID_PATTERN = Pattern.compile(\"\\\\[(\\\\d*)\\\\]? (.*)\");\n-\n     public <T extends AnyTO> AuxClasses(final T entityTO, final String... anyTypeClass) {\n         this.setOutputMarkupId(true);\n \n@@ -58,16 +57,6 @@ public <T extends AnyTO> AuxClasses(final T entityTO, final String... anyTypeCla\n         } else {\n             fragment = new Fragment(\"groups\", \"groupsFragment\", this);\n \n-            final ArrayList<String> available = CollectionUtils.collect(\n-                    groupRestClient.list(entityTO.getRealm(), -1, -1, new SortParam<>(\"name\", true), null),\n-                    new Transformer<GroupTO, String>() {\n-\n-                        @Override\n-                        public String transform(final GroupTO input) {\n-                            return String.format(\"[%d] %s\", input.getKey(), input.getName());\n-                        }\n-                    }, new ArrayList<String>());\n-\n             final List<MembershipTO> memberships;\n             final List<Long> dyngroups;\n \n@@ -82,56 +71,79 @@ public String transform(final GroupTO input) {\n                 dyngroups = Collections.<Long>emptyList();\n             }\n \n-            fragment.add(new AjaxPalettePanel.Builder<String>().setAllowOrder(true).build(\n-                    \"groups\", new ListModel<String>(CollectionUtils.collect(memberships,\n-                                    new Transformer<MembershipTO, String>() {\n-\n-                                        @Override\n-                                        public String transform(final MembershipTO input) {\n-                                            return String.format(\"[%d] %s\", input.getRightKey(), input.getGroupName());\n-                                        }\n-                                    }, new ArrayList<String>())) {\n+            final AjaxPalettePanel.Builder<MembershipTO> builder\n+                    = new AjaxPalettePanel.Builder<MembershipTO>().setRenderer(new IChoiceRenderer<MembershipTO>() {\n \n                         private static final long serialVersionUID = 1L;\n \n                         @Override\n-                        public void setObject(final List<String> object) {\n-                            super.setObject(object);\n-                            memberships.clear();\n-                            CollectionUtils.collect(getObject(), new Transformer<String, MembershipTO>() {\n-\n-                                @Override\n-                                public MembershipTO transform(final String input) {\n-                                    final Matcher m = GROUP_ID_PATTERN.matcher(input);\n-                                    final String name;\n-                                    final long key;\n-                                    if (m.matches()) {\n-                                        key = Long.parseLong(m.group(1));\n-                                        name = m.group(2);\n-                                    } else {\n-                                        key = -1L;\n-                                        name = input;\n-                                    }\n+                        public Object getDisplayValue(final MembershipTO object) {\n+                            return object.getGroupName();\n+                        }\n \n-                                    return new MembershipTO.Builder().\n-                                    left(entityTO.getType(), entityTO.getKey()).group(key, name).build();\n-                                }\n-                            }, memberships);\n+                        @Override\n+                        public String getIdValue(final MembershipTO object, final int index) {\n+                            return object.getGroupName();\n                         }\n-                    },\n-                    new ListModel<>(available)).setOutputMarkupId(true));\n \n-            fragment.add(new AjaxPalettePanel.Builder<String>().setAllowOrder(true).build(\n-                    \"dyngroups\", new ListModel<String>(CollectionUtils.collect(dyngroups,\n-                                    new Transformer<Long, String>() {\n+                        @Override\n+                        public MembershipTO getObject(\n+                                final String id, final IModel<? extends List<? extends MembershipTO>> choices) {\n+                                    for (MembershipTO membershipTO : choices.getObject()) {\n+                                        if (id.equalsIgnoreCase(membershipTO.getGroupName())) {\n+                                            return membershipTO;\n+                                        }\n+                                    }\n+                                    return null;\n+                                }\n+                    });\n+\n+            fragment.add(builder.setAllowOrder(true).withFilter().build(\n+                    \"groups\", new ListModel<MembershipTO>(memberships),\n+                    new AjaxPalettePanel.Builder.Query<MembershipTO>() {\n+\n+                        private static final long serialVersionUID = 1L;\n+\n+                        @Override\n+                        public List<MembershipTO> execute(final String filter) {\n+                            return CollectionUtils.collect(\n+                                    groupRestClient.search(\n+                                            entityTO.getRealm(),\n+                                            SyncopeClient.getGroupSearchConditionBuilder().\n+                                            isAssignable().and().is(\"name\").equalTo(filter).query(),\n+                                            -1, -1,\n+                                            new SortParam<>(\"name\", true),\n+                                            null),\n+                                    new Transformer<GroupTO, MembershipTO>() {\n \n                                         @Override\n-                                        public String transform(final Long input) {\n-                                            final GroupTO groupTO = groupRestClient.read(input);\n-                                            return String.format(\"[%d] %s\", groupTO.getKey(), groupTO.getName());\n+                                        public MembershipTO transform(final GroupTO input) {\n+                                            final MembershipTO membershipTO = new MembershipTO();\n+                                            membershipTO.setGroupName(input.getName());\n+                                            membershipTO.setRightKey(input.getKey());\n+                                            membershipTO.setRightType(input.getType());\n+                                            membershipTO.setLeftKey(entityTO.getKey());\n+                                            membershipTO.setLeftType(entityTO.getType());\n+                                            return membershipTO;\n                                         }\n-                                    }, new ArrayList<String>())),\n-                    new ListModel<>(available)).setEnabled(false).setOutputMarkupId(true));\n+                                    }, new ArrayList<MembershipTO>());\n+                        }\n+                    }).setOutputMarkupId(true));\n+\n+            final ArrayList<String> dynamics = CollectionUtils.collect(dyngroups,\n+                    new Transformer<Long, String>() {\n+\n+                        @Override\n+                        public String transform(final Long input) {\n+                            final GroupTO groupTO = groupRestClient.read(input);\n+                            return String.format(\"[%d] %s\", groupTO.getKey(), groupTO.getName());\n+                        }\n+                    }, new ArrayList<String>());\n+\n+            fragment.add(new AjaxPalettePanel.Builder<String>().setAllowOrder(true).build(\n+                    \"dyngroups\",\n+                    new ListModel<String>(dynamics),\n+                    new ListModel<>(dynamics)).setEnabled(false).setOutputMarkupId(true));\n         }\n         add(fragment);\n "},{"sha":"56fd13488800e98623cecd10a5b56ac55c2e7b8c","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/UserWizardBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java?ref=9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc","patch":"@@ -59,7 +59,7 @@ protected void onApplyInternal(final UserTO modelObject) {\n         if (modelObject.getKey() == 0) {\n             actual = userRestClient.create(modelObject, StringUtils.isNotBlank(modelObject.getPassword()));\n         } else {\n-            final UserPatch patch = AnyOperations.diff(modelObject, getOriginalItem(), true);\n+            final UserPatch patch = AnyOperations.diff(modelObject, getOriginalItem(), false);\n             if (!statusModel.getObject().isEmpty()) {\n                 patch.setPassword(StatusUtils.buildPasswordPatch(modelObject.getPassword(), statusModel.getObject()));\n             }"},{"sha":"ed2cda20085f96a5333dc6aca55414db13bd4cb0","filename":"client/console/src/main/resources/META-INF/resources/css/syncopeConsole.css","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css?ref=9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc","patch":"@@ -223,7 +223,7 @@ div.basepage-content{\n .wizard-buttons {\n   padding: 10px 0px 5px 0px;\n   position: fixed;\n-  top: 590px;\n+  top: 605px;\n   right: 30px;\n }\n "},{"sha":"17b691997e32086ca3a26b428d5f54f6f19d8ecc","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/AjaxPalettePanel.html","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.html?ref=9840cd0d93f1138167d8ffc3c2bc66ac0e7585fc","patch":"@@ -19,6 +19,14 @@\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:extend>\n+    <form wicket:id=\"form\">\n+      <div class=\"form-group input-group\">\n+        <span wicket:id=\"filter\">[FILTER]</span>\n+        <span class=\"input-group-addon\">\n+          <a href=\"#\" wicket:id=\"search\"><i class=\"glyphicon glyphicon-search\"></i></a>\n+        </span>\n+      </div>\n+    </form>\n     <span wicket:id=\"paletteField\">[Palette]</span>\n   </wicket:extend>\n </html>"}]}