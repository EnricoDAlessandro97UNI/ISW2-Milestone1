{"sha":"2a350f216d0a063e0d6996bda71aec1332504335","node_id":"C_kwDOJfYA1toAKDJhMzUwZjIxNmQwYTA2M2UwZDY5OTZiZGE3MWFlYzEzMzI1MDQzMzU","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-06-28T05:58:58Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-06-28T05:58:58Z"},"message":"[SYNCOPE-1685] Powering up JexlUtils and JEXLItemTransformerImpl (#356)","tree":{"sha":"00f3f33161605d9ba02301f5afd3a34798c59bbe","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/00f3f33161605d9ba02301f5afd3a34798c59bbe"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2a350f216d0a063e0d6996bda71aec1332504335","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiupiiCRBK7hj4Ov3rIwAAuIsIAFXcBZUmy7wEJaxAMBbHp8oU\naFDLJny47AMa7QiSbjUmLIQ8fzogvJNGlNAwlUdalW0UVTCa+x7so6bTK011M/xP\nFfbJwn6+t1ZDsDqbeEmOFJeVSfx3R0rtPsH6gFzc2J0tyy9DHXiZb2mq09BFazUp\nrtT7qMCy7Qhk1hntnwYjaqavqRT35U01kkWYDlKP0MNxPElWa6mN0YeD+85p0aAx\ngyCR1yZdTvVClNCaJIW2py19gnbHInuevay5DtoJQ/EHBYIe8TNeabzOqgN5i0ZH\nTeMFmDp8v46njkdQEWONtpEyYwaOmOXgsNSMCV44hdAjV15MIdNOF7QTZrHvpJI=\n=8IVV\n-----END PGP SIGNATURE-----\n","payload":"tree 00f3f33161605d9ba02301f5afd3a34798c59bbe\nparent 0cc265743e1789d7943a708bffa64fb04ba7fd4e\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1656395938 +0200\ncommitter GitHub <noreply@github.com> 1656395938 +0200\n\n[SYNCOPE-1685] Powering up JexlUtils and JEXLItemTransformerImpl (#356)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2a350f216d0a063e0d6996bda71aec1332504335","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2a350f216d0a063e0d6996bda71aec1332504335","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2a350f216d0a063e0d6996bda71aec1332504335/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"0cc265743e1789d7943a708bffa64fb04ba7fd4e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0cc265743e1789d7943a708bffa64fb04ba7fd4e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0cc265743e1789d7943a708bffa64fb04ba7fd4e"}],"stats":{"total":217,"additions":124,"deletions":93},"files":[{"sha":"409cb43fe1d1ec0b5f8dd319fdc27a50565ec6fb","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/ItemTransformer.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a350f216d0a063e0d6996bda71aec1332504335/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FItemTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a350f216d0a063e0d6996bda71aec1332504335/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FItemTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FItemTransformer.java?ref=2a350f216d0a063e0d6996bda71aec1332504335","patch":"@@ -22,7 +22,7 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n \n@@ -38,14 +38,14 @@ public interface ItemTransformer {\n      * Invoked while preparing attribute values to be sent out to external resource during propagation.\n      *\n      * @param item mapping item\n-     * @param entity entity\n+     * @param any any\n      * @param schemaType schema type\n      * @param values original values\n      * @return transformed values\n      */\n     default Pair<AttrSchemaType, List<PlainAttrValue>> beforePropagation(\n             Item item,\n-            Entity entity,\n+            Any<?> any,\n             AttrSchemaType schemaType,\n             List<PlainAttrValue> values) {\n "},{"sha":"4692f82876c076d18788588d8522fa4b4b42c116","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/jexl/JexlUtils.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a350f216d0a063e0d6996bda71aec1332504335/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FJexlUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a350f216d0a063e0d6996bda71aec1332504335/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FJexlUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FJexlUtils.java?ref=2a350f216d0a063e0d6996bda71aec1332504335","patch":"@@ -103,24 +103,21 @@ public static boolean isExpressionValid(final String expression) {\n         return result;\n     }\n \n-    public static String evaluate(final String expression, final JexlContext jexlContext) {\n-        String result = StringUtils.EMPTY;\n+    public static Object evaluate(final String expression, final JexlContext jexlContext) {\n+        Object result = null;\n \n         if (StringUtils.isNotBlank(expression) && jexlContext != null) {\n             try {\n                 JexlExpression jexlExpression = getEngine().createExpression(expression);\n-                Object evaluated = jexlExpression.evaluate(jexlContext);\n-                if (evaluated != null) {\n-                    result = evaluated.toString();\n-                }\n+                result = jexlExpression.evaluate(jexlContext);\n             } catch (Exception e) {\n                 LOG.error(\"Error while evaluating JEXL expression: \" + expression, e);\n             }\n         } else {\n             LOG.debug(\"Expression not provided or invalid context\");\n         }\n \n-        return result;\n+        return result == null ? StringUtils.EMPTY : result;\n     }\n \n     public static void addFieldsToContext(final Object object, final JexlContext jexlContext) {\n@@ -254,7 +251,7 @@ public static boolean evaluateMandatoryCondition(\n         addPlainAttrsToContext(any.getPlainAttrs(), jexlContext);\n         addDerAttrsToContext(any, derAttrHandler, jexlContext);\n \n-        return Boolean.parseBoolean(evaluate(mandatoryCondition, jexlContext));\n+        return Boolean.parseBoolean(evaluate(mandatoryCondition, jexlContext).toString());\n     }\n \n     /**"},{"sha":"54b352dd8ecbc1aff0b6178baf56eed6a1e335c4","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/utils/JexlUtilsTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a350f216d0a063e0d6996bda71aec1332504335/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FJexlUtilsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a350f216d0a063e0d6996bda71aec1332504335/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FJexlUtilsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FJexlUtilsTest.java?ref=2a350f216d0a063e0d6996bda71aec1332504335","patch":"@@ -73,11 +73,10 @@ public void isExpressionValid() {\n \n     @Test\n     public void evaluate() {\n-        String result = StringUtils.EMPTY;\n-        assertEquals(result, JexlUtils.evaluate(expression, context));\n+        assertEquals(StringUtils.EMPTY, JexlUtils.evaluate(expression, context));\n \n         expression = \"6 * 12 + 5 / 2.6\";\n-        result = \"73.92307692307692\";\n+        double result = 73.92307692307692;\n         assertEquals(result, JexlUtils.evaluate(expression, context));\n     }\n "},{"sha":"a6b4329d5cde552d144aa08c0a3dd36998d79f92","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultDerAttrHandler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a350f216d0a063e0d6996bda71aec1332504335/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultDerAttrHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a350f216d0a063e0d6996bda71aec1332504335/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultDerAttrHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultDerAttrHandler.java?ref=2a350f216d0a063e0d6996bda71aec1332504335","patch":"@@ -47,7 +47,7 @@ protected static Map<DerSchema, String> getValues(final Any<?> any, final Set<De\n             JexlUtils.addPlainAttrsToContext(any.getPlainAttrs(), jexlContext);\n             JexlUtils.addFieldsToContext(any, jexlContext);\n \n-            result.put(schema, JexlUtils.evaluate(schema.getExpression(), jexlContext));\n+            result.put(schema, JexlUtils.evaluate(schema.getExpression(), jexlContext).toString());\n         });\n \n         return result;\n@@ -100,7 +100,7 @@ protected static Map<DerSchema, String> getValues(\n             JexlUtils.addPlainAttrsToContext(any.getPlainAttrs(membership), jexlContext);\n             JexlUtils.addFieldsToContext(any, jexlContext);\n \n-            result.put(schema, JexlUtils.evaluate(schema.getExpression(), jexlContext));\n+            result.put(schema, JexlUtils.evaluate(schema.getExpression(), jexlContext).toString());\n         });\n \n         return result;"},{"sha":"27756d3e54aa9d1f5ac1d284d0a4bc907b99dc54","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultMappingManager.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a350f216d0a063e0d6996bda71aec1332504335/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a350f216d0a063e0d6996bda71aec1332504335/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java?ref=2a350f216d0a063e0d6996bda71aec1332504335","patch":"@@ -246,7 +246,7 @@ protected Name evaluateNAME(final Any<?> any, final Provision provision, final S\n             JexlUtils.addFieldsToContext(any, jexlContext);\n             JexlUtils.addPlainAttrsToContext(any.getPlainAttrs(), jexlContext);\n             JexlUtils.addDerAttrsToContext(any, derAttrHandler, jexlContext);\n-            evalConnObjectLink = JexlUtils.evaluate(connObjectLink, jexlContext);\n+            evalConnObjectLink = JexlUtils.evaluate(connObjectLink, jexlContext).toString();\n         }\n \n         return getName(evalConnObjectLink, connObjectKey);\n@@ -274,7 +274,7 @@ protected Name evaluateNAME(final Realm realm, final OrgUnit orgUnit, final Stri\n         if (StringUtils.isNotBlank(connObjectLink)) {\n             JexlContext jexlContext = new MapContext();\n             JexlUtils.addFieldsToContext(realm, jexlContext);\n-            evalConnObjectLink = JexlUtils.evaluate(connObjectLink, jexlContext);\n+            evalConnObjectLink = JexlUtils.evaluate(connObjectLink, jexlContext).toString();\n         }\n \n         return getName(evalConnObjectLink, connObjectKey);\n@@ -849,17 +849,18 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n \n         LOG.debug(\"Internal values: {}\", values);\n \n-        Pair<AttrSchemaType, List<PlainAttrValue>> trans = Pair.of(schemaType, values);\n+        Pair<AttrSchemaType, List<PlainAttrValue>> transformed = Pair.of(schemaType, values);\n         if (transform) {\n             for (ItemTransformer transformer : MappingUtils.getItemTransformers(mapItem)) {\n-                trans = transformer.beforePropagation(mapItem, any, trans.getLeft(), trans.getRight());\n+                transformed = transformer.beforePropagation(\n+                        mapItem, any, transformed.getLeft(), transformed.getRight());\n             }\n             LOG.debug(\"Transformed values: {}\", values);\n         } else {\n             LOG.debug(\"No transformation occurred\");\n         }\n \n-        return trans;\n+        return transformed;\n     }\n \n     protected String getGroupOwnerValue(final Provision provision, final Any<?> any) {"},{"sha":"8e3e82af72b79e5e0896127e5823d994fa8d2744","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/JEXLItemTransformerImpl.java","status":"modified","additions":68,"deletions":30,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a350f216d0a063e0d6996bda71aec1332504335/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FJEXLItemTransformerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a350f216d0a063e0d6996bda71aec1332504335/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FJEXLItemTransformerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FJEXLItemTransformerImpl.java?ref=2a350f216d0a063e0d6996bda71aec1332504335","patch":"@@ -18,18 +18,19 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n import org.apache.commons.jexl3.JexlContext;\n import org.apache.commons.jexl3.MapContext;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n-import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n@@ -42,6 +43,9 @@ public class JEXLItemTransformerImpl implements JEXLItemTransformer {\n     @Autowired\n     private DerAttrHandler derAttrHandler;\n \n+    @Autowired\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n     private String propagationJEXL;\n \n     private String pullJEXL;\n@@ -56,40 +60,76 @@ public void setPullJEXL(final String pullJEXL) {\n         this.pullJEXL = pullJEXL;\n     }\n \n+    protected AttrSchemaType beforePropagation(final PlainAttrValue value, final Any<?> any) {\n+        JexlContext jexlContext = new MapContext();\n+        if (any != null) {\n+            JexlUtils.addFieldsToContext(any, jexlContext);\n+            JexlUtils.addPlainAttrsToContext(any.getPlainAttrs(), jexlContext);\n+            JexlUtils.addDerAttrsToContext(any, derAttrHandler, jexlContext);\n+        }\n+        jexlContext.set(\"value\", value.getValue());\n+\n+        Object tValue = JexlUtils.evaluate(propagationJEXL, jexlContext);\n+\n+        value.setBinaryValue(null);\n+        value.setBooleanValue(null);\n+        value.setDateValue(null);\n+        value.setDoubleValue(null);\n+        value.setLongValue(null);\n+        value.setStringValue(null);\n+\n+        if (tValue instanceof byte[]) {\n+            value.setBinaryValue((byte[]) tValue);\n+            return AttrSchemaType.Binary;\n+        }\n+\n+        if (tValue instanceof Boolean) {\n+            value.setBooleanValue((Boolean) tValue);\n+            return AttrSchemaType.Boolean;\n+        }\n+\n+        if (tValue instanceof OffsetDateTime) {\n+            value.setDateValue((OffsetDateTime) tValue);\n+            return AttrSchemaType.Date;\n+        }\n+\n+        if (tValue instanceof Double) {\n+            value.setDoubleValue((Double) tValue);\n+            return AttrSchemaType.Double;\n+        }\n+\n+        if (tValue instanceof Long) {\n+            value.setLongValue((Long) tValue);\n+            return AttrSchemaType.Long;\n+        }\n+\n+        if (tValue != null) {\n+            value.setStringValue(tValue.toString());\n+        }\n+        return AttrSchemaType.String;\n+    }\n+\n     @Override\n     public Pair<AttrSchemaType, List<PlainAttrValue>> beforePropagation(\n             final Item item,\n-            final Entity entity,\n+            final Any<?> any,\n             final AttrSchemaType schemaType,\n             final List<PlainAttrValue> values) {\n \n-        if (StringUtils.isNotBlank(propagationJEXL) && values != null) {\n-            values.forEach(value -> {\n-                Object originalValue = value.getValue();\n-                if (originalValue != null) {\n-                    JexlContext jexlContext = new MapContext();\n-                    if (entity != null) {\n-                        JexlUtils.addFieldsToContext(entity, jexlContext);\n-                        if (entity instanceof Any) {\n-                            JexlUtils.addPlainAttrsToContext(((Any<?>) entity).getPlainAttrs(), jexlContext);\n-                            JexlUtils.addDerAttrsToContext(((Any<?>) entity), derAttrHandler, jexlContext);\n-                        }\n-                    }\n-                    jexlContext.set(\"value\", originalValue);\n-\n-                    value.setBinaryValue(null);\n-                    value.setBooleanValue(null);\n-                    value.setDateValue(null);\n-                    value.setDoubleValue(null);\n-                    value.setLongValue(null);\n-                    value.setStringValue(JexlUtils.evaluate(propagationJEXL, jexlContext));\n-                }\n-            });\n+        if (StringUtils.isBlank(propagationJEXL)) {\n+            return JEXLItemTransformer.super.beforePropagation(item, any, schemaType, values);\n+        }\n \n-            return Pair.of(AttrSchemaType.String, values);\n+        AtomicReference<AttrSchemaType> tType = new AtomicReference<>();\n+        if (values.isEmpty()) {\n+            PlainAttrValue value = anyUtilsFactory.getInstance(any).newPlainAttrValue();\n+            tType.set(beforePropagation(value, any));\n+            values.add(value);\n+        } else {\n+            values.forEach(value -> tType.set(beforePropagation(value, any)));\n         }\n \n-        return JEXLItemTransformer.super.beforePropagation(item, entity, schemaType, values);\n+        return Pair.of(tType.get(), values);\n     }\n \n     @Override\n@@ -103,13 +143,11 @@ public List<Object> beforePull(\n             values.forEach(value -> {\n                 JexlContext jexlContext = new MapContext();\n                 jexlContext.set(\"value\", value);\n+                JexlUtils.addFieldsToContext(entityTO, jexlContext);\n                 if (entityTO instanceof AnyTO) {\n-                    JexlUtils.addFieldsToContext((AnyTO) entityTO, jexlContext);\n                     JexlUtils.addAttrsToContext(((AnyTO) entityTO).getPlainAttrs(), jexlContext);\n                     JexlUtils.addAttrsToContext(((AnyTO) entityTO).getDerAttrs(), jexlContext);\n                     JexlUtils.addAttrsToContext(((AnyTO) entityTO).getVirAttrs(), jexlContext);\n-                } else if (entityTO instanceof RealmTO) {\n-                    JexlUtils.addFieldsToContext((RealmTO) entityTO, jexlContext);\n                 }\n \n                 newValues.add(JexlUtils.evaluate(pullJEXL, jexlContext));"},{"sha":"70aa90477ba034f77a6dde6789d1e7d371b406f8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPMembershipPropagationActions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a350f216d0a063e0d6996bda71aec1332504335/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a350f216d0a063e0d6996bda71aec1332504335/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java?ref=2a350f216d0a063e0d6996bda71aec1332504335","patch":"@@ -146,7 +146,7 @@ private String evaluateGroupConnObjectLink(final String connObjectLinkTemplate,\n         JexlUtils.addPlainAttrsToContext(group.getPlainAttrs(), jexlContext);\n         JexlUtils.addDerAttrsToContext(group, derAttrHandler, jexlContext);\n \n-        return JexlUtils.evaluate(connObjectLinkTemplate, jexlContext);\n+        return JexlUtils.evaluate(connObjectLinkTemplate, jexlContext).toString();\n     }\n \n     private void buildManagedGroupConnObjectLinks(final ExternalResource externalResource,"},{"sha":"873287a73f17a87a68ddaf40d29015d8417137e7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/TemplateUtils.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a350f216d0a063e0d6996bda71aec1332504335/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a350f216d0a063e0d6996bda71aec1332504335/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java?ref=2a350f216d0a063e0d6996bda71aec1332504335","patch":"@@ -50,7 +50,7 @@ protected static Attr evaluateAttr(final Attr template, final MapContext jexlCon\n \n         if (template.getValues() != null && !template.getValues().isEmpty()) {\n             template.getValues().forEach(value -> {\n-                String evaluated = JexlUtils.evaluate(value, jexlContext);\n+                String evaluated = JexlUtils.evaluate(value, jexlContext).toString();\n                 if (StringUtils.isNotBlank(evaluated)) {\n                     result.getValues().add(evaluated);\n                 }\n@@ -68,7 +68,7 @@ protected static void fill(final RealmMember realmMember, final RealmMember temp\n         JexlUtils.addAttrsToContext(realmMember.getVirAttrs(), jexlContext);\n \n         if (template.getRealm() != null) {\n-            String evaluated = JexlUtils.evaluate(template.getRealm(), jexlContext);\n+            String evaluated = JexlUtils.evaluate(template.getRealm(), jexlContext).toString();\n             if (StringUtils.isNotBlank(evaluated)) {\n                 realmMember.setRealm(evaluated);\n             }\n@@ -156,7 +156,7 @@ public void apply(final RealmMember realmMember, final AnyTO template) {\n             fillMemberships((GroupableRelatableTO) realmMember, ((GroupableRelatableTO) template));\n         } else if (template instanceof UserTO) {\n             if (StringUtils.isNotBlank(((UserTO) template).getUsername())) {\n-                String evaluated = JexlUtils.evaluate(((UserTO) template).getUsername(), jexlContext);\n+                String evaluated = JexlUtils.evaluate(((UserTO) template).getUsername(), jexlContext).toString();\n                 if (StringUtils.isNotBlank(evaluated)) {\n                     if (realmMember instanceof UserTO) {\n                         ((UserTO) realmMember).setUsername(evaluated);\n@@ -167,7 +167,7 @@ public void apply(final RealmMember realmMember, final AnyTO template) {\n             }\n \n             if (StringUtils.isNotBlank(((UserTO) template).getPassword())) {\n-                String evaluated = JexlUtils.evaluate(((UserTO) template).getPassword(), jexlContext);\n+                String evaluated = JexlUtils.evaluate(((UserTO) template).getPassword(), jexlContext).toString();\n                 if (StringUtils.isNotBlank(evaluated)) {\n                     if (realmMember instanceof UserTO) {\n                         ((UserTO) realmMember).setPassword(evaluated);\n@@ -186,7 +186,7 @@ public void apply(final RealmMember realmMember, final AnyTO template) {\n             }\n         } else if (template instanceof GroupTO) {\n             if (StringUtils.isNotBlank(((GroupTO) template).getName())) {\n-                String evaluated = JexlUtils.evaluate(((GroupTO) template).getName(), jexlContext);\n+                String evaluated = JexlUtils.evaluate(((GroupTO) template).getName(), jexlContext).toString();\n                 if (StringUtils.isNotBlank(evaluated)) {\n                     if (realmMember instanceof GroupTO) {\n                         ((GroupTO) realmMember).setName(evaluated);"},{"sha":"6582b984e2b33d260a7c33af5c22dd25a6987db0","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DateToDateItemTransformer.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a350f216d0a063e0d6996bda71aec1332504335/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToDateItemTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a350f216d0a063e0d6996bda71aec1332504335/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToDateItemTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToDateItemTransformer.java?ref=2a350f216d0a063e0d6996bda71aec1332504335","patch":"@@ -21,7 +21,7 @@\n import java.util.List;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n@@ -31,15 +31,15 @@ public class DateToDateItemTransformer implements ItemTransformer {\n     @Override\n     public Pair<AttrSchemaType, List<PlainAttrValue>> beforePropagation(\n             final Item item,\n-            final Entity entity,\n+            final Any<?> any,\n             final AttrSchemaType schemaType,\n             final List<PlainAttrValue> values) {\n \n         if (values == null || values.isEmpty() || values.get(0).getDateValue() == null) {\n-            return ItemTransformer.super.beforePropagation(item, entity, schemaType, values);\n-        } else {\n-            values.get(0).setDateValue(values.get(0).getDateValue().plusDays(1));\n-            return Pair.of(schemaType, values);\n+            return ItemTransformer.super.beforePropagation(item, any, schemaType, values);\n         }\n+\n+        values.get(0).setDateValue(values.get(0).getDateValue().plusDays(1));\n+        return Pair.of(schemaType, values);\n     }\n }"},{"sha":"054d142b0bbd934274fee409b8e00d4d1d9a494f","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DateToLongItemTransformer.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a350f216d0a063e0d6996bda71aec1332504335/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToLongItemTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a350f216d0a063e0d6996bda71aec1332504335/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToLongItemTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToLongItemTransformer.java?ref=2a350f216d0a063e0d6996bda71aec1332504335","patch":"@@ -21,7 +21,7 @@\n import java.util.List;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n@@ -31,21 +31,21 @@ public class DateToLongItemTransformer implements ItemTransformer {\n     @Override\n     public Pair<AttrSchemaType, List<PlainAttrValue>> beforePropagation(\n             final Item item,\n-            final Entity entity,\n+            final Any<?> any,\n             final AttrSchemaType schemaType,\n             final List<PlainAttrValue> values) {\n \n         if (values == null || values.isEmpty() || values.get(0).getDateValue() == null) {\n-            return ItemTransformer.super.beforePropagation(item, entity, schemaType, values);\n-        } else {\n-            values.get(0).setLongValue(values.get(0).getDateValue().toInstant().toEpochMilli());\n-            values.get(0).setBinaryValue(null);\n-            values.get(0).setBooleanValue(null);\n-            values.get(0).setDateValue(null);\n-            values.get(0).setDoubleValue(null);\n-            values.get(0).setStringValue(null);\n-\n-            return Pair.of(AttrSchemaType.Long, values);\n+            return ItemTransformer.super.beforePropagation(item, any, schemaType, values);\n         }\n+\n+        values.get(0).setLongValue(values.get(0).getDateValue().toInstant().toEpochMilli());\n+        values.get(0).setBinaryValue(null);\n+        values.get(0).setBooleanValue(null);\n+        values.get(0).setDateValue(null);\n+        values.get(0).setDoubleValue(null);\n+        values.get(0).setStringValue(null);\n+\n+        return Pair.of(AttrSchemaType.Long, values);\n     }\n }"},{"sha":"f5db2a3d42aafb890528cc5e0c95c0f1b887bf60","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a350f216d0a063e0d6996bda71aec1332504335/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a350f216d0a063e0d6996bda71aec1332504335/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=2a350f216d0a063e0d6996bda71aec1332504335","patch":"@@ -473,7 +473,7 @@ public void issueSYNCOPE1430() throws ParseException {\n             provision.getMapping().getItems().removeIf(item -> \"mail\".equals(item.getExtAttrName()));\n             provision.getVirSchemas().clear();\n \n-            // Date -> long (JEXL expression) -> string (as all JEXL in Syncope)\n+            // Date -> long (JEXL expression) -> string\n             ItemTO loginDateForJexlAsLong = new ItemTO();\n             loginDateForJexlAsLong.setPurpose(MappingPurpose.PROPAGATION);\n             loginDateForJexlAsLong.setIntAttrName(\"loginDate\");\n@@ -536,7 +536,7 @@ public void issueSYNCOPE1430() throws ParseException {\n \n             Attribute employeeNumber = AttributeUtil.find(\"employeeNumber\", propagationAttrs);\n             assertNotNull(employeeNumber);\n-            assertEquals(String.valueOf(loginDate.toInstant().toEpochMilli()), employeeNumber.getValue().get(0));\n+            assertEquals(loginDate.toInstant().toEpochMilli(), employeeNumber.getValue().get(0));\n \n             Attribute street = AttributeUtil.find(\"street\", propagationAttrs);\n             assertNotNull(street);"},{"sha":"94e3a1dce4fa6654ea4ee96014987868ab690937","filename":"fit/core-reference/src/test/resources/PrefixItemTransformer.groovy","status":"modified","additions":12,"deletions":13,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a350f216d0a063e0d6996bda71aec1332504335/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FPrefixItemTransformer.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a350f216d0a063e0d6996bda71aec1332504335/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FPrefixItemTransformer.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FPrefixItemTransformer.groovy?ref=2a350f216d0a063e0d6996bda71aec1332504335","patch":"@@ -23,7 +23,7 @@ import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair\n import org.apache.syncope.common.lib.to.EntityTO\n import org.apache.syncope.common.lib.types.AttrSchemaType\n-import org.apache.syncope.core.persistence.api.entity.Entity\n+import org.apache.syncope.core.persistence.api.entity.Any\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue\n import org.apache.syncope.core.persistence.api.entity.resource.Item\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n@@ -36,18 +36,18 @@ class PrefixItemTransformer implements ItemTransformer {\n   @Override\n   Pair<AttrSchemaType, List<PlainAttrValue>> beforePropagation(\n     Item item,\n-    Entity entity,\n+    Any<?> any,\n     AttrSchemaType schemaType,\n     List<PlainAttrValue> values) {\n \n     if (values == null || values.isEmpty() || values.get(0).getStringValue() == null) {\n-      return Pair.of(schemaType, values);\n-    } else {\n-      String value = values.get(0).getStringValue();\n-      values.get(0).setStringValue(PREFIX + value);\n-\n       return Pair.of(schemaType, values);\n     }\n+\n+    String value = values.get(0).getStringValue();\n+    values.get(0).setStringValue(PREFIX + value);\n+\n+    return Pair.of(schemaType, values);\n   }\n \n   @Override\n@@ -58,12 +58,11 @@ class PrefixItemTransformer implements ItemTransformer {\n \n     if (values == null || values.isEmpty() || values.get(0) == null) {\n       return values;\n-    } else {\n-      List<Object> newValues = new ArrayList<>(values);\n-      newValues.set(0, StringUtils.substringAfter(values.get(0).toString(), PREFIX));\n-\n-      return newValues;\n     }\n+    \n+    List<Object> newValues = new ArrayList<>(values);\n+    newValues.set(0, StringUtils.substringAfter(values.get(0).toString(), PREFIX));\n+\n+    return newValues;\n   }\n }\n-"},{"sha":"bca830d3def04e481aa02abb39359d6e78eef98e","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/WARefreshContextJob.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a350f216d0a063e0d6996bda71aec1332504335/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FWARefreshContextJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a350f216d0a063e0d6996bda71aec1332504335/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FWARefreshContextJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FWARefreshContextJob.java?ref=2a350f216d0a063e0d6996bda71aec1332504335","patch":"@@ -42,9 +42,6 @@ public class WARefreshContextJob implements Job {\n     @Autowired\n     private SamlIdPMetadataGenerator metadataGenerator;\n \n-    public WARefreshContextJob() {\n-    }\n-\n     @Override\n     public void execute(final JobExecutionContext jobExecutionContext) throws JobExecutionException {\n         try {"}]}