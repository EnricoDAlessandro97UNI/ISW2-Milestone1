{"sha":"9cd92305562916453bf2aee42bbc3b6d1b07e5cd","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjljZDkyMzA1NTYyOTE2NDUzYmYyYWVlNDJiYmMzYjZkMWIwN2U1Y2Q=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-22T09:41:00Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-22T09:41:00Z"},"message":"[SYNCOPE-709] Refactoring completed","tree":{"sha":"09c1d85e2e5e72c429ba18c506b6e8f556b9f4bd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/09c1d85e2e5e72c429ba18c506b6e8f556b9f4bd"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9cd92305562916453bf2aee42bbc3b6d1b07e5cd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9cd92305562916453bf2aee42bbc3b6d1b07e5cd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9cd92305562916453bf2aee42bbc3b6d1b07e5cd","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6"}],"stats":{"total":3882,"additions":1494,"deletions":2388},"files":[{"sha":"0e5bec3541f428b78752ff69623d037b0d93358a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":2,"deletions":24,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -150,29 +150,8 @@ public void execute(final String schema) {\n         }\n \n         // 5. virtual attributes\n-        updatedAttrs = updated.getVirAttrMap();\n-        originalAttrs = original.getVirAttrMap();\n-\n         result.getVirAttrs().clear();\n-\n-        if (!incremental) {\n-            CollectionUtils.forAllDo(CollectionUtils.subtract(originalAttrs.keySet(), updatedAttrs.keySet()),\n-                    new Closure<String>() {\n-\n-                        @Override\n-                        public void execute(final String schema) {\n-                            result.getVirAttrs().add(new AttrPatch.Builder().\n-                                    operation(PatchOperation.DELETE).\n-                                    attrTO(new AttrTO.Builder().schema(schema).build()).\n-                                    build());\n-                        }\n-                    });\n-        }\n-\n-        for (AttrTO attrTO : updatedAttrs.values()) {\n-            AttrPatch patch = new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).attrTO(attrTO).build();\n-            result.getVirAttrs().add(patch);\n-        }\n+        result.getVirAttrs().addAll(updated.getVirAttrs());\n \n         // 6. resources\n         result.getResources().clear();\n@@ -188,7 +167,6 @@ public void execute(final String schema) {\n             result.getResources().add(\n                     new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build());\n         }\n-\n     }\n \n     /**\n@@ -450,7 +428,7 @@ private static <T extends AnyTO, K extends AnyPatch> void patch(final T to, fina\n \n         // 4. virtual attributes\n         result.getVirAttrs().clear();\n-        result.getVirAttrs().addAll(AnyOperations.patch(to.getVirAttrMap(), patch.getVirAttrs()));\n+        result.getVirAttrs().addAll(patch.getVirAttrs());\n \n         // 5. resources\n         for (StringPatchItem resourcePatch : patch.getResources()) {"},{"sha":"a6c4323b2cd47436536d30f4a9e6e22b5364a7be","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AnyPatch.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyPatch.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -27,6 +27,7 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.to.AttrTO;\n \n @XmlType\n public abstract class AnyPatch extends AbstractBaseBean {\n@@ -43,7 +44,7 @@ public abstract class AnyPatch extends AbstractBaseBean {\n \n     private final Set<AttrPatch> derAttrs = new HashSet<>();\n \n-    private final Set<AttrPatch> virAttrs = new HashSet<>();\n+    private final Set<AttrTO> virAttrs = new HashSet<>();\n \n     private final Set<StringPatchItem> resources = new HashSet<>();\n \n@@ -88,7 +89,7 @@ public Set<AttrPatch> getDerAttrs() {\n     @XmlElementWrapper(name = \"virAttrs\")\n     @XmlElement(name = \"attribute\")\n     @JsonProperty(\"virAttrs\")\n-    public Set<AttrPatch> getVirAttrs() {\n+    public Set<AttrTO> getVirAttrs() {\n         return virAttrs;\n     }\n "},{"sha":"7911d7db99da0ce432b4c1cf99b1f7c8c1c1a40c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyTO.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -25,7 +25,6 @@\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -53,9 +52,9 @@ public abstract class AnyTO extends ConnObjectTO {\n \n     private final List<String> auxClasses = new ArrayList<>();\n \n-    private final Set<AttrTO> derAttrs = new LinkedHashSet<>();\n+    private final Set<AttrTO> derAttrs = new HashSet<>();\n \n-    private final Set<AttrTO> virAttrs = new LinkedHashSet<>();\n+    private final Set<AttrTO> virAttrs = new HashSet<>();\n \n     private final Set<String> resources = new HashSet<>();\n "},{"sha":"b25053d04532c788d631813cafb84512a5f7df09","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ProvisionTO.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisionTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisionTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisionTO.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -18,8 +18,17 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n \n+@XmlRootElement(name = \"provision\")\n+@XmlType\n public class ProvisionTO extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 8298910216218007927L;\n@@ -34,6 +43,8 @@ public class ProvisionTO extends AbstractBaseBean {\n \n     private MappingTO mapping;\n \n+    private List<String> virSchemas = new ArrayList<>();\n+\n     public long getKey() {\n         return key;\n     }\n@@ -74,4 +85,11 @@ public void setMapping(final MappingTO mapping) {\n         this.mapping = mapping;\n     }\n \n+    @XmlElementWrapper(name = \"virSchemas\")\n+    @XmlElement(name = \"virSchema\")\n+    @JsonProperty(\"virSchemas\")\n+    public List<String> getVirSchemas() {\n+        return virSchemas;\n+    }\n+\n }"},{"sha":"8c3df1bdf6914deee29900e929ab9f00a4059b2d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/VirSchemaTO.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FVirSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FVirSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FVirSchemaTO.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -27,6 +27,10 @@ public class VirSchemaTO extends AbstractSchemaTO {\n \n     private boolean readonly;\n \n+    private long provision;\n+\n+    private String extAttrName;\n+\n     public boolean isReadonly() {\n         return readonly;\n     }\n@@ -35,4 +39,20 @@ public void setReadonly(final boolean readonly) {\n         this.readonly = readonly;\n     }\n \n+    public long getProvision() {\n+        return provision;\n+    }\n+\n+    public void setProvision(final long provision) {\n+        this.provision = provision;\n+    }\n+\n+    public String getExtAttrName() {\n+        return extAttrName;\n+    }\n+\n+    public void setExtAttrName(final String extAttrName) {\n+        this.extAttrName = extAttrName;\n+    }\n+\n }"},{"sha":"3e35feca5e420f3a129f1ab8a9b378bfad535f85","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/PropagationByResource.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPropagationByResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPropagationByResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPropagationByResource.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -263,6 +263,17 @@ public final Set<String> get(final ResourceOperation type) {\n         return result;\n     }\n \n+    public Map<String, ResourceOperation> asMap() {\n+        Map<String, ResourceOperation> result = new HashMap<>();\n+        for (ResourceOperation operation : ResourceOperation.values()) {\n+            for (String resourceName : get(operation)) {\n+                result.put(resourceName, operation);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n     /**\n      * Set resources for a given resource operation type.\n      *"},{"sha":"44a5aa862e069866bb94eda9d73ac0fc621299b7","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":33,"deletions":3,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -20,9 +20,12 @@\n \n import java.lang.reflect.Method;\n import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IteratorUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -51,9 +54,11 @@\n import org.apache.syncope.core.misc.MappingUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n@@ -85,6 +90,9 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {\n     @Autowired\n     private GroupDAO groupDAO;\n \n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n     @Autowired\n     private ResourceDataBinder binder;\n \n@@ -205,32 +213,46 @@ private Triple<ExternalResource, AnyType, Provision> connObjectInit(\n     public ConnObjectTO readConnObject(final String key, final String anyTypeKey, final Long anyKey) {\n         Triple<ExternalResource, AnyType, Provision> init = connObjectInit(key, anyTypeKey);\n \n-        Any<?, ?, ?> any = init.getMiddle().getKind() == AnyTypeKind.USER\n+        // 1. find any\n+        Any<?, ?> any = init.getMiddle().getKind() == AnyTypeKind.USER\n                 ? userDAO.find(anyKey)\n                 : init.getMiddle().getKind() == AnyTypeKind.ANY_OBJECT\n                         ? anyObjectDAO.find(anyKey)\n                         : groupDAO.find(anyKey);\n         if (any == null) {\n             throw new NotFoundException(init.getMiddle() + \" \" + anyKey);\n         }\n+\n+        // 2. build connObjectKeyItem\n         MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(init.getRight());\n         if (connObjectKeyItem == null) {\n             throw new NotFoundException(\n                     \"ConnObjectKey mapping for \" + init.getMiddle() + \" \" + anyKey + \" on resource '\" + key + \"'\");\n         }\n         String connObjectKeyValue = mappingUtils.getConnObjectKeyValue(any, init.getRight());\n \n+        // 3. determine attributes to query\n+        Set<MappingItem> linkinMappingItems = new HashSet<>();\n+        for (VirSchema virSchema : virSchemaDAO.findByProvision(init.getRight())) {\n+            linkinMappingItems.add(virSchema.asLinkingMappingItem());\n+        }\n+        Iterator<MappingItem> mapItems = IteratorUtils.chainedIterator(\n+                init.getRight().getMapping().getItems().iterator(),\n+                linkinMappingItems.iterator());\n+\n+        // 4. read from the underlying connector\n         Connector connector = connFactory.getConnector(init.getLeft());\n         ConnectorObject connectorObject = connector.getObject(\n                 init.getRight().getObjectClass(),\n                 new Uid(connObjectKeyValue),\n-                connector.getOperationOptions(MappingUtils.getBothMappingItems(init.getRight())));\n+                connector.getOperationOptions(mapItems));\n         if (connectorObject == null) {\n             throw new NotFoundException(\n                     \"Object \" + connObjectKeyValue + \" with class \" + init.getRight().getObjectClass()\n                     + \" not found on resource \" + key);\n         }\n \n+        // 5. build result\n         Set<Attribute> attributes = connectorObject.getAttributes();\n         if (AttributeUtil.find(Uid.NAME, attributes) == null) {\n             attributes.add(connectorObject.getUid());\n@@ -251,6 +273,14 @@ public Pair<SearchResult, List<ConnObjectTO>> listConnObjects(final String key,\n \n         Connector connector = connFactory.getConnector(init.getLeft());\n \n+        Set<MappingItem> linkinMappingItems = new HashSet<>();\n+        for (VirSchema virSchema : virSchemaDAO.findByProvision(init.getRight())) {\n+            linkinMappingItems.add(virSchema.asLinkingMappingItem());\n+        }\n+        Iterator<MappingItem> mapItems = IteratorUtils.chainedIterator(\n+                init.getRight().getMapping().getItems().iterator(),\n+                linkinMappingItems.iterator());\n+\n         final SearchResult[] searchResult = new SearchResult[1];\n         final List<ConnObjectTO> connObjects = new ArrayList<>();\n         connector.search(init.getRight().getObjectClass(), null, new SearchResultsHandler() {\n@@ -265,7 +295,7 @@ public boolean handle(final ConnectorObject connectorObject) {\n                 connObjects.add(connObjectUtils.getConnObjectTO(connectorObject));\n                 return true;\n             }\n-        }, size, pagedResultsCookie, orderBy);\n+        }, size, pagedResultsCookie, orderBy, mapItems);\n \n         return ImmutablePair.of(searchResult[0], connObjects);\n     }"},{"sha":"0e785b1e35c786411277ade97aa8209318f93e3d","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/StaticReportlet.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FStaticReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FStaticReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FStaticReportlet.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -21,7 +21,7 @@\n import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.report.StaticReportletConf;\n-import org.apache.syncope.core.misc.DataFormat;\n+import org.apache.syncope.core.misc.FormatUtils;\n import org.springframework.util.StringUtils;\n import org.xml.sax.ContentHandler;\n import org.xml.sax.SAXException;\n@@ -101,7 +101,7 @@ protected void doExtract(final ReportletConf conf, final ContentHandler handler)\n \n         if (this.conf.getDateField() != null) {\n             handler.startElement(\"\", \"\", \"date\", null);\n-            String printed = DataFormat.format(this.conf.getDateField());\n+            String printed = FormatUtils.format(this.conf.getDateField());\n             handler.characters(printed.toCharArray(), 0, printed.length());\n             handler.endElement(\"\", \"\", \"date\");\n         }"},{"sha":"3eb96b33d1e477189792a37531ddf932e5a8a21d","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/UserReportlet.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -38,7 +38,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n-import org.apache.syncope.core.misc.DataFormat;\n+import org.apache.syncope.core.misc.FormatUtils;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n@@ -231,21 +231,21 @@ private void doExtract(final ContentHandler handler, final List<User> users) thr\n                         type = ReportXMLConst.XSD_DATETIME;\n                         value = user.getCreationDate() == null\n                                 ? \"\"\n-                                : DataFormat.format(user.getCreationDate());\n+                                : FormatUtils.format(user.getCreationDate());\n                         break;\n \n                     case lastLoginDate:\n                         type = ReportXMLConst.XSD_DATETIME;\n                         value = user.getLastLoginDate() == null\n                                 ? \"\"\n-                                : DataFormat.format(user.getLastLoginDate());\n+                                : FormatUtils.format(user.getLastLoginDate());\n                         break;\n \n                     case changePwdDate:\n                         type = ReportXMLConst.XSD_DATETIME;\n                         value = user.getChangePwdDate() == null\n                                 ? \"\"\n-                                : DataFormat.format(user.getChangePwdDate());\n+                                : FormatUtils.format(user.getChangePwdDate());\n                         break;\n \n                     case passwordHistorySize:"},{"sha":"0b069061f2cc1684497bf7380015a3468dcb8f4f","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/FormatUtils.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FFormatUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FFormatUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FFormatUtils.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -28,7 +28,7 @@\n /**\n  * Utility class for parsing / formatting date and numbers.\n  */\n-public final class DataFormat {\n+public final class FormatUtils {\n \n     private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = new ThreadLocal<SimpleDateFormat>() {\n \n@@ -111,7 +111,7 @@ public static void clear() {\n         DECIMAL_FORMAT.remove();\n     }\n \n-    private DataFormat() {\n+    private FormatUtils() {\n         // private empty constructor\n     }\n }","previous_filename":"core/misc/src/main/java/org/apache/syncope/core/misc/DataFormat.java"},{"sha":"54a4428c2174051099a0d86de9ff58405c595226","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/MappingUtils.java","status":"modified","additions":53,"deletions":119,"changes":172,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -19,23 +19,18 @@\n package org.apache.syncope.core.misc;\n \n import java.util.ArrayList;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.ListUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.jexl2.JexlContext;\n import org.apache.commons.jexl2.MapContext;\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -53,7 +48,6 @@\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n@@ -70,6 +64,7 @@\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n@@ -122,42 +117,6 @@ public class MappingUtils {\n     @Autowired\n     private AnyUtilsFactory anyUtilsFactory;\n \n-    public static <T extends MappingItem> Collection<T> getMatchingMappingItems(\n-            final Collection<T> items, final IntMappingType type) {\n-\n-        return CollectionUtils.select(items, new Predicate<T>() {\n-\n-            @Override\n-            public boolean evaluate(final T item) {\n-                return item.getIntMappingType() == type;\n-            }\n-        });\n-    }\n-\n-    public static <T extends MappingItem> Collection<T> getMatchingMappingItems(\n-            final Collection<T> items, final String intAttrName, final IntMappingType type) {\n-\n-        return CollectionUtils.select(items, new Predicate<T>() {\n-\n-            @Override\n-            public boolean evaluate(final T item) {\n-                return item.getIntMappingType() == type && intAttrName.equals(item.getIntAttrName());\n-            }\n-        });\n-    }\n-\n-    public static <T extends MappingItem> Collection<T> getMatchingMappingItems(\n-            final Collection<T> items, final String intAttrName) {\n-\n-        return CollectionUtils.select(items, new Predicate<T>() {\n-\n-            @Override\n-            public boolean evaluate(final T item) {\n-                return intAttrName.equals(item.getIntAttrName());\n-            }\n-        });\n-    }\n-\n     public static MappingItem getConnObjectKeyItem(final Provision provision) {\n         Mapping mapping = null;\n         if (provision != null) {\n@@ -241,7 +200,7 @@ public static List<MappingItem> getSyncMappingItems(final Provision provision) {\n      * @param connObjectKey connector object key\n      * @return the value to be propagated as __NAME__\n      */\n-    public static Name evaluateNAME(final Any<?, ?, ?> any, final Provision provision, final String connObjectKey) {\n+    public static Name evaluateNAME(final Any<?, ?> any, final Provision provision, final String connObjectKey) {\n         if (StringUtils.isBlank(connObjectKey)) {\n             // LOG error but avoid to throw exception: leave it to the external resource\n             LOG.error(\"Missing ConnObjectKey for '{}': \", provision.getResource());\n@@ -302,17 +261,15 @@ public static List<MappingItemTransformer> getMappingItemTransformers(final Mapp\n      * @param any given any object\n      * @param password clear-text password\n      * @param changePwd whether password should be included for propagation attributes or not\n-     * @param vAttrs virtual attributes to be managed\n      * @param enable whether any object must be enabled or not\n      * @param provision provision information\n      * @return connObjectLink + prepared attributes\n      */\n     @Transactional(readOnly = true)\n     public Pair<String, Set<Attribute>> prepareAttrs(\n-            final Any<?, ?, ?> any,\n+            final Any<?, ?> any,\n             final String password,\n             final boolean changePwd,\n-            final Map<String, AttrPatch> vAttrs,\n             final Boolean enable,\n             final Provision provision) {\n \n@@ -322,19 +279,11 @@ public Pair<String, Set<Attribute>> prepareAttrs(\n         Set<Attribute> attributes = new HashSet<>();\n         String connObjectKey = null;\n \n-        for (MappingItem mapping : getMappingItems(provision, MappingPurpose.PROPAGATION)) {\n-            LOG.debug(\"Processing schema {}\", mapping.getIntAttrName());\n+        for (MappingItem mappingItem : getMappingItems(provision, MappingPurpose.PROPAGATION)) {\n+            LOG.debug(\"Processing schema {}\", mappingItem.getIntAttrName());\n \n             try {\n-                if (mapping.getIntMappingType() == IntMappingType.UserVirtualSchema\n-                        || mapping.getIntMappingType() == IntMappingType.GroupVirtualSchema\n-                        || mapping.getIntMappingType() == IntMappingType.AnyObjectVirtualSchema) {\n-\n-                    LOG.debug(\"Expire entry cache {}-{}\", any.getKey(), mapping.getIntAttrName());\n-                    virAttrCache.expire(any.getType().getKey(), any.getKey(), mapping.getIntAttrName());\n-                }\n-\n-                Pair<String, Attribute> preparedAttr = prepareAttr(provision, mapping, any, password, vAttrs);\n+                Pair<String, Attribute> preparedAttr = prepareAttr(provision, mappingItem, any, password);\n \n                 if (preparedAttr != null && preparedAttr.getKey() != null) {\n                     connObjectKey = preparedAttr.getKey();\n@@ -355,7 +304,7 @@ public Pair<String, Set<Attribute>> prepareAttrs(\n                     }\n                 }\n             } catch (Exception e) {\n-                LOG.debug(\"Attribute '{}' processing failed\", mapping.getIntAttrName(), e);\n+                LOG.debug(\"Attribute '{}' processing failed\", mappingItem.getIntAttrName(), e);\n             }\n         }\n \n@@ -387,15 +336,12 @@ public Pair<String, Set<Attribute>> prepareAttrs(\n      * @param mapItem mapping item for the given attribute\n      * @param any any object\n      * @param password clear-text password\n-     * @param vAttrs virtual attributes to be managed\n      * @return connObjectLink + prepared attribute\n      */\n     private Pair<String, Attribute> prepareAttr(\n-            final Provision provision, final MappingItem mapItem,\n-            final Any<?, ?, ?> any, final String password,\n-            final Map<String, AttrPatch> vAttrs) {\n+            final Provision provision, final MappingItem mapItem, final Any<?, ?> any, final String password) {\n \n-        List<Any<?, ?, ?>> anys = new ArrayList<>();\n+        List<Any<?, ?>> anys = new ArrayList<>();\n \n         switch (mapItem.getIntMappingType().getAnyTypeKind()) {\n             case USER:\n@@ -407,7 +353,6 @@ private Pair<String, Attribute> prepareAttr(\n             case GROUP:\n                 if (any instanceof User) {\n                     for (Group group : userDAO.findAllGroups((User) any)) {\n-                        virAttrHandler.retrieveVirAttrValues(group);\n                         anys.add(group);\n                     }\n                 } else if (any instanceof Group) {\n@@ -424,8 +369,6 @@ private Pair<String, Attribute> prepareAttr(\n             default:\n         }\n \n-        List<PlainAttrValue> values = getIntValues(provision, mapItem, anys, vAttrs);\n-\n         Schema schema = null;\n         boolean readOnlyVirSchema = false;\n         AttrSchemaType schemaType;\n@@ -453,6 +396,8 @@ private Pair<String, Attribute> prepareAttr(\n \n         String extAttrName = mapItem.getExtAttrName();\n \n+        List<PlainAttrValue> values = getIntValues(provision, mapItem, anys);\n+\n         LOG.debug(\"Define mapping for: \"\n                 + \"\\n* ExtAttrName \" + extAttrName\n                 + \"\\n* is connObjectKey \" + mapItem.isConnObjectKey()\n@@ -501,17 +446,15 @@ private Pair<String, Attribute> prepareAttr(\n                     result = null;\n                 } else {\n                     result = new ImmutablePair<>(\n-                            null,\n-                            AttributeBuilder.buildPassword(passwordAttrValue.toCharArray()));\n+                            null, AttributeBuilder.buildPassword(passwordAttrValue.toCharArray()));\n                 }\n             } else {\n                 if ((schema != null && schema.isMultivalue())\n                         || anyUtilsFactory.getInstance(any).getAnyTypeKind()\n                         != mapItem.getIntMappingType().getAnyTypeKind()) {\n \n                     result = new ImmutablePair<>(\n-                            null,\n-                            AttributeBuilder.build(extAttrName, objValues));\n+                            null, AttributeBuilder.build(extAttrName, objValues));\n                 } else {\n                     result = new ImmutablePair<>(\n                             null, objValues.isEmpty()\n@@ -524,9 +467,8 @@ private Pair<String, Attribute> prepareAttr(\n         return result;\n     }\n \n-    private String getGroupOwnerValue(final Provision provision, final Any<?, ?, ?> any) {\n-        Pair<String, Attribute> preparedAttr = prepareAttr(\n-                provision, getConnObjectKeyItem(provision), any, null, Collections.<String, AttrPatch>emptyMap());\n+    private String getGroupOwnerValue(final Provision provision, final Any<?, ?> any) {\n+        Pair<String, Attribute> preparedAttr = prepareAttr(provision, getConnObjectKeyItem(provision), any, null);\n         String connObjectKey = preparedAttr.getKey();\n \n         return evaluateNAME(any, provision, connObjectKey).getNameValue();\n@@ -538,12 +480,11 @@ private String getGroupOwnerValue(final Provision provision, final Any<?, ?, ?>\n      * @param provision provision information\n      * @param mappingItem mapping item\n      * @param anys any objects\n-     * @param vAttrs virtual attributes to be managed\n      * @return attribute values.\n      */\n     @Transactional(readOnly = true)\n     public List<PlainAttrValue> getIntValues(final Provision provision,\n-            final MappingItem mappingItem, final List<Any<?, ?, ?>> anys, final Map<String, AttrPatch> vAttrs) {\n+            final MappingItem mappingItem, final List<Any<?, ?>> anys) {\n \n         LOG.debug(\"Get attributes for '{}' and mapping type '{}'\", anys, mappingItem.getIntMappingType());\n \n@@ -554,7 +495,7 @@ public List<PlainAttrValue> getIntValues(final Provision provision,\n             case UserPlainSchema:\n             case GroupPlainSchema:\n             case AnyObjectPlainSchema:\n-                for (Any<?, ?, ?> any : anys) {\n+                for (Any<?, ?> any : anys) {\n                     PlainAttr<?> attr = any.getPlainAttr(mappingItem.getIntAttrName());\n                     if (attr != null) {\n                         if (attr.getUniqueValue() != null) {\n@@ -579,46 +520,10 @@ public List<PlainAttrValue> getIntValues(final Provision provision,\n \n                 break;\n \n-            case UserVirtualSchema:\n-            case GroupVirtualSchema:\n-            case AnyObjectVirtualSchema:\n-                // virtual attributes don't get transformed\n-                transform = false;\n-\n-                for (Any<?, ?, ?> any : anys) {\n-                    AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n-                    VirAttr<?> attr = any.getVirAttr(mappingItem.getIntAttrName());\n-                    if (attr != null) {\n-                        if (vAttrs != null) {\n-                            if (vAttrs.containsKey(mappingItem.getIntAttrName())) {\n-                                attr.getValues().clear();\n-                                attr.getValues().addAll(\n-                                        vAttrs.get(mappingItem.getIntAttrName()).getAttrTO().getValues());\n-                            } else {\n-                                throw new IllegalArgumentException(\"Don't need to update virtual attribute '\"\n-                                        + mappingItem.getIntAttrName() + \"'\");\n-                            }\n-                        }\n-                        for (String value : attr.getValues()) {\n-                            PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n-                            attrValue.setStringValue(value);\n-                            values.add(attrValue);\n-                        }\n-                    }\n-\n-                    LOG.debug(\"Retrieved {} virtual attribute {}\"\n-                            + \"\\n* IntAttrName {}\"\n-                            + \"\\n* IntMappingType {}\"\n-                            + \"\\n* Attribute values {}\",\n-                            any.getClass().getSimpleName(),\n-                            attr, mappingItem.getIntAttrName(), mappingItem.getIntMappingType(), values);\n-                }\n-                break;\n-\n             case UserDerivedSchema:\n             case GroupDerivedSchema:\n             case AnyObjectDerivedSchema:\n-                for (Any<?, ?, ?> any : anys) {\n+                for (Any<?, ?> any : anys) {\n                     AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n                     DerAttr<?> attr = any.getDerAttr(mappingItem.getIntAttrName());\n                     if (attr != null) {\n@@ -635,10 +540,39 @@ public List<PlainAttrValue> getIntValues(final Provision provision,\n                 }\n                 break;\n \n+            case UserVirtualSchema:\n+            case GroupVirtualSchema:\n+            case AnyObjectVirtualSchema:\n+                // virtual attributes don't get transformed\n+                transform = false;\n+\n+                VirSchema virSchema = virSchemaDAO.find(mappingItem.getIntAttrName());\n+                if (virSchema != null) {\n+                    for (Any<?, ?> any : anys) {\n+                        LOG.debug(\"Expire entry cache {}-{}\", any.getKey(), mappingItem.getIntAttrName());\n+                        virAttrCache.expire(any.getType().getKey(), any.getKey(), mappingItem.getIntAttrName());\n+\n+                        AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n+                        for (String value : virAttrHandler.getValues(any, virSchema)) {\n+                            PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n+                            attrValue.setStringValue(value);\n+                            values.add(attrValue);\n+                        }\n+\n+                        LOG.debug(\"Retrieved values for {}\"\n+                                + \"\\n* IntAttrName {}\"\n+                                + \"\\n* IntMappingType {}\"\n+                                + \"\\n* Attribute values {}\",\n+                                virSchema.getKey(), mappingItem.getIntAttrName(), mappingItem.getIntMappingType(),\n+                                values);\n+                    }\n+                }\n+                break;\n+\n             case UserKey:\n             case GroupKey:\n             case AnyObjectKey:\n-                for (Any<?, ?, ?> any : anys) {\n+                for (Any<?, ?> any : anys) {\n                     AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n                     PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n                     attrValue.setStringValue(any.getKey().toString());\n@@ -647,7 +581,7 @@ public List<PlainAttrValue> getIntValues(final Provision provision,\n                 break;\n \n             case Username:\n-                for (Any<?, ?, ?> any : anys) {\n+                for (Any<?, ?> any : anys) {\n                     if (any instanceof User) {\n                         UPlainAttrValue attrValue = entityFactory.newEntity(UPlainAttrValue.class);\n                         attrValue.setStringValue(((User) any).getUsername());\n@@ -657,7 +591,7 @@ public List<PlainAttrValue> getIntValues(final Provision provision,\n                 break;\n \n             case GroupName:\n-                for (Any<?, ?, ?> any : anys) {\n+                for (Any<?, ?> any : anys) {\n                     if (any instanceof Group) {\n                         GPlainAttrValue attrValue = entityFactory.newEntity(GPlainAttrValue.class);\n                         attrValue.setStringValue(((Group) any).getName());\n@@ -674,7 +608,7 @@ public List<PlainAttrValue> getIntValues(final Provision provision,\n                         ? null\n                         : provision.getMapping();\n \n-                for (Any<?, ?, ?> any : anys) {\n+                for (Any<?, ?> any : anys) {\n                     if (any instanceof Group) {\n                         Group group = (Group) any;\n                         String groupOwnerValue = null;\n@@ -720,9 +654,9 @@ public List<PlainAttrValue> getIntValues(final Provision provision,\n      * @return connObjectKey internal value\n      */\n     @Transactional(readOnly = true)\n-    public String getConnObjectKeyValue(final Any<?, ?, ?> any, final Provision provision) {\n+    public String getConnObjectKeyValue(final Any<?, ?> any, final Provision provision) {\n         List<PlainAttrValue> values = getIntValues(provision, provision.getMapping().getConnObjectKeyItem(),\n-                Collections.<Any<?, ?, ?>>singletonList(any), null);\n+                Collections.<Any<?, ?>>singletonList(any));\n         return values == null || values.isEmpty()\n                 ? null\n                 : values.get(0).getValueAsString();"},{"sha":"3afe6e5f1f010c3b69991f60a802104eee03dcef","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/jexl/JexlUtils.java","status":"modified","additions":5,"deletions":30,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FJexlUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FJexlUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FJexlUtils.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -35,8 +35,7 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-import org.apache.syncope.core.misc.DataFormat;\n+import org.apache.syncope.core.misc.FormatUtils;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.slf4j.Logger;\n@@ -126,7 +125,7 @@ public static JexlContext addFieldsToContext(final Object object, final JexlCont\n                         context.set(fieldName, fieldValue == null\n                                 ? StringUtils.EMPTY\n                                 : (type.equals(Date.class)\n-                                        ? DataFormat.format((Date) fieldValue, false)\n+                                        ? FormatUtils.format((Date) fieldValue, false)\n                                         : fieldValue));\n \n                         LOG.debug(\"Add field {} with value {}\", fieldName, fieldValue);\n@@ -140,7 +139,7 @@ public static JexlContext addFieldsToContext(final Object object, final JexlCont\n         }\n \n         if (object instanceof Any) {\n-            Any<?, ?, ?> any = (Any<?, ?, ?>) object;\n+            Any<?, ?> any = (Any<?, ?>) object;\n             if (any.getRealm() != null) {\n                 context.set(\"realm\", any.getRealm().getName());\n             }\n@@ -195,40 +194,16 @@ public static JexlContext addDerAttrsToContext(final Collection<? extends DerAtt\n         return context;\n     }\n \n-    public static JexlContext addVirAttrsToContext(final Collection<? extends VirAttr> virAttrs,\n-            final JexlContext jexlContext) {\n-\n-        JexlContext context = jexlContext == null\n-                ? new MapContext()\n-                : jexlContext;\n-\n-        for (VirAttr<?> virAttr : virAttrs) {\n-            if (virAttr.getSchema() != null) {\n-                List<String> attrValues = virAttr.getValues();\n-                String expressionValue = attrValues.isEmpty()\n-                        ? StringUtils.EMPTY\n-                        : attrValues.get(0);\n-\n-                LOG.debug(\"Add virtual attribute {} with value {}\", virAttr.getSchema().getKey(), expressionValue);\n-\n-                context.set(virAttr.getSchema().getKey(), expressionValue);\n-            }\n-        }\n-\n-        return context;\n-    }\n-\n-    public static boolean evaluateMandatoryCondition(final String mandatoryCondition, final Any<?, ?, ?> any) {\n+    public static boolean evaluateMandatoryCondition(final String mandatoryCondition, final Any<?, ?> any) {\n         JexlContext jexlContext = new MapContext();\n         addPlainAttrsToContext(any.getPlainAttrs(), jexlContext);\n         addDerAttrsToContext(any.getDerAttrs(), any.getPlainAttrs(), jexlContext);\n-        addVirAttrsToContext(any.getVirAttrs(), jexlContext);\n \n         return Boolean.parseBoolean(evaluate(mandatoryCondition, jexlContext));\n     }\n \n     public static String evaluate(final String expression,\n-            final Any<?, ?, ?> any, final Collection<? extends PlainAttr<?>> attributes) {\n+            final Any<?, ?> any, final Collection<? extends PlainAttr<?>> attributes) {\n \n         JexlContext jexlContext = new MapContext();\n         JexlUtils.addPlainAttrsToContext(attributes, jexlContext);"},{"sha":"bfda35f068cfa8e497c08e4c539f8fbbc427ae1b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n \n-public interface AnyDAO<A extends Any<?, ?, ?>> extends DAO<A, Long> {\n+public interface AnyDAO<A extends Any<?, ?>> extends DAO<A, Long> {\n \n     A authFind(Long key);\n "},{"sha":"00471e096ef65c04adf57d4a5923514b6f8ec0ce","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnySearchDAO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n \n-public interface AnySearchDAO extends DAO<Any<?, ?, ?>, Long> {\n+public interface AnySearchDAO extends DAO<Any<?, ?>, Long> {\n \n     /**\n      * @param adminRealms realms for which the caller owns the proper entitlement(s)\n@@ -42,7 +42,7 @@ public interface AnySearchDAO extends DAO<Any<?, ?, ?>, Long> {\n      * @param <T> any\n      * @return the list of any objects matching the given search condition\n      */\n-    <T extends Any<?, ?, ?>> List<T> search(\n+    <T extends Any<?, ?>> List<T> search(\n             Set<String> adminRealms, SearchCond searchCondition, AnyTypeKind kind);\n \n     /**\n@@ -53,7 +53,7 @@ public interface AnySearchDAO extends DAO<Any<?, ?, ?>, Long> {\n      * @param <T> any\n      * @return the list of any objects matching the given search condition\n      */\n-    <T extends Any<?, ?, ?>> List<T> search(\n+    <T extends Any<?, ?>> List<T> search(\n             Set<String> adminRealms, SearchCond searchCondition, List<OrderByClause> orderBy, AnyTypeKind kind);\n \n     /**\n@@ -66,7 +66,7 @@ public interface AnySearchDAO extends DAO<Any<?, ?, ?>, Long> {\n      * @param <T> any\n      * @return the list of any objects matching the given search condition (in the given page)\n      */\n-    <T extends Any<?, ?, ?>> List<T> search(\n+    <T extends Any<?, ?>> List<T> search(\n             Set<String> adminRealms, SearchCond searchCondition, int page, int itemsPerPage,\n             List<OrderByClause> orderBy, AnyTypeKind kind);\n \n@@ -79,5 +79,5 @@ public interface AnySearchDAO extends DAO<Any<?, ?, ?>, Long> {\n      * @param <T> any\n      * @return true if any matches searchCondition\n      */\n-    <T extends Any<?, ?, ?>> boolean matches(T any, SearchCond searchCondition, AnyTypeKind kind);\n+    <T extends Any<?, ?>> boolean matches(T any, SearchCond searchCondition, AnyTypeKind kind);\n }"},{"sha":"aeabe233825c5755023e57c95de074195d00b714","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ExternalResourceDAO.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -21,13 +21,16 @@\n import java.util.List;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n \n public interface ExternalResourceDAO extends DAO<ExternalResource, String> {\n \n     ExternalResource find(String key);\n \n+    Provision findProvision(Long key);\n+\n     List<ExternalResource> findByPolicy(Policy policy);\n \n     List<ExternalResource> findWithoutPolicy(PolicyType type);"},{"sha":"b62cb87a111fbb3f70a81242063d4bf103a77b68","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/VirAttrDAO.java","status":"removed","additions":0,"deletions":35,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirAttrDAO.java?ref=ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6","patch":"@@ -1,35 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.dao;\n-\n-import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-\n-public interface VirAttrDAO extends DAO<VirAttr<?>, Long> {\n-\n-    <T extends VirAttr<?>> T find(Long key, Class<T> reference);\n-\n-    <T extends VirAttr<?>> List<T> findAll(Class<T> reference);\n-\n-    <T extends VirAttr<?>> T save(T virtualAttribute);\n-\n-    <T extends VirAttr<?>> void delete(Long key, Class<T> reference);\n-\n-    <T extends VirAttr<?>> void delete(T virAttr);\n-}"},{"sha":"9479428739bfb4997465cc8c21ea3191931cf368","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/VirSchemaDAO.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -18,8 +18,12 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.Attr;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n \n-public interface VirSchemaDAO extends SchemaDAO<VirSchema, VirAttr<?>> {\n+public interface VirSchemaDAO extends SchemaDAO<VirSchema, Attr<VirSchema, ?>> {\n+\n+    List<VirSchema> findByProvision(Provision provision);\n }"},{"sha":"f56485e9aae2fdadb149c43e864ef7958326943d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Any.java","status":"modified","additions":1,"deletions":9,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -22,7 +22,7 @@\n import java.util.List;\n import java.util.Set;\n \n-public interface Any<P extends PlainAttr<?>, D extends DerAttr<?>, V extends VirAttr<?>> extends AnnotatedEntity<Long> {\n+public interface Any<P extends PlainAttr<?>, D extends DerAttr<?>> extends AnnotatedEntity<Long> {\n \n     AnyType getType();\n \n@@ -56,14 +56,6 @@\n \n     List<? extends D> getDerAttrs();\n \n-    boolean add(V virAttr);\n-\n-    boolean remove(V virAttr);\n-\n-    V getVirAttr(String virSchemaName);\n-\n-    List<? extends V> getVirAttrs();\n-\n     boolean add(ExternalResource resource);\n \n     boolean remove(ExternalResource resource);"},{"sha":"702e7a63060b580410bba17352bb078fc386fb10","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtils.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -26,7 +26,7 @@ public interface AnyUtils {\n \n     AnyTypeKind getAnyTypeKind();\n \n-    <T extends Any<?, ?, ?>> Class<T> anyClass();\n+    <T extends Any<?, ?>> Class<T> anyClass();\n \n     <T extends PlainAttr<?>> Class<T> plainAttrClass();\n \n@@ -44,10 +44,6 @@ public interface AnyUtils {\n \n     <T extends DerAttr<?>> T newDerAttr();\n \n-    <T extends VirAttr<?>> Class<T> virAttrClass();\n-\n-    <T extends VirAttr<?>> T newVirAttr();\n-\n     IntMappingType plainIntMappingType();\n \n     IntMappingType derIntMappingType();"},{"sha":"d64e7e1dfff6f2ef2994b19fd7455114de05aa2e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtilsFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtilsFactory.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -26,5 +26,5 @@ public interface AnyUtilsFactory {\n \n     AnyUtils getInstance(String anyTypeKind);\n \n-    AnyUtils getInstance(Any<?, ?, ?> any);\n+    AnyUtils getInstance(Any<?, ?> any);\n }"},{"sha":"500b8359994a097ad89f9a3eaa95ede3e795938b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Attr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttr.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-public interface Attr<S extends Schema, O extends Any<?, ?, ?>> extends Entity<Long> {\n+public interface Attr<S extends Schema, O extends Any<?, ?>> extends Entity<Long> {\n \n     O getOwner();\n "},{"sha":"ff15a4a66e2311349c22e84e7617599fd408d820","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/DerAttr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDerAttr.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -20,7 +20,7 @@\n \n import java.util.Collection;\n \n-public interface DerAttr<O extends Any<?, ?, ?>> extends Attr<DerSchema, O> {\n+public interface DerAttr<O extends Any<?, ?>> extends Attr<DerSchema, O> {\n \n     String getValue(Collection<? extends PlainAttr<?>> attrs);\n }"},{"sha":"ebb7cf829c10ce1438d112e70092a2ab644eaa60","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/DynGroupMembership.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynGroupMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynGroupMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynGroupMembership.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -20,7 +20,7 @@\n \n import org.apache.syncope.core.persistence.api.entity.group.Group;\n \n-public interface DynGroupMembership<A extends Any<?, ?, ?>> extends DynMembership<A> {\n+public interface DynGroupMembership<A extends Any<?, ?>> extends DynMembership<A> {\n \n     Group getGroup();\n "},{"sha":"24c6309e34c32ed74a5db58c3658fc36374dd350","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/DynMembership.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynMembership.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -20,7 +20,7 @@\n \n import java.util.List;\n \n-public interface DynMembership<A extends Any<?, ?, ?>> extends Entity<Long> {\n+public interface DynMembership<A extends Any<?, ?>> extends Entity<Long> {\n \n     String getFIQLCond();\n "},{"sha":"9d1466cc2b368da92be21efec4da79ad20b8da6e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Membership.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FMembership.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -20,7 +20,7 @@\n \n import org.apache.syncope.core.persistence.api.entity.group.Group;\n \n-public interface Membership<L extends Any<?, ?, ?>> extends Relationship<L, Group> {\n+public interface Membership<L extends Any<?, ?>> extends Relationship<L, Group> {\n \n     @Override\n     MembershipType getType();"},{"sha":"8d8a7c10c3bf62e912a2d8a4705e5675c5d7915f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/PlainAttr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -20,7 +20,7 @@\n \n import java.util.List;\n \n-public interface PlainAttr<O extends Any<?, ?, ?>> extends Attr<PlainSchema, O> {\n+public interface PlainAttr<O extends Any<?, ?>> extends Attr<PlainSchema, O> {\n \n     void add(String value, AnyUtils anyUtils);\n "},{"sha":"b87563eed9ee06046891222bb2fa521b7df56400","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Relationship.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRelationship.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRelationship.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRelationship.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-public interface Relationship<L extends Any<?, ?, ?>, R extends Any<?, ?, ?>> extends Entity<Long> {\n+public interface Relationship<L extends Any<?, ?>, R extends Any<?, ?>> extends Entity<Long> {\n \n     RelationshipType getType();\n "},{"sha":"7761d933df50cf9990a7a5e4dc17e5cee2c828dd","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/VirAttr.java","status":"removed","additions":0,"deletions":30,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FVirAttr.java?ref=ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6","patch":"@@ -1,30 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity;\n-\n-import java.util.List;\n-\n-public interface VirAttr<O extends Any<?, ?, ?>> extends Attr<VirSchema, O> {\n-\n-    List<String> getValues();\n-\n-    boolean add(String value);\n-\n-    boolean remove(String value);\n-}"},{"sha":"65cc11dc0aafb11085809a1967662bd821f124e5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/VirSchema.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FVirSchema.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -18,7 +18,20 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+\n public interface VirSchema extends Schema {\n \n     void setReadonly(boolean readonly);\n+\n+    Provision getProvision();\n+\n+    void setProvision(Provision provision);\n+\n+    String getExtAttrName();\n+\n+    void setExtAttrName(String extAttrName);\n+\n+    MappingItem asLinkingMappingItem();\n }"},{"sha":"be86c594e3051b96efea5e077519b8ad965b26b3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/anyobject/AVirAttr.java","status":"removed","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAVirAttr.java?ref=ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6","patch":"@@ -1,25 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity.anyobject;\n-\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-\n-public interface AVirAttr extends VirAttr<AnyObject> {\n-\n-}"},{"sha":"1e10257173bf2bd49c0dd853eceeb93fe172a262","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/anyobject/AnyObject.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -23,7 +23,7 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n \n-public interface AnyObject extends Any<APlainAttr, ADerAttr, AVirAttr> {\n+public interface AnyObject extends Any<APlainAttr, ADerAttr> {\n \n     boolean add(ARelationship relationship);\n "},{"sha":"f4ca14d5b54e85fc7c9b9df69dbff199eb9c345d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/conf/Conf.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fconf%2FConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fconf%2FConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fconf%2FConf.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -21,9 +21,8 @@\n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n \n-public interface Conf extends Any<CPlainAttr, DerAttr<?>, VirAttr<?>> {\n+public interface Conf extends Any<CPlainAttr, DerAttr<?>> {\n \n     void setKey(Long key);\n "},{"sha":"184779488b49777251a2cfe6abd6e05a09e5eba3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/GVirAttr.java","status":"removed","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGVirAttr.java?ref=ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6","patch":"@@ -1,25 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity.group;\n-\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-\n-public interface GVirAttr extends VirAttr<Group> {\n-\n-}"},{"sha":"0afddbaf18039a2f93dde27d69940b064a86db84","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/Group.java","status":"modified","additions":1,"deletions":13,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n \n-public interface Group extends Any<GPlainAttr, GDerAttr, GVirAttr> {\n+public interface Group extends Any<GPlainAttr, GDerAttr> {\n \n     String getName();\n \n@@ -63,18 +63,6 @@ public interface Group extends Any<GPlainAttr, GDerAttr, GVirAttr> {\n     @Override\n     List<? extends GDerAttr> getDerAttrs();\n \n-    @Override\n-    boolean add(GVirAttr attr);\n-\n-    @Override\n-    boolean remove(GVirAttr virAttr);\n-\n-    @Override\n-    GVirAttr getVirAttr(String virSchemaName);\n-\n-    @Override\n-    List<? extends GVirAttr> getVirAttrs();\n-\n     ADynGroupMembership getADynMembership();\n \n     void setADynMembership(ADynGroupMembership aDynMembership);"},{"sha":"2d194365b82f139d51b660879e195793b33dfa7b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/PropagationTask.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -54,6 +54,10 @@ public interface PropagationTask extends Task {\n \n     void setAnyTypeKind(AnyTypeKind anyTypeKind);\n \n+    String getAnyType();\n+\n+    void setAnyType(String anyType);\n+\n     ExternalResource getResource();\n \n     void setResource(ExternalResource resource);"},{"sha":"bb3ab703e29a9fc4977ed731d13081eb6b45b554","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/UVirAttr.java","status":"removed","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUVirAttr.java?ref=ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6","patch":"@@ -1,25 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity.user;\n-\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-\n-public interface UVirAttr extends VirAttr<User> {\n-\n-}"},{"sha":"0a51c48d19ba38eb5172c1d5429a3f6fba41a840","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/User.java","status":"modified","additions":1,"deletions":13,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.Role;\n \n-public interface User extends Any<UPlainAttr, UDerAttr, UVirAttr> {\n+public interface User extends Any<UPlainAttr, UDerAttr> {\n \n     String getUsername();\n \n@@ -116,18 +116,6 @@ public interface User extends Any<UPlainAttr, UDerAttr, UVirAttr> {\n     @Override\n     List<? extends UDerAttr> getDerAttrs();\n \n-    @Override\n-    boolean add(UVirAttr attr);\n-\n-    @Override\n-    boolean remove(UVirAttr virAttr);\n-\n-    @Override\n-    UVirAttr getVirAttr(String virSchemaName);\n-\n-    @Override\n-    List<? extends UVirAttr> getVirAttrs();\n-\n     boolean add(Role role);\n \n     boolean remove(Role role);"},{"sha":"125b4471182fd6b14dd009e15450488b4e58cf4d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/ContentLoaderHandler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -27,7 +27,7 @@\n import javax.sql.DataSource;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.binary.Hex;\n-import org.apache.syncope.core.misc.DataFormat;\n+import org.apache.syncope.core.misc.FormatUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.dao.DataAccessException;\n@@ -125,7 +125,7 @@ public Map<String, Integer> extractData(final ResultSet rs) throws SQLException\n                 case Types.TIME:\n                 case Types.TIMESTAMP:\n                     try {\n-                        parameters[i] = DataFormat.parseDate(attrs.getValue(i));\n+                        parameters[i] = FormatUtils.parseDate(attrs.getValue(i));\n                     } catch (ParseException e) {\n                         LOG.error(\"Unparsable Date '{}'\", attrs.getValue(i));\n                         parameters[i] = attrs.getValue(i);"},{"sha":"9512849dfc13468f719510bd394d532a9c60ce79","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -50,7 +50,7 @@\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.core.misc.DataFormat;\n+import org.apache.syncope.core.misc.FormatUtils;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.content.ContentExporter;\n import org.apache.syncope.core.persistence.jpa.entity.JPAReportExec;\n@@ -60,7 +60,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship;\n-import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAVirAttr;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPATaskExec;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDerAttr;\n@@ -69,7 +68,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.springframework.jdbc.datasource.DataSourceUtils;\n import org.springframework.security.crypto.codec.Hex;\n@@ -87,9 +85,9 @@ public class XMLContentExporter extends AbstractContentDealer implements Content\n             new HashSet<>(Arrays.asList(new String[] {\n                 \"QRTZ_\", \"LOGGING\", JPAReportExec.TABLE, JPATaskExec.TABLE,\n                 JPAUser.TABLE, JPAUPlainAttr.TABLE, JPAUPlainAttrValue.TABLE, JPAUPlainAttrUniqueValue.TABLE,\n-                JPAUDerAttr.TABLE, JPAUVirAttr.TABLE,\n+                JPAUDerAttr.TABLE,\n                 JPAAnyObject.TABLE, JPAAPlainAttr.TABLE, JPAAPlainAttrValue.TABLE, JPAAPlainAttrUniqueValue.TABLE,\n-                JPAADerAttr.TABLE, JPAAVirAttr.TABLE,\n+                JPAADerAttr.TABLE,\n                 JPAARelationship.TABLE, JPAAMembership.TABLE, JPAURelationship.TABLE, JPAUMembership.TABLE\n             }));\n \n@@ -206,7 +204,7 @@ private String getValues(final ResultSet rs, final String columnName, final Inte\n                 case Types.TIMESTAMP:\n                     final Timestamp timestamp = rs.getTimestamp(columnName);\n                     if (timestamp != null) {\n-                        res = DataFormat.format(new Date(timestamp.getTime()));\n+                        res = FormatUtils.format(new Date(timestamp.getTime()));\n                     }\n                     break;\n "},{"sha":"960251f958753a6174d5edee3dffecba915413a7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":2,"deletions":9,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -47,14 +47,13 @@\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-public abstract class AbstractAnyDAO<A extends Any<?, ?, ?>> extends AbstractDAO<A, Long> implements AnyDAO<A> {\n+public abstract class AbstractAnyDAO<A extends Any<?, ?>> extends AbstractDAO<A, Long> implements AnyDAO<A> {\n \n     @Autowired\n     protected PlainSchemaDAO plainSchemaDAO;\n@@ -415,13 +414,7 @@ public final int count(final Set<String> adminRealms) {\n \n     @Override\n     public A save(final A any) {\n-        A merged = entityManager().merge(any);\n-        for (VirAttr<?> virAttr : merged.getVirAttrs()) {\n-            virAttr.getValues().clear();\n-            virAttr.getValues().addAll(any.getVirAttr(virAttr.getSchema().getKey()).getValues());\n-        }\n-\n-        return merged;\n+        return entityManager().merge(any);\n     }\n \n     @Override"},{"sha":"2acd68343c853d82bc5958d011e2a4487d2542f2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -67,7 +67,7 @@\n import org.springframework.util.ReflectionUtils;\n \n @Repository\n-public class JPAAnySearchDAO extends AbstractDAO<Any<?, ?, ?>, Long> implements AnySearchDAO {\n+public class JPAAnySearchDAO extends AbstractDAO<Any<?, ?>, Long> implements AnySearchDAO {\n \n     private static final String EMPTY_ATTR_QUERY = \"SELECT any_id FROM user_search_attr WHERE 1=2\";\n \n@@ -150,22 +150,22 @@ public int count(final Set<String> adminRealms, final SearchCond searchCondition\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> List<T> search(\n+    public <T extends Any<?, ?>> List<T> search(\n             final Set<String> adminRealms, final SearchCond searchCondition, final AnyTypeKind typeKind) {\n \n         return search(adminRealms, searchCondition, Collections.<OrderByClause>emptyList(), typeKind);\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> List<T> search(\n+    public <T extends Any<?, ?>> List<T> search(\n             final Set<String> adminRealms, final SearchCond searchCondition, final List<OrderByClause> orderBy,\n             final AnyTypeKind typeKind) {\n \n         return search(adminRealms, searchCondition, -1, -1, orderBy, typeKind);\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> List<T> search(\n+    public <T extends Any<?, ?>> List<T> search(\n             final Set<String> adminRealms, final SearchCond searchCondition, final int page, final int itemsPerPage,\n             final List<OrderByClause> orderBy, final AnyTypeKind typeKind) {\n \n@@ -189,7 +189,7 @@ public int count(final Set<String> adminRealms, final SearchCond searchCondition\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> boolean matches(\n+    public <T extends Any<?, ?>> boolean matches(\n             final T any, final SearchCond searchCondition, final AnyTypeKind typeKind) {\n \n         List<Object> parameters = Collections.synchronizedList(new ArrayList<>());\n@@ -347,7 +347,7 @@ private OrderBySupport parseOrderBy(final AnyTypeKind type, final SearchSupport\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private <T extends Any<?, ?, ?>> List<T> doSearch(final Set<String> adminRealms,\n+    private <T extends Any<?, ?>> List<T> doSearch(final Set<String> adminRealms,\n             final SearchCond nodeCond, final int page, final int itemsPerPage, final List<OrderByClause> orderBy,\n             final AnyTypeKind typeKind) {\n "},{"sha":"99b90144a734612b9dedd30b7afdfa4c6c75685f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerAttrDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerAttrDAO.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -78,7 +78,7 @@ public <T extends DerAttr<?>> void delete(final Long key, final Class<T> referen\n     @SuppressWarnings(\"unchecked\")\n     public <T extends DerAttr<?>> void delete(final T derAttr) {\n         if (derAttr.getOwner() != null) {\n-            ((Any<?, T, ?>) derAttr.getOwner()).remove(derAttr);\n+            ((Any<?, T>) derAttr.getOwner()).remove(derAttr);\n         }\n \n         entityManager().remove(derAttr);"},{"sha":"0650ee94bb315215a440dc4bfe2117a8bf1db490","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":22,"deletions":7,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -32,17 +32,20 @@\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMappingItem;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMapping;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n import org.apache.syncope.core.provisioning.api.ConnectorRegistry;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n@@ -66,6 +69,9 @@ public class JPAExternalResourceDAO extends AbstractDAO<ExternalResource, String\n     @Autowired\n     private PolicyDAO policyDAO;\n \n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n     @Autowired\n     private ConnectorRegistry connRegistry;\n \n@@ -74,6 +80,11 @@ public ExternalResource find(final String name) {\n         return entityManager().find(JPAExternalResource.class, name);\n     }\n \n+    @Override\n+    public Provision findProvision(final Long key) {\n+        return entityManager().find(JPAProvision.class, key);\n+    }\n+\n     private StringBuilder getByPolicyQuery(final PolicyType type) {\n         StringBuilder query = new StringBuilder(\"SELECT e FROM \").\n                 append(JPAExternalResource.class.getSimpleName()).\n@@ -203,21 +214,25 @@ public void delete(final String name) {\n             policy.remove(resource);\n         }\n \n-        if (resource.getConnector() != null && resource.getConnector().getResources() != null\n-                && !resource.getConnector().getResources().isEmpty()) {\n-\n-            resource.getConnector().getResources().remove(resource);\n-        }\n-        resource.setConnector(null);\n-\n         for (Provision provision : resource.getProvisions()) {\n             for (MappingItem item : provision.getMapping().getItems()) {\n                 item.setMapping(null);\n             }\n             provision.getMapping().getItems().clear();\n             provision.setMapping(null);\n             provision.setResource(null);\n+\n+            for (VirSchema schema : virSchemaDAO.findByProvision(provision)) {\n+                virSchemaDAO.delete(schema.getKey());\n+            }\n+        }\n+\n+        if (resource.getConnector() != null && resource.getConnector().getResources() != null\n+                && !resource.getConnector().getResources().isEmpty()) {\n+\n+            resource.getConnector().getResources().remove(resource);\n         }\n+        resource.setConnector(null);\n \n         entityManager().remove(resource);\n     }"},{"sha":"4c29c90844e4258b5d21157a860fda1e1cb121d0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -203,7 +203,7 @@ public void delete(final Group group) {\n     }\n \n     private void populateTransitiveResources(\n-            final Group group, final Any<?, ?, ?> any, final Map<Long, PropagationByResource> result) {\n+            final Group group, final Any<?, ?> any, final Map<Long, PropagationByResource> result) {\n \n         PropagationByResource propByRes = new PropagationByResource();\n         for (ExternalResource resource : group.getResources()) {"},{"sha":"cec3d5bec600f724d916c8306fb6a653a975d629","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -68,7 +68,7 @@ public <T extends PlainAttr<?>> void delete(final Long key, final Class<T> refer\n     @SuppressWarnings(\"unchecked\")\n     public <T extends PlainAttr<?>> void delete(final T plainAttr) {\n         if (plainAttr.getOwner() != null) {\n-            ((Any<T, ?, ?>) plainAttr.getOwner()).remove(plainAttr);\n+            ((Any<T, ?>) plainAttr.getOwner()).remove(plainAttr);\n         }\n \n         entityManager().remove(plainAttr);"},{"sha":"60f37868754af5af88d097142117d5b7a38bebaf","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrValueDAO.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrValue;\n@@ -99,7 +100,11 @@ public <T extends PlainAttrValue> void delete(final Long id, final Class<T> refe\n     @Override\n     public <T extends PlainAttrValue> void delete(final T attrValue) {\n         if (attrValue.getAttr() != null) {\n-            attrValue.getAttr().remove(attrValue);\n+            if (attrValue instanceof PlainAttrUniqueValue) {\n+                attrValue.getAttr().setUniqueValue(null);\n+            } else {\n+                attrValue.getAttr().remove(attrValue);\n+            }\n         }\n \n         entityManager().remove(attrValue);"},{"sha":"2c8b99f7d5b5d586ab12ea45cc1cd19ad9f13494","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirAttrDAO.java","status":"removed","additions":0,"deletions":86,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirAttrDAO.java?ref=ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6","patch":"@@ -1,86 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.dao;\n-\n-import java.util.List;\n-import javax.persistence.TypedQuery;\n-import org.apache.syncope.core.persistence.api.dao.VirAttrDAO;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AVirAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractVirAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAVirAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirAttr;\n-import org.springframework.stereotype.Repository;\n-\n-@Repository\n-public class JPAVirAttrDAO extends AbstractDAO<VirAttr<?>, Long> implements VirAttrDAO {\n-\n-    public <T extends VirAttr<?>> Class<? extends AbstractVirAttr<?>> getJPAEntityReference(\n-            final Class<T> reference) {\n-\n-        return GVirAttr.class.isAssignableFrom(reference)\n-                ? JPAGVirAttr.class\n-                : AVirAttr.class.isAssignableFrom(reference)\n-                        ? JPAAVirAttr.class\n-                        : UVirAttr.class.isAssignableFrom(reference)\n-                                ? JPAUVirAttr.class\n-                                : null;\n-    }\n-\n-    @Override\n-    public <T extends VirAttr<?>> T find(final Long key, final Class<T> reference) {\n-        return reference.cast(entityManager().find(getJPAEntityReference(reference), key));\n-    }\n-\n-    @Override\n-    public <T extends VirAttr<?>> List<T> findAll(final Class<T> reference) {\n-        TypedQuery<T> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + getJPAEntityReference(reference).getSimpleName() + \" e\", reference);\n-        return query.getResultList();\n-    }\n-\n-    @Override\n-    public <T extends VirAttr<?>> T save(final T virAttr) {\n-        return entityManager().merge(virAttr);\n-    }\n-\n-    @Override\n-    public <T extends VirAttr<?>> void delete(final Long key, final Class<T> reference) {\n-        T virAttr = find(key, reference);\n-        if (virAttr == null) {\n-            return;\n-        }\n-\n-        delete(virAttr);\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends VirAttr<?>> void delete(final T virAttr) {\n-        if (virAttr.getOwner() != null) {\n-            ((Any<?, ?, T>) virAttr.getOwner()).remove(virAttr);\n-        }\n-\n-        entityManager().remove(virAttr);\n-    }\n-}"},{"sha":"d4bce14eee802525c44b3f94c0894c9ca5ff467b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java","status":"modified","additions":17,"deletions":18,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -18,17 +18,18 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.util.Collections;\n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n-import org.apache.syncope.core.persistence.api.dao.VirAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n+import org.apache.syncope.core.persistence.api.entity.Attr;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.JPAVirSchema;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -37,9 +38,6 @@\n @Repository\n public class JPAVirSchemaDAO extends AbstractDAO<VirSchema, String> implements VirSchemaDAO {\n \n-    @Autowired\n-    private VirAttrDAO virAttrDAO;\n-\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n@@ -60,6 +58,18 @@ public List<VirSchema> findByAnyTypeClass(final AnyTypeClass anyTypeClass) {\n         return query.getResultList();\n     }\n \n+    @Override\n+    public List<VirSchema> findByProvision(final Provision provision) {\n+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n+                append(JPAVirSchema.class.getSimpleName()).\n+                append(\" e WHERE e.provision=:provision\");\n+\n+        TypedQuery<VirSchema> query = entityManager().createQuery(queryString.toString(), VirSchema.class);\n+        query.setParameter(\"provision\", provision);\n+\n+        return query.getResultList();\n+    }\n+\n     @Override\n     public List<VirSchema> findAll() {\n         TypedQuery<VirSchema> query = entityManager().createQuery(\n@@ -68,15 +78,8 @@ public List<VirSchema> findAll() {\n     }\n \n     @Override\n-    public <T extends VirAttr<?>> List<T> findAttrs(final VirSchema schema, final Class<T> reference) {\n-        final StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n-                append(((JPAVirAttrDAO) virAttrDAO).getJPAEntityReference(reference).getSimpleName()).\n-                append(\" e WHERE e.schema=:schema\");\n-\n-        TypedQuery<T> query = entityManager().createQuery(queryString.toString(), reference);\n-        query.setParameter(\"schema\", schema);\n-\n-        return query.getResultList();\n+    public <T extends Attr<VirSchema, ?>> List<T> findAttrs(final VirSchema schema, final Class<T> reference) {\n+        return Collections.emptyList();\n     }\n \n     @Override\n@@ -95,10 +98,6 @@ public void delete(final String key) {\n         for (AnyTypeKind anyTypeKind : AnyTypeKind.values()) {\n             AnyUtils anyUtils = anyUtilsFactory.getInstance(anyTypeKind);\n \n-            for (VirAttr<?> attr : findAttrs(schema, anyUtils.virAttrClass())) {\n-                virAttrDAO.delete(attr.getKey(), anyUtils.virAttrClass());\n-            }\n-\n             resourceDAO.deleteMapping(key, anyUtils.virIntMappingType());\n         }\n "},{"sha":"041c54f809f4b5b862f9f733e664caeb9876465c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractAny.java","status":"modified","additions":2,"deletions":15,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -39,7 +39,6 @@\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n@@ -49,9 +48,9 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n \n @MappedSuperclass\n-public abstract class AbstractAny<P extends PlainAttr<?>, D extends DerAttr<?>, V extends VirAttr<?>>\n+public abstract class AbstractAny<P extends PlainAttr<?>, D extends DerAttr<?>>\n         extends AbstractAnnotatedEntity<Long>\n-        implements Any<P, D, V> {\n+        implements Any<P, D> {\n \n     private static final long serialVersionUID = -2666540708092702810L;\n \n@@ -127,18 +126,6 @@ public boolean evaluate(final D derAttr) {\n         });\n     }\n \n-    @Override\n-    public V getVirAttr(final String virSchemaName) {\n-        return CollectionUtils.find(getVirAttrs(), new Predicate<V>() {\n-\n-            @Override\n-            public boolean evaluate(final V virAttr) {\n-                return virAttr != null && virAttr.getSchema() != null\n-                        && virSchemaName.equals(virAttr.getSchema().getKey());\n-            }\n-        });\n-    }\n-\n     protected abstract List<JPAExternalResource> internalGetResources();\n \n     @Override"},{"sha":"694b18f47bfbbbe8ec5aad5a0c8536a336b76302","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractAttr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttr.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.core.persistence.api.entity.Schema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n \n-public abstract class AbstractAttr<S extends Schema, O extends Any<?, ?, ?>>\n+public abstract class AbstractAttr<S extends Schema, O extends Any<?, ?>>\n         extends AbstractEntity<Long> implements Attr<S, O> {\n \n     private static final long serialVersionUID = -7722134717360731874L;"},{"sha":"59f390dfc8edf38f1b01f490252f7baec253f801","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractDerAttr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttr.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n \n @MappedSuperclass\n-public abstract class AbstractDerAttr<O extends Any<?, ?, ?>>\n+public abstract class AbstractDerAttr<O extends Any<?, ?>>\n         extends AbstractAttr<DerSchema, O> implements DerAttr<O> {\n \n     private static final long serialVersionUID = 4740924251090424771L;"},{"sha":"c7110d51d0f456643940c06db6669184893cbce8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractDynMembership.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDynMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDynMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDynMembership.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -24,7 +24,7 @@\n import org.apache.syncope.core.persistence.api.entity.DynMembership;\n \n @MappedSuperclass\n-public abstract class AbstractDynMembership<A extends Any<?, ?, ?>>\n+public abstract class AbstractDynMembership<A extends Any<?, ?>>\n         extends AbstractEntity<Long> implements DynMembership<A> {\n \n     private static final long serialVersionUID = 921821654690948787L;"},{"sha":"fdd257ed615dec461c3ec0c4bbedd9585d25c84c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -37,7 +37,7 @@\n \n @MappedSuperclass\n @PlainAttrCheck\n-public abstract class AbstractPlainAttr<O extends Any<?, ?, ?>>\n+public abstract class AbstractPlainAttr<O extends Any<?, ?>>\n         extends AbstractAttr<PlainSchema, O> implements PlainAttr<O> {\n \n     private static final long serialVersionUID = -9115431608821806124L;"},{"sha":"7032df66eece44fc03297dd5c38daff7b68ad080","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttrValue.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -32,11 +32,11 @@\n import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n import org.apache.commons.lang3.builder.ToStringStyle;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.core.misc.FormatUtils;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.misc.DataFormat;\n import org.apache.syncope.core.persistence.jpa.validation.entity.PlainAttrValueCheck;\n import org.apache.syncope.core.misc.security.Encryptor;\n \n@@ -153,7 +153,7 @@ public void parseValue(final PlainSchema schema, final String value) {\n                 try {\n                     this.setLongValue(schema.getConversionPattern() == null\n                             ? Long.valueOf(value)\n-                            : DataFormat.parseNumber(value, schema.getConversionPattern()).longValue());\n+                            : FormatUtils.parseNumber(value, schema.getConversionPattern()).longValue());\n                 } catch (Exception pe) {\n                     exception = pe;\n                 }\n@@ -163,7 +163,7 @@ public void parseValue(final PlainSchema schema, final String value) {\n                 try {\n                     this.setDoubleValue(schema.getConversionPattern() == null\n                             ? Double.valueOf(value)\n-                            : DataFormat.parseNumber(value, schema.getConversionPattern()).doubleValue());\n+                            : FormatUtils.parseNumber(value, schema.getConversionPattern()).doubleValue());\n                 } catch (Exception pe) {\n                     exception = pe;\n                 }\n@@ -172,8 +172,8 @@ public void parseValue(final PlainSchema schema, final String value) {\n             case Date:\n                 try {\n                     this.setDateValue(schema.getConversionPattern() == null\n-                            ? DataFormat.parseDate(value)\n-                            : new Date(DataFormat.parseDate(value, schema.getConversionPattern()).getTime()));\n+                            ? FormatUtils.parseDate(value)\n+                            : new Date(FormatUtils.parseDate(value, schema.getConversionPattern()).getTime()));\n                 } catch (Exception pe) {\n                     exception = pe;\n                 }\n@@ -246,21 +246,21 @@ public String getValueAsString(final AttrSchemaType type) {\n                 result = getAttr() == null || getAttr().getSchema() == null\n                         || getAttr().getSchema().getConversionPattern() == null\n                                 ? getLongValue().toString()\n-                                : DataFormat.format(getLongValue(), getAttr().getSchema().getConversionPattern());\n+                                : FormatUtils.format(getLongValue(), getAttr().getSchema().getConversionPattern());\n                 break;\n \n             case Double:\n                 result = getAttr() == null || getAttr().getSchema() == null\n                         || getAttr().getSchema().getConversionPattern() == null\n                                 ? getDoubleValue().toString()\n-                                : DataFormat.format(getDoubleValue(), getAttr().getSchema().getConversionPattern());\n+                                : FormatUtils.format(getDoubleValue(), getAttr().getSchema().getConversionPattern());\n                 break;\n \n             case Date:\n                 result = getAttr() == null || getAttr().getSchema() == null\n                         || getAttr().getSchema().getConversionPattern() == null\n-                                ? DataFormat.format(getDateValue())\n-                                : DataFormat.format(getDateValue(), false, getAttr().getSchema().\n+                                ? FormatUtils.format(getDateValue())\n+                                : FormatUtils.format(getDateValue(), false, getAttr().getSchema().\n                                         getConversionPattern());\n                 break;\n "},{"sha":"aebc8da60eca8ee2b08b1e159b7661d7d4f07fd7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractVirAttr.java","status":"removed","additions":0,"deletions":71,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirAttr.java?ref=ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6","patch":"@@ -1,71 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.persistence.Column;\n-import javax.persistence.FetchType;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.MappedSuperclass;\n-import javax.persistence.Transient;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-\n-@MappedSuperclass\n-public abstract class AbstractVirAttr<O extends Any<?, ?, ?>>\n-        extends AbstractAttr<VirSchema, O> implements VirAttr<O> {\n-\n-    private static final long serialVersionUID = 5023204776925954907L;\n-\n-    @Transient\n-    protected List<String> values = new ArrayList<>();\n-\n-    @ManyToOne(fetch = FetchType.EAGER)\n-    @Column(name = \"schema_name\")\n-    private JPAVirSchema schema;\n-\n-    @Override\n-    public List<String> getValues() {\n-        return values;\n-    }\n-\n-    @Override\n-    public boolean add(final String value) {\n-        return !values.contains(value) && values.add(value);\n-    }\n-\n-    @Override\n-    public boolean remove(final String value) {\n-        return values.remove(value);\n-    }\n-\n-    @Override\n-    public VirSchema getSchema() {\n-        return schema;\n-    }\n-\n-    @Override\n-    public void setSchema(final VirSchema schema) {\n-        checkType(schema, JPAVirSchema.class);\n-        this.schema = (JPAVirSchema) schema;\n-        checkSchema(this.schema);\n-    }\n-}"},{"sha":"c63a4019c6b492548b83eae901d050298c757b8c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AnnotatedEntityListener.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnnotatedEntityListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnnotatedEntityListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnnotatedEntityListener.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -33,10 +33,10 @@ public class AnnotatedEntityListener {\n     @PrePersist\n     @PreUpdate\n     public void setSysInfo(final AnnotatedEntity<?> entity) {\n-        final String username = AuthContextUtils.getUsername();\n+        String username = AuthContextUtils.getUsername();\n         LOG.debug(\"Set system properties for '{}'\", entity);\n \n-        final Date now = new Date();\n+        Date now = new Date();\n \n         if (entity.getCreationDate() == null) {\n             LOG.debug(\"Set creation date '{}' and creator '{}' for '{}'\", now, username, entity);"},{"sha":"7de2fbe7fc7532a0df7c1677ffdd2187867e0eb4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java","status":"modified","additions":1,"deletions":51,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -29,24 +29,20 @@\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADerAttr;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrValue;\n-import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAVirAttr;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGDerAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrValue;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDerAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrValue;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n \n @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n@@ -64,7 +60,7 @@ public AnyTypeKind getAnyTypeKind() {\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> Class<T> anyClass() {\n+    public <T extends Any<?, ?>> Class<T> anyClass() {\n         Class result;\n \n         switch (anyTypeKind) {\n@@ -265,52 +261,6 @@ public <T extends DerAttr<?>> T newDerAttr() {\n         return result;\n     }\n \n-    @Override\n-    public <T extends VirAttr<?>> Class<T> virAttrClass() {\n-        Class result = null;\n-\n-        switch (anyTypeKind) {\n-            case USER:\n-                result = JPAUVirAttr.class;\n-                break;\n-\n-            case GROUP:\n-                result = JPAGVirAttr.class;\n-                break;\n-\n-            case ANY_OBJECT:\n-                result = JPAAVirAttr.class;\n-                break;\n-\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends VirAttr<?>> T newVirAttr() {\n-        T result = null;\n-\n-        switch (anyTypeKind) {\n-            case USER:\n-                result = (T) new JPAUVirAttr();\n-                break;\n-\n-            case GROUP:\n-                result = (T) new JPAGVirAttr();\n-                break;\n-\n-            case ANY_OBJECT:\n-                result = (T) new JPAAVirAttr();\n-                break;\n-\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n     @Override\n     public IntMappingType plainIntMappingType() {\n         IntMappingType result = null;"},{"sha":"38e08b4c651323176ed79ae0a592344e75ad8281","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtilsFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtilsFactory.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -41,7 +41,7 @@ public AnyUtils getInstance(final String anyTypeKind) {\n     }\n \n     @Override\n-    public AnyUtils getInstance(final Any<?, ?, ?> any) {\n+    public AnyUtils getInstance(final Any<?, ?> any) {\n         AnyTypeKind type = null;\n         if (any instanceof User) {\n             type = AnyTypeKind.USER;"},{"sha":"372e06256fd8f5607f1219c497adafb42d3a3d0a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -64,7 +64,6 @@\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirAttr;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n@@ -85,7 +84,6 @@\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n-import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership;\n@@ -102,7 +100,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrValue;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMapping;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMappingItem;\n@@ -122,7 +119,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.springframework.stereotype.Component;\n \n@@ -202,8 +198,6 @@ public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n             result = (T) new JPAUDerAttr();\n         } else if (reference.equals(VirSchema.class)) {\n             result = (T) new JPAVirSchema();\n-        } else if (reference.equals(UVirAttr.class)) {\n-            result = (T) new JPAUVirAttr();\n         } else if (reference.equals(Mapping.class)) {\n             result = (T) new JPAMapping();\n         } else if (reference.equals(MappingItem.class)) {\n@@ -216,8 +210,6 @@ public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n             result = (T) new JPAGPlainAttrUniqueValue();\n         } else if (reference.equals(GDerAttr.class)) {\n             result = (T) new JPAGDerAttr();\n-        } else if (reference.equals(GVirAttr.class)) {\n-            result = (T) new JPAGVirAttr();\n         } else if (reference.equals(CPlainAttr.class)) {\n             result = (T) new JPACPlainAttr();\n         } else if (reference.equals(CPlainAttrValue.class)) {"},{"sha":"b984bb37183683600ee7e683fd3e231385e29feb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAVirSchema.java","status":"modified","additions":147,"deletions":0,"changes":147,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -18,18 +18,28 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n+import java.util.Collections;\n+import java.util.List;\n import javax.persistence.Basic;\n import javax.persistence.Cacheable;\n+import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n import org.apache.syncope.core.persistence.jpa.validation.entity.SchemaNameCheck;\n \n @Entity\n@@ -53,6 +63,13 @@ public class JPAVirSchema extends AbstractEntity<String> implements VirSchema {\n     @Max(1)\n     private Integer readonly;\n \n+    @Column(nullable = false)\n+    @ManyToOne\n+    private JPAProvision provision;\n+\n+    @Column(nullable = false)\n+    private String extAttrName;\n+\n     public JPAVirSchema() {\n         super();\n \n@@ -109,4 +126,134 @@ public boolean isReadonly() {\n     public void setReadonly(final boolean readonly) {\n         this.readonly = getBooleanAsInteger(readonly);\n     }\n+\n+    @Override\n+    public Provision getProvision() {\n+        return provision;\n+    }\n+\n+    @Override\n+    public void setProvision(final Provision provision) {\n+        checkType(provision, JPAProvision.class);\n+        this.provision = (JPAProvision) provision;\n+    }\n+\n+    @Override\n+    public String getExtAttrName() {\n+        return extAttrName;\n+    }\n+\n+    @Override\n+    public void setExtAttrName(final String extAttrName) {\n+        this.extAttrName = extAttrName;\n+    }\n+\n+    @Override\n+    public MappingItem asLinkingMappingItem() {\n+        return new MappingItem() {\n+\n+            private static final long serialVersionUID = 327455459536715529L;\n+\n+            @Override\n+            public Long getKey() {\n+                return -1L;\n+            }\n+\n+            @Override\n+            public Mapping getMapping() {\n+                return getProvision().getMapping();\n+            }\n+\n+            @Override\n+            public void setMapping(final Mapping mapping) {\n+                // RO instance, nothing to do\n+            }\n+\n+            @Override\n+            public String getExtAttrName() {\n+                return JPAVirSchema.this.getExtAttrName();\n+            }\n+\n+            @Override\n+            public void setExtAttrName(final String extAttrName) {\n+                // RO instance, nothing to do\n+            }\n+\n+            @Override\n+            public String getIntAttrName() {\n+                return JPAVirSchema.this.getKey();\n+            }\n+\n+            @Override\n+            public void setIntAttrName(final String intAttrName) {\n+                // RO instance, nothing to do\n+            }\n+\n+            @Override\n+            public IntMappingType getIntMappingType() {\n+                switch (getProvision().getAnyType().getKind()) {\n+                    case ANY_OBJECT:\n+                        return IntMappingType.AnyObjectVirtualSchema;\n+\n+                    case GROUP:\n+                        return IntMappingType.GroupVirtualSchema;\n+\n+                    case USER:\n+                    default:\n+                        return IntMappingType.UserVirtualSchema;\n+                }\n+            }\n+\n+            @Override\n+            public void setIntMappingType(final IntMappingType intMappingType) {\n+                // RO instance, nothing to do\n+            }\n+\n+            @Override\n+            public String getMandatoryCondition() {\n+                return JPAVirSchema.this.getMandatoryCondition();\n+            }\n+\n+            @Override\n+            public void setMandatoryCondition(final String condition) {\n+                // RO instance, nothing to do\n+            }\n+\n+            @Override\n+            public MappingPurpose getPurpose() {\n+                return JPAVirSchema.this.isReadonly() ? MappingPurpose.SYNCHRONIZATION : MappingPurpose.BOTH;\n+            }\n+\n+            @Override\n+            public void setPurpose(final MappingPurpose purpose) {\n+                // RO instance, nothing to do\n+            }\n+\n+            @Override\n+            public boolean isConnObjectKey() {\n+                return false;\n+            }\n+\n+            @Override\n+            public void setConnObjectKey(final boolean connObjectKey) {\n+                // RO instance, nothing to do\n+            }\n+\n+            @Override\n+            public boolean isPassword() {\n+                return false;\n+            }\n+\n+            @Override\n+            public void setPassword(final boolean password) {\n+                // RO instance, nothing to do\n+            }\n+\n+            @Override\n+            public List<String> getMappingItemTransformerClassNames() {\n+                return Collections.emptyList();\n+            }\n+        };\n+    }\n+\n }"},{"sha":"01be6a880710bab93819dfede03ccc866e5d4dbc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAPlainAttrUniqueValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttrUniqueValue.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -60,7 +60,7 @@ public APlainAttr getAttr() {\n     }\n \n     @Override\n-    public void setAttr(final PlainAttr attr) {\n+    public void setAttr(final PlainAttr<?> attr) {\n         checkType(attr, JPAAPlainAttr.class);\n         this.attribute = (JPAAPlainAttr) attr;\n     }"},{"sha":"0c9e598035e7e23231005f86c609c84f4c29bbe5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAPlainAttrValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttrValue.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -57,7 +57,7 @@ public APlainAttr getAttr() {\n     }\n \n     @Override\n-    public void setAttr(final PlainAttr attr) {\n+    public void setAttr(final PlainAttr<?> attr) {\n         checkType(attr, JPAAPlainAttr.class);\n         this.attribute = (JPAAPlainAttr) attr;\n     }"},{"sha":"62e2ea5f933773e3ac88f2e33be0445840e6a1b0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAVirAttr.java","status":"removed","additions":0,"deletions":59,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAVirAttr.java?ref=ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6","patch":"@@ -1,59 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AVirAttr;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractVirAttr;\n-\n-@Entity\n-@Table(name = JPAAVirAttr.TABLE)\n-public class JPAAVirAttr extends AbstractVirAttr<AnyObject> implements AVirAttr {\n-\n-    private static final long serialVersionUID = -4935990254545760827L;\n-\n-    public static final String TABLE = \"AVirAttr\";\n-\n-    @Id\n-    private Long id;\n-\n-    @ManyToOne\n-    private JPAAnyObject owner;\n-\n-    @Override\n-    public Long getKey() {\n-        return id;\n-    }\n-\n-    @Override\n-    public AnyObject getOwner() {\n-        return owner;\n-    }\n-\n-    @Override\n-    public void setOwner(final AnyObject owner) {\n-        checkType(owner, JPAAnyObject.class);\n-        this.owner = (JPAAnyObject) owner;\n-    }\n-\n-}"},{"sha":"9d6973588b308cd228ac69b0e895871ea6832f84","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java","status":"modified","additions":1,"deletions":23,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -42,7 +42,6 @@\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AVirAttr;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractAny;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n@@ -52,7 +51,7 @@\n @Entity\n @Table(name = JPAAnyObject.TABLE)\n @Cacheable\n-public class JPAAnyObject extends AbstractAny<APlainAttr, ADerAttr, AVirAttr> implements AnyObject {\n+public class JPAAnyObject extends AbstractAny<APlainAttr, ADerAttr> implements AnyObject {\n \n     private static final long serialVersionUID = 9063766472970643492L;\n \n@@ -72,10 +71,6 @@ public class JPAAnyObject extends AbstractAny<APlainAttr, ADerAttr, AVirAttr> im\n     @Valid\n     private List<JPAADerAttr> derAttrs = new ArrayList<>();\n \n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n-    @Valid\n-    private List<JPAAVirAttr> virAttrs = new ArrayList<>();\n-\n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"anyObject_id\"),\n@@ -148,23 +143,6 @@ public List<? extends ADerAttr> getDerAttrs() {\n         return derAttrs;\n     }\n \n-    @Override\n-    public boolean add(final AVirAttr attr) {\n-        checkType(attr, JPAAVirAttr.class);\n-        return virAttrs.add((JPAAVirAttr) attr);\n-    }\n-\n-    @Override\n-    public boolean remove(final AVirAttr attr) {\n-        checkType(attr, JPAAVirAttr.class);\n-        return virAttrs.remove((JPAAVirAttr) attr);\n-    }\n-\n-    @Override\n-    public List<? extends AVirAttr> getVirAttrs() {\n-        return virAttrs;\n-    }\n-\n     @Override\n     protected List<JPAExternalResource> internalGetResources() {\n         return resources;"},{"sha":"fea5af40f22dc4a6fd9473ff03b9550e330ee0fd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPACPlainAttrUniqueValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrUniqueValue.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -60,7 +60,7 @@ public CPlainAttr getAttr() {\n     }\n \n     @Override\n-    public void setAttr(final PlainAttr attr) {\n+    public void setAttr(final PlainAttr<?> attr) {\n         checkType(attr, JPACPlainAttr.class);\n         this.attribute = (JPACPlainAttr) attr;\n     }"},{"sha":"5b7d2b332c334f0e7fe9cff2f759b20267a6c4b8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPACPlainAttrValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrValue.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -57,7 +57,7 @@ public CPlainAttr getAttr() {\n     }\n \n     @Override\n-    public void setAttr(final PlainAttr attr) {\n+    public void setAttr(final PlainAttr<?> attr) {\n         checkType(attr, JPACPlainAttr.class);\n         this.attribute = (JPACPlainAttr) attr;\n     }"},{"sha":"ac5616adcc491fcf88e249dc9c77126a51c5cd0e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPAConf.java","status":"modified","additions":0,"deletions":21,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -37,7 +37,6 @@\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n@@ -119,26 +118,6 @@ public List<? extends DerAttr<?>> getDerAttrs() {\n         return Collections.emptyList();\n     }\n \n-    @Override\n-    public boolean add(final VirAttr<?> attr) {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean remove(final VirAttr<?> virAttr) {\n-        return false;\n-    }\n-\n-    @Override\n-    public VirAttr<?> getVirAttr(final String virSchemaName) {\n-        return null;\n-    }\n-\n-    @Override\n-    public List<? extends VirAttr<?>> getVirAttrs() {\n-        return Collections.emptyList();\n-    }\n-\n     @Override\n     public boolean add(final ExternalResource resource) {\n         return false;"},{"sha":"a5c1b9071093bd98560f87f113682415232939c1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGPlainAttrUniqueValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttrUniqueValue.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -60,7 +60,7 @@ public GPlainAttr getAttr() {\n     }\n \n     @Override\n-    public void setAttr(final PlainAttr attr) {\n+    public void setAttr(final PlainAttr<?> attr) {\n         checkType(attr, JPAGPlainAttr.class);\n         this.attribute = (JPAGPlainAttr) attr;\n     }"},{"sha":"e5d0830d3732c9f5dcaea86638557ed60cc83707","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGPlainAttrValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttrValue.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -57,7 +57,7 @@ public GPlainAttr getAttr() {\n     }\n \n     @Override\n-    public void setAttr(final PlainAttr attr) {\n+    public void setAttr(final PlainAttr<?> attr) {\n         checkType(attr, JPAGPlainAttr.class);\n         this.attribute = (JPAGPlainAttr) attr;\n     }"},{"sha":"47b8886b3bcdf8353d8eec099288b4b4798e5e6d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGVirAttr.java","status":"removed","additions":0,"deletions":59,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGVirAttr.java?ref=ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6","patch":"@@ -1,59 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.group;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractVirAttr;\n-\n-@Entity\n-@Table(name = JPAGVirAttr.TABLE)\n-public class JPAGVirAttr extends AbstractVirAttr<Group> implements GVirAttr {\n-\n-    private static final long serialVersionUID = -1747430556914428649L;\n-\n-    public static final String TABLE = \"GVirAttr\";\n-\n-    @Id\n-    private Long id;\n-\n-    @ManyToOne\n-    private JPAGroup owner;\n-\n-    @Override\n-    public Long getKey() {\n-        return id;\n-    }\n-\n-    @Override\n-    public Group getOwner() {\n-        return owner;\n-    }\n-\n-    @Override\n-    public void setOwner(final Group owner) {\n-        checkType(owner, JPAGroup.class);\n-        this.owner = (JPAGroup) owner;\n-    }\n-\n-}"},{"sha":"2fb84b59a61bfda80e8449f3c61521c61ad68922","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java","status":"modified","additions":1,"deletions":23,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -44,7 +44,6 @@\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.group.GDerAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirAttr;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n@@ -61,7 +60,7 @@\n @Table(name = JPAGroup.TABLE)\n @Cacheable\n @GroupCheck\n-public class JPAGroup extends AbstractAny<GPlainAttr, GDerAttr, GVirAttr> implements Group {\n+public class JPAGroup extends AbstractAny<GPlainAttr, GDerAttr> implements Group {\n \n     private static final long serialVersionUID = -5281258853142421875L;\n \n@@ -88,10 +87,6 @@ public class JPAGroup extends AbstractAny<GPlainAttr, GDerAttr, GVirAttr> implem\n     @Valid\n     private List<JPAGDerAttr> derAttrs = new ArrayList<>();\n \n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n-    @Valid\n-    private List<JPAGVirAttr> virAttrs = new ArrayList<>();\n-\n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"group_id\"),\n@@ -204,23 +199,6 @@ public List<? extends GDerAttr> getDerAttrs() {\n         return derAttrs;\n     }\n \n-    @Override\n-    public boolean add(final GVirAttr attr) {\n-        checkType(attr, JPAGVirAttr.class);\n-        return virAttrs.add((JPAGVirAttr) attr);\n-    }\n-\n-    @Override\n-    public boolean remove(final GVirAttr attr) {\n-        checkType(attr, JPAGVirAttr.class);\n-        return virAttrs.remove((JPAGVirAttr) attr);\n-    }\n-\n-    @Override\n-    public List<? extends GVirAttr> getVirAttrs() {\n-        return virAttrs;\n-    }\n-\n     @Override\n     public ADynGroupMembership getADynMembership() {\n         return aDynMembership;"},{"sha":"2d7af3cb5bc0ba597ff8f5bd936c147cf2a398be","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAMapping.java","status":"modified","additions":13,"deletions":14,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -22,6 +22,7 @@\n import java.util.List;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n@@ -48,12 +49,10 @@ public class JPAMapping extends AbstractEntity<Long> implements Mapping {\n     @Id\n     private Long id;\n \n+    @Column(nullable = false)\n     @OneToOne\n     private JPAProvision provision;\n \n-    /**\n-     * Attribute mappings.\n-     */\n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"mapping\")\n     private List<JPAMappingItem> items = new ArrayList<>();\n \n@@ -78,17 +77,6 @@ public void setProvision(final Provision provision) {\n         this.provision = (JPAProvision) provision;\n     }\n \n-    @Override\n-    public void setConnObjectKeyItem(final MappingItem item) {\n-        checkType(item, JPAMappingItem.class);\n-        this.addConnObjectKeyItem((JPAMappingItem) item);\n-    }\n-\n-    @Override\n-    public List<? extends MappingItem> getItems() {\n-        return items;\n-    }\n-\n     @Override\n     public boolean add(final MappingItem item) {\n         checkType(item, JPAMappingItem.class);\n@@ -101,6 +89,11 @@ public boolean remove(final MappingItem item) {\n         return items.remove((JPAMappingItem) item);\n     }\n \n+    @Override\n+    public List<? extends MappingItem> getItems() {\n+        return items;\n+    }\n+\n     @Override\n     public MappingItem getConnObjectKeyItem() {\n         return CollectionUtils.find(getItems(), new Predicate<MappingItem>() {\n@@ -112,6 +105,12 @@ public boolean evaluate(final MappingItem item) {\n         });\n     }\n \n+    @Override\n+    public void setConnObjectKeyItem(final MappingItem item) {\n+        checkType(item, JPAMappingItem.class);\n+        this.addConnObjectKeyItem((JPAMappingItem) item);\n+    }\n+\n     protected boolean addConnObjectKeyItem(final MappingItem connObjectKeyItem) {\n         if (IntMappingType.UserVirtualSchema == connObjectKeyItem.getIntMappingType()\n                 || IntMappingType.GroupVirtualSchema == connObjectKeyItem.getIntMappingType()"},{"sha":"3906dfd246852bacc27f3afa3dd1c4af8eda3c34","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAProvision.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -131,5 +131,4 @@ public void setMapping(final Mapping mapping) {\n         checkType(mapping, JPAMapping.class);\n         this.mapping = (JPAMapping) mapping;\n     }\n-\n }"},{"sha":"9882752c86071acfc299c188fba4315f418a8bef","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPropagationTask.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -75,6 +75,8 @@ public class JPAPropagationTask extends AbstractTask implements PropagationTask\n     @Enumerated(EnumType.STRING)\n     private AnyTypeKind anyTypeKind;\n \n+    private String anyType;\n+\n     private Long anyKey;\n \n     public JPAPropagationTask() {\n@@ -166,6 +168,16 @@ public void setAnyTypeKind(final AnyTypeKind anyTypeKind) {\n         this.anyTypeKind = anyTypeKind;\n     }\n \n+    @Override\n+    public String getAnyType() {\n+        return anyType;\n+    }\n+\n+    @Override\n+    public void setAnyType(final String anyType) {\n+        this.anyType = anyType;\n+    }\n+\n     @Override\n     public Long getAnyKey() {\n         return anyKey;"},{"sha":"86dfdfa9471a64b7296dd021e9ffabadf24e7525","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUPlainAttrUniqueValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrUniqueValue.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -60,7 +60,7 @@ public UPlainAttr getAttr() {\n     }\n \n     @Override\n-    public void setAttr(final PlainAttr attr) {\n+    public void setAttr(final PlainAttr<?> attr) {\n         checkType(attr, JPAUPlainAttr.class);\n         this.attribute = (JPAUPlainAttr) attr;\n     }"},{"sha":"2eca97cece2b42d72b1a4ff4b649539eca695eb3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUPlainAttrValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrValue.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -57,7 +57,7 @@ public UPlainAttr getAttr() {\n     }\n \n     @Override\n-    public void setAttr(final PlainAttr attr) {\n+    public void setAttr(final PlainAttr<?> attr) {\n         checkType(attr, JPAUPlainAttr.class);\n         this.attribute = (JPAUPlainAttr) attr;\n     }"},{"sha":"a6931cef98b1ee23743cfbd1c1384427f79579d2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUVirAttr.java","status":"removed","additions":0,"deletions":59,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUVirAttr.java?ref=ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6","patch":"@@ -1,59 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.user;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractVirAttr;\n-\n-@Entity\n-@Table(name = JPAUVirAttr.TABLE)\n-public class JPAUVirAttr extends AbstractVirAttr<User> implements UVirAttr {\n-\n-    private static final long serialVersionUID = 2943450934283989741L;\n-\n-    public static final String TABLE = \"UVirAttr\";\n-\n-    @Id\n-    private Long id;\n-\n-    @ManyToOne\n-    private JPAUser owner;\n-\n-    @Override\n-    public Long getKey() {\n-        return id;\n-    }\n-\n-    @Override\n-    public User getOwner() {\n-        return owner;\n-    }\n-\n-    @Override\n-    public void setOwner(final User owner) {\n-        checkType(owner, JPAUser.class);\n-        this.owner = (JPAUser) owner;\n-    }\n-\n-}"},{"sha":"9ba4fea3b485e870b741ddb4e9e60a16f641d2d1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":1,"deletions":23,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -54,7 +54,6 @@\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n import org.apache.syncope.core.persistence.api.entity.user.UDerAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.JPASecurityQuestion;\n@@ -75,7 +74,7 @@\n @Entity\n @Table(name = JPAUser.TABLE)\n @Cacheable\n-public class JPAUser extends AbstractAny<UPlainAttr, UDerAttr, UVirAttr> implements User {\n+public class JPAUser extends AbstractAny<UPlainAttr, UDerAttr> implements User {\n \n     private static final long serialVersionUID = -3905046855521446823L;\n \n@@ -105,10 +104,6 @@ public class JPAUser extends AbstractAny<UPlainAttr, UDerAttr, UVirAttr> impleme\n     @Valid\n     private List<JPAUDerAttr> derAttrs = new ArrayList<>();\n \n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n-    @Valid\n-    private List<JPAUVirAttr> virAttrs = new ArrayList<>();\n-\n     private String workflowId;\n \n     @Column(nullable = true)\n@@ -321,23 +316,6 @@ public List<? extends UDerAttr> getDerAttrs() {\n         return derAttrs;\n     }\n \n-    @Override\n-    public boolean add(final UVirAttr attr) {\n-        checkType(attr, JPAUVirAttr.class);\n-        return virAttrs.add((JPAUVirAttr) attr);\n-    }\n-\n-    @Override\n-    public boolean remove(final UVirAttr attr) {\n-        checkType(attr, JPAUVirAttr.class);\n-        return virAttrs.remove((JPAUVirAttr) attr);\n-    }\n-\n-    @Override\n-    public List<? extends UVirAttr> getVirAttrs() {\n-        return virAttrs;\n-    }\n-\n     @Override\n     public String getWorkflowId() {\n         return workflowId;"},{"sha":"e7f3a850c3c8ca56c0fdd476ff0423125ecbd700","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ExternalResourceValidator.java","status":"modified","additions":42,"deletions":3,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -25,7 +25,12 @@\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n@@ -39,28 +44,62 @@ public class ExternalResourceValidator extends AbstractValidator<ExternalResourc\n     private boolean isValid(final MappingItem item, final ConstraintValidatorContext context) {\n         if (StringUtils.isBlank(item.getExtAttrName())) {\n             context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidMapping, item + \".extAttrName is null\")).\n+                    getTemplate(EntityViolationType.InvalidMapping, item + \" - extAttrName is null\")).\n                     addPropertyNode(\"extAttrName\").addConstraintViolation();\n \n             return false;\n         }\n \n         if (StringUtils.isBlank(item.getIntAttrName())) {\n             context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidMapping, item + \".intAttrName is null\")).\n+                    getTemplate(EntityViolationType.InvalidMapping, item + \" - intAttrName is null\")).\n                     addPropertyNode(\"intAttrName\").addConstraintViolation();\n \n             return false;\n         }\n \n         if (item.getPurpose() == null) {\n             context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidMapping, item + \".purpose is null\")).\n+                    getTemplate(EntityViolationType.InvalidMapping, item + \" - purpose is null\")).\n                     addPropertyNode(\"purpose\").addConstraintViolation();\n \n             return false;\n         }\n \n+        if (item.getIntMappingType() == IntMappingType.AnyObjectVirtualSchema\n+                || item.getIntMappingType() == IntMappingType.GroupVirtualSchema\n+                || item.getIntMappingType() == IntMappingType.UserVirtualSchema) {\n+\n+            if (item.getPurpose() != MappingPurpose.PROPAGATION) {\n+                context.buildConstraintViolationWithTemplate(\n+                        getTemplate(EntityViolationType.InvalidMapping,\n+                                \" - only \" + MappingPurpose.PROPAGATION.name() + \" allowed for virtual\")).\n+                        addPropertyNode(\"purpose\").addConstraintViolation();\n+\n+                return false;\n+            }\n+\n+            if (item.getMapping() == null) {\n+                context.buildConstraintViolationWithTemplate(\n+                        getTemplate(EntityViolationType.InvalidMapping,\n+                                \" - need to explicitly set mapping for further checks\")).\n+                        addPropertyNode(\"mapping\").addConstraintViolation();\n+\n+                return false;\n+            }\n+\n+            VirSchema schema = ApplicationContextProvider.getBeanFactory().getBean(VirSchemaDAO.class).\n+                    find(item.getIntAttrName());\n+            if (schema != null && schema.getProvision().equals(item.getMapping().getProvision())) {\n+                context.buildConstraintViolationWithTemplate(\n+                        getTemplate(EntityViolationType.InvalidMapping,\n+                                \" - no need to map virtual schema on linking resource\")).\n+                        addPropertyNode(\"intAttrName\").addConstraintViolation();\n+\n+                return false;\n+            }\n+        }\n+\n         return true;\n     }\n "},{"sha":"2613a2290e0b19dd51a9ef938d57efc648e9a99a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PlainAttrCheck.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrCheck.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -33,7 +33,7 @@\n @Documented\n public @interface PlainAttrCheck {\n \n-    String message() default \"{org.apache.syncope.syncope.validation.attr}\";\n+    String message() default \"{org.apache.syncope.core.persistence.validation.attr}\";\n \n     Class<?>[] groups() default {};\n "},{"sha":"f2c3c86bf83ef1cc199da2ae7af8784e625abbab","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PlainAttrValidator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValidator.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -43,7 +43,7 @@ public boolean isValid(final PlainAttr object, final ConstraintValidatorContext\n \n             if (!isValid) {\n                 LOG.error(\"Invalid values for attribute \" + object + \": \" + \"schema=\" + object.getSchema().getKey()\n-                        + \", \" + \"values={}\", object.getValuesAsStrings());\n+                        + \", values={}\", object.getValuesAsStrings());\n \n                 context.disableDefaultConstraintViolation();\n "},{"sha":"5ddee8cd18eead1743ea753bc8a75daad6e0f72c","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml","status":"modified","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -337,31 +337,6 @@ under the License.\n     </attributes>\n   </entity>\n \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAVirAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_AVirAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_AVirAttr\" pk-column-value=\"SEQ_AVirAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_UVirAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_UVirAttr\" pk-column-value=\"SEQ_UVirAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_GVirAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_GVirAttr\" pk-column-value=\"SEQ_GVirAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-\n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAAnyTemplateRealm\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"5ddee8cd18eead1743ea753bc8a75daad6e0f72c","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml","status":"modified","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -337,31 +337,6 @@ under the License.\n     </attributes>\n   </entity>\n \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAVirAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_AVirAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_AVirAttr\" pk-column-value=\"SEQ_AVirAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_UVirAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_UVirAttr\" pk-column-value=\"SEQ_UVirAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_GVirAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_GVirAttr\" pk-column-value=\"SEQ_GVirAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-\n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAAnyTemplateRealm\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"f4f2b07ca3a3bb23eb9dab9d71e403b289754ec5","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml","status":"modified","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -384,31 +384,6 @@ under the License.\n       </id>\n     </attributes>\n   </entity>\n-\n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAVirAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_AVirAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_AVirAttr\" pk-column-value=\"SEQ_AVirAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_UVirAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_UVirAttr\" pk-column-value=\"SEQ_UVirAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_GVirAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_GVirAttr\" pk-column-value=\"SEQ_GVirAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n   \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAAnyTemplateRealm\">\n     <attributes>"},{"sha":"a2d4c62c706dd0280edc2825612cfe130e738b1b","filename":"core/persistence-jpa/src/main/resources/indexes.xml","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -68,9 +68,5 @@ under the License.\n   <entry key=\"GDerAttr_owner_id_index\">CREATE INDEX GDerAttr_owner_id_index on GDerAttr(owner_id)</entry>\n   <entry key=\"ADerAttr_owner_id_index\">CREATE INDEX ADerAttr_owner_id_index on ADerAttr(owner_id)</entry>\n \n-  <entry key=\"UVirAttr_owner_id_index\">CREATE INDEX UVirAttr_owner_id_index on UVirAttr(owner_id)</entry>\n-  <entry key=\"GVirAttr_owner_id_index\">CREATE INDEX GVirAttr_owner_id_index on GVirAttr(owner_id)</entry>\n-  <entry key=\"AVirAttr_owner_id_index\">CREATE INDEX AVirAttr_owner_id_index on AVirAttr(owner_id)</entry>\n-\n   <entry key=\"Task_executedIndex\">CREATE INDEX Task_executedIndex ON Task(executed)</entry>\n </properties>"},{"sha":"3cea9ab3ca21329c7f26de6e8f48c9c64bbe4306","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainAttrTest.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -118,7 +118,6 @@ public void saveWithEnum() throws ClassNotFoundException {\n         user.add(attribute);\n \n         Exception thrown = null;\n-\n         try {\n             attribute.add(\"A\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n         } catch (ValidationException e) {"},{"sha":"0fc2a3ede37d5bced8d4b556fa2b86a3d0bf8077","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ResourceTest.java","status":"modified","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -259,6 +259,52 @@ public void saveInvalidProvision() {\n         resourceDAO.save(resource);\n     }\n \n+    @Test\n+    public void saveVirtualMapping() {\n+        ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n+        resource.setKey(\"ws-target-resource-virtual-mapping\");\n+        resource.setPropagationPriority(2);\n+        resource.setPropagationPrimary(true);\n+\n+        Provision provision = entityFactory.newEntity(Provision.class);\n+        provision.setAnyType(anyTypeDAO.findUser());\n+        provision.setObjectClass(ObjectClass.ACCOUNT);\n+        provision.setResource(resource);\n+        resource.add(provision);\n+\n+        Mapping mapping = entityFactory.newEntity(Mapping.class);\n+        mapping.setProvision(provision);\n+        provision.setMapping(mapping);\n+\n+        MappingItem connObjectKey = entityFactory.newEntity(MappingItem.class);\n+        connObjectKey.setExtAttrName(\"username\");\n+        connObjectKey.setIntAttrName(\"fullname\");\n+        connObjectKey.setIntMappingType(IntMappingType.UserKey);\n+        connObjectKey.setPurpose(MappingPurpose.BOTH);\n+        mapping.setConnObjectKeyItem(connObjectKey);\n+\n+        MappingItem virtualMapItem = entityFactory.newEntity(MappingItem.class);\n+        virtualMapItem.setIntMappingType(IntMappingType.UserVirtualSchema);\n+        virtualMapItem.setIntAttrName(\"virtualReadOnly\");\n+        virtualMapItem.setExtAttrName(\"TEST\");\n+        virtualMapItem.setPurpose(MappingPurpose.BOTH);\n+        virtualMapItem.setMapping(mapping);\n+        mapping.add(virtualMapItem);\n+\n+        ConnInstance connector = resourceDAO.find(\"ws-target-resource-1\").getConnector();\n+        resource.setConnector(connector);\n+\n+        try {\n+            resourceDAO.save(resource);\n+            fail();\n+        } catch (InvalidEntityException e) {\n+            assertNotNull(e);\n+        }\n+\n+        virtualMapItem.setPurpose(MappingPurpose.PROPAGATION);\n+        resourceDAO.save(resource);\n+    }\n+\n     @Test\n     public void saveWithGroupMappingType() {\n         ExternalResource resource = entityFactory.newEntity(ExternalResource.class);"},{"sha":"f39f06f4a28d51d043f5c24f8e41e55c756ad3dc","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/TaskTest.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -113,6 +113,7 @@ public void savePropagationTask() {\n         PropagationTask task = entityFactory.newEntity(PropagationTask.class);\n         task.setResource(resource);\n         task.setAnyTypeKind(AnyTypeKind.USER);\n+        task.setAnyType(AnyTypeKind.USER.name());\n         task.setOperation(ResourceOperation.CREATE);\n         task.setConnObjectKey(\"one@two.com\");\n "},{"sha":"fd13cd67240419345947dd1119259852fec023c9","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/VirAttrTest.java","status":"removed","additions":0,"deletions":118,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirAttrTest.java?ref=ef28d8e680f2003d99eaf5eb7f3c5af027a99cc6","patch":"@@ -1,118 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.inner;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-\n-import java.util.List;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.VirAttrDAO;\n-import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-@Transactional(\"Master\")\n-public class VirAttrTest extends AbstractTest {\n-\n-    @Autowired\n-    private VirAttrDAO virAttrDAO;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    @Autowired\n-    private GroupDAO groupDAO;\n-\n-    @Autowired\n-    private VirSchemaDAO virSchemaDAO;\n-\n-    @Test\n-    public void findAll() {\n-        List<UVirAttr> list = virAttrDAO.findAll(UVirAttr.class);\n-        assertEquals(\"did not get expected number of derived attributes \", 1, list.size());\n-    }\n-\n-    @Test\n-    public void findById() {\n-        UVirAttr attribute = virAttrDAO.find(100L, UVirAttr.class);\n-        assertNotNull(\"did not find expected attribute schema\", attribute);\n-    }\n-\n-    @Test\n-    public void saveUVirAttribute() {\n-        VirSchema virSchema = virSchemaDAO.find(\"virtualdata\");\n-        assertNotNull(virSchema);\n-\n-        User owner = userDAO.find(3L);\n-        assertNotNull(\"did not get expected user\", owner);\n-\n-        UVirAttr virAttr = entityFactory.newEntity(UVirAttr.class);\n-        virAttr.setOwner(owner);\n-        virAttr.setSchema(virSchema);\n-\n-        virAttr = virAttrDAO.save(virAttr);\n-\n-        UVirAttr actual = virAttrDAO.find(virAttr.getKey(), UVirAttr.class);\n-        assertNotNull(\"expected save to work\", actual);\n-        assertEquals(virAttr, actual);\n-    }\n-\n-    @Test\n-    public void saveGVirAttribute() {\n-        VirSchema virSchema = virSchemaDAO.find(\"rvirtualdata\");\n-        assertNotNull(virSchema);\n-\n-        Group owner = groupDAO.find(3L);\n-        assertNotNull(\"did not get expected membership\", owner);\n-\n-        GVirAttr virAttr = entityFactory.newEntity(GVirAttr.class);\n-        virAttr.setOwner(owner);\n-        virAttr.setSchema(virSchema);\n-\n-        virAttr = virAttrDAO.save(virAttr);\n-\n-        GVirAttr actual = virAttrDAO.find(virAttr.getKey(), GVirAttr.class);\n-        assertNotNull(\"expected save to work\", actual);\n-        assertEquals(virAttr, actual);\n-    }\n-\n-    @Test\n-    public void delete() {\n-        UVirAttr attribute = virAttrDAO.find(100L, UVirAttr.class);\n-        String attributeSchemaName = attribute.getSchema().getKey();\n-\n-        virAttrDAO.delete(attribute.getKey(), UVirAttr.class);\n-\n-        UVirAttr actual = virAttrDAO.find(1000L, UVirAttr.class);\n-        assertNull(\"delete did not work\", actual);\n-\n-        VirSchema attributeSchema = virSchemaDAO.find(attributeSchemaName);\n-        assertNotNull(\"user virtual attribute schema deleted \" + \"when deleting values\", attributeSchema);\n-    }\n-}"},{"sha":"66bd6cb08cc6d5a4e72477e8fbec6accc746172a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/VirSchemaTest.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -43,7 +43,7 @@ public class VirSchemaTest extends AbstractTest {\n     @Test\n     public void findAll() {\n         List<VirSchema> list = virSchemaDAO.findAll();\n-        assertEquals(4, list.size());\n+        assertEquals(3, list.size());\n     }\n \n     @Test\n@@ -54,15 +54,17 @@ public void findByName() {\n \n     @Test\n     public void save() {\n-        VirSchema virtualAttributeSchema = entityFactory.newEntity(VirSchema.class);\n-        virtualAttributeSchema.setKey(\"virtual\");\n-        virtualAttributeSchema.setReadonly(true);\n+        VirSchema virSchema = entityFactory.newEntity(VirSchema.class);\n+        virSchema.setKey(\"virtual\");\n+        virSchema.setReadonly(true);\n+        virSchema.setExtAttrName(\"EXT_ATTR\");\n \n-        virSchemaDAO.save(virtualAttributeSchema);\n+        virSchemaDAO.save(virSchema);\n \n         VirSchema actual = virSchemaDAO.find(\"virtual\");\n         assertNotNull(\"expected save to work\", actual);\n         assertTrue(actual.isReadonly());\n+        assertEquals(\"EXT_ATTR\", actual.getExtAttrName());\n     }\n \n     @Test"},{"sha":"2a8a090ff373ce950a89c40d4f4b8dedf0e631b8","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -38,8 +38,10 @@\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n@@ -75,6 +77,9 @@ public class ResourceTest extends AbstractTest {\n     @Autowired\n     private PolicyDAO policyDAO;\n \n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n     @Test\n     public void createWithPasswordPolicy() {\n         final String resourceName = \"resourceWithPasswordPolicy\";\n@@ -269,16 +274,20 @@ public void emptyMapping() {\n             itemKeys.add(item.getKey());\n         }\n \n-        ldap.remove(ldap.getProvision(anyTypeDAO.findGroup()));\n+        Provision groupProvision = ldap.getProvision(anyTypeDAO.findGroup());\n+        ldap.remove(groupProvision);\n+        for (VirSchema schema : virSchemaDAO.findByProvision(groupProvision)) {\n+            virSchemaDAO.delete(schema.getKey());\n+        }\n \n         // need to avoid any class not defined in this Maven module\n         ldap.getPropagationActionsClassNames().clear();\n \n         resourceDAO.save(ldap);\n         resourceDAO.flush();\n \n-        for (Long itemId : itemKeys) {\n-            assertNull(entityManager().find(JPAMappingItem.class, itemId));\n+        for (Long itemKey : itemKeys) {\n+            assertNull(entityManager().find(JPAMappingItem.class, itemKey));\n         }\n     }\n "},{"sha":"53f88d8ea19bfa2d9dbe9552cd17db603ce88315","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -92,6 +92,7 @@ public void save() {\n         PropagationTask task = entityFactory.newEntity(PropagationTask.class);\n         task.setResource(resource);\n         task.setAnyTypeKind(AnyTypeKind.USER);\n+        task.setAnyType(AnyTypeKind.USER.name());\n         task.setOperation(ResourceOperation.CREATE);\n         task.setConnObjectKey(\"one@two.com\");\n "},{"sha":"bd683131a1de87f9b1ad04aa42be889b1bdf89c4","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/VirSchemaTest.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.outer;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(\"Master\")\n+public class VirSchemaTest extends AbstractTest {\n+\n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n+    @Test\n+    public void deal() {\n+        Provision provision = resourceDAO.findProvision(15L);\n+        assertNotNull(provision);\n+        assertTrue(virSchemaDAO.findByProvision(provision).isEmpty());\n+\n+        VirSchema virSchema = entityFactory.newEntity(VirSchema.class);\n+        virSchema.setKey(\"vSchema\");\n+        virSchema.setReadonly(true);\n+        virSchema.setExtAttrName(\"EXT_ATTR\");\n+        virSchema.setProvision(provision);\n+\n+        virSchemaDAO.save(virSchema);\n+        virSchemaDAO.flush();\n+\n+        virSchema = virSchemaDAO.find(\"vSchema\");\n+        assertNotNull(\"expected save to work\", virSchema);\n+        assertTrue(virSchema.isReadonly());\n+        assertEquals(\"EXT_ATTR\", virSchema.getExtAttrName());\n+\n+        provision = resourceDAO.findProvision(15L);\n+        assertNotNull(provision);\n+        assertFalse(virSchemaDAO.findByProvision(provision).isEmpty());\n+        assertTrue(virSchemaDAO.findByProvision(provision).contains(virSchema));\n+\n+        MappingItem item = virSchema.asLinkingMappingItem();\n+        assertNotNull(item);\n+        assertEquals(IntMappingType.UserVirtualSchema, item.getIntMappingType());\n+        assertEquals(virSchema.getKey(), item.getIntAttrName());\n+    }\n+}"},{"sha":"96e606f2673ea146a7245287a8126d5aac3e9d75","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":8,"deletions":21,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -326,9 +326,6 @@ under the License.\n   <DerSchema name=\"cn\" expression=\"surname + ', ' + firstname\" anyTypeClass_name=\"minimal user\"/>\n   <DerSchema name=\"noschema\" expression=\"surname + ', ' + notfound\" anyTypeClass_name=\"other\"/>\n \n-  <VirSchema name=\"virtualdata\" anyTypeClass_name=\"minimal user\"/>\n-  <VirSchema name=\"virtualReadOnly\" READONLY=\"1\"  anyTypeClass_name=\"minimal user\"/>\n-\n   <PlainSchema name=\"icon\" type=\"String\" anyTypeClass_name=\"minimal group\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>                \n   <PlainSchema name=\"show\" type=\"Boolean\" anyTypeClass_name=\"minimal group\"\n@@ -347,8 +344,6 @@ under the License.\n   <DerSchema name=\"rderToBePropagated\" expression=\"rderived_sx + '-' + rderived_dx\"\n              anyTypeClass_name=\"minimal group\"/>\n \n-  <VirSchema name=\"rvirtualdata\" anyTypeClass_name=\"minimal group\"/>\n-\n   <DerSchema name=\"rderivedschema\" expression=\"rderived_sx + '-' + rderived_dx\"  anyTypeClass_name=\"minimal group\"/>\n \n   <PlainSchema name=\"subscriptionDate\" type=\"Date\" anyTypeClass_name=\"generic membership\"\n@@ -364,8 +359,6 @@ under the License.\n   <DerSchema name=\"mderiveddata\" expression=\"mderived_sx + '-' + mderived_dx\"/>\n   <DerSchema name=\"mderToBePropagated\" expression=\"mderived_sx + '-' + mderived_dx\" \n              anyTypeClass_name=\"generic membership\"/>\n-\n-  <VirSchema name=\"mvirtualdata\"/>\n         \n   <PlainSchema name=\"model\" type=\"String\" anyTypeClass_name=\"minimal printer\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n@@ -444,8 +437,6 @@ under the License.\n   <UPlainAttrValue id=\"36\" attribute_id=\"125\" stringValue=\"vivaldi@syncope.org\"/>\n   <UPlainAttr id=\"126\" owner_id=\"3\" schema_name=\"type\"/>\n   <UPlainAttrValue id=\"37\" attribute_id=\"126\" stringValue=\"F\"/>\n-    \n-  <UVirAttr id=\"100\" schema_name=\"virtualdata\" owner_id=\"3\"/>\n   \n   <UDerAttr id=\"100\" schema_name=\"cn\" owner_id=\"3\"/>\n   <UDerAttr id=\"101\" schema_name=\"cn\" owner_id=\"1\"/>\n@@ -485,8 +476,6 @@ under the License.\n \n   <GDerAttr id=\"103\" owner_id=\"1\" schema_name=\"rderToBePropagated\"/>    \n \n-  <GVirAttr id=\"98\" owner_id=\"4\" schema_name=\"rvirtualdata\"/>\n-\n   <ConnInstance id=\"100\" displayName=\"ConnInstance100\"\n                 location=\"${connid.location}\"\n                 bundleName=\"net.tirasa.connid.bundles.soap\"\n@@ -763,7 +752,7 @@ under the License.\n                connObjectKey=\"0\" password=\"0\" purpose=\"BOTH\"/>\n   <MappingItem id=\"110\" extAttrName=\"name\" mapping_id=\"1\"\n                intAttrName=\"virtualdata\" intMappingType=\"UserVirtualSchema\" mandatoryCondition=\"type == 'F'\"\n-               connObjectKey=\"0\" password=\"0\" purpose=\"BOTH\"/>\n+               connObjectKey=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <MappingItem id=\"111\" extAttrName=\"fullname\" mapping_id=\"1\"\n                intAttrName=\"cn\" intMappingType=\"UserDerivedSchema\" mandatoryCondition=\"true\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"BOTH\"/>\n@@ -892,16 +881,16 @@ under the License.\n   <MappingItem id=\"318\" connObjectKey=\"0\" password=\"0\" mapping_id=\"11\"\n                extAttrName=\"mail\" intAttrName=\"userId\" intMappingType=\"UserPlainSchema\"\n                mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n-  <MappingItem id=\"319\" connObjectKey=\"0\" password=\"0\" mapping_id=\"11\"\n-               extAttrName=\"givenname\" intAttrName=\"virtualReadOnly\" intMappingType=\"UserVirtualSchema\"\n-               mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   <MappingItem id=\"320\" connObjectKey=\"0\" password=\"0\" mapping_id=\"11\"\n                extAttrName=\"registeredAddress\" intAttrName=\"obscure\" intMappingType=\"UserPlainSchema\"\n                mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   <MappingItem id=\"321\" connObjectKey=\"0\" password=\"0\" mapping_id=\"11\"\n                extAttrName=\"jpegPhoto\" intAttrName=\"photo\" intMappingType=\"UserPlainSchema\"\n                mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n         \n+  <VirSchema name=\"virtualReadOnly\" READONLY=\"1\" anyTypeClass_name=\"minimal user\"\n+             provision_id=\"11\" extAttrName=\"givenname\"/>\n+\n   <Provision id=\"20\" resource_name=\"resource-ldap\" anyType_name=\"GROUP\" objectClass=\"__GROUP__\"/>\n   <Mapping id=\"20\" provision_id=\"20\"\n            connObjectLink=\"&apos;cn=&apos; + name + &apos;,ou=groups,o=isp&apos;\"/>\n@@ -914,10 +903,9 @@ under the License.\n   <MappingItem id=\"3\" connObjectKey=\"0\" password=\"0\" mapping_id=\"20\"\n                extAttrName=\"description\" intAttrName=\"title\" intMappingType=\"GroupPlainSchema\"\n                mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n-  <MappingItem id=\"4\" extAttrName=\"businessCategory\" mapping_id=\"20\"\n-               intAttrName=\"rvirtualdata\" intMappingType=\"GroupVirtualSchema\" mandatoryCondition=\"false\"\n-               connObjectKey=\"0\" password=\"0\" purpose=\"BOTH\"/>\n   \n+  <VirSchema name=\"rvirtualdata\" anyTypeClass_name=\"minimal group\" provision_id=\"20\" extAttrName=\"businessCategory\"/>\n+\n   <Provision id=\"16\" resource_name=\"resource-db-sync\" anyType_name=\"USER\" objectClass=\"__ACCOUNT__\"/>\n   <Mapping id=\"16\" provision_id=\"16\"/>\n   <MappingItem id=\"322\" connObjectKey=\"0\" mapping_id=\"16\"\n@@ -944,10 +932,9 @@ under the License.\n   <MappingItem id=\"331\" mapping_id=\"17\" connObjectKey=\"1\" password=\"0\"\n                extAttrName=\"id\" intMappingType=\"UserKey\" \n                mandatoryCondition=\"true\" purpose=\"BOTH\"/>\n-  <MappingItem id=\"332\" mapping_id=\"17\" connObjectKey=\"0\" password=\"0\" \n-               extAttrName=\"USERNAME\" intAttrName=\"virtualdata\" intMappingType=\"UserVirtualSchema\"\n-               mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n                 \n+  <VirSchema name=\"virtualdata\" anyTypeClass_name=\"minimal user\" provision_id=\"17\" extAttrName=\"USERNAME\"/>\n+  \n   <Provision id=\"18\" resource_name=\"ws-target-resource-timeout\" anyType_name=\"USER\" objectClass=\"__ACCOUNT__\"/>\n   <Mapping id=\"18\" provision_id=\"18\"/>\n   <MappingItem id=\"333\" mapping_id=\"18\" connObjectKey=\"1\" password=\"0\""},{"sha":"ce8adba2004b5f6ddcf8d96374ea2cf208b59dda","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/Connector.java","status":"modified","additions":17,"deletions":10,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api;\n \n-import java.util.Collection;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -59,10 +59,11 @@ public interface Connector {\n      * @param propagationAttempted if creation is actually performed (based on connector instance's capabilities)\n      * @return Uid for created object\n      */\n-    Uid create(ObjectClass objectClass,\n+    Uid create(\n+            ObjectClass objectClass,\n             Set<Attribute> attrs,\n             OperationOptions options,\n-            Set<String> propagationAttempted);\n+            Boolean[] propagationAttempted);\n \n     /**\n      * Update user / group on a connector instance.\n@@ -71,14 +72,15 @@ Uid create(ObjectClass objectClass,\n      * @param uid user to be updated\n      * @param attrs attributes for update\n      * @param options ConnId's OperationOptions\n-     * @param propagationAttempted if update is actually performed (based on connector instance's capabilities)\n+     * @param propagationAttempted if creation is actually performed (based on connector instance's capabilities)\n      * @return Uid for updated object\n      */\n-    Uid update(ObjectClass objectClass,\n+    Uid update(\n+            ObjectClass objectClass,\n             Uid uid,\n             Set<Attribute> attrs,\n             OperationOptions options,\n-            Set<String> propagationAttempted);\n+            Boolean[] propagationAttempted);\n \n     /**\n      * Delete user / group on a connector instance.\n@@ -88,8 +90,11 @@ Uid update(ObjectClass objectClass,\n      * @param options ConnId's OperationOptions\n      * @param propagationAttempted if deletion is actually performed (based on connector instance's capabilities)\n      */\n-    void delete(ObjectClass objectClass,\n-            Uid uid, OperationOptions options, Set<String> propagationAttempted);\n+    void delete(\n+            ObjectClass objectClass,\n+            Uid uid,\n+            OperationOptions options,\n+            Boolean[] propagationAttempted);\n \n     /**\n      * Fetches all remote objects (for use during full reconciliation).\n@@ -169,14 +174,16 @@ void search(\n      * query results\n      * @param orderBy the sort keys which should be used for ordering the {@link ConnectorObject} returned by\n      * search request\n+     * @param mapItems mapping items\n      */\n     void search(\n             ObjectClass objectClass,\n             Filter filter,\n             ResultsHandler handler,\n             int pageSize,\n             String pagedResultsCookie,\n-            List<OrderByClause> orderBy);\n+            List<OrderByClause> orderBy,\n+            Iterator<? extends MappingItem> mapItems);\n \n     /**\n      * Read attribute for a given connector object.\n@@ -238,5 +245,5 @@ void search(\n      * @return options for requesting all mapped connector attributes\n      * @see OperationOptions\n      */\n-    OperationOptions getOperationOptions(Collection<? extends MappingItem> mapItems);\n+    OperationOptions getOperationOptions(Iterator<? extends MappingItem> mapItems);\n }"},{"sha":"2e312048dde042d089159258924ab44015dfec9c","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/VirAttrHandler.java","status":"modified","additions":14,"deletions":38,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -18,56 +18,32 @@\n  */\n package org.apache.syncope.core.provisioning.api;\n \n-import java.util.Collection;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n-import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n-import org.apache.syncope.common.lib.types.PropagationByResource;\n+import java.util.List;\n+import java.util.Map;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface VirAttrHandler {\n \n     /**\n-     * Create and add virtual attributes to any.\n+     * Query external resource (or cache, if configured) associated to the given any for values associated to the given\n+     * virtual schema.\n      *\n-     * @param any any\n-     * @param vAttrs virtual attributes to be added.\n-     */\n-    void createVirtual(Any any, Collection<AttrTO> vAttrs);\n-\n-    /**\n-     * Update virtual attributes to any.\n-     *\n-     * @param any\n-     * @param vAttrs virtual attributes to be updated.\n-     * @return operations to be performed on external resources for virtual attributes changes\n-     */\n-    PropagationByResource updateVirtual(Any any, Collection<AttrPatch> vAttrs);\n-\n-    /**\n-     * Update virtual attributes to any identified by the given {@code key}.\n-     *\n-     * @param key any key\n-     * @param anyTypeKind type kind\n-     * @param vAttrs virtual attributes to be updated.\n-     * @return operations to be performed on external resources for virtual attributes changes\n+     * @param any any object\n+     * @param schema virtual schema\n+     * @return virtual attribute values, either for local cache or external resource, if resource is owned by the given\n+     * any and associated to the given virtual schema; empty list otherwise.\n      */\n-    PropagationByResource updateVirtual(Long key, AnyTypeKind anyTypeKind, Collection<AttrPatch> vAttrs);\n-\n-    VirSchema getVirSchema(String virSchemaName);\n+    List<String> getValues(Any<?, ?> any, VirSchema schema);\n \n     /**\n-     * Query connected external resources for values to populated virtual attributes associated with the given owner.\n+     * Query external resources (or cache, if configured) associated to the given any for values associated to all\n+     * {@link VirSchema} instances in the {@link org.apache.syncope.core.persistence.api.entity.AnyTypeClass}\n+     * associated to the given any.\n      *\n      * @param any any object\n+     * @return virtual attribute values, either for local cache or external resources\n      */\n-    void retrieveVirAttrValues(Any<?, ?, ?> any);\n-\n-    void updateOnResourcesIfMappingMatches(\n-            Any<?, ?, ?> any, String schemaKey, Iterable<? extends ExternalResource> resources,\n-            IntMappingType mappingType, PropagationByResource propByRes);\n+    Map<VirSchema, List<String>> getValues(Any<?, ?> any);\n \n }"},{"sha":"93b9c63b9e6849a2503215bc407e06d4bbdd16cb","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/cache/VirAttrCacheValue.java","status":"modified","additions":15,"deletions":21,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheValue.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -18,12 +18,10 @@\n  */\n package org.apache.syncope.core.provisioning.api.cache;\n \n-import java.util.Collections;\n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Date;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.List;\n \n /**\n  * Cache entry value.\n@@ -33,7 +31,7 @@ public class VirAttrCacheValue {\n     /**\n      * Virtual attribute values.\n      */\n-    private final Map<String, Set<String>> values;\n+    private final List<String> values;\n \n     /**\n      * Entry creation date.\n@@ -48,11 +46,17 @@ public class VirAttrCacheValue {\n     public VirAttrCacheValue() {\n         this.creationDate = new Date();\n         this.lastAccessDate = new Date();\n-        this.values = new HashMap<>();\n+        this.values = new ArrayList<>();\n     }\n \n-    public void setResourceValues(final String resourceName, final Set<String> cached) {\n-        this.values.put(resourceName, cached);\n+    public void setValues(final Collection<Object> values) {\n+        this.values.clear();\n+\n+        if (values != null) {\n+            for (Object value : values) {\n+                this.values.add(value.toString());\n+            }\n+        }\n     }\n \n     public Date getCreationDate() {\n@@ -63,18 +67,8 @@ public void forceExpiring() {\n         creationDate = new Date(0);\n     }\n \n-    public Set<String> getValues(final String resourceName) {\n-        return values.get(resourceName);\n-    }\n-\n-    public Set<String> getValues() {\n-        final Set<String> res = new HashSet<>();\n-\n-        for (Set<String> value : values.values()) {\n-            res.addAll(value);\n-        }\n-\n-        return Collections.unmodifiableSet(res);\n+    public List<String> getValues() {\n+        return values;\n     }\n \n     public Date getLastAccessDate() {"},{"sha":"dd87d19834ee3015a0641dddbfd1a5b54dd90d50","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -21,7 +21,6 @@\n import java.util.Collection;\n import java.util.List;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -75,7 +74,7 @@ List<PropagationTask> getUserCreateTasks(\n      * @param changePwd whether password should be included for propagation attributes or not\n      * @param enable whether any object should be enabled or not, may be null to leave unchanged\n      * @param propByRes operation to be performed per resource\n-     * @param vAttrs virtual attributes patches\n+     * @param vAttrs virtual attributes to be set\n      * @param noPropResourceNames external resource names not to be considered for propagation\n      * @return list of propagation tasks\n      */\n@@ -85,7 +84,7 @@ List<PropagationTask> getUpdateTasks(\n             boolean changePwd,\n             Boolean enable,\n             PropagationByResource propByRes,\n-            Collection<AttrPatch> vAttrs,\n+            Collection<AttrTO> vAttrs,\n             Collection<String> noPropResourceNames);\n \n     /**"},{"sha":"c06a05f6c9d61c150c53e24d0bf03d00fe46a588","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/sync/PushActions.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FPushActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FPushActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FPushActions.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -37,7 +37,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?, ?>> A beforeAssign(\n+    <A extends Any<?, ?>> A beforeAssign(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -50,7 +50,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?, ?>> A beforeProvision(\n+    <A extends Any<?, ?>> A beforeProvision(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -63,7 +63,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?, ?>> A beforeUpdate(\n+    <A extends Any<?, ?>> A beforeUpdate(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -76,7 +76,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?, ?>> A beforeLink(\n+    <A extends Any<?, ?>> A beforeLink(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -89,7 +89,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?, ?>> A beforeUnlink(\n+    <A extends Any<?, ?>> A beforeUnlink(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -102,7 +102,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?, ?>> A beforeUnassign(\n+    <A extends Any<?, ?>> A beforeUnassign(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -115,7 +115,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?, ?>> A beforeDeprovision(\n+    <A extends Any<?, ?>> A beforeDeprovision(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -128,7 +128,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?, ?>> A beforeDelete(\n+    <A extends Any<?, ?>> A beforeDelete(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -142,7 +142,7 @@ public interface PushActions extends ProvisioningActions {\n      * @param error error being reported\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?, ?>> void onError(\n+    <A extends Any<?, ?>> void onError(\n             ProvisioningProfile<?, ?> profile,\n             A any,\n             ProvisioningResult result,\n@@ -157,7 +157,7 @@ public interface PushActions extends ProvisioningActions {\n      * @param result operation result.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?, ?>> void after(\n+    <A extends Any<?, ?>> void after(\n             ProvisioningProfile<?, ?> profile,\n             A any,\n             ProvisioningResult result) throws JobExecutionException;"},{"sha":"6c2be32098635ef540e0937f914cd4883f9300cc","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java","status":"modified","additions":18,"deletions":11,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -21,8 +21,8 @@\n import java.io.File;\n import java.net.URI;\n import java.util.ArrayList;\n-import java.util.Collection;\n import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n import java.util.concurrent.Future;\n@@ -31,6 +31,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n@@ -168,12 +169,12 @@ public Uid create(\n             final ObjectClass objectClass,\n             final Set<Attribute> attrs,\n             final OperationOptions options,\n-            final Set<String> propagationAttempted) {\n+            final Boolean[] propagationAttempted) {\n \n         Uid result = null;\n \n         if (activeConnInstance.getCapabilities().contains(ConnectorCapability.CREATE)) {\n-            propagationAttempted.add(\"create\");\n+            propagationAttempted[0] = true;\n \n             Future<Uid> future = asyncFacade.create(connector, objectClass, attrs, options);\n             try {\n@@ -203,12 +204,12 @@ public Uid update(\n             final Uid uid,\n             final Set<Attribute> attrs,\n             final OperationOptions options,\n-            final Set<String> propagationAttempted) {\n+            final Boolean[] propagationAttempted) {\n \n         Uid result = null;\n \n         if (activeConnInstance.getCapabilities().contains(ConnectorCapability.UPDATE)) {\n-            propagationAttempted.add(\"update\");\n+            propagationAttempted[0] = true;\n \n             Future<Uid> future = asyncFacade.update(connector, objectClass, uid, attrs, options);\n \n@@ -239,10 +240,10 @@ public void delete(\n             final ObjectClass objectClass,\n             final Uid uid,\n             final OperationOptions options,\n-            final Set<String> propagationAttempted) {\n+            final Boolean[] propagationAttempted) {\n \n         if (activeConnInstance.getCapabilities().contains(ConnectorCapability.DELETE)) {\n-            propagationAttempted.add(\"delete\");\n+            propagationAttempted[0] = true;\n \n             Future<Uid> future = asyncFacade.delete(connector, objectClass, uid, options);\n \n@@ -544,7 +545,8 @@ public void search(\n             final ResultsHandler handler,\n             final int pageSize,\n             final String pagedResultsCookie,\n-            final List<OrderByClause> orderBy) {\n+            final List<OrderByClause> orderBy,\n+            final Iterator<? extends MappingItem> mapItems) {\n \n         OperationOptionsBuilder builder = new OperationOptionsBuilder().setPageSize(pageSize);\n         if (pagedResultsCookie != null) {\n@@ -558,6 +560,8 @@ public SortKey transform(final OrderByClause clause) {\n             }\n         }, new ArrayList<SortKey>(orderBy.size())));\n \n+        builder.setAttributesToGet(getOperationOptions(mapItems).getAttributesToGet());\n+\n         search(objectClass, filter, handler, builder.build());\n     }\n \n@@ -567,7 +571,7 @@ public ConnInstance getActiveConnInstance() {\n     }\n \n     @Override\n-    public OperationOptions getOperationOptions(final Collection<? extends MappingItem> mapItems) {\n+    public OperationOptions getOperationOptions(final Iterator<? extends MappingItem> mapItems) {\n         // -------------------------------------\n         // Ask just for mapped attributes\n         // -------------------------------------\n@@ -578,8 +582,11 @@ public OperationOptions getOperationOptions(final Collection<? extends MappingIt\n         attrsToGet.add(Uid.NAME);\n         attrsToGet.add(OperationalAttributes.ENABLE_NAME);\n \n-        for (MappingItem item : mapItems) {\n-            attrsToGet.add(item.getExtAttrName());\n+        while (mapItems.hasNext()) {\n+            MappingItem mapItem = mapItems.next();\n+            if (mapItem.getPurpose() != MappingPurpose.NONE) {\n+                attrsToGet.add(mapItem.getExtAttrName());\n+            }\n         }\n \n         builder.setAttributesToGet(attrsToGet);"},{"sha":"ffecdb9c5e75c4792c4cf116ebc5e16bb3208079","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -105,17 +105,6 @@ public Pair<Long, List<PropagationStatus>> update(\n \n         WorkflowResult<Long> updated = awfAdapter.update(anyObjectPatch);\n \n-        // SYNCOPE-459: take care of user virtual attributes ...\n-        PropagationByResource propByResVirAttr = virtAttrHandler.updateVirtual(\n-                updated.getResult(),\n-                AnyTypeKind.ANY_OBJECT,\n-                anyObjectPatch.getVirAttrs());\n-        if (updated.getPropByRes() == null) {\n-            updated.setPropByRes(propByResVirAttr);\n-        } else {\n-            updated.getPropByRes().merge(propByResVirAttr);\n-        }\n-\n         List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n                 AnyTypeKind.ANY_OBJECT,\n                 updated.getResult(),\n@@ -124,7 +113,6 @@ public Pair<Long, List<PropagationStatus>> update(\n                 updated.getPropByRes(),\n                 anyObjectPatch.getVirAttrs(),\n                 excludedResources);\n-\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"9e3d566c44d933eb975269d7eef046dde37e29f5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -137,17 +137,6 @@ public Pair<Long, List<PropagationStatus>> update(\n \n         WorkflowResult<Long> updated = gwfAdapter.update(groupPatch);\n \n-        // SYNCOPE-459: take care of user virtual attributes ...\n-        PropagationByResource propByResVirAttr = virtAttrHandler.updateVirtual(\n-                updated.getResult(),\n-                AnyTypeKind.GROUP,\n-                groupPatch.getVirAttrs());\n-        if (updated.getPropByRes() == null) {\n-            updated.setPropByRes(propByResVirAttr);\n-        } else {\n-            updated.getPropByRes().merge(propByResVirAttr);\n-        }\n-\n         List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n                 AnyTypeKind.GROUP,\n                 updated.getResult(),\n@@ -156,7 +145,6 @@ public Pair<Long, List<PropagationStatus>> update(\n                 updated.getPropByRes(),\n                 groupPatch.getVirAttrs(),\n                 excludedResources);\n-\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"54244867cea54d9ba04a26dea82c8a551cdf6a3e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":7,"deletions":23,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -119,28 +119,14 @@ public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final boo\n     public Pair<Long, List<PropagationStatus>> update(final UserPatch userPatch) {\n         WorkflowResult<Pair<UserPatch, Boolean>> updated = uwfAdapter.update(userPatch);\n \n-        // SYNCOPE-459: take care of user virtual attributes ...\n-        PropagationByResource propByResVirAttr = virtAttrHandler.updateVirtual(\n-                updated.getResult().getKey().getKey(),\n-                AnyTypeKind.USER,\n-                userPatch.getVirAttrs());\n-        if (updated.getPropByRes() == null) {\n-            updated.setPropByRes(propByResVirAttr);\n-        } else {\n-            updated.getPropByRes().merge(propByResVirAttr);\n-        }\n-\n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(updated);\n-\n-        PropagationReporter propagationReporter = ApplicationContextProvider.getBeanFactory().\n-                getBean(PropagationReporter.class);\n-        if (!tasks.isEmpty()) {\n-            try {\n-                taskExecutor.execute(tasks, propagationReporter);\n-            } catch (PropagationException e) {\n-                LOG.error(\"Error propagation primary resource\", e);\n-                propagationReporter.onPrimaryResourceFailure(tasks);\n-            }\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n         return new ImmutablePair<>(updated.getResult().getKey().getKey(), propagationReporter.getStatuses());\n@@ -291,7 +277,6 @@ protected List<PropagationStatus> propagateStatus(final StatusPatch statusPatch)\n                 propByRes,\n                 null,\n                 null);\n-\n         PropagationReporter propReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n@@ -302,7 +287,6 @@ protected List<PropagationStatus> propagateStatus(final StatusPatch statusPatch)\n         }\n \n         return propReporter.getStatuses();\n-\n     }\n \n     @Override"},{"sha":"57634495db6403e9d56b8da160fc41e6be1fa089","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java","status":"modified","additions":70,"deletions":286,"changes":356,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -19,34 +19,19 @@\n package org.apache.syncope.core.provisioning.java;\n \n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n-import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.ListUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n-import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n-import org.apache.syncope.common.lib.types.PropagationByResource;\n-import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.misc.MappingUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.VirAttrDAO;\n-import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.AnyType;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -68,29 +53,16 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Component\n-@Transactional(rollbackFor = { Throwable.class })\n public class VirAttrHandlerImpl implements VirAttrHandler {\n \n     private static final Logger LOG = LoggerFactory.getLogger(VirAttrHandler.class);\n \n-    @Autowired\n-    private VirSchemaDAO virSchemaDAO;\n-\n-    @Autowired\n-    private VirAttrDAO virAttrDAO;\n-\n     @Autowired\n     private AnyObjectDAO anyObjectDAO;\n \n     @Autowired\n     private UserDAO userDAO;\n \n-    @Autowired\n-    private GroupDAO groupDAO;\n-\n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n-\n     @Autowired\n     private ConnectorFactory connFactory;\n \n@@ -103,290 +75,102 @@ public class VirAttrHandlerImpl implements VirAttrHandler {\n     @Autowired\n     private MappingUtils mappingUtils;\n \n-    @Override\n-    public VirSchema getVirSchema(final String virSchemaName) {\n-        VirSchema virtualSchema = null;\n-        if (StringUtils.isNotBlank(virSchemaName)) {\n-            virtualSchema = virSchemaDAO.find(virSchemaName);\n-\n-            if (virtualSchema == null) {\n-                LOG.debug(\"Ignoring invalid virtual schema {}\", virSchemaName);\n-            }\n+    private Map<VirSchema, List<String>> getValues(final Any<?, ?> any, final Set<VirSchema> schemas) {\n+        Collection<? extends ExternalResource> ownedResources;\n+        if (any instanceof User) {\n+            ownedResources = userDAO.findAllResources((User) any);\n+        } else if (any instanceof AnyObject) {\n+            ownedResources = anyObjectDAO.findAllResources((AnyObject) any);\n+        } else {\n+            ownedResources = ((Group) any).getResources();\n         }\n \n-        return virtualSchema;\n-    }\n-\n-    @Override\n-    public void updateOnResourcesIfMappingMatches(final Any<?, ?, ?> any, final String schemaKey,\n-            final Iterable<? extends ExternalResource> resources, final IntMappingType mappingType,\n-            final PropagationByResource propByRes) {\n+        Map<VirSchema, List<String>> result = new HashMap<>();\n \n-        for (ExternalResource resource : resources) {\n-            for (MappingItem mapItem\n-                    : MappingUtils.getPropagationMappingItems(resource.getProvision(any.getType()))) {\n+        Map<Provision, Set<VirSchema>> toRead = new HashMap<>();\n \n-                if (schemaKey.equals(mapItem.getIntAttrName()) && mapItem.getIntMappingType() == mappingType) {\n-                    propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n-                }\n-            }\n-        }\n-    }\n-\n-    private Iterable<? extends ExternalResource> getAllResources(final Any<?, ?, ?> any) {\n-        return any instanceof User\n-                ? userDAO.findAllResources((User) any)\n-                : any instanceof AnyObject\n-                        ? anyObjectDAO.findAllResources((AnyObject) any)\n-                        : any instanceof Group\n-                                ? ((Group) any).getResources()\n-                                : Collections.<ExternalResource>emptySet();\n-    }\n-\n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    @Override\n-    public void createVirtual(final Any any, final Collection<AttrTO> vAttrs) {\n-        AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n+        for (VirSchema schema : schemas) {\n+            if (ownedResources.contains(schema.getProvision().getResource())) {\n+                VirAttrCacheValue virAttrCacheValue =\n+                        virAttrCache.get(any.getType().getKey(), any.getKey(), schema.getKey());\n \n-        for (AttrTO attrTO : vAttrs) {\n-            VirAttr virAttr = any.getVirAttr(attrTO.getSchema());\n-            if (virAttr == null) {\n-                VirSchema virSchema = getVirSchema(attrTO.getSchema());\n-                if (virSchema != null) {\n-                    virAttr = anyUtils.newVirAttr();\n-                    virAttr.setSchema(virSchema);\n-                    if (virAttr.getSchema() == null) {\n-                        LOG.debug(\"Ignoring {} because no valid schema was found\", attrTO);\n-                    } else {\n-                        virAttr.setOwner(any);\n-                        any.add(virAttr);\n-                        virAttr.getValues().clear();\n-                        virAttr.getValues().addAll(attrTO.getValues());\n+                if (virAttrCache.isValidEntry(virAttrCacheValue)) {\n+                    LOG.debug(\"Values for {} found in cache: {}\", schema, virAttrCacheValue);\n+                    result.put(schema, virAttrCacheValue.getValues());\n+                } else {\n+                    Set<VirSchema> schemasToRead = toRead.get(schema.getProvision());\n+                    if (schemasToRead == null) {\n+                        schemasToRead = new HashSet<>();\n+                        toRead.put(schema.getProvision(), schemasToRead);\n                     }\n+                    schemasToRead.add(schema);\n                 }\n             } else {\n-                virAttr.getValues().clear();\n-                virAttr.getValues().addAll(attrTO.getValues());\n+                LOG.debug(\"Not considering {} since {} is not assigned to {}\",\n+                        schema, any, schema.getProvision().getResource());\n             }\n         }\n-    }\n-\n-    private Any<?, ?, ?> find(final Long key, final AnyTypeKind anyTypeKind) {\n-        Any<?, ?, ?> result;\n-\n-        switch (anyTypeKind) {\n-            case USER:\n-                result = userDAO.authFind(key);\n-                break;\n-\n-            case GROUP:\n-                result = groupDAO.authFind(key);\n-                break;\n-\n-            case ANY_OBJECT:\n-            default:\n-                result = anyObjectDAO.authFind(key);\n-        }\n-\n-        return result;\n-    }\n-\n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    @Override\n-    public PropagationByResource updateVirtual(final Any any, final Collection<AttrPatch> vAttrs) {\n-        AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n-\n-        PropagationByResource propByRes = new PropagationByResource();\n-\n-        Iterable<? extends ExternalResource> externalResources = getAllResources(any);\n-\n-        for (AttrPatch patch : vAttrs) {\n-            VirSchema virSchema = getVirSchema(patch.getAttrTO().getSchema());\n-            if (virSchema != null) {\n-                VirAttr virAttr = any.getVirAttr(virSchema.getKey());\n-                switch (patch.getOperation()) {\n-                    case ADD_REPLACE:\n-                        if (virAttr == null) {\n-                            virAttr = anyUtils.newVirAttr();\n-                            virAttr.setOwner(any);\n-                            virAttr.setSchema(virSchema);\n-\n-                            any.add(virAttr);\n-                        }\n-\n-                        updateOnResourcesIfMappingMatches(\n-                                any, virSchema.getKey(), externalResources, anyUtils.virIntMappingType(), propByRes);\n-\n-                        if (!virAttr.getValues().equals(patch.getAttrTO().getValues())) {\n-                            virAttr.getValues().clear();\n-                            virAttr.getValues().addAll(patch.getAttrTO().getValues());\n-                        }\n-                        break;\n-\n-                    case DELETE:\n-                    default:\n-                        if (virAttr == null) {\n-                            LOG.debug(\"No virtual attribute found for schema {}\", virSchema.getKey());\n-                        } else {\n-                            any.remove(virAttr);\n-                            virAttrDAO.delete(virAttr);\n-                        }\n-\n-                        for (ExternalResource resource : externalResources) {\n-                            for (MappingItem mapItem\n-                                    : MappingUtils.getPropagationMappingItems(resource.getProvision(any.getType()))) {\n \n-                                if (virSchema.getKey().equals(mapItem.getIntAttrName())\n-                                        && mapItem.getIntMappingType() == anyUtils.virIntMappingType()) {\n+        for (Map.Entry<Provision, Set<VirSchema>> entry : toRead.entrySet()) {\n+            LOG.debug(\"About to read from {}: {}\", entry.getKey(), entry.getValue());\n \n-                                    propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n-\n-                                    // Using virtual attribute as ConnObjectKey must be avoided\n-                                    if (mapItem.isConnObjectKey()\n-                                            && virAttr != null && !virAttr.getValues().isEmpty()) {\n-\n-                                        propByRes.addOldConnObjectKey(\n-                                                resource.getKey(), virAttr.getValues().get(0).toString());\n-                                    }\n-                                }\n-                            }\n-                        }\n+            String connObjectKey = MappingUtils.getConnObjectKeyItem(entry.getKey()) == null\n+                    ? null\n+                    : mappingUtils.getConnObjectKeyValue(any, entry.getKey());\n+            if (StringUtils.isBlank(connObjectKey)) {\n+                LOG.error(\"No ConnObjectKey found for {}, ignoring...\", entry.getKey());\n+            } else {\n+                Set<MappingItem> linkingMappingItems = new HashSet<>();\n+                for (VirSchema schema : entry.getValue()) {\n+                    linkingMappingItems.add(schema.asLinkingMappingItem());\n                 }\n-            }\n-        }\n-\n-        return propByRes;\n-    }\n-\n-    @Transactional\n-    @Override\n-    public PropagationByResource updateVirtual(\n-            final Long key, final AnyTypeKind anyTypeKind, final Collection<AttrPatch> vAttrs) {\n-\n-        return updateVirtual(find(key, anyTypeKind), vAttrs);\n-    }\n-\n-    @Override\n-    public void retrieveVirAttrValues(final Any<?, ?, ?> any) {\n-        IntMappingType type = any.getType().getKind() == AnyTypeKind.USER\n-                ? IntMappingType.UserVirtualSchema\n-                : any.getType().getKind() == AnyTypeKind.GROUP\n-                        ? IntMappingType.GroupVirtualSchema\n-                        : IntMappingType.AnyObjectVirtualSchema;\n-\n-        Map<String, ConnectorObject> resources = new HashMap<>();\n-\n-        // -----------------------\n-        // Retrieve virtual attribute values if and only if they have not been retrieved yet\n-        // -----------------------\n-        for (VirAttr<?> virAttr : any.getVirAttrs()) {\n-            // reset value set\n-            if (virAttr.getValues().isEmpty()) {\n-                retrieveVirAttrValue(any, virAttr, type, resources);\n-            }\n-        }\n-        // -----------------------\n-    }\n-\n-    private void retrieveVirAttrValue(\n-            final Any<?, ?, ?> any,\n-            final VirAttr<?> virAttr,\n-            final IntMappingType type,\n-            final Map<String, ConnectorObject> externalResources) {\n-\n-        String schemaName = virAttr.getSchema().getKey();\n-        VirAttrCacheValue virAttrCacheValue = virAttrCache.get(any.getType().getKey(), any.getKey(), schemaName);\n-\n-        LOG.debug(\"Retrieve values for virtual attribute {} ({})\", schemaName, type);\n-\n-        if (virAttrCache.isValidEntry(virAttrCacheValue)) {\n-            // cached ...\n-            LOG.debug(\"Values found in cache {}\", virAttrCacheValue);\n-            virAttr.getValues().clear();\n-            virAttr.getValues().addAll(new ArrayList<>(virAttrCacheValue.getValues()));\n-        } else {\n-            // not cached ...\n-            LOG.debug(\"Need one or more remote connections\");\n-\n-            VirAttrCacheValue toBeCached = new VirAttrCacheValue();\n-\n-            for (ExternalResource resource : getTargetResources(virAttr, type, any.getType())) {\n-                Provision provision = resource.getProvision(any.getType());\n-                LOG.debug(\"Search values into {},{}\", resource, provision);\n \n+                Connector connector = connFactory.getConnector(entry.getKey().getResource());\n                 try {\n-                    List<MappingItem> mapItems = MappingUtils.getBothMappingItems(provision);\n+                    ConnectorObject connectorObject = connector.getObject(\n+                            entry.getKey().getObjectClass(),\n+                            new Uid(connObjectKey),\n+                            connector.getOperationOptions(linkingMappingItems.iterator()));\n \n-                    ConnectorObject connectorObject;\n-                    if (externalResources.containsKey(resource.getKey())) {\n-                        connectorObject = externalResources.get(resource.getKey());\n+                    if (connectorObject == null) {\n+                        LOG.debug(\"No read from {} about {}\", entry.getKey(), connObjectKey);\n                     } else {\n-                        LOG.debug(\"Perform connection to {}\", resource.getKey());\n-                        String connObjectKey = MappingUtils.getConnObjectKeyItem(provision) == null\n-                                ? null\n-                                : mappingUtils.getConnObjectKeyValue(any, provision);\n-\n-                        if (StringUtils.isBlank(connObjectKey)) {\n-                            throw new IllegalArgumentException(\"No ConnObjectKey found for \" + resource.getKey());\n-                        }\n-\n-                        Connector connector = connFactory.getConnector(resource);\n-                        connectorObject = connector.getObject(\n-                                provision.getObjectClass(),\n-                                new Uid(connObjectKey),\n-                                connector.getOperationOptions(MappingUtils.getMatchingMappingItems(mapItems, type)));\n-                        externalResources.put(resource.getKey(), connectorObject);\n-                    }\n-\n-                    if (connectorObject != null) {\n-                        // the same virtual attribute could be mapped with one or more external attributes\n-                        for (MappingItem mapItem : MappingUtils.getMatchingMappingItems(mapItems, schemaName, type)) {\n-                            Attribute attr = connectorObject.getAttributeByName(mapItem.getExtAttrName());\n-                            if (attr != null && attr.getValue() != null) {\n-                                for (Object obj : attr.getValue()) {\n-                                    if (obj != null) {\n-                                        virAttr.getValues().add(obj.toString());\n-                                    }\n-                                }\n+                        for (VirSchema schema : entry.getValue()) {\n+                            Attribute attr = connectorObject.getAttributeByName(schema.getExtAttrName());\n+                            if (attr != null) {\n+                                VirAttrCacheValue virAttrCacheValue = new VirAttrCacheValue();\n+                                virAttrCacheValue.setValues(attr.getValue());\n+                                virAttrCache.put(any.getType().getKey(), any.getKey(), schema.getKey(),\n+                                        virAttrCacheValue);\n+                                LOG.debug(\"Values for {} set in cache: {}\", schema, virAttrCacheValue);\n+\n+                                result.put(schema, virAttrCacheValue.getValues());\n                             }\n                         }\n-\n-                        toBeCached.setResourceValues(resource.getKey(), new HashSet<>(virAttr.getValues()));\n-\n-                        LOG.debug(\"Retrieved values {}\", virAttr.getValues());\n                     }\n                 } catch (Exception e) {\n-                    LOG.error(\"Error reading connector object from {}\", resource.getKey(), e);\n-\n-                    if (virAttrCacheValue != null) {\n-                        toBeCached.forceExpiring();\n-                        LOG.debug(\"Search for a cached value (even expired!) ...\");\n-                        final Set<String> cachedValues = virAttrCacheValue.getValues(resource.getKey());\n-                        if (cachedValues != null) {\n-                            LOG.debug(\"Use cached value {}\", cachedValues);\n-                            virAttr.getValues().addAll(cachedValues);\n-                            toBeCached.setResourceValues(resource.getKey(), new HashSet<>(cachedValues));\n-                        }\n-                    }\n+                    LOG.error(\"Error reading from {}\", entry.getKey(), e);\n                 }\n             }\n-\n-            virAttrCache.put(any.getType().getKey(), any.getKey(), schemaName, toBeCached);\n         }\n+\n+        return result;\n     }\n \n-    private Collection<ExternalResource> getTargetResources(\n-            final VirAttr<?> attr, final IntMappingType type, final AnyType anyType) {\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<String> getValues(final Any<?, ?> any, final VirSchema schema) {\n+        if (!any.getAllowedVirSchemas().contains(schema)) {\n+            LOG.debug(\"{} not allowed for {}\", schema, any);\n+            return Collections.emptyList();\n+        }\n \n-        return CollectionUtils.select(getAllResources(attr.getOwner()), new Predicate<ExternalResource>() {\n+        return ListUtils.emptyIfNull(getValues(any, Collections.singleton(schema)).get(schema));\n+    }\n \n-            @Override\n-            public boolean evaluate(final ExternalResource resource) {\n-                return resource.getProvision(anyType) != null\n-                        && !MappingUtils.getMatchingMappingItems(\n-                                MappingUtils.getBothMappingItems(resource.getProvision(anyType)),\n-                                attr.getSchema().getKey(), type).isEmpty();\n-            }\n-        });\n+    @Transactional(readOnly = true)\n+    @Override\n+    public Map<VirSchema, List<String>> getValues(final Any<?, ?> any) {\n+        return getValues(any, any.getAllowedVirSchemas());\n     }\n }"},{"sha":"93a0b31b890899d43a40bb393ce2ce2b01dad290","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":57,"deletions":81,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -42,6 +42,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n import org.apache.syncope.core.persistence.api.dao.DerAttrDAO;\n@@ -53,16 +54,13 @@\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.VirAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.misc.ConnObjectUtils;\n@@ -80,6 +78,7 @@\n import org.apache.syncope.core.persistence.api.entity.Membership;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Relationship;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n@@ -129,9 +128,6 @@ abstract class AbstractAnyDataBinder {\n     @Autowired\n     protected DerAttrDAO derAttrDAO;\n \n-    @Autowired\n-    protected VirAttrDAO virAttrDAO;\n-\n     @Autowired\n     protected PlainAttrValueDAO plainAttrValueDAO;\n \n@@ -159,7 +155,7 @@ abstract class AbstractAnyDataBinder {\n     @Autowired\n     protected MappingUtils mappingUtils;\n \n-    protected void setRealm(final Any<?, ?, ?> any, final AnyPatch anyPatch) {\n+    protected void setRealm(final Any<?, ?> any, final AnyPatch anyPatch) {\n         if (anyPatch.getRealm() != null && StringUtils.isNotBlank(anyPatch.getRealm().getValue())) {\n             Realm newRealm = realmDAO.find(anyPatch.getRealm().getValue());\n             if (newRealm == null) {\n@@ -225,7 +221,7 @@ private void fillAttr(final List<String> values, final AnyUtils anyUtils,\n         }\n     }\n \n-    private List<String> evaluateMandatoryCondition(final Provision provision, final Any<?, ?, ?> any) {\n+    private List<String> evaluateMandatoryCondition(final Provision provision, final Any<?, ?> any) {\n         List<String> missingAttrNames = new ArrayList<>();\n \n         if (provision != null) {\n@@ -235,7 +231,7 @@ private List<String> evaluateMandatoryCondition(final Provision provision, final\n                         || item.getPurpose() == MappingPurpose.BOTH)) {\n \n                     List<PlainAttrValue> values = mappingUtils.getIntValues(\n-                            provision, item, Collections.<Any<?, ?, ?>>singletonList(any), null);\n+                            provision, item, Collections.<Any<?, ?>>singletonList(any));\n                     if (values.isEmpty() && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), any)) {\n                         missingAttrNames.add(item.getIntAttrName());\n                     }\n@@ -247,7 +243,7 @@ private List<String> evaluateMandatoryCondition(final Provision provision, final\n     }\n \n     private SyncopeClientException checkMandatoryOnResources(\n-            final Any<?, ?, ?> any, final Set<ExternalResource> resources) {\n+            final Any<?, ?> any, final Set<ExternalResource> resources) {\n \n         SyncopeClientException reqValMissing = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n@@ -266,7 +262,7 @@ private SyncopeClientException checkMandatoryOnResources(\n         return reqValMissing;\n     }\n \n-    private SyncopeClientException checkMandatory(final Any<?, ?, ?> any) {\n+    private SyncopeClientException checkMandatory(final Any<?, ?> any) {\n         SyncopeClientException reqValMissing = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n         // Check if there is some mandatory schema defined for which no value has been provided\n@@ -284,7 +280,7 @@ private SyncopeClientException checkMandatory(final Any<?, ?, ?> any) {\n         return reqValMissing;\n     }\n \n-    private Set<ExternalResource> getAllResources(final Any<?, ?, ?> any) {\n+    private Set<ExternalResource> getAllResources(final Any<?, ?> any) {\n         Set<ExternalResource> resources = new HashSet<>();\n \n         if (any instanceof User) {\n@@ -323,21 +319,26 @@ private void processAttrPatch(final Any any, final AttrPatch patch, final PlainS\n \n         switch (patch.getOperation()) {\n             case ADD_REPLACE:\n-                virAttrHander.updateOnResourcesIfMappingMatches(\n-                        any, schema.getKey(), resources, anyUtils.plainIntMappingType(), propByRes);\n-\n                 // 1.1 remove values\n-                Collection<Long> valuesToBeRemoved = attr.getSchema().isUniqueConstraint()\n-                        ? Collections.singleton(attr.getUniqueValue().getKey())\n-                        : CollectionUtils.collect(attr.getValues(), new Transformer<PlainAttrValue, Long>() {\n-\n-                            @Override\n-                            public Long transform(final PlainAttrValue input) {\n-                                return input.getKey();\n-                            }\n-                        });\n-                for (Long attrValueKey : valuesToBeRemoved) {\n-                    plainAttrValueDAO.delete(attrValueKey, anyUtils.plainAttrValueClass());\n+                if (attr.getSchema().isUniqueConstraint()) {\n+                    if (attr.getUniqueValue() != null\n+                            && !patch.getAttrTO().getValues().isEmpty()\n+                            && !patch.getAttrTO().getValues().get(0).equals(attr.getUniqueValue().getValueAsString())) {\n+\n+                        plainAttrValueDAO.delete(attr.getUniqueValue().getKey(), anyUtils.plainAttrUniqueValueClass());\n+                    }\n+                } else {\n+                    Collection<Long> valuesToBeRemoved = CollectionUtils.collect(attr.getValues(),\n+                            new Transformer<PlainAttrValue, Long>() {\n+\n+                                @Override\n+                                public Long transform(final PlainAttrValue input) {\n+                                    return input.getKey();\n+                                }\n+                            });\n+                    for (Long attrValueKey : valuesToBeRemoved) {\n+                        plainAttrValueDAO.delete(attrValueKey, anyUtils.plainAttrValueClass());\n+                    }\n                 }\n \n                 // 1.2 add values\n@@ -359,22 +360,20 @@ public Long transform(final PlainAttrValue input) {\n             default:\n                 any.remove(attr);\n                 plainAttrDAO.delete(attr.getKey(), anyUtils.plainAttrClass());\n+        }\n \n-                for (ExternalResource resource : resources) {\n-                    for (MappingItem mapItem\n-                            : MappingUtils.getPropagationMappingItems(resource.getProvision(any.getType()))) {\n-\n-                        if (schema.getKey().equals(mapItem.getIntAttrName())\n-                                && mapItem.getIntMappingType() == anyUtils.plainIntMappingType()) {\n+        for (ExternalResource resource : resources) {\n+            for (MappingItem mapItem : MappingUtils.getPropagationMappingItems(resource.getProvision(any.getType()))) {\n+                if (schema.getKey().equals(mapItem.getIntAttrName())\n+                        && mapItem.getIntMappingType() == anyUtils.plainIntMappingType()) {\n \n-                            propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n+                    propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n \n-                            if (mapItem.isConnObjectKey() && !attr.getValuesAsStrings().isEmpty()) {\n-                                propByRes.addOldConnObjectKey(resource.getKey(), attr.getValuesAsStrings().get(0));\n-                            }\n-                        }\n+                    if (mapItem.isConnObjectKey() && !attr.getValuesAsStrings().isEmpty()) {\n+                        propByRes.addOldConnObjectKey(resource.getKey(), attr.getValuesAsStrings().get(0));\n                     }\n                 }\n+            }\n         }\n     }\n \n@@ -400,36 +399,26 @@ private void processAttrPatch(final Any any, final AttrPatch patch, final DerSch\n             }\n         }\n \n-        switch (patch.getOperation()) {\n-            case ADD_REPLACE:\n-                virAttrHander.updateOnResourcesIfMappingMatches(\n-                        any, schema.getKey(), resources, anyUtils.derIntMappingType(), propByRes);\n-                break;\n-\n-            case DELETE:\n-            default:\n-                derAttrDAO.delete(attr);\n-\n-                for (ExternalResource resource : resources) {\n-                    for (MappingItem mapItem\n-                            : MappingUtils.getPropagationMappingItems(resource.getProvision(any.getType()))) {\n+        if (patch.getOperation() == PatchOperation.DELETE) {\n+            derAttrDAO.delete(attr);\n+        }\n \n-                        if (schema.getKey().equals(mapItem.getIntAttrName())\n-                                && mapItem.getIntMappingType() == anyUtils.derIntMappingType()) {\n+        for (ExternalResource resource : resources) {\n+            for (MappingItem mapItem : MappingUtils.getPropagationMappingItems(resource.getProvision(any.getType()))) {\n+                if (schema.getKey().equals(mapItem.getIntAttrName())\n+                        && mapItem.getIntMappingType() == anyUtils.derIntMappingType()) {\n \n-                            propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n+                    propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n \n-                            if (mapItem.isConnObjectKey() && !attr.getValue(any.getPlainAttrs()).isEmpty()) {\n-                                propByRes.addOldConnObjectKey(resource.getKey(), attr.getValue(any.getPlainAttrs()));\n-                            }\n-                        }\n+                    if (mapItem.isConnObjectKey() && !attr.getValue(any.getPlainAttrs()).isEmpty()) {\n+                        propByRes.addOldConnObjectKey(resource.getKey(), attr.getValue(any.getPlainAttrs()));\n                     }\n                 }\n+            }\n         }\n     }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    protected PropagationByResource fill(final Any any, final AnyPatch anyPatch, final AnyUtils anyUtils,\n+    protected PropagationByResource fill(final Any<?, ?> any, final AnyPatch anyPatch, final AnyUtils anyUtils,\n             final SyncopeClientCompositeException scce) {\n \n         PropagationByResource propByRes = new PropagationByResource();\n@@ -576,25 +565,12 @@ protected void fill(\n             }\n         }\n \n-        // 3. virtual attributes\n-        for (AttrTO vattrTO : anyTO.getVirAttrs()) {\n-            VirSchema virSchema = virAttrHander.getVirSchema(vattrTO.getSchema());\n-            if (virSchema != null) {\n-                VirAttr virAttr = anyUtils.newVirAttr();\n-                virAttr.setOwner(any);\n-                virAttr.setSchema(virSchema);\n-                any.add(virAttr);\n-            }\n-        }\n-\n         SyncopeClientException requiredValuesMissing = checkMandatory(any);\n         if (!requiredValuesMissing.isEmpty()) {\n             scce.addException(requiredValuesMissing);\n         }\n \n-        virAttrHander.createVirtual(any, anyTO.getVirAttrs());\n-\n-        // 4. realm & resources\n+        // 3. realm & resources\n         Realm realm = realmDAO.find(anyTO.getRealm());\n         if (realm == null) {\n             SyncopeClientException noRealm = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n@@ -628,7 +604,7 @@ protected void fillTO(final AnyTO anyTO,\n             final Collection<? extends AnyTypeClass> auxClasses,\n             final Collection<? extends PlainAttr<?>> attrs,\n             final Collection<? extends DerAttr<?>> derAttrs,\n-            final Collection<? extends VirAttr<?>> virAttrs,\n+            final Map<VirSchema, List<String>> virAttrs,\n             final Collection<? extends ExternalResource> resources) {\n \n         anyTO.setRealm(realmFullPath);\n@@ -659,11 +635,11 @@ public String transform(final AnyTypeClass role) {\n             anyTO.getDerAttrs().add(attrTO);\n         }\n \n-        for (VirAttr<?> virAttr : virAttrs) {\n+        for (Map.Entry<VirSchema, List<String>> entry : virAttrs.entrySet()) {\n             AttrTO attrTO = new AttrTO();\n-            attrTO.setSchema(virAttr.getSchema().getKey());\n-            attrTO.getValues().addAll(virAttr.getValues());\n-            attrTO.setReadonly(virAttr.getSchema().isReadonly());\n+            attrTO.setSchema(entry.getKey().getKey());\n+            attrTO.getValues().addAll(entry.getValue());\n+            attrTO.setReadonly(entry.getKey().isReadonly());\n \n             anyTO.getVirAttrs().add(attrTO);\n         }\n@@ -673,21 +649,21 @@ public String transform(final AnyTypeClass role) {\n         }\n     }\n \n-    protected RelationshipTO getRelationshipTO(final Relationship<? extends Any<?, ?, ?>, AnyObject> relationship) {\n+    protected RelationshipTO getRelationshipTO(final Relationship<? extends Any<?, ?>, AnyObject> relationship) {\n         return new RelationshipTO.Builder().\n                 left(relationship.getLeftEnd().getType().getKey(), relationship.getLeftEnd().getKey()).\n                 right(relationship.getRightEnd().getType().getKey(), relationship.getRightEnd().getKey()).\n                 build();\n     }\n \n-    protected MembershipTO getMembershipTO(final Membership<? extends Any<?, ?, ?>> membership) {\n+    protected MembershipTO getMembershipTO(final Membership<? extends Any<?, ?>> membership) {\n         return new MembershipTO.Builder().\n                 left(membership.getLeftEnd().getType().getKey(), membership.getLeftEnd().getKey()).\n                 group(membership.getRightEnd().getKey(), membership.getRightEnd().getName()).\n                 build();\n     }\n \n-    protected Map<String, String> getConnObjectKeys(final Any<?, ?, ?> any) {\n+    protected Map<String, String> getConnObjectKeys(final Any<?, ?> any) {\n         Map<String, String> connObjectKeys = new HashMap<>();\n \n         Iterable<? extends ExternalResource> iterable = any instanceof User"},{"sha":"2dca6e4504ce043c20ebbc1f3a9d60787aafd8ba","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -19,7 +19,9 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -41,6 +43,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n@@ -75,12 +78,12 @@ public AnyObjectTO getAnyObjectTO(final AnyObject anyObject, final boolean detai\n \n         BeanUtils.copyProperties(anyObject, anyObjectTO, IGNORE_PROPERTIES);\n \n-        if (details) {\n-            virAttrHander.retrieveVirAttrValues(anyObject);\n-        }\n+        Map<VirSchema, List<String>> virAttrValues = details\n+                ? virAttrHander.getValues(anyObject)\n+                : Collections.<VirSchema, List<String>>emptyMap();\n \n         fillTO(anyObjectTO, anyObject.getRealm().getFullPath(), anyObject.getAuxClasses(),\n-                anyObject.getPlainAttrs(), anyObject.getDerAttrs(), anyObject.getVirAttrs(),\n+                anyObject.getPlainAttrs(), anyObject.getDerAttrs(), virAttrValues,\n                 anyObjectDAO.findAllResources(anyObject));\n \n         if (details) {"},{"sha":"620cdf8a689b4d691e2b4300ead7fcb07eba61c5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import java.util.Collections;\n+import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n@@ -34,6 +36,7 @@\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.DynGroupMembership;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n import org.springframework.stereotype.Component;\n@@ -203,12 +206,12 @@ public GroupTO getGroupTO(final Group group, final boolean details) {\n             groupTO.setGroupOwner(group.getGroupOwner().getKey());\n         }\n \n-        if (details) {\n-            virAttrHander.retrieveVirAttrValues(group);\n-        }\n+        Map<VirSchema, List<String>> virAttrValues = details\n+                ? virAttrHander.getValues(group)\n+                : Collections.<VirSchema, List<String>>emptyMap();\n \n         fillTO(groupTO, group.getRealm().getFullPath(), group.getAuxClasses(),\n-                group.getPlainAttrs(), group.getDerAttrs(), group.getVirAttrs(), group.getResources());\n+                group.getPlainAttrs(), group.getDerAttrs(), virAttrValues, group.getResources());\n \n         if (group.getADynMembership() != null) {\n             groupTO.setADynMembershipCond(group.getADynMembership().getFIQLCond());"},{"sha":"d04dfd34cf6568decae2d4ff66df79ca26fd6564","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":38,"deletions":10,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -21,9 +21,8 @@\n import org.apache.syncope.core.provisioning.api.data.ResourceDataBinder;\n import java.util.Collection;\n import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -50,7 +49,9 @@\n import org.slf4j.LoggerFactory;\n import org.apache.syncope.core.misc.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -75,6 +76,9 @@ public class ResourceDataBinderImpl implements ResourceDataBinder {\n     @Autowired\n     private PolicyDAO policyDAO;\n \n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n@@ -112,7 +116,8 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n         for (ProvisionTO provisionTO : resourceTO.getProvisions()) {\n             AnyType anyType = anyTypeDAO.find(provisionTO.getAnyType());\n             if (anyType == null) {\n-                LOG.debug(\"Invalid AnyType specified {}, ignoring...\", provisionTO.getAnyType());\n+                LOG.debug(\"Invalid {} specified {}, ignoring...\",\n+                        AnyType.class.getSimpleName(), provisionTO.getAnyType());\n             } else {\n                 Provision provision = resource.getProvision(anyType);\n                 if (provision == null) {\n@@ -124,7 +129,7 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n \n                 if (provisionTO.getObjectClass() == null) {\n                     SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidProvision);\n-                    sce.getElements().add(\"Null ObjectClass\");\n+                    sce.getElements().add(\"Null \" + ObjectClass.class.getSimpleName());\n                     throw sce;\n                 }\n                 provision.setObjectClass(new ObjectClass(provisionTO.getObjectClass()));\n@@ -146,17 +151,36 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n                     }\n                     populateMapping(provisionTO.getMapping(), mapping, entityFactory.newEntity(MappingItem.class));\n                 }\n+\n+                if (provisionTO.getVirSchemas().isEmpty()) {\n+                    for (VirSchema schema : virSchemaDAO.findByProvision(provision)) {\n+                        virSchemaDAO.delete(schema.getKey());\n+                    }\n+                } else {\n+                    for (String schemaName : provisionTO.getVirSchemas()) {\n+                        VirSchema schema = virSchemaDAO.find(schemaName);\n+                        if (schema == null) {\n+                            LOG.debug(\"Invalid {} specified: {}, ignoring...\",\n+                                    VirSchema.class.getSimpleName(), schemaName);\n+                        } else {\n+                            schema.setProvision(provision);\n+                        }\n+                    }\n+                }\n             }\n         }\n \n-        // 2. remove all abouts not contained in the TO\n-        CollectionUtils.filter(resource.getProvisions(), new Predicate<Provision>() {\n+        // 2. remove all provisions not contained in the TO\n+        for (Iterator<? extends Provision> itor = resource.getProvisions().iterator(); itor.hasNext();) {\n+            Provision provision = itor.next();\n+            if (resourceTO.getProvision(provision.getAnyType().getKey()) == null) {\n+                for (VirSchema schema : virSchemaDAO.findByProvision(provision)) {\n+                    virSchemaDAO.delete(schema.getKey());\n+                }\n \n-            @Override\n-            public boolean evaluate(final Provision provision) {\n-                return resourceTO.getProvision(provision.getAnyType().getKey()) != null;\n+                itor.remove();\n             }\n-        });\n+        }\n \n         resource.setCreateTraceLevel(resourceTO.getCreateTraceLevel());\n         resource.setUpdateTraceLevel(resourceTO.getUpdateTraceLevel());\n@@ -310,6 +334,10 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n                 populateMappingTO(provision.getMapping(), mappingTO);\n             }\n \n+            for (VirSchema virSchema : virSchemaDAO.findByProvision(provision)) {\n+                provisionTO.getVirSchemas().add(virSchema.getKey());\n+            }\n+\n             resourceTO.getProvisions().add(provisionTO);\n         }\n "},{"sha":"006a998a21ffd17bc7b964c374abe51360c4d960","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SchemaDataBinderImpl.java","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -35,11 +35,13 @@\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -50,7 +52,7 @@ public class SchemaDataBinderImpl implements SchemaDataBinder {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SchemaDataBinder.class);\n \n-    private static final String[] IGNORE_PROPERTIES = { \"anyTypeClass\" };\n+    private static final String[] IGNORE_PROPERTIES = { \"anyTypeClass\", \"provision\" };\n \n     @Autowired\n     private AnyTypeClassDAO anyTypeClassDAO;\n@@ -64,6 +66,9 @@ public class SchemaDataBinderImpl implements SchemaDataBinder {\n     @Autowired\n     private VirSchemaDAO virSchemaDAO;\n \n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n@@ -235,6 +240,14 @@ private VirSchema fill(final VirSchema schema, final VirSchemaTO schemaTO) {\n             merged.setAnyTypeClass(null);\n         }\n \n+        Provision provision = resourceDAO.findProvision(schemaTO.getProvision());\n+        if (provision == null) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSchemaDefinition);\n+            sce.getElements().add(\"Provision \" + schemaTO.getProvision() + \" not found\");\n+            throw sce;\n+        }\n+        merged.setProvision(provision);\n+\n         return merged;\n     }\n \n@@ -253,6 +266,7 @@ public VirSchemaTO getVirSchemaTO(final VirSchema schema) {\n         VirSchemaTO schemaTO = new VirSchemaTO();\n         BeanUtils.copyProperties(schema, schemaTO, IGNORE_PROPERTIES);\n         schemaTO.setAnyTypeClass(schema.getAnyTypeClass() == null ? null : schema.getAnyTypeClass().getKey());\n+        schemaTO.setProvision(schema.getProvision().getKey());\n \n         return schemaTO;\n     }"},{"sha":"4bb7bdfc90a3265152e8b41bab87a56f5a04b44b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -19,8 +19,10 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import java.util.Collection;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import javax.annotation.Resource;\n@@ -57,6 +59,7 @@\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n@@ -431,12 +434,12 @@ public UserTO getUserTO(final User user, final boolean details) {\n             userTO.setSecurityQuestion(user.getSecurityQuestion().getKey());\n         }\n \n-        if (details) {\n-            virAttrHander.retrieveVirAttrValues(user);\n-        }\n+        Map<VirSchema, List<String>> virAttrValues = details\n+                ? virAttrHander.getValues(user)\n+                : Collections.<VirSchema, List<String>>emptyMap();\n \n         fillTO(userTO, user.getRealm().getFullPath(), user.getAuxClasses(),\n-                user.getPlainAttrs(), user.getDerAttrs(), user.getVirAttrs(), userDAO.findAllResources(user));\n+                user.getPlainAttrs(), user.getDerAttrs(), virAttrValues, userDAO.findAllResources(user));\n \n         if (details) {\n             // roles"},{"sha":"7c6d34c1dade45704db42a6f6d29c51172da51ab","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/TaskJob.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -21,7 +21,7 @@\n import java.util.Date;\n import java.util.concurrent.atomic.AtomicReference;\n import org.apache.commons.lang3.ClassUtils;\n-import org.apache.syncope.core.misc.DataFormat;\n+import org.apache.syncope.core.misc.FormatUtils;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.provisioning.api.job.JobInstanceLoader;\n@@ -114,7 +114,7 @@ public void interrupt() throws UnableToInterruptJobException {\n         if (thread == null) {\n             LOG.warn(\"Unable to retrieve the thread of the current job execution\");\n         } else {\n-            LOG.info(\"Interrupting job from thread {} at {} \", thread.getId(), DataFormat.format(new Date()));\n+            LOG.info(\"Interrupting job from thread {} at {} \", thread.getId(), FormatUtils.format(new Date()));\n \n             if (interruptMaxRetries < 1) {\n                 interruptMaxRetries = 1;"},{"sha":"fd4af1b143e69da491102f76596ec32d7ec149f3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/NotificationManagerImpl.java","status":"modified","additions":15,"deletions":11,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -50,16 +50,17 @@\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.persistence.api.entity.user.UDerAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.velocity.VelocityContext;\n import org.apache.velocity.app.VelocityEngine;\n@@ -76,9 +77,6 @@\n @Transactional(rollbackFor = { Throwable.class })\n public class NotificationManagerImpl implements NotificationManager {\n \n-    /**\n-     * Logger.\n-     */\n     private static final Logger LOG = LoggerFactory.getLogger(NotificationManager.class);\n \n     public static final String MAIL_TEMPLATES = \"mailTemplates/\";\n@@ -87,6 +85,9 @@ public class NotificationManagerImpl implements NotificationManager {\n \n     public static final String MAIL_TEMPLATE_TEXT_SUFFIX = \".txt.vm\";\n \n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n     /**\n      * Notification DAO.\n      */\n@@ -169,11 +170,11 @@ public long getMaxRetries() {\n      */\n     private NotificationTask getNotificationTask(\n             final Notification notification,\n-            final Any<?, ?, ?> any,\n+            final Any<?, ?> any,\n             final Map<String, Object> model) {\n \n         if (any != null) {\n-            virAttrHander.retrieveVirAttrValues(any);\n+            virAttrHander.getValues(any);\n         }\n \n         List<User> recipients = new ArrayList<>();\n@@ -191,7 +192,7 @@ private NotificationTask getNotificationTask(\n         Set<String> recipientEmails = new HashSet<>();\n         List<UserTO> recipientTOs = new ArrayList<>(recipients.size());\n         for (User recipient : recipients) {\n-            virAttrHander.retrieveVirAttrValues(recipient);\n+            virAttrHander.getValues(recipient);\n \n             String email = getRecipientEmail(notification.getRecipientAttrType(),\n                     notification.getRecipientAttrName(), recipient);\n@@ -267,7 +268,7 @@ public List<NotificationTask> createTasks(\n             final Object output,\n             final Object... input) {\n \n-        Any<?, ?, ?> any = null;\n+        Any<?, ?> any = null;\n \n         if (before instanceof UserTO) {\n             any = userDAO.find(((UserTO) before).getKey());\n@@ -357,9 +358,12 @@ private String getRecipientEmail(\n                 break;\n \n             case UserVirtualSchema:\n-                UVirAttr virAttr = user.getVirAttr(recipientAttrName);\n-                if (virAttr != null) {\n-                    email = virAttr.getValues().isEmpty() ? null : virAttr.getValues().get(0);\n+                VirSchema schema = virSchemaDAO.find(recipientAttrName);\n+                if (schema == null) {\n+                    LOG.warn(\"Ignoring non existing {} {}\", VirSchema.class.getSimpleName(), recipientAttrName);\n+                } else {\n+                    List<String> virAttrValues = virAttrHander.getValues(user, schema);\n+                    email = virAttrValues.isEmpty() ? null : virAttrValues.get(0);\n                 }\n                 break;\n "},{"sha":"316f91a597e1190bf2f126e089139b048d6970a6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":60,"deletions":29,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -27,6 +27,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.collections4.IteratorUtils;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n@@ -49,12 +50,17 @@\n import org.apache.syncope.core.misc.ExceptionUtils2;\n import org.apache.syncope.core.misc.MappingUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n+import org.apache.syncope.core.provisioning.api.cache.VirAttrCacheValue;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.identityconnectors.framework.common.exceptions.ConnectorException;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -110,6 +116,9 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask\n     @Autowired\n     protected TaskDAO taskDAO;\n \n+    @Autowired\n+    protected VirSchemaDAO virSchemaDAO;\n+\n     /**\n      * Notification Manager.\n      */\n@@ -125,6 +134,9 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask\n     @Autowired\n     protected EntityFactory entityFactory;\n \n+    @Autowired\n+    protected VirAttrCache virAttrCache;\n+\n     @Override\n     public TaskExec execute(final PropagationTask task) {\n         return execute(task, null);\n@@ -149,12 +161,15 @@ protected List<PropagationActions> getPropagationActions(final ExternalResource\n     }\n \n     /**\n-     * Transform a\n-     * <code>Collection</code> of {@link Attribute} instances into a {@link Map}. The key to each element in the map is\n-     * the <i>name</i> of an\n-     * <code>Attribute</code>. The value of each element in the map is the\n-     * <code>Attribute</code> instance with that name. <br/> Different from the original because: <ul> <li>map keys are\n-     * transformed toUpperCase()</li> <li>returned map is mutable</li> </ul>\n+     * Transform a {@link Collection} of {@link Attribute} instances into a {@link Map}.\n+     * The key to each element in the map is the {@code name} of an {@link Attribute}.\n+     * The value of each element in the map is the {@link Attribute} instance with that name.\n+     * <br/>\n+     * Different from the original because:\n+     * <ul>\n+     * <li>map keys are transformed toUpperCase()</li>\n+     * <li>returned map is mutable</li>\n+     * </ul>\n      *\n      * @param attributes set of attribute to transform to a map.\n      * @return a map of string and attribute.\n@@ -173,7 +188,7 @@ protected void createOrUpdate(\n             final PropagationTask task,\n             final ConnectorObject beforeObj,\n             final Connector connector,\n-            final Set<String> propagationAttempted) {\n+            final Boolean[] propagationAttempted) {\n \n         // set of attributes to be propagated\n         Set<Attribute> attributes = new HashSet<>(task.getAttributes());\n@@ -201,14 +216,10 @@ protected void createOrUpdate(\n \n         if (beforeObj == null) {\n             LOG.debug(\"Create {} on {}\", attributes, task.getResource().getKey());\n-            connector.create(\n-                    new ObjectClass(task.getObjectClassName()),\n-                    attributes,\n-                    null,\n-                    propagationAttempted);\n+            connector.create(new ObjectClass(task.getObjectClassName()), attributes, null, propagationAttempted);\n         } else {\n             // 1. check if rename is really required\n-            final Name newName = (Name) AttributeUtil.find(Name.NAME, attributes);\n+            Name newName = (Name) AttributeUtil.find(Name.NAME, attributes);\n \n             LOG.debug(\"Rename required with value {}\", newName);\n \n@@ -254,8 +265,8 @@ protected void createOrUpdate(\n         }\n     }\n \n-    protected Any<?, ?, ?> getAny(final PropagationTask task) {\n-        Any<?, ?, ?> any = null;\n+    protected Any<?, ?> getAny(final PropagationTask task) {\n+        Any<?, ?> any = null;\n \n         if (task.getAnyKey() != null) {\n             switch (task.getAnyTypeKind()) {\n@@ -289,8 +300,11 @@ protected void createOrUpdate(\n         return any;\n     }\n \n-    protected void delete(final PropagationTask task, final ConnectorObject beforeObj,\n-            final Connector connector, final Set<String> propagationAttempted) {\n+    protected void delete(\n+            final PropagationTask task,\n+            final ConnectorObject beforeObj,\n+            final Connector connector,\n+            final Boolean[] propagationAttempted) {\n \n         if (beforeObj == null) {\n             LOG.debug(\"{} not found on external resource: ignoring delete\", task.getConnObjectKey());\n@@ -310,7 +324,7 @@ protected void delete(final PropagationTask task, final ConnectorObject beforeOb\n              * update, this user / group used to have the current resource assigned by more than one mean (for example,\n              * two different memberships with the same resource).\n              */\n-            Any<?, ?, ?> any = getAny(task);\n+            Any<?, ?> any = getAny(task);\n             Collection<String> resources = any instanceof User\n                     ? userDAO.findAllResourceNames((User) any)\n                     : any instanceof AnyObject\n@@ -321,11 +335,7 @@ protected void delete(final PropagationTask task, final ConnectorObject beforeOb\n             if (!resources.contains(task.getResource().getKey())) {\n                 LOG.debug(\"Delete {} on {}\", beforeObj.getUid(), task.getResource().getKey());\n \n-                connector.delete(\n-                        beforeObj.getObjectClass(),\n-                        beforeObj.getUid(),\n-                        null,\n-                        propagationAttempted);\n+                connector.delete(beforeObj.getObjectClass(), beforeObj.getUid(), null, propagationAttempted);\n             } else {\n                 createOrUpdate(task, beforeObj, connector, propagationAttempted);\n             }\n@@ -345,7 +355,7 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n         String failureReason = null;\n \n         // Flag to state whether any propagation has been attempted\n-        Set<String> propagationAttempted = new HashSet<>();\n+        Boolean[] propagationAttempted = new Boolean[] { false };\n \n         ConnectorObject beforeObj = null;\n         ConnectorObject afterObj = null;\n@@ -411,7 +421,7 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n                 LOG.error(\"While executing KO action on {}\", execution, wft);\n             }\n \n-            propagationAttempted.add(task.getOperation().name().toLowerCase());\n+            propagationAttempted[0] = true;\n \n             for (PropagationActions action : actions) {\n                 action.onError(task, execution, e);\n@@ -434,7 +444,7 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n             execution.setEndDate(new Date());\n \n             if (hasToBeregistered(task, execution)) {\n-                if (propagationAttempted.isEmpty()) {\n+                if (!propagationAttempted[0]) {\n                     LOG.debug(\"No propagation attempted for {}\", execution);\n                 } else {\n                     execution.setTask(task);\n@@ -535,20 +545,41 @@ protected boolean hasToBeregistered(final PropagationTask task, final TaskExec e\n      * @param latest 'FALSE' to retrieve object using old connObjectKey if not null.\n      * @return remote connector object.\n      */\n-    protected ConnectorObject getRemoteObject(final PropagationTask task, final Connector connector,\n-            final Provision provision, final boolean latest) {\n+    protected ConnectorObject getRemoteObject(\n+            final PropagationTask task,\n+            final Connector connector,\n+            final Provision provision,\n+            final boolean latest) {\n \n         String connObjectKey = latest || task.getOldConnObjectKey() == null\n                 ? task.getConnObjectKey()\n                 : task.getOldConnObjectKey();\n \n+        List<MappingItem> linkingMappingItems = new ArrayList<>();\n+        for (VirSchema schema : virSchemaDAO.findByProvision(provision)) {\n+            linkingMappingItems.add(schema.asLinkingMappingItem());\n+        }\n+\n         ConnectorObject obj = null;\n         try {\n             obj = connector.getObject(\n                     task.getOperation(),\n                     new ObjectClass(task.getObjectClassName()),\n                     new Uid(connObjectKey),\n-                    connector.getOperationOptions(MappingUtils.getPropagationMappingItems(provision)));\n+                    connector.getOperationOptions(IteratorUtils.chainedIterator(\n+                                    MappingUtils.getPropagationMappingItems(provision).iterator(),\n+                                    linkingMappingItems.iterator())));\n+\n+            for (MappingItem item : linkingMappingItems) {\n+                Attribute attr = obj.getAttributeByName(item.getExtAttrName());\n+                if (attr == null) {\n+                    virAttrCache.expire(task.getAnyType(), task.getAnyKey(), item.getIntAttrName());\n+                } else {\n+                    VirAttrCacheValue cacheValue = new VirAttrCacheValue();\n+                    cacheValue.setValues(attr.getValue());\n+                    virAttrCache.put(task.getAnyType(), task.getAnyKey(), item.getIntAttrName(), cacheValue);\n+                }\n+            }\n         } catch (TimeoutException toe) {\n             LOG.debug(\"Request timeout\", toe);\n             throw toe;"},{"sha":"77efd287c04955f9a31e520210842c39ad42f77d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":131,"deletions":117,"changes":248,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -29,7 +29,6 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -40,9 +39,7 @@\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n@@ -51,11 +48,15 @@\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n@@ -72,6 +73,9 @@ public class PropagationManagerImpl implements PropagationManager {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(PropagationManager.class);\n \n+    @Autowired\n+    protected VirSchemaDAO virSchemaDAO;\n+\n     @Autowired\n     protected AnyObjectDAO anyObjectDAO;\n \n@@ -102,14 +106,11 @@ public class PropagationManagerImpl implements PropagationManager {\n     @Autowired\n     protected ConnObjectUtils connObjectUtils;\n \n-    @Autowired\n-    protected VirAttrHandler virAttrHandler;\n-\n     @Autowired\n     protected MappingUtils mappingUtils;\n \n-    protected Any<?, ?, ?> find(final AnyTypeKind kind, final Long key) {\n-        AnyDAO<? extends Any<?, ?, ?>> dao;\n+    protected Any<?, ?> find(final AnyTypeKind kind, final Long key) {\n+        AnyDAO<? extends Any<?, ?>> dao;\n         switch (kind) {\n             case ANY_OBJECT:\n                 dao = anyObjectDAO;\n@@ -135,12 +136,7 @@ public List<PropagationTask> getCreateTasks(\n             final Collection<AttrTO> vAttrs,\n             final Collection<String> noPropResourceNames) {\n \n-        Any<?, ?, ?> any = find(kind, key);\n-        if (vAttrs != null && !vAttrs.isEmpty()) {\n-            virAttrHandler.createVirtual(any, vAttrs);\n-        }\n-\n-        return getCreateTasks(any, null, null, propByRes, noPropResourceNames);\n+        return getCreateTasks(find(kind, key), null, null, propByRes, vAttrs, noPropResourceNames);\n     }\n \n     @Override\n@@ -152,19 +148,15 @@ public List<PropagationTask> getUserCreateTasks(\n             final Collection<AttrTO> vAttrs,\n             final Collection<String> noPropResourceNames) {\n \n-        User user = userDAO.authFind(key);\n-        if (vAttrs != null && !vAttrs.isEmpty()) {\n-            virAttrHandler.createVirtual(user, vAttrs);\n-        }\n-\n-        return getCreateTasks(user, password, enable, propByRes, noPropResourceNames);\n+        return getCreateTasks(userDAO.authFind(key), password, enable, propByRes, vAttrs, noPropResourceNames);\n     }\n \n     protected List<PropagationTask> getCreateTasks(\n-            final Any<?, ?, ?> any,\n+            final Any<?, ?> any,\n             final String password,\n             final Boolean enable,\n             final PropagationByResource propByRes,\n+            final Collection<AttrTO> vAttrs,\n             final Collection<String> noPropResourceNames) {\n \n         if (propByRes == null || propByRes.isEmpty()) {\n@@ -175,7 +167,7 @@ protected List<PropagationTask> getCreateTasks(\n             propByRes.get(ResourceOperation.CREATE).removeAll(noPropResourceNames);\n         }\n \n-        return createTasks(any, password, true, null, enable, false, propByRes);\n+        return createTasks(any, password, true, enable, false, propByRes, vAttrs);\n     }\n \n     @Override\n@@ -185,7 +177,7 @@ public List<PropagationTask> getUpdateTasks(\n             final boolean changePwd,\n             final Boolean enable,\n             final PropagationByResource propByRes,\n-            final Collection<AttrPatch> vAttrs,\n+            final Collection<AttrTO> vAttrs,\n             final Collection<String> noPropResourceNames) {\n \n         return getUpdateTasks(find(kind, key), null, changePwd, enable, propByRes, vAttrs, noPropResourceNames);\n@@ -257,31 +249,19 @@ public String transform(final StringPatchItem input) {\n     }\n \n     protected List<PropagationTask> getUpdateTasks(\n-            final Any<?, ?, ?> any,\n+            final Any<?, ?> any,\n             final String password,\n             final boolean changePwd,\n             final Boolean enable,\n             final PropagationByResource propByRes,\n-            final Collection<AttrPatch> vAttrs,\n+            final Collection<AttrTO> vAttrs,\n             final Collection<String> noPropResourceNames) {\n \n-        PropagationByResource localPropByRes = virAttrHandler.updateVirtual(\n-                any,\n-                vAttrs == null ? Collections.<AttrPatch>emptySet() : vAttrs);\n-        localPropByRes.merge(propByRes);\n         if (noPropResourceNames != null) {\n-            localPropByRes.removeAll(noPropResourceNames);\n-        }\n-\n-        Map<String, AttrPatch> vAttrsMap = null;\n-        if (vAttrs != null) {\n-            vAttrsMap = new HashMap<>();\n-            for (AttrPatch attrPatch : vAttrs) {\n-                vAttrsMap.put(attrPatch.getAttrTO().getSchema(), attrPatch);\n-            }\n+            propByRes.removeAll(noPropResourceNames);\n         }\n \n-        return createTasks(any, password, changePwd, vAttrsMap, enable, false, localPropByRes);\n+        return createTasks(any, password, changePwd, enable, false, propByRes, vAttrs);\n     }\n \n     @Override\n@@ -291,7 +271,7 @@ public List<PropagationTask> getDeleteTasks(\n             final PropagationByResource propByRes,\n             final Collection<String> noPropResourceNames) {\n \n-        Any<?, ?, ?> any = find(kind, key);\n+        Any<?, ?> any = find(kind, key);\n \n         PropagationByResource localPropByRes = new PropagationByResource();\n \n@@ -309,109 +289,143 @@ public List<PropagationTask> getDeleteTasks(\n     }\n \n     protected List<PropagationTask> getDeleteTasks(\n-            final Any<?, ?, ?> any,\n+            final Any<?, ?> any,\n             final PropagationByResource propByRes,\n             final Collection<String> noPropResourceNames) {\n \n-        return createTasks(any, null, false, null, false, true, propByRes);\n+        return createTasks(any, null, false, false, true, propByRes, null);\n     }\n \n     /**\n      * Create propagation tasks.\n      *\n-     * @param any user / group to be provisioned\n-     * @param password cleartext password to be provisioned\n+     * @param any to be provisioned\n+     * @param password clear text password to be provisioned\n      * @param changePwd whether password should be included for propagation attributes or not\n-     * @param vAttrs virtual attributes to be maaged\n      * @param enable whether user must be enabled or not\n-     * @param deleteOnResource whether user / group must be deleted anyway from external resource or not\n+     * @param deleteOnResource whether any must be deleted anyway from external resource or not\n      * @param propByRes operation to be performed per resource\n+     * @param vAttrs virtual attributes to be set\n      * @return list of propagation tasks created\n      */\n-    protected List<PropagationTask> createTasks(final Any<?, ?, ?> any,\n+    protected List<PropagationTask> createTasks(final Any<?, ?> any,\n             final String password, final boolean changePwd,\n-            final Map<String, AttrPatch> vAttrs,\n-            final Boolean enable, final boolean deleteOnResource, final PropagationByResource propByRes) {\n+            final Boolean enable, final boolean deleteOnResource, final PropagationByResource propByRes,\n+            final Collection<AttrTO> vAttrs) {\n \n-        LOG.debug(\"Provisioning any {}:\\n{}\", any, propByRes);\n+        LOG.debug(\"Provisioning {}:\\n{}\", any, propByRes);\n \n-        if (!propByRes.get(ResourceOperation.CREATE).isEmpty() && vAttrs != null) {\n-            virAttrHandler.retrieveVirAttrValues(any);\n+        // Avoid duplicates - see javadoc\n+        propByRes.purge();\n+        LOG.debug(\"After purge {}:\\n{}\", any, propByRes);\n+\n+        // Virtual attributes\n+        Set<String> virtualResources = new HashSet<>();\n+        virtualResources.addAll(propByRes.get(ResourceOperation.CREATE));\n+        virtualResources.addAll(propByRes.get(ResourceOperation.UPDATE));\n+        if (any instanceof User) {\n+            virtualResources.addAll(userDAO.findAllResourceNames((User) any));\n+        } else if (any instanceof AnyObject) {\n+            virtualResources.addAll(anyObjectDAO.findAllResourceNames((AnyObject) any));\n+        } else {\n+            virtualResources.addAll(((Group) any).getResourceNames());\n+        }\n \n-            // update vAttrsToBeUpdated as well\n-            for (VirAttr<?> virAttr : any.getVirAttrs()) {\n-                String schema = virAttr.getSchema().getKey();\n+        Map<String, Set<Attribute>> vAttrMap = new HashMap<>();\n+        for (AttrTO vAttr : CollectionUtils.emptyIfNull(vAttrs)) {\n+            VirSchema schema = virSchemaDAO.find(vAttr.getSchema());\n+            if (schema == null) {\n+                LOG.warn(\"Ignoring invalid {} {}\", VirSchema.class.getSimpleName(), vAttr.getSchema());\n+            } else if (schema.isReadonly()) {\n+                LOG.warn(\"Ignoring read-only {} {}\", VirSchema.class.getSimpleName(), vAttr.getSchema());\n+            } else {\n+                if (any.getAllowedVirSchemas().contains(schema)\n+                        && virtualResources.contains(schema.getProvision().getResource().getKey())) {\n+\n+                    Set<Attribute> values = vAttrMap.get(schema.getProvision().getResource().getKey());\n+                    if (values == null) {\n+                        values = new HashSet<>();\n+                        vAttrMap.put(schema.getProvision().getResource().getKey(), values);\n+                    }\n+                    values.add(AttributeBuilder.build(schema.getExtAttrName(), vAttr.getValues()));\n \n-                vAttrs.put(schema, new AttrPatch.Builder().\n-                        attrTO(new AttrTO.Builder().schema(schema).values(virAttr.getValues()).build()).\n-                        build());\n+                    propByRes.add(ResourceOperation.UPDATE, schema.getProvision().getResource().getKey());\n+                } else {\n+                    LOG.warn(\"{} not owned by or {} not allowed for {}\",\n+                            schema.getProvision().getResource(), schema, any);\n+                }\n             }\n         }\n-\n-        // Avoid duplicates - see javadoc\n-        propByRes.purge();\n-        LOG.debug(\"After purge: {}\", propByRes);\n+        LOG.debug(\"With virtual attributes {}:\\n{}\\n{}\", any, propByRes, vAttrMap);\n \n         List<PropagationTask> tasks = new ArrayList<>();\n \n-        for (ResourceOperation operation : ResourceOperation.values()) {\n-            for (String resourceName : propByRes.get(operation)) {\n-                ExternalResource resource = resourceDAO.find(resourceName);\n-                Provision provision = resource == null ? null : resource.getProvision(any.getType());\n-                if (resource == null) {\n-                    LOG.error(\"Invalid resource name specified: {}, ignoring...\", resourceName);\n-                } else if (provision == null) {\n-                    LOG.error(\"No provision specified on resource {} for type {}, ignoring...\",\n-                            resource, any.getType());\n-                } else if (MappingUtils.getPropagationMappingItems(provision).isEmpty()) {\n-                    LOG.warn(\"Requesting propagation for {} but no propagation mapping provided for {}\",\n-                            any.getType(), resource);\n-                } else {\n-                    PropagationTask task = entityFactory.newEntity(PropagationTask.class);\n-                    task.setResource(resource);\n-                    task.setObjectClassName(\n-                            resource.getProvision(any.getType()).getObjectClass().getObjectClassValue());\n-                    task.setAnyTypeKind(any.getType().getKind());\n-                    if (!deleteOnResource) {\n-                        task.setAnyKey(any.getKey());\n-                    }\n-                    task.setOperation(operation);\n-                    task.setOldConnObjectKey(propByRes.getOldConnObjectKey(resource.getKey()));\n-\n-                    Pair<String, Set<Attribute>> preparedAttrs = mappingUtils.prepareAttrs(\n-                            any, password, changePwd, vAttrs, enable, provision);\n-                    task.setConnObjectKey(preparedAttrs.getKey());\n-\n-                    // Check if any of mandatory attributes (in the mapping) is missing or not received any value: \n-                    // if so, add special attributes that will be evaluated by PropagationTaskExecutor\n-                    List<String> mandatoryMissing = new ArrayList<>();\n-                    List<String> mandatoryNullOrEmpty = new ArrayList<>();\n-                    for (MappingItem item : MappingUtils.getPropagationMappingItems(provision)) {\n-                        if (!item.isConnObjectKey()\n-                                && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), any)) {\n-\n-                            Attribute attr = AttributeUtil.find(item.getExtAttrName(), preparedAttrs.getValue());\n-                            if (attr == null) {\n-                                mandatoryMissing.add(item.getExtAttrName());\n-                            } else if (attr.getValue() == null || attr.getValue().isEmpty()) {\n-                                mandatoryNullOrEmpty.add(item.getExtAttrName());\n-                            }\n+        for (Map.Entry<String, ResourceOperation> entry : propByRes.asMap().entrySet()) {\n+            ExternalResource resource = resourceDAO.find(entry.getKey());\n+            Provision provision = resource == null ? null : resource.getProvision(any.getType());\n+            List<MappingItem> mappingItems = provision == null\n+                    ? Collections.<MappingItem>emptyList()\n+                    : MappingUtils.getPropagationMappingItems(provision);\n+\n+            if (resource == null) {\n+                LOG.error(\"Invalid resource name specified: {}, ignoring...\", entry.getKey());\n+            } else if (provision == null) {\n+                LOG.error(\"No provision specified on resource {} for type {}, ignoring...\",\n+                        resource, any.getType());\n+            } else if (mappingItems.isEmpty()) {\n+                LOG.warn(\"Requesting propagation for {} but no propagation mapping provided for {}\",\n+                        any.getType(), resource);\n+            } else {\n+                PropagationTask task = entityFactory.newEntity(PropagationTask.class);\n+                task.setResource(resource);\n+                task.setObjectClassName(\n+                        resource.getProvision(any.getType()).getObjectClass().getObjectClassValue());\n+                task.setAnyTypeKind(any.getType().getKind());\n+                task.setAnyType(any.getType().getKey());\n+                if (!deleteOnResource) {\n+                    task.setAnyKey(any.getKey());\n+                }\n+                task.setOperation(entry.getValue());\n+                task.setOldConnObjectKey(propByRes.getOldConnObjectKey(resource.getKey()));\n+\n+                Pair<String, Set<Attribute>> preparedAttrs =\n+                        mappingUtils.prepareAttrs(any, password, changePwd, enable, provision);\n+                task.setConnObjectKey(preparedAttrs.getKey());\n+\n+                // Check if any of mandatory attributes (in the mapping) is missing or not received any value: \n+                // if so, add special attributes that will be evaluated by PropagationTaskExecutor\n+                List<String> mandatoryMissing = new ArrayList<>();\n+                List<String> mandatoryNullOrEmpty = new ArrayList<>();\n+                for (MappingItem item : mappingItems) {\n+                    if (!item.isConnObjectKey()\n+                            && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), any)) {\n+\n+                        Attribute attr = AttributeUtil.find(item.getExtAttrName(), preparedAttrs.getValue());\n+                        if (attr == null) {\n+                            mandatoryMissing.add(item.getExtAttrName());\n+                        } else if (attr.getValue() == null || attr.getValue().isEmpty()) {\n+                            mandatoryNullOrEmpty.add(item.getExtAttrName());\n                         }\n                     }\n-                    if (!mandatoryMissing.isEmpty()) {\n-                        preparedAttrs.getValue().add(AttributeBuilder.build(\n-                                PropagationTaskExecutor.MANDATORY_MISSING_ATTR_NAME, mandatoryMissing));\n-                    }\n-                    if (!mandatoryNullOrEmpty.isEmpty()) {\n-                        preparedAttrs.getValue().add(AttributeBuilder.build(\n-                                PropagationTaskExecutor.MANDATORY_NULL_OR_EMPTY_ATTR_NAME, mandatoryNullOrEmpty));\n-                    }\n-\n-                    task.setAttributes(preparedAttrs.getValue());\n-                    tasks.add(task);\n+                }\n+                if (!mandatoryMissing.isEmpty()) {\n+                    preparedAttrs.getValue().add(AttributeBuilder.build(\n+                            PropagationTaskExecutor.MANDATORY_MISSING_ATTR_NAME, mandatoryMissing));\n+                }\n+                if (!mandatoryNullOrEmpty.isEmpty()) {\n+                    preparedAttrs.getValue().add(AttributeBuilder.build(\n+                            PropagationTaskExecutor.MANDATORY_NULL_OR_EMPTY_ATTR_NAME, mandatoryNullOrEmpty));\n+                }\n \n-                    LOG.debug(\"PropagationTask created: {}\", task);\n+                if (vAttrMap.containsKey(resource.getKey())) {\n+                    preparedAttrs.getValue().addAll(vAttrMap.get(resource.getKey()));\n                 }\n+\n+                task.setAttributes(preparedAttrs.getValue());\n+\n+                tasks.add(task);\n+\n+                LOG.debug(\"PropagationTask created: {}\", task);\n             }\n         }\n "},{"sha":"dcce5e5991b6e9af1b7a4415af22b2720475916c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractPushResultHandler.java","status":"modified","additions":12,"deletions":45,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -20,25 +20,19 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n+import org.apache.commons.collections4.IteratorUtils;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n@@ -48,7 +42,6 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.TimeoutException;\n@@ -68,9 +61,9 @@ public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHan\n     @Autowired\n     protected MappingUtils mappingUtils;\n \n-    protected abstract String getName(Any<?, ?, ?> any);\n+    protected abstract String getName(Any<?, ?> any);\n \n-    protected void deprovision(final Any<?, ?, ?> any) {\n+    protected void deprovision(final Any<?, ?> any) {\n         AnyTO before = getAnyTO(any.getKey());\n \n         List<String> noPropResources = new ArrayList<>(before.getResources());\n@@ -83,7 +76,7 @@ protected void deprovision(final Any<?, ?, ?> any) {\n                 noPropResources));\n     }\n \n-    protected void provision(final Any<?, ?, ?> any, final Boolean enabled) {\n+    protected void provision(final Any<?, ?> any, final Boolean enabled) {\n         AnyTO before = getAnyTO(any.getKey());\n \n         List<String> noPropResources = new ArrayList<>(before.getResources());\n@@ -101,7 +94,7 @@ protected void provision(final Any<?, ?, ?> any, final Boolean enabled) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    protected void link(final Any<?, ?, ?> any, final Boolean unlink) {\n+    protected void link(final Any<?, ?> any, final Boolean unlink) {\n         AnyPatch patch = newPatch(any.getKey());\n         patch.getResources().add(new StringPatchItem.Builder().\n                 operation(unlink ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n@@ -111,7 +104,7 @@ protected void link(final Any<?, ?, ?> any, final Boolean unlink) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    protected void unassign(final Any<?, ?, ?> any) {\n+    protected void unassign(final Any<?, ?> any) {\n         AnyPatch patch = newPatch(any.getKey());\n         patch.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.DELETE).\n@@ -122,7 +115,7 @@ protected void unassign(final Any<?, ?, ?> any) {\n         deprovision(any);\n     }\n \n-    protected void assign(final Any<?, ?, ?> any, final Boolean enabled) {\n+    protected void assign(final Any<?, ?> any, final Boolean enabled) {\n         AnyPatch patch = newPatch(any.getKey());\n         patch.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).\n@@ -141,7 +134,7 @@ protected ConnectorObject getRemoteObject(final String connObjectKey, final Obje\n             obj = profile.getConnector().getObject(\n                     objectClass,\n                     uid,\n-                    profile.getConnector().getOperationOptions(Collections.<MappingItem>emptySet()));\n+                    profile.getConnector().getOperationOptions(IteratorUtils.<MappingItem>emptyIterator()));\n         } catch (TimeoutException toe) {\n             LOG.debug(\"Request timeout\", toe);\n             throw toe;\n@@ -155,7 +148,7 @@ protected ConnectorObject getRemoteObject(final String connObjectKey, final Obje\n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n     public boolean handle(final long anyKey) {\n-        Any<?, ?, ?> any = null;\n+        Any<?, ?> any = null;\n         try {\n             any = getAny(anyKey);\n             doHandle(any);\n@@ -176,7 +169,7 @@ public boolean handle(final long anyKey) {\n         }\n     }\n \n-    protected final void doHandle(final Any<?, ?, ?> any) throws JobExecutionException {\n+    protected final void doHandle(final Any<?, ?> any) throws JobExecutionException {\n         AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n \n         ProvisioningResult result = new ProvisioningResult();\n@@ -406,33 +399,7 @@ private ResourceOperation getResourceOperation(final MatchingRule rule) {\n         }\n     }\n \n-    protected Any<?, ?, ?> update(final Any<?, ?, ?> any, final Boolean enabled) {\n-        Set<AttrPatch> vattrs = new HashSet<>();\n-\n-        // Search for all mapped vattrs\n-        Mapping mapping = profile.getTask().getResource().getProvision(any.getType()).getMapping();\n-        for (MappingItem mappingItem : mapping.getItems()) {\n-            if (mappingItem.getIntMappingType() == IntMappingType.UserVirtualSchema) {\n-                vattrs.add(new AttrPatch.Builder().\n-                        operation(PatchOperation.DELETE).\n-                        attrTO(new AttrTO.Builder().schema(mappingItem.getIntAttrName()).build()).\n-                        build());\n-            }\n-        }\n-\n-        // Search for all user's vattrs and:\n-        // 1. add mapped vattrs not owned by the user to the set of vattrs to be removed\n-        // 2. add all vattrs owned by the user to the set of vattrs to be update\n-        for (VirAttr<?> vattr : any.getVirAttrs()) {\n-            vattrs.add(new AttrPatch.Builder().\n-                    operation(PatchOperation.ADD_REPLACE).\n-                    attrTO(new AttrTO.Builder().\n-                            schema(vattr.getSchema().getKey()).\n-                            values(vattr.getValues()).\n-                            build()).\n-                    build());\n-        }\n-\n+    protected Any<?, ?> update(final Any<?, ?> any, final Boolean enabled) {\n         boolean changepwd;\n         Collection<String> resourceNames;\n         if (any instanceof User) {\n@@ -458,7 +425,7 @@ private ResourceOperation getResourceOperation(final MatchingRule rule) {\n                 changepwd,\n                 null,\n                 propByRes,\n-                vattrs,\n+                null,\n                 noPropResources));\n \n         return getAny(any.getKey());"},{"sha":"3967f2b9fc3462b080e3c61ebdc83d63b2dde092","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractSyncResultHandler.java","status":"modified","additions":41,"deletions":1,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -38,12 +38,17 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.sync.SyncActions;\n import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.ProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n+import org.apache.syncope.core.provisioning.api.cache.VirAttrCacheValue;\n import org.apache.syncope.core.provisioning.api.sync.IgnoreProvisionException;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.core.provisioning.api.sync.SyncopeSyncResultHandler;\n+import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.identityconnectors.framework.common.objects.SyncDeltaType;\n import org.quartz.JobExecutionException;\n@@ -57,6 +62,12 @@ public abstract class AbstractSyncResultHandler extends AbstractSyncopeResultHan\n     @Autowired\n     protected SyncUtils syncUtilities;\n \n+    @Autowired\n+    protected VirSchemaDAO virSchemaDAO;\n+\n+    @Autowired\n+    protected VirAttrCache virAttrCache;\n+\n     protected abstract String getName(AnyTO anyTO);\n \n     protected abstract ProvisioningManager<?, ?> getProvisioningManager();\n@@ -656,6 +667,8 @@ protected void doHandle(final SyncDelta delta, final Provision provision) throws\n \n         try {\n             List<Long> anyKeys = syncUtilities.findExisting(uid, delta.getObject(), provision, anyUtils);\n+            LOG.debug(\"Match(es) found for {} as {}: {}\",\n+                    delta.getUid().getUidValue(), delta.getObject().getObjectClass(), anyKeys);\n \n             if (anyKeys.size() > 1) {\n                 switch (profile.getResAct()) {\n@@ -671,7 +684,7 @@ protected void doHandle(final SyncDelta delta, final Provision provision) throws\n                         break;\n \n                     default:\n-                    // keep anyIds as is\n+                    // keep anyKeys unmodified\n                 }\n             }\n \n@@ -694,25 +707,52 @@ protected void doHandle(final SyncDelta delta, final Provision provision) throws\n                         // do nothing\n                     }\n                 } else {\n+                    // update VirAttrCache\n+                    for (VirSchema virSchema : virSchemaDAO.findByProvision(provision)) {\n+                        Attribute attr = delta.getObject().getAttributeByName(virSchema.getExtAttrName());\n+                        for (Long anyKey : anyKeys) {\n+                            if (attr == null) {\n+                                virAttrCache.expire(\n+                                        provision.getAnyType().getKey(),\n+                                        anyKey,\n+                                        virSchema.getKey());\n+                            } else {\n+                                VirAttrCacheValue cacheValue = new VirAttrCacheValue();\n+                                cacheValue.setValues(attr.getValue());\n+                                virAttrCache.put(\n+                                        provision.getAnyType().getKey(),\n+                                        anyKey,\n+                                        virSchema.getKey(),\n+                                        cacheValue);\n+                            }\n+                        }\n+                    }\n+\n                     switch (profile.getTask().getMatchingRule()) {\n                         case UPDATE:\n                             profile.getResults().addAll(update(delta, anyKeys, provision));\n                             break;\n+\n                         case DEPROVISION:\n                             profile.getResults().addAll(deprovision(delta, anyKeys, provision, false));\n                             break;\n+\n                         case UNASSIGN:\n                             profile.getResults().addAll(deprovision(delta, anyKeys, provision, true));\n                             break;\n+\n                         case LINK:\n                             profile.getResults().addAll(link(delta, anyKeys, provision, false));\n                             break;\n+\n                         case UNLINK:\n                             profile.getResults().addAll(link(delta, anyKeys, provision, true));\n                             break;\n+\n                         case IGNORE:\n                             profile.getResults().addAll(ignore(delta, provision, true));\n                             break;\n+\n                         default:\n                         // do nothing\n                     }"},{"sha":"570cb761b008fc00bb570aad662ebba29310d41e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractSyncopeResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -137,7 +137,7 @@\n \n     protected abstract AnyTO getAnyTO(long key);\n \n-    protected abstract Any<?, ?, ?> getAny(long key);\n+    protected abstract Any<?, ?> getAny(long key);\n \n     protected abstract AnyPatch newPatch(final long key);\n "},{"sha":"7d9ab24e7f76dbc27b02c1670506805811f4d510","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AnyObjectPushResultHandlerImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectPushResultHandlerImpl.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -36,12 +36,12 @@ protected AnyUtils getAnyUtils() {\n     }\n \n     @Override\n-    protected String getName(final Any<?, ?, ?> any) {\n+    protected String getName(final Any<?, ?> any) {\n         return StringUtils.EMPTY;\n     }\n \n     @Override\n-    protected Any<?, ?, ?> getAny(final long key) {\n+    protected Any<?, ?> getAny(final long key) {\n         try {\n             return anyObjectDAO.authFind(key);\n         } catch (Exception e) {"},{"sha":"079529d7adaaff97412bdeec291d805747dce4a8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AnyObjectSyncResultHandlerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectSyncResultHandlerImpl.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -54,7 +54,7 @@ protected String getName(final AnyTO anyTO) {\n     }\n \n     @Override\n-    protected Any<?, ?, ?> getAny(final long key) {\n+    protected Any<?, ?> getAny(final long key) {\n         try {\n             return anyObjectDAO.authFind(key);\n         } catch (Exception e) {"},{"sha":"15f06e03287fb6ae2a2ca0b9ec43b8cf0016fa5b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/DefaultPushActions.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultPushActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultPushActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultPushActions.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -34,57 +34,57 @@ public void beforeAll(final ProvisioningProfile<?, ?> profile) throws JobExecuti\n     }\n \n     @Override\n-    public <A extends Any<?, ?, ?>> A beforeAssign(final ProvisioningProfile<?, ?> profile, final A any)\n+    public <A extends Any<?, ?>> A beforeAssign(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <A extends Any<?, ?, ?>> A beforeProvision(final ProvisioningProfile<?, ?> profile, final A any)\n+    public <A extends Any<?, ?>> A beforeProvision(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <A extends Any<?, ?, ?>> A beforeLink(final ProvisioningProfile<?, ?> profile, final A any)\n+    public <A extends Any<?, ?>> A beforeLink(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <A extends Any<?, ?, ?>> A beforeUnassign(final ProvisioningProfile<?, ?> profile, final A any)\n+    public <A extends Any<?, ?>> A beforeUnassign(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <A extends Any<?, ?, ?>> A beforeDeprovision(final ProvisioningProfile<?, ?> profile, final A any)\n+    public <A extends Any<?, ?>> A beforeDeprovision(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <A extends Any<?, ?, ?>> A beforeUnlink(final ProvisioningProfile<?, ?> profile, final A any)\n+    public <A extends Any<?, ?>> A beforeUnlink(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <A extends Any<?, ?, ?>> void onError(\n+    public <A extends Any<?, ?>> void onError(\n             final ProvisioningProfile<?, ?> profile, final A any, final ProvisioningResult result,\n             final Exception error) throws JobExecutionException {\n \n         // do nothing\n     }\n \n     @Override\n-    public <A extends Any<?, ?, ?>> void after(\n+    public <A extends Any<?, ?>> void after(\n             final ProvisioningProfile<?, ?> profile, final A any, final ProvisioningResult result)\n             throws JobExecutionException {\n "},{"sha":"212eb84fb5aa1446ebbe9cc1f8b908f83a1ab27c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/GroupPushResultHandlerImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupPushResultHandlerImpl.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -36,12 +36,12 @@ protected AnyUtils getAnyUtils() {\n     }\n \n     @Override\n-    protected String getName(final Any<?, ?, ?> any) {\n+    protected String getName(final Any<?, ?> any) {\n         return Group.class.cast(any).getName();\n     }\n \n     @Override\n-    protected Any<?, ?, ?> getAny(final long key) {\n+    protected Any<?, ?> getAny(final long key) {\n         try {\n             return groupDAO.authFind(key);\n         } catch (Exception e) {"},{"sha":"c3b9eda82590c45918b693152bbd337ac8b4bb2f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/GroupSyncResultHandlerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -63,7 +63,7 @@ protected String getName(final AnyTO anyTO) {\n     }\n \n     @Override\n-    protected Any<?, ?, ?> getAny(final long key) {\n+    protected Any<?, ?> getAny(final long key) {\n         try {\n             return groupDAO.authFind(key);\n         } catch (Exception e) {"},{"sha":"e13407d9592c1c57e84f89a9f0f23defde1432e0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/PushJobDelegate.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPushJobDelegate.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -145,13 +145,13 @@ protected String doExecuteProvisioning(\n \n                 int count = anyDAO.count(SyncopeConstants.FULL_ADMIN_REALMS);\n                 for (int page = 1; page <= (count / PAGE_SIZE) + 1; page++) {\n-                    List<? extends Any<?, ?, ?>> localAnys = StringUtils.isBlank(filter)\n+                    List<? extends Any<?, ?>> localAnys = StringUtils.isBlank(filter)\n                             ? anyDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, page, PAGE_SIZE)\n                             : searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n                                     SearchCondConverter.convert(filter),\n                                     Collections.<OrderByClause>emptyList(), provision.getAnyType().getKind());\n \n-                    for (Any<?, ?, ?> any : localAnys) {\n+                    for (Any<?, ?> any : localAnys) {\n                         SyncopePushResultHandler handler;\n                         switch (provision.getAnyType().getKind()) {\n                             case USER:"},{"sha":"890ceced2e23ac6f482e5c1c64d850cca0033c4a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncJobDelegate.java","status":"modified","additions":27,"deletions":4,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -19,15 +19,22 @@\n package org.apache.syncope.core.provisioning.java.sync;\n \n import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import org.apache.commons.collections4.IteratorUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.policy.SyncPolicySpec;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n@@ -51,6 +58,9 @@ public class SyncJobDelegate extends AbstractProvisioningJobDelegate<SyncTask> {\n     @Autowired\n     private GroupDAO groupDAO;\n \n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n     @Autowired\n     protected SyncUtils syncUtils;\n \n@@ -163,12 +173,25 @@ protected String doExecuteProvisioning(\n                         latestSyncToken = connector.getLatestSyncToken(provision.getObjectClass());\n                     }\n \n+                    Set<MappingItem> linkinMappingItems = new HashSet<>();\n+                    for (VirSchema virSchema : virSchemaDAO.findByProvision(provision)) {\n+                        linkinMappingItems.add(virSchema.asLinkingMappingItem());\n+                    }\n+                    Iterator<MappingItem> mapItems = IteratorUtils.chainedIterator(\n+                            provision.getMapping().getItems().iterator(),\n+                            linkinMappingItems.iterator());\n+\n                     if (syncTask.isFullReconciliation()) {\n-                        connector.getAllObjects(provision.getObjectClass(), handler,\n-                                connector.getOperationOptions(provision.getMapping().getItems()));\n+                        connector.getAllObjects(\n+                                provision.getObjectClass(),\n+                                handler,\n+                                connector.getOperationOptions(mapItems));\n                     } else {\n-                        connector.sync(provision.getObjectClass(), provision.getSyncToken(), handler,\n-                                connector.getOperationOptions(provision.getMapping().getItems()));\n+                        connector.sync(\n+                                provision.getObjectClass(),\n+                                provision.getSyncToken(),\n+                                handler,\n+                                connector.getOperationOptions(mapItems));\n                     }\n \n                     if (!dryRun && !syncTask.isFullReconciliation()) {"},{"sha":"eefccad2077ac3c5f86d88edb2faddaf6ab8edf2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncUtils.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -128,7 +128,7 @@ public boolean handle(final ConnectorObject obj) {\n                         return found.add(obj);\n                     }\n                 },\n-                connector.getOperationOptions(MappingUtils.getSyncMappingItems(provision)));\n+                connector.getOperationOptions(MappingUtils.getSyncMappingItems(provision).iterator()));\n \n         if (found.isEmpty()) {\n             LOG.debug(\"No {} found on {} with __NAME__ {}\", provision.getObjectClass(), resource, name);\n@@ -199,9 +199,9 @@ private List<Long> findByConnObjectKeyItem(\n                     }\n                 }\n \n-                List<? extends Any<?, ?, ?>> anys =\n+                List<? extends Any<?, ?>> anys =\n                         getAnyDAO(connObjectKeyItem).findByAttrValue(connObjectKeyItem.getIntAttrName(), value);\n-                for (Any<?, ?, ?> any : anys) {\n+                for (Any<?, ?> any : anys) {\n                     result.add(any.getKey());\n                 }\n                 break;\n@@ -210,15 +210,15 @@ private List<Long> findByConnObjectKeyItem(\n             case GroupDerivedSchema:\n             case AnyObjectDerivedSchema:\n                 anys = getAnyDAO(connObjectKeyItem).findByDerAttrValue(connObjectKeyItem.getIntAttrName(), transfUid);\n-                for (Any<?, ?, ?> any : anys) {\n+                for (Any<?, ?> any : anys) {\n                     result.add(any.getKey());\n                 }\n                 break;\n \n             case UserKey:\n             case GroupKey:\n             case AnyObjectKey:\n-                Any<?, ?, ?> any = getAnyDAO(connObjectKeyItem).find(Long.parseLong(transfUid));\n+                Any<?, ?> any = getAnyDAO(connObjectKeyItem).find(Long.parseLong(transfUid));\n                 if (any != null) {\n                     result.add(any.getKey());\n                 }\n@@ -249,7 +249,7 @@ private List<Long> findByCorrelationRule(\n             final ConnectorObject connObj, final SyncCorrelationRule rule, final AnyTypeKind type) {\n \n         List<Long> result = new ArrayList<>();\n-        for (Any<?, ?, ?> any : searchDAO.search(\n+        for (Any<?, ?> any : searchDAO.search(\n                 SyncopeConstants.FULL_ADMIN_REALMS,\n                 rule.getSearchCond(connObj),\n                 Collections.<OrderByClause>emptyList(),"},{"sha":"8f70560bcda83e7f28f1a12e57127164b14693c3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/UserPushResultHandlerImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -41,7 +41,7 @@ protected AnyUtils getAnyUtils() {\n     }\n \n     @Override\n-    protected void provision(final Any<?, ?, ?> any, final Boolean enabled) {\n+    protected void provision(final Any<?, ?> any, final Boolean enabled) {\n         AnyTO before = getAnyTO(any.getKey());\n \n         List<String> noPropResources = new ArrayList<>(before.getResources());\n@@ -60,12 +60,12 @@ protected void provision(final Any<?, ?, ?> any, final Boolean enabled) {\n     }\n \n     @Override\n-    protected String getName(final Any<?, ?, ?> any) {\n+    protected String getName(final Any<?, ?> any) {\n         return User.class.cast(any).getUsername();\n     }\n \n     @Override\n-    protected Any<?, ?, ?> getAny(final long key) {\n+    protected Any<?, ?> getAny(final long key) {\n         try {\n             return userDAO.authFind(key);\n         } catch (Exception e) {"},{"sha":"23e209cb7aa12286fb5a383a5b8485e7a43bd813","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/UserSyncResultHandlerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -54,7 +54,7 @@ protected String getName(final AnyTO anyTO) {\n     }\n \n     @Override\n-    protected Any<?, ?, ?> getAny(final long key) {\n+    protected Any<?, ?> getAny(final long key) {\n         try {\n             return userDAO.authFind(key);\n         } catch (Exception e) {"},{"sha":"fe19915d9f1ecaf282d0c7f78a0888cf88aab00d","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/ThreadLocalCleanupListener.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FThreadLocalCleanupListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FThreadLocalCleanupListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FThreadLocalCleanupListener.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -20,7 +20,7 @@\n \n import javax.servlet.ServletRequestEvent;\n import javax.servlet.ServletRequestListener;\n-import org.apache.syncope.core.misc.DataFormat;\n+import org.apache.syncope.core.misc.FormatUtils;\n import org.identityconnectors.common.l10n.CurrentLocale;\n import org.identityconnectors.framework.impl.api.local.ThreadClassLoaderManager;\n \n@@ -36,7 +36,7 @@ public void requestInitialized(final ServletRequestEvent sre) {\n \n     @Override\n     public void requestDestroyed(final ServletRequestEvent sre) {\n-        DataFormat.clear();\n+        FormatUtils.clear();\n \n         ThreadClassLoaderManager.clearInstance();\n         CurrentLocale.clear();"},{"sha":"4258e64dbf56b495a53d054a9db4a89ea7d9274d","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -179,23 +179,20 @@ private void addUpdateOrReplaceAttr(\n \n         P patch = newPatch(key);\n \n-        Set<AttrPatch> patches;\n         switch (schemaType) {\n             case DERIVED:\n-                patches = patch.getDerAttrs();\n+                patch.getDerAttrs().add(new AttrPatch.Builder().operation(operation).attrTO(attrTO).build());\n                 break;\n \n             case VIRTUAL:\n-                patches = patch.getVirAttrs();\n+                patch.getVirAttrs().add(attrTO);\n                 break;\n \n             case PLAIN:\n             default:\n-                patches = patch.getPlainAttrs();\n+                patch.getPlainAttrs().add(new AttrPatch.Builder().operation(operation).attrTO(attrTO).build());\n         }\n \n-        patches.add(new AttrPatch.Builder().operation(operation).attrTO(attrTO).build());\n-\n         update(patch);\n     }\n "},{"sha":"3f2b6901347bf6ac85be21d6964040dd40d9ad78","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/AnyObjectUpdateProcessor.java","status":"modified","additions":0,"deletions":13,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectUpdateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectUpdateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectUpdateProcessor.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -25,7 +25,6 @@\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n@@ -60,17 +59,6 @@ public void process(final Exchange exchange) {\n         AnyObjectPatch anyObjectPatch = exchange.getProperty(\"anyPatch\", AnyObjectPatch.class);\n         Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n-        // SYNCOPE-459: take care of user virtual attributes ...\n-        PropagationByResource propByResVirAttr = virtAttrHandler.updateVirtual(\n-                updated.getResult(),\n-                AnyTypeKind.ANY_OBJECT,\n-                anyObjectPatch.getVirAttrs());\n-        if (updated.getPropByRes() == null) {\n-            updated.setPropByRes(propByResVirAttr);\n-        } else {\n-            updated.getPropByRes().merge(propByResVirAttr);\n-        }\n-\n         List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n                 AnyTypeKind.ANY_OBJECT,\n                 updated.getResult(),\n@@ -79,7 +67,6 @@ public void process(final Exchange exchange) {\n                 updated.getPropByRes(),\n                 anyObjectPatch.getVirAttrs(),\n                 excludedResources);\n-\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"599f54bd0b988b0bbc424bb1bb0ab0b2d30c57af","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupUpdateProcessor.java","status":"modified","additions":0,"deletions":13,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupUpdateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupUpdateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupUpdateProcessor.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -25,7 +25,6 @@\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n@@ -60,17 +59,6 @@ public void process(final Exchange exchange) {\n         GroupPatch groupPatch = exchange.getProperty(\"anyPatch\", GroupPatch.class);\n         Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n-        // SYNCOPE-459: take care of user virtual attributes ...\n-        PropagationByResource propByResVirAttr = virtAttrHandler.updateVirtual(\n-                updated.getResult(),\n-                AnyTypeKind.GROUP,\n-                groupPatch.getVirAttrs());\n-        if (updated.getPropByRes() == null) {\n-            updated.setPropByRes(propByResVirAttr);\n-        } else {\n-            updated.getPropByRes().merge(propByResVirAttr);\n-        }\n-\n         List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n                 AnyTypeKind.GROUP,\n                 updated.getResult(),\n@@ -79,7 +67,6 @@ public void process(final Exchange exchange) {\n                 updated.getPropByRes(),\n                 groupPatch.getVirAttrs(),\n                 excludedResources);\n-\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"8b49a5dcf841f16f0e331d537e888c9da8f773a4","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserUpdateInSyncProcessor.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateInSyncProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateInSyncProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateInSyncProcessor.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -54,12 +54,10 @@ public void process(final Exchange exchange) {\n         WorkflowResult<Pair<UserPatch, Boolean>> updated = (WorkflowResult) exchange.getIn().getBody();\n         Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n-        PropagationReporter propagationReporter =\n-                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-\n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n                 updated, updated.getResult().getKey().getPassword() != null, excludedResources);\n-\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {"},{"sha":"8f175dd7b974d3c1cd2c775e5bee3c20ad471c3f","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserUpdateProcessor.java","status":"modified","additions":5,"deletions":22,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -24,8 +24,6 @@\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n@@ -57,30 +55,15 @@ public class UserUpdateProcessor implements Processor {\n     @SuppressWarnings(\"unchecked\")\n     public void process(final Exchange exchange) {\n         WorkflowResult<Pair<UserPatch, Boolean>> updated = (WorkflowResult) exchange.getIn().getBody();\n-        UserPatch userPatch = exchange.getProperty(\"actual\", UserPatch.class);\n-\n-        // SYNCOPE-459: take care of user virtual attributes ...\n-        PropagationByResource propByResVirAttr = virtAttrHandler.updateVirtual(\n-                updated.getResult().getKey().getKey(),\n-                AnyTypeKind.USER,\n-                userPatch.getVirAttrs());\n-        if (updated.getPropByRes() == null) {\n-            updated.setPropByRes(propByResVirAttr);\n-        } else {\n-            updated.getPropByRes().merge(propByResVirAttr);\n-        }\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(updated);\n-\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n-        if (!tasks.isEmpty()) {\n-            try {\n-                taskExecutor.execute(tasks, propagationReporter);\n-            } catch (PropagationException e) {\n-                LOG.error(\"Error propagation primary resource\", e);\n-                propagationReporter.onPrimaryResourceFailure(tasks);\n-            }\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n         exchange.getOut().setBody(new ImmutablePair<>("},{"sha":"3c899900a4c13548f84efef9abb1b997e81fba43","filename":"fit/console-reference/pom.xml","status":"modified","additions":9,"deletions":72,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/fit%2Fconsole-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/fit%2Fconsole-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fpom.xml?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -457,19 +457,19 @@ ORYX.Editor.createByUrl = function(modelUrl){\"/>\n                   <resource>\n                     <directory>${basedir}/../../core/logic/target/classes</directory>\n                     <excludes>\n-                      <exclude>*Context.xml</exclude>\n+                      <exclude>logicContext.xml</exclude>\n                     </excludes>\n                   </resource>\n                   <resource>\n                     <directory>${basedir}/../../core/rest-cxf/target/classes</directory>\n                     <excludes>\n-                      <exclude>*Context.xml</exclude>\n+                      <exclude>restCXFContext.xml</exclude>\n                     </excludes>\n                   </resource>\n                   <resource>\n                     <directory>${basedir}/../../core/misc/target/classes</directory>\n                     <excludes>\n-                      <exclude>*Context.xml</exclude>\n+                      <exclude>securityContext.xml</exclude>\n                     </excludes>\n                   </resource>\n                   <resource>\n@@ -478,7 +478,7 @@ ORYX.Editor.createByUrl = function(modelUrl){\"/>\n                   <resource>\n                     <directory>${basedir}/../../core/persistence-jpa/target/classes</directory>\n                     <excludes>\n-                      <exclude>*Context.xml</exclude>\n+                      <exclude>persistenceContext.xml</exclude>\n                     </excludes>\n                   </resource>\n                   <resource>\n@@ -487,7 +487,7 @@ ORYX.Editor.createByUrl = function(modelUrl){\"/>\n                   <resource>\n                     <directory>${basedir}/../../core/provisioning-java/target/classes</directory>\n                     <excludes>\n-                      <exclude>*Context.xml</exclude>\n+                      <exclude>provisioningContext.xml</exclude>\n                     </excludes>\n                   </resource>\n                   <resource>\n@@ -496,85 +496,22 @@ ORYX.Editor.createByUrl = function(modelUrl){\"/>\n                   <resource>\n                     <directory>${basedir}/../../core/workflow-java/target/classes</directory>\n                     <excludes>\n-                      <exclude>*Context.xml</exclude>\n+                      <exclude>workflowContext.xml</exclude>\n                     </excludes>\n                   </resource>\n                   <resource>\n                     <directory>${basedir}/../../core/workflow-activiti/target/classes</directory>\n                     <excludes>\n-                      <exclude>*Context.xml</exclude>\n+                      <exclude>workflowActivitiContext.xml</exclude>\n                     </excludes>\n                   </resource>\n                   <resource>\n                     <directory>${basedir}/../../ext/camel/provisioning-camel/target/classes</directory>\n                     <excludes>\n-                      <exclude>*Context.xml</exclude>\n-                    </excludes>\n-                  </resource>\n-\n-                  <resource>\n-                    <directory>${basedir}/../../common/lib/target/classes</directory>\n-                  </resource>\n-                  <resource>\n-                    <directory>${basedir}/../../common/rest-api/target/classes</directory>\n-                  </resource>\n-                  <resource>\n-                    <directory>${basedir}/../../core/logic/target/classes</directory>\n-                    <excludes>\n-                      <exclude>*Context.xml</exclude>\n-                    </excludes>\n-                  </resource>\n-                  <resource>\n-                    <directory>${basedir}/../../core/rest-cxf/target/classes</directory>\n-                    <excludes>\n-                      <exclude>*Context.xml</exclude>\n-                    </excludes>\n-                  </resource>\n-                  <resource>\n-                    <directory>${basedir}/../../core/misc/target/classes</directory>\n-                    <excludes>\n-                      <exclude>*Context.xml</exclude>\n-                    </excludes>\n-                  </resource>\n-                  <resource>\n-                    <directory>${basedir}/../../core/persistence-api/target/classes</directory>\n-                  </resource>\n-                  <resource>\n-                    <directory>${basedir}/../../core/persistence-jpa/target/classes</directory>\n-                    <excludes>\n-                      <exclude>*Context.xml</exclude>\n-                    </excludes>\n-                  </resource>\n-                  <resource>\n-                    <directory>${basedir}/../../core/provisioning-api/target/classes</directory>\n-                  </resource>\n-                  <resource>\n-                    <directory>${basedir}/../../core/provisioning-java/target/classes</directory>\n-                    <excludes>\n-                      <exclude>*Context.xml</exclude>\n-                    </excludes>\n-                  </resource>\n-                  <resource>\n-                    <directory>${basedir}/../../core/workflow-api/target/classes</directory>\n-                  </resource>\n-                  <resource>\n-                    <directory>${basedir}/../../core/workflow-java/target/classes</directory>\n-                    <excludes>\n-                      <exclude>*Context.xml</exclude>\n-                    </excludes>\n-                  </resource>\n-                  <resource>\n-                    <directory>${basedir}/../../core/workflow-activiti/target/classes</directory>\n-                    <excludes>\n-                      <exclude>*Context.xml</exclude>\n-                    </excludes>\n-                  </resource>\n-                  <resource>\n-                    <directory>${basedir}/../../ext/camel/provisioning-camel/target/classes</directory>\n-                    <excludes>\n-                      <exclude>*Context.xml</exclude>\n+                      <exclude>provisioningCamelContext.xml</exclude>\n                     </excludes>\n                   </resource>\n+                  \n                   <resource>\n                     <directory>${basedir}/../../client/console/target/classes</directory>\n                   </resource>"},{"sha":"724f592ebd3aa6142fa70635e1398d21ee7ca8c3","filename":"fit/core-reference/pom.xml","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -758,19 +758,19 @@ under the License.\n                   <resource>\n                     <directory>${basedir}/../../core/logic/target/classes</directory>\n                     <excludes>\n-                      <exclude>*Context.xml</exclude>\n+                      <exclude>logicContext.xml</exclude>\n                     </excludes>\n                   </resource>\n                   <resource>\n                     <directory>${basedir}/../../core/rest-cxf/target/classes</directory>\n                     <excludes>\n-                      <exclude>*Context.xml</exclude>\n+                      <exclude>restCXFContext.xml</exclude>\n                     </excludes>\n                   </resource>\n                   <resource>\n                     <directory>${basedir}/../../core/misc/target/classes</directory>\n                     <excludes>\n-                      <exclude>*Context.xml</exclude>\n+                      <exclude>securityContext.xml</exclude>\n                     </excludes>\n                   </resource>\n                   <resource>\n@@ -779,7 +779,7 @@ under the License.\n                   <resource>\n                     <directory>${basedir}/../../core/persistence-jpa/target/classes</directory>\n                     <excludes>\n-                      <exclude>*Context.xml</exclude>\n+                      <exclude>persistenceContext.xml</exclude>\n                     </excludes>\n                   </resource>\n                   <resource>\n@@ -788,7 +788,7 @@ under the License.\n                   <resource>\n                     <directory>${basedir}/../../core/provisioning-java/target/classes</directory>\n                     <excludes>\n-                      <exclude>*Context.xml</exclude>\n+                      <exclude>provisioningContext.xml</exclude>\n                     </excludes>\n                   </resource>\n                   <resource>\n@@ -797,19 +797,19 @@ under the License.\n                   <resource>\n                     <directory>${basedir}/../../core/workflow-java/target/classes</directory>\n                     <excludes>\n-                      <exclude>*Context.xml</exclude>\n+                      <exclude>workflowContext.xml</exclude>\n                     </excludes>\n                   </resource>\n                   <resource>\n                     <directory>${basedir}/../../core/workflow-activiti/target/classes</directory>\n                     <excludes>\n-                      <exclude>*Context.xml</exclude>\n+                      <exclude>workflowActivitiContext.xml</exclude>\n                     </excludes>\n                   </resource>\n                   <resource>\n                     <directory>${basedir}/../../ext/camel/provisioning-camel/target/classes</directory>\n                     <excludes>\n-                      <exclude>*Context.xml</exclude>\n+                      <exclude>provisioningCamelContext.xml</exclude>\n                     </excludes>\n                   </resource>\n                 </resources>"},{"sha":"148f0eb46895e1fa61e9b213222167d469faa81d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/GroupITCase.java","status":"modified","additions":5,"deletions":21,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -59,6 +59,7 @@\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n+import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -217,27 +218,6 @@ public void update() {\n         assertEquals(2, groupTO.getPlainAttrs().size());\n     }\n \n-    @Test\n-    public void updateRemovingVirAttribute() {\n-        GroupTO groupTO = getBasicSampleTO(\"withvirtual\" + getUUIDString());\n-        groupTO.getVirAttrs().add(attrTO(\"rvirtualdata\", null));\n-\n-        groupTO = createGroup(groupTO);\n-\n-        assertNotNull(groupTO);\n-        assertEquals(1, groupTO.getVirAttrs().size());\n-\n-        GroupPatch groupPatch = new GroupPatch();\n-        groupPatch.setKey(groupTO.getKey());\n-        groupPatch.getVirAttrs().add(new AttrPatch.Builder().operation(PatchOperation.DELETE).\n-                attrTO(new AttrTO.Builder().schema(\"rvirtualdata\").build()).\n-                build());\n-\n-        groupTO = updateGroup(groupPatch);\n-        assertNotNull(groupTO);\n-        assertTrue(groupTO.getVirAttrs().isEmpty());\n-    }\n-\n     @Test\n     public void updateRemovingDerAttribute() {\n         GroupTO groupTO = getBasicSampleTO(\"withderived\" + getUUIDString());\n@@ -638,6 +618,10 @@ public void issueSYNCOPE632() {\n             newLDAP.setKey(\"new-ldap\");\n             newLDAP.setPropagationPrimary(true);\n \n+            for (ProvisionTO provision : newLDAP.getProvisions()) {\n+                provision.getVirSchemas().clear();\n+            }\n+\n             MappingTO mapping = newLDAP.getProvision(AnyTypeKind.GROUP.name()).getMapping();\n \n             MappingItemTO connObjectKey = mapping.getConnObjectKeyItem();"},{"sha":"7f2964fb44279a8e994a6d3b84e742ee392b3d4b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PropagationTaskITCase.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -84,14 +84,6 @@ public void readExecution() {\n         assertNotNull(taskTO);\n     }\n \n-    @Test\n-    public void issue196() {\n-        TaskExecTO exec = taskService.execute(6L, false);\n-        assertNotNull(exec);\n-        assertEquals(0, exec.getKey());\n-        assertNotNull(exec.getTask());\n-    }\n-\n     @Test\n     public void bulkAction() {\n         PagedResult<PropagationTaskTO> before = taskService.list("},{"sha":"d645c77186bc9605f3cdc1c2f9ae18ff3d822fd4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SyncTaskITCase.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -607,6 +607,9 @@ public void issueSYNCOPE272() {\n     @Test\n     public void issueSYNCOPE307() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"s307@apache.org\");\n+        userTO.setUsername(\"test0\");\n+        userTO.getPlainAttrMap().get(\"firstname\").getValues().clear();\n+        userTO.getPlainAttrMap().get(\"firstname\").getValues().add(\"nome0\");\n         userTO.getAuxClasses().add(\"csv\");\n \n         AttrTO csvuserid = new AttrTO();\n@@ -615,37 +618,34 @@ public void issueSYNCOPE307() {\n \n         userTO.getResources().clear();\n         userTO.getResources().add(RESOURCE_NAME_WS2);\n-        userTO.getResources().add(RESOURCE_NAME_CSV);\n \n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n \n         userTO = userService.read(userTO.getKey());\n-        assertEquals(\"virtualvalue\", userTO.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+        assertTrue(userTO.getVirAttrMap().isEmpty());\n \n         // Update sync task\n         SyncTaskTO task = taskService.read(12L);\n         assertNotNull(task);\n \n-        //  add user template\n         UserTO template = new UserTO();\n+        template.setPassword(\"'password123'\");\n         template.getResources().add(RESOURCE_NAME_DBVIRATTR);\n-\n-        AttrTO userId = attrTO(\"userId\", \"'s307@apache.org'\");\n-        template.getPlainAttrs().add(userId);\n-\n-        AttrTO email = attrTO(\"email\", \"'s307@apache.org'\");\n-        template.getPlainAttrs().add(email);\n+        template.getVirAttrs().add(attrTO(\"virtualdata\", \"'virtualvalue'\"));\n \n         task.getTemplates().put(AnyTypeKind.USER.name(), template);\n \n         taskService.update(task);\n+\n+        // exec task: one user from CSV will match the user created above and template will be applied\n         execProvisioningTask(taskService, task.getKey(), 50, false);\n \n-        // check for sync policy\n+        // check that template was successfully applied...\n         userTO = userService.read(userTO.getKey());\n         assertEquals(\"virtualvalue\", userTO.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n \n+        // ...and that propagation to db succeeded\n         try {\n             JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n "},{"sha":"91da7599531277aaabc32998d640162be5f1d0f9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":5,"deletions":48,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -45,7 +45,6 @@\n import org.apache.cxf.common.util.Base64Utility;\n import org.apache.cxf.helpers.IOUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.AssociationPatch;\n@@ -137,7 +136,6 @@ public static UserTO getSampleTO(final String email) {\n         userTO.getPlainAttrs().add(attrTO(\"email\", email));\n         userTO.getPlainAttrs().add(attrTO(\"loginDate\", DATE_FORMAT.get().format(new Date())));\n         userTO.getDerAttrs().add(attrTO(\"cn\", null));\n-        userTO.getVirAttrs().add(attrTO(\"virtualdata\", \"virtualvalue\"));\n         return userTO;\n     }\n \n@@ -154,7 +152,6 @@ public void createUserWithNoPropagation() {\n \n         // create a new user\n         UserTO userTO = getUniqueSampleTO(\"xxx@xxx.xxx\");\n-\n         userTO.setPassword(\"password123\");\n         userTO.getResources().add(RESOURCE_NAME_NOPROPAGATION);\n \n@@ -173,7 +170,6 @@ public void createUserWithNoPropagation() {\n \n         // get last task\n         PropagationTaskTO taskTO = taskService.read(newMaxId);\n-\n         assertNotNull(taskTO);\n         assertTrue(taskTO.getExecutions().isEmpty());\n     }\n@@ -387,15 +383,6 @@ public void create() {\n         // check for changePwdDate\n         assertNotNull(newUserTO.getCreationDate());\n \n-        // 2. check for virtual attribute value\n-        newUserTO = userService.read(newUserTO.getKey());\n-        assertNotNull(newUserTO);\n-\n-        assertNotNull(newUserTO.getVirAttrMap());\n-        assertNotNull(newUserTO.getVirAttrMap().get(\"virtualdata\").getValues());\n-        assertFalse(newUserTO.getVirAttrMap().get(\"virtualdata\").getValues().isEmpty());\n-        assertEquals(\"virtualvalue\", newUserTO.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n-\n         // get the new task list\n         tasks = taskService.list(\n                 TaskType.PROPAGATION,\n@@ -751,7 +738,7 @@ public void verifyTaskRegistration() {\n \n         long newMaxKey = tasks.getResult().iterator().next().getKey();\n \n-        // default configuration for ws-target-resource2:\n+        // default configuration for ws-target-resource2 during create:\n         // only failed executions have to be registered\n         // --> no more tasks/executions should be added\n         assertEquals(newMaxKey, maxKey);\n@@ -762,7 +749,7 @@ public void verifyTaskRegistration() {\n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(userTO.getKey());\n \n-        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"surname\", \"surname\"));\n+        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"surname\", \"surname2\"));\n \n         userTO = updateUser(userPatch);\n \n@@ -776,11 +763,11 @@ public void verifyTaskRegistration() {\n         maxKey = newMaxKey;\n         newMaxKey = tasks.getResult().iterator().next().getKey();\n \n-        // default configuration for ws-target-resource2:\n+        // default configuration for ws-target-resource2 during update:\n         // all update executions have to be registered\n         assertTrue(newMaxKey > maxKey);\n \n-        final PropagationTaskTO taskTO = taskService.read(newMaxKey);\n+        PropagationTaskTO taskTO = taskService.read(newMaxKey);\n \n         assertNotNull(taskTO);\n         assertEquals(1, taskTO.getExecutions().size());\n@@ -1003,37 +990,6 @@ public void issue234() {\n         assertEquals(\"1\" + inUserTO.getUsername(), userTO.getUsername());\n     }\n \n-    @Test\n-    public void issue270() {\n-        // 1. create a new user without virtual attributes\n-        UserTO original = getUniqueSampleTO(\"issue270@syncope.apache.org\");\n-        // be sure to remove all virtual attributes\n-        original.getVirAttrs().clear();\n-\n-        original = createUser(original);\n-\n-        assertNotNull(original);\n-\n-        assertTrue(original.getVirAttrs().isEmpty());\n-\n-        UserTO toBeUpdated = userService.read(original.getKey());\n-\n-        AttrTO virtual = attrTO(\"virtualdata\", \"virtualvalue\");\n-        toBeUpdated.getVirAttrs().add(virtual);\n-\n-        // 2. try to update by adding a resource, but no password: must fail\n-        UserPatch userPatch = AnyOperations.diff(toBeUpdated, original, false);\n-        assertNotNull(userPatch);\n-\n-        toBeUpdated = updateUser(userPatch);\n-        assertNotNull(toBeUpdated);\n-\n-        assertFalse(toBeUpdated.getVirAttrs().isEmpty());\n-        assertNotNull(toBeUpdated.getVirAttrs().iterator().next());\n-\n-        assertEquals(virtual.getSchema(), toBeUpdated.getVirAttrs().iterator().next().getSchema());\n-    }\n-\n     @Test\n     public final void issue280() {\n         UserTO userTO = getUniqueSampleTO(\"issue280@syncope.apache.org\");\n@@ -1353,6 +1309,7 @@ public void issueSYNCOPE267() {\n         // create user and check virtual attribute value propagation\n         // ----------------------------------\n         UserTO userTO = getUniqueSampleTO(\"syncope267@apache.org\");\n+        userTO.getVirAttrs().add(attrTO(\"virtualdata\", \"virtualvalue\"));\n         userTO.getResources().clear();\n         userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n "},{"sha":"e96026f90e1597b3a6f6628592752a03589b0b28","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/VirAttrITCase.java","status":"modified","additions":161,"deletions":168,"changes":329,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -18,21 +18,23 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n+import static org.apache.syncope.fit.core.reference.AbstractITCase.getUUIDString;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n import java.util.Locale;\n import java.util.Map;\n+import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n import org.apache.syncope.common.lib.patch.StatusPatch;\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n@@ -43,13 +45,16 @@\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.to.VirSchemaTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.StatusPatchType;\n+import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.junit.FixMethodOrder;\n@@ -63,38 +68,60 @@ public class VirAttrITCase extends AbstractITCase {\n     @Test\n     public void issueSYNCOPE16() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"issue16@apache.org\");\n-\n+        userTO.getVirAttrs().add(attrTO(\"virtualdata\", \"virtualvalue\"));\n+        userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n         userTO.getMemberships().add(new MembershipTO.Builder().group(8L).build());\n \n         // 1. create user\n-        UserTO actual = createUser(userTO);\n-        assertNotNull(actual);\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n \n         // 2. check for virtual attribute value\n-        actual = userService.read(actual.getKey());\n-        assertNotNull(actual);\n-        assertEquals(\"virtualvalue\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+        userTO = userService.read(userTO.getKey());\n+        assertNotNull(userTO);\n+        assertEquals(\"virtualvalue\", userTO.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n \n         UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(actual.getKey());\n-        userPatch.getVirAttrs().add(attrAddReplacePatch(\"virtualdata\", \"virtualupdated\"));\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.getVirAttrs().add(attrTO(\"virtualdata\", \"virtualupdated\"));\n \n         // 3. update virtual attribute\n-        actual = updateUser(userPatch);\n-        assertNotNull(actual);\n+        userTO = updateUser(userPatch);\n+        assertNotNull(userTO);\n \n         // 4. check for virtual attribute value\n-        actual = userService.read(actual.getKey());\n-        assertNotNull(actual);\n-        assertEquals(\"virtualupdated\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+        userTO = userService.read(userTO.getKey());\n+        assertNotNull(userTO);\n+        assertEquals(\"virtualupdated\", userTO.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n     }\n \n     @Test\n     public void issueSYNCOPE260() {\n+        // create new virtual schema for the resource below\n+        ResourceTO ws2 = resourceService.read(RESOURCE_NAME_WS2);\n+        ProvisionTO provision = ws2.getProvision(AnyTypeKind.USER.name());\n+        assertNotNull(provision);\n+\n+        VirSchemaTO virSchema = new VirSchemaTO();\n+        virSchema.setKey(\"syncope260\" + getUUIDString());\n+        virSchema.setExtAttrName(\"companyName\");\n+        virSchema.setProvision(provision.getKey());\n+        virSchema = createSchema(SchemaType.VIRTUAL, virSchema);\n+        assertNotNull(virSchema);\n+\n+        AnyTypeClassTO newClass = new AnyTypeClassTO();\n+        newClass.setKey(\"syncope260\" + getUUIDString());\n+        newClass.getVirSchemas().add(virSchema.getKey());\n+        Response response = anyTypeClassService.create(newClass);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatusInfo().getStatusCode());\n+        newClass = getObject(response.getLocation(), AnyTypeClassService.class, AnyTypeClassTO.class);\n+\n         // ----------------------------------\n         // create user and check virtual attribute value propagation\n         // ----------------------------------\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"260@a.com\");\n+        userTO.getAuxClasses().add(newClass.getKey());\n+        userTO.getVirAttrs().add(attrTO(virSchema.getKey(), \"virtualvalue\"));\n         userTO.getResources().add(RESOURCE_NAME_WS2);\n \n         userTO = createUser(userTO);\n@@ -105,26 +132,24 @@ public void issueSYNCOPE260() {\n \n         ConnObjectTO connObjectTO =\n                 resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n-        assertNotNull(connObjectTO);\n-        assertEquals(\"virtualvalue\", connObjectTO.getPlainAttrMap().get(\"NAME\").getValues().get(0));\n+        assertEquals(\"virtualvalue\", connObjectTO.getPlainAttrMap().get(\"COMPANYNAME\").getValues().get(0));\n         // ----------------------------------\n \n         // ----------------------------------\n         // update user virtual attribute and check virtual attribute value update propagation\n         // ----------------------------------\n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(userTO.getKey());\n-        userPatch.getVirAttrs().add(attrAddReplacePatch(\"virtualdata\", \"virtualvalue2\"));\n+        userPatch.getVirAttrs().add(attrTO(virSchema.getKey(), \"virtualvalue2\"));\n \n         userTO = updateUser(userPatch);\n         assertNotNull(userTO);\n         assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n-        assertEquals(\"ws-target-resource-2\", userTO.getPropagationStatusTOs().get(0).getResource());\n+        assertEquals(RESOURCE_NAME_WS2, userTO.getPropagationStatusTOs().get(0).getResource());\n         assertEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationStatusTOs().get(0).getStatus());\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n-        assertNotNull(connObjectTO);\n-        assertEquals(\"virtualvalue2\", connObjectTO.getPlainAttrMap().get(\"NAME\").getValues().get(0));\n+        assertEquals(\"virtualvalue2\", connObjectTO.getPlainAttrMap().get(\"COMPANYNAME\").getValues().get(0));\n         // ----------------------------------\n \n         // ----------------------------------\n@@ -137,9 +162,7 @@ public void issueSYNCOPE260() {\n         assertEquals(\"suspended\", userTO.getStatus());\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n-        assertNotNull(connObjectTO);\n-        assertFalse(connObjectTO.getPlainAttrMap().get(\"NAME\").getValues().isEmpty());\n-        assertEquals(\"virtualvalue2\", connObjectTO.getPlainAttrMap().get(\"NAME\").getValues().get(0));\n+        assertEquals(\"virtualvalue2\", connObjectTO.getPlainAttrMap().get(\"COMPANYNAME\").getValues().get(0));\n \n         statusPatch = new StatusPatch();\n         statusPatch.setKey(userTO.getKey());\n@@ -148,9 +171,7 @@ public void issueSYNCOPE260() {\n         assertEquals(\"active\", userTO.getStatus());\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n-        assertNotNull(connObjectTO);\n-        assertFalse(connObjectTO.getPlainAttrMap().get(\"NAME\").getValues().isEmpty());\n-        assertEquals(\"virtualvalue2\", connObjectTO.getPlainAttrMap().get(\"NAME\").getValues().get(0));\n+        assertEquals(\"virtualvalue2\", connObjectTO.getPlainAttrMap().get(\"COMPANYNAME\").getValues().get(0));\n         // ----------------------------------\n \n         // ----------------------------------\n@@ -167,36 +188,11 @@ public void issueSYNCOPE260() {\n         assertEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationStatusTOs().get(0).getStatus());\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n-        assertNotNull(connObjectTO);\n         assertEquals(\"Surname2\", connObjectTO.getPlainAttrMap().get(\"SURNAME\").getValues().get(0));\n \n-        // attribute \"name\" mapped on virtual attribute \"virtualdata\" shouldn't be changed\n-        assertFalse(connObjectTO.getPlainAttrMap().get(\"NAME\").getValues().isEmpty());\n-        assertEquals(\"virtualvalue2\", connObjectTO.getPlainAttrMap().get(\"NAME\").getValues().get(0));\n-        // ----------------------------------\n-\n-        // ----------------------------------\n-        // remove user virtual attribute and check virtual attribute value (reset)\n-        // ----------------------------------\n-        userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.getVirAttrs().add(new AttrPatch.Builder().\n-                operation(PatchOperation.DELETE).\n-                attrTO(new AttrTO.Builder().schema(\"virtualdata\").build()).build());\n-\n-        userTO = updateUser(userPatch);\n-        assertNotNull(userTO);\n-        assertTrue(userTO.getVirAttrs().isEmpty());\n-        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n-        assertEquals(RESOURCE_NAME_WS2, userTO.getPropagationStatusTOs().get(0).getResource());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationStatusTOs().get(0).getStatus());\n-\n-        connObjectTO = resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n-        assertNotNull(connObjectTO);\n-\n-        // attribute \"name\" mapped on virtual attribute \"virtualdata\" should be reset\n-        assertTrue(connObjectTO.getPlainAttrMap().get(\"NAME\").getValues() == null\n-                || connObjectTO.getPlainAttrMap().get(\"NAME\").getValues().isEmpty());\n+        // virtual attribute value did not change\n+        assertFalse(connObjectTO.getPlainAttrMap().get(\"COMPANYNAME\").getValues().isEmpty());\n+        assertEquals(\"virtualvalue2\", connObjectTO.getPlainAttrMap().get(\"COMPANYNAME\").getValues().get(0));\n         // ----------------------------------\n     }\n \n@@ -241,7 +237,7 @@ public void virAttrCache() {\n \n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(actual.getKey());\n-        userPatch.getVirAttrs().add(attrAddReplacePatch(\"virtualdata\", \"virtualupdated\"));\n+        userPatch.getVirAttrs().add(attrTO(\"virtualdata\", \"virtualupdated\"));\n \n         // 5. update virtual attribute\n         actual = updateUser(userPatch);\n@@ -256,63 +252,73 @@ public void virAttrCache() {\n     @Test\n     public void issueSYNCOPE397() {\n         ResourceTO csv = resourceService.read(RESOURCE_NAME_CSV);\n+\n+        // change mapping of resource-csv\n         MappingTO origMapping = SerializationUtils.clone(csv.getProvisions().get(0).getMapping());\n         try {\n-            // change mapping of resource-csv\n-            assertNotNull(origMapping);\n-            for (MappingItemTO item : csv.getProvisions().get(0).getMapping().getItems()) {\n-                if (\"email\".equals(item.getIntAttrName())) {\n-                    // unset internal attribute mail and set virtual attribute virtualdata as mapped to external email\n-                    item.setIntMappingType(IntMappingType.UserVirtualSchema);\n-                    item.setIntAttrName(\"virtualdata\");\n-                    item.setPurpose(MappingPurpose.BOTH);\n-                    item.setExtAttrName(\"email\");\n-                }\n-            }\n+            // remove this mapping\n+            CollectionUtils.filterInverse(csv.getProvisions().get(0).getMapping().getItems(),\n+                    new Predicate<MappingItemTO>() {\n+\n+                        @Override\n+                        public boolean evaluate(final MappingItemTO item) {\n+                            return \"email\".equals(item.getIntAttrName());\n+                        }\n+                    });\n \n             resourceService.update(csv);\n             csv = resourceService.read(RESOURCE_NAME_CSV);\n             assertNotNull(csv.getProvisions().get(0).getMapping());\n \n-            boolean found = false;\n-            for (MappingItemTO item : csv.getProvisions().get(0).getMapping().getItems()) {\n-                if (\"email\".equals(item.getExtAttrName()) && \"virtualdata\".equals(item.getIntAttrName())) {\n-                    found = true;\n-                }\n-            }\n+            // create new virtual schema for the resource below\n+            ProvisionTO provision = csv.getProvision(AnyTypeKind.USER.name());\n+            assertNotNull(provision);\n \n-            assertTrue(found);\n+            VirSchemaTO virSchema = new VirSchemaTO();\n+            virSchema.setKey(\"syncope397\" + getUUIDString());\n+            virSchema.setExtAttrName(\"email\");\n+            virSchema.setProvision(provision.getKey());\n+            virSchema = createSchema(SchemaType.VIRTUAL, virSchema);\n+            assertNotNull(virSchema);\n+\n+            AnyTypeClassTO newClass = new AnyTypeClassTO();\n+            newClass.setKey(\"syncope397\" + getUUIDString());\n+            newClass.getVirSchemas().add(virSchema.getKey());\n+            Response response = anyTypeClassService.create(newClass);\n+            assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatusInfo().getStatusCode());\n+            newClass = getObject(response.getLocation(), AnyTypeClassService.class, AnyTypeClassTO.class);\n \n             // create a new user\n             UserTO userTO = UserITCase.getUniqueSampleTO(\"397@syncope.apache.org\");\n             userTO.getAuxClasses().add(\"csv\");\n+            userTO.getAuxClasses().add(newClass.getKey());\n             userTO.getResources().clear();\n             userTO.getMemberships().clear();\n             userTO.getDerAttrs().clear();\n             userTO.getVirAttrs().clear();\n \n             userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n             userTO.getDerAttrs().add(attrTO(\"cn\", null));\n-            userTO.getVirAttrs().add(attrTO(\"virtualdata\", \"test@testone.org\"));\n+            userTO.getVirAttrs().add(attrTO(virSchema.getKey(), \"test@testone.org\"));\n             // assign resource-csv to user\n             userTO.getResources().add(RESOURCE_NAME_CSV);\n             // save user\n-            UserTO created = createUser(userTO);\n+            userTO = createUser(userTO);\n             // make std controls about user\n-            assertNotNull(created);\n-            assertTrue(RESOURCE_NAME_CSV.equals(created.getResources().iterator().next()));\n-            assertEquals(\"test@testone.org\", created.getVirAttrs().iterator().next().getValues().get(0));\n+            assertNotNull(userTO);\n+            assertTrue(RESOURCE_NAME_CSV.equals(userTO.getResources().iterator().next()));\n+            assertEquals(\"test@testone.org\", userTO.getVirAttrs().iterator().next().getValues().get(0));\n \n             // update user\n-            UserTO toBeUpdated = userService.read(created.getKey());\n+            UserTO toBeUpdated = userService.read(userTO.getKey());\n             UserPatch userPatch = new UserPatch();\n             userPatch.setKey(toBeUpdated.getKey());\n             userPatch.setPassword(new PasswordPatch.Builder().value(\"password234\").build());\n             // assign new resource to user\n             userPatch.getResources().add(new StringPatchItem.Builder().\n                     operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS2).build());\n             // modify virtual attribute\n-            userPatch.getVirAttrs().add(attrAddReplacePatch(\"virtualdata\", \"test@testoneone.com\"));\n+            userPatch.getVirAttrs().add(attrTO(virSchema.getKey(), \"test@testoneone.com\"));\n \n             // check Syncope change password\n             userPatch.setPassword(new PasswordPatch.Builder().\n@@ -348,15 +354,15 @@ public void issueSYNCOPE442() {\n         userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n \n         // 1. create user\n-        UserTO actual = createUser(userTO);\n-        assertNotNull(actual);\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n \n         // 2. check for virtual attribute value\n-        actual = userService.read(actual.getKey());\n-        assertEquals(\"virattrcache\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+        userTO = userService.read(userTO.getKey());\n+        assertEquals(\"virattrcache\", userTO.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n \n         // ----------------------------------------\n-        // 3. force cache expiring without any modification\n+        // 3. change connector URL so that we are sure that any provided value will come from virtual cache\n         // ----------------------------------------\n         String jdbcURL = null;\n         ConnInstanceTO connInstanceTO = connectorService.readByResource(\n@@ -370,36 +376,29 @@ public void issueSYNCOPE442() {\n         }\n \n         connectorService.update(connInstanceTO);\n-\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(actual.getKey());\n-        userPatch.getVirAttrs().add(attrAddReplacePatch(\"virtualdata\", \"virtualupdated\"));\n-\n-        actual = updateUser(userPatch);\n-        assertNotNull(actual);\n         // ----------------------------------------\n \n         // ----------------------------------------\n-        // 4. update virtual attribute\n+        // 4. update value on external resource\n         // ----------------------------------------\n-        final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n \n         String value = jdbcTemplate.queryForObject(\n-                \"SELECT USERNAME FROM testsync WHERE ID=?\", String.class, actual.getKey());\n+                \"SELECT USERNAME FROM testsync WHERE ID=?\", String.class, userTO.getKey());\n         assertEquals(\"virattrcache\", value);\n \n-        jdbcTemplate.update(\"UPDATE testsync set USERNAME='virattrcache2' WHERE ID=?\", actual.getKey());\n+        jdbcTemplate.update(\"UPDATE testsync set USERNAME='virattrcache2' WHERE ID=?\", userTO.getKey());\n \n         value = jdbcTemplate.queryForObject(\n-                \"SELECT USERNAME FROM testsync WHERE ID=?\", String.class, actual.getKey());\n+                \"SELECT USERNAME FROM testsync WHERE ID=?\", String.class, userTO.getKey());\n         assertEquals(\"virattrcache2\", value);\n         // ----------------------------------------\n \n-        actual = userService.read(actual.getKey());\n-        assertEquals(\"virattrcache\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+        userTO = userService.read(userTO.getKey());\n+        assertEquals(\"virattrcache\", userTO.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n \n         // ----------------------------------------\n-        // 5. restore connector\n+        // 5. restore connector URL, values can be read again from external resource\n         // ----------------------------------------\n         for (ConnConfProperty prop : connInstanceTO.getConfiguration()) {\n             if (\"jdbcUrlTemplate\".equals(prop.getSchema().getName())) {\n@@ -411,8 +410,20 @@ public void issueSYNCOPE442() {\n         connectorService.update(connInstanceTO);\n         // ----------------------------------------\n \n-        actual = userService.read(actual.getKey());\n-        assertEquals(\"virattrcache2\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+        // cached value still in place...\n+        userTO = userService.read(userTO.getKey());\n+        assertEquals(\"virattrcache\", userTO.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n+\n+        // force cache update by adding a resource which has virtualdata mapped for propagation\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS2).build());\n+        userTO = updateUser(userPatch);\n+        assertNotNull(userTO);\n+\n+        userTO = userService.read(userTO.getKey());\n+        assertEquals(\"virattrcache2\", userTO.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n     }\n \n     @Test\n@@ -423,7 +434,7 @@ public void issueSYNCOPE436() {\n         userTO.getResources().add(RESOURCE_NAME_LDAP);\n         userTO.getVirAttrs().add(attrTO(\"virtualReadOnly\", \"readOnly\"));\n         userTO = createUser(userTO);\n-        //Finding no values because the virtual attribute is readonly \n+        // finding no values because the virtual attribute is readonly \n         assertTrue(userTO.getVirAttrMap().get(\"virtualReadOnly\").getValues().isEmpty());\n     }\n \n@@ -527,27 +538,13 @@ public void issueSYNCOPE453() {\n     public void issueSYNCOPE459() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope459@apache.org\");\n         userTO.getResources().clear();\n+        userTO.getResources().add(RESOURCE_NAME_LDAP);\n         userTO.getMemberships().clear();\n         userTO.getVirAttrs().clear();\n \n-        AttrTO virtualReadOnly = attrTO(\"virtualReadOnly\", \"\");\n-        virtualReadOnly.getValues().clear();\n-\n-        userTO.getVirAttrs().add(virtualReadOnly);\n-\n         userTO = createUser(userTO);\n \n         assertNotNull(userTO.getVirAttrMap().get(\"virtualReadOnly\"));\n-\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.getVirAttrs().add(new AttrPatch.Builder().\n-                operation(PatchOperation.ADD_REPLACE).\n-                attrTO(new AttrTO.Builder().schema(\"virtualdata\").build()).\n-                build());\n-\n-        userTO = updateUser(userPatch);\n-        assertNotNull(userTO.getVirAttrMap().get(\"virtualdata\"));\n     }\n \n     @Test\n@@ -572,7 +569,7 @@ public void issueSYNCOPE501() {\n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(userTO.getKey());\n         // change virtual attribute value\n-        userPatch.getVirAttrs().add(attrAddReplacePatch(\"virtualdata\", \"syncope501_updated@apache.org\"));\n+        userPatch.getVirAttrs().add(attrTO(\"virtualdata\", \"syncope501_updated@apache.org\"));\n \n         userTO = updateUser(userPatch);\n         assertNotNull(userTO);\n@@ -584,80 +581,76 @@ public void issueSYNCOPE501() {\n \n     @Test\n     public void issueSYNCOPE691() {\n-        final String res = RESOURCE_NAME_LDAP + \"691\";\n-\n         ResourceTO ldap = resourceService.read(RESOURCE_NAME_LDAP);\n-        ldap.setKey(res);\n-\n         try {\n+            ProvisionTO provision = ldap.getProvision(AnyTypeKind.USER.name());\n+            assertNotNull(provision);\n+            CollectionUtils.filterInverse(provision.getMapping().getItems(), new Predicate<MappingItemTO>() {\n \n-            CollectionUtils.filterInverse(ldap.getProvision(AnyTypeKind.USER.name()).getMapping().getItems(),\n-                    new Predicate<MappingItemTO>() {\n-\n-                        @Override\n-                        public boolean evaluate(final MappingItemTO item) {\n-                            return \"mail\".equals(item.getExtAttrName());\n-                        }\n-                    });\n-\n-            final MappingItemTO mail = new MappingItemTO();\n-            // unset internal attribute mail and set virtual attribute virtualdata as mapped to external email\n-            mail.setIntMappingType(IntMappingType.UserVirtualSchema);\n-            mail.setIntAttrName(\"virtualdata\");\n-            mail.setPurpose(MappingPurpose.BOTH);\n-            mail.setExtAttrName(\"mail\");\n-\n-            ldap.getProvision(AnyTypeKind.USER.name()).getMapping().getItems().add(mail);\n+                @Override\n+                public boolean evaluate(final MappingItemTO item) {\n+                    return \"mail\".equals(item.getExtAttrName());\n+                }\n+            });\n+            provision.getVirSchemas().clear();\n \n+            ldap.setKey(RESOURCE_NAME_LDAP + \"691\" + getUUIDString());\n             resourceService.create(ldap);\n \n-            ldap = resourceService.read(res);\n-            assertNotNull(ldap.getProvision(AnyTypeKind.USER.name()).getMapping());\n-\n-            assertTrue(CollectionUtils.exists(ldap.getProvision(AnyTypeKind.USER.name()).getMapping().getItems(),\n-                    new Predicate<MappingItemTO>() {\n-\n-                        @Override\n-                        public boolean evaluate(final MappingItemTO item) {\n-                            return \"mail\".equals(item.getExtAttrName()) && \"virtualdata\".equals(item.getIntAttrName());\n-                        }\n-                    }));\n+            ldap = resourceService.read(ldap.getKey());\n+            provision = ldap.getProvision(AnyTypeKind.USER.name());\n+            assertNotNull(provision);\n+\n+            // create new virtual schema for the resource below\n+            VirSchemaTO virSchema = new VirSchemaTO();\n+            virSchema.setKey(\"syncope691\" + getUUIDString());\n+            virSchema.setExtAttrName(\"mail\");\n+            virSchema.setProvision(provision.getKey());\n+            virSchema = createSchema(SchemaType.VIRTUAL, virSchema);\n+            assertNotNull(virSchema);\n+\n+            AnyTypeClassTO newClass = new AnyTypeClassTO();\n+            newClass.setKey(\"syncope691\" + getUUIDString());\n+            newClass.getVirSchemas().add(virSchema.getKey());\n+            Response response = anyTypeClassService.create(newClass);\n+            assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatusInfo().getStatusCode());\n+            newClass = getObject(response.getLocation(), AnyTypeClassService.class, AnyTypeClassTO.class);\n \n             // create a new user\n             UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope691@syncope.apache.org\");\n+            userTO.getAuxClasses().add(newClass.getKey());\n             userTO.getResources().clear();\n             userTO.getMemberships().clear();\n             userTO.getDerAttrs().clear();\n             userTO.getVirAttrs().clear();\n \n-            final AttrTO emailTO = new AttrTO();\n-            emailTO.setSchema(\"virtualdata\");\n+            AttrTO emailTO = new AttrTO();\n+            emailTO.setSchema(virSchema.getKey());\n             emailTO.getValues().add(\"test@issue691.dom1.org\");\n             emailTO.getValues().add(\"test@issue691.dom2.org\");\n \n             userTO.getVirAttrs().add(emailTO);\n             // assign resource-ldap691 to user\n-            userTO.getResources().add(res);\n+            userTO.getResources().add(ldap.getKey());\n             // save user\n-            UserTO created = createUser(userTO);\n+            userTO = createUser(userTO);\n             // make std controls about user\n-            assertNotNull(created);\n-            assertTrue(res.equals(created.getResources().iterator().next()));\n+            assertNotNull(userTO);\n+            assertTrue(ldap.getKey().equals(userTO.getResources().iterator().next()));\n \n-            assertEquals(2, created.getVirAttrs().iterator().next().getValues().size(), 0);\n-            assertTrue(created.getVirAttrs().iterator().next().getValues().contains(\"test@issue691.dom1.org\"));\n-            assertTrue(created.getVirAttrs().iterator().next().getValues().contains(\"test@issue691.dom2.org\"));\n+            assertEquals(2, userTO.getVirAttrs().iterator().next().getValues().size(), 0);\n+            assertTrue(userTO.getVirAttrs().iterator().next().getValues().contains(\"test@issue691.dom1.org\"));\n+            assertTrue(userTO.getVirAttrs().iterator().next().getValues().contains(\"test@issue691.dom2.org\"));\n \n             // update user\n             UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(created.getKey());\n+            userPatch.setKey(userTO.getKey());\n             // modify virtual attribute\n-            userPatch.getVirAttrs().add(new AttrPatch.Builder().\n-                    operation(PatchOperation.ADD_REPLACE).\n-                    attrTO(new AttrTO.Builder().schema(\"virtualdata\").\n-                            value(\"test@issue691.dom3.org\").\n-                            value(\"test@issue691.dom4.org\").\n-                            build()).build());\n+            userPatch.getVirAttrs().add(\n+                    new AttrTO.Builder().schema(virSchema.getKey()).\n+                    value(\"test@issue691.dom3.org\").\n+                    value(\"test@issue691.dom4.org\").\n+                    build());\n \n             UserTO updated = updateUser(userPatch);\n             assertNotNull(updated);\n@@ -666,7 +659,7 @@ public boolean evaluate(final MappingItemTO item) {\n             assertTrue(updated.getVirAttrs().iterator().next().getValues().contains(\"test@issue691.dom4.org\"));\n         } finally {\n             try {\n-                resourceService.delete(res);\n+                resourceService.delete(ldap.getKey());\n             } catch (Exception ignore) {\n                 // ignore\n             }"},{"sha":"caae156d5192572042be88b050bbf3d9434bd1df","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/VirSchemaITCase.java","status":"modified","additions":24,"deletions":17,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cd92305562916453bf2aee42bbc3b6d1b07e5cd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java?ref=9cd92305562916453bf2aee42bbc3b6d1b07e5cd","patch":"@@ -27,6 +27,7 @@\n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n@@ -48,41 +49,47 @@ public void list() {\n     }\n \n     @Test\n-    public void read() {\n-        VirSchemaTO vSchemaTO = schemaService.read(SchemaType.VIRTUAL, \"mvirtualdata\");\n-        assertNotNull(vSchemaTO);\n-    }\n+    public void crud() {\n+        ResourceTO csv = resourceService.read(RESOURCE_NAME_CSV);\n+        assertNotNull(csv);\n+        assertEquals(1, csv.getProvisions().size());\n+        assertTrue(csv.getProvisions().get(0).getVirSchemas().isEmpty());\n \n-    @Test\n-    public void create() {\n         VirSchemaTO schema = new VirSchemaTO();\n-        schema.setKey(\"virtual\");\n+        schema.setKey(\"virtualTest\" + getUUIDString());\n+        schema.setExtAttrName(\"name\");\n+        schema.setProvision(csv.getProvisions().get(0).getKey());\n \n-        VirSchemaTO actual = createSchema(SchemaType.VIRTUAL, schema);\n-        assertNotNull(actual);\n+        schema = createSchema(SchemaType.VIRTUAL, schema);\n+        assertNotNull(schema);\n+        assertEquals(csv.getProvisions().get(0).getKey(), schema.getProvision());\n \n-        actual = schemaService.read(SchemaType.VIRTUAL, actual.getKey());\n-        assertNotNull(actual);\n-    }\n+        csv = resourceService.read(RESOURCE_NAME_CSV);\n+        assertNotNull(csv);\n+        assertEquals(1, csv.getProvisions().size());\n+        assertFalse(csv.getProvisions().get(0).getVirSchemas().isEmpty());\n \n-    @Test\n-    public void delete() {\n-        VirSchemaTO schema = schemaService.read(SchemaType.VIRTUAL, \"rvirtualdata\");\n+        schema = schemaService.read(SchemaType.VIRTUAL, schema.getKey());\n         assertNotNull(schema);\n \n         schemaService.delete(SchemaType.VIRTUAL, schema.getKey());\n \n         try {\n-            schemaService.read(SchemaType.VIRTUAL, \"rvirtualdata\");\n+            schemaService.read(SchemaType.VIRTUAL, schema.getKey());\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n+\n+        csv = resourceService.read(RESOURCE_NAME_CSV);\n+        assertNotNull(csv);\n+        assertEquals(1, csv.getProvisions().size());\n+        assertTrue(csv.getProvisions().get(0).getVirSchemas().isEmpty());\n     }\n \n     @Test\n     public void issueSYNCOPE323() {\n-        VirSchemaTO actual = schemaService.read(SchemaType.VIRTUAL, \"mvirtualdata\");\n+        VirSchemaTO actual = schemaService.read(SchemaType.VIRTUAL, \"virtualdata\");\n         assertNotNull(actual);\n \n         try {"}]}