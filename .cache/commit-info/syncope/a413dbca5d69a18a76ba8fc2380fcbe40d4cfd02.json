{"sha":"a413dbca5d69a18a76ba8fc2380fcbe40d4cfd02","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE0MTNkYmNhNWQ2OWExOGE3NmJhOGZjMjM4MGZjYmU0MGQ0Y2ZkMDI=","commit":{"author":{"name":"skylark17","email":"matteo.alessandroni@tirasa.net","date":"2018-03-19T16:02:16Z"},"committer":{"name":"skylark17","email":"matteo.alessandroni@tirasa.net","date":"2018-03-19T16:16:03Z"},"message":"[SYNCOPE-1283] Fix checkstyle","tree":{"sha":"a2c5feb335e357529314d73fd76fa3b7be6be4a6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a2c5feb335e357529314d73fd76fa3b7be6be4a6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a413dbca5d69a18a76ba8fc2380fcbe40d4cfd02","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a413dbca5d69a18a76ba8fc2380fcbe40d4cfd02","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a413dbca5d69a18a76ba8fc2380fcbe40d4cfd02","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a413dbca5d69a18a76ba8fc2380fcbe40d4cfd02/comments","author":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"committer":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"parents":[{"sha":"410972518a21761672860f1d2e3e411592006c16","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/410972518a21761672860f1d2e3e411592006c16","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/410972518a21761672860f1d2e3e411592006c16"}],"stats":{"total":222,"additions":222,"deletions":0},"files":[{"sha":"1a3ee968f7291f32aac1b2b8d361a8d4761e7b8d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AzurePropagationActions.java","status":"added","additions":218,"deletions":0,"changes":218,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a413dbca5d69a18a76ba8fc2380fcbe40d4cfd02/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAzurePropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a413dbca5d69a18a76ba8fc2380fcbe40d4cfd02/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAzurePropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAzurePropagationActions.java?ref=a413dbca5d69a18a76ba8fc2380fcbe40d4cfd02","patch":"@@ -0,0 +1,218 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.propagation;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeUtil;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.Name;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * This class is required during setup of an External Resource based on the ConnId\n+ * <a href=\"https://github.com/Tirasa/ConnIdAzureBundle\">Azure connector</a>.\n+ *\n+ * It manages:\n+ * <ol>\n+ * <li>the User id provided by Azure, which will need to be used for all subsequent operations</li>\n+ * <li>the Group id provided by Azure, which will need to be used for all subsequent operations</li>\n+ * </ol>\n+ */\n+public class AzurePropagationActions implements PropagationActions {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AzurePropagationActions.class);\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private GroupDAO groupDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Autowired\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n+    private static final String USER_MAIL_NICKNAME = \"mailNickname\";\n+\n+    private static final String GROUP_MAIL_NICKNAME = \"mailNickname\";\n+\n+    protected String getAzureIdSchema() {\n+        return \"AzureUserId\";\n+    }\n+\n+    protected String getAzureGroupIdSchema() {\n+        return \"AzureGroupId\";\n+    }\n+\n+    @Transactional\n+    @Override\n+    public void before(final PropagationTask task, final ConnectorObject beforeObj) {\n+        switch (task.getAnyTypeKind()) {\n+            case USER:\n+                User user = userDAO.find(task.getEntityKey());\n+                if (user != null) {\n+                    Set<Attribute> attributes = new HashSet<>(task.getAttributes());\n+\n+                    // Ensure to set __NAME__ value to user's \"mailNickname\"\n+                    Name name = AttributeUtil.getNameFromAttributes(attributes);\n+                    if (name != null) {\n+                        attributes.remove(name);\n+                    }\n+                    attributes.add(\n+                            new Name(AttributeUtil.find(USER_MAIL_NICKNAME, attributes).getValue().get(0).toString()));\n+\n+                    task.setAttributes(attributes);\n+                }\n+\n+                break;\n+            case GROUP:\n+                Set<Attribute> attributes = new HashSet<>(task.getAttributes());\n+\n+                // Ensure to set __NAME__ value to user's \"mailNickname\"\n+                Name name = AttributeUtil.getNameFromAttributes(attributes);\n+                if (name != null) {\n+                    attributes.remove(name);\n+                }\n+                attributes.add(\n+                        new Name(AttributeUtil.find(GROUP_MAIL_NICKNAME, attributes).getValue().get(0).toString()));\n+\n+                task.setAttributes(attributes);\n+                break;\n+            default:\n+                LOG.debug(\"Not about user, or group, not doing anything\");\n+                break;\n+        }\n+    }\n+\n+    @Transactional\n+    @Override\n+    public void after(final PropagationTask task, final TaskExec execution, final ConnectorObject afterObj) {\n+        if (task.getOperation() == ResourceOperation.DELETE || task.getOperation() == ResourceOperation.NONE) {\n+            return;\n+        }\n+\n+        if (AnyTypeKind.USER.equals(task.getAnyTypeKind())) {\n+\n+            User user = userDAO.find(task.getEntityKey());\n+            if (user == null) {\n+                LOG.error(\"Could not find user {}, skipping\", task.getEntityKey());\n+            } else {\n+                boolean modified = false;\n+                AnyUtils anyUtils = anyUtilsFactory.getInstance(user);\n+\n+                // Azure User ID\n+                PlainSchema azureId = plainSchemaDAO.find(getAzureIdSchema());\n+                if (azureId == null) {\n+                    LOG.error(\"Could not find schema {}, skipping\", getAzureIdSchema());\n+                } else {\n+                    // set back the __UID__ received by Azure\n+                    UPlainAttr attr = user.getPlainAttr(getAzureIdSchema()).orElse(null);\n+                    if (attr == null) {\n+                        attr = entityFactory.newEntity(UPlainAttr.class);\n+                        attr.setSchema(azureId);\n+                        attr.setOwner(user);\n+                        user.add(attr);\n+\n+                        try {\n+                            attr.add(afterObj.getUid().getUidValue(), anyUtils);\n+                            modified = true;\n+                        } catch (InvalidPlainAttrValueException e) {\n+                            LOG.error(\"Invalid value for attribute {}: {}\",\n+                                    azureId.getKey(), afterObj.getUid().getUidValue(), e);\n+                        }\n+                    } else {\n+                        LOG.debug(\"User {} has already {} assigned: {}\",\n+                                user, azureId.getKey(), attr.getValuesAsStrings());\n+                    }\n+                }\n+\n+                if (modified) {\n+                    userDAO.save(user);\n+                }\n+            }\n+        } else if (AnyTypeKind.GROUP.equals(task.getAnyTypeKind())) {\n+\n+            Group group = groupDAO.find(task.getEntityKey());\n+            if (group == null) {\n+                LOG.error(\"Could not find group {}, skipping\", task.getEntityKey());\n+            } else {\n+                boolean modified = false;\n+                AnyUtils anyUtils = anyUtilsFactory.getInstance(group);\n+\n+                // Azure Group ID\n+                PlainSchema azureId = plainSchemaDAO.find(getAzureGroupIdSchema());\n+                if (azureId == null) {\n+                    LOG.error(\"Could not find schema {}, skipping\", getAzureGroupIdSchema());\n+                } else {\n+                    // set back the __UID__ received by Azure\n+                    GPlainAttr attr = group.getPlainAttr(getAzureGroupIdSchema()).orElse(null);\n+                    if (attr == null) {\n+                        attr = entityFactory.newEntity(GPlainAttr.class);\n+                        attr.setSchema(azureId);\n+                        attr.setOwner(group);\n+                        group.add(attr);\n+\n+                        try {\n+                            attr.add(afterObj.getUid().getUidValue(), anyUtils);\n+                            modified = true;\n+                        } catch (InvalidPlainAttrValueException e) {\n+                            LOG.error(\"Invalid value for attribute {}: {}\",\n+                                    azureId.getKey(), afterObj.getUid().getUidValue(), e);\n+                        }\n+                    } else {\n+                        LOG.debug(\"Group {} has already {} assigned: {}\",\n+                                group, azureId.getKey(), attr.getValuesAsStrings());\n+                    }\n+                }\n+\n+                if (modified) {\n+                    groupDAO.save(group);\n+                }\n+            }\n+        }\n+    }\n+\n+}"},{"sha":"352692e99a75296c063cda20245b0265c3373b66","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a413dbca5d69a18a76ba8fc2380fcbe40d4cfd02/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a413dbca5d69a18a76ba8fc2380fcbe40d4cfd02/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=a413dbca5d69a18a76ba8fc2380fcbe40d4cfd02","patch":"@@ -65,7 +65,9 @@\n import org.apache.syncope.core.persistence.jpa.dao.DefaultAccountRule;\n import org.apache.syncope.core.persistence.jpa.dao.DefaultPasswordRule;\n import org.apache.syncope.core.persistence.jpa.dao.DefaultPullCorrelationRule;\n+import org.apache.syncope.core.provisioning.java.propagation.AzurePropagationActions;\n import org.apache.syncope.core.provisioning.java.propagation.DBPasswordPropagationActions;\n+import org.apache.syncope.core.provisioning.java.propagation.GoogleAppsPropagationActions;\n import org.apache.syncope.core.provisioning.java.propagation.LDAPMembershipPropagationActions;\n import org.apache.syncope.core.provisioning.java.propagation.LDAPPasswordPropagationActions;\n import org.apache.syncope.core.provisioning.java.pushpull.DBPasswordPullActions;\n@@ -180,6 +182,8 @@ public class ITImplementationLookup implements ImplementationLookup {\n             classNames.add(LDAPMembershipPropagationActions.class.getName());\n             classNames.add(LDAPPasswordPropagationActions.class.getName());\n             classNames.add(DBPasswordPropagationActions.class.getName());\n+            classNames.add(AzurePropagationActions.class.getName());\n+            classNames.add(GoogleAppsPropagationActions.class.getName());\n             put(ImplementationType.PROPAGATION_ACTIONS, classNames);\n \n             classNames = new HashSet<>();"}]}