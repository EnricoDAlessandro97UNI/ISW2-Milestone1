{"sha":"b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmIyYjhlZTE5OThjYjYwZDVmYzMxZTJjMTEyODNmZGJmYWViN2NjNzM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-03-03T13:00:26Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-03-03T13:00:46Z"},"message":"[SYNCOPE-1036] Removing WebSocketBehavior from eveywhere but Topology","tree":{"sha":"e45f9e000dac053268bcb9169532914c87ca6dd2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e45f9e000dac053268bcb9169532914c87ca6dd2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"16020a557ad314d9034712f4bed8d13b90921166","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/16020a557ad314d9034712f4bed8d13b90921166","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/16020a557ad314d9034712f4bed8d13b90921166"}],"stats":{"total":648,"additions":241,"deletions":407},"files":[{"sha":"a00183906dba052c619cd39b4e47bf21f3de8292","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":0,"deletions":21,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73","patch":"@@ -28,8 +28,6 @@\n import java.util.Set;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.ScheduledFuture;\n-import java.util.concurrent.TimeUnit;\n import javax.ws.rs.core.EntityTag;\n import javax.ws.rs.core.MediaType;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -93,8 +91,6 @@ public class SyncopeConsoleSession extends AuthenticatedWebSession {\n \n     private Roles roles;\n \n-    private boolean checkReconciliationJob = false;\n-\n     public static SyncopeConsoleSession get() {\n         return (SyncopeConsoleSession) Session.get();\n     }\n@@ -120,15 +116,6 @@ public void execute(final Runnable command) {\n         executorService.execute(command);\n     }\n \n-    public ScheduledFuture<?> scheduleAtFixedRate(\n-            final Runnable command,\n-            final long initialDelay,\n-            final long period,\n-            final TimeUnit unit) {\n-\n-        return executorService.scheduleAtFixedRate(command, initialDelay, period, unit);\n-    }\n-\n     @Override\n     public void invalidate() {\n         if (getJWT() != null) {\n@@ -258,12 +245,4 @@ public FastDateFormat getDateFormat() {\n         return FastDateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, locale);\n     }\n \n-    public boolean isCheckReconciliationJob() {\n-        return checkReconciliationJob;\n-    }\n-\n-    public void setCheckReconciliationJob(final boolean checkReconciliationJob) {\n-        this.checkReconciliationJob = checkReconciliationJob;\n-    }\n-\n }"},{"sha":"ffcb7ede12997bf264b91cb313cf7cf2b7ba503c","filename":"client/console/src/main/java/org/apache/syncope/client/console/approvals/ApprovalDirectoryPanel.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApprovalDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApprovalDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApprovalDirectoryPanel.java?ref=b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73","patch":"@@ -72,6 +72,7 @@ public ApprovalDirectoryPanel(final String id, final PageReference pageReference\n             @Override\n             public void onClose(final AjaxRequestTarget target) {\n                 updateResultTable(target);\n+                ((BasePage) pageReference.getPage()).getApprovalsWidget().refreshLatestAlerts(target);\n                 modal.show(false);\n             }\n         });"},{"sha":"cc19629c33b7f08eed1ee3b3f8c09d2b4bc3081a","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/BasePage.java","status":"modified","additions":8,"deletions":28,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java?ref=b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73","patch":"@@ -20,7 +20,6 @@\n \n import java.io.Serializable;\n import java.util.List;\n-import java.util.concurrent.TimeUnit;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n import org.apache.syncope.client.console.SyncopeConsoleApplication;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n@@ -35,8 +34,6 @@\n import org.apache.syncope.client.console.wicket.markup.head.MetaHeaderItem;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.widgets.ApprovalsWidget;\n-import org.apache.syncope.client.console.widgets.JobWidget;\n-import org.apache.syncope.client.console.widgets.ReconciliationWidget;\n import org.apache.syncope.common.lib.info.SystemInfo;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.AttributeModifier;\n@@ -60,8 +57,6 @@\n import org.apache.wicket.markup.html.link.Link;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n-import org.apache.wicket.protocol.ws.api.WebSocketBehavior;\n-import org.apache.wicket.protocol.ws.api.message.ConnectedMessage;\n import org.apache.wicket.request.handler.resource.ResourceStreamRequestHandler;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.apache.wicket.request.resource.ContentDisposition;\n@@ -80,35 +75,15 @@ public class BasePage extends WebPage implements IAjaxIndicatorAware {\n \n     protected NotificationPanel notificationPanel;\n \n+    protected ApprovalsWidget approvalsWidget;\n+\n     public BasePage() {\n         this(null);\n     }\n \n     public BasePage(final PageParameters parameters) {\n         super(parameters);\n \n-        // Native WebSocket\n-        add(new WebSocketBehavior() {\n-\n-            private static final long serialVersionUID = 3109256773218160485L;\n-\n-            @Override\n-            protected void onConnect(final ConnectedMessage message) {\n-                super.onConnect(message);\n-\n-                SyncopeConsoleSession.get().scheduleAtFixedRate(\n-                        new ApprovalsWidget.ApprovalInfoUpdater(message), 0, 30, TimeUnit.SECONDS);\n-\n-                if (BasePage.this instanceof Dashboard) {\n-                    SyncopeConsoleSession.get().scheduleAtFixedRate(\n-                            new JobWidget.JobInfoUpdater(message), 0, 10, TimeUnit.SECONDS);\n-                    SyncopeConsoleSession.get().scheduleAtFixedRate(\n-                            new ReconciliationWidget.ReconciliationJobInfoUpdater(message), 0, 10, TimeUnit.SECONDS);\n-                }\n-            }\n-\n-        });\n-\n         body = new WebMarkupContainer(\"body\");\n         Serializable leftMenuCollapse = SyncopeConsoleSession.get().getAttribute(SyncopeConsoleSession.MENU_COLLAPSE);\n         if ((leftMenuCollapse instanceof Boolean) && ((Boolean) leftMenuCollapse)) {\n@@ -123,7 +98,8 @@ protected void onConnect(final ConnectedMessage message) {\n         body.add(new Label(\"version\", SyncopeConsoleApplication.get().getVersion()));\n         body.add(new Label(\"username\", SyncopeConsoleSession.get().getSelfTO().getUsername()));\n \n-        body.add(new ApprovalsWidget(\"approvalsWidget\", getPageReference()).setRenderBodyOnly(true));\n+        approvalsWidget = new ApprovalsWidget(\"approvalsWidget\", getPageReference());\n+        body.add(approvalsWidget.setRenderBodyOnly(true));\n \n         // right sidebar\n         SystemInfo systemInfo = SyncopeConsoleSession.get().getSystemInfo();\n@@ -403,6 +379,10 @@ public NotificationPanel getNotificationPanel() {\n         return notificationPanel;\n     }\n \n+    public ApprovalsWidget getApprovalsWidget() {\n+        return approvalsWidget;\n+    }\n+\n     /**\n      * Set a WindowClosedCallback for a Modal instance.\n      *"},{"sha":"dfb8495565f967c783e41289c984a3161f9a969a","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/NotificationRestClient.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FNotificationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FNotificationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FNotificationRestClient.java?ref=b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73","patch":"@@ -23,6 +23,7 @@\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.MailTemplateTO;\n import org.apache.syncope.common.lib.to.NotificationTO;\n import org.apache.syncope.common.lib.types.MailTemplateFormat;\n@@ -38,6 +39,10 @@ public List<NotificationTO> list() {\n         return getService(NotificationService.class).list();\n     }\n \n+    public JobTO getJob() {\n+        return getService(NotificationService.class).getJob();\n+    }\n+\n     public NotificationTO read(final String key) {\n         return getService(NotificationService.class).read(key);\n     }"},{"sha":"38f86bcaeb79e52c3595c2fe5b5131dc322552e0","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ReportRestClient.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java?ref=b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ExecTO;\n+import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.to.ReportTemplateTO;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n@@ -51,6 +52,10 @@ public List<ReportTO> list() {\n         return getService(ReportService.class).list();\n     }\n \n+    public List<JobTO> listJobs() {\n+        return getService(ReportService.class).listJobs();\n+    }\n+\n     public void create(final ReportTO reportTO) {\n         getService(ReportService.class).create(reportTO);\n     }"},{"sha":"f1b6ca970478c5c0ffa65623499a9805d30b60e8","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n+import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -45,6 +46,10 @@ public class TaskRestClient extends BaseRestClient implements ExecutionRestClien\n \n     private static final long serialVersionUID = 6284485820911028843L;\n \n+    public List<JobTO> listJobs() {\n+        return getService(TaskService.class).listJobs();\n+    }\n+\n     public int count(final TaskType kind) {\n         return getService(TaskService.class).list(\n                 new TaskQuery.Builder(kind).page(1).size(1).build()).getTotalCount();\n@@ -53,13 +58,13 @@ public int count(final TaskType kind) {\n     public int count(final String resource, final TaskType kind) {\n         return getService(TaskService.class).list(\n                 new TaskQuery.Builder(kind).resource(resource).page(1).size(1).\n-                build()).getTotalCount();\n+                        build()).getTotalCount();\n     }\n \n     public int count(final AnyTypeKind anyTypeKind, final String entityKey, final TaskType kind) {\n         return getService(TaskService.class).list(\n                 new TaskQuery.Builder(kind).anyTypeKind(anyTypeKind).entityKey(entityKey).page(1).size(1).\n-                build()).getTotalCount();\n+                        build()).getTotalCount();\n     }\n \n     @Override"},{"sha":"b70214b8cb12d7f30b9815eb186ad6ff4243ebaa","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java?ref=b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73","patch":"@@ -465,7 +465,7 @@ public void renderHead(final Component component, final IHeaderResponse response\n \n         jsPlace.add(new AbstractAjaxTimerBehavior(Duration.seconds(2)) {\n \n-            private static final long serialVersionUID = 1L;\n+            private static final long serialVersionUID = -4426283634345968585L;\n \n             @Override\n             protected void onTimer(final AjaxRequestTarget target) {"},{"sha":"ef147f3f2c77a686382d6dab8a86d53bdccee38f","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/ApprovalsWidget.java","status":"modified","additions":45,"deletions":101,"changes":146,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FApprovalsWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FApprovalsWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FApprovalsWidget.java?ref=b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73","patch":"@@ -19,23 +19,22 @@\n package org.apache.syncope.client.console.widgets;\n \n import java.io.Serializable;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.pages.Approvals;\n+import org.apache.syncope.client.console.rest.UserWorkflowRestClient;\n+import org.apache.syncope.client.console.wicket.ajax.IndicatorAjaxTimerBehavior;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n-import org.apache.syncope.common.rest.api.service.UserWorkflowService;\n-import org.apache.wicket.Application;\n import org.apache.wicket.PageReference;\n-import org.apache.wicket.ThreadContext;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n-import org.apache.wicket.event.IEvent;\n import org.apache.wicket.markup.ComponentTag;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.WebPage;\n@@ -46,58 +45,69 @@\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.model.util.ListModel;\n-import org.apache.wicket.protocol.ws.WebSocketSettings;\n-import org.apache.wicket.protocol.ws.api.WebSocketPushBroadcaster;\n-import org.apache.wicket.protocol.ws.api.event.WebSocketPushPayload;\n-import org.apache.wicket.protocol.ws.api.message.ConnectedMessage;\n-import org.apache.wicket.protocol.ws.api.message.IWebSocketPushMessage;\n-import org.apache.wicket.protocol.ws.api.registry.IKey;\n+import org.apache.wicket.util.time.Duration;\n \n public class ApprovalsWidget extends AlertWidget<WorkflowFormTO> {\n \n     private static final long serialVersionUID = 7667120094526529934L;\n \n+    private final UserWorkflowRestClient restClient = new UserWorkflowRestClient();\n+\n+    private final List<WorkflowFormTO> lastApprovals = new ArrayList<>();\n+\n     public ApprovalsWidget(final String id, final PageReference pageRef) {\n         super(id);\n         setOutputMarkupId(true);\n-    }\n \n-    @Override\n-    public void onEvent(final IEvent<?> event) {\n-        if (event.getPayload() instanceof WebSocketPushPayload) {\n-            WebSocketPushPayload wsEvent = (WebSocketPushPayload) event.getPayload();\n-            if (wsEvent.getMessage() instanceof ApprovalsWidgetMessage) {\n-                List<WorkflowFormTO> updatedApprovals = ((ApprovalsWidgetMessage) wsEvent.getMessage()).\n-                        getUpdatedApprovals();\n-                if (!latestAlerts.getObject().equals(updatedApprovals)) {\n-                    latestAlerts.getObject().clear();\n-                    latestAlerts.getObject().addAll(updatedApprovals);\n-\n-                    ApprovalsWidget.this.linkAlertsNumber.\n-                            setDefaultModelObject(ApprovalsWidget.this.latestAlerts.getObject().size());\n-                    wsEvent.getHandler().add(ApprovalsWidget.this.linkAlertsNumber);\n-\n-                    ApprovalsWidget.this.headerAlertsNumber.\n-                            setDefaultModelObject(ApprovalsWidget.this.latestAlerts.getObject().size());\n-                    wsEvent.getHandler().add(ApprovalsWidget.this.headerAlertsNumber);\n-\n-                    ApprovalsWidget.this.latestFive.removeAll();\n-                    wsEvent.getHandler().add(ApprovalsWidget.this.latestAlertsList);\n+        latestAlertsList.add(new IndicatorAjaxTimerBehavior(Duration.seconds(30)) {\n+\n+            private static final long serialVersionUID = 7298597675929755960L;\n+\n+            @Override\n+            protected void onTimer(final AjaxRequestTarget target) {\n+                if (!latestAlerts.getObject().equals(lastApprovals)) {\n+                    refreshLatestAlerts(target);\n                 }\n             }\n-        }\n+        });\n+    }\n+\n+    public final void refreshLatestAlerts(final AjaxRequestTarget target) {\n+        latestAlerts.getObject().clear();\n+        latestAlerts.getObject().addAll(lastApprovals);\n+\n+        linkAlertsNumber.setDefaultModelObject(latestAlerts.getObject().size());\n+        target.add(linkAlertsNumber);\n+\n+        headerAlertsNumber.setDefaultModelObject(latestAlerts.getObject().size());\n+        target.add(headerAlertsNumber);\n+\n+        latestFive.removeAll();\n+        target.add(latestAlertsList);\n+\n+        lastApprovals.clear();\n+        lastApprovals.addAll(latestAlerts.getObject());\n     }\n \n     @Override\n     protected IModel<List<WorkflowFormTO>> getLatestAlerts() {\n-\n         return new ListModel<WorkflowFormTO>() {\n \n             private static final long serialVersionUID = -2583290457773357445L;\n \n             @Override\n             public List<WorkflowFormTO> getObject() {\n-                return ApprovalInfoUpdater.getLatestAlerts();\n+                List<WorkflowFormTO> updatedApprovals;\n+                if (SyncopeConsoleSession.get().owns(StandardEntitlement.WORKFLOW_FORM_LIST)\n+                        && SyncopeConsoleSession.get().owns(StandardEntitlement.WORKFLOW_FORM_READ)) {\n+\n+                    updatedApprovals = restClient.getForms();\n+                    Collections.sort(updatedApprovals, new WorkflowFormComparator());\n+                } else {\n+                    updatedApprovals = Collections.<WorkflowFormTO>emptyList();\n+                }\n+\n+                return updatedApprovals;\n             }\n         };\n     }\n@@ -166,74 +176,8 @@ protected void onComponentTag(final ComponentTag tag) {\n \n     }\n \n-    public static final class ApprovalInfoUpdater implements Runnable {\n-\n-        private final Application application;\n-\n-        private final SyncopeConsoleSession session;\n-\n-        private final IKey key;\n-\n-        public ApprovalInfoUpdater(final ConnectedMessage message) {\n-            this.application = message.getApplication();\n-            this.session = SyncopeConsoleSession.get();\n-            this.key = message.getKey();\n-        }\n-\n-        @Override\n-        public void run() {\n-            try {\n-                ThreadContext.setApplication(application);\n-                ThreadContext.setSession(session);\n-\n-                List<WorkflowFormTO> updatedApprovals = getLatestAlerts();\n-\n-                WebSocketSettings settings = WebSocketSettings.Holder.get(application);\n-                WebSocketPushBroadcaster broadcaster = new WebSocketPushBroadcaster(settings.getConnectionRegistry());\n-                broadcaster.broadcast(\n-                        new ConnectedMessage(application, session.getId(), key),\n-                        new ApprovalsWidgetMessage(updatedApprovals));\n-            } catch (Throwable t) {\n-                LOG.error(\"Unexpected error while checking for updated approval info\", t);\n-            } finally {\n-                ThreadContext.detach();\n-            }\n-        }\n-\n-        protected static List<WorkflowFormTO> getLatestAlerts() {\n-            final List<WorkflowFormTO> updatedApprovals;\n-            if (SyncopeConsoleSession.get().owns(StandardEntitlement.WORKFLOW_FORM_LIST)\n-                    && SyncopeConsoleSession.get().owns(StandardEntitlement.WORKFLOW_FORM_READ)) {\n-                updatedApprovals = SyncopeConsoleSession.get().getService(UserWorkflowService.class).getForms();\n-            } else {\n-                updatedApprovals = Collections.<WorkflowFormTO>emptyList();\n-            }\n-            Collections.sort(updatedApprovals, new WorkflowFormComparator());\n-            return updatedApprovals;\n-        }\n-    }\n-\n-    private static class ApprovalsWidgetMessage implements IWebSocketPushMessage, Serializable {\n-\n-        private static final long serialVersionUID = -824793424112532838L;\n-\n-        private final List<WorkflowFormTO> updatedApprovals;\n-\n-        ApprovalsWidgetMessage(final List<WorkflowFormTO> updatedApprovals) {\n-            this.updatedApprovals = updatedApprovals;\n-        }\n-\n-        public List<WorkflowFormTO> getUpdatedApprovals() {\n-            return updatedApprovals;\n-        }\n-\n-    }\n-\n     private static class WorkflowFormComparator implements Comparator<WorkflowFormTO>, Serializable {\n \n-        /**\n-         *\n-         */\n         private static final long serialVersionUID = 4650217602780789075L;\n \n         @Override"},{"sha":"1129ea67d48945e29032b2187b535900feee43ed","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/JobWidget.java","status":"modified","additions":82,"deletions":132,"changes":214,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java?ref=b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73","patch":"@@ -33,6 +33,10 @@\n import org.apache.syncope.client.console.panels.DirectoryPanel;\n import org.apache.syncope.client.console.panels.ExecMessageModal;\n import org.apache.syncope.client.console.rest.BaseRestClient;\n+import org.apache.syncope.client.console.rest.NotificationRestClient;\n+import org.apache.syncope.client.console.rest.ReportRestClient;\n+import org.apache.syncope.client.console.rest.TaskRestClient;\n+import org.apache.syncope.client.console.wicket.ajax.IndicatorAjaxTimerBehavior;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n@@ -44,12 +48,7 @@\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n-import org.apache.syncope.common.rest.api.service.NotificationService;\n-import org.apache.syncope.common.rest.api.service.ReportService;\n-import org.apache.syncope.common.rest.api.service.TaskService;\n-import org.apache.wicket.Application;\n import org.apache.wicket.PageReference;\n-import org.apache.wicket.ThreadContext;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.event.IEvent;\n@@ -61,6 +60,7 @@\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n import org.apache.wicket.extensions.markup.html.tabs.ITab;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.WebPage;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.markup.repeater.Item;\n@@ -69,26 +69,17 @@\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.model.StringResourceModel;\n-import org.apache.wicket.protocol.ws.WebSocketSettings;\n-import org.apache.wicket.protocol.ws.api.WebSocketPushBroadcaster;\n-import org.apache.wicket.protocol.ws.api.event.WebSocketPushPayload;\n-import org.apache.wicket.protocol.ws.api.message.ConnectedMessage;\n-import org.apache.wicket.protocol.ws.api.message.IWebSocketPushMessage;\n-import org.apache.wicket.protocol.ws.api.registry.IKey;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.apache.wicket.util.time.Duration;\n \n public class JobWidget extends BaseWidget {\n \n     private static final long serialVersionUID = 7667120094526529934L;\n \n-    private static final Logger LOG = LoggerFactory.getLogger(JobWidget.class);\n-\n     private static final int ROWS = 5;\n \n     private final BaseModal<Serializable> modal = new BaseModal<Serializable>(\"modal\") {\n \n-        private static final long serialVersionUID = 1L;\n+        private static final long serialVersionUID = 389935548143327858L;\n \n         @Override\n         protected void onConfigure() {\n@@ -99,7 +90,7 @@ protected void onConfigure() {\n \n     private final BaseModal<Serializable> detailModal = new BaseModal<Serializable>(\"detailModal\") {\n \n-        private static final long serialVersionUID = 1L;\n+        private static final long serialVersionUID = 389935548143327858L;\n \n         @Override\n         protected void onConfigure() {\n@@ -110,7 +101,7 @@ protected void onConfigure() {\n \n     private final BaseModal<ReportTO> reportModal = new BaseModal<ReportTO>(\"reportModal\") {\n \n-        private static final long serialVersionUID = 1L;\n+        private static final long serialVersionUID = 389935548143327858L;\n \n         @Override\n         protected void onConfigure() {\n@@ -119,37 +110,13 @@ protected void onConfigure() {\n         }\n     };\n \n-    private static List<JobTO> getAvailable(final SyncopeConsoleSession session) {\n-        List<JobTO> available = new ArrayList<>();\n+    private final NotificationRestClient notificationRestClient = new NotificationRestClient();\n \n-        if (session.owns(StandardEntitlement.NOTIFICATION_LIST)) {\n-            JobTO notificationJob = session.getService(NotificationService.class).getJob();\n-            if (notificationJob != null) {\n-                available.add(notificationJob);\n-            }\n-        }\n-        if (session.owns(StandardEntitlement.TASK_LIST)) {\n-            available.addAll(session.getService(TaskService.class).listJobs());\n-        }\n-        if (session.owns(StandardEntitlement.REPORT_LIST)) {\n-            available.addAll(session.getService(ReportService.class).listJobs());\n-        }\n+    private final TaskRestClient taskRestClient = new TaskRestClient();\n \n-        return available;\n-    }\n-\n-    private static List<ExecTO> getRecent(final SyncopeConsoleSession session) {\n-        List<ExecTO> recent = new ArrayList<>();\n-\n-        if (session.owns(StandardEntitlement.TASK_LIST)) {\n-            recent.addAll(session.getService(ReportService.class).listRecentExecutions(10));\n-        }\n-        if (session.owns(StandardEntitlement.REPORT_LIST)) {\n-            recent.addAll(session.getService(TaskService.class).listRecentExecutions(10));\n-        }\n+    private final ReportRestClient reportRestClient = new ReportRestClient();\n \n-        return recent;\n-    }\n+    private final WebMarkupContainer container;\n \n     private final List<JobTO> available;\n \n@@ -176,7 +143,7 @@ public void onClose(final AjaxRequestTarget target) {\n         add(detailModal);\n         detailModal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n \n-            private static final long serialVersionUID = 1L;\n+            private static final long serialVersionUID = 8804221891699487139L;\n \n             @Override\n             public void onClose(final AjaxRequestTarget target) {\n@@ -187,7 +154,7 @@ public void onClose(final AjaxRequestTarget target) {\n         add(reportModal);\n         reportModal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n \n-            private static final long serialVersionUID = 1L;\n+            private static final long serialVersionUID = 8804221891699487139L;\n \n             @Override\n             public void onClose(final AjaxRequestTarget target) {\n@@ -197,10 +164,72 @@ public void onClose(final AjaxRequestTarget target) {\n \n         reportModal.size(Modal.Size.Large);\n \n-        available = getAvailable(SyncopeConsoleSession.get());\n-        recent = getRecent(SyncopeConsoleSession.get());\n+        available = getUpdatedAvailable();\n+        recent = getUpdatedRecent();\n+\n+        container = new WebMarkupContainer(\"jobContainer\");\n+        container.add(new IndicatorAjaxTimerBehavior(Duration.seconds(10)) {\n+\n+            private static final long serialVersionUID = 7298597675929755960L;\n+\n+            @Override\n+            protected void onTimer(final AjaxRequestTarget target) {\n+                List<JobTO> updatedAvailable = getUpdatedAvailable();\n+                if (!updatedAvailable.equals(available)) {\n+                    available.clear();\n+                    available.addAll(updatedAvailable);\n+                    if (availableJobsPanel != null) {\n+                        availableJobsPanel.modelChanged();\n+                        target.add(availableJobsPanel);\n+                    }\n+                }\n+\n+                List<ExecTO> updatedRecent = getUpdatedRecent();\n+                if (!updatedRecent.equals(recent)) {\n+                    recent.clear();\n+                    recent.addAll(updatedRecent);\n+                    if (recentExecPanel != null) {\n+                        recentExecPanel.modelChanged();\n+                        target.add(recentExecPanel);\n+                    }\n+                }\n+            }\n+        });\n+        add(container);\n+\n+        container.add(new AjaxBootstrapTabbedPanel<>(\"tabbedPanel\", buildTabList(pageRef)));\n+    }\n+\n+    private List<JobTO> getUpdatedAvailable() {\n+        List<JobTO> updatedAvailable = new ArrayList<>();\n+\n+        if (SyncopeConsoleSession.get().owns(StandardEntitlement.NOTIFICATION_LIST)) {\n+            JobTO notificationJob = notificationRestClient.getJob();\n+            if (notificationJob != null) {\n+                updatedAvailable.add(notificationJob);\n+            }\n+        }\n+        if (SyncopeConsoleSession.get().owns(StandardEntitlement.TASK_LIST)) {\n+            updatedAvailable.addAll(taskRestClient.listJobs());\n+        }\n+        if (SyncopeConsoleSession.get().owns(StandardEntitlement.REPORT_LIST)) {\n+            updatedAvailable.addAll(reportRestClient.listJobs());\n+        }\n+\n+        return updatedAvailable;\n+    }\n+\n+    private List<ExecTO> getUpdatedRecent() {\n+        List<ExecTO> updatedRecent = new ArrayList<>();\n+\n+        if (SyncopeConsoleSession.get().owns(StandardEntitlement.TASK_LIST)) {\n+            updatedRecent.addAll(taskRestClient.listRecentExecutions(10));\n+        }\n+        if (SyncopeConsoleSession.get().owns(StandardEntitlement.REPORT_LIST)) {\n+            updatedRecent.addAll(reportRestClient.listRecentExecutions(10));\n+        }\n \n-        add(new AjaxBootstrapTabbedPanel<>(\"tabbedPanel\", buildTabList(pageRef)));\n+        return updatedRecent;\n     }\n \n     private List<ITab> buildTabList(final PageReference pageRef) {\n@@ -235,32 +264,9 @@ public Panel getPanel(final String panelId) {\n \n     @Override\n     public void onEvent(final IEvent<?> event) {\n-        if (event.getPayload() instanceof WebSocketPushPayload) {\n-            WebSocketPushPayload wsEvent = (WebSocketPushPayload) event.getPayload();\n-            if (wsEvent.getMessage() instanceof JobWidgetMessage) {\n-                List<JobTO> updatedAvailable = ((JobWidgetMessage) wsEvent.getMessage()).getUpdatedAvailable();\n-                if (!updatedAvailable.equals(available)) {\n-                    available.clear();\n-                    available.addAll(updatedAvailable);\n-                    if (availableJobsPanel != null) {\n-                        availableJobsPanel.modelChanged();\n-                        wsEvent.getHandler().add(availableJobsPanel);\n-                    }\n-                }\n-\n-                List<ExecTO> updatedRecent = ((JobWidgetMessage) wsEvent.getMessage()).getUpdatedRecent();\n-                if (!updatedRecent.equals(recent)) {\n-                    recent.clear();\n-                    recent.addAll(updatedRecent);\n-                    if (recentExecPanel != null) {\n-                        recentExecPanel.modelChanged();\n-                        wsEvent.getHandler().add(recentExecPanel);\n-                    }\n-                }\n-            }\n-        } else if (event.getPayload() instanceof JobActionPanel.JobActionPayload) {\n+        if (event.getPayload() instanceof JobActionPanel.JobActionPayload) {\n             available.clear();\n-            available.addAll(getAvailable(SyncopeConsoleSession.get()));\n+            available.addAll(getUpdatedAvailable());\n             availableJobsPanel.modelChanged();\n             JobActionPanel.JobActionPayload.class.cast(event.getPayload()).getTarget().add(availableJobsPanel);\n         }\n@@ -497,60 +503,4 @@ public IModel<ExecTO> model(final ExecTO object) {\n             return new CompoundPropertyModel<>(object);\n         }\n     }\n-\n-    public static final class JobInfoUpdater implements Runnable {\n-\n-        private final Application application;\n-\n-        private final SyncopeConsoleSession session;\n-\n-        private final IKey key;\n-\n-        public JobInfoUpdater(final ConnectedMessage message) {\n-            this.application = message.getApplication();\n-            this.session = SyncopeConsoleSession.get();\n-            this.key = message.getKey();\n-        }\n-\n-        @Override\n-        public void run() {\n-            try {\n-                ThreadContext.setApplication(application);\n-                ThreadContext.setSession(session);\n-\n-                WebSocketSettings webSocketSettings = WebSocketSettings.Holder.get(application);\n-                WebSocketPushBroadcaster broadcaster = new WebSocketPushBroadcaster(webSocketSettings.\n-                        getConnectionRegistry());\n-                broadcaster.broadcast(\n-                        new ConnectedMessage(application, session.getId(), key),\n-                        new JobWidgetMessage(getAvailable(session), getRecent(session)));\n-            } catch (Throwable t) {\n-                LOG.error(\"Unexpected error while checking for updated Job info\", t);\n-            } finally {\n-                ThreadContext.detach();\n-            }\n-        }\n-    }\n-\n-    private static class JobWidgetMessage implements IWebSocketPushMessage, Serializable {\n-\n-        private static final long serialVersionUID = -824793424112532838L;\n-\n-        private final List<JobTO> updatedAvailable;\n-\n-        private final List<ExecTO> updatedRecent;\n-\n-        JobWidgetMessage(final List<JobTO> updatedAvailable, final List<ExecTO> updatedRecent) {\n-            this.updatedAvailable = updatedAvailable;\n-            this.updatedRecent = updatedRecent;\n-        }\n-\n-        public List<JobTO> getUpdatedAvailable() {\n-            return updatedAvailable;\n-        }\n-\n-        public List<ExecTO> getUpdatedRecent() {\n-            return updatedRecent;\n-        }\n-    }\n }"},{"sha":"ab7dc320fe6723f15f3956610f8e59f66e3a006a","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/ReconciliationWidget.java","status":"modified","additions":76,"deletions":111,"changes":187,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java?ref=b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73","patch":"@@ -21,7 +21,6 @@\n import de.agilecoders.wicket.core.markup.html.bootstrap.tabs.AjaxBootstrapTabbedPanel;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -45,6 +44,7 @@\n import org.apache.syncope.client.console.panels.DirectoryPanel;\n import org.apache.syncope.client.console.rest.BaseRestClient;\n import org.apache.syncope.client.console.rest.ReportRestClient;\n+import org.apache.syncope.client.console.wicket.ajax.IndicatorAjaxTimerBehavior;\n import org.apache.syncope.client.console.wicket.ajax.markup.html.IndicatorAjaxLink;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n@@ -62,15 +62,11 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n-import org.apache.syncope.common.rest.api.service.ReportService;\n-import org.apache.wicket.Application;\n import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n-import org.apache.wicket.ThreadContext;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n-import org.apache.wicket.event.IEvent;\n import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n@@ -86,12 +82,7 @@\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.ResourceModel;\n-import org.apache.wicket.protocol.ws.WebSocketSettings;\n-import org.apache.wicket.protocol.ws.api.WebSocketPushBroadcaster;\n-import org.apache.wicket.protocol.ws.api.event.WebSocketPushPayload;\n-import org.apache.wicket.protocol.ws.api.message.ConnectedMessage;\n-import org.apache.wicket.protocol.ws.api.message.IWebSocketPushMessage;\n-import org.apache.wicket.protocol.ws.api.registry.IKey;\n+import org.apache.wicket.util.time.Duration;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -111,18 +102,58 @@ public class ReconciliationWidget extends BaseWidget {\n \n     private final ReportRestClient restClient = new ReportRestClient();\n \n+    private final WebMarkupContainer container;\n+\n     private final WebMarkupContainer overlay;\n \n+    private boolean checkReconciliationJob = false;\n+\n     public ReconciliationWidget(final String id, final PageReference pageRef) {\n         super(id);\n         this.pageRef = pageRef;\n         setOutputMarkupId(true);\n         add(detailsModal);\n \n+        container = new WebMarkupContainer(\"reconciliationContainer\");\n+        container.add(new IndicatorAjaxTimerBehavior(Duration.seconds(10)) {\n+\n+            private static final long serialVersionUID = 7298597675929755960L;\n+\n+            @Override\n+            protected void onTimer(final AjaxRequestTarget target) {\n+                if (isCheckReconciliationJob()) {\n+                    try {\n+                        JobTO reportJobTO = IterableUtils.find(restClient.listJobs(), new Predicate<JobTO>() {\n+\n+                            @Override\n+                            public boolean evaluate(final JobTO jobTO) {\n+                                return SyncopeConsoleApplication.get().\n+                                        getReconciliationReportKey().equals(jobTO.getRefKey());\n+                            }\n+                        });\n+                        if (reportJobTO != null && !reportJobTO.isRunning()) {\n+                            LOG.debug(\"Report {} is not running\",\n+                                    SyncopeConsoleApplication.get().getReconciliationReportKey());\n+\n+                            overlay.setVisible(false);\n+\n+                            container.addOrReplace(buildExecFragment());\n+\n+                            target.add(ReconciliationWidget.this);\n+                            setCheckReconciliationJob(false);\n+                        }\n+                    } catch (Throwable t) {\n+                        LOG.error(\"Unexpected error while checking for updated reconciliation job info\", t);\n+                    }\n+                }\n+            }\n+        });\n+        add(container);\n+\n         overlay = new WebMarkupContainer(\"overlay\");\n         overlay.setOutputMarkupPlaceholderTag(true);\n         overlay.setVisible(false);\n-        add(overlay);\n+        container.add(overlay);\n \n         this.reconciliationReportKey = SyncopeConsoleApplication.get().getReconciliationReportKey();\n \n@@ -140,7 +171,7 @@ public ReconciliationWidget(final String id, final PageReference pageRef) {\n                 ? new Fragment(\"reportResult\", \"noExecFragment\", this)\n                 : buildExecFragment();\n         reportResult.setOutputMarkupId(true);\n-        add(reportResult);\n+        container.add(reportResult);\n \n         IndicatorAjaxLink<Void> refresh = new IndicatorAjaxLink<Void>(\"refresh\") {\n \n@@ -154,7 +185,7 @@ public void onClick(final AjaxRequestTarget target) {\n                     overlay.setVisible(true);\n                     target.add(ReconciliationWidget.this);\n \n-                    SyncopeConsoleSession.get().setCheckReconciliationJob(true);\n+                    setCheckReconciliationJob(true);\n \n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                 } catch (Exception e) {\n@@ -165,7 +196,15 @@ public void onClick(final AjaxRequestTarget target) {\n             }\n         };\n         MetaDataRoleAuthorizationStrategy.authorize(refresh, Component.RENDER, StandardEntitlement.REPORT_EXECUTE);\n-        add(refresh);\n+        container.add(refresh);\n+    }\n+\n+    private boolean isCheckReconciliationJob() {\n+        return checkReconciliationJob;\n+    }\n+\n+    private void setCheckReconciliationJob(final boolean checkReconciliationJob) {\n+        this.checkReconciliationJob = checkReconciliationJob;\n     }\n \n     private Fragment buildExecFragment() {\n@@ -285,24 +324,7 @@ public boolean evaluate(final ExecTO exec) {\n         return Pair.of(beans, report == null ? new ReconciliationReport(new Date()) : report);\n     }\n \n-    @Override\n-    public void onEvent(final IEvent<?> event) {\n-        if (event.getPayload() instanceof WebSocketPushPayload) {\n-            WebSocketPushPayload wsEvent = (WebSocketPushPayload) event.getPayload();\n-            if (wsEvent.getMessage() instanceof ReconciliationJobNotRunningMessage) {\n-                overlay.setVisible(false);\n-\n-                addOrReplace(buildExecFragment());\n-\n-                wsEvent.getHandler().add(ReconciliationWidget.this);\n-\n-                SyncopeConsoleSession.get().setCheckReconciliationJob(false);\n-            }\n-        }\n-    }\n-\n-    private class AnysReconciliationPanel extends DirectoryPanel<\n-        Any, Any, AnysReconciliationProvider, BaseRestClient> {\n+    private class AnysReconciliationPanel extends DirectoryPanel<Any, Any, AnysReconciliationProvider, BaseRestClient> {\n \n         private static final long serialVersionUID = -8214546246301342868L;\n \n@@ -408,29 +430,29 @@ public boolean evaluate(final Misaligned object) {\n                         }, new ArrayList<Misaligned>());\n                         Component content = missing == null\n                                 ? misaligned == null || misaligned.isEmpty()\n-                                        ? new Label(componentId, StringUtils.EMPTY)\n-                                        : ActionLinksPanel.<Any>builder().add(new ActionLink<Any>() {\n-\n-                                            private static final long serialVersionUID = -3722207913631435501L;\n-\n-                                            @Override\n-                                            public void onClick(final AjaxRequestTarget target, final Any ignore) {\n-                                                modal.header(Model.of(\n-                                                        rowModel.getObject().getType()\n-                                                        + \" \" + rowModel.getObject().getKey()\n-                                                        + \" \" + rowModel.getObject().getName()));\n-                                                modal.setContent(new ReconciliationDetailsModalPanel(\n-                                                        modal,\n-                                                        resource,\n-                                                        misaligned,\n-                                                        ReconciliationWidget.this.pageRef));\n-                                                modal.show(true);\n-                                                target.add(modal);\n-                                            }\n-                                        }, ActionLink.ActionType.VIEW).\n+                                ? new Label(componentId, StringUtils.EMPTY)\n+                                : ActionLinksPanel.<Any>builder().add(new ActionLink<Any>() {\n+\n+                                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                                    @Override\n+                                    public void onClick(final AjaxRequestTarget target, final Any ignore) {\n+                                        modal.header(Model.of(\n+                                                rowModel.getObject().getType()\n+                                                + \" \" + rowModel.getObject().getKey()\n+                                                + \" \" + rowModel.getObject().getName()));\n+                                        modal.setContent(new ReconciliationDetailsModalPanel(\n+                                                modal,\n+                                                resource,\n+                                                misaligned,\n+                                                ReconciliationWidget.this.pageRef));\n+                                        modal.show(true);\n+                                        target.add(modal);\n+                                    }\n+                                }, ActionLink.ActionType.VIEW).\n                                         build(componentId)\n                                 : ActionLinksPanel.<Any>builder().add(null, ActionLink.ActionType.NOT_FOND).\n-                                build(componentId);\n+                                        build(componentId);\n                         cellItem.add(content);\n                         cellItem.add(new AttributeModifier(\"class\", \"text-center\"));\n                     }\n@@ -472,61 +494,4 @@ public IModel<Any> model(final Any object) {\n             return new CompoundPropertyModel<>(object);\n         }\n     }\n-\n-    public static final class ReconciliationJobInfoUpdater implements Runnable {\n-\n-        private final String applicationName;\n-\n-        private final SyncopeConsoleSession session;\n-\n-        private final IKey key;\n-\n-        public ReconciliationJobInfoUpdater(final ConnectedMessage message) {\n-            this.applicationName = message.getApplication().getName();\n-            this.session = SyncopeConsoleSession.get();\n-            this.key = message.getKey();\n-        }\n-\n-        @Override\n-        public void run() {\n-            if (session.isCheckReconciliationJob()) {\n-                try {\n-                    final Application application = Application.get(applicationName);\n-                    ThreadContext.setApplication(application);\n-                    ThreadContext.setSession(session);\n-\n-                    JobTO reportJobTO = IterableUtils.find(session.getService(ReportService.class).listJobs(),\n-                            new Predicate<JobTO>() {\n-\n-                        @Override\n-                        public boolean evaluate(final JobTO jobTO) {\n-                            return SyncopeConsoleApplication.class.cast(application).\n-                                    getReconciliationReportKey().equals(jobTO.getRefKey());\n-                        }\n-                    });\n-                    if (reportJobTO != null && !reportJobTO.isRunning()) {\n-                        LOG.debug(\"Report {} is not running\",\n-                                SyncopeConsoleApplication.class.cast(application).getReconciliationReportKey());\n-\n-                        WebSocketSettings webSocketSettings = WebSocketSettings.Holder.get(application);\n-                        WebSocketPushBroadcaster broadcaster = new WebSocketPushBroadcaster(webSocketSettings.\n-                                getConnectionRegistry());\n-                        broadcaster.broadcast(\n-                                new ConnectedMessage(application, session.getId(), key),\n-                                new ReconciliationJobNotRunningMessage());\n-                    }\n-                } catch (Throwable t) {\n-                    LOG.error(\"Unexpected error while checking for updated reconciliation job info\", t);\n-                } finally {\n-                    ThreadContext.detach();\n-                }\n-            }\n-        }\n-    }\n-\n-    private static class ReconciliationJobNotRunningMessage implements IWebSocketPushMessage, Serializable {\n-\n-        private static final long serialVersionUID = -824793424112532838L;\n-\n-    }\n }"},{"sha":"3b359b6a236cc1edaa54990c8617b6a88167aefb","filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/JobWidget.html","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.html?ref=b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73","patch":"@@ -18,7 +18,7 @@\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:panel>\n-    <div class=\"box box-default box-solid\">\n+    <div class=\"box box-default box-solid\" wicket:id=\"jobContainer\">\n       <div class=\"box-header with-border\">\n         <h3 class=\"box-title\"><wicket:message key=\"jobs\"/></h3>\n         <div class=\"box-tools pull-right\">\n@@ -29,6 +29,7 @@ <h3 class=\"box-title\"><wicket:message key=\"jobs\"/></h3>\n         <div class=\"box-body\" wicket:id=\"tabbedPanel\"/>\n       </div>\n     </div>\n+\n     <div wicket:id=\"modal\"/>\n     <div wicket:id=\"detailModal\"/>\n     <div wicket:id=\"reportModal\"/>"},{"sha":"3171285cb5eda031bab90e9bbe88e7206de1ab16","filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/ReconciliationWidget.html","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.html?ref=b2b8ee1998cb60d5fc31e2c11283fdbfaeb7cc73","patch":"@@ -18,7 +18,7 @@\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:panel>\n-    <div class=\"box box-default box-solid\">\n+    <div class=\"box box-default box-solid\" wicket:id=\"reconciliationContainer\">\n       <div class=\"box-header with-border\">\n         <h3 class=\"box-title\"><wicket:message key=\"reconciliationStatus\"/></h3>\n         <div class=\"box-tools pull-right\">\n@@ -35,21 +35,20 @@ <h3 class=\"box-title\"><wicket:message key=\"reconciliationStatus\"/></h3>\n       </div>\n       <div class=\"box-body\">\n         <div wicket:id=\"reportResult\"/>\n-\n-        <wicket:fragment wicket:id=\"noExecFragment\">\n-          <wicket:message key=\"nothingToShow\"/>\n-        </wicket:fragment>\n-\n-        <wicket:fragment wicket:id=\"execFragment\">\n-          <div wicket:id=\"execResult\"/>\n-        </wicket:fragment>\n-\n       </div>\n       <div wicket:id=\"overlay\" class=\"overlay\">\n         <i class=\"fa fa-refresh fa-spin\"></i>\n       </div>\n     </div>\n \n+    <wicket:fragment wicket:id=\"noExecFragment\">\n+      <wicket:message key=\"nothingToShow\"/>\n+    </wicket:fragment>\n+\n+    <wicket:fragment wicket:id=\"execFragment\">\n+      <div wicket:id=\"execResult\"/>\n+    </wicket:fragment>\n+\n     <div wicket:id=\"detailsModal\"/>\n   </wicket:panel>\n </html>"}]}