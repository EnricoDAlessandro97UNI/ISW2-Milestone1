{"sha":"d4c0630e9d2d9cc3f70c91b7cbb48b8798b19c2a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ0YzA2MzBlOWQyZDljYzNmNzBjOTFiN2NiYjQ4Yjg3OThiMTljMmE=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2012-01-24T12:04:17Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2012-01-24T12:04:17Z"},"message":"improve sync and dryrun tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247376 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"61d176bcf79b271230da03fd89129afe1fe829d2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/61d176bcf79b271230da03fd89129afe1fe829d2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d4c0630e9d2d9cc3f70c91b7cbb48b8798b19c2a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d4c0630e9d2d9cc3f70c91b7cbb48b8798b19c2a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d4c0630e9d2d9cc3f70c91b7cbb48b8798b19c2a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d4c0630e9d2d9cc3f70c91b7cbb48b8798b19c2a/comments","author":null,"committer":null,"parents":[{"sha":"152c859f7b223fbe3ff862a146c3ba9cae7d93e5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/152c859f7b223fbe3ff862a146c3ba9cae7d93e5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/152c859f7b223fbe3ff862a146c3ba9cae7d93e5"}],"stats":{"total":57,"additions":41,"deletions":16},"files":[{"sha":"6b97d8307102d6c6eca86f303d3aa2f61627d29f","filename":"core/src/test/java/org/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":41,"deletions":14,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4c0630e9d2d9cc3f70c91b7cbb48b8798b19c2a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4c0630e9d2d9cc3f70c91b7cbb48b8798b19c2a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=d4c0630e9d2d9cc3f70c91b7cbb48b8798b19c2a","patch":"@@ -287,33 +287,35 @@ public void sync() {\n         assertEquals(TestSyncJobActions.class.getName(),\n                 actual.getJobActionsClassName());\n \n-        // read executions before sync (dryrun test could be executed before)\n-        List<TaskExecTO> executions = Arrays.asList(\n-                restTemplate.getForObject(\n-                BASE_URL + \"task/sync/execution/list\",\n-                TaskExecTO[].class));\n+        SyncTaskTO taskTO = restTemplate.getForObject(\n+                BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, 4L);\n \n-        assertNotNull(executions);\n+        assertNotNull(taskTO);\n+        assertNotNull(taskTO.getExecutions());\n+\n+        // read executions before sync (dryrun test could be executed before)        \n+        int preSyncSize = taskTO.getExecutions().size();\n \n         TaskExecTO execution = restTemplate.postForObject(\n                 BASE_URL + \"task/execute/{taskId}\", null,\n-                TaskExecTO.class, 4);\n+                TaskExecTO.class, taskTO.getId());\n         assertEquals(\"JOB_FIRED\", execution.getStatus());\n \n-        int execSize = executions.size();\n-        \n         // wait for sync completion (executions incremented)\n         do {\n             try {\n                 Thread.sleep(1000);\n             } catch (InterruptedException e) {\n             }\n \n-            executions = Arrays.asList(restTemplate.getForObject(\n-                    BASE_URL + \"task/sync/execution/list\",\n-                    TaskExecTO[].class));\n+            taskTO = restTemplate.getForObject(\n+                    BASE_URL + \"task/read/{taskId}\",\n+                    SyncTaskTO.class, taskTO.getId());\n+\n+            assertNotNull(taskTO);\n+            assertNotNull(taskTO.getExecutions());\n \n-        } while (executions.size() == execSize);\n+        } while (preSyncSize == taskTO.getExecutions().size());\n \n         // check for sync policy\n         userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\",\n@@ -368,10 +370,35 @@ public void issue196() {\n \n     @Test\n     public void dryRun() {\n+        SyncTaskTO taskTO = restTemplate.getForObject(\n+                BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, 4L);\n+\n+        assertNotNull(taskTO);\n+        assertNotNull(taskTO.getExecutions());\n+\n+        int preDryRunSize = taskTO.getExecutions().size();\n+\n         TaskExecTO execution = restTemplate.postForObject(\n                 BASE_URL + \"task/execute/{taskId}?dryRun=true\", null,\n                 TaskExecTO.class, 4);\n         assertNotNull(execution);\n-        assertEquals(\"JOB_FIRED\", execution.getStatus());\n+\n+        // wait for sync completion (executions incremented)\n+        do {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            taskTO = restTemplate.getForObject(\n+                    BASE_URL + \"task/read/{taskId}\",\n+                    SyncTaskTO.class, taskTO.getId());\n+\n+            assertNotNull(taskTO);\n+            assertNotNull(taskTO.getExecutions());\n+\n+        } while (preDryRunSize == taskTO.getExecutions().size());\n+\n+        assertEquals(\"SUCCESS\", taskTO.getExecutions().get(0).getStatus());\n     }\n }"},{"sha":"1f74342aa2e8f048e8e8e6e19a9d09fcf0cd7e7f","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4c0630e9d2d9cc3f70c91b7cbb48b8798b19c2a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4c0630e9d2d9cc3f70c91b7cbb48b8798b19c2a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=d4c0630e9d2d9cc3f70c91b7cbb48b8798b19c2a","patch":"@@ -1448,8 +1448,6 @@ public void suspendReactivateOnResource() {\n \n         assertTrue(Boolean.parseBoolean(connObjectTO.getAttributeMap().\n                 get(OperationalAttributes.ENABLE_NAME).getValues().get(0)));\n-\n-\n     }\n \n     @Test(expected = EmptyResultDataAccessException.class)"}]}