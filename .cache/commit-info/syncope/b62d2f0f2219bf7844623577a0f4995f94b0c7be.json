{"sha":"b62d2f0f2219bf7844623577a0f4995f94b0c7be","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmI2MmQyZjBmMjIxOWJmNzg0NDYyMzU3N2EwZjQ5OTVmOTRiMGM3YmU=","commit":{"author":{"name":"Massimiliano Perrone","email":"massi@apache.org","date":"2012-10-23T08:51:35Z"},"committer":{"name":"Massimiliano Perrone","email":"massi@apache.org","date":"2012-10-23T08:51:35Z"},"message":"Issue 121 closed\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1401200 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"32b6cdc4500ebef3e98d85e1151154df4da1a401","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/32b6cdc4500ebef3e98d85e1151154df4da1a401"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b62d2f0f2219bf7844623577a0f4995f94b0c7be","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b62d2f0f2219bf7844623577a0f4995f94b0c7be","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b62d2f0f2219bf7844623577a0f4995f94b0c7be","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b62d2f0f2219bf7844623577a0f4995f94b0c7be/comments","author":null,"committer":null,"parents":[{"sha":"119e8aab47266cfdf799bdf4ee334039627d2898","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/119e8aab47266cfdf799bdf4ee334039627d2898","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/119e8aab47266cfdf799bdf4ee334039627d2898"}],"stats":{"total":655,"additions":602,"deletions":53},"files":[{"sha":"54406a1a16b02aec66052095046f4b94a17cf821","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SyncopeUserValidator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b62d2f0f2219bf7844623577a0f4995f94b0c7be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b62d2f0f2219bf7844623577a0f4995f94b0c7be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java?ref=b62d2f0f2219bf7844623577a0f4995f94b0c7be","patch":"@@ -22,11 +22,10 @@\n import java.util.List;\n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.apache.syncope.core.persistence.beans.AccountPolicy;\n-import org.apache.syncope.core.persistence.beans.Policy;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n+import org.apache.syncope.core.persistence.beans.Policy;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.PolicyDAO;\n@@ -36,6 +35,7 @@\n import org.apache.syncope.types.AccountPolicySpec;\n import org.apache.syncope.types.EntityViolationType;\n import org.apache.syncope.types.PasswordPolicySpec;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n public class SyncopeUserValidator extends AbstractValidator implements\n         ConstraintValidator<SyncopeUserCheck, SyncopeUser> {"},{"sha":"8f404733a01504e3e1d92fc5b102b62d6d35d8c5","filename":"core/src/main/java/org/apache/syncope/core/policy/PasswordPolicyEnforcer.java","status":"modified","additions":12,"deletions":35,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b62d2f0f2219bf7844623577a0f4995f94b0c7be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b62d2f0f2219bf7844623577a0f4995f94b0c7be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java?ref=b62d2f0f2219bf7844623577a0f4995f94b0c7be","patch":"@@ -18,36 +18,13 @@\n  */\n package org.apache.syncope.core.policy;\n \n-import java.util.regex.Pattern;\n-import org.springframework.stereotype.Component;\n import org.apache.syncope.types.PasswordPolicySpec;\n import org.apache.syncope.types.PolicyType;\n+import org.springframework.stereotype.Component;\n \n @Component\n public class PasswordPolicyEnforcer extends PolicyEnforcer<PasswordPolicySpec, String> {\n \n-    private static final Pattern DIGIT = Pattern.compile(\".*\\\\d+.*\");\n-\n-    private static final Pattern ALPHA_LOWERCASE = Pattern.compile(\".*[a-z]+.*\");\n-\n-    private static final Pattern ALPHA_UPPERCASE = Pattern.compile(\".*[A-Z]+.*\");\n-\n-    private static final Pattern FIRSTDIGIT = Pattern.compile(\"\\\\d.*\");\n-\n-    private static final Pattern LASTDIGIT = Pattern.compile(\".*\\\\d\");\n-\n-    private static final Pattern ALPHANUMERIC = Pattern.compile(\".*\\\\w.*\");\n-\n-    private static final Pattern FIRSTALPHANUMERIC = Pattern.compile(\"\\\\w.*\");\n-\n-    private static final Pattern LASTALPHANUMERIC = Pattern.compile(\".*\\\\w\");\n-\n-    private static final Pattern NONALPHANUMERIC = Pattern.compile(\".*\\\\W.*\");\n-\n-    private static final Pattern FIRSTNONALPHANUMERIC = Pattern.compile(\"\\\\W.*\");\n-\n-    private static final Pattern LASTNONALPHANUMERIC = Pattern.compile(\".*\\\\W\");\n-\n     @Override\n     public void enforce(final PasswordPolicySpec policy, final PolicyType type, final String password)\n             throws PasswordPolicyException, PolicyEnforceException {\n@@ -171,46 +148,46 @@ public void enforce(final PasswordPolicySpec policy, final PolicyType type, fina\n     }\n \n     private boolean checkForDigit(String str) {\n-        return DIGIT.matcher((CharSequence) str).matches();\n+        return PolicyPattern.DIGIT.matcher((CharSequence) str).matches();\n     }\n \n     private boolean checkForLowercase(String str) {\n-        return ALPHA_LOWERCASE.matcher((CharSequence) str).matches();\n+        return PolicyPattern.ALPHA_LOWERCASE.matcher((CharSequence) str).matches();\n     }\n \n     private boolean checkForUppercase(String str) {\n-        return ALPHA_UPPERCASE.matcher((CharSequence) str).matches();\n+        return PolicyPattern.ALPHA_UPPERCASE.matcher((CharSequence) str).matches();\n     }\n \n     private boolean checkForFirstDigit(String str) {\n-        return FIRSTDIGIT.matcher((CharSequence) str).matches();\n+        return PolicyPattern.FIRST_DIGIT.matcher((CharSequence) str).matches();\n     }\n \n     private boolean checkForLastDigit(String str) {\n-        return LASTDIGIT.matcher((CharSequence) str).matches();\n+        return PolicyPattern.LAST_DIGIT.matcher((CharSequence) str).matches();\n     }\n \n     private boolean checkForAlphanumeric(String str) {\n-        return ALPHANUMERIC.matcher(str).matches();\n+        return PolicyPattern.ALPHANUMERIC.matcher(str).matches();\n     }\n \n     private boolean checkForFirstAlphanumeric(String str) {\n-        return FIRSTALPHANUMERIC.matcher(str).matches();\n+        return PolicyPattern.FIRST_ALPHANUMERIC.matcher(str).matches();\n     }\n \n     private boolean checkForLastAlphanumeric(String str) {\n-        return LASTALPHANUMERIC.matcher(str).matches();\n+        return PolicyPattern.LAST_ALPHANUMERIC.matcher(str).matches();\n     }\n \n     private boolean checkForNonAlphanumeric(String str) {\n-        return NONALPHANUMERIC.matcher(str).matches();\n+        return PolicyPattern.NON_ALPHANUMERIC.matcher(str).matches();\n     }\n \n     private boolean checkForFirstNonAlphanumeric(String str) {\n-        return FIRSTNONALPHANUMERIC.matcher(str).matches();\n+        return PolicyPattern.FIRST_NON_ALPHANUMERIC.matcher(str).matches();\n     }\n \n     private boolean checkForLastNonAlphanumeric(String str) {\n-        return LASTNONALPHANUMERIC.matcher(str).matches();\n+        return PolicyPattern.LAST_NON_ALPHANUMERIC.matcher(str).matches();\n     }\n }"},{"sha":"30065c4d60a7c810794d71f3283ea7c257b72a4a","filename":"core/src/main/java/org/apache/syncope/core/policy/PolicyPattern.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b62d2f0f2219bf7844623577a0f4995f94b0c7be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPolicyPattern.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b62d2f0f2219bf7844623577a0f4995f94b0c7be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPolicyPattern.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPolicyPattern.java?ref=b62d2f0f2219bf7844623577a0f4995f94b0c7be","patch":"@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.policy;\n+\n+import java.util.regex.Pattern;\n+\n+public class PolicyPattern {\n+\n+    public static final Pattern DIGIT = Pattern.compile(\".*\\\\d+.*\");\n+\n+    public static final Pattern ALPHA_LOWERCASE = Pattern.compile(\".*[a-z]+.*\");\n+\n+    public static final Pattern ALPHA_UPPERCASE = Pattern.compile(\".*[A-Z]+.*\");\n+\n+    public static final Pattern FIRST_DIGIT = Pattern.compile(\"\\\\d.*\");\n+\n+    public static final Pattern LAST_DIGIT = Pattern.compile(\".*\\\\d\");\n+\n+    public static final Pattern ALPHANUMERIC = Pattern.compile(\".*\\\\w.*\");\n+\n+    public static final Pattern FIRST_ALPHANUMERIC = Pattern.compile(\"\\\\w.*\");\n+\n+    public static final Pattern LAST_ALPHANUMERIC = Pattern.compile(\".*\\\\w\");\n+\n+    public static final Pattern NON_ALPHANUMERIC = Pattern.compile(\".*\\\\W.*\");\n+\n+    public static final Pattern FIRST_NON_ALPHANUMERIC = Pattern.compile(\"\\\\W.*\");\n+\n+    public static final Pattern LAST_NON_ALPHANUMERIC = Pattern.compile(\".*\\\\W\");\n+}"},{"sha":"3a2810dbb721b88e86740186089a067228a62ddf","filename":"core/src/main/java/org/apache/syncope/core/util/IncompatiblePolicyException.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b62d2f0f2219bf7844623577a0f4995f94b0c7be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FIncompatiblePolicyException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b62d2f0f2219bf7844623577a0f4995f94b0c7be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FIncompatiblePolicyException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FIncompatiblePolicyException.java?ref=b62d2f0f2219bf7844623577a0f4995f94b0c7be","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.util;\n+\n+public class IncompatiblePolicyException extends Exception {\n+\n+    private static final long serialVersionUID = 4810651743226663580L;\n+\n+    public IncompatiblePolicyException(String msg) {\n+        super(msg);\n+    }\n+\n+    public IncompatiblePolicyException(String msg, Exception e) {\n+        super(msg, e);\n+    }\n+}"},{"sha":"1fe77e9cbedcad42270d7e8822c96aa93bfdd52e","filename":"core/src/main/java/org/apache/syncope/core/util/PasswordGenerator.java","status":"added","additions":334,"deletions":0,"changes":334,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b62d2f0f2219bf7844623577a0f4995f94b0c7be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b62d2f0f2219bf7844623577a0f4995f94b0c7be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FPasswordGenerator.java?ref=b62d2f0f2219bf7844623577a0f4995f94b0c7be","patch":"@@ -0,0 +1,334 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.util;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.syncope.core.persistence.beans.ExternalResource;\n+import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.persistence.dao.PolicyDAO;\n+import org.apache.syncope.core.policy.PolicyPattern;\n+import org.apache.syncope.types.PasswordPolicySpec;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class PasswordGenerator {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PasswordGenerator.class);\n+\n+    private static final String[] SPECIAL_CHAR = {\"!\", \"£\", \"%\", \"&\", \"(\", \")\", \"?\", \"#\", \"_\", \"$\"};\n+\n+    @Autowired\n+    private PolicyDAO policyDAO;\n+\n+    public String generatePasswordFromPwdSpec(final List<PasswordPolicySpec> passwordPolicySpecs)\n+            throws IncompatiblePolicyException {\n+        PasswordPolicySpec policySpec = mergePolicySpecs(passwordPolicySpecs);\n+\n+        evaluateFinalPolicySpec(policySpec);\n+        return generatePassword(policySpec);\n+    }\n+\n+    public String generateUserPassword(final SyncopeUser user)\n+            throws IncompatiblePolicyException {\n+        List<PasswordPolicySpec> userPasswordPolicies = new ArrayList<PasswordPolicySpec>();\n+        PasswordPolicySpec passwordPolicySpec = policyDAO.getGlobalPasswordPolicy().getSpecification();\n+\n+        userPasswordPolicies.add(passwordPolicySpec);\n+\n+        PasswordPolicySpec rolePasswordPolicySpec;\n+        if ((user.getRoles() != null) || (!user.getRoles().isEmpty())) {\n+            for (Iterator<SyncopeRole> rolesIterator = user.getRoles().iterator(); rolesIterator.hasNext();) {\n+                SyncopeRole syncopeRole = rolesIterator.next();\n+                rolePasswordPolicySpec = syncopeRole.getPasswordPolicy().getSpecification();\n+                userPasswordPolicies.add(rolePasswordPolicySpec);\n+            }\n+        }\n+\n+        PasswordPolicySpec resourcePasswordPolicySpec;\n+\n+        if ((user.getResources() != null) || (!user.getResources().isEmpty())) {\n+            for (Iterator<ExternalResource> resourcesIterator = user.getResources().iterator();\n+                    resourcesIterator.hasNext();) {\n+                ExternalResource externalResource = resourcesIterator.next();\n+                if (externalResource.getPasswordPolicy() != null) {\n+                    resourcePasswordPolicySpec = externalResource.getPasswordPolicy().getSpecification();\n+                    userPasswordPolicies.add(resourcePasswordPolicySpec);\n+                }\n+            }\n+        }\n+\n+        PasswordPolicySpec policySpec = mergePolicySpecs(userPasswordPolicies);\n+\n+        evaluateFinalPolicySpec(policySpec);\n+        return generatePassword(policySpec);\n+    }\n+\n+    private PasswordPolicySpec mergePolicySpecs(List<PasswordPolicySpec> userPasswordPolicies) {\n+\n+        PasswordPolicySpec fpps = new PasswordPolicySpec();\n+        fpps.setMinLength(0);\n+        fpps.setMaxLength(1000);\n+\n+        for (Iterator<PasswordPolicySpec> it = userPasswordPolicies.iterator(); it.hasNext();) {\n+            PasswordPolicySpec policySpec = it.next();\n+            if (policySpec.getMinLength() > fpps.getMinLength()) {\n+                fpps.setMinLength(policySpec.getMinLength());\n+            }\n+\n+            if ((policySpec.getMaxLength() != 0) && ((policySpec.getMaxLength() < fpps.getMaxLength()))) {\n+                fpps.setMaxLength(policySpec.getMaxLength());\n+            }\n+            fpps.setPrefixesNotPermitted(policySpec.getPrefixesNotPermitted());\n+            fpps.setSuffixesNotPermitted(policySpec.getSuffixesNotPermitted());\n+\n+            if (!fpps.isNonAlphanumericRequired()) {\n+                fpps.setNonAlphanumericRequired(policySpec.isNonAlphanumericRequired());\n+            }\n+\n+            if (!fpps.isAlphanumericRequired()) {\n+                fpps.setAlphanumericRequired(policySpec.isAlphanumericRequired());\n+            }\n+            if (!fpps.isDigitRequired()) {\n+                fpps.setDigitRequired(policySpec.isDigitRequired());\n+            }\n+\n+            if (!fpps.isLowercaseRequired()) {\n+                fpps.setLowercaseRequired(policySpec.isLowercaseRequired());\n+            }\n+            if (!fpps.isUppercaseRequired()) {\n+                fpps.setUppercaseRequired(policySpec.isUppercaseRequired());\n+            }\n+            if (!fpps.isMustStartWithDigit()) {\n+                fpps.setMustStartWithDigit(policySpec.isMustStartWithDigit());\n+            }\n+            if (!fpps.isMustntStartWithDigit()) {\n+                fpps.setMustntStartWithDigit(policySpec.isMustntStartWithDigit());\n+            }\n+            if (!fpps.isMustEndWithDigit()) {\n+                fpps.setMustEndWithDigit(policySpec.isMustEndWithDigit());\n+            }\n+            if (fpps.isMustntEndWithDigit()) {\n+                fpps.setMustntEndWithDigit(policySpec.isMustntEndWithDigit());\n+            }\n+            if (!fpps.isMustStartWithAlpha()) {\n+                fpps.setMustStartWithAlpha(policySpec.isMustStartWithAlpha());\n+            }\n+            if (!fpps.isMustntStartWithAlpha()) {\n+                fpps.setMustntStartWithAlpha(policySpec.isMustntStartWithAlpha());\n+            }\n+            if (!fpps.isMustStartWithNonAlpha()) {\n+                fpps.setMustStartWithNonAlpha(policySpec.isMustStartWithNonAlpha());\n+            }\n+            if (!fpps.isMustntStartWithNonAlpha()) {\n+                fpps.setMustntStartWithNonAlpha(policySpec.isMustntStartWithNonAlpha());\n+            }\n+            if (!fpps.isMustEndWithNonAlpha()) {\n+                fpps.setMustEndWithNonAlpha(policySpec.isMustEndWithNonAlpha());\n+            }\n+            if (!fpps.isMustntEndWithNonAlpha()) {\n+                fpps.setMustntEndWithNonAlpha(policySpec.isMustntEndWithNonAlpha());\n+            }\n+            if (!fpps.isMustEndWithAlpha()) {\n+                fpps.setMustEndWithAlpha(policySpec.isMustEndWithAlpha());\n+            }\n+            if (!fpps.isMustntEndWithAlpha()) {\n+                fpps.setMustntEndWithAlpha(policySpec.isMustntEndWithAlpha());\n+            }\n+        }\n+        return fpps;\n+    }\n+\n+    private void evaluateFinalPolicySpec(final PasswordPolicySpec policySpec)\n+            throws IncompatiblePolicyException {\n+        if (policySpec.getMinLength() == 0) {\n+            LOG.error(\"Minimum lenght given is zero\");\n+            throw new IncompatiblePolicyException(\"Minimum lenght given is zero\");\n+        }\n+        if (policySpec.isMustEndWithAlpha() && policySpec.isMustntEndWithAlpha()) {\n+            LOG.error(\"Incompatible password policy specification: mustEndWithAlpha and\"\n+                    + \"mustntEndWithAlpha are true\");\n+            throw new IncompatiblePolicyException(\"Incompatible password policy specification: mustEndWithAlpha and\"\n+                    + \"mustntEndWithAlpha are true\");\n+        }\n+        if (policySpec.isMustEndWithAlpha() && policySpec.isMustEndWithDigit()) {\n+            LOG.error(\"Incompatible password policy specification: mustEndWithAlpha and\"\n+                    + \"mustEndWithDigit are true\");\n+            throw new IncompatiblePolicyException(\"Incompatible password policy specification: mustEndWithAlpha and\"\n+                    + \"mustEndWithDigit are true\");\n+        }\n+        if (policySpec.isMustEndWithDigit() && policySpec.isMustntEndWithDigit()) {\n+            LOG.error(\"Incompatible password policy specification: mustEndWithDigit and\"\n+                    + \"mustntEndWithDigit are true\");\n+            throw new IncompatiblePolicyException(\"Incompatible password policy specification: mustEndWithDigit and\"\n+                    + \"mustntEndWithDigit are true\");\n+        }\n+        if (policySpec.isMustEndWithNonAlpha() && policySpec.isMustntEndWithNonAlpha()) {\n+            LOG.error(\"Incompatible password policy specification: mustEndWithNonAlpha and\"\n+                    + \"mustntEndWithNonAlpha are true\");\n+            throw new IncompatiblePolicyException(\"Incompatible password policy specification: mustEndWithNonAlpha and\"\n+                    + \"mustntEndWithNonAlpha are true\");\n+        }\n+        if (policySpec.isMustStartWithAlpha() && policySpec.isMustntStartWithAlpha()) {\n+            LOG.error(\"Incompatible password policy specification: mustStartWithAlpha and\"\n+                    + \"mustntStartWithAlpha are true\");\n+            throw new IncompatiblePolicyException(\"Incompatible password policy specification: mustStartWithAlpha and\"\n+                    + \"mustntStartWithAlpha are true\");\n+        }\n+        if (policySpec.isMustStartWithAlpha() && policySpec.isMustStartWithDigit()) {\n+            LOG.error(\"Incompatible password policy specification: mustStartWithAlpha and\"\n+                    + \"mustStartWithDigit are true\");\n+            throw new IncompatiblePolicyException(\"Incompatible password policy specification: mustStartWithAlpha and\"\n+                    + \"mustStartWithDigit are true\");\n+        }\n+        if (policySpec.isMustStartWithDigit() && policySpec.isMustntStartWithDigit()) {\n+            LOG.error(\"Incompatible password policy specification: mustStartWithDigit and\"\n+                    + \"mustntStartWithDigit are true\");\n+            throw new IncompatiblePolicyException(\"Incompatible password policy specification: mustStartWithDigit and\"\n+                    + \" mustntStartWithDigit are true\");\n+        }\n+        if (policySpec.isMustStartWithNonAlpha() && policySpec.isMustntStartWithNonAlpha()) {\n+            LOG.error(\"Incompatible password policy specification: mustStartWithNonAlpha\"\n+                    + \"and mustntStartWithNonAlpha are true\");\n+            throw new IncompatiblePolicyException(\"Incompatible password policy specification: mustStartWithNonAlpha\"\n+                    + \"and mustntStartWithNonAlpha are true\");\n+        }\n+        if (policySpec.getMinLength() > policySpec.getMaxLength()) {\n+            LOG.error(\"Minimun length given (\" + policySpec.getMinLength() + \") is higher than\"\n+                    + \"maximum allowed (\" + policySpec.getMaxLength() + \")\");\n+            throw new IncompatiblePolicyException(\"Minimun length given (\" + policySpec.getMinLength() + \")\"\n+                    + \"is higher than maximum allowed (\" + policySpec.getMaxLength() + \")\");\n+        }\n+    }\n+\n+    private String generatePassword(final PasswordPolicySpec policySpec) {\n+        StringBuilder generatedPassword = new StringBuilder(policySpec.getMinLength());\n+\n+        if (policySpec.isDigitRequired() || policySpec.isAlphanumericRequired()) {\n+            generatedPassword.append(RandomStringUtils.randomAlphanumeric(policySpec.getMinLength()));\n+        }\n+\n+        if (policySpec.isDigitRequired() && !PolicyPattern.DIGIT.matcher(generatedPassword.toString()).matches()) {\n+            int where = randomNumber(policySpec.getMinLength());\n+            generatedPassword.deleteCharAt(where);\n+            generatedPassword.insert(where, RandomStringUtils.randomNumeric(1));\n+        }\n+\n+        if (!policySpec.isAlphanumericRequired() && !policySpec.isDigitRequired()) {\n+            generatedPassword.append(RandomStringUtils.randomAlphabetic(policySpec.getMinLength()));\n+        }\n+\n+        if (policySpec.isUppercaseRequired() && !PolicyPattern.ALPHA_UPPERCASE\n+                .matcher(generatedPassword.toString()).matches()) {\n+            int where = randomNumber(policySpec.getMinLength());\n+            generatedPassword.deleteCharAt(where);\n+            generatedPassword.insert(where, RandomStringUtils.randomAlphabetic(1));\n+        }\n+\n+        if (policySpec.isLowercaseRequired() && !PolicyPattern.ALPHA_LOWERCASE.\n+                matcher(generatedPassword.toString()).matches()) {\n+            int where = randomNumber(policySpec.getMinLength());\n+            generatedPassword.deleteCharAt(where);\n+            generatedPassword.insert(where, RandomStringUtils.randomAlphabetic(1).toLowerCase());\n+        }\n+\n+        if (policySpec.isNonAlphanumericRequired()) {\n+            int where = randomNumber(policySpec.getMinLength());\n+            generatedPassword.deleteCharAt(where);\n+            generatedPassword.insert(where, SPECIAL_CHAR[randomNumber(SPECIAL_CHAR.length - 1)]);\n+        }\n+\n+        checkEndChar(generatedPassword, policySpec);\n+\n+        checkstartChar(generatedPassword, policySpec);\n+\n+        for (Iterator<String> it = policySpec.getPrefixesNotPermitted().iterator(); it.hasNext();) {\n+            String prefix = it.next();\n+            if (generatedPassword.toString().startsWith(prefix)) {\n+                checkstartChar(generatedPassword, policySpec);\n+            }\n+        }\n+\n+        for (Iterator<String> it = policySpec.getSuffixesNotPermitted().iterator(); it.hasNext();) {\n+            String suffix = it.next();\n+            if (generatedPassword.toString().endsWith(suffix)) {\n+                checkEndChar(generatedPassword, policySpec);\n+            }\n+        }\n+        return generatedPassword.toString();\n+    }\n+\n+    private int randomNumber(int range) {\n+        int randomNumber = (int) (Math.random() * (range - 1));\n+        return randomNumber == 0 ? 1 : randomNumber;\n+    }\n+\n+    private void checkstartChar(final StringBuilder generatedPassword, final PasswordPolicySpec policySpec) {\n+        if (policySpec.isMustStartWithAlpha()) {\n+            generatedPassword.deleteCharAt(0);\n+            generatedPassword.insert(0, RandomStringUtils.randomAlphabetic(1));\n+        }\n+        if (policySpec.isMustStartWithNonAlpha() || policySpec.isMustStartWithDigit()) {\n+            generatedPassword.deleteCharAt(0);\n+            generatedPassword.insert(0, RandomStringUtils.randomNumeric(1));\n+        }\n+        if (policySpec.isMustntStartWithAlpha()) {\n+            generatedPassword.deleteCharAt(0);\n+            generatedPassword.insert(0, RandomStringUtils.randomNumeric(1));\n+        }\n+        if (policySpec.isMustntStartWithDigit()) {\n+            generatedPassword.deleteCharAt(0);\n+            generatedPassword.insert(0, RandomStringUtils.randomAlphabetic(1));\n+        }\n+        if (policySpec.isMustntStartWithNonAlpha()) {\n+            generatedPassword.deleteCharAt(0);\n+            generatedPassword.insert(0, RandomStringUtils.randomAlphanumeric(1));\n+        }\n+    }\n+\n+    private void checkEndChar(final StringBuilder generatedPassword, final PasswordPolicySpec policySpec) {\n+        if (policySpec.isMustEndWithAlpha()) {\n+            generatedPassword.deleteCharAt(policySpec.getMinLength() - 1);\n+            generatedPassword.insert(policySpec.getMinLength() - 1, RandomStringUtils.randomAlphabetic(1));\n+        }\n+        if (policySpec.isMustEndWithNonAlpha() || policySpec.isMustEndWithDigit()) {\n+            generatedPassword.deleteCharAt(policySpec.getMinLength() - 1);\n+            generatedPassword.insert(policySpec.getMinLength() - 1, RandomStringUtils.randomNumeric(1));\n+        }\n+\n+        if (policySpec.isMustntEndWithAlpha()) {\n+            generatedPassword.deleteCharAt(policySpec.getMinLength() - 1);\n+            generatedPassword.insert(policySpec.getMinLength() - 1, RandomStringUtils.randomNumeric(1));\n+        }\n+        if (policySpec.isMustntEndWithDigit()) {\n+            generatedPassword.deleteCharAt(policySpec.getMinLength() - 1);\n+            generatedPassword.insert(policySpec.getMinLength() - 1, RandomStringUtils.randomAlphabetic(1));\n+        }\n+        if (policySpec.isMustntEndWithNonAlpha()) {\n+            generatedPassword.deleteCharAt(policySpec.getMinLength() - 1);\n+            generatedPassword.insert(policySpec.getMinLength() - 1, RandomStringUtils.randomAlphabetic(1));\n+        }\n+    }\n+}"},{"sha":"a9b88425bb66751692c633c67a8cfdff010c19a0","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/UserTest.java","status":"modified","additions":25,"deletions":10,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b62d2f0f2219bf7844623577a0f4995f94b0c7be/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b62d2f0f2219bf7844623577a0f4995f94b0c7be/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java?ref=b62d2f0f2219bf7844623577a0f4995f94b0c7be","patch":"@@ -18,25 +18,29 @@\n  */\n package org.apache.syncope.core.persistence.dao;\n \n-import static org.junit.Assert.*;\n-\n import java.util.Date;\n import java.util.List;\n import java.util.Set;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.AbstractTest;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.beans.user.UAttrValue;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.apache.syncope.core.rest.controller.InvalidSearchConditionException;\n import org.apache.syncope.core.util.EntitlementUtil;\n+import org.apache.syncope.core.util.IncompatiblePolicyException;\n+import org.apache.syncope.core.util.PasswordGenerator;\n import org.apache.syncope.types.CipherAlgorithm;\n+import static org.junit.Assert.*;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n public class UserTest extends AbstractTest {\n \n+    @Autowired\n+    private PasswordGenerator passwordGenerator;\n+\n     @Autowired\n     private UserDAO userDAO;\n \n@@ -78,18 +82,21 @@ public void findAllByPageAndSize() {\n     }\n \n     @Test\n-    public void findByDerAttributeValue() throws InvalidSearchConditionException {\n+    public void findByDerAttributeValue()\n+            throws InvalidSearchConditionException {\n         final List<SyncopeUser> list = userDAO.findByDerAttrValue(\"cn\", \"Doe, John\");\n         assertEquals(\"did not get expected number of users \", 1, list.size());\n     }\n \n     @Test(expected = InvalidSearchConditionException.class)\n-    public void findByInvalidDerAttrValue() throws InvalidSearchConditionException {\n+    public void findByInvalidDerAttrValue()\n+            throws InvalidSearchConditionException {\n         userDAO.findByDerAttrValue(\"cn\", \"Antonio, Maria, Rossi\");\n     }\n \n     @Test(expected = InvalidSearchConditionException.class)\n-    public void findByInvalidDerAttrExpression() throws InvalidSearchConditionException {\n+    public void findByInvalidDerAttrExpression()\n+            throws InvalidSearchConditionException {\n         userDAO.findByDerAttrValue(\"noschema\", \"Antonio, Maria\");\n     }\n \n@@ -191,8 +198,16 @@ public void issue237() {\n     @Test\n     public void issueSYNCOPE226() {\n         SyncopeUser user = userDAO.find(5L);\n+        String password = \"\";\n+        try {\n+            password = passwordGenerator.generateUserPassword(user);\n+            System.out.println(\"PASSWORD GENERATA: \" + password);\n+        } catch (IncompatiblePolicyException ex) {\n+            fail(ex.getMessage());\n+        }\n+        assertNotNull(password);\n \n-        user.setPassword(\"123password\", CipherAlgorithm.AES, 0);\n+        user.setPassword(password, CipherAlgorithm.AES, 0);\n \n         SyncopeUser actual = userDAO.save(user);\n         assertNotNull(actual);"},{"sha":"ae40af12b7da4c5b6f0e6e2a87a50b2bb85f49b1","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b62d2f0f2219bf7844623577a0f4995f94b0c7be/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b62d2f0f2219bf7844623577a0f4995f94b0c7be/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=b62d2f0f2219bf7844623577a0f4995f94b0c7be","patch":"@@ -1138,7 +1138,7 @@ public void update() {\n \n         UserMod userMod = new UserMod();\n         userMod.setId(userTO.getId());\n-        userMod.setPassword(\"newPassword\");\n+        userMod.setPassword(\"new2Password\");\n \n         userMod.addAttributeToBeRemoved(\"userId\");\n         attributeMod = new AttributeMod();\n@@ -1160,7 +1160,7 @@ public void update() {\n         assertNotNull(userTO);\n \n         SyncopeUser passwordTestUser = new SyncopeUser();\n-        passwordTestUser.setPassword(\"newPassword\", CipherAlgorithm.SHA1, 0);\n+        passwordTestUser.setPassword(\"new2Password\", CipherAlgorithm.SHA1, 0);\n         assertEquals(passwordTestUser.getPassword(), userTO.getPassword());\n \n         assertEquals(1, userTO.getMemberships().size());\n@@ -1204,15 +1204,15 @@ public void updatePasswordOnly() {\n \n         UserMod userMod = new UserMod();\n         userMod.setId(userTO.getId());\n-        userMod.setPassword(\"newPassword\");\n+        userMod.setPassword(\"newPassword123\");\n \n         userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n \n         // check for changePwdDate\n         assertNotNull(userTO.getChangePwdDate());\n \n         SyncopeUser passwordTestUser = new SyncopeUser();\n-        passwordTestUser.setPassword(\"newPassword\", CipherAlgorithm.SHA1, 0);\n+        passwordTestUser.setPassword(\"newPassword123\", CipherAlgorithm.SHA1, 0);\n         assertEquals(passwordTestUser.getPassword(), userTO.getPassword());\n \n         List<PropagationTaskTO> afterTasks = Arrays.asList(restTemplate.getForObject("},{"sha":"454d9276ab4d475bafccb4d357f50ee549421b74","filename":"core/src/test/java/org/apache/syncope/core/util/PasswordGeneratorTest.java","status":"added","additions":145,"deletions":0,"changes":145,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b62d2f0f2219bf7844623577a0f4995f94b0c7be/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FPasswordGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b62d2f0f2219bf7844623577a0f4995f94b0c7be/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FPasswordGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FPasswordGeneratorTest.java?ref=b62d2f0f2219bf7844623577a0f4995f94b0c7be","patch":"@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.core.AbstractTest;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.persistence.dao.UserDAO;\n+import org.apache.syncope.core.policy.PolicyPattern;\n+import org.apache.syncope.types.CipherAlgorithm;\n+import org.apache.syncope.types.PasswordPolicySpec;\n+import static org.junit.Assert.*;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class PasswordGeneratorTest extends AbstractTest {\n+\n+    @Autowired\n+    private PasswordGenerator passwordGenerator;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Test\n+    public void testPasswordGenerator() {\n+        SyncopeUser user = userDAO.find(5L);\n+\n+        String password = \"\";\n+        try {\n+            password = passwordGenerator.generateUserPassword(user);\n+\n+        } catch (IncompatiblePolicyException ex) {\n+            fail(ex.getMessage());\n+        }\n+        assertNotNull(password);\n+        user.setPassword(password, CipherAlgorithm.SHA1, 0);\n+        userDAO.save(user);\n+    }\n+\n+    @Test\n+    public void startEndWithDigit()\n+            throws IncompatiblePolicyException {\n+        PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n+        passwordPolicySpec.setMustStartWithDigit(true);\n+\n+        PasswordPolicySpec passwordPolicySpec2 = createBasePasswordPolicySpec();\n+        passwordPolicySpec.setMustEndWithDigit(true);\n+        List<PasswordPolicySpec> passwordPolicySpecs = new ArrayList<PasswordPolicySpec>();\n+        passwordPolicySpecs.add(passwordPolicySpec);\n+        passwordPolicySpecs.add(passwordPolicySpec2);\n+        String generatedPassword = passwordGenerator.generatePasswordFromPwdSpec(passwordPolicySpecs);\n+        assertTrue(Character.isDigit(generatedPassword.charAt(0)));\n+        assertTrue(Character.isDigit(generatedPassword.charAt(generatedPassword.length() - 1)));\n+    }\n+\n+    @Test\n+    public void startWithDigitAndWithAlpha()\n+            throws IncompatiblePolicyException {\n+        PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n+        passwordPolicySpec.setMustStartWithDigit(true);\n+\n+        PasswordPolicySpec passwordPolicySpec2 = createBasePasswordPolicySpec();\n+        passwordPolicySpec.setMustEndWithAlpha(true);\n+        List<PasswordPolicySpec> passwordPolicySpecs = new ArrayList<PasswordPolicySpec>();\n+        passwordPolicySpecs.add(passwordPolicySpec);\n+        passwordPolicySpecs.add(passwordPolicySpec2);\n+        String generatedPassword = passwordGenerator.generatePasswordFromPwdSpec(passwordPolicySpecs);\n+        assertTrue(Character.isDigit(generatedPassword.charAt(0)));\n+        assertTrue(Character.isLetter(generatedPassword.charAt(generatedPassword.length() - 1)));\n+    }\n+\n+    @Test\n+    public void passwordWithNonAlpha()\n+            throws IncompatiblePolicyException {\n+        PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n+        passwordPolicySpec.setNonAlphanumericRequired(true);\n+\n+        PasswordPolicySpec passwordPolicySpec2 = createBasePasswordPolicySpec();\n+        passwordPolicySpec.setMustEndWithAlpha(true);\n+        List<PasswordPolicySpec> passwordPolicySpecs = new ArrayList<PasswordPolicySpec>();\n+        passwordPolicySpecs.add(passwordPolicySpec);\n+        passwordPolicySpecs.add(passwordPolicySpec2);\n+        String generatedPassword = passwordGenerator.generatePasswordFromPwdSpec(passwordPolicySpecs);\n+        assertTrue(PolicyPattern.NON_ALPHANUMERIC.matcher(generatedPassword.toString()).matches());\n+        assertTrue(Character.isLetter(generatedPassword.charAt(generatedPassword.length() - 1)));\n+    }\n+\n+    @Test(expected = IncompatiblePolicyException.class)\n+    public void incopatiblePolicies()\n+            throws IncompatiblePolicyException {\n+        PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n+        passwordPolicySpec.setMinLength(12);\n+\n+        PasswordPolicySpec passwordPolicySpec2 = createBasePasswordPolicySpec();\n+        passwordPolicySpec.setMaxLength(10);\n+\n+        List<PasswordPolicySpec> passwordPolicySpecs = new ArrayList<PasswordPolicySpec>();\n+        passwordPolicySpecs.add(passwordPolicySpec);\n+        passwordPolicySpecs.add(passwordPolicySpec2);\n+        passwordGenerator.generatePasswordFromPwdSpec(passwordPolicySpecs);\n+    }\n+\n+    private PasswordPolicySpec createBasePasswordPolicySpec() {\n+        PasswordPolicySpec basePasswordPolicySpec = new PasswordPolicySpec();\n+        basePasswordPolicySpec.setAlphanumericRequired(false);\n+        basePasswordPolicySpec.setDigitRequired(false);\n+        basePasswordPolicySpec.setLowercaseRequired(false);\n+        basePasswordPolicySpec.setMaxLength(1000);\n+        basePasswordPolicySpec.setMinLength(8);\n+        basePasswordPolicySpec.setMustEndWithAlpha(false);\n+        basePasswordPolicySpec.setMustEndWithDigit(false);\n+        basePasswordPolicySpec.setMustEndWithNonAlpha(false);\n+        basePasswordPolicySpec.setMustStartWithAlpha(false);\n+        basePasswordPolicySpec.setMustStartWithDigit(false);\n+        basePasswordPolicySpec.setMustStartWithNonAlpha(false);\n+        basePasswordPolicySpec.setMustntEndWithAlpha(false);\n+        basePasswordPolicySpec.setMustntEndWithDigit(false);\n+        basePasswordPolicySpec.setMustntEndWithNonAlpha(false);\n+        basePasswordPolicySpec.setMustntStartWithAlpha(false);\n+        basePasswordPolicySpec.setMustntStartWithDigit(false);\n+        basePasswordPolicySpec.setMustntStartWithNonAlpha(false);\n+        basePasswordPolicySpec.setNonAlphanumericRequired(false);\n+        basePasswordPolicySpec.setUppercaseRequired(false);\n+        return basePasswordPolicySpec;\n+    }\n+}"},{"sha":"af0191aca924fd30989f50ea2d754cd9af1b814e","filename":"core/src/test/resources/content.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b62d2f0f2219bf7844623577a0f4995f94b0c7be/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b62d2f0f2219bf7844623577a0f4995f94b0c7be/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=b62d2f0f2219bf7844623577a0f4995f94b0c7be","patch":"@@ -36,11 +36,11 @@ under the License.\n   <Policy DTYPE=\"SyncPolicy\" id=\"1\" description=\"sync policy 1\" type=\"GLOBAL_SYNC\" specification=\"%3Corg.apache.syncope.types.SyncPolicySpec%2F%3E\"/>\n   <Policy DTYPE=\"PasswordPolicy\" id=\"2\" description=\"global password policy\" type=\"GLOBAL_PASSWORD\" specification=\"%3Corg.apache.syncope.types.PasswordPolicySpec%3E%0A++%3ChistoryLength%3E1%3C%2FhistoryLength%3E%0A++%3CmaxLength%3E0%3C%2FmaxLength%3E%0A++%3CminLength%3E8%3C%2FminLength%3E%0A++%3CnonAlphanumericRequired%3Efalse%3C%2FnonAlphanumericRequired%3E%0A++%3CalphanumericRequired%3Efalse%3C%2FalphanumericRequired%3E%0A++%3CdigitRequired%3Efalse%3C%2FdigitRequired%3E%0A++%3ClowercaseRequired%3Efalse%3C%2FlowercaseRequired%3E%0A++%3CuppercaseRequired%3Efalse%3C%2FuppercaseRequired%3E%0A++%3CmustStartWithDigit%3Efalse%3C%2FmustStartWithDigit%3E%0A++%3CmustntStartWithDigit%3Efalse%3C%2FmustntStartWithDigit%3E%0A++%3CmustEndWithDigit%3Efalse%3C%2FmustEndWithDigit%3E%0A++%3CmustntEndWithDigit%3Efalse%3C%2FmustntEndWithDigit%3E%0A++%3CmustStartWithNonAlpha%3Efalse%3C%2FmustStartWithNonAlpha%3E%0A++%3CmustStartWithAlpha%3Efalse%3C%2FmustStartWithAlpha%3E%0A++%3CmustntStartWithNonAlpha%3Efalse%3C%2FmustntStartWithNonAlpha%3E%0A++%3CmustntStartWithAlpha%3Efalse%3C%2FmustntStartWithAlpha%3E%0A++%3CmustEndWithNonAlpha%3Efalse%3C%2FmustEndWithNonAlpha%3E%0A++%3CmustEndWithAlpha%3Efalse%3C%2FmustEndWithAlpha%3E%0A++%3CmustntEndWithNonAlpha%3Efalse%3C%2FmustntEndWithNonAlpha%3E%0A++%3CmustntEndWithAlpha%3Efalse%3C%2FmustntEndWithAlpha%3E%0A++%3CprefixesNotPermitted%3E%0A++++%3Cstring%3Enotpermitted1%3C%2Fstring%3E%0A++++%3Cstring%3Enotpermitted2%3C%2Fstring%3E%0A++%3C%2FprefixesNotPermitted%3E%0A%3C%2Forg.apache.syncope.types.PasswordPolicySpec%3E\"/>\n   <Policy DTYPE=\"SyncPolicy\" id=\"3\" description=\"sync policy 2\" type=\"SYNC\" specification=\"%3Corg.apache.syncope.types.SyncPolicySpec%3E%0A++%3CalternativeSearchAttrs%3E%0A++++%3Cstring%3Eusername%3C%2Fstring%3E%0A++++%3Cstring%3Efirstname%3C%2Fstring%3E%0A++%3C%2FalternativeSearchAttrs%3E%0A++%3CconflictResolutionAction%3EALL%3C%2FconflictResolutionAction%3E%0A%3C%2Forg.apache.syncope.types.SyncPolicySpec%3E\"/>\n-  <Policy DTYPE=\"PasswordPolicy\" id=\"4\" description=\"sample password policy\" type=\"PASSWORD\" specification=\"%3Corg.apache.syncope.types.PasswordPolicySpec%3E%0A++%3ChistoryLength%3E0%3C%2FhistoryLength%3E%0A++%3CmaxLength%3E0%3C%2FmaxLength%3E%0A++%3CminLength%3E10%3C%2FminLength%3E%0A++%3CnonAlphanumericRequired%3Efalse%3C%2FnonAlphanumericRequired%3E%0A++%3CalphanumericRequired%3Efalse%3C%2FalphanumericRequired%3E%0A++%3CdigitRequired%3Efalse%3C%2FdigitRequired%3E%0A++%3ClowercaseRequired%3Efalse%3C%2FlowercaseRequired%3E%0A++%3CuppercaseRequired%3Efalse%3C%2FuppercaseRequired%3E%0A++%3CmustStartWithDigit%3Efalse%3C%2FmustStartWithDigit%3E%0A++%3CmustntStartWithDigit%3Efalse%3C%2FmustntStartWithDigit%3E%0A++%3CmustEndWithDigit%3Efalse%3C%2FmustEndWithDigit%3E%0A++%3CmustntEndWithDigit%3Efalse%3C%2FmustntEndWithDigit%3E%0A++%3CmustStartWithNonAlpha%3Efalse%3C%2FmustStartWithNonAlpha%3E%0A++%3CmustStartWithAlpha%3Efalse%3C%2FmustStartWithAlpha%3E%0A++%3CmustntStartWithNonAlpha%3Efalse%3C%2FmustntStartWithNonAlpha%3E%0A++%3CmustntStartWithAlpha%3Efalse%3C%2FmustntStartWithAlpha%3E%0A++%3CmustEndWithNonAlpha%3Efalse%3C%2FmustEndWithNonAlpha%3E%0A++%3CmustEndWithAlpha%3Efalse%3C%2FmustEndWithAlpha%3E%0A++%3CmustntEndWithNonAlpha%3Efalse%3C%2FmustntEndWithNonAlpha%3E%0A++%3CmustntEndWithAlpha%3Efalse%3C%2FmustntEndWithAlpha%3E%0A++%3CprefixesNotPermitted%3E%0A++++%3Cstring%3Enotpermitted1%3C%2Fstring%3E%0A++++%3Cstring%3Enotpermitted2%3C%2Fstring%3E%0A++%3C%2FprefixesNotPermitted%3E%0A%3C%2Forg.apache.syncope.types.PasswordPolicySpec%3E\"/>\n+  <Policy DTYPE=\"PasswordPolicy\" id=\"4\" description=\"sample password policy\" type=\"PASSWORD\" specification=\"%3Corg.apache.syncope.types.PasswordPolicySpec%3E%0A++%3ChistoryLength%3E0%3C%2FhistoryLength%3E%0A++%3CmaxLength%3E0%3C%2FmaxLength%3E%0A++%3CminLength%3E10%3C%2FminLength%3E%0A++%3CnonAlphanumericRequired%3Efalse%3C%2FnonAlphanumericRequired%3E%0A++%3CalphanumericRequired%3Efalse%3C%2FalphanumericRequired%3E%0A++%3CdigitRequired%3Etrue%3C%2FdigitRequired%3E%0A++%3ClowercaseRequired%3Efalse%3C%2FlowercaseRequired%3E%0A++%3CuppercaseRequired%3Efalse%3C%2FuppercaseRequired%3E%0A++%3CmustStartWithDigit%3Efalse%3C%2FmustStartWithDigit%3E%0A++%3CmustntStartWithDigit%3Efalse%3C%2FmustntStartWithDigit%3E%0A++%3CmustEndWithDigit%3Efalse%3C%2FmustEndWithDigit%3E%0A++%3CmustntEndWithDigit%3Efalse%3C%2FmustntEndWithDigit%3E%0A++%3CmustStartWithNonAlpha%3Efalse%3C%2FmustStartWithNonAlpha%3E%0A++%3CmustStartWithAlpha%3Efalse%3C%2FmustStartWithAlpha%3E%0A++%3CmustntStartWithNonAlpha%3Efalse%3C%2FmustntStartWithNonAlpha%3E%0A++%3CmustntStartWithAlpha%3Efalse%3C%2FmustntStartWithAlpha%3E%0A++%3CmustEndWithNonAlpha%3Efalse%3C%2FmustEndWithNonAlpha%3E%0A++%3CmustEndWithAlpha%3Efalse%3C%2FmustEndWithAlpha%3E%0A++%3CmustntEndWithNonAlpha%3Efalse%3C%2FmustntEndWithNonAlpha%3E%0A++%3CmustntEndWithAlpha%3Efalse%3C%2FmustntEndWithAlpha%3E%0A++%3CprefixesNotPermitted%3E%0A++++%3Cstring%3Enotpermitted1%3C%2Fstring%3E%0A++++%3Cstring%3Enotpermitted2%3C%2Fstring%3E%0A++%3C%2FprefixesNotPermitted%3E%0A%3C%2Forg.apache.syncope.types.PasswordPolicySpec%3E\"/>\n   <Policy DTYPE=\"AccountPolicy\" id=\"5\" description=\"global account policy\" type=\"GLOBAL_ACCOUNT\" specification=\"%3Corg.apache.syncope.types.AccountPolicySpec%3E%0A++%3CmaxLength%3E0%3C%2FmaxLength%3E%0A++%3CminLength%3E0%3C%2FminLength%3E%0A++%3CallUpperCase%3Efalse%3C%2FallUpperCase%3E%0A++%3CallLowerCase%3Efalse%3C%2FallLowerCase%3E%0A++%3CpropagateSuspension%3Efalse%3C%2FpropagateSuspension%3E%0A++%3CpermittedLoginRetries%3E0%3C%2FpermittedLoginRetries%3E%0A%3C%2Forg.apache.syncope.types.AccountPolicySpec%3E\"/>\n   <Policy DTYPE=\"AccountPolicy\" id=\"6\" description=\"sample account policy\" type=\"ACCOUNT\" specification=\"%3Corg.apache.syncope.types.AccountPolicySpec%3E%0A++%3CmaxLength%3E0%3C%2FmaxLength%3E%0A++%3CminLength%3E4%3C%2FminLength%3E%0A++%3CprefixesNotPermitted%3E%0A++++%3Cstring%3Enotpermitted1%3C%2Fstring%3E%0A++++%3Cstring%3Enotpermitted2%3C%2Fstring%3E%0A++%3C%2FprefixesNotPermitted%3E%0A++%3CallUpperCase%3Efalse%3C%2FallUpperCase%3E%0A++%3CallLowerCase%3Efalse%3C%2FallLowerCase%3E%0A++%3CpropagateSuspension%3Efalse%3C%2FpropagateSuspension%3E%0A++%3CpermittedLoginRetries%3E3%3C%2FpermittedLoginRetries%3E%0A%3C%2Forg.apache.syncope.types.AccountPolicySpec%3E\"/>\n   <Policy DTYPE=\"SyncPolicy\" id=\"7\" description=\"sync policy 1\" type=\"SYNC\" specification=\"%3Corg.apache.syncope.types.SyncPolicySpec%2F%3E\"/>\n-  <Policy DTYPE=\"PasswordPolicy\" id=\"8\" description=\"sample password policy\" type=\"PASSWORD\" specification=\"%3Corg.apache.syncope.types.PasswordPolicySpec%3E%0A++%3ChistoryLength%3E0%3C%2FhistoryLength%3E%0A++%3CmaxLength%3E0%3C%2FmaxLength%3E%0A++%3CminLength%3E10%3C%2FminLength%3E%0A++%3CnonAlphanumericRequired%3Efalse%3C%2FnonAlphanumericRequired%3E%0A++%3CalphanumericRequired%3Efalse%3C%2FalphanumericRequired%3E%0A++%3CdigitRequired%3Etrue%3C%2FdigitRequired%3E%0A++%3ClowercaseRequired%3Efalse%3C%2FlowercaseRequired%3E%0A++%3CuppercaseRequired%3Efalse%3C%2FuppercaseRequired%3E%0A++%3CmustStartWithDigit%3Efalse%3C%2FmustStartWithDigit%3E%0A++%3CmustntStartWithDigit%3Efalse%3C%2FmustntStartWithDigit%3E%0A++%3CmustEndWithDigit%3Efalse%3C%2FmustEndWithDigit%3E%0A++%3CmustntEndWithDigit%3Efalse%3C%2FmustntEndWithDigit%3E%0A++%3CmustStartWithNonAlpha%3Efalse%3C%2FmustStartWithNonAlpha%3E%0A++%3CmustStartWithAlpha%3Efalse%3C%2FmustStartWithAlpha%3E%0A++%3CmustntStartWithNonAlpha%3Efalse%3C%2FmustntStartWithNonAlpha%3E%0A++%3CmustntStartWithAlpha%3Efalse%3C%2FmustntStartWithAlpha%3E%0A++%3CmustEndWithNonAlpha%3Efalse%3C%2FmustEndWithNonAlpha%3E%0A++%3CmustEndWithAlpha%3Efalse%3C%2FmustEndWithAlpha%3E%0A++%3CmustntEndWithNonAlpha%3Efalse%3C%2FmustntEndWithNonAlpha%3E%0A++%3CmustntEndWithAlpha%3Efalse%3C%2FmustntEndWithAlpha%3E%0A++%3CprefixesNotPermitted%3E%0A++++%3Cstring%3Enotpermitted1%3C%2Fstring%3E%0A++++%3Cstring%3Enotpermitted2%3C%2Fstring%3E%0A++%3C%2FprefixesNotPermitted%3E%0A%3C%2Forg.apache.syncope.types.PasswordPolicySpec%3E\"/>\n+  <Policy DTYPE=\"PasswordPolicy\" id=\"8\" description=\"sample password policy\" type=\"PASSWORD\" specification=\"%3Corg.apache.syncope.types.PasswordPolicySpec%3E%0A++%3ChistoryLength%3E0%3C%2FhistoryLength%3E%0A++%3CmaxLength%3E0%3C%2FmaxLength%3E%0A++%3CminLength%3E10%3C%2FminLength%3E%0A++%3CnonAlphanumericRequired%3Etrue%3C%2FnonAlphanumericRequired%3E%0A++%3CalphanumericRequired%3Efalse%3C%2FalphanumericRequired%3E%0A++%3CdigitRequired%3Etrue%3C%2FdigitRequired%3E%0A++%3ClowercaseRequired%3Etrue%3C%2FlowercaseRequired%3E%0A++%3CuppercaseRequired%3Etrue%3C%2FuppercaseRequired%3E%0A++%3CmustStartWithDigit%3Etrue%3C%2FmustStartWithDigit%3E%0A++%3CmustntStartWithDigit%3Efalse%3C%2FmustntStartWithDigit%3E%0A++%3CmustEndWithDigit%3Etrue%3C%2FmustEndWithDigit%3E%0A++%3CmustntEndWithDigit%3Efalse%3C%2FmustntEndWithDigit%3E%0A++%3CmustStartWithNonAlpha%3Efalse%3C%2FmustStartWithNonAlpha%3E%0A++%3CmustStartWithAlpha%3Efalse%3C%2FmustStartWithAlpha%3E%0A++%3CmustntStartWithNonAlpha%3Efalse%3C%2FmustntStartWithNonAlpha%3E%0A++%3CmustntStartWithAlpha%3Efalse%3C%2FmustntStartWithAlpha%3E%0A++%3CmustEndWithNonAlpha%3Efalse%3C%2FmustEndWithNonAlpha%3E%0A++%3CmustEndWithAlpha%3Efalse%3C%2FmustEndWithAlpha%3E%0A++%3CmustntEndWithNonAlpha%3Efalse%3C%2FmustntEndWithNonAlpha%3E%0A++%3CmustntEndWithAlpha%3Efalse%3C%2FmustntEndWithAlpha%3E%0A++%3CprefixesNotPermitted%3E%0A++++%3Cstring%3Enotpermitted1%3C%2Fstring%3E%0A++++%3Cstring%3Enotpermitted2%3C%2Fstring%3E%0A++%3C%2FprefixesNotPermitted%3E%0A%3C%2Forg.apache.syncope.types.PasswordPolicySpec%3E\"/>\n     \n   <SyncopeUser id=\"1\" workflowId=\"0\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n                username=\"user1\" creationDate=\"2010-10-20 11:00:00\"/>"}]}