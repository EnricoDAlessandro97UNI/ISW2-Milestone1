{"sha":"16096f6d8a84aa55e49f76d91c6e453f84d28fb8","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjE2MDk2ZjZkOGE4NGFhNTVlNDlmNzZkOTFjNmU0NTNmODRkMjhmYjg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-22T05:08:46Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-22T05:09:05Z"},"message":"[SYNCOPE-1114] Re-reading group in the same transaction where the PropagationActions class is executed to avoid NULL collections via LAZY loading","tree":{"sha":"472902ae63fb653b1476ead40393ff48fb491a76","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/472902ae63fb653b1476ead40393ff48fb491a76"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/16096f6d8a84aa55e49f76d91c6e453f84d28fb8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/16096f6d8a84aa55e49f76d91c6e453f84d28fb8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/16096f6d8a84aa55e49f76d91c6e453f84d28fb8","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/16096f6d8a84aa55e49f76d91c6e453f84d28fb8/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"6edc1e67554d90dd3d1fc62ff064dc1b8a0c4978","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6edc1e67554d90dd3d1fc62ff064dc1b8a0c4978","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6edc1e67554d90dd3d1fc62ff064dc1b8a0c4978"}],"stats":{"total":16,"additions":11,"deletions":5},"files":[{"sha":"d5f8d3d5fbc2ddc53a76d769649273652e17aeb8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPMembershipPropagationActions.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/16096f6d8a84aa55e49f76d91c6e453f84d28fb8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/16096f6d8a84aa55e49f76d91c6e453f84d28fb8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java?ref=16096f6d8a84aa55e49f76d91c6e453f84d28fb8","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n@@ -58,6 +59,9 @@ public class LDAPMembershipPropagationActions extends DefaultPropagationActions\n     @Autowired\n     protected UserDAO userDAO;\n \n+    @Autowired\n+    protected GroupDAO groupDAO;\n+\n     /**\n      * Allows easy subclassing for the ConnId AD connector bundle.\n      *\n@@ -73,14 +77,16 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n         super.before(task, beforeObj);\n \n         Provision provision = task.getResource().getProvision(anyTypeDAO.findGroup());\n-        if (AnyTypeKind.USER == task.getAnyTypeKind() && provision != null && provision.getMapping() != null) {\n+        if (AnyTypeKind.USER == task.getAnyTypeKind()\n+                && provision != null && provision.getMapping() != null\n+                && StringUtils.isNotBlank(provision.getMapping().getConnObjectLink())) {\n+\n             User user = userDAO.find(task.getEntityKey());\n             if (user != null) {\n                 List<String> groupConnObjectLinks = new ArrayList<>();\n-                for (Group group : userDAO.findAllGroups(user)) {\n-                    if (group.getResourceKeys().contains(task.getResource().getKey())\n-                            && StringUtils.isNotBlank(provision.getMapping().getConnObjectLink())) {\n-\n+                for (String groupKey : userDAO.findAllGroupKeys(user)) {\n+                    Group group = groupDAO.find(groupKey);\n+                    if (group != null && group.getResourceKeys().contains(task.getResource().getKey())) {\n                         LOG.debug(\"Evaluating connObjectLink for {}\", group);\n \n                         JexlContext jexlContext = new MapContext();"}]}