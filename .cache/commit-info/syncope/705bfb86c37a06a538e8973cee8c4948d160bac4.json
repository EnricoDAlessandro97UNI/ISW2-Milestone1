{"sha":"705bfb86c37a06a538e8973cee8c4948d160bac4","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjcwNWJmYjg2YzM3YTA2YTUzOGU4OTczY2VlOGM0OTQ4ZDE2MGJhYzQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-05-27T13:06:04Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-05-27T13:06:04Z"},"message":"[SYNCOPE-666] All but integration tests work","tree":{"sha":"f83b9a0696b5558761ad07d6678132fb9217834c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f83b9a0696b5558761ad07d6678132fb9217834c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/705bfb86c37a06a538e8973cee8c4948d160bac4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/705bfb86c37a06a538e8973cee8c4948d160bac4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/705bfb86c37a06a538e8973cee8c4948d160bac4","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/705bfb86c37a06a538e8973cee8c4948d160bac4/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"c608b58540b1f6089e466096522042fd244b5368","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c608b58540b1f6089e466096522042fd244b5368","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c608b58540b1f6089e466096522042fd244b5368"}],"stats":{"total":1285,"additions":953,"deletions":332},"files":[{"sha":"8a145dcd396b1a4047789b085e2453c3f22b652d","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/SchemaRestClient.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.springframework.stereotype.Component;"},{"sha":"498f6036b515fa0114e7c1496597b4de7f8262a2","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -37,9 +37,11 @@ public enum ClientExceptionType {\n     InvalidPolicy(Response.Status.BAD_REQUEST),\n     InvalidConf(Response.Status.BAD_REQUEST),\n     InvalidPath(Response.Status.BAD_REQUEST),\n+    InvalidProvision(Response.Status.BAD_REQUEST),\n     InvalidReport(Response.Status.BAD_REQUEST),\n     InvalidReportExec(Response.Status.BAD_REQUEST),\n-    InvalidGroups(Response.Status.BAD_REQUEST),\n+    InvalidAnyObject(Response.Status.BAD_REQUEST),\n+    InvalidGroup(Response.Status.BAD_REQUEST),\n     InvalidSchemaDefinition(Response.Status.BAD_REQUEST),\n     InvalidSearchExpression(Response.Status.BAD_REQUEST),\n     InvalidPageOrSize(Response.Status.BAD_REQUEST),"},{"sha":"491909767c903da411d6e9e71ae341e7ffa96570","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":14,"deletions":13,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -37,9 +37,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.Entitlement;\n-import org.apache.syncope.core.misc.RealmUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n@@ -136,7 +134,7 @@ public int searchCount(final SearchCond searchCondition, final List<String> real\n     public List<AnyObjectTO> search(final SearchCond searchCondition, final int page, final int size,\n             final List<OrderByClause> orderBy, final List<String> realms) {\n \n-        final List<AnyObject> matchingAnyObjects = searchDAO.search(\n+        List<AnyObject> matchingAnyObjects = searchDAO.search(\n                 getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_SEARCH), realms),\n                 searchCondition, page, size, orderBy, AnyTypeKind.ANY_OBJECT);\n         return CollectionUtils.collect(matchingAnyObjects, new Transformer<AnyObject, AnyObjectTO>() {\n@@ -227,7 +225,7 @@ public AnyObjectTO delete(final Long anyObjectKey) {\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public AnyObjectTO unlink(final Long anyObjectKey, final Collection<String> resources) {\n-        final AnyObjectMod anyObjectMod = new AnyObjectMod();\n+        AnyObjectMod anyObjectMod = new AnyObjectMod();\n         anyObjectMod.setKey(anyObjectKey);\n         anyObjectMod.getResourcesToRemove().addAll(resources);\n         final Long updatedResult = provisioningManager.unlink(anyObjectMod);\n@@ -239,7 +237,7 @@ public AnyObjectTO unlink(final Long anyObjectKey, final Collection<String> reso\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public AnyObjectTO link(final Long anyObjectKey, final Collection<String> resources) {\n-        final AnyObjectMod anyObjectMod = new AnyObjectMod();\n+        AnyObjectMod anyObjectMod = new AnyObjectMod();\n         anyObjectMod.setKey(anyObjectKey);\n         anyObjectMod.getResourcesToAdd().addAll(resources);\n         return binder.getAnyObjectTO(provisioningManager.link(anyObjectMod));\n@@ -249,7 +247,7 @@ public AnyObjectTO link(final Long anyObjectKey, final Collection<String> resour\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public AnyObjectTO unassign(final Long anyObjectKey, final Collection<String> resources) {\n-        final AnyObjectMod anyObjectMod = new AnyObjectMod();\n+        AnyObjectMod anyObjectMod = new AnyObjectMod();\n         anyObjectMod.setKey(anyObjectKey);\n         anyObjectMod.getResourcesToRemove().addAll(resources);\n         return update(anyObjectMod);\n@@ -258,10 +256,10 @@ public AnyObjectTO unassign(final Long anyObjectKey, final Collection<String> re\n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n-    public AnyObjectTO assign(\n-            final Long anyObjectKey, final Collection<String> resources, final boolean changePwd, final String password) {\n+    public AnyObjectTO assign(final Long anyObjectKey, final Collection<String> resources,\n+            final boolean changePwd, final String password) {\n \n-        final AnyObjectMod userMod = new AnyObjectMod();\n+        AnyObjectMod userMod = new AnyObjectMod();\n         userMod.setKey(anyObjectKey);\n         userMod.getResourcesToAdd().addAll(resources);\n         return update(userMod);\n@@ -271,7 +269,7 @@ public AnyObjectTO assign(\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public AnyObjectTO deprovision(final Long anyObjectKey, final Collection<String> resources) {\n-        final AnyObject anyObject = anyObjectDAO.authFind(anyObjectKey);\n+        AnyObject anyObject = anyObjectDAO.authFind(anyObjectKey);\n \n         List<PropagationStatus> statuses = provisioningManager.deprovision(anyObjectKey, resources);\n \n@@ -283,8 +281,9 @@ public AnyObjectTO deprovision(final Long anyObjectKey, final Collection<String>\n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n-    public AnyObjectTO provision(\n-            final Long anyObjectKey, final Collection<String> resources, final boolean changePwd, final String password) {\n+    public AnyObjectTO provision(final Long anyObjectKey, final Collection<String> resources,\n+            final boolean changePwd, final String password) {\n+\n         AnyObjectTO original = binder.getAnyObjectTO(anyObjectKey);\n \n         //trick: assign and retrieve propagation statuses ...\n@@ -297,7 +296,9 @@ public AnyObjectTO provision(\n     }\n \n     @Override\n-    protected AnyObjectTO resolveReference(final Method method, final Object... args) throws UnresolvedReferenceException {\n+    protected AnyObjectTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n         Long key = null;\n \n         if (ArrayUtils.isNotEmpty(args)) {"},{"sha":"4401a6bddb0e6c3b8929e630cd51c55602e40aa2","filename":"core/logic/src/test/java/org/apache/syncope/core/logic/NotificationTest.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -97,9 +97,6 @@\n @Transactional\n public class NotificationTest {\n \n-    /**\n-     * Logger.\n-     */\n     private static final Logger LOG = LoggerFactory.getLogger(NotificationTest.class);\n \n     private static final String SMTP_HOST = \"localhost\";"},{"sha":"0384db785c68b0319526dbe8556b4edee53aacca","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Any.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -20,6 +20,7 @@\n \n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import java.util.List;\n+import java.util.Set;\n \n public interface Any<P extends PlainAttr<?>, D extends DerAttr<?>, V extends VirAttr<?>> extends AnnotatedEntity<Long> {\n \n@@ -77,4 +78,9 @@\n \n     List<? extends AnyTypeClass> getAuxClasses();\n \n+    Set<PlainSchema> getAllowedPlainSchemas();\n+\n+    Set<DerSchema> getAllowedDerSchemas();\n+\n+    Set<VirSchema> getAllowedVirSchemas();\n }"},{"sha":"2e344b0a3646485759be50ec8d80012cdddfa65a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractAny.java","status":"modified","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -20,20 +20,33 @@\n \n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import javax.persistence.Column;\n import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n import javax.persistence.MappedSuperclass;\n+import javax.persistence.Transient;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n \n @MappedSuperclass\n public abstract class AbstractAny<P extends PlainAttr<?>, D extends DerAttr<?>, V extends VirAttr<?>>\n@@ -50,6 +63,15 @@\n     @Column(nullable = true)\n     private String status;\n \n+    @Transient\n+    private Set<PlainSchema> allowedPlainSchemas;\n+\n+    @Transient\n+    private Set<DerSchema> allowedDerSchemas;\n+\n+    @Transient\n+    private Set<VirSchema> allowedVirSchemas;\n+\n     @Override\n     public Realm getRealm() {\n         return realm;\n@@ -146,4 +168,74 @@ public String transform(final ExternalResource input) {\n     public List<? extends ExternalResource> getResources() {\n         return internalGetResources();\n     }\n+\n+    private void populateAllowedSchemas(final Collection<? extends AnyTypeClass> anyTypeClasses) {\n+        for (AnyTypeClass anyTypeClass : anyTypeClasses) {\n+            allowedPlainSchemas.addAll(anyTypeClass.getPlainSchemas());\n+        }\n+\n+        for (AnyTypeClass anyTypeClass : anyTypeClasses) {\n+            allowedDerSchemas.addAll(anyTypeClass.getDerSchemas());\n+        }\n+\n+        for (AnyTypeClass anyTypeClass : anyTypeClasses) {\n+            allowedVirSchemas.addAll(anyTypeClass.getVirSchemas());\n+        }\n+    }\n+\n+    private void populateAllowedSchemas() {\n+        synchronized (this) {\n+            if (allowedPlainSchemas == null) {\n+                allowedPlainSchemas = new HashSet<>();\n+            } else {\n+                allowedPlainSchemas.clear();\n+            }\n+            if (allowedDerSchemas == null) {\n+                allowedDerSchemas = new HashSet<>();\n+            } else {\n+                allowedDerSchemas.clear();\n+            }\n+            if (allowedVirSchemas == null) {\n+                allowedVirSchemas = new HashSet<>();\n+            } else {\n+                allowedVirSchemas.clear();\n+            }\n+\n+            populateAllowedSchemas(getType().getClasses());\n+            populateAllowedSchemas(getAuxClasses());\n+            if (this instanceof User) {\n+                for (UMembership memb : ((User) this).getMemberships()) {\n+                    for (TypeExtension typeExtension : memb.getRightEnd().getTypeExtensions()) {\n+                        populateAllowedSchemas(typeExtension.getAuxClasses());\n+                    }\n+                }\n+            }\n+            if (this instanceof AnyObject) {\n+                for (AMembership memb : ((AnyObject) this).getMemberships()) {\n+                    for (TypeExtension typeExtension : memb.getRightEnd().getTypeExtensions()) {\n+                        populateAllowedSchemas(typeExtension.getAuxClasses());\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Set<PlainSchema> getAllowedPlainSchemas() {\n+        populateAllowedSchemas();\n+        return allowedPlainSchemas;\n+    }\n+\n+    @Override\n+    public Set<DerSchema> getAllowedDerSchemas() {\n+        populateAllowedSchemas();\n+        return allowedDerSchemas;\n+    }\n+\n+    @Override\n+    public Set<VirSchema> getAllowedVirSchemas() {\n+        populateAllowedSchemas();\n+        return allowedVirSchemas;\n+    }\n+\n }"},{"sha":"914bd02f1f9fd3551c318e7d0f56a3b4318182ac","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractAttr.java","status":"modified","additions":5,"deletions":76,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttr.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -18,84 +18,30 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n-import java.util.Collection;\n import java.util.Collections;\n-import java.util.HashSet;\n import java.util.Set;\n-import javax.persistence.Transient;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.Attr;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n-import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n-import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n \n public abstract class AbstractAttr<S extends Schema, O extends Any<?, ?, ?>>\n         extends AbstractEntity<Long> implements Attr<S, O> {\n \n     private static final long serialVersionUID = -7722134717360731874L;\n \n-    @Transient\n-    private Set<PlainSchema> allowedPlainSchemas;\n-\n-    @Transient\n-    private Set<DerSchema> allowedDerSchemas;\n-\n-    @Transient\n-    private Set<VirSchema> allowedVirSchemas;\n-\n-    private void populateClasses(final Collection<? extends AnyTypeClass> anyTypeClasses) {\n-        synchronized (this) {\n-            if (getSchema() instanceof PlainSchema) {\n-                if (allowedPlainSchemas == null) {\n-                    allowedPlainSchemas = new HashSet<>();\n-                }\n-                for (AnyTypeClass anyTypeClass : anyTypeClasses) {\n-                    allowedPlainSchemas.addAll(anyTypeClass.getPlainSchemas());\n-                }\n-            } else if (getSchema() instanceof DerSchema) {\n-                if (allowedDerSchemas == null) {\n-                    allowedDerSchemas = new HashSet<>();\n-                }\n-                for (AnyTypeClass anyTypeClass : anyTypeClasses) {\n-                    allowedDerSchemas.addAll(anyTypeClass.getDerSchemas());\n-                }\n-            } else if (getSchema() instanceof VirSchema) {\n-                if (allowedVirSchemas == null) {\n-                    allowedVirSchemas = new HashSet<>();\n-                }\n-                for (AnyTypeClass anyTypeClass : anyTypeClasses) {\n-                    allowedVirSchemas.addAll(anyTypeClass.getVirSchemas());\n-                }\n-            }\n-        }\n-    }\n-\n     @SuppressWarnings(\"unchecked\")\n-    private Set<S> getAllowedSchemas() {\n+    private Set<S> getAllowedSchemas(final O any) {\n         Set<S> result = Collections.emptySet();\n \n         if (getSchema() instanceof PlainSchema) {\n-            if (allowedPlainSchemas == null) {\n-                allowedPlainSchemas = new HashSet<>();\n-            }\n-            result = (Set<S>) allowedPlainSchemas;\n+            result = (Set<S>) any.getAllowedPlainSchemas();\n         } else if (getSchema() instanceof DerSchema) {\n-            if (allowedDerSchemas == null) {\n-                allowedDerSchemas = new HashSet<>();\n-            }\n-            result = (Set<S>) allowedDerSchemas;\n+            result = (Set<S>) any.getAllowedDerSchemas();\n         } else if (getSchema() instanceof VirSchema) {\n-            if (allowedVirSchemas == null) {\n-                allowedVirSchemas = new HashSet<>();\n-            }\n-            result = (Set<S>) allowedVirSchemas;\n+            result = (Set<S>) any.getAllowedVirSchemas();\n         }\n \n         return result;\n@@ -106,24 +52,7 @@ protected void checkSchema(final S schema) {\n             throw new IllegalStateException(\"First set owner then schema and finally add values\");\n         }\n \n-        populateClasses(getOwner().getType().getClasses());\n-        populateClasses(getOwner().getAuxClasses());\n-        if (getOwner() instanceof User) {\n-            for (UMembership memb : ((User) getOwner()).getMemberships()) {\n-                for (TypeExtension typeExtension : memb.getRightEnd().getTypeExtensions()) {\n-                    populateClasses(typeExtension.getAuxClasses());\n-                }\n-            }\n-        }\n-        if (getOwner() instanceof AnyObject) {\n-            for (AMembership memb : ((AnyObject) getOwner()).getMemberships()) {\n-                for (TypeExtension typeExtension : memb.getRightEnd().getTypeExtensions()) {\n-                    populateClasses(typeExtension.getAuxClasses());\n-                }\n-            }\n-        }\n-\n-        if (!getAllowedSchemas().contains(schema)) {\n+        if (!getAllowedSchemas(getOwner()).contains(schema)) {\n             throw new IllegalArgumentException(schema + \" not allowed for this instance\");\n         }\n     }"},{"sha":"2b442539cbf71ff8e16497fdce8a2d6e6f4663a0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPAConf.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Set;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n@@ -33,8 +34,11 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n@@ -210,4 +214,18 @@ public void setType(final AnyType type) {\n         // nothing to do\n     }\n \n+    @Override\n+    public Set<PlainSchema> getAllowedPlainSchemas() {\n+        return Collections.emptySet();\n+    }\n+\n+    @Override\n+    public Set<DerSchema> getAllowedDerSchemas() {\n+        return Collections.emptySet();\n+    }\n+\n+    @Override\n+    public Set<VirSchema> getAllowedVirSchemas() {\n+        return Collections.emptySet();\n+    }\n }"},{"sha":"6928ffd885a139216c556d0919181e35d29b9632","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AnyObjectProvisioningManager.java","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -18,17 +18,8 @@\n  */\n package org.apache.syncope.core.provisioning.api;\n \n-import java.util.List;\n-import java.util.Set;\n-import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.mod.AnyObjectMod;\n-import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n \n public interface AnyObjectProvisioningManager extends ProvisioningManager<AnyObjectTO, AnyObjectMod> {\n-\n-    Pair<Long, List<PropagationStatus>> create(AnyObjectTO anyObjectTO, Set<String> excludedResources);\n-\n-    Pair<Long, List<PropagationStatus>> update(AnyObjectMod anyObjectMod, Set<String> excludedResources);\n-\n }"},{"sha":"1dce013fc86985786450ad0d8f3216140ae28da6","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/GroupProvisioningManager.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -28,11 +28,7 @@\n \n public interface GroupProvisioningManager extends ProvisioningManager<GroupTO, GroupMod> {\n \n-    Pair<Long, List<PropagationStatus>> create(GroupTO groupTO, Set<String> excludedResources);\n-\n     Pair<Long, List<PropagationStatus>> create(\n             GroupTO groupTO, Map<Long, String> groupOwnerMap, Set<String> excludedResources);\n \n-    Pair<Long, List<PropagationStatus>> update(GroupMod groupMod, Set<String> excludedResources);\n-\n }"},{"sha":"e517270d126f1d510e1d5bd0c3ff530ac8c9fbc3","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ProvisioningManager.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Collection;\n import java.util.List;\n+import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.mod.AnyMod;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -29,10 +30,16 @@\n \n     Pair<Long, List<PropagationStatus>> create(T anyTO);\n \n+    Pair<Long, List<PropagationStatus>> create(T anyTO, Set<String> excludedResources);\n+\n     Pair<Long, List<PropagationStatus>> update(M anyMod);\n \n+    Pair<Long, List<PropagationStatus>> update(M anyMod, Set<String> excludedResources);\n+\n     List<PropagationStatus> delete(Long anyKey);\n \n+    List<PropagationStatus> delete(Long anyKey, Set<String> excludedResources);\n+\n     Long unlink(M anyMod);\n \n     Long link(M anyMod);"},{"sha":"810a788d723fc0cf9726dca7f815698d8574da27","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/UserProvisioningManager.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -46,8 +46,6 @@ Pair<Long, List<PropagationStatus>> create(UserTO userTO, boolean storePassword,\n     Pair<Long, List<PropagationStatus>> update(UserMod userMod, Long key,\n             ProvisioningResult result, Boolean enabled, Set<String> excludedResources);\n \n-    List<PropagationStatus> delete(Long key, Set<String> excludedResources);\n-\n     void requestPasswordReset(Long key);\n \n     void confirmPasswordReset(User user, String token, String password);"},{"sha":"942c2128c7e94ca30d90d7762ca35cd2512d6daf","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/UserDataBinder.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -35,6 +35,14 @@ public interface UserDataBinder {\n \n     void create(User user, UserTO userTO, boolean storePassword);\n \n+    /**\n+     * Update user, given UserMod.\n+     *\n+     * @param toBeUpdated user to be updated\n+     * @param userMod bean containing update request\n+     * @return updated user + propagation by resource\n+     * @see PropagationByResource\n+     */\n     PropagationByResource update(User toBeUpdated, UserMod userMod);\n \n     boolean verifyPassword(String username, String password);"},{"sha":"cf8cde46946bb24b846de59b1b00e65ac2ce9493","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -113,13 +113,24 @@ List<PropagationTask> getGroupUpdateTasks(WorkflowResult<Long> wfResult, Set<Str\n     List<PropagationTask> getGroupDeleteTasks(\n             Long groupKey, Set<String> resourceNames, Collection<String> noPropResourceNames);\n \n+    List<PropagationTask> getAnyObjectCreateTasks(\n+            WorkflowResult<Long> wfResult, Collection<AttrTO> vAttrs, Collection<String> noPropResourceNames);\n+\n     List<PropagationTask> getAnyObjectCreateTasks(Long anyObjectKey, Collection<AttrTO> vAttrs,\n-            PropagationByResource propByRes, List<String> noPropResourceNames);\n+            PropagationByResource propByRes, Collection<String> noPropResourceNames);\n+\n+    List<PropagationTask> getAnyObjectUpdateTasks(WorkflowResult<Long> wfResult, Set<String> vAttrsToBeRemoved,\n+            Set<AttrMod> vAttrsToBeUpdated, Set<String> noPropResourceNames);\n+\n+    List<PropagationTask> getAnyObjectDeleteTasks(Long anyObjectKey);\n \n     List<PropagationTask> getAnyObjectDeleteTasks(Long anyObjectKey, String noPropResourceName);\n \n     List<PropagationTask> getAnyObjectDeleteTasks(Long anyObjectKey, Collection<String> noPropResourceNames);\n \n+    List<PropagationTask> getAnyObjectDeleteTasks(\n+            Long groupKey, Set<String> resourceNames, Collection<String> noPropResourceNames);\n+\n     /**\n      * Create the user on every associated resource.\n      *\n@@ -186,14 +197,4 @@ List<PropagationTask> getUpdateTasks(Any<?, ?, ?> any, String password, boolean\n     List<PropagationTask> getUserDeleteTasks(\n             Long userKey, Set<String> resourceNames, Collection<String> noPropResourceNames);\n \n-    /**\n-     * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for\n-     * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n-     * the creation fails onto a mandatory resource.\n-     *\n-     * @param wfResult user to be propagated (and info associated), as per result from workflow\n-     * @return list of propagation tasks\n-     */\n-    List<PropagationTask> getUserDeleteTasks(WorkflowResult<Long> wfResult);\n-\n }"},{"sha":"1bd26380f3bb508f4f42c101d18a96e15d33100c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java","status":"added","additions":173,"deletions":0,"changes":173,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.mod.AnyObjectMod;\n+import org.apache.syncope.common.lib.to.PropagationStatus;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class DefaultAnyObjectProvisioningManager implements AnyObjectProvisioningManager {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AnyObjectProvisioningManager.class);\n+\n+    @Autowired\n+    protected AnyObjectWorkflowAdapter awfAdapter;\n+\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+\n+    @Autowired\n+    protected VirAttrHandler virtAttrHandler;\n+\n+    @Autowired\n+    protected AnyObjectDAO anyObjectDAO;\n+\n+    @Override\n+    public Pair<Long, List<PropagationStatus>> create(final AnyObjectTO anyObjectTO) {\n+        return create(anyObjectTO, Collections.<String>emptySet());\n+    }\n+\n+    @Override\n+    public Pair<Long, List<PropagationStatus>> create(\n+            final AnyObjectTO anyObjectTO, final Set<String> excludedResources) {\n+\n+        WorkflowResult<Long> created = awfAdapter.create(anyObjectTO);\n+\n+        List<PropagationTask> tasks = propagationManager.getAnyObjectCreateTasks(\n+                created, anyObjectTO.getVirAttrs(), excludedResources);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+\n+        return new ImmutablePair<>(created.getResult(), propagationReporter.getStatuses());\n+    }\n+\n+    @Override\n+    public Pair<Long, List<PropagationStatus>> update(final AnyObjectMod anyObjectMod) {\n+        return update(anyObjectMod, Collections.<String>emptySet());\n+    }\n+\n+    @Override\n+    public Pair<Long, List<PropagationStatus>> update(\n+            final AnyObjectMod anyObjectMod, final Set<String> excludedResources) {\n+\n+        WorkflowResult<Long> updated = awfAdapter.update(anyObjectMod);\n+\n+        List<PropagationTask> tasks = propagationManager.getAnyObjectUpdateTasks(updated,\n+                anyObjectMod.getVirAttrsToRemove(), anyObjectMod.getVirAttrsToUpdate(), null);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+\n+        return new ImmutablePair<>(updated.getResult(), propagationReporter.getStatuses());\n+    }\n+\n+    @Override\n+    public List<PropagationStatus> delete(final Long anyObjectKey) {\n+        return delete(anyObjectKey, Collections.<String>emptySet());\n+    }\n+\n+    @Override\n+    public List<PropagationStatus> delete(final Long anyObjectKey, final Set<String> excludedResources) {\n+        List<PropagationTask> tasks = new ArrayList<>();\n+\n+        AnyObject anyObject = anyObjectDAO.authFind(anyObjectKey);\n+        if (anyObject != null) {\n+            tasks.addAll(propagationManager.getAnyObjectDeleteTasks(anyObject.getKey()));\n+        }\n+\n+        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n+                getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+\n+        awfAdapter.delete(anyObjectKey);\n+\n+        return propagationReporter.getStatuses();\n+    }\n+\n+    @Override\n+    public Long unlink(final AnyObjectMod anyObjectMod) {\n+        return awfAdapter.update(anyObjectMod).getResult();\n+    }\n+\n+    @Override\n+    public Long link(final AnyObjectMod anyObjectMod) {\n+        return awfAdapter.update(anyObjectMod).getResult();\n+    }\n+\n+    @Override\n+    public List<PropagationStatus> deprovision(final Long anyObjectKey, final Collection<String> resources) {\n+        AnyObject anyObject = anyObjectDAO.authFind(anyObjectKey);\n+\n+        Collection<String> noPropResourceName = CollectionUtils.removeAll(anyObject.getResourceNames(), resources);\n+\n+        List<PropagationTask> tasks = propagationManager.getAnyObjectDeleteTasks(\n+                anyObjectKey, new HashSet<>(resources), noPropResourceName);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+        return propagationReporter.getStatuses();\n+    }\n+}"},{"sha":"c7bc1c4e6300fd1a66d07b28daa0a7e5e38ff91d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":33,"deletions":27,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -66,16 +66,16 @@ public class DefaultGroupProvisioningManager implements GroupProvisioningManager\n     protected GroupDAO groupDAO;\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> create(final GroupTO any) {\n-        return create(any, Collections.<String>emptySet());\n+    public Pair<Long, List<PropagationStatus>> create(final GroupTO group) {\n+        return create(group, Collections.<String>emptySet());\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> create(final GroupTO any, final Set<String> excludedResources) {\n-        WorkflowResult<Long> created = gwfAdapter.create(any);\n+    public Pair<Long, List<PropagationStatus>> create(final GroupTO groupTO, final Set<String> excludedResources) {\n+        WorkflowResult<Long> created = gwfAdapter.create(groupTO);\n \n-        List<PropagationTask> tasks =\n-                propagationManager.getGroupCreateTasks(created, any.getVirAttrs(), excludedResources);\n+        List<PropagationTask> tasks = propagationManager.getGroupCreateTasks(\n+                created, groupTO.getVirAttrs(), excludedResources);\n         PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().getBean(\n                 PropagationReporter.class);\n         try {\n@@ -107,18 +107,18 @@ public Pair<Long, List<PropagationStatus>> create(\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> update(final GroupMod anyMod) {\n-        return update(anyMod, Collections.<String>emptySet());\n+    public Pair<Long, List<PropagationStatus>> update(final GroupMod groupObjectMod) {\n+        return update(groupObjectMod, Collections.<String>emptySet());\n     }\n \n     @Override\n     public Pair<Long, List<PropagationStatus>> update(\n-            final GroupMod anyMod, final Set<String> excludedResources) {\n+            final GroupMod groupMod, final Set<String> excludedResources) {\n \n-        WorkflowResult<Long> updated = gwfAdapter.update(anyMod);\n+        WorkflowResult<Long> updated = gwfAdapter.update(groupMod);\n \n         List<PropagationTask> tasks = propagationManager.getGroupUpdateTasks(updated,\n-                anyMod.getVirAttrsToRemove(), anyMod.getVirAttrsToUpdate(), null);\n+                groupMod.getVirAttrsToRemove(), groupMod.getVirAttrsToUpdate(), excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n@@ -128,25 +128,35 @@ public Pair<Long, List<PropagationStatus>> update(\n             propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        Pair<Long, List<PropagationStatus>> result = new ImmutablePair<>(\n-                updated.getResult(), propagationReporter.getStatuses());\n-        return result;\n+        return new ImmutablePair<>(updated.getResult(), propagationReporter.getStatuses());\n     }\n \n     @Override\n-    public List<PropagationStatus> delete(final Long anyKey) {\n-        final List<PropagationTask> tasks = new ArrayList<>();\n+    public List<PropagationStatus> delete(final Long groupObjectKey) {\n+        return delete(groupObjectKey, Collections.<String>emptySet());\n+    }\n \n-        Group group = groupDAO.authFind(anyKey);\n+    @Override\n+    public List<PropagationStatus> delete(final Long groupKey, final Set<String> excludedResources) {\n+        List<PropagationTask> tasks = new ArrayList<>();\n+\n+        Group group = groupDAO.authFind(groupKey);\n         if (group != null) {\n             // Generate propagation tasks for deleting users from group resources, if they are on those resources only\n             // because of the reason being deleted (see SYNCOPE-357)\n+            for (Map.Entry<Long, PropagationByResource> entry\n+                    : groupDAO.findUsersWithTransitiveResources(group.getKey()).entrySet()) {\n+\n+                WorkflowResult<Long> wfResult =\n+                        new WorkflowResult<>(entry.getKey(), entry.getValue(), Collections.<String>emptySet());\n+                tasks.addAll(propagationManager.getUserDeleteTasks(wfResult.getResult(), excludedResources));\n+            }\n             for (Map.Entry<Long, PropagationByResource> entry\n                     : groupDAO.findAnyObjectsWithTransitiveResources(group.getKey()).entrySet()) {\n \n                 WorkflowResult<Long> wfResult =\n                         new WorkflowResult<>(entry.getKey(), entry.getValue(), Collections.<String>emptySet());\n-                tasks.addAll(propagationManager.getUserDeleteTasks(wfResult));\n+                tasks.addAll(propagationManager.getAnyObjectDeleteTasks(wfResult.getResult(), excludedResources));\n             }\n \n             // Generate propagation tasks for deleting this group from resources\n@@ -162,18 +172,14 @@ public List<PropagationStatus> delete(final Long anyKey) {\n             propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        try {\n-            gwfAdapter.delete(anyKey);\n-        } catch (RuntimeException e) {\n-            throw e;\n-        }\n+        gwfAdapter.delete(groupKey);\n \n         return propagationReporter.getStatuses();\n     }\n \n     @Override\n-    public Long unlink(final GroupMod anyMod) {\n-        WorkflowResult<Long> updated = gwfAdapter.update(anyMod);\n+    public Long unlink(final GroupMod groupMod) {\n+        WorkflowResult<Long> updated = gwfAdapter.update(groupMod);\n         return updated.getResult();\n     }\n \n@@ -197,8 +203,8 @@ public List<PropagationStatus> deprovision(final Long groupKey, final Collection\n     }\n \n     @Override\n-    public Long link(final GroupMod anyMod) {\n-        return gwfAdapter.update(anyMod).getResult();\n+    public Long link(final GroupMod groupMod) {\n+        return gwfAdapter.update(groupMod).getResult();\n     }\n \n }"},{"sha":"88d30948c794c10f85b5e8809b3e137e4d0b19e4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":65,"deletions":57,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -76,6 +76,11 @@ public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final boo\n         return create(userTO, storePassword, false, null, Collections.<String>emptySet());\n     }\n \n+    @Override\n+    public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final Set<String> excludedResources) {\n+        return create(userTO, false, false, null, excludedResources);\n+    }\n+\n     @Override\n     public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final boolean storePassword,\n             final boolean disablePwdPolicyCheck, final Boolean enabled, final Set<String> excludedResources) {\n@@ -137,6 +142,64 @@ public Pair<Long, List<PropagationStatus>> update(final UserMod userMod) {\n         return result;\n     }\n \n+    @Override\n+    public Pair<Long, List<PropagationStatus>> update(final UserMod userMod, final Set<String> excludedResources) {\n+        return update(userMod, userMod.getKey(), new ProvisioningResult(), null, excludedResources);\n+    }\n+\n+    @Override\n+    public Pair<Long, List<PropagationStatus>> update(final UserMod userMod, final Long key,\n+            final ProvisioningResult result, final Boolean enabled, final Set<String> excludedResources) {\n+\n+        WorkflowResult<Pair<UserMod, Boolean>> updated;\n+        try {\n+            updated = uwfAdapter.update(userMod);\n+        } catch (Exception e) {\n+            LOG.error(\"Update of user {} failed, trying to sync its status anyway (if configured)\", key, e);\n+\n+            result.setStatus(ProvisioningResult.Status.FAILURE);\n+            result.setMessage(\"Update failed, trying to sync status anyway (if configured)\\n\" + e.getMessage());\n+\n+            updated = new WorkflowResult<Pair<UserMod, Boolean>>(\n+                    new ImmutablePair<>(userMod, false), new PropagationByResource(),\n+                    new HashSet<String>());\n+        }\n+\n+        if (enabled != null) {\n+            User user = userDAO.find(key);\n+\n+            WorkflowResult<Long> enableUpdate = null;\n+            if (user.isSuspended() == null) {\n+                enableUpdate = uwfAdapter.activate(key, null);\n+            } else if (enabled && user.isSuspended()) {\n+                enableUpdate = uwfAdapter.reactivate(key);\n+            } else if (!enabled && !user.isSuspended()) {\n+                enableUpdate = uwfAdapter.suspend(key);\n+            }\n+\n+            if (enableUpdate != null) {\n+                if (enableUpdate.getPropByRes() != null) {\n+                    updated.getPropByRes().merge(enableUpdate.getPropByRes());\n+                    updated.getPropByRes().purge();\n+                }\n+                updated.getPerformedTasks().addAll(enableUpdate.getPerformedTasks());\n+            }\n+        }\n+\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n+                updated, updated.getResult().getKey().getPassword() != null, excludedResources);\n+        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n+                getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+\n+        return new ImmutablePair<>(updated.getResult().getKey().getKey(), propagationReporter.getStatuses());\n+    }\n+\n     @Override\n     public List<PropagationStatus> delete(final Long userKey) {\n         return delete(userKey, Collections.<String>emptySet());\n@@ -176,8 +239,8 @@ public Long unlink(final UserMod userMod) {\n     }\n \n     @Override\n-    public Long link(final UserMod anyMod) {\n-        return uwfAdapter.update(anyMod).getResult().getKey().getKey();\n+    public Long link(final UserMod userMod) {\n+        return uwfAdapter.update(userMod).getResult().getKey().getKey();\n     }\n \n     @Override\n@@ -264,61 +327,6 @@ public List<PropagationStatus> deprovision(final Long userKey, final Collection<\n         return propagationReporter.getStatuses();\n     }\n \n-    @Override\n-    public Pair<Long, List<PropagationStatus>> update(final UserMod userMod, final Long key,\n-            final ProvisioningResult result, final Boolean enabled, final Set<String> excludedResources) {\n-\n-        WorkflowResult<Pair<UserMod, Boolean>> updated;\n-        try {\n-            updated = uwfAdapter.update(userMod);\n-        } catch (Exception e) {\n-            LOG.error(\"Update of user {} failed, trying to sync its status anyway (if configured)\", key, e);\n-\n-            result.setStatus(ProvisioningResult.Status.FAILURE);\n-            result.setMessage(\"Update failed, trying to sync status anyway (if configured)\\n\" + e.getMessage());\n-\n-            updated = new WorkflowResult<Pair<UserMod, Boolean>>(\n-                    new ImmutablePair<>(userMod, false), new PropagationByResource(),\n-                    new HashSet<String>());\n-        }\n-\n-        if (enabled != null) {\n-            User user = userDAO.find(key);\n-\n-            WorkflowResult<Long> enableUpdate = null;\n-            if (user.isSuspended() == null) {\n-                enableUpdate = uwfAdapter.activate(key, null);\n-            } else if (enabled && user.isSuspended()) {\n-                enableUpdate = uwfAdapter.reactivate(key);\n-            } else if (!enabled && !user.isSuspended()) {\n-                enableUpdate = uwfAdapter.suspend(key);\n-            }\n-\n-            if (enableUpdate != null) {\n-                if (enableUpdate.getPropByRes() != null) {\n-                    updated.getPropByRes().merge(enableUpdate.getPropByRes());\n-                    updated.getPropByRes().purge();\n-                }\n-                updated.getPerformedTasks().addAll(enableUpdate.getPerformedTasks());\n-            }\n-        }\n-\n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n-                updated, updated.getResult().getKey().getPassword() != null, excludedResources);\n-        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n-                getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n-\n-        return new ImmutablePair<>(updated.getResult().getKey().getKey(),\n-                propagationReporter.getStatuses());\n-\n-    }\n-\n     @Override\n     public void requestPasswordReset(final Long id) {\n         uwfAdapter.requestPasswordReset(id);"},{"sha":"fb01aa42f2973c44f14bd314e7f729d9326bd40e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":21,"deletions":30,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -59,6 +59,7 @@\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.core.misc.ConnObjectUtils;\n import org.apache.syncope.core.provisioning.java.VirAttrHandler;\n import org.apache.syncope.core.misc.MappingUtils;\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n@@ -130,6 +131,9 @@ abstract class AbstractAnyDataBinder {\n     @Autowired\n     protected VirAttrHandler virtAttrHander;\n \n+    @Autowired\n+    protected ConnObjectUtils connObjectUtils;\n+\n     protected void setRealm(final Any<?, ?, ?> any, final AnyMod anyMod) {\n         if (StringUtils.isNotBlank(anyMod.getRealm())) {\n             Realm newRealm = realmDAO.find(anyMod.getRealm());\n@@ -239,8 +243,7 @@ private SyncopeClientException checkMandatory(final AnyUtils anyUtils, final Any\n         SyncopeClientException reqValMissing = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n         // Check if there is some mandatory schema defined for which no value has been provided\n-        List<PlainSchema> plainSchemas = plainSchemaDAO.findAll();\n-        for (PlainSchema schema : plainSchemas) {\n+        for (PlainSchema schema : any.getAllowedPlainSchemas()) {\n             if (any.getPlainAttr(schema.getKey()) == null\n                     && !schema.isReadonly()\n                     && (JexlUtils.evaluateMandatoryCondition(schema.getMandatoryCondition(), any)\n@@ -253,8 +256,7 @@ private SyncopeClientException checkMandatory(final AnyUtils anyUtils, final Any\n             }\n         }\n \n-        List<DerSchema> derSchemas = derSchemaDAO.findAll();\n-        for (DerSchema derSchema : derSchemas) {\n+        for (DerSchema derSchema : any.getAllowedDerSchemas()) {\n             if (any.getDerAttr(derSchema.getKey()) == null\n                     && evaluateMandatoryCondition(anyUtils, any, derSchema.getKey(),\n                             anyUtils.derIntMappingType())) {\n@@ -265,8 +267,7 @@ && evaluateMandatoryCondition(anyUtils, any, derSchema.getKey(),\n             }\n         }\n \n-        List<VirSchema> virSchemas = virSchemaDAO.findAll();\n-        for (VirSchema virSchema : virSchemas) {\n+        for (VirSchema virSchema : any.getAllowedVirSchemas()) {\n             if (any.getVirAttr(virSchema.getKey()) == null\n                     && !virSchema.isReadonly()\n                     && evaluateMandatoryCondition(anyUtils, any, virSchema.getKey(),\n@@ -294,7 +295,7 @@ protected PropagationByResource fill(final Any any, final AnyMod anyMod, final A\n             ExternalResource resource = resourceDAO.find(resourceToBeRemoved);\n             if (resource != null) {\n                 propByRes.add(ResourceOperation.DELETE, resource.getKey());\n-                ((Any<?, ?, ?>) any).remove(resource);\n+                any.remove(resource);\n             }\n         }\n \n@@ -305,7 +306,7 @@ protected PropagationByResource fill(final Any any, final AnyMod anyMod, final A\n             ExternalResource resource = resourceDAO.find(resourceToBeAdded);\n             if (resource != null) {\n                 propByRes.add(ResourceOperation.CREATE, resource.getKey());\n-                ((Any<?, ?, ?>) any).add(resource);\n+                any.add(resource);\n             }\n         }\n \n@@ -512,17 +513,15 @@ protected void fill(final Any any, final AnyTO anyTO,\n                     PlainAttr attr = any.getPlainAttr(schema.getKey());\n                     if (attr == null) {\n                         attr = anyUtils.newPlainAttr();\n+                        attr.setOwner(any);\n                         attr.setSchema(schema);\n                     }\n-                    if (attr.getSchema() == null) {\n-                        LOG.debug(\"Ignoring {} because no valid schema or template was found\", attributeTO);\n-                    } else {\n-                        fillAttribute(attributeTO.getValues(), anyUtils, schema, attr, invalidValues);\n+                    fillAttribute(attributeTO.getValues(), anyUtils, schema, attr, invalidValues);\n \n-                        if (!attr.getValuesAsStrings().isEmpty()) {\n-                            any.add(attr);\n-                            attr.setOwner(any);\n-                        }\n+                    if (attr.getValuesAsStrings().isEmpty()) {\n+                        attr.setOwner(null);\n+                    } else {\n+                        any.add(attr);\n                     }\n                 }\n             }\n@@ -538,13 +537,9 @@ protected void fill(final Any any, final AnyTO anyTO,\n \n             if (derSchema != null) {\n                 DerAttr derAttr = anyUtils.newDerAttr();\n+                derAttr.setOwner(any);\n                 derAttr.setSchema(derSchema);\n-                if (derAttr.getSchema() == null) {\n-                    LOG.debug(\"Ignoring {} because no valid schema or template was found\", attributeTO);\n-                } else {\n-                    derAttr.setOwner(any);\n-                    any.add(derAttr);\n-                }\n+                any.add(derAttr);\n             }\n         }\n \n@@ -554,13 +549,9 @@ protected void fill(final Any any, final AnyTO anyTO,\n \n             if (virSchema != null) {\n                 VirAttr virAttr = anyUtils.newVirAttr();\n+                virAttr.setOwner(any);\n                 virAttr.setSchema(virSchema);\n-                if (virAttr.getSchema() == null) {\n-                    LOG.debug(\"Ignoring {} because no valid schema or template was found\", vattrTO);\n-                } else {\n-                    virAttr.setOwner(any);\n-                    any.add(virAttr);\n-                }\n+                any.add(virAttr);\n             }\n         }\n \n@@ -574,13 +565,13 @@ protected void fill(final Any any, final AnyTO anyTO,\n                     \"Invalid or null realm specified: \" + anyTO.getRealm());\n             scce.addException(noRealm);\n         }\n-        ((Any<?, ?, ?>) any).setRealm(realm);\n+        any.setRealm(realm);\n \n         for (String resourceName : anyTO.getResources()) {\n             ExternalResource resource = resourceDAO.find(resourceName);\n \n             if (resource != null) {\n-                ((Any<?, ?, ?>) any).add(resource);\n+                any.add(resource);\n             }\n         }\n "},{"sha":"eb7586de849ffd87a830ad0647b63149f0b43246","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"added","additions":209,"deletions":0,"changes":209,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import static org.apache.syncope.core.provisioning.java.data.AbstractAnyDataBinder.LOG;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.mod.AnyObjectMod;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.misc.spring.BeanUtils;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+@Transactional(rollbackFor = { Throwable.class })\n+public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements AnyObjectDataBinder {\n+\n+    private static final String[] IGNORE_PROPERTIES = {\n+        \"realm\", \"memberships\", \"plainAttrs\", \"derAttrs\", \"virAttrs\", \"resources\"\n+    };\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public AnyObjectTO getAnyObjectTO(final Long key) {\n+        return getAnyObjectTO(anyObjectDAO.authFind(key));\n+    }\n+\n+    @Override\n+    public AnyObjectTO getAnyObjectTO(final AnyObject anyObject) {\n+        AnyObjectTO anyObjectTO = new AnyObjectTO();\n+\n+        BeanUtils.copyProperties(anyObject, anyObjectTO, IGNORE_PROPERTIES);\n+\n+        connObjectUtils.retrieveVirAttrValues(anyObject);\n+        fillTO(anyObjectTO, anyObject.getRealm().getFullPath(),\n+                anyObject.getPlainAttrs(), anyObject.getDerAttrs(), anyObject.getVirAttrs(),\n+                anyObjectDAO.findAllResources(anyObject));\n+\n+        for (AMembership membership : anyObject.getMemberships()) {\n+            MembershipTO membershipTO = new MembershipTO();\n+\n+            membershipTO.setKey(membership.getKey());\n+            membershipTO.setRightKey(membership.getRightEnd().getKey());\n+            membershipTO.setGroupName(membership.getRightEnd().getName());\n+\n+            anyObjectTO.getMemberships().add(membershipTO);\n+        }\n+\n+        // dynamic memberships\n+        CollectionUtils.collect(anyObjectDAO.findDynGroupMemberships(anyObject), new Transformer<Group, Long>() {\n+\n+            @Override\n+            public Long transform(final Group group) {\n+                return group.getKey();\n+            }\n+        }, anyObjectTO.getDynGroups());\n+\n+        return anyObjectTO;\n+    }\n+\n+    @Override\n+    public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n+        SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n+\n+        // memberships\n+        for (MembershipTO membershipTO : anyObjectTO.getMemberships()) {\n+            Group group = groupDAO.find(membershipTO.getRightKey());\n+\n+            if (group == null) {\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Ignoring invalid group \" + membershipTO.getGroupName());\n+                }\n+            } else {\n+                AMembership membership = null;\n+                if (anyObject.getKey() != null) {\n+                    membership = anyObject.getMembership(group.getKey());\n+                }\n+                if (membership == null) {\n+                    membership = entityFactory.newEntity(AMembership.class);\n+                    membership.setRightEnd(group);\n+                    membership.setLeftEnd(anyObject);\n+\n+                    anyObject.add(membership);\n+                }\n+            }\n+        }\n+\n+        // realm, attributes, derived attributes, virtual attributes and resources\n+        fill(anyObject, anyObjectTO, anyUtilsFactory.getInstance(AnyTypeKind.ANY_OBJECT), scce);\n+    }\n+\n+    @Override\n+    public PropagationByResource update(final AnyObject toBeUpdated, final AnyObjectMod anyObjectMod) {\n+        // Re-merge any pending change from workflow tasks\n+        final AnyObject anyObject = anyObjectDAO.save(toBeUpdated);\n+\n+        PropagationByResource propByRes = new PropagationByResource();\n+\n+        SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n+\n+        Collection<String> currentResources = anyObjectDAO.findAllResourceNames(anyObject);\n+\n+        // fetch connObjectKeys before update\n+        Map<String, String> oldConnObjectKeys = getConnObjectKeys(anyObject);\n+\n+        // attributes, derived attributes, virtual attributes and resources\n+        propByRes.merge(fill(anyObject, anyObjectMod, anyUtilsFactory.getInstance(AnyTypeKind.ANY_OBJECT), scce));\n+\n+        // store the group ids of membership required to be added\n+        Set<Long> membershipToBeAddedGroupKeys = new HashSet<>(anyObjectMod.getMembershipsToAdd());\n+\n+        final Set<String> toBeDeprovisioned = new HashSet<>();\n+        final Set<String> toBeProvisioned = new HashSet<>();\n+\n+        // memberships to be removed\n+        for (Long groupKey : anyObjectMod.getMembershipsToRemove()) {\n+            LOG.debug(\"Membership to be removed for group {}\", groupKey);\n+\n+            AMembership membership = anyObject.getMembership(groupKey);\n+            if (membership == null) {\n+                LOG.warn(\"Invalid group key specified for membership to be removed: {}\", groupKey);\n+            } else {\n+                if (membershipToBeAddedGroupKeys.contains(membership.getRightEnd().getKey())) {\n+                    anyObject.remove(membership);\n+                } else {\n+                    toBeDeprovisioned.addAll(membership.getRightEnd().getResourceNames());\n+                }\n+            }\n+        }\n+\n+        // memberships to be added\n+        for (Long groupKey : anyObjectMod.getMembershipsToAdd()) {\n+            LOG.debug(\"Membership to be added for group {}\", groupKey);\n+\n+            Group group = groupDAO.find(groupKey);\n+            if (group == null) {\n+                LOG.debug(\"Ignoring invalid group {}\", groupKey);\n+            } else {\n+                AMembership membership = anyObject.getMembership(group.getKey());\n+                if (membership == null) {\n+                    membership = entityFactory.newEntity(AMembership.class);\n+                    membership.setRightEnd(group);\n+                    membership.setLeftEnd(anyObject);\n+\n+                    anyObject.add(membership);\n+\n+                    toBeProvisioned.addAll(group.getResourceNames());\n+                }\n+            }\n+        }\n+\n+        propByRes.addAll(ResourceOperation.DELETE, toBeDeprovisioned);\n+        propByRes.addAll(ResourceOperation.UPDATE, toBeProvisioned);\n+\n+        /**\n+         * In case of new memberships all the current resources have to be updated in order to propagate new group and\n+         * membership attribute values.\n+         */\n+        if (!toBeDeprovisioned.isEmpty() || !toBeProvisioned.isEmpty()) {\n+            currentResources.removeAll(toBeDeprovisioned);\n+            propByRes.addAll(ResourceOperation.UPDATE, currentResources);\n+        }\n+\n+        // check if some connObjectKey was changed by the update above\n+        Map<String, String> newcCnnObjectKeys = getConnObjectKeys(anyObject);\n+        for (Map.Entry<String, String> entry : oldConnObjectKeys.entrySet()) {\n+            if (newcCnnObjectKeys.containsKey(entry.getKey())\n+                    && !entry.getValue().equals(newcCnnObjectKeys.get(entry.getKey()))) {\n+\n+                propByRes.addOldConnObjectKey(entry.getKey(), entry.getValue());\n+                propByRes.add(ResourceOperation.UPDATE, entry.getKey());\n+            }\n+        }\n+\n+        return propByRes;\n+    }\n+\n+}"},{"sha":"a900e7033f4f8352052f46c6cd78f33ab053d8c7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -30,23 +30,18 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n-import org.apache.syncope.core.misc.ConnObjectUtils;\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.DynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n @Component\n @Transactional(rollbackFor = { Throwable.class })\n public class GroupDataBinderImpl extends AbstractAnyDataBinder implements GroupDataBinder {\n \n-    @Autowired\n-    private ConnObjectUtils connObjectUtils;\n-\n     private void setDynMembership(final Group group, final AnyTypeKind anyTypeKind, final String dynMembershipFIQL) {\n         SearchCond dynMembershipCond = SearchCondConverter.convert(dynMembershipFIQL);\n         if (!dynMembershipCond.isValid()) {\n@@ -77,7 +72,7 @@ public Group create(final Group group, final GroupTO groupTO) {\n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n \n         // name\n-        SyncopeClientException invalidGroups = SyncopeClientException.build(ClientExceptionType.InvalidGroups);\n+        SyncopeClientException invalidGroups = SyncopeClientException.build(ClientExceptionType.InvalidGroup);\n         if (groupTO.getName() == null) {\n             LOG.error(\"No name specified for this group\");\n "},{"sha":"20b3c587f8b6419b72816b7dfdd6d1260df9ff09","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":27,"deletions":22,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -112,29 +112,34 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n             AnyType anyType = anyTypeDAO.find(provisionTO.getAnyType());\n             if (anyType == null) {\n                 LOG.warn(\"Invalid type specified {}, ignoring...\", provisionTO.getAnyType());\n-            }\n-\n-            Provision provision = resource.getProvision(anyType);\n-            if (provision == null) {\n-                provision = entityFactory.newEntity(Provision.class);\n-                provision.setResource(resource);\n-                resource.add(provision);\n-                provision.setAnyType(anyType);\n-            }\n-\n-            provision.setObjectClass(new ObjectClass(provisionTO.getObjectClass()));\n-\n-            if (provisionTO.getSyncToken() == null) {\n-                provision.setSyncToken(null);\n-            }\n-\n-            if (provisionTO.getMapping() == null) {\n-                provision.setMapping(null);\n             } else {\n-                Mapping mapping = entityFactory.newEntity(Mapping.class);\n-                mapping.setProvision(provision);\n-                provision.setMapping(mapping);\n-                populateMapping(provisionTO.getMapping(), mapping, entityFactory.newEntity(MappingItem.class));\n+                Provision provision = resource.getProvision(anyType);\n+                if (provision == null) {\n+                    provision = entityFactory.newEntity(Provision.class);\n+                    provision.setResource(resource);\n+                    resource.add(provision);\n+                    provision.setAnyType(anyType);\n+                }\n+\n+                if (provisionTO.getObjectClass() == null) {\n+                    SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidProvision);\n+                    sce.getElements().add(\"Null ObjectClass\");\n+                    throw sce;\n+                }\n+                provision.setObjectClass(new ObjectClass(provisionTO.getObjectClass()));\n+\n+                if (provisionTO.getSyncToken() == null) {\n+                    provision.setSyncToken(null);\n+                }\n+\n+                if (provisionTO.getMapping() == null) {\n+                    provision.setMapping(null);\n+                } else {\n+                    Mapping mapping = entityFactory.newEntity(Mapping.class);\n+                    mapping.setProvision(provision);\n+                    provision.setMapping(mapping);\n+                    populateMapping(provisionTO.getMapping(), mapping, entityFactory.newEntity(MappingItem.class));\n+                }\n             }\n         }\n "},{"sha":"54d10bc19db5703e507d5af605c628fbbc7b3b09","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":3,"deletions":18,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -47,7 +47,6 @@\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.security.Encryptor;\n import org.apache.syncope.core.misc.spring.BeanUtils;\n-import org.apache.syncope.core.misc.ConnObjectUtils;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n@@ -70,9 +69,6 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat\n     @Autowired\n     private ConfDAO confDAO;\n \n-    @Autowired\n-    private ConnObjectUtils connObjectUtils;\n-\n     @Autowired\n     private SecurityQuestionDAO securityQuestionDAO;\n \n@@ -194,14 +190,6 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n         user.setSecurityAnswer(userTO.getSecurityAnswer());\n     }\n \n-    /**\n-     * Update user, given UserMod.\n-     *\n-     * @param toBeUpdated user to be updated\n-     * @param userMod bean containing update request\n-     * @return updated user + propagation by resource\n-     * @see PropagationByResource\n-     */\n     @Override\n     public PropagationByResource update(final User toBeUpdated, final UserMod userMod) {\n         // Re-merge any pending change from workflow tasks\n@@ -292,13 +280,10 @@ public void execute(final Long roleKey) {\n             if (membership == null) {\n                 LOG.warn(\"Invalid group key specified for membership to be removed: {}\", groupKey);\n             } else {\n-                if (!membershipToBeAddedGroupKeys.contains(membership.getRightEnd().getKey())) {\n-                    toBeDeprovisioned.addAll(membership.getRightEnd().getResourceNames());\n-                }\n-\n-                if (!membershipToBeAddedGroupKeys.contains(membership.getRightEnd().getKey())) {\n-                } else {\n+                if (membershipToBeAddedGroupKeys.contains(membership.getRightEnd().getKey())) {\n                     user.remove(membership);\n+                } else {\n+                    toBeDeprovisioned.addAll(membership.getRightEnd().getResourceNames());\n                 }\n             }\n         }"},{"sha":"8f520590bb151d7dce79223178e28211a9568675","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":36,"deletions":41,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -111,12 +111,21 @@ public class PropagationManagerImpl implements PropagationManager {\n     @Autowired\n     protected VirAttrHandler virAttrHandler;\n \n+    @Override\n+    public List<PropagationTask> getAnyObjectCreateTasks(\n+            final WorkflowResult<Long> wfResult,\n+            final Collection<AttrTO> vAttrs,\n+            final Collection<String> noPropResourceNames) {\n+\n+        return getAnyObjectCreateTasks(wfResult.getResult(), vAttrs, wfResult.getPropByRes(), noPropResourceNames);\n+    }\n+\n     @Override\n     public List<PropagationTask> getAnyObjectCreateTasks(\n             final Long key,\n             final Collection<AttrTO> vAttrs,\n             final PropagationByResource propByRes,\n-            final List<String> noPropResourceNames) {\n+            final Collection<String> noPropResourceNames) {\n \n         AnyObject anyObject = anyObjectDAO.authFind(key);\n         if (vAttrs != null && !vAttrs.isEmpty()) {\n@@ -142,14 +151,6 @@ public List<PropagationTask> getUserCreateTasks(\n         return getCreateTaskIds(user, password, enable, propByRes, noPropResourceNames);\n     }\n \n-    /**\n-     * Create the group on every associated resource.\n-     *\n-     * @param wfResult group to be propagated (and info associated), as per result from workflow\n-     * @param vAttrs virtual attributes to be set\n-     * @param noPropResourceNames external resources performing not to be considered for propagation\n-     * @return list of propagation tasks\n-     */\n     @Override\n     public List<PropagationTask> getGroupCreateTasks(\n             final WorkflowResult<Long> wfResult,\n@@ -159,15 +160,6 @@ public List<PropagationTask> getGroupCreateTasks(\n         return getGroupCreateTasks(wfResult.getResult(), vAttrs, wfResult.getPropByRes(), noPropResourceNames);\n     }\n \n-    /**\n-     * Create the group on every associated resource.\n-     *\n-     * @param key group key\n-     * @param vAttrs virtual attributes to be set\n-     * @param propByRes operation to be performed per resource\n-     * @param noPropResourceNames external resources performing not to be considered for propagation\n-     * @return list of propagation tasks\n-     */\n     @Override\n     public List<PropagationTask> getGroupCreateTasks(\n             final Long key,\n@@ -199,14 +191,17 @@ protected List<PropagationTask> getCreateTaskIds(final Any<?, ?, ?> any,\n         return createTasks(any, password, true, null, null, enable, false, propByRes);\n     }\n \n-    /**\n-     * Performs update on each resource associated to the user excluding the specified into 'resourceNames' parameter.\n-     *\n-     * @param user to be propagated\n-     * @param enable whether user must be enabled or not\n-     * @param noPropResourceNames external resource names not to be considered for propagation\n-     * @return list of propagation tasks\n-     */\n+    @Override\n+    public List<PropagationTask> getAnyObjectUpdateTasks(\n+            final WorkflowResult<Long> wfResult,\n+            final Set<String> vAttrsToBeRemoved, final Set<AttrMod> vAttrsToBeUpdated,\n+            final Set<String> noPropResourceNames) {\n+\n+        AnyObject anyObject = anyObjectDAO.authFind(wfResult.getResult());\n+        return getUpdateTasks(anyObject, null, false, null,\n+                vAttrsToBeRemoved, vAttrsToBeUpdated, wfResult.getPropByRes(), noPropResourceNames);\n+    }\n+\n     @Override\n     public List<PropagationTask> getUserUpdateTasks(final User user, final Boolean enable,\n             final Collection<String> noPropResourceNames) {\n@@ -222,14 +217,6 @@ public List<PropagationTask> getUserUpdateTasks(final User user, final Boolean e\n                 noPropResourceNames);\n     }\n \n-    /**\n-     * Performs update on each resource associated to the user.\n-     *\n-     * @param wfResult user to be propagated (and info associated), as per result from workflow\n-     * @param changePwd whether password should be included for propagation attributes or not\n-     * @param noPropResourceNames external resources not to be considered for propagation\n-     * @return list of propagation tasks\n-     */\n     @Override\n     public List<PropagationTask> getUserUpdateTasks(final WorkflowResult<Pair<UserMod, Boolean>> wfResult,\n             final boolean changePwd, final Collection<String> noPropResourceNames) {\n@@ -328,6 +315,11 @@ public List<PropagationTask> getUpdateTasks(final Any<?, ?, ?> any,\n                 any, password, changePwd, vAttrsToBeRemoved, vAttrsToBeUpdatedMap, enable, false, localPropByRes);\n     }\n \n+    @Override\n+    public List<PropagationTask> getAnyObjectDeleteTasks(final Long anyObjectKey) {\n+        return getAnyObjectDeleteTasks(anyObjectKey, Collections.<String>emptySet());\n+    }\n+\n     @Override\n     public List<PropagationTask> getAnyObjectDeleteTasks(final Long anyObjectKey, final String noPropResourceName) {\n         return getAnyObjectDeleteTasks(anyObjectKey, Collections.<String>singleton(noPropResourceName));\n@@ -341,6 +333,14 @@ public List<PropagationTask> getAnyObjectDeleteTasks(\n         return getDeleteTaskIds(anyObject, anyObject.getResourceNames(), noPropResourceNames);\n     }\n \n+    @Override\n+    public List<PropagationTask> getAnyObjectDeleteTasks(\n+            final Long groupKey, final Set<String> resourceNames, final Collection<String> noPropResourceNames) {\n+\n+        AnyObject anyObject = anyObjectDAO.authFind(groupKey);\n+        return getDeleteTaskIds(anyObject, resourceNames, noPropResourceNames);\n+    }\n+\n     @Override\n     public List<PropagationTask> getUserDeleteTasks(final Long userKey, final Collection<String> noPropResourceNames) {\n         User user = userDAO.authFind(userKey);\n@@ -355,12 +355,6 @@ public List<PropagationTask> getUserDeleteTasks(\n         return getDeleteTaskIds(user, resourceNames, noPropResourceNames);\n     }\n \n-    @Override\n-    public List<PropagationTask> getUserDeleteTasks(final WorkflowResult<Long> wfResult) {\n-        User user = userDAO.authFind(wfResult.getResult());\n-        return createTasks(user, null, false, null, null, false, true, wfResult.getPropByRes());\n-    }\n-\n     @Override\n     public List<PropagationTask> getGroupDeleteTasks(final Long groupKey) {\n         return getGroupDeleteTasks(groupKey, Collections.<String>emptySet());\n@@ -460,7 +454,8 @@ protected List<PropagationTask> createTasks(final Any<?, ?, ?> any,\n                 } else {\n                     PropagationTask task = entityFactory.newEntity(PropagationTask.class);\n                     task.setResource(resource);\n-                    task.setObjectClassName(resource.getProvision(any.getType()).getObjectClass().getObjectClassValue());\n+                    task.setObjectClassName(\n+                            resource.getProvision(any.getType()).getObjectClass().getObjectClassValue());\n                     task.setAnyTypeKind(anyUtils.getAnyTypeKind());\n                     if (!deleteOnResource) {\n                         task.setAnyKey(any.getKey());"},{"sha":"4f7b7448bc666e0d21728ba7dcf470f0a41cf756","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractProvisioningJob.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -414,21 +414,21 @@ public GrantedAuthority transform(final String entitlement) {\n                 throw new JobExecutionException(\"Task \" + taskId + \" isn't a SyncTask\");\n             }\n \n-            T _task = clazz.cast(this.task);\n+            T provisioningTask = clazz.cast(this.task);\n \n             Connector connector;\n             try {\n-                connector = connFactory.getConnector(_task.getResource());\n+                connector = connFactory.getConnector(provisioningTask.getResource());\n             } catch (Exception e) {\n                 final String msg = String.\n                         format(\"Connector instance bean for resource %s and connInstance %s not found\",\n-                                _task.getResource(), _task.getResource().getConnector());\n+                                provisioningTask.getResource(), provisioningTask.getResource().getConnector());\n \n                 throw new JobExecutionException(msg, e);\n             }\n \n             boolean noMapping = true;\n-            for (Provision provision : _task.getResource().getProvisions()) {\n+            for (Provision provision : provisioningTask.getResource().getProvisions()) {\n                 Mapping mapping = provision.getMapping();\n                 if (mapping != null) {\n                     noMapping = false;\n@@ -443,7 +443,7 @@ public GrantedAuthority transform(final String entitlement) {\n             }\n \n             return executeWithSecurityContext(\n-                    _task,\n+                    provisioningTask,\n                     connector,\n                     dryRun);\n         } catch (Throwable t) {"},{"sha":"af1dd4b90a26b813161e1620a1cd3731b2e1f46c","filename":"core/provisioning-java/src/main/resources/provisioning.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -16,4 +16,5 @@\n # under the License.\n userProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultUserProvisioningManager\n groupProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultGroupProvisioningManager\n+anyObjectProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultAnyObjectProvisioningManager\n virAttrCache=org.apache.syncope.core.provisioning.java.cache.MemoryVirAttrCache"},{"sha":"32120f45baf919d638d511879ede950e619867b8","filename":"core/provisioning-java/src/main/resources/provisioningContext.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -33,6 +33,7 @@ under the License.\n   \n   <bean class=\"${userProvisioningManager}\"/>\n   <bean class=\"${groupProvisioningManager}\"/>\n+  <bean class=\"${anyObjectProvisioningManager}\"/>\n \n   <bean id=\"scheduler\" class=\"org.springframework.scheduling.quartz.SchedulerFactoryBean\"\n         lazy-init=\"false\" depends-on=\"nonJPAdbInitializer\">"},{"sha":"039337fa253504598c0935a474907801e86d8cd0","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderTest.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PropagationMode;\n@@ -39,6 +40,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.provisioning.api.data.ResourceDataBinder;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -82,7 +84,8 @@ public void issue42() {\n         resourceTO.setEnforceMandatoryCondition(true);\n \n         ProvisionTO provisionTO = new ProvisionTO();\n-        provisionTO.setAnyType(\"user\");\n+        provisionTO.setAnyType(AnyTypeKind.USER.name());\n+        provisionTO.setObjectClass(ObjectClass.ACCOUNT_NAME);\n         resourceTO.getProvisions().add(provisionTO);\n \n         MappingTO mapping = new MappingTO();"},{"sha":"ef15ab0d21627e5cf867db63de43915085608ac3","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractAnyObjectWorkflowAdapter.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractAnyObjectWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractAnyObjectWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractAnyObjectWorkflowAdapter.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.workflow.java;\n+\n+import org.apache.syncope.common.lib.mod.AnyObjectMod;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n+import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(rollbackFor = { Throwable.class })\n+public abstract class AbstractAnyObjectWorkflowAdapter implements AnyObjectWorkflowAdapter {\n+\n+    @Autowired\n+    protected AnyObjectDataBinder dataBinder;\n+\n+    @Autowired\n+    protected AnyObjectDAO anyObjectDAO;\n+\n+    @Autowired\n+    protected EntityFactory entityFactory;\n+\n+    @Override\n+    public String getPrefix() {\n+        return null;\n+    }\n+\n+    protected abstract WorkflowResult<Long> doUpdate(AnyObject anyObject, AnyObjectMod anyObjectMod);\n+\n+    @Override\n+    public WorkflowResult<Long> update(final AnyObjectMod anyObjectMod) {\n+        return doUpdate(anyObjectDAO.authFind(anyObjectMod.getKey()), anyObjectMod);\n+    }\n+\n+    protected abstract void doDelete(AnyObject anyObject);\n+\n+    @Override\n+    public void delete(final Long anyObjectKey) {\n+        doDelete(anyObjectDAO.authFind(anyObjectKey));\n+    }\n+}"},{"sha":"09f007ddbb193ad61b8745d54b1acf0940a2bae3","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultAnyObjectWorkflowAdapter.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.workflow.java;\n+\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.syncope.common.lib.mod.AnyObjectMod;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.WorkflowFormTO;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.workflow.api.WorkflowDefinitionFormat;\n+import org.apache.syncope.core.workflow.api.WorkflowException;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * Simple implementation basically not involving any workflow engine.\n+ */\n+@Transactional(rollbackFor = { Throwable.class })\n+public class DefaultAnyObjectWorkflowAdapter extends AbstractAnyObjectWorkflowAdapter {\n+\n+    @Override\n+    public WorkflowResult<Long> create(final AnyObjectTO anyObjectTO) {\n+        AnyObject anyObject = entityFactory.newEntity(AnyObject.class);\n+        dataBinder.create(anyObject, anyObjectTO);\n+        anyObject = anyObjectDAO.save(anyObject);\n+\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.set(ResourceOperation.CREATE, anyObject.getResourceNames());\n+\n+        return new WorkflowResult<>(anyObject.getKey(), propByRes, \"create\");\n+    }\n+\n+    @Override\n+    protected WorkflowResult<Long> doUpdate(final AnyObject anyObject, final AnyObjectMod anyObjectMod) {\n+        PropagationByResource propByRes = dataBinder.update(anyObject, anyObjectMod);\n+\n+        AnyObject updated = anyObjectDAO.save(anyObject);\n+\n+        return new WorkflowResult<>(updated.getKey(), propByRes, \"update\");\n+    }\n+\n+    @Override\n+    protected void doDelete(final AnyObject anyObject) {\n+        anyObjectDAO.delete(anyObject);\n+    }\n+\n+    @Override\n+    public WorkflowResult<Long> execute(final AnyObjectTO anyObject, final String taskId) {\n+        throw new WorkflowException(new UnsupportedOperationException(\"Not supported.\"));\n+    }\n+\n+    @Override\n+    public void exportDefinition(final WorkflowDefinitionFormat format, final OutputStream os) {\n+        throw new WorkflowException(new UnsupportedOperationException(\"Not supported.\"));\n+    }\n+\n+    @Override\n+    public void exportDiagram(final OutputStream os) {\n+        throw new WorkflowException(new UnsupportedOperationException(\"Not supported.\"));\n+    }\n+\n+    @Override\n+    public void importDefinition(final WorkflowDefinitionFormat format, final String definition) {\n+        throw new WorkflowException(new UnsupportedOperationException(\"Not supported.\"));\n+    }\n+\n+    @Override\n+    public List<WorkflowFormTO> getForms() {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public List<WorkflowFormTO> getForms(final String workflowId, final String name) {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public WorkflowFormTO getForm(final String workflowId) {\n+        return null;\n+    }\n+\n+    @Override\n+    public WorkflowFormTO claimForm(final String taskId) {\n+        throw new WorkflowException(new UnsupportedOperationException(\"Not supported.\"));\n+    }\n+\n+    @Override\n+    public WorkflowResult<AnyObjectMod> submitForm(final WorkflowFormTO form) {\n+        throw new WorkflowException(new UnsupportedOperationException(\"Not supported.\"));\n+    }\n+\n+}"},{"sha":"f05a464ff70a873edb37fb0c02215f9fde8d2da9","filename":"core/workflow-java/src/main/resources/workflow.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fworkflow-java%2Fsrc%2Fmain%2Fresources%2Fworkflow.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fworkflow-java%2Fsrc%2Fmain%2Fresources%2Fworkflow.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fresources%2Fworkflow.properties?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -18,3 +18,4 @@ wf.directory=${conf.directory}\n jobExecutorActivate=false\n uwfAdapter=org.apache.syncope.core.workflow.java.DefaultUserWorkflowAdapter\n gwfAdapter=org.apache.syncope.core.workflow.java.DefaultGroupWorkflowAdapter\n+awfAdapter=org.apache.syncope.core.workflow.java.DefaultAnyObjectWorkflowAdapter"},{"sha":"8db5e170c07dbf7d23ea3edfefc3c38d73ee7fc6","filename":"core/workflow-java/src/main/resources/workflowContext.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fworkflow-java%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/core%2Fworkflow-java%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -24,5 +24,6 @@ under the License.\n \n   <bean id=\"uwfAdapter\" class=\"${uwfAdapter}\"/>\n   <bean id=\"gwfAdapter\" class=\"${gwfAdapter}\"/>\n+  <bean id=\"awfAdapter\" class=\"${awfAdapter}\"/>\n     \n </beans>"},{"sha":"f97203a4d89faec3dd8c939a5e1d5396e810773a","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelGroupProvisioningManager.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -107,12 +107,20 @@ public Pair<Long, List<PropagationStatus>> update(\n         return exchange.getIn().getBody(Pair.class);\n     }\n \n+    @Override\n+    public List<PropagationStatus> delete(final Long groupObjectKey) {\n+        return delete(groupObjectKey, Collections.<String>emptySet());\n+    }\n+\n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public List<PropagationStatus> delete(final Long groupKey) {\n+    public List<PropagationStatus> delete(final Long groupKey, final Set<String> excludedResources) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:deleteGroupPort\");\n \n-        sendMessage(\"direct:deleteGroup\", groupKey);\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(\"excludedResources\", excludedResources);\n+\n+        sendMessage(\"direct:deleteGroup\", groupKey, props);\n \n         Exchange exchange = pollingConsumer.receive();\n "},{"sha":"8f0d9d27387518d84ed4405d31ee28e3f545a84c","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelUserProvisioningManager.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -55,6 +55,11 @@ public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final boo\n         return create(userTO, storePassword, false, null, Collections.<String>emptySet());\n     }\n \n+    @Override\n+    public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final Set<String> excludedResources) {\n+        return create(userTO, false, false, null, excludedResources);\n+    }\n+\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final boolean storePassword,\n@@ -80,6 +85,7 @@ public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final boo\n     }\n \n     @Override\n+    @SuppressWarnings(\"unchecked\")\n     public Pair<Long, List<PropagationStatus>> update(final UserMod userMod) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:updatePort\");\n \n@@ -94,6 +100,11 @@ public Pair<Long, List<PropagationStatus>> update(final UserMod userMod) {\n         return exchange.getIn().getBody(Pair.class);\n     }\n \n+    @Override\n+    public Pair<Long, List<PropagationStatus>> update(final UserMod anyMod, final Set<String> excludedResources) {\n+        return update(anyMod, anyMod.getKey(), new ProvisioningResult(), null, excludedResources);\n+    }\n+\n     @Override\n     public List<PropagationStatus> delete(final Long userKey) {\n         return delete(userKey, Collections.<String>emptySet());"},{"sha":"8643f6a1f8ee89c87794b9bb5067545d71386749","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupDeleteProcessor.java","status":"modified","additions":13,"deletions":3,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/705bfb86c37a06a538e8973cee8c4948d160bac4/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeleteProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/705bfb86c37a06a538e8973cee8c4948d160bac4/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeleteProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeleteProcessor.java?ref=705bfb86c37a06a538e8973cee8c4948d160bac4","patch":"@@ -22,6 +22,7 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n@@ -61,22 +62,31 @@ public class GroupDeleteProcessor implements Processor {\n     public void process(final Exchange exchange) throws Exception {\n         Long anyKey = exchange.getIn().getBody(Long.class);\n         Group group = groupDAO.find(anyKey);\n+        @SuppressWarnings(\"unchecked\")\n+        Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n-        final List<PropagationTask> tasks = new ArrayList<>();\n+        List<PropagationTask> tasks = new ArrayList<>();\n \n         if (group != null) {\n             // Generate propagation tasks for deleting users from group resources, if they are on those resources only\n             // because of the reason being deleted (see SYNCOPE-357)\n+            for (Map.Entry<Long, PropagationByResource> entry\n+                    : groupDAO.findUsersWithTransitiveResources(group.getKey()).entrySet()) {\n+\n+                WorkflowResult<Long> wfResult =\n+                        new WorkflowResult<>(entry.getKey(), entry.getValue(), Collections.<String>emptySet());\n+                tasks.addAll(propagationManager.getUserDeleteTasks(wfResult.getResult(), excludedResources));\n+            }\n             for (Map.Entry<Long, PropagationByResource> entry\n                     : groupDAO.findAnyObjectsWithTransitiveResources(group.getKey()).entrySet()) {\n \n                 WorkflowResult<Long> wfResult =\n                         new WorkflowResult<>(entry.getKey(), entry.getValue(), Collections.<String>emptySet());\n-                tasks.addAll(propagationManager.getUserDeleteTasks(wfResult));\n+                tasks.addAll(propagationManager.getAnyObjectDeleteTasks(wfResult.getResult(), excludedResources));\n             }\n \n             // Generate propagation tasks for deleting this group from resources\n-            tasks.addAll(propagationManager.getGroupDeleteTasks(group.getKey()));\n+            tasks.addAll(propagationManager.getGroupDeleteTasks(group.getKey(), excludedResources));\n         }\n \n         PropagationReporter propagationReporter ="}]}