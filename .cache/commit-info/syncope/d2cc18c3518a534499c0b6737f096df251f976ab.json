{"sha":"d2cc18c3518a534499c0b6737f096df251f976ab","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQyY2MxOGMzNTE4YTUzNDQ5OWMwYjY3MzdmMDk2ZGYyNTFmOTc2YWI=","commit":{"author":{"name":"giacomolm","email":"giacomolm@hotmail.it","date":"2015-04-14T15:53:27Z"},"committer":{"name":"giacomolm","email":"giacomolm@hotmail.it","date":"2015-04-14T15:53:27Z"},"message":"[SYNCOPE-654] Merge from 1_2_X; This closes #3","tree":{"sha":"83210f31902641822118bc1a9cdd0dd487deddba","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/83210f31902641822118bc1a9cdd0dd487deddba"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d2cc18c3518a534499c0b6737f096df251f976ab","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d2cc18c3518a534499c0b6737f096df251f976ab","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d2cc18c3518a534499c0b6737f096df251f976ab","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d2cc18c3518a534499c0b6737f096df251f976ab/comments","author":{"login":"giacomolm","id":4027829,"node_id":"MDQ6VXNlcjQwMjc4Mjk=","avatar_url":"https://avatars.githubusercontent.com/u/4027829?v=4","gravatar_id":"","url":"https://api.github.com/users/giacomolm","html_url":"https://github.com/giacomolm","followers_url":"https://api.github.com/users/giacomolm/followers","following_url":"https://api.github.com/users/giacomolm/following{/other_user}","gists_url":"https://api.github.com/users/giacomolm/gists{/gist_id}","starred_url":"https://api.github.com/users/giacomolm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/giacomolm/subscriptions","organizations_url":"https://api.github.com/users/giacomolm/orgs","repos_url":"https://api.github.com/users/giacomolm/repos","events_url":"https://api.github.com/users/giacomolm/events{/privacy}","received_events_url":"https://api.github.com/users/giacomolm/received_events","type":"User","site_admin":false},"committer":{"login":"giacomolm","id":4027829,"node_id":"MDQ6VXNlcjQwMjc4Mjk=","avatar_url":"https://avatars.githubusercontent.com/u/4027829?v=4","gravatar_id":"","url":"https://api.github.com/users/giacomolm","html_url":"https://github.com/giacomolm","followers_url":"https://api.github.com/users/giacomolm/followers","following_url":"https://api.github.com/users/giacomolm/following{/other_user}","gists_url":"https://api.github.com/users/giacomolm/gists{/gist_id}","starred_url":"https://api.github.com/users/giacomolm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/giacomolm/subscriptions","organizations_url":"https://api.github.com/users/giacomolm/orgs","repos_url":"https://api.github.com/users/giacomolm/repos","events_url":"https://api.github.com/users/giacomolm/events{/privacy}","received_events_url":"https://api.github.com/users/giacomolm/received_events","type":"User","site_admin":false},"parents":[{"sha":"f1179b53082dbd0d030de6955c6e9f6ba115e414","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f1179b53082dbd0d030de6955c6e9f6ba115e414","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f1179b53082dbd0d030de6955c6e9f6ba115e414"},{"sha":"c040d9e4e475ed6741aa6575bca0b94acfc5ae88","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c040d9e4e475ed6741aa6575bca0b94acfc5ae88","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c040d9e4e475ed6741aa6575bca0b94acfc5ae88"}],"stats":{"total":214,"additions":196,"deletions":18},"files":[{"sha":"bcf7d031d8a687eba8b00c79417c6a03a652fb20","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/RestClientExceptionMapper.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2cc18c3518a534499c0b6737f096df251f976ab/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2cc18c3518a534499c0b6737f096df251f976ab/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java?ref=d2cc18c3518a534499c0b6737f096df251f976ab","patch":"@@ -76,17 +76,18 @@ else if (statusCode == Response.Status.BAD_REQUEST.getStatusCode()) {\n     }\n \n     private SyncopeClientCompositeException checkSyncopeClientCompositeException(final Response response) {\n-        List<Object> exTypesInHeaders = response.getHeaders().get(RESTHeaders.ERROR_CODE);\n+        List<String> exTypesInHeaders = response.getStringHeaders().get(RESTHeaders.ERROR_CODE);\n         if (exTypesInHeaders == null) {\n             LOG.debug(\"No \" + RESTHeaders.ERROR_CODE + \" provided\");\n             return null;\n         }\n+        List<String> exInfos = response.getStringHeaders().get(RESTHeaders.ERROR_INFO);\n \n         final SyncopeClientCompositeException compException = SyncopeClientException.buildComposite();\n \n         final Set<String> handledExceptions = new HashSet<String>();\n-        for (Object exceptionTypeValue : exTypesInHeaders) {\n-            final String exTypeAsString = (String) exceptionTypeValue;\n+        for (int i = 0; i < exTypesInHeaders.size(); i++) {\n+            String exTypeAsString = exTypesInHeaders.get(i);\n             ClientExceptionType exceptionType = null;\n             try {\n                 exceptionType = ClientExceptionType.fromHeaderValue(exTypeAsString);\n@@ -98,13 +99,10 @@ private SyncopeClientCompositeException checkSyncopeClientCompositeException(fin\n \n                 final SyncopeClientException clientException = SyncopeClientException.build(exceptionType);\n \n-                if (response.getHeaders().get(RESTHeaders.ERROR_INFO) != null\n-                        && !response.getHeaders().get(RESTHeaders.ERROR_INFO).isEmpty()) {\n-\n-                    for (Object value : response.getHeaders().get(RESTHeaders.ERROR_INFO)) {\n-                        final String element = value.toString();\n+                if (exInfos != null && !exInfos.isEmpty()) {\n+                    for (String element : exInfos) {\n                         if (element.startsWith(exceptionType.getHeaderValue())) {\n-                            clientException.getElements().add(StringUtils.substringAfter(value.toString(), \":\"));\n+                            clientException.getElements().add(StringUtils.substringAfter(element, \":\"));\n                         }\n                     }\n                 }"},{"sha":"04b38920d619705308cbd901a623a4108b0cbf1a","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/RestClientFactoryBean.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2cc18c3518a534499c0b6737f096df251f976ab/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2cc18c3518a534499c0b6737f096df251f976ab/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientFactoryBean.java?ref=d2cc18c3518a534499c0b6737f096df251f976ab","patch":"@@ -62,6 +62,8 @@ public <T> T createServiceInstance(\n         setServiceClass(serviceClass);\n         final T serviceInstance = create(serviceClass);\n         WebClient.client(serviceInstance).type(mediaType).accept(mediaType);\n+        WebClient.getConfig(WebClient.client(serviceInstance)).getRequestContext().\n+                put(\"org.apache.cxf.http.header.split\", true);\n         return serviceInstance;\n     }\n }"},{"sha":"66522eb10aaea48483a8a4b714cbfa1ce67ce9ad","filename":"core/rest-cxf/pom.xml","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2cc18c3518a534499c0b6737f096df251f976ab/core%2Frest-cxf%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2cc18c3518a534499c0b6737f096df251f976ab/core%2Frest-cxf%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fpom.xml?ref=d2cc18c3518a534499c0b6737f096df251f976ab","patch":"@@ -48,7 +48,11 @@ under the License.\n       <groupId>org.apache.geronimo.specs</groupId>\n       <artifactId>geronimo-jpa_2.0_spec</artifactId>\n     </dependency>\n-    \n+\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-context</artifactId>\n+    </dependency>    \n     <dependency>\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-orm</artifactId>"},{"sha":"c10481f42835e78d738d897ce6716efad4457b6b","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java","status":"modified","additions":41,"deletions":8,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2cc18c3518a534499c0b6737f096df251f976ab/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2cc18c3518a534499c0b6737f096df251f976ab/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java?ref=d2cc18c3518a534499c0b6737f096df251f976ab","patch":"@@ -18,7 +18,9 @@\n  */\n package org.apache.syncope.core.rest.cxf;\n \n+import java.sql.SQLException;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -33,6 +35,7 @@\n import javax.ws.rs.core.Response.ResponseBuilder;\n import javax.ws.rs.ext.ExceptionMapper;\n import javax.ws.rs.ext.Provider;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.cxf.jaxrs.client.ResponseExceptionMapper;\n import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n import org.apache.cxf.jaxrs.validation.ValidationExceptionMapper;\n@@ -51,11 +54,17 @@\n import org.identityconnectors.framework.common.exceptions.ConfigurationException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.core.env.Environment;\n import org.springframework.dao.DataIntegrityViolationException;\n import org.springframework.orm.jpa.JpaSystemException;\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.transaction.TransactionSystemException;\n \n+@Configuration\n+@PropertySource(\"classpath:errorMessages.properties\")\n @Provider\n public class RestServiceExceptionMapper implements ExceptionMapper<Exception>, ResponseExceptionMapper<Exception> {\n \n@@ -65,6 +74,17 @@ public class RestServiceExceptionMapper implements ExceptionMapper<Exception>, R\n \n     private final ValidationExceptionMapper validationEM = new ValidationExceptionMapper();\n \n+    @Autowired\n+    private Environment env;\n+\n+    private static final Map<String, String> exceptionCodeMap;\n+\n+    static {\n+        exceptionCodeMap = new HashMap<>();\n+        exceptionCodeMap.put(\"23000\", \"UniqueConstraintViolation\");\n+        exceptionCodeMap.put(\"23505\", \"UniqueConstraintViolation\");\n+    }\n+\n     @Override\n     public Response toResponse(final Exception ex) {\n         LOG.error(\"Exception thrown by REST method: \" + ex.getMessage(), ex);\n@@ -91,9 +111,9 @@ public Response toResponse(final Exception ex) {\n         } else if (ex instanceof UnauthorizedRoleException) {\n             builder = builder(Response.Status.UNAUTHORIZED, ClientExceptionType.UnauthorizedRole, getExMessage(ex));\n         } else if (ex instanceof EntityExistsException || ex instanceof DuplicateException) {\n-            builder = builder(Response.Status.CONFLICT, ClientExceptionType.EntityExists, getExMessage(ex));\n-        } else if (ex instanceof DataIntegrityViolationException) {\n-            builder = builder(Response.Status.CONFLICT, ClientExceptionType.DataIntegrityViolation, getExMessage(ex));\n+            builder = builder(Response.Status.CONFLICT, ClientExceptionType.EntityExists, getJPAMessage(ex));\n+        } else if (ex instanceof DataIntegrityViolationException || ex instanceof JpaSystemException) {\n+            builder = builder(Response.Status.CONFLICT, ClientExceptionType.DataIntegrityViolation, getJPAMessage(ex));\n         } else {\n             builder = processNotFoundExceptions(ex);\n             if (builder == null) {\n@@ -170,7 +190,7 @@ private ResponseBuilder getSyncopeClientCompositeExceptionResponse(final Syncope\n             error.setType(sce.getType());\n \n             for (String element : sce.getElements()) {\n-                builder.header(RESTHeaders.ERROR_INFO, ex.getType().getInfoHeaderValue(element));\n+                builder.header(RESTHeaders.ERROR_INFO, sce.getType().getInfoHeaderValue(element));\n                 error.getElements().add(element);\n             }\n \n@@ -201,10 +221,9 @@ private ResponseBuilder processInvalidEntityExceptions(final Exception ex) {\n         }\n \n         if (iee != null) {\n-            ClientExceptionType exType =\n-                    iee.getEntityClassSimpleName().endsWith(\"Policy\")\n-                            ? ClientExceptionType.InvalidPolicy\n-                            : ClientExceptionType.valueOf(\"Invalid\" + iee.getEntityClassSimpleName());\n+            ClientExceptionType exType = iee.getEntityClassSimpleName().endsWith(\"Policy\")\n+                    ? ClientExceptionType.InvalidPolicy\n+                    : ClientExceptionType.valueOf(\"Invalid\" + iee.getEntityClassSimpleName());\n \n             ResponseBuilder builder = Response.status(Response.Status.BAD_REQUEST);\n             builder.header(RESTHeaders.ERROR_CODE, exType.getHeaderValue());\n@@ -282,4 +301,18 @@ private String getMessage(final Throwable ex, final String msg) {\n     private String getExMessage(final Throwable ex) {\n         return (ex.getCause() == null) ? ex.getMessage() : ex.getCause().getMessage();\n     }\n+\n+    private String getJPAMessage(final Throwable ex) {\n+        Throwable throwable = ExceptionUtils.getRootCause(ex);\n+        String message = null;\n+        if (throwable instanceof SQLException) {\n+            String SQLState = ((SQLException) throwable).getSQLState();\n+            String messageKey = exceptionCodeMap.get(SQLState);\n+            if (messageKey != null) {\n+                message = env.getProperty(\"errMessage.\" + messageKey);\n+            }\n+        }\n+\n+        return message == null ? getExMessage(ex) : message;\n+    }\n }"},{"sha":"4e942db888873896d31e4479123dfbf76983d397","filename":"core/rest-cxf/src/main/resources/errorMessages.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2cc18c3518a534499c0b6737f096df251f976ab/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FerrorMessages.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2cc18c3518a534499c0b6737f096df251f976ab/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FerrorMessages.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FerrorMessages.properties?ref=d2cc18c3518a534499c0b6737f096df251f976ab","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+errMessage.UniqueConstraintViolation=A violation of the constraint imposed by a unique index or a unique constraint occurred"},{"sha":"7f83b459e192815bee04c3940232feb61fbb621b","filename":"fit/core-reference/pom.xml","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2cc18c3518a534499c0b6737f096df251f976ab/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2cc18c3518a534499c0b6737f096df251f976ab/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=d2cc18c3518a534499c0b6737f096df251f976ab","patch":"@@ -344,6 +344,13 @@ under the License.\n         <directory>src/test/resources</directory>\n         <filtering>true</filtering>\n       </testResource>\n+      <testResource>\n+        <directory>${basedir}/../../core/rest-cxf/src/main/resources</directory>\n+        <includes>\n+          <include>errorMessages.properties</include>\n+        </includes>\n+        <filtering>true</filtering>\n+      </testResource>\n     </testResources>\n   </build>\n   "},{"sha":"25b0667ca3edea19929eced1be5711d633951860","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ExceptionMapperITCase.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2cc18c3518a534499c0b6737f096df251f976ab/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FExceptionMapperITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2cc18c3518a534499c0b6737f096df251f976ab/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FExceptionMapperITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FExceptionMapperITCase.java?ref=d2cc18c3518a534499c0b6737f096df251f976ab","patch":"@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Properties;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class ExceptionMapperITCase extends AbstractITCase {\n+\n+    private static final Properties props = new Properties();\n+\n+    @BeforeClass\n+    public static void setUpErrorMessages() throws IOException {\n+        InputStream propStream = null;\n+        try {\n+            propStream = ExceptionMapperITCase.class.getResourceAsStream(\"/errorMessages.properties\");\n+            props.load(propStream);\n+        } catch (Exception e) {\n+            LOG.error(\"Could not load /errorMessages.properties\", e);\n+        } finally {\n+            IOUtils.closeQuietly(propStream);\n+        }\n+    }\n+\n+    @Test\n+    public void uniqueSchemaConstraint() {\n+        // 1. create an user schema with unique constraint\n+        PlainSchemaTO schemaTO = new PlainSchemaTO();\n+        String schema_UID = getUUIDString();\n+        schemaTO.setKey(\"unique\" + schema_UID);\n+        schemaTO.setType(AttrSchemaType.String);\n+        schemaTO.setUniqueConstraint(true);\n+        createSchema(AttributableType.USER, SchemaType.PLAIN, schemaTO);\n+\n+        // 2. create an user with mandatory attributes and unique\n+        UserTO userTO_1 = new UserTO();\n+        String userId_1 = getUUIDString() + \"issue654_1@syncope.apache.org\";\n+        userTO_1.setUsername(userId_1);\n+        userTO_1.setPassword(\"password\");\n+\n+        userTO_1.getPlainAttrs().add(attrTO(\"userId\", userId_1));\n+        userTO_1.getPlainAttrs().add(attrTO(\"fullname\", userId_1));\n+        userTO_1.getPlainAttrs().add(attrTO(\"surname\", userId_1));\n+        userTO_1.getPlainAttrs().add(attrTO(\"unique\" + schema_UID, \"unique\" + schema_UID));\n+\n+        createUser(userTO_1);\n+\n+        // 3. create an other user with mandatory attributes and unique with the same value of userTO_1\n+        UserTO userTO_2 = new UserTO();\n+        String userId_2 = getUUIDString() + \"issue654_2@syncope.apache.org\";\n+        userTO_2.setUsername(userId_2);\n+        userTO_2.setPassword(\"password\");\n+\n+        userTO_2.getPlainAttrs().add(attrTO(\"userId\", userId_2));\n+        userTO_2.getPlainAttrs().add(attrTO(\"fullname\", userId_2));\n+        userTO_2.getPlainAttrs().add(attrTO(\"surname\", userId_2));\n+        userTO_2.getPlainAttrs().add(attrTO(\"unique\" + schema_UID, \"unique\" + schema_UID));\n+\n+        try {\n+            createUser(userTO_2);\n+        } catch (Exception e) {\n+            String message = props.getProperty(\"errMessage.UniqueConstraintViolation\");\n+            Assert.assertEquals(e.getMessage(), \"DataIntegrityViolation [\" + message + \"]\");\n+        }\n+    }\n+\n+    @Test\n+    public void sameRoleName() {\n+        //Create the first role\n+        RoleTO roleTO_1 = new RoleTO();\n+        String role_UUID = getUUIDString();\n+        roleTO_1.setName(\"child1\" + role_UUID);\n+        roleTO_1.setParent(1L);\n+        createRole(roleTO_1);\n+        //Create the second role, with the same parent and the same role of roleTO_1\n+        RoleTO roleTO_2 = new RoleTO();\n+        roleTO_2.setName(\"child1\" + role_UUID);\n+        roleTO_2.setParent(1L);\n+        try {\n+            createRole(roleTO_2);\n+        } catch (Exception e) {\n+            String message = props.getProperty(\"errMessage.UniqueConstraintViolation\");\n+            Assert.assertEquals(e.getMessage(), \"DataIntegrityViolation [\" + message + \"]\");\n+        }\n+    }\n+\n+}"}]}