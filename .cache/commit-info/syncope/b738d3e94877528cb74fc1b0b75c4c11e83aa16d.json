{"sha":"b738d3e94877528cb74fc1b0b75c4c11e83aa16d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmI3MzhkM2U5NDg3NzUyOGNiNzRmYzFiMGI3NWM0YzExZTgzYWExNmQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-19T15:52:42Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-19T15:52:42Z"},"message":"Reviewing several client-side builders, adjusting roles","tree":{"sha":"9399d30e9ad0c79d83276bc356b86078b4383870","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9399d30e9ad0c79d83276bc356b86078b4383870"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b738d3e94877528cb74fc1b0b75c4c11e83aa16d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b738d3e94877528cb74fc1b0b75c4c11e83aa16d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b738d3e94877528cb74fc1b0b75c4c11e83aa16d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"6ea34cd36a4943537abf65eee1a94ef3982679b5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6ea34cd36a4943537abf65eee1a94ef3982679b5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6ea34cd36a4943537abf65eee1a94ef3982679b5"}],"stats":{"total":1616,"additions":728,"deletions":888},"files":[{"sha":"02d3e6723af0a85e92bc396983da1b9eb1e9c81e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/entitlement/EntitlementResultManager.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fentitlement%2FEntitlementResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fentitlement%2FEntitlementResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fentitlement%2FEntitlementResultManager.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -41,7 +41,6 @@ public void rolesToView(final Collection<RoleTO> roles) {\n \n     private void printRole(final RoleTO roleTO) {\n         System.out.println(\" > ROLE ID: \" + roleTO.getKey());\n-        System.out.println(\"    name: \" + roleTO.getName());\n         System.out.println(\"    REALMS: \");\n         printRealms(roleTO.getRealms());\n         System.out.println(\"\");"},{"sha":"8ee92f018c785cbb6ae5176d966fe936541734ea","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/entitlement/EntitlementSyncopeOperations.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fentitlement%2FEntitlementSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fentitlement%2FEntitlementSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fentitlement%2FEntitlementSyncopeOperations.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -48,17 +48,17 @@ public boolean exists(final String entitlement) {\n     public Set<String> usernameEntitlements(final String username) {\n         final Set<String> entitlements = new TreeSet<>();\n         final UserTO userTO = userSyncopeOperations.read(userSyncopeOperations.getIdFromUsername(username));\n-        for (final Long role : userTO.getRoles()) {\n-            entitlements.addAll(roleSyncopeOperations.read(String.valueOf(role)).getEntitlements());\n+        for (final String role : userTO.getRoles()) {\n+            entitlements.addAll(roleSyncopeOperations.read(role).getEntitlements());\n         }\n         return entitlements;\n     }\n \n     public Set<String> userIdEntitlements(final String userId) {\n         final Set<String> entitlements = new TreeSet<>();\n         final UserTO userTO = userSyncopeOperations.read(userId);\n-        for (final Long role : userTO.getRoles()) {\n-            entitlements.addAll(roleSyncopeOperations.read(String.valueOf(role)).getEntitlements());\n+        for (final String role : userTO.getRoles()) {\n+            entitlements.addAll(roleSyncopeOperations.read(role).getEntitlements());\n         }\n         return entitlements;\n     }"},{"sha":"4ca13dae8c7bf377095e6d67f1a8365d9e386a8b","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/role/RoleResultManager.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Frole%2FRoleResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Frole%2FRoleResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Frole%2FRoleResultManager.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -35,7 +35,6 @@ public void printRoles(final List<RoleTO> roleTOs) {\n \n     private void printRole(final RoleTO roleTO) {\n         System.out.println(\" > ROLE ID: \" + roleTO.getKey());\n-        System.out.println(\"    name: \" + roleTO.getName());\n         System.out.println(\"    REALMS: \");\n         printRealms(roleTO.getRealms());\n         System.out.println(\"    ENTITLEMENTS:\");"},{"sha":"6bffb17942fb6d51beac29c029bb30ceac528a0f","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/role/RoleSyncopeOperations.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Frole%2FRoleSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Frole%2FRoleSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Frole%2FRoleSyncopeOperations.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -30,12 +30,12 @@ public class RoleSyncopeOperations {\n     public List<RoleTO> list() {\n         return roleService.list();\n     }\n-    \n-    public RoleTO read(final String roleId) {\n-        return roleService.read(Long.valueOf(roleId));\n+\n+    public RoleTO read(final String role) {\n+        return roleService.read(role);\n     }\n-    \n-    public void delete(final String roleId) {\n-        roleService.delete(Long.valueOf(roleId));\n+\n+    public void delete(final String role) {\n+        roleService.delete(role);\n     }\n }"},{"sha":"73c483de8ea348e069b9b204210371b99ad06d90","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaSyncopeOperations.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaSyncopeOperations.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -22,6 +22,7 @@\n import org.apache.syncope.client.cli.SyncopeServices;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n \n public class SchemaSyncopeOperations {\n@@ -33,19 +34,19 @@ public <T extends AbstractSchemaTO> T read(final String schemaTypeString, final\n     }\n \n     public <T extends AbstractSchemaTO> List<T> list(final String schemaTypeString) {\n-        return schemaService.list(SchemaType.valueOf(schemaTypeString), null);\n-    }\n-\n-    public <T extends AbstractSchemaTO> List<T> listVirtual() {\n-        return schemaService.list(SchemaType.VIRTUAL, null);\n+        return schemaService.list(SchemaType.valueOf(schemaTypeString), new SchemaQuery.Builder().build());\n     }\n \n     public <T extends AbstractSchemaTO> List<T> listPlain() {\n-        return schemaService.list(SchemaType.PLAIN, null);\n+        return schemaService.list(SchemaType.PLAIN, new SchemaQuery.Builder().build());\n     }\n \n     public <T extends AbstractSchemaTO> List<T> listDerived() {\n-        return schemaService.list(SchemaType.DERIVED, null);\n+        return schemaService.list(SchemaType.DERIVED, new SchemaQuery.Builder().build());\n+    }\n+\n+    public <T extends AbstractSchemaTO> List<T> listVirtual() {\n+        return schemaService.list(SchemaType.VIRTUAL, new SchemaQuery.Builder().build());\n     }\n \n     public void delete(final String schemaTypeString, final String schemaName) {"},{"sha":"8e3dae2711172f14c1f350b1ef85c28c6ec85913","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserResultManager.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserResultManager.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -75,8 +75,8 @@ private void printResource(final Set<String> resources) {\n         }\n     }\n \n-    private void printRole(final List<Long> roles) {\n-        for (final Long role : roles) {\n+    private void printRole(final List<String> roles) {\n+        for (final String role : roles) {\n             System.out.println(\"       - \" + role);\n         }\n     }\n@@ -94,16 +94,16 @@ private void printAttributes(final Set<AttrTO> derAttrTOs) {\n             System.out.println(attributeSentence);\n         }\n     }\n-    \n+\n     private void printRelationships(final List<RelationshipTO> relationshipTOs) {\n         for (final RelationshipTO relationshipTO : relationshipTOs) {\n             System.out.println(\"       type: \" + relationshipTO.getType());\n         }\n     }\n-    \n+\n     public void printUndeletedUsers(final Map<String, String> users) {\n-        final Table.TableBuilder tableBuilder\n-                = new Table.TableBuilder(\"Users not deleted\").header(\"user id\").header(\"cause\");\n+        final Table.TableBuilder tableBuilder =\n+                new Table.TableBuilder(\"Users not deleted\").header(\"user id\").header(\"cause\");\n         for (final Map.Entry<String, String> entrySet : users.entrySet()) {\n             tableBuilder.rowValues(new LinkedList<>(Arrays.asList(entrySet.getKey(), entrySet.getValue())));\n         }"},{"sha":"9cdabd739c55c2b276686749979f005bf9c996ad","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserSyncopeOperations.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserSyncopeOperations.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n+import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n import org.apache.syncope.common.rest.api.service.UserService;\n \n public class UserSyncopeOperations {\n@@ -46,21 +47,21 @@ public boolean auth(final String username, final String password) {\n \n     public List<UserTO> searchByRole(final String realm, final String role) {\n         return userService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(realm).\n-                fiql(SyncopeClient.getUserSearchConditionBuilder().inRoles(Long.valueOf(role))\n+                new AnySearchQuery.Builder().realm(realm).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().inRoles(role)\n                         .query()).build()).getResult();\n     }\n \n     public List<UserTO> searchByResource(final String realm, final String resource) {\n         return userService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(realm).\n+                new AnySearchQuery.Builder().realm(realm).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().hasResources(resource)\n                         .query()).build()).getResult();\n     }\n \n     public List<UserTO> searchByAttribute(final String realm, final String attributeName, final String attributeValue) {\n         return userService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(realm).\n+                new AnySearchQuery.Builder().realm(realm).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().is(attributeName).equalTo(attributeValue)\n                         .query()).build()).getResult();\n     }\n@@ -88,7 +89,7 @@ public void delete(final String userId) {\n     public Map<String, BulkActionResult.Status> deleteByAttribute(\n             final String realm, final String attributeName, final String attributeValue) {\n         final List<UserTO> users = userService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(realm).\n+                new AnySearchQuery.Builder().realm(realm).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().is(attributeName).equalTo(attributeValue)\n                         .query()).build()).getResult();\n         return deleteBulk(users);"},{"sha":"b845eb7cab5c8be2171eb93d16c50cf2e09729b0","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AnyObjectRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -20,7 +20,6 @@\n \n import java.util.List;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -29,6 +28,7 @@\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n import org.apache.syncope.common.rest.api.service.AnyObjectService;\n import org.apache.syncope.common.rest.api.service.AnyService;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n@@ -50,7 +50,7 @@ public class AnyObjectRestClient extends AbstractAnyRestClient<AnyObjectTO> {\n     @Override\n     public int count(final String type, final String realm) {\n         return getService(AnyObjectService.class).list(\n-                type, SyncopeClient.getAnyListQueryBuilder().realm(realm).page(1).size(1).build()).getTotalCount();\n+                type, new AnyListQuery.Builder().realm(realm).page(1).size(1).build()).getTotalCount();\n     }\n \n     @Override\n@@ -62,7 +62,7 @@ public List<AnyObjectTO> list(final String realm, final int page, final int size\n \n     public PagedResult<AnyObjectTO> list(final String type, final String realm) {\n         return getService(AnyObjectService.class).\n-                list(type, SyncopeClient.getAnyListQueryBuilder().realm(realm).build());\n+                list(type, new AnyListQuery.Builder().realm(realm).build());\n     }\n \n     @Override"},{"sha":"72f80f5fe1abf61e82af8f261d6f09047040a68d","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -22,14 +22,15 @@\n import javax.ws.rs.core.GenericType;\n \n import javax.ws.rs.core.Response;\n-import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n+import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n import org.apache.syncope.common.rest.api.service.AnyService;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.common.rest.api.service.GroupService;\n@@ -52,23 +53,23 @@ public class GroupRestClient extends AbstractAnyRestClient<GroupTO> {\n     @Override\n     public int count(final String realm, final String type) {\n         return getService(GroupService.class).\n-                list(SyncopeClient.getAnyListQueryBuilder().realm(realm).page(1).size(1).build()).\n+                list(new AnyListQuery.Builder().realm(realm).page(1).size(1).build()).\n                 getTotalCount();\n     }\n \n     @Override\n     public List<GroupTO> list(final String realm, final int page, final int size, final SortParam<String> sort,\n             final String type) {\n         return getService(GroupService.class).\n-                list(SyncopeClient.getAnyListQueryBuilder().realm(realm).page(page).size(size).\n+                list(new AnyListQuery.Builder().realm(realm).page(page).size(size).\n                         orderBy(toOrderBy(sort)).details(false).build()).\n                 getResult();\n     }\n \n     @Override\n     public int searchCount(final String realm, final String fiql, final String type) {\n         return getService(GroupService.class).\n-                search(SyncopeClient.getAnySearchQueryBuilder().realm(realm).fiql(fiql).page(1).size(1).build()).\n+                search(new AnySearchQuery.Builder().realm(realm).fiql(fiql).page(1).size(1).build()).\n                 getTotalCount();\n     }\n \n@@ -78,7 +79,7 @@ public List<GroupTO> search(\n             final String type) {\n \n         return getService(GroupService.class).\n-                search(SyncopeClient.getAnySearchQueryBuilder().realm(realm).fiql(fiql).page(page).size(size).\n+                search(new AnySearchQuery.Builder().realm(realm).fiql(fiql).page(page).size(size).\n                         orderBy(toOrderBy(sort)).details(false).build()).\n                 getResult();\n     }"},{"sha":"517aaa4d3eab7ea9d0f87882e4a68433539ff506","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/SchemaRestClient.java","status":"modified","additions":5,"deletions":28,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.springframework.stereotype.Component;\n \n@@ -62,11 +63,11 @@ public <T extends AbstractSchemaTO> List<T> getSchemas(final SchemaType schemaTy\n \n         try {\n             if (kind == null || kind.length == 0) {\n-                schemas.addAll(getService(SchemaService.class).<T>list(schemaType, null));\n+                schemas.addAll(getService(SchemaService.class).\n+                        <T>list(schemaType, new SchemaQuery.Builder().build()));\n             } else {\n-                for (String clazz : kind) {\n-                    schemas.addAll(getService(SchemaService.class).<T>list(schemaType, clazz));\n-                }\n+                schemas.addAll(getService(SchemaService.class).\n+                        <T>list(schemaType, new SchemaQuery.Builder().anyTypeClasses(kind).build()));\n             }\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While getting all {} schemas for {}\", schemaType, kind, e);\n@@ -96,34 +97,10 @@ public List<String> getPlainSchemaNames() {\n         return getSchemaNames(SchemaType.PLAIN);\n     }\n \n-    public List<DerSchemaTO> getDerSchemas() {\n-        List<DerSchemaTO> userDerSchemas = null;\n-\n-        try {\n-            userDerSchemas = getService(SchemaService.class).list(SchemaType.DERIVED, null);\n-        } catch (SyncopeClientException e) {\n-            LOG.error(\"While getting all user derived schemas\", e);\n-        }\n-\n-        return userDerSchemas;\n-    }\n-\n     public List<String> getDerSchemaNames() {\n         return getSchemaNames(SchemaType.DERIVED);\n     }\n \n-    public List<VirSchemaTO> getVirSchemas() {\n-        List<VirSchemaTO> userVirSchemas = null;\n-\n-        try {\n-            userVirSchemas = getService(SchemaService.class).list(SchemaType.VIRTUAL, null);\n-        } catch (SyncopeClientException e) {\n-            LOG.error(\"While getting all virtual schemas\", e);\n-        }\n-\n-        return userVirSchemas;\n-    }\n-\n     public List<String> getVirSchemaNames() {\n         return getSchemaNames(SchemaType.VIRTUAL);\n     }"},{"sha":"175633f83fc080048245210f705aa8fb0338b98d","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -21,7 +21,6 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n@@ -31,6 +30,7 @@\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.springframework.stereotype.Component;\n@@ -63,16 +63,16 @@ public Set<String> getPushActionsClasses() {\n      */\n     public int count(final String kind) {\n         return getService(TaskService.class).\n-                list(TaskType.fromString(kind), SyncopeClient.getTaskQueryBuilder().page(1).size(1).build()).\n+                list(TaskType.fromString(kind), new TaskQuery.Builder().page(1).size(1).build()).\n                 getTotalCount();\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public <T extends AbstractTaskTO> List<T> list(final Class<T> reference,\n-            final int page, final int size, final SortParam<String> sort) {\n+    public <T extends AbstractTaskTO> List<T> list(\n+            final Class<T> reference, final int page, final int size, final SortParam<String> sort) {\n \n         return (List<T>) getService(TaskService.class).\n-                list(getTaskType(reference), SyncopeClient.getTaskQueryBuilder().page(page).size(size).\n+                list(getTaskType(reference), new TaskQuery.Builder().page(page).size(size).\n                         orderBy(toOrderBy(sort)).build()).\n                 getResult();\n     }"},{"sha":"9b8f69760eacb88289d79047d133f7dfab37d9f3","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/UserRestClient.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -23,7 +23,6 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.console.commons.status.StatusBean;\n import org.apache.syncope.client.console.commons.status.StatusUtils;\n-import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.patch.StatusPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n@@ -34,6 +33,8 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.StatusPatchType;\n+import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n+import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n import org.apache.syncope.common.rest.api.service.AnyService;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.common.rest.api.service.UserService;\n@@ -56,15 +57,15 @@ public class UserRestClient extends AbstractAnyRestClient<UserTO> {\n     @Override\n     public int count(final String realm, final String type) {\n         return getService(UserService.class).\n-                list(SyncopeClient.getAnyListQueryBuilder().realm(realm).page(1).size(1).build()).\n+                list(new AnyListQuery.Builder().realm(realm).page(1).size(1).build()).\n                 getTotalCount();\n     }\n \n     @Override\n     public List<UserTO> list(final String realm, final int page, final int size, final SortParam<String> sort,\n             final String type) {\n         return getService(UserService.class).\n-                list(SyncopeClient.getAnyListQueryBuilder().realm(realm).page(page).size(size).\n+                list(new AnyListQuery.Builder().realm(realm).page(page).size(size).\n                         orderBy(toOrderBy(sort)).details(false).build()).getResult();\n     }\n \n@@ -103,7 +104,7 @@ public UserTO read(final Long id) {\n     @Override\n     public int searchCount(final String realm, final String fiql, final String type) {\n         return getService(UserService.class).\n-                search(SyncopeClient.getAnySearchQueryBuilder().realm(realm).fiql(fiql).page(1).size(1).build()).\n+                search(new AnySearchQuery.Builder().realm(realm).fiql(fiql).page(1).size(1).build()).\n                 getTotalCount();\n     }\n \n@@ -113,7 +114,7 @@ public List<UserTO> search(\n             final String type) {\n \n         return getService(UserService.class).\n-                search(SyncopeClient.getAnySearchQueryBuilder().realm(realm).fiql(fiql).page(page).size(size).\n+                search(new AnySearchQuery.Builder().realm(realm).fiql(fiql).page(page).size(size).\n                         orderBy(toOrderBy(sort)).details(false).build()).getResult();\n     }\n "},{"sha":"69fe72ff5f8734399d0eb8b2da00f631bdebfcdf","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/AbstractBaseResource.java","status":"modified","additions":1,"deletions":13,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FAbstractBaseResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FAbstractBaseResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FAbstractBaseResource.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -30,19 +30,7 @@ public abstract class AbstractBaseResource extends AbstractResource {\n \n     private static final Logger LOG = LoggerFactory.getLogger(AbstractBaseResource.class);\n \n-    protected <T> T getService(final Class<T> serviceClass) {\n-        return SyncopeEnduserSession.get().getService(serviceClass);\n-    }\n-\n-    protected <T> T getService(final String etag, final Class<T> serviceClass) {\n-        return SyncopeEnduserSession.get().getService(etag, serviceClass);\n-    }\n-\n-    protected <T> void resetClient(final Class<T> serviceClass) {\n-        SyncopeEnduserSession.get().resetClient(serviceClass);\n-    }\n-\n-    protected boolean isSelfRegistrationAllowed() {\n+    protected final boolean isSelfRegistrationAllowed() {\n         Boolean result = null;\n         try {\n             result = SyncopeEnduserSession.get().getSyncopeTO().isSelfRegAllowed();"},{"sha":"3cf3fc0654b152df74d19bf4c56b81f28346f4bc","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SchemaResource.java","status":"modified","additions":11,"deletions":18,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -21,6 +21,7 @@\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n+import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.model.SchemaResponse;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n@@ -29,6 +30,7 @@\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n import org.apache.syncope.common.rest.api.service.AnyTypeService;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n@@ -51,9 +53,9 @@ public class SchemaResource extends AbstractBaseResource {\n     private final SchemaService schemaService;\n \n     public SchemaResource() {\n-        anyTypeService = getService(AnyTypeService.class);\n-        anyTypeClassService = getService(AnyTypeClassService.class);\n-        schemaService = getService(SchemaService.class);\n+        anyTypeService = SyncopeEnduserSession.get().getService(AnyTypeService.class);\n+        anyTypeClassService = SyncopeEnduserSession.get().getService(AnyTypeClassService.class);\n+        schemaService = SyncopeEnduserSession.get().getService(SchemaService.class);\n     }\n \n     @Override\n@@ -66,22 +68,14 @@ protected AbstractResource.ResourceResponse newResourceResponse(final IResource.\n         int responseStatus = 200;\n \n         try {\n-\n             final AnyTypeTO anyTypeUserTO = anyTypeService.read(AnyTypeKind.USER.name());\n \n-            final List<PlainSchemaTO> plainSchemas = new ArrayList<>();\n-            final List<DerSchemaTO> derSchemas = new ArrayList<>();\n-            final List<VirSchemaTO> virSchemas = new ArrayList<>();\n-\n-            // read all USER type schemas\n-            for (String clazz : anyTypeUserTO.getClasses()) {\n-                plainSchemas.addAll(getSchemaTOs(anyTypeClassService.read(clazz).getPlainSchemas(), SchemaType.PLAIN,\n-                        PlainSchemaTO.class));\n-                derSchemas.addAll(getSchemaTOs(anyTypeClassService.read(clazz).getDerSchemas(), SchemaType.DERIVED,\n-                        DerSchemaTO.class));\n-                virSchemas.addAll(getSchemaTOs(anyTypeClassService.read(clazz).getVirSchemas(), SchemaType.VIRTUAL,\n-                        VirSchemaTO.class));\n-            }\n+            final List<PlainSchemaTO> plainSchemas = schemaService.list(\n+                    SchemaType.PLAIN, new SchemaQuery.Builder().anyTypeClasses(anyTypeUserTO.getClasses()).build());\n+            final List<DerSchemaTO> derSchemas = schemaService.list(\n+                    SchemaType.DERIVED, new SchemaQuery.Builder().anyTypeClasses(anyTypeUserTO.getClasses()).build());\n+            final List<VirSchemaTO> virSchemas = schemaService.list(\n+                    SchemaType.VIRTUAL, new SchemaQuery.Builder().anyTypeClasses(anyTypeUserTO.getClasses()).build());\n \n             response.setWriteCallback(new AbstractResource.WriteCallback() {\n \n@@ -93,7 +87,6 @@ public void writeData(final IResource.Attributes attributes) throws IOException\n                             virSchemas(virSchemas)));\n                 }\n             });\n-\n         } catch (Exception e) {\n             LOG.error(\"Error retrieving {} any type kind related schemas\", AnyTypeKind.USER.name(), e);\n             responseStatus = 400;"},{"sha":"60ab318d7cc44c6b68e2cd76664302ec51b9788f","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SecurityQuestionResource.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSecurityQuestionResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSecurityQuestionResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSecurityQuestionResource.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -20,6 +20,7 @@\n \n import java.io.IOException;\n import java.util.List;\n+import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n import org.apache.syncope.common.rest.api.service.SecurityQuestionService;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n@@ -37,7 +38,7 @@ public class SecurityQuestionResource extends AbstractBaseResource {\n     private final SecurityQuestionService securityQuestionService;\n \n     public SecurityQuestionResource() {\n-        securityQuestionService = getService(SecurityQuestionService.class);\n+        securityQuestionService = SyncopeEnduserSession.get().getService(SecurityQuestionService.class);\n     }\n \n     @Override"},{"sha":"02297fb319666e0bdaee5a389bd61fa8596b92c2","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfCreateResource.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -20,6 +20,7 @@\n \n import java.io.IOException;\n import javax.servlet.http.HttpServletRequest;\n+import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.adapters.UserTOAdapter;\n import org.apache.syncope.client.enduser.model.UserTORequest;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n@@ -40,7 +41,7 @@ public class UserSelfCreateResource extends AbstractBaseResource {\n \n     public UserSelfCreateResource() {\n         userTOAdapter = new UserTOAdapter();\n-        userSelfService = getService(UserSelfService.class);\n+        userSelfService = SyncopeEnduserSession.get().getService(UserSelfService.class);\n     }\n \n     @Override"},{"sha":"4e2d90adf4664e133e9dec348ace30935667dace","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -43,7 +43,7 @@ public class UserSelfUpdateResource extends AbstractBaseResource {\n \n     public UserSelfUpdateResource() {\n         userTOAdapter = new UserTOAdapter();\n-        userSelfService = getService(UserSelfService.class);\n+        userSelfService = SyncopeEnduserSession.get().getService(UserSelfService.class);\n     }\n \n     @Override\n@@ -69,7 +69,7 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n             // update user\n             Response res = userSelfService.update(userTO);\n             responseStatus = res.getStatus();\n-            \n+\n             responseMessage = \"User updated successfully\";\n \n             response.setWriteCallback(new WriteCallback() {"},{"sha":"198b585f91058e86b20051ca2bb9376e1e5c5dd2","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":1,"deletions":56,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -30,11 +30,6 @@\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n-import org.apache.syncope.client.lib.builders.AnyQueryBuilder;\n-import org.apache.syncope.client.lib.builders.AnyListQueryBuilder;\n-import org.apache.syncope.client.lib.builders.AnySearchQueryBuilder;\n-import org.apache.syncope.client.lib.builders.ConnObjectTOListQueryBuilder;\n-import org.apache.syncope.client.lib.builders.TaskQueryBuilder;\n import org.apache.syncope.common.lib.search.AnyObjectFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.OrderByClauseBuilder;\n import org.apache.syncope.common.lib.search.GroupFiqlSearchConditionBuilder;\n@@ -113,56 +108,6 @@ public static OrderByClauseBuilder getOrderByClauseBuilder() {\n         return new OrderByClauseBuilder();\n     }\n \n-    /**\n-     * Returns a new instance of {@link TaskQueryBuilder}, for assisted building of some service's {@code list()}\n-     * arguments.\n-     *\n-     * @return default instance of {@link AnyQueryBuilder}\n-     */\n-    public static TaskQueryBuilder getTaskQueryBuilder() {\n-        return new TaskQueryBuilder();\n-    }\n-\n-    /**\n-     * Returns a new instance of {@link AnyQueryBuilder}, for assisted building of some service's {@code list()}\n-     * arguments.\n-     *\n-     * @return default instance of {@link AnyQueryBuilder}\n-     */\n-    public static AnyQueryBuilder getAnyQueryBuilder() {\n-        return new AnyQueryBuilder();\n-    }\n-\n-    /**\n-     * Returns a new instance of {@link AnyListQueryBuilder}, for assisted building of some service's {@code list()}\n-     * arguments.\n-     *\n-     * @return default instance of {@link AnyListQueryBuilder}\n-     */\n-    public static AnyListQueryBuilder getAnyListQueryBuilder() {\n-        return new AnyListQueryBuilder();\n-    }\n-\n-    /**\n-     * Returns a new instance of {@link AnySearchQueryBuilder}, for assisted building of some service's\n-     * {@code search()} arguments.\n-     *\n-     * @return default instance of {@link AnySearchQueryBuilder}\n-     */\n-    public static AnySearchQueryBuilder getAnySearchQueryBuilder() {\n-        return new AnySearchQueryBuilder();\n-    }\n-\n-    /**\n-     * Returns a new instance of {@link ConnObjectTOListQueryBuilder}, for assisted building of some service's\n-     * {@code list()} arguments.\n-     *\n-     * @return default instance of {@link ConnObjectTOListQueryBuilder}\n-     */\n-    public static ConnObjectTOListQueryBuilder getConnObjectTOListQueryBuilder() {\n-        return new ConnObjectTOListQueryBuilder();\n-    }\n-\n     /**\n      * Creates an instance of the given service class, with configured content type and authentication.\n      *\n@@ -196,7 +141,7 @@ public Pair<Map<String, Set<String>>, UserTO> self() {\n                     (Map<String, Set<String>>) new ObjectMapper().readValue(\n                             response.getHeaderString(RESTHeaders.OWNED_ENTITLEMENTS),\n                             new TypeReference<HashMap<String, Set<String>>>() {\n-                            }),\n+                    }),\n                     response.readEntity(UserTO.class));\n         } catch (IOException e) {\n             throw new IllegalStateException(e);"},{"sha":"4c615545daa08b7f6d408f75666a26914bb7dbde","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/builders/AbstractQueryBuilder.java","status":"removed","additions":0,"deletions":57,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ea34cd36a4943537abf65eee1a94ef3982679b5/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAbstractQueryBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ea34cd36a4943537abf65eee1a94ef3982679b5/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAbstractQueryBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAbstractQueryBuilder.java?ref=6ea34cd36a4943537abf65eee1a94ef3982679b5","patch":"@@ -1,57 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.lib.builders;\n-\n-import org.apache.syncope.common.rest.api.beans.AbstractQuery;\n-\n-public abstract class AbstractQueryBuilder<Q extends AbstractQuery, B extends AbstractQueryBuilder<Q, B>> {\n-\n-    private Q instance;\n-\n-    protected abstract Q newInstance();\n-\n-    protected Q getInstance() {\n-        if (instance == null) {\n-            instance = newInstance();\n-        }\n-        return instance;\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public B page(final Integer page) {\n-        getInstance().setPage(page);\n-        return (B) this;\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public B size(final Integer size) {\n-        getInstance().setSize(size);\n-        return (B) this;\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public B orderBy(final String orderBy) {\n-        getInstance().setOrderBy(orderBy);\n-        return (B) this;\n-    }\n-\n-    public Q build() {\n-        return getInstance();\n-    }\n-}"},{"sha":"da069cc63612b2bce6a048f042c3866251acabfb","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/builders/AnyListQueryBuilder.java","status":"removed","additions":0,"deletions":68,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ea34cd36a4943537abf65eee1a94ef3982679b5/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAnyListQueryBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ea34cd36a4943537abf65eee1a94ef3982679b5/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAnyListQueryBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAnyListQueryBuilder.java?ref=6ea34cd36a4943537abf65eee1a94ef3982679b5","patch":"@@ -1,68 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.lib.builders;\n-\n-import java.util.ArrayList;\n-import org.apache.syncope.common.rest.api.beans.AnyQuery;\n-import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n-\n-public class AnyListQueryBuilder extends AnyQueryBuilder {\n-\n-    private final AnyListQuery instance = new AnyListQuery();\n-\n-    @Override\n-    public AnyListQueryBuilder page(final Integer page) {\n-        return AnyListQueryBuilder.class.cast(super.page(page));\n-    }\n-\n-    @Override\n-    public AnyListQueryBuilder size(final Integer size) {\n-        return AnyListQueryBuilder.class.cast(super.size(size));\n-    }\n-\n-    @Override\n-    public AnyListQueryBuilder orderBy(final String orderBy) {\n-        return AnyListQueryBuilder.class.cast(super.orderBy(orderBy));\n-    }\n-\n-    @Override\n-    public AnyListQueryBuilder details(final boolean details) {\n-        return AnyListQueryBuilder.class.cast(super.details(details));\n-    }\n-\n-    public AnyListQueryBuilder realm(final String realm) {\n-        if (instance.getRealms() == null) {\n-            instance.setRealms(new ArrayList<String>());\n-        }\n-        instance.getRealms().add(realm);\n-\n-        return this;\n-    }\n-\n-    @Override\n-    public AnyListQuery build() {\n-        AnyQuery lq = super.build();\n-        instance.setPage(lq.getPage());\n-        instance.setSize(lq.getSize());\n-        instance.setOrderBy(lq.getOrderBy());\n-        instance.setDetails(lq.isDetails());\n-\n-        return instance;\n-    }\n-}"},{"sha":"5bffdcc6aab2ce538840b2e8aa81e6fc9ad40cc3","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/builders/AnySearchQueryBuilder.java","status":"removed","additions":0,"deletions":70,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ea34cd36a4943537abf65eee1a94ef3982679b5/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAnySearchQueryBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ea34cd36a4943537abf65eee1a94ef3982679b5/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAnySearchQueryBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAnySearchQueryBuilder.java?ref=6ea34cd36a4943537abf65eee1a94ef3982679b5","patch":"@@ -1,70 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.lib.builders;\n-\n-import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n-import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n-\n-public class AnySearchQueryBuilder extends AnyListQueryBuilder {\n-\n-    private final AnySearchQuery instance = new AnySearchQuery();\n-\n-    @Override\n-    public AnySearchQueryBuilder realm(final String realm) {\n-        return AnySearchQueryBuilder.class.cast(super.realm(realm));\n-    }\n-\n-    @Override\n-    public AnySearchQueryBuilder page(final Integer page) {\n-        return AnySearchQueryBuilder.class.cast(super.page(page));\n-    }\n-\n-    @Override\n-    public AnySearchQueryBuilder size(final Integer size) {\n-        return AnySearchQueryBuilder.class.cast(super.size(size));\n-    }\n-\n-    @Override\n-    public AnySearchQueryBuilder orderBy(final String orderBy) {\n-        return AnySearchQueryBuilder.class.cast(super.orderBy(orderBy));\n-    }\n-\n-    @Override\n-    public AnySearchQueryBuilder details(final boolean details) {\n-        return AnySearchQueryBuilder.class.cast(super.details(details));\n-    }\n-\n-    public AnySearchQueryBuilder fiql(final String fiql) {\n-        instance.setFiql(fiql);\n-\n-        return this;\n-    }\n-\n-    @Override\n-    public AnySearchQuery build() {\n-        AnyListQuery slq = super.build();\n-        instance.setRealms(slq.getRealms());\n-        instance.setPage(slq.getPage());\n-        instance.setSize(slq.getSize());\n-        instance.setOrderBy(slq.getOrderBy());\n-        instance.setDetails(slq.isDetails());\n-\n-        return instance;\n-    }\n-}"},{"sha":"c87b68cd996eae21d48eb46ea907a173367a036c","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/builders/TaskQueryBuilder.java","status":"removed","additions":0,"deletions":60,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ea34cd36a4943537abf65eee1a94ef3982679b5/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FTaskQueryBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ea34cd36a4943537abf65eee1a94ef3982679b5/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FTaskQueryBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FTaskQueryBuilder.java?ref=6ea34cd36a4943537abf65eee1a94ef3982679b5","patch":"@@ -1,60 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.lib.builders;\n-\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.rest.api.beans.TaskQuery;\n-\n-public class TaskQueryBuilder extends AbstractQueryBuilder<TaskQuery, TaskQueryBuilder> {\n-\n-    @Override\n-    protected TaskQuery newInstance() {\n-        return new TaskQuery();\n-    }\n-\n-    @Override\n-    public TaskQueryBuilder page(final Integer page) {\n-        return TaskQueryBuilder.class.cast(super.page(page));\n-    }\n-\n-    @Override\n-    public TaskQueryBuilder size(final Integer size) {\n-        return TaskQueryBuilder.class.cast(super.size(size));\n-    }\n-\n-    @Override\n-    public TaskQueryBuilder orderBy(final String orderBy) {\n-        return TaskQueryBuilder.class.cast(super.orderBy(orderBy));\n-    }\n-\n-    public TaskQueryBuilder resource(final String resource) {\n-        getInstance().setResource(resource);\n-        return this;\n-    }\n-\n-    public TaskQueryBuilder anyTypeKind(final AnyTypeKind anyTypeKind) {\n-        getInstance().setAnyTypeKind(anyTypeKind);\n-        return this;\n-    }\n-\n-    public TaskQueryBuilder anyTypeKey(final Long anyTypeKey) {\n-        getInstance().setAnyTypeKey(anyTypeKey);\n-        return this;\n-    }\n-}"},{"sha":"1a36c4f2f954f79c3968ffe89b490543f6b0c4df","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":13,"deletions":14,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -35,7 +35,6 @@\n import org.apache.syncope.common.lib.patch.RelationshipPatch;\n import org.apache.syncope.common.lib.patch.AbstractReplacePatchItem;\n import org.apache.syncope.common.lib.patch.BooleanReplacePatchItem;\n-import org.apache.syncope.common.lib.patch.LongPatchItem;\n import org.apache.syncope.common.lib.patch.LongReplacePatchItem;\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n@@ -110,14 +109,14 @@ private static void diff(\n             CollectionUtils.forAllDo(CollectionUtils.subtract(originalAttrs.keySet(), updatedAttrs.keySet()),\n                     new Closure<String>() {\n \n-                        @Override\n-                        public void execute(final String schema) {\n-                            result.getPlainAttrs().add(new AttrPatch.Builder().\n-                                    operation(PatchOperation.DELETE).\n-                                    attrTO(new AttrTO.Builder().schema(schema).build()).\n-                                    build());\n-                        }\n-                    });\n+                @Override\n+                public void execute(final String schema) {\n+                    result.getPlainAttrs().add(new AttrPatch.Builder().\n+                            operation(PatchOperation.DELETE).\n+                            attrTO(new AttrTO.Builder().schema(schema).build()).\n+                            build());\n+                }\n+            });\n         }\n \n         for (AttrTO attrTO : updatedAttrs.values()) {\n@@ -254,15 +253,15 @@ public static UserPatch diff(final UserTO updated, final UserTO original, final\n \n         // 4. roles\n         if (!incremental) {\n-            for (Long toRemove : CollectionUtils.subtract(original.getRoles(), updated.getRoles())) {\n+            for (String toRemove : CollectionUtils.subtract(original.getRoles(), updated.getRoles())) {\n                 result.getRoles().add(\n-                        new LongPatchItem.Builder().operation(PatchOperation.DELETE).value(toRemove).build());\n+                        new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(toRemove).build());\n             }\n         }\n \n-        for (Long toAdd : CollectionUtils.subtract(updated.getRoles(), original.getRoles())) {\n+        for (String toAdd : CollectionUtils.subtract(updated.getRoles(), original.getRoles())) {\n             result.getRoles().add(\n-                    new LongPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(toAdd).build());\n+                    new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(toAdd).build());\n         }\n \n         // 5. relationships\n@@ -522,7 +521,7 @@ public static UserTO patch(final UserTO userTO, final UserPatch userPatch) {\n         }\n \n         // 5. roles\n-        for (LongPatchItem rolePatch : userPatch.getRoles()) {\n+        for (StringPatchItem rolePatch : userPatch.getRoles()) {\n             switch (rolePatch.getOperation()) {\n                 case ADD_REPLACE:\n                     result.getRoles().add(rolePatch.getValue());"},{"sha":"3f4e9ebe99c94dca82df8f1bc60d39d9deadf420","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/UserPatch.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FUserPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FUserPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FUserPatch.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -46,7 +46,7 @@ public class UserPatch extends AnyPatch {\n \n     private final Set<MembershipPatch> memberships = new HashSet<>();\n \n-    private final Set<LongPatchItem> roles = new HashSet<>();\n+    private final Set<StringPatchItem> roles = new HashSet<>();\n \n     public StringReplacePatchItem getUsername() {\n         return username;\n@@ -105,7 +105,7 @@ public Set<MembershipPatch> getMemberships() {\n     @XmlElementWrapper(name = \"roles\")\n     @XmlElement(name = \"role\")\n     @JsonProperty(\"roles\")\n-    public Set<LongPatchItem> getRoles() {\n+    public Set<StringPatchItem> getRoles() {\n         return roles;\n     }\n "},{"sha":"323e38b1c97631ada8342121366ec752378bbf7e","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/UserFiqlSearchConditionBuilder.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserFiqlSearchConditionBuilder.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -50,7 +50,7 @@ public CompleteCondition inGroups(final Long group, final Long... moreGroups) {\n         return newBuilderInstance().is(SpecialAttr.GROUPS.toString()).inGroups(group, moreGroups);\n     }\n \n-    public CompleteCondition inRoles(final Long role, final Long... moreRoles) {\n+    public CompleteCondition inRoles(final String role, final String... moreRoles) {\n         return newBuilderInstance().is(SpecialAttr.ROLES.toString()).inRoles(role, moreRoles);\n     }\n \n@@ -99,13 +99,13 @@ public CompleteCondition notInGroups(final Long group, final Long... moreGroups)\n         }\n \n         @Override\n-        public CompleteCondition inRoles(final Long role, final Long... moreRoles) {\n+        public CompleteCondition inRoles(final String role, final String... moreRoles) {\n             this.result = SpecialAttr.ROLES.toString();\n             return condition(FiqlParser.EQ, role, (Object[]) moreRoles);\n         }\n \n         @Override\n-        public CompleteCondition notInRoles(final Long role, final Long... moreRoles) {\n+        public CompleteCondition notInRoles(final String role, final String... moreRoles) {\n             this.result = SpecialAttr.ROLES.toString();\n             return condition(FiqlParser.NEQ, role, (Object[]) moreRoles);\n         }"},{"sha":"210274c8ca121897f1f311cc6d94fd9a2940e278","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/UserProperty.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserProperty.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -26,8 +26,8 @@ public interface UserProperty extends SyncopeProperty {\n \n     CompleteCondition notInGroups(Long group, Long... moreGroups);\n \n-    CompleteCondition inRoles(Long role, Long... moreRoles);\n+    CompleteCondition inRoles(String role, String... moreRoles);\n \n-    CompleteCondition notInRoles(Long role, Long... moreRoles);\n+    CompleteCondition notInRoles(String role, String... moreRoles);\n \n }"},{"sha":"7160fdcd3f63e194231481f11f9b7dc9cca879ab","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RoleTO.java","status":"modified","additions":3,"deletions":13,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -36,33 +36,23 @@ public class RoleTO extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 4560822655754800031L;\n \n-    private long key;\n-\n-    private String name;\n+    private String key;\n \n     private final Set<String> entitlements = new HashSet<>();\n \n     private final List<String> realms = new ArrayList<>();\n \n     private String dynMembershipCond;\n \n-    public long getKey() {\n+    public String getKey() {\n         return key;\n     }\n \n     @PathParam(\"key\")\n-    public void setKey(final long key) {\n+    public void setKey(final String key) {\n         this.key = key;\n     }\n \n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(final String name) {\n-        this.name = name;\n-    }\n-\n     @XmlElementWrapper(name = \"entitlements\")\n     @XmlElement(name = \"entitlement\")\n     @JsonProperty(\"entitlements\")"},{"sha":"e18d8bcb9187fe10e64a574a738bc02995cb46c1","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -43,9 +43,9 @@ public class UserTO extends AnyTO {\n \n     private String password;\n \n-    private final List<Long> roles = new ArrayList<>();\n+    private final List<String> roles = new ArrayList<>();\n \n-    private final List<Long> dynRoles = new ArrayList<>();\n+    private final List<String> dynRoles = new ArrayList<>();\n \n     private String token;\n \n@@ -92,14 +92,14 @@ public void setPassword(final String password) {\n     @XmlElementWrapper(name = \"roles\")\n     @XmlElement(name = \"role\")\n     @JsonProperty(\"roles\")\n-    public List<Long> getRoles() {\n+    public List<String> getRoles() {\n         return roles;\n     }\n \n     @XmlElementWrapper(name = \"dynRoles\")\n     @XmlElement(name = \"role\")\n     @JsonProperty(\"dynRoles\")\n-    public List<Long> getDynRoles() {\n+    public List<String> getDynRoles() {\n         return dynRoles;\n     }\n "},{"sha":"4eeaf8ff52e9e7f87e710da4d5b591b544e1bac3","filename":"common/lib/src/test/java/org/apache/syncope/common/lib/JSONTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -25,7 +25,7 @@\n import java.io.IOException;\n import java.io.StringWriter;\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.LongPatchItem;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n@@ -79,7 +79,7 @@ public void patch() throws IOException {\n                 value(\"newpassword\").\n                 build());\n         assertNotNull(patch.getPassword().getValue());\n-        patch.getRoles().add(new LongPatchItem.Builder().operation(PatchOperation.DELETE).value(7L).build());\n+        patch.getRoles().add(new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(\"role\").build());\n \n         ObjectMapper mapper = new ObjectMapper();\n "},{"sha":"eb37f52d64c4d25887df0e470028e95b8152aab0","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AbstractQuery.java","status":"modified","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractQuery.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -28,6 +28,42 @@ public abstract class AbstractQuery extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -371488230250055359L;\n \n+    protected abstract static class Builder<Q extends AbstractQuery, B extends Builder<Q, B>> {\n+\n+        private Q instance;\n+\n+        protected abstract Q newInstance();\n+\n+        protected Q getInstance() {\n+            if (instance == null) {\n+                instance = newInstance();\n+            }\n+            return instance;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B page(final Integer page) {\n+            getInstance().setPage(page);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B size(final Integer size) {\n+            getInstance().setSize(size);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B orderBy(final String orderBy) {\n+            getInstance().setOrderBy(orderBy);\n+            return (B) this;\n+        }\n+\n+        public Q build() {\n+            return getInstance();\n+        }\n+    }\n+\n     private Integer page;\n \n     private Integer size;"},{"sha":"a763c211a2c77fb02f66391a475cad08072e47d9","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AnyListQuery.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyListQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyListQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyListQuery.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.common.rest.api.beans;\n \n+import java.util.ArrayList;\n import java.util.List;\n import javax.ws.rs.DefaultValue;\n import javax.ws.rs.MatrixParam;\n@@ -27,6 +28,28 @@ public class AnyListQuery extends AnyQuery {\n \n     private static final long serialVersionUID = -5197167078435619636L;\n \n+    public static class Builder extends AbstractQuery.Builder<AnyListQuery, Builder> {\n+\n+        @Override\n+        protected AnyListQuery newInstance() {\n+            return new AnyListQuery();\n+        }\n+\n+        public Builder details(final boolean details) {\n+            getInstance().setDetails(details);\n+            return this;\n+        }\n+\n+        public Builder realm(final String realm) {\n+            if (getInstance().getRealms() == null) {\n+                getInstance().setRealms(new ArrayList<String>());\n+            }\n+            getInstance().getRealms().add(realm);\n+\n+            return this;\n+        }\n+    }\n+\n     private List<String> realms;\n \n     public List<String> getRealms() {"},{"sha":"d369ee22fbbf1717f614cb213953fe4a76c3eaa6","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AnyQuery.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -26,6 +26,20 @@ public class AnyQuery extends AbstractQuery {\n \n     private static final long serialVersionUID = -371488230250055359L;\n \n+    public static class Builder extends AbstractQuery.Builder<AnyQuery, Builder> {\n+\n+        @Override\n+        protected AnyQuery newInstance() {\n+            return new AnyQuery();\n+        }\n+\n+        public Builder details(final boolean details) {\n+            getInstance().setDetails(details);\n+            return this;\n+        }\n+\n+    }\n+\n     private Boolean details;\n \n     public boolean isDetails() {"},{"sha":"dca93cf0eec28a8864b6f37fb7582977517ed914","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AnySearchQuery.java","status":"modified","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnySearchQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnySearchQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnySearchQuery.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -18,13 +18,42 @@\n  */\n package org.apache.syncope.common.rest.api.beans;\n \n+import java.util.ArrayList;\n import javax.ws.rs.QueryParam;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n public class AnySearchQuery extends AnyListQuery {\n \n     private static final long serialVersionUID = -6736562952418964707L;\n \n+    public static class Builder extends AbstractQuery.Builder<AnySearchQuery, Builder> {\n+\n+        @Override\n+        protected AnySearchQuery newInstance() {\n+            return new AnySearchQuery();\n+        }\n+\n+        public Builder details(final boolean details) {\n+            getInstance().setDetails(details);\n+            return this;\n+        }\n+\n+        public Builder realm(final String realm) {\n+            if (getInstance().getRealms() == null) {\n+                getInstance().setRealms(new ArrayList<String>());\n+            }\n+            getInstance().getRealms().add(realm);\n+\n+            return this;\n+        }\n+\n+        public Builder fiql(final String fiql) {\n+            getInstance().setFiql(fiql);\n+\n+            return this;\n+        }\n+    }\n+\n     private String fiql;\n \n     public String getFiql() {"},{"sha":"53df9fb8644cb40a411116b8c19c1b24180f7d7d","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ConnObjectTOListQuery.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FConnObjectTOListQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FConnObjectTOListQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FConnObjectTOListQuery.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -32,6 +32,31 @@ public class ConnObjectTOListQuery implements Serializable {\n \n     private static final long serialVersionUID = -371488230250055359L;\n \n+    public static class Builder {\n+\n+        private final ConnObjectTOListQuery instance = new ConnObjectTOListQuery();\n+\n+        public Builder size(final Integer size) {\n+            instance.setSize(size);\n+            return this;\n+        }\n+\n+        public Builder pagedResultsCookie(final String pagedResultsCookie) {\n+            instance.setPagedResultsCookie(pagedResultsCookie);\n+            return this;\n+        }\n+\n+        public Builder orderBy(final String orderBy) {\n+            instance.setOrderBy(orderBy);\n+            return this;\n+        }\n+\n+        public ConnObjectTOListQuery build() {\n+            return instance;\n+        }\n+\n+    }\n+\n     private Integer size;\n \n     private String pagedResultsCookie;"},{"sha":"a96b09f3ff86d2a9ea04a304569879e564413de9","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/SchemaQuery.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.beans;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import javax.ws.rs.QueryParam;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+public class SchemaQuery extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -1863334226169614417L;\n+\n+    public static class Builder {\n+\n+        private final SchemaQuery instance = new SchemaQuery();\n+\n+        public Builder anyTypeClass(final String anyTypeClass) {\n+            if (instance.getAnyTypeClasses() == null) {\n+                instance.setAnyTypeClasses(new ArrayList<String>());\n+            }\n+            instance.getAnyTypeClasses().add(anyTypeClass);\n+\n+            return this;\n+        }\n+\n+        public Builder anyTypeClasses(final Collection<String> anyTypeClasses) {\n+            for (String anyTypeClass : anyTypeClasses) {\n+                anyTypeClass(anyTypeClass);\n+            }\n+            return this;\n+        }\n+\n+        public Builder anyTypeClasses(final String... anyTypeClasses) {\n+            return anyTypeClasses(Arrays.asList(anyTypeClasses));\n+        }\n+\n+        public SchemaQuery build() {\n+            return instance;\n+        }\n+    }\n+\n+    private List<String> anyTypeClasses;\n+\n+    public List<String> getAnyTypeClasses() {\n+        return anyTypeClasses;\n+    }\n+\n+    @QueryParam(\"anyTypeClass\")\n+    public void setAnyTypeClasses(final List<String> anyTypeClasses) {\n+        this.anyTypeClasses = anyTypeClasses;\n+    }\n+\n+}"},{"sha":"8fe942f03e1c940a2015d6c159ce5d2413e1482d","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/TaskQuery.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -27,6 +27,30 @@ public class TaskQuery extends AbstractQuery {\n \n     private static final long serialVersionUID = -8792519310029596796L;\n \n+    public static class Builder extends AbstractQuery.Builder<TaskQuery, Builder> {\n+\n+        @Override\n+        protected TaskQuery newInstance() {\n+            return new TaskQuery();\n+        }\n+\n+        public Builder resource(final String resource) {\n+            getInstance().setResource(resource);\n+            return this;\n+        }\n+\n+        public Builder anyTypeKind(final AnyTypeKind anyTypeKind) {\n+            getInstance().setAnyTypeKind(anyTypeKind);\n+            return this;\n+        }\n+\n+        public Builder anyTypeKey(final Long anyTypeKey) {\n+            getInstance().setAnyTypeKey(anyTypeKey);\n+            return this;\n+        }\n+\n+    }\n+\n     private String resource;\n \n     private AnyTypeKind anyTypeKind;"},{"sha":"8a9082bd68c0faec414d4a71db1420aecd57347f","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -56,7 +56,7 @@ public interface RoleService extends JAXRSService {\n     @GET\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    RoleTO read(@NotNull @PathParam(\"key\") Long key);\n+    RoleTO read(@NotNull @PathParam(\"key\") String key);\n \n     /**\n      * Creates a new role.\n@@ -85,5 +85,5 @@ public interface RoleService extends JAXRSService {\n      */\n     @DELETE\n     @Path(\"{key}\")\n-    void delete(@NotNull @PathParam(\"key\") Long key);\n+    void delete(@NotNull @PathParam(\"key\") String key);\n }"},{"sha":"9049f927ba2c25d6c8edb51b59bf6d8d40c3966a","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import javax.validation.constraints.NotNull;\n+import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n@@ -28,11 +29,11 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n \n /**\n  * REST operations for attribute schemas.\n@@ -55,17 +56,18 @@ <T extends AbstractSchemaTO> T read(\n             @NotNull @PathParam(\"type\") SchemaType type, @NotNull @PathParam(\"key\") String key);\n \n     /**\n-     * Returns a list of schemas with matching type, for the given anyTypeClass if provided.\n+     * Returns a list of schemas matching type and the given query.\n      *\n      * @param <T> actual SchemaTO\n      * @param type type for schemas to be listed\n-     * @param anyTypeClass any type class name\n+     * @param query query conditions\n      * @return list of schemas with matching type, for the given anyTypeClass if provided\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractSchemaTO> List<T> list(@NotNull @PathParam(\"type\") SchemaType type, \n-            @QueryParam(\"anyType\") String anyTypeClass);\n+    <T extends AbstractSchemaTO> List<T> list(\n+            @NotNull @PathParam(\"type\") SchemaType type,\n+            @BeanParam SchemaQuery query);\n \n     /**\n      * Creates a new schema."},{"sha":"daaaf56bfca7c314e03c3a85e2244dcd73f82706","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeClassLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -50,7 +50,7 @@ public AnyTypeClassTO read(final String key) {\n         if (anyType == null) {\n             LOG.error(\"Could not find anyType '\" + key + \"'\");\n \n-            throw new NotFoundException(String.valueOf(key));\n+            throw new NotFoundException(key);\n         }\n \n         return binder.getAnyTypeClassTO(anyType);\n@@ -77,7 +77,7 @@ public AnyTypeClassTO update(final AnyTypeClassTO anyTypeClassTO) {\n         AnyTypeClass anyType = anyTypeClassDAO.find(anyTypeClassTO.getKey());\n         if (anyType == null) {\n             LOG.error(\"Could not find anyTypeClass '\" + anyTypeClassTO.getKey() + \"'\");\n-            throw new NotFoundException(String.valueOf(anyTypeClassTO.getKey()));\n+            throw new NotFoundException(anyTypeClassTO.getKey());\n         }\n \n         binder.update(anyType, anyTypeClassTO);\n@@ -92,7 +92,7 @@ public AnyTypeClassTO delete(final String key) {\n         if (anyTypeClass == null) {\n             LOG.error(\"Could not find anyTypeClass '\" + key + \"'\");\n \n-            throw new NotFoundException(String.valueOf(key));\n+            throw new NotFoundException(key);\n         }\n \n         AnyTypeClassTO deleted = binder.getAnyTypeClassTO(anyTypeClass);"},{"sha":"3116ae8095e75df3e5d51294938c01a227939307","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -53,7 +53,7 @@ public AnyTypeTO read(final String key) {\n         if (anyType == null) {\n             LOG.error(\"Could not find anyType '\" + key + \"'\");\n \n-            throw new NotFoundException(String.valueOf(key));\n+            throw new NotFoundException(key);\n         }\n \n         return binder.getAnyTypeTO(anyType);\n@@ -82,7 +82,7 @@ public AnyTypeTO update(final AnyTypeTO anyTypeTO) {\n         AnyType anyType = anyTypeDAO.find(anyTypeTO.getKey());\n         if (anyType == null) {\n             LOG.error(\"Could not find anyType '\" + anyTypeTO.getKey() + \"'\");\n-            throw new NotFoundException(String.valueOf(anyTypeTO.getKey()));\n+            throw new NotFoundException(anyTypeTO.getKey());\n         }\n \n         EntitlementsHolder.getInstance().removeFor(anyTypeTO.getKey());\n@@ -101,7 +101,7 @@ public AnyTypeTO delete(final String key) {\n         if (anyType == null) {\n             LOG.error(\"Could not find anyType '\" + key + \"'\");\n \n-            throw new NotFoundException(String.valueOf(key));\n+            throw new NotFoundException(key);\n         }\n \n         AnyTypeTO deleted = binder.getAnyTypeTO(anyType);"},{"sha":"cfefdd079bb83269c612414c3f64d38a599314d5","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/DomainLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -55,7 +55,7 @@ public DomainTO read(final String key) {\n         if (domain == null) {\n             LOG.error(\"Could not find domain '\" + key + \"'\");\n \n-            throw new NotFoundException(String.valueOf(key));\n+            throw new NotFoundException(key);\n         }\n \n         return binder.getDomainTO(domain);\n@@ -88,7 +88,7 @@ public DomainTO update(final DomainTO domainTO) {\n         Domain domain = domainDAO.find(domainTO.getKey());\n         if (domain == null) {\n             LOG.error(\"Could not find domain '\" + domainTO.getKey() + \"'\");\n-            throw new NotFoundException(String.valueOf(domainTO.getKey()));\n+            throw new NotFoundException(domainTO.getKey());\n         }\n \n         binder.update(domain, domainTO);\n@@ -104,7 +104,7 @@ public DomainTO delete(final String key) {\n         if (domain == null) {\n             LOG.error(\"Could not find domain '\" + key + \"'\");\n \n-            throw new NotFoundException(String.valueOf(key));\n+            throw new NotFoundException(key);\n         }\n \n         DomainTO deleted = binder.getDomainTO(domain);"},{"sha":"da2c13ed3a180c15a49be10a535504ee7509fcea","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/NotificationLogic.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -44,12 +44,12 @@ public class NotificationLogic extends AbstractTransactionalLogic<NotificationTO\n     private NotificationDataBinder binder;\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.NOTIFICATION_READ + \"')\")\n-    public NotificationTO read(final Long notificationKey) {\n-        Notification notification = notificationDAO.find(notificationKey);\n+    public NotificationTO read(final Long key) {\n+        Notification notification = notificationDAO.find(key);\n         if (notification == null) {\n-            LOG.error(\"Could not find notification '\" + notificationKey + \"'\");\n+            LOG.error(\"Could not find notification '\" + key + \"'\");\n \n-            throw new NotFoundException(String.valueOf(notificationKey));\n+            throw new NotFoundException(String.valueOf(key));\n         }\n \n         return binder.getNotificationTO(notification);\n@@ -86,16 +86,16 @@ public NotificationTO update(final NotificationTO notificationTO) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.NOTIFICATION_DELETE + \"')\")\n-    public NotificationTO delete(final Long notificationKey) {\n-        Notification notification = notificationDAO.find(notificationKey);\n+    public NotificationTO delete(final Long key) {\n+        Notification notification = notificationDAO.find(key);\n         if (notification == null) {\n-            LOG.error(\"Could not find notification '\" + notificationKey + \"'\");\n+            LOG.error(\"Could not find notification '\" + key + \"'\");\n \n-            throw new NotFoundException(String.valueOf(notificationKey));\n+            throw new NotFoundException(String.valueOf(key));\n         }\n \n         NotificationTO deleted = binder.getNotificationTO(notification);\n-        notificationDAO.delete(notificationKey);\n+        notificationDAO.delete(key);\n         return deleted;\n     }\n "},{"sha":"6d96e8ba3a1a201f040024e688f71d5501831965","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RelationshipTypeLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRelationshipTypeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRelationshipTypeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRelationshipTypeLogic.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -50,7 +50,7 @@ public RelationshipTypeTO read(final String key) {\n         if (relationshipType == null) {\n             LOG.error(\"Could not find relationshipType '\" + key + \"'\");\n \n-            throw new NotFoundException(String.valueOf(key));\n+            throw new NotFoundException(key);\n         }\n \n         return binder.getRelationshipTypeTO(relationshipType);\n@@ -78,7 +78,7 @@ public RelationshipTypeTO update(final RelationshipTypeTO relationshipTypeTO) {\n         RelationshipType relationshipType = relationshipTypeDAO.find(relationshipTypeTO.getKey());\n         if (relationshipType == null) {\n             LOG.error(\"Could not find relationshipType '\" + relationshipTypeTO.getKey() + \"'\");\n-            throw new NotFoundException(String.valueOf(relationshipTypeTO.getKey()));\n+            throw new NotFoundException(relationshipTypeTO.getKey());\n         }\n \n         binder.update(relationshipType, relationshipTypeTO);\n@@ -93,7 +93,7 @@ public RelationshipTypeTO delete(final String key) {\n         if (relationshipType == null) {\n             LOG.error(\"Could not find relationshipType '\" + key + \"'\");\n \n-            throw new NotFoundException(String.valueOf(key));\n+            throw new NotFoundException(key);\n         }\n \n         RelationshipTypeTO deleted = binder.getRelationshipTypeTO(relationshipType);"},{"sha":"92cb880c12769a2a247ef91211b04bf4584f603a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RoleLogic.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -44,12 +44,12 @@ public class RoleLogic extends AbstractTransactionalLogic<RoleTO> {\n     private RoleDAO roleDAO;\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ROLE_READ + \"')\")\n-    public RoleTO read(final Long roleKey) {\n-        Role role = roleDAO.find(roleKey);\n+    public RoleTO read(final String key) {\n+        Role role = roleDAO.find(key);\n         if (role == null) {\n-            LOG.error(\"Could not find role '\" + roleKey + \"'\");\n+            LOG.error(\"Could not find role '\" + key + \"'\");\n \n-            throw new NotFoundException(String.valueOf(roleKey));\n+            throw new NotFoundException(key);\n         }\n \n         return binder.getRoleTO(role);\n@@ -76,7 +76,7 @@ public RoleTO update(final RoleTO roleTO) {\n         Role role = roleDAO.find(roleTO.getKey());\n         if (role == null) {\n             LOG.error(\"Could not find role '\" + roleTO.getKey() + \"'\");\n-            throw new NotFoundException(String.valueOf(roleTO.getKey()));\n+            throw new NotFoundException(roleTO.getKey());\n         }\n \n         binder.update(role, roleTO);\n@@ -86,29 +86,29 @@ public RoleTO update(final RoleTO roleTO) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ROLE_DELETE + \"')\")\n-    public RoleTO delete(final Long roleKey) {\n-        Role role = roleDAO.find(roleKey);\n+    public RoleTO delete(final String key) {\n+        Role role = roleDAO.find(key);\n         if (role == null) {\n-            LOG.error(\"Could not find role '\" + roleKey + \"'\");\n+            LOG.error(\"Could not find role '\" + key + \"'\");\n \n-            throw new NotFoundException(String.valueOf(roleKey));\n+            throw new NotFoundException(key);\n         }\n \n         RoleTO deleted = binder.getRoleTO(role);\n-        roleDAO.delete(roleKey);\n+        roleDAO.delete(key);\n         return deleted;\n     }\n \n     @Override\n     protected RoleTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {\n \n-        Long key = null;\n+        String key = null;\n \n         if (ArrayUtils.isNotEmpty(args)) {\n             for (int i = 0; key == null && i < args.length; i++) {\n-                if (args[i] instanceof Long) {\n-                    key = (Long) args[i];\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n                 } else if (args[i] instanceof RoleTO) {\n                     key = ((RoleTO) args[i]).getKey();\n                 }"},{"sha":"1e94c966e2be7e8e5f9ce197a517af41afa6e319","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java","status":"modified","additions":18,"deletions":5,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -145,13 +145,26 @@ public void delete(final SchemaType schemaType, final String schemaName) {\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @SuppressWarnings(\"unchecked\")\n-    public <T extends AbstractSchemaTO> List<T> list(final SchemaType schemaType, final String anyTypeClass) {\n-        AnyTypeClass clazz = anyTypeClass == null ? null : anyTypeClassDAO.find(anyTypeClass);\n+    public <T extends AbstractSchemaTO> List<T> list(\n+            final SchemaType schemaType, final List<String> anyTypeClasses) {\n+\n+        List<AnyTypeClass> classes = new ArrayList<>(anyTypeClasses == null ? 0 : anyTypeClasses.size());\n+        if (anyTypeClasses != null) {\n+            for (String anyTypeClass : anyTypeClasses) {\n+                AnyTypeClass clazz = anyTypeClassDAO.find(anyTypeClass);\n+                if (clazz == null) {\n+                    LOG.warn(\"Ignoring invalid {}: {}\", AnyTypeClass.class.getSimpleName(), anyTypeClass);\n+                } else {\n+                    classes.add(clazz);\n+                }\n+            }\n+        }\n+\n         List<T> result;\n         switch (schemaType) {\n             case VIRTUAL:\n                 result = CollectionUtils.collect(\n-                        clazz == null ? virSchemaDAO.findAll() : virSchemaDAO.findByAnyTypeClass(clazz),\n+                        classes.isEmpty() ? virSchemaDAO.findAll() : virSchemaDAO.findByAnyTypeClasses(classes),\n                         new Transformer<VirSchema, T>() {\n \n                     @Override\n@@ -163,7 +176,7 @@ public T transform(final VirSchema input) {\n \n             case DERIVED:\n                 result = CollectionUtils.collect(\n-                        clazz == null ? derSchemaDAO.findAll() : derSchemaDAO.findByAnyTypeClass(clazz),\n+                        classes.isEmpty() ? derSchemaDAO.findAll() : derSchemaDAO.findByAnyTypeClasses(classes),\n                         new Transformer<DerSchema, T>() {\n \n                     @Override\n@@ -176,7 +189,7 @@ public T transform(final DerSchema input) {\n             case PLAIN:\n             default:\n                 result = CollectionUtils.collect(\n-                        clazz == null ? plainSchemaDAO.findAll() : plainSchemaDAO.findByAnyTypeClass(clazz),\n+                        classes.isEmpty() ? plainSchemaDAO.findAll() : plainSchemaDAO.findByAnyTypeClasses(classes),\n                         new Transformer<PlainSchema, T>() {\n \n                     @Override"},{"sha":"6b067ca984128f9edb50617c2c2aefea417b286a","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/search/SearchCondVisitor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondVisitor.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -113,7 +113,7 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n \n                         case ROLES:\n                             RoleCond roleCond = new RoleCond();\n-                            roleCond.setRoleKey(Long.valueOf(value));\n+                            roleCond.setRoleKey(value);\n                             leaf = SearchCond.getLeafCond(roleCond);\n                             break;\n "},{"sha":"afca81adfe852d8f46681678da331f38d41c38ea","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/AuthDataAccessor.java","status":"modified","additions":24,"deletions":11,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.core.misc.security;\n \n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Date;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n-import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import javax.annotation.Resource;\n import org.apache.commons.collections4.Closure;\n@@ -260,25 +260,28 @@ public SyncopeGrantedAuthority transform(final String entitlement) {\n             if (user.isMustChangePassword()) {\n                 authorities.add(new SyncopeGrantedAuthority(StandardEntitlement.MUST_CHANGE_PASSWORD));\n             } else {\n+                final Map<String, Set<String>> entForRealms = new HashMap<>();\n+\n                 // Give entitlements as assigned by roles (with realms, where applicable) - assigned either\n                 // statically and dynamically\n                 for (final Role role : userDAO.findAllRoles(user)) {\n                     CollectionUtils.forAllDo(role.getEntitlements(), new Closure<String>() {\n \n                         @Override\n                         public void execute(final String entitlement) {\n-                            SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entitlement);\n-                            authorities.add(authority);\n+                            Set<String> realms = entForRealms.get(entitlement);\n+                            if (realms == null) {\n+                                realms = new HashSet<>();\n+                                entForRealms.put(entitlement, realms);\n+                            }\n \n-                            List<String> realmFullPahs = new ArrayList<>();\n                             CollectionUtils.collect(role.getRealms(), new Transformer<Realm, String>() {\n \n                                 @Override\n                                 public String transform(final Realm realm) {\n                                     return realm.getFullPath();\n                                 }\n-                            }, realmFullPahs);\n-                            authority.addRealms(realmFullPahs);\n+                            }, realms);\n                         }\n                     });\n                 }\n@@ -290,12 +293,22 @@ public String transform(final Realm realm) {\n                             StandardEntitlement.GROUP_UPDATE,\n                             StandardEntitlement.GROUP_DELETE)) {\n \n-                        SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entitlement);\n-                        authority.addRealm(\n-                                RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey()));\n-                        authorities.add(authority);\n+                        Set<String> realms = entForRealms.get(entitlement);\n+                        if (realms == null) {\n+                            realms = new HashSet<>();\n+                            entForRealms.put(entitlement, realms);\n+                        }\n+\n+                        realms.add(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey()));\n                     }\n                 }\n+\n+                // Finally normalize realms for each given entitlement and generate authorities\n+                for (Map.Entry<String, Set<String>> entry : entForRealms.entrySet()) {\n+                    SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entry.getKey());\n+                    authority.addRealms(RealmUtils.normalize(entry.getValue()));\n+                    authorities.add(authority);\n+                }\n             }\n         }\n "},{"sha":"1cdae179a76fa6e0a65defc2c7a6245bbf3b3f5e","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeGrantedAuthority.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeGrantedAuthority.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeGrantedAuthority.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeGrantedAuthority.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.core.misc.security;\n \n+import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n-import java.util.List;\n import java.util.Set;\n import org.apache.commons.collections4.Closure;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -53,7 +53,7 @@ public boolean addRealm(final String newRealm) {\n         return RealmUtils.normalizingAddTo(realms, newRealm);\n     }\n \n-    public void addRealms(final List<String> newRealms) {\n+    public void addRealms(final Collection<String> newRealms) {\n         CollectionUtils.forAllDo(newRealms, new Closure<String>() {\n \n             @Override"},{"sha":"29f3c64c738c892f349212a3b797ed4b3373fd50","filename":"core/misc/src/test/java/org/apache/syncope/core/misc/search/SearchCondConverterTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverterTest.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -98,11 +98,11 @@ public void groups() {\n \n     @Test\n     public void roles() {\n-        String fiqlExpression = new UserFiqlSearchConditionBuilder().inRoles(1L).query();\n-        assertEquals(SpecialAttr.ROLES + \"==1\", fiqlExpression);\n+        String fiqlExpression = new UserFiqlSearchConditionBuilder().inRoles(\"User reviewer\").query();\n+        assertEquals(SpecialAttr.ROLES + \"==User reviewer\", fiqlExpression);\n \n         RoleCond roleCond = new RoleCond();\n-        roleCond.setRoleKey(1L);\n+        roleCond.setRoleKey(\"User reviewer\");\n         SearchCond simpleCond = SearchCond.getLeafCond(roleCond);\n \n         assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));"},{"sha":"d838df7b1f34e7f2d8ed621683ee7826566b8e58","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RoleDAO.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -23,11 +23,9 @@\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n \n-public interface RoleDAO extends DAO<Role, Long> {\n+public interface RoleDAO extends DAO<Role, String> {\n \n-    Role find(Long key);\n-\n-    Role find(String name);\n+    Role find(String key);\n \n     List<Role> findByRealm(Realm realm);\n \n@@ -37,7 +35,7 @@ public interface RoleDAO extends DAO<Role, Long> {\n \n     void delete(Role role);\n \n-    void delete(Long key);\n+    void delete(String key);\n \n     void refreshDynMemberships(User user);\n }"},{"sha":"64a78fb7893ce309169592414fbc387c1a806a84","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/SchemaDAO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSchemaDAO.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n+import java.util.Collection;\n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n@@ -26,7 +27,7 @@\n \n     S find(String name);\n \n-    List<S> findByAnyTypeClass(AnyTypeClass anyTypeClass);\n+    List<S> findByAnyTypeClasses(Collection<AnyTypeClass> anyTypeClasses);\n \n     List<S> findAll();\n "},{"sha":"0ee76481471c564217b73cc2b4bae78681bdefbf","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RoleCond.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRoleCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRoleCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRoleCond.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -22,13 +22,13 @@ public class RoleCond extends AbstractSearchCond {\n \n     private static final long serialVersionUID = 3581958527829522490L;\n \n-    private Long roleKey;\n+    private String roleKey;\n \n-    public Long getRoleKey() {\n+    public String getRoleKey() {\n         return roleKey;\n     }\n \n-    public void setRoleKey(final Long roleKey) {\n+    public void setRoleKey(final String roleKey) {\n         this.roleKey = roleKey;\n     }\n "},{"sha":"c26c15b2a62394d3ae05aa0c4ae9040449f8ceea","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Role.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -22,11 +22,9 @@\n import java.util.List;\n import java.util.Set;\n \n-public interface Role extends Entity<Long> {\n+public interface Role extends Entity<String> {\n \n-    String getName();\n-\n-    void setName(String name);\n+    void setKey(String name);\n \n     Set<String> getEntitlements();\n "},{"sha":"f5c3922fc30e569d070d418235e375bfe50b61d3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":13,"deletions":17,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -399,10 +399,8 @@ private <T extends Any<?>> List<T> doSearch(final Set<String> adminRealms,\n             if (any == null) {\n                 LOG.error(\"Could not find {} with id {}, even though returned by the native query\",\n                         typeKind, actualKey);\n-            } else {\n-                if (!result.contains(any)) {\n-                    result.add(any);\n-                }\n+            } else if (!result.contains(any)) {\n+                result.add(any);\n             }\n         }\n \n@@ -554,7 +552,7 @@ private String getQuery(final RoleCond cond, final boolean not, final List<Objec\n \n         query.append(\"SELECT DISTINCT any_id \").append(\"FROM \").\n                 append(svs.role().name).append(\" WHERE \").\n-                append(\"role_id=?\").append(setParameter(parameters, cond.getRoleKey())).\n+                append(\"role_name=?\").append(setParameter(parameters, cond.getRoleKey())).\n                 append(')');\n \n         if (not) {\n@@ -565,7 +563,7 @@ private String getQuery(final RoleCond cond, final boolean not, final List<Objec\n \n         query.append(\"SELECT DISTINCT any_id \").append(\"FROM \").\n                 append(svs.dynrolemembership().name).append(\" WHERE \").\n-                append(\"role_id=?\").append(setParameter(parameters, cond.getRoleKey())).\n+                append(\"role_name=?\").append(setParameter(parameters, cond.getRoleKey())).\n                 append(')');\n \n         return query.toString();\n@@ -721,20 +719,18 @@ private String getQuery(final AttributeCond cond, final boolean not, final List<\n                     append(\" WHERE any_id NOT IN (SELECT any_id FROM \").\n                     append(svs.nullAttr().name).\n                     append(\" WHERE schema_name='\").append(schema.getKey()).append(\"')\");\n+        } else if (cond.getType() == AttributeCond.Type.ISNULL) {\n+            query.append(svs.nullAttr().name).\n+                    append(\" WHERE schema_name='\").append(schema.getKey()).append(\"'\");\n         } else {\n-            if (cond.getType() == AttributeCond.Type.ISNULL) {\n-                query.append(svs.nullAttr().name).\n-                        append(\" WHERE schema_name='\").append(schema.getKey()).append(\"'\");\n+            if (schema.isUniqueConstraint()) {\n+                query.append(svs.uniqueAttr().name);\n             } else {\n-                if (schema.isUniqueConstraint()) {\n-                    query.append(svs.uniqueAttr().name);\n-                } else {\n-                    query.append(svs.attr().name);\n-                }\n-                query.append(\" WHERE schema_name='\").append(schema.getKey());\n-\n-                fillAttributeQuery(query, attrValue, schema, cond, not, parameters, svs);\n+                query.append(svs.attr().name);\n             }\n+            query.append(\" WHERE schema_name='\").append(schema.getKey());\n+\n+            fillAttributeQuery(query, attrValue, schema, cond, not, parameters, svs);\n         }\n \n         return query.toString();"},{"sha":"a999e14fb13f0b7730221290d024df0a2120d847","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeClassDAO.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.util.Collections;\n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n@@ -85,13 +86,13 @@ public void delete(final String key) {\n             return;\n         }\n \n-        for (PlainSchema schema : plainSchemaDAO.findByAnyTypeClass(anyTypeClass)) {\n+        for (PlainSchema schema : plainSchemaDAO.findByAnyTypeClasses(Collections.singletonList(anyTypeClass))) {\n             schema.setAnyTypeClass(null);\n         }\n-        for (DerSchema schema : derSchemaDAO.findByAnyTypeClass(anyTypeClass)) {\n+        for (DerSchema schema : derSchemaDAO.findByAnyTypeClasses(Collections.singletonList(anyTypeClass))) {\n             schema.setAnyTypeClass(null);\n         }\n-        for (VirSchema schema : virSchemaDAO.findByAnyTypeClass(anyTypeClass)) {\n+        for (VirSchema schema : virSchemaDAO.findByAnyTypeClasses(Collections.singletonList(anyTypeClass))) {\n             schema.setAnyTypeClass(null);\n         }\n "},{"sha":"5b342b233be61acc3e413bf2f948e9a77ce66748","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerSchemaDAO.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.util.Collection;\n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -43,13 +44,16 @@ public DerSchema find(final String key) {\n     }\n \n     @Override\n-    public List<DerSchema> findByAnyTypeClass(final AnyTypeClass anyTypeClass) {\n+    public List<DerSchema> findByAnyTypeClasses(final Collection<AnyTypeClass> anyTypeClasses) {\n         StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n                 append(JPADerSchema.class.getSimpleName()).\n-                append(\" e WHERE e.anyTypeClass=:anyTypeClass\");\n+                append(\" e WHERE \");\n+        for (AnyTypeClass anyTypeClass : anyTypeClasses) {\n+            queryString.append(\"e.anyTypeClass.name='\").append(anyTypeClass.getKey()).append(\"' OR\");\n+        }\n \n-        TypedQuery<DerSchema> query = entityManager().createQuery(queryString.toString(), DerSchema.class);\n-        query.setParameter(\"anyTypeClass\", anyTypeClass);\n+        TypedQuery<DerSchema> query = entityManager().createQuery(\n+                queryString.substring(0, queryString.length() - 3), DerSchema.class);\n \n         return query.getResultList();\n     }"},{"sha":"d6e03157c209bdfdd972a682cd545e0a93896d9c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.util.Collection;\n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -49,13 +50,16 @@ public PlainSchema find(final String key) {\n     }\n \n     @Override\n-    public List<PlainSchema> findByAnyTypeClass(final AnyTypeClass anyTypeClass) {\n+    public List<PlainSchema> findByAnyTypeClasses(final Collection<AnyTypeClass> anyTypeClasses) {\n         StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n                 append(JPAPlainSchema.class.getSimpleName()).\n-                append(\" e WHERE e.anyTypeClass=:anyTypeClass\");\n+                append(\" e WHERE \");\n+        for (AnyTypeClass anyTypeClass : anyTypeClasses) {\n+            queryString.append(\"e.anyTypeClass.name='\").append(anyTypeClass.getKey()).append(\"' OR\");\n+        }\n \n-        TypedQuery<PlainSchema> query = entityManager().createQuery(queryString.toString(), PlainSchema.class);\n-        query.setParameter(\"anyTypeClass\", anyTypeClass);\n+        TypedQuery<PlainSchema> query = entityManager().createQuery(\n+                queryString.substring(0, queryString.length() - 3), PlainSchema.class);\n \n         return query.getResultList();\n     }"},{"sha":"4dc1688ed2ef857aef42e7f1da60d92cbd289b61","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java","status":"modified","additions":3,"deletions":20,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.List;\n-import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -37,32 +36,16 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n-public class JPARoleDAO extends AbstractDAO<Role, Long> implements RoleDAO {\n+public class JPARoleDAO extends AbstractDAO<Role, String> implements RoleDAO {\n \n     @Autowired\n     private AnySearchDAO searchDAO;\n \n     @Override\n-    public Role find(final Long key) {\n+    public Role find(final String key) {\n         return entityManager().find(JPARole.class, key);\n     }\n \n-    @Override\n-    public Role find(final String name) {\n-        TypedQuery<Role> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPARole.class.getSimpleName() + \" e WHERE e.name=:name\", Role.class);\n-        query.setParameter(\"name\", name);\n-\n-        Role result = null;\n-        try {\n-            result = query.getSingleResult();\n-        } catch (NoResultException e) {\n-            LOG.debug(\"Found more than one match\", e);\n-        }\n-\n-        return result;\n-    }\n-\n     @Override\n     public List<Role> findByRealm(final Realm realm) {\n         TypedQuery<Role> query = entityManager().createQuery(\n@@ -108,7 +91,7 @@ public void delete(final Role role) {\n     }\n \n     @Override\n-    public void delete(final Long key) {\n+    public void delete(final String key) {\n         Role role = find(key);\n         if (role == null) {\n             return;"},{"sha":"854b065c4bfbaf2c1e8022d4c2d8d739bdfe8c1a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.util.Collection;\n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -45,13 +46,16 @@ public VirSchema find(final String key) {\n     }\n \n     @Override\n-    public List<VirSchema> findByAnyTypeClass(final AnyTypeClass anyTypeClass) {\n+    public List<VirSchema> findByAnyTypeClasses(final Collection<AnyTypeClass> anyTypeClasses) {\n         StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n                 append(JPAVirSchema.class.getSimpleName()).\n-                append(\" e WHERE e.anyTypeClass=:anyTypeClass\");\n+                append(\" e WHERE \");\n+        for (AnyTypeClass anyTypeClass : anyTypeClasses) {\n+            queryString.append(\"e.anyTypeClass.name='\").append(anyTypeClass.getKey()).append(\"' OR\");\n+        }\n \n-        TypedQuery<VirSchema> query = entityManager().createQuery(queryString.toString(), VirSchema.class);\n-        query.setParameter(\"anyTypeClass\", anyTypeClass);\n+        TypedQuery<VirSchema> query = entityManager().createQuery(\n+                queryString.substring(0, queryString.length() - 3), VirSchema.class);\n \n         return query.getResultList();\n     }"},{"sha":"78d7380a08f2e8f531b77da5936ad94ee5b6f516","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARole.java","status":"modified","additions":7,"deletions":15,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -37,37 +37,34 @@\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import javax.validation.Valid;\n-import javax.validation.constraints.NotNull;\n import org.apache.syncope.core.persistence.api.entity.user.DynRoleMembership;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.persistence.jpa.validation.entity.RoleCheck;\n \n @Entity\n @Table(name = JPARole.TABLE)\n @Cacheable\n-public class JPARole extends AbstractEntity<Long> implements Role {\n+@RoleCheck\n+public class JPARole extends AbstractEntity<String> implements Role {\n \n     private static final long serialVersionUID = -7657701119422588832L;\n \n     public static final String TABLE = \"SyncopeRole\";\n \n     @Id\n-    private Long id;\n-\n-    @Column(unique = true)\n-    @NotNull\n     private String name;\n \n     @ElementCollection(fetch = FetchType.EAGER)\n     @Column(name = \"entitlement\")\n     @CollectionTable(name = \"SyncopeRole_entitlements\",\n             joinColumns =\n-            @JoinColumn(name = \"role_id\", referencedColumnName = \"id\"))\n+            @JoinColumn(name = \"role_name\", referencedColumnName = \"name\"))\n     private Set<String> entitlements = new HashSet<>();\n \n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(joinColumns =\n-            @JoinColumn(name = \"role_id\"),\n+            @JoinColumn(name = \"role_name\"),\n             inverseJoinColumns =\n             @JoinColumn(name = \"realm_id\"))\n     @Valid\n@@ -78,17 +75,12 @@ public class JPARole extends AbstractEntity<Long> implements Role {\n     private JPADynRoleMembership dynMembership;\n \n     @Override\n-    public Long getKey() {\n-        return id;\n-    }\n-\n-    @Override\n-    public String getName() {\n+    public String getKey() {\n         return name;\n     }\n \n     @Override\n-    public void setName(final String name) {\n+    public void setKey(final String name) {\n         this.name = name;\n     }\n "},{"sha":"36268040f54a5eef38c0e1ab5fc37116e0b3e3de","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -92,7 +92,7 @@ public class JPAUser extends AbstractAny<UPlainAttr> implements User {\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"user_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"role_id\"))\n+            @JoinColumn(name = \"role_name\"))\n     private List<JPARole> roles = new ArrayList<>();\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n@@ -442,8 +442,8 @@ public boolean verifyPasswordHistory(final String password, final int size) {\n                 res = passwordHistory.subList(size >= passwordHistory.size()\n                         ? 0\n                         : passwordHistory.size() - size, passwordHistory.size()).contains(cipherAlgorithm == null\n-                                        ? password\n-                                        : Encryptor.getInstance().encode(password, cipherAlgorithm));\n+                                ? password\n+                                : Encryptor.getInstance().encode(password, cipherAlgorithm));\n             } catch (Exception e) {\n                 LOG.error(\"Error evaluating password history\", e);\n             }"},{"sha":"2f97699616edec04ecde80e45f5e6e108c421ed3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ExternalResourceValidator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -189,7 +189,7 @@ public boolean evaluate(final MappingItem item) {\n     public boolean isValid(final ExternalResource resource, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n-        if (!NAME_PATTERN.matcher(resource.getKey()).matches()) {\n+        if (resource.getKey() == null || !NAME_PATTERN.matcher(resource.getKey()).matches()) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidName, \"Invalid Resource name\")).\n                     addPropertyNode(\"name\").addConstraintViolation();"},{"sha":"fbb5f0a16c8985fd7e8092b0c4dc3c142de0c022","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RoleCheck.java","status":"renamed","additions":16,"deletions":23,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRoleCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRoleCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRoleCheck.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -16,33 +16,26 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.lib.builders;\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n \n-import org.apache.syncope.common.rest.api.beans.ConnObjectTOListQuery;\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n \n-public class ConnObjectTOListQueryBuilder {\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n \n-    private final ConnObjectTOListQuery instance = new ConnObjectTOListQuery();\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = RoleValidator.class)\n+@Documented\n+public @interface RoleCheck {\n \n-    public ConnObjectTOListQueryBuilder size(final Integer size) {\n-        instance.setSize(size);\n+    String message() default \"{org.apache.syncope.core.persistence.validation.role}\";\n \n-        return this;\n-    }\n+    Class<?>[] groups() default {};\n \n-    public ConnObjectTOListQueryBuilder pagedResultsCookie(final String pagedResultsCookie) {\n-        instance.setPagedResultsCookie(pagedResultsCookie);\n-\n-        return this;\n-    }\n-\n-    public ConnObjectTOListQueryBuilder orderBy(final String orderBy) {\n-        instance.setOrderBy(orderBy);\n-\n-        return this;\n-    }\n-\n-    public ConnObjectTOListQuery build() {\n-        return instance;\n-    }\n+    Class<? extends Payload>[] payload() default {};\n }","previous_filename":"client/lib/src/main/java/org/apache/syncope/client/lib/builders/ConnObjectTOListQueryBuilder.java"},{"sha":"29558a06c362d1d2c0f994cc3284a50c8d6b048b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RoleValidator.java","status":"renamed","additions":14,"deletions":23,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRoleValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRoleValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRoleValidator.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -16,34 +16,25 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.lib.builders;\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n \n-import org.apache.syncope.common.rest.api.beans.AnyQuery;\n+import javax.validation.ConstraintValidatorContext;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n \n-public class AnyQueryBuilder extends AbstractQueryBuilder<AnyQuery, AnyQueryBuilder> {\n+public class RoleValidator extends AbstractValidator<RoleCheck, Role> {\n \n     @Override\n-    protected AnyQuery newInstance() {\n-        return new AnyQuery();\n-    }\n+    public boolean isValid(final Role role, final ConstraintValidatorContext context) {\n+        context.disableDefaultConstraintViolation();\n \n-    @Override\n-    public AnyQueryBuilder page(final Integer page) {\n-        return AnyQueryBuilder.class.cast(super.page(page));\n-    }\n-\n-    @Override\n-    public AnyQueryBuilder size(final Integer size) {\n-        return AnyQueryBuilder.class.cast(super.size(size));\n-    }\n-\n-    @Override\n-    public AnyQueryBuilder orderBy(final String orderBy) {\n-        return AnyQueryBuilder.class.cast(super.orderBy(orderBy));\n-    }\n+        if (role.getKey() == null || !NAME_PATTERN.matcher(role.getKey()).matches()) {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidName, \"Invalid Role name\")).\n+                    addPropertyNode(\"name\").addConstraintViolation();\n+            return false;\n+        }\n \n-    public AnyQueryBuilder details(final boolean details) {\n-        getInstance().setDetails(details);\n-        return this;\n+        return true;\n     }\n }","previous_filename":"client/lib/src/main/java/org/apache/syncope/client/lib/builders/AnyQueryBuilder.java"},{"sha":"a2eb846c281ef2d023d23d6d3e4f1777efc7490f","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -75,15 +75,6 @@ under the License.\n     </attributes>\n   </entity>\n   \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPARole\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_Role\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_Role\" pk-column-value=\"SEQ_Role\" initial-value=\"100\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-  \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"a2eb846c281ef2d023d23d6d3e4f1777efc7490f","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -75,15 +75,6 @@ under the License.\n     </attributes>\n   </entity>\n   \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPARole\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_Role\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_Role\" pk-column-value=\"SEQ_Role\" initial-value=\"100\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-  \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"5b820ffa8352e2b8afd361305150f03ff40444d3","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -75,15 +75,6 @@ under the License.\n     </attributes>\n   </entity>\n   \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPARole\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_Role\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_Role\" pk-column-value=\"SEQ_Role\" initial-value=\"100\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-  \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"fd0bf9c40c144ec172640420ab4b3738ff9e92be","filename":"core/persistence-jpa/src/main/resources/views.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -90,13 +90,13 @@ under the License.\n   <entry key=\"user_search_role\">\n     CREATE VIEW user_search_role AS\n \n-    SELECT ss.user_id AS any_id, ss.role_id AS role_id\n+    SELECT ss.user_id AS any_id, ss.role_name AS role_name\n     FROM SyncopeUser_SyncopeRole ss\n   </entry>\n   <entry key=\"user_search_dynrmemb\">\n     CREATE VIEW user_search_dynrmemb AS\n \n-    SELECT ds.user_id AS any_id, d.role_id AS role_id\n+    SELECT ds.user_id AS any_id, d.role_name AS role_name\n     FROM DynRoleMembership d, DynRoleMembership_User ds\n     WHERE d.id = ds.dynRoleMembership_id\n   </entry>"},{"sha":"5c8dde9c6fab31ef9c535091ee009182c913b7ad","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -91,7 +91,7 @@ public void userMatch() {\n         assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(groupCond), AnyTypeKind.USER));\n \n         RoleCond roleCond = new RoleCond();\n-        roleCond.setRoleKey(3L);\n+        roleCond.setRoleKey(\"Other\");\n         assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(roleCond), AnyTypeKind.USER));\n     }\n \n@@ -228,7 +228,7 @@ public void searchByGroup() {\n     @Test\n     public void searchByRole() {\n         RoleCond roleCond = new RoleCond();\n-        roleCond.setRoleKey(3L);\n+        roleCond.setRoleKey(\"Other\");\n \n         List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n                 SearchCond.getLeafCond(roleCond), AnyTypeKind.USER);"},{"sha":"ce2039a9eb28d6e439114280d76096629273bd60","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RoleTest.java","status":"modified","additions":10,"deletions":13,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRoleTest.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -45,15 +45,12 @@ public class RoleTest extends AbstractTest {\n \n     @Test\n     public void find() {\n-        Role role1 = roleDAO.find(2L);\n-        assertNotNull(role1);\n-        assertNotNull(role1.getName());\n-        assertFalse(role1.getRealms().isEmpty());\n-        assertFalse(role1.getEntitlements().isEmpty());\n-        assertTrue(role1.getEntitlements().contains(StandardEntitlement.USER_LIST));\n-\n-        Role role2 = roleDAO.find(role1.getName());\n-        assertEquals(role1, role2);\n+        Role role = roleDAO.find(\"User manager\");\n+        assertNotNull(role);\n+        assertNotNull(role.getKey());\n+        assertFalse(role.getRealms().isEmpty());\n+        assertFalse(role.getEntitlements().isEmpty());\n+        assertTrue(role.getEntitlements().contains(StandardEntitlement.USER_LIST));\n     }\n \n     @Test\n@@ -69,7 +66,7 @@ public void findAll() {\n     @Test\n     public void save() {\n         Role role = entityFactory.newEntity(Role.class);\n-        role.setName(\"new\");\n+        role.setKey(\"new\");\n         role.add(realmDAO.getRoot());\n         role.add(realmDAO.find(\"/even/two\"));\n         role.getEntitlements().add(StandardEntitlement.LOG_LIST);\n@@ -81,9 +78,9 @@ public void save() {\n \n     @Test\n     public void delete() {\n-        assertNotNull(roleDAO.find(3L));\n+        assertNotNull(roleDAO.find(\"Other\"));\n \n-        roleDAO.delete(3L);\n-        assertNull(roleDAO.find(3L));\n+        roleDAO.delete(\"Other\");\n+        assertNull(roleDAO.find(\"Other\"));\n     }\n }"},{"sha":"001a9844fbde9b9929a5b61f3bc74bb822d6c388","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnySearchTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -85,7 +85,7 @@ public void issueSYNCOPE95() {\n     public void searchByDynMembership() {\n         // 1. create role with dynamic membership\n         Role role = entityFactory.newEntity(Role.class);\n-        role.setName(\"new\");\n+        role.setKey(\"new\");\n         role.add(realmDAO.getRoot());\n         role.add(realmDAO.find(\"/even/two\"));\n         role.getEntitlements().add(StandardEntitlement.LOG_LIST);"},{"sha":"2b67e6ab88dd6a2c25b21fcd2be01bcd19074314","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/RealmTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRealmTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRealmTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRealmTest.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -45,7 +45,7 @@ public void test() {\n         Realm realm = realmDAO.find(\"/odd\");\n         assertNotNull(realm);\n \n-        Role role = roleDAO.find(1L);\n+        Role role = roleDAO.find(\"User reviewer\");\n         assertTrue(role.getRealms().contains(realm));\n \n         int beforeSize = role.getRealms().size();\n@@ -54,7 +54,7 @@ public void test() {\n \n         realmDAO.flush();\n \n-        role = roleDAO.find(1L);\n+        role = roleDAO.find(\"User reviewer\");\n         assertEquals(beforeSize - 1, role.getRealms().size());\n     }\n }"},{"sha":"a3a4ea67ee09b163a17c3d62b1519a4b6acf44ba","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/RoleTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -98,7 +98,7 @@ public void dynMembership() {\n \n         // 1. create role with dynamic membership\n         Role role = entityFactory.newEntity(Role.class);\n-        role.setName(\"new\");\n+        role.setKey(\"new\");\n         role.add(realmDAO.getRoot());\n         role.add(realmDAO.find(\"/even/two\"));\n         role.getEntitlements().add(StandardEntitlement.LOG_LIST);\n@@ -165,7 +165,7 @@ public Long transform(final User input) {\n     public void delete() {\n         // 0. create role\n         Role role = entityFactory.newEntity(Role.class);\n-        role.setName(\"new\");\n+        role.setKey(\"new\");\n         role.add(realmDAO.getRoot());\n         role.add(realmDAO.find(\"/even/two\"));\n         role.getEntitlements().add(StandardEntitlement.LOG_LIST);"},{"sha":"b0a1a1a5a30153a3deeadd621bd297153a09b3dd","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":28,"deletions":28,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -8,7 +8,7 @@ to you under the Apache License, Version 2.0 (the\n \"License\"); you may not use this file except in compliance\n with the License.  You may obtain a copy of the License at\n \n-  http://www.apache.org/licenses/LICENSE-2.0\n+     http://www.apache.org/licenses/LICENSE-2.0\n \n Unless required by applicable law or agreed to in writing,\n software distributed under the License is distributed on an\n@@ -170,37 +170,37 @@ under the License.\n   \n   <ARelationship id=\"1\" left_anyObject_id=\"1\" right_anyObject_id=\"2\" type_name=\"neighborhood\"/>\n   \n-  <SyncopeRole id=\"1\" name=\"User reviewer\"/>\n-  <SyncopeRole_entitlements entitlement=\"USER_READ\" role_id=\"1\"/>\n-  <SyncopeRole_entitlements entitlement=\"USER_LIST\" role_id=\"1\"/>\n-  <SyncopeRole_entitlements entitlement=\"USER_SEARCH\" role_id=\"1\"/>\n-  <SyncopeRole_Realm role_id=\"1\" realm_id=\"2\"/>\n-  <SyncopeRole_Realm role_id=\"1\" realm_id=\"3\"/>\n+  <SyncopeRole name=\"User reviewer\"/>\n+  <SyncopeRole_entitlements entitlement=\"USER_READ\" role_name=\"User reviewer\"/>\n+  <SyncopeRole_entitlements entitlement=\"USER_LIST\" role_name=\"User reviewer\"/>\n+  <SyncopeRole_entitlements entitlement=\"USER_SEARCH\" role_name=\"User reviewer\"/>\n+  <SyncopeRole_Realm role_name=\"User reviewer\" realm_id=\"2\"/>\n+  <SyncopeRole_Realm role_name=\"User reviewer\" realm_id=\"3\"/>\n   \n-  <SyncopeRole id=\"2\" name=\"User manager\"/>\n-  <SyncopeRole_entitlements entitlement=\"USER_READ\" role_id=\"2\"/>\n-  <SyncopeRole_entitlements entitlement=\"USER_LIST\" role_id=\"2\"/>\n-  <SyncopeRole_entitlements entitlement=\"USER_SEARCH\" role_id=\"2\"/>\n-  <SyncopeRole_entitlements entitlement=\"WORKFLOW_FORM_CLAIM\" role_id=\"2\"/>\n-  <SyncopeRole_entitlements entitlement=\"WORKFLOW_FORM_SUBMIT\" role_id=\"2\"/>\n-  <SyncopeRole_Realm role_id=\"2\" realm_id=\"1\"/>\n+  <SyncopeRole name=\"User manager\"/>\n+  <SyncopeRole_entitlements entitlement=\"USER_READ\" role_name=\"User manager\"/>\n+  <SyncopeRole_entitlements entitlement=\"USER_LIST\" role_name=\"User manager\"/>\n+  <SyncopeRole_entitlements entitlement=\"USER_SEARCH\" role_name=\"User manager\"/>\n+  <SyncopeRole_entitlements entitlement=\"WORKFLOW_FORM_CLAIM\" role_name=\"User manager\"/>\n+  <SyncopeRole_entitlements entitlement=\"WORKFLOW_FORM_SUBMIT\" role_name=\"User manager\"/>\n+  <SyncopeRole_Realm role_name=\"User manager\" realm_id=\"1\"/>\n \n-  <SyncopeRole id=\"3\" name=\"Other\"/>\n-  <SyncopeRole_entitlements entitlement=\"SCHEMA_READ\" role_id=\"3\"/>\n-  <SyncopeRole_entitlements entitlement=\"GROUP_READ\" role_id=\"3\"/>\n-  <SyncopeRole_entitlements entitlement=\"WORKFLOW_FORM_CLAIM\" role_id=\"3\"/>\n-  <SyncopeRole_Realm role_id=\"3\" realm_id=\"2\"/>\n+  <SyncopeRole name=\"Other\"/>\n+  <SyncopeRole_entitlements entitlement=\"SCHEMA_READ\" role_name=\"Other\"/>\n+  <SyncopeRole_entitlements entitlement=\"GROUP_READ\" role_name=\"Other\"/>\n+  <SyncopeRole_entitlements entitlement=\"WORKFLOW_FORM_CLAIM\" role_name=\"Other\"/>\n+  <SyncopeRole_Realm role_name=\"Other\" realm_id=\"2\"/>\n   \n-  <SyncopeRole id=\"4\" name=\"Search for /even/two\"/>\n-  <SyncopeRole_entitlements entitlement=\"USER_READ\" role_id=\"4\"/>\n-  <SyncopeRole_entitlements entitlement=\"USER_SEARCH\" role_id=\"4\"/>\n-  <SyncopeRole_Realm role_id=\"4\" realm_id=\"4\"/>\n+  <SyncopeRole name=\"Search for /even/two\"/>\n+  <SyncopeRole_entitlements entitlement=\"USER_READ\" role_name=\"Search for /even/two\"/>\n+  <SyncopeRole_entitlements entitlement=\"USER_SEARCH\" role_name=\"Search for /even/two\"/>\n+  <SyncopeRole_Realm role_name=\"Search for /even/two\" realm_id=\"4\"/>\n \n   <SyncopeUser id=\"1\" workflowId=\"4\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n                realm_id=\"3\"\n                username=\"rossini\" creator=\"admin\" lastModifier=\"admin\"\n                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\" suspended=\"0\"/>\n-  <SyncopeUser_SyncopeRole user_id=\"1\" role_id=\"3\"/>\n+  <SyncopeUser_SyncopeRole user_id=\"1\" role_name=\"Other\"/>\n   <SyncopeUser id=\"2\" workflowId=\"6\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n                realm_id=\"1\"\n                username=\"verdi\" creator=\"admin\" lastModifier=\"admin\"\n@@ -213,13 +213,13 @@ under the License.\n                realm_id=\"1\"\n                username=\"bellini\" creator=\"admin\" lastModifier=\"admin\"\n                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\" suspended=\"0\"/>\n-  <SyncopeUser_SyncopeRole user_id=\"4\" role_id=\"1\"/>\n-  <SyncopeUser_SyncopeRole user_id=\"4\" role_id=\"2\"/>\n+  <SyncopeUser_SyncopeRole user_id=\"4\" role_name=\"User reviewer\"/>\n+  <SyncopeUser_SyncopeRole user_id=\"4\" role_name=\"User manager\"/>\n   <SyncopeUser id=\"5\" workflowId=\"12\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n                realm_id=\"1\"\n                username=\"puccini\" creator=\"admin\" lastModifier=\"admin\" \n                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\" suspended=\"0\"/>\n-  <SyncopeUser_SyncopeRole user_id=\"5\" role_id=\"4\"/>\n+  <SyncopeUser_SyncopeRole user_id=\"5\" role_name=\"Search for /even/two\"/>\n   \n   <SyncopeGroup id=\"1\" name=\"root\"\n                 realm_id=\"1\"\n@@ -1110,4 +1110,4 @@ under the License.\n   <SyncopeLogger logName=\"syncope.audit.[REST]:[EntitlementLogic]:[]:[getOwn]:[SUCCESS]\" logLevel=\"DEBUG\" logType=\"AUDIT\"/>\n   \n   <SecurityQuestion id=\"1\" content=\"What's your mother's maiden name?\"/>\n-</dataset>\n+</dataset>\n\\ No newline at end of file"},{"sha":"047633d9ecf8d262986e84ed53a684f7089138b5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyTypeClassDataBinderImpl.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import java.util.Collections;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -63,7 +64,7 @@ public void update(final AnyTypeClass anyTypeClass, final AnyTypeClassTO anyType\n             anyTypeClass.setKey(anyTypeClassTO.getKey());\n         }\n \n-        for (PlainSchema schema : plainSchemaDAO.findByAnyTypeClass(anyTypeClass)) {\n+        for (PlainSchema schema : plainSchemaDAO.findByAnyTypeClasses(Collections.singletonList(anyTypeClass))) {\n             schema.setAnyTypeClass(null);\n         }\n \n@@ -78,7 +79,7 @@ public void update(final AnyTypeClass anyTypeClass, final AnyTypeClassTO anyType\n             }\n         }\n \n-        for (DerSchema schema : derSchemaDAO.findByAnyTypeClass(anyTypeClass)) {\n+        for (DerSchema schema : derSchemaDAO.findByAnyTypeClasses(Collections.singletonList(anyTypeClass))) {\n             schema.setAnyTypeClass(null);\n         }\n \n@@ -93,7 +94,7 @@ public void update(final AnyTypeClass anyTypeClass, final AnyTypeClassTO anyType\n             }\n         }\n \n-        for (VirSchema schema : virSchemaDAO.findByAnyTypeClass(anyTypeClass)) {\n+        for (VirSchema schema : virSchemaDAO.findByAnyTypeClasses(Collections.singletonList(anyTypeClass))) {\n             schema.setAnyTypeClass(null);\n         }\n "},{"sha":"1bef90ec94283adad180b663fe669f4577be2196","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RoleDataBinderImpl.java","status":"modified","additions":10,"deletions":13,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -75,7 +75,7 @@ public Role create(final RoleTO roleTO) {\n \n     @Override\n     public void update(final Role role, final RoleTO roleTO) {\n-        role.setName(roleTO.getName());\n+        role.setKey(roleTO.getKey());\n \n         role.getEntitlements().clear();\n         role.getEntitlements().addAll(roleTO.getEntitlements());\n@@ -93,17 +93,15 @@ public void update(final Role role, final RoleTO roleTO) {\n         // dynamic membership\n         if (role.getKey() == null && roleTO.getDynMembershipCond() != null) {\n             setDynMembership(role, roleTO.getDynMembershipCond());\n-        } else {\n-            if (role.getDynMembership() != null && roleTO.getDynMembershipCond() == null) {\n-                role.setDynMembership(null);\n-            } else if (role.getDynMembership() == null && roleTO.getDynMembershipCond() != null) {\n-                setDynMembership(role, roleTO.getDynMembershipCond());\n-            } else if (role.getDynMembership() != null && roleTO.getDynMembershipCond() != null\n-                    && !role.getDynMembership().getFIQLCond().equals(roleTO.getDynMembershipCond())) {\n-\n-                role.getDynMembership().getMembers().clear();\n-                setDynMembership(role, roleTO.getDynMembershipCond());\n-            }\n+        } else if (role.getDynMembership() != null && roleTO.getDynMembershipCond() == null) {\n+            role.setDynMembership(null);\n+        } else if (role.getDynMembership() == null && roleTO.getDynMembershipCond() != null) {\n+            setDynMembership(role, roleTO.getDynMembershipCond());\n+        } else if (role.getDynMembership() != null && roleTO.getDynMembershipCond() != null\n+                && !role.getDynMembership().getFIQLCond().equals(roleTO.getDynMembershipCond())) {\n+\n+            role.getDynMembership().getMembers().clear();\n+            setDynMembership(role, roleTO.getDynMembershipCond());\n         }\n     }\n \n@@ -112,7 +110,6 @@ public RoleTO getRoleTO(final Role role) {\n         RoleTO roleTO = new RoleTO();\n \n         roleTO.setKey(role.getKey());\n-        roleTO.setName(role.getName());\n         roleTO.getEntitlements().addAll(role.getEntitlements());\n \n         CollectionUtils.collect(role.getRealms(), new Transformer<Realm, String>() {"},{"sha":"ca3448cd6bc4b77e35aca2a0d075d4191c2981df","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -32,10 +32,10 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.patch.LongPatchItem;\n import org.apache.syncope.common.lib.patch.MembershipPatch;\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n import org.apache.syncope.common.lib.patch.RelationshipPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n@@ -164,7 +164,7 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n \n         // roles\n-        for (Long roleKey : userTO.getRoles()) {\n+        for (String roleKey : userTO.getRoles()) {\n             Role role = roleDAO.find(roleKey);\n             if (role == null) {\n                 LOG.warn(\"Ignoring unknown role with id {}\", roleKey);\n@@ -317,7 +317,7 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n         }\n \n         // roles\n-        for (LongPatchItem patch : userPatch.getRoles()) {\n+        for (StringPatchItem patch : userPatch.getRoles()) {\n             Role role = roleDAO.find(patch.getValue());\n             if (role == null) {\n                 LOG.warn(\"Ignoring unknown role with key {}\", patch.getValue());\n@@ -452,10 +452,10 @@ public UserTO getUserTO(final User user, final boolean details) {\n \n         if (details) {\n             // roles\n-            CollectionUtils.collect(user.getRoles(), new Transformer<Role, Long>() {\n+            CollectionUtils.collect(user.getRoles(), new Transformer<Role, String>() {\n \n                 @Override\n-                public Long transform(final Role role) {\n+                public String transform(final Role role) {\n                     return role.getKey();\n                 }\n             }, userTO.getRoles());\n@@ -480,10 +480,10 @@ public MembershipTO transform(final UMembership membership) {\n             }, userTO.getMemberships());\n \n             // dynamic memberships\n-            CollectionUtils.collect(userDAO.findDynRoleMemberships(user), new Transformer<Role, Long>() {\n+            CollectionUtils.collect(userDAO.findDynRoleMemberships(user), new Transformer<Role, String>() {\n \n                 @Override\n-                public Long transform(final Role role) {\n+                public String transform(final Role role) {\n                     return role.getKey();\n                 }\n             }, userTO.getDynRoles());"},{"sha":"1eec4a3bac5dc16d8c6b7123828a81abce1da171","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RoleServiceImpl.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRoleServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRoleServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRoleServiceImpl.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -40,14 +40,14 @@ public List<RoleTO> list() {\n     }\n \n     @Override\n-    public RoleTO read(final Long roleKey) {\n-        return logic.read(roleKey);\n+    public RoleTO read(final String key) {\n+        return logic.read(key);\n     }\n \n     @Override\n     public Response create(final RoleTO roleTO) {\n         RoleTO created = logic.create(roleTO);\n-        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(created.getKey())).build();\n+        URI location = uriInfo.getAbsolutePathBuilder().path(created.getKey()).build();\n         return Response.created(location).\n                 header(RESTHeaders.RESOURCE_KEY, created.getKey()).\n                 build();\n@@ -59,8 +59,8 @@ public void update(final RoleTO roleTO) {\n     }\n \n     @Override\n-    public void delete(final Long roleKey) {\n-        logic.delete(roleKey);\n+    public void delete(final String key) {\n+        logic.delete(key);\n     }\n \n }"},{"sha":"fc98926c666f48067e60ce7be128ec32222b8d3b","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SchemaServiceImpl.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.syncope.core.logic.SchemaLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -51,8 +52,8 @@ public void delete(final SchemaType schemaType, final String key) {\n     }\n \n     @Override\n-    public <T extends AbstractSchemaTO> List<T> list(final SchemaType schemaType, final String anyTypeClass) {\n-        return logic.list(schemaType, anyTypeClass);\n+    public <T extends AbstractSchemaTO> List<T> list(final SchemaType schemaType, final SchemaQuery query) {\n+        return logic.list(schemaType, query.getAnyTypeClasses());\n     }\n \n     @Override"},{"sha":"2d98fd8745590b8f1dba3bc25922e6b9b65d58ce","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -35,13 +35,13 @@\n import java.util.concurrent.TimeUnit;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n-import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.core.logic.notification.NotificationJob;\n \n@@ -166,7 +166,7 @@ protected Map<Long, TaskExecTO> execProvisioningTasks(final TaskService taskServ\n \n     protected NotificationTaskTO findNotificationTaskBySender(final String sender) {\n         PagedResult<NotificationTaskTO> tasks =\n-                taskService.list(TaskType.NOTIFICATION, SyncopeClient.getTaskQueryBuilder().build());\n+                taskService.list(TaskType.NOTIFICATION, new TaskQuery.Builder().build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n "},{"sha":"c0441877a23ac7d0635ad9d731f81239d84bc779","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AnyObjectITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyObjectITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyObjectITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyObjectITCase.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -26,7 +26,6 @@\n \n import java.util.Set;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n@@ -36,6 +35,7 @@\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -93,8 +93,8 @@ public void delete() {\n \n     @Test\n     public void list() {\n-        PagedResult<AnyObjectTO> anyObjectTOs = anyObjectService.list(\"PRINTER\", SyncopeClient.getAnyListQueryBuilder().\n-                realm(SyncopeConstants.ROOT_REALM).build());\n+        PagedResult<AnyObjectTO> anyObjectTOs = anyObjectService.list(\n+                \"PRINTER\", new AnyListQuery.Builder().realm(SyncopeConstants.ROOT_REALM).build());\n         assertNotNull(anyObjectTOs);\n         assertTrue(anyObjectTOs.getResult().size() >= 2);\n         for (AnyObjectTO anyObjectTO : anyObjectTOs.getResult()) {"},{"sha":"580a209b1be0c84755bf72b3171eae335462c321","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AuthenticationITCase.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -38,9 +38,9 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.DeassociationPatch;\n-import org.apache.syncope.common.lib.patch.LongPatchItem;\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n import org.apache.syncope.common.lib.patch.StatusPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n@@ -65,10 +65,10 @@\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.lib.types.StatusPatchType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n import org.apache.syncope.common.rest.api.service.AnyObjectService;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.syncope.common.rest.api.service.UserService;\n-import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n import org.apache.syncope.core.misc.security.Encryptor;\n import org.junit.Assume;\n import org.junit.FixMethodOrder;\n@@ -167,7 +167,7 @@ public void testUserSchemaAuthorization() {\n     @Test\n     public void testUserRead() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"testuserread@test.org\");\n-        userTO.getRoles().add(2L);\n+        userTO.getRoles().add(\"User manager\");\n \n         userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n@@ -192,7 +192,7 @@ public void testUserRead() {\n     @Test\n     public void testUserSearch() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"testusersearch@test.org\");\n-        userTO.getRoles().add(1L);\n+        userTO.getRoles().add(\"User reviewer\");\n \n         userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n@@ -203,7 +203,7 @@ public void testUserSearch() {\n                 getService(UserService.class);\n \n         PagedResult<UserTO> matchedUsers = userService2.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().isNotNull(\"key\").query()).build());\n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.getResult().isEmpty());\n@@ -223,7 +223,7 @@ public Long transform(final UserTO input) {\n         UserService userService3 = clientFactory.create(\"puccini\", ADMIN_PWD).getService(UserService.class);\n \n         matchedUsers = userService3.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(\"/even/two\").\n+                new AnySearchQuery.Builder().realm(\"/even/two\").\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().isNotNull(\"loginDate\").query()).build());\n         assertNotNull(matchedUsers);\n         assertTrue(CollectionUtils.matchesAll(matchedUsers.getResult(), new Predicate<UserTO>() {\n@@ -237,20 +237,20 @@ public boolean evaluate(final UserTO matched) {\n \n     @Test\n     public void delegatedUserCRUD() {\n-        Long roleKey = null;\n+        String roleKey = null;\n         Long delegatedAdminKey = null;\n         try {\n             // 1. create role for full user administration, under realm /even/two\n             RoleTO role = new RoleTO();\n-            role.setName(\"Delegated user admin\");\n+            role.setKey(\"Delegated user admin\");\n             role.getEntitlements().add(StandardEntitlement.USER_CREATE);\n             role.getEntitlements().add(StandardEntitlement.USER_UPDATE);\n             role.getEntitlements().add(StandardEntitlement.USER_DELETE);\n             role.getEntitlements().add(StandardEntitlement.USER_LIST);\n             role.getEntitlements().add(StandardEntitlement.USER_READ);\n             role.getRealms().add(\"/even/two\");\n \n-            roleKey = Long.valueOf(roleService.create(role).getHeaderString(RESTHeaders.RESOURCE_KEY));\n+            roleKey = roleService.create(role).getHeaderString(RESTHeaders.RESOURCE_KEY);\n             assertNotNull(roleKey);\n \n             // 2. as admin, create delegated admin user, and assign the role just created\n@@ -327,7 +327,7 @@ public void delegatedUserCRUD() {\n     @Test\n     public void checkFailedLogins() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"checkFailedLogin@syncope.apache.org\");\n-        userTO.getRoles().add(2L);\n+        userTO.getRoles().add(\"User manager\");\n \n         userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n@@ -353,7 +353,7 @@ public void checkFailedLogins() {\n     public void checkUserSuspension() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"checkSuspension@syncope.apache.org\");\n         userTO.setRealm(\"/odd\");\n-        userTO.getRoles().add(2L);\n+        userTO.getRoles().add(\"User manager\");\n \n         userTO = createUser(userTO).getAny();\n         long userKey = userTO.getKey();\n@@ -448,7 +448,7 @@ public boolean evaluate(final String entitlement) {\n \n         // 4. give create entitlement for the any type just created\n         RoleTO role = new RoleTO();\n-        role.setName(\"role\" + getUUIDString());\n+        role.setKey(\"role\" + getUUIDString());\n         role.getRealms().add(SyncopeConstants.ROOT_REALM);\n         role.getEntitlements().add(anyTypeKey + \"_READ\");\n         role.getEntitlements().add(anyTypeKey + \"_CREATE\");\n@@ -457,7 +457,7 @@ public boolean evaluate(final String entitlement) {\n         UserTO bellini = readUser(\"bellini\");\n         UserPatch patch = new UserPatch();\n         patch.setKey(bellini.getKey());\n-        patch.getRoles().add(new LongPatchItem.Builder().\n+        patch.getRoles().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(role.getKey()).build());\n         bellini = updateUser(patch).getAny();\n         assertTrue(bellini.getRoles().contains(role.getKey()));"},{"sha":"766ed0a78db52fb0cfc8fe16942fe8bd5d4b2542","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/DerSchemaITCase.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDerSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDerSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDerSchemaITCase.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -40,9 +41,9 @@ public class DerSchemaITCase extends AbstractITCase {\n \n     @Test\n     public void list() {\n-        List<DerSchemaTO> derivedSchemas = schemaService.list(SchemaType.DERIVED, null);\n-        assertFalse(derivedSchemas.isEmpty());\n-        for (DerSchemaTO derivedSchemaTO : derivedSchemas) {\n+        List<DerSchemaTO> derSchemas = schemaService.list(SchemaType.DERIVED, new SchemaQuery.Builder().build());\n+        assertFalse(derSchemas.isEmpty());\n+        for (DerSchemaTO derivedSchemaTO : derSchemas) {\n             assertNotNull(derivedSchemaTO);\n         }\n     }"},{"sha":"da0295c04531d92af9bddffbbde7c3797a16b42c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ExceptionMapperITCase.java","status":"modified","additions":15,"deletions":12,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FExceptionMapperITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FExceptionMapperITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FExceptionMapperITCase.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -28,8 +28,8 @@\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n-import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.SchemaType;\n@@ -109,18 +109,21 @@ public void uniqueSchemaConstraint() {\n     }\n \n     @Test\n-    public void sameRoleName() {\n-        // Create the first role\n-        RoleTO roleTO1 = new RoleTO();\n-        String roleUUID = getUUIDString();\n-        roleTO1.setName(\"child1\" + roleUUID);\n-        createRole(roleTO1);\n-\n-        // Create the second role, with the same parent and the same role of roleTO1\n-        RoleTO roleTO2 = new RoleTO();\n-        roleTO2.setName(\"child1\" + roleUUID);\n+    public void sameGroupName() {\n+        String groupUUID = getUUIDString();\n+\n+        // Create the first group\n+        GroupTO groupTO1 = new GroupTO();\n+        groupTO1.setName(\"child1\" + groupUUID);\n+        groupTO1.setRealm(SyncopeConstants.ROOT_REALM);\n+        createGroup(groupTO1);\n+\n+        // Create the second group, with the same name of groupTO1\n+        GroupTO groupTO2 = new GroupTO();\n+        groupTO2.setName(\"child1\" + groupUUID);\n+        groupTO2.setRealm(SyncopeConstants.ROOT_REALM);\n         try {\n-            createRole(roleTO2);\n+            createGroup(groupTO2);\n             fail();\n         } catch (Exception e) {\n             String message = ERROR_MESSAGES.getProperty(\"errMessage.UniqueConstraintViolation\");"},{"sha":"f5a503b2e0a051168389e961c6a634b9a576d2b6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/GroupITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -76,6 +76,8 @@\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.Preference;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n+import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n import org.apache.syncope.common.rest.api.service.GroupService;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -159,7 +161,7 @@ public void delete() {\n     @Test\n     public void list() {\n         PagedResult<GroupTO> groupTOs =\n-                groupService.list(SyncopeClient.getAnyListQueryBuilder().realm(SyncopeConstants.ROOT_REALM).build());\n+                groupService.list(new AnyListQuery.Builder().realm(SyncopeConstants.ROOT_REALM).build());\n         assertNotNull(groupTOs);\n         assertTrue(groupTOs.getResult().size() >= 8);\n         for (GroupTO groupTO : groupTOs.getResult()) {\n@@ -558,16 +560,14 @@ public void createWithMandatorySchema() {\n     public void anonymous() {\n         GroupService unauthenticated = clientFactory.create().getService(GroupService.class);\n         try {\n-            unauthenticated.\n-                    list(SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).build());\n+            unauthenticated.list(new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).build());\n             fail();\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n \n         GroupService anonymous = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).getService(GroupService.class);\n-        assertFalse(anonymous.list(SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n-                build()).\n+        assertFalse(anonymous.list(new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).build()).\n                 getResult().isEmpty());\n     }\n "},{"sha":"d67569254a174fa52fb0d26f5d0444cdd56d24a4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/MultitenancyITCase.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -50,6 +50,8 @@\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.SyncMode;\n+import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n+import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n import org.apache.syncope.common.rest.api.service.DomainService;\n import org.apache.syncope.common.rest.api.service.LoggerService;\n@@ -101,7 +103,8 @@ public void masterOnly() {\n \n     @Test\n     public void readPlainSchemas() {\n-        assertEquals(17, adminClient.getService(SchemaService.class).list(SchemaType.PLAIN, null).size());\n+        assertEquals(17, adminClient.getService(SchemaService.class).\n+                list(SchemaType.PLAIN, new SchemaQuery.Builder().build()).size());\n     }\n \n     @Test\n@@ -209,7 +212,7 @@ public void createResourceAndSync() {\n \n         // verify that synchronized user is found\n         PagedResult<UserTO> matchingUsers = adminClient.getService(UserService.class).search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"syncFromLDAP\").query()).\n                 build());\n         assertNotNull(matchingUsers);"},{"sha":"7f46848530cd2dd50b30a3deb89410aacbe9f26b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PlainSchemaITCase.java","status":"modified","additions":5,"deletions":19,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -25,7 +25,6 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n-import java.security.AccessControlException;\n import java.util.List;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n@@ -44,7 +43,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.rest.api.service.SchemaService;\n+import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -159,7 +158,7 @@ public void delete() {\n \n     @Test\n     public void list() {\n-        List<PlainSchemaTO> schemas = schemaService.list(SchemaType.PLAIN, null);\n+        List<PlainSchemaTO> schemas = schemaService.list(SchemaType.PLAIN, new SchemaQuery.Builder().build());\n         assertFalse(schemas.isEmpty());\n         for (PlainSchemaTO schemaTO : schemas) {\n             assertNotNull(schemaTO);\n@@ -169,8 +168,9 @@ public void list() {\n     @Test\n     public void listByAnyTypeClass() {\n         final String clazz = anyTypeService.read(AnyTypeKind.USER.name()).getClasses().get(0);\n-        \n-        List<PlainSchemaTO> userSchemas = schemaService.list(SchemaType.PLAIN, clazz);\n+\n+        List<PlainSchemaTO> userSchemas = schemaService.list(\n+                SchemaType.PLAIN, new SchemaQuery.Builder().anyTypeClass(clazz).build());\n \n         assertTrue(CollectionUtils.exists(userSchemas, new Predicate<PlainSchemaTO>() {\n \n@@ -332,18 +332,4 @@ public void issueSYNCOPE418() {\n             assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidName.name()));\n         }\n     }\n-\n-    @Test\n-    public void anonymous() {\n-        SchemaService unauthenticated = clientFactory.create().getService(SchemaService.class);\n-        try {\n-            unauthenticated.list(SchemaType.VIRTUAL, null);\n-            fail();\n-        } catch (AccessControlException e) {\n-            assertNotNull(e);\n-        }\n-\n-        SchemaService anonymous = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).getService(SchemaService.class);\n-        assertFalse(anonymous.list(SchemaType.VIRTUAL, null).isEmpty());\n-    }\n }"},{"sha":"ec0f275b59d2f4c6e59fa071dd9b57ee99ed8a29","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PropagationTaskITCase.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -25,14 +25,14 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -44,7 +44,7 @@ public class PropagationTaskITCase extends AbstractTaskITCase {\n     public void paginatedList() {\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n                 TaskType.PROPAGATION,\n-                SyncopeClient.getTaskQueryBuilder().page(1).size(2).build());\n+                new TaskQuery.Builder().page(1).size(2).build());\n         assertNotNull(tasks);\n         assertEquals(2, tasks.getResult().size());\n \n@@ -54,7 +54,7 @@ public void paginatedList() {\n \n         tasks = taskService.list(\n                 TaskType.PROPAGATION,\n-                SyncopeClient.getTaskQueryBuilder().page(2).size(2).build());\n+                new TaskQuery.Builder().page(2).size(2).build());\n         assertNotNull(tasks);\n         assertEquals(2, tasks.getPage());\n         assertEquals(2, tasks.getResult().size());\n@@ -65,7 +65,7 @@ public void paginatedList() {\n \n         tasks = taskService.list(\n                 TaskType.PROPAGATION,\n-                SyncopeClient.getTaskQueryBuilder().page(1000).size(2).build());\n+                new TaskQuery.Builder().page(1000).size(2).build());\n         assertNotNull(tasks);\n         assertTrue(tasks.getResult().isEmpty());\n     }\n@@ -87,15 +87,15 @@ public void readExecution() {\n     @Test\n     public void bulkAction() {\n         PagedResult<PropagationTaskTO> before = taskService.list(\n-                TaskType.PROPAGATION, SyncopeClient.getTaskQueryBuilder().build());\n+                TaskType.PROPAGATION, new TaskQuery.Builder().build());\n \n         // create user with testdb resource\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"taskBulk@apache.org\");\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n         createUser(userTO);\n \n         List<PropagationTaskTO> after = new ArrayList<>(\n-                taskService.<PropagationTaskTO>list(TaskType.PROPAGATION, SyncopeClient.getTaskQueryBuilder().build()).\n+                taskService.<PropagationTaskTO>list(TaskType.PROPAGATION, new TaskQuery.Builder().build()).\n                 getResult());\n         after.removeAll(before.getResult());\n         assertFalse(after.isEmpty());\n@@ -109,7 +109,7 @@ public void bulkAction() {\n \n         taskService.bulk(bulkAction);\n \n-        assertFalse(taskService.list(TaskType.PROPAGATION, SyncopeClient.getTaskQueryBuilder().build()).getResult().\n+        assertFalse(taskService.list(TaskType.PROPAGATION, new TaskQuery.Builder().build()).getResult().\n                 containsAll(after));\n     }\n }"},{"sha":"3a907b2b2a3282e02443588af1ea0662cdc13323","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PushTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -52,6 +52,7 @@\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n+import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.common.rest.api.service.TaskService;\n@@ -79,8 +80,7 @@ public void read() {\n \n     @Test\n     public void list() {\n-        PagedResult<PushTaskTO> tasks = taskService.list(\n-                TaskType.PUSH, SyncopeClient.getTaskQueryBuilder().build());\n+        PagedResult<PushTaskTO> tasks = taskService.list(TaskType.PUSH, new TaskQuery.Builder().build());\n         assertFalse(tasks.getResult().isEmpty());\n         for (AbstractTaskTO task : tasks.getResult()) {\n             if (!(task instanceof PushTaskTO)) {"},{"sha":"f2c940cd4113aaf9a3df75418482bbf47a8694c1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ResourceITCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -35,8 +35,6 @@\n import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n-import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.client.lib.builders.ConnObjectTOListQueryBuilder;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n@@ -53,6 +51,7 @@\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.rest.api.beans.ConnObjectTOListQuery;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.junit.FixMethodOrder;\n@@ -542,7 +541,7 @@ public void listConnObjects() {\n         int totalRead = 0;\n         Set<String> read = new HashSet<>();\n         try {\n-            ConnObjectTOListQueryBuilder builder = SyncopeClient.getConnObjectTOListQueryBuilder().size(10);\n+            ConnObjectTOListQuery.Builder builder = new ConnObjectTOListQuery.Builder().size(10);\n             PagedConnObjectTOResult list;\n             do {\n                 list = null;"},{"sha":"a44b5f5ede6517a08640ebdc7c901a0020f40bff","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/RoleITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRoleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRoleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRoleITCase.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -41,7 +41,7 @@ public class RoleITCase extends AbstractITCase {\n \n     public static RoleTO getSampleRoleTO(final String name) {\n         RoleTO role = new RoleTO();\n-        role.setName(name + getUUIDString());\n+        role.setKey(name + getUUIDString());\n         role.getRealms().add(\"/even\");\n         role.getEntitlements().add(StandardEntitlement.LOG_SET_LEVEL);\n \n@@ -60,7 +60,7 @@ public void list() {\n \n     @Test\n     public void read() {\n-        RoleTO roleTO = roleService.read(3L);\n+        RoleTO roleTO = roleService.read(\"Other\");\n         assertNotNull(roleTO);\n         assertTrue(roleTO.getEntitlements().contains(StandardEntitlement.GROUP_READ));\n     }\n@@ -80,7 +80,7 @@ public void create() {\n             assertEquals(ClientExceptionType.InvalidRole, e.getType());\n         }\n \n-        role.setName(\"new\" + getUUIDString());\n+        role.setKey(\"new\" + getUUIDString());\n         role = createRole(role);\n         assertNotNull(role);\n     }"},{"sha":"a8f4d2351fb103e74d6b5cfabc87f4a3bda83d04","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SchedTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -28,7 +28,6 @@\n import java.util.List;\n import java.util.Set;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n@@ -38,6 +37,7 @@\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -56,7 +56,7 @@ public void getJobClasses() {\n     @Test\n     public void list() {\n         PagedResult<SchedTaskTO> tasks =\n-                taskService.list(TaskType.SCHEDULED, SyncopeClient.getTaskQueryBuilder().build());\n+                taskService.list(TaskType.SCHEDULED, new TaskQuery.Builder().build());\n         assertFalse(tasks.getResult().isEmpty());\n         for (AbstractTaskTO task : tasks.getResult()) {\n             if (!(task instanceof SchedTaskTO) || task instanceof SyncTaskTO || task instanceof PushTaskTO) {"},{"sha":"38624b918405581c9a068ac4a7aa98fc125ade9e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SearchITCase.java","status":"modified","additions":19,"deletions":18,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n import org.apache.syncope.common.rest.api.service.RoleService;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -46,7 +47,7 @@ public class SearchITCase extends AbstractITCase {\n     public void searchUser() {\n         // LIKE\n         PagedResult<UserTO> matchingUsers = userService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().\n                         is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query()).build());\n         assertNotNull(matchingUsers);\n@@ -58,7 +59,7 @@ public void searchUser() {\n \n         // ISNULL\n         matchingUsers = userService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().isNull(\"loginDate\").query()).build());\n         assertNotNull(matchingUsers);\n         assertFalse(matchingUsers.getResult().isEmpty());\n@@ -76,7 +77,7 @@ public boolean evaluate(final UserTO user) {\n     @Test\n     public void searchByUsernameAndKey() {\n         PagedResult<UserTO> matchingUsers = userService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().\n                         is(\"username\").equalTo(\"rossini\").and(\"key\").lessThan(2).query()).build());\n         assertNotNull(matchingUsers);\n@@ -88,7 +89,7 @@ public void searchByUsernameAndKey() {\n     @Test\n     public void searchByGroupNameAndKey() {\n         PagedResult<GroupTO> matchingGroups = groupService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().\n                         is(\"name\").equalTo(\"root\").and(\"key\").lessThan(2).query()).build());\n         assertNotNull(matchingGroups);\n@@ -100,7 +101,7 @@ public void searchByGroupNameAndKey() {\n     @Test\n     public void searchByGroup() {\n         PagedResult<UserTO> matchingUsers = userService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(1L).query()).\n                 build());\n         assertNotNull(matchingUsers);\n@@ -123,7 +124,7 @@ public void searchByDynGroup() {\n         assertNotNull(group);\n \n         PagedResult<UserTO> matchingUsers = userService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(group.getKey()).query()).\n                 build());\n         assertNotNull(matchingUsers);\n@@ -141,8 +142,8 @@ public boolean evaluate(final UserTO user) {\n     @Test\n     public void searchByRole() {\n         PagedResult<UserTO> matchingUsers = userService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n-                fiql(SyncopeClient.getUserSearchConditionBuilder().inRoles(3L).query()).\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().inRoles(\"Other\").query()).\n                 build());\n         assertNotNull(matchingUsers);\n         assertFalse(matchingUsers.getResult().isEmpty());\n@@ -165,7 +166,7 @@ public void searchByDynRole() {\n         assertNotNull(role);\n \n         PagedResult<UserTO> matchingUsers = userService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().inRoles(role.getKey()).query()).\n                 build());\n         assertNotNull(matchingUsers);\n@@ -183,7 +184,7 @@ public boolean evaluate(final UserTO user) {\n     @Test\n     public void searchUserByResourceName() {\n         PagedResult<UserTO> matchingUsers = userService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().hasResources(RESOURCE_NAME_MAPPINGS2).query()).\n                 build());\n         assertNotNull(matchingUsers);\n@@ -202,7 +203,7 @@ public boolean evaluate(final UserTO user) {\n     public void paginatedSearch() {\n         // LIKE\n         PagedResult<UserTO> matchingUsers = userService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().\n                         is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query()).page(1).size(2).build());\n         assertNotNull(matchingUsers);\n@@ -214,7 +215,7 @@ public void paginatedSearch() {\n \n         // ISNULL\n         matchingUsers = userService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().isNull(\"loginDate\").query()).page(2).size(2).\n                 build());\n         assertNotNull(matchingUsers);\n@@ -225,7 +226,7 @@ public void paginatedSearch() {\n     @Test\n     public void searchByBooleanAnyCond() {\n         PagedResult<GroupTO> matchingGroups = groupService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getGroupSearchConditionBuilder().is(\"show\").equalTo(\"true\").query()).build());\n         assertNotNull(matchingGroups);\n         assertFalse(matchingGroups.getResult().isEmpty());\n@@ -234,7 +235,7 @@ public void searchByBooleanAnyCond() {\n     @Test\n     public void searchByRelationshipAnyCond() {\n         PagedResult<GroupTO> matchingGroups = groupService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getGroupSearchConditionBuilder().is(\"userOwner\").equalTo(5).query()).build());\n         assertNotNull(matchingGroups);\n         assertEquals(1, matchingGroups.getResult().size());\n@@ -244,7 +245,7 @@ public void searchByRelationshipAnyCond() {\n     @Test\n     public void nested() {\n         PagedResult<UserTO> matchingUsers = userService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(\"((fullname==*o*,fullname==*i*);$resources!=ws-target-resource-1)\").page(1).size(2).build());\n         assertNotNull(matchingUsers);\n \n@@ -257,7 +258,7 @@ public void nested() {\n     @Test\n     public void searchByType() {\n         PagedResult<AnyObjectTO> matching = anyObjectService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getAnyObjectSearchConditionBuilder().type(\"PRINTER\").query()).build());\n         assertNotNull(matching);\n \n@@ -267,7 +268,7 @@ public void searchByType() {\n         }\n \n         matching = anyObjectService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getAnyObjectSearchConditionBuilder().type(\"UNEXISTING\").query()).build());\n         assertNotNull(matching);\n \n@@ -277,7 +278,7 @@ public void searchByType() {\n     @Test\n     public void orderBy() {\n         PagedResult<UserTO> matchingUsers = userService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"userId\").equalTo(\"*@apache.org\").query()).\n                 orderBy(SyncopeClient.getOrderByClauseBuilder().asc(\"status\").desc(\"firstname\").build()).build());\n         assertNotNull(matchingUsers);"},{"sha":"e94001fb48aa5f0e24967b3e310289147c8c1baf","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SyncTaskITCase.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -64,6 +64,8 @@\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.SyncMode;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n+import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.core.misc.security.Encryptor;\n import org.apache.syncope.core.provisioning.java.sync.DBPasswordSyncActions;\n@@ -95,8 +97,7 @@ public void getSyncActionsClasses() {\n \n     @Test\n     public void list() {\n-        PagedResult<SyncTaskTO> tasks =\n-                taskService.list(TaskType.SYNCHRONIZATION, SyncopeClient.getTaskQueryBuilder().build());\n+        PagedResult<SyncTaskTO> tasks = taskService.list(TaskType.SYNCHRONIZATION, new TaskQuery.Builder().build());\n         assertFalse(tasks.getResult().isEmpty());\n         for (AbstractTaskTO task : tasks.getResult()) {\n             if (!(task instanceof SyncTaskTO)) {\n@@ -163,7 +164,7 @@ public void sync() throws Exception {\n         // -----------------------------\n         try {\n             int usersPre = userService.list(\n-                    SyncopeClient.getAnyListQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                    new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                     page(1).size(1).build()).getTotalCount();\n             assertNotNull(usersPre);\n \n@@ -219,7 +220,7 @@ public boolean evaluate(final AttrTO attributeTO) {\n \n             // check for sync results\n             int usersPost = userService.list(\n-                    SyncopeClient.getAnyListQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                    new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                     page(1).size(1).build()).getTotalCount();\n             assertNotNull(usersPost);\n             assertEquals(usersPre + 8, usersPost);\n@@ -294,7 +295,7 @@ public void reconcileFromDB() {\n      */\n     private void ldapCleanup() {\n         PagedResult<GroupTO> matchingGroups = groupService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getGroupSearchConditionBuilder().is(\"name\").equalTo(\"testLDAPGroup\").query()).\n                 build());\n         if (matchingGroups.getSize() > 0) {\n@@ -308,7 +309,7 @@ private void ldapCleanup() {\n             }\n         }\n         PagedResult<UserTO> matchingUsers = userService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"syncFromLDAP\").query()).\n                 build());\n         if (matchingUsers.getSize() > 0) {\n@@ -336,15 +337,15 @@ public void reconcileFromLDAP() {\n \n         // 2. verify that synchronized group is found\n         PagedResult<GroupTO> matchingGroups = groupService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getGroupSearchConditionBuilder().is(\"name\").equalTo(\"testLDAPGroup\").query()).\n                 build());\n         assertNotNull(matchingGroups);\n         assertEquals(1, matchingGroups.getResult().size());\n \n         // 3. verify that synchronized user is found\n         PagedResult<UserTO> matchingUsers = userService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"syncFromLDAP\").query()).\n                 build());\n         assertNotNull(matchingUsers);\n@@ -413,7 +414,7 @@ public boolean evaluate(final MappingItemTO object) {\n \n             // 3. unlink any existing printer and delete from Syncope (printer is now only on external resource)\n             PagedResult<AnyObjectTO> matchingPrinters = anyObjectService.search(\n-                    SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                    new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                     fiql(SyncopeClient.getAnyObjectSearchConditionBuilder().type(\"PRINTER\").and().\n                             is(\"location\").equalTo(\"sync*\").query()).build());\n             assertTrue(matchingPrinters.getSize() > 0);\n@@ -432,7 +433,7 @@ public boolean evaluate(final MappingItemTO object) {\n             // 5. verify that printer was re-created in Syncope (implies that location does not start with given prefix,\n             // hence PrefixMappingItemTransformer was applied during sync)\n             matchingPrinters = anyObjectService.search(\n-                    SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                    new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                     fiql(SyncopeClient.getAnyObjectSearchConditionBuilder().type(\"PRINTER\").and().\n                             is(\"location\").equalTo(\"sync*\").query()).build());\n             assertTrue(matchingPrinters.getSize() > 0);"},{"sha":"e8ccf7df5cb5e8e63961337403f458120ec30a78","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":16,"deletions":14,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -91,6 +91,8 @@\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.Preference;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n+import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.syncope.common.rest.api.service.UserService;\n@@ -149,7 +151,7 @@ public void createUserWithNoPropagation() {\n         // get task list\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n                 TaskType.PROPAGATION,\n-                SyncopeClient.getTaskQueryBuilder().page(1).size(1).build());\n+                new TaskQuery.Builder().page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -165,7 +167,7 @@ public void createUserWithNoPropagation() {\n         // get the new task list\n         tasks = taskService.list(\n                 TaskType.PROPAGATION,\n-                SyncopeClient.getTaskQueryBuilder().page(1).size(1).build());\n+                new TaskQuery.Builder().page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -355,7 +357,7 @@ public void create() {\n         // get task list\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n                 TaskType.PROPAGATION,\n-                SyncopeClient.getTaskQueryBuilder().page(1).size(1).build());\n+                new TaskQuery.Builder().page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -397,7 +399,7 @@ public void create() {\n         // get the new task list\n         tasks = taskService.list(\n                 TaskType.PROPAGATION,\n-                SyncopeClient.getTaskQueryBuilder().page(1).size(1).build());\n+                new TaskQuery.Builder().page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -543,7 +545,7 @@ public void deleteByUsername() {\n     @Test\n     public void list() {\n         PagedResult<UserTO> users = userService.list(\n-                SyncopeClient.getAnyListQueryBuilder().realm(SyncopeConstants.ROOT_REALM).build());\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).build());\n         assertNotNull(users);\n         assertFalse(users.getResult().isEmpty());\n \n@@ -555,7 +557,7 @@ public void list() {\n     @Test\n     public void paginatedList() {\n         PagedResult<UserTO> users = userService.list(\n-                SyncopeClient.getAnyListQueryBuilder().realm(SyncopeConstants.ROOT_REALM).page(1).size(2).build());\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).page(1).size(2).build());\n         assertNotNull(users);\n         assertFalse(users.getResult().isEmpty());\n         assertEquals(2, users.getResult().size());\n@@ -564,13 +566,13 @@ public void paginatedList() {\n             assertNotNull(user);\n         }\n \n-        users = userService.list(SyncopeClient.getAnyListQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+        users = userService.list(new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 page(2).size(2).build());\n         assertNotNull(users);\n         assertEquals(2, users.getPage());\n         assertEquals(2, users.getResult().size());\n \n-        users = userService.list(SyncopeClient.getAnyListQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+        users = userService.list(new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 page(100).size(2).build());\n         assertNotNull(users);\n         assertTrue(users.getResult().isEmpty());\n@@ -692,7 +694,7 @@ public void update() {\n     @Test\n     public void updatePasswordOnly() {\n         int beforeTasks = taskService.list(TaskType.PROPAGATION,\n-                SyncopeClient.getTaskQueryBuilder().page(1).size(1).build()).getTotalCount();\n+                new TaskQuery.Builder().page(1).size(1).build()).getTotalCount();\n         assertFalse(beforeTasks <= 0);\n \n         UserTO userTO = getUniqueSampleTO(\"pwdonly@t.com\");\n@@ -710,7 +712,7 @@ public void updatePasswordOnly() {\n         assertNotNull(userTO.getChangePwdDate());\n \n         int afterTasks = taskService.list(TaskType.PROPAGATION,\n-                SyncopeClient.getTaskQueryBuilder().page(1).size(1).build()).getTotalCount();\n+                new TaskQuery.Builder().page(1).size(1).build()).getTotalCount();\n         assertFalse(beforeTasks <= 0);\n \n         assertTrue(beforeTasks < afterTasks);\n@@ -722,7 +724,7 @@ public void verifyTaskRegistration() {\n         // get task list\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n                 TaskType.PROPAGATION,\n-                SyncopeClient.getTaskQueryBuilder().page(1).size(1).build());\n+                new TaskQuery.Builder().page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -743,7 +745,7 @@ public void verifyTaskRegistration() {\n         // get the new task list\n         tasks = taskService.list(\n                 TaskType.PROPAGATION,\n-                SyncopeClient.getTaskQueryBuilder().page(1).size(1).build());\n+                new TaskQuery.Builder().page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -769,7 +771,7 @@ public void verifyTaskRegistration() {\n         // get the new task list\n         tasks = taskService.list(\n                 TaskType.PROPAGATION,\n-                SyncopeClient.getTaskQueryBuilder().page(1).size(1).build());\n+                new TaskQuery.Builder().page(1).size(1).build());\n \n         maxKey = newMaxKey;\n         newMaxKey = tasks.getResult().iterator().next().getKey();\n@@ -791,7 +793,7 @@ public void verifyTaskRegistration() {\n         // get the new task list\n         tasks = taskService.list(\n                 TaskType.PROPAGATION,\n-                SyncopeClient.getTaskQueryBuilder().page(1).size(1).build());\n+                new TaskQuery.Builder().page(1).size(1).build());\n \n         maxKey = newMaxKey;\n         newMaxKey = tasks.getResult().iterator().next().getKey();"},{"sha":"150b0bc3d7f75e525d71793184d8f6544d5143bc","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserWorkflowITCase.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserWorkflowITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserWorkflowITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserWorkflowITCase.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -30,8 +30,8 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.patch.LongPatchItem;\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n@@ -76,17 +76,17 @@ public void createWithReject() {\n         assertNotNull(form.getTaskId());\n         assertNull(form.getOwner());\n \n-        // 3. claim task as rossini, with role 2 granting entitlement to claim forms but not in group 7,\n+        // 3. claim task as rossini, with role \"User manager\" granting entitlement to claim forms but not in group 7,\n         // designated for approval in workflow definition: fail\n         UserTO rossini = userService.read(1L);\n-        if (!rossini.getRoles().contains(2L)) {\n+        if (!rossini.getRoles().contains(\"User manager\")) {\n             UserPatch userPatch = new UserPatch();\n             userPatch.setKey(1L);\n-            userPatch.getRoles().add(new LongPatchItem.Builder().\n-                    operation(PatchOperation.ADD_REPLACE).value(2L).build());\n+            userPatch.getRoles().add(new StringPatchItem.Builder().\n+                    operation(PatchOperation.ADD_REPLACE).value(\"User manager\").build());\n             rossini = updateUser(userPatch).getAny();\n         }\n-        assertTrue(rossini.getRoles().contains(2L));\n+        assertTrue(rossini.getRoles().contains(\"User manager\"));\n \n         UserWorkflowService userService2 = clientFactory.create(\"rossini\", ADMIN_PWD).\n                 getService(UserWorkflowService.class);\n@@ -97,7 +97,7 @@ public void createWithReject() {\n             assertEquals(ClientExceptionType.Workflow, e.getType());\n         }\n \n-        // 4. claim task from bellini, with role 2 and in group 7\n+        // 4. claim task from bellini, with role \"User manager\" and in group 7\n         UserWorkflowService userService3 = clientFactory.create(\"bellini\", ADMIN_PWD).\n                 getService(UserWorkflowService.class);\n         form = userService3.claimForm(form.getTaskId());"},{"sha":"f19f9dd81d77118d70dd013851d0108b7c1f0ec8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/VirSchemaITCase.java","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b738d3e94877528cb74fc1b0b75c4c11e83aa16d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java?ref=b738d3e94877528cb74fc1b0b75c4c11e83aa16d","patch":"@@ -18,12 +18,14 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n+import static org.apache.syncope.fit.core.reference.AbstractITCase.clientFactory;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import java.security.AccessControlException;\n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -32,6 +34,8 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n+import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -41,7 +45,7 @@ public class VirSchemaITCase extends AbstractITCase {\n \n     @Test\n     public void list() {\n-        List<VirSchemaTO> vSchemas = schemaService.list(SchemaType.VIRTUAL, null);\n+        List<VirSchemaTO> vSchemas = schemaService.list(SchemaType.VIRTUAL, new SchemaQuery.Builder().build());\n         assertFalse(vSchemas.isEmpty());\n         for (VirSchemaTO vSchemaTO : vSchemas) {\n             assertNotNull(vSchemaTO);\n@@ -87,6 +91,20 @@ public void crud() {\n         assertTrue(csv.getProvisions().get(0).getVirSchemas().isEmpty());\n     }\n \n+    @Test\n+    public void anonymous() {\n+        SchemaService unauthenticated = clientFactory.create().getService(SchemaService.class);\n+        try {\n+            unauthenticated.list(SchemaType.VIRTUAL, new SchemaQuery.Builder().build());\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n+\n+        SchemaService anonymous = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).getService(SchemaService.class);\n+        assertFalse(anonymous.list(SchemaType.VIRTUAL, new SchemaQuery.Builder().build()).isEmpty());\n+    }\n+\n     @Test\n     public void issueSYNCOPE323() {\n         VirSchemaTO actual = schemaService.read(SchemaType.VIRTUAL, \"virtualdata\");"}]}