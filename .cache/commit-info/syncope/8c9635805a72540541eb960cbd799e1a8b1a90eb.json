{"sha":"8c9635805a72540541eb960cbd799e1a8b1a90eb","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjhjOTYzNTgwNWE3MjU0MDU0MWViOTYwY2JkNzk5ZTFhOGIxYTkwZWI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-02-15T11:57:12Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-02-15T11:57:34Z"},"message":"[SYNCOPE-1015] Added the conf parameter 'authentication.attributes' to use alternate attrs for authentication","tree":{"sha":"7dabc7fd385e4ccfb76fccd37e94677b831336a8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7dabc7fd385e4ccfb76fccd37e94677b831336a8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8c9635805a72540541eb960cbd799e1a8b1a90eb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8c9635805a72540541eb960cbd799e1a8b1a90eb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8c9635805a72540541eb960cbd799e1a8b1a90eb","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8c9635805a72540541eb960cbd799e1a8b1a90eb/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"e96d8abb0b9857f33c58b3cc0c9654fab58d31b2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e96d8abb0b9857f33c58b3cc0c9654fab58d31b2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e96d8abb0b9857f33c58b3cc0c9654fab58d31b2"}],"stats":{"total":287,"additions":151,"deletions":136},"files":[{"sha":"e208c706e01f24001351476d408a65d591a90e20","filename":"core/persistence-jpa/src/main/resources/domains/MasterContent.xml","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8c9635805a72540541eb960cbd799e1a8b1a90eb/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8c9635805a72540541eb960cbd799e1a8b1a90eb/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml?ref=8c9635805a72540541eb960cbd799e1a8b1a90eb","patch":"@@ -90,6 +90,15 @@ under the License.\n   <CPlainAttrValue id=\"b5e8e79d-8039-4318-9698-fe5e181ebe98\"\n                    attribute_id=\"e5a712ad-53fd-4102-ba55-fb45caed5f7b\" booleanValue=\"1\"/>\n \n+  <SyncopeSchema id=\"authentication.attributes\"/>\n+  <PlainSchema id=\"authentication.attributes\" type=\"String\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"577c6c4d-7149-43c2-9821-9ab4510effbd\"\n+              owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"authentication.attributes\"/>\n+  <CPlainAttrValue id=\"c13660b5-926c-47ea-946d-52db32dd492b\"\n+                   attribute_id=\"577c6c4d-7149-43c2-9821-9ab4510effbd\" stringValue=\"username\"/>\n+  <CPlainAttrValue id=\"0f112dbd-00d4-441c-b732-331e7f348f8a\"\n+                   attribute_id=\"577c6c4d-7149-43c2-9821-9ab4510effbd\" stringValue=\"email\"/>\n+\n   <SyncopeSchema id=\"authentication.statuses\"/>\n   <PlainSchema id=\"authentication.statuses\" type=\"String\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"888ae8e1-a295-4ee2-a15e-31dbf6dfc3f9\""},{"sha":"b20bc4b44714808974b5a62e81e72a90c5c88fba","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8c9635805a72540541eb960cbd799e1a8b1a90eb/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8c9635805a72540541eb960cbd799e1a8b1a90eb/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java?ref=8c9635805a72540541eb960cbd799e1a8b1a90eb","patch":"@@ -47,7 +47,7 @@ public class PlainSchemaTest extends AbstractTest {\n     @Test\n     public void findAll() {\n         List<PlainSchema> schemas = plainSchemaDAO.findAll();\n-        assertEquals(39, schemas.size());\n+        assertEquals(40, schemas.size());\n     }\n \n     @Test"},{"sha":"7337f4fed930a7f9eea83970cf2d662653a89259","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8c9635805a72540541eb960cbd799e1a8b1a90eb/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8c9635805a72540541eb960cbd799e1a8b1a90eb/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=8c9635805a72540541eb960cbd799e1a8b1a90eb","patch":"@@ -90,6 +90,15 @@ under the License.\n   <CPlainAttrValue id=\"b5e8e79d-8039-4318-9698-fe5e181ebe98\"\n                    attribute_id=\"e5a712ad-53fd-4102-ba55-fb45caed5f7b\" booleanValue=\"1\"/>\n \n+  <SyncopeSchema id=\"authentication.attributes\"/>\n+  <PlainSchema id=\"authentication.attributes\" type=\"String\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"577c6c4d-7149-43c2-9821-9ab4510effbd\"\n+              owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"authentication.attributes\"/>\n+  <CPlainAttrValue id=\"c13660b5-926c-47ea-946d-52db32dd492b\"\n+                   attribute_id=\"577c6c4d-7149-43c2-9821-9ab4510effbd\" stringValue=\"username\"/>\n+  <CPlainAttrValue id=\"0f112dbd-00d4-441c-b732-331e7f348f8a\"\n+                   attribute_id=\"577c6c4d-7149-43c2-9821-9ab4510effbd\" stringValue=\"email\"/>\n+\n   <SyncopeSchema id=\"authentication.statuses\"/>\n   <PlainSchema id=\"authentication.statuses\" type=\"String\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"888ae8e1-a295-4ee2-a15e-31dbf6dfc3f9\""},{"sha":"e8a919dfee4d57f35acc8a55489e03547e414653","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":75,"deletions":69,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8c9635805a72540541eb960cbd799e1a8b1a90eb/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8c9635805a72540541eb960cbd799e1a8b1a90eb/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=8c9635805a72540541eb960cbd799e1a8b1a90eb","patch":"@@ -19,10 +19,12 @@\n package org.apache.syncope.core.spring.security;\n \n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import javax.annotation.Resource;\n@@ -33,17 +35,19 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n-import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.DomainDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Domain;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n@@ -61,7 +65,6 @@\n import org.springframework.security.authentication.AuthenticationServiceException;\n import org.springframework.security.authentication.DisabledException;\n import org.springframework.security.core.Authentication;\n-import org.springframework.security.core.userdetails.UsernameNotFoundException;\n import org.springframework.transaction.annotation.Transactional;\n \n /**\n@@ -100,6 +103,9 @@ public class AuthDataAccessor {\n     @Autowired\n     protected AnyTypeDAO anyTypeDAO;\n \n+    @Autowired\n+    protected AnySearchDAO searchDAO;\n+\n     @Autowired\n     protected ConnectorFactory connFactory;\n \n@@ -126,13 +132,32 @@ public Domain findDomain(final String key) {\n      * @return {@code null} if no matching user was found, authentication result otherwise\n      */\n     @Transactional(noRollbackFor = DisabledException.class)\n-    public Pair<String, Boolean> authenticate(final Authentication authentication) {\n-        String key = null;\n-        Boolean authenticated = null;\n+    public Pair<User, Boolean> authenticate(final Authentication authentication) {\n+        User user = null;\n+\n+        CPlainAttr authAttrs = confDAO.find(\"authentication.attributes\");\n+        List<String> authAttrValues = authAttrs == null\n+                ? Collections.singletonList(\"username\")\n+                : authAttrs.getValuesAsStrings();\n+        for (int i = 0; user == null && i < authAttrValues.size(); i++) {\n+            if (\"username\".equals(authAttrValues.get(i))) {\n+                user = userDAO.findByUsername(authentication.getName());\n+            } else {\n+                AttributeCond attrCond = new AttributeCond(AttributeCond.Type.EQ);\n+                attrCond.setSchema(authAttrValues.get(i));\n+                attrCond.setExpression(authentication.getName());\n+                List<User> users = searchDAO.search(SearchCond.getLeafCond(attrCond), AnyTypeKind.USER);\n+                if (users.size() == 1) {\n+                    user = users.get(0);\n+                } else {\n+                    LOG.warn(\"Value {} provided for {} does not uniquely identifies an user\",\n+                            authentication.getName(), authAttrValues.get(i));\n+                }\n+            }\n+        }\n \n-        User user = userDAO.findByUsername(authentication.getName());\n+        Boolean authenticated = null;\n         if (user != null) {\n-            key = user.getKey();\n             authenticated = false;\n \n             if (user.isSuspended() != null && user.isSuspended()) {\n@@ -167,7 +192,7 @@ public Pair<String, Boolean> authenticate(final Authentication authentication) {\n             }\n         }\n \n-        return ImmutablePair.of(key, authenticated);\n+        return ImmutablePair.of(user, authenticated);\n     }\n \n     protected boolean authenticate(final User user, final String password) {\n@@ -239,79 +264,60 @@ public void audit(\n     }\n \n     @Transactional\n-    public Set<SyncopeGrantedAuthority> load(final String username) {\n-        final Set<SyncopeGrantedAuthority> authorities = new HashSet<>();\n-        if (anonymousUser.equals(username)) {\n-            authorities.add(new SyncopeGrantedAuthority(StandardEntitlement.ANONYMOUS));\n-        } else if (adminUser.equals(username)) {\n-            CollectionUtils.collect(\n-                    EntitlementsHolder.getInstance().getValues(),\n-                    new Transformer<String, SyncopeGrantedAuthority>() {\n-\n-                @Override\n-                public SyncopeGrantedAuthority transform(final String entitlement) {\n-                    return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n-                }\n-            }, authorities);\n+    public Set<SyncopeGrantedAuthority> getAuthorities(final User user) {\n+        Set<SyncopeGrantedAuthority> authorities = new HashSet<>();\n+        if (user.isMustChangePassword()) {\n+            authorities.add(new SyncopeGrantedAuthority(StandardEntitlement.MUST_CHANGE_PASSWORD));\n         } else {\n-            User user = userDAO.findByUsername(username);\n-            if (user == null) {\n-                throw new UsernameNotFoundException(\"Could not find any user with id \" + username);\n-            }\n-\n-            if (user.isMustChangePassword()) {\n-                authorities.add(new SyncopeGrantedAuthority(StandardEntitlement.MUST_CHANGE_PASSWORD));\n-            } else {\n-                final Map<String, Set<String>> entForRealms = new HashMap<>();\n-\n-                // Give entitlements as assigned by roles (with realms, where applicable) - assigned either\n-                // statically and dynamically\n-                for (final Role role : userDAO.findAllRoles(user)) {\n-                    IterableUtils.forEach(role.getEntitlements(), new Closure<String>() {\n-\n-                        @Override\n-                        public void execute(final String entitlement) {\n-                            Set<String> realms = entForRealms.get(entitlement);\n-                            if (realms == null) {\n-                                realms = new HashSet<>();\n-                                entForRealms.put(entitlement, realms);\n-                            }\n-\n-                            CollectionUtils.collect(role.getRealms(), new Transformer<Realm, String>() {\n+            final Map<String, Set<String>> entForRealms = new HashMap<>();\n \n-                                @Override\n-                                public String transform(final Realm realm) {\n-                                    return realm.getFullPath();\n-                                }\n-                            }, realms);\n-                        }\n-                    });\n-                }\n-\n-                // Give group entitlements for owned groups\n-                for (Group group : groupDAO.findOwnedByUser(user.getKey())) {\n-                    for (String entitlement : Arrays.asList(\n-                            StandardEntitlement.GROUP_READ,\n-                            StandardEntitlement.GROUP_UPDATE,\n-                            StandardEntitlement.GROUP_DELETE)) {\n+            // Give entitlements as assigned by roles (with realms, where applicable) - assigned either\n+            // statically and dynamically\n+            for (final Role role : userDAO.findAllRoles(user)) {\n+                IterableUtils.forEach(role.getEntitlements(), new Closure<String>() {\n \n+                    @Override\n+                    public void execute(final String entitlement) {\n                         Set<String> realms = entForRealms.get(entitlement);\n                         if (realms == null) {\n                             realms = new HashSet<>();\n                             entForRealms.put(entitlement, realms);\n                         }\n \n-                        realms.add(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey()));\n+                        CollectionUtils.collect(role.getRealms(), new Transformer<Realm, String>() {\n+\n+                            @Override\n+                            public String transform(final Realm realm) {\n+                                return realm.getFullPath();\n+                            }\n+                        }, realms);\n+                    }\n+                });\n+            }\n+\n+            // Give group entitlements for owned groups\n+            for (Group group : groupDAO.findOwnedByUser(user.getKey())) {\n+                for (String entitlement : Arrays.asList(\n+                        StandardEntitlement.GROUP_READ,\n+                        StandardEntitlement.GROUP_UPDATE,\n+                        StandardEntitlement.GROUP_DELETE)) {\n+\n+                    Set<String> realms = entForRealms.get(entitlement);\n+                    if (realms == null) {\n+                        realms = new HashSet<>();\n+                        entForRealms.put(entitlement, realms);\n                     }\n-                }\n \n-                // Finally normalize realms for each given entitlement and generate authorities\n-                for (Map.Entry<String, Set<String>> entry : entForRealms.entrySet()) {\n-                    SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entry.getKey());\n-                    authority.addRealms(RealmUtils.normalize(entry.getValue()));\n-                    authorities.add(authority);\n+                    realms.add(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey()));\n                 }\n             }\n+\n+            // Finally normalize realms for each given entitlement and generate authorities\n+            for (Map.Entry<String, Set<String>> entry : entForRealms.entrySet()) {\n+                SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entry.getKey());\n+                authority.addRealms(RealmUtils.normalize(entry.getValue()));\n+                authorities.add(authority);\n+            }\n         }\n \n         return authorities;"},{"sha":"9f6a3ed4a78249bfd5fcb18d3f3c68e480e2c9dd","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeAuthenticationProvider.java","status":"modified","additions":52,"deletions":25,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8c9635805a72540541eb960cbd799e1a8b1a90eb/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8c9635805a72540541eb960cbd799e1a8b1a90eb/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=8c9635805a72540541eb960cbd799e1a8b1a90eb","patch":"@@ -18,15 +18,22 @@\n  */\n package org.apache.syncope.core.spring.security;\n \n+import java.util.HashSet;\n+import java.util.Set;\n import javax.annotation.Resource;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.spring.security.AuthContextUtils.Executable;\n import org.apache.syncope.core.persistence.api.entity.Domain;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -36,7 +43,6 @@\n import org.springframework.security.authentication.BadCredentialsException;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.Authentication;\n-import org.springframework.security.core.userdetails.UserDetailsService;\n \n @Configurable\n public class SyncopeAuthenticationProvider implements AuthenticationProvider {\n@@ -61,8 +67,6 @@ public class SyncopeAuthenticationProvider implements AuthenticationProvider {\n \n     protected String anonymousKey;\n \n-    protected UserDetailsService userDetailsService;\n-\n     protected final Encryptor encryptor = Encryptor.getInstance();\n \n     /**\n@@ -86,10 +90,6 @@ public void setAnonymousKey(final String anonymousKey) {\n         this.anonymousKey = anonymousKey;\n     }\n \n-    public void setUserDetailsService(final UserDetailsService syncopeUserDetailsService) {\n-        this.userDetailsService = syncopeUserDetailsService;\n-    }\n-\n     @Override\n     public Authentication authenticate(final Authentication authentication) {\n         String domainKey = SyncopeAuthenticationDetails.class.cast(authentication.getDetails()).getDomain();\n@@ -98,10 +98,18 @@ public Authentication authenticate(final Authentication authentication) {\n         }\n         SyncopeAuthenticationDetails.class.cast(authentication.getDetails()).setDomain(domainKey);\n \n+        final String[] username = new String[1];\n         Boolean authenticated;\n+        final Set<SyncopeGrantedAuthority> authorities = new HashSet<>();\n+\n         if (anonymousUser.equals(authentication.getName())) {\n+            username[0] = anonymousUser;\n             authenticated = authentication.getCredentials().toString().equals(anonymousKey);\n+            if (authenticated) {\n+                authorities.add(new SyncopeGrantedAuthority(StandardEntitlement.ANONYMOUS));\n+            }\n         } else if (adminUser.equals(authentication.getName())) {\n+            username[0] = adminUser;\n             if (SyncopeConstants.MASTER_DOMAIN.equals(domainKey)) {\n                 authenticated = encryptor.verify(\n                         authentication.getCredentials().toString(),\n@@ -123,27 +131,47 @@ public Boolean exec() {\n                     }\n                 });\n             }\n+            if (authenticated) {\n+                CollectionUtils.collect(\n+                        EntitlementsHolder.getInstance().getValues(),\n+                        new Transformer<String, SyncopeGrantedAuthority>() {\n+\n+                    @Override\n+                    public SyncopeGrantedAuthority transform(final String entitlement) {\n+                        return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n+                    }\n+                }, authorities);\n+            }\n         } else {\n-            final Pair<String, Boolean> authResult =\n-                    AuthContextUtils.execWithAuthContext(domainKey, new Executable<Pair<String, Boolean>>() {\n+            final Pair<User, Boolean> authResult =\n+                    AuthContextUtils.execWithAuthContext(domainKey, new Executable<Pair<User, Boolean>>() {\n \n                         @Override\n-                        public Pair<String, Boolean> exec() {\n+                        public Pair<User, Boolean> exec() {\n                             return dataAccessor.authenticate(authentication);\n                         }\n                     });\n             authenticated = authResult.getValue();\n-            if (authenticated != null && !authenticated) {\n-                AuthContextUtils.execWithAuthContext(domainKey, new Executable<Void>() {\n+            if (authResult.getLeft() != null && authResult.getRight() != null) {\n+                username[0] = authResult.getLeft().getUsername();\n \n-                    @Override\n-                    public Void exec() {\n-                        provisioningManager.internalSuspend(authResult.getKey());\n-                        return null;\n-                    }\n-                });\n+                if (authResult.getRight()) {\n+                    authorities.addAll(dataAccessor.getAuthorities(authResult.getLeft()));\n+                } else {\n+                    AuthContextUtils.execWithAuthContext(domainKey, new Executable<Void>() {\n+\n+                        @Override\n+                        public Void exec() {\n+                            provisioningManager.internalSuspend(authResult.getLeft().getKey());\n+                            return null;\n+                        }\n+                    });\n+                }\n             }\n         }\n+        if (username[0] == null) {\n+            username[0] = authentication.getPrincipal().toString();\n+        }\n \n         final boolean isAuthenticated = authenticated != null && authenticated;\n         UsernamePasswordAuthenticationToken token;\n@@ -154,10 +182,9 @@ public Void exec() {\n                 @Override\n                 public UsernamePasswordAuthenticationToken exec() {\n                     UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(\n-                            authentication.getPrincipal(),\n+                            username[0],\n                             null,\n-                            userDetailsService.loadUserByUsername(authentication.getPrincipal().toString()).\n-                            getAuthorities());\n+                            authorities);\n                     token.setDetails(authentication.getDetails());\n \n                     dataAccessor.audit(AuditElements.EventCategoryType.LOGIC,\n@@ -174,7 +201,7 @@ public UsernamePasswordAuthenticationToken exec() {\n             });\n \n             LOG.debug(\"User {} successfully authenticated, with entitlements {}\",\n-                    authentication.getPrincipal(), token.getAuthorities());\n+                    username[0], token.getAuthorities());\n         } else {\n             AuthContextUtils.execWithAuthContext(domainKey, new Executable<Void>() {\n \n@@ -188,14 +215,14 @@ public Void exec() {\n                             null,\n                             isAuthenticated,\n                             authentication,\n-                            \"User \" + authentication.getPrincipal() + \" not authenticated\");\n+                            \"User \" + username[0] + \" not authenticated\");\n                     return null;\n                 }\n             });\n \n-            LOG.debug(\"User {} not authenticated\", authentication.getPrincipal());\n+            LOG.debug(\"User {} not authenticated\", username[0]);\n \n-            throw new BadCredentialsException(\"User \" + authentication.getPrincipal() + \" not authenticated\");\n+            throw new BadCredentialsException(\"User \" + username[0] + \" not authenticated\");\n         }\n \n         return token;"},{"sha":"544fc996107b916f4adcd1413f4bd7fe5a3c48a4","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeUserDetailsService.java","status":"removed","additions":0,"deletions":37,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e96d8abb0b9857f33c58b3cc0c9654fab58d31b2/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeUserDetailsService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e96d8abb0b9857f33c58b3cc0c9654fab58d31b2/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeUserDetailsService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeUserDetailsService.java?ref=e96d8abb0b9857f33c58b3cc0c9654fab58d31b2","patch":"@@ -1,37 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.spring.security;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Configurable;\n-import org.springframework.security.core.userdetails.User;\n-import org.springframework.security.core.userdetails.UserDetails;\n-import org.springframework.security.core.userdetails.UserDetailsService;\n-\n-@Configurable\n-public class SyncopeUserDetailsService implements UserDetailsService {\n-\n-    @Autowired\n-    protected AuthDataAccessor dataAccessor;\n-\n-    @Override\n-    public UserDetails loadUserByUsername(final String username) {\n-        return new User(username, \"<PASSWORD_PLACEHOLDER>\", dataAccessor.load(username));\n-    }\n-}"},{"sha":"3aa6079d1bc00f1ff135e8f39f138e88af667027","filename":"core/spring/src/main/resources/securityContext.xml","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8c9635805a72540541eb960cbd799e1a8b1a90eb/core%2Fspring%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8c9635805a72540541eb960cbd799e1a8b1a90eb/core%2Fspring%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml?ref=8c9635805a72540541eb960cbd799e1a8b1a90eb","patch":"@@ -86,14 +86,11 @@ under the License.\n \n   <bean class=\"org.apache.syncope.core.spring.security.AuthDataAccessor\"/>\n \n-  <bean id=\"syncopeUserDetailsService\" class=\"org.apache.syncope.core.spring.security.SyncopeUserDetailsService\"/>\n-\n   <bean id=\"syncopeAuthenticationProvider\"\n         class=\"org.apache.syncope.core.spring.security.SyncopeAuthenticationProvider\">\n     <property name=\"adminPassword\" value=\"${adminPassword}\"/>\n     <property name=\"adminPasswordAlgorithm\" value=\"${adminPasswordAlgorithm}\"/>\n     <property name=\"anonymousKey\" value=\"${anonymousKey}\"/>\n-    <property name=\"userDetailsService\" ref=\"syncopeUserDetailsService\"/>\n   </bean>\n \n   <security:authentication-manager>"},{"sha":"fef308ff72e70726b76d8ac0033da138933f2de3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserSelfITCase.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8c9635805a72540541eb960cbd799e1a8b1a90eb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8c9635805a72540541eb960cbd799e1a8b1a90eb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java?ref=8c9635805a72540541eb960cbd799e1a8b1a90eb","patch":"@@ -28,7 +28,6 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n-import java.security.AccessControlException;\n import java.util.Map;\n import java.util.Set;\n import javax.sql.DataSource;\n@@ -151,6 +150,9 @@ public void read() {\n \n         Pair<Map<String, Set<String>>, UserTO> self = clientFactory.create(\"rossini\", ADMIN_PWD).self();\n         assertEquals(\"rossini\", self.getValue().getUsername());\n+\n+        Pair<Map<String, Set<String>>, UserTO> byEmail = clientFactory.create(\"verdi@syncope.org\", ADMIN_PWD).self();\n+        assertEquals(\"verdi\", byEmail.getValue().getUsername());\n     }\n \n     @Test"},{"sha":"b052ab8fad1691d5304710fbc746ed32ca74394e","filename":"src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/configurationparameters.adoc","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8c9635805a72540541eb960cbd799e1a8b1a90eb/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fconfigurationparameters.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8c9635805a72540541eb960cbd799e1a8b1a90eb/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fconfigurationparameters.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fconfigurationparameters.adoc?ref=8c9635805a72540541eb960cbd799e1a8b1a90eb","patch":"@@ -40,6 +40,8 @@ processes, including <<password-reset,password reset>>;\n * `passwordReset.allowed` - whether the <<password-reset,password reset>> feature (typically via the enduser\n application) is allowed;\n * `passwordReset.securityQuestion` - whether the <<password-reset,password reset>> feature involves security questions;\n+* `authentication.attributes` - the list of attributes whose values can be passed as login name for authentication;\n+defaults to `username`\n * `authentication.statuses` - the list of <<workflow,workflow>> statuses for which users are allowed to authenticate;\n [WARNING]\n Suspended Users are anyway not allowed to authenticate."}]}