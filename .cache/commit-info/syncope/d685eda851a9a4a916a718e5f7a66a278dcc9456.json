{"sha":"d685eda851a9a4a916a718e5f7a66a278dcc9456","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ2ODVlZGE4NTFhOWE0YTkxNmE3MThlNWY3YTY2YTI3OGRjYzk0NTY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-02T10:47:45Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-02T10:47:57Z"},"message":"Upgrading the SAML2SP ext to the latest changes","tree":{"sha":"c1172328ed9b9de8bc35a9f5e130ddc531238191","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c1172328ed9b9de8bc35a9f5e130ddc531238191"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d685eda851a9a4a916a718e5f7a66a278dcc9456","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d685eda851a9a4a916a718e5f7a66a278dcc9456","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d685eda851a9a4a916a718e5f7a66a278dcc9456","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d685eda851a9a4a916a718e5f7a66a278dcc9456/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"89fe8311579a2079c33a17cadbdb9be8e172972f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/89fe8311579a2079c33a17cadbdb9be8e172972f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/89fe8311579a2079c33a17cadbdb9be8e172972f"}],"stats":{"total":362,"additions":257,"deletions":105},"files":[{"sha":"55cca0f8bd08cc8c40578023e8ad43ef4919771d","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/DirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -105,7 +105,7 @@\n \n     protected final BaseModal<W> displayAttributeModal = new BaseModal<>(\"outer\");\n \n-    private ActionLinksTogglePanel<T> actionTogglePanel;\n+    protected ActionLinksTogglePanel<T> actionTogglePanel;\n \n     /**\n      * Create simple unfiltered search result panel.\n@@ -139,7 +139,7 @@ protected DirectoryPanel(final String id, final Builder<T, W, E> builder, final\n         super(id, wizardInModal);\n         setOutputMarkupId(true);\n \n-        actionTogglePanel = new ActionLinksTogglePanel<T>(\"outer\", builder.getPageRef());\n+        actionTogglePanel = new ActionLinksTogglePanel<>(\"outer\", builder.getPageRef());\n         addOuterObject(actionTogglePanel);\n \n         addOuterObject(altDefaultModal);"},{"sha":"a76fe10e923808b0e1c045881552e222b5a9ca4d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ItemContainerTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItemContainerTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItemContainerTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItemContainerTO.java?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -22,7 +22,7 @@\n \n public interface ItemContainerTO {\n \n-    void setConnObjectLink(String connObjectLink);\n+    ItemTO getConnObjectKeyItem();\n \n     boolean setConnObjectKeyItem(ItemTO connObjectKeyItem);\n "},{"sha":"23c91ac74ff1f3698538d5a4fb806c287a96d138","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/MappingTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -45,11 +45,11 @@ public String getConnObjectLink() {\n         return connObjectLink;\n     }\n \n-    @Override\n     public void setConnObjectLink(final String connObjectLink) {\n         this.connObjectLink = connObjectLink;\n     }\n \n+    @Override\n     public ItemTO getConnObjectKeyItem() {\n         return IterableUtils.find(getItems(), new Predicate<ItemTO>() {\n "},{"sha":"c18b05e954e15996cebdf095bd46e9ead2d3d4fa","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/OrgUnitTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -75,11 +75,11 @@ public String getConnObjectLink() {\n         return connObjectLink;\n     }\n \n-    @Override\n     public void setConnObjectLink(final String connObjectLink) {\n         this.connObjectLink = connObjectLink;\n     }\n \n+    @Override\n     public ItemTO getConnObjectKeyItem() {\n         return IterableUtils.find(getItems(), new Predicate<ItemTO>() {\n "},{"sha":"f1a39c10dc5403a4d495fb656093eafa23c07fd1","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AccessTokenLogic.java","status":"modified","additions":26,"deletions":2,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.logic;\n \n+import static org.apache.syncope.core.logic.AbstractLogic.LOG;\n+\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Collections;\n@@ -28,20 +30,25 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AccessTokenTO;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.provisioning.api.data.AccessTokenDataBinder;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.Encryptor;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n \n @Component\n public class AccessTokenLogic extends AbstractTransactionalLogic<AccessTokenTO> {\n \n+    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+\n     @Resource(name = \"anonymousUser\")\n     private String anonymousUser;\n \n@@ -51,13 +58,30 @@ public class AccessTokenLogic extends AbstractTransactionalLogic<AccessTokenTO>\n     @Autowired\n     private AccessTokenDAO accessTokenDAO;\n \n+    private byte[] getAuthorities() {\n+        byte[] authorities = null;\n+        try {\n+            authorities = ENCRYPTOR.encode(POJOHelper.serialize(\n+                    AuthContextUtils.getAuthorities()), CipherAlgorithm.AES).\n+                    getBytes();\n+        } catch (Exception e) {\n+            LOG.error(\"Could not fetch authorities\", e);\n+        }\n+\n+        return authorities;\n+    }\n+\n     @PreAuthorize(\"isAuthenticated()\")\n     public Pair<String, Date> login() {\n         if (anonymousUser.equals(AuthContextUtils.getUsername())) {\n             throw new IllegalArgumentException(anonymousUser + \" cannot be granted an access token\");\n         }\n \n-        return binder.create(AuthContextUtils.getUsername(), Collections.<String, Object>emptyMap(), false);\n+        return binder.create(\n+                AuthContextUtils.getUsername(),\n+                Collections.<String, Object>emptyMap(),\n+                getAuthorities(),\n+                false);\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n@@ -67,7 +91,7 @@ public Pair<String, Date> refresh() {\n             throw new NotFoundException(\"AccessToken for \" + AuthContextUtils.getUsername());\n         }\n \n-        return binder.update(accessToken);\n+        return binder.update(accessToken, getAuthorities());\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")"},{"sha":"24f59cedb6bd3f1dffe2e48863ad6bfa4a3cd928","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAOrgUnitItem.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnitItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnitItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnitItem.java?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -45,7 +45,7 @@ public class JPAOrgUnitItem extends AbstractItem implements OrgUnitItem {\n     private JPAOrgUnit orgUnit;\n \n     /**\n-     * (Optional) classes for MappingItem transformation.\n+     * (Optional) classes for Item transformation.\n      */\n     @ElementCollection(fetch = FetchType.EAGER)\n     @Column(name = \"transformerClassName\")"},{"sha":"4bb64aa8e91f1ddcf401dab840ce1a14db359a82","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/AccessTokenDataBinder.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAccessTokenDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAccessTokenDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAccessTokenDataBinder.java?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -29,9 +29,10 @@ public interface AccessTokenDataBinder {\n \n     Triple<String, String, Date> generateJWT(String subject, long duration, Map<String, Object> claims);\n \n-    Pair<String, Date> create(String subject, Map<String, Object> claims, boolean replaceExisting);\n+    Pair<String, Date> create(\n+            String subject, Map<String, Object> claims, byte[] authorities, boolean replaceExisting);\n \n-    Pair<String, Date> update(AccessToken accessToken);\n+    Pair<String, Date> update(AccessToken accessToken, byte[] authorities);\n \n     AccessTokenTO getAccessTokenTO(AccessToken accessToken);\n "},{"sha":"350f1ed6cb95fcd058cf370f8b7b6a0d7c0e4eae","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java","status":"modified","additions":7,"deletions":26,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -33,29 +33,19 @@\n import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n import org.apache.cxf.rs.security.jose.jwt.JwtToken;\n import org.apache.syncope.common.lib.to.AccessTokenTO;\n-import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.provisioning.api.data.AccessTokenDataBinder;\n-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.spring.BeanUtils;\n-import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.DefaultCredentialChecker;\n-import org.apache.syncope.core.spring.security.Encryptor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class AccessTokenDataBinderImpl implements AccessTokenDataBinder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(AccessTokenDataBinder.class);\n-\n-    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n-\n     private static final String[] IGNORE_PROPERTIES = { \"owner\" };\n \n     private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator();\n@@ -112,7 +102,10 @@ public Triple<String, String, Date> generateJWT(\n \n     @Override\n     public Pair<String, Date> create(\n-            final String subject, final Map<String, Object> claims, final boolean replaceExisting) {\n+            final String subject,\n+            final Map<String, Object> claims,\n+            final byte[] authorities,\n+            final boolean replaceExisting) {\n \n         String body = null;\n         Date expiryTime = null;\n@@ -139,13 +132,7 @@ public Pair<String, Date> create(\n             accessToken.setOwner(subject);\n \n             if (!adminUser.equals(accessToken.getOwner())) {\n-                try {\n-                    accessToken.setAuthorities(ENCRYPTOR.encode(\n-                            POJOHelper.serialize(AuthContextUtils.getAuthorities()), CipherAlgorithm.AES).\n-                            getBytes());\n-                } catch (Exception e) {\n-                    LOG.error(\"Could not store authorities\", e);\n-                }\n+                accessToken.setAuthorities(authorities);\n             }\n \n             accessTokenDAO.save(accessToken);\n@@ -159,7 +146,7 @@ public Pair<String, Date> create(\n     }\n \n     @Override\n-    public Pair<String, Date> update(final AccessToken accessToken) {\n+    public Pair<String, Date> update(final AccessToken accessToken, final byte[] authorities) {\n         JwsJwtCompactConsumer consumer = new JwsJwtCompactConsumer(accessToken.getBody());\n \n         credentialChecker.checkIsDefaultJWSKeyInUse();\n@@ -181,13 +168,7 @@ public Pair<String, Date> update(final AccessToken accessToken) {\n         accessToken.setExpiryTime(expiryDate);\n \n         if (!adminUser.equals(accessToken.getOwner())) {\n-            try {\n-                accessToken.setAuthorities(ENCRYPTOR.encode(\n-                        POJOHelper.serialize(AuthContextUtils.getAuthorities()), CipherAlgorithm.AES).\n-                        getBytes());\n-            } catch (Exception e) {\n-                LOG.error(\"Could not store authorities\", e);\n-            }\n+            accessToken.setAuthorities(authorities);\n         }\n \n         accessTokenDAO.save(accessToken);"},{"sha":"3a20289487e141402070bb7197be01eb468344d5","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeJWTSSOProvider.java","status":"modified","additions":10,"deletions":9,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeJWTSSOProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeJWTSSOProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeJWTSSOProvider.java?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -84,17 +84,18 @@ public JwsVerificationSignature createJwsVerificationSignature(final JwsHeaders\n     @Override\n     public Pair<User, Set<SyncopeGrantedAuthority>> resolve(final JwtClaims jwtClaims) {\n         User user = userDAO.findByUsername(jwtClaims.getSubject());\n-        Set<SyncopeGrantedAuthority> authorities = null;\n+        Set<SyncopeGrantedAuthority> authorities = Collections.emptySet();\n         if (user != null) {\n             AccessToken accessToken = accessTokenDAO.find(jwtClaims.getTokenId());\n-            try {\n-                authorities = POJOHelper.deserialize(\n-                        ENCRYPTOR.decode(new String(accessToken.getAuthorities()), CipherAlgorithm.AES),\n-                        new TypeReference<Set<SyncopeGrantedAuthority>>() {\n-                });\n-            } catch (Throwable t) {\n-                LOG.error(\"Could not read stored authorities\", t);\n-                authorities = Collections.emptySet();\n+            if (accessToken.getAuthorities() != null) {\n+                try {\n+                    authorities = POJOHelper.deserialize(\n+                            ENCRYPTOR.decode(new String(accessToken.getAuthorities()), CipherAlgorithm.AES),\n+                            new TypeReference<Set<SyncopeGrantedAuthority>>() {\n+                    });\n+                } catch (Throwable t) {\n+                    LOG.error(\"Could not read stored authorities\", t);\n+                }\n             }\n         }\n "},{"sha":"2ab6d8d464782af1a40c7ae8470a946936d5d249","filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.java?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -37,6 +37,7 @@\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.KeyPropertyColumn;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksTogglePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.XMLEditorPanel;\n import org.apache.syncope.client.console.wizards.AjaxWizard;\n@@ -93,6 +94,25 @@ public void onClose(final AjaxRequestTarget target) {\n             }\n         });\n \n+        // need to override to change the menu header\n+        actionTogglePanel = new ActionLinksTogglePanel<SAML2IdPTO>(\"outer\", pageRef) {\n+\n+            private static final long serialVersionUID = -7688359318035249200L;\n+\n+            @Override\n+            public void toggleWithContent(\n+                    final AjaxRequestTarget target,\n+                    final ActionsPanel<SAML2IdPTO> actionsPanel,\n+                    final SAML2IdPTO modelObject) {\n+\n+                super.toggleWithContent(target, actionsPanel, modelObject);\n+                setHeader(target, StringUtils.abbreviate(modelObject.getName(), 25));\n+                this.toggle(target, true);\n+            }\n+\n+        };\n+        addOuterObject(actionTogglePanel);\n+\n         addOuterObject(metadataModal);\n         setWindowClosedReloadCallback(metadataModal);\n         metadataModal.size(Modal.Size.Large);"},{"sha":"af13d8fe6ff6594252e246cdc104f4f26a7dd0f0","filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/wizards/SAML2IdPMappingPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPMappingPanel.java?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -46,7 +46,7 @@ public SAML2IdPMappingPanel(\n         super(id,\n                 mapItemTransformers,\n                 jexlTransformers,\n-                new ListModel<ItemTO>(idpTO.getMappingItems()),\n+                new ListModel<ItemTO>(idpTO.getItems()),\n                 true,\n                 true,\n                 MappingPurpose.NONE);"},{"sha":"8567dd2fc2fda6dd60fb44fee96009699cbe5ffa","filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/wizards/SAML2IdPWizardBuilder.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -132,8 +132,7 @@ private static final class Mapping extends WizardStep {\n \n     @Override\n     protected Serializable onApplyInternal(final SAML2IdPTO modelObject) {\n-        long connObjectKeyCount = IterableUtils.countMatches(\n-                modelObject.getMappingItems(), new Predicate<ItemTO>() {\n+        long connObjectKeyCount = IterableUtils.countMatches(modelObject.getItems(), new Predicate<ItemTO>() {\n \n             @Override\n             public boolean evaluate(final ItemTO item) {"},{"sha":"f9c6403ab0c5a57f88ab2050b5c04990408a323a","filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.properties?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -20,3 +20,4 @@ logoutSupported=Logout supported\n any.edit=Edit ${entityID}\n connObjectKeyValidation=There must be exactly one Remote Key\n bindingType=Binding\n+html.title=metadata"},{"sha":"312da5d68eee920281aec287973daefa43caa043","filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_it.properties?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -20,3 +20,4 @@ logoutSupported=Logout supportato\n any.edit=Modifica ${entityID}\n connObjectKeyValidation=Deve essere definito esattamente una Chiave remota\n bindingType=Binding\n+html.title=metadata"},{"sha":"4e053f7a6d3ad0804ace859158dc5e0f19e203b0","filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_pt_BR.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_pt_BR.properties?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -20,3 +20,4 @@ logoutSupported=Logout supported\n any.edit=Alterar ${entityID}\n connObjectKeyValidation=Precisa ser exatamente um Remote Key\n bindingType=Binding\n+html.title=metadata"},{"sha":"8bedf47f600d447cb5ad426a0e0fae97f9605806","filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_ru.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_ru.properties?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -20,3 +20,4 @@ logoutSupported=Logout supported\n any.edit=\\u0418\\u0437\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c ${entityID}\n connObjectKeyValidation=\\u0422\\u0430\\u043c \\u0434\\u043e\\u043b\\u0436\\u043d\\u043e \\u0431\\u044b\\u0442\\u044c \\u0440\\u043e\\u0432\\u043d\\u043e \\u043e\\u0434\\u0438\\u043d \\u0434\\u0438\\u0441\\u0442\\u0430\\u043d\\u0446\\u0438\\u043e\\u043d\\u043d\\u043e\\u0433\\u043e \\u043a\\u043b\\u044e\\u0447\\u0430\n bindingType=Binding\n+html.title=metadata"},{"sha":"ffda86d565abd0b1237b726dd796f1b6899a117b","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2IdPTO.java","status":"modified","additions":14,"deletions":10,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -33,7 +33,7 @@\n \n @XmlRootElement(name = \"saml2idp\")\n @XmlType\n-public class SAML2IdPTO extends AbstractBaseBean implements EntityTO {\n+public class SAML2IdPTO extends AbstractBaseBean implements EntityTO, ItemContainerTO {\n \n     private static final long serialVersionUID = 4426527052873779881L;\n \n@@ -51,7 +51,7 @@ public class SAML2IdPTO extends AbstractBaseBean implements EntityTO {\n \n     private boolean logoutSupported;\n \n-    private final List<ItemTO> mappingItems = new ArrayList<>();\n+    private final List<ItemTO> items = new ArrayList<>();\n \n     @Override\n     public String getKey() {\n@@ -112,8 +112,9 @@ public void setLogoutSupported(final boolean logoutSupported) {\n         this.logoutSupported = logoutSupported;\n     }\n \n+    @Override\n     public ItemTO getConnObjectKeyItem() {\n-        return IterableUtils.find(getMappingItems(), new Predicate<ItemTO>() {\n+        return IterableUtils.find(getItems(), new Predicate<ItemTO>() {\n \n             @Override\n             public boolean evaluate(final ItemTO item) {\n@@ -129,25 +130,28 @@ protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {\n         return this.add(connObjectItem);\n     }\n \n+    @Override\n     public boolean setConnObjectKeyItem(final ItemTO connObjectKeyItem) {\n         return connObjectKeyItem == null\n                 ? remove(getConnObjectKeyItem())\n                 : addConnObjectKeyItem(connObjectKeyItem);\n     }\n \n-    @XmlElementWrapper(name = \"mappingItems\")\n-    @XmlElement(name = \"mappingItem\")\n-    @JsonProperty(\"mappingItems\")\n-    public List<ItemTO> getMappingItems() {\n-        return mappingItems;\n+    @XmlElementWrapper(name = \"items\")\n+    @XmlElement(name = \"item\")\n+    @JsonProperty(\"items\")\n+    @Override\n+    public List<ItemTO> getItems() {\n+        return items;\n     }\n \n+    @Override\n     public boolean add(final ItemTO item) {\n-        return item == null ? false : this.mappingItems.contains(item) || this.mappingItems.add(item);\n+        return item == null ? false : this.items.contains(item) || this.items.add(item);\n     }\n \n     public boolean remove(final ItemTO item) {\n-        return this.mappingItems.remove(item);\n+        return this.items.remove(item);\n     }\n \n }"},{"sha":"222d3cf768d33dbf3acad605c326a72cfb009edf","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java","status":"modified","additions":21,"deletions":1,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -46,6 +46,7 @@\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n@@ -119,6 +120,9 @@\n import org.springframework.security.authentication.BadCredentialsException;\n import org.springframework.stereotype.Component;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.spring.security.AuthDataAccessor;\n+import org.apache.syncope.core.spring.security.Encryptor;\n \n @Component\n public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> {\n@@ -137,6 +141,8 @@ public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> {\n \n     private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator();\n \n+    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+\n     @Autowired\n     private AccessTokenDataBinder accessTokenDataBinder;\n \n@@ -158,6 +164,9 @@ public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> {\n     @Autowired\n     private IntAttrNameParser intAttrNameParser;\n \n+    @Autowired\n+    private AuthDataAccessor authDataAccessor;\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n@@ -532,7 +541,18 @@ public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO\n         claims.put(JWT_CLAIM_NAMEID_FORMAT, nameID.getFormat());\n         claims.put(JWT_CLAIM_NAMEID_VALUE, nameID.getValue());\n         claims.put(JWT_CLAIM_SESSIONINDEX, responseTO.getSessionIndex());\n-        Pair<String, Date> accessTokenInfo = accessTokenDataBinder.create(responseTO.getUsername(), claims, true);\n+\n+        byte[] authorities = null;\n+        try {\n+            authorities = ENCRYPTOR.encode(POJOHelper.serialize(\n+                    authDataAccessor.getAuthorities(responseTO.getUsername())), CipherAlgorithm.AES).\n+                    getBytes();\n+        } catch (Exception e) {\n+            LOG.error(\"Could not fetch authorities\", e);\n+        }\n+\n+        Pair<String, Date> accessTokenInfo =\n+                accessTokenDataBinder.create(responseTO.getUsername(), claims, authorities, true);\n         responseTO.setAccessToken(accessTokenInfo.getLeft());\n         responseTO.setAccessTokenExpiryTime(accessTokenInfo.getRight());\n "},{"sha":"7d1a5da6af2d93307f215cdfd5b5485dd7d89a22","filename":"ext/saml2sp/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2IdP.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdP.java?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -20,7 +20,6 @@\n \n import java.util.List;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n \n public interface SAML2IdP extends Entity {\n \n@@ -44,12 +43,12 @@ public interface SAML2IdP extends Entity {\n \n     void setBindingType(SAML2BindingType bindingType);\n \n-    MappingItem getConnObjectKeyItem();\n+    SAML2IdPItem getConnObjectKeyItem();\n \n-    void setConnObjectKeyItem(MappingItem item);\n+    void setConnObjectKeyItem(SAML2IdPItem item);\n \n-    boolean add(MappingItem item);\n+    boolean add(SAML2IdPItem item);\n \n-    List<? extends MappingItem> getMappingItems();\n+    List<? extends SAML2IdPItem> getItems();\n \n }"},{"sha":"d9ba3149f9da82fe5293fd09432d2e7cbc6dc37d","filename":"ext/saml2sp/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2IdPItem.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdPItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdPItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdPItem.java?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n+\n+public interface SAML2IdPItem extends Item {\n+\n+    SAML2IdP getIdP();\n+\n+    void setIdP(SAML2IdP idp);\n+}"},{"sha":"2277c147081b24d4ef48869b99b883d68c16359f","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2EntityFactory.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2EntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2EntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2EntityFactory.java?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -21,6 +21,7 @@\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.SAML2EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n+import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -33,11 +34,12 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n \n         if (reference.equals(SAML2IdP.class)) {\n             result = (E) new JPASAML2IdP();\n+        } else if (reference.equals(SAML2IdPItem.class)) {\n+            result = (E) new JPASAML2IdPItem();\n         } else {\n             throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n         }\n \n         return result;\n     }\n-\n }"},{"sha":"cf1e3a8cf2818cabc91648e8d3cfb8b43b30d189","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2IdP.java","status":"modified","additions":12,"deletions":13,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -36,8 +36,7 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMappingItem;\n+import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n import org.apache.syncope.core.persistence.jpa.validation.entity.SAML2IdPCheck;\n \n @Entity\n@@ -60,8 +59,8 @@ public class JPASAML2IdP extends AbstractGeneratedKeyEntity implements SAML2IdP\n     @Basic(fetch = FetchType.EAGER)\n     private Byte[] metadata;\n \n-    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)\n-    private List<JPAMappingItem> mappingItems = new ArrayList<>();\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"idp\")\n+    private List<JPASAML2IdPItem> items = new ArrayList<>();\n \n     @Min(0)\n     @Max(1)\n@@ -122,29 +121,29 @@ public void setBindingType(final SAML2BindingType bindingType) {\n     }\n \n     @Override\n-    public boolean add(final MappingItem item) {\n-        checkType(item, JPAMappingItem.class);\n-        return mappingItems.contains((JPAMappingItem) item) || mappingItems.add((JPAMappingItem) item);\n+    public boolean add(final SAML2IdPItem item) {\n+        checkType(item, JPASAML2IdPItem.class);\n+        return items.contains((JPASAML2IdPItem) item) || items.add((JPASAML2IdPItem) item);\n     }\n \n     @Override\n-    public List<? extends MappingItem> getMappingItems() {\n-        return mappingItems;\n+    public List<? extends SAML2IdPItem> getItems() {\n+        return items;\n     }\n \n     @Override\n-    public MappingItem getConnObjectKeyItem() {\n-        return IterableUtils.find(getMappingItems(), new Predicate<MappingItem>() {\n+    public SAML2IdPItem getConnObjectKeyItem() {\n+        return IterableUtils.find(getItems(), new Predicate<SAML2IdPItem>() {\n \n             @Override\n-            public boolean evaluate(final MappingItem item) {\n+            public boolean evaluate(final SAML2IdPItem item) {\n                 return item.isConnObjectKey();\n             }\n         });\n     }\n \n     @Override\n-    public void setConnObjectKeyItem(final MappingItem item) {\n+    public void setConnObjectKeyItem(final SAML2IdPItem item) {\n         item.setConnObjectKey(true);\n         this.add(item);\n     }"},{"sha":"863d068069a4904274a2246b5ed65f08137ecff2","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2IdPItem.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdPItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdPItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdPItem.java?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Cacheable;\n+import javax.persistence.CollectionTable;\n+import javax.persistence.Column;\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n+import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.AbstractItem;\n+\n+@Entity\n+@Table(name = JPASAML2IdPItem.TABLE)\n+@Cacheable\n+public class JPASAML2IdPItem extends AbstractItem implements SAML2IdPItem {\n+\n+    public static final String TABLE = \"SAML2IdPItem\";\n+\n+    private static final long serialVersionUID = -597417734910639991L;\n+\n+    @ManyToOne\n+    private JPASAML2IdP idp;\n+\n+    /**\n+     * (Optional) classes for Item transformation.\n+     */\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Column(name = \"transformerClassName\")\n+    @CollectionTable(name = TABLE + \"_Transformer\",\n+            joinColumns =\n+            @JoinColumn(name = \"saml2IdPItemItem_id\", referencedColumnName = \"id\"))\n+    private List<String> transformerClassNames = new ArrayList<>();\n+\n+    @Override\n+    public SAML2IdP getIdP() {\n+        return idp;\n+    }\n+\n+    @Override\n+    public void setIdP(final SAML2IdP idp) {\n+        checkType(idp, JPASAML2IdP.class);\n+        this.idp = (JPASAML2IdP) idp;\n+    }\n+\n+    @Override\n+    public List<String> getTransformerClassNames() {\n+        return transformerClassNames;\n+    }\n+}"},{"sha":"225c6d1b0296977612c690db784aba91353cd803","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SAML2IdPValidator.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -23,21 +23,21 @@\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n \n public class SAML2IdPValidator extends AbstractValidator<SAML2IdPCheck, SAML2IdP> {\n \n     @Override\n     public boolean isValid(final SAML2IdP value, final ConstraintValidatorContext context) {\n-        long connObjectKeys = IterableUtils.countMatches(value.getMappingItems(), new Predicate<MappingItem>() {\n+        long connObjectKeys = IterableUtils.countMatches(value.getItems(), new Predicate<SAML2IdPItem>() {\n \n             @Override\n-            public boolean evaluate(final MappingItem item) {\n+            public boolean evaluate(final SAML2IdPItem item) {\n                 return item.isConnObjectKey();\n             }\n         });\n-        if (!value.getMappingItems().isEmpty() && connObjectKeys != 1) {\n+        if (!value.getItems().isEmpty() && connObjectKeys != 1) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidMapping, \"Single ConnObjectKey mapping is required\")).\n                     addPropertyNode(\"connObjectKey.size\").addConstraintViolation();\n@@ -46,10 +46,10 @@ public boolean evaluate(final MappingItem item) {\n \n         boolean isValid = true;\n \n-        long passwords = IterableUtils.countMatches(value.getMappingItems(), new Predicate<MappingItem>() {\n+        long passwords = IterableUtils.countMatches(value.getItems(), new Predicate<SAML2IdPItem>() {\n \n             @Override\n-            public boolean evaluate(final MappingItem item) {\n+            public boolean evaluate(final SAML2IdPItem item) {\n                 return item.isPassword();\n             }\n         });\n@@ -60,7 +60,7 @@ public boolean evaluate(final MappingItem item) {\n             isValid = false;\n         }\n \n-        for (MappingItem item : value.getMappingItems()) {\n+        for (SAML2IdPItem item : value.getItems()) {\n             for (String className : item.getTransformerClassNames()) {\n                 Class<?> actionsClass = null;\n                 boolean isAssignable = false;"},{"sha":"b2668c5205897c88ebff198c6eb943fb66362a48","filename":"ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java","status":"modified","additions":15,"deletions":18,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -32,12 +32,11 @@\n import org.apache.syncope.core.persistence.api.dao.SAML2IdPDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.SAML2EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n+import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.data.SAML2IdPDataBinder;\n import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n@@ -55,7 +54,7 @@ public class SAML2IdPDataBinderImpl implements SAML2IdPDataBinder {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SAML2IdPDataBinder.class);\n \n-    private static final String[] MAPPINGITEM_IGNORE_PROPERTIES = { \"key\", \"mapping\", \"purpose\" };\n+    private static final String[] ITEM_IGNORE_PROPERTIES = { \"key\", \"purpose\" };\n \n     @Autowired\n     private AnyTypeDAO anyTypeDAO;\n@@ -64,20 +63,17 @@ public class SAML2IdPDataBinderImpl implements SAML2IdPDataBinder {\n     private SAML2IdPDAO saml2IdPDAO;\n \n     @Autowired\n-    private EntityFactory entityFactory;\n-\n-    @Autowired\n-    private SAML2EntityFactory saml2EntityFactory;\n+    private SAML2EntityFactory entityFactory;\n \n     @Autowired\n     private IntAttrNameParser intAttrNameParser;\n \n     @Override\n     public SAML2IdP create(final SAML2IdPTO idpTO) {\n-        return update(saml2EntityFactory.newEntity(SAML2IdP.class), idpTO);\n+        return update(entityFactory.newEntity(SAML2IdP.class), idpTO);\n     }\n \n-    private void populateMapping(\n+    private void populateItems(\n             final SAML2IdPTO idpTO,\n             final SAML2IdP idp,\n             final AnyTypeClassTO allowedSchemas) {\n@@ -87,7 +83,7 @@ private void populateMapping(\n         SyncopeClientException requiredValuesMissing = SyncopeClientException.build(\n                 ClientExceptionType.RequiredValuesMissing);\n \n-        for (ItemTO itemTO : idpTO.getMappingItems()) {\n+        for (ItemTO itemTO : idpTO.getItems()) {\n             if (itemTO == null) {\n                 LOG.error(\"Null {}\", ItemTO.class.getSimpleName());\n                 invalidMapping.getElements().add(\"Null \" + ItemTO.class.getSimpleName());\n@@ -133,8 +129,9 @@ private void populateMapping(\n                             scce.addException(invalidMandatoryCondition);\n                         }\n \n-                        MappingItem item = entityFactory.newEntity(MappingItem.class);\n-                        BeanUtils.copyProperties(itemTO, item, MAPPINGITEM_IGNORE_PROPERTIES);\n+                        SAML2IdPItem item = entityFactory.newEntity(SAML2IdPItem.class);\n+                        BeanUtils.copyProperties(itemTO, item, ITEM_IGNORE_PROPERTIES);\n+                        item.setIdP(idp);\n                         item.setPurpose(MappingPurpose.NONE);\n                         if (item.isConnObjectKey()) {\n                             if (intAttrName.getSchemaType() == SchemaType.VIRTUAL) {\n@@ -174,7 +171,7 @@ public SAML2IdP update(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n         idp.setUseDeflateEncoding(idpTO.isUseDeflateEncoding());\n         idp.setBindingType(idpTO.getBindingType());\n \n-        idp.getMappingItems().clear();\n+        idp.getItems().clear();\n         AnyTypeClassTO allowedSchemas = new AnyTypeClassTO();\n         for (AnyTypeClass anyTypeClass : anyTypeDAO.findUser().getClasses()) {\n             allowedSchemas.getPlainSchemas().addAll(\n@@ -187,16 +184,16 @@ public SAML2IdP update(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n                     CollectionUtils.collect(anyTypeClass.getVirSchemas(),\n                             EntityUtils.<VirSchema>keyTransformer()));\n         }\n-        populateMapping(idpTO, idp, allowedSchemas);\n+        populateItems(idpTO, idp, allowedSchemas);\n \n         return saml2IdPDAO.save(idp);\n     }\n \n-    private void populateMappingTO(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n-        for (MappingItem item : idp.getMappingItems()) {\n+    private void populateItems(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n+        for (SAML2IdPItem item : idp.getItems()) {\n             ItemTO itemTO = new ItemTO();\n             itemTO.setKey(item.getKey());\n-            BeanUtils.copyProperties(item, itemTO, MAPPINGITEM_IGNORE_PROPERTIES);\n+            BeanUtils.copyProperties(item, itemTO, ITEM_IGNORE_PROPERTIES);\n             itemTO.setPurpose(MappingPurpose.NONE);\n \n             if (itemTO.isConnObjectKey()) {\n@@ -218,7 +215,7 @@ public SAML2IdPTO getIdPTO(final SAML2IdP idp) {\n         idpTO.setBindingType(idp.getBindingType());\n         idpTO.setMetadata(Base64.encode(idp.getMetadata()));\n \n-        populateMappingTO(idp, idpTO);\n+        populateItems(idp, idpTO);\n \n         return idpTO;\n     }"},{"sha":"fd34bbfd874902c1e4d61fe23007711eea89749f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2ITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d685eda851a9a4a916a718e5f7a66a278dcc9456/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d685eda851a9a4a916a718e5f7a66a278dcc9456/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java?ref=d685eda851a9a4a916a718e5f7a66a278dcc9456","patch":"@@ -141,12 +141,12 @@ public void setIdPMapping() {\n \n         SAML2IdPTO ssoCircle = ssoCircleOpt.get();\n         assertNotNull(ssoCircle);\n-        assertFalse(ssoCircle.getMappingItems().isEmpty());\n+        assertFalse(ssoCircle.getItems().isEmpty());\n         assertNotNull(ssoCircle.getConnObjectKeyItem());\n         assertNotEquals(\"email\", ssoCircle.getConnObjectKeyItem().getIntAttrName());\n         assertNotEquals(\"EmailAddress\", ssoCircle.getConnObjectKeyItem().getExtAttrName());\n \n-        ssoCircle.getMappingItems().clear();\n+        ssoCircle.getItems().clear();\n \n         ItemTO keyMapping = new ItemTO();\n         keyMapping.setIntAttrName(\"email\");"}]}