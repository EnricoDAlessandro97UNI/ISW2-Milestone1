{"sha":"9e9002f4b2ae437b4c10f32d3dab513f2e3d9bb5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjllOTAwMmY0YjJhZTQzN2I0YzEwZjMyZDNkYWI1MTNmMmUzZDliYjU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-04-23T14:26:11Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-04-23T14:29:00Z"},"message":"[SYNCOPE-1304] Correct referece to userOwner_id / groupOwner_id in ORDER BY statements","tree":{"sha":"79ba0547d10dbd514632ce5f808dd8e00b480faf","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/79ba0547d10dbd514632ce5f808dd8e00b480faf"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9e9002f4b2ae437b4c10f32d3dab513f2e3d9bb5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9e9002f4b2ae437b4c10f32d3dab513f2e3d9bb5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9e9002f4b2ae437b4c10f32d3dab513f2e3d9bb5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9e9002f4b2ae437b4c10f32d3dab513f2e3d9bb5/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d11be0df683e111dbb415a6057e303ff803e6f72","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d11be0df683e111dbb415a6057e303ff803e6f72","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d11be0df683e111dbb415a6057e303ff803e6f72"}],"stats":{"total":45,"additions":29,"deletions":16},"files":[{"sha":"3ce2702c5c487a83758fb0e8fbe6e12c30a867c9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":21,"deletions":16,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e9002f4b2ae437b4c10f32d3dab513f2e3d9bb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e9002f4b2ae437b4c10f32d3dab513f2e3d9bb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=9e9002f4b2ae437b4c10f32d3dab513f2e3d9bb5","patch":"@@ -27,6 +27,7 @@\n import java.util.stream.Collectors;\n import javax.persistence.Query;\n import javax.persistence.TemporalType;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n@@ -64,6 +65,8 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {\n \n     private static final String EMPTY_QUERY = \"SELECT any_id FROM user_search_attr WHERE 1=2\";\n \n+    private static final String[] RELATIONSHIP_FIELDS = new String[] { \"realm\", \"userOwner\", \"groupOwner\" };\n+\n     private Pair<String, Set<String>> getAdminRealmsFilter(\n             final Set<String> adminRealms,\n             final SearchSupport svs,\n@@ -223,17 +226,17 @@ private void fillWithParameters(final Query query, final List<Object> parameters\n     private StringBuilder buildSelect(final OrderBySupport obs) {\n         final StringBuilder select = new StringBuilder(\"SELECT u.any_id\");\n \n-        for (OrderBySupport.Item item : obs.items) {\n+        obs.items.forEach(item -> {\n             select.append(',').append(item.select);\n-        }\n+        });\n         select.append(\" FROM \");\n \n         return select;\n     }\n \n     private StringBuilder buildWhere(final SearchSupport svs, final OrderBySupport obs) {\n         StringBuilder where = new StringBuilder(\" u\");\n-        for (SearchSupport.SearchView searchView : obs.views) {\n+        obs.views.forEach(searchView -> {\n             where.append(',');\n             if (searchView.name.equals(svs.attr().name)) {\n                 where.append(\" (SELECT * FROM \").append(searchView.name);\n@@ -247,27 +250,27 @@ private StringBuilder buildWhere(final SearchSupport svs, final OrderBySupport o\n                 where.append(searchView.name);\n             }\n             where.append(' ').append(searchView.alias);\n-        }\n+        });\n         where.append(\" WHERE \");\n-        for (SearchSupport.SearchView searchView : obs.views) {\n+        obs.views.forEach(searchView -> {\n             where.append(\"u.any_id=\").append(searchView.alias).append(\".any_id AND \");\n-        }\n+        });\n \n-        for (OrderBySupport.Item item : obs.items) {\n-            if (StringUtils.isNotBlank(item.where)) {\n-                where.append(item.where).append(\" AND \");\n-            }\n-        }\n+        obs.items.stream().\n+                filter(item -> StringUtils.isNotBlank(item.where)).\n+                forEachOrdered((item) -> {\n+                    where.append(item.where).append(\" AND \");\n+                });\n \n         return where;\n     }\n \n     private StringBuilder buildOrderBy(final OrderBySupport obs) {\n         StringBuilder orderBy = new StringBuilder();\n \n-        for (OrderBySupport.Item item : obs.items) {\n+        obs.items.forEach(item -> {\n             orderBy.append(item.orderBy).append(',');\n-        }\n+        });\n         if (!obs.items.isEmpty()) {\n             orderBy.insert(0, \" ORDER BY \");\n             orderBy.deleteCharAt(orderBy.length() - 1);\n@@ -283,7 +286,7 @@ private OrderBySupport parseOrderBy(\n \n         OrderBySupport obs = new OrderBySupport();\n \n-        for (OrderByClause clause : filterOrderBy(orderBy)) {\n+        filterOrderBy(orderBy).forEach(clause -> {\n             OrderBySupport.Item item = new OrderBySupport.Item();\n \n             // Manage difference among external key attribute and internal JPA @Id\n@@ -319,7 +322,9 @@ private OrderBySupport parseOrderBy(\n                 }\n             } else {\n                 // Adjust field name to column name\n-                fieldName = \"realm\".equals(fieldName) ? \"realm_id\" : fieldName;\n+                if (ArrayUtils.contains(RELATIONSHIP_FIELDS, fieldName)) {\n+                    fieldName += \"_id\";\n+                }\n \n                 obs.views.add(svs.field());\n \n@@ -333,7 +338,7 @@ private OrderBySupport parseOrderBy(\n             } else {\n                 obs.items.add(item);\n             }\n-        }\n+        });\n \n         return obs;\n     }"},{"sha":"8d2063919a7e90581b286983f49d207abf3ab841","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e9002f4b2ae437b4c10f32d3dab513f2e3d9bb5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e9002f4b2ae437b4c10f32d3dab513f2e3d9bb5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=9e9002f4b2ae437b4c10f32d3dab513f2e3d9bb5","patch":"@@ -525,4 +525,12 @@ public void issueSYNCOPE1223() {\n             userService.update(patch);\n         }\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1304() {\n+        PagedResult<GroupTO> groups = groupService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                orderBy(\"userOwner DESC\").build());\n+        assertNotNull(groups);\n+        assertFalse(groups.getResult().isEmpty());\n+    }\n }"}]}