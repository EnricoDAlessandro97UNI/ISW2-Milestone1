{"sha":"dae2c2a442a928c351bbe25a9bc3b652a706e36c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRhZTJjMmE0NDJhOTI4YzM1MWJiZTI1YTliYzNiNjUyYTcwNmUzNmM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-01-29T14:18:21Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-01-29T16:43:07Z"},"message":"[SYNCOPE-1430] Now ItemTransformer#beforePropagation requires (and returns) AttrSchemaType to avoid unwante attribute value type mess","tree":{"sha":"9a2d6a04d5da228cab31e0543f4a4baba6c3ddad","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9a2d6a04d5da228cab31e0543f4a4baba6c3ddad"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/dae2c2a442a928c351bbe25a9bc3b652a706e36c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dae2c2a442a928c351bbe25a9bc3b652a706e36c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dae2c2a442a928c351bbe25a9bc3b652a706e36c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dae2c2a442a928c351bbe25a9bc3b652a706e36c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"f7c3ae47813131ed4a5d9c9b786c7c641459b648","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f7c3ae47813131ed4a5d9c9b786c7c641459b648","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f7c3ae47813131ed4a5d9c9b786c7c641459b648"}],"stats":{"total":831,"additions":581,"deletions":250},"files":[{"sha":"971b5584bae9d3ce11551ce0a39bbd30cd3cabd5","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/implementations/MyItemTransformer.groovy","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyItemTransformer.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyItemTransformer.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyItemTransformer.groovy?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -17,7 +17,10 @@\n  * under the License.\n  */\n import groovy.transform.CompileStatic\n+import java.util.List;\n+import org.apache.commons.lang3.tuple.Pair\n import org.apache.syncope.common.lib.to.EntityTO\n+import org.apache.syncope.common.lib.types.AttrSchemaType\n import org.apache.syncope.core.persistence.api.entity.Entity\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue\n import org.apache.syncope.core.persistence.api.entity.resource.Item\n@@ -27,12 +30,13 @@ import org.apache.syncope.core.provisioning.api.data.ItemTransformer\n class MyItemTransformer implements ItemTransformer {\n \t\n   @Override\n-  List<PlainAttrValue> beforePropagation(\n+  Pair<AttrSchemaType, List<PlainAttrValue>> beforePropagation(\n     Item item,\n     Entity entity,\n+    AttrSchemaType schemaType,\n     List<PlainAttrValue> values) {\n \n-    return values;\n+    return Pair.of(schemaType, values);\n   }\n     \n   @Override"},{"sha":"a55abf53b412de132be838c3a954258525bcdabe","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -23,8 +23,10 @@\n import java.util.List;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n \n public interface AnyDAO<A extends Any<?>> extends DAO<A> {\n@@ -39,9 +41,9 @@\n \n     A find(String key);\n \n-    List<A> findByPlainAttrValue(String schema, PlainAttrValue attrValue, boolean ignoreCaseMatch);\n+    List<A> findByPlainAttrValue(PlainSchema schema, PlainAttrValue attrValue, boolean ignoreCaseMatch);\n \n-    A findByPlainAttrUniqueValue(String schema, PlainAttrValue attrUniqueValue, boolean ignoreCaseMatch);\n+    A findByPlainAttrUniqueValue(PlainSchema schema, PlainAttrValue attrUniqueValue, boolean ignoreCaseMatch);\n \n     /**\n      * Find any objects by derived attribute value. This method could fail if one or more string literals contained\n@@ -54,7 +56,7 @@\n      * @param ignoreCaseMatch whether comparison for string values should take case into account or not\n      * @return list of any objects\n      */\n-    List<A> findByDerAttrValue(String schema, String value, boolean ignoreCaseMatch);\n+    List<A> findByDerAttrValue(DerSchema schema, String value, boolean ignoreCaseMatch);\n \n     List<A> findByResource(ExternalResource resource);\n "},{"sha":"9d8d32870fdc61b4a00a1deca1cce0ef2d364ebb","filename":"core/persistence-jpa-json/pom.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fpersistence-jpa-json%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fpersistence-jpa-json%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fpom.xml?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -241,6 +241,9 @@ under the License.\n           <testResource>\n             <directory>src/main/resources/pgjsonb</directory>\n             <filtering>true</filtering>\n+            <excludes>\n+              <exclude>domains/MasterContent.xml</exclude>\n+            </excludes>\n           </testResource>\n         </testResources>\n       </build>"},{"sha":"04be3da220712e9d4daae751895272b1b18ed575","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/api/dao/JPAJSONAnyDAO.java","status":"modified","additions":15,"deletions":5,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FJPAJSONAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FJPAJSONAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FJPAJSONAnyDAO.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -21,18 +21,28 @@\n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n \n public interface JPAJSONAnyDAO {\n \n-    <A extends Any<?>> List<A> findByDerAttrValue(\n-            String table, AnyUtils anyUtils, String schemaKey, String value, boolean ignoreCaseMatch);\n+    <A extends Any<?>> List<A> findByPlainAttrValue(\n+            String table,\n+            AnyUtils anyUtils,\n+            PlainSchema schema,\n+            PlainAttrValue attrValue,\n+            boolean ignoreCaseMatch);\n \n     <A extends Any<?>> A findByPlainAttrUniqueValue(\n-            String table, AnyUtils anyUtils, String schemaKey, PlainAttrValue attrUniqueValue, boolean ignoreCaseMatch);\n+            String table,\n+            AnyUtils anyUtils,\n+            PlainSchema schema,\n+            PlainAttrValue attrUniqueValue,\n+            boolean ignoreCaseMatch);\n \n-    <A extends Any<?>> List<A> findByPlainAttrValue(\n-            String table, AnyUtils anyUtils, String schemaKey, PlainAttrValue attrValue, boolean ignoreCaseMatch);\n+    <A extends Any<?>> List<A> findByDerAttrValue(\n+            String table, AnyUtils anyUtils, DerSchema schema, String value, boolean ignoreCaseMatch);\n \n     <A extends Any<?>> void checkBeforeSave(String table, AnyUtils anyUtils, A any);\n }"},{"sha":"a6906bde4b7a62cb8e213b7f4448d5a97a2656a8","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAJSONAnyObjectDAO.java","status":"modified","additions":10,"deletions":9,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONAnyObjectDAO.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -24,6 +24,8 @@\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAJSONAnyObject;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n \n public class JPAJSONAnyObjectDAO extends JPAAnyObjectDAO {\n \n@@ -37,33 +39,32 @@ private JPAJSONAnyDAO anyDAO() {\n     }\n \n     @Override\n-    @SuppressWarnings(\"unchecked\")\n     public List<AnyObject> findByPlainAttrValue(\n-            final String schemaKey,\n+            final PlainSchema schema,\n             final PlainAttrValue attrValue,\n             final boolean ignoreCaseMatch) {\n \n-        return anyDAO().findByPlainAttrValue(JPAJSONAnyObject.TABLE, anyUtils(), schemaKey, attrValue, ignoreCaseMatch);\n+        return anyDAO().findByPlainAttrValue(\n+                JPAJSONAnyObject.TABLE, anyUtils(), schema, attrValue, ignoreCaseMatch);\n     }\n \n     @Override\n     public AnyObject findByPlainAttrUniqueValue(\n-            final String schemaKey,\n+            final PlainSchema schema,\n             final PlainAttrValue attrUniqueValue,\n             final boolean ignoreCaseMatch) {\n \n-        return anyDAO().findByPlainAttrUniqueValue(JPAJSONAnyObject.TABLE, anyUtils(),\n-                schemaKey, attrUniqueValue, ignoreCaseMatch);\n+        return anyDAO().findByPlainAttrUniqueValue(\n+                JPAJSONAnyObject.TABLE, anyUtils(), schema, attrUniqueValue, ignoreCaseMatch);\n     }\n \n     @Override\n-    @SuppressWarnings(\"unchecked\")\n     public List<AnyObject> findByDerAttrValue(\n-            final String schemaKey,\n+            final DerSchema schema,\n             final String value,\n             final boolean ignoreCaseMatch) {\n \n-        return anyDAO().findByDerAttrValue(JPAJSONAnyObject.TABLE, anyUtils(), schemaKey, value, ignoreCaseMatch);\n+        return anyDAO().findByDerAttrValue(JPAJSONAnyObject.TABLE, anyUtils(), schema, value, ignoreCaseMatch);\n     }\n \n     @Override"},{"sha":"2eac134e9cd8d203fdfcb8328314bb61ef8cf2dd","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAJSONGroupDAO.java","status":"modified","additions":10,"deletions":9,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONGroupDAO.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -24,6 +24,8 @@\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n \n public class JPAJSONGroupDAO extends JPAGroupDAO {\n \n@@ -37,33 +39,32 @@ private JPAJSONAnyDAO anyDAO() {\n     }\n \n     @Override\n-    @SuppressWarnings(\"unchecked\")\n     public List<Group> findByPlainAttrValue(\n-            final String schemaKey,\n+            final PlainSchema schema,\n             final PlainAttrValue attrValue,\n             final boolean ignoreCaseMatch) {\n \n-        return anyDAO().findByPlainAttrValue(JPAGroup.TABLE, anyUtils(), schemaKey, attrValue, ignoreCaseMatch);\n+        return anyDAO().findByPlainAttrValue(\n+                JPAGroup.TABLE, anyUtils(), schema, attrValue, ignoreCaseMatch);\n     }\n \n     @Override\n     public Group findByPlainAttrUniqueValue(\n-            final String schemaKey,\n+            final PlainSchema schema,\n             final PlainAttrValue attrUniqueValue,\n             final boolean ignoreCaseMatch) {\n \n-        return anyDAO().findByPlainAttrUniqueValue(JPAGroup.TABLE, anyUtils(),\n-                schemaKey, attrUniqueValue, ignoreCaseMatch);\n+        return anyDAO().findByPlainAttrUniqueValue(\n+                JPAGroup.TABLE, anyUtils(), schema, attrUniqueValue, ignoreCaseMatch);\n     }\n \n     @Override\n-    @SuppressWarnings(\"unchecked\")\n     public List<Group> findByDerAttrValue(\n-            final String schemaKey,\n+            final DerSchema schema,\n             final String value,\n             final boolean ignoreCaseMatch) {\n \n-        return anyDAO().findByDerAttrValue(JPAGroup.TABLE, anyUtils(), schemaKey, value, ignoreCaseMatch);\n+        return anyDAO().findByDerAttrValue(JPAGroup.TABLE, anyUtils(), schema, value, ignoreCaseMatch);\n     }\n \n     @Override"},{"sha":"c2c43be78ca5d1749b774a22b2be4eec482cdddb","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAJSONUserDAO.java","status":"modified","additions":10,"deletions":9,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONUserDAO.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -26,6 +26,8 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONUser;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n \n public class JPAJSONUserDAO extends JPAUserDAO {\n \n@@ -39,33 +41,32 @@ private JPAJSONAnyDAO anyDAO() {\n     }\n \n     @Override\n-    @SuppressWarnings(\"unchecked\")\n     public List<User> findByPlainAttrValue(\n-            final String schemaKey,\n+            final PlainSchema schema,\n             final PlainAttrValue attrValue,\n             final boolean ignoreCaseMatch) {\n \n-        return anyDAO().findByPlainAttrValue(JPAJSONUser.TABLE, anyUtils(), schemaKey, attrValue, ignoreCaseMatch);\n+        return anyDAO().findByPlainAttrValue(\n+                JPAJSONUser.TABLE, anyUtils(), schema, attrValue, ignoreCaseMatch);\n     }\n \n     @Override\n     public User findByPlainAttrUniqueValue(\n-            final String schemaKey,\n+            final PlainSchema schema,\n             final PlainAttrValue attrUniqueValue,\n             final boolean ignoreCaseMatch) {\n \n-        return anyDAO().findByPlainAttrUniqueValue(JPAJSONUser.TABLE, anyUtils(),\n-                schemaKey, attrUniqueValue, ignoreCaseMatch);\n+        return anyDAO().findByPlainAttrUniqueValue(\n+                JPAJSONUser.TABLE, anyUtils(), schema, attrUniqueValue, ignoreCaseMatch);\n     }\n \n     @Override\n-    @SuppressWarnings(\"unchecked\")\n     public List<User> findByDerAttrValue(\n-            final String schemaKey,\n+            final DerSchema schema,\n             final String value,\n             final boolean ignoreCaseMatch) {\n \n-        return anyDAO().findByDerAttrValue(JPAJSONUser.TABLE, anyUtils(), schemaKey, value, ignoreCaseMatch);\n+        return anyDAO().findByDerAttrValue(JPAJSONUser.TABLE, anyUtils(), schema, value, ignoreCaseMatch);\n     }\n \n     @Override"},{"sha":"a68423cccec0ad4fcd8e5e67168315935eec9d34","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnyDAO.java","status":"modified","additions":13,"deletions":15,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnyDAO.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -143,20 +143,19 @@ private <A extends Any<?>> List<A> buildResult(final AnyUtils anyUtils, final Li\n     public <A extends Any<?>> List<A> findByPlainAttrValue(\n             final String table,\n             final AnyUtils anyUtils,\n-            final String schemaKey,\n+            final PlainSchema schema,\n             final PlainAttrValue attrValue,\n             final boolean ignoreCaseMatch) {\n \n-        PlainSchema schema = plainSchemaDAO.find(schemaKey);\n         if (schema == null) {\n-            LOG.error(\"Invalid schema '{}'\", schemaKey);\n+            LOG.error(\"No PlainSchema\");\n             return Collections.<A>emptyList();\n         }\n \n         Query query = entityManager().createNativeQuery(\n                 queryBegin(table)\n                 + \"WHERE \" + attrValueMatch(anyUtils, schema, attrValue, ignoreCaseMatch));\n-        query.setParameter(1, schemaKey);\n+        query.setParameter(1, schema.getKey());\n         query.setParameter(2, attrValue.getValue());\n \n         return buildResult(anyUtils, query.getResultList());\n@@ -167,21 +166,20 @@ public <A extends Any<?>> List<A> findByPlainAttrValue(\n     public <A extends Any<?>> A findByPlainAttrUniqueValue(\n             final String table,\n             final AnyUtils anyUtils,\n-            final String schemaKey,\n+            final PlainSchema schema,\n             final PlainAttrValue attrUniqueValue,\n             final boolean ignoreCaseMatch) {\n \n-        PlainSchema schema = plainSchemaDAO.find(schemaKey);\n         if (schema == null) {\n-            LOG.error(\"Invalid schema '{}'\", schemaKey);\n+            LOG.error(\"No PlainSchema\");\n             return null;\n         }\n         if (!schema.isUniqueConstraint()) {\n-            LOG.error(\"This schema has not unique constraint: '{}'\", schemaKey);\n+            LOG.error(\"This schema has not unique constraint: '{}'\", schema.getKey());\n             return null;\n         }\n \n-        List<A> result = findByPlainAttrValue(table, anyUtils, schemaKey, attrUniqueValue, ignoreCaseMatch);\n+        List<A> result = findByPlainAttrValue(table, anyUtils, schema, attrUniqueValue, ignoreCaseMatch);\n         return result.isEmpty()\n                 ? null\n                 : result.get(0);\n@@ -216,13 +214,12 @@ private List<String> split(final String attrValue, final List<String> literals)\n     public <A extends Any<?>> List<A> findByDerAttrValue(\n             final String table,\n             final AnyUtils anyUtils,\n-            final String schemaKey,\n+            final DerSchema derSchema,\n             final String value,\n             final boolean ignoreCaseMatch) {\n \n-        DerSchema derSchema = derSchemaDAO.find(schemaKey);\n         if (derSchema == null) {\n-            LOG.error(\"Invalid schema '{}'\", schemaKey);\n+            LOG.error(\"No DerSchema\");\n             return Collections.<A>emptyList();\n         }\n \n@@ -335,13 +332,14 @@ public <A extends Any<?>> void checkBeforeSave(final String table, final AnyUtil\n                 filter(attr -> attr.getUniqueValue() != null).\n                 map(JSONPlainAttr.class::cast).\n                 forEach(attr -> {\n-                    String schemaKey = attr.getSchemaKey();\n-                    List<A> others = findByPlainAttrValue(table, anyUtils, schemaKey, attr.getUniqueValue(), false);\n+                    PlainSchema schema = attr.getSchema();\n+                    List<A> others = findByPlainAttrValue(table, anyUtils, schema, attr.getUniqueValue(), false);\n                     if (others.isEmpty() || (others.size() == 1 && others.get(0).getKey().equals(any.getKey()))) {\n                         LOG.debug(\"No duplicate value found for {}\", attr.getUniqueValue().getValueAsString());\n                     } else {\n                         throw new DuplicateException(\n-                                \"Value \" + attr.getUniqueValue().getValueAsString() + \" existing for \" + schemaKey);\n+                                \"Value \" + attr.getUniqueValue().getValueAsString()\n+                                + \" existing for \" + schema.getKey());\n                     }\n                 });\n "},{"sha":"f4401241dc22a12fa97592084525ecc9ff9fe251","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":9,"deletions":12,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -176,21 +176,20 @@ private Query findByPlainAttrValueQuery(final String entityName, final boolean i\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public List<A> findByPlainAttrValue(\n-            final String schemaKey,\n+            final PlainSchema schema,\n             final PlainAttrValue attrValue,\n             final boolean ignoreCaseMatch) {\n \n-        PlainSchema schema = plainSchemaDAO.find(schemaKey);\n         if (schema == null) {\n-            LOG.error(\"Invalid schema '{}'\", schemaKey);\n+            LOG.error(\"No PlainSchema\");\n             return Collections.<A>emptyList();\n         }\n \n         String entityName = schema.isUniqueConstraint()\n                 ? anyUtils().plainAttrUniqueValueClass().getName()\n                 : anyUtils().plainAttrValueClass().getName();\n         Query query = findByPlainAttrValueQuery(entityName, ignoreCaseMatch);\n-        query.setParameter(\"schemaKey\", schemaKey);\n+        query.setParameter(\"schemaKey\", schema.getKey());\n         query.setParameter(\"stringValue\", attrValue.getStringValue());\n         query.setParameter(\"booleanValue\", attrValue.getBooleanValue());\n         if (attrValue.getDateValue() == null) {\n@@ -214,21 +213,20 @@ public List<A> findByPlainAttrValue(\n \n     @Override\n     public A findByPlainAttrUniqueValue(\n-            final String schemaKey,\n+            final PlainSchema schema,\n             final PlainAttrValue attrUniqueValue,\n             final boolean ignoreCaseMatch) {\n \n-        PlainSchema schema = plainSchemaDAO.find(schemaKey);\n         if (schema == null) {\n-            LOG.error(\"Invalid schema '{}'\", schemaKey);\n+            LOG.error(\"No PlainSchema\");\n             return null;\n         }\n         if (!schema.isUniqueConstraint()) {\n-            LOG.error(\"This schema has not unique constraint: '{}'\", schemaKey);\n+            LOG.error(\"This schema has not unique constraint: '{}'\", schema.getKey());\n             return null;\n         }\n \n-        List<A> result = findByPlainAttrValue(schemaKey, attrUniqueValue, ignoreCaseMatch);\n+        List<A> result = findByPlainAttrValue(schema, attrUniqueValue, ignoreCaseMatch);\n         return result.isEmpty()\n                 ? null\n                 : result.get(0);\n@@ -376,10 +374,9 @@ private Set<String> getWhereClause(final String expression, final String value,\n     }\n \n     @Override\n-    public List<A> findByDerAttrValue(final String schemaKey, final String value, final boolean ignoreCaseMatch) {\n-        DerSchema schema = derSchemaDAO.find(schemaKey);\n+    public List<A> findByDerAttrValue(final DerSchema schema, final String value, final boolean ignoreCaseMatch) {\n         if (schema == null) {\n-            LOG.error(\"Invalid schema '{}'\", schemaKey);\n+            LOG.error(\"No DerSchema\");\n             return Collections.<A>emptyList();\n         }\n "},{"sha":"2ed3468e6b0ca8ecb14b3ab23fa235ffd2386f35","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttrValue.java","status":"modified","additions":44,"deletions":1,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -208,7 +208,51 @@ public <T> T getValue() {\n                                                 : getStringValue());\n     }\n \n+    private Object getValue(final AttrSchemaType type) {\n+        Object value;\n+        switch (type) {\n+\n+            case Boolean:\n+                value = getBooleanValue();\n+                break;\n+\n+            case Long:\n+                value = getLongValue();\n+                break;\n+\n+            case Double:\n+                value = getDoubleValue();\n+                break;\n+\n+            case Date:\n+                value = getDateValue();\n+                break;\n+\n+            case Binary:\n+                value = getBinaryValue();\n+                break;\n+\n+            case String:\n+            case Enum:\n+            case Encrypted:\n+                value = getStringValue();\n+                break;\n+\n+            default:\n+                value = null;\n+        }\n+\n+        return value;\n+    }\n+\n     private String getValueAsString(final AttrSchemaType type, final PlainSchema schema) {\n+        if (getValue(type) == null) {\n+            LOG.warn(\"Could not find expected value for type {} in {}, reverting to getValue().toString()\", type, this);\n+\n+            Object value = getValue();\n+            return value == null ? null : value.toString();\n+        }\n+\n         String result;\n         switch (type) {\n \n@@ -243,7 +287,6 @@ private String getValueAsString(final AttrSchemaType type, final PlainSchema sch\n             case Encrypted:\n             default:\n                 result = getStringValue();\n-                break;\n         }\n \n         return result;"},{"sha":"740df3002c65782d08a6c607a5c456f1171720a5","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/UserTest.java","status":"modified","additions":17,"deletions":9,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -29,7 +29,9 @@\n import java.util.List;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -58,6 +60,12 @@ public class UserTest extends AbstractTest {\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private DerSchemaDAO derSchemaDAO;\n+\n     @Test\n     public void find() {\n         User user = userDAO.find(\"823074dc-d280-436d-a7dd-07399fae48ec\");\n@@ -109,40 +117,40 @@ public void findAllByPageAndSize() {\n \n     @Test\n     public void findByDerAttrValue() {\n-        List<User> list = userDAO.findByDerAttrValue(\"cn\", \"Vivaldi, Antonio\", false);\n+        List<User> list = userDAO.findByDerAttrValue(derSchemaDAO.find(\"cn\"), \"Vivaldi, Antonio\", false);\n         assertEquals(1, list.size());\n \n-        list = userDAO.findByDerAttrValue(\"cn\", \"VIVALDI, ANTONIO\", false);\n+        list = userDAO.findByDerAttrValue(derSchemaDAO.find(\"cn\"), \"VIVALDI, ANTONIO\", false);\n         assertEquals(0, list.size());\n \n-        list = userDAO.findByDerAttrValue(\"cn\", \"VIVALDI, ANTONIO\", true);\n+        list = userDAO.findByDerAttrValue(derSchemaDAO.find(\"cn\"), \"VIVALDI, ANTONIO\", true);\n         assertEquals(1, list.size());\n     }\n \n     @Test\n     public void findByInvalidDerAttrValue() {\n-        assertTrue(userDAO.findByDerAttrValue(\"cn\", \"Antonio, Maria, Rossi\", false).isEmpty());\n+        assertTrue(userDAO.findByDerAttrValue(derSchemaDAO.find(\"cn\"), \"Antonio, Maria, Rossi\", false).isEmpty());\n     }\n \n     @Test\n     public void findByInvalidDerAttrExpression() {\n-        assertTrue(userDAO.findByDerAttrValue(\"noschema\", \"Antonio, Maria\", false).isEmpty());\n+        assertTrue(userDAO.findByDerAttrValue(derSchemaDAO.find(\"noschema\"), \"Antonio, Maria\", false).isEmpty());\n     }\n \n     @Test\n     public void findByPlainAttrUniqueValue() {\n         UPlainAttrUniqueValue fullnameValue = entityFactory.newEntity(UPlainAttrUniqueValue.class);\n         fullnameValue.setStringValue(\"Gioacchino Rossini\");\n \n-        List<User> list = userDAO.findByPlainAttrValue(\"fullname\", fullnameValue, false);\n+        List<User> list = userDAO.findByPlainAttrValue(plainSchemaDAO.find(\"fullname\"), fullnameValue, false);\n         assertEquals(1, list.size());\n \n         fullnameValue.setStringValue(\"Gioacchino ROSSINI\");\n \n-        list = userDAO.findByPlainAttrValue(\"fullname\", fullnameValue, false);\n+        list = userDAO.findByPlainAttrValue(plainSchemaDAO.find(\"fullname\"), fullnameValue, false);\n         assertEquals(0, list.size());\n \n-        list = userDAO.findByPlainAttrValue(\"fullname\", fullnameValue, true);\n+        list = userDAO.findByPlainAttrValue(plainSchemaDAO.find(\"fullname\"), fullnameValue, true);\n         assertEquals(1, list.size());\n     }\n \n@@ -151,7 +159,7 @@ public void findByPlainAttrBooleanValue() {\n         final UPlainAttrValue coolValue = entityFactory.newEntity(UPlainAttrValue.class);\n         coolValue.setBooleanValue(true);\n \n-        final List<User> list = userDAO.findByPlainAttrValue(\"cool\", coolValue, false);\n+        final List<User> list = userDAO.findByPlainAttrValue(plainSchemaDAO.find(\"cool\"), coolValue, false);\n         assertEquals(1, list.size());\n     }\n "},{"sha":"7dfe1677352032683477913235e56a531bfe6602","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/UserTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -242,11 +242,11 @@ public void issueSYNCOPE800() {\n         assertNotNull(firstname);\n \n         // search by ksuffix derived attribute\n-        List<User> list = userDAO.findByDerAttrValue(\"ksuffix\", firstname + \"k\", false);\n+        List<User> list = userDAO.findByDerAttrValue(derSchemaDAO.find(\"ksuffix\"), firstname + \"k\", false);\n         assertEquals(1, list.size());\n \n         // search by kprefix derived attribute\n-        list = userDAO.findByDerAttrValue(\"kprefix\", \"k\" + firstname, false);\n+        list = userDAO.findByDerAttrValue(derSchemaDAO.find(\"kprefix\"), \"k\" + firstname, false);\n         assertEquals(1, list.size());\n     }\n "},{"sha":"180a112c40dfbced740744a5ba10c37d5da718f6","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/IntAttrName.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrName.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrName.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrName.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -23,6 +23,7 @@\n import org.apache.commons.lang3.builder.ToStringBuilder;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.core.persistence.api.entity.Schema;\n \n public class IntAttrName {\n \n@@ -32,7 +33,7 @@ public class IntAttrName {\n \n     private SchemaType schemaType;\n \n-    private String schemaName;\n+    private Schema schema;\n \n     private String enclosingGroup;\n \n@@ -72,12 +73,12 @@ public void setSchemaType(final SchemaType schemaType) {\n         this.schemaType = schemaType;\n     }\n \n-    public String getSchemaName() {\n-        return schemaName;\n+    public Schema getSchema() {\n+        return schema;\n     }\n \n-    public void setSchemaName(final String schemaName) {\n-        this.schemaName = schemaName;\n+    public void setSchema(final Schema schemaName) {\n+        this.schema = schemaName;\n     }\n \n     public String getEnclosingGroup() {\n@@ -142,7 +143,7 @@ public int hashCode() {\n                 append(anyTypeKind).\n                 append(field).\n                 append(schemaType).\n-                append(schemaName).\n+                append(schema).\n                 append(enclosingGroup).\n                 append(relatedUser).\n                 append(relatedAnyObject).\n@@ -169,7 +170,7 @@ public boolean equals(final Object obj) {\n                 append(anyTypeKind, other.anyTypeKind).\n                 append(field, other.field).\n                 append(schemaType, other.schemaType).\n-                append(schemaName, other.schemaName).\n+                append(schema, other.schema).\n                 append(enclosingGroup, other.enclosingGroup).\n                 append(relatedUser, other.relatedUser).\n                 append(relatedAnyObject, other.relatedAnyObject).\n@@ -186,7 +187,7 @@ public String toString() {\n                 append(anyTypeKind).\n                 append(field).\n                 append(schemaType).\n-                append(schemaName).\n+                append(schema).\n                 append(enclosingGroup).\n                 append(relatedUser).\n                 append(relatedAnyObject)."},{"sha":"a662e5844136f7a7ed3890c8b9a0958bc08aea31","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/MappingManager.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -24,6 +24,7 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -58,10 +59,12 @@ public interface MappingManager {\n      * @param provision provision information\n      * @param mapItem mapping item\n      * @param intAttrName int attr name\n+     * @param schemaType schema type\n      * @param any any object\n-     * @return attribute values.\n+     * @return attribute values and their type\n      */\n-    List<PlainAttrValue> getIntValues(Provision provision, Item mapItem, IntAttrName intAttrName, Any<?> any);\n+    Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n+            Provision provision, Item mapItem, IntAttrName intAttrName, AttrSchemaType schemaType, Any<?> any);\n \n     /**\n      * Prepare attribute for sending to a connector instance."},{"sha":"786d8cbe5f8347cda4b2774672251da05419968b","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/ItemTransformer.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FItemTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FItemTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FItemTransformer.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -19,7 +19,9 @@\n package org.apache.syncope.core.provisioning.api.data;\n \n import java.util.List;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n@@ -37,15 +39,17 @@ public interface ItemTransformer {\n      *\n      * @param item mapping item\n      * @param entity entity\n+     * @param schemaType schema type\n      * @param values original values\n      * @return transformed values\n      */\n-    default List<PlainAttrValue> beforePropagation(\n+    default Pair<AttrSchemaType, List<PlainAttrValue>> beforePropagation(\n             Item item,\n             Entity entity,\n+            AttrSchemaType schemaType,\n             List<PlainAttrValue> values) {\n \n-        return values;\n+        return Pair.of(schemaType, values);\n     }\n \n     /**"},{"sha":"ab1dc4dae2aa2938382dc142981b2c1418c51ac0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/IntAttrNameParser.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FIntAttrNameParser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FIntAttrNameParser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FIntAttrNameParser.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -22,6 +22,7 @@\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.SchemaType;\n@@ -66,7 +67,7 @@ public class IntAttrNameParser {\n     @Autowired\n     private AnyUtilsFactory anyUtilsFactory;\n \n-    private SchemaType find(final String key) {\n+    private Pair<Schema, SchemaType> find(final String key) {\n         Schema schema = plainSchemaDAO.find(key);\n         if (schema == null) {\n             schema = derSchemaDAO.find(key);\n@@ -75,13 +76,13 @@ private SchemaType find(final String key) {\n                 if (schema == null) {\n                     return null;\n                 } else {\n-                    return SchemaType.VIRTUAL;\n+                    return Pair.of(schema, SchemaType.VIRTUAL);\n                 }\n             } else {\n-                return SchemaType.DERIVED;\n+                return Pair.of(schema, SchemaType.DERIVED);\n             }\n         } else {\n-            return SchemaType.PLAIN;\n+            return Pair.of(schema, SchemaType.PLAIN);\n         }\n     }\n \n@@ -91,8 +92,11 @@ private void setFieldOrSchemaName(\n             final IntAttrName result) {\n \n         if (anyUtilsFactory.getInstance(anyTypeKind).getField(fieldOrSchemaName) == null) {\n-            result.setSchemaType(find(fieldOrSchemaName));\n-            result.setSchemaName(fieldOrSchemaName);\n+            Pair<Schema, SchemaType> schemaInfo = find(fieldOrSchemaName);\n+            if (schemaInfo != null) {\n+                result.setSchemaType(schemaInfo.getRight());\n+                result.setSchema(schemaInfo.getLeft());\n+            }\n         } else {\n             result.setField(fieldOrSchemaName);\n         }"},{"sha":"c7bf96406710434f05b79c5f6e1f7c28fda9e8c8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":58,"deletions":84,"changes":142,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -46,13 +46,10 @@\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ApplicationDAO;\n-import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RelationshipTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n@@ -67,7 +64,6 @@\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Relationship;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n-import org.apache.syncope.core.persistence.api.entity.Schema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -111,15 +107,6 @@ public class MappingManagerImpl implements MappingManager {\n     @Autowired\n     private AnyTypeDAO anyTypeDAO;\n \n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n-\n-    @Autowired\n-    private DerSchemaDAO derSchemaDAO;\n-\n-    @Autowired\n-    private VirSchemaDAO virSchemaDAO;\n-\n     @Autowired\n     private UserDAO userDAO;\n \n@@ -319,36 +306,26 @@ public Pair<String, Attribute> prepareAttr(\n             return null;\n         }\n \n-        boolean readOnlyVirSchema = false;\n-        Schema schema = null;\n-        AttrSchemaType schemaType = AttrSchemaType.String;\n-        if (intAttrName.getSchemaType() != null) {\n-            switch (intAttrName.getSchemaType()) {\n-                case PLAIN:\n-                    schema = plainSchemaDAO.find(intAttrName.getSchemaName());\n-                    if (schema != null) {\n-                        schemaType = schema.getType();\n-                    }\n-                    break;\n-\n-                case VIRTUAL:\n-                    schema = virSchemaDAO.find(intAttrName.getSchemaName());\n-                    readOnlyVirSchema = (schema != null && schema.isReadonly());\n-                    break;\n+        AttrSchemaType schemaType = intAttrName.getSchema() instanceof PlainSchema\n+                ? ((PlainSchema) intAttrName.getSchema()).getType()\n+                : AttrSchemaType.String;\n+        boolean readOnlyVirSchema = intAttrName.getSchema() instanceof VirSchema\n+                ? intAttrName.getSchema().isReadonly()\n+                : false;\n \n-                default:\n-            }\n-        }\n-\n-        List<PlainAttrValue> values = getIntValues(provision, item, intAttrName, any);\n+        Pair<AttrSchemaType, List<PlainAttrValue>> intValues =\n+                getIntValues(provision, item, intAttrName, schemaType, any);\n+        schemaType = intValues.getLeft();\n+        List<PlainAttrValue> values = intValues.getRight();\n \n         LOG.debug(\"Define mapping for: \"\n                 + \"\\n* ExtAttrName \" + item.getExtAttrName()\n                 + \"\\n* is connObjectKey \" + item.isConnObjectKey()\n                 + \"\\n* is password \" + item.isPassword()\n                 + \"\\n* mandatory condition \" + item.getMandatoryCondition()\n-                + \"\\n* Schema \" + intAttrName.getSchemaName()\n+                + \"\\n* Schema \" + intAttrName.getSchema()\n                 + \"\\n* ClassType \" + schemaType.getType().getName()\n+                + \"\\n* AttrSchemaType \" + schemaType\n                 + \"\\n* Values \" + values);\n \n         Pair<String, Attribute> result;\n@@ -361,10 +338,13 @@ public Pair<String, Attribute> prepareAttr(\n                 if (FrameworkUtil.isSupportedAttributeType(schemaType.getType())) {\n                     objValues.add(value.getValue());\n                 } else {\n-                    if (schema instanceof PlainSchema) {\n-                        objValues.add(value.getValueAsString((PlainSchema) schema));\n-                    } else {\n+                    PlainSchema plainSchema = intAttrName.getSchema() instanceof PlainSchema\n+                            ? (PlainSchema) intAttrName.getSchema()\n+                            : null;\n+                    if (plainSchema == null || plainSchema.getType() != schemaType) {\n                         objValues.add(value.getValueAsString(schemaType));\n+                    } else {\n+                        objValues.add(value.getValueAsString(plainSchema));\n                     }\n                 }\n             }\n@@ -407,10 +387,11 @@ public Pair<String, Attribute> prepareAttr(\n \n     @Transactional(readOnly = true)\n     @Override\n-    public List<PlainAttrValue> getIntValues(\n+    public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n             final Provision provision,\n             final Item mapItem,\n             final IntAttrName intAttrName,\n+            final AttrSchemaType schemaType,\n             final Any<?> any) {\n \n         LOG.debug(\"Get internal values for {} as '{}' on {}\", any, mapItem.getIntAttrName(), provision.getResource());\n@@ -474,7 +455,7 @@ public List<PlainAttrValue> getIntValues(\n         }\n         if (references.isEmpty()) {\n             LOG.warn(\"Could not determine the reference instance for {}\", mapItem.getIntAttrName());\n-            return Collections.emptyList();\n+            return Pair.of(schemaType, Collections.<PlainAttrValue>emptyList());\n         }\n \n         List<PlainAttrValue> values = new ArrayList<>();\n@@ -566,14 +547,14 @@ public List<PlainAttrValue> getIntValues(\n                     case PLAIN:\n                         PlainAttr<?> attr;\n                         if (membership == null) {\n-                            attr = reference.getPlainAttr(intAttrName.getSchemaName()).orElse(null);\n+                            attr = reference.getPlainAttr(intAttrName.getSchema().getKey()).orElse(null);\n                         } else {\n                             attr = ((GroupableRelatable<?, ?, ?, ?, ?>) reference).getPlainAttr(\n-                                    intAttrName.getSchemaName(), membership).orElse(null);\n+                                    intAttrName.getSchema().getKey(), membership).orElse(null);\n                         }\n                         if (attr == null) {\n                             LOG.warn(\"Invalid PlainSchema {} or PlainAttr not found for {}\",\n-                                    intAttrName.getSchemaName(), reference);\n+                                    intAttrName.getSchema().getKey(), reference);\n                         } else {\n                             if (attr.getUniqueValue() != null) {\n                                 values.add(anyUtils.clonePlainAttrValue(attr.getUniqueValue()));\n@@ -584,42 +565,34 @@ public List<PlainAttrValue> getIntValues(\n                         break;\n \n                     case DERIVED:\n-                        DerSchema derSchema = derSchemaDAO.find(intAttrName.getSchemaName());\n-                        if (derSchema == null) {\n-                            LOG.warn(\"Invalid DerSchema: {}\", intAttrName.getSchemaName());\n-                        } else {\n-                            String derValue = membership == null\n-                                    ? derAttrHandler.getValue(reference, derSchema)\n-                                    : derAttrHandler.getValue(reference, membership, derSchema);\n-                            if (derValue != null) {\n-                                PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n-                                attrValue.setStringValue(derValue);\n-                                values.add(attrValue);\n-                            }\n+                        DerSchema derSchema = (DerSchema) intAttrName.getSchema();\n+                        String derValue = membership == null\n+                                ? derAttrHandler.getValue(reference, derSchema)\n+                                : derAttrHandler.getValue(reference, membership, derSchema);\n+                        if (derValue != null) {\n+                            PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n+                            attrValue.setStringValue(derValue);\n+                            values.add(attrValue);\n                         }\n                         break;\n \n                     case VIRTUAL:\n                         // virtual attributes don't get transformed\n                         transform = false;\n \n-                        VirSchema virSchema = virSchemaDAO.find(intAttrName.getSchemaName());\n-                        if (virSchema == null) {\n-                            LOG.warn(\"Invalid VirSchema: {}\", intAttrName.getSchemaName());\n-                        } else {\n-                            LOG.debug(\"Expire entry cache {}-{}\", reference, intAttrName.getSchemaName());\n-                            virAttrCache.expire(\n-                                    reference.getType().getKey(), reference.getKey(), intAttrName.getSchemaName());\n-\n-                            List<String> virValues = membership == null\n-                                    ? virAttrHandler.getValues(reference, virSchema)\n-                                    : virAttrHandler.getValues(reference, membership, virSchema);\n-                            virValues.forEach(virValue -> {\n-                                PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n-                                attrValue.setStringValue(virValue);\n-                                values.add(attrValue);\n-                            });\n-                        }\n+                        VirSchema virSchema = (VirSchema) intAttrName.getSchema();\n+                        LOG.debug(\"Expire entry cache {}-{}\", reference, intAttrName.getSchema().getKey());\n+                        virAttrCache.expire(\n+                                reference.getType().getKey(), reference.getKey(), intAttrName.getSchema().getKey());\n+\n+                        List<String> virValues = membership == null\n+                                ? virAttrHandler.getValues(reference, virSchema)\n+                                : virAttrHandler.getValues(reference, membership, virSchema);\n+                        virValues.forEach(virValue -> {\n+                            PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n+                            attrValue.setStringValue(virValue);\n+                            values.add(attrValue);\n+                        });\n                         break;\n \n                     default:\n@@ -642,17 +615,17 @@ public List<PlainAttrValue> getIntValues(\n \n         LOG.debug(\"Internal values: {}\", values);\n \n-        List<PlainAttrValue> transformed = values;\n+        Pair<AttrSchemaType, List<PlainAttrValue>> trans = Pair.of(schemaType, values);\n         if (transform) {\n             for (ItemTransformer transformer : MappingUtils.getItemTransformers(mapItem)) {\n-                transformed = transformer.beforePropagation(mapItem, any, transformed);\n+                trans = transformer.beforePropagation(mapItem, any, trans.getLeft(), trans.getRight());\n             }\n             LOG.debug(\"Transformed values: {}\", values);\n         } else {\n             LOG.debug(\"No transformation occurred\");\n         }\n \n-        return transformed;\n+        return trans;\n     }\n \n     private String getGroupOwnerValue(final Provision provision, final Any<?> any) {\n@@ -672,20 +645,21 @@ private String getGroupOwnerValue(final Provision provision, final Any<?> any) {\n     @Override\n     public Optional<String> getConnObjectKeyValue(final Any<?> any, final Provision provision) {\n         MappingItem mapItem = provision.getMapping().getConnObjectKeyItem().get();\n-        List<PlainAttrValue> values;\n+        Pair<AttrSchemaType, List<PlainAttrValue>> intValues;\n         try {\n-            values = getIntValues(\n+            intValues = getIntValues(\n                     provision,\n                     mapItem,\n                     intAttrNameParser.parse(mapItem.getIntAttrName(), provision.getAnyType().getKind()),\n+                    AttrSchemaType.String,\n                     any);\n         } catch (ParseException e) {\n             LOG.error(\"Invalid intAttrName '{}' specified, ignoring\", mapItem.getIntAttrName(), e);\n-            values = Collections.emptyList();\n+            intValues = Pair.of(AttrSchemaType.String, Collections.<PlainAttrValue>emptyList());\n         }\n-        return Optional.ofNullable(values.isEmpty()\n+        return Optional.ofNullable(intValues.getRight().isEmpty()\n                 ? null\n-                : values.get(0).getValueAsString());\n+                : intValues.getRight().get(0).getValueAsString());\n     }\n \n     @Transactional(readOnly = true)\n@@ -783,9 +757,9 @@ public void setIntValues(final Item mapItem, final Attribute attr, final AnyTO a\n             switch (intAttrName.getSchemaType()) {\n                 case PLAIN:\n                     Attr attrTO = new Attr();\n-                    attrTO.setSchema(intAttrName.getSchemaName());\n+                    attrTO.setSchema(intAttrName.getSchema().getKey());\n \n-                    PlainSchema schema = plainSchemaDAO.find(intAttrName.getSchemaName());\n+                    PlainSchema schema = (PlainSchema) intAttrName.getSchema();\n \n                     for (Object value : values) {\n                         AttrSchemaType schemaType = schema == null ? AttrSchemaType.String : schema.getType();\n@@ -812,7 +786,7 @@ public void setIntValues(final Item mapItem, final Attribute attr, final AnyTO a\n \n                 case DERIVED:\n                     attrTO = new Attr();\n-                    attrTO.setSchema(intAttrName.getSchemaName());\n+                    attrTO.setSchema(intAttrName.getSchema().getKey());\n \n                     if (groupableTO == null || group == null) {\n                         anyTO.getDerAttrs().add(attrTO);\n@@ -828,7 +802,7 @@ public void setIntValues(final Item mapItem, final Attribute attr, final AnyTO a\n \n                 case VIRTUAL:\n                     attrTO = new Attr();\n-                    attrTO.setSchema(intAttrName.getSchemaName());\n+                    attrTO.setSchema(intAttrName.getSchema().getKey());\n \n                     // virtual attributes don't get transformed, iterate over original attr.getValue()\n                     if (attr.getValue() != null && !attr.getValue().isEmpty()) {"},{"sha":"96e986d932dad1aa0018564b242f3ee50c6b7389","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -29,6 +29,7 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.request.AnyCR;\n@@ -39,6 +40,7 @@\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -209,9 +211,16 @@ private List<String> evaluateMandatoryCondition(final Provision provision, final\n             } catch (ParseException e) {\n                 LOG.error(\"Invalid intAttrName '{}', ignoring\", mapItem.getIntAttrName(), e);\n             }\n-            if (intAttrName != null && intAttrName.getSchemaType() != null) {\n-                List<PlainAttrValue> values = mappingManager.getIntValues(provision, mapItem, intAttrName, any);\n-                if (values.isEmpty() && JexlUtils.evaluateMandatoryCondition(mapItem.getMandatoryCondition(), any)) {\n+            if (intAttrName != null && intAttrName.getSchema() != null) {\n+                AttrSchemaType schemaType = intAttrName.getSchema() instanceof PlainSchema\n+                        ? ((PlainSchema) intAttrName.getSchema()).getType()\n+                        : AttrSchemaType.String;\n+\n+                Pair<AttrSchemaType, List<PlainAttrValue>> intValues =\n+                        mappingManager.getIntValues(provision, mapItem, intAttrName, schemaType, any);\n+                if (intValues.getRight().isEmpty()\n+                        && JexlUtils.evaluateMandatoryCondition(mapItem.getMandatoryCondition(), any)) {\n+\n                     missingAttrNames.add(mapItem.getIntAttrName());\n                 }\n             }"},{"sha":"e3d69e5ffa02a0427b931d9200b1ade1bd14d7f5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/JEXLItemTransformerImpl.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FJEXLItemTransformerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FJEXLItemTransformerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FJEXLItemTransformerImpl.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -23,9 +23,11 @@\n import org.apache.commons.jexl3.JexlContext;\n import org.apache.commons.jexl3.MapContext;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n@@ -50,9 +52,10 @@ public void setPullJEXL(final String pullJEXL) {\n     }\n \n     @Override\n-    public List<PlainAttrValue> beforePropagation(\n+    public Pair<AttrSchemaType, List<PlainAttrValue>> beforePropagation(\n             final Item item,\n             final Entity entity,\n+            final AttrSchemaType schemaType,\n             final List<PlainAttrValue> values) {\n \n         if (StringUtils.isNotBlank(propagationJEXL) && values != null) {\n@@ -67,7 +70,7 @@ public List<PlainAttrValue> beforePropagation(\n                             JexlUtils.addDerAttrsToContext(((Any<?>) entity), jexlContext);\n                         }\n                     }\n-                    jexlContext.set(\"value\", originalValue.toString());\n+                    jexlContext.set(\"value\", originalValue);\n \n                     value.setBinaryValue(null);\n                     value.setBooleanValue(null);\n@@ -78,10 +81,10 @@ public List<PlainAttrValue> beforePropagation(\n                 }\n             });\n \n-            return values;\n+            return Pair.of(AttrSchemaType.String, values);\n         }\n \n-        return JEXLItemTransformer.super.beforePropagation(item, entity, values);\n+        return JEXLItemTransformer.super.beforePropagation(item, entity, schemaType, values);\n     }\n \n     @Override"},{"sha":"67254669e6f83c3ef4a85f707a84a08b1e951335","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -453,15 +453,15 @@ private void populateMapping(\n \n                         switch (intAttrName.getSchemaType()) {\n                             case PLAIN:\n-                                allowed = allowedSchemas.getPlainSchemas().contains(intAttrName.getSchemaName());\n+                                allowed = allowedSchemas.getPlainSchemas().contains(intAttrName.getSchema().getKey());\n                                 break;\n \n                             case DERIVED:\n-                                allowed = allowedSchemas.getDerSchemas().contains(intAttrName.getSchemaName());\n+                                allowed = allowedSchemas.getDerSchemas().contains(intAttrName.getSchema().getKey());\n                                 break;\n \n                             case VIRTUAL:\n-                                allowed = allowedSchemas.getVirSchemas().contains(intAttrName.getSchemaName());\n+                                allowed = allowedSchemas.getVirSchemas().contains(intAttrName.getSchema().getKey());\n                                 break;\n \n                             default:"},{"sha":"330172d7328c10a2b1bbbb42f5e97e51026928d4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -25,6 +25,7 @@\n import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n@@ -41,6 +42,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -278,26 +280,25 @@ private List<String> findByConnObjectKey(\n                 case PLAIN:\n                     PlainAttrValue value = anyUtils.newPlainAttrValue();\n \n-                    PlainSchema schema = plainSchemaDAO.find(intAttrName.getSchemaName());\n-                    if (schema == null) {\n+                    if (intAttrName.getSchemaType() == SchemaType.PLAIN) {\n                         value.setStringValue(connObjectKey);\n                     } else {\n                         try {\n-                            value.parseValue(schema, connObjectKey);\n+                            value.parseValue((PlainSchema) intAttrName.getSchema(), connObjectKey);\n                         } catch (ParsingValidationException e) {\n                             LOG.error(\"While parsing provided __UID__ {}\", value, e);\n                             value.setStringValue(connObjectKey);\n                         }\n                     }\n \n                     result.addAll(anyUtils.dao().findByPlainAttrValue(\n-                            intAttrName.getSchemaName(), value, provision.isIgnoreCaseMatch()).\n+                            (PlainSchema) intAttrName.getSchema(), value, provision.isIgnoreCaseMatch()).\n                             stream().map(Entity::getKey).collect(Collectors.toList()));\n                     break;\n \n                 case DERIVED:\n                     result.addAll(anyUtils.dao().findByDerAttrValue(\n-                            intAttrName.getSchemaName(), connObjectKey, provision.isIgnoreCaseMatch()).\n+                            (DerSchema) intAttrName.getSchema(), connObjectKey, provision.isIgnoreCaseMatch()).\n                             stream().map(Entity::getKey).collect(Collectors.toList()));\n                     break;\n "},{"sha":"b10a4b92f04c3ae1b3a599d9d7fb57f31653f7a9","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/IntAttrNameParserTest.java","status":"modified","additions":23,"deletions":12,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FIntAttrNameParserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FIntAttrNameParserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FIntAttrNameParserTest.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -21,11 +21,15 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n import java.text.ParseException;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -44,7 +48,7 @@ public void ownFields() throws ParseException {\n         assertEquals(AnyTypeKind.USER, intAttrName.getAnyTypeKind());\n         assertNotNull(intAttrName.getField());\n         assertEquals(\"key\", intAttrName.getField());\n-        assertNull(intAttrName.getSchemaName());\n+        assertNull(intAttrName.getSchema());\n         assertNull(intAttrName.getSchemaType());\n         assertNull(intAttrName.getEnclosingGroup());\n         assertNull(intAttrName.getMembershipOfGroup());\n@@ -59,7 +63,7 @@ public void ownFields() throws ParseException {\n         assertEquals(AnyTypeKind.GROUP, intAttrName.getAnyTypeKind());\n         assertNotNull(intAttrName.getField());\n         assertEquals(\"name\", intAttrName.getField());\n-        assertNull(intAttrName.getSchemaName());\n+        assertNull(intAttrName.getSchema());\n         assertNull(intAttrName.getSchemaType());\n         assertNull(intAttrName.getEnclosingGroup());\n         assertNull(intAttrName.getMembershipOfGroup());\n@@ -74,7 +78,7 @@ public void ownFields() throws ParseException {\n         assertEquals(AnyTypeKind.GROUP, intAttrName.getAnyTypeKind());\n         assertNotNull(intAttrName.getField());\n         assertEquals(\"userOwner\", intAttrName.getField());\n-        assertNull(intAttrName.getSchemaName());\n+        assertNull(intAttrName.getSchema());\n         assertNull(intAttrName.getSchemaType());\n         assertNull(intAttrName.getEnclosingGroup());\n         assertNull(intAttrName.getMembershipOfGroup());\n@@ -96,8 +100,9 @@ public void ownSchema() throws ParseException {\n         assertNotNull(intAttrName);\n         assertEquals(AnyTypeKind.USER, intAttrName.getAnyTypeKind());\n         assertNull(intAttrName.getField());\n-        assertEquals(\"email\", intAttrName.getSchemaName());\n+        assertEquals(\"email\", intAttrName.getSchema().getKey());\n         assertEquals(SchemaType.PLAIN, intAttrName.getSchemaType());\n+        assertTrue(intAttrName.getSchema() instanceof PlainSchema);\n         assertNull(intAttrName.getEnclosingGroup());\n         assertNull(intAttrName.getMembershipOfGroup());\n         assertNull(intAttrName.getRelatedAnyObject());\n@@ -110,8 +115,9 @@ public void ownSchema() throws ParseException {\n         assertNotNull(intAttrName);\n         assertEquals(AnyTypeKind.ANY_OBJECT, intAttrName.getAnyTypeKind());\n         assertNull(intAttrName.getField());\n-        assertEquals(\"cn\", intAttrName.getSchemaName());\n+        assertEquals(\"cn\", intAttrName.getSchema().getKey());\n         assertEquals(SchemaType.DERIVED, intAttrName.getSchemaType());\n+        assertTrue(intAttrName.getSchema() instanceof DerSchema);\n         assertNull(intAttrName.getEnclosingGroup());\n         assertNull(intAttrName.getMembershipOfGroup());\n         assertNull(intAttrName.getRelatedAnyObject());\n@@ -124,8 +130,9 @@ public void ownSchema() throws ParseException {\n         assertNotNull(intAttrName);\n         assertEquals(AnyTypeKind.ANY_OBJECT, intAttrName.getAnyTypeKind());\n         assertNull(intAttrName.getField());\n-        assertEquals(\"rvirtualdata\", intAttrName.getSchemaName());\n+        assertEquals(\"rvirtualdata\", intAttrName.getSchema().getKey());\n         assertEquals(SchemaType.VIRTUAL, intAttrName.getSchemaType());\n+        assertTrue(intAttrName.getSchema() instanceof VirSchema);\n         assertNull(intAttrName.getEnclosingGroup());\n         assertNull(intAttrName.getMembershipOfGroup());\n         assertNull(intAttrName.getRelatedAnyObject());\n@@ -141,8 +148,9 @@ public void enclosingGroup() throws ParseException {\n         assertNotNull(intAttrName);\n         assertEquals(AnyTypeKind.GROUP, intAttrName.getAnyTypeKind());\n         assertNull(intAttrName.getField());\n-        assertEquals(\"cn\", intAttrName.getSchemaName());\n+        assertEquals(\"cn\", intAttrName.getSchema().getKey());\n         assertEquals(SchemaType.DERIVED, intAttrName.getSchemaType());\n+        assertTrue(intAttrName.getSchema() instanceof DerSchema);\n         assertEquals(\"readers\", intAttrName.getEnclosingGroup());\n         assertNull(intAttrName.getMembershipOfGroup());\n         assertNull(intAttrName.getRelatedAnyObject());\n@@ -158,8 +166,9 @@ public void relatedUser() throws ParseException {\n         assertNotNull(intAttrName);\n         assertEquals(AnyTypeKind.USER, intAttrName.getAnyTypeKind());\n         assertNull(intAttrName.getField());\n-        assertEquals(\"firstname\", intAttrName.getSchemaName());\n+        assertEquals(\"firstname\", intAttrName.getSchema().getKey());\n         assertEquals(SchemaType.PLAIN, intAttrName.getSchemaType());\n+        assertTrue(intAttrName.getSchema() instanceof PlainSchema);\n         assertEquals(\"bellini\", intAttrName.getRelatedUser());\n         assertNull(intAttrName.getEnclosingGroup());\n         assertNull(intAttrName.getMembershipOfGroup());\n@@ -175,7 +184,7 @@ public void relatedAnyObject() throws ParseException {\n         assertNotNull(intAttrName);\n         assertEquals(AnyTypeKind.ANY_OBJECT, intAttrName.getAnyTypeKind());\n         assertEquals(\"name\", intAttrName.getField());\n-        assertNull(intAttrName.getSchemaName());\n+        assertNull(intAttrName.getSchema());\n         assertNull(intAttrName.getSchemaType());\n         assertNull(intAttrName.getEnclosingGroup());\n         assertEquals(\"hp\", intAttrName.getRelatedAnyObject());\n@@ -192,8 +201,9 @@ public void membership() throws ParseException {\n         assertNotNull(intAttrName);\n         assertEquals(AnyTypeKind.USER, intAttrName.getAnyTypeKind());\n         assertNull(intAttrName.getField());\n-        assertEquals(\"cn\", intAttrName.getSchemaName());\n+        assertEquals(\"cn\", intAttrName.getSchema().getKey());\n         assertEquals(SchemaType.DERIVED, intAttrName.getSchemaType());\n+        assertTrue(intAttrName.getSchema() instanceof DerSchema);\n         assertNull(intAttrName.getEnclosingGroup());\n         assertEquals(\"top\", intAttrName.getMembershipOfGroup());\n         assertNull(intAttrName.getRelatedAnyObject());\n@@ -209,7 +219,7 @@ public void privileges() throws ParseException {\n         assertNotNull(intAttrName);\n         assertEquals(AnyTypeKind.USER, intAttrName.getAnyTypeKind());\n         assertNull(intAttrName.getField());\n-        assertNull(intAttrName.getSchemaName());\n+        assertNull(intAttrName.getSchema());\n         assertNull(intAttrName.getSchemaType());\n         assertNull(intAttrName.getEnclosingGroup());\n         assertNull(intAttrName.getRelatedAnyObject());\n@@ -226,8 +236,9 @@ public void relationship() throws ParseException {\n         assertNotNull(intAttrName);\n         assertEquals(AnyTypeKind.ANY_OBJECT, intAttrName.getAnyTypeKind());\n         assertNull(intAttrName.getField());\n-        assertEquals(\"location\", intAttrName.getSchemaName());\n+        assertEquals(\"location\", intAttrName.getSchema().getKey());\n         assertEquals(SchemaType.PLAIN, intAttrName.getSchemaType());\n+        assertTrue(intAttrName.getSchema() instanceof PlainSchema);\n         assertEquals(\"inclusion\", intAttrName.getRelationshipType());\n         assertEquals(\"PRINTER\", intAttrName.getRelationshipAnyType());\n         assertNull(intAttrName.getEnclosingGroup());"},{"sha":"d0f321ee8afdb742abeb43dc73057b5b9317a282","filename":"ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/oidc/OIDCUserManager.java","status":"modified","additions":11,"deletions":8,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -36,9 +36,11 @@\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.OIDCProvider;\n import org.apache.syncope.core.persistence.api.entity.OIDCProviderItem;\n@@ -135,24 +137,25 @@ public List<String> findMatchingUser(final String keyValue, final OIDCProviderIt\n                 case PLAIN:\n                     PlainAttrValue value = entityFactory.newEntity(UPlainAttrValue.class);\n \n-                    PlainSchema schema = plainSchemaDAO.find(intAttrName.getSchemaName());\n-                    if (schema == null) {\n+                    if (intAttrName.getSchemaType() == SchemaType.PLAIN) {\n                         value.setStringValue(transformed);\n                     } else {\n                         try {\n-                            value.parseValue(schema, transformed);\n+                            value.parseValue((PlainSchema) intAttrName.getSchema(), transformed);\n                         } catch (ParsingValidationException e) {\n                             LOG.error(\"While parsing provided key value {}\", transformed, e);\n                             value.setStringValue(transformed);\n                         }\n                     }\n \n-                    result.addAll(userDAO.findByPlainAttrValue(intAttrName.getSchemaName(), value, false).stream().\n+                    result.addAll(userDAO.findByPlainAttrValue(\n+                            (PlainSchema) intAttrName.getSchema(), value, false).stream().\n                             map(User::getUsername).collect(Collectors.toList()));\n                     break;\n \n                 case DERIVED:\n-                    result.addAll(userDAO.findByDerAttrValue(intAttrName.getSchemaName(), transformed, false).stream().\n+                    result.addAll(userDAO.findByDerAttrValue(\n+                            (DerSchema) intAttrName.getSchema(), transformed, false).stream().\n                             map(User::getUsername).collect(Collectors.toList()));\n                     break;\n \n@@ -221,18 +224,18 @@ public void fill(final OIDCProvider op, final OIDCLoginResponseTO responseTO, fi\n             } else if (intAttrName != null && intAttrName.getSchemaType() != null) {\n                 switch (intAttrName.getSchemaType()) {\n                     case PLAIN:\n-                        Optional<Attr> attr = userTO.getPlainAttr(intAttrName.getSchemaName());\n+                        Optional<Attr> attr = userTO.getPlainAttr(intAttrName.getSchema().getKey());\n                         if (attr.isPresent()) {\n                             attr.get().getValues().clear();\n                         } else {\n-                            attr = Optional.of(new Attr.Builder(intAttrName.getSchemaName()).build());\n+                            attr = Optional.of(new Attr.Builder(intAttrName.getSchema().getKey()).build());\n                             userTO.getPlainAttrs().add(attr.get());\n                         }\n                         attr.get().getValues().addAll(values);\n                         break;\n \n                     default:\n-                        LOG.warn(\"Unsupported: {} {}\", intAttrName.getSchemaType(), intAttrName.getSchemaName());\n+                        LOG.warn(\"Unsupported: {} {}\", intAttrName.getSchemaType(), intAttrName.getSchema().getKey());\n                 }\n             }\n         });"},{"sha":"45f19abbbd5a7e75dab486f113ca8a7927cbe7ca","filename":"ext/oidcclient/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/OIDCProviderDataBinderImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCProviderDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCProviderDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCProviderDataBinderImpl.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -107,15 +107,15 @@ private void populateItems(\n                             && intAttrName.getRelatedAnyObject() == null) {\n                         switch (intAttrName.getSchemaType()) {\n                             case PLAIN:\n-                                allowed = allowedSchemas.getPlainSchemas().contains(intAttrName.getSchemaName());\n+                                allowed = allowedSchemas.getPlainSchemas().contains(intAttrName.getSchema().getKey());\n                                 break;\n \n                             case DERIVED:\n-                                allowed = allowedSchemas.getDerSchemas().contains(intAttrName.getSchemaName());\n+                                allowed = allowedSchemas.getDerSchemas().contains(intAttrName.getSchema().getKey());\n                                 break;\n \n                             case VIRTUAL:\n-                                allowed = allowedSchemas.getVirSchemas().contains(intAttrName.getSchemaName());\n+                                allowed = allowedSchemas.getVirSchemas().contains(intAttrName.getSchema().getKey());\n                                 break;\n \n                             default:"},{"sha":"81c33731ff94ec057dd7a050b8060554d6212a21","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2UserManager.java","status":"modified","additions":11,"deletions":8,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -36,10 +36,12 @@\n import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.SAML2IdPDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n@@ -145,24 +147,25 @@ public List<String> findMatchingUser(final String keyValue, final String idpKey)\n                 case PLAIN:\n                     PlainAttrValue value = entityFactory.newEntity(UPlainAttrValue.class);\n \n-                    PlainSchema schema = plainSchemaDAO.find(intAttrName.getSchemaName());\n-                    if (schema == null) {\n+                    if (intAttrName.getSchemaType() == SchemaType.PLAIN) {\n                         value.setStringValue(transformed);\n                     } else {\n                         try {\n-                            value.parseValue(schema, transformed);\n+                            value.parseValue((PlainSchema) intAttrName.getSchema(), transformed);\n                         } catch (ParsingValidationException e) {\n                             LOG.error(\"While parsing provided key value {}\", transformed, e);\n                             value.setStringValue(transformed);\n                         }\n                     }\n \n-                    result.addAll(userDAO.findByPlainAttrValue(intAttrName.getSchemaName(), value, false).stream().\n+                    result.addAll(userDAO.findByPlainAttrValue(\n+                            (PlainSchema) intAttrName.getSchema(), value, false).stream().\n                             map(User::getUsername).collect(Collectors.toList()));\n                     break;\n \n                 case DERIVED:\n-                    result.addAll(userDAO.findByDerAttrValue(intAttrName.getSchemaName(), transformed, false).stream().\n+                    result.addAll(userDAO.findByDerAttrValue(\n+                            (DerSchema) intAttrName.getSchema(), transformed, false).stream().\n                             map(User::getUsername).collect(Collectors.toList()));\n                     break;\n \n@@ -235,18 +238,18 @@ public void fill(final String idpKey, final SAML2LoginResponseTO responseTO, fin\n             } else if (intAttrName != null && intAttrName.getSchemaType() != null) {\n                 switch (intAttrName.getSchemaType()) {\n                     case PLAIN:\n-                        Optional<Attr> attr = userTO.getPlainAttr(intAttrName.getSchemaName());\n+                        Optional<Attr> attr = userTO.getPlainAttr(intAttrName.getSchema().getKey());\n                         if (attr.isPresent()) {\n                             attr.get().getValues().clear();\n                         } else {\n-                            attr = Optional.of(new Attr.Builder(intAttrName.getSchemaName()).build());\n+                            attr = Optional.of(new Attr.Builder(intAttrName.getSchema().getKey()).build());\n                             userTO.getPlainAttrs().add(attr.get());\n                         }\n                         attr.get().getValues().addAll(values);\n                         break;\n \n                     default:\n-                        LOG.warn(\"Unsupported: {} {}\", intAttrName.getSchemaType(), intAttrName.getSchemaName());\n+                        LOG.warn(\"Unsupported: {} {}\", intAttrName.getSchemaType(), intAttrName.getSchema().getKey());\n                 }\n             }\n         });"},{"sha":"7f2a482ab27f8ada18c3ddc5a28b2e72cba33391","filename":"ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -105,15 +105,15 @@ private void populateItems(\n                             && intAttrName.getRelatedAnyObject() == null) {\n                         switch (intAttrName.getSchemaType()) {\n                             case PLAIN:\n-                                allowed = allowedSchemas.getPlainSchemas().contains(intAttrName.getSchemaName());\n+                                allowed = allowedSchemas.getPlainSchemas().contains(intAttrName.getSchema().getKey());\n                                 break;\n \n                             case DERIVED:\n-                                allowed = allowedSchemas.getDerSchemas().contains(intAttrName.getSchemaName());\n+                                allowed = allowedSchemas.getDerSchemas().contains(intAttrName.getSchema().getKey());\n                                 break;\n \n                             case VIRTUAL:\n-                                allowed = allowedSchemas.getVirSchemas().contains(intAttrName.getSchemaName());\n+                                allowed = allowedSchemas.getVirSchemas().contains(intAttrName.getSchema().getKey());\n                                 break;\n \n                             default:"},{"sha":"7e4f042bcda7232d87003b5a8d9da27ec8375cac","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DateToDateItemTransformer.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToDateItemTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToDateItemTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToDateItemTransformer.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import java.util.Calendar;\n+import java.util.List;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n+import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n+\n+public class DateToDateItemTransformer implements ItemTransformer {\n+\n+    @Override\n+    public Pair<AttrSchemaType, List<PlainAttrValue>> beforePropagation(\n+            final Item item,\n+            final Entity entity,\n+            final AttrSchemaType schemaType,\n+            final List<PlainAttrValue> values) {\n+\n+        if (values == null || values.isEmpty() || values.get(0).getDateValue() == null) {\n+            return ItemTransformer.super.beforePropagation(item, entity, schemaType, values);\n+        } else {\n+            Calendar cal = Calendar.getInstance();\n+            cal.setTime(values.get(0).getDateValue());\n+            cal.add(Calendar.DAY_OF_MONTH, 1);\n+            values.get(0).setDateValue(cal.getTime());\n+\n+            return Pair.of(schemaType, values);\n+        }\n+    }\n+}"},{"sha":"a54bb05daa23f71fdf1665453828fcebc68ceed1","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DateToLongItemTransformer.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToLongItemTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToLongItemTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToLongItemTransformer.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import java.util.List;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n+import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n+\n+public class DateToLongItemTransformer implements ItemTransformer {\n+\n+    @Override\n+    public Pair<AttrSchemaType, List<PlainAttrValue>> beforePropagation(\n+            final Item item,\n+            final Entity entity,\n+            final AttrSchemaType schemaType,\n+            final List<PlainAttrValue> values) {\n+\n+        if (values == null || values.isEmpty() || values.get(0).getDateValue() == null) {\n+            return ItemTransformer.super.beforePropagation(item, entity, schemaType, values);\n+        } else {\n+            values.get(0).setLongValue(values.get(0).getDateValue().getTime());\n+            values.get(0).setBinaryValue(null);\n+            values.get(0).setBooleanValue(null);\n+            values.get(0).setDateValue(null);\n+            values.get(0).setDoubleValue(null);\n+            values.get(0).setStringValue(null);\n+\n+            return Pair.of(AttrSchemaType.Long, values);\n+        }\n+    }\n+}"},{"sha":"2d333a7f60cc549b8d9bb2f11b710e9977649c56","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -175,6 +175,8 @@ public class ITImplementationLookup implements ImplementationLookup {\n             put(ImplementationType.PASSWORD_RULE, classNames);\n \n             classNames = new HashSet<>();\n+            classNames.add(DateToDateItemTransformer.class.getName());\n+            classNames.add(DateToLongItemTransformer.class.getName());\n             put(ImplementationType.ITEM_TRANSFORMER, classNames);\n \n             classNames = new HashSet<>();"},{"sha":"cf9aa7778200244dd3aec27cb0e2d67f8ad60596","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":155,"deletions":9,"changes":164,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -24,42 +24,95 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.io.IOException;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Calendar;\n import java.util.Collections;\n-import java.util.Comparator;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n import javax.ws.rs.core.Response;\n-import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.client.lib.batch.BatchRequest;\n import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AttrPatch;\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n+import java.util.Set;\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.beans.ExecQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.fit.core.reference.DateToDateItemTransformer;\n+import org.apache.syncope.fit.core.reference.DateToLongItemTransformer;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n \n public class PropagationTaskITCase extends AbstractTaskITCase {\n \n+    @BeforeAll\n+    public static void testItemTransformersSetup() {\n+        ImplementationTO dateToLong = null;\n+        ImplementationTO dateToDate = null;\n+        try {\n+            dateToLong = implementationService.read(\n+                    ImplementationType.ITEM_TRANSFORMER, DateToLongItemTransformer.class.getSimpleName());\n+            dateToDate = implementationService.read(\n+                    ImplementationType.ITEM_TRANSFORMER, DateToDateItemTransformer.class.getSimpleName());\n+        } catch (SyncopeClientException e) {\n+            if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n+                dateToLong = new ImplementationTO();\n+                dateToLong.setKey(DateToLongItemTransformer.class.getSimpleName());\n+                dateToLong.setEngine(ImplementationEngine.JAVA);\n+                dateToLong.setType(ImplementationType.ITEM_TRANSFORMER);\n+                dateToLong.setBody(DateToLongItemTransformer.class.getName());\n+                Response response = implementationService.create(dateToLong);\n+                dateToLong = implementationService.read(\n+                        dateToLong.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+                assertNotNull(dateToLong);\n+\n+                dateToDate = new ImplementationTO();\n+                dateToDate.setKey(DateToDateItemTransformer.class.getSimpleName());\n+                dateToDate.setEngine(ImplementationEngine.JAVA);\n+                dateToDate.setType(ImplementationType.ITEM_TRANSFORMER);\n+                dateToDate.setBody(DateToDateItemTransformer.class.getName());\n+                response = implementationService.create(dateToDate);\n+                dateToDate = implementationService.read(\n+                        dateToDate.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+                assertNotNull(dateToDate);\n+            }\n+        }\n+        assertNotNull(dateToLong);\n+        assertNotNull(dateToDate);\n+    }\n+\n     @Test\n     public void paginatedList() {\n         PagedResult<PropagationTaskTO> tasks = taskService.search(\n@@ -276,13 +329,7 @@ public void issueSYNCOPE1288() {\n                         page(1).\n                         size(10).\n                         build());\n-        Collections.sort(unorderedTasks.getResult(), new Comparator<TaskTO>() {\n-\n-            @Override\n-            public int compare(final TaskTO o1, final TaskTO o2) {\n-                return o1.getStart().compareTo(o2.getStart());\n-            }\n-        });\n+        Collections.sort(unorderedTasks.getResult(), (t1, t2) -> t1.getStart().compareTo(t2.getStart()));\n         assertNotNull(unorderedTasks);\n         assertFalse(unorderedTasks.getResult().isEmpty());\n         assertEquals(10, unorderedTasks.getResult().size());\n@@ -316,4 +363,103 @@ public int compare(final TaskTO o1, final TaskTO o2) {\n \n         assertTrue(orderedTasks.getResult().equals(unorderedTasks.getResult()));\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1430() throws ParseException {\n+        ResourceTO ldap = resourceService.read(RESOURCE_NAME_LDAP);\n+        try {\n+            // 1. clone the LDAP resource and add some sensible mappings\n+            ProvisionTO provision = ldap.getProvision(AnyTypeKind.USER.name()).orElse(null);\n+            assertNotNull(provision);\n+            provision.getMapping().getItems().removeIf(item -> \"mail\".equals(item.getExtAttrName()));\n+            provision.getVirSchemas().clear();\n+\n+            // Date -> long (JEXL expression) -> string (as all JEXL in Syncope)\n+            ItemTO loginDateForJexlAsLong = new ItemTO();\n+            loginDateForJexlAsLong.setPurpose(MappingPurpose.PROPAGATION);\n+            loginDateForJexlAsLong.setIntAttrName(\"loginDate\");\n+            loginDateForJexlAsLong.setExtAttrName(\"employeeNumber\");\n+            loginDateForJexlAsLong.setPropagationJEXLTransformer(\"value.getTime()\");\n+            provision.getMapping().add(loginDateForJexlAsLong);\n+\n+            // Date -> string (JEXL expression)\n+            ItemTO loginDateForJexlAsString = new ItemTO();\n+            loginDateForJexlAsString.setPurpose(MappingPurpose.PROPAGATION);\n+            loginDateForJexlAsString.setIntAttrName(\"loginDate\");\n+            loginDateForJexlAsString.setExtAttrName(\"street\");\n+            loginDateForJexlAsString.setPropagationJEXLTransformer(\n+                    \"value.toInstant().toString().split(\\\"T\\\")[0].replace(\\\"-\\\", \\\"\\\")\");\n+            provision.getMapping().add(loginDateForJexlAsString);\n+\n+            // Date -> long\n+            ItemTO loginDateForJavaToLong = new ItemTO();\n+            loginDateForJavaToLong.setPurpose(MappingPurpose.PROPAGATION);\n+            loginDateForJavaToLong.setIntAttrName(\"loginDate\");\n+            loginDateForJavaToLong.setExtAttrName(\"st\");\n+            loginDateForJavaToLong.getTransformers().add(DateToLongItemTransformer.class.getSimpleName());\n+            provision.getMapping().add(loginDateForJavaToLong);\n+\n+            // Date -> date\n+            ItemTO loginDateForJavaToDate = new ItemTO();\n+            loginDateForJavaToDate.setPurpose(MappingPurpose.PROPAGATION);\n+            loginDateForJavaToDate.setIntAttrName(\"loginDate\");\n+            loginDateForJavaToDate.setExtAttrName(\"carLicense\");\n+            loginDateForJavaToDate.getTransformers().add(DateToDateItemTransformer.class.getSimpleName());\n+            provision.getMapping().add(loginDateForJavaToDate);\n+\n+            ldap.getProvisions().clear();\n+            ldap.getProvisions().add(provision);\n+            ldap.setKey(RESOURCE_NAME_LDAP + \"1430\" + getUUIDString());\n+            resourceService.create(ldap);\n+\n+            // 2. create user with the new resource assigned\n+            UserCR createReq = UserITCase.getUniqueSample(\"syncope1430@syncope.apache.org\");\n+            createReq.getResources().clear();\n+            createReq.getResources().add(ldap.getKey());\n+            createReq.getPlainAttrs().removeIf(attr -> \"loginDate\".equals(attr.getSchema()));\n+            createReq.getPlainAttrs().add(attr(\"loginDate\", \"2019-01-29\"));\n+            UserTO user = createUser(createReq).getEntity();\n+\n+            // 3. check attributes prepared for propagation\n+            PagedResult<PropagationTaskTO> tasks = taskService.search(new TaskQuery.Builder(TaskType.PROPAGATION).\n+                    resource(user.getResources().iterator().next()).\n+                    anyTypeKind(AnyTypeKind.USER).entityKey(user.getKey()).build());\n+            assertEquals(1, tasks.getSize());\n+\n+            Set<Attribute> propagationAttrs = new HashSet<>();\n+            if (StringUtils.isNotBlank(tasks.getResult().get(0).getAttributes())) {\n+                propagationAttrs.addAll(Arrays.asList(\n+                        POJOHelper.deserialize(tasks.getResult().get(0).getAttributes(), Attribute[].class)));\n+            }\n+\n+            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\n+            Calendar loginDate = Calendar.getInstance();\n+            loginDate.setTime(sdf.parse(user.getPlainAttr(\"loginDate\").get().getValues().get(0)));\n+\n+            Attribute employeeNumber = AttributeUtil.find(\"employeeNumber\", propagationAttrs);\n+            assertNotNull(employeeNumber);\n+            assertEquals(String.valueOf(loginDate.getTimeInMillis()), employeeNumber.getValue().get(0));\n+\n+            Attribute street = AttributeUtil.find(\"street\", propagationAttrs);\n+            assertNotNull(street);\n+            assertEquals(loginDate.toInstant().toString().split(\"T\")[0].replace(\"-\", \"\"), street.getValue().get(0));\n+\n+            Attribute st = AttributeUtil.find(\"st\", propagationAttrs);\n+            assertNotNull(st);\n+            assertEquals(loginDate.getTimeInMillis(), st.getValue().get(0));\n+\n+            loginDate.add(Calendar.DAY_OF_MONTH, 1);\n+\n+            Attribute carLicense = AttributeUtil.find(\"carLicense\", propagationAttrs);\n+            assertNotNull(carLicense);\n+            assertEquals(sdf.format(loginDate.getTime()), carLicense.getValue().get(0));\n+        } finally {\n+            try {\n+                resourceService.delete(ldap.getKey());\n+            } catch (Exception ignore) {\n+                // ignore\n+            }\n+        }\n+    }\n }"},{"sha":"2900d03a3ea2d179c9322db2945b5dbda5fa4ba8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/VirAttrITCase.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -23,11 +23,9 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n-import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n import java.util.Optional;\n-import java.util.stream.Collectors;\n import javax.sql.DataSource;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n@@ -623,9 +621,7 @@ public void issueSYNCOPE691() {\n         try {\n             ProvisionTO provision = ldap.getProvision(AnyTypeKind.USER.name()).orElse(null);\n             assertNotNull(provision);\n-            List<ItemTO> mail = provision.getMapping().getItems().stream().\n-                    filter(item -> \"mail\".equals(item.getExtAttrName())).collect(Collectors.toList());\n-            provision.getMapping().getItems().removeAll(mail);\n+            provision.getMapping().getItems().removeIf(item -> \"mail\".equals(item.getExtAttrName()));\n             provision.getVirSchemas().clear();\n \n             ldap.getProvisions().clear();"},{"sha":"e35e54dc8a54556c2aa285fe8f3e59926526ffad","filename":"fit/core-reference/src/test/resources/PrefixItemTransformer.groovy","status":"modified","additions":11,"deletions":9,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae2c2a442a928c351bbe25a9bc3b652a706e36c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FPrefixItemTransformer.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae2c2a442a928c351bbe25a9bc3b652a706e36c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FPrefixItemTransformer.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FPrefixItemTransformer.groovy?ref=dae2c2a442a928c351bbe25a9bc3b652a706e36c","patch":"@@ -16,14 +16,16 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-import java.util.ArrayList;\n import groovy.transform.CompileStatic\n+import java.util.ArrayList;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.to.EntityTO;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n+import org.apache.commons.lang3.tuple.Pair\n+import org.apache.syncope.common.lib.to.EntityTO\n+import org.apache.syncope.common.lib.types.AttrSchemaType\n+import org.apache.syncope.core.persistence.api.entity.Entity\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue\n+import org.apache.syncope.core.persistence.api.entity.resource.Item\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n \n @CompileStatic\n@@ -32,18 +34,19 @@ class PrefixItemTransformer implements ItemTransformer {\n   public static String PREFIX = \"PREFIX_\";\n \n   @Override\n-  List<PlainAttrValue> beforePropagation(\n+  Pair<AttrSchemaType, List<PlainAttrValue>> beforePropagation(\n     Item item,\n     Entity entity,\n+    AttrSchemaType schemaType,\n     List<PlainAttrValue> values) {\n \n     if (values == null || values.isEmpty() || values.get(0).getStringValue() == null) {\n-      return values;\n+      return Pair.of(schemaType, values);\n     } else {\n       String value = values.get(0).getStringValue();\n       values.get(0).setStringValue(PREFIX + value);\n \n-      return values;\n+      return Pair.of(schemaType, values);\n     }\n   }\n \n@@ -62,6 +65,5 @@ class PrefixItemTransformer implements ItemTransformer {\n       return newValues;\n     }\n   }\n-\n }\n "}]}