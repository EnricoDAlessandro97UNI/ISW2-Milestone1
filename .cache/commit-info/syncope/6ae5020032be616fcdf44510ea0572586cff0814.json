{"sha":"6ae5020032be616fcdf44510ea0572586cff0814","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjZhZTUwMjAwMzJiZTYxNmZjZGY0NDUxMGVhMDU3MjU4NmNmZjA4MTQ=","commit":{"author":{"name":"Colm O hEigeartaigh","email":"coheigea@apache.org","date":"2016-07-28T13:08:00Z"},"committer":{"name":"Colm O hEigeartaigh","email":"coheigea@apache.org","date":"2016-07-28T13:08:00Z"},"message":"SYCOPE-910 - Introduce new Camel propagation component - part I","tree":{"sha":"0b00e8f4b28742cda4af78fe61bb4e7d6244beb5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0b00e8f4b28742cda4af78fe61bb4e7d6244beb5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6ae5020032be616fcdf44510ea0572586cff0814","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6ae5020032be616fcdf44510ea0572586cff0814","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6ae5020032be616fcdf44510ea0572586cff0814","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6ae5020032be616fcdf44510ea0572586cff0814/comments","author":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"committer":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"parents":[{"sha":"012f97bcabaf257b6a8d93c49408930e2785e6ef","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/012f97bcabaf257b6a8d93c49408930e2785e6ef","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/012f97bcabaf257b6a8d93c49408930e2785e6ef"}],"stats":{"total":1481,"additions":728,"deletions":753},"files":[{"sha":"d1d9b9e47c33e6b4a3fec397d3eddeff78c4d353","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/AnyType.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FAnyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FAnyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FAnyType.java?ref=6ae5020032be616fcdf44510ea0572586cff0814","patch":"@@ -0,0 +1,23 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.core.provisioning.camel;\n+\n+public enum AnyType {\n+\n+    user, group, any\n+\n+}"},{"sha":"a904b47324f3d4df48f977ab2e0a992e61355c77","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/component/PropagateComponent.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateComponent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateComponent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateComponent.java?ref=6ae5020032be616fcdf44510ea0572586cff0814","patch":"@@ -0,0 +1,71 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.core.provisioning.camel.component;\n+\n+import java.util.Map;\n+\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.impl.UriEndpointComponent;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class PropagateComponent extends UriEndpointComponent {\n+    \n+    @Autowired\n+    protected PropagationManager propagationManager;\n+\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+    \n+    @Autowired\n+    protected UserDAO userDAO;\n+\n+    @Autowired\n+    protected GroupDAO groupDAO;\n+\n+    @Autowired\n+    protected AnyObjectDAO anyObjectDAO;\n+\n+    @Autowired\n+    protected GroupDataBinder groupDataBinder;\n+\n+    public PropagateComponent() {\n+        super(PropagateEndpoint.class);\n+    }\n+\n+    protected Endpoint createEndpoint(final String uri, final String remaining,\n+                                      final Map<String, Object> parameters) throws Exception {\n+        PropagateType type = PropagateType.valueOf(remaining);\n+        PropagateEndpoint endpoint = new PropagateEndpoint(uri, this);\n+        endpoint.setPropagateType(type);\n+        endpoint.setPropagationManager(propagationManager);\n+        endpoint.setPropagationTaskExecutor(taskExecutor);\n+        endpoint.setUserDAO(userDAO);\n+        endpoint.setGroupDAO(groupDAO);\n+        endpoint.setAnyObjectDAO(anyObjectDAO);\n+        endpoint.setGroupDataBinder(groupDataBinder);\n+\n+        setProperties(endpoint, parameters);\n+        return endpoint;\n+    }\n+\n+}"},{"sha":"7dff3a9df316aead34f6d5da6162a5ca66f984b7","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/component/PropagateEndpoint.java","status":"added","additions":138,"deletions":0,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateEndpoint.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateEndpoint.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateEndpoint.java?ref=6ae5020032be616fcdf44510ea0572586cff0814","patch":"@@ -0,0 +1,138 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.core.provisioning.camel.component;\n+\n+import org.apache.camel.Component;\n+import org.apache.camel.Consumer;\n+import org.apache.camel.Processor;\n+import org.apache.camel.Producer;\n+import org.apache.camel.impl.DefaultEndpoint;\n+import org.apache.camel.spi.Metadata;\n+import org.apache.camel.spi.UriEndpoint;\n+import org.apache.camel.spi.UriParam;\n+import org.apache.camel.spi.UriPath;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.provisioning.camel.AnyType;\n+import org.apache.syncope.core.provisioning.camel.producer.AbstractProducer;\n+import org.apache.syncope.core.provisioning.camel.producer.CreateProducer;\n+import org.apache.syncope.core.provisioning.camel.producer.DeleteProducer;\n+import org.apache.syncope.core.provisioning.camel.producer.DeprovisionProducer;\n+import org.apache.syncope.core.provisioning.camel.producer.ProvisionProducer;\n+import org.apache.syncope.core.provisioning.camel.producer.UpdateProducer;\n+\n+@UriEndpoint(scheme = \"propagate\", title = \"propagate\", syntax = \"propagate:propagateType\", producerOnly = true)\n+public class PropagateEndpoint extends DefaultEndpoint {\n+\n+    @UriPath @Metadata(required = \"true\")\n+    private PropagateType propagateType;\n+\n+    @UriParam\n+    private AnyType anyType;\n+\n+    private PropagationManager propagationManager;\n+\n+    private PropagationTaskExecutor taskExecutor;\n+\n+    private UserDAO userDAO;\n+\n+    private GroupDAO groupDAO;\n+\n+    private AnyObjectDAO anyObjectDAO;\n+\n+    private GroupDataBinder groupDataBinder;\n+\n+    public PropagateEndpoint(final String endpointUri, final Component component) {\n+        super(endpointUri, component);\n+    }\n+\n+    @Override\n+    public Producer createProducer() throws Exception {\n+        AbstractProducer producer = null;\n+        if (PropagateType.create == propagateType) {\n+            producer = new CreateProducer(this, anyType);\n+        } else if (PropagateType.update == propagateType) {\n+            producer = new UpdateProducer(this, anyType);\n+        } else if (PropagateType.delete == propagateType) {\n+            producer = new DeleteProducer(this, anyType, userDAO, groupDataBinder);\n+        } else if (PropagateType.provision == propagateType) {\n+            producer = new ProvisionProducer(this, anyType);\n+        } else if (PropagateType.deprovision == propagateType) {\n+            producer = new DeprovisionProducer(this, anyType, userDAO, groupDAO, anyObjectDAO);\n+        } \n+\n+        if (producer != null) {\n+            producer.setPropagationManager(propagationManager);\n+            producer.setPropagationTaskExecutor(taskExecutor);\n+        }\n+        return producer;\n+    }\n+\n+    @Override\n+    public Consumer createConsumer(final Processor processor) throws Exception {\n+        throw new UnsupportedOperationException(\"Consumer not supported\");\n+    }\n+\n+    @Override\n+    public boolean isSingleton() {\n+        return false;\n+    }\n+\n+    public PropagateType getPropagateType() {\n+        return propagateType;\n+    }\n+\n+    public void setPropagateType(final PropagateType propagateType) {\n+        this.propagateType = propagateType;\n+    }\n+\n+    public void setPropagationManager(final PropagationManager propagationManager) {\n+        this.propagationManager = propagationManager;\n+    }\n+\n+    public void setPropagationTaskExecutor(final PropagationTaskExecutor taskExecutor) {\n+        this.taskExecutor = taskExecutor;\n+    }\n+\n+    public AnyType getAnyType() {\n+        return anyType;\n+    }\n+\n+    public void setAnyType(final AnyType anyType) {\n+        this.anyType = anyType;\n+    }\n+\n+    public void setUserDAO(final UserDAO userDAO) {\n+        this.userDAO = userDAO;\n+    }\n+\n+    public void setGroupDAO(final GroupDAO groupDAO) {\n+        this.groupDAO = groupDAO;\n+    }\n+\n+    public void setAnyObjectDAO(final AnyObjectDAO anyObjectDAO) {\n+        this.anyObjectDAO = anyObjectDAO;\n+    }\n+\n+    public void setGroupDataBinder(final GroupDataBinder groupDataBinder) {\n+        this.groupDataBinder = groupDataBinder;\n+    }\n+}"},{"sha":"ca0ae1a8ee18bae5d7cc450bbb20429524bf6dab","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/component/PropagateType.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateType.java?ref=6ae5020032be616fcdf44510ea0572586cff0814","patch":"@@ -0,0 +1,23 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.core.provisioning.camel.component;\n+\n+public enum PropagateType {\n+\n+    create, update, delete, provision, deprovision\n+\n+}"},{"sha":"e87a6abfcb87954c5e293d7221c21a0c2f49e3b3","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/AnyObjectDeleteProcessor.java","status":"removed","additions":0,"deletions":63,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/012f97bcabaf257b6a8d93c49408930e2785e6ef/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeleteProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/012f97bcabaf257b6a8d93c49408930e2785e6ef/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeleteProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeleteProcessor.java?ref=012f97bcabaf257b6a8d93c49408930e2785e6ef","patch":"@@ -1,63 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.processor;\n-\n-import java.util.List;\n-import java.util.Set;\n-import org.apache.camel.Exchange;\n-import org.apache.camel.Processor;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class AnyObjectDeleteProcessor implements Processor {\n-\n-    @Autowired\n-    protected AnyObjectWorkflowAdapter gwfAdapter;\n-\n-    @Autowired\n-    protected PropagationManager propagationManager;\n-\n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n-\n-    @Override\n-    public void process(final Exchange exchange) throws Exception {\n-        String key = exchange.getIn().getBody(String.class);\n-        @SuppressWarnings(\"unchecked\")\n-        Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n-        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n-\n-        List<PropagationTask> tasks = propagationManager.getDeleteTasks(\n-                AnyTypeKind.ANY_OBJECT,\n-                key,\n-                null,\n-                excludedResources);\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n-\n-        exchange.setProperty(\"statuses\", propagationReporter.getStatuses());\n-    }\n-\n-}"},{"sha":"c16708d50a593c6bbc8e686d7b3b68486b89caf3","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/AnyObjectDeprovisionProcessor.java","status":"removed","additions":0,"deletions":68,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/012f97bcabaf257b6a8d93c49408930e2785e6ef/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeprovisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/012f97bcabaf257b6a8d93c49408930e2785e6ef/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeprovisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeprovisionProcessor.java?ref=012f97bcabaf257b6a8d93c49408930e2785e6ef","patch":"@@ -1,68 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.processor;\n-\n-import java.util.List;\n-import org.apache.camel.Exchange;\n-import org.apache.camel.Processor;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.provisioning.api.PropagationByResource;\n-import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class AnyObjectDeprovisionProcessor implements Processor {\n-\n-    @Autowired\n-    protected PropagationManager propagationManager;\n-\n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n-\n-    @Autowired\n-    protected AnyObjectDAO anyObjectDAO;\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public void process(final Exchange exchange) {\n-        String key = exchange.getIn().getBody(String.class);\n-        List<String> resources = exchange.getProperty(\"resources\", List.class);\n-        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n-\n-        PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.addAll(ResourceOperation.DELETE, resources);\n-\n-        List<PropagationTask> tasks = propagationManager.getDeleteTasks(\n-                AnyTypeKind.ANY_OBJECT,\n-                key,\n-                propByRes,\n-                CollectionUtils.removeAll(anyObjectDAO.findAllResourceNames(key), resources));\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n-\n-        exchange.getOut().setBody(propagationReporter.getStatuses());\n-    }\n-\n-}"},{"sha":"c548a27bca164606f8c59805d4a68855adf24d74","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/AnyObjectProvisionProcessor.java","status":"removed","additions":0,"deletions":66,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/012f97bcabaf257b6a8d93c49408930e2785e6ef/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectProvisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/012f97bcabaf257b6a8d93c49408930e2785e6ef/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectProvisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectProvisionProcessor.java?ref=012f97bcabaf257b6a8d93c49408930e2785e6ef","patch":"@@ -1,66 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.processor;\n-\n-import java.util.List;\n-import org.apache.camel.Exchange;\n-import org.apache.camel.Processor;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.provisioning.api.PropagationByResource;\n-import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class AnyObjectProvisionProcessor implements Processor {\n-\n-    @Autowired\n-    protected PropagationManager propagationManager;\n-\n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public void process(final Exchange exchange) {\n-        String key = exchange.getIn().getBody(String.class);\n-        List<String> resources = exchange.getProperty(\"resources\", List.class);\n-        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n-\n-        PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.addAll(ResourceOperation.UPDATE, resources);\n-\n-        List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n-                AnyTypeKind.ANY_OBJECT,\n-                key,\n-                false,\n-                null,\n-                propByRes,\n-                null,\n-                null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n-\n-        exchange.getOut().setBody(propagationReporter.getStatuses());\n-    }\n-\n-}"},{"sha":"32c9823eea98b4f9d3f98c45d20c87c0d1f137d3","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupDeleteProcessor.java","status":"removed","additions":0,"deletions":95,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/012f97bcabaf257b6a8d93c49408930e2785e6ef/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeleteProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/012f97bcabaf257b6a8d93c49408930e2785e6ef/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeleteProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeleteProcessor.java?ref=012f97bcabaf257b6a8d93c49408930e2785e6ef","patch":"@@ -1,95 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.processor;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import org.apache.camel.Exchange;\n-import org.apache.camel.Processor;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.PropagationByResource;\n-import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class GroupDeleteProcessor implements Processor {\n-\n-    @Autowired\n-    protected GroupWorkflowAdapter gwfAdapter;\n-\n-    @Autowired\n-    protected PropagationManager propagationManager;\n-\n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n-\n-    @Autowired\n-    protected GroupDataBinder groupDataBinder;\n-\n-    @Override\n-    public void process(final Exchange exchange) throws Exception {\n-        String key = exchange.getIn().getBody(String.class);\n-        @SuppressWarnings(\"unchecked\")\n-        Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n-        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n-\n-        List<PropagationTask> tasks = new ArrayList<>();\n-\n-        // Generate propagation tasks for deleting users from group resources, if they are on those resources only\n-        // because of the reason being deleted (see SYNCOPE-357)\n-        for (Map.Entry<String, PropagationByResource> entry\n-                : groupDataBinder.findUsersWithTransitiveResources(key).entrySet()) {\n-\n-            tasks.addAll(propagationManager.getDeleteTasks(\n-                    AnyTypeKind.USER,\n-                    entry.getKey(),\n-                    entry.getValue(),\n-                    excludedResources));\n-        }\n-        for (Map.Entry<String, PropagationByResource> entry\n-                : groupDataBinder.findAnyObjectsWithTransitiveResources(key).entrySet()) {\n-\n-            tasks.addAll(propagationManager.getDeleteTasks(\n-                    AnyTypeKind.ANY_OBJECT,\n-                    entry.getKey(),\n-                    entry.getValue(),\n-                    excludedResources));\n-        }\n-\n-        // Generate propagation tasks for deleting this group from resources\n-        tasks.addAll(propagationManager.getDeleteTasks(\n-                AnyTypeKind.GROUP,\n-                key,\n-                null,\n-                null));\n-\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n-\n-        exchange.setProperty(\"statuses\", propagationReporter.getStatuses());\n-    }\n-\n-}"},{"sha":"fc886b76e13dd104634dad9b2daf98ab365ef759","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupDeprovisionProcessor.java","status":"removed","additions":0,"deletions":68,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/012f97bcabaf257b6a8d93c49408930e2785e6ef/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeprovisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/012f97bcabaf257b6a8d93c49408930e2785e6ef/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeprovisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeprovisionProcessor.java?ref=012f97bcabaf257b6a8d93c49408930e2785e6ef","patch":"@@ -1,68 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.processor;\n-\n-import java.util.List;\n-import org.apache.camel.Exchange;\n-import org.apache.camel.Processor;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.provisioning.api.PropagationByResource;\n-import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class GroupDeprovisionProcessor implements Processor {\n-\n-    @Autowired\n-    protected PropagationManager propagationManager;\n-\n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n-\n-    @Autowired\n-    protected GroupDAO groupDAO;\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public void process(final Exchange exchange) {\n-        String key = exchange.getIn().getBody(String.class);\n-        List<String> resources = exchange.getProperty(\"resources\", List.class);\n-        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n-\n-        PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.addAll(ResourceOperation.DELETE, resources);\n-\n-        List<PropagationTask> tasks = propagationManager.getDeleteTasks(\n-                AnyTypeKind.GROUP,\n-                key,\n-                propByRes,\n-                CollectionUtils.removeAll(groupDAO.authFind(key).getResourceKeys(), resources));\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n-\n-        exchange.getOut().setBody(propagationReporter.getStatuses());\n-    }\n-\n-}"},{"sha":"d2398dd6c6c3ec416e12b4107c6c3f852de80ce4","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupProvisionProcessor.java","status":"removed","additions":0,"deletions":66,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/012f97bcabaf257b6a8d93c49408930e2785e6ef/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupProvisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/012f97bcabaf257b6a8d93c49408930e2785e6ef/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupProvisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupProvisionProcessor.java?ref=012f97bcabaf257b6a8d93c49408930e2785e6ef","patch":"@@ -1,66 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.processor;\n-\n-import java.util.List;\n-import org.apache.camel.Exchange;\n-import org.apache.camel.Processor;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.provisioning.api.PropagationByResource;\n-import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class GroupProvisionProcessor implements Processor {\n-\n-    @Autowired\n-    protected PropagationManager propagationManager;\n-\n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public void process(final Exchange exchange) {\n-        String key = exchange.getIn().getBody(String.class);\n-        List<String> resources = exchange.getProperty(\"resources\", List.class);\n-        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n-\n-        PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.addAll(ResourceOperation.UPDATE, resources);\n-\n-        List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n-                AnyTypeKind.GROUP,\n-                key,\n-                false,\n-                null,\n-                propByRes,\n-                null,\n-                null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n-\n-        exchange.getOut().setBody(propagationReporter.getStatuses());\n-    }\n-\n-}"},{"sha":"787c60f7b3b1203b9fc78bad721206a258035aa6","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserDeleteProcessor.java","status":"removed","additions":0,"deletions":74,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/012f97bcabaf257b6a8d93c49408930e2785e6ef/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeleteProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/012f97bcabaf257b6a8d93c49408930e2785e6ef/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeleteProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeleteProcessor.java?ref=012f97bcabaf257b6a8d93c49408930e2785e6ef","patch":"@@ -1,74 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.processor;\n-\n-import java.util.List;\n-import java.util.Set;\n-import org.apache.camel.Exchange;\n-import org.apache.camel.Processor;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.provisioning.api.PropagationByResource;\n-import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class UserDeleteProcessor implements Processor {\n-\n-    @Autowired\n-    protected UserDAO userDAO;\n-\n-    @Autowired\n-    protected PropagationManager propagationManager;\n-\n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public void process(final Exchange exchange) throws Exception {\n-        String key = exchange.getIn().getBody(String.class);\n-        Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n-        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n-\n-        PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.set(ResourceOperation.DELETE, userDAO.findAllResourceNames(key));\n-\n-        // Note here that we can only notify about \"delete\", not any other\n-        // task defined in workflow process definition: this because this\n-        // information could only be available after uwfAdapter.delete(), which\n-        // will also effectively remove user from db, thus making virtually\n-        // impossible by NotificationManager to fetch required user information\n-        List<PropagationTask> tasks = propagationManager.getDeleteTasks(\n-                AnyTypeKind.USER,\n-                key,\n-                propByRes,\n-                excludedResources);\n-\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n-\n-        exchange.setProperty(\"statuses\", propagationReporter.getStatuses());\n-    }\n-\n-}"},{"sha":"e23693f5b55cde81a2734dc2265a2270fdef7a02","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserDeprovisionProcessor.java","status":"removed","additions":0,"deletions":68,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/012f97bcabaf257b6a8d93c49408930e2785e6ef/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeprovisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/012f97bcabaf257b6a8d93c49408930e2785e6ef/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeprovisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeprovisionProcessor.java?ref=012f97bcabaf257b6a8d93c49408930e2785e6ef","patch":"@@ -1,68 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.processor;\n-\n-import java.util.List;\n-import org.apache.camel.Exchange;\n-import org.apache.camel.Processor;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.provisioning.api.PropagationByResource;\n-import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class UserDeprovisionProcessor implements Processor {\n-\n-    @Autowired\n-    protected PropagationManager propagationManager;\n-\n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n-\n-    @Autowired\n-    protected UserDAO userDAO;\n-\n-    @Override\n-    public void process(final Exchange exchange) {\n-        String key = exchange.getIn().getBody(String.class);\n-        @SuppressWarnings(\"unchecked\")\n-        List<String> resources = exchange.getProperty(\"resources\", List.class);\n-        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n-\n-        PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.set(ResourceOperation.DELETE, resources);\n-\n-        List<PropagationTask> tasks = propagationManager.getDeleteTasks(\n-                AnyTypeKind.USER,\n-                key,\n-                propByRes,\n-                CollectionUtils.removeAll(userDAO.findAllResourceNames(key), resources));\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n-\n-        exchange.getOut().setBody(propagationReporter.getStatuses());\n-    }\n-\n-}"},{"sha":"1f4c4a15dba354e2f9b0b3411a333291168f21e3","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserProvisionProcessor.java","status":"removed","additions":0,"deletions":93,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/012f97bcabaf257b6a8d93c49408930e2785e6ef/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserProvisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/012f97bcabaf257b6a8d93c49408930e2785e6ef/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserProvisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserProvisionProcessor.java?ref=012f97bcabaf257b6a8d93c49408930e2785e6ef","patch":"@@ -1,93 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.camel.processor;\n-\n-import java.util.List;\n-import org.apache.camel.Exchange;\n-import org.apache.camel.Processor;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n-import org.apache.commons.lang3.tuple.ImmutablePair;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.common.lib.types.PatchOperation;\n-import org.apache.syncope.core.provisioning.api.PropagationByResource;\n-import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class UserProvisionProcessor implements Processor {\n-\n-    @Autowired\n-    protected PropagationManager propagationManager;\n-\n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n-\n-    @Autowired\n-    protected UserDAO userDAO;\n-\n-    @Override\n-    public void process(final Exchange exchange) {\n-        String key = exchange.getIn().getBody(String.class);\n-        Boolean changePwd = exchange.getProperty(\"changePwd\", Boolean.class);\n-        String password = exchange.getProperty(\"password\", String.class);\n-        @SuppressWarnings(\"unchecked\")\n-        List<String> resources = exchange.getProperty(\"resources\", List.class);\n-        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n-\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(key);\n-        userPatch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n-\n-            @Override\n-            public StringPatchItem transform(final String resource) {\n-                return new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build();\n-            }\n-        }));\n-\n-        if (changePwd) {\n-            userPatch.setPassword(\n-                    new PasswordPatch.Builder().onSyncope(true).value(password).resources(resources).build());\n-        }\n-\n-        PropagationByResource propByRes = new PropagationByResource();\n-        for (String resource : resources) {\n-            propByRes.add(ResourceOperation.UPDATE, resource);\n-        }\n-\n-        WorkflowResult<Pair<UserPatch, Boolean>> wfResult = new WorkflowResult<Pair<UserPatch, Boolean>>(\n-                ImmutablePair.of(userPatch, (Boolean) null), propByRes, \"update\");\n-\n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(wfResult, changePwd, null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n-\n-        exchange.getOut().setBody(propagationReporter.getStatuses());\n-    }\n-\n-}"},{"sha":"de1007db7b731fd610b7da452df55f37e07099ce","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/AbstractProducer.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FAbstractProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FAbstractProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FAbstractProducer.java?ref=6ae5020032be616fcdf44510ea0572586cff0814","patch":"@@ -0,0 +1,57 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.core.provisioning.camel.producer;\n+\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.impl.DefaultProducer;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.provisioning.camel.AnyType;\n+\n+public abstract class AbstractProducer extends DefaultProducer {\n+\n+    private PropagationManager propagationManager;\n+\n+    private PropagationTaskExecutor taskExecutor;\n+\n+    private AnyType anyType;\n+\n+    public AbstractProducer(final Endpoint endpoint, final AnyType anyType) {\n+        super(endpoint);\n+        this.anyType = anyType;\n+    }\n+\n+    public void setPropagationManager(final PropagationManager propagationManager) {\n+        this.propagationManager = propagationManager;\n+    }\n+\n+    public PropagationManager getPropagationManager() {\n+        return propagationManager;\n+    }\n+\n+    public void setPropagationTaskExecutor(final PropagationTaskExecutor taskExecutor) {\n+        this.taskExecutor = taskExecutor;\n+    }\n+\n+    public PropagationTaskExecutor getPropagationTaskExecutor() {\n+        return taskExecutor;\n+    }\n+\n+    public AnyType getAnyType() {\n+        return anyType;\n+    }\n+}"},{"sha":"26ddc3c42fd212ec41f2e4d65d05262456953468","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/CreateProducer.java","status":"renamed","additions":30,"deletions":35,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java?ref=6ae5020032be616fcdf44510ea0572586cff0814","patch":"@@ -1,27 +1,26 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n  *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n-package org.apache.syncope.core.provisioning.camel.processor;\n+package org.apache.syncope.core.provisioning.camel.producer;\n \n import java.util.List;\n import java.util.Set;\n+\n+import org.apache.camel.Endpoint;\n import org.apache.camel.Exchange;\n-import org.apache.camel.Processor;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n@@ -30,41 +29,36 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class CreateProcessor implements Processor {\n+import org.apache.syncope.core.provisioning.camel.AnyType;\n \n-    @Autowired\n-    protected PropagationManager propagationManager;\n+public class CreateProducer extends AbstractProducer {\n \n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n+    public CreateProducer(final Endpoint endpoint, final AnyType anyType) {\n+        super(endpoint, anyType);\n+    }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public void process(final Exchange exchange) {\n+    public void process(final Exchange exchange) throws Exception {\n         if ((exchange.getIn().getBody() instanceof WorkflowResult)) {\n             Object actual = exchange.getProperty(\"actual\");\n             Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n             Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n-            \n+\n             if (actual instanceof UserTO) {\n                 WorkflowResult<Pair<String, Boolean>> created =\n                         (WorkflowResult<Pair<String, Boolean>>) exchange.getIn().getBody();\n-    \n-                List<PropagationTask> tasks = propagationManager.getUserCreateTasks(\n+\n+                List<PropagationTask> tasks = getPropagationManager().getUserCreateTasks(\n                         created.getResult().getKey(),\n                         ((UserTO) actual).getPassword(),\n                         created.getResult().getValue(),\n                         created.getPropByRes(),\n                         ((UserTO) actual).getVirAttrs(),\n                         excludedResources);\n-                PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n+                PropagationReporter propagationReporter = \n+                    getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n \n                 exchange.getOut().setBody(\n                         new ImmutablePair<>(created.getResult().getKey(), propagationReporter.getStatuses()));\n@@ -75,13 +69,14 @@ public void process(final Exchange exchange) {\n                 if (actual instanceof AnyObjectTO) {\n                     anyTypeKind = AnyTypeKind.ANY_OBJECT;\n                 }\n-                List<PropagationTask> tasks = propagationManager.getCreateTasks(\n+                List<PropagationTask> tasks = getPropagationManager().getCreateTasks(\n                         anyTypeKind,\n                         created.getResult(),\n                         created.getPropByRes(),\n                         ((AnyTO) actual).getVirAttrs(),\n                         excludedResources);\n-                PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n+                PropagationReporter propagationReporter = \n+                    getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n \n                 exchange.getOut().setBody(new ImmutablePair<>(created.getResult(), propagationReporter.getStatuses()));\n             }","previous_filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/CreateProcessor.java"},{"sha":"5a3f8e09681291d7fd3d7aa6064706a304fe8e94","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeleteProducer.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java?ref=6ae5020032be616fcdf44510ea0572586cff0814","patch":"@@ -0,0 +1,118 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.core.provisioning.camel.producer;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.Exchange;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.provisioning.api.PropagationByResource;\n+import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.camel.AnyType;\n+\n+public class DeleteProducer extends AbstractProducer {\n+\n+    private UserDAO userDAO;\n+    private GroupDataBinder groupDataBinder;\n+\n+    public DeleteProducer(final Endpoint endpoint, final AnyType anyType, final UserDAO userDao,\n+                          final GroupDataBinder groupDataBinder) {\n+        super(endpoint, anyType);\n+        this.userDAO = userDao;\n+        this.groupDataBinder = groupDataBinder;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void process(final Exchange exchange) throws Exception {\n+        String key = exchange.getIn().getBody(String.class);\n+        Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n+        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n+\n+        if (getAnyType() == AnyType.user) {\n+            PropagationByResource propByRes = new PropagationByResource();\n+            propByRes.set(ResourceOperation.DELETE, userDAO.findAllResourceNames(key));\n+\n+            // Note here that we can only notify about \"delete\", not any other\n+            // task defined in workflow process definition: this because this\n+            // information could only be available after uwfAdapter.delete(), which\n+            // will also effectively remove user from db, thus making virtually\n+            // impossible by NotificationManager to fetch required user information\n+            List<PropagationTask> tasks = getPropagationManager().getDeleteTasks(\n+                    AnyTypeKind.USER,\n+                    key,\n+                    propByRes,\n+                    excludedResources);\n+\n+            PropagationReporter propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+\n+            exchange.setProperty(\"statuses\", propagationReporter.getStatuses());\n+        } else if (getAnyType() == AnyType.group) {\n+            List<PropagationTask> tasks = new ArrayList<>();\n+\n+            // Generate propagation tasks for deleting users from group resources, if they are on those resources only\n+            // because of the reason being deleted (see SYNCOPE-357)\n+            for (Map.Entry<String, PropagationByResource> entry\n+                    : groupDataBinder.findUsersWithTransitiveResources(key).entrySet()) {\n+\n+                tasks.addAll(getPropagationManager().getDeleteTasks(\n+                        AnyTypeKind.USER,\n+                        entry.getKey(),\n+                        entry.getValue(),\n+                        excludedResources));\n+            }\n+            for (Map.Entry<String, PropagationByResource> entry\n+                    : groupDataBinder.findAnyObjectsWithTransitiveResources(key).entrySet()) {\n+\n+                tasks.addAll(getPropagationManager().getDeleteTasks(\n+                        AnyTypeKind.ANY_OBJECT,\n+                        entry.getKey(),\n+                        entry.getValue(),\n+                        excludedResources));\n+            }\n+\n+            // Generate propagation tasks for deleting this group from resources\n+            tasks.addAll(getPropagationManager().getDeleteTasks(\n+                    AnyTypeKind.GROUP,\n+                    key,\n+                    null,\n+                    null));\n+\n+            PropagationReporter propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+\n+            exchange.setProperty(\"statuses\", propagationReporter.getStatuses());\n+        } else if (getAnyType() == AnyType.any) {\n+            List<PropagationTask> tasks = getPropagationManager().getDeleteTasks(\n+                    AnyTypeKind.ANY_OBJECT,\n+                    key,\n+                    null,\n+                    excludedResources);\n+            PropagationReporter propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+\n+            exchange.setProperty(\"statuses\", propagationReporter.getStatuses());\n+        }\n+    }\n+\n+}"},{"sha":"fb54aa9543de0063ef581e3668de634d0abd6afd","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeprovisionProducer.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java?ref=6ae5020032be616fcdf44510ea0572586cff0814","patch":"@@ -0,0 +1,94 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.core.provisioning.camel.producer;\n+\n+import java.util.List;\n+\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.Exchange;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.provisioning.api.PropagationByResource;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.camel.AnyType;\n+\n+public class DeprovisionProducer extends AbstractProducer {\n+    \n+    private UserDAO userDAO;\n+    private GroupDAO groupDAO;\n+    private AnyObjectDAO anyObjectDAO;\n+\n+    public DeprovisionProducer(final Endpoint endpoint, final AnyType anyType, final UserDAO userDAO,\n+                               final GroupDAO groupDAO, final AnyObjectDAO anyObjectDAO) {\n+        super(endpoint, anyType);\n+        this.userDAO = userDAO;\n+        this.groupDAO = groupDAO;\n+        this.anyObjectDAO = anyObjectDAO;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void process(final Exchange exchange) throws Exception {\n+        String key = exchange.getIn().getBody(String.class);\n+        List<String> resources = exchange.getProperty(\"resources\", List.class);\n+        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n+        \n+        if (getAnyType() == AnyType.user) {\n+            PropagationByResource propByRes = new PropagationByResource();\n+            propByRes.set(ResourceOperation.DELETE, resources);\n+\n+            List<PropagationTask> tasks = getPropagationManager().getDeleteTasks(\n+                    AnyTypeKind.USER,\n+                    key,\n+                    propByRes,\n+                    CollectionUtils.removeAll(userDAO.findAllResourceNames(key), resources));\n+            PropagationReporter propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+\n+            exchange.getOut().setBody(propagationReporter.getStatuses());\n+        } else if (getAnyType() == AnyType.group) {\n+            PropagationByResource propByRes = new PropagationByResource();\n+            propByRes.addAll(ResourceOperation.DELETE, resources);\n+\n+            List<PropagationTask> tasks = getPropagationManager().getDeleteTasks(\n+                    AnyTypeKind.GROUP,\n+                    key,\n+                    propByRes,\n+                    CollectionUtils.removeAll(groupDAO.authFind(key).getResourceKeys(), resources));\n+            PropagationReporter propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+\n+            exchange.getOut().setBody(propagationReporter.getStatuses());\n+        } else if (getAnyType() == AnyType.any) {\n+            PropagationByResource propByRes = new PropagationByResource();\n+            propByRes.addAll(ResourceOperation.DELETE, resources);\n+\n+            List<PropagationTask> tasks = getPropagationManager().getDeleteTasks(\n+                    AnyTypeKind.ANY_OBJECT,\n+                    key,\n+                    propByRes,\n+                    CollectionUtils.removeAll(anyObjectDAO.findAllResourceNames(key), resources));\n+            PropagationReporter propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+\n+            exchange.getOut().setBody(propagationReporter.getStatuses());\n+        }\n+    }\n+\n+}"},{"sha":"e50366c436c89a43807999ed078a8dede0422ac5","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ProvisionProducer.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java?ref=6ae5020032be616fcdf44510ea0572586cff0814","patch":"@@ -0,0 +1,107 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.core.provisioning.camel.producer;\n+\n+import java.util.List;\n+\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.Exchange;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.patch.PasswordPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.provisioning.api.PropagationByResource;\n+import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.camel.AnyType;\n+\n+public class ProvisionProducer extends AbstractProducer {\n+\n+    public ProvisionProducer(final Endpoint endpoint, final AnyType anyType) {\n+        super(endpoint, anyType);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void process(final Exchange exchange) throws Exception {\n+        String key = exchange.getIn().getBody(String.class);\n+        List<String> resources = exchange.getProperty(\"resources\", List.class);\n+        Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n+        \n+        if (getAnyType() == AnyType.user) {\n+            Boolean changePwd = exchange.getProperty(\"changePwd\", Boolean.class);\n+            String password = exchange.getProperty(\"password\", String.class);\n+\n+            UserPatch userPatch = new UserPatch();\n+            userPatch.setKey(key);\n+            userPatch.getResources().addAll(CollectionUtils.collect(resources, \n+                                                                    new Transformer<String, StringPatchItem>() {\n+\n+                @Override\n+                public StringPatchItem transform(final String resource) {\n+                    return new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build();\n+                }\n+            }));\n+\n+            if (changePwd) {\n+                userPatch.setPassword(\n+                        new PasswordPatch.Builder().onSyncope(true).value(password).resources(resources).build());\n+            }\n+\n+            PropagationByResource propByRes = new PropagationByResource();\n+            for (String resource : resources) {\n+                propByRes.add(ResourceOperation.UPDATE, resource);\n+            }\n+\n+            WorkflowResult<Pair<UserPatch, Boolean>> wfResult = new WorkflowResult<Pair<UserPatch, Boolean>>(\n+                    ImmutablePair.of(userPatch, (Boolean) null), propByRes, \"update\");\n+\n+            List<PropagationTask> tasks = getPropagationManager().getUserUpdateTasks(wfResult, changePwd, null);\n+            PropagationReporter propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+\n+            exchange.getOut().setBody(propagationReporter.getStatuses());\n+        } else {\n+            PropagationByResource propByRes = new PropagationByResource();\n+            propByRes.addAll(ResourceOperation.UPDATE, resources);\n+\n+            AnyTypeKind anyType = AnyTypeKind.GROUP;\n+            if (getAnyType() == AnyType.any) {\n+                anyType = AnyTypeKind.ANY_OBJECT;\n+            }\n+\n+            List<PropagationTask> tasks = getPropagationManager().getUpdateTasks(\n+                    anyType,\n+                    key,\n+                    false,\n+                    null,\n+                    propByRes,\n+                    null,\n+                    null);\n+            PropagationReporter propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+\n+            exchange.getOut().setBody(propagationReporter.getStatuses());\n+        }\n+    }\n+\n+}"},{"sha":"6146c60b69c4678a37281438f05275e26dcfdcc6","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/UpdateProducer.java","status":"renamed","additions":31,"deletions":40,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java?ref=6ae5020032be616fcdf44510ea0572586cff0814","patch":"@@ -1,69 +1,58 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n  *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n-package org.apache.syncope.core.provisioning.camel.processor;\n+package org.apache.syncope.core.provisioning.camel.producer;\n \n import java.util.List;\n import java.util.Set;\n \n+import org.apache.camel.Endpoint;\n import org.apache.camel.Exchange;\n-import org.apache.camel.Processor;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n+import org.apache.syncope.core.provisioning.camel.AnyType;\n \n-@Component\n-public class UpdateProcessor implements Processor {\n+public class UpdateProducer extends AbstractProducer {\n \n-    @Autowired\n-    protected PropagationManager propagationManager;\n-\n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n-\n-    @Autowired\n-    protected VirAttrHandler virtAttrHandler;\n+    public UpdateProducer(final Endpoint endpoint, final AnyType anyType) {\n+        super(endpoint, anyType);\n+    }\n \n-    @Override\n     @SuppressWarnings(\"unchecked\")\n-    public void process(final Exchange exchange) {\n+    @Override\n+    public void process(final Exchange exchange) throws Exception {\n         if ((exchange.getIn().getBody() instanceof WorkflowResult)) {\n             Object actual = exchange.getProperty(\"actual\");\n             Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n             Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n-            \n+\n             if (actual instanceof UserPatch) {\n                 WorkflowResult<Pair<UserPatch, Boolean>> updated =\n                         (WorkflowResult<Pair<UserPatch, Boolean>>) exchange.getIn().getBody();\n-        \n-                List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(updated);\n-                PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n+\n+                List<PropagationTask> tasks = getPropagationManager().getUserUpdateTasks(updated);\n+                PropagationReporter propagationReporter = \n+                    getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n \n                 exchange.getOut().setBody(new ImmutablePair<>(\n                         updated.getResult().getKey().getKey(), propagationReporter.getStatuses()));\n@@ -75,18 +64,20 @@ public void process(final Exchange exchange) {\n                     anyTypeKind = AnyTypeKind.ANY_OBJECT;\n                 }\n \n-                List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n+                List<PropagationTask> tasks = getPropagationManager().getUpdateTasks(\n                         anyTypeKind,\n                         updated.getResult(),\n                         false,\n                         null,\n                         updated.getPropByRes(),\n                         ((AnyPatch) actual).getVirAttrs(),\n                         excludedResources);\n-                PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n+                PropagationReporter propagationReporter = \n+                    getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n \n                 exchange.getOut().setBody(new ImmutablePair<>(updated.getResult(), propagationReporter.getStatuses()));\n             }\n         }\n     }\n+\n }","previous_filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UpdateProcessor.java"},{"sha":"92513e8120f8b77894ba7b8f0fbb0b4330f9a264","filename":"ext/camel/provisioning-camel/src/main/resources/META-INF/services/org/apache/camel/component/propagate","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fservices%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fpropagate","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fservices%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fpropagate","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fservices%2Forg%2Fapache%2Fcamel%2Fcomponent%2Fpropagate?ref=6ae5020032be616fcdf44510ea0572586cff0814","patch":"@@ -0,0 +1,19 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+class=org.apache.syncope.core.provisioning.camel.component.PropagateComponent\n\\ No newline at end of file"},{"sha":"15c457c5765f393265dceb1886b96064b08b7c3a","filename":"ext/camel/provisioning-camel/src/main/resources/anyObjectRoutes.xml","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FanyObjectRoutes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FanyObjectRoutes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FanyObjectRoutes.xml?ref=6ae5020032be616fcdf44510ea0572586cff0814","patch":"@@ -26,7 +26,7 @@ under the License.\n     </setProperty>\n     <doTry>\n       <bean ref=\"awfAdapter\" method=\"create(${body})\"/>\n-      <process ref=\"createProcessor\"/>\n+      <to uri=\"propagate:create?anyType=any\"/>\n       <to uri=\"direct:createAnyObjectPort\"/>\n       <doCatch>        \n         <exception>java.lang.RuntimeException</exception>\n@@ -45,7 +45,7 @@ under the License.\n     </setProperty>\n     <doTry>\n       <bean ref=\"awfAdapter\" method=\"update(${body})\"/>\n-      <process ref=\"updateProcessor\"/>\n+      <to uri=\"propagate:update?anyType=any\"/>\n       <to uri=\"direct:updateAnyObjectPort\"/>\n       <doCatch>        \n         <exception>java.lang.RuntimeException</exception>\n@@ -60,7 +60,7 @@ under the License.\n   <route id=\"deleteAnyObject\">\n     <from uri=\"direct:deleteAnyObject\"/>\n     <doTry>\n-      <process ref=\"anyObjectDeleteProcessor\"/>\n+      <to uri=\"propagate:delete?anyType=any\"/>\n       <bean ref=\"awfAdapter\" method=\"delete(${body})\"/>\n       <setBody>\n         <simple>${property.statuses}</simple>\n@@ -114,13 +114,13 @@ under the License.\n         \n   <route id=\"provisionAnyObject\">\n     <from uri=\"direct:provisionAnyObject\"/>            \n-    <process ref=\"anyObjectProvisionProcessor\"/>\n+    <to uri=\"propagate:provision?anyType=any\"/>\n     <to uri=\"direct:provisionAnyObjectPort\"/>              \n   </route>\n \n   <route id=\"deprovisionAnyObject\">\n     <from uri=\"direct:deprovisionAnyObject\"/>            \n-    <process ref=\"anyObjectDeprovisionProcessor\"/>\n+    <to uri=\"propagate:deprovision?anyType=any\"/>\n     <to uri=\"direct:deprovisionAnyObjectPort\"/>              \n   </route>\n     "},{"sha":"d21c2209541ed73526e75dd05a30fb7149f40df1","filename":"ext/camel/provisioning-camel/src/main/resources/groupRoutes.xml","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FgroupRoutes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FgroupRoutes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FgroupRoutes.xml?ref=6ae5020032be616fcdf44510ea0572586cff0814","patch":"@@ -26,7 +26,7 @@ under the License.\n     </setProperty>\n     <doTry>\n       <bean ref=\"gwfAdapter\" method=\"create(${body})\"/>\n-      <process ref=\"createProcessor\"/>\n+      <to uri=\"propagate:create?anyType=group\"/>\n       <to uri=\"direct:createGroupPort\"/>\n       <doCatch>        \n         <exception>java.lang.RuntimeException</exception>\n@@ -64,7 +64,7 @@ under the License.\n     </setProperty>\n     <doTry>\n       <bean ref=\"gwfAdapter\" method=\"update(${body})\"/>\n-      <process ref=\"updateProcessor\"/>\n+      <to uri=\"propagate:update?anyType=group\"/>\n       <to uri=\"direct:updateGroupPort\"/>\n       <doCatch>        \n         <exception>java.lang.RuntimeException</exception>\n@@ -79,7 +79,7 @@ under the License.\n   <route id=\"deleteGroup\">\n     <from uri=\"direct:deleteGroup\"/>\n     <doTry>\n-      <process ref=\"groupDeleteProcessor\"/>\n+      <to uri=\"propagate:delete?anyType=group\"/>\n       <bean ref=\"gwfAdapter\" method=\"delete(${body})\"/>\n       <setBody>\n         <simple>${property.statuses}</simple>\n@@ -133,13 +133,13 @@ under the License.\n         \n   <route id=\"provisionGroup\">\n     <from uri=\"direct:provisionGroup\"/>            \n-    <process ref=\"groupProvisionProcessor\"/>\n+    <to uri=\"propagate:provision?anyType=group\"/>\n     <to uri=\"direct:provisionGroupPort\"/>              \n   </route>\n \n   <route id=\"deprovisionGroup\">\n     <from uri=\"direct:deprovisionGroup\"/>            \n-    <process ref=\"groupDeprovisionProcessor\"/>\n+    <to uri=\"propagate:deprovision?anyType=group\"/>\n     <to uri=\"direct:deprovisionGroupPort\"/>              \n   </route>\n     "},{"sha":"73564f9d60c427539544e6eeefd45963daaf5473","filename":"ext/camel/provisioning-camel/src/main/resources/userRoutes.xml","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ae5020032be616fcdf44510ea0572586cff0814/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml?ref=6ae5020032be616fcdf44510ea0572586cff0814","patch":"@@ -27,7 +27,7 @@ under the License.\n     <doTry>\n       <bean method=\"create(${body},${property.disablePwdPolicyCheck},${property.enabled},${property.storePassword})\"\n             ref=\"uwfAdapter\" />\n-      <process ref=\"createProcessor\"/>\n+      <to uri=\"propagate:create?anyType=user\"/>\n       <to uri=\"direct:createPort\"/>\n       <doCatch>        \n         <exception>java.lang.RuntimeException</exception>\n@@ -46,7 +46,7 @@ under the License.\n     </setProperty>\n     <doTry>\n       <bean ref=\"uwfAdapter\" method=\"update(${body})\"/>\n-      <process ref=\"updateProcessor\"/>\n+      <to uri=\"propagate:update?anyType=user\"/>\n       <to uri=\"direct:updatePort\"/>\n       <doCatch>        \n         <exception>java.lang.RuntimeException</exception>\n@@ -83,7 +83,7 @@ under the License.\n   <route id=\"deleteUser\">\n     <from uri=\"direct:deleteUser\"/>\n     <doTry>\n-      <process ref=\"userDeleteProcessor\"/>\n+      <to uri=\"propagate:delete?anyType=user\"/>\n       <bean ref=\"uwfAdapter\" method=\"delete(${body})\"/>\n       <setBody>\n         <simple>${property.statuses}</simple>\n@@ -188,13 +188,13 @@ under the License.\n     \n   <route id=\"provisionUser\">\n     <from uri=\"direct:provisionUser\"/>            \n-    <process ref=\"userProvisionProcessor\"/>\n+    <to uri=\"propagate:provision?anyType=user\"/>\n     <to uri=\"direct:provisionPort\"/>              \n   </route>\n                 \n   <route id=\"deprovisionUser\">\n     <from uri=\"direct:deprovisionUser\"/>            \n-    <process ref=\"userDeprovisionProcessor\"/>\n+    <to uri=\"propagate:deprovision?anyType=user\"/>\n     <to uri=\"direct:deprovisionPort\"/>              \n   </route>\n     "},{"sha":"d545d2f93ef78d2a8ac5955ebede6226a5c6a3f8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/CamelRouteITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ae5020032be616fcdf44510ea0572586cff0814/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ae5020032be616fcdf44510ea0572586cff0814/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java?ref=6ae5020032be616fcdf44510ea0572586cff0814","patch":"@@ -87,7 +87,7 @@ public void update() {\n                 + \"  <doTry>\\n\"\n                 + \"    <bean ref=\\\"uwfAdapter\\\" method=\\\"create(${body},${property.disablePwdPolicyCheck},\\n\"\n                 + \"                             ${property.enabled},${property.storePassword})\\\"/>\\n\"\n-                + \"    <process ref=\\\"createProcessor\\\" />\\n\"\n+                + \"    <to uri=\\\"propagate:create?anyType=user\\\"/>\\n\"\n                 + \"    <to uri=\\\"direct:createPort\\\"/>\\n\"\n                 + \"    <to uri=\\\"log:myLog\\\"/>\\n\"\n                 + \"    <doCatch>        \\n\"\n@@ -129,7 +129,7 @@ public void scriptingUpdate() {\n                 + \"    <doTry>\\n\"\n                 + \"      <bean ref=\\\"uwfAdapter\\\" method=\\\"create(${body},${property.disablePwdPolicyCheck},\\n\"\n                 + \"                                     ${property.enabled},${property.storePassword})\\\"/>\\n\"\n-                + \"      <process ref=\\\"createProcessor\\\"/>\\n\"\n+                + \"      <to uri=\\\"propagate:create?anyType=user\\\"/>\\n\"\n                 + \"      <to uri=\\\"direct:createPort\\\"/>\\n\"\n                 + \"      <doCatch>        \\n\"\n                 + \"        <exception>java.lang.RuntimeException</exception>\\n\""}]}