{"sha":"3ac851746dd4bd609c5376564cb9d0ab4dd6fb7b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjNhYzg1MTc0NmRkNGJkNjA5YzUzNzY1NjRjYjlkMGFiNGRkNmZiN2I=","commit":{"author":{"name":"Christian Schneider","email":"cschneider@apache.org","date":"2013-01-28T14:41:26Z"},"committer":{"name":"Christian Schneider","email":"cschneider@apache.org","date":"2013-01-28T14:41:26Z"},"message":"SYNCOPE-231 Some refactorings in exception mapper\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1439429 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"65a6754a39b9dab79cd65514df1ebeb34d3d0d46","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/65a6754a39b9dab79cd65514df1ebeb34d3d0d46"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3ac851746dd4bd609c5376564cb9d0ab4dd6fb7b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3ac851746dd4bd609c5376564cb9d0ab4dd6fb7b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3ac851746dd4bd609c5376564cb9d0ab4dd6fb7b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3ac851746dd4bd609c5376564cb9d0ab4dd6fb7b/comments","author":{"login":"cschneider","id":484584,"node_id":"MDQ6VXNlcjQ4NDU4NA==","avatar_url":"https://avatars.githubusercontent.com/u/484584?v=4","gravatar_id":"","url":"https://api.github.com/users/cschneider","html_url":"https://github.com/cschneider","followers_url":"https://api.github.com/users/cschneider/followers","following_url":"https://api.github.com/users/cschneider/following{/other_user}","gists_url":"https://api.github.com/users/cschneider/gists{/gist_id}","starred_url":"https://api.github.com/users/cschneider/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cschneider/subscriptions","organizations_url":"https://api.github.com/users/cschneider/orgs","repos_url":"https://api.github.com/users/cschneider/repos","events_url":"https://api.github.com/users/cschneider/events{/privacy}","received_events_url":"https://api.github.com/users/cschneider/received_events","type":"User","site_admin":false},"committer":{"login":"cschneider","id":484584,"node_id":"MDQ6VXNlcjQ4NDU4NA==","avatar_url":"https://avatars.githubusercontent.com/u/484584?v=4","gravatar_id":"","url":"https://api.github.com/users/cschneider","html_url":"https://github.com/cschneider","followers_url":"https://api.github.com/users/cschneider/followers","following_url":"https://api.github.com/users/cschneider/following{/other_user}","gists_url":"https://api.github.com/users/cschneider/gists{/gist_id}","starred_url":"https://api.github.com/users/cschneider/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cschneider/subscriptions","organizations_url":"https://api.github.com/users/cschneider/orgs","repos_url":"https://api.github.com/users/cschneider/repos","events_url":"https://api.github.com/users/cschneider/events{/privacy}","received_events_url":"https://api.github.com/users/cschneider/received_events","type":"User","site_admin":false},"parents":[{"sha":"d6ab9c3957a3107e38de4696297aca3b3fdfccfe","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d6ab9c3957a3107e38de4696297aca3b3fdfccfe","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d6ab9c3957a3107e38de4696297aca3b3fdfccfe"}],"stats":{"total":167,"additions":55,"deletions":112},"files":[{"sha":"d316f8c987023b0bc090fee67740b058f51dd56b","filename":"core/src/main/java/org/apache/syncope/core/rest/utils/RestServiceExceptionMapper.java","status":"modified","additions":55,"deletions":112,"changes":167,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3ac851746dd4bd609c5376564cb9d0ab4dd6fb7b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3ac851746dd4bd609c5376564cb9d0ab4dd6fb7b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java?ref=3ac851746dd4bd609c5376564cb9d0ab4dd6fb7b","patch":"@@ -56,159 +56,103 @@ public class RestServiceExceptionMapper implements ExceptionMapper<Exception>, R\n \r\n     @Override\r\n     public Response toResponse(final Exception ex) {\r\n+        LOG.error(\"Exception thrown by REST method: \" + ex.getMessage(), ex);\r\n \r\n-        LOG.error(\"Exception thrown by REST methods: \" + ex.getMessage(), ex);\r\n-\r\n-        // 1. Process SyncopeClientCompositeErrorException\r\n-        Response response = processCompositeExceptions(ex);\r\n-        if (response != null) {\r\n-            return response;\r\n+        if (ex instanceof SyncopeClientCompositeErrorException) {\r\n+            return getCompositeExceptionResponse(ex);\r\n         }\r\n \r\n-        // 2. Process Bad Requests\r\n-        response = processBadRequestExceptions(ex);\r\n-        if (response != null) {\r\n-            return response;\r\n+        if (ex instanceof org.springframework.security.access.AccessDeniedException) {\r\n+            return Response.status(Response.Status.UNAUTHORIZED)\r\n+                    .header(HttpHeaders.WWW_AUTHENTICATE, BASIC_REALM_UNAUTHORIZED).build();\r\n         }\r\n \r\n-        // 3. Process Unauthorized\r\n-        response = processUnauthorizedExceptions(ex);\r\n-        if (response != null) {\r\n-            return response;\r\n+        if (ex instanceof UnauthorizedRoleException) {\r\n+            return buildResponse(Response.status(Response.Status.FORBIDDEN), SyncopeClientExceptionType.UnauthorizedRole,\r\n+                    getExMessage(ex));\r\n         }\r\n \r\n-        // 4. Process Forbidden\r\n-        response = processForbiddenExceptions(ex);\r\n-        if (response != null) {\r\n-            return response;\r\n+        if (ex instanceof DataIntegrityViolationException) {\r\n+            return buildResponse(Response.status(Response.Status.CONFLICT), \r\n+                    SyncopeClientExceptionType.DataIntegrityViolation, getExMessage(ex));\r\n         }\r\n \r\n-        // 4. Process NotFound\r\n-        response = processNotFoundExceptions(ex);\r\n+        Response response = processBadRequestExceptions(ex);\r\n         if (response != null) {\r\n             return response;\r\n         }\r\n \r\n-        // 5. Process Conflict\r\n-        response = processConflictExceptions(ex);\r\n+        response = processNotFoundExceptions(ex);\r\n         if (response != null) {\r\n             return response;\r\n         }\r\n \r\n-        // 5. Process InternalServerError\r\n         response = processServerErrorExceptions(ex);\r\n         if (response != null) {\r\n             return response;\r\n         }\r\n \r\n-        // 6. Rest is interpreted as InternalServerError\r\n-        ResponseBuilder responseBuilder = Response.status(Response.Status.INTERNAL_SERVER_ERROR);\r\n-        responseBuilder.header(SyncopeClientExceptionType.Unknown.getElementHeaderName(), ex.getCause() == null\r\n-                ? ex.getMessage()\r\n-                : ex.getCause().getMessage());\r\n-\r\n-        return responseBuilder.build();\r\n+        // Rest is interpreted as InternalServerError\r\n+        return Response.status(Response.Status.INTERNAL_SERVER_ERROR)\r\n+                .header(SyncopeClientExceptionType.Unknown.getElementHeaderName(), getExMessage(ex))\r\n+                .build();\r\n     }\r\n-\r\n+    \r\n     @Override\r\n     public Exception fromResponse(final Response r) {\r\n         throw new UnsupportedOperationException(\r\n                 \"Call of fromResponse() method is not expected in RestServiceExceptionMapper\");\r\n     }\r\n \r\n-    private Response processCompositeExceptions(Exception ex) {\r\n-        Response response = null;\r\n-\r\n-        if (ex instanceof SyncopeClientCompositeErrorException) {\r\n-            ResponseBuilder responseBuilder = Response.status(((SyncopeClientCompositeErrorException) ex)\r\n-                    .getStatusCode().value());\r\n-            for (SyncopeClientException sce : ((SyncopeClientCompositeErrorException) ex).getExceptions()) {\r\n-                responseBuilder.header(EXCEPTION_TYPE_HEADER, sce.getType().getHeaderValue());\r\n+    public Response getCompositeExceptionResponse(Exception ex) {\r\n+        ResponseBuilder responseBuilder = Response.status(((SyncopeClientCompositeErrorException) ex)\r\n+                .getStatusCode().value());\r\n+        for (SyncopeClientException sce : ((SyncopeClientCompositeErrorException) ex).getExceptions()) {\r\n+            responseBuilder.header(EXCEPTION_TYPE_HEADER, sce.getType().getHeaderValue());\r\n \r\n-                for (String attributeName : sce.getElements()) {\r\n-                    responseBuilder.header(sce.getType().getElementHeaderName(), attributeName);\r\n-                }\r\n+            for (String attributeName : sce.getElements()) {\r\n+                responseBuilder.header(sce.getType().getElementHeaderName(), attributeName);\r\n             }\r\n-            response = responseBuilder.build();\r\n         }\r\n-        return response;\r\n-    }\r\n-\r\n-    private Response processForbiddenExceptions(Exception ex) {\r\n-        Response response = null;\r\n-        ResponseBuilder responseBuilder = Response.status(Response.Status.FORBIDDEN);\r\n-\r\n-        if (ex instanceof UnauthorizedRoleException) {\r\n-            response = buildResponse(responseBuilder, SyncopeClientExceptionType.UnauthorizedRole, ex, null);\r\n-        }\r\n-        return response;\r\n-    }\r\n-\r\n-    private Response processUnauthorizedExceptions(Exception ex) {\r\n-        Response response = null;\r\n-        ResponseBuilder responseBuilder = Response.status(Response.Status.UNAUTHORIZED);\r\n-\r\n-        if (ex instanceof org.springframework.security.access.AccessDeniedException) {\r\n-            response = responseBuilder.header(HttpHeaders.WWW_AUTHENTICATE, BASIC_REALM_UNAUTHORIZED).build();\r\n-        }\r\n-        return response;\r\n-    }\r\n-\r\n-    private Response processConflictExceptions(Exception ex) {\r\n-        Response response = null;\r\n-        ResponseBuilder responseBuilder = Response.status(Response.Status.CONFLICT);\r\n-\r\n-        if (ex instanceof DataIntegrityViolationException) {\r\n-            response = buildResponse(responseBuilder, SyncopeClientExceptionType.DataIntegrityViolation, ex, null);\r\n-        }\r\n-        return response;\r\n+        return responseBuilder.build();\r\n     }\r\n \r\n     private Response processServerErrorExceptions(Exception ex) {\r\n-        Response response = null;\r\n         ResponseBuilder responseBuilder = Response.status(Response.Status.INTERNAL_SERVER_ERROR);\r\n-\r\n         if (ex instanceof org.apache.ibatis.exceptions.PersistenceException) {\r\n-            response = buildResponse(responseBuilder, SyncopeClientExceptionType.Workflow, ex,\r\n-                    \"Currently unavailable. Please try later.\");\r\n-\r\n+            return buildResponse(responseBuilder, SyncopeClientExceptionType.Workflow, getMessage(ex,\r\n+                    \"Currently unavailable. Please try later.\"));\r\n         } else if (ex instanceof JpaSystemException) {\r\n-            response = buildResponse(responseBuilder, SyncopeClientExceptionType.DataIntegrityViolation, ex, null);\r\n+            return buildResponse(responseBuilder, SyncopeClientExceptionType.DataIntegrityViolation, getExMessage(ex));\r\n \r\n         } else if (ex instanceof ConfigurationException) {\r\n-            response = buildResponse(responseBuilder, SyncopeClientExceptionType.InvalidExternalResource, ex, null);\r\n+            return buildResponse(responseBuilder, SyncopeClientExceptionType.InvalidExternalResource, getExMessage(ex));\r\n         }\r\n \r\n-        return response;\r\n+        return null;\r\n     }\r\n \r\n     private Response processNotFoundExceptions(Exception ex) {\r\n-        Response response = null;\r\n         ResponseBuilder responseBuilder = Response.status(Response.Status.NOT_FOUND);\r\n \r\n         if (ex instanceof javax.ws.rs.NotFoundException) {\r\n-            response = buildResponse(responseBuilder, SyncopeClientExceptionType.NotFound, (ex.getCause() != null)\r\n-                    ? ex.getCause()\r\n-                    : ex, null);\r\n+            return buildResponse(responseBuilder, SyncopeClientExceptionType.NotFound, getExMessage(ex));\r\n \r\n         } else if (ex instanceof NotFoundException) {\r\n-            response = buildResponse(responseBuilder, SyncopeClientExceptionType.NotFound, ex, null);\r\n+            return buildResponse(responseBuilder, SyncopeClientExceptionType.NotFound, getExMessage(ex));\r\n \r\n         } else if (ex instanceof MissingConfKeyException) {\r\n-            response = buildResponse(responseBuilder, SyncopeClientExceptionType.NotFound, ex,\r\n-                    ((MissingConfKeyException) ex).getConfKey());\r\n+            return buildResponse(responseBuilder, SyncopeClientExceptionType.NotFound, getMessage(ex,\r\n+                    ((MissingConfKeyException) ex).getConfKey()));\r\n         }\r\n-\r\n-        return response;\r\n+        return null;\r\n     }\r\n \r\n     private Response processBadRequestExceptions(Exception ex) {\r\n-        Response response = null;\r\n         ResponseBuilder responseBuilder = Response.status(Response.Status.BAD_REQUEST);\r\n \r\n         if (ex instanceof javax.ws.rs.BadRequestException) {\r\n             throw (javax.ws.rs.BadRequestException) ex;\r\n-            \r\n         } else if (ex instanceof InvalidEntityException) {\r\n             SyncopeClientExceptionType exType = SyncopeClientExceptionType.valueOf(\"Invalid\"\r\n                     + ((InvalidEntityException) ex).getEntityClassSimpleName());\r\n@@ -223,35 +167,34 @@ private Response processBadRequestExceptions(Exception ex) {\n                             + violationType);\r\n                 }\r\n             }\r\n-            response = responseBuilder.build();\r\n-\r\n+            return responseBuilder.build();\r\n         } else if (ex instanceof WorkflowException) {\r\n-            response = buildResponse(responseBuilder, SyncopeClientExceptionType.Workflow, ex, ex.getCause()\r\n-                    .getMessage());\r\n+            return buildResponse(responseBuilder, SyncopeClientExceptionType.Workflow, getExMessage(ex));\r\n \r\n         } else if (ex instanceof PropagationException) {\r\n-            response = buildResponse(responseBuilder, SyncopeClientExceptionType.Propagation, ex,\r\n-                    ((PropagationException) ex).getResourceName());\r\n+            return buildResponse(responseBuilder, SyncopeClientExceptionType.Propagation, getMessage(ex, ((PropagationException) ex).getResourceName()));\r\n \r\n         } else if (ex instanceof InvalidSearchConditionException) {\r\n-            response = buildResponse(responseBuilder, SyncopeClientExceptionType.InvalidSearchCondition, ex, null);\r\n+            return buildResponse(responseBuilder, SyncopeClientExceptionType.InvalidSearchCondition, getExMessage(ex));\r\n \r\n         } else if (ex instanceof PersistenceException) {\r\n-            response = buildResponse(responseBuilder, SyncopeClientExceptionType.GenericPersistence, ex, null);\r\n+            return buildResponse(responseBuilder, SyncopeClientExceptionType.GenericPersistence, getExMessage(ex));\r\n         }\r\n \r\n-        return response;\r\n+        return null;\r\n     }\r\n \r\n-    private Response buildResponse(ResponseBuilder responseBuilder, SyncopeClientExceptionType hType, Throwable ex,\r\n-            String msg) {\r\n-        responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER, hType.getHeaderValue());\r\n-        String exMsg = ex.getCause() == null\r\n-                ? ex.getMessage()\r\n-                : ex.getCause().getMessage();\r\n-        responseBuilder.header(hType.getElementHeaderName(), (msg != null)\r\n-                ? msg\r\n-                : exMsg);\r\n-        return responseBuilder.build();\r\n+    private Response buildResponse(ResponseBuilder responseBuilder, SyncopeClientExceptionType hType, String msg) {\r\n+        return responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER, hType.getHeaderValue())\r\n+               .header(hType.getElementHeaderName(), msg)\r\n+               .build();\r\n+    }\r\n+\r\n+    public String getMessage(Throwable ex, String msg) {\r\n+        return (msg != null) ? msg : getExMessage(ex);\r\n+    }\r\n+\r\n+    public String getExMessage(Throwable ex) {\r\n+        return (ex.getCause() == null) ? ex.getMessage() : ex.getCause().getMessage();\r\n     }\r\n }\r"}]}