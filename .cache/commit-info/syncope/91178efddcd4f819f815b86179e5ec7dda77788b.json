{"sha":"91178efddcd4f819f815b86179e5ec7dda77788b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjkxMTc4ZWZkZGNkNGY4MTlmODE1Yjg2MTc5ZTVlYzdkZGE3Nzc4OGI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-02-19T09:20:02Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-02-19T09:24:35Z"},"message":"Adding sample about how to generated SSHA256 admin password + related test","tree":{"sha":"6ee6321b5aaa8e28c51e6e8fe018a9ee70bce0d0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/6ee6321b5aaa8e28c51e6e8fe018a9ee70bce0d0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/91178efddcd4f819f815b86179e5ec7dda77788b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/91178efddcd4f819f815b86179e5ec7dda77788b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/91178efddcd4f819f815b86179e5ec7dda77788b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/91178efddcd4f819f815b86179e5ec7dda77788b/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"6e9e4d819e3e1963ab8f0c706cbe7f893c6c931b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6e9e4d819e3e1963ab8f0c706cbe7f893c6c931b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6e9e4d819e3e1963ab8f0c706cbe7f893c6c931b"}],"stats":{"total":121,"additions":74,"deletions":47},"files":[{"sha":"6f88e65cf7c9357bb825fa602ea32c18c5b19a36","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/CipherAlgorithm.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/91178efddcd4f819f815b86179e5ec7dda77788b/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FCipherAlgorithm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/91178efddcd4f819f815b86179e5ec7dda77788b/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FCipherAlgorithm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FCipherAlgorithm.java?ref=91178efddcd4f819f815b86179e5ec7dda77788b","patch":"@@ -51,4 +51,8 @@ public String getAlgorithm() {\n     public boolean isInvertible() {\n         return invertible;\n     }\n+\n+    public boolean isSalted() {\n+        return algorithm.startsWith(\"S-\");\n+    }\n }"},{"sha":"f87771ae5c549851d1629f3f74ffbc42d61165a4","filename":"core/spring/pom.xml","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/91178efddcd4f819f815b86179e5ec7dda77788b/core%2Fspring%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/91178efddcd4f819f815b86179e5ec7dda77788b/core%2Fspring%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fpom.xml?ref=91178efddcd4f819f815b86179e5ec7dda77788b","patch":"@@ -158,6 +158,5 @@ under the License.\n         </excludes>\n       </resource>\n     </resources>\n-\n   </build>\n </project>"},{"sha":"cfc0044109a24bd70f57953c63bbb07d98e1a492","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/Encryptor.java","status":"modified","additions":18,"deletions":22,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/91178efddcd4f819f815b86179e5ec7dda77788b/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FEncryptor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/91178efddcd4f819f815b86179e5ec7dda77788b/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FEncryptor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FEncryptor.java?ref=91178efddcd4f819f815b86179e5ec7dda77788b","patch":"@@ -173,62 +173,58 @@ public String encode(final String value, final CipherAlgorithm cipherAlgorithm)\n             throws UnsupportedEncodingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\n             IllegalBlockSizeException, BadPaddingException {\n \n-        String encodedValue = null;\n+        String encoded = null;\n \n         if (value != null) {\n             if (cipherAlgorithm == null || cipherAlgorithm == CipherAlgorithm.AES) {\n-                final byte[] cleartext = value.getBytes(StandardCharsets.UTF_8);\n-\n-                final Cipher cipher = Cipher.getInstance(CipherAlgorithm.AES.getAlgorithm());\n+                Cipher cipher = Cipher.getInstance(CipherAlgorithm.AES.getAlgorithm());\n                 cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n \n-                encodedValue = new String(Base64.getEncoder().encode(cipher.doFinal(cleartext)));\n+                encoded = Base64.getEncoder().encodeToString(cipher.doFinal(value.getBytes(StandardCharsets.UTF_8)));\n             } else if (cipherAlgorithm == CipherAlgorithm.BCRYPT) {\n-                encodedValue = BCrypt.hashpw(value, BCrypt.gensalt());\n+                encoded = BCrypt.hashpw(value, BCrypt.gensalt());\n             } else {\n-                encodedValue = getDigester(cipherAlgorithm).digest(value);\n+                encoded = getDigester(cipherAlgorithm).digest(value);\n             }\n         }\n \n-        return encodedValue;\n+        return encoded;\n     }\n \n-    public boolean verify(final String value, final CipherAlgorithm cipherAlgorithm, final String encodedValue) {\n-        boolean res = false;\n+    public boolean verify(final String value, final CipherAlgorithm cipherAlgorithm, final String encoded) {\n+        boolean verified = false;\n \n         try {\n             if (value != null) {\n                 if (cipherAlgorithm == null || cipherAlgorithm == CipherAlgorithm.AES) {\n-                    res = encode(value, cipherAlgorithm).equals(encodedValue);\n+                    verified = encode(value, cipherAlgorithm).equals(encoded);\n                 } else if (cipherAlgorithm == CipherAlgorithm.BCRYPT) {\n-                    res = BCrypt.checkpw(value, encodedValue);\n+                    verified = BCrypt.checkpw(value, encoded);\n                 } else {\n-                    res = getDigester(cipherAlgorithm).matches(value, encodedValue);\n+                    verified = getDigester(cipherAlgorithm).matches(value, encoded);\n                 }\n             }\n         } catch (Exception e) {\n             LOG.error(\"Could not verify encoded value\", e);\n         }\n \n-        return res;\n+        return verified;\n     }\n \n-    public String decode(final String encodedValue, final CipherAlgorithm cipherAlgorithm)\n+    public String decode(final String encoded, final CipherAlgorithm cipherAlgorithm)\n             throws UnsupportedEncodingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\n             IllegalBlockSizeException, BadPaddingException {\n \n-        String value = null;\n-\n-        if (encodedValue != null && cipherAlgorithm == CipherAlgorithm.AES) {\n-            final byte[] encoded = encodedValue.getBytes(StandardCharsets.UTF_8);\n+        String decoded = null;\n \n-            final Cipher cipher = Cipher.getInstance(CipherAlgorithm.AES.getAlgorithm());\n+        if (encoded != null && cipherAlgorithm == CipherAlgorithm.AES) {\n+            Cipher cipher = Cipher.getInstance(CipherAlgorithm.AES.getAlgorithm());\n             cipher.init(Cipher.DECRYPT_MODE, keySpec);\n \n-            value = new String(cipher.doFinal(Base64.getDecoder().decode(encoded)), StandardCharsets.UTF_8);\n+            decoded = new String(cipher.doFinal(Base64.getDecoder().decode(encoded)), StandardCharsets.UTF_8);\n         }\n \n-        return value;\n+        return decoded;\n     }\n \n     private StandardStringDigester getDigester(final CipherAlgorithm cipherAlgorithm) {"},{"sha":"e7540d54a2c707ced90f0b714fe2c1d5bb90bda3","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/security/EncryptorTest.java","status":"modified","additions":27,"deletions":24,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/91178efddcd4f819f815b86179e5ec7dda77788b/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FEncryptorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/91178efddcd4f819f815b86179e5ec7dda77788b/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FEncryptorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FEncryptorTest.java?ref=91178efddcd4f819f815b86179e5ec7dda77788b","patch":"@@ -26,56 +26,59 @@\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.junit.jupiter.api.Test;\n \n-/**\n- * Test class to test all encryption algorithms.\n- */\n public class EncryptorTest {\n \n-    private final String password = \"password\";\n+    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n \n-    private final Encryptor encryptor = Encryptor.getInstance();\n+    private static final String PASSWORD_VALUE = \"password\";\n \n-    /**\n-     * Verify all algorithms.\n-     */\n     @Test\n-    public void testEncoder() throws Exception {\n+    public void encoder() throws Exception {\n         for (CipherAlgorithm cipherAlgorithm : CipherAlgorithm.values()) {\n-            final String encPassword = encryptor.encode(password, cipherAlgorithm);\n+            String encPassword = ENCRYPTOR.encode(PASSWORD_VALUE, cipherAlgorithm);\n \n             assertNotNull(encPassword);\n-            assertTrue(encryptor.verify(password, cipherAlgorithm, encPassword));\n-            assertFalse(encryptor.verify(\"pass\", cipherAlgorithm, encPassword));\n+            assertTrue(ENCRYPTOR.verify(PASSWORD_VALUE, cipherAlgorithm, encPassword));\n+            assertFalse(ENCRYPTOR.verify(PASSWORD_VALUE + \"diff\", cipherAlgorithm, encPassword));\n \n             // check that same password encoded with BCRYPT or Salted versions results in different digest\n-            if (cipherAlgorithm.equals(CipherAlgorithm.BCRYPT) || cipherAlgorithm.getAlgorithm().startsWith(\"S-\")) {\n-                final String encSamePassword = encryptor.encode(password, cipherAlgorithm);\n+            if (cipherAlgorithm == CipherAlgorithm.BCRYPT || cipherAlgorithm.isSalted()) {\n+                String encSamePassword = ENCRYPTOR.encode(PASSWORD_VALUE, cipherAlgorithm);\n                 assertNotNull(encSamePassword);\n                 assertFalse(encSamePassword.equals(encPassword));\n-                assertTrue(encryptor.verify(password, cipherAlgorithm, encSamePassword));\n+                assertTrue(ENCRYPTOR.verify(PASSWORD_VALUE, cipherAlgorithm, encSamePassword));\n             }\n         }\n     }\n \n     @Test\n-    public void testDecodeDefaultAESKey() throws Exception {\n-        String decPassword = encryptor.decode(\"9Pav+xl+UyHt02H9ZBytiA==\", CipherAlgorithm.AES);\n-        assertEquals(password, decPassword);\n+    public void decodeDefaultAESKey() throws Exception {\n+        String decPassword = ENCRYPTOR.decode(\"9Pav+xl+UyHt02H9ZBytiA==\", CipherAlgorithm.AES);\n+        assertEquals(PASSWORD_VALUE, decPassword);\n     }\n \n     @Test\n-    public void testSmallKey() throws Exception {\n+    public void smallKey() throws Exception {\n         Encryptor smallKeyEncryptor = Encryptor.getInstance(\"123\");\n-        String encPassword = smallKeyEncryptor.encode(password, CipherAlgorithm.AES);\n+        String encPassword = smallKeyEncryptor.encode(PASSWORD_VALUE, CipherAlgorithm.AES);\n         String decPassword = smallKeyEncryptor.decode(encPassword, CipherAlgorithm.AES);\n-        assertEquals(password, decPassword);\n+        assertEquals(PASSWORD_VALUE, decPassword);\n     }\n \n     @Test\n-    public void testSaltedHash() throws Exception {\n-        String encPassword = encryptor.encode(password, CipherAlgorithm.SSHA256);\n+    public void saltedHash() throws Exception {\n+        String encPassword = ENCRYPTOR.encode(PASSWORD_VALUE, CipherAlgorithm.SSHA256);\n         assertNotNull(encPassword);\n \n-        assertTrue(encryptor.verify(password, CipherAlgorithm.SSHA256, encPassword));\n+        assertTrue(ENCRYPTOR.verify(PASSWORD_VALUE, CipherAlgorithm.SSHA256, encPassword));\n+    }\n+\n+    @Test\n+    public void verifySaltedFromExternal() throws Exception {\n+        // generated via https://github.com/peppelinux/pySSHA-slapd with command:\n+        // python3 pySSHA/ssha.py -p password -enc sha256 -s 666ac543 \\\n+        //  | sed 's/{.*}//' | xargs echo -n | base64 -d | xxd -p | tr -d $'\\n'  | xargs echo\n+        String encPassword = \"b098017d584647e3fa1f3e0eb437648aefa84093c15e0d3efb752a4183cfdcf3666ac543\";\n+        assertTrue(ENCRYPTOR.verify(PASSWORD_VALUE, CipherAlgorithm.SSHA256, encPassword));\n     }\n }"},{"sha":"58d8c53e59ad799f9d9d41fe3440afe82c95a964","filename":"src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/setadmincredentials.adoc","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/91178efddcd4f819f815b86179e5ec7dda77788b/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fsetadmincredentials.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/91178efddcd4f819f815b86179e5ec7dda77788b/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fsetadmincredentials.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fsetadmincredentials.adoc?ref=91178efddcd4f819f815b86179e5ec7dda77788b","patch":"@@ -54,3 +54,28 @@ fciv.exe -sha1 password.txt\n * http://www.cygwin.com/[Cygwin^] Unix-like environment and command-line interface for Microsoft Windows (featuring\n http://www.gnu.org/software/coreutils/[GNU Core Utilities^])\n ====\n+\n+.Generate SSHA256 password value with common GNU / Linux tools\n+====\n+....\n+$ python3 pySSHA/ssha.py -p password -enc sha256 -s 666ac543 \\\n+ | sed 's/{.*}//' | xargs echo -n | base64 -d | xxd -p | tr -d $'\\n' | xargs echo\n+....\n+\n+Several tools involved here:\n+\n+* https://github.com/peppelinux/pySSHA-slapd[pySSHA-slapd]\n+* http://man7.org/linux/man-pages/man1/xargs.1.html[xargs]\n+* http://man7.org/linux/man-pages/man1/echo.1.html[echo]\n+* http://man7.org/linux/man-pages/man1/base64.1.html[base64]\n+* https://linux.die.net/man/1/xxd[xxd]\n+* http://man7.org/linux/man-pages/man1/tr.1.html[tr]\n+\n+The command above will:\n+\n+. generate a `SHA256` hash for input value `password` with suffixed salt `666ac543` (4 bytes in hex format), via `ssha.py`\n+. remove the `{SSHA256}` prefix from the generated value and newline, via `sed` and `xargs`\n+. since the generated value is Base64-encoded while Syncope requires Hexadecimal format, perform the required conversion\n+via `base64`, `xxd` and `tr`\n+. append newline to ease copy / paste, via `xargs` and `echo`\n+===="}]}