{"sha":"4af3335a7544f39e7020a4df5c91ed2799b33bf0","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjRhZjMzMzVhNzU0NGYzOWU3MDIwYTRkZjVjOTFlZDI3OTliMzNiZjA=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-02-02T09:43:26Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-02-02T09:43:26Z"},"message":"[SYNCOPE-763] AuditReportlet provided","tree":{"sha":"bc00857131c169ac70cb38e781f33bdb16d340de","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/bc00857131c169ac70cb38e781f33bdb16d340de"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4af3335a7544f39e7020a4df5c91ed2799b33bf0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4af3335a7544f39e7020a4df5c91ed2799b33bf0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4af3335a7544f39e7020a4df5c91ed2799b33bf0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4af3335a7544f39e7020a4df5c91ed2799b33bf0/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"27629aef9a2060914d015fe7b9b057524ff658cc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/27629aef9a2060914d015fe7b9b057524ff658cc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/27629aef9a2060914d015fe7b9b057524ff658cc"}],"stats":{"total":466,"additions":369,"deletions":97},"files":[{"sha":"fe5605bb193a812a2dc9ef72d843a3bc6d0ed9ee","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/report/AuditReportletConf.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4af3335a7544f39e7020a4df5c91ed2799b33bf0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAuditReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4af3335a7544f39e7020a4df5c91ed2799b33bf0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAuditReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAuditReportletConf.java?ref=4af3335a7544f39e7020a4df5c91ed2799b33bf0","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.report;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"auditReportletConf\")\n+@XmlType\n+public class AuditReportletConf extends AbstractReportletConf {\n+\n+    private static final long serialVersionUID = -4814950086361753689L;\n+\n+    private int page = 0;\n+\n+    private int size = 10;\n+\n+    public AuditReportletConf() {\n+        super();\n+    }\n+\n+    public AuditReportletConf(final String name) {\n+        super(name);\n+    }\n+\n+    public int getPage() {\n+        return page;\n+    }\n+\n+    public void setPage(final int page) {\n+        this.page = page;\n+    }\n+\n+    public int getSize() {\n+        return size;\n+    }\n+\n+    public void setSize(final int size) {\n+        this.size = size;\n+    }\n+\n+}"},{"sha":"392c807f8abf5fc13225f757e9b277520e871c59","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/AuditReportlet.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4af3335a7544f39e7020a4df5c91ed2799b33bf0/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FAuditReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4af3335a7544f39e7020a4df5c91ed2799b33bf0/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FAuditReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FAuditReportlet.java?ref=4af3335a7544f39e7020a4df5c91ed2799b33bf0","patch":"@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.report;\n+\n+import java.util.List;\n+import java.util.Map;\n+import javax.sql.DataSource;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.apache.commons.lang3.builder.ToStringStyle;\n+import org.apache.syncope.common.lib.report.AuditReportletConf;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.core.misc.AuditEntry;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n+import org.apache.syncope.core.misc.serialization.POJOHelper;\n+import org.apache.syncope.core.persistence.api.DomainsHolder;\n+import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.AttributesImpl;\n+\n+@ReportletConfClass(AuditReportletConf.class)\n+public class AuditReportlet extends AbstractReportlet {\n+\n+    @Autowired\n+    private DomainsHolder domainsHolder;\n+\n+    private AuditReportletConf conf;\n+\n+    private DataSource datasource;\n+\n+    private void doExtractConf(final ContentHandler handler) throws SAXException {\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(datasource);\n+        List<Map<String, Object>> rows = jdbcTemplate.queryForList(\n+                String.format(\"SELECT * FROM SYNCOPEAUDIT LIMIT %d OFFSET %d\", conf.getSize(), conf.getPage()));\n+\n+        handler.startElement(\"\", \"\", \"events\", null);\n+        AttributesImpl atts = new AttributesImpl();\n+        for (Map<String, Object> row : rows) {\n+            AuditEntry auditEntry = POJOHelper.deserialize(row.get(\"MESSAGE\").toString(), AuditEntry.class);\n+\n+            atts.clear();\n+            if (StringUtils.isNotBlank(auditEntry.getWho())) {\n+                atts.addAttribute(\"\", \"\", \"who\", ReportXMLConst.XSD_STRING, auditEntry.getWho());\n+            }\n+            handler.startElement(\"\", \"\", \"event\", atts);\n+\n+            atts.clear();\n+            if (StringUtils.isNotBlank(auditEntry.getLogger().getCategory())) {\n+                atts.addAttribute(\"\", \"\", \"category\",\n+                        ReportXMLConst.XSD_STRING, auditEntry.getLogger().getCategory());\n+            }\n+            if (StringUtils.isNotBlank(auditEntry.getLogger().getSubcategory())) {\n+                atts.addAttribute(\"\", \"\", \"subcategory\",\n+                        ReportXMLConst.XSD_STRING, auditEntry.getLogger().getSubcategory());\n+            }\n+            if (StringUtils.isNotBlank(auditEntry.getLogger().getEvent())) {\n+                atts.addAttribute(\"\", \"\", \"event\",\n+                        ReportXMLConst.XSD_STRING, auditEntry.getLogger().getEvent());\n+            }\n+            if (auditEntry.getLogger().getResult() != null) {\n+                atts.addAttribute(\"\", \"\", \"result\",\n+                        ReportXMLConst.XSD_STRING, auditEntry.getLogger().getResult().name());\n+            }\n+            handler.startElement(\"\", \"\", \"logger\", atts);\n+            handler.endElement(\"\", \"\", \"logger\");\n+\n+            if (auditEntry.getBefore() != null) {\n+                char[] before = ToStringBuilder.reflectionToString(\n+                        auditEntry.getBefore(), ToStringStyle.MULTI_LINE_STYLE).toCharArray();\n+                handler.startElement(\"\", \"\", \"before\", null);\n+                handler.characters(before, 0, before.length);\n+                handler.endElement(\"\", \"\", \"before\");\n+            }\n+\n+            if (auditEntry.getInput() != null) {\n+                handler.startElement(\"\", \"\", \"inputs\", null);\n+                for (Object inputObj : auditEntry.getInput()) {\n+                    char[] input = ToStringBuilder.reflectionToString(\n+                            inputObj, ToStringStyle.MULTI_LINE_STYLE).toCharArray();\n+                    handler.startElement(\"\", \"\", \"input\", null);\n+                    handler.characters(input, 0, input.length);\n+                    handler.endElement(\"\", \"\", \"input\");\n+                }\n+                handler.endElement(\"\", \"\", \"inputs\");\n+            }\n+\n+            if (auditEntry.getOutput() != null) {\n+                char[] output = ToStringBuilder.reflectionToString(\n+                        auditEntry.getOutput(), ToStringStyle.MULTI_LINE_STYLE).toCharArray();\n+                handler.startElement(\"\", \"\", \"output\", null);\n+                handler.characters(output, 0, output.length);\n+                handler.endElement(\"\", \"\", \"output\");\n+            }\n+\n+            handler.startElement(\"\", \"\", \"throwable\", null);\n+            char[] throwable = row.get(\"THROWABLE\").toString().toCharArray();\n+            handler.characters(throwable, 0, throwable.length);\n+            handler.endElement(\"\", \"\", \"throwable\");\n+\n+            handler.endElement(\"\", \"\", \"event\");\n+        }\n+        handler.endElement(\"\", \"\", \"events\");\n+    }\n+\n+    @Override\n+    protected void doExtract(final ReportletConf conf, final ContentHandler handler) throws SAXException {\n+        if (conf instanceof AuditReportletConf) {\n+            this.conf = AuditReportletConf.class.cast(conf);\n+        } else {\n+            throw new ReportException(new IllegalArgumentException(\"Invalid configuration provided\"));\n+        }\n+\n+        datasource = domainsHolder.getDomains().get(AuthContextUtils.getDomain());\n+        if (datasource == null) {\n+            throw new ReportException(new IllegalArgumentException(\"Could not get to DataSource\"));\n+        }\n+\n+        doExtractConf(handler);\n+    }\n+\n+}"},{"sha":"863754d1648280abea556845a7363d54f6188be9","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/UserReportlet.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4af3335a7544f39e7020a4df5c91ed2799b33bf0/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4af3335a7544f39e7020a4df5c91ed2799b33bf0/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java?ref=4af3335a7544f39e7020a4df5c91ed2799b33bf0","patch":"@@ -283,8 +283,7 @@ private void doExtract(final ContentHandler handler, final List<User> users) thr\n \n                     atts.addAttribute(\"\", \"\", \"groupKey\",\n                             ReportXMLConst.XSD_LONG, String.valueOf(memb.getRightKey()));\n-                    atts.addAttribute(\"\", \"\", \"groupName\", ReportXMLConst.XSD_STRING, String.\n-                            valueOf(memb.getGroupName()));\n+                    atts.addAttribute(\"\", \"\", \"groupName\", ReportXMLConst.XSD_STRING, memb.getGroupName());\n                     handler.startElement(\"\", \"\", \"membership\", atts);\n \n                     if (conf.getFeatures().contains(Feature.resources)) {"},{"sha":"3933bc395bf9b231a33b98ac005b1a71d621b9f5","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/AuditEntry.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4af3335a7544f39e7020a4df5c91ed2799b33bf0/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FAuditEntry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4af3335a7544f39e7020a4df5c91ed2799b33bf0/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FAuditEntry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FAuditEntry.java?ref=4af3335a7544f39e7020a4df5c91ed2799b33bf0","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License; Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing;\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS; WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND; either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.misc;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+\n+public class AuditEntry extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -2299082316063743582L;\n+\n+    private final String who;\n+\n+    private final AuditLoggerName logger;\n+\n+    private final Object before;\n+\n+    private final Object output;\n+\n+    private final Object[] input;\n+\n+    @JsonCreator\n+    public AuditEntry(\n+            @JsonProperty(\"who\") final String who,\n+            @JsonProperty(\"logger\") final AuditLoggerName logger,\n+            @JsonProperty(\"before\") final Object before,\n+            @JsonProperty(\"output\") final Object output,\n+            @JsonProperty(\"input\") final Object[] input) {\n+\n+        super();\n+        \n+        this.who = who;\n+        this.logger = logger;\n+        this.before = before;\n+        this.output = output;\n+        this.input = input;\n+    }\n+\n+    public String getWho() {\n+        return who;\n+    }\n+\n+    public AuditLoggerName getLogger() {\n+        return logger;\n+    }\n+\n+    public Object getBefore() {\n+        return before;\n+    }\n+\n+    public Object getOutput() {\n+        return output;\n+    }\n+\n+    public Object[] getInput() {\n+        return input;\n+    }\n+\n+}"},{"sha":"db243dc2cbb781e0f0e891dda1c9dffbf4bb076e","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/AuditManager.java","status":"modified","additions":17,"deletions":63,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4af3335a7544f39e7020a4df5c91ed2799b33bf0/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FAuditManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4af3335a7544f39e7020a4df5c91ed2799b33bf0/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FAuditManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FAuditManager.java?ref=4af3335a7544f39e7020a4df5c91ed2799b33bf0","patch":"@@ -18,29 +18,23 @@\n  */\n package org.apache.syncope.core.misc;\n \n-import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n-import org.apache.syncope.core.misc.security.SyncopeAuthenticationDetails;\n+import org.apache.syncope.core.misc.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n-import org.springframework.security.core.context.SecurityContext;\n-import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class AuditManager {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(AuditManager.class);\n-\n     @Autowired\n     private LoggerDAO loggerDAO;\n \n@@ -59,66 +53,26 @@ public void audit(\n             final Object output,\n             final Object... input) {\n \n-        StringBuilder message = new StringBuilder(32);\n-\n-        message.append(\"BEFORE:\\n\").\n-                append('\\t').append(before == null ? \"unknown\" : before).append('\\n');\n-\n-        message.append(\"INPUT:\\n\");\n-\n-        if (ArrayUtils.isNotEmpty(input)) {\n-            for (Object obj : input) {\n-                message.append('\\t').append(obj == null ? null : obj.toString()).append('\\n');\n-            }\n-        } else {\n-            message.append('\\t').append(\"none\").append('\\n');\n-        }\n-\n-        message.append(\"OUTPUT:\\n\");\n-\n-        Throwable throwable;\n+        Throwable throwable = null;\n         if (output instanceof Throwable) {\n             throwable = (Throwable) output;\n-            message.append('\\t').append(throwable.getMessage());\n-        } else {\n-            throwable = null;\n-            message.append('\\t').append(output == null ? \"none\" : output.toString());\n-        }\n-\n-        AuditLoggerName auditLoggerName = null;\n-        try {\n-            auditLoggerName = new AuditLoggerName(type, category, subcategory, event, result);\n-        } catch (IllegalArgumentException e) {\n-            LOG.error(\"Invalid audit parameters, aborting...\", e);\n         }\n \n-        if (auditLoggerName != null) {\n-            org.apache.syncope.core.persistence.api.entity.Logger syncopeLogger =\n-                    loggerDAO.find(auditLoggerName.toLoggerName());\n-            if (syncopeLogger != null && syncopeLogger.getLevel() == LoggerLevel.DEBUG) {\n-                StringBuilder auditMessage = new StringBuilder();\n-\n-                SecurityContext ctx = SecurityContextHolder.getContext();\n-                if (ctx != null && ctx.getAuthentication() != null) {\n-                    auditMessage.append('[').append(ctx.getAuthentication().getName()).append(\"] \");\n-                }\n-                auditMessage.append(message);\n-\n-                String domain = AuthContextUtils.getDomain();\n-                if (input != null && input.length > 0 && input[0] instanceof UsernamePasswordAuthenticationToken) {\n-                    UsernamePasswordAuthenticationToken token =\n-                            UsernamePasswordAuthenticationToken.class.cast(input[0]);\n-                    if (token.getDetails() instanceof SyncopeAuthenticationDetails) {\n-                        domain = SyncopeAuthenticationDetails.class.cast(token.getDetails()).getDomain();\n-                    }\n-                }\n-\n-                Logger logger = LoggerFactory.getLogger(getDomainAuditLoggerName(domain));\n-                if (throwable == null) {\n-                    logger.debug(auditMessage.toString());\n-                } else {\n-                    logger.debug(auditMessage.toString(), throwable);\n-                }\n+        AuditEntry auditEntry = new AuditEntry(\n+                AuthContextUtils.getUsername(),\n+                new AuditLoggerName(type, category, subcategory, event, result),\n+                before,\n+                throwable == null ? output : throwable.getMessage(),\n+                input);\n+\n+        org.apache.syncope.core.persistence.api.entity.Logger syncopeLogger =\n+                loggerDAO.find(auditEntry.getLogger().toLoggerName());\n+        if (syncopeLogger != null && syncopeLogger.getLevel() == LoggerLevel.DEBUG) {\n+            Logger logger = LoggerFactory.getLogger(getDomainAuditLoggerName(AuthContextUtils.getDomain()));\n+            if (throwable == null) {\n+                logger.debug(POJOHelper.serialize(auditEntry));\n+            } else {\n+                logger.debug(POJOHelper.serialize(auditEntry), throwable);\n             }\n         }\n     }"},{"sha":"667a28e6752c7867e2bcb96d9c74f2ee51afda36","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/utils/ConnObjectUtils.java","status":"modified","additions":36,"deletions":28,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4af3335a7544f39e7020a4df5c91ed2799b33bf0/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Futils%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4af3335a7544f39e7020a4df5c91ed2799b33bf0/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Futils%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Futils%2FConnObjectUtils.java?ref=4af3335a7544f39e7020a4df5c91ed2799b33bf0","patch":"@@ -32,7 +32,6 @@\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n@@ -187,20 +186,27 @@ public <T extends AnyPatch> T getAnyPatch(final Long key, final ConnectorObject\n         AnyTO updated = getAnyTOFromConnObject(obj, syncTask, provision, anyUtils);\n         updated.setKey(key);\n \n-        if (AnyTypeKind.USER == anyUtils.getAnyTypeKind()) {\n-            // update password if and only if password is really changed\n-            User user = userDAO.authFind(key);\n-            if (StringUtils.isBlank(((UserTO) updated).getPassword())\n-                    || ENCRYPTOR.verify(((UserTO) updated).getPassword(),\n-                            user.getCipherAlgorithm(), user.getPassword())) {\n+        if (null != anyUtils.getAnyTypeKind()) {\n+            switch (anyUtils.getAnyTypeKind()) {\n+                case USER:\n+                    // update password if and only if password is really changed\n+                    User user = userDAO.authFind(key);\n+                    if (StringUtils.isBlank(((UserTO) updated).getPassword())\n+                            || ENCRYPTOR.verify(((UserTO) updated).getPassword(),\n+                                    user.getCipherAlgorithm(), user.getPassword())) {\n \n-                ((UserTO) updated).setPassword(null);\n+                        ((UserTO) updated).setPassword(null);\n+                    }\n+                    return (T) AnyOperations.diff(((UserTO) updated), ((UserTO) original), true);\n+\n+                case GROUP:\n+                    return (T) AnyOperations.diff(((GroupTO) updated), ((GroupTO) original), true);\n+\n+                case ANY_OBJECT:\n+                    return (T) AnyOperations.diff(((AnyObjectTO) updated), ((AnyObjectTO) original), true);\n+\n+                default:\n             }\n-            return (T) AnyOperations.diff(((UserTO) updated), ((UserTO) original), true);\n-        } else if (AnyTypeKind.GROUP == anyUtils.getAnyTypeKind()) {\n-            return (T) AnyOperations.diff(((GroupTO) updated), ((GroupTO) original), true);\n-        } else if (AnyTypeKind.ANY_OBJECT == anyUtils.getAnyTypeKind()) {\n-            return (T) AnyOperations.diff(((AnyObjectTO) updated), ((AnyObjectTO) original), true);\n         }\n \n         return null;\n@@ -233,25 +239,27 @@ private <T extends AnyTO> T getAnyTOFromConnObject(final ConnectorObject obj,\n     public ConnObjectTO getConnObjectTO(final ConnectorObject connObject) {\n         final ConnObjectTO connObjectTO = new ConnObjectTO();\n \n-        for (Attribute attr : connObject.getAttributes()) {\n-            AttrTO attrTO = new AttrTO();\n-            attrTO.setSchema(attr.getName());\n-\n-            if (attr.getValue() != null) {\n-                for (Object value : attr.getValue()) {\n-                    if (value != null) {\n-                        if (value instanceof GuardedString || value instanceof GuardedByteArray) {\n-                            attrTO.getValues().add(getPassword(value));\n-                        } else if (value instanceof byte[]) {\n-                            attrTO.getValues().add(Base64.encode((byte[]) value));\n-                        } else {\n-                            attrTO.getValues().add(value.toString());\n+        if (connObject != null) {\n+            for (Attribute attr : connObject.getAttributes()) {\n+                AttrTO attrTO = new AttrTO();\n+                attrTO.setSchema(attr.getName());\n+\n+                if (attr.getValue() != null) {\n+                    for (Object value : attr.getValue()) {\n+                        if (value != null) {\n+                            if (value instanceof GuardedString || value instanceof GuardedByteArray) {\n+                                attrTO.getValues().add(getPassword(value));\n+                            } else if (value instanceof byte[]) {\n+                                attrTO.getValues().add(Base64.encode((byte[]) value));\n+                            } else {\n+                                attrTO.getValues().add(value.toString());\n+                            }\n                         }\n                     }\n                 }\n-            }\n \n-            connObjectTO.getPlainAttrs().add(attrTO);\n+                connObjectTO.getPlainAttrs().add(attrTO);\n+            }\n         }\n \n         return connObjectTO;"},{"sha":"7d7edc1efeb0dde189a6bfd001cec1cdb276a88c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4af3335a7544f39e7020a4df5c91ed2799b33bf0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4af3335a7544f39e7020a4df5c91ed2799b33bf0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=4af3335a7544f39e7020a4df5c91ed2799b33bf0","patch":"@@ -483,8 +483,8 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n                 task.getResource().getKey(),\n                 task.getOperation().name().toLowerCase(),\n                 result,\n-                beforeObj, // searching for before object is too much expensive ... \n-                new Object[] { execution, afterObj },\n+                connObjectUtils.getConnObjectTO(beforeObj), // searching for before object is too much expensive ... \n+                new Object[] { execution, connObjectUtils.getConnObjectTO(afterObj) },\n                 task);\n \n         return execution;"},{"sha":"f88982f3fba2c8787fd2db185ef2cdfb2cee41c6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractPushResultHandler.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4af3335a7544f39e7020a4df5c91ed2799b33bf0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4af3335a7544f39e7020a4df5c91ed2799b33bf0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java?ref=4af3335a7544f39e7020a4df5c91ed2799b33bf0","patch":"@@ -370,8 +370,9 @@ protected final void doHandle(final Any<?> any) throws JobExecutionException {\n                         profile.getTask().getResource().getKey(),\n                         operation,\n                         resultStatus,\n-                        beforeObj,\n-                        output,\n+                        connObjectUtils.getConnObjectTO(beforeObj),\n+                        output instanceof ConnectorObject\n+                                ? connObjectUtils.getConnObjectTO((ConnectorObject) output) : output,\n                         any);\n             }\n         }"},{"sha":"ed72f514b0868aca180931299b651a4c3587dfd6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReportITCase.java","status":"modified","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4af3335a7544f39e7020a4df5c91ed2799b33bf0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4af3335a7544f39e7020a4df5c91ed2799b33bf0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java?ref=4af3335a7544f39e7020a4df5c91ed2799b33bf0","patch":"@@ -34,11 +34,17 @@\n import org.apache.commons.io.IOUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.report.AuditReportletConf;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.LoggerTO;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.syncope.common.lib.types.AuditElements;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.LoggerLevel;\n+import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.lib.types.ReportExecStatus;\n import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n@@ -247,6 +253,35 @@ public void deleteExecutions() {\n         assertEquals(BulkActionResult.Status.SUCCESS, result.getResults().entrySet().iterator().next().getValue());\n     }\n \n+    @Test\n+    public void auditReport() throws IOException {\n+        AuditLoggerName auditLoggerName = new AuditLoggerName(\n+                AuditElements.EventCategoryType.REST,\n+                \"UserLogic\",\n+                null,\n+                \"readSelf\",\n+                AuditElements.Result.SUCCESS);\n+\n+        try {\n+            LoggerTO loggerTO = new LoggerTO();\n+            loggerTO.setKey(auditLoggerName.toLoggerName());\n+            loggerTO.setLevel(LoggerLevel.DEBUG);\n+            loggerService.update(LoggerType.AUDIT, loggerTO);\n+\n+            ReportTO report = new ReportTO();\n+            report.setName(\"auditReport\" + getUUIDString());\n+            report.setActive(true);\n+            report.getReportletConfs().add(new AuditReportletConf(\"auditReportlet\" + getUUIDString()));\n+            report.setTemplate(\"sample\");\n+            report = createReport(report);\n+\n+            long execKey = execute(report.getKey());\n+            checkExport(execKey, ReportExecExportFormat.XML);\n+        } finally {\n+            loggerService.delete(LoggerType.AUDIT, auditLoggerName.toLoggerName());\n+        }\n+    }\n+\n     @Test\n     public void issueSYNCOPE43() {\n         ReportTO reportTO = new ReportTO();"}]}