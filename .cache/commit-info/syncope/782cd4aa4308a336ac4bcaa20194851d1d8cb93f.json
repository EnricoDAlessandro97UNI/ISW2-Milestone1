{"sha":"782cd4aa4308a336ac4bcaa20194851d1d8cb93f","node_id":"C_kwDOJfYA1toAKDc4MmNkNGFhNDMwOGEzMzZhYzRiY2FhMjAxOTQ4NTFkMWQ4Y2I5M2Y","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2022-10-12T19:38:40Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-10-12T19:38:40Z"},"message":"SYNCOPE-1699: Extract key from path  if undefined in request body (#381)","tree":{"sha":"2b1995045e206234a1bd560694d9365427d50ff3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2b1995045e206234a1bd560694d9365427d50ff3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/782cd4aa4308a336ac4bcaa20194851d1d8cb93f","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjRxfACRBK7hj4Ov3rIwAAD8cIAJfpdwmBiyR2a58gUu7NRDkE\nFp0h1OYvU5a+JhX3xPq9FKaMb2QYcnQywYnn6JucKR8qcezjVKvWIAf3asYSfltV\nx7mCT4qqkWuMHn2Um/cnQsOBa9JmjxYoOe8f80RKZfoXtp2yOEa0Rib11n14hmyy\nf01QfQvA533Fp/ziO8MRu7Mn2Tmd06IjQ3lHQj1gooezcn0PqLGsHUm2RfiYogbT\ntiu4n4I11e9Eco2Wo57XYBQSWcz3SB8cMiegeqg57dhhcM6f6L8PoVPv9+uI7OiF\nxGJ9OsWWGAM4/nUfL0lWhc8G2g/7tUo3G9QXTOa6l4O/rXyr+0/8bi6TqzqiDto=\n=LRHv\n-----END PGP SIGNATURE-----\n","payload":"tree 2b1995045e206234a1bd560694d9365427d50ff3\nparent 782cb9c1479bc00a57cb9ef14757b930af4011ff\nauthor Misagh Moayyed <mm1844@gmail.com> 1665603520 +0400\ncommitter GitHub <noreply@github.com> 1665603520 +0400\n\nSYNCOPE-1699: Extract key from path  if undefined in request body (#381)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/782cd4aa4308a336ac4bcaa20194851d1d8cb93f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/782cd4aa4308a336ac4bcaa20194851d1d8cb93f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/782cd4aa4308a336ac4bcaa20194851d1d8cb93f/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"782cb9c1479bc00a57cb9ef14757b930af4011ff","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/782cb9c1479bc00a57cb9ef14757b930af4011ff","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/782cb9c1479bc00a57cb9ef14757b930af4011ff"}],"stats":{"total":43,"additions":40,"deletions":3},"files":[{"sha":"245e19b2993303c2461abf7134a417dc7f3e6545","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractService.java","status":"modified","additions":17,"deletions":3,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cd4aa4308a336ac4bcaa20194851d1d8cb93f/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cd4aa4308a336ac4bcaa20194851d1d8cb93f/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractService.java?ref=782cd4aa4308a336ac4bcaa20194851d1d8cb93f","patch":"@@ -61,10 +61,24 @@ public abstract class AbstractService implements JAXRSService {\n \n     protected String getActualKey(final AnyDAO<?> dao, final String pretendingKey) {\n         String actualKey = pretendingKey;\n-        if (!SyncopeConstants.UUID_PATTERN.matcher(pretendingKey).matches()) {\n-            actualKey = dao.findKey(pretendingKey);\n+        if (uriInfo.getPathParameters(true).containsKey(\"key\")) {\n+            final String keyInPath = uriInfo.getPathParameters(true).get(\"key\").get(0);\n+            if (actualKey == null) {\n+                actualKey = keyInPath;\n+            } else if (!actualKey.equals(keyInPath)) {\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRequest);\n+                sce.getElements().add(\"Key specified in request does not match key in the path\");\n+                throw sce;\n+            }\n+        }\n+        if (actualKey == null) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRequest);\n+            sce.getElements().add(\"Key is null\");\n+            throw sce;\n+        }\n+        if (!SyncopeConstants.UUID_PATTERN.matcher(actualKey).matches()) {\n+            actualKey = dao.findKey(actualKey);\n         }\n-\n         return actualKey;\n     }\n "},{"sha":"0eab07f3241b062b3d681565b440c91a2fe1574a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cd4aa4308a336ac4bcaa20194851d1d8cb93f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cd4aa4308a336ac4bcaa20194851d1d8cb93f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=782cd4aa4308a336ac4bcaa20194851d1d8cb93f","patch":"@@ -35,11 +35,14 @@\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.UUID;\n import javax.naming.NamingException;\n import javax.ws.rs.core.GenericType;\n+import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.cxf.helpers.IOUtils;\n+import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -91,6 +94,26 @@\n \n public class UserIssuesITCase extends AbstractITCase {\n \n+    @Test\n+    public void issueSYNCOPE1699() throws Exception {\n+        UserTO userTO = createUser(UserITCase.getUniqueSample(\"syncope1669@apache.org\")).getEntity();\n+\n+        UserUR req = new UserUR();\n+        req.setUsername(new StringReplacePatchItem.Builder().value(\"newUsername\" + getUUIDString()).build());\n+\n+        WebClient webClient = WebClient.create(ADDRESS + \"/users/\" + userTO.getKey(), ADMIN_UNAME, ADMIN_PWD, null).\n+            accept(MediaType.APPLICATION_JSON_TYPE).\n+            type(MediaType.APPLICATION_JSON_TYPE);\n+\n+        Response response = webClient.invoke(\"PATCH\", JSON_MAPPER.writeValueAsString(req));\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+\n+        // Key is mismatched in the path parameter and the request body.\n+        req.setKey(UUID.randomUUID().toString());\n+        response = webClient.invoke(\"PATCH\", JSON_MAPPER.writeValueAsString(req));\n+        assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());\n+    }\n+    \n     @Test\n     public void issue186() {\n         // 1. create an user with strict mandatory attributes only"}]}