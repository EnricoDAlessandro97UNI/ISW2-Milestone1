{"sha":"e2e202661550d06764c35ea7d52e11edfe2c2426","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmUyZTIwMjY2MTU1MGQwNjc2NGMzNWVhN2Q1MmUxMWVkZmUyYzI0MjY=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-11-11T08:23:15Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-11-11T08:23:15Z"},"message":"added SyncPolicy specification\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247191 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"411818248f2b7f92f723c5daa8d30ddc6fc0f366","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/411818248f2b7f92f723c5daa8d30ddc6fc0f366"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e2e202661550d06764c35ea7d52e11edfe2c2426","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e2e202661550d06764c35ea7d52e11edfe2c2426","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e2e202661550d06764c35ea7d52e11edfe2c2426","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e2e202661550d06764c35ea7d52e11edfe2c2426/comments","author":null,"committer":null,"parents":[{"sha":"8d8f5bc828fd5ec58ee2ffc7a23ebeec2b0fd647","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8d8f5bc828fd5ec58ee2ffc7a23ebeec2b0fd647","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8d8f5bc828fd5ec58ee2ffc7a23ebeec2b0fd647"}],"stats":{"total":202,"additions":161,"deletions":41},"files":[{"sha":"cc049b7188e2a5fb56f85c8b3ed0fdded8ecd99a","filename":"client/src/main/java/org/syncope/client/SchemaList.java","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2e202661550d06764c35ea7d52e11edfe2c2426/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2FSchemaList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2e202661550d06764c35ea7d52e11edfe2c2426/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2FSchemaList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2FSchemaList.java?ref=e2e202661550d06764c35ea7d52e11edfe2c2426","patch":"@@ -0,0 +1,21 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.client;\n+\n+import java.lang.annotation.Retention;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+@Retention(RUNTIME)\n+public @interface SchemaList {\n+}"},{"sha":"af61a06896f90e2c8c7a68a1b7551e0f208a352e","filename":"client/src/main/java/org/syncope/types/AccountPolicySpec.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2e202661550d06764c35ea7d52e11edfe2c2426/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAccountPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2e202661550d06764c35ea7d52e11edfe2c2426/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAccountPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAccountPolicySpec.java?ref=e2e202661550d06764c35ea7d52e11edfe2c2426","patch":"@@ -16,6 +16,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import org.syncope.client.SchemaList;\n \n public class AccountPolicySpec extends AbstractPolicySpec {\n \n@@ -39,6 +40,7 @@ public class AccountPolicySpec extends AbstractPolicySpec {\n     /**\n      * User attribute values not permitted.\n      */\n+    @SchemaList\n     private List<String> schemasNotPermitted;\n \n     /**"},{"sha":"ecd34827a892957f7f0a0f2089fc56f1a667258e","filename":"client/src/main/java/org/syncope/types/ConflictResolutionAction.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2e202661550d06764c35ea7d52e11edfe2c2426/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FConflictResolutionAction.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2e202661550d06764c35ea7d52e11edfe2c2426/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FConflictResolutionAction.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FConflictResolutionAction.java?ref=e2e202661550d06764c35ea7d52e11edfe2c2426","patch":"@@ -0,0 +1,25 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.types;\n+\n+public enum ConflictResolutionAction {\n+\n+    // sync first matcgh\n+    FIRSTMATCH,\n+    // sync last match\n+    LASTMATCH,\n+    // ignore sync\n+    IGNORE\n+}"},{"sha":"6cea8d938297897d683b9d584e24989c231250fb","filename":"client/src/main/java/org/syncope/types/PasswordPolicySpec.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2e202661550d06764c35ea7d52e11edfe2c2426/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPasswordPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2e202661550d06764c35ea7d52e11edfe2c2426/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPasswordPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPasswordPolicySpec.java?ref=e2e202661550d06764c35ea7d52e11edfe2c2426","patch":"@@ -16,6 +16,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import org.syncope.client.SchemaList;\n \n public class PasswordPolicySpec extends AbstractPolicySpec {\n \n@@ -44,6 +45,7 @@ public class PasswordPolicySpec extends AbstractPolicySpec {\n     /**\n      * User attribute values not permitted.\n      */\n+    @SchemaList\n     private List<String> schemasNotPermitted;\n \n     /**"},{"sha":"fa4242a75eb0b0ebd091c0c3a45db4df177a32e0","filename":"client/src/main/java/org/syncope/types/SyncPolicySpec.java","status":"modified","additions":29,"deletions":5,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2e202661550d06764c35ea7d52e11edfe2c2426/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2e202661550d06764c35ea7d52e11edfe2c2426/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncPolicySpec.java?ref=e2e202661550d06764c35ea7d52e11edfe2c2426","patch":"@@ -14,17 +14,41 @@\n  */\n package org.syncope.types;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import org.syncope.client.SchemaList;\n+\n public class SyncPolicySpec extends AbstractPolicySpec {\n \n     private static final long serialVersionUID = -3144027171719498127L;\n \n-    private boolean fake;\n+    /**\n+     * SyncopeUsers attributes and user schemas used to disambiguate.\n+     */\n+    @SchemaList\n+    private List<String> identityTemplate;\n+\n+    /**\n+     * Conflict resolution action.\n+     */\n+    private ConflictResolutionAction conflictResolutionAction;\n+\n+    public ConflictResolutionAction getConflictResolutionAction() {\n+        return conflictResolutionAction;\n+    }\n+\n+    public void setConflictResolutionAction(ConflictResolutionAction conflictResolutionAction) {\n+        this.conflictResolutionAction = conflictResolutionAction;\n+    }\n \n-    public boolean isFake() {\n-        return fake;\n+    public List<String> getIdentityTemplate() {\n+        if (identityTemplate == null) {\n+            identityTemplate = new ArrayList<String>();\n+        }\n+        return identityTemplate;\n     }\n \n-    public void setFake(boolean fake) {\n-        this.fake = fake;\n+    public void setIdentityTemplate(List<String> identityTemplate) {\n+        this.identityTemplate = identityTemplate;\n     }\n }"},{"sha":"bb679fe4a4a211f9a5b04e2a4bc13971b7fe6603","filename":"console/src/main/java/org/syncope/console/pages/panels/PolicyBeanPanel.java","status":"modified","additions":72,"deletions":34,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2e202661550d06764c35ea7d52e11edfe2c2426/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2e202661550d06764c35ea7d52e11edfe2c2426/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java?ref=e2e202661550d06764c35ea7d52e11edfe2c2426","patch":"@@ -18,6 +18,7 @@\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.Set;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -36,16 +37,19 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.util.StringUtils;\n+import org.syncope.client.SchemaList;\n import org.syncope.client.to.SchemaTO;\n import org.syncope.console.commons.XMLRolesReader;\n import org.syncope.console.rest.SchemaRestClient;\n import org.syncope.console.wicket.markup.html.form.AbstractFieldPanel;\n import org.syncope.console.wicket.markup.html.form.MultiValueSelectorPanel;\n import org.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n+import org.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.syncope.console.wicket.markup.html.form.AjaxPalettePanel;\n import org.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.syncope.console.wicket.markup.html.form.FieldPanel;\n import org.syncope.types.AbstractPolicySpec;\n+import org.syncope.types.ConflictResolutionAction;\n \n public class PolicyBeanPanel extends Panel {\n \n@@ -97,6 +101,10 @@ public PolicyBeanPanel(\n                 fieldWrapper = new FieldWrapper();\n                 fieldWrapper.setName(field.getName());\n                 fieldWrapper.setType(field.getType());\n+\n+                fieldWrapper.setSchemaList(\n+                        field.getAnnotation(SchemaList.class) != null);\n+\n                 items.add(fieldWrapper);\n             }\n         }\n@@ -115,28 +123,52 @@ protected void populateItem(ListItem<FieldWrapper> item) {\n                         \"label\", new ResourceModel(field.getName())));\n \n                 final AbstractFieldPanel component;\n-                Method method;\n+                Method classMethod;\n+\n+                try {\n+                    if (field.getType().equals(ConflictResolutionAction.class)) {\n+                        classMethod = policy.getClass().getMethod(\n+                                \"get\" + StringUtils.capitalize(field.getName()),\n+                                new Class[]{});\n+\n+                        component = new AjaxDropDownChoicePanel(\n+                                \"field\",\n+                                field.getName(),\n+                                new PropertyModel(policy, field.getName()),\n+                                false);\n+\n+                        ((AjaxDropDownChoicePanel) component).setChoices(\n+                                Arrays.asList(ConflictResolutionAction.values()));\n+\n+                        item.add(component);\n+\n+                        item.add(getActivationControl(\n+                                component,\n+                                (Enum) classMethod.invoke(\n+                                policy, new Object[]{}) != null,\n+                                ConflictResolutionAction.IGNORE,\n+                                ConflictResolutionAction.IGNORE));\n+\n \n-                if (field.getType().equals(boolean.class)\n-                        || field.getType().equals(Boolean.class)) {\n+                    } else if (field.getType().equals(boolean.class)\n+                            || field.getType().equals(Boolean.class)) {\n \n-                    item.add(new AjaxCheckBoxPanel(\n-                            \"check\",\n-                            field.getName(),\n-                            new PropertyModel(policy, field.getName()),\n-                            false));\n+                        item.add(new AjaxCheckBoxPanel(\n+                                \"check\",\n+                                field.getName(),\n+                                new PropertyModel(policy, field.getName()),\n+                                false));\n \n-                    item.add(new Label(\"field\", new Model(null)));\n+                        item.add(new Label(\"field\", new Model(null)));\n \n-                } else if (field.getType().equals(List.class)\n-                        || field.getType().equals(Set.class)) {\n-                    try {\n+                    } else if (field.getType().equals(List.class)\n+                            || field.getType().equals(Set.class)) {\n \n-                        method = policy.getClass().getMethod(\n+                        classMethod = policy.getClass().getMethod(\n                                 \"get\" + StringUtils.capitalize(field.getName()),\n                                 new Class[]{});\n \n-                        if (\"schemasNotPermitted\".equals(field.getName())) {\n+                        if (field.isSchemaList()) {\n                             component = new AjaxPalettePanel(\n                                     \"field\",\n                                     new PropertyModel(policy, field.getName()),\n@@ -146,7 +178,7 @@ protected void populateItem(ListItem<FieldWrapper> item) {\n \n                             item.add(getActivationControl(\n                                     component,\n-                                    !((List) method.invoke(\n+                                    !((List) classMethod.invoke(\n                                     policy, new Object[]{})).isEmpty(),\n                                     new ArrayList<String>(),\n                                     new ArrayList<String>()));\n@@ -174,19 +206,15 @@ protected void populateItem(ListItem<FieldWrapper> item) {\n \n                             item.add(getActivationControl(\n                                     component,\n-                                    !((List<String>) method.invoke(\n+                                    !((List<String>) classMethod.invoke(\n                                     policy, new Object[]{})).isEmpty(),\n                                     (Serializable) new ArrayList<String>(),\n                                     (Serializable) reinitializedValue));\n                         }\n-                    } catch (Exception e) {\n-                        LOG.error(\"Error retrieving password policy fields\", e);\n-                    }\n-                } else if (field.getType().equals(int.class)\n-                        || field.getType().equals(Integer.class)) {\n-                    try {\n+                    } else if (field.getType().equals(int.class)\n+                            || field.getType().equals(Integer.class)) {\n \n-                        method = policy.getClass().getMethod(\n+                        classMethod = policy.getClass().getMethod(\n                                 \"get\" + StringUtils.capitalize(field.getName()),\n                                 new Class[]{});\n \n@@ -196,21 +224,21 @@ protected void populateItem(ListItem<FieldWrapper> item) {\n                                 new PropertyModel(policy, field.getName()),\n                                 false);\n \n+                        item.add(component);\n+\n                         item.add(getActivationControl(\n                                 component,\n-                                (Integer) method.invoke(\n+                                (Integer) classMethod.invoke(\n                                 policy, new Object[]{}) > 0,\n                                 0,\n                                 0));\n-\n-                        item.add(component);\n-                    } catch (Exception e) {\n-                        LOG.error(\"Error retrieving password policy fields\", e);\n+                    } else {\n+                        item.add(new AjaxCheckBoxPanel(\n+                                \"check\", field.getName(), new Model(), false));\n+                        item.add(new Label(\"field\", new Model(null)));\n                     }\n-                } else {\n-                    item.add(new AjaxCheckBoxPanel(\n-                            \"check\", field.getName(), new Model(), false));\n-                    item.add(new Label(\"field\", new Model(null)));\n+                } catch (Exception e) {\n+                    LOG.error(\"Error retrieving policy fields\", e);\n                 }\n             }\n         };\n@@ -261,20 +289,30 @@ private class FieldWrapper implements Serializable {\n \n         private String name;\n \n+        private boolean schemaList;\n+\n         public String getName() {\n             return name;\n         }\n \n-        public void setName(String name) {\n+        public void setName(final String name) {\n             this.name = name;\n         }\n \n         public Class getType() {\n             return type;\n         }\n \n-        public void setType(Class type) {\n+        public void setType(final Class type) {\n             this.type = type;\n         }\n+\n+        public boolean isSchemaList() {\n+            return schemaList;\n+        }\n+\n+        public void setSchemaList(boolean schemaList) {\n+            this.schemaList = schemaList;\n+        }\n     }\n }"},{"sha":"074aa6d5ec01a9235aee0a1ee2c6bc179ee69d1d","filename":"console/src/main/resources/org/syncope/console/pages/PolicyModalPage.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2e202661550d06764c35ea7d52e11edfe2c2426/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2e202661550d06764c35ea7d52e11edfe2c2426/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.properties?ref=e2e202661550d06764c35ea7d52e11edfe2c2426","patch":"@@ -55,5 +55,6 @@ permittedLoginRetries=Maximum number of subsequent failed logins\n #-----------------------------\n # Sync policy specification properties\n #-----------------------------\n-fake=toBeDefined\n+identityTemplate=Identity template\n+conflictResolutionAction= Conflict resolution action\n #-----------------------------\n\\ No newline at end of file"},{"sha":"9323bbc18ca6bc90a929d00fb7e02f4d63c24997","filename":"console/src/main/resources/org/syncope/console/pages/PolicyModalPage_it.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2e202661550d06764c35ea7d52e11edfe2c2426/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2e202661550d06764c35ea7d52e11edfe2c2426/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage_it.properties?ref=e2e202661550d06764c35ea7d52e11edfe2c2426","patch":"@@ -55,5 +55,6 @@ permittedLoginRetries=Numero massimo di login consecutivi falliti\n #-----------------------------\n # Sync policy specification properties\n #-----------------------------\n-fake=toBeDefined\n+identityTemplate=Identity template\n+conflictResolutionAction= Azione di risoluzione dei conflitti\n #-----------------------------\n\\ No newline at end of file"},{"sha":"97b10e803fdc2705cf539e16c2a27b165ab263f0","filename":"core/src/main/java/org/syncope/core/scheduling/SyncJob.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2e202661550d06764c35ea7d52e11edfe2c2426/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2e202661550d06764c35ea7d52e11edfe2c2426/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java?ref=e2e202661550d06764c35ea7d52e11edfe2c2426","patch":"@@ -36,6 +36,7 @@\n import org.syncope.core.init.ConnInstanceLoader;\n import org.syncope.core.persistence.beans.PropagationTask;\n import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.persistence.beans.SyncPolicy;\n import org.syncope.core.persistence.beans.SyncTask;\n import org.syncope.core.persistence.beans.TaskExec;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -309,6 +310,11 @@ private List<SyncopeUser> findExistingUsers(\n             final String schemaName, final String uidValue,\n             final String previousUidValue) {\n \n+        final SyncPolicy policy =\n+                ((SyncTask) this.task).getResource().getSyncPolicy();\n+        \n+        // .............\n+\n         final List<SyncopeUser> result = new ArrayList<SyncopeUser>();\n \n         USchema schema = schemaDAO.find(schemaName, USchema.class);"}]}