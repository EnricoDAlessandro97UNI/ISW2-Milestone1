{"sha":"e9839b3590e04a46e6513fab47e2793a130d3fbb","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmU5ODM5YjM1OTBlMDRhNDZlNjUxM2ZhYjQ3ZTI3OTNhMTMwZDNmYmI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-09-07T15:26:43Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-09-07T15:26:43Z"},"message":"[SYNCOPE-690] Implementation completed","tree":{"sha":"b5d70186ffe1b30e6f78e5771764460cf7a6539c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b5d70186ffe1b30e6f78e5771764460cf7a6539c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e9839b3590e04a46e6513fab47e2793a130d3fbb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e9839b3590e04a46e6513fab47e2793a130d3fbb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e9839b3590e04a46e6513fab47e2793a130d3fbb","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e9839b3590e04a46e6513fab47e2793a130d3fbb/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"f1880e2607b7a4d919039214e7795a3b9dd16603","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f1880e2607b7a4d919039214e7795a3b9dd16603","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f1880e2607b7a4d919039214e7795a3b9dd16603"}],"stats":{"total":758,"additions":654,"deletions":104},"files":[{"sha":"dd12e6405133df07a498997b266c6d272f1683fb","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -24,14 +24,17 @@\n import java.util.Locale;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.pages.BasePage;\n+import org.apache.syncope.client.console.pages.MustChangePassword;\n import org.apache.syncope.client.console.pages.Dashboard;\n import org.apache.syncope.client.console.pages.Login;\n import org.apache.syncope.client.console.resources.FilesystemResource;\n import org.apache.syncope.client.console.resources.WorkflowDefGETResource;\n import org.apache.syncope.client.console.resources.WorkflowDefPUTResource;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.wicket.Page;\n import org.apache.wicket.authroles.authentication.AbstractAuthenticatedWebSession;\n import org.apache.wicket.authroles.authentication.AuthenticatedWebApplication;\n+import org.apache.wicket.authroles.authentication.AuthenticatedWebSession;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.markup.html.WebPage;\n import org.apache.wicket.protocol.http.WebApplication;\n@@ -132,7 +135,10 @@ protected Class<? extends WebPage> getSignInPageClass() {\n \n     @Override\n     public Class<? extends Page> getHomePage() {\n-        return Dashboard.class;\n+        return AuthenticatedWebSession.get().isSignedIn()\n+                && SyncopeConsoleSession.get().owns(Entitlement.MUST_CHANGE_PASSWORD)\n+                        ? MustChangePassword.class\n+                        : Dashboard.class;\n     }\n \n }"},{"sha":"8c1e3417afbe7854b9f04bbd456c72f5b1d9382e","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/MustChangePassword.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.panels.NotificationPanel;\n+import org.apache.syncope.client.console.rest.UserSelfRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPasswordFieldPanel;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.markup.html.WebPage;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.form.PasswordTextField;\n+import org.apache.wicket.markup.html.form.StatelessForm;\n+import org.apache.wicket.markup.html.form.TextField;\n+import org.apache.wicket.markup.html.form.validation.EqualPasswordInputValidator;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class MustChangePassword extends WebPage {\n+\n+    private static final long serialVersionUID = 5889157642852559004L;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MustChangePassword.class);\n+\n+    @SpringBean\n+    private UserSelfRestClient userSelfRestClient;\n+\n+    private final NotificationPanel feedbackPanel;\n+\n+    private final StatelessForm<Void> form;\n+\n+    private final TextField<String> usernameField;\n+\n+    private final AjaxPasswordFieldPanel passwordField;\n+\n+    private final AjaxPasswordFieldPanel confirmPasswordField;\n+\n+    public MustChangePassword(final PageParameters parameters) {\n+        super(parameters);\n+\n+        feedbackPanel = new NotificationPanel(Constants.FEEDBACK);\n+        add(feedbackPanel);\n+\n+        form = new StatelessForm<>(\"changePassword\");\n+        form.setOutputMarkupId(true);\n+\n+        usernameField = new TextField<>(\"username\", new Model<>(SyncopeConsoleSession.get().getSelfTO().getUsername()));\n+        usernameField.setMarkupId(\"username\");\n+        usernameField.setEnabled(false);\n+        form.add(usernameField);\n+\n+        passwordField = new AjaxPasswordFieldPanel(\"password\", \"password\", new Model<String>());\n+        passwordField.setRequired(true);\n+        passwordField.setMarkupId(\"password\");\n+        passwordField.setPlaceholder(getString(\"password\"));\n+        ((PasswordTextField) passwordField.getField()).setResetPassword(true);\n+        form.add(passwordField);\n+\n+        confirmPasswordField = new AjaxPasswordFieldPanel(\"confirmPassword\", \"confirmPassword\", new Model<String>());\n+        confirmPasswordField.setRequired(true);\n+        confirmPasswordField.setMarkupId(\"confirmPassword\");\n+        confirmPasswordField.setPlaceholder(getString(\"confirmPassword\"));\n+        ((PasswordTextField) confirmPasswordField.getField()).setResetPassword(true);\n+        form.add(confirmPasswordField);\n+\n+        form.add(new EqualPasswordInputValidator(passwordField.getField(), confirmPasswordField.getField()));\n+\n+        AjaxButton submitButton = new AjaxButton(\"submit\", new Model<>(getString(\"submit\"))) {\n+\n+            private static final long serialVersionUID = 429178684321093953L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                try {\n+                    userSelfRestClient.changePassword(passwordField.getModelObject());\n+\n+                    SyncopeConsoleSession.get().invalidate();\n+\n+                    setResponsePage(getApplication().getHomePage());\n+                } catch (Exception e) {\n+                    LOG.error(\"While changing password for {}\",\n+                            SyncopeConsoleSession.get().getSelfTO().getUsername(), e);\n+                    error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                    feedbackPanel.refresh(target);\n+                }\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                feedbackPanel.refresh(target);\n+            }\n+\n+        };\n+        form.add(submitButton);\n+        form.setDefaultButton(submitButton);\n+\n+        add(form);\n+    }\n+}"},{"sha":"dc71a5423566710e8a217bbdb63d9ce39b708a9d","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/UserSelfRestClient.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -40,7 +40,7 @@ public boolean isSelfRegistrationAllowed() {\n \n         return result == null\n                 ? false\n-                : result.booleanValue();\n+                : result;\n     }\n \n     public UserTO read() {\n@@ -69,7 +69,7 @@ public boolean isPasswordResetAllowed() {\n \n         return result == null\n                 ? false\n-                : result.booleanValue();\n+                : result;\n     }\n \n     public boolean isPwdResetRequiringSecurityQuestions() {\n@@ -82,7 +82,11 @@ public boolean isPwdResetRequiringSecurityQuestions() {\n \n         return result == null\n                 ? false\n-                : result.booleanValue();\n+                : result;\n+    }\n+\n+    public void changePassword(final String password) {\n+        getService(UserSelfService.class).changePassword(password);\n     }\n \n     public void requestPasswordReset(final String username, final String securityAnswer) {"},{"sha":"e40a630cbcc5ecbeb0673b7eca3f69d640a3a670","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxPasswordFieldPanel.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPasswordFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPasswordFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPasswordFieldPanel.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -19,8 +19,11 @@\n package org.apache.syncope.client.console.wicket.markup.html.form;\n \n import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.wicket.Component;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.behavior.Behavior;\n+import org.apache.wicket.markup.ComponentTag;\n import org.apache.wicket.markup.html.form.PasswordTextField;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n@@ -57,4 +60,17 @@ public FieldPanel<String> addRequiredLabel() {\n         this.isRequiredLabelAdded = true;\n         return this;\n     }\n+\n+    public void setPlaceholder(final String placeholder) {\n+        field.add(new Behavior() {\n+\n+            private static final long serialVersionUID = 1469628524240283489L;\n+\n+            @Override\n+            public void onComponentTag(final Component component, final ComponentTag tag) {\n+                tag.put(\"placeholder\", placeholder);\n+            }\n+        });\n+\n+    }\n }"},{"sha":"675c4df8b234f6ddc9d12c0b3da6d24eef9ff874","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/MustChangePassword.html","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.html?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -0,0 +1,62 @@\n+<!DOCTYPE html>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <head>\n+    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n+    <meta charset=\"UTF-8\"/>\n+    <meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no' name='viewport'/>\n+\n+    <title>Apache Syncope - Change password</title>\n+\n+    <link rel=\"shortcut icon\" href=\"img/favicon.png\" type=\"image/png\"/>\n+\n+    <link href=\"webjars/bootstrap/${bootstrap.version}/css/bootstrap.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n+    <link href=\"webjars/bootstrap-select/${bootstrap-select.version}/css/bootstrap-select.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n+    <link href=\"webjars/font-awesome/${font-awesome.version}/css/font-awesome.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n+    <link href=\"webjars/ionicons/${ionicons.version}/css/ionicons.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n+    <link href=\"css/AdminLTE.css\" rel=\"stylesheet\" type=\"text/css\" />\n+    <link href=\"css/login.css\" rel=\"stylesheet\" type=\"text/css\" />\n+    <link href=\"css/syncopeConsole.css\" rel=\"stylesheet\" type=\"text/css\" />\n+\n+    <script type=\"text/javascript\" src=\"webjars/bootstrap/${bootstrap.version}/js/bootstrap.min.js\"></script>\n+    <script type=\"text/javascript\" src=\"webjars/bootstrap-select/${bootstrap-select.version}/js/bootstrap-select.min.js\"></script>\n+  </head>\n+  <body class=\"skin-green\">\n+    <div class=\"container\">\n+      <div class=\"card card-container\">\n+        <img class=\"login-logo\" src=\"img/logo-green.png\" />\n+\n+        <div wicket:id=\"feedback\" role=\"alert\"/>\n+\n+        <div class=\"alert alert-success\"><wicket:message key=\"passwordNeedsToBeUpdated\"/></div>\n+\n+        <form class=\"form-signin\" wicket:id=\"changePassword\">\n+          <input type=\"text\" wicket:id=\"username\" id=\"username\" class=\"form-control\" \n+                 wicket:message=\"placeholder:username\" required=\"required\" autofocus=\"autofocus\" />\n+          <span wicket:id=\"password\" id=\"password\"/>\n+          <span wicket:id=\"confirmPassword\" id=\"confirmPassword\"/>\n+          <button wicket:id=\"submit\" type=\"submit\" \n+                  class=\"btn btn-lg btn-primary btn-block btn-signin\"><wicket:message key=\"submit\"/></button>\n+        </form>\n+      </div>\n+    </div>\n+\n+  </body>\n+</html>\n\\ No newline at end of file"},{"sha":"26662c066b7610f299d7cc73821938b3a6a3457a","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/MustChangePassword.properties","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.properties?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+username=Username\n+password=Password\n+submit=Change\n+confirmPassword=Password (confirm)\n+passwordNeedsToBeUpdated=Password needs to be updated"},{"sha":"45abc3d9e521a0d23dde501045f9f546ea59a97e","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/MustChangePassword_it.properties","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword_it.properties?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+username=Username\n+password=Password\n+submit=Cambia\n+confirmPassword=Password (conferma)\n+passwordNeedsToBeUpdated=La password deve essere aggiornata"},{"sha":"87d5ad0e5d2963206b983fab552c971bfac5e9fa","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/MustChangePassword_pt_BR.properties","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword_pt_BR.properties?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+username=Usu\\u00e1rio\n+password=Senha\n+submit=Alterar\n+confirmPassword=Senha (confirmar)\n+passwordNeedsToBeUpdated=Senha precisa ser atualizado"},{"sha":"eab74acbd61cbe4da67bbb2974c173f131919dbc","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/AjaxPasswordFieldPanel.html","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPasswordFieldPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPasswordFieldPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPasswordFieldPanel.html?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -16,7 +16,8 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<wicket:extend>\n-    <input type=\"password\" class=\"ui-widget-content ui-corner-all long_dynamicsize\"\n-           wicket:id=\"passwordField\" />\n-</wicket:extend>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:extend>\n+    <input type=\"password\" class=\"form-control\" wicket:id=\"passwordField\" />\n+  </wicket:extend>\n+</html>\n\\ No newline at end of file"},{"sha":"7a8824502757fae60d36cc69ae3c2830a5c7635a","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/RestClientExceptionMapper.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -61,9 +61,14 @@ public Exception fromResponse(final Response response) {\n             ex = scce.getExceptions().size() == 1\n                     ? scce.getExceptions().iterator().next()\n                     : scce;\n-        } else if (statusCode == Response.Status.UNAUTHORIZED.getStatusCode()) {\n-            // 2. Map SC_UNAUTHORIZED\n-            ex = new AccessControlException(\"Remote unauthorized exception\");\n+        } else if (statusCode == Response.Status.UNAUTHORIZED.getStatusCode()\n+                || statusCode == Response.Status.FORBIDDEN.getStatusCode()) {\n+\n+            // 2. Map SC_UNAUTHORIZED and SC_FORBIDDEN\n+            String message = response.getHeaderString(RESTHeaders.ERROR_INFO);\n+            ex = new AccessControlException(StringUtils.isBlank(message)\n+                    ? \"Remote authorization exception\"\n+                    : message);\n         } else if (statusCode == Response.Status.BAD_REQUEST.getStatusCode()) {\n             // 3. Map SC_BAD_REQUEST\n             ex = new BadRequestException();"},{"sha":"b29ff9e1205bdd88aad91b722a9f2b5f07bf0512","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -305,6 +305,8 @@ public static UserMod diff(final UserTO updated, final UserTO original, final bo\n             result.setSecurityAnswer(updated.getSecurityAnswer());\n         }\n \n+        result.setMustChangePassword(updated.isMustChangePassword());\n+\n         // 4. roles\n         result.getRolesToRemove().addAll(CollectionUtils.subtract(original.getRoles(), updated.getRoles()));\n         result.getRolesToAdd().addAll(CollectionUtils.subtract(updated.getRoles(), original.getRoles()));"},{"sha":"95059fe0ab861d05142cddb60cc2c5efa48a139a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/UserMod.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FUserMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FUserMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FUserMod.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -57,6 +57,8 @@ public class UserMod extends AnyMod {\n \n     private String securityAnswer;\n \n+    private boolean mustChangePassword;\n+\n     public String getUsername() {\n         return username;\n     }\n@@ -139,6 +141,14 @@ public void setSecurityAnswer(final String securityAnswer) {\n         this.securityAnswer = securityAnswer;\n     }\n \n+    public boolean isMustChangePassword() {\n+        return mustChangePassword;\n+    }\n+\n+    public void setMustChangePassword(final boolean mustChangePassword) {\n+        this.mustChangePassword = mustChangePassword;\n+    }\n+\n     @JsonIgnore\n     @Override\n     public boolean isEmpty() {\n@@ -147,6 +157,7 @@ public boolean isEmpty() {\n                 && username == null\n                 && pwdPropRequest == null\n                 && securityQuestion == null\n-                && securityAnswer == null;\n+                && securityAnswer == null\n+                && !mustChangePassword;\n     }\n }"},{"sha":"7018cd5ad6db0120d72b31ccd86e987b9feb2e20","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -63,6 +63,8 @@ public class UserTO extends AnyTO {\n \n     private String securityAnswer;\n \n+    private boolean mustChangePassword;\n+\n     private final List<RelationshipTO> relationships = new ArrayList<>();\n \n     private final List<MembershipTO> memberships = new ArrayList<>();\n@@ -169,6 +171,14 @@ public void setSecurityAnswer(final String securityAnswer) {\n         this.securityAnswer = securityAnswer;\n     }\n \n+    public boolean isMustChangePassword() {\n+        return mustChangePassword;\n+    }\n+\n+    public void setMustChangePassword(final boolean mustChangePassword) {\n+        this.mustChangePassword = mustChangePassword;\n+    }\n+\n     @XmlElementWrapper(name = \"relationships\")\n     @XmlElement(name = \"relationship\")\n     @JsonProperty(\"relationships\")"},{"sha":"0c1940380da9f0d576c1283f0cba975b47781f2c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -66,7 +66,7 @@ public enum ClientExceptionType {\n     RESTValidation(Response.Status.BAD_REQUEST),\n     GroupOwnership(Response.Status.BAD_REQUEST),\n     Scheduling(Response.Status.BAD_REQUEST),\n-    Unauthorized(Response.Status.UNAUTHORIZED),\n+    DelegatedAdministration(Response.Status.FORBIDDEN),\n     UnallowedSchemas(Response.Status.BAD_REQUEST),\n     Unknown(Response.Status.BAD_REQUEST),\n     Workflow(Response.Status.BAD_REQUEST);"},{"sha":"5a4ea81abf6356ba3e37ed9cbe7b443c4040a8f9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/Entitlement.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -28,6 +28,8 @@ public final class Entitlement {\n \n     public static final String ANONYMOUS = \"ANONYMOUS\";\n \n+    public static final String MUST_CHANGE_PASSWORD = \"MUST_CHANGE_PASSWORD\";\n+\n     public static final String DOMAIN_CREATE = \"DOMAIN_CREATE\";\n \n     public static final String DOMAIN_READ = \"DOMAIN_READ\";\n@@ -251,6 +253,8 @@ public final class Entitlement {\n                 values.add(field.getName());\n             }\n         }\n+        values.remove(ANONYMOUS);\n+        values.remove(MUST_CHANGE_PASSWORD);\n         ENTITLEMENTS = Collections.unmodifiableSet(values);\n     }\n "},{"sha":"258a1b6fc12208fb09117885fc68a6db518d6cc4","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -65,7 +65,7 @@ Response create(@NotNull UserTO userTO,\n     /**\n      * Self-updates user.\n      *\n-     * @param userMod modification to be applied to user matching the provided key\n+     * @param userMod modification to be applied to self\n      * @return <tt>Response</tt> object featuring the updated user - <tt>UserTO</tt> as <tt>Entity</tt>\n      */\n     @POST\n@@ -83,6 +83,18 @@ Response create(@NotNull UserTO userTO,\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     Response delete();\n \n+    /**\n+     * Changes own password.\n+     *\n+     * @param password the password value to update\n+     *\n+     * @return <tt>Response</tt> object featuring the updated user - <tt>UserTO</tt> as <tt>Entity</tt>\n+     */\n+    @POST\n+    @Path(\"changePassword\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response changePassword(@NotNull @QueryParam(\"password\") String password);\n+\n     /**\n      * Provides answer for the security question configured for user matching the given username, if any.\n      * If provided anwser matches the one stored for that user, a password reset token is internally generated,"},{"sha":"ed2a8658d52d095d9669895582bfe265eb6e8a5f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.misc.RealmUtils;\n-import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n \n@@ -78,7 +78,7 @@ public boolean evaluate(final String ownedRealm) {\n             }\n         })) {\n \n-            throw new UnauthorizedException(\n+            throw new DelegatedAdministrationException(\n                     this instanceof UserLogic\n                             ? AnyTypeKind.USER\n                             : this instanceof GroupLogic"},{"sha":"5f7cf6f2ae864c24ed010ee216e4c5c4b6c4ef15","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -51,7 +51,7 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n-import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.provisioning.api.AnyTransformer;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -103,7 +103,7 @@ public boolean evaluate(final String ownedRealm) {\n             }\n         })) {\n \n-            throw new UnauthorizedException(AnyTypeKind.GROUP, key);\n+            throw new DelegatedAdministrationException(AnyTypeKind.GROUP, key);\n         }\n     }\n "},{"sha":"aab476a9bbfcaf08651522ac09e7a0659a40eec4","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.security.AccessControlException;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -220,11 +219,7 @@ protected UserTO doCreate(final UserTO userTO, final boolean storePassword) {\n     @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + Entitlement.ANONYMOUS + \"'))\")\n     public UserTO selfUpdate(final UserMod userMod) {\n         UserTO userTO = binder.getAuthenticatedUserTO();\n-\n-        if (userTO.getKey() != userMod.getKey()) {\n-            throw new AccessControlException(\"Not allowed for user with key \" + userMod.getKey());\n-        }\n-\n+        userMod.setKey(userTO.getKey());\n         return doUpdate(userMod);\n     }\n \n@@ -298,6 +293,13 @@ public UserTO status(final StatusMod statusMod) {\n         return savedTO;\n     }\n \n+    @PreAuthorize(\"hasRole('\" + Entitlement.MUST_CHANGE_PASSWORD + \"')\")\n+    public UserTO changePassword(final String password) {\n+        UserMod userMod = new UserMod();\n+        userMod.setPassword(password);\n+        return selfUpdate(userMod);\n+    }\n+\n     @PreAuthorize(\"isAnonymous() or hasRole('\" + Entitlement.ANONYMOUS + \"')\")\n     @Transactional\n     public void requestPasswordReset(final String username, final String securityAnswer) {"},{"sha":"ff9e6462d55a1f048af5ab90629013e8b0d7d13a","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/AuthDataAccessor.java","status":"modified","additions":38,"deletions":38,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -28,8 +28,6 @@\n import javax.annotation.Resource;\n import org.apache.commons.collections4.Closure;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IteratorUtils;\n-import org.apache.commons.collections4.PredicateUtils;\n import org.apache.commons.collections4.SetUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n@@ -232,53 +230,55 @@ public Set<SyncopeGrantedAuthority> load(final String username) {\n         if (anonymousUser.equals(username)) {\n             authorities.add(new SyncopeGrantedAuthority(Entitlement.ANONYMOUS));\n         } else if (adminUser.equals(username)) {\n-            CollectionUtils.collect(IteratorUtils.filteredIterator(Entitlement.values().iterator(),\n-                    PredicateUtils.notPredicate(PredicateUtils.equalPredicate(Entitlement.ANONYMOUS))),\n-                    new Transformer<String, SyncopeGrantedAuthority>() {\n+            CollectionUtils.collect(Entitlement.values(), new Transformer<String, SyncopeGrantedAuthority>() {\n \n-                        @Override\n-                        public SyncopeGrantedAuthority transform(final String entitlement) {\n-                            return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n-                        }\n-                    },\n-                    authorities);\n+                @Override\n+                public SyncopeGrantedAuthority transform(final String entitlement) {\n+                    return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n+                }\n+            }, authorities);\n         } else {\n             User user = userDAO.find(username);\n             if (user == null) {\n                 throw new UsernameNotFoundException(\"Could not find any user with id \" + username);\n             }\n \n-            // Give entitlements as assigned by roles (with realms, where applicable) - assigned either\n-            // statically and dynamically\n-            for (final Role role : userDAO.findAllRoles(user)) {\n-                CollectionUtils.forAllDo(role.getEntitlements(), new Closure<String>() {\n+            if (user.isMustChangePassword()) {\n+                authorities.add(new SyncopeGrantedAuthority(Entitlement.MUST_CHANGE_PASSWORD));\n+            } else {\n+                // Give entitlements as assigned by roles (with realms, where applicable) - assigned either\n+                // statically and dynamically\n+                for (final Role role : userDAO.findAllRoles(user)) {\n+                    CollectionUtils.forAllDo(role.getEntitlements(), new Closure<String>() {\n \n-                    @Override\n-                    public void execute(final String entitlement) {\n-                        SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entitlement);\n-                        authorities.add(authority);\n+                        @Override\n+                        public void execute(final String entitlement) {\n+                            SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entitlement);\n+                            authorities.add(authority);\n+\n+                            List<String> realmFullPahs = new ArrayList<>();\n+                            CollectionUtils.collect(role.getRealms(), new Transformer<Realm, String>() {\n+\n+                                @Override\n+                                public String transform(final Realm realm) {\n+                                    return realm.getFullPath();\n+                                }\n+                            }, realmFullPahs);\n+                            authority.addRealms(realmFullPahs);\n+                        }\n+                    });\n+                }\n \n-                        List<String> realmFullPahs = new ArrayList<>();\n-                        CollectionUtils.collect(role.getRealms(), new Transformer<Realm, String>() {\n+                // Give group entitlements for owned groups\n+                for (Group group : groupDAO.findOwnedByUser(user.getKey())) {\n+                    for (String entitlement : Arrays.asList(\n+                            Entitlement.GROUP_READ, Entitlement.GROUP_UPDATE, Entitlement.GROUP_DELETE)) {\n \n-                            @Override\n-                            public String transform(final Realm realm) {\n-                                return realm.getFullPath();\n-                            }\n-                        }, realmFullPahs);\n-                        authority.addRealms(realmFullPahs);\n+                        SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entitlement);\n+                        authority.addRealm(\n+                                RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey()));\n+                        authorities.add(authority);\n                     }\n-                });\n-            }\n-\n-            // Give group entitlements for owned groups\n-            for (Group group : groupDAO.findOwnedByUser(user.getKey())) {\n-                for (String entitlement : Arrays.asList(\n-                        Entitlement.GROUP_READ, Entitlement.GROUP_UPDATE, Entitlement.GROUP_DELETE)) {\n-\n-                    SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entitlement);\n-                    authority.addRealm(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey()));\n-                    authorities.add(authority);\n                 }\n             }\n         }"},{"sha":"13a449f21b77ba68aefc64aff103ab555bf9617b","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/DelegatedAdministrationException.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FDelegatedAdministrationException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FDelegatedAdministrationException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FDelegatedAdministrationException.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -20,11 +20,11 @@\n \n import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n-public class UnauthorizedException extends RuntimeException {\n+public class DelegatedAdministrationException extends RuntimeException {\n \n     private static final long serialVersionUID = 7540587364235915081L;\n \n-    public UnauthorizedException(final AnyTypeKind type, final Long key) {\n+    public DelegatedAdministrationException(final AnyTypeKind type, final Long key) {\n         super(\"Missing entitlement or realm administration for \"\n                 + (key == null\n                         ? \"new \" + type","previous_filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/UnauthorizedException.java"},{"sha":"3aafb47227edeef1bb034995254bd0dcc68948ad","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/MustChangePasswordFilter.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FMustChangePasswordFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FMustChangePasswordFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FMustChangePasswordFilter.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.misc.security;\n+\n+import java.io.IOException;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.types.Entitlement;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper;\n+\n+public class MustChangePasswordFilter implements Filter {\n+\n+    private static final String[] ALLOWED = new String[] {\n+        \"/users/self\", \"/users/self/changePassword\"\n+    };\n+\n+    @Override\n+    public void init(final FilterConfig filterConfig) throws ServletException {\n+        // not used\n+    }\n+\n+    @Override\n+    public void destroy() {\n+        // not used\n+    }\n+\n+    @Override\n+    public void doFilter(final ServletRequest request, final ServletResponse response, final FilterChain chain)\n+            throws IOException, ServletException {\n+\n+        if (request instanceof SecurityContextHolderAwareRequestWrapper) {\n+            boolean isMustChangePassword = CollectionUtils.exists(\n+                    SecurityContextHolder.getContext().getAuthentication().getAuthorities(),\n+                    new Predicate<GrantedAuthority>() {\n+\n+                        @Override\n+                        public boolean evaluate(final GrantedAuthority authority) {\n+                            return Entitlement.MUST_CHANGE_PASSWORD.equals(authority.getAuthority());\n+                        }\n+                    });\n+\n+            SecurityContextHolderAwareRequestWrapper wrapper =\n+                    SecurityContextHolderAwareRequestWrapper.class.cast(request);\n+            if (isMustChangePassword && \"GET\".equalsIgnoreCase(wrapper.getMethod())\n+                    && !ArrayUtils.contains(ALLOWED, wrapper.getPathInfo())) {\n+\n+                throw new AccessDeniedException(\"Please change your password first\");\n+            }\n+        }\n+\n+        chain.doFilter(request, response);\n+    }\n+\n+}"},{"sha":"8ab1d3146b3c1e1b5413fd94b3a357b1c3ac3638","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeAccessDeniedHandler.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAccessDeniedHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAccessDeniedHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAccessDeniedHandler.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.misc.security;\n+\n+import java.io.IOException;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.web.access.AccessDeniedHandlerImpl;\n+\n+/**\n+ * Render Spring's {@link AccessDeniedException} as other Syncope errors.\n+ */\n+public class SyncopeAccessDeniedHandler extends AccessDeniedHandlerImpl {\n+\n+    @Override\n+    public void handle(final HttpServletRequest request, final HttpServletResponse response,\n+            final AccessDeniedException accessDeniedException) throws IOException, ServletException {\n+\n+        response.addHeader(RESTHeaders.ERROR_INFO, accessDeniedException.getMessage());\n+\n+        super.handle(request, response, accessDeniedException);\n+    }\n+\n+}"},{"sha":"6213264cc09750898fd24a16b3cb6045fcab71c7","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeAuthenticationEntryPoint.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationEntryPoint.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationEntryPoint.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationEntryPoint.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.misc.security;\n+\n+import java.io.IOException;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;\n+\n+/**\n+ * Render Spring's {@link AuthenticationException} as other Syncope errors.\n+ */\n+public class SyncopeAuthenticationEntryPoint extends BasicAuthenticationEntryPoint {\n+\n+    @Override\n+    public void commence(final HttpServletRequest request, final HttpServletResponse response,\n+            final AuthenticationException authException) throws IOException, ServletException {\n+\n+        response.addHeader(RESTHeaders.ERROR_INFO, authException.getMessage());\n+\n+        super.commence(request, response, authException);\n+    }\n+\n+}"},{"sha":"222d64aca86abcc5c498a7b322fd61a9d1360ce7","filename":"core/misc/src/main/resources/securityContext.xml","status":"modified","additions":17,"deletions":2,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -53,12 +53,27 @@ under the License.\n   <bean id=\"syncopeAuthenticationDetailsSource\"\n         class=\"org.apache.syncope.core.misc.security.SyncopeAuthenticationDetailsSource\"/>\n \n-  <security:http security-context-repository-ref=\"securityContextRepository\" realm=\"Apache Syncope authentication\" \n+  <bean id=\"mustChangePasswordFilter\" class=\"org.apache.syncope.core.misc.security.MustChangePasswordFilter\"/>\n+      \n+  <bean id=\"syncopeAuthenticationEntryPoint\" \n+        class=\"org.apache.syncope.core.misc.security.SyncopeAuthenticationEntryPoint\">\n+    <property name=\"realmName\" value=\"Apache Syncope authentication\"/>\n+  </bean>\n+\n+  <bean id=\"syncopeAccessDeniedHandler\" class=\"org.apache.syncope.core.misc.security.SyncopeAccessDeniedHandler\"/>\n+  \n+  <security:http security-context-repository-ref=\"securityContextRepository\"\n                  use-expressions=\"false\" disable-url-rewriting=\"false\">\n-    <security:http-basic authentication-details-source-ref=\"syncopeAuthenticationDetailsSource\"/>\n+\n+    <security:http-basic entry-point-ref=\"syncopeAuthenticationEntryPoint\"\n+                         authentication-details-source-ref=\"syncopeAuthenticationDetailsSource\"/>\n     <security:anonymous username=\"${anonymousUser}\"/>\n     <security:intercept-url pattern=\"/**\"/>\n     \n+    <security:custom-filter before=\"FILTER_SECURITY_INTERCEPTOR\" ref=\"mustChangePasswordFilter\"/>\n+    \n+    <security:access-denied-handler ref=\"syncopeAccessDeniedHandler\"/>\n+    \n     <security:headers disabled=\"true\"/>\n     <security:csrf disabled=\"true\"/>\n   </security:http>"},{"sha":"f3da581b41cb77359a7369432fd68e0118c36ea7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/User.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -87,6 +87,10 @@ public interface User extends Any<UPlainAttr, UDerAttr, UVirAttr> {\n \n     void setSuspended(Boolean suspended);\n \n+    boolean isMustChangePassword();\n+\n+    void setMustChangePassword(boolean mustChangePassword);\n+\n     @Override\n     boolean add(UPlainAttr attr);\n "},{"sha":"f5d45b9d0f13b4c37608a9f7836bdf08cbeab15b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n-import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n@@ -75,7 +75,7 @@ public boolean evaluate(final String realm) {\n             }\n         });\n         if (authRealms == null || authRealms.isEmpty() || !authorized) {\n-            throw new UnauthorizedException(AnyTypeKind.ANY_OBJECT, anyObject.getKey());\n+            throw new DelegatedAdministrationException(AnyTypeKind.ANY_OBJECT, anyObject.getKey());\n         }\n     }\n "},{"sha":"652c1f7ff6035fe54c797f9ba50673435bfd62d6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -41,7 +41,7 @@\n import org.apache.syncope.core.misc.RealmUtils;\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n-import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n@@ -82,7 +82,7 @@ public boolean evaluate(final String realm) {\n             }\n         });\n         if (authRealms == null || authRealms.isEmpty() || !authorized) {\n-            throw new UnauthorizedException(AnyTypeKind.GROUP, group.getKey());\n+            throw new DelegatedAdministrationException(AnyTypeKind.GROUP, group.getKey());\n         }\n     }\n "},{"sha":"b8f2c472a26bdfba0a820b30256daa34b2f31641","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.core.misc.policy.AccountPolicyException;\n import org.apache.syncope.core.misc.policy.PasswordPolicyException;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n-import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n@@ -112,7 +112,7 @@ public boolean evaluate(final String realm) {\n                 }\n             });\n             if (authRealms == null || authRealms.isEmpty() || !authorized) {\n-                throw new UnauthorizedException(AnyTypeKind.USER, user.getKey());\n+                throw new DelegatedAdministrationException(AnyTypeKind.USER, user.getKey());\n             }\n         }\n     }"},{"sha":"e7a688c3ed480db7629dc7a82f8bdb4de565ca32","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":20,"deletions":14,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -94,7 +94,7 @@ public class JPAUser extends AbstractAny<UPlainAttr, UDerAttr, UVirAttr> impleme\n             @JoinColumn(name = \"user_id\"),\n             inverseJoinColumns =\n             @JoinColumn(name = \"role_id\"))\n-    private List<JPARole> roles;\n+    private List<JPARole> roles = new ArrayList<>();\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n@@ -127,13 +127,13 @@ public class JPAUser extends AbstractAny<UPlainAttr, UDerAttr, UVirAttr> impleme\n     @Column(name = \"passwordHistoryValue\")\n     @CollectionTable(name = \"SyncopeUser_passwordHistory\", joinColumns =\n             @JoinColumn(name = \"user_id\", referencedColumnName = \"id\"))\n-    private List<String> passwordHistory;\n+    private List<String> passwordHistory = new ArrayList<>();\n \n     /**\n      * Subsequent failed logins.\n      */\n     @Column(nullable = true)\n-    private Integer failedLogins;\n+    private Integer failedLogins = 0;\n \n     /**\n      * Username/Login.\n@@ -159,7 +159,12 @@ public class JPAUser extends AbstractAny<UPlainAttr, UDerAttr, UVirAttr> impleme\n     @Basic\n     @Min(0)\n     @Max(1)\n-    private Integer suspended;\n+    private Integer suspended = getBooleanAsInteger(Boolean.FALSE);\n+\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer mustChangePassword = getBooleanAsInteger(Boolean.FALSE);\n \n     /**\n      * Provisioning external resources.\n@@ -193,16 +198,6 @@ public class JPAUser extends AbstractAny<UPlainAttr, UDerAttr, UVirAttr> impleme\n     @Column(nullable = true)\n     private String securityAnswer;\n \n-    public JPAUser() {\n-        super();\n-\n-        roles = new ArrayList<>();\n-        memberships = new ArrayList<>();\n-        passwordHistory = new ArrayList<>();\n-        failedLogins = 0;\n-        suspended = getBooleanAsInteger(Boolean.FALSE);\n-    }\n-\n     @Override\n     public Long getKey() {\n         return id;\n@@ -265,6 +260,7 @@ public void setEncodedPassword(final String password, final CipherAlgorithm ciph\n \n         this.password = password;\n         this.cipherAlgorithm = cipherAlgoritm;\n+        setMustChangePassword(false);\n     }\n \n     @Override\n@@ -470,6 +466,16 @@ public Boolean isSuspended() {\n         return suspended == null ? null : isBooleanAsInteger(suspended);\n     }\n \n+    @Override\n+    public void setMustChangePassword(final boolean mustChangePassword) {\n+        this.mustChangePassword = getBooleanAsInteger(mustChangePassword);\n+    }\n+\n+    @Override\n+    public boolean isMustChangePassword() {\n+        return isBooleanAsInteger(mustChangePassword);\n+    }\n+\n     @Override\n     public boolean verifyPasswordHistory(final String password, final int size) {\n         boolean res = false;"},{"sha":"5589fa8f0a6ca570700eca8902d76267155d7a72","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -128,7 +128,7 @@ public boolean verifyPassword(final User user, final String password) {\n \n     private void setPassword(final User user, final String password, final SyncopeClientCompositeException scce) {\n         try {\n-            final String algorithm = confDAO.find(\n+            String algorithm = confDAO.find(\n                     \"password.cipher.algorithm\", CipherAlgorithm.AES.name()).getValues().get(0).getStringValue();\n             CipherAlgorithm predefined = CipherAlgorithm.valueOf(algorithm);\n             user.setPassword(password, predefined);\n@@ -223,6 +223,8 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n             }\n         }\n         user.setSecurityAnswer(userTO.getSecurityAnswer());\n+\n+        user.setMustChangePassword(userTO.isMustChangePassword());\n     }\n \n     private boolean isPasswordMapped(final ExternalResource resource) {\n@@ -293,6 +295,8 @@ public PropagationByResource update(final User toBeUpdated, final UserMod userMo\n             }\n         }\n \n+        user.setMustChangePassword(userMod.isMustChangePassword());\n+\n         // roles\n         CollectionUtils.forAllDo(userMod.getRolesToRemove(), new Closure<Long>() {\n "},{"sha":"c69a0d6c59fbcb3aa6b0a52350d159a1c80ce214","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractSyncResultHandler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -33,7 +33,7 @@\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.sync.SyncActions;\n-import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.AnyTransformer;\n@@ -572,7 +572,7 @@ protected List<ProvisioningResult> delete(\n                 delResults.add(result);\n             } catch (NotFoundException e) {\n                 LOG.error(\"Could not find {} {}\", provision.getAnyType().getKey(), id, e);\n-            } catch (UnauthorizedException e) {\n+            } catch (DelegatedAdministrationException e) {\n                 LOG.error(\"Not allowed to read {} {}\", provision.getAnyType().getKey(), id, e);\n             } catch (Exception e) {\n                 LOG.error(\"Could not delete {} {}\", provision.getAnyType().getKey(), id, e);"},{"sha":"2de89895cc67aad8108d6961d4ffe84bc814160f","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -45,7 +45,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n@@ -71,8 +71,6 @@\n @Provider\n public class RestServiceExceptionMapper implements ExceptionMapper<Exception>, ResponseExceptionMapper<Exception> {\n \n-    private static final String BASIC_REALM_UNAUTHORIZED = \"Basic realm=\\\"Apache Syncope authentication\\\"\";\n-\n     private static final Logger LOG = LoggerFactory.getLogger(RestServiceExceptionMapper.class);\n \n     private final ValidationExceptionMapper validationEM = new ValidationExceptionMapper();\n@@ -111,10 +109,11 @@ public Response toResponse(final Exception ex) {\n \n             builder = builder(response).entity(error);\n         } else if (ex instanceof AccessDeniedException) {\n-            builder = Response.status(Response.Status.UNAUTHORIZED).\n-                    header(HttpHeaders.WWW_AUTHENTICATE, BASIC_REALM_UNAUTHORIZED);\n-        } else if (ex instanceof UnauthorizedException) {\n-            builder = builder(ClientExceptionType.Unauthorized, ExceptionUtils.getRootCauseMessage(ex));\n+            builder = Response.status(Response.Status.FORBIDDEN).\n+                    header(RESTHeaders.ERROR_CODE, Response.Status.FORBIDDEN.getReasonPhrase()).\n+                    header(RESTHeaders.ERROR_INFO, ex.getMessage());\n+        } else if (ex instanceof DelegatedAdministrationException) {\n+            builder = builder(ClientExceptionType.DelegatedAdministration, ExceptionUtils.getRootCauseMessage(ex));\n         } else if (ex instanceof UnallowedSchemaException) {\n             builder = builder(ClientExceptionType.UnallowedSchemas, ExceptionUtils.getRootCauseMessage(ex));\n         } else if (ex instanceof EntityExistsException || ex instanceof DuplicateException) {"},{"sha":"b1fbc3549f901e933644e412c742fdb90b208103","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserSelfServiceImpl.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -43,7 +43,7 @@ public class UserSelfServiceImpl extends AbstractServiceImpl implements UserSelf\n     @Override\n     public Response create(final UserTO userTO, final boolean storePassword) {\n         if (!syncopeLogic.isSelfRegAllowed()) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unauthorized);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.DelegatedAdministration);\n             sce.getElements().add(\"Self registration forbidden by configuration\");\n             throw sce;\n         }\n@@ -74,10 +74,16 @@ public Response delete() {\n         return modificationResponse(deleted);\n     }\n \n+    @Override\n+    public Response changePassword(final String password) {\n+        UserTO updated = logic.changePassword(password);\n+        return modificationResponse(updated);\n+    }\n+\n     @Override\n     public void requestPasswordReset(final String username, final String securityAnswer) {\n         if (!syncopeLogic.isPwdResetAllowed()) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unauthorized);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.DelegatedAdministration);\n             sce.getElements().add(\"Password reset forbidden by configuration\");\n             throw sce;\n         }\n@@ -88,7 +94,7 @@ public void requestPasswordReset(final String username, final String securityAns\n     @Override\n     public void confirmPasswordReset(final String token, final String password) {\n         if (!syncopeLogic.isPwdResetAllowed()) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unauthorized);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.DelegatedAdministration);\n             sce.getElements().add(\"Password reset forbidden by configuration\");\n             throw sce;\n         }"},{"sha":"79ec47a132e0e80a936b57d975b641e66e3d195b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AuthenticationITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -101,7 +101,7 @@ public void testReadEntitlements() {\n \n         // 3. as admin\n         self = adminClient.self();\n-        assertEquals(Entitlement.values().size() - 1, self.getKey().size());\n+        assertEquals(Entitlement.values().size(), self.getKey().size());\n         assertFalse(self.getKey().keySet().contains(Entitlement.ANONYMOUS));\n         assertEquals(ADMIN_UNAME, self.getValue().getUsername());\n \n@@ -184,7 +184,7 @@ public void testUserRead() {\n             fail();\n         } catch (SyncopeClientException e) {\n             assertNotNull(e);\n-            assertEquals(ClientExceptionType.Unauthorized, e.getType());\n+            assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n         }\n     }\n \n@@ -268,7 +268,7 @@ public void delegatedUserCRUD() {\n                 delegatedUserService.create(user);\n                 fail();\n             } catch (SyncopeClientException e) {\n-                assertEquals(ClientExceptionType.Unauthorized, e.getType());\n+                assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n             }\n \n             // 5. set realm to /even/two -> succeed\n@@ -291,7 +291,7 @@ public void delegatedUserCRUD() {\n                 delegatedUserService.update(userMod);\n                 fail();\n             } catch (SyncopeClientException e) {\n-                assertEquals(ClientExceptionType.Unauthorized, e.getType());\n+                assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n             }\n \n             // 6. revert realm change -> succeed"},{"sha":"6ad53c72152702222131f0bd692d29193a849086","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/GroupITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -181,7 +181,7 @@ public void selfRead() {\n             groupService2.read(3L);\n             fail();\n         } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.Unauthorized, e.getType());\n+            assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n         }\n \n         List<GroupTO> groups = groupService2.own();"},{"sha":"d356afc298e3920b7108b40cd08b18676b6efb0a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserSelfITCase.java","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e9839b3590e04a46e6513fab47e2793a130d3fbb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e9839b3590e04a46e6513fab47e2793a130d3fbb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java?ref=e9839b3590e04a46e6513fab47e2793a130d3fbb","patch":"@@ -47,6 +47,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.Preference;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.junit.Assume;\n@@ -351,4 +352,35 @@ public void passwordResetWithoutSecurityQuestion() {\n         configurationService.set(attrTO(\"passwordReset.securityQuestion\", \"true\"));\n     }\n \n+    @Test\n+    public void mustChangePassword() {\n+        // 0. access as vivaldi -> succeed\n+        SyncopeClient vivaldiClient = clientFactory.create(\"vivaldi\", \"password\");\n+        Pair<Map<String, Set<String>>, UserTO> self = vivaldiClient.self();\n+        assertFalse(self.getRight().isMustChangePassword());\n+\n+        // 1. update user vivaldi (3) requirig password update\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(3L);\n+        userMod.setMustChangePassword(true);\n+        UserTO vivaldi = updateUser(userMod);\n+        assertTrue(vivaldi.isMustChangePassword());\n+\n+        // 2. attempt to access -> fail\n+        try {\n+            vivaldiClient.getService(ResourceService.class).list();\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+            assertEquals(\"Please change your password first\", e.getMessage());\n+        }\n+\n+        // 3. change password\n+        vivaldiClient.getService(UserSelfService.class).changePassword(\"password123\");\n+\n+        // 4. verify it worked\n+        self = clientFactory.create(\"vivaldi\", \"password123\").self();\n+        assertFalse(self.getRight().isMustChangePassword());\n+    }\n+\n }"}]}