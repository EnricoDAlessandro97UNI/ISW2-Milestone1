{"sha":"e20dd0ae315244db0f74b29ffe6096760a7536b6","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmUyMGRkMGFlMzE1MjQ0ZGIwZjc0YjI5ZmZlNjA5Njc2MGE3NTM2YjY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-22T10:22:06Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-22T10:22:06Z"},"message":"Removing @Column(nullable = false) in favor of @NotNull - better error messages","tree":{"sha":"4332e80c716e40ebdbcb5d6f03ad4aed7c68a3f6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4332e80c716e40ebdbcb5d6f03ad4aed7c68a3f6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e20dd0ae315244db0f74b29ffe6096760a7536b6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e20dd0ae315244db0f74b29ffe6096760a7536b6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e20dd0ae315244db0f74b29ffe6096760a7536b6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e20dd0ae315244db0f74b29ffe6096760a7536b6/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"9cd92305562916453bf2aee42bbc3b6d1b07e5cd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9cd92305562916453bf2aee42bbc3b6d1b07e5cd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9cd92305562916453bf2aee42bbc3b6d1b07e5cd"}],"stats":{"total":109,"additions":67,"deletions":42},"files":[{"sha":"a9b5c13cbf38f4f986bf0a3ca9852265aa418ebb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractExec.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java?ref=e20dd0ae315244db0f74b29ffe6096760a7536b6","patch":"@@ -20,19 +20,19 @@\n \n import java.util.Date;\n \n-import javax.persistence.Column;\n import javax.persistence.Lob;\n import javax.persistence.MappedSuperclass;\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n+import javax.validation.constraints.NotNull;\n import org.apache.syncope.core.persistence.api.entity.Exec;\n \n @MappedSuperclass\n public abstract class AbstractExec extends AbstractEntity<Long> implements Exec {\n \n     private static final long serialVersionUID = -812344822970166317L;\n \n-    @Column(nullable = false)\n+    @NotNull\n     protected String status;\n \n     /**"},{"sha":"054dd69a3370d9fd8b8eeaadea5f0e77b4173e42","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAConnInstance.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java?ref=e20dd0ae315244db0f74b29ffe6096760a7536b6","patch":"@@ -36,6 +36,7 @@\n import javax.persistence.Lob;\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n@@ -63,31 +64,31 @@ public class JPAConnInstance extends AbstractEntity<Long> implements ConnInstanc\n     /**\n      * URI identifying the local / remote ConnId location where the related connector bundle is found.\n      */\n-    @Column(nullable = false)\n+    @NotNull\n     private String location;\n \n     /**\n      * Connector bundle class name.\n      * Within a given location, the triple\n      * (ConnectorBundle-Name, ConnectorBundle-Version, ConnectorBundle-Version) must be unique.\n      */\n-    @Column(nullable = false)\n+    @NotNull\n     private String connectorName;\n \n     /**\n      * Qualified name for the connector bundle.\n      * Within a given location, the triple\n      * (ConnectorBundle-Name, ConnectorBundle-Version, ConnectorBundle-Version) must be unique.\n      */\n-    @Column(nullable = false)\n+    @NotNull\n     private String bundleName;\n \n     /**\n      * Version of the bundle.\n      * Within a given location, the triple\n      * (ConnectorBundle-Name, ConnectorBundle-Version, ConnectorBundle-Version) must be unique.\n      */\n-    @Column(nullable = false)\n+    @NotNull\n     private String version;\n \n     /**"},{"sha":"45eea22af224c9d80f99e8a347d8ca8e7fe599e4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPADerSchema.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADerSchema.java?ref=e20dd0ae315244db0f74b29ffe6096760a7536b6","patch":"@@ -19,12 +19,12 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import javax.persistence.Cacheable;\n-import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n@@ -46,7 +46,7 @@ public class JPADerSchema extends AbstractEntity<String> implements DerSchema {\n     @OneToOne(fetch = FetchType.EAGER)\n     private JPAAnyTypeClass anyTypeClass;\n \n-    @Column(nullable = false)\n+    @NotNull\n     private String expression;\n \n     @Override"},{"sha":"1c42cf0d15ed740ebf38f2e53adb090bd33c415f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPANotification.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java?ref=e20dd0ae315244db0f74b29ffe6096760a7536b6","patch":"@@ -84,7 +84,7 @@ public class JPANotification extends AbstractEntity<Long> implements Notificatio\n     @NotNull\n     private String recipientAttrName;\n \n-    @Column(nullable = false)\n+    @NotNull\n     @Basic\n     @Min(0)\n     @Max(1)\n@@ -103,7 +103,7 @@ public class JPANotification extends AbstractEntity<Long> implements Notificatio\n     @Enumerated(EnumType.STRING)\n     private TraceLevel traceLevel;\n \n-    @Column(nullable = false)\n+    @NotNull\n     @Basic\n     @Min(0)\n     @Max(1)"},{"sha":"4ba6fa392317a5012ecba1d878d032e7d8c9785c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPlainSchema.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java?ref=e20dd0ae315244db0f74b29ffe6096760a7536b6","patch":"@@ -32,6 +32,7 @@\n import javax.persistence.Transient;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -58,11 +59,11 @@ public class JPAPlainSchema extends AbstractEntity<String> implements PlainSchem\n     @OneToOne(fetch = FetchType.EAGER)\n     private JPAAnyTypeClass anyTypeClass;\n \n-    @Column(nullable = false)\n+    @NotNull\n     @Enumerated(EnumType.STRING)\n     private AttrSchemaType type;\n \n-    @Column(nullable = false)\n+    @NotNull\n     private String mandatoryCondition;\n \n     @Basic"},{"sha":"419e93a935ff8579818c9c9274e65e2817b68240","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAVirSchema.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java?ref=e20dd0ae315244db0f74b29ffe6096760a7536b6","patch":"@@ -22,7 +22,6 @@\n import java.util.List;\n import javax.persistence.Basic;\n import javax.persistence.Cacheable;\n-import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n@@ -31,6 +30,7 @@\n import javax.persistence.Table;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n@@ -63,11 +63,11 @@ public class JPAVirSchema extends AbstractEntity<String> implements VirSchema {\n     @Max(1)\n     private Integer readonly;\n \n-    @Column(nullable = false)\n+    @NotNull\n     @ManyToOne\n     private JPAProvision provision;\n \n-    @Column(nullable = false)\n+    @NotNull\n     private String extAttrName;\n \n     public JPAVirSchema() {"},{"sha":"de3931eb040d17e3d7b1767ac111fe760fe7eb40","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAExternalResource.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java?ref=e20dd0ae315244db0f74b29ffe6096760a7536b6","patch":"@@ -82,7 +82,7 @@ public class JPAExternalResource extends AbstractAnnotatedEntity<String> impleme\n     /**\n      * Should this resource enforce the mandatory constraints?\n      */\n-    @Column(nullable = false)\n+    @NotNull\n     @Basic\n     @Min(0)\n     @Max(1)\n@@ -101,7 +101,7 @@ public class JPAExternalResource extends AbstractAnnotatedEntity<String> impleme\n     /**\n      * Is this resource primary, for propagations?\n      */\n-    @Column(nullable = false)\n+    @NotNull\n     @Basic\n     @Min(0)\n     @Max(1)\n@@ -110,32 +110,32 @@ public class JPAExternalResource extends AbstractAnnotatedEntity<String> impleme\n     /**\n      * Priority index for propagation ordering.\n      */\n-    @Column(nullable = false)\n+    @NotNull\n     private Integer propagationPriority;\n \n     /**\n      * Generate random password for propagation, if not provided?\n      */\n-    @Column(nullable = false)\n+    @NotNull\n     @Basic\n     @Min(0)\n     @Max(1)\n     private Integer randomPwdIfNotProvided;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(nullable = false)\n+    @NotNull\n     private TraceLevel createTraceLevel;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(nullable = false)\n+    @NotNull\n     private TraceLevel updateTraceLevel;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(nullable = false)\n+    @NotNull\n     private TraceLevel deleteTraceLevel;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(nullable = false)\n+    @NotNull\n     private TraceLevel syncTraceLevel;\n \n     @ManyToOne(fetch = FetchType.EAGER)"},{"sha":"872fee7f033df4481e25a86b1f05e2988c8d5952","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAMapping.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java?ref=e20dd0ae315244db0f74b29ffe6096760a7536b6","patch":"@@ -22,13 +22,13 @@\n import java.util.List;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n-import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.IntMappingType;\n@@ -49,7 +49,7 @@ public class JPAMapping extends AbstractEntity<Long> implements Mapping {\n     @Id\n     private Long id;\n \n-    @Column(nullable = false)\n+    @NotNull\n     @OneToOne\n     private JPAProvision provision;\n "},{"sha":"c3ee73b2e1f01168326a8e271e85b0baa01ff1d7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAMappingItem.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java?ref=e20dd0ae315244db0f74b29ffe6096760a7536b6","patch":"@@ -35,6 +35,7 @@\n import javax.persistence.Table;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n@@ -59,7 +60,7 @@ public class JPAMappingItem extends AbstractEntity<Long> implements MappingItem\n     @Column(nullable = true)\n     private String intAttrName;\n \n-    @Column(nullable = false)\n+    @NotNull\n     @Enumerated(EnumType.STRING)\n     private IntMappingType intMappingType;\n \n@@ -72,13 +73,13 @@ public class JPAMappingItem extends AbstractEntity<Long> implements MappingItem\n     /**\n      * Specify if the mapped target resource's field is nullable.\n      */\n-    @Column(nullable = false)\n+    @NotNull\n     private String mandatoryCondition;\n \n     /**\n      * Specify if the mapped target resource's field is the key.\n      */\n-    @Column(nullable = false)\n+    @NotNull\n     @Basic\n     @Min(0)\n     @Max(1)\n@@ -87,13 +88,13 @@ public class JPAMappingItem extends AbstractEntity<Long> implements MappingItem\n     /**\n      * Specify if the mapped target resource's field is the password.\n      */\n-    @Column(nullable = false)\n+    @NotNull\n     @Basic\n     @Min(0)\n     @Max(1)\n     private Integer password;\n \n-    @Column(nullable = false)\n+    @NotNull\n     @Enumerated(EnumType.STRING)\n     private MappingPurpose purpose;\n "},{"sha":"943a94fec8b6c54a808bcaab2cc53bfe8bd60325","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyObjectTest.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java?ref=e20dd0ae315244db0f74b29ffe6096760a7536b6","patch":"@@ -26,6 +26,7 @@\n import java.util.List;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n@@ -36,6 +37,9 @@\n @Transactional(\"Master\")\n public class AnyObjectTest extends AbstractTest {\n \n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n     @Autowired\n     private AnyObjectDAO anyObjectDAO;\n \n@@ -68,6 +72,7 @@ public void find() {\n     @Test\n     public void save() {\n         AnyObject anyObject = entityFactory.newEntity(AnyObject.class);\n+        anyObject.setType(anyTypeDAO.find(\"PRINTER\"));\n         anyObject.setRealm(realmDAO.find(SyncopeConstants.ROOT_REALM));\n \n         anyObject = anyObjectDAO.save(anyObject);"},{"sha":"19193dd19778dae49fddc430b5956498564f0664","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/VirSchemaTest.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java?ref=e20dd0ae315244db0f74b29ffe6096760a7536b6","patch":"@@ -27,9 +27,13 @@\n import java.util.List;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -40,6 +44,9 @@ public class VirSchemaTest extends AbstractTest {\n     @Autowired\n     private VirSchemaDAO virSchemaDAO;\n \n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n     @Test\n     public void findAll() {\n         List<VirSchema> list = virSchemaDAO.findAll();\n@@ -54,8 +61,13 @@ public void findByName() {\n \n     @Test\n     public void save() {\n+        ExternalResource csv = resourceDAO.find(\"resource-csv\");\n+        Provision provision = csv.getProvision(ObjectClass.ACCOUNT);\n+        assertNotNull(provision);\n+\n         VirSchema virSchema = entityFactory.newEntity(VirSchema.class);\n         virSchema.setKey(\"virtual\");\n+        virSchema.setProvision(provision);\n         virSchema.setReadonly(true);\n         virSchema.setExtAttrName(\"EXT_ATTR\");\n "},{"sha":"6e9837f84d663b1164492ae4858a8d61bdc99273","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SchemaDataBinderImpl.java","status":"modified","additions":9,"deletions":11,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e20dd0ae315244db0f74b29ffe6096760a7536b6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java?ref=e20dd0ae315244db0f74b29ffe6096760a7536b6","patch":"@@ -221,23 +221,21 @@ public DerSchemaTO getDerSchemaTO(final DerSchema schema) {\n     private VirSchema fill(final VirSchema schema, final VirSchemaTO schemaTO) {\n         BeanUtils.copyProperties(schemaTO, schema, IGNORE_PROPERTIES);\n \n-        VirSchema merged = virSchemaDAO.save(schema);\n-\n         if (schemaTO.getAnyTypeClass() != null\n-                && (merged.getAnyTypeClass() == null\n-                || !schemaTO.getAnyTypeClass().equals(merged.getAnyTypeClass().getKey()))) {\n+                && (schema.getAnyTypeClass() == null\n+                || !schemaTO.getAnyTypeClass().equals(schema.getAnyTypeClass().getKey()))) {\n \n             AnyTypeClass anyTypeClass = anyTypeClassDAO.find(schemaTO.getAnyTypeClass());\n             if (anyTypeClass == null) {\n                 LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName()\n                         + \"{}, ignoring...\", schemaTO.getAnyTypeClass());\n             } else {\n-                anyTypeClass.add(merged);\n-                merged.setAnyTypeClass(anyTypeClass);\n+                anyTypeClass.add(schema);\n+                schema.setAnyTypeClass(anyTypeClass);\n             }\n-        } else if (schemaTO.getAnyTypeClass() == null && merged.getAnyTypeClass() != null) {\n-            merged.getAnyTypeClass().remove(merged);\n-            merged.setAnyTypeClass(null);\n+        } else if (schemaTO.getAnyTypeClass() == null && schema.getAnyTypeClass() != null) {\n+            schema.getAnyTypeClass().remove(schema);\n+            schema.setAnyTypeClass(null);\n         }\n \n         Provision provision = resourceDAO.findProvision(schemaTO.getProvision());\n@@ -246,9 +244,9 @@ private VirSchema fill(final VirSchema schema, final VirSchemaTO schemaTO) {\n             sce.getElements().add(\"Provision \" + schemaTO.getProvision() + \" not found\");\n             throw sce;\n         }\n-        merged.setProvision(provision);\n+        schema.setProvision(provision);\n \n-        return merged;\n+        return virSchemaDAO.save(schema);\n     }\n \n     @Override"},{"sha":"c4e4ea06c90668b0de6f0209f37136cf28b588f4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/VirSchemaITCase.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e20dd0ae315244db0f74b29ffe6096760a7536b6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e20dd0ae315244db0f74b29ffe6096760a7536b6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java?ref=e20dd0ae315244db0f74b29ffe6096760a7536b6","patch":"@@ -112,16 +112,23 @@ public void issueSYNCOPE323() {\n \n     @Test\n     public void issueSYNCOPE418() {\n+        ResourceTO ws1 = resourceService.read(RESOURCE_NAME_WS1);\n+        assertNotNull(ws1);\n+        assertEquals(1, ws1.getProvisions().size());\n+        assertTrue(ws1.getProvisions().get(0).getVirSchemas().isEmpty());\n+\n         VirSchemaTO schema = new VirSchemaTO();\n         schema.setKey(\"http://schemas.examples.org/security/authorization/organizationUnit\");\n+        schema.setExtAttrName(\"name\");\n+        schema.setProvision(ws1.getProvisions().get(0).getKey());\n \n         try {\n             createSchema(SchemaType.VIRTUAL, schema);\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidVirSchema, e.getType());\n \n-            assertTrue(e.getElements().iterator().next().toString().contains(EntityViolationType.InvalidName.name()));\n+            assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidName.name()));\n         }\n     }\n }"}]}