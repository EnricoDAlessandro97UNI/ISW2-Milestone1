{"sha":"081d9a04ae66b9200ab9538ad64c927e8f121e1a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjA4MWQ5YTA0YWU2NmI5MjAwYWI5NTM4YWQ2NGM5MjdlOGYxMjFlMWE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-05-25T14:50:15Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-05-25T14:50:15Z"},"message":"[SYNCOPE-666] Initial commit, Travis CI builds disabled","tree":{"sha":"de0420b493b586f62d3dba8828b2776f9fd10ec5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/de0420b493b586f62d3dba8828b2776f9fd10ec5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/081d9a04ae66b9200ab9538ad64c927e8f121e1a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/081d9a04ae66b9200ab9538ad64c927e8f121e1a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/081d9a04ae66b9200ab9538ad64c927e8f121e1a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/081d9a04ae66b9200ab9538ad64c927e8f121e1a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"4cd6f5dc673497b83c56873f007f61e405f40f2a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4cd6f5dc673497b83c56873f007f61e405f40f2a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4cd6f5dc673497b83c56873f007f61e405f40f2a"}],"stats":{"total":24271,"additions":11560,"deletions":12711},"files":[{"sha":"e17fd2c471e0ff75b937afc627ccee1bb4ac0101","filename":".travis.yml","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/.travis.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/.travis.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.travis.yml?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -19,6 +19,7 @@ jdk:\n # default install is mvn install --quiet -DskipTests=true\n install: mvn --show-version --quiet -P all,skipTests\n #invoker.streamLogs: we cannot access to log files through Travis web ui, so display everything in the console\n-script: mvn --show-version --quiet clean install -Dinvoker.streamLogs=true\n+#script: mvn --show-version --quiet clean install -Dinvoker.streamLogs=true\n+script: mvn --show-version --quiet -PskipTests -Dinvoker.streamLogs=true\n notifications:\n   webhooks: http://rovere.tirasa.net/cgi-bin/travis.cgi"},{"sha":"9aefe4c7597e0a0fff50260e85a3238c3f5c5647","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/AttrLayoutType.java","status":"modified","additions":14,"deletions":24,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAttrLayoutType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAttrLayoutType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAttrLayoutType.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,27 +20,25 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n public enum AttrLayoutType {\n \n-    ADMIN_USER(\"admin.user.layout\", Mode.ADMIN, AttributableType.USER),\n-    SELF_USER(\"self.user.layout\", Mode.SELF, AttributableType.USER),\n-    ADMIN_GROUP(\"admin.group.layout\", Mode.ADMIN, AttributableType.GROUP),\n-    SELF_GROUP(\"self.group.layout\", Mode.SELF, AttributableType.GROUP),\n-    ADMIN_MEMBERSHIP(\"admin.membership.layout\", Mode.ADMIN, AttributableType.MEMBERSHIP),\n-    SELF_MEMBERSHIP(\"self.membership.layout\", Mode.SELF, AttributableType.MEMBERSHIP);\n+    ADMIN_USER(\"admin.user.layout\", Mode.ADMIN, AnyTypeKind.USER),\n+    SELF_USER(\"self.user.layout\", Mode.SELF, AnyTypeKind.USER),\n+    ADMIN_GROUP(\"admin.group.layout\", Mode.ADMIN, AnyTypeKind.GROUP),\n+    SELF_GROUP(\"self.group.layout\", Mode.SELF, AnyTypeKind.GROUP);\n \n     private final String confKey;\n \n     private final Mode mode;\n \n-    private final AttributableType attrType;\n+    private final AnyTypeKind anyTypeKind;\n \n-    AttrLayoutType(final String confKey, final Mode mode, final AttributableType attrType) {\n+    AttrLayoutType(final String confKey, final Mode mode, final AnyTypeKind anyTypeKind) {\n         this.confKey = confKey;\n         this.mode = mode;\n-        this.attrType = attrType;\n+        this.anyTypeKind = anyTypeKind;\n     }\n \n     public String getConfKey() {\n@@ -51,47 +49,39 @@ public Mode getMode() {\n         return mode;\n     }\n \n-    public AttributableType getAttrType() {\n-        return attrType;\n+    public AnyTypeKind getAnyTypeKind() {\n+        return anyTypeKind;\n     }\n \n     public static List<String> confKeys() {\n-        List<String> confKeys = new ArrayList<String>();\n+        List<String> confKeys = new ArrayList<>();\n         for (AttrLayoutType value : values()) {\n             confKeys.add(value.getConfKey());\n         }\n \n         return confKeys;\n     }\n \n-    public static AttrLayoutType valueOf(final Mode mode, final AttributableType attrType) {\n+    public static AttrLayoutType valueOf(final Mode mode, final AnyTypeKind anyTypeKind) {\n         AttrLayoutType result = null;\n         if (mode == Mode.ADMIN) {\n-            switch (attrType) {\n+            switch (anyTypeKind) {\n                 case USER:\n                     result = ADMIN_USER;\n                     break;\n \n-                case MEMBERSHIP:\n-                    result = ADMIN_MEMBERSHIP;\n-                    break;\n-\n                 case GROUP:\n                     result = ADMIN_GROUP;\n                     break;\n \n                 default:\n             }\n         } else if (mode == Mode.SELF) {\n-            switch (attrType) {\n+            switch (anyTypeKind) {\n                 case USER:\n                     result = SELF_USER;\n                     break;\n \n-                case MEMBERSHIP:\n-                    result = SELF_MEMBERSHIP;\n-                    break;\n-\n                 case GROUP:\n                     result = SELF_GROUP;\n                     break;"},{"sha":"78b91efb93ca0dd70e0a051e89d5b86970c806e8","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/SortableAttributableProviderComparator.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAttributableProviderComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAttributableProviderComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAttributableProviderComparator.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -23,30 +23,30 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n+import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n import org.apache.wicket.model.AbstractReadOnlyModel;\n \n-public class SortableAttributableProviderComparator extends SortableDataProviderComparator<AbstractAttributableTO> {\n+public class SortableAttributableProviderComparator extends SortableDataProviderComparator<AnyTO> {\n \n     private static final long serialVersionUID = 1775967163571699258L;\n \n     private static final Set<String> INLINE_PROPS = new HashSet<>(Arrays.asList(\n             new String[] { \"key\", \"status\", \"token\", \"username\" }));\n \n-    public SortableAttributableProviderComparator(final SortableDataProvider<AbstractAttributableTO, String> provider) {\n+    public SortableAttributableProviderComparator(final SortableDataProvider<AnyTO, String> provider) {\n         super(provider);\n     }\n \n     @Override\n-    public int compare(final AbstractAttributableTO attributable1, final AbstractAttributableTO attributable2) {\n+    public int compare(final AnyTO any1, final AnyTO any2) {\n         if (INLINE_PROPS.contains(provider.getSort().getProperty())) {\n-            return super.compare(attributable1, attributable2);\n+            return super.compare(any1, any2);\n         }\n \n-        return super.compare(new AttrModel(attributable1), new AttrModel(attributable2));\n+        return super.compare(new AttrModel(any1), new AttrModel(any2));\n     }\n \n     @SuppressWarnings(\"rawtypes\")\n@@ -60,12 +60,12 @@ private class AttrModel extends AbstractReadOnlyModel<Comparable> {\n \n         private final Map<String, AttrTO> virAttrs;\n \n-        public AttrModel(final AbstractAttributableTO attributableTO) {\n+        public AttrModel(final AnyTO anyTO) {\n             super();\n \n-            this.attrs = attributableTO.getPlainAttrMap();\n-            this.derAttrs = attributableTO.getDerAttrMap();\n-            this.virAttrs = attributableTO.getVirAttrMap();\n+            this.attrs = anyTO.getPlainAttrMap();\n+            this.derAttrs = anyTO.getDerAttrMap();\n+            this.virAttrs = anyTO.getVirAttrMap();\n         }\n \n         /**"},{"sha":"c66a82556d2e1963a5a8f0632c4af20c765ef67b","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/status/ConnObjectWrapper.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FConnObjectWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FConnObjectWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FConnObjectWrapper.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -19,29 +19,29 @@\n package org.apache.syncope.client.console.commons.status;\n \n import java.io.Serializable;\n-import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n+import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n \n public class ConnObjectWrapper implements Serializable {\n \n     private static final long serialVersionUID = 9083721948999924299L;\n \n-    private final AbstractAttributableTO attributable;\n+    private final AnyTO any;\n \n     private final String resourceName;\n \n     private final ConnObjectTO connObjectTO;\n \n-    public ConnObjectWrapper(final AbstractAttributableTO attributable, final String resourceName,\n+    public ConnObjectWrapper(final AnyTO attributable, final String resourceName,\n             final ConnObjectTO connObjectTO) {\n \n-        this.attributable = attributable;\n+        this.any = attributable;\n         this.resourceName = resourceName;\n         this.connObjectTO = connObjectTO;\n     }\n \n-    public AbstractAttributableTO getAttributable() {\n-        return attributable;\n+    public AnyTO getAny() {\n+        return any;\n     }\n \n     public String getResourceName() {"},{"sha":"af43c0a0fbe78bf181c2a87763520db82c1eb1cf","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/status/StatusBean.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusBean.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -23,17 +23,17 @@\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n import org.apache.commons.lang3.builder.ToStringStyle;\n-import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n+import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n \n public class StatusBean implements Serializable {\n \n     private static final long serialVersionUID = -5207260204921071129L;\n \n-    private final Long attributableKey;\n+    private final Long anyKey;\n \n-    private final String attributableName;\n+    private final String anyName;\n \n     private final String resourceName;\n \n@@ -43,10 +43,10 @@ public class StatusBean implements Serializable {\n \n     private boolean linked = true;\n \n-    public StatusBean(final AbstractAttributableTO attributable, final String resourceName) {\n-        this.attributableKey = attributable.getKey();\n-        this.attributableName = attributable instanceof UserTO\n-                ? ((UserTO) attributable).getUsername() : ((GroupTO) attributable).getName();\n+    public StatusBean(final AnyTO any, final String resourceName) {\n+        this.anyKey = any.getKey();\n+        this.anyName = any instanceof UserTO\n+                ? ((UserTO) any).getUsername() : ((GroupTO) any).getName();\n         this.resourceName = resourceName;\n     }\n \n@@ -70,12 +70,12 @@ public void setStatus(final Status status) {\n         this.status = status;\n     }\n \n-    public Long getAttributableId() {\n-        return attributableKey;\n+    public Long getAnyKey() {\n+        return anyKey;\n     }\n \n-    public String getAttributableName() {\n-        return attributableName;\n+    public String getAnyName() {\n+        return anyName;\n     }\n \n     public boolean isLinked() {"},{"sha":"877a6286123adac976d2d800fbd4927776eb9a16","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/status/StatusUtils.java","status":"modified","additions":17,"deletions":18,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -27,10 +27,9 @@\n import org.apache.syncope.client.console.commons.ConnIdSpecialAttributeName;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.panels.ImagePanel;\n-import org.apache.syncope.client.console.rest.AbstractSubjectRestClient;\n+import org.apache.syncope.client.console.rest.AbstractAnyRestClient;\n import org.apache.syncope.common.lib.mod.StatusMod;\n-import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n-import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n+import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.wicket.Component;\n@@ -49,56 +48,56 @@ public class StatusUtils implements Serializable {\n \n     private static final String IMG_PREFIX = \"/img/statuses/\";\n \n-    private final AbstractSubjectRestClient restClient;\n+    private final AbstractAnyRestClient restClient;\n \n-    public StatusUtils(final AbstractSubjectRestClient restClient) {\n+    public StatusUtils(final AbstractAnyRestClient restClient) {\n         this.restClient = restClient;\n     }\n \n-    public List<ConnObjectWrapper> getConnectorObjects(final AbstractSubjectTO subject) {\n+    public List<ConnObjectWrapper> getConnectorObjects(final AnyTO any) {\n         final List<ConnObjectWrapper> objects = new ArrayList<>();\n-        objects.addAll(getConnectorObjects(subject, subject.getResources()));\n+        objects.addAll(getConnectorObjects(any, any.getResources()));\n         return objects;\n     }\n \n     public List<ConnObjectWrapper> getConnectorObjects(\n-            final Collection<AbstractSubjectTO> subjects, final Collection<String> resources) {\n+            final Collection<AnyTO> anys, final Collection<String> resources) {\n \n         final List<ConnObjectWrapper> objects = new ArrayList<>();\n \n-        for (AbstractSubjectTO subject : subjects) {\n-            objects.addAll(getConnectorObjects(subject, resources));\n+        for (AnyTO any : anys) {\n+            objects.addAll(getConnectorObjects(any, resources));\n         }\n \n         return objects;\n     }\n \n     private List<ConnObjectWrapper> getConnectorObjects(\n-            final AbstractSubjectTO subject, final Collection<String> resources) {\n+            final AnyTO any, final Collection<String> resources) {\n \n         final List<ConnObjectWrapper> objects = new ArrayList<>();\n \n         for (String resourceName : resources) {\n             ConnObjectTO objectTO = null;\n             try {\n-                objectTO = restClient.getConnectorObject(resourceName, subject.getKey());\n+                objectTO = restClient.readConnObject(resourceName, any.getKey());\n             } catch (Exception e) {\n-                LOG.warn(\"ConnObject '{}' not found on resource '{}'\", subject.getKey(), resourceName);\n+                LOG.warn(\"ConnObject '{}' not found on resource '{}'\", any.getKey(), resourceName);\n             }\n \n-            objects.add(new ConnObjectWrapper(subject, resourceName, objectTO));\n+            objects.add(new ConnObjectWrapper(any, resourceName, objectTO));\n         }\n \n         return objects;\n     }\n \n     public StatusBean getStatusBean(\n-            final AbstractAttributableTO attributable,\n+            final AnyTO anyTO,\n             final String resourceName,\n             final ConnObjectTO objectTO,\n             final boolean isGroup) {\n \n-        final StatusBean statusBean = new StatusBean(attributable, resourceName);\n+        final StatusBean statusBean = new StatusBean(anyTO, resourceName);\n \n         if (objectTO != null) {\n             final Boolean enabled = isEnabled(objectTO);\n@@ -165,10 +164,10 @@ public static StatusMod buildStatusMod(final Collection<StatusBean> statuses, fi\n     }\n \n     public ConnObjectTO getConnObjectTO(\n-            final Long attributableId, final String resourceName, final List<ConnObjectWrapper> objects) {\n+            final Long anyKey, final String resourceName, final List<ConnObjectWrapper> objects) {\n \n         for (ConnObjectWrapper object : objects) {\n-            if (attributableId.equals(object.getAttributable().getKey())\n+            if (anyKey.equals(object.getAny().getKey())\n                     && resourceName.equalsIgnoreCase(object.getResourceName())) {\n \n                 return object.getConnObjectTO();"},{"sha":"b9a316d3b187762bd905223670ffa30bdfc26b52","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AbstractAnyRestClient.java","status":"renamed","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -19,30 +19,29 @@\n package org.apache.syncope.client.console.rest;\n \n import java.util.List;\n-import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n-import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n+import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n \n-public abstract class AbstractSubjectRestClient extends BaseRestClient {\n+public abstract class AbstractAnyRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = 1962529678091410544L;\n \n     public abstract int count(String realm);\n \n-    public abstract List<? extends AbstractAttributableTO> list(\n+    public abstract List<? extends AnyTO> list(\n             String realm, int page, int size, final SortParam<String> sort);\n \n     public abstract int searchCount(String realm, String fiql);\n \n-    public abstract List<? extends AbstractSubjectTO> search(\n+    public abstract List<? extends AnyTO> search(\n             String realm, String fiql, int page, int size, final SortParam<String> sort);\n \n-    public abstract ConnObjectTO getConnectorObject(String resourceName, Long key);\n+    public abstract ConnObjectTO readConnObject(String resourceName, Long key);\n \n-    public abstract AbstractSubjectTO delete(String etag, Long key);\n+    public abstract AnyTO delete(String etag, Long key);\n \n     public abstract BulkActionResult bulkAction(BulkAction action);\n }","previous_filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AbstractSubjectRestClient.java"},{"sha":"36b0d1cad11131eb1370190d6c5aea2aa2e35061","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ConfigurationRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConfigurationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConfigurationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConfigurationRestClient.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -73,7 +73,7 @@ public AttrTO readAttrLayout(final AttrLayoutType type) {\n             attrLayout.setSchema(type.getConfKey());\n         }\n         if (attrLayout.getValues().isEmpty()) {\n-            attrLayout.getValues().addAll(schemaRestClient.getPlainSchemaNames(type.getAttrType()));\n+            attrLayout.getValues().addAll(schemaRestClient.getPlainSchemaNames());\n         }\n \n         return attrLayout;"},{"sha":"157de09c75dbe8014ae646746c86c16b2e3cda79","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -29,9 +29,9 @@\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceAssociationActionType;\n import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n-import org.apache.syncope.common.lib.types.SubjectType;\n import org.apache.syncope.common.lib.wrap.ResourceName;\n import org.apache.syncope.common.rest.api.CollectionWrapper;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n@@ -43,7 +43,7 @@\n  * Console client for invoking Rest Group's services.\n  */\n @Component\n-public class GroupRestClient extends AbstractSubjectRestClient {\n+public class GroupRestClient extends AbstractAnyRestClient {\n \n     private static final long serialVersionUID = -8549081557283519638L;\n \n@@ -80,8 +80,8 @@ public List<GroupTO> search(\n     }\n \n     @Override\n-    public ConnObjectTO getConnectorObject(final String resourceName, final Long id) {\n-        return getService(ResourceService.class).getConnectorObject(resourceName, SubjectType.GROUP, id);\n+    public ConnObjectTO readConnObject(final String resourceName, final Long id) {\n+        return getService(ResourceService.class).readConnObject(resourceName, AnyTypeKind.GROUP.name(), id);\n     }\n \n     public GroupTO create(final GroupTO groupTO) {"},{"sha":"f5431db62e0348eb900017e480ae1b2fd07892b3","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ResourceRestClient.java","status":"modified","additions":4,"deletions":9,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -21,14 +21,11 @@\n import java.util.List;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n-import org.apache.syncope.common.lib.types.SubjectType;\n-import org.apache.syncope.common.lib.wrap.SubjectKey;\n+import org.apache.syncope.common.lib.wrap.AnyKey;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.springframework.stereotype.Component;\n \n@@ -84,11 +81,9 @@ public BulkActionResult bulkAction(final BulkAction action) {\n     }\n \n     public BulkActionResult bulkAssociationAction(\n-            final String resourceName, final Class<? extends AbstractAttributableTO> typeRef,\n-            final ResourceDeassociationActionType type, final List<SubjectKey> subjtectIds) {\n+            final String resourceName, final String anyTypeName,\n+            final ResourceDeassociationActionType type, final List<AnyKey> anyKeys) {\n \n-        return getService(ResourceService.class).bulkDeassociation(resourceName,\n-                UserTO.class.isAssignableFrom(typeRef) ? SubjectType.USER : SubjectType.GROUP,\n-                type, subjtectIds);\n+        return getService(ResourceService.class).bulkDeassociation(resourceName, anyTypeName, type, anyKeys);\n     }\n }"},{"sha":"9f7a6d2a0fe037f2fcb564b1066eeb0d971233b4","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/SchemaRestClient.java","status":"modified","additions":44,"deletions":50,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -26,13 +26,12 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.syncope.client.console.commons.AttrLayoutType;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n-import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.springframework.stereotype.Component;\n@@ -62,39 +61,34 @@ public void filter(\n         }\n     }\n \n-    public List<? extends AbstractSchemaTO> getSchemas(final AttributableType attrType, final SchemaType schemaType) {\n+    public List<? extends AbstractSchemaTO> getSchemas(final SchemaType schemaType) {\n         List<? extends AbstractSchemaTO> schemas = Collections.emptyList();\n \n         try {\n-            schemas = getService(SchemaService.class).list(attrType, schemaType);\n+            schemas = getService(SchemaService.class).list(schemaType);\n         } catch (SyncopeClientException e) {\n-            LOG.error(\"While getting all schemas for {} and {}\", attrType, schemaType, e);\n+            LOG.error(\"While getting all schemas for {}\", schemaType, e);\n         }\n-\n-        if (attrType == AttributableType.CONFIGURATION) {\n-            filter(schemas, AttrLayoutType.confKeys(), false);\n-        }\n-\n         return schemas;\n     }\n \n-    public List<PlainSchemaTO> getSchemas(final AttributableType type) {\n+    public List<PlainSchemaTO> getSchemas() {\n         List<PlainSchemaTO> schemas = null;\n \n         try {\n-            schemas = getService(SchemaService.class).list(type, SchemaType.PLAIN);\n+            schemas = getService(SchemaService.class).list(SchemaType.PLAIN);\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While getting all schemas\", e);\n         }\n \n         return schemas;\n     }\n \n-    public List<String> getSchemaNames(final AttributableType attrType, final SchemaType schemaType) {\n+    public List<String> getSchemaNames(final SchemaType schemaType) {\n         List<String> schemaNames = new ArrayList<>();\n \n         try {\n-            CollectionUtils.collect(getSchemas(attrType, schemaType), new Transformer<AbstractSchemaTO, String>() {\n+            CollectionUtils.collect(getSchemas(schemaType), new Transformer<AbstractSchemaTO, String>() {\n \n                 @Override\n                 public String transform(final AbstractSchemaTO schemaTO) {\n@@ -108,102 +102,102 @@ public String transform(final AbstractSchemaTO schemaTO) {\n         return schemaNames;\n     }\n \n-    public List<String> getPlainSchemaNames(final AttributableType type) {\n-        return getSchemaNames(type, SchemaType.PLAIN);\n+    public List<String> getPlainSchemaNames() {\n+        return getSchemaNames(SchemaType.PLAIN);\n     }\n \n-    public List<DerSchemaTO> getDerSchemas(final AttributableType type) {\n+    public List<DerSchemaTO> getDerSchemas() {\n         List<DerSchemaTO> userDerSchemas = null;\n \n         try {\n-            userDerSchemas = getService(SchemaService.class).list(type, SchemaType.DERIVED);\n+            userDerSchemas = getService(SchemaService.class).list(SchemaType.DERIVED);\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While getting all user derived schemas\", e);\n         }\n \n         return userDerSchemas;\n     }\n \n-    public List<String> getDerSchemaNames(final AttributableType type) {\n-        return getSchemaNames(type, SchemaType.DERIVED);\n+    public List<String> getDerSchemaNames() {\n+        return getSchemaNames(SchemaType.DERIVED);\n     }\n \n-    public List<VirSchemaTO> getVirSchemas(final AttributableType type) {\n+    public List<VirSchemaTO> getVirSchemas() {\n         List<VirSchemaTO> userVirSchemas = null;\n \n         try {\n-            userVirSchemas = getService(SchemaService.class).list(type, SchemaType.VIRTUAL);\n+            userVirSchemas = getService(SchemaService.class).list(SchemaType.VIRTUAL);\n         } catch (SyncopeClientException e) {\n-            LOG.error(\"While getting all {} virtual schemas\", type, e);\n+            LOG.error(\"While getting all virtual schemas\", e);\n         }\n \n         return userVirSchemas;\n     }\n \n-    public List<String> getVirSchemaNames(final AttributableType type) {\n-        return getSchemaNames(type, SchemaType.VIRTUAL);\n+    public List<String> getVirSchemaNames() {\n+        return getSchemaNames(SchemaType.VIRTUAL);\n     }\n \n-    public void createPlainSchema(final AttributableType type, final PlainSchemaTO schemaTO) {\n-        getService(SchemaService.class).create(type, SchemaType.PLAIN, schemaTO);\n+    public void createPlainSchema(final PlainSchemaTO schemaTO) {\n+        getService(SchemaService.class).create(SchemaType.PLAIN, schemaTO);\n     }\n \n-    public PlainSchemaTO readPlainSchema(final AttributableType type, final String name) {\n+    public PlainSchemaTO readPlainSchema(final String name) {\n         PlainSchemaTO schema = null;\n \n         try {\n-            schema = getService(SchemaService.class).read(type, SchemaType.PLAIN, name);\n+            schema = getService(SchemaService.class).read(SchemaType.PLAIN, name);\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While reading a user schema\", e);\n         }\n         return schema;\n     }\n \n-    public void updatePlainSchema(final AttributableType type, final PlainSchemaTO schemaTO) {\n-        getService(SchemaService.class).update(type, SchemaType.PLAIN, schemaTO.getKey(), schemaTO);\n+    public void updatePlainSchema(final PlainSchemaTO schemaTO) {\n+        getService(SchemaService.class).update(SchemaType.PLAIN, schemaTO.getKey(), schemaTO);\n     }\n \n-    public PlainSchemaTO deletePlainSchema(final AttributableType type, final String name) {\n-        PlainSchemaTO response = getService(SchemaService.class).read(type, SchemaType.PLAIN, name);\n-        getService(SchemaService.class).delete(type, SchemaType.PLAIN, name);\n+    public PlainSchemaTO deletePlainSchema(final String name) {\n+        PlainSchemaTO response = getService(SchemaService.class).read(SchemaType.PLAIN, name);\n+        getService(SchemaService.class).delete(SchemaType.PLAIN, name);\n         return response;\n     }\n \n-    public void createDerSchema(final AttributableType type, final DerSchemaTO schemaTO) {\n-        getService(SchemaService.class).create(type, SchemaType.DERIVED, schemaTO);\n+    public void createDerSchema(final DerSchemaTO schemaTO) {\n+        getService(SchemaService.class).create(SchemaType.DERIVED, schemaTO);\n     }\n \n-    public DerSchemaTO readDerSchema(final AttributableType type, final String name) {\n+    public DerSchemaTO readDerSchema(final String name) {\n         DerSchemaTO derivedSchemaTO = null;\n         try {\n-            derivedSchemaTO = getService(SchemaService.class).read(type, SchemaType.DERIVED, name);\n+            derivedSchemaTO = getService(SchemaService.class).read(SchemaType.DERIVED, name);\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While reading a derived user schema\", e);\n         }\n         return derivedSchemaTO;\n     }\n \n-    public void updateVirSchema(final AttributableType type, final VirSchemaTO schemaTO) {\n-        getService(SchemaService.class).update(type, SchemaType.VIRTUAL, schemaTO.getKey(), schemaTO);\n+    public void updateVirSchema(final VirSchemaTO schemaTO) {\n+        getService(SchemaService.class).update(SchemaType.VIRTUAL, schemaTO.getKey(), schemaTO);\n     }\n \n-    public DerSchemaTO deleteDerSchema(final AttributableType type, final String name) {\n-        DerSchemaTO schemaTO = getService(SchemaService.class).read(type, SchemaType.DERIVED, name);\n-        getService(SchemaService.class).delete(type, SchemaType.DERIVED, name);\n+    public DerSchemaTO deleteDerSchema(final String name) {\n+        DerSchemaTO schemaTO = getService(SchemaService.class).read(SchemaType.DERIVED, name);\n+        getService(SchemaService.class).delete(SchemaType.DERIVED, name);\n         return schemaTO;\n     }\n \n-    public void createVirSchema(final AttributableType type, final VirSchemaTO schemaTO) {\n-        getService(SchemaService.class).create(type, SchemaType.VIRTUAL, schemaTO);\n+    public void createVirSchema(final VirSchemaTO schemaTO) {\n+        getService(SchemaService.class).create(SchemaType.VIRTUAL, schemaTO);\n     }\n \n-    public void updateDerSchema(final AttributableType type, final DerSchemaTO schemaTO) {\n-        getService(SchemaService.class).update(type, SchemaType.DERIVED, schemaTO.getKey(), schemaTO);\n+    public void updateDerSchema(final DerSchemaTO schemaTO) {\n+        getService(SchemaService.class).update(SchemaType.DERIVED, schemaTO.getKey(), schemaTO);\n     }\n \n-    public VirSchemaTO deleteVirSchema(final AttributableType type, final String name) {\n-        VirSchemaTO schemaTO = getService(SchemaService.class).read(type, SchemaType.VIRTUAL, name);\n-        getService(SchemaService.class).delete(type, SchemaType.VIRTUAL, name);\n+    public VirSchemaTO deleteVirSchema(final String name) {\n+        VirSchemaTO schemaTO = getService(SchemaService.class).read(SchemaType.VIRTUAL, name);\n+        getService(SchemaService.class).delete(SchemaType.VIRTUAL, name);\n         return schemaTO;\n     }\n "},{"sha":"9d30b78d203025774973e9951c6baf512c261d6d","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/UserRestClient.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -31,9 +31,9 @@\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceAssociationActionType;\n import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n-import org.apache.syncope.common.lib.types.SubjectType;\n import org.apache.syncope.common.lib.wrap.ResourceName;\n import org.apache.syncope.common.rest.api.CollectionWrapper;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n@@ -45,7 +45,7 @@\n  * Console client for invoking rest users services.\n  */\n @Component\n-public class UserRestClient extends AbstractSubjectRestClient {\n+public class UserRestClient extends AbstractAnyRestClient {\n \n     private static final long serialVersionUID = -1575748964398293968L;\n \n@@ -118,8 +118,8 @@ public List<UserTO> search(\n     }\n \n     @Override\n-    public ConnObjectTO getConnectorObject(final String resourceName, final Long id) {\n-        return getService(ResourceService.class).getConnectorObject(resourceName, SubjectType.USER, id);\n+    public ConnObjectTO readConnObject(final String resourceName, final Long id) {\n+        return getService(ResourceService.class).readConnObject(resourceName, AnyTypeKind.USER.name(), id);\n     }\n \n     public void suspend(final String etag, final long userId, final List<StatusBean> statuses) {"},{"sha":"2a078a0d95e6d8fa70c10fb00fa52ae6dc8d1f6b","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/WorkflowRestClient.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FWorkflowRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FWorkflowRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FWorkflowRestClient.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -24,7 +24,7 @@\n import org.apache.cxf.helpers.IOUtils;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.WorkflowService;\n import org.springframework.stereotype.Component;\n@@ -39,15 +39,15 @@ private WorkflowService getService(final MediaType mediaType) {\n     }\n \n     public InputStream getDefinition(final MediaType mediaType) {\n-        Response response = getService(mediaType).exportDefinition(SubjectType.USER);\n+        Response response = getService(mediaType).exportDefinition(AnyTypeKind.USER);\n \n         return (InputStream) response.getEntity();\n     }\n \n     public byte[] getDiagram() {\n         WorkflowService service = getService(WorkflowService.class);\n         WebClient.client(service).accept(RESTHeaders.MEDIATYPE_IMAGE_PNG);\n-        Response response = service.exportDiagram(SubjectType.USER);\n+        Response response = service.exportDiagram(AnyTypeKind.USER);\n \n         byte[] diagram;\n         try {\n@@ -64,6 +64,6 @@ public boolean isActivitiEnabledForUsers() {\n     }\n \n     public void updateDefinition(final MediaType mediaType, final String definition) {\n-        getService(mediaType).importDefinition(SubjectType.USER, definition);\n+        getService(mediaType).importDefinition(AnyTypeKind.USER, definition);\n     }\n }"},{"sha":"477315038d33a3bcdcd9ab9b800f29b20d079d47","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -31,8 +31,8 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.lib.builders.ListQueryBuilder;\n-import org.apache.syncope.client.lib.builders.SubjectListQueryBuilder;\n-import org.apache.syncope.client.lib.builders.SubjectSearchQueryBuilder;\n+import org.apache.syncope.client.lib.builders.AnyListQueryBuilder;\n+import org.apache.syncope.client.lib.builders.AnySearchQueryBuilder;\n import org.apache.syncope.common.lib.search.OrderByClauseBuilder;\n import org.apache.syncope.common.lib.search.GroupFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.UserFiqlSearchConditionBuilder;\n@@ -108,24 +108,24 @@ public static ListQueryBuilder getListQueryBuilder() {\n     }\n \n     /**\n-     * Returns a new instance of {@link SubjectListQueryBuilder}, for assisted building of some service's {@code list()}\n+     * Returns a new instance of {@link AnyListQueryBuilder}, for assisted building of some service's {@code list()}\n      * arguments.\n      *\n-     * @return default instance of {@link SubjectListQueryBuilder}\n+     * @return default instance of {@link AnyListQueryBuilder}\n      */\n-    public static SubjectListQueryBuilder getSubjectListQueryBuilder() {\n-        return new SubjectListQueryBuilder();\n+    public static AnyListQueryBuilder getSubjectListQueryBuilder() {\n+        return new AnyListQueryBuilder();\n     }\n \n     /**\n-     * Returns a new instance of {@link SubjectSearchQueryBuilder}, for assisted building of some service's\n+     * Returns a new instance of {@link AnySearchQueryBuilder}, for assisted building of some service's\n      * {@code search()}\n      * arguments.\n      *\n-     * @return default instance of {@link SubjectSearchQueryBuilder}\n+     * @return default instance of {@link AnySearchQueryBuilder}\n      */\n-    public static SubjectSearchQueryBuilder getSubjectSearchQueryBuilder() {\n-        return new SubjectSearchQueryBuilder();\n+    public static AnySearchQueryBuilder getSubjectSearchQueryBuilder() {\n+        return new AnySearchQueryBuilder();\n     }\n \n     /**"},{"sha":"62e4bbe0c4d41ef74a61d228116db6e32ff65f6f","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/builders/AnyListQueryBuilder.java","status":"renamed","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAnyListQueryBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAnyListQueryBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAnyListQueryBuilder.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,28 +20,28 @@\n \n import java.util.ArrayList;\n import org.apache.syncope.common.rest.api.beans.ListQuery;\n-import org.apache.syncope.common.rest.api.beans.SubjectListQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n \n-public class SubjectListQueryBuilder extends ListQueryBuilder {\n+public class AnyListQueryBuilder extends ListQueryBuilder {\n \n-    private final SubjectListQuery instance = new SubjectListQuery();\n+    private final AnyListQuery instance = new AnyListQuery();\n \n     @Override\n-    public SubjectListQueryBuilder page(final Integer page) {\n-        return SubjectListQueryBuilder.class.cast(super.page(page));\n+    public AnyListQueryBuilder page(final Integer page) {\n+        return AnyListQueryBuilder.class.cast(super.page(page));\n     }\n \n     @Override\n-    public SubjectListQueryBuilder size(final Integer size) {\n-        return SubjectListQueryBuilder.class.cast(super.size(size));\n+    public AnyListQueryBuilder size(final Integer size) {\n+        return AnyListQueryBuilder.class.cast(super.size(size));\n     }\n \n     @Override\n-    public SubjectListQueryBuilder orderBy(final String orderBy) {\n-        return SubjectListQueryBuilder.class.cast(super.orderBy(orderBy));\n+    public AnyListQueryBuilder orderBy(final String orderBy) {\n+        return AnyListQueryBuilder.class.cast(super.orderBy(orderBy));\n     }\n \n-    public SubjectListQueryBuilder realm(final String realm) {\n+    public AnyListQueryBuilder realm(final String realm) {\n         if (instance.getRealms() == null) {\n             instance.setRealms(new ArrayList<String>());\n         }\n@@ -50,7 +50,7 @@ public SubjectListQueryBuilder realm(final String realm) {\n     }\n \n     @Override\n-    public SubjectListQuery build() {\n+    public AnyListQuery build() {\n         ListQuery lq = super.build();\n         instance.setPage(lq.getPage());\n         instance.setSize(lq.getSize());","previous_filename":"client/lib/src/main/java/org/apache/syncope/client/lib/builders/SubjectListQueryBuilder.java"},{"sha":"c3fce47ec1bedf9df76d8f10f84b277277306dca","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/builders/AnySearchQueryBuilder.java","status":"renamed","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAnySearchQueryBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAnySearchQueryBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FAnySearchQueryBuilder.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,42 +18,42 @@\n  */\n package org.apache.syncope.client.lib.builders;\n \n-import org.apache.syncope.common.rest.api.beans.SubjectListQuery;\n-import org.apache.syncope.common.rest.api.beans.SubjectSearchQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n+import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n \n-public class SubjectSearchQueryBuilder extends SubjectListQueryBuilder {\n+public class AnySearchQueryBuilder extends AnyListQueryBuilder {\n \n-    private final SubjectSearchQuery instance = new SubjectSearchQuery();\n+    private final AnySearchQuery instance = new AnySearchQuery();\n \n     @Override\n-    public SubjectSearchQueryBuilder realm(final String realm) {\n-        return SubjectSearchQueryBuilder.class.cast(super.realm(realm));\n+    public AnySearchQueryBuilder realm(final String realm) {\n+        return AnySearchQueryBuilder.class.cast(super.realm(realm));\n     }\n \n     @Override\n-    public SubjectSearchQueryBuilder page(final Integer page) {\n-        return SubjectSearchQueryBuilder.class.cast(super.page(page));\n+    public AnySearchQueryBuilder page(final Integer page) {\n+        return AnySearchQueryBuilder.class.cast(super.page(page));\n     }\n \n     @Override\n-    public SubjectSearchQueryBuilder size(final Integer size) {\n-        return SubjectSearchQueryBuilder.class.cast(super.size(size));\n+    public AnySearchQueryBuilder size(final Integer size) {\n+        return AnySearchQueryBuilder.class.cast(super.size(size));\n     }\n \n     @Override\n-    public SubjectSearchQueryBuilder orderBy(final String orderBy) {\n-        return SubjectSearchQueryBuilder.class.cast(super.orderBy(orderBy));\n+    public AnySearchQueryBuilder orderBy(final String orderBy) {\n+        return AnySearchQueryBuilder.class.cast(super.orderBy(orderBy));\n     }\n \n-    public SubjectSearchQueryBuilder fiql(final String fiql) {\n+    public AnySearchQueryBuilder fiql(final String fiql) {\n         instance.setFiql(fiql);\n \n         return this;\n     }\n \n     @Override\n-    public SubjectSearchQuery build() {\n-        SubjectListQuery slq = super.build();\n+    public AnySearchQuery build() {\n+        AnyListQuery slq = super.build();\n         instance.setRealms(slq.getRealms());\n         instance.setPage(slq.getPage());\n         instance.setSize(slq.getSize());","previous_filename":"client/lib/src/main/java/org/apache/syncope/client/lib/builders/SubjectSearchQueryBuilder.java"},{"sha":"cab32399a6d5aa51f410095622254c4f068dd79f","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"renamed","additions":27,"deletions":161,"changes":188,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -28,40 +28,33 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.mod.AbstractAttributableMod;\n-import org.apache.syncope.common.lib.mod.AbstractSubjectMod;\n+import org.apache.syncope.common.lib.mod.AnyMod;\n import org.apache.syncope.common.lib.mod.AttrMod;\n-import org.apache.syncope.common.lib.mod.MembershipMod;\n import org.apache.syncope.common.lib.mod.ReferenceMod;\n import org.apache.syncope.common.lib.mod.GroupMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n-import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n-import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n+import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n \n /**\n- * Utility class for manipulating classes extending AbstractAttributableTO and AbstractAttributableMod.\n- *\n- * @see AbstractAttributableTO\n- * @see AbstractAttributableMod\n+ * Utility class for comparing manipulating {@link AnyTO} and {@link AnyMod}.\n  */\n-public final class AttributableOperations {\n+public final class AnyOperations {\n \n-    private AttributableOperations() {\n+    private AnyOperations() {\n         // empty constructor for static utility classes\n     }\n \n     private static void populate(final Map<String, AttrTO> updatedAttrs,\n-            final Map<String, AttrTO> originalAttrs, final AbstractAttributableMod result) {\n+            final Map<String, AttrTO> originalAttrs, final AnyMod result) {\n \n         populate(updatedAttrs, originalAttrs, result, false);\n     }\n \n     private static void populate(final Map<String, AttrTO> updatedAttrs,\n-            final Map<String, AttrTO> originalAttrs, final AbstractAttributableMod result,\n+            final Map<String, AttrTO> originalAttrs, final AnyMod result,\n             final boolean virtuals) {\n \n         for (Map.Entry<String, AttrTO> entry : updatedAttrs.entrySet()) {\n@@ -113,14 +106,14 @@ private static void populate(final Map<String, AttrTO> updatedAttrs,\n     }\n \n     private static void diff(\n-            final AbstractAttributableTO updated,\n-            final AbstractAttributableTO original,\n-            final AbstractAttributableMod result,\n+            final AnyTO updated,\n+            final AnyTO original,\n+            final AnyMod result,\n             final boolean incremental) {\n \n         // 1. check same id\n         if (updated.getKey() != original.getKey()) {\n-            throw new IllegalArgumentException(\"AttributableTO's id must be the same\");\n+            throw new IllegalArgumentException(\"AnyTO's id must be the same\");\n         }\n         result.setKey(updated.getKey());\n \n@@ -182,22 +175,18 @@ private static void diff(\n         populate(updatedAttrs, originalAttrs, result, true);\n \n         // 5. resources\n-        if (original instanceof AbstractSubjectTO && updated instanceof AbstractSubjectTO\n-                && result instanceof AbstractSubjectMod) {\n-\n-            Set<String> updatedRes = new HashSet<>(((AbstractSubjectTO) updated).getResources());\n-            Set<String> originalRes = new HashSet<>(((AbstractSubjectTO) original).getResources());\n+        Set<String> updatedRes = new HashSet<>(updated.getResources());\n+        Set<String> originalRes = new HashSet<>(original.getResources());\n \n-            updatedRes.removeAll(originalRes);\n-            ((AbstractSubjectMod) result).getResourcesToAdd().clear();\n-            ((AbstractSubjectMod) result).getResourcesToAdd().addAll(updatedRes);\n+        updatedRes.removeAll(originalRes);\n+        result.getResourcesToAdd().clear();\n+        result.getResourcesToAdd().addAll(updatedRes);\n \n-            originalRes.removeAll(((AbstractSubjectTO) updated).getResources());\n+        originalRes.removeAll(updated.getResources());\n \n-            if (!incremental) {\n-                ((AbstractSubjectMod) result).getResourcesToRemove().clear();\n-                ((AbstractSubjectMod) result).getResourcesToRemove().addAll(originalRes);\n-            }\n+        if (!incremental) {\n+            result.getResourcesToRemove().clear();\n+            result.getResourcesToRemove().addAll(originalRes);\n         }\n     }\n \n@@ -259,60 +248,6 @@ public static UserMod diff(final UserTO updated, final UserTO original, final bo\n         result.getRolesToRemove().addAll(CollectionUtils.subtract(original.getRoles(), updated.getRoles()));\n         result.getRolesToAdd().addAll(CollectionUtils.subtract(updated.getRoles(), original.getRoles()));\n \n-        // 5. memberships\n-        Map<Long, MembershipTO> updatedMembs = updated.getMembershipMap();\n-        Map<Long, MembershipTO> originalMembs = original.getMembershipMap();\n-\n-        for (Map.Entry<Long, MembershipTO> entry : updatedMembs.entrySet()) {\n-            MembershipMod membMod = new MembershipMod();\n-            membMod.setGroup(entry.getValue().getGroupKey());\n-\n-            if (originalMembs.containsKey(entry.getKey())) {\n-                // if memberships are actually same, just make the isEmpty() call below succeed\n-                if (entry.getValue().equals(originalMembs.get(entry.getKey()))) {\n-                    membMod.setGroup(0);\n-                } else {\n-                    diff(entry.getValue(), originalMembs.get(entry.getKey()), membMod, false);\n-                }\n-            } else {\n-                for (AttrTO attr : entry.getValue().getPlainAttrs()) {\n-                    AttrMod attrMod = new AttrMod();\n-                    attrMod.setSchema(attr.getSchema());\n-                    attrMod.getValuesToBeAdded().addAll(attr.getValues());\n-\n-                    if (!attrMod.isEmpty()) {\n-                        membMod.getPlainAttrsToUpdate().add(attrMod);\n-                        membMod.getPlainAttrsToRemove().add(attrMod.getSchema());\n-                    }\n-                }\n-                for (AttrTO attr : entry.getValue().getDerAttrs()) {\n-                    membMod.getDerAttrsToAdd().add(attr.getSchema());\n-                }\n-                for (AttrTO attr : entry.getValue().getVirAttrs()) {\n-                    AttrMod attrMod = new AttrMod();\n-                    attrMod.setSchema(attr.getSchema());\n-                    attrMod.getValuesToBeAdded().addAll(attr.getValues());\n-\n-                    if (!attrMod.isEmpty()) {\n-                        membMod.getVirAttrsToUpdate().add(attrMod);\n-                        membMod.getPlainAttrsToRemove().add(attrMod.getSchema());\n-                    }\n-                }\n-            }\n-\n-            if (!membMod.isEmpty()) {\n-                result.getMembershipsToAdd().add(membMod);\n-            }\n-        }\n-\n-        if (!incremental) {\n-            Set<Long> originalGroups = new HashSet<>(originalMembs.keySet());\n-            originalGroups.removeAll(updatedMembs.keySet());\n-            for (Long groupId : originalGroups) {\n-                result.getMembershipsToRemove().add(originalMembs.get(groupId).getKey());\n-            }\n-        }\n-\n         return result;\n     }\n \n@@ -345,68 +280,13 @@ public static GroupMod diff(final GroupTO updated, final GroupTO original, final\n             result.setName(updated.getName());\n         }\n \n-        // 2. templates\n-        Set<String> updatedTemplates = new HashSet<>(updated.getGPlainAttrTemplates());\n-        Set<String> originalTemplates = new HashSet<>(original.getGPlainAttrTemplates());\n-        if (updatedTemplates.equals(originalTemplates)) {\n-            result.setModGAttrTemplates(false);\n-            result.getGPlainAttrTemplates().clear();\n-        } else {\n-            result.setModGAttrTemplates(true);\n-            result.getGPlainAttrTemplates().addAll(updated.getGPlainAttrTemplates());\n-        }\n-        updatedTemplates = new HashSet<>(updated.getGDerAttrTemplates());\n-        originalTemplates = new HashSet<>(original.getGDerAttrTemplates());\n-        if (updatedTemplates.equals(originalTemplates)) {\n-            result.setModGDerAttrTemplates(false);\n-            result.getGDerAttrTemplates().clear();\n-        } else {\n-            result.setModGDerAttrTemplates(true);\n-            result.getGDerAttrTemplates().addAll(updated.getGDerAttrTemplates());\n-        }\n-        updatedTemplates = new HashSet<>(updated.getGVirAttrTemplates());\n-        originalTemplates = new HashSet<>(original.getGVirAttrTemplates());\n-        if (updatedTemplates.equals(originalTemplates)) {\n-            result.setModGVirAttrTemplates(false);\n-            result.getGVirAttrTemplates().clear();\n-        } else {\n-            result.setModGVirAttrTemplates(true);\n-            result.getGVirAttrTemplates().addAll(updated.getGVirAttrTemplates());\n-        }\n-        updatedTemplates = new HashSet<>(updated.getMPlainAttrTemplates());\n-        originalTemplates = new HashSet<>(original.getMPlainAttrTemplates());\n-        if (updatedTemplates.equals(originalTemplates)) {\n-            result.setModMAttrTemplates(false);\n-            result.getMPlainAttrTemplates().clear();\n-        } else {\n-            result.setModMAttrTemplates(true);\n-            result.getMPlainAttrTemplates().addAll(updated.getMPlainAttrTemplates());\n-        }\n-        updatedTemplates = new HashSet<>(updated.getMDerAttrTemplates());\n-        originalTemplates = new HashSet<>(original.getMDerAttrTemplates());\n-        if (updatedTemplates.equals(originalTemplates)) {\n-            result.setModMDerAttrTemplates(false);\n-            result.getMDerAttrTemplates().clear();\n-        } else {\n-            result.setModMDerAttrTemplates(true);\n-            result.getMDerAttrTemplates().addAll(updated.getMDerAttrTemplates());\n-        }\n-        updatedTemplates = new HashSet<>(updated.getMVirAttrTemplates());\n-        originalTemplates = new HashSet<>(original.getMVirAttrTemplates());\n-        if (updatedTemplates.equals(originalTemplates)) {\n-            result.setModMVirAttrTemplates(false);\n-            result.getMVirAttrTemplates().clear();\n-        } else {\n-            result.setModMVirAttrTemplates(true);\n-            result.getMVirAttrTemplates().addAll(updated.getMVirAttrTemplates());\n-        }\n-\n-        // 3. owner\n+        // 2. owner\n         result.setUserOwner(new ReferenceMod(updated.getUserOwner()));\n         result.setGroupOwner(new ReferenceMod(updated.getGroupOwner()));\n \n-        // 4. dynMembershipCond\n-        result.setDynMembershipCond(updated.getDynMembershipCond());\n+        // 3. dynMembershipCond\n+        result.setADynMembershipCond(updated.getADynMembershipCond());\n+        result.setUDynMembershipCond(updated.getUDynMembershipCond());\n \n         return result;\n     }\n@@ -435,7 +315,7 @@ private static List<AttrTO> getUpdateValues(final Map<String, AttrTO> attrs,\n         return new ArrayList<>(rwattrs.values());\n     }\n \n-    private static <T extends AbstractAttributableTO, K extends AbstractAttributableMod> void apply(final T to,\n+    private static <T extends AnyTO, K extends AnyMod> void apply(final T to,\n             final K mod, final T result) {\n \n         // 1. attributes\n@@ -460,10 +340,8 @@ private static <T extends AbstractAttributableTO, K extends AbstractAttributable\n                 mod.getVirAttrsToRemove(), mod.getVirAttrsToUpdate()));\n \n         // 4. resources\n-        if (result instanceof AbstractSubjectTO && mod instanceof AbstractSubjectMod) {\n-            ((AbstractSubjectTO) result).getResources().removeAll(((AbstractSubjectMod) mod).getResourcesToRemove());\n-            ((AbstractSubjectTO) result).getResources().addAll(((AbstractSubjectMod) mod).getResourcesToAdd());\n-        }\n+        result.getResources().removeAll(mod.getResourcesToRemove());\n+        result.getResources().addAll(mod.getResourcesToAdd());\n     }\n \n     public static UserTO apply(final UserTO userTO, final UserMod userMod) {\n@@ -492,18 +370,6 @@ public static UserTO apply(final UserTO userTO, final UserMod userMod) {\n         result.getRoles().removeAll(userMod.getRolesToRemove());\n         result.getRoles().addAll(userMod.getRolesToAdd());\n \n-        // 4. memberships\n-        Map<Long, MembershipTO> membs = result.getMembershipMap();\n-        for (Long membKey : userMod.getMembershipsToRemove()) {\n-            result.getMemberships().remove(membs.get(membKey));\n-        }\n-        for (MembershipMod membMod : userMod.getMembershipsToAdd()) {\n-            MembershipTO membTO = new MembershipTO();\n-            membTO.setGroupKey(membMod.getGroup());\n-\n-            apply(membTO, membMod, membTO);\n-        }\n-\n         return result;\n     }\n }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AttributableOperations.java"},{"sha":"69739b665dbebc122c15bd18435efffda6a0e2e8","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/CollectionUtils2.java","status":"removed","additions":0,"deletions":153,"changes":153,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FCollectionUtils2.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FCollectionUtils2.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FCollectionUtils2.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,153 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib;\n-\n-import java.util.Collection;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.Set;\n-import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.collections4.SetUtils;\n-import org.apache.commons.collections4.Transformer;\n-\n-public final class CollectionUtils2 {\n-\n-    /**\n-     * Returns the next element in <tt>iterator</tt> or <tt>defaultValue</tt> if the iterator is empty.\n-     *\n-     * @param defaultValue the default value to return if the iterator is empty\n-     * @return the next element of <tt>iterator</tt> or the default value\n-     */\n-    public static <T> T getNext(final Iterator<? extends T> iterator, final T defaultValue) {\n-        return iterator.hasNext() ? iterator.next() : defaultValue;\n-    }\n-\n-    /**\n-     * Returns the first element in <tt>iterable</tt> or <tt>defaultValue</tt> if the iterable is empty.\n-     *\n-     * <p/>\n-     * If no default value is desired (and the caller instead wants a {@link java.util.NoSuchElementException} to be\n-     * thrown), it is recommended that <tt>iterable.iterator().next()}</tt> is used instead.\n-     *\n-     * @param defaultValue the default value to return if the iterable is empty\n-     * @return the first element of <tt>iterable</tt> or the default value\n-     */\n-    public static <T> T getFirst(final Iterable<? extends T> iterable, final T defaultValue) {\n-        return getNext(iterable.iterator(), defaultValue);\n-    }\n-\n-    /**\n-     * Returns the first element in <tt>iterable</tt> or <tt>null</tt> if the iterable is empty.\n-     *\n-     * @return the first element of <tt>iterable</tt> or <tt>null</tt>\n-     */\n-    public static <T> T getFirstOrNull(final Iterable<? extends T> iterable) {\n-        return getNext(iterable.iterator(), null);\n-    }\n-\n-    /**\n-     * Transforms all elements from inputCollection with the given transformer\n-     * and adds them to the outputCollection if the provided predicate is verified.\n-     * <p/>\n-     * If the input collection or transformer is null, there is no change to the\n-     * output collection.\n-     *\n-     * @param <I> the type of object in the input collection\n-     * @param <O> the type of object in the output collection\n-     * @param <R> the output type of the transformer - this extends O.\n-     * @param inputCollection the collection to get the input from, may be null\n-     * @param transformer the transformer to use, may be null\n-     * @param predicate the predicate to use, may be null\n-     * @param outputCollection the collection to output into, may not be null if the inputCollection\n-     * and transformer are not null\n-     * @return the outputCollection with the transformed input added\n-     * @throws NullPointerException if the output collection is null and both, inputCollection and\n-     * transformer are not null\n-     */\n-    public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection,\n-            final Transformer<? super I, ? extends O> transformer, final Predicate<? super I> predicate,\n-            final R outputCollection) {\n-\n-        if (inputCollection != null) {\n-            return collect(inputCollection.iterator(), transformer, predicate, outputCollection);\n-        }\n-        return outputCollection;\n-    }\n-\n-    /**\n-     * Transforms all elements from the inputIterator with the given transformer\n-     * and adds them to the outputCollection.\n-     * <p/>\n-     * If the input iterator or transformer is null, there is no change to the\n-     * output collection.\n-     *\n-     * @param inputIterator the iterator to get the input from, may be null\n-     * @param transformer the transformer to use, may be null\n-     * @param predicate the predicate to use, may be null\n-     * @param outputCollection the collection to output into, may not be null if the inputCollection\n-     * and transformer are not null\n-     * @param <I> the type of object in the input collection\n-     * @param <O> the type of object in the output collection\n-     * @param <R> the output type of the transformer - this extends O.\n-     * @return the outputCollection with the transformed input added\n-     * @throws NullPointerException if the output collection is null and both, inputCollection and\n-     * transformer are not null\n-     */\n-    public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator,\n-            final Transformer<? super I, ? extends O> transformer, final Predicate<? super I> predicate,\n-            final R outputCollection) {\n-\n-        if (inputIterator != null && transformer != null) {\n-            while (inputIterator.hasNext()) {\n-                final I item = inputIterator.next();\n-                final O value = transformer.transform(item);\n-                if (predicate == null || predicate.evaluate(item)) {\n-                    outputCollection.add(value);\n-                }\n-            }\n-        }\n-        return outputCollection;\n-    }\n-\n-    /**\n-     * Gets elements in the input collection that match the predicate.\n-     * <p/>\n-     * A <code>null</code> collection or predicate matches no elements.\n-     *\n-     * @param <C> the type of object the {@link Iterable} contains\n-     * @param input the {@link Iterable} to get the input from, may be null\n-     * @param predicate the predicate to use, may be null\n-     * @return the matches for the predicate in the collection\n-     */\n-    public static <C> Collection<C> find(final Iterable<C> input, final Predicate<? super C> predicate) {\n-        Set<C> result = SetUtils.predicatedSet(new HashSet<C>(), predicate);\n-        if (input != null && predicate != null) {\n-            for (final C o : input) {\n-                if (predicate.evaluate(o)) {\n-                    result.add(o);\n-                }\n-            }\n-        }\n-        return SetUtils.unmodifiableSet(result);\n-    }\n-\n-    private CollectionUtils2() {\n-        // private constructor for static utility class\n-    }\n-}"},{"sha":"3671785f9108ef621ed81b0ec7c57b1b317e23c8","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/AbstractSubjectMod.java","status":"removed","additions":0,"deletions":66,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAbstractSubjectMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAbstractSubjectMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAbstractSubjectMod.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,66 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.mod;\n-\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.HashSet;\n-import java.util.Set;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n-import javax.xml.bind.annotation.XmlType;\n-\n-@XmlType\n-public abstract class AbstractSubjectMod extends AbstractAttributableMod {\n-\n-    private static final long serialVersionUID = -6404459635536484024L;\n-\n-    private String realm;\n-\n-    protected final Set<String> resourcesToAdd = new HashSet<>();\n-\n-    protected final Set<String> resourcesToRemove = new HashSet<>();\n-\n-    public String getRealm() {\n-        return realm;\n-    }\n-\n-    public void setRealm(final String realm) {\n-        this.realm = realm;\n-    }\n-\n-    @XmlElementWrapper(name = \"resourcesToAdd\")\n-    @XmlElement(name = \"resource\")\n-    @JsonProperty(\"resourcesToAdd\")\n-    public Set<String> getResourcesToAdd() {\n-        return resourcesToAdd;\n-    }\n-\n-    @XmlElementWrapper(name = \"resourcesToRemove\")\n-    @XmlElement(name = \"resource\")\n-    @JsonProperty(\"resourcesToRemove\")\n-    public Set<String> getResourcesToRemove() {\n-        return resourcesToRemove;\n-    }\n-\n-    @Override\n-    public boolean isEmpty() {\n-        return super.isEmpty() && resourcesToAdd.isEmpty() && resourcesToRemove.isEmpty();\n-    }\n-\n-}"},{"sha":"ec508c94085d172c02a4fbe57ade10a90dea6642","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/AnyMod.java","status":"renamed","additions":33,"deletions":9,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAnyMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAnyMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAnyMod.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -26,18 +26,15 @@\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n \n-/**\n- * Abstract base class for objects that can have attributes removed, added or updated.\n- *\n- * Attributes can be regular attributes, derived attributes, virtual attributes and resources.\n- */\n @XmlType\n-public abstract class AbstractAttributableMod extends AbstractBaseBean {\n+public abstract class AnyMod extends AbstractBaseBean {\n \n-    private static final long serialVersionUID = 3241118574016303198L;\n+    private static final long serialVersionUID = 7366724481786360591L;\n \n     protected long key;\n \n+    private String realm;\n+\n     protected final Set<AttrMod> plainAttrsToUpdate = new HashSet<>();\n \n     protected final Set<String> plainAttrsToRemove = new HashSet<>();\n@@ -50,6 +47,10 @@ public abstract class AbstractAttributableMod extends AbstractBaseBean {\n \n     protected final Set<String> virAttrsToRemove = new HashSet<>();\n \n+    protected final Set<String> resourcesToAdd = new HashSet<>();\n+\n+    protected final Set<String> resourcesToRemove = new HashSet<>();\n+\n     public long getKey() {\n         return key;\n     }\n@@ -58,6 +59,14 @@ public void setKey(final long key) {\n         this.key = key;\n     }\n \n+    public String getRealm() {\n+        return realm;\n+    }\n+\n+    public void setRealm(final String realm) {\n+        this.realm = realm;\n+    }\n+\n     @XmlElementWrapper(name = \"plainAttrsToRemove\")\n     @XmlElement(name = \"attribute\")\n     @JsonProperty(\"plainAttrsToRemove\")\n@@ -100,12 +109,27 @@ public Set<AttrMod> getVirAttrsToUpdate() {\n         return virAttrsToUpdate;\n     }\n \n+    @XmlElementWrapper(name = \"resourcesToAdd\")\n+    @XmlElement(name = \"resource\")\n+    @JsonProperty(\"resourcesToAdd\")\n+    public Set<String> getResourcesToAdd() {\n+        return resourcesToAdd;\n+    }\n+\n+    @XmlElementWrapper(name = \"resourcesToRemove\")\n+    @XmlElement(name = \"resource\")\n+    @JsonProperty(\"resourcesToRemove\")\n+    public Set<String> getResourcesToRemove() {\n+        return resourcesToRemove;\n+    }\n+\n     /**\n-     * @return true is all backing Sets are empty.\n+     * @return true is all backing collections are empty.\n      */\n     public boolean isEmpty() {\n         return plainAttrsToUpdate.isEmpty() && plainAttrsToRemove.isEmpty()\n                 && derAttrsToAdd.isEmpty() && derAttrsToRemove.isEmpty()\n-                && virAttrsToUpdate.isEmpty() && virAttrsToRemove.isEmpty();\n+                && virAttrsToUpdate.isEmpty() && virAttrsToRemove.isEmpty()\n+                && resourcesToAdd.isEmpty() && resourcesToRemove.isEmpty();\n     }\n }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/AbstractAttributableMod.java"},{"sha":"b51a67bb8df3f4e3c5fbee3aef999cc7fba92d94","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/AnyObjectMod.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAnyObjectMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAnyObjectMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAnyObjectMod.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.mod;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"anyObjectMod\")\n+@XmlType\n+public class AnyObjectMod extends AnyMod {\n+\n+    private static final long serialVersionUID = -3474517624611170097L;\n+\n+    private final List<Long> relationshipsToAdd = new ArrayList<>();\n+\n+    private final List<Long> relationshipsToRemove = new ArrayList<>();\n+\n+    private final List<Long> membershipsToAdd = new ArrayList<>();\n+\n+    private final List<Long> membershipsToRemove = new ArrayList<>();\n+\n+    @XmlElementWrapper(name = \"relationshipsToAdd\")\n+    @XmlElement(name = \"relationship\")\n+    @JsonProperty(\"relationshipsToAdd\")\n+    public List<Long> getRelationshipsToAdd() {\n+        return relationshipsToAdd;\n+    }\n+\n+    @XmlElementWrapper(name = \"urelationshipsToRemove\")\n+    @XmlElement(name = \"urelationship\")\n+    @JsonProperty(\"urelationshipsToRemove\")\n+    public List<Long> getRelationshipsToRemove() {\n+        return relationshipsToRemove;\n+    }\n+\n+    @XmlElementWrapper(name = \"membershipsToAdd\")\n+    @XmlElement(name = \"membership\")\n+    @JsonProperty(\"membershipsToAdd\")\n+    public List<Long> getMembershipsToAdd() {\n+        return membershipsToAdd;\n+    }\n+\n+    @XmlElementWrapper(name = \"membershipsToRemove\")\n+    @XmlElement(name = \"membership\")\n+    @JsonProperty(\"membershipsToRemove\")\n+    public List<Long> getMembershipsToRemove() {\n+        return membershipsToRemove;\n+    }\n+\n+}"},{"sha":"3c948eacf6cb06c67c0ca8ed9b3ecdb8e81448a9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/GroupMod.java","status":"modified","additions":12,"deletions":123,"changes":135,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FGroupMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FGroupMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FGroupMod.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -19,17 +19,12 @@\n package org.apache.syncope.common.lib.mod;\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n \n @XmlRootElement(name = \"groupMod\")\n @XmlType\n-public class GroupMod extends AbstractSubjectMod {\n+public class GroupMod extends AnyMod {\n \n     private static final long serialVersionUID = 7455805264680210747L;\n \n@@ -39,31 +34,9 @@ public class GroupMod extends AbstractSubjectMod {\n \n     private ReferenceMod groupOwner;\n \n-    private boolean modGAttrTemplates;\n+    private String aDynMembershipCond;\n \n-    private final List<String> gPlainAttrTemplates = new ArrayList<>();\n-\n-    private boolean modGDerAttrTemplates;\n-\n-    private final List<String> gDerAttrTemplates = new ArrayList<>();\n-\n-    private boolean modGVirAttrTemplates;\n-\n-    private final List<String> gVirAttrTemplates = new ArrayList<>();\n-\n-    private boolean modMAttrTemplates;\n-\n-    private final List<String> mPlainAttrTemplates = new ArrayList<>();\n-\n-    private boolean modMDerAttrTemplates;\n-\n-    private final List<String> mDerAttrTemplates = new ArrayList<>();\n-\n-    private boolean modMVirAttrTemplates;\n-\n-    private final List<String> mVirAttrTemplates = new ArrayList<>();\n-\n-    private String dynMembershipCond;\n+    private String uDynMembershipCond;\n \n     public String getName() {\n         return name;\n@@ -89,110 +62,26 @@ public void setGroupOwner(final ReferenceMod groupOwner) {\n         this.groupOwner = groupOwner;\n     }\n \n-    public boolean isModGAttrTemplates() {\n-        return modGAttrTemplates;\n-    }\n-\n-    public void setModGAttrTemplates(final boolean modGAttrTemplates) {\n-        this.modGAttrTemplates = modGAttrTemplates;\n-    }\n-\n-    @XmlElementWrapper(name = \"gPlainAttrTemplates\")\n-    @XmlElement(name = \"gAttrTemplate\")\n-    @JsonProperty(\"gPlainAttrTemplates\")\n-    public List<String> getGPlainAttrTemplates() {\n-        return gPlainAttrTemplates;\n-    }\n-\n-    public boolean isModGDerAttrTemplates() {\n-        return modGDerAttrTemplates;\n-    }\n-\n-    public void setModGDerAttrTemplates(final boolean modGDerAttrTemplates) {\n-        this.modGDerAttrTemplates = modGDerAttrTemplates;\n-    }\n-\n-    @XmlElementWrapper(name = \"gDerAttrTemplates\")\n-    @XmlElement(name = \"gDerAttrTemplate\")\n-    @JsonProperty(\"gDerAttrTemplates\")\n-    public List<String> getGDerAttrTemplates() {\n-        return gDerAttrTemplates;\n-    }\n-\n-    public boolean isModGVirAttrTemplates() {\n-        return modGVirAttrTemplates;\n-    }\n-\n-    public void setModGVirAttrTemplates(final boolean modGVirAttrTemplates) {\n-        this.modGVirAttrTemplates = modGVirAttrTemplates;\n-    }\n-\n-    @XmlElementWrapper(name = \"gVirAttrTemplates\")\n-    @XmlElement(name = \"gVirAttrTemplate\")\n-    @JsonProperty(\"gVirAttrTemplates\")\n-    public List<String> getGVirAttrTemplates() {\n-        return gVirAttrTemplates;\n-    }\n-\n-    public boolean isModMAttrTemplates() {\n-        return modMAttrTemplates;\n-    }\n-\n-    public void setModMAttrTemplates(final boolean modMAttrTemplates) {\n-        this.modMAttrTemplates = modMAttrTemplates;\n-    }\n-\n-    @XmlElementWrapper(name = \"mPlainAttrTemplates\")\n-    @XmlElement(name = \"mAttrTemplate\")\n-    @JsonProperty(\"mPlainAttrTemplates\")\n-    public List<String> getMPlainAttrTemplates() {\n-        return mPlainAttrTemplates;\n-    }\n-\n-    public boolean isModMDerAttrTemplates() {\n-        return modMDerAttrTemplates;\n-    }\n-\n-    public void setModMDerAttrTemplates(final boolean modMDerAttrTemplates) {\n-        this.modMDerAttrTemplates = modMDerAttrTemplates;\n-    }\n-\n-    @XmlElementWrapper(name = \"mDerAttrTemplates\")\n-    @XmlElement(name = \"mDerAttrTemplate\")\n-    @JsonProperty(\"mDerAttrTemplates\")\n-    public List<String> getMDerAttrTemplates() {\n-        return mDerAttrTemplates;\n-    }\n-\n-    public boolean isModMVirAttrTemplates() {\n-        return modMVirAttrTemplates;\n-    }\n-\n-    public void setModMVirAttrTemplates(final boolean modMVirAttrTemplates) {\n-        this.modMVirAttrTemplates = modMVirAttrTemplates;\n+    public String getADynMembershipCond() {\n+        return aDynMembershipCond;\n     }\n \n-    @XmlElementWrapper(name = \"mVirAttrTemplates\")\n-    @XmlElement(name = \"mVirAttrTemplate\")\n-    @JsonProperty(\"mVirAttrTemplates\")\n-    public List<String> getMVirAttrTemplates() {\n-        return mVirAttrTemplates;\n+    public void setADynMembershipCond(final String aDynMembershipCond) {\n+        this.aDynMembershipCond = aDynMembershipCond;\n     }\n \n-    public String getDynMembershipCond() {\n-        return dynMembershipCond;\n+    public String getUDynMembershipCond() {\n+        return uDynMembershipCond;\n     }\n \n-    public void setDynMembershipCond(final String dynMembershipCond) {\n-        this.dynMembershipCond = dynMembershipCond;\n+    public void setUDynMembershipCond(final String uDynMembershipCond) {\n+        this.uDynMembershipCond = uDynMembershipCond;\n     }\n \n     @JsonIgnore\n     @Override\n     public boolean isEmpty() {\n         return super.isEmpty() && name == null && userOwner == null && groupOwner == null\n-                && gPlainAttrTemplates.isEmpty() && gDerAttrTemplates.isEmpty() && gVirAttrTemplates.isEmpty()\n-                && mPlainAttrTemplates.isEmpty() && mDerAttrTemplates.isEmpty() && mVirAttrTemplates.isEmpty()\n-                && dynMembershipCond == null;\n+                && aDynMembershipCond == null && uDynMembershipCond == null;\n     }\n }"},{"sha":"d4140110323ddc50b960e4a2bd87ced454b9f066","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/MembershipMod.java","status":"removed","additions":0,"deletions":46,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FMembershipMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FMembershipMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FMembershipMod.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,46 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.mod;\n-\n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-\n-@XmlRootElement\n-@XmlType\n-public class MembershipMod extends AbstractAttributableMod {\n-\n-    private static final long serialVersionUID = 2511869129977331525L;\n-\n-    private long group;\n-\n-    public long getGroup() {\n-        return group;\n-    }\n-\n-    public void setGroup(final long group) {\n-        this.group = group;\n-    }\n-\n-    @JsonIgnore\n-    @Override\n-    public boolean isEmpty() {\n-        return super.isEmpty() && group == 0;\n-    }\n-}"},{"sha":"fe09eeb01e421630338883db4648f623ab62c7c4","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/UserMod.java","status":"modified","additions":37,"deletions":19,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FUserMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FUserMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FUserMod.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,7 +20,9 @@\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n@@ -29,21 +31,25 @@\n \n @XmlRootElement(name = \"userMod\")\n @XmlType\n-public class UserMod extends AbstractSubjectMod {\n+public class UserMod extends AnyMod {\n \n     private static final long serialVersionUID = 3081848906558106204L;\n \n     private String username;\n \n     private String password;\n \n-    private final Set<Long> rolesToAdd = new HashSet<>();\n+    private final List<Long> relationshipsToAdd = new ArrayList<>();\n \n-    private final Set<Long> rolesToRemove = new HashSet<>();\n+    private final List<Long> relationshipsToRemove = new ArrayList<>();\n+\n+    private final List<Long> membershipsToAdd = new ArrayList<>();\n+\n+    private final List<Long> membershipsToRemove = new ArrayList<>();\n \n-    private final Set<MembershipMod> membershipsToAdd = new HashSet<>();\n+    private final Set<Long> rolesToAdd = new HashSet<>();\n \n-    private final Set<Long> membershipsToRemove = new HashSet<>();\n+    private final Set<Long> rolesToRemove = new HashSet<>();\n \n     private StatusMod pwdPropRequest;\n \n@@ -67,34 +73,48 @@ public void setPassword(final String password) {\n         this.password = password;\n     }\n \n-    @XmlElementWrapper(name = \"rolesToAdd\")\n-    @XmlElement(name = \"role\")\n-    @JsonProperty(\"rolesToAdd\")\n-    public Set<Long> getRolesToAdd() {\n-        return rolesToAdd;\n+    @XmlElementWrapper(name = \"relationshipsToAdd\")\n+    @XmlElement(name = \"relationship\")\n+    @JsonProperty(\"relationshipsToAdd\")\n+    public List<Long> getRelationshipsToAdd() {\n+        return relationshipsToAdd;\n     }\n \n-    @XmlElementWrapper(name = \"rolesToRemove\")\n-    @XmlElement(name = \"role\")\n-    @JsonProperty(\"rolesToRemove\")\n-    public Set<Long> getRolesToRemove() {\n-        return rolesToRemove;\n+    @XmlElementWrapper(name = \"urelationshipsToRemove\")\n+    @XmlElement(name = \"urelationship\")\n+    @JsonProperty(\"urelationshipsToRemove\")\n+    public List<Long> getRelationshipsToRemove() {\n+        return relationshipsToRemove;\n     }\n \n     @XmlElementWrapper(name = \"membershipsToAdd\")\n     @XmlElement(name = \"membership\")\n     @JsonProperty(\"membershipsToAdd\")\n-    public Set<MembershipMod> getMembershipsToAdd() {\n+    public List<Long> getMembershipsToAdd() {\n         return membershipsToAdd;\n     }\n \n     @XmlElementWrapper(name = \"membershipsToRemove\")\n     @XmlElement(name = \"membership\")\n     @JsonProperty(\"membershipsToRemove\")\n-    public Set<Long> getMembershipsToRemove() {\n+    public List<Long> getMembershipsToRemove() {\n         return membershipsToRemove;\n     }\n \n+    @XmlElementWrapper(name = \"rolesToAdd\")\n+    @XmlElement(name = \"role\")\n+    @JsonProperty(\"rolesToAdd\")\n+    public Set<Long> getRolesToAdd() {\n+        return rolesToAdd;\n+    }\n+\n+    @XmlElementWrapper(name = \"rolesToRemove\")\n+    @XmlElement(name = \"role\")\n+    @JsonProperty(\"rolesToRemove\")\n+    public Set<Long> getRolesToRemove() {\n+        return rolesToRemove;\n+    }\n+\n     public StatusMod getPwdPropRequest() {\n         return pwdPropRequest;\n     }\n@@ -125,8 +145,6 @@ public boolean isEmpty() {\n         return super.isEmpty()\n                 && password == null\n                 && username == null\n-                && membershipsToAdd.isEmpty()\n-                && membershipsToRemove.isEmpty()\n                 && pwdPropRequest == null\n                 && securityQuestion == null\n                 && securityAnswer == null;"},{"sha":"e6949b61ad7d479e20a628a09f252c327b6f2251","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/report/AbstractAnyReportletConf.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAbstractAnyReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAbstractAnyReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAbstractAnyReportletConf.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.common.lib.types.IntMappingType;\n \n @XmlType\n-public abstract class AbstractSubjectReportletConf extends AbstractReportletConf {\n+public abstract class AbstractAnyReportletConf extends AbstractReportletConf {\n \n     private static final long serialVersionUID = -5388597116592877789L;\n \n@@ -44,11 +44,11 @@ public abstract class AbstractSubjectReportletConf extends AbstractReportletConf\n     @FormAttributeField(schema = IntMappingType.UserVirtualSchema)\n     protected final List<String> virAttrs = new ArrayList<>();\n \n-    public AbstractSubjectReportletConf() {\n+    public AbstractAnyReportletConf() {\n         super();\n     }\n \n-    public AbstractSubjectReportletConf(final String name) {\n+    public AbstractAnyReportletConf(final String name) {\n         super(name);\n     }\n ","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/report/AbstractSubjectReportletConf.java"},{"sha":"861795cc68ccd5356bcfa854e524242d93309d1f","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/report/GroupReportletConf.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FGroupReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FGroupReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FGroupReportletConf.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -29,7 +29,7 @@\n \n @XmlRootElement(name = \"groupReportletConf\")\n @XmlType\n-public class GroupReportletConf extends AbstractSubjectReportletConf {\n+public class GroupReportletConf extends AbstractAnyReportletConf {\n \n     private static final long serialVersionUID = -8488503068032439699L;\n "},{"sha":"72daf7b610ee078e29446a249fee803cd7712850","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/report/UserReportletConf.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FUserReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FUserReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FUserReportletConf.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -29,7 +29,7 @@\n \n @XmlRootElement(name = \"userReportletConf\")\n @XmlType\n-public class UserReportletConf extends AbstractSubjectReportletConf {\n+public class UserReportletConf extends AbstractAnyReportletConf {\n \n     @XmlEnum\n     @XmlType(name = \"userReportletConfFeature\")"},{"sha":"9a68a8da46a75496605d04e6323fceb3040b2ffe","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/SearchableFields.java","status":"modified","additions":10,"deletions":7,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -25,28 +25,31 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n public final class SearchableFields {\n \n     private static final String[] ATTRIBUTES_NOTINCLUDED = {\n         \"serialVersionUID\", \"password\"\n     };\n \n-    public static List<String> get(final SubjectType subjectType) {\n-        return get(subjectType == SubjectType.USER\n+    public static List<String> get(final AnyTypeKind anyTypeKind) {\n+        return get(anyTypeKind == AnyTypeKind.USER\n                 ? UserTO.class\n-                : GroupTO.class);\n+                : anyTypeKind == AnyTypeKind.GROUP\n+                        ? GroupTO.class\n+                        : AnyObjectTO.class);\n     }\n \n-    public static List<String> get(final Class<? extends AbstractAttributableTO> attributableRef) {\n+    public static List<String> get(final Class<? extends AnyTO> anyRef) {\n         final List<String> fieldNames = new ArrayList<>();\n \n         // loop on class and all superclasses searching for field\n-        Class<?> clazz = attributableRef;\n+        Class<?> clazz = anyRef;\n         while (clazz != null && clazz != Object.class) {\n             for (Field field : clazz.getDeclaredFields()) {\n                 if (!ArrayUtils.contains(ATTRIBUTES_NOTINCLUDED, field.getName())"},{"sha":"c724bb0d22d6d83d1975476491a09c18b8f247ea","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractAttributableTO.java","status":"removed","additions":0,"deletions":85,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractAttributableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractAttributableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractAttributableTO.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,85 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.to;\n-\n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.LinkedHashSet;\n-import java.util.Map;\n-import java.util.Set;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n-import javax.xml.bind.annotation.XmlType;\n-\n-@XmlType\n-public abstract class AbstractAttributableTO extends ConnObjectTO {\n-\n-    private static final long serialVersionUID = 4083884098736820255L;\n-\n-    private long key;\n-\n-    private final Set<AttrTO> derAttrs = new LinkedHashSet<>();\n-\n-    private final Set<AttrTO> virAttrs = new LinkedHashSet<>();\n-\n-    public long getKey() {\n-        return key;\n-    }\n-\n-    public void setKey(final long key) {\n-        this.key = key;\n-    }\n-\n-    @XmlElementWrapper(name = \"derAttrs\")\n-    @XmlElement(name = \"attribute\")\n-    @JsonProperty(\"derAttrs\")\n-    public Set<AttrTO> getDerAttrs() {\n-        return derAttrs;\n-    }\n-\n-    @JsonIgnore\n-    public Map<String, AttrTO> getDerAttrMap() {\n-        Map<String, AttrTO> result = new HashMap<>(derAttrs.size());\n-        for (AttrTO attributeTO : derAttrs) {\n-            result.put(attributeTO.getSchema(), attributeTO);\n-        }\n-\n-        return Collections.unmodifiableMap(result);\n-    }\n-\n-    @XmlElementWrapper(name = \"virAttrs\")\n-    @XmlElement(name = \"attribute\")\n-    @JsonProperty(\"virAttrs\")\n-    public Set<AttrTO> getVirAttrs() {\n-        return virAttrs;\n-    }\n-\n-    @JsonIgnore\n-    public Map<String, AttrTO> getVirAttrMap() {\n-        Map<String, AttrTO> result = new HashMap<>(virAttrs.size());\n-        for (AttrTO attributeTO : virAttrs) {\n-            result.put(attributeTO.getSchema(), attributeTO);\n-        }\n-\n-        return Collections.unmodifiableMap(result);\n-    }\n-\n-}"},{"sha":"6d2eb1bb325a77d2c463617e1b2a63b34a48e927","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyObjectTO.java","status":"renamed","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -16,10 +16,15 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.membership;\n+package org.apache.syncope.common.lib.to;\n \n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n \n-public interface MDerSchema extends DerSchema {\n+@XmlRootElement(name = \"anyObject\")\n+@XmlType\n+public class AnyObjectTO extends AnyTO {\n+\n+    private static final long serialVersionUID = 8841697496476959639L;\n \n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/membership/MDerSchema.java"},{"sha":"bac9947272eb9c66dfc30dcbee69e989427b54a0","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyTO.java","status":"added","additions":180,"deletions":0,"changes":180,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlType\n+public abstract class AnyTO extends ConnObjectTO {\n+\n+    private static final long serialVersionUID = -754311920679872084L;\n+\n+    private long key;\n+\n+    private String type;\n+\n+    private String realm;\n+\n+    private String status;\n+\n+    private final Set<AttrTO> derAttrs = new LinkedHashSet<>();\n+\n+    private final Set<AttrTO> virAttrs = new LinkedHashSet<>();\n+\n+    private final Set<String> resources = new HashSet<>();\n+\n+    private final List<PropagationStatus> propagationStatusTOs = new ArrayList<>();\n+\n+    private final List<RelationshipTO> relationships = new ArrayList<>();\n+\n+    private final List<MembershipTO> memberships = new ArrayList<>();\n+\n+    private final List<Long> dynGroups = new ArrayList<>();\n+\n+    public long getKey() {\n+        return key;\n+    }\n+\n+    public void setKey(final long key) {\n+        this.key = key;\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public void setType(final String type) {\n+        this.type = type;\n+    }\n+\n+    public String getRealm() {\n+        return realm;\n+    }\n+\n+    public void setRealm(final String realm) {\n+        this.realm = realm;\n+    }\n+\n+    public String getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(final String status) {\n+        this.status = status;\n+    }\n+\n+    @XmlElementWrapper(name = \"derAttrs\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"derAttrs\")\n+    public Set<AttrTO> getDerAttrs() {\n+        return derAttrs;\n+    }\n+\n+    @JsonIgnore\n+    public Map<String, AttrTO> getDerAttrMap() {\n+        Map<String, AttrTO> result = new HashMap<>(derAttrs.size());\n+        for (AttrTO attributeTO : derAttrs) {\n+            result.put(attributeTO.getSchema(), attributeTO);\n+        }\n+\n+        return Collections.unmodifiableMap(result);\n+    }\n+\n+    @XmlElementWrapper(name = \"virAttrs\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"virAttrs\")\n+    public Set<AttrTO> getVirAttrs() {\n+        return virAttrs;\n+    }\n+\n+    @JsonIgnore\n+    public Map<String, AttrTO> getVirAttrMap() {\n+        Map<String, AttrTO> result = new HashMap<>(virAttrs.size());\n+        for (AttrTO attributeTO : virAttrs) {\n+            result.put(attributeTO.getSchema(), attributeTO);\n+        }\n+\n+        return Collections.unmodifiableMap(result);\n+    }\n+\n+    @XmlElementWrapper(name = \"resources\")\n+    @XmlElement(name = \"resource\")\n+    @JsonProperty(\"resources\")\n+    public Set<String> getResources() {\n+        return resources;\n+    }\n+\n+    @XmlElementWrapper(name = \"propagationStatuses\")\n+    @XmlElement(name = \"propagationStatus\")\n+    @JsonProperty(\"propagationStatuses\")\n+    public List<PropagationStatus> getPropagationStatusTOs() {\n+        return propagationStatusTOs;\n+    }\n+\n+    @XmlElementWrapper(name = \"relationships\")\n+    @XmlElement(name = \"relationship\")\n+    @JsonProperty(\"relationships\")\n+    public List<RelationshipTO> getRelationships() {\n+        return relationships;\n+    }\n+\n+    @XmlElementWrapper(name = \"memberships\")\n+    @XmlElement(name = \"membership\")\n+    @JsonProperty(\"memberships\")\n+    public List<MembershipTO> getMemberships() {\n+        return memberships;\n+    }\n+\n+    @JsonIgnore\n+    public Map<Long, MembershipTO> getMembershipMap() {\n+        Map<Long, MembershipTO> result;\n+\n+        if (getMemberships() == null) {\n+            result = Collections.emptyMap();\n+        } else {\n+            result = new HashMap<>(getMemberships().size());\n+            for (MembershipTO membership : getMemberships()) {\n+                result.put(membership.getRightKey(), membership);\n+            }\n+            result = Collections.unmodifiableMap(result);\n+        }\n+\n+        return result;\n+    }\n+\n+    @XmlElementWrapper(name = \"dynGroups\")\n+    @XmlElement(name = \"role\")\n+    @JsonProperty(\"dynGroups\")\n+    public List<Long> getDynGroups() {\n+        return dynGroups;\n+    }\n+\n+}"},{"sha":"77e1af28ceda233b64878103c54b3f3e2fd244b5","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ConfTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConfTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConfTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConfTO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -23,7 +23,7 @@\n \n @XmlRootElement(name = \"conf\")\n @XmlType\n-public class ConfTO extends AbstractAttributableTO {\n+public class ConfTO extends AnyTO {\n \n     private static final long serialVersionUID = -3825039700228595590L;\n "},{"sha":"873b15d4cd7142c14e2edabb0ed6ebf83a8afef0","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupTO.java","status":"modified","additions":11,"deletions":61,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -19,19 +19,13 @@\n package org.apache.syncope.common.lib.to;\n \n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n \n @XmlRootElement(name = \"group\")\n @XmlType\n @JsonIgnoreProperties({ \"displayName\" })\n-public class GroupTO extends AbstractSubjectTO {\n+public class GroupTO extends AnyTO {\n \n     private static final long serialVersionUID = -7785920258290147542L;\n \n@@ -41,19 +35,9 @@ public class GroupTO extends AbstractSubjectTO {\n \n     private Long groupOwner;\n \n-    private final List<String> gPlainAttrTemplates = new ArrayList<>();\n-\n-    private final List<String> gDerAttrTemplates = new ArrayList<>();\n-\n-    private final List<String> gVirAttrTemplates = new ArrayList<>();\n-\n-    private final List<String> mPlainAttrTemplates = new ArrayList<>();\n+    private String aDynMembershipCond;\n \n-    private final List<String> mDerAttrTemplates = new ArrayList<>();\n-\n-    private final List<String> mVirAttrTemplates = new ArrayList<>();\n-\n-    private String dynMembershipCond;\n+    private String uDynMembershipCond;\n \n     public String getName() {\n         return name;\n@@ -79,54 +63,20 @@ public void setGroupOwner(final Long groupOwner) {\n         this.groupOwner = groupOwner;\n     }\n \n-    @XmlElementWrapper(name = \"gPlainAttrTemplates\")\n-    @XmlElement(name = \"gPlainAttrTemplate\")\n-    @JsonProperty(\"gPlainAttrTemplates\")\n-    public List<String> getGPlainAttrTemplates() {\n-        return gPlainAttrTemplates;\n-    }\n-\n-    @XmlElementWrapper(name = \"gDerAttrTemplates\")\n-    @XmlElement(name = \"gDerAttrTemplate\")\n-    @JsonProperty(\"gDerAttrTemplates\")\n-    public List<String> getGDerAttrTemplates() {\n-        return gDerAttrTemplates;\n-    }\n-\n-    @XmlElementWrapper(name = \"gVirAttrTemplates\")\n-    @XmlElement(name = \"gVirAttrTemplate\")\n-    @JsonProperty(\"gVirAttrTemplates\")\n-    public List<String> getGVirAttrTemplates() {\n-        return gVirAttrTemplates;\n-    }\n-\n-    @XmlElementWrapper(name = \"mPlainAttrTemplates\")\n-    @XmlElement(name = \"mPlainAttrTemplate\")\n-    @JsonProperty(\"mPlainAttrTemplates\")\n-    public List<String> getMPlainAttrTemplates() {\n-        return mPlainAttrTemplates;\n-    }\n-\n-    @XmlElementWrapper(name = \"mDerAttrTemplates\")\n-    @XmlElement(name = \"mDerAttrTemplate\")\n-    @JsonProperty(\"mDerAttrTemplates\")\n-    public List<String> getMDerAttrTemplates() {\n-        return mDerAttrTemplates;\n+    public String getADynMembershipCond() {\n+        return aDynMembershipCond;\n     }\n \n-    @XmlElementWrapper(name = \"mVirAttrTemplates\")\n-    @XmlElement(name = \"mVirAttrTemplate\")\n-    @JsonProperty(\"mVirAttrTemplates\")\n-    public List<String> getMVirAttrTemplates() {\n-        return mVirAttrTemplates;\n+    public void setADynMembershipCond(final String aDynMembershipCond) {\n+        this.aDynMembershipCond = aDynMembershipCond;\n     }\n \n-    public String getDynMembershipCond() {\n-        return dynMembershipCond;\n+    public String getUDynMembershipCond() {\n+        return uDynMembershipCond;\n     }\n \n-    public void setDynMembershipCond(final String dynMembershipCond) {\n-        this.dynMembershipCond = dynMembershipCond;\n+    public void setUDynMembershipCond(final String uDynMembershipCond) {\n+        this.uDynMembershipCond = uDynMembershipCond;\n     }\n \n }"},{"sha":"cf5dc719a993d6e34b058b5f7f02f499ab1d7362","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/MappingTO.java","status":"modified","additions":21,"deletions":41,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -36,19 +36,19 @@ public class MappingTO extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 8447688036282611118L;\n \n-    private String accountLink;\n+    private String connObjectLink;\n \n     private final List<MappingItemTO> items = new ArrayList<>();\n \n-    public String getAccountLink() {\n-        return accountLink;\n+    public String getConnObjectLink() {\n+        return connObjectLink;\n     }\n \n-    public void setAccountLink(final String accountLink) {\n-        this.accountLink = accountLink;\n+    public void setConnObjectLink(final String connObjectLink) {\n+        this.connObjectLink = connObjectLink;\n     }\n \n-    public MappingItemTO getAccountIdItem() {\n+    public MappingItemTO getConnObjectKeyItem() {\n         return CollectionUtils.find(getItems(), new Predicate<MappingItemTO>() {\n \n             @Override\n@@ -58,48 +58,28 @@ public boolean evaluate(final MappingItemTO item) {\n         });\n     }\n \n-    protected boolean addAccountIdItem(final MappingItemTO accountIdItem) {\n-        if (IntMappingType.UserVirtualSchema == accountIdItem.getIntMappingType()\n-                || IntMappingType.GroupVirtualSchema == accountIdItem.getIntMappingType()\n-                || IntMappingType.MembershipVirtualSchema == accountIdItem.getIntMappingType()\n-                || IntMappingType.Password == accountIdItem.getIntMappingType()) {\n+    protected boolean addConnObjectKeyItem(final MappingItemTO connObjectItem) {\n+        if (IntMappingType.UserVirtualSchema == connObjectItem.getIntMappingType()\n+                || IntMappingType.GroupVirtualSchema == connObjectItem.getIntMappingType()\n+                || IntMappingType.AnyVirtualSchema == connObjectItem.getIntMappingType()\n+                || IntMappingType.Password == connObjectItem.getIntMappingType()) {\n \n             throw new IllegalArgumentException(\"Virtual attributes cannot be set as accountId\");\n         }\n-        if (IntMappingType.Password == accountIdItem.getIntMappingType()) {\n+        if (IntMappingType.Password == connObjectItem.getIntMappingType()) {\n             throw new IllegalArgumentException(\"Password attributes cannot be set as accountId\");\n         }\n \n-        accountIdItem.setExtAttrName(accountIdItem.getExtAttrName());\n-        accountIdItem.setAccountid(true);\n+        connObjectItem.setExtAttrName(connObjectItem.getExtAttrName());\n+        connObjectItem.setAccountid(true);\n \n-        return this.addItem(accountIdItem);\n+        return this.add(connObjectItem);\n     }\n \n-    public boolean setAccountIdItem(final MappingItemTO accountIdItem) {\n-        return accountIdItem == null\n-                ? removeItem(getAccountIdItem())\n-                : addAccountIdItem(accountIdItem);\n-    }\n-\n-    public MappingItemTO getPasswordItem() {\n-        return CollectionUtils.find(getItems(), new Predicate<MappingItemTO>() {\n-\n-            @Override\n-            public boolean evaluate(final MappingItemTO item) {\n-                return item.isPassword();\n-            }\n-        });\n-    }\n-\n-    public boolean setPasswordItem(final MappingItemTO passwordItem) {\n-        if (passwordItem == null) {\n-            return this.removeItem(getPasswordItem());\n-        } else {\n-            passwordItem.setExtAttrName(null);\n-            passwordItem.setPassword(true);\n-            return addItem(passwordItem);\n-        }\n+    public boolean setConnObjectKeyItem(final MappingItemTO connObjectKeyItem) {\n+        return connObjectKeyItem == null\n+                ? remove(getConnObjectKeyItem())\n+                : addConnObjectKeyItem(connObjectKeyItem);\n     }\n \n     @XmlElementWrapper(name = \"items\")\n@@ -109,11 +89,11 @@ public List<MappingItemTO> getItems() {\n         return items;\n     }\n \n-    public boolean addItem(final MappingItemTO item) {\n+    public boolean add(final MappingItemTO item) {\n         return item == null ? false : this.items.contains(item) || this.items.add(item);\n     }\n \n-    public boolean removeItem(final MappingItemTO item) {\n+    public boolean remove(final MappingItemTO item) {\n         return this.items.remove(item);\n     }\n }"},{"sha":"5c435e4ea790923c5e059a88fb1ae2c4de86db49","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/MembershipTO.java","status":"modified","additions":4,"deletions":9,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -23,20 +23,15 @@\n \n @XmlRootElement(name = \"membership\")\n @XmlType\n-public class MembershipTO extends AbstractAttributableTO {\n+public class MembershipTO extends RelationshipTO {\n \n     private static final long serialVersionUID = 5992828670273935861L;\n \n-    private long groupKey;\n-\n     private String groupName;\n \n-    public long getGroupKey() {\n-        return groupKey;\n-    }\n-\n-    public void setGroupKey(final long groupId) {\n-        this.groupKey = groupId;\n+    @Override\n+    public String getRightType() {\n+        return \"group\";\n     }\n \n     public String getGroupName() {"},{"sha":"662a46523decdb663b02adc4740f87721f85e860","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/NotificationTO.java","status":"modified","additions":5,"deletions":17,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,7 +20,9 @@\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n@@ -39,9 +41,7 @@ public class NotificationTO extends AbstractBaseBean {\n \n     private final List<String> events = new ArrayList<>();\n \n-    private String userAbout;\n-\n-    private String groupAbout;\n+    private final Map<String, String> abouts = new HashMap<>();\n \n     private String recipients;\n \n@@ -63,20 +63,8 @@ public class NotificationTO extends AbstractBaseBean {\n \n     private boolean active;\n \n-    public String getUserAbout() {\n-        return userAbout;\n-    }\n-\n-    public void setUserAbout(final String userAbout) {\n-        this.userAbout = userAbout;\n-    }\n-\n-    public String getGroupAbout() {\n-        return groupAbout;\n-    }\n-\n-    public void setGroupAbout(final String groupAbout) {\n-        this.groupAbout = groupAbout;\n+    public Map<String, String> getAbouts() {\n+        return abouts;\n     }\n \n     @XmlElementWrapper(name = \"events\")"},{"sha":"0ebfb704334b4e373f94ca7557f858a7aa3d5588","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/PropagationTaskTO.java","status":"modified","additions":21,"deletions":22,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationTaskTO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,9 +20,9 @@\n \n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PropagationMode;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.common.lib.types.SubjectType;\n \n @XmlRootElement(name = \"propagationTask\")\n @XmlType\n@@ -34,34 +34,34 @@ public class PropagationTaskTO extends AbstractTaskTO {\n \n     private ResourceOperation propagationOperation;\n \n-    private String accountId;\n+    private String connObjectKey;\n \n-    private String oldAccountId;\n+    private String oldConnObjectKey;\n \n     private String xmlAttributes;\n \n     private String resource;\n \n     private String objectClassName;\n \n-    private SubjectType subjectType;\n+    private AnyTypeKind anyTypeKind;\n \n-    private Long subjectId;\n+    private Long anyKey;\n \n-    public String getAccountId() {\n-        return accountId;\n+    public String getConnObjectKey() {\n+        return connObjectKey;\n     }\n \n-    public void setAccountId(final String accountId) {\n-        this.accountId = accountId;\n+    public void setConnObjectKey(final String connObjectKey) {\n+        this.connObjectKey = connObjectKey;\n     }\n \n-    public String getOldAccountId() {\n-        return oldAccountId;\n+    public String getOldConnObjectKey() {\n+        return oldConnObjectKey;\n     }\n \n-    public void setOldAccountId(final String oldAccountId) {\n-        this.oldAccountId = oldAccountId;\n+    public void setOldConnObjectKey(final String oldConnObjectKey) {\n+        this.oldConnObjectKey = oldConnObjectKey;\n     }\n \n     public PropagationMode getPropagationMode() {\n@@ -85,7 +85,6 @@ public ResourceOperation getPropagationOperation() {\n     }\n \n     public void setPropagationOperation(final ResourceOperation propagationOperation) {\n-\n         this.propagationOperation = propagationOperation;\n     }\n \n@@ -105,19 +104,19 @@ public void setObjectClassName(final String objectClassName) {\n         this.objectClassName = objectClassName;\n     }\n \n-    public SubjectType getSubjectType() {\n-        return subjectType;\n+    public AnyTypeKind getAnyTypeKind() {\n+        return anyTypeKind;\n     }\n \n-    public void setSubjectType(final SubjectType subjectType) {\n-        this.subjectType = subjectType;\n+    public void setAnyTypeKind(final AnyTypeKind anyTypeKind) {\n+        this.anyTypeKind = anyTypeKind;\n     }\n \n-    public Long getSubjectId() {\n-        return subjectId;\n+    public Long getAnyKey() {\n+        return anyKey;\n     }\n \n-    public void setSubjectId(final Long subjectId) {\n-        this.subjectId = subjectId;\n+    public void setAnyKey(final Long anyKey) {\n+        this.anyKey = anyKey;\n     }\n }"},{"sha":"c4ff7404e3eaa7c5a3ccf3ae5d2b38a50702a752","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ProvisionTO.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisionTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisionTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisionTO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+public class ProvisionTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 8298910216218007927L;\n+\n+    private long key;\n+\n+    private String anyType;\n+\n+    private String objectClass;\n+\n+    private String syncToken;\n+\n+    private MappingTO mapping;\n+\n+    public long getKey() {\n+        return key;\n+    }\n+\n+    public void setKey(final long key) {\n+        this.key = key;\n+    }\n+\n+    public String getAnyType() {\n+        return anyType;\n+    }\n+\n+    public void setAnyType(final String anyType) {\n+        this.anyType = anyType;\n+    }\n+\n+    public String getObjectClass() {\n+        return objectClass;\n+    }\n+\n+    public void setObjectClass(final String objectClass) {\n+        this.objectClass = objectClass;\n+    }\n+\n+    public String getSyncToken() {\n+        return syncToken;\n+    }\n+\n+    public void setSyncToken(final String syncToken) {\n+        this.syncToken = syncToken;\n+    }\n+\n+    public MappingTO getMapping() {\n+        return mapping;\n+    }\n+\n+    public void setMapping(final MappingTO mapping) {\n+        this.mapping = mapping;\n+    }\n+\n+}"},{"sha":"e1839afba41325b7f8bd23e844d88edaa9b5b5e9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/PushTaskTO.java","status":"modified","additions":5,"deletions":16,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPushTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPushTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPushTaskTO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import java.util.HashMap;\n+import java.util.Map;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n \n@@ -27,23 +29,10 @@ public class PushTaskTO extends AbstractProvisioningTaskTO {\n \n     private static final long serialVersionUID = -2143537546915809018L;\n \n-    private String userFilter;\n+    private final Map<String, String> filters = new HashMap<>();\n \n-    private String groupFilter;\n-\n-    public String getUserFilter() {\n-        return userFilter;\n-    }\n-\n-    public void setUserFilter(final String filter) {\n-        this.userFilter = filter;\n+    public Map<String, String> getFilters() {\n+        return filters;\n     }\n \n-    public String getGroupFilter() {\n-        return groupFilter;\n-    }\n-\n-    public void setGroupFilter(final String filter) {\n-        this.groupFilter = filter;\n-    }\n }"},{"sha":"2585b2b94451b81ea4aa2587450fe30a3c367fa9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RelationshipTO.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelationshipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelationshipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelationshipTO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"relationship\")\n+@XmlType\n+public class RelationshipTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 360672942026613929L;\n+\n+    private long key;\n+\n+    private String leftType;\n+\n+    private long leftKey;\n+\n+    private String rightType;\n+\n+    private long rightKey;\n+\n+    public long getKey() {\n+        return key;\n+    }\n+\n+    public void setKey(final long key) {\n+        this.key = key;\n+    }\n+\n+    public String getLeftType() {\n+        return leftType;\n+    }\n+\n+    public void setLeftType(final String leftType) {\n+        this.leftType = leftType;\n+    }\n+\n+    public long getLeftKey() {\n+        return leftKey;\n+    }\n+\n+    public void setLeftKey(final long leftKey) {\n+        this.leftKey = leftKey;\n+    }\n+\n+    public String getRightType() {\n+        return rightType;\n+    }\n+\n+    public void setRightType(final String rightType) {\n+        this.rightType = rightType;\n+    }\n+\n+    public long getRightKey() {\n+        return rightKey;\n+    }\n+\n+    public void setRightKey(final long rightKey) {\n+        this.rightKey = rightKey;\n+    }\n+\n+}"},{"sha":"fb971139fdc8b9c2075ad34570fd037b61d55abc","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ResourceTO.java","status":"modified","additions":22,"deletions":35,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n import java.util.HashSet;\n@@ -27,6 +28,8 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.PropagationMode;\n import org.apache.syncope.common.lib.types.TraceLevel;\n@@ -52,9 +55,7 @@ public class ResourceTO extends AbstractAnnotatedBean {\n      */\n     private String connectorDisplayName;\n \n-    private MappingTO umapping;\n-\n-    private MappingTO gmapping;\n+    private final List<ProvisionTO> provisions = new ArrayList<>();\n \n     private boolean propagationPrimary;\n \n@@ -132,22 +133,6 @@ public void setConnectorDisplayName(final String connectorDisplayName) {\n         this.connectorDisplayName = connectorDisplayName;\n     }\n \n-    public MappingTO getUmapping() {\n-        return umapping;\n-    }\n-\n-    public void setUmapping(final MappingTO umapping) {\n-        this.umapping = umapping;\n-    }\n-\n-    public MappingTO getGmapping() {\n-        return gmapping;\n-    }\n-\n-    public void setGmapping(final MappingTO gmapping) {\n-        this.gmapping = gmapping;\n-    }\n-\n     public boolean isPropagationPrimary() {\n         return propagationPrimary;\n     }\n@@ -228,6 +213,24 @@ public void setSyncPolicy(final Long syncPolicy) {\n         this.syncPolicy = syncPolicy;\n     }\n \n+    @JsonIgnore\n+    public ProvisionTO getProvision(final String anyType) {\n+        return CollectionUtils.find(provisions, new Predicate<ProvisionTO>() {\n+\n+            @Override\n+            public boolean evaluate(final ProvisionTO provisionTO) {\n+                return anyType != null && anyType.equals(provisionTO.getAnyType());\n+            }\n+        });\n+    }\n+\n+    @XmlElementWrapper(name = \"provisions\")\n+    @XmlElement(name = \"provision\")\n+    @JsonProperty(\"provisions\")\n+    public List<ProvisionTO> getProvisions() {\n+        return provisions;\n+    }\n+\n     @XmlElementWrapper(name = \"connConfProperties\")\n     @XmlElement(name = \"property\")\n     @JsonProperty(\"connConfProperties\")\n@@ -243,22 +246,6 @@ public void setSyncTraceLevel(final TraceLevel syncTraceLevel) {\n         this.syncTraceLevel = syncTraceLevel;\n     }\n \n-    public String getUsyncToken() {\n-        return usyncToken;\n-    }\n-\n-    public void setUsyncToken(final String syncToken) {\n-        this.usyncToken = syncToken;\n-    }\n-\n-    public String getRsyncToken() {\n-        return rsyncToken;\n-    }\n-\n-    public void setRsyncToken(final String syncToken) {\n-        this.rsyncToken = syncToken;\n-    }\n-\n     @XmlElementWrapper(name = \"propagationActionsClassNames\")\n     @XmlElement(name = \"propagationActionsClassName\")\n     @JsonProperty(\"propagationActionsClassNames\")"},{"sha":"49745055414539cc9513d97ec3efd83a38b92761","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/SyncTaskTO.java","status":"modified","additions":5,"deletions":17,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncTaskTO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import java.util.HashMap;\n+import java.util.Map;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n \n@@ -29,9 +31,7 @@ public class SyncTaskTO extends AbstractProvisioningTaskTO {\n \n     private String destinationRealm;\n \n-    private UserTO userTemplate;\n-\n-    private GroupTO groupTemplate;\n+    private final Map<String, AnyTO> templates = new HashMap<>();\n \n     private boolean fullReconciliation;\n \n@@ -43,20 +43,8 @@ public void setDestinationRealm(final String destinationRealm) {\n         this.destinationRealm = destinationRealm;\n     }\n \n-    public UserTO getUserTemplate() {\n-        return userTemplate;\n-    }\n-\n-    public void setUserTemplate(final UserTO userTemplate) {\n-        this.userTemplate = userTemplate;\n-    }\n-\n-    public GroupTO getGroupTemplate() {\n-        return groupTemplate;\n-    }\n-\n-    public void setGroupTemplate(final GroupTO groupTemplate) {\n-        this.groupTemplate = groupTemplate;\n+    public Map<String, AnyTO> getTemplates() {\n+        return templates;\n     }\n \n     public boolean isFullReconciliation() {"},{"sha":"243a79f2d879211b34b6ae52d1c9bf51b6a99297","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/SyncopeTO.java","status":"modified","additions":25,"deletions":5,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncopeTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncopeTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncopeTO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -43,12 +43,16 @@ public class SyncopeTO extends AbstractBaseBean {\n \n     private final List<String> connIdLocations = new ArrayList<>();\n \n-    private String attributableTransformer;\n+    private String anyTransformer;\n+\n+    private String anyObjectWorkflowAdapter;\n \n     private String userWorkflowAdapter;\n \n     private String groupWorkflowAdapter;\n \n+    private String anyObjectProvisioningManager;\n+\n     private String userProvisioningManager;\n \n     private String groupProvisioningManager;\n@@ -96,8 +100,12 @@ public List<String> getConnIdLocations() {\n         return connIdLocations;\n     }\n \n-    public String getAttributableTransformer() {\n-        return attributableTransformer;\n+    public String getAnyTransformer() {\n+        return anyTransformer;\n+    }\n+\n+    public String getAnyObjectWorkflowAdapter() {\n+        return anyObjectWorkflowAdapter;\n     }\n \n     public String getUserWorkflowAdapter() {\n@@ -108,6 +116,10 @@ public String getGroupWorkflowAdapter() {\n         return groupWorkflowAdapter;\n     }\n \n+    public String getAnyObjectProvisioningManager() {\n+        return anyObjectProvisioningManager;\n+    }\n+\n     public String getUserProvisioningManager() {\n         return userProvisioningManager;\n     }\n@@ -199,8 +211,12 @@ public void setPwdResetRequiringSecurityQuestions(final boolean pwdResetRequirin\n         this.pwdResetRequiringSecurityQuestions = pwdResetRequiringSecurityQuestions;\n     }\n \n-    public void setAttributableTransformer(final String attributableTransformer) {\n-        this.attributableTransformer = attributableTransformer;\n+    public void setAnyTransformer(final String anyTransformer) {\n+        this.anyTransformer = anyTransformer;\n+    }\n+\n+    public void setAnyObjectWorkflowAdapter(final String anyObjectWorkflowAdapter) {\n+        this.anyObjectWorkflowAdapter = anyObjectWorkflowAdapter;\n     }\n \n     public void setUserWorkflowAdapter(final String userWorkflowAdapter) {\n@@ -211,6 +227,10 @@ public void setGroupWorkflowAdapter(final String groupWorkflowAdapter) {\n         this.groupWorkflowAdapter = groupWorkflowAdapter;\n     }\n \n+    public void setAnyObjectProvisioningManager(final String anyObjectProvisioningManager) {\n+        this.anyObjectProvisioningManager = anyObjectProvisioningManager;\n+    }\n+\n     public void setUserProvisioningManager(final String userProvisioningManager) {\n         this.userProvisioningManager = userProvisioningManager;\n     }"},{"sha":"5de7b01df70e87c709b4484f95995c6e7fb7a489","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java","status":"modified","additions":1,"deletions":50,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,15 +18,11 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n-import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.lang.reflect.Field;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.Date;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n@@ -36,7 +32,7 @@\n \n @XmlRootElement(name = \"user\")\n @XmlType\n-public class UserTO extends AbstractSubjectTO {\n+public class UserTO extends AnyTO {\n \n     private static final long serialVersionUID = 7791304495192615740L;\n \n@@ -46,12 +42,6 @@ public class UserTO extends AbstractSubjectTO {\n \n     private final List<Long> dynRoles = new ArrayList<>();\n \n-    private final List<MembershipTO> memberships = new ArrayList<>();\n-\n-    private final List<Long> dynGroups = new ArrayList<>();\n-\n-    private String status;\n-\n     private String token;\n \n     private Date tokenExpireTime;\n@@ -90,45 +80,6 @@ public List<Long> getDynRoles() {\n         return dynRoles;\n     }\n \n-    @XmlElementWrapper(name = \"memberships\")\n-    @XmlElement(name = \"membership\")\n-    @JsonProperty(\"memberships\")\n-    public List<MembershipTO> getMemberships() {\n-        return memberships;\n-    }\n-\n-    @JsonIgnore\n-    public Map<Long, MembershipTO> getMembershipMap() {\n-        Map<Long, MembershipTO> result;\n-\n-        if (getMemberships() == null) {\n-            result = Collections.emptyMap();\n-        } else {\n-            result = new HashMap<>(getMemberships().size());\n-            for (MembershipTO membership : getMemberships()) {\n-                result.put(membership.getGroupKey(), membership);\n-            }\n-            result = Collections.unmodifiableMap(result);\n-        }\n-\n-        return result;\n-    }\n-\n-    @XmlElementWrapper(name = \"dynGroups\")\n-    @XmlElement(name = \"role\")\n-    @JsonProperty(\"dynGroups\")\n-    public List<Long> getDynGroups() {\n-        return dynGroups;\n-    }\n-\n-    public String getStatus() {\n-        return status;\n-    }\n-\n-    public void setStatus(final String status) {\n-        this.status = status;\n-    }\n-\n     public String getToken() {\n         return token;\n     }"},{"sha":"c7b4e47ed5dac3557ed304ca50f3b30ff09b8202","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/AnyTypeKind.java","status":"renamed","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAnyTypeKind.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAnyTypeKind.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAnyTypeKind.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -21,11 +21,10 @@\n import javax.xml.bind.annotation.XmlEnum;\n \n @XmlEnum\n-public enum AttributableType {\n+public enum AnyTypeKind {\n \n     USER,\n     GROUP,\n-    MEMBERSHIP,\n-    CONFIGURATION;\n+    ANY_OBJECT;\n \n }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/AttributableType.java"},{"sha":"81caa77ff47f42ce63217ddb5dcacb3f537d3e6e","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/Entitlement.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -80,6 +80,18 @@ public final class Entitlement {\n \n     public static final String GROUP_DELETE = \"GROUP_DELETE\";\n \n+    public static final String ANY_OBJECT_SEARCH = \"ANY_OBJECT_SEARCH\";\n+\n+    public static final String ANY_OBJECT_LIST = \"ANY_OBJECT_LIST\";\n+\n+    public static final String ANY_OBJECT_CREATE = \"ANY_OBJECT_CREATE\";\n+\n+    public static final String ANY_OBJECT_READ = \"ANY_OBJECT_READ\";\n+\n+    public static final String ANY_OBJECT_UPDATE = \"ANY_OBJECT_UPDATE\";\n+\n+    public static final String ANY_OBJECT_DELETE = \"ANY_OBJECT_DELETE\";\n+\n     public static final String RESOURCE_LIST = \"RESOURCE_LIST\";\n \n     public static final String RESOURCE_CREATE = \"RESOURCE_CREATE\";"},{"sha":"2192bd5c00288de8e54c26ed06fe1b2f8c77b8ac","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/EntityViolationType.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -27,20 +27,13 @@ public enum EntityViolationType {\n     InvalidAccountPolicy(\"org.apache.syncope.core.persistence.validation.accountpolicy\"),\n     InvalidConnInstanceLocation(\"org.apache.syncope.core.persistence.validation.conninstance.location\"),\n     InvalidConnPoolConf(\"org.apache.syncope.core.persistence.validation.conninstance.poolConf\"),\n-    InvalidCPlainSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.cPlainSchema\"),\n     InvalidMapping(\"org.apache.syncope.core.persistence.validation.mapping\"),\n-    InvalidMPlainSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.mPlainSchema\"),\n-    InvalidMDerSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.mDerSchema\"),\n-    InvalidMVirSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.mVirSchema\"),\n     InvalidName(\"org.apache.syncope.core.persistence.validation.name\"),\n     InvalidNotification(\"org.apache.syncope.core.persistence.validation.notification\"),\n     InvalidPassword(\"org.apache.syncope.core.persistence.validation.user.password\"),\n     InvalidPasswordPolicy(\"org.apache.syncope.core.persistence.validation.passwordpolicy\"),\n     InvalidPolicy(\"org.apache.syncope.core.persistence.validation.policy\"),\n     InvalidPropagationTask(\"org.apache.syncope.core.persistence.validation.propagationtask\"),\n-    InvalidGPlainSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.gPlainSchema\"),\n-    InvalidGDerSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.gDerSchema\"),\n-    InvalidGVirSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.gVirSchema\"),\n     InvalidRealm(\"org.apache.syncope.core.persistence.validation.realm\"),\n     InvalidReport(\"org.apache.syncope.core.persistence.validation.report\"),\n     InvalidResource(\"org.apache.syncope.core.persistence.validation.externalresource\"),\n@@ -51,9 +44,9 @@ public enum EntityViolationType {\n     InvalidSchedTask(\"org.apache.syncope.core.persistence.validation.schedtask\"),\n     InvalidSyncTask(\"org.apache.syncope.core.persistence.validation.synctask\"),\n     InvalidSyncPolicy(\"org.apache.syncope.core.persistence.validation.syncpolicy\"),\n-    InvalidUPlainSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.uPlainSchema\"),\n-    InvalidUDerSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.derSchema\"),\n-    InvalidUVirSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.uVirSchema\"),\n+    InvalidPlainSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.plainSchema\"),\n+    InvalidDerSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.derSchema\"),\n+    InvalidVirSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.virSchema\"),\n     InvalidUsername(\"org.apache.syncope.core.persistence.validation.user.username\"),\n     InvalidValueList(\"org.apache.syncope.core.persistence.validation.attr.valueList\"),\n     MoreThanOneNonNull(\"org.apache.syncope.core.persistence.validation.attrvalue.moreThanOneNonNull\");"},{"sha":"1b50f43918d0ac90c0a77f858df460caf7f2e8ba","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/IntMappingType.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIntMappingType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIntMappingType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIntMappingType.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -35,71 +35,71 @@ public enum IntMappingType {\n     // -------------------------\n     // User attribute types (the same in UserMappingType)\n     // -------------------------\n-    UserPlainSchema(AttributableType.USER),\n-    UserDerivedSchema(AttributableType.USER),\n-    UserVirtualSchema(AttributableType.USER),\n-    UserId(AttributableType.USER),\n-    Username(AttributableType.USER),\n-    Password(AttributableType.USER),\n+    UserPlainSchema(AnyTypeKind.USER),\n+    UserDerivedSchema(AnyTypeKind.USER),\n+    UserVirtualSchema(AnyTypeKind.USER),\n+    UserId(AnyTypeKind.USER),\n+    Username(AnyTypeKind.USER),\n+    Password(AnyTypeKind.USER),\n     // -------------------------\n     // Group attribute types (the same in GroupMappingType)\n     // -------------------------\n-    GroupPlainSchema(AttributableType.GROUP),\n-    GroupDerivedSchema(AttributableType.GROUP),\n-    GroupVirtualSchema(AttributableType.GROUP),\n-    GroupId(AttributableType.GROUP),\n-    GroupName(AttributableType.GROUP),\n-    GroupOwnerSchema(AttributableType.GROUP),\n+    GroupPlainSchema(AnyTypeKind.GROUP),\n+    GroupDerivedSchema(AnyTypeKind.GROUP),\n+    GroupVirtualSchema(AnyTypeKind.GROUP),\n+    GroupId(AnyTypeKind.GROUP),\n+    GroupName(AnyTypeKind.GROUP),\n+    GroupOwnerSchema(AnyTypeKind.GROUP),\n     // -------------------------\n-    // Membership attribute types (the same in MembershipMappingType)\n+    // Any attribute types (the same in AnyMappingType)\n     // -------------------------\n-    MembershipPlainSchema(AttributableType.MEMBERSHIP),\n-    MembershipDerivedSchema(AttributableType.MEMBERSHIP),\n-    MembershipVirtualSchema(AttributableType.MEMBERSHIP),\n-    MembershipId(AttributableType.MEMBERSHIP);\n+    AnyPlainSchema(AnyTypeKind.ANY_OBJECT),\n+    AnyDerivedSchema(AnyTypeKind.ANY_OBJECT),\n+    AnyVirtualSchema(AnyTypeKind.ANY_OBJECT),\n+    AnyId(AnyTypeKind.ANY_OBJECT);\n \n-    private final AttributableType attributableType;\n+    private final AnyTypeKind anyTypeKind;\n \n-    private IntMappingType(final AttributableType attributableType) {\n-        this.attributableType = attributableType;\n+    private IntMappingType(final AnyTypeKind anyTypeKind) {\n+        this.anyTypeKind = anyTypeKind;\n     }\n \n-    public AttributableType getAttributableType() {\n-        return attributableType;\n+    public AnyTypeKind getAnyTypeKind() {\n+        return anyTypeKind;\n     }\n \n     /**\n-     * Get attribute types for a certain attributable type.\n+     * Get attribute types for a certain any object type.\n      *\n-     * @param attributableType attributable type\n+     * @param anyTypeKind any object type\n      * @param toBeFiltered types to be filtered from the result.\n      * @return set of attribute types.\n      */\n     public static Set<IntMappingType> getAttributeTypes(\n-            final AttributableType attributableType, final Collection<IntMappingType> toBeFiltered) {\n+            final AnyTypeKind anyTypeKind, final Collection<IntMappingType> toBeFiltered) {\n \n-        final Set<IntMappingType> res = getAttributeTypes(attributableType);\n+        final Set<IntMappingType> res = getAttributeTypes(anyTypeKind);\n         res.removeAll(toBeFiltered);\n \n         return res;\n     }\n \n     /**\n-     * Get attribute types for a certain attributable type.\n+     * Get attribute types for a certain any object type.\n      *\n-     * @param attributableType attributable type\n+     * @param anyTypeKind any object type\n      * @return set of attribute types.\n      */\n-    public static Set<IntMappingType> getAttributeTypes(final AttributableType attributableType) {\n+    public static Set<IntMappingType> getAttributeTypes(final AnyTypeKind anyTypeKind) {\n         EnumSet<?> enumset;\n \n-        switch (attributableType) {\n+        switch (anyTypeKind) {\n             case GROUP:\n                 enumset = EnumSet.allOf(GroupMappingType.class);\n                 break;\n \n-            case MEMBERSHIP:\n-                enumset = EnumSet.allOf(MembershipMappingType.class);\n+            case ANY_OBJECT:\n+                enumset = EnumSet.allOf(AnyMappingType.class);\n                 break;\n \n             case USER:\n@@ -119,18 +119,18 @@ public static Set<IntMappingType> getAttributeTypes(final AttributableType attri\n     public static Set<IntMappingType> getEmbedded() {\n         return EnumSet.of(IntMappingType.UserId, IntMappingType.Username, IntMappingType.Password,\n                 IntMappingType.GroupId, IntMappingType.GroupName, IntMappingType.GroupOwnerSchema,\n-                IntMappingType.MembershipId);\n+                IntMappingType.AnyId);\n     }\n \n     /**\n-     * Check if attribute type belongs to the specified attributable type set.\n+     * Check if attribute type belongs to the specified any object type set.\n      *\n-     * @param attributableType attributable type.\n+     * @param anyTypeKind any object type.\n      * @param type attribute type.\n-     * @return true if attribute type belongs to the specified attributable type set.\n+     * @return true if attribute type belongs to the specified any object type set.\n      */\n-    public static boolean contains(final AttributableType attributableType, final String type) {\n-        switch (attributableType) {\n+    public static boolean contains(final AnyTypeKind anyTypeKind, final String type) {\n+        switch (anyTypeKind) {\n             case GROUP:\n                 for (GroupMappingType c : GroupMappingType.values()) {\n                     if (c.name().equals(type)) {\n@@ -139,8 +139,8 @@ public static boolean contains(final AttributableType attributableType, final St\n                 }\n                 break;\n \n-            case MEMBERSHIP:\n-                for (MembershipMappingType c : MembershipMappingType.values()) {\n+            case ANY_OBJECT:\n+                for (AnyMappingType c : AnyMappingType.values()) {\n                     if (c.name().equals(type)) {\n                         return true;\n                     }\n@@ -188,14 +188,14 @@ private enum GroupMappingType {\n     }\n \n     /**\n-     * Membership attribute types.\n+     * Any attribute types.\n      */\n-    private enum MembershipMappingType {\n+    private enum AnyMappingType {\n \n-        MembershipPlainSchema,\n-        MembershipDerivedSchema,\n-        MembershipVirtualSchema,\n-        MembershipId;\n+        AnyPlainSchema,\n+        AnyDerivedSchema,\n+        AnyVirtualSchema,\n+        AnyId;\n \n     }\n }"},{"sha":"538f19ac73535aa71e6d9aba74228576630a0a42","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/SubjectType.java","status":"removed","additions":0,"deletions":34,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSubjectType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSubjectType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSubjectType.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,34 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.types;\n-\n-import javax.xml.bind.annotation.XmlEnum;\n-\n-@XmlEnum\n-public enum SubjectType {\n-\n-    USER,\n-    GROUP;\n-\n-    public AttributableType asAttributableType() {\n-        return this == USER\n-                ? AttributableType.USER\n-                : AttributableType.GROUP;\n-    }\n-}"},{"sha":"34f95dd81d9f4dcfa2fea31aae06d22b307a1cb8","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/SyncPolicySpec.java","status":"modified","additions":15,"deletions":44,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSyncPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSyncPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSyncPolicySpec.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -24,31 +24,15 @@\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.annotation.ClassList;\n-import org.apache.syncope.common.lib.annotation.SchemaList;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n \n @XmlType\n public class SyncPolicySpec implements PolicySpec {\n \n     private static final long serialVersionUID = -3144027171719498127L;\n \n-    /**\n-     * User attributes and fields for matching during synchronization.\n-     */\n-    @SchemaList(extended = true)\n-    private final List<String> uAltSearchSchemas = new ArrayList<>();\n-\n-    @ClassList\n-    private String userJavaRule;\n-\n-    /**\n-     * Group attributes and fields for matching during synchronization.\n-     */\n-    @SchemaList(extended = true)\n-    private final List<String> gAltSearchSchemas = new ArrayList<>();\n-\n-    @ClassList\n-    private String groupJavaRule;\n+    private final List<SyncPolicySpecItem> items = new ArrayList<>();\n \n     /**\n      * Conflict resolution action.\n@@ -65,33 +49,20 @@ public void setConflictResolutionAction(final ConflictResolutionAction conflictR\n         this.conflictResolutionAction = conflictResolutionAction;\n     }\n \n-    @XmlElementWrapper(name = \"userAltSearchSchemas\")\n-    @XmlElement(name = \"userAltSearchSchema\")\n-    @JsonProperty(\"userAltSearchSchemas\")\n-    public List<String> getuAltSearchSchemas() {\n-        return uAltSearchSchemas;\n-    }\n-\n-    @XmlElementWrapper(name = \"groupAltSearchSchemas\")\n-    @XmlElement(name = \"groupAltSearchSchema\")\n-    @JsonProperty(\"groupAltSearchSchemas\")\n-    public List<String> getrAltSearchSchemas() {\n-        return gAltSearchSchemas;\n-    }\n-\n-    public String getGroupJavaRule() {\n-        return groupJavaRule;\n-    }\n-\n-    public void setGroupJavaRule(final String groupJavaRule) {\n-        this.groupJavaRule = groupJavaRule;\n-    }\n+    public SyncPolicySpecItem getItem(final String anyTypeKey) {\n+        return CollectionUtils.find(items, new Predicate<SyncPolicySpecItem>() {\n \n-    public String getUserJavaRule() {\n-        return userJavaRule;\n+            @Override\n+            public boolean evaluate(final SyncPolicySpecItem item) {\n+                return anyTypeKey != null && anyTypeKey.equals(item.getAnyTypeKey());\n+            }\n+        });\n     }\n \n-    public void setUserJavaRule(final String userJavaRule) {\n-        this.userJavaRule = userJavaRule;\n+    @XmlElementWrapper(name = \"items\")\n+    @XmlElement(name = \"item\")\n+    @JsonProperty(\"items\")\n+    public List<SyncPolicySpecItem> getItems() {\n+        return items;\n     }\n }"},{"sha":"4acb61baf3dec8d4321a40c14e390a67dab0b0e4","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/SyncPolicySpecItem.java","status":"renamed","additions":26,"deletions":22,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSyncPolicySpecItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSyncPolicySpecItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSyncPolicySpecItem.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -16,48 +16,52 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.to;\n+package org.apache.syncope.common.lib.types;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.annotation.ClassList;\n+import org.apache.syncope.common.lib.annotation.SchemaList;\n \n @XmlType\n-public abstract class AbstractSubjectTO extends AbstractAttributableTO {\n+public class SyncPolicySpecItem extends AbstractBaseBean {\n \n-    private static final long serialVersionUID = 114668706977919206L;\n+    private static final long serialVersionUID = 692466729711976485L;\n \n-    private String realm;\n+    private String anyTypeKey;\n \n-    private final Set<String> resources = new HashSet<>();\n+    @SchemaList(extended = true)\n+    private final List<String> altSearchSchemas = new ArrayList<>();\n \n-    private final List<PropagationStatus> propagationStatusTOs = new ArrayList<>();\n+    @ClassList\n+    private String javaRule;\n \n-    public String getRealm() {\n-        return realm;\n+    public String getAnyTypeKey() {\n+        return anyTypeKey;\n     }\n \n-    public void setRealm(final String realm) {\n-        this.realm = realm;\n+    public void setAnyTypeKey(final String anyTypeKey) {\n+        this.anyTypeKey = anyTypeKey;\n     }\n \n-    @XmlElementWrapper(name = \"resources\")\n-    @XmlElement(name = \"resource\")\n-    @JsonProperty(\"resources\")\n-    public Set<String> getResources() {\n-        return resources;\n+    public String getJavaRule() {\n+        return javaRule;\n     }\n \n-    @XmlElementWrapper(name = \"propagationStatuses\")\n-    @XmlElement(name = \"propagationStatus\")\n-    @JsonProperty(\"propagationStatuses\")\n-    public List<PropagationStatus> getPropagationStatusTOs() {\n-        return propagationStatusTOs;\n+    public void setJavaRule(final String javaRule) {\n+        this.javaRule = javaRule;\n+    }\n+\n+    @XmlElementWrapper(name = \"altSearchSchemas\")\n+    @XmlElement(name = \"altSearchSchema\")\n+    @JsonProperty(\"altSearchSchemas\")\n+    public List<String> getAltSearchSchemas() {\n+        return altSearchSchemas;\n     }\n \n }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractSubjectTO.java"},{"sha":"6db8870e9070827466f0ab756c9fc3e5d67bceb8","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/wrap/AnyKey.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwrap%2FAnyKey.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwrap%2FAnyKey.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwrap%2FAnyKey.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.common.lib.wrap;\n \n-public class SubjectKey extends AbstractWrappable<Long> {\n+public class AnyKey extends AbstractWrappable<Long> {\n \n     private static final long serialVersionUID = -8664228651057889297L;\n ","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/wrap/SubjectKey.java"},{"sha":"e4fdf046f567e5d22e108bb34f26d7f84939b33c","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AnyListQuery.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyListQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyListQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyListQuery.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -23,7 +23,7 @@\n import javax.ws.rs.MatrixParam;\n import org.apache.syncope.common.lib.SyncopeConstants;\n \n-public class SubjectListQuery extends ListQuery {\n+public class AnyListQuery extends ListQuery {\n \n     private static final long serialVersionUID = -5197167078435619636L;\n ","previous_filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/SubjectListQuery.java"},{"sha":"3e0a516c0ea9a0d40a6e8a548b6e40599aa0f4dc","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AnySearchQuery.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnySearchQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnySearchQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnySearchQuery.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -21,7 +21,7 @@\n import javax.ws.rs.QueryParam;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n-public class SubjectSearchQuery extends SubjectListQuery {\n+public class AnySearchQuery extends AnyListQuery {\n \n     private static final long serialVersionUID = -6736562952418964707L;\n ","previous_filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/SubjectSearchQuery.java"},{"sha":"635be02bf0e672343e3b2fd16c1f833c0058f81c","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -41,8 +41,8 @@\n import org.apache.syncope.common.lib.types.ResourceAssociationActionType;\n import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n import org.apache.syncope.common.lib.wrap.ResourceName;\n-import org.apache.syncope.common.rest.api.beans.SubjectListQuery;\n-import org.apache.syncope.common.rest.api.beans.SubjectSearchQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n+import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n \n /**\n  * REST operations for groups.\n@@ -85,7 +85,7 @@ public interface GroupService extends JAXRSService {\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<GroupTO> list(@BeanParam SubjectListQuery listQuery);\n+    PagedResult<GroupTO> list(@BeanParam AnyListQuery listQuery);\n \n     /**\n      * Returns a paged list of groups matching the given query.\n@@ -96,7 +96,7 @@ public interface GroupService extends JAXRSService {\n     @GET\n     @Path(\"search\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<GroupTO> search(@BeanParam SubjectSearchQuery searchQuery);\n+    PagedResult<GroupTO> search(@BeanParam AnySearchQuery searchQuery);\n \n     /**\n      * Creates a new group."},{"sha":"48ba21af941ca7824394fe457dd04bf2450fd61e","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java","status":"modified","additions":13,"deletions":14,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -38,8 +38,7 @@\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n-import org.apache.syncope.common.lib.types.SubjectType;\n-import org.apache.syncope.common.lib.wrap.SubjectKey;\n+import org.apache.syncope.common.lib.wrap.AnyKey;\n \n /**\n  * REST operations for external resources.\n@@ -51,15 +50,15 @@ public interface ResourceService extends JAXRSService {\n      * Returns connector object from the external resource, for the given type and key.\n      *\n      * @param resourceKey Name of resource to read connector object from\n-     * @param type user /group\n-     * @param key user key / group key\n+     * @param anyTypeKey any object type\n+     * @param key any object key\n      * @return connector object from the external resource, for the given type and key\n      */\n     @GET\n-    @Path(\"{resourceKey}/{type}/{key}\")\n+    @Path(\"{resourceKey}/{anyTypeKey}/{key}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    ConnObjectTO getConnectorObject(@NotNull @PathParam(\"resourceKey\") String resourceKey,\n-            @NotNull @PathParam(\"type\") SubjectType type, @NotNull @PathParam(\"key\") Long key);\n+    ConnObjectTO readConnObject(@NotNull @PathParam(\"resourceKey\") String resourceKey,\n+            @NotNull @PathParam(\"anyTypeKey\") String anyTypeKey, @NotNull @PathParam(\"key\") Long key);\n \n     /**\n      * Returns the resource with matching name.\n@@ -117,7 +116,7 @@ ConnObjectTO getConnectorObject(@NotNull @PathParam(\"resourceKey\") String resour\n     void delete(@NotNull @PathParam(\"resourceKey\") String resourceKey);\n \n     /**\n-     * Checks wether the connection to resource could be established.\n+     * Checks whether the connection to resource could be established.\n      *\n      * @param resourceTO resource to be checked\n      * @return true if connection to resource could be established\n@@ -128,25 +127,25 @@ ConnObjectTO getConnectorObject(@NotNull @PathParam(\"resourceKey\") String resour\n     boolean check(@NotNull ResourceTO resourceTO);\n \n     /**\n-     * De-associate users or groups (depending on the provided subject type) from the given resource.\n+     * De-associate any objects from the given resource.\n      *\n      * @param resourceKey name of resource\n-     * @param subjectType subject type (user or group)\n+     * @param anyTypeKey any object kind\n      * @param type resource de-association action type\n-     * @param subjectKeys users or groups against which the bulk action will be performed\n+     * @param keys any object keys against which the bulk action will be performed\n      * @return <tt>Response</tt> object featuring {@link BulkActionResult} as <tt>Entity</tt>\n      */\n     @Descriptions({\n         @Description(target = DocTarget.RESPONSE,\n                 value = \"Featuring <tt>BulkActionResult</tt> as <tt>Entity</tt>\")\n     })\n     @POST\n-    @Path(\"{resourceKey}/bulkDeassociation/{subjType}/{type}\")\n+    @Path(\"{resourceKey}/bulkDeassociation/{anyTypeKey}/{type}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     BulkActionResult bulkDeassociation(@NotNull @PathParam(\"resourceKey\") String resourceKey,\n-            @NotNull @PathParam(\"subjType\") SubjectType subjectType,\n-            @NotNull @PathParam(\"type\") ResourceDeassociationActionType type, @NotNull List<SubjectKey> subjectKeys);\n+            @NotNull @PathParam(\"anyTypeKey\") String anyTypeKey,\n+            @NotNull @PathParam(\"type\") ResourceDeassociationActionType type, @NotNull List<AnyKey> keys);\n \n     /**\n      * Executes the provided bulk action."},{"sha":"4ffb3f6c64dd1196ffee92ad8453c98a0349bacf","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java","status":"modified","additions":14,"deletions":21,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -34,7 +34,6 @@\n import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n-import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.SchemaType;\n \n /**\n@@ -47,36 +46,32 @@ public interface SchemaService extends JAXRSService {\n      * Returns schema matching the given kind, type and name.\n      *\n      * @param <T> actual SchemaTO\n-     * @param attrType kind for schemas to be read\n-     * @param schemaType type for schemas to be read\n+     * @param type type for schemas to be read\n      * @param schemaKey name of schema to be read\n      * @return schema matching the given kind, type and name\n      */\n     @GET\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractSchemaTO> T read(@NotNull @PathParam(\"kind\") AttributableType attrType,\n-            @NotNull @PathParam(\"type\") SchemaType schemaType, @NotNull @PathParam(\"key\") String schemaKey);\n+    <T extends AbstractSchemaTO> T read(\n+            @NotNull @PathParam(\"type\") SchemaType type, @NotNull @PathParam(\"key\") String schemaKey);\n \n     /**\n      * Returns a list of schemas with matching kind and type.\n      *\n      * @param <T> actual SchemaTO\n-     * @param attrType kind for schemas to be listed\n-     * @param schemaType type for schemas to be listed\n+     * @param type type for schemas to be listed\n      * @return list of schemas with matching kind and type\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractSchemaTO> List<T> list(\n-            @NotNull @PathParam(\"kind\") AttributableType attrType, @NotNull @PathParam(\"type\") SchemaType schemaType);\n+    <T extends AbstractSchemaTO> List<T> list(@NotNull @PathParam(\"type\") SchemaType type);\n \n     /**\n      * Creates a new schema.\n      *\n      * @param <T> actual SchemaTO\n-     * @param attrType kind for schema to be created\n-     * @param schemaType type for schema to be created\n+     * @param type type for schema to be created\n      * @param schemaTO schema to be created\n      * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created schema\n      */\n@@ -85,35 +80,33 @@ <T extends AbstractSchemaTO> List<T> list(\n     })\n     @POST\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractSchemaTO> Response create(@NotNull @PathParam(\"kind\") AttributableType attrType,\n-            @NotNull @PathParam(\"type\") SchemaType schemaType, @NotNull T schemaTO);\n+    <T extends AbstractSchemaTO> Response create(\n+            @NotNull @PathParam(\"type\") SchemaType type, @NotNull T schemaTO);\n \n     /**\n      * Updates the schema matching the given kind, type and name.\n      *\n      * @param <T> actual SchemaTO\n-     * @param attrType kind for schemas to be updated\n-     * @param schemaType type for schemas to be updated\n+     * @param type type for schemas to be updated\n      * @param schemaKey name of schema to be updated\n      * @param schemaTO updated schema to be stored\n      */\n     @PUT\n     @Path(\"{key}\")\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractSchemaTO> void update(@NotNull @PathParam(\"kind\") AttributableType attrType,\n-            @NotNull @PathParam(\"type\") SchemaType schemaType,\n+    <T extends AbstractSchemaTO> void update(\n+            @NotNull @PathParam(\"type\") SchemaType type,\n             @NotNull @PathParam(\"key\") String schemaKey, @NotNull T schemaTO);\n \n     /**\n      * Deletes the schema matching the given kind, type and name.\n      *\n-     * @param attrType kind for schema to be deleted\n-     * @param schemaType type for schema to be deleted\n+     * @param type type for schema to be deleted\n      * @param schemaKey name of schema to be deleted\n      */\n     @DELETE\n     @Path(\"{key}\")\n-    void delete(@NotNull @PathParam(\"kind\") AttributableType attrType,\n-            @NotNull @PathParam(\"type\") SchemaType schemaType,\n+    void delete(\n+            @NotNull @PathParam(\"type\") SchemaType type,\n             @NotNull @PathParam(\"key\") String schemaKey);\n }"},{"sha":"9e280a5d40e6015fc49b421b95fc34418572feff","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -46,8 +46,8 @@\n import org.apache.syncope.common.lib.types.ResourceAssociationActionType;\n import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n import org.apache.syncope.common.lib.wrap.ResourceName;\n-import org.apache.syncope.common.rest.api.beans.SubjectListQuery;\n-import org.apache.syncope.common.rest.api.beans.SubjectSearchQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n+import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n \n /**\n  * REST operations for users.\n@@ -102,7 +102,7 @@ public interface UserService extends JAXRSService {\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<UserTO> list(@BeanParam SubjectListQuery listQuery);\n+    PagedResult<UserTO> list(@BeanParam AnyListQuery listQuery);\n \n     /**\n      * Returns a paged list of users matching the given query.\n@@ -113,7 +113,7 @@ public interface UserService extends JAXRSService {\n     @GET\n     @Path(\"search\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<UserTO> search(@BeanParam SubjectSearchQuery searchQuery);\n+    PagedResult<UserTO> search(@BeanParam AnySearchQuery searchQuery);\n \n     /**\n      * Creates a new user."},{"sha":"fc484293ea453c8e5568e93ad4c0560b7271111f","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/WorkflowService.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FWorkflowService.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -27,7 +27,7 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n@@ -39,32 +39,32 @@ public interface WorkflowService extends JAXRSService {\n     /**\n      * Exports workflow definition for matching kind.\n      *\n-     * @param kind user or group\n+     * @param anyTypeKind any object type\n      * @return workflow definition for matching kind\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response exportDefinition(@NotNull @PathParam(\"kind\") SubjectType kind);\n+    Response exportDefinition(@NotNull @PathParam(\"anyTypeKind\") AnyTypeKind anyTypeKind);\n \n     /**\n      * Exports workflow diagram representation.\n      *\n-     * @param kind user or group\n+     * @param anyTypeKind any object type\n      * @return workflow diagram representation\n      */\n     @GET\n     @Path(\"diagram.png\")\n     @Produces({ RESTHeaders.MEDIATYPE_IMAGE_PNG })\n-    Response exportDiagram(@NotNull @PathParam(\"kind\") SubjectType kind);\n+    Response exportDiagram(@NotNull @PathParam(\"anyTypeKind\") AnyTypeKind anyTypeKind);\n \n     /**\n      * Imports workflow definition for matching kind.\n      *\n-     * @param kind user or group\n+     * @param anyTypeKind any object type\n      * @param definition workflow definition for matching kind\n      */\n     @PUT\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    void importDefinition(@NotNull @PathParam(\"kind\") SubjectType kind, @NotNull String definition);\n+    void importDefinition(@NotNull @PathParam(\"anyTypeKind\") AnyTypeKind anyTypeKind, @NotNull String definition);\n \n }"},{"sha":"7c998cfdb6fa0c34020f6d37fbd50da87048cb49","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -24,13 +24,13 @@\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n-import org.apache.syncope.common.lib.mod.AbstractSubjectMod;\n-import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n+import org.apache.syncope.common.lib.mod.AnyMod;\n+import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.core.misc.RealmUtils;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n \n-public abstract class AbstractSubjectLogic<T extends AbstractSubjectTO, V extends AbstractSubjectMod>\n+public abstract class AbstractAnyLogic<T extends AnyTO, V extends AnyMod>\n         extends AbstractResourceAssociator<T> {\n \n     private static class StartsWithPredicate implements Predicate<String> {","previous_filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractSubjectLogic.java"},{"sha":"6741a89d90b8a51dbcea4a99544841f9e30aad6c","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractResourceAssociator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractResourceAssociator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractResourceAssociator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractResourceAssociator.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -19,9 +19,9 @@\n package org.apache.syncope.core.logic;\n \n import java.util.Collection;\n-import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n+import org.apache.syncope.common.lib.to.AnyTO;\n \n-public abstract class AbstractResourceAssociator<T extends AbstractAttributableTO> extends AbstractLogic<T> {\n+public abstract class AbstractResourceAssociator<T extends AnyTO> extends AbstractLogic<T> {\n \n     public abstract T unlink(Long id, Collection<String> resources);\n "},{"sha":"5b186b59f804674a63c02b74c29b156bd4811694","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"added","additions":326,"deletions":0,"changes":326,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,326 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.annotation.Resource;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.mod.AnyObjectMod;\n+import org.apache.syncope.common.lib.to.PropagationStatus;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.core.misc.RealmUtils;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n+import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.provisioning.api.AnyTransformer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.interceptor.TransactionInterceptor;\n+\n+/**\n+ * Note that this controller does not extend {@link AbstractTransactionalLogic}, hence does not provide any\n+ * Spring's Transactional logic at class level.\n+ */\n+@Component\n+public class AnyObjectLogic extends AbstractAnyLogic<AnyObjectTO, AnyObjectMod> {\n+\n+    @Autowired\n+    protected AnyObjectDAO anyObjectDAO;\n+\n+    @Autowired\n+    protected AnySearchDAO searchDAO;\n+\n+    @Autowired\n+    protected AnyObjectDataBinder binder;\n+\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+\n+    @Autowired\n+    protected AnyTransformer attrTransformer;\n+\n+    @Resource(name = \"anonymousUser\")\n+    protected String anonymousUser;\n+\n+    @Autowired\n+    protected AnyObjectProvisioningManager provisioningManager;\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_READ + \"')\")\n+    @Transactional(readOnly = true)\n+    @Override\n+    public AnyObjectTO read(final Long anyObjectKey) {\n+        return binder.getAnyObjectTO(anyObjectKey);\n+    }\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Override\n+    public int count(final List<String> realms) {\n+        return anyObjectDAO.count(getEffectiveRealms(SyncopeConstants.FULL_ADMIN_REALMS, realms));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_LIST + \"')\")\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<AnyObjectTO> list(\n+            final int page, final int size, final List<OrderByClause> orderBy, final List<String> realms) {\n+\n+        return CollectionUtils.collect(anyObjectDAO.findAll(\n+                getEffectiveRealms(SyncopeConstants.FULL_ADMIN_REALMS, realms),\n+                page, size, orderBy),\n+                new Transformer<AnyObject, AnyObjectTO>() {\n+\n+                    @Override\n+                    public AnyObjectTO transform(final AnyObject input) {\n+                        return binder.getAnyObjectTO(input);\n+                    }\n+                }, new ArrayList<AnyObjectTO>());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_SEARCH + \"')\")\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Override\n+    public int searchCount(final SearchCond searchCondition, final List<String> realms) {\n+        return searchDAO.count(\n+                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_SEARCH), realms),\n+                searchCondition, AnyTypeKind.ANY_OBJECT);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_SEARCH + \"')\")\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Override\n+    public List<AnyObjectTO> search(final SearchCond searchCondition, final int page, final int size,\n+            final List<OrderByClause> orderBy, final List<String> realms) {\n+\n+        final List<AnyObject> matchingAnyObjects = searchDAO.search(\n+                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_SEARCH), realms),\n+                searchCondition, page, size, orderBy, AnyTypeKind.ANY_OBJECT);\n+        return CollectionUtils.collect(matchingAnyObjects, new Transformer<AnyObject, AnyObjectTO>() {\n+\n+            @Override\n+            public AnyObjectTO transform(final AnyObject input) {\n+                return binder.getAnyObjectTO(input);\n+            }\n+        }, new ArrayList<AnyObjectTO>());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_CREATE + \"')\")\n+    public AnyObjectTO create(final AnyObjectTO anyObjectTO) {\n+        if (anyObjectTO.getRealm() == null) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n+            throw sce;\n+        }\n+        Set<String> effectiveRealms = getEffectiveRealms(\n+                AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_CREATE),\n+                Collections.singleton(anyObjectTO.getRealm()));\n+        if (effectiveRealms.isEmpty()) {\n+            throw new UnauthorizedException(AnyTypeKind.ANY_OBJECT, null);\n+        }\n+\n+        // Attributable transformation (if configured)\n+        AnyObjectTO actual = attrTransformer.transform(anyObjectTO);\n+        LOG.debug(\"Transformed: {}\", actual);\n+\n+        /*\n+         * Actual operations: workflow, propagation\n+         */\n+        Map.Entry<Long, List<PropagationStatus>> created = provisioningManager.create(anyObjectTO);\n+        AnyObjectTO savedTO = binder.getAnyObjectTO(created.getKey());\n+        savedTO.getPropagationStatusTOs().addAll(created.getValue());\n+        return savedTO;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n+    @Override\n+    public AnyObjectTO update(final AnyObjectMod anyObjectMod) {\n+        AnyObject anyObject = anyObjectDAO.authFind(anyObjectMod.getKey());\n+        if (anyObject == null) {\n+            throw new NotFoundException(\"AnyObject with key \" + anyObjectMod.getKey());\n+        }\n+        Set<String> effectiveRealms = getEffectiveRealms(\n+                AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_UPDATE),\n+                Collections.singleton(anyObjectMod.getRealm()));\n+        if (effectiveRealms.isEmpty()) {\n+            throw new UnauthorizedException(AnyTypeKind.ANY_OBJECT, anyObject.getKey());\n+        }\n+\n+        // Attribute value transformation (if configured)\n+        AnyObjectMod actual = attrTransformer.transform(anyObjectMod);\n+        LOG.debug(\"Transformed: {}\", actual);\n+\n+        Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(anyObjectMod);\n+\n+        AnyObjectTO updatedTO = binder.getAnyObjectTO(updated.getKey());\n+        updatedTO.getPropagationStatusTOs().addAll(updated.getValue());\n+        return updatedTO;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_DELETE + \"')\")\n+    @Override\n+    public AnyObjectTO delete(final Long anyObjectKey) {\n+        AnyObject anyObject = anyObjectDAO.authFind(anyObjectKey);\n+        if (anyObject == null) {\n+            throw new NotFoundException(\"AnyObject with key \" + anyObjectKey);\n+        }\n+        Set<String> effectiveRealms = getEffectiveRealms(\n+                AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_UPDATE),\n+                Collections.singleton(anyObject.getRealm().getFullPath()));\n+        if (effectiveRealms.isEmpty()) {\n+            throw new UnauthorizedException(AnyTypeKind.ANY_OBJECT, anyObject.getKey());\n+        }\n+\n+        List<PropagationStatus> statuses = provisioningManager.delete(anyObjectKey);\n+\n+        AnyObjectTO anyObjectTO = new AnyObjectTO();\n+        anyObjectTO.setKey(anyObjectKey);\n+\n+        anyObjectTO.getPropagationStatusTOs().addAll(statuses);\n+\n+        return anyObjectTO;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n+    @Transactional(rollbackFor = { Throwable.class })\n+    @Override\n+    public AnyObjectTO unlink(final Long anyObjectKey, final Collection<String> resources) {\n+        final AnyObjectMod anyObjectMod = new AnyObjectMod();\n+        anyObjectMod.setKey(anyObjectKey);\n+        anyObjectMod.getResourcesToRemove().addAll(resources);\n+        final Long updatedResult = provisioningManager.unlink(anyObjectMod);\n+\n+        return binder.getAnyObjectTO(updatedResult);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n+    @Transactional(rollbackFor = { Throwable.class })\n+    @Override\n+    public AnyObjectTO link(final Long anyObjectKey, final Collection<String> resources) {\n+        final AnyObjectMod anyObjectMod = new AnyObjectMod();\n+        anyObjectMod.setKey(anyObjectKey);\n+        anyObjectMod.getResourcesToAdd().addAll(resources);\n+        return binder.getAnyObjectTO(provisioningManager.link(anyObjectMod));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n+    @Transactional(rollbackFor = { Throwable.class })\n+    @Override\n+    public AnyObjectTO unassign(final Long anyObjectKey, final Collection<String> resources) {\n+        final AnyObjectMod anyObjectMod = new AnyObjectMod();\n+        anyObjectMod.setKey(anyObjectKey);\n+        anyObjectMod.getResourcesToRemove().addAll(resources);\n+        return update(anyObjectMod);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n+    @Transactional(rollbackFor = { Throwable.class })\n+    @Override\n+    public AnyObjectTO assign(\n+            final Long anyObjectKey, final Collection<String> resources, final boolean changePwd, final String password) {\n+\n+        final AnyObjectMod userMod = new AnyObjectMod();\n+        userMod.setKey(anyObjectKey);\n+        userMod.getResourcesToAdd().addAll(resources);\n+        return update(userMod);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n+    @Transactional(rollbackFor = { Throwable.class })\n+    @Override\n+    public AnyObjectTO deprovision(final Long anyObjectKey, final Collection<String> resources) {\n+        final AnyObject anyObject = anyObjectDAO.authFind(anyObjectKey);\n+\n+        List<PropagationStatus> statuses = provisioningManager.deprovision(anyObjectKey, resources);\n+\n+        AnyObjectTO updatedTO = binder.getAnyObjectTO(anyObject);\n+        updatedTO.getPropagationStatusTOs().addAll(statuses);\n+        return updatedTO;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n+    @Transactional(rollbackFor = { Throwable.class })\n+    @Override\n+    public AnyObjectTO provision(\n+            final Long anyObjectKey, final Collection<String> resources, final boolean changePwd, final String password) {\n+        AnyObjectTO original = binder.getAnyObjectTO(anyObjectKey);\n+\n+        //trick: assign and retrieve propagation statuses ...\n+        original.getPropagationStatusTOs().addAll(\n+                assign(anyObjectKey, resources, changePwd, password).getPropagationStatusTOs());\n+\n+        // .... rollback.\n+        TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n+        return original;\n+    }\n+\n+    @Override\n+    protected AnyObjectTO resolveReference(final Method method, final Object... args) throws UnresolvedReferenceException {\n+        Long key = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof Long) {\n+                    key = (Long) args[i];\n+                } else if (args[i] instanceof AnyObjectTO) {\n+                    key = ((AnyObjectTO) args[i]).getKey();\n+                } else if (args[i] instanceof AnyObjectMod) {\n+                    key = ((AnyObjectMod) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if ((key != null) && !key.equals(0L)) {\n+            try {\n+                return binder.getAnyObjectTO(key);\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+}"},{"sha":"7d28c881d5e63acf735f94c226aaf9e54c875d3b","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConfigurationLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -27,8 +27,8 @@\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.conf.CPlainSchema;\n import org.apache.syncope.core.provisioning.api.data.ConfigurationDataBinder;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n@@ -74,7 +74,7 @@ public AttrTO read(final String key) {\n \n         CPlainAttr conf = confDAO.find(key);\n         if (conf == null) {\n-            CPlainSchema schema = plainSchemaDAO.find(key, CPlainSchema.class);\n+            PlainSchema schema = plainSchemaDAO.find(key);\n             if (schema == null) {\n                 throw new NotFoundException(\"Configuration key \" + key);\n             }"},{"sha":"793686fa8717e0dad3642a9e2abbd07b1973c021","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java","status":"modified","additions":18,"deletions":16,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -25,6 +25,8 @@\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IteratorUtils;\n import org.apache.commons.collections4.PredicateUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -34,13 +36,12 @@\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n-import org.apache.syncope.common.lib.CollectionUtils2;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n@@ -138,20 +139,21 @@ public List<ConnInstanceTO> list(final String lang) {\n             CurrentLocale.set(new Locale(lang));\n         }\n \n-        return CollectionUtils2.collect(connInstanceDAO.findAll(), new Transformer<ConnInstance, ConnInstanceTO>() {\n-\n-            @Override\n-            public ConnInstanceTO transform(final ConnInstance input) {\n-                ConnInstanceTO result = null;\n-                try {\n-                    result = binder.getConnInstanceTO(input);\n-                } catch (NotFoundException e) {\n-                    LOG.error(\"Connector '{}#{}' not found\", input.getBundleName(), input.getVersion());\n-                }\n-\n-                return result;\n-            }\n-        }, PredicateUtils.notNullPredicate(), new ArrayList<ConnInstanceTO>());\n+        return CollectionUtils.collect(IteratorUtils.filteredIterator(connInstanceDAO.findAll().iterator(),\n+                PredicateUtils.notNullPredicate()), new Transformer<ConnInstance, ConnInstanceTO>() {\n+\n+                    @Override\n+                    public ConnInstanceTO transform(final ConnInstance input) {\n+                        ConnInstanceTO result = null;\n+                        try {\n+                            result = binder.getConnInstanceTO(input);\n+                        } catch (NotFoundException e) {\n+                            LOG.error(\"Connector '{}#{}' not found\", input.getBundleName(), input.getVersion());\n+                        }\n+\n+                        return result;\n+                    }\n+                }, new ArrayList<ConnInstanceTO>());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")"},{"sha":"7129b74c88d1e6b3556e31d1a895b7e6b48ab1c6","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -34,24 +34,24 @@\n import org.apache.syncope.common.lib.mod.GroupMod;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.SubjectType;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.core.misc.RealmUtils;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.provisioning.api.AttributableTransformer;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.provisioning.api.AnyTransformer;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -63,7 +63,7 @@\n  * Spring's Transactional logic at class level.\n  */\n @Component\n-public class GroupLogic extends AbstractSubjectLogic<GroupTO, GroupMod> {\n+public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupMod> {\n \n     @Autowired\n     protected GroupDAO groupDAO;\n@@ -72,7 +72,7 @@ public class GroupLogic extends AbstractSubjectLogic<GroupTO, GroupMod> {\n     protected UserDAO userDAO;\n \n     @Autowired\n-    protected SubjectSearchDAO searchDAO;\n+    protected AnySearchDAO searchDAO;\n \n     @Autowired\n     protected GroupDataBinder binder;\n@@ -84,7 +84,7 @@ public class GroupLogic extends AbstractSubjectLogic<GroupTO, GroupMod> {\n     protected PropagationTaskExecutor taskExecutor;\n \n     @Autowired\n-    protected AttributableTransformer attrTransformer;\n+    protected AnyTransformer attrTransformer;\n \n     @Resource(name = \"anonymousUser\")\n     protected String anonymousUser;\n@@ -144,7 +144,7 @@ public GroupTO transform(final Group input) {\n     public int searchCount(final SearchCond searchCondition, final List<String> realms) {\n         return searchDAO.count(\n                 getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_SEARCH), realms),\n-                searchCondition, SubjectType.GROUP);\n+                searchCondition, AnyTypeKind.GROUP);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_SEARCH + \"')\")\n@@ -155,7 +155,7 @@ public List<GroupTO> search(final SearchCond searchCondition, final int page, fi\n \n         final List<Group> matchingGroups = searchDAO.search(\n                 getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_SEARCH), realms),\n-                searchCondition, page, size, orderBy, SubjectType.GROUP);\n+                searchCondition, page, size, orderBy, AnyTypeKind.GROUP);\n         return CollectionUtils.collect(matchingGroups, new Transformer<Group, GroupTO>() {\n \n             @Override\n@@ -175,7 +175,7 @@ public GroupTO create(final GroupTO groupTO) {\n                 AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_CREATE),\n                 Collections.singleton(groupTO.getRealm()));\n         if (effectiveRealms.isEmpty()) {\n-            throw new UnauthorizedException(SubjectType.GROUP, null);\n+            throw new UnauthorizedException(AnyTypeKind.GROUP, null);\n         }\n \n         // Attributable transformation (if configured)\n@@ -194,15 +194,15 @@ public GroupTO create(final GroupTO groupTO) {\n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n     @Override\n     public GroupTO update(final GroupMod groupMod) {\n-        Group group = groupDAO.authFetch(groupMod.getKey());\n+        Group group = groupDAO.authFind(groupMod.getKey());\n         if (group == null) {\n             throw new NotFoundException(\"Group with key \" + groupMod.getKey());\n         }\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_UPDATE),\n                 Collections.singleton(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey())));\n         if (effectiveRealms.isEmpty()) {\n-            throw new UnauthorizedException(SubjectType.GROUP, group.getKey());\n+            throw new UnauthorizedException(AnyTypeKind.GROUP, group.getKey());\n         }\n \n         // Attribute value transformation (if configured)\n@@ -219,15 +219,15 @@ public GroupTO update(final GroupMod groupMod) {\n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_DELETE + \"')\")\n     @Override\n     public GroupTO delete(final Long groupKey) {\n-        Group group = groupDAO.authFetch(groupKey);\n+        Group group = groupDAO.authFind(groupKey);\n         if (group == null) {\n             throw new NotFoundException(\"Group with key \" + groupKey);\n         }\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_DELETE),\n                 Collections.singleton(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey())));\n         if (effectiveRealms.isEmpty()) {\n-            throw new UnauthorizedException(SubjectType.GROUP, group.getKey());\n+            throw new UnauthorizedException(AnyTypeKind.GROUP, group.getKey());\n         }\n \n         List<Group> ownedGroups = groupDAO.findOwnedByGroup(groupKey);\n@@ -301,7 +301,7 @@ public GroupTO assign(\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public GroupTO deprovision(final Long groupKey, final Collection<String> resources) {\n-        final Group group = groupDAO.authFetch(groupKey);\n+        final Group group = groupDAO.authFind(groupKey);\n \n         List<PropagationStatus> statuses = provisioningManager.deprovision(groupKey, resources);\n "},{"sha":"4b5aac891c20a7c69e176095d72a4aee1c002e0f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":22,"deletions":20,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -25,6 +25,7 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IteratorUtils;\n import org.apache.commons.collections4.PredicateUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.logging.log4j.Level;\n@@ -35,7 +36,6 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.EventCategoryTO;\n import org.apache.syncope.common.lib.to.LoggerTO;\n-import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.AuditElements.EventCategoryType;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -45,14 +45,14 @@\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n-import org.apache.syncope.common.lib.CollectionUtils2;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Logger;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n@@ -106,20 +106,22 @@ public List<LoggerTO> listLogs() {\n     @PreAuthorize(\"hasRole('\" + Entitlement.AUDIT_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<AuditLoggerName> listAudits() {\n-        return CollectionUtils2.collect(list(LoggerType.AUDIT), new Transformer<LoggerTO, AuditLoggerName>() {\n-\n-            @Override\n-            public AuditLoggerName transform(final LoggerTO logger) {\n-                AuditLoggerName result = null;\n-                try {\n-                    result = AuditLoggerName.fromLoggerName(logger.getKey());\n-                } catch (Exception e) {\n-                    LOG.warn(\"Unexpected audit logger name: {}\", logger.getKey(), e);\n-                }\n+        return CollectionUtils.collect(\n+                IteratorUtils.filteredIterator(list(LoggerType.AUDIT).iterator(), PredicateUtils.notNullPredicate()),\n+                new Transformer<LoggerTO, AuditLoggerName>() {\n+\n+                    @Override\n+                    public AuditLoggerName transform(final LoggerTO logger) {\n+                        AuditLoggerName result = null;\n+                        try {\n+                            result = AuditLoggerName.fromLoggerName(logger.getKey());\n+                        } catch (Exception e) {\n+                            LOG.warn(\"Unexpected audit logger name: {}\", logger.getKey(), e);\n+                        }\n \n-                return result;\n-            }\n-        }, PredicateUtils.notNullPredicate(), new ArrayList<AuditLoggerName>());\n+                        return result;\n+                    }\n+                }, new ArrayList<AuditLoggerName>());\n     }\n \n     private void throwInvalidLogger(final LoggerType type) {\n@@ -263,17 +265,17 @@ public List<EventCategoryTO> listAuditEvents() {\n             events.add(new EventCategoryTO(EventCategoryType.SYNCHRONIZATION));\n             events.add(new EventCategoryTO(EventCategoryType.PUSH));\n \n-            for (AttributableType attributableType : AttributableType.values()) {\n+            for (AnyTypeKind anyTypeKind : AnyTypeKind.values()) {\n                 for (ExternalResource resource : resourceDAO.findAll()) {\n                     EventCategoryTO propEventCategoryTO = new EventCategoryTO(EventCategoryType.PROPAGATION);\n                     EventCategoryTO syncEventCategoryTO = new EventCategoryTO(EventCategoryType.SYNCHRONIZATION);\n                     EventCategoryTO pushEventCategoryTO = new EventCategoryTO(EventCategoryType.PUSH);\n \n-                    propEventCategoryTO.setCategory(attributableType.name().toLowerCase());\n+                    propEventCategoryTO.setCategory(anyTypeKind.name().toLowerCase());\n                     propEventCategoryTO.setSubcategory(resource.getKey());\n \n-                    syncEventCategoryTO.setCategory(attributableType.name().toLowerCase());\n-                    pushEventCategoryTO.setCategory(attributableType.name().toLowerCase());\n+                    syncEventCategoryTO.setCategory(anyTypeKind.name().toLowerCase());\n+                    pushEventCategoryTO.setCategory(anyTypeKind.name().toLowerCase());\n                     syncEventCategoryTO.setSubcategory(resource.getKey());\n                     pushEventCategoryTO.setSubcategory(resource.getKey());\n "},{"sha":"d8611adb3ffdc31e41267d01da162840675ae385","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -37,6 +37,7 @@\n import org.apache.cocoon.sax.component.XMLSerializer;\n import org.apache.cocoon.sax.component.XSLTTransformer;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IteratorUtils;\n import org.apache.commons.collections4.PredicateUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.io.IOUtils;\n@@ -62,7 +63,6 @@\n import org.apache.syncope.core.logic.report.Reportlet;\n import org.apache.syncope.core.logic.report.ReportletConfClass;\n import org.apache.syncope.core.logic.report.TextSerializer;\n-import org.apache.syncope.common.lib.CollectionUtils2;\n import org.apache.syncope.common.lib.to.AbstractExecTO;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.JobAction;\n@@ -169,7 +169,9 @@ private Class<? extends ReportletConf> getReportletConfClass(final Class<Reportl\n \n     @SuppressWarnings({ \"rawtypes\" })\n     private Set<Class<Reportlet>> getAllReportletClasses() {\n-        return CollectionUtils2.collect(classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.REPORTLET),\n+        return CollectionUtils.collect(IteratorUtils.filteredIterator(\n+                classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.REPORTLET).iterator(),\n+                PredicateUtils.notNullPredicate()),\n                 new Transformer<String, Class<Reportlet>>() {\n \n                     @SuppressWarnings(\"unchecked\")\n@@ -187,21 +189,22 @@ public Class<Reportlet> transform(final String className) {\n \n                         return result;\n                     }\n-                },\n-                PredicateUtils.notNullPredicate(), new HashSet<Class<Reportlet>>());\n+                }, new HashSet<Class<Reportlet>>());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_LIST + \"')\")\n+    @SuppressWarnings({ \"rawtypes\" })\n     public Set<String> getReportletConfClasses() {\n-        return CollectionUtils2.collect(getAllReportletClasses(),\n+        return CollectionUtils.collect(IteratorUtils.filteredIterator(getAllReportletClasses().iterator(),\n+                PredicateUtils.notNullPredicate()),\n                 new Transformer<Class<Reportlet>, String>() {\n \n                     @Override\n                     public String transform(final Class<Reportlet> reportletClass) {\n                         Class<? extends ReportletConf> reportletConfClass = getReportletConfClass(reportletClass);\n                         return reportletConfClass == null ? null : reportletConfClass.getName();\n                     }\n-                }, PredicateUtils.notNullPredicate(), new HashSet<String>());\n+                }, new HashSet<String>());\n     }\n \n     public Class<Reportlet> findReportletClassHavingConfClass(final Class<? extends ReportletConf> reportletConfClass) {"},{"sha":"073150b29ee8a3fddac3b4dd862f620aed43a443","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":48,"deletions":32,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -29,31 +29,34 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.common.lib.types.SubjectType;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.Subject;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n import org.apache.syncope.core.provisioning.api.data.ResourceDataBinder;\n import org.apache.syncope.core.misc.ConnObjectUtils;\n import org.apache.syncope.core.misc.MappingUtils;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.Name;\n-import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n@@ -66,6 +69,12 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n+    @Autowired\n+    private AnyObjectDAO anyObjectDAO;\n+\n     @Autowired\n     private UserDAO userDAO;\n \n@@ -82,7 +91,7 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {\n     private ConnectorFactory connFactory;\n \n     @Autowired\n-    private AttributableUtilsFactory attrUtilsFactory;\n+    private AnyUtilsFactory anyUtilsFactory;\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.RESOURCE_CREATE + \"')\")\n     public ResourceTO create(final ResourceTO resourceTO) {\n@@ -170,37 +179,45 @@ public ResourceTO transform(final ExternalResource input) {\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.RESOURCE_GETCONNECTOROBJECT + \"')\")\n     @Transactional(readOnly = true)\n-    public ConnObjectTO getConnectorObject(final String resourceName, final SubjectType type, final Long id) {\n-        ExternalResource resource = resourceDAO.find(resourceName);\n+    public ConnObjectTO readConnObject(final String resourceKey, final String anyTypeKey, final Long key) {\n+        ExternalResource resource = resourceDAO.find(resourceKey);\n         if (resource == null) {\n-            throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n+            throw new NotFoundException(\"Resource '\" + resourceKey + \"'\");\n+        }\n+        AnyType anyType = anyTypeDAO.find(anyTypeKey);\n+        if (anyType == null) {\n+            throw new NotFoundException(\"AnyType '\" + anyTypeKey + \"'\");\n+        }\n+        Provision provision = resource.getProvision(anyType);\n+        if (provision == null) {\n+            throw new NotFoundException(\"Provision on resource '\" + resourceKey + \"' for type '\" + anyTypeKey + \"'\");\n         }\n \n-        Subject<?, ?, ?> subject = type == SubjectType.USER\n-                ? userDAO.find(id)\n-                : groupDAO.find(id);\n-        if (subject == null) {\n-            throw new NotFoundException(type + \" \" + id);\n+        Any<?, ?, ?> any = anyType.getKind() == AnyTypeKind.USER\n+                ? userDAO.find(key)\n+                : anyType.getKind() == AnyTypeKind.ANY_OBJECT\n+                        ? anyObjectDAO.find(key)\n+                        : groupDAO.find(key);\n+        if (any == null) {\n+            throw new NotFoundException(anyType + \" \" + key);\n         }\n \n-        final AttributableUtils attrUtils = attrUtilsFactory.getInstance(type.asAttributableType());\n+        AnyUtils attrUtils = anyUtilsFactory.getInstance(anyType.getKind());\n \n-        MappingItem accountIdItem = attrUtils.getAccountIdItem(resource);\n-        if (accountIdItem == null) {\n+        MappingItem connObjectKeyItem = attrUtils.getConnObjectKeyItem(provision);\n+        if (connObjectKeyItem == null) {\n             throw new NotFoundException(\n-                    \"AccountId mapping for \" + type + \" \" + id + \" on resource '\" + resourceName + \"'\");\n+                    \"ConnObjectKey mapping for \" + anyType + \" \" + key + \" on resource '\" + resourceKey + \"'\");\n         }\n-        final String accountIdValue = MappingUtils.getAccountIdValue(\n-                subject, resource, attrUtils.getAccountIdItem(resource));\n+        String connObjectKeyValue = MappingUtils.getConnObjectKeyValue(any, provision);\n \n-        final ObjectClass objectClass = SubjectType.USER == type ? ObjectClass.ACCOUNT : ObjectClass.GROUP;\n-\n-        final Connector connector = connFactory.getConnector(resource);\n-        final ConnectorObject connectorObject = connector.getObject(objectClass, new Uid(accountIdValue),\n-                connector.getOperationOptions(attrUtils.getMappingItems(resource, MappingPurpose.BOTH)));\n+        Connector connector = connFactory.getConnector(resource);\n+        ConnectorObject connectorObject = connector.getObject(\n+                provision.getObjectClass(), new Uid(connObjectKeyValue),\n+                connector.getOperationOptions(attrUtils.getMappingItems(provision, MappingPurpose.BOTH)));\n         if (connectorObject == null) {\n-            throw new NotFoundException(\"Object \" + accountIdValue + \" with class \" + objectClass\n-                    + \"not found on resource \" + resourceName);\n+            throw new NotFoundException(\"Object \" + connObjectKeyValue + \" with class \" + provision.getObjectClass()\n+                    + \"not found on resource \" + resourceKey);\n         }\n \n         final Set<Attribute> attributes = connectorObject.getAttributes();\n@@ -217,9 +234,8 @@ public ConnObjectTO getConnectorObject(final String resourceName, final SubjectT\n     @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n     public boolean check(final ResourceTO resourceTO) {\n-        final ConnInstance connInstance = binder.getConnInstance(resourceTO);\n-\n-        final Connector connector = connFactory.createConnector(connInstance, connInstance.getConfiguration());\n+        ConnInstance connInstance = binder.getConnInstance(resourceTO);\n+        Connector connector = connFactory.createConnector(connInstance, connInstance.getConfiguration());\n \n         boolean result;\n         try {"},{"sha":"befa8bff9ec1e90fa350977dd47f4bb597e694c3","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java","status":"modified","additions":41,"deletions":59,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -30,7 +30,6 @@\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n-import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.SchemaType;\n@@ -39,9 +38,8 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.provisioning.api.data.SchemaDataBinder;\n@@ -65,22 +63,22 @@ public class SchemaLogic extends AbstractTransactionalLogic<AbstractSchemaTO> {\n     private SchemaDataBinder binder;\n \n     @Autowired\n-    private AttributableUtilsFactory attrUtilsFactory;\n+    private EntityFactory entityFactory;\n \n-    private boolean doesSchemaExist(final SchemaType schemaType, final String name, final AttributableUtils attrUtils) {\n+    private boolean doesSchemaExist(final SchemaType schemaType, final String name) {\n         boolean found;\n \n         switch (schemaType) {\n             case VIRTUAL:\n-                found = virSchemaDAO.find(name, attrUtils.virSchemaClass()) != null;\n+                found = virSchemaDAO.find(name) != null;\n                 break;\n \n             case DERIVED:\n-                found = derSchemaDAO.find(name, attrUtils.derSchemaClass()) != null;\n+                found = derSchemaDAO.find(name) != null;\n                 break;\n \n             case PLAIN:\n-                found = plainSchemaDAO.find(name, attrUtils.plainSchemaClass()) != null;\n+                found = plainSchemaDAO.find(name) != null;\n                 break;\n \n             default:\n@@ -92,30 +90,28 @@ private boolean doesSchemaExist(final SchemaType schemaType, final String name,\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.SCHEMA_CREATE + \"')\")\n     @SuppressWarnings(\"unchecked\")\n-    public <T extends AbstractSchemaTO> T create(\n-            final AttributableType attrType, final SchemaType schemaType, final T schemaTO) {\n-\n+    public <T extends AbstractSchemaTO> T create(final SchemaType schemaType, final T schemaTO) {\n         if (StringUtils.isBlank(schemaTO.getKey())) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n             sce.getElements().add(\"Schema name\");\n             throw sce;\n         }\n \n-        AttributableUtils attrUtils = attrUtilsFactory.getInstance(attrType);\n-        if (doesSchemaExist(schemaType, schemaTO.getKey(), attrUtils)) {\n-            throw new DuplicateException(attrType + \"/\" + schemaType + \"/\" + schemaTO.getKey());\n+        if (doesSchemaExist(schemaType, schemaTO.getKey())) {\n+            throw new DuplicateException(schemaType + \"/\" + schemaTO.getKey());\n         }\n \n         T created;\n         switch (schemaType) {\n             case VIRTUAL:\n-                VirSchema virSchema = attrUtils.newVirSchema();\n+                VirSchema virSchema = entityFactory.newEntity(VirSchema.class);\n                 binder.create((VirSchemaTO) schemaTO, virSchema);\n                 virSchema = virSchemaDAO.save(virSchema);\n                 created = (T) binder.getVirSchemaTO(virSchema);\n                 break;\n+\n             case DERIVED:\n-                DerSchema derSchema = attrUtils.newDerSchema();\n+                DerSchema derSchema = entityFactory.newEntity(DerSchema.class);\n                 binder.create((DerSchemaTO) schemaTO, derSchema);\n                 derSchema = derSchemaDAO.save(derSchema);\n \n@@ -124,47 +120,43 @@ public <T extends AbstractSchemaTO> T create(\n \n             case PLAIN:\n             default:\n-                PlainSchema normalSchema = attrUtils.newPlainSchema();\n+                PlainSchema normalSchema = entityFactory.newEntity(PlainSchema.class);\n                 binder.create((PlainSchemaTO) schemaTO, normalSchema);\n                 normalSchema = plainSchemaDAO.save(normalSchema);\n \n-                created = (T) binder.getPlainSchemaTO(normalSchema, attrUtils);\n+                created = (T) binder.getPlainSchemaTO(normalSchema);\n         }\n         return created;\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.SCHEMA_DELETE + \"')\")\n-    public void delete(final AttributableType attrType, final SchemaType schemaType, final String schemaName) {\n-        final AttributableUtils attrUtils = attrUtilsFactory.getInstance(attrType);\n-\n-        if (!doesSchemaExist(schemaType, schemaName, attrUtils)) {\n-            throw new NotFoundException(schemaType + \"/\" + attrType + \"/\" + schemaName);\n+    public void delete(final SchemaType schemaType, final String schemaName) {\n+        if (!doesSchemaExist(schemaType, schemaName)) {\n+            throw new NotFoundException(schemaType + \"/\" + schemaName);\n         }\n \n         switch (schemaType) {\n             case VIRTUAL:\n-                virSchemaDAO.delete(schemaName, attrUtils);\n+                virSchemaDAO.delete(schemaName);\n                 break;\n \n             case DERIVED:\n-                derSchemaDAO.delete(schemaName, attrUtils);\n+                derSchemaDAO.delete(schemaName);\n                 break;\n \n             case PLAIN:\n             default:\n-                plainSchemaDAO.delete(schemaName, attrUtils);\n+                plainSchemaDAO.delete(schemaName);\n         }\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @SuppressWarnings(\"unchecked\")\n-    public <T extends AbstractSchemaTO> List<T> list(final AttributableType attrType, final SchemaType schemaType) {\n-        final AttributableUtils attrUtils = attrUtilsFactory.getInstance(attrType);\n-\n+    public <T extends AbstractSchemaTO> List<T> list(final SchemaType schemaType) {\n         List<T> result;\n         switch (schemaType) {\n             case VIRTUAL:\n-                result = CollectionUtils.collect(virSchemaDAO.findAll(attrUtils.virSchemaClass()),\n+                result = CollectionUtils.collect(virSchemaDAO.findAll(),\n                         new Transformer<VirSchema, T>() {\n \n                             @Override\n@@ -175,7 +167,7 @@ public T transform(final VirSchema input) {\n                 break;\n \n             case DERIVED:\n-                result = CollectionUtils.collect(derSchemaDAO.findAll(attrUtils.derSchemaClass()),\n+                result = CollectionUtils.collect(derSchemaDAO.findAll(),\n                         new Transformer<DerSchema, T>() {\n \n                             @Override\n@@ -187,12 +179,12 @@ public T transform(final DerSchema input) {\n \n             case PLAIN:\n             default:\n-                result = CollectionUtils.collect(plainSchemaDAO.findAll(attrUtils.plainSchemaClass()),\n+                result = CollectionUtils.collect(plainSchemaDAO.findAll(),\n                         new Transformer<PlainSchema, T>() {\n \n                             @Override\n                             public T transform(final PlainSchema input) {\n-                                return (T) binder.getPlainSchemaTO(input, attrUtils);\n+                                return (T) binder.getPlainSchemaTO(input);\n                             }\n                         }, new ArrayList<T>());\n         }\n@@ -202,15 +194,11 @@ public T transform(final PlainSchema input) {\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.SCHEMA_READ + \"')\")\n     @SuppressWarnings(\"unchecked\")\n-    public <T extends AbstractSchemaTO> T read(\n-            final AttributableType attrType, final SchemaType schemaType, final String schemaName) {\n-\n-        final AttributableUtils attrUtils = attrUtilsFactory.getInstance(attrType);\n-\n+    public <T extends AbstractSchemaTO> T read(final SchemaType schemaType, final String schemaName) {\n         T read;\n         switch (schemaType) {\n             case VIRTUAL:\n-                VirSchema virSchema = virSchemaDAO.find(schemaName, attrUtils.virSchemaClass());\n+                VirSchema virSchema = virSchemaDAO.find(schemaName);\n                 if (virSchema == null) {\n                     throw new NotFoundException(\"Virtual Schema '\" + schemaName + \"'\");\n                 }\n@@ -219,7 +207,7 @@ public <T extends AbstractSchemaTO> T read(\n                 break;\n \n             case DERIVED:\n-                DerSchema derSchema = derSchemaDAO.find(schemaName, attrUtils.derSchemaClass());\n+                DerSchema derSchema = derSchemaDAO.find(schemaName);\n                 if (derSchema == null) {\n                     throw new NotFoundException(\"Derived schema '\" + schemaName + \"'\");\n                 }\n@@ -229,30 +217,26 @@ public <T extends AbstractSchemaTO> T read(\n \n             case PLAIN:\n             default:\n-                PlainSchema schema = plainSchemaDAO.find(schemaName, attrUtils.plainSchemaClass());\n+                PlainSchema schema = plainSchemaDAO.find(schemaName);\n                 if (schema == null) {\n                     throw new NotFoundException(\"Schema '\" + schemaName + \"'\");\n                 }\n \n-                read = (T) binder.getPlainSchemaTO(schema, attrUtils);\n+                read = (T) binder.getPlainSchemaTO(schema);\n         }\n \n         return read;\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.SCHEMA_UPDATE + \"')\")\n-    public <T extends AbstractSchemaTO> void update(\n-            final AttributableType attrType, final SchemaType schemaType, final T schemaTO) {\n-\n-        final AttributableUtils attrUtils = attrUtilsFactory.getInstance(attrType);\n-\n-        if (!doesSchemaExist(schemaType, schemaTO.getKey(), attrUtils)) {\n-            throw new NotFoundException(schemaType + \"/\" + attrType + \"/\" + schemaTO.getKey());\n+    public <T extends AbstractSchemaTO> void update(final SchemaType schemaType, final T schemaTO) {\n+        if (!doesSchemaExist(schemaType, schemaTO.getKey())) {\n+            throw new NotFoundException(schemaType + \"/\" + schemaTO.getKey());\n         }\n \n         switch (schemaType) {\n             case VIRTUAL:\n-                VirSchema virSchema = virSchemaDAO.find(schemaTO.getKey(), attrUtils.virSchemaClass());\n+                VirSchema virSchema = virSchemaDAO.find(schemaTO.getKey());\n                 if (virSchema == null) {\n                     throw new NotFoundException(\"Virtual Schema '\" + schemaTO.getKey() + \"'\");\n                 }\n@@ -262,7 +246,7 @@ public <T extends AbstractSchemaTO> void update(\n                 break;\n \n             case DERIVED:\n-                DerSchema derSchema = derSchemaDAO.find(schemaTO.getKey(), attrUtils.derSchemaClass());\n+                DerSchema derSchema = derSchemaDAO.find(schemaTO.getKey());\n                 if (derSchema == null) {\n                     throw new NotFoundException(\"Derived schema '\" + schemaTO.getKey() + \"'\");\n                 }\n@@ -273,12 +257,12 @@ public <T extends AbstractSchemaTO> void update(\n \n             case PLAIN:\n             default:\n-                PlainSchema schema = plainSchemaDAO.find(schemaTO.getKey(), attrUtils.plainSchemaClass());\n+                PlainSchema schema = plainSchemaDAO.find(schemaTO.getKey());\n                 if (schema == null) {\n                     throw new NotFoundException(\"Schema '\" + schemaTO.getKey() + \"'\");\n                 }\n \n-                binder.update((PlainSchemaTO) schemaTO, schema, attrUtils);\n+                binder.update((PlainSchemaTO) schemaTO, schema);\n                 plainSchemaDAO.save(schema);\n         }\n     }\n@@ -305,23 +289,21 @@ protected AbstractSchemaTO resolveReference(final Method method, final Object...\n \n         if (key != null) {\n             try {\n-                final AttributableUtils attrUtils = attrUtilsFactory.getInstance(kind);\n-\n                 AbstractSchemaTO result = null;\n \n-                PlainSchema plainSchema = plainSchemaDAO.find(key, attrUtils.plainSchemaClass());\n+                PlainSchema plainSchema = plainSchemaDAO.find(key);\n                 if (plainSchema == null) {\n-                    DerSchema derSchema = derSchemaDAO.find(key, attrUtils.derSchemaClass());\n+                    DerSchema derSchema = derSchemaDAO.find(key);\n                     if (derSchema == null) {\n-                        VirSchema virSchema = virSchemaDAO.find(key, attrUtils.virSchemaClass());\n+                        VirSchema virSchema = virSchemaDAO.find(key);\n                         if (virSchema != null) {\n                             result = binder.getVirSchemaTO(virSchema);\n                         }\n                     } else {\n                         result = binder.getDerSchemaTO(derSchema);\n                     }\n                 } else {\n-                    result = binder.getPlainSchemaTO(plainSchema, attrUtils);\n+                    result = binder.getPlainSchemaTO(plainSchema);\n                 }\n \n                 return result;"},{"sha":"bc8fb0f567fd69bc7a01c48152efeed0f45c2897","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":13,"deletions":3,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -28,12 +28,14 @@\n import org.apache.syncope.core.logic.init.ImplementationClassNamesLoader;\n import org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n-import org.apache.syncope.core.provisioning.api.AttributableTransformer;\n+import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.AnyTransformer;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n import org.apache.syncope.core.provisioning.java.notification.NotificationManagerImpl;\n+import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.springframework.aop.support.AopUtils;\n@@ -55,14 +57,20 @@ public class SyncopeLogic extends AbstractLogic<SyncopeTO> {\n     private ConnIdBundleManager bundleManager;\n \n     @Autowired\n-    private AttributableTransformer attrTransformer;\n+    private AnyTransformer anyTransformer;\n+\n+    @Autowired\n+    private AnyObjectWorkflowAdapter awfAdapter;\n \n     @Autowired\n     private UserWorkflowAdapter uwfAdapter;\n \n     @Autowired\n     private GroupWorkflowAdapter gwfAdapter;\n \n+    @Autowired\n+    private AnyObjectProvisioningManager aProvisioningManager;\n+\n     @Autowired\n     private UserProvisioningManager uProvisioningManager;\n \n@@ -109,11 +117,13 @@ public SyncopeTO info() {\n             }\n         }\n \n-        syncopeTO.setAttributableTransformer(attrTransformer.getClass().getName());\n+        syncopeTO.setAnyTransformer(anyTransformer.getClass().getName());\n \n+        syncopeTO.setAnyObjectWorkflowAdapter(AopUtils.getTargetClass(awfAdapter).getName());\n         syncopeTO.setUserWorkflowAdapter(AopUtils.getTargetClass(uwfAdapter).getName());\n         syncopeTO.setGroupWorkflowAdapter(AopUtils.getTargetClass(gwfAdapter).getName());\n \n+        syncopeTO.setAnyObjectProvisioningManager(aProvisioningManager.getClass().getName());\n         syncopeTO.setUserProvisioningManager(uProvisioningManager.getClass().getName());\n         syncopeTO.setGroupProvisioningManager(gProvisioningManager.getClass().getName());\n         syncopeTO.setVirAttrCache(virAttrCache.getClass().getName());"},{"sha":"2ec1175e83149830ffb17174225198bb41b149e0","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":14,"deletions":30,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -32,23 +32,20 @@\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.mod.AttrMod;\n import org.apache.syncope.common.lib.mod.StatusMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.Entitlement;\n-import org.apache.syncope.common.lib.types.SubjectType;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.AttributableTransformer;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n@@ -57,6 +54,8 @@\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.security.UnauthorizedException;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.provisioning.api.AnyTransformer;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -68,7 +67,7 @@\n  * Spring's Transactional logic at class level.\n  */\n @Component\n-public class UserLogic extends AbstractSubjectLogic<UserTO, UserMod> {\n+public class UserLogic extends AbstractAnyLogic<UserTO, UserMod> {\n \n     @Autowired\n     protected UserDAO userDAO;\n@@ -77,7 +76,7 @@ public class UserLogic extends AbstractSubjectLogic<UserTO, UserMod> {\n     protected GroupDAO groupDAO;\n \n     @Autowired\n-    protected SubjectSearchDAO searchDAO;\n+    protected AnySearchDAO searchDAO;\n \n     @Autowired\n     protected UserDataBinder binder;\n@@ -92,7 +91,7 @@ public class UserLogic extends AbstractSubjectLogic<UserTO, UserMod> {\n     protected PropagationTaskExecutor taskExecutor;\n \n     @Autowired\n-    protected AttributableTransformer attrTransformer;\n+    protected AnyTransformer anyTransformer;\n \n     @Autowired\n     protected UserProvisioningManager provisioningManager;\n@@ -157,7 +156,7 @@ public UserTO read(final Long key) {\n     public int searchCount(final SearchCond searchCondition, final List<String> realms) {\n         return searchDAO.count(\n                 getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.USER_SEARCH), realms),\n-                searchCondition, SubjectType.USER);\n+                searchCondition, AnyTypeKind.USER);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_SEARCH + \"')\")\n@@ -168,7 +167,7 @@ public List<UserTO> search(final SearchCond searchCondition, final int page, fin\n \n         List<User> matchingUsers = searchDAO.search(\n                 getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.USER_SEARCH), realms),\n-                searchCondition, page, size, orderBy, SubjectType.USER);\n+                searchCondition, page, size, orderBy, AnyTypeKind.USER);\n         return CollectionUtils.collect(matchingUsers, new Transformer<User, UserTO>() {\n \n             @Override\n@@ -193,15 +192,15 @@ public UserTO create(final UserTO userTO, final boolean storePassword) {\n                 AuthContextUtils.getAuthorizations().get(Entitlement.USER_CREATE),\n                 Collections.singleton(userTO.getRealm()));\n         if (effectiveRealms.isEmpty()) {\n-            throw new UnauthorizedException(SubjectType.USER, null);\n+            throw new UnauthorizedException(AnyTypeKind.USER, null);\n         }\n \n         return doCreate(userTO, storePassword);\n     }\n \n     protected UserTO doCreate(final UserTO userTO, final boolean storePassword) {\n         // Attributable transformation (if configured)\n-        UserTO actual = attrTransformer.transform(userTO);\n+        UserTO actual = anyTransformer.transform(userTO);\n         LOG.debug(\"Transformed: {}\", actual);\n \n         Map.Entry<Long, List<PropagationStatus>> created = provisioningManager.create(actual, storePassword);\n@@ -226,25 +225,10 @@ public UserTO updateSelf(final UserMod userMod) {\n     @Override\n     public UserTO update(final UserMod userMod) {\n         // AttributableMod transformation (if configured)\n-        UserMod actual = attrTransformer.transform(userMod);\n+        UserMod actual = anyTransformer.transform(userMod);\n         LOG.debug(\"Transformed: {}\", actual);\n \n-        // SYNCOPE-501: check if there are memberships to be removed with virtual attributes assigned\n-        boolean removeMemberships = false;\n-        for (Long membershipId : actual.getMembershipsToRemove()) {\n-            if (!virtAttrHandler.fillMembershipVirtual(\n-                    null,\n-                    null,\n-                    membershipId,\n-                    Collections.<String>emptySet(),\n-                    Collections.<AttrMod>emptySet(),\n-                    true).isEmpty()) {\n-\n-                removeMemberships = true;\n-            }\n-        }\n-\n-        Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(actual, removeMemberships);\n+        Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(actual);\n \n         UserTO updatedTO = binder.getUserTO(updated.getKey());\n         updatedTO.getPropagationStatusTOs().addAll(updated.getValue());\n@@ -277,7 +261,7 @@ protected Map.Entry<Long, List<PropagationStatus>> setStatusOnWfAdapter(final Us\n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     public UserTO status(final StatusMod statusMod) {\n-        User user = userDAO.authFetch(statusMod.getKey());\n+        User user = userDAO.authFind(statusMod.getKey());\n \n         Map.Entry<Long, List<PropagationStatus>> updated = setStatusOnWfAdapter(user, statusMod);\n         final UserTO savedTO = binder.getUserTO(updated.getKey());\n@@ -414,7 +398,7 @@ public UserTO assign(\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public UserTO deprovision(final Long key, final Collection<String> resources) {\n-        final User user = userDAO.authFetch(key);\n+        final User user = userDAO.authFind(key);\n \n         List<PropagationStatus> statuses = provisioningManager.deprovision(key, resources);\n "},{"sha":"51d8b459578c33ae0565341eec739fd744cb466b","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserWorkflowLogic.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -22,7 +22,7 @@\n import java.util.List;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.mod.AbstractAttributableMod;\n+import org.apache.syncope.common.lib.mod.AnyMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n@@ -84,7 +84,7 @@ public UserTO executeWorkflowTask(final UserTO userTO, final String taskId) {\n     @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_FORM_READ + \"') and hasRole('\" + Entitlement.USER_READ + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     public WorkflowFormTO getFormForUser(final Long key) {\n-        User user = userDAO.authFetch(key);\n+        User user = userDAO.authFind(key);\n         return uwfAdapter.getForm(user.getWorkflowId());\n     }\n \n@@ -97,14 +97,14 @@ public List<WorkflowFormTO> getForms() {\n     @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_FORM_READ + \"') and hasRole('\" + Entitlement.USER_READ + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     public List<WorkflowFormTO> getForms(final Long key, final String formName) {\n-        User user = userDAO.authFetch(key);\n+        User user = userDAO.authFind(key);\n         return uwfAdapter.getForms(user.getWorkflowId(), formName);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_FORM_SUBMIT + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     public UserTO submitForm(final WorkflowFormTO form) {\n-        WorkflowResult<? extends AbstractAttributableMod> updated = uwfAdapter.submitForm(form);\n+        WorkflowResult<? extends AnyMod> updated = uwfAdapter.submitForm(form);\n \n         // propByRes can be made empty by the workflow definition if no propagation should occur \n         // (for example, with rejected users)"},{"sha":"58777f73b1a6e76c463ad68f01f0ce64223996fc","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/WorkflowLogic.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FWorkflowLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FWorkflowLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FWorkflowLogic.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -23,6 +23,7 @@\n import javax.ws.rs.core.MediaType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.WorkflowAdapter;\n@@ -35,6 +36,9 @@\n @Component\n public class WorkflowLogic extends AbstractTransactionalLogic<AbstractBaseBean> {\n \n+    @Autowired\n+    private AnyObjectWorkflowAdapter awfAdapter;\n+\n     @Autowired\n     private UserWorkflowAdapter uwfAdapter;\n \n@@ -53,6 +57,12 @@ private WorkflowDefinitionFormat getFormat(final MediaType format) {\n                 : WorkflowDefinitionFormat.XML;\n     }\n \n+    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_DEF_READ + \"')\")\n+    @Transactional(readOnly = true)\n+    public void exportAnyObjectDefinition(final MediaType format, final OutputStream os) {\n+        exportDefinition(awfAdapter, getFormat(format), os);\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_DEF_READ + \"')\")\n     @Transactional(readOnly = true)\n     public void exportUserDefinition(final MediaType format, final OutputStream os) {\n@@ -69,6 +79,12 @@ private void exportDiagram(final WorkflowAdapter adapter, final OutputStream os)\n         adapter.exportDiagram(os);\n     }\n \n+    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_DEF_READ + \"')\")\n+    @Transactional(readOnly = true)\n+    public void exportAnyObjectDiagram(final OutputStream os) {\n+        exportDiagram(awfAdapter, os);\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_DEF_READ + \"')\")\n     @Transactional(readOnly = true)\n     public void exportUserDiagram(final OutputStream os) {\n@@ -87,6 +103,11 @@ private void importDefinition(\n         adapter.importDefinition(format, definition);\n     }\n \n+    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_DEF_UPDATE + \"')\")\n+    public void importAnyObjectDefinition(final MediaType format, final String definition) {\n+        importDefinition(awfAdapter, getFormat(format), definition);\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_DEF_UPDATE + \"')\")\n     public void importUserDefinition(final MediaType format, final String definition) {\n         importDefinition(uwfAdapter, getFormat(format), definition);"},{"sha":"72bfb3360762af996e9139aa02652b278e25f3dc","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/GroupReportlet.java","status":"modified","additions":21,"deletions":22,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FGroupReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FGroupReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FGroupReportlet.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -26,17 +26,16 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.report.GroupReportletConf;\n import org.apache.syncope.common.lib.report.GroupReportletConf.Feature;\n-import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n-import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n+import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.xml.sax.ContentHandler;\n@@ -52,7 +51,7 @@ public class GroupReportlet extends AbstractReportlet<GroupReportletConf> {\n     private GroupDAO groupDAO;\n \n     @Autowired\n-    private SubjectSearchDAO searchDAO;\n+    private AnySearchDAO searchDAO;\n \n     @Autowired\n     private GroupDataBinder groupDataBinder;\n@@ -65,7 +64,7 @@ private List<Group> getPagedGroups(final int page) {\n         } else {\n             result = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n                     SearchCondConverter.convert(conf.getMatchingCond()),\n-                    page, PAGE_SIZE, Collections.<OrderByClause>emptyList(), SubjectType.GROUP);\n+                    page, PAGE_SIZE, Collections.<OrderByClause>emptyList(), AnyTypeKind.GROUP);\n         }\n \n         return result;\n@@ -75,19 +74,19 @@ private int count() {\n         return StringUtils.isBlank(conf.getMatchingCond())\n                 ? groupDAO.count(SyncopeConstants.FULL_ADMIN_REALMS)\n                 : searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS,\n-                        SearchCondConverter.convert(conf.getMatchingCond()), SubjectType.GROUP);\n+                        SearchCondConverter.convert(conf.getMatchingCond()), AnyTypeKind.GROUP);\n     }\n \n-    private void doExtractResources(final ContentHandler handler, final AbstractSubjectTO subjectTO)\n+    private void doExtractResources(final ContentHandler handler, final AnyTO anyTO)\n             throws SAXException {\n \n-        if (subjectTO.getResources().isEmpty()) {\n-            LOG.debug(\"No resources found for {}[{}]\", subjectTO.getClass().getSimpleName(), subjectTO.getKey());\n+        if (anyTO.getResources().isEmpty()) {\n+            LOG.debug(\"No resources found for {}[{}]\", anyTO.getClass().getSimpleName(), anyTO.getKey());\n         } else {\n             AttributesImpl atts = new AttributesImpl();\n             handler.startElement(\"\", \"\", \"resources\", null);\n \n-            for (String resourceName : subjectTO.getResources()) {\n+            for (String resourceName : anyTO.getResources()) {\n                 atts.clear();\n \n                 atts.addAttribute(\"\", \"\", ReportXMLConst.ATTR_NAME, ReportXMLConst.XSD_STRING, resourceName);\n@@ -99,13 +98,13 @@ private void doExtractResources(final ContentHandler handler, final AbstractSubj\n         }\n     }\n \n-    private void doExtractAttributes(final ContentHandler handler, final AbstractAttributableTO attributableTO,\n+    private void doExtractAttributes(final ContentHandler handler, final AnyTO anyTO,\n             final Collection<String> attrs, final Collection<String> derAttrs, final Collection<String> virAttrs)\n             throws SAXException {\n \n         AttributesImpl atts = new AttributesImpl();\n         if (!attrs.isEmpty()) {\n-            Map<String, AttrTO> attrMap = attributableTO.getPlainAttrMap();\n+            Map<String, AttrTO> attrMap = anyTO.getPlainAttrMap();\n \n             handler.startElement(\"\", \"\", \"attributes\", null);\n             for (String attrName : attrs) {\n@@ -122,7 +121,7 @@ private void doExtractAttributes(final ContentHandler handler, final AbstractAtt\n                     }\n                 } else {\n                     LOG.debug(\"{} not found for {}[{}]\", attrName,\n-                            attributableTO.getClass().getSimpleName(), attributableTO.getKey());\n+                            anyTO.getClass().getSimpleName(), anyTO.getKey());\n                 }\n \n                 handler.endElement(\"\", \"\", \"attribute\");\n@@ -131,7 +130,7 @@ private void doExtractAttributes(final ContentHandler handler, final AbstractAtt\n         }\n \n         if (!derAttrs.isEmpty()) {\n-            Map<String, AttrTO> derAttrMap = attributableTO.getDerAttrMap();\n+            Map<String, AttrTO> derAttrMap = anyTO.getDerAttrMap();\n \n             handler.startElement(\"\", \"\", \"derivedAttributes\", null);\n             for (String attrName : derAttrs) {\n@@ -148,7 +147,7 @@ private void doExtractAttributes(final ContentHandler handler, final AbstractAtt\n                     }\n                 } else {\n                     LOG.debug(\"{} not found for {}[{}]\", attrName,\n-                            attributableTO.getClass().getSimpleName(), attributableTO.getKey());\n+                            anyTO.getClass().getSimpleName(), anyTO.getKey());\n                 }\n \n                 handler.endElement(\"\", \"\", \"derivedAttribute\");\n@@ -157,7 +156,7 @@ private void doExtractAttributes(final ContentHandler handler, final AbstractAtt\n         }\n \n         if (!virAttrs.isEmpty()) {\n-            Map<String, AttrTO> virAttrMap = attributableTO.getVirAttrMap();\n+            Map<String, AttrTO> virAttrMap = anyTO.getVirAttrMap();\n \n             handler.startElement(\"\", \"\", \"virtualAttributes\", null);\n             for (String attrName : virAttrs) {\n@@ -174,7 +173,7 @@ private void doExtractAttributes(final ContentHandler handler, final AbstractAtt\n                     }\n                 } else {\n                     LOG.debug(\"{} not found for {}[{}]\", attrName,\n-                            attributableTO.getClass().getSimpleName(), attributableTO.getKey());\n+                            anyTO.getClass().getSimpleName(), anyTO.getKey());\n                 }\n \n                 handler.endElement(\"\", \"\", \"virtualAttribute\");\n@@ -236,13 +235,13 @@ private void doExtract(final ContentHandler handler, final List<Group> groups) t\n             if (conf.getFeatures().contains(Feature.users)) {\n                 handler.startElement(\"\", \"\", \"users\", null);\n \n-                for (Membership memb : groupDAO.findMemberships(group)) {\n+                for (UMembership memb : groupDAO.findUMemberships(group)) {\n                     atts.clear();\n \n                     atts.addAttribute(\"\", \"\", \"key\", ReportXMLConst.XSD_LONG,\n-                            String.valueOf(memb.getUser().getKey()));\n+                            String.valueOf(memb.getLeftEnd().getKey()));\n                     atts.addAttribute(\"\", \"\", \"username\", ReportXMLConst.XSD_STRING,\n-                            String.valueOf(memb.getUser().getUsername()));\n+                            String.valueOf(memb.getLeftEnd().getUsername()));\n \n                     handler.startElement(\"\", \"\", \"user\", atts);\n                     handler.endElement(\"\", \"\", \"user\");"},{"sha":"b4087a792eec17511846aa80f4cb322fd6454a50","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/UserReportlet.java","status":"modified","additions":22,"deletions":27,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -26,19 +26,18 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n import org.apache.syncope.common.lib.report.UserReportletConf.Feature;\n-import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n-import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n+import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.types.SubjectType;\n-import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n import org.apache.syncope.core.misc.DataFormat;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -55,7 +54,7 @@ public class UserReportlet extends AbstractReportlet<UserReportletConf> {\n     private UserDAO userDAO;\n \n     @Autowired\n-    private SubjectSearchDAO searchDAO;\n+    private AnySearchDAO searchDAO;\n \n     @Autowired\n     private UserDataBinder userDataBinder;\n@@ -71,7 +70,7 @@ private List<User> getPagedUsers(final int page) {\n         } else {\n             result = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n                     SearchCondConverter.convert(conf.getMatchingCond()),\n-                    page, PAGE_SIZE, Collections.<OrderByClause>emptyList(), SubjectType.USER);\n+                    page, PAGE_SIZE, Collections.<OrderByClause>emptyList(), AnyTypeKind.USER);\n         }\n \n         return result;\n@@ -81,19 +80,19 @@ private int count() {\n         return StringUtils.isBlank(conf.getMatchingCond())\n                 ? userDAO.count(SyncopeConstants.FULL_ADMIN_REALMS)\n                 : searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS,\n-                        SearchCondConverter.convert(conf.getMatchingCond()), SubjectType.USER);\n+                        SearchCondConverter.convert(conf.getMatchingCond()), AnyTypeKind.USER);\n     }\n \n-    private void doExtractResources(final ContentHandler handler, final AbstractSubjectTO subjectTO)\n+    private void doExtractResources(final ContentHandler handler, final AnyTO anyTO)\n             throws SAXException {\n \n-        if (subjectTO.getResources().isEmpty()) {\n-            LOG.debug(\"No resources found for {}[{}]\", subjectTO.getClass().getSimpleName(), subjectTO.getKey());\n+        if (anyTO.getResources().isEmpty()) {\n+            LOG.debug(\"No resources found for {}[{}]\", anyTO.getClass().getSimpleName(), anyTO.getKey());\n         } else {\n             AttributesImpl atts = new AttributesImpl();\n             handler.startElement(\"\", \"\", \"resources\", null);\n \n-            for (String resourceName : subjectTO.getResources()) {\n+            for (String resourceName : anyTO.getResources()) {\n                 atts.clear();\n \n                 atts.addAttribute(\"\", \"\", ReportXMLConst.ATTR_NAME, ReportXMLConst.XSD_STRING, resourceName);\n@@ -105,13 +104,13 @@ private void doExtractResources(final ContentHandler handler, final AbstractSubj\n         }\n     }\n \n-    private void doExtractAttributes(final ContentHandler handler, final AbstractAttributableTO attributableTO,\n+    private void doExtractAttributes(final ContentHandler handler, final AnyTO anyTO,\n             final Collection<String> attrs, final Collection<String> derAttrs, final Collection<String> virAttrs)\n             throws SAXException {\n \n         AttributesImpl atts = new AttributesImpl();\n         if (!attrs.isEmpty()) {\n-            Map<String, AttrTO> attrMap = attributableTO.getPlainAttrMap();\n+            Map<String, AttrTO> attrMap = anyTO.getPlainAttrMap();\n \n             handler.startElement(\"\", \"\", \"attributes\", null);\n             for (String attrName : attrs) {\n@@ -128,7 +127,7 @@ private void doExtractAttributes(final ContentHandler handler, final AbstractAtt\n                     }\n                 } else {\n                     LOG.debug(\"{} not found for {}[{}]\", attrName,\n-                            attributableTO.getClass().getSimpleName(), attributableTO.getKey());\n+                            anyTO.getClass().getSimpleName(), anyTO.getKey());\n                 }\n \n                 handler.endElement(\"\", \"\", \"attribute\");\n@@ -137,7 +136,7 @@ private void doExtractAttributes(final ContentHandler handler, final AbstractAtt\n         }\n \n         if (!derAttrs.isEmpty()) {\n-            Map<String, AttrTO> derAttrMap = attributableTO.getDerAttrMap();\n+            Map<String, AttrTO> derAttrMap = anyTO.getDerAttrMap();\n \n             handler.startElement(\"\", \"\", \"derivedAttributes\", null);\n             for (String attrName : derAttrs) {\n@@ -154,7 +153,7 @@ private void doExtractAttributes(final ContentHandler handler, final AbstractAtt\n                     }\n                 } else {\n                     LOG.debug(\"{} not found for {}[{}]\", attrName,\n-                            attributableTO.getClass().getSimpleName(), attributableTO.getKey());\n+                            anyTO.getClass().getSimpleName(), anyTO.getKey());\n                 }\n \n                 handler.endElement(\"\", \"\", \"derivedAttribute\");\n@@ -163,7 +162,7 @@ private void doExtractAttributes(final ContentHandler handler, final AbstractAtt\n         }\n \n         if (!virAttrs.isEmpty()) {\n-            Map<String, AttrTO> virAttrMap = attributableTO.getVirAttrMap();\n+            Map<String, AttrTO> virAttrMap = anyTO.getVirAttrMap();\n \n             handler.startElement(\"\", \"\", \"virtualAttributes\", null);\n             for (String attrName : virAttrs) {\n@@ -180,7 +179,7 @@ private void doExtractAttributes(final ContentHandler handler, final AbstractAtt\n                     }\n                 } else {\n                     LOG.debug(\"{} not found for {}[{}]\", attrName,\n-                            attributableTO.getClass().getSimpleName(), attributableTO.getKey());\n+                            anyTO.getClass().getSimpleName(), anyTO.getKey());\n                 }\n \n                 handler.endElement(\"\", \"\", \"virtualAttribute\");\n@@ -272,21 +271,18 @@ private void doExtract(final ContentHandler handler, final List<User> users) thr\n                     atts.clear();\n \n                     atts.addAttribute(\"\", \"\", \"id\", ReportXMLConst.XSD_LONG, String.valueOf(memb.getKey()));\n-                    atts.addAttribute(\"\", \"\", \"groupId\", ReportXMLConst.XSD_LONG, String.valueOf(memb.getGroupKey()));\n+                    atts.addAttribute(\"\", \"\", \"groupId\", ReportXMLConst.XSD_LONG, String.valueOf(memb.getRightKey()));\n                     atts.addAttribute(\"\", \"\", \"groupName\", ReportXMLConst.XSD_STRING, String.\n                             valueOf(memb.getGroupName()));\n                     handler.startElement(\"\", \"\", \"membership\", atts);\n \n-                    doExtractAttributes(handler, memb, memb.getPlainAttrMap().keySet(), memb.getDerAttrMap()\n-                            .keySet(), memb.getVirAttrMap().keySet());\n-\n                     if (conf.getFeatures().contains(Feature.resources)) {\n-                        Membership actualMemb = user.getMembership(memb.getGroupKey());\n+                        UMembership actualMemb = user.getMembership(memb.getRightKey());\n                         if (actualMemb == null) {\n-                            LOG.warn(\"Unexpected: cannot find membership for group {} for user {}\", memb.getGroupKey(),\n+                            LOG.warn(\"Unexpected: cannot find membership for group {} for user {}\", memb.getRightKey(),\n                                     user);\n                         } else {\n-                            doExtractResources(handler, groupDataBinder.getGroupTO(actualMemb.getGroup()));\n+                            doExtractResources(handler, groupDataBinder.getGroupTO(actualMemb.getRightEnd()));\n                         }\n                     }\n \n@@ -305,7 +301,6 @@ private void doExtract(final ContentHandler handler, final List<User> users) thr\n     }\n \n     private void doExtractConf(final ContentHandler handler) throws SAXException {\n-\n         AttributesImpl atts = new AttributesImpl();\n         handler.startElement(\"\", \"\", \"configurations\", null);\n         handler.startElement(\"\", \"\", \"userAttributes\", atts);"},{"sha":"64aaa0974f930e12b40744eeb55737aa27964b57","filename":"core/logic/src/test/java/org/apache/syncope/core/logic/NotificationTest.java","status":"modified","additions":51,"deletions":26,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -48,7 +48,6 @@\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -57,15 +56,15 @@\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.conf.CPlainSchema;\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n import org.apache.syncope.core.logic.notification.NotificationJob;\n import org.apache.syncope.core.misc.security.SyncopeGrantedAuthority;\n-import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrValue;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.junit.AfterClass;\n import org.junit.Before;\n@@ -124,7 +123,7 @@ public class NotificationTest {\n     private NotificationDAO notificationDAO;\n \n     @Autowired\n-    private RealmDAO realmDAO;\n+    private AnyTypeDAO anyTypeDAO;\n \n     @Autowired\n     private TaskDAO taskDAO;\n@@ -156,9 +155,6 @@ public class NotificationTest {\n     @Autowired\n     private EntityFactory entityFactory;\n \n-    @Autowired\n-    private AttributableUtilsFactory attrUtilsFactory;\n-\n     @BeforeClass\n     public static void startGreenMail() {\n         ServerSetup[] config = new ServerSetup[2];\n@@ -264,7 +260,13 @@ public void notifyByMail() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = entityFactory.newEntity(Notification.class);\n         notification.getEvents().add(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n-        notification.setUserAbout(new UserFiqlSearchConditionBuilder().inGroups(7L).query());\n+\n+        AnyAbout about = entityFactory.newEntity(AnyAbout.class);\n+        about.setNotification(notification);\n+        notification.add(about);\n+        about.setAnyType(anyTypeDAO.findUser());\n+        about.set(new UserFiqlSearchConditionBuilder().inGroups(7L).query());\n+\n         notification.setRecipients(new UserFiqlSearchConditionBuilder().inGroups(8L).query());\n         notification.setSelfAsRecipient(true);\n \n@@ -286,7 +288,7 @@ public void notifyByMail() throws Exception {\n         // 2. create user\n         UserTO userTO = getSampleTO(MAIL_ADDRESS);\n         MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setGroupKey(7);\n+        membershipTO.setRightKey(7);\n         userTO.getMemberships().add(membershipTO);\n \n         userLogic.create(userTO, true);\n@@ -322,7 +324,13 @@ public void issueSYNCOPE192() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = entityFactory.newEntity(Notification.class);\n         notification.getEvents().add(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n-        notification.setUserAbout(new UserFiqlSearchConditionBuilder().inGroups(7L).query());\n+\n+        AnyAbout about = entityFactory.newEntity(AnyAbout.class);\n+        about.setNotification(notification);\n+        notification.add(about);\n+        about.setAnyType(anyTypeDAO.findUser());\n+        about.set(new UserFiqlSearchConditionBuilder().inGroups(7L).query());\n+\n         notification.setRecipients(new UserFiqlSearchConditionBuilder().inGroups(8L).query());\n         notification.setSelfAsRecipient(true);\n \n@@ -343,7 +351,7 @@ public void issueSYNCOPE192() throws Exception {\n         // 2. create user\n         UserTO userTO = getSampleTO(MAIL_ADDRESS);\n         MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setGroupKey(7);\n+        membershipTO.setRightKey(7);\n         userTO.getMemberships().add(membershipTO);\n \n         userLogic.create(userTO, true);\n@@ -374,7 +382,6 @@ public void notifyByMailEmptyAbout() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = entityFactory.newEntity(Notification.class);\n         notification.getEvents().add(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n-        notification.setUserAbout(null);\n         notification.setRecipients(new UserFiqlSearchConditionBuilder().inGroups(8L).query());\n         notification.setSelfAsRecipient(true);\n \n@@ -396,7 +403,7 @@ public void notifyByMailEmptyAbout() throws Exception {\n         // 2. create user\n         UserTO userTO = getSampleTO(MAIL_ADDRESS);\n         MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setGroupKey(7);\n+        membershipTO.setRightKey(7);\n         userTO.getMemberships().add(membershipTO);\n \n         userLogic.create(userTO, true);\n@@ -424,7 +431,6 @@ public void notifyByMailWithRetry() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = entityFactory.newEntity(Notification.class);\n         notification.getEvents().add(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n-        notification.setUserAbout(null);\n         notification.setRecipients(new UserFiqlSearchConditionBuilder().inGroups(8L).query());\n         notification.setSelfAsRecipient(true);\n \n@@ -446,15 +452,16 @@ public void notifyByMailWithRetry() throws Exception {\n         // 2. create user\n         UserTO userTO = getSampleTO(MAIL_ADDRESS);\n         MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setGroupKey(7);\n+        membershipTO.setRightKey(7);\n         userTO.getMemberships().add(membershipTO);\n \n         userLogic.create(userTO, true);\n \n         // 3. Set number of retries\n         CPlainAttr maxRetries = entityFactory.newEntity(CPlainAttr.class);\n-        maxRetries.setSchema(plainSchemaDAO.find(\"notification.maxRetries\", CPlainSchema.class));\n-        maxRetries.addValue(\"5\", attrUtilsFactory.getInstance(AttributableType.CONFIGURATION));\n+        maxRetries.setSchema(plainSchemaDAO.find(\"notification.maxRetries\"));\n+        CPlainAttrValue maxRetriesValue = entityFactory.newEntity(CPlainAttrValue.class);\n+        maxRetries.add(\"5\", maxRetriesValue);\n         confDAO.save(maxRetries);\n         confDAO.flush();\n \n@@ -482,8 +489,9 @@ public void notifyByMailWithRetry() throws Exception {\n \n         // 8. reset number of retries\n         maxRetries = entityFactory.newEntity(CPlainAttr.class);\n-        maxRetries.setSchema(plainSchemaDAO.find(\"notification.maxRetries\", CPlainSchema.class));\n-        maxRetries.addValue(\"0\", attrUtilsFactory.getInstance(AttributableType.CONFIGURATION));\n+        maxRetries.setSchema(plainSchemaDAO.find(\"notification.maxRetries\"));\n+        maxRetriesValue = entityFactory.newEntity(CPlainAttrValue.class);\n+        maxRetries.add(\"0\", maxRetriesValue);\n         confDAO.save(maxRetries);\n         confDAO.flush();\n     }\n@@ -493,7 +501,13 @@ public void issueSYNCOPE445() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = entityFactory.newEntity(Notification.class);\n         notification.getEvents().add(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n-        notification.setUserAbout(new UserFiqlSearchConditionBuilder().inGroups(7L).query());\n+\n+        AnyAbout about = entityFactory.newEntity(AnyAbout.class);\n+        about.setNotification(notification);\n+        notification.add(about);\n+        about.setAnyType(anyTypeDAO.findUser());\n+        about.set(new UserFiqlSearchConditionBuilder().inGroups(7L).query());\n+\n         notification.setRecipients(new UserFiqlSearchConditionBuilder().inGroups(8L).query());\n         notification.setSelfAsRecipient(true);\n \n@@ -517,7 +531,7 @@ public void issueSYNCOPE445() throws Exception {\n         // 2. create user\n         UserTO userTO = getSampleTO(MAIL_ADDRESS);\n         MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setGroupKey(7);\n+        membershipTO.setRightKey(7);\n         userTO.getMemberships().add(membershipTO);\n \n         userLogic.create(userTO, true);\n@@ -552,7 +566,13 @@ public void issueSYNCOPE492() throws Exception {\n         // 1. create suitable disabled notification for subsequent tests\n         Notification notification = entityFactory.newEntity(Notification.class);\n         notification.getEvents().add(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n-        notification.setUserAbout(new UserFiqlSearchConditionBuilder().inGroups(7L).query());\n+\n+        AnyAbout about = entityFactory.newEntity(AnyAbout.class);\n+        about.setNotification(notification);\n+        notification.add(about);\n+        about.setAnyType(anyTypeDAO.findUser());\n+        about.set(new UserFiqlSearchConditionBuilder().inGroups(7L).query());\n+\n         notification.setSelfAsRecipient(true);\n \n         notification.setRecipientAttrName(\"email\");\n@@ -578,7 +598,7 @@ public void issueSYNCOPE492() throws Exception {\n         // 2. create user\n         UserTO userTO = getUniqueSampleTO(MAIL_ADDRESS);\n         MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setGroupKey(7);\n+        membershipTO.setRightKey(7);\n         userTO.getMemberships().add(membershipTO);\n \n         userLogic.create(userTO, true);\n@@ -592,11 +612,16 @@ public void issueSYNCOPE492() throws Exception {\n \n     @Test\n     public void issueSYNCOPE446() throws Exception {\n-\n         // 1. create suitable notification for subsequent tests\n         Notification notification = entityFactory.newEntity(Notification.class);\n         notification.getEvents().add(\"[REST]:[GroupLogic]:[]:[create]:[SUCCESS]\");\n-        notification.setGroupAbout(new GroupFiqlSearchConditionBuilder().is(\"name\").equalTo(\"group446\").query());\n+\n+        AnyAbout about = entityFactory.newEntity(AnyAbout.class);\n+        about.setNotification(notification);\n+        notification.add(about);\n+        about.setAnyType(anyTypeDAO.findGroup());\n+        about.set(new GroupFiqlSearchConditionBuilder().is(\"name\").equalTo(\"group446\").query());\n+\n         notification.setSelfAsRecipient(false);\n \n         notification.setRecipientAttrName(\"email\");"},{"sha":"30341bddf4343ca5776e3dbfd6e963245a5d04a2","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/ConnObjectUtils.java","status":"modified","additions":171,"deletions":210,"changes":381,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -32,17 +32,15 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.AttributableOperations;\n-import org.apache.syncope.common.lib.mod.AbstractAttributableMod;\n-import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n-import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n+import org.apache.syncope.common.lib.AnyOperations;\n+import org.apache.syncope.common.lib.mod.AnyMod;\n+import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n-import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n-import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n@@ -51,15 +49,12 @@\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.Attributable;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.Subject;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -70,14 +65,20 @@\n import org.apache.syncope.core.misc.security.Encryptor;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.task.AnyTemplate;\n import org.identityconnectors.common.Base64;\n import org.identityconnectors.common.security.GuardedByteArray;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n-import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.OperationOptions;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.slf4j.Logger;\n@@ -90,9 +91,6 @@\n @Component\n public class ConnObjectUtils {\n \n-    /**\n-     * Logger.\n-     */\n     private static final Logger LOG = LoggerFactory.getLogger(ConnObjectUtils.class);\n \n     @Autowired\n@@ -101,6 +99,9 @@ public class ConnObjectUtils {\n     @Autowired\n     private UserDAO userDAO;\n \n+    @Autowired\n+    private AnyObjectDAO anyObjectDAO;\n+\n     @Autowired\n     private GroupDAO groupDAO;\n \n@@ -113,6 +114,9 @@ public class ConnObjectUtils {\n     @Autowired\n     private PasswordGenerator pwdGen;\n \n+    @Autowired\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n     private final Encryptor encryptor = Encryptor.getInstance();\n \n     /**\n@@ -121,40 +125,25 @@ public class ConnObjectUtils {\n     @Autowired\n     private VirAttrCache virAttrCache;\n \n-    public ObjectClass fromSubject(final Subject<?, ?, ?> subject) {\n-        if (subject == null) {\n-            throw new IllegalArgumentException(\"No ObjectClass could be provided for \" + subject);\n-        }\n-\n-        ObjectClass result = null;\n-        if (subject instanceof User) {\n-            result = ObjectClass.ACCOUNT;\n-        }\n-        if (subject instanceof Group) {\n-            result = ObjectClass.GROUP;\n-        }\n-\n-        return result;\n-    }\n-\n     /**\n-     * Build a UserTO / GroupTO out of connector object attributes and schema mapping.\n+     * Build a UserTO / GroupTO / AnyObjectTO out of connector object attributes and schema mapping.\n      *\n      * @param obj connector object\n      * @param syncTask synchronization task\n-     * @param attrUtils AttributableUtils\n-     * @param <T> user/group\n+     * @param provision provision information\n+     * @param anyUtils utils\n+     * @param <T> any object\n      * @return UserTO for the user to be created\n      */\n     @Transactional(readOnly = true)\n-    public <T extends AbstractSubjectTO> T getSubjectTO(final ConnectorObject obj, final SyncTask syncTask,\n-            final AttributableUtils attrUtils) {\n+    public <T extends AnyTO> T getAnyTO(\n+            final ConnectorObject obj, final SyncTask syncTask, final Provision provision, final AnyUtils anyUtils) {\n \n-        T subjectTO = getSubjectTOFromConnObject(obj, syncTask, attrUtils);\n+        T anyTO = getAnyTOFromConnObject(obj, syncTask, provision, anyUtils);\n \n         // (for users) if password was not set above, generate\n-        if (subjectTO instanceof UserTO && StringUtils.isBlank(((UserTO) subjectTO).getPassword())) {\n-            final UserTO userTO = (UserTO) subjectTO;\n+        if (anyTO instanceof UserTO && StringUtils.isBlank(((UserTO) anyTO).getPassword())) {\n+            final UserTO userTO = (UserTO) anyTO;\n \n             List<PasswordPolicySpec> ppSpecs = new ArrayList<>();\n \n@@ -189,62 +178,54 @@ public <T extends AbstractSubjectTO> T getSubjectTO(final ConnectorObject obj, f\n             userTO.setPassword(password);\n         }\n \n-        return subjectTO;\n+        return anyTO;\n     }\n \n     /**\n      * Build an UserMod out of connector object attributes and schema mapping.\n      *\n-     * @param key user to be updated\n+     * @param key any object to be updated\n      * @param obj connector object\n-     * @param original subject to get diff from\n+     * @param original any object to get diff from\n      * @param syncTask synchronization task\n-     * @param attrUtils AttributableUtil\n-     * @param <T> user/group\n-     * @return modifications for the user/group to be updated\n+     * @param provision provision information\n+     * @param anyUtils utils\n+     * @param <T> any object\n+     * @return modifications for the any object to be updated\n      */\n     @SuppressWarnings(\"unchecked\")\n     @Transactional(readOnly = true)\n-    public <T extends AbstractAttributableMod> T getAttributableMod(final Long key, final ConnectorObject obj,\n-            final AbstractAttributableTO original, final SyncTask syncTask, final AttributableUtils attrUtils) {\n+    public <T extends AnyMod> T getAnyMod(final Long key, final ConnectorObject obj,\n+            final AnyTO original, final SyncTask syncTask, final Provision provision, final AnyUtils anyUtils) {\n \n-        final AbstractAttributableTO updated = getSubjectTOFromConnObject(obj, syncTask, attrUtils);\n+        AnyTO updated = getAnyTOFromConnObject(obj, syncTask, provision, anyUtils);\n         updated.setKey(key);\n \n-        if (AttributableType.USER == attrUtils.getType()) {\n+        if (AnyTypeKind.USER == anyUtils.getAnyTypeKind()) {\n             // update password if and only if password is really changed\n-            final User user = userDAO.authFetch(key);\n+            User user = userDAO.authFind(key);\n             if (StringUtils.isBlank(((UserTO) updated).getPassword())\n                     || encryptor.verify(((UserTO) updated).getPassword(),\n                             user.getCipherAlgorithm(), user.getPassword())) {\n \n                 ((UserTO) updated).setPassword(null);\n             }\n-\n-            for (MembershipTO membTO : ((UserTO) updated).getMemberships()) {\n-                Membership memb = user.getMembership(membTO.getGroupKey());\n-                if (memb != null) {\n-                    membTO.setKey(memb.getKey());\n-                }\n-            }\n-\n-            return (T) AttributableOperations.diff(((UserTO) updated), ((UserTO) original), true);\n-        }\n-        if (AttributableType.GROUP == attrUtils.getType()) {\n-            return (T) AttributableOperations.diff(((GroupTO) updated), ((GroupTO) original), true);\n+            return (T) AnyOperations.diff(((UserTO) updated), ((UserTO) original), true);\n+        } else if (AnyTypeKind.GROUP == anyUtils.getAnyTypeKind()) {\n+            return (T) AnyOperations.diff(((GroupTO) updated), ((GroupTO) original), true);\n         }\n \n         return null;\n     }\n \n-    private <T extends AbstractSubjectTO> T getSubjectTOFromConnObject(final ConnectorObject obj,\n-            final SyncTask syncTask, final AttributableUtils attrUtils) {\n+    private <T extends AnyTO> T getAnyTOFromConnObject(final ConnectorObject obj,\n+            final SyncTask syncTask, final Provision provision, final AnyUtils anyUtils) {\n \n-        final T subjectTO = attrUtils.newSubjectTO();\n+        T anyTO = anyUtils.newAnyTO();\n \n         // 1. fill with data from connector object\n-        subjectTO.setRealm(syncTask.getDestinatioRealm().getFullPath());\n-        for (MappingItem item : attrUtils.getMappingItems(syncTask.getResource(), MappingPurpose.SYNCHRONIZATION)) {\n+        anyTO.setRealm(syncTask.getDestinatioRealm().getFullPath());\n+        for (MappingItem item : anyUtils.getMappingItems(provision, MappingPurpose.SYNCHRONIZATION)) {\n             Attribute attr = obj.getAttributeByName(item.getExtAttrName());\n \n             AttrTO attrTO;\n@@ -254,33 +235,33 @@ private <T extends AbstractSubjectTO> T getSubjectTOFromConnObject(final Connect\n                     break;\n \n                 case Password:\n-                    if (subjectTO instanceof UserTO && attr != null && attr.getValue() != null\n+                    if (anyTO instanceof UserTO && attr != null && attr.getValue() != null\n                             && !attr.getValue().isEmpty()) {\n \n-                        ((UserTO) subjectTO).setPassword(getPassword(attr.getValue().get(0)));\n+                        ((UserTO) anyTO).setPassword(getPassword(attr.getValue().get(0)));\n                     }\n                     break;\n \n                 case Username:\n-                    if (subjectTO instanceof UserTO) {\n-                        ((UserTO) subjectTO).setUsername(attr == null || attr.getValue().isEmpty()\n+                    if (anyTO instanceof UserTO) {\n+                        ((UserTO) anyTO).setUsername(attr == null || attr.getValue().isEmpty()\n                                 || attr.getValue().get(0) == null\n                                         ? null\n                                         : attr.getValue().get(0).toString());\n                     }\n                     break;\n \n                 case GroupName:\n-                    if (subjectTO instanceof GroupTO) {\n-                        ((GroupTO) subjectTO).setName(attr == null || attr.getValue().isEmpty()\n+                    if (anyTO instanceof GroupTO) {\n+                        ((GroupTO) anyTO).setName(attr == null || attr.getValue().isEmpty()\n                                 || attr.getValue().get(0) == null\n                                         ? null\n                                         : attr.getValue().get(0).toString());\n                     }\n                     break;\n \n                 case GroupOwnerSchema:\n-                    if (subjectTO instanceof GroupTO && attr != null) {\n+                    if (anyTO instanceof GroupTO && attr != null) {\n                         // using a special attribute (with schema \"\", that will be ignored) for carrying the\n                         // GroupOwnerSchema value\n                         attrTO = new AttrTO();\n@@ -291,7 +272,7 @@ private <T extends AbstractSubjectTO> T getSubjectTOFromConnObject(final Connect\n                             attrTO.getValues().add(attr.getValue().get(0).toString());\n                         }\n \n-                        ((GroupTO) subjectTO).getPlainAttrs().add(attrTO);\n+                        ((GroupTO) anyTO).getPlainAttrs().add(attrTO);\n                     }\n                     break;\n \n@@ -300,15 +281,15 @@ private <T extends AbstractSubjectTO> T getSubjectTOFromConnObject(final Connect\n                     attrTO = new AttrTO();\n                     attrTO.setSchema(item.getIntAttrName());\n \n-                    PlainSchema schema = plainSchemaDAO.find(item.getIntAttrName(), attrUtils.plainSchemaClass());\n+                    PlainSchema schema = plainSchemaDAO.find(item.getIntAttrName());\n \n                     for (Object value : attr == null || attr.getValue() == null\n                             ? Collections.emptyList()\n                             : attr.getValue()) {\n \n                         AttrSchemaType schemaType = schema == null ? AttrSchemaType.String : schema.getType();\n                         if (value != null) {\n-                            final PlainAttrValue attrValue = attrUtils.newPlainAttrValue();\n+                            final PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n                             switch (schemaType) {\n                                 case String:\n                                     attrValue.setStringValue(value.toString());\n@@ -332,14 +313,14 @@ private <T extends AbstractSubjectTO> T getSubjectTOFromConnObject(final Connect\n                         }\n                     }\n \n-                    subjectTO.getPlainAttrs().add(attrTO);\n+                    anyTO.getPlainAttrs().add(attrTO);\n                     break;\n \n                 case UserDerivedSchema:\n                 case GroupDerivedSchema:\n                     attrTO = new AttrTO();\n                     attrTO.setSchema(item.getIntAttrName());\n-                    subjectTO.getDerAttrs().add(attrTO);\n+                    anyTO.getDerAttrs().add(attrTO);\n                     break;\n \n                 case UserVirtualSchema:\n@@ -356,87 +337,67 @@ private <T extends AbstractSubjectTO> T getSubjectTOFromConnObject(final Connect\n                         }\n                     }\n \n-                    subjectTO.getVirAttrs().add(attrTO);\n+                    anyTO.getVirAttrs().add(attrTO);\n                     break;\n \n                 default:\n             }\n         }\n \n         // 2. add data from defined template (if any)\n-        AbstractSubjectTO template = AttributableType.USER == attrUtils.getType()\n-                ? syncTask.getUserTemplate() : syncTask.getGroupTemplate();\n+        AnyTemplate anyTypeTemplate = syncTask.getTemplate(provision.getAnyType());\n+        if (anyTypeTemplate != null) {\n+            AnyTO template = anyTypeTemplate.get();\n \n-        if (template != null) {\n             if (template.getRealm() != null) {\n-                subjectTO.setRealm(template.getRealm());\n+                anyTO.setRealm(template.getRealm());\n             }\n \n             if (template instanceof UserTO) {\n                 if (StringUtils.isNotBlank(((UserTO) template).getUsername())) {\n-                    String evaluated = JexlUtils.evaluate(((UserTO) template).getUsername(), subjectTO);\n+                    String evaluated = JexlUtils.evaluate(((UserTO) template).getUsername(), anyTO);\n                     if (StringUtils.isNotBlank(evaluated)) {\n-                        ((UserTO) subjectTO).setUsername(evaluated);\n+                        ((UserTO) anyTO).setUsername(evaluated);\n                     }\n                 }\n \n                 if (StringUtils.isNotBlank(((UserTO) template).getPassword())) {\n-                    String evaluated = JexlUtils.evaluate(((UserTO) template).getPassword(), subjectTO);\n+                    String evaluated = JexlUtils.evaluate(((UserTO) template).getPassword(), anyTO);\n                     if (StringUtils.isNotBlank(evaluated)) {\n-                        ((UserTO) subjectTO).setPassword(evaluated);\n+                        ((UserTO) anyTO).setPassword(evaluated);\n                     }\n                 }\n-\n-                Map<Long, MembershipTO> currentMembs = ((UserTO) subjectTO).getMembershipMap();\n-                for (MembershipTO membTO : ((UserTO) template).getMemberships()) {\n-                    MembershipTO membTBU;\n-                    if (currentMembs.containsKey(membTO.getGroupKey())) {\n-                        membTBU = currentMembs.get(membTO.getGroupKey());\n-                    } else {\n-                        membTBU = new MembershipTO();\n-                        membTBU.setGroupKey(membTO.getGroupKey());\n-                        ((UserTO) subjectTO).getMemberships().add(membTBU);\n-                    }\n-                    fillFromTemplate(membTBU, membTO);\n-                }\n             }\n             if (template instanceof GroupTO) {\n                 if (StringUtils.isNotBlank(((GroupTO) template).getName())) {\n-                    String evaluated = JexlUtils.evaluate(((GroupTO) template).getName(), subjectTO);\n+                    String evaluated = JexlUtils.evaluate(((GroupTO) template).getName(), anyTO);\n                     if (StringUtils.isNotBlank(evaluated)) {\n-                        ((GroupTO) subjectTO).setName(evaluated);\n+                        ((GroupTO) anyTO).setName(evaluated);\n                     }\n                 }\n \n                 if (((GroupTO) template).getUserOwner() != null) {\n                     final User userOwner = userDAO.find(((GroupTO) template).getUserOwner());\n                     if (userOwner != null) {\n-                        ((GroupTO) subjectTO).setUserOwner(userOwner.getKey());\n+                        ((GroupTO) anyTO).setUserOwner(userOwner.getKey());\n                     }\n                 }\n                 if (((GroupTO) template).getGroupOwner() != null) {\n                     final Group groupOwner = groupDAO.find(((GroupTO) template).getGroupOwner());\n                     if (groupOwner != null) {\n-                        ((GroupTO) subjectTO).setGroupOwner(groupOwner.getKey());\n+                        ((GroupTO) anyTO).setGroupOwner(groupOwner.getKey());\n                     }\n                 }\n-\n-                ((GroupTO) subjectTO).getGPlainAttrTemplates().addAll(((GroupTO) template).getGPlainAttrTemplates());\n-                ((GroupTO) subjectTO).getGDerAttrTemplates().addAll(((GroupTO) template).getGDerAttrTemplates());\n-                ((GroupTO) subjectTO).getGVirAttrTemplates().addAll(((GroupTO) template).getGVirAttrTemplates());\n-                ((GroupTO) subjectTO).getMPlainAttrTemplates().addAll(((GroupTO) template).getMPlainAttrTemplates());\n-                ((GroupTO) subjectTO).getMDerAttrTemplates().addAll(((GroupTO) template).getMDerAttrTemplates());\n-                ((GroupTO) subjectTO).getMVirAttrTemplates().addAll(((GroupTO) template).getMVirAttrTemplates());\n             }\n \n-            fillFromTemplate(subjectTO, template);\n+            fillFromTemplate(anyTO, template);\n \n             for (String resource : template.getResources()) {\n-                subjectTO.getResources().add(resource);\n+                anyTO.getResources().add(resource);\n             }\n         }\n \n-        return subjectTO;\n+        return anyTO;\n     }\n \n     /**\n@@ -509,41 +470,41 @@ public ConnObjectTO getConnObjectTO(final ConnectorObject connObject) {\n     /**\n      * Query connected external resources for values to populated virtual attributes associated with the given owner.\n      *\n-     * @param owner user or group\n-     * @param attrUtils attributable util\n+     * @param any any object\n      */\n-    public void retrieveVirAttrValues(final Attributable<?, ?, ?> owner, final AttributableUtils attrUtils) {\n-        final ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n-        final ConnectorFactory connFactory = context.getBean(ConnectorFactory.class);\n+    public void retrieveVirAttrValues(final Any<?, ?, ?> any) {\n+        ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n+        ConnectorFactory connFactory = context.getBean(ConnectorFactory.class);\n \n-        final IntMappingType type = attrUtils.getType() == AttributableType.USER\n-                ? IntMappingType.UserVirtualSchema : attrUtils.getType() == AttributableType.GROUP\n-                        ? IntMappingType.GroupVirtualSchema : IntMappingType.MembershipVirtualSchema;\n+        IntMappingType type = any.getType().getKind() == AnyTypeKind.USER\n+                ? IntMappingType.UserVirtualSchema\n+                : any.getType().getKind() == AnyTypeKind.GROUP\n+                        ? IntMappingType.GroupVirtualSchema\n+                        : IntMappingType.AnyVirtualSchema;\n \n-        final Map<String, ConnectorObject> externalResources = new HashMap<>();\n+        Map<String, ConnectorObject> resources = new HashMap<>();\n \n         // -----------------------\n         // Retrieve virtual attribute values if and only if they have not been retrieved yet\n         // -----------------------\n-        for (VirAttr virAttr : owner.getVirAttrs()) {\n+        for (VirAttr<?> virAttr : any.getVirAttrs()) {\n             // reset value set\n             if (virAttr.getValues().isEmpty()) {\n-                retrieveVirAttrValue(owner, virAttr, attrUtils, type, externalResources, connFactory);\n+                retrieveVirAttrValue(any, virAttr, type, resources, connFactory);\n             }\n         }\n         // -----------------------\n     }\n \n     private void retrieveVirAttrValue(\n-            final Attributable<?, ?, ?> owner,\n-            final VirAttr virAttr,\n-            final AttributableUtils attrUtils,\n+            final Any<?, ?, ?> any,\n+            final VirAttr<?> virAttr,\n             final IntMappingType type,\n             final Map<String, ConnectorObject> externalResources,\n             final ConnectorFactory connFactory) {\n \n-        final String schemaName = virAttr.getSchema().getKey();\n-        final VirAttrCacheValue virAttrCacheValue = virAttrCache.get(attrUtils.getType(), owner.getKey(), schemaName);\n+        String schemaName = virAttr.getSchema().getKey();\n+        VirAttrCacheValue virAttrCacheValue = virAttrCache.get(any.getType().getKey(), any.getKey(), schemaName);\n \n         LOG.debug(\"Retrieve values for virtual attribute {} ({})\", schemaName, type);\n \n@@ -558,147 +519,147 @@ private void retrieveVirAttrValue(\n \n             VirAttrCacheValue toBeCached = new VirAttrCacheValue();\n \n-            // SYNCOPE-458 if virattr owner is a Membership, owner must become user involved in membership because \n-            // membership mapping is contained in user mapping\n-            Subject<?, ?, ?> realOwner = owner instanceof Membership\n-                    ? ((Membership) owner).getUser()\n-                    : (Subject) owner;\n-\n-            Collection<ExternalResource> targetResources = owner instanceof Membership\n-                    ? getTargetResources(virAttr, type, attrUtils, userDAO.findAllResources((User) realOwner))\n-                    : getTargetResources(virAttr, type, attrUtils);\n+            AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n+            Collection<ExternalResource> targetResources = getTargetResources(virAttr, type, anyUtils, any.getType());\n \n             for (ExternalResource resource : targetResources) {\n-                LOG.debug(\"Search values into {}\", resource.getKey());\n-                try {\n-                    List<MappingItem> mappings = attrUtils.getMappingItems(resource, MappingPurpose.BOTH);\n-\n-                    ConnectorObject connectorObject;\n-                    if (externalResources.containsKey(resource.getKey())) {\n-                        connectorObject = externalResources.get(resource.getKey());\n-                    } else {\n-                        LOG.debug(\"Perform connection to {}\", resource.getKey());\n-                        final String accountId = attrUtils.getAccountIdItem(resource) == null\n-                                ? null\n-                                : MappingUtils.getAccountIdValue(\n-                                        realOwner, resource, attrUtils.getAccountIdItem(resource));\n-\n-                        if (StringUtils.isBlank(accountId)) {\n-                            throw new IllegalArgumentException(\"No AccountId found for \" + resource.getKey());\n-                        }\n+                Provision provision = resource.getProvision(any.getType());\n+                LOG.debug(\"Search values into {},{}\", resource, provision);\n \n-                        Connector connector = connFactory.getConnector(resource);\n+                if (provision != null) {\n+                    try {\n+                        List<MappingItem> mappings = anyUtils.getMappingItems(provision, MappingPurpose.BOTH);\n \n-                        OperationOptions oo =\n-                                connector.getOperationOptions(MappingUtils.getMatchingMappingItems(mappings, type));\n+                        ConnectorObject connectorObject;\n+                        if (externalResources.containsKey(resource.getKey())) {\n+                            connectorObject = externalResources.get(resource.getKey());\n+                        } else {\n+                            LOG.debug(\"Perform connection to {}\", resource.getKey());\n+                            String connObjectKey = anyUtils.getConnObjectKeyItem(provision) == null\n+                                    ? null\n+                                    : MappingUtils.getConnObjectKeyValue(any, provision);\n \n-                        connectorObject = connector.getObject(fromSubject(realOwner), new Uid(accountId), oo);\n-                        externalResources.put(resource.getKey(), connectorObject);\n-                    }\n+                            if (StringUtils.isBlank(connObjectKey)) {\n+                                throw new IllegalArgumentException(\"No AccountId found for \" + resource.getKey());\n+                            }\n+\n+                            Connector connector = connFactory.getConnector(resource);\n+\n+                            OperationOptions oo =\n+                                    connector.getOperationOptions(MappingUtils.getMatchingMappingItems(mappings, type));\n+\n+                            connectorObject =\n+                                    connector.getObject(provision.getObjectClass(), new Uid(connObjectKey), oo);\n+                            externalResources.put(resource.getKey(), connectorObject);\n+                        }\n \n-                    if (connectorObject != null) {\n-                        // ask for searched virtual attribute value\n-                        Collection<MappingItem> virAttrMappings =\n-                                MappingUtils.getMatchingMappingItems(mappings, schemaName, type);\n+                        if (connectorObject != null) {\n+                            // ask for searched virtual attribute value\n+                            Collection<MappingItem> virAttrMappings =\n+                                    MappingUtils.getMatchingMappingItems(mappings, schemaName, type);\n \n-                        // the same virtual attribute could be mapped with one or more external attribute \n-                        for (MappingItem mapping : virAttrMappings) {\n-                            final Attribute attribute = connectorObject.getAttributeByName(mapping.getExtAttrName());\n+                            // the same virtual attribute could be mapped with one or more external attribute \n+                            for (MappingItem mapping : virAttrMappings) {\n+                                Attribute attribute = connectorObject.getAttributeByName(mapping.getExtAttrName());\n \n-                            if (attribute != null && attribute.getValue() != null) {\n-                                for (Object obj : attribute.getValue()) {\n-                                    if (obj != null) {\n-                                        virAttr.getValues().add(obj.toString());\n+                                if (attribute != null && attribute.getValue() != null) {\n+                                    for (Object obj : attribute.getValue()) {\n+                                        if (obj != null) {\n+                                            virAttr.getValues().add(obj.toString());\n+                                        }\n                                     }\n                                 }\n                             }\n-                        }\n \n-                        toBeCached.setResourceValues(resource.getKey(), new HashSet<>(virAttr.getValues()));\n+                            toBeCached.setResourceValues(resource.getKey(), new HashSet<>(virAttr.getValues()));\n \n-                        LOG.debug(\"Retrieved values {}\", virAttr.getValues());\n-                    }\n-                } catch (Exception e) {\n-                    LOG.error(\"Error reading connector object from {}\", resource.getKey(), e);\n-\n-                    if (virAttrCacheValue != null) {\n-                        toBeCached.forceExpiring();\n-                        LOG.debug(\"Search for a cached value (even expired!) ...\");\n-                        final Set<String> cachedValues = virAttrCacheValue.getValues(resource.getKey());\n-                        if (cachedValues != null) {\n-                            LOG.debug(\"Use cached value {}\", cachedValues);\n-                            virAttr.getValues().addAll(cachedValues);\n-                            toBeCached.setResourceValues(resource.getKey(), new HashSet<>(cachedValues));\n+                            LOG.debug(\"Retrieved values {}\", virAttr.getValues());\n+                        }\n+                    } catch (Exception e) {\n+                        LOG.error(\"Error reading connector object from {}\", resource.getKey(), e);\n+\n+                        if (virAttrCacheValue != null) {\n+                            toBeCached.forceExpiring();\n+                            LOG.debug(\"Search for a cached value (even expired!) ...\");\n+                            final Set<String> cachedValues = virAttrCacheValue.getValues(resource.getKey());\n+                            if (cachedValues != null) {\n+                                LOG.debug(\"Use cached value {}\", cachedValues);\n+                                virAttr.getValues().addAll(cachedValues);\n+                                toBeCached.setResourceValues(resource.getKey(), new HashSet<>(cachedValues));\n+                            }\n                         }\n                     }\n                 }\n             }\n \n-            virAttrCache.put(attrUtils.getType(), owner.getKey(), schemaName, toBeCached);\n+            virAttrCache.put(any.getType().getKey(), any.getKey(), schemaName, toBeCached);\n         }\n     }\n \n     private Collection<ExternalResource> getTargetResources(\n-            final VirAttr attr, final IntMappingType type, final AttributableUtils attrUtils) {\n+            final VirAttr<?> attr, final IntMappingType type, final AnyUtils anyUtils, final AnyType anyType) {\n \n         Iterable<? extends ExternalResource> iterable = attr.getOwner() instanceof User\n                 ? userDAO.findAllResources((User) attr.getOwner())\n-                : attr.getOwner() instanceof Group\n-                        ? ((Group) attr.getOwner()).getResources()\n-                        : Collections.<ExternalResource>emptySet();\n-        return getTargetResources(attr, type, attrUtils, iterable);\n+                : attr.getOwner() instanceof AnyObject\n+                        ? anyObjectDAO.findAllResources((AnyObject) attr.getOwner())\n+                        : attr.getOwner() instanceof Group\n+                                ? ((Group) attr.getOwner()).getResources()\n+                                : Collections.<ExternalResource>emptySet();\n+        return getTargetResources(attr, type, anyUtils, iterable, anyType);\n     }\n \n-    private Collection<ExternalResource> getTargetResources(final VirAttr attr, final IntMappingType type,\n-            final AttributableUtils attrUtils, final Iterable<? extends ExternalResource> ownerResources) {\n+    private Collection<ExternalResource> getTargetResources(final VirAttr<?> attr, final IntMappingType type,\n+            final AnyUtils anyUtils, final Iterable<? extends ExternalResource> ownerResources, final AnyType anyType) {\n \n         return CollectionUtils.select(ownerResources, new Predicate<ExternalResource>() {\n \n             @Override\n             public boolean evaluate(final ExternalResource resource) {\n-                return !MappingUtils.getMatchingMappingItems(\n-                        attrUtils.getMappingItems(resource, MappingPurpose.BOTH),\n-                        attr.getSchema().getKey(), type).isEmpty();\n+                return resource.getProvision(anyType) != null\n+                        && !MappingUtils.getMatchingMappingItems(\n+                                anyUtils.getMappingItems(resource.getProvision(anyType), MappingPurpose.BOTH),\n+                                attr.getSchema().getKey(), type).isEmpty();\n             }\n         });\n     }\n \n-    private void fillFromTemplate(final AbstractAttributableTO attributableTO, final AbstractAttributableTO template) {\n-        Map<String, AttrTO> currentAttrMap = attributableTO.getPlainAttrMap();\n+    private void fillFromTemplate(final AnyTO anyTO, final AnyTO template) {\n+        Map<String, AttrTO> currentAttrMap = anyTO.getPlainAttrMap();\n         for (AttrTO templateAttr : template.getPlainAttrs()) {\n             if (templateAttr.getValues() != null && !templateAttr.getValues().isEmpty()\n                     && (!currentAttrMap.containsKey(templateAttr.getSchema())\n                     || currentAttrMap.get(templateAttr.getSchema()).getValues().isEmpty())) {\n \n-                attributableTO.getPlainAttrs().add(evaluateAttrTemplate(attributableTO, templateAttr));\n+                anyTO.getPlainAttrs().add(evaluateAttrTemplate(anyTO, templateAttr));\n             }\n         }\n \n-        currentAttrMap = attributableTO.getDerAttrMap();\n+        currentAttrMap = anyTO.getDerAttrMap();\n         for (AttrTO templateDerAttr : template.getDerAttrs()) {\n             if (!currentAttrMap.containsKey(templateDerAttr.getSchema())) {\n-                attributableTO.getDerAttrs().add(templateDerAttr);\n+                anyTO.getDerAttrs().add(templateDerAttr);\n             }\n         }\n \n-        currentAttrMap = attributableTO.getVirAttrMap();\n+        currentAttrMap = anyTO.getVirAttrMap();\n         for (AttrTO templateVirAttr : template.getVirAttrs()) {\n             if (templateVirAttr.getValues() != null && !templateVirAttr.getValues().isEmpty()\n                     && (!currentAttrMap.containsKey(templateVirAttr.getSchema())\n                     || currentAttrMap.get(templateVirAttr.getSchema()).getValues().isEmpty())) {\n \n-                attributableTO.getVirAttrs().add(evaluateAttrTemplate(attributableTO, templateVirAttr));\n+                anyTO.getVirAttrs().add(evaluateAttrTemplate(anyTO, templateVirAttr));\n             }\n         }\n     }\n \n-    private AttrTO evaluateAttrTemplate(final AbstractAttributableTO attributableTO, final AttrTO template) {\n+    private AttrTO evaluateAttrTemplate(final AnyTO anyTO, final AttrTO template) {\n         AttrTO result = new AttrTO();\n         result.setSchema(template.getSchema());\n \n         if (template.getValues() != null && !template.getValues().isEmpty()) {\n             for (String value : template.getValues()) {\n-                String evaluated = JexlUtils.evaluate(value, attributableTO);\n+                String evaluated = JexlUtils.evaluate(value, anyTO);\n                 if (StringUtils.isNotBlank(evaluated)) {\n                     result.getValues().add(evaluated);\n                 }"},{"sha":"87f2ea539f645112a253244b413fd83b0832aa6a","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/MappingUtils.java","status":"modified","additions":144,"deletions":262,"changes":406,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -27,52 +27,43 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.jexl2.JexlContext;\n import org.apache.commons.jexl2.MapContext;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.CollectionUtils2;\n import org.apache.syncope.common.lib.mod.AttrMod;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n-import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.Attributable;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.Subject;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.membership.MDerSchema;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.membership.MVirSchema;\n-import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n-import org.apache.syncope.core.persistence.api.entity.group.GDerSchema;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.group.GPlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirSchema;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.user.UDerSchema;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.user.UPlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.user.UVirSchema;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n import org.apache.syncope.core.misc.security.Encryptor;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.identityconnectors.framework.common.FrameworkUtil;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n@@ -92,7 +83,7 @@ public final class MappingUtils {\n     public static <T extends MappingItem> Collection<T> getMatchingMappingItems(\n             final Collection<T> items, final IntMappingType type) {\n \n-        return CollectionUtils2.find(items, new Predicate<T>() {\n+        return CollectionUtils.select(items, new Predicate<T>() {\n \n             @Override\n             public boolean evaluate(final T item) {\n@@ -104,7 +95,7 @@ public boolean evaluate(final T item) {\n     public static <T extends MappingItem> Collection<T> getMatchingMappingItems(\n             final Collection<T> items, final String intAttrName, final IntMappingType type) {\n \n-        return CollectionUtils2.find(items, new Predicate<T>() {\n+        return CollectionUtils.select(items, new Predicate<T>() {\n \n             @Override\n             public boolean evaluate(final T item) {\n@@ -116,7 +107,7 @@ public boolean evaluate(final T item) {\n     public static <T extends MappingItem> Collection<T> getMatchingMappingItems(\n             final Collection<T> items, final String intAttrName) {\n \n-        return CollectionUtils2.find(items, new Predicate<T>() {\n+        return CollectionUtils.select(items, new Predicate<T>() {\n \n             @Override\n             public boolean evaluate(final T item) {\n@@ -128,71 +119,52 @@ public boolean evaluate(final T item) {\n     /**\n      * Prepare attributes for sending to a connector instance.\n      *\n-     * @param attrUtils user / group\n-     * @param subject given user / group\n+     * @param anyUtils any object\n+     * @param any given any object\n      * @param password clear-text password\n      * @param changePwd whether password should be included for propagation attributes or not\n      * @param vAttrsToBeRemoved virtual attributes to be removed\n      * @param vAttrsToBeUpdated virtual attributes to be added\n-     * @param membVAttrsToBeRemoved membership virtual attributes to be removed\n-     * @param membVAttrsToBeUpdated membership virtual attributes to be added\n-     * @param enable whether user must be enabled or not\n-     * @param resource target resource\n+     * @param enable whether any object must be enabled or not\n+     * @param provision provision information\n      * @return account link + prepared attributes\n      */\n     public static Pair<String, Set<Attribute>> prepareAttributes(\n-            final AttributableUtils attrUtils, final Subject<?, ?, ?> subject,\n+            final AnyUtils anyUtils, final Any<?, ?, ?> any,\n             final String password,\n             final boolean changePwd,\n             final Set<String> vAttrsToBeRemoved,\n             final Map<String, AttrMod> vAttrsToBeUpdated,\n-            final Set<String> membVAttrsToBeRemoved,\n-            final Map<String, AttrMod> membVAttrsToBeUpdated,\n             final Boolean enable,\n-            final ExternalResource resource) {\n+            final Provision provision) {\n \n-        LOG.debug(\"Preparing resource attributes for {} on resource {} with attributes {}\",\n-                subject, resource, subject.getPlainAttrs());\n+        LOG.debug(\"Preparing resource attributes for {} with provision {} for attributes {}\",\n+                any, provision, any.getPlainAttrs());\n \n-        final ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n-        final VirAttrCache virAttrCache = context.getBean(VirAttrCache.class);\n-        final PasswordGenerator passwordGenerator = context.getBean(PasswordGenerator.class);\n+        ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n+        VirAttrCache virAttrCache = context.getBean(VirAttrCache.class);\n+        PasswordGenerator passwordGenerator = context.getBean(PasswordGenerator.class);\n \n         Set<Attribute> attributes = new HashSet<>();\n-        String accountId = null;\n+        String connObjectKey = null;\n \n-        for (MappingItem mapping : attrUtils.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n+        for (MappingItem mapping : anyUtils.getMappingItems(provision, MappingPurpose.PROPAGATION)) {\n             LOG.debug(\"Processing schema {}\", mapping.getIntAttrName());\n \n             try {\n-                if ((attrUtils.getType() == AttributableType.USER\n-                        && mapping.getIntMappingType() == IntMappingType.UserVirtualSchema)\n-                        || (attrUtils.getType() == AttributableType.GROUP\n-                        && mapping.getIntMappingType() == IntMappingType.GroupVirtualSchema)) {\n-\n-                    LOG.debug(\"Expire entry cache {}-{}\", subject.getKey(), mapping.getIntAttrName());\n-                    virAttrCache.expire(attrUtils.getType(), subject.getKey(), mapping.getIntAttrName());\n-                }\n+                if (mapping.getIntMappingType() == IntMappingType.UserVirtualSchema\n+                        || mapping.getIntMappingType() == IntMappingType.GroupVirtualSchema\n+                        || mapping.getIntMappingType() == IntMappingType.AnyVirtualSchema) {\n \n-                // SYNCOPE-458 expire cache also for membership virtual schemas\n-                if (attrUtils.getType() == AttributableType.USER && mapping.getIntMappingType()\n-                        == IntMappingType.MembershipVirtualSchema && (subject instanceof User)) {\n-\n-                    final User user = (User) subject;\n-                    for (Membership membership : user.getMemberships()) {\n-                        LOG.debug(\"Expire entry cache {}-{} for membership {}\", subject.getKey(),\n-                                mapping.getIntAttrName(), membership);\n-                        virAttrCache.expire(AttributableType.MEMBERSHIP, membership.getKey(),\n-                                mapping.getIntAttrName());\n-                    }\n+                    LOG.debug(\"Expire entry cache {}-{}\", any.getKey(), mapping.getIntAttrName());\n+                    virAttrCache.expire(any.getType().getKey(), any.getKey(), mapping.getIntAttrName());\n                 }\n \n                 Pair<String, Attribute> preparedAttr = prepareAttr(\n-                        resource, mapping, subject, password, passwordGenerator, vAttrsToBeRemoved, vAttrsToBeUpdated,\n-                        membVAttrsToBeRemoved, membVAttrsToBeUpdated);\n+                        provision, mapping, any, password, passwordGenerator, vAttrsToBeRemoved, vAttrsToBeUpdated);\n \n                 if (preparedAttr != null && preparedAttr.getKey() != null) {\n-                    accountId = preparedAttr.getKey();\n+                    connObjectKey = preparedAttr.getKey();\n                 }\n \n                 if (preparedAttr != null && preparedAttr.getValue() != null) {\n@@ -215,12 +187,13 @@ public static Pair<String, Set<Attribute>> prepareAttributes(\n         }\n \n         final Attribute accountIdExtAttr =\n-                AttributeUtil.find(attrUtils.getAccountIdItem(resource).getExtAttrName(), attributes);\n+                AttributeUtil.find(anyUtils.getConnObjectKeyItem(provision).getExtAttrName(), attributes);\n         if (accountIdExtAttr != null) {\n             attributes.remove(accountIdExtAttr);\n-            attributes.add(AttributeBuilder.build(attrUtils.getAccountIdItem(resource).getExtAttrName(), accountId));\n+            attributes.add(AttributeBuilder.build(\n+                    anyUtils.getConnObjectKeyItem(provision).getExtAttrName(), connObjectKey));\n         }\n-        attributes.add(evaluateNAME(subject, resource, accountId));\n+        attributes.add(evaluateNAME(any, provision, connObjectKey));\n \n         if (enable != null) {\n             attributes.add(AttributeBuilder.buildEnabled(enable));\n@@ -232,15 +205,15 @@ public static Pair<String, Set<Attribute>> prepareAttributes(\n             }\n         }\n \n-        return new ImmutablePair<>(accountId, attributes);\n+        return new ImmutablePair<>(connObjectKey, attributes);\n     }\n \n     /**\n      * Prepare an attribute to be sent to a connector instance.\n      *\n-     * @param resource target resource\n+     * @param provision external resource\n      * @param mapItem mapping item for the given attribute\n-     * @param subject given user\n+     * @param any any object\n      * @param password clear-text password\n      * @param passwordGenerator password generator\n      * @param vAttrsToBeRemoved virtual attributes to be removed\n@@ -249,49 +222,46 @@ public static Pair<String, Set<Attribute>> prepareAttributes(\n      */\n     @SuppressWarnings(\"unchecked\")\n     private static Pair<String, Attribute> prepareAttr(\n-            final ExternalResource resource, final MappingItem mapItem,\n-            final Subject<?, ?, ?> subject, final String password, final PasswordGenerator passwordGenerator,\n-            final Set<String> vAttrsToBeRemoved, final Map<String, AttrMod> vAttrsToBeUpdated,\n-            final Set<String> membVAttrsToBeRemoved, final Map<String, AttrMod> membVAttrsToBeUpdated) {\n+            final Provision provision, final MappingItem mapItem,\n+            final Any<?, ?, ?> any, final String password, final PasswordGenerator passwordGenerator,\n+            final Set<String> vAttrsToBeRemoved, final Map<String, AttrMod> vAttrsToBeUpdated) {\n \n-        List<Attributable<?, ?, ?>> attributables = new ArrayList<>();\n+        List<Any<?, ?, ?>> anys = new ArrayList<>();\n \n         ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n-        AttributableUtilsFactory attrUtilsFactory = context.getBean(AttributableUtilsFactory.class);\n+        AnyUtilsFactory anyUtilsFactory = context.getBean(AnyUtilsFactory.class);\n         ConnObjectUtils connObjectUtils = context.getBean(ConnObjectUtils.class);\n \n-        switch (mapItem.getIntMappingType().getAttributableType()) {\n+        switch (mapItem.getIntMappingType().getAnyTypeKind()) {\n             case USER:\n-                if (subject instanceof User) {\n-                    attributables.add(subject);\n+                if (any instanceof User) {\n+                    anys.add(any);\n                 }\n                 break;\n \n             case GROUP:\n-                if (subject instanceof User) {\n+                if (any instanceof User) {\n                     UserDAO userDAO = context.getBean(UserDAO.class);\n-                    for (Group group : userDAO.findAllGroups((User) subject)) {\n-                        connObjectUtils.retrieveVirAttrValues(group, attrUtilsFactory.getInstance(group));\n-                        attributables.add(group);\n+                    for (Group group : userDAO.findAllGroups((User) any)) {\n+                        connObjectUtils.retrieveVirAttrValues(group);\n+                        anys.add(group);\n                     }\n-                }\n-                if (subject instanceof Group) {\n-                    attributables.add(subject);\n+                } else if (any instanceof Group) {\n+                    anys.add(any);\n                 }\n                 break;\n \n-            case MEMBERSHIP:\n-                if (subject instanceof User) {\n-                    attributables.addAll(((User) subject).getMemberships());\n+            case ANY_OBJECT:\n+                if (any instanceof AnyObject) {\n+                    anys.add(any);\n                 }\n                 break;\n \n             default:\n         }\n \n         List<PlainAttrValue> values = getIntValues(\n-                resource, mapItem, attributables, vAttrsToBeRemoved, vAttrsToBeUpdated, membVAttrsToBeRemoved,\n-                membVAttrsToBeUpdated);\n+                provision, mapItem, anys, vAttrsToBeRemoved, vAttrsToBeUpdated);\n \n         PlainSchema schema = null;\n         boolean readOnlyVirSchema = false;\n@@ -301,19 +271,17 @@ private static Pair<String, Attribute> prepareAttr(\n         switch (mapItem.getIntMappingType()) {\n             case UserPlainSchema:\n             case GroupPlainSchema:\n-            case MembershipPlainSchema:\n+            case AnyPlainSchema:\n                 final PlainSchemaDAO plainSchemaDAO = context.getBean(PlainSchemaDAO.class);\n-                schema = plainSchemaDAO.find(\n-                        mapItem.getIntAttrName(), getIntMappingTypeClass(mapItem.getIntMappingType()));\n+                schema = plainSchemaDAO.find(mapItem.getIntAttrName());\n                 schemaType = schema == null ? AttrSchemaType.String : schema.getType();\n                 break;\n \n             case UserVirtualSchema:\n             case GroupVirtualSchema:\n-            case MembershipVirtualSchema:\n+            case AnyVirtualSchema:\n                 VirSchemaDAO virSchemaDAO = context.getBean(VirSchemaDAO.class);\n-                VirSchema virSchema = virSchemaDAO.find(\n-                        mapItem.getIntAttrName(), getIntMappingTypeClass(mapItem.getIntMappingType()));\n+                VirSchema virSchema = virSchemaDAO.find(mapItem.getIntAttrName());\n                 readOnlyVirSchema = (virSchema != null && virSchema.isReadonly());\n                 schemaType = AttrSchemaType.String;\n                 break;\n@@ -326,7 +294,7 @@ private static Pair<String, Attribute> prepareAttr(\n \n         LOG.debug(\"Define mapping for: \"\n                 + \"\\n* ExtAttrName \" + extAttrName\n-                + \"\\n* is accountId \" + mapItem.isAccountid()\n+                + \"\\n* is accountId \" + mapItem.isConnObjectKey()\n                 + \"\\n* is password \" + (mapItem.isPassword() || mapItem.getIntMappingType() == IntMappingType.Password)\n                 + \"\\n* mandatory condition \" + mapItem.getMandatoryCondition()\n                 + \"\\n* Schema \" + mapItem.getIntAttrName()\n@@ -337,7 +305,7 @@ private static Pair<String, Attribute> prepareAttr(\n         if (readOnlyVirSchema) {\n             result = null;\n         } else {\n-            final List<Object> objValues = new ArrayList<>();\n+            List<Object> objValues = new ArrayList<>();\n \n             for (PlainAttrValue value : values) {\n                 if (FrameworkUtil.isSupportedAttributeType(schemaType.getType())) {\n@@ -347,19 +315,19 @@ private static Pair<String, Attribute> prepareAttr(\n                 }\n             }\n \n-            if (mapItem.isAccountid()) {\n+            if (mapItem.isConnObjectKey()) {\n                 result = new ImmutablePair<>(objValues.iterator().next().toString(), null);\n-            } else if (mapItem.isPassword() && subject instanceof User) {\n+            } else if (mapItem.isPassword() && any instanceof User) {\n                 String passwordAttrValue = password;\n                 if (StringUtils.isBlank(passwordAttrValue)) {\n-                    User user = (User) subject;\n+                    User user = (User) any;\n                     if (user.canDecodePassword()) {\n                         try {\n                             passwordAttrValue = ENCRYPTOR.decode(user.getPassword(), user.getCipherAlgorithm());\n                         } catch (Exception e) {\n                             LOG.error(\"Could not decode password for {}\", user, e);\n                         }\n-                    } else if (resource.isRandomPwdIfNotProvided()) {\n+                    } else if (provision.getResource().isRandomPwdIfNotProvided()) {\n                         try {\n                             passwordAttrValue = passwordGenerator.generate(user);\n                         } catch (InvalidPasswordPolicySpecException e) {\n@@ -376,8 +344,9 @@ private static Pair<String, Attribute> prepareAttr(\n                             AttributeBuilder.buildPassword(passwordAttrValue.toCharArray()));\n                 }\n             } else {\n-                if ((schema != null && schema.isMultivalue()) || attrUtilsFactory.getInstance(subject).getType()\n-                        != mapItem.getIntMappingType().getAttributableType()) {\n+                if ((schema != null && schema.isMultivalue())\n+                        || anyUtilsFactory.getInstance(any).getAnyTypeKind()\n+                        != mapItem.getIntMappingType().getAnyTypeKind()) {\n \n                     result = new ImmutablePair<>(\n                             null,\n@@ -398,40 +367,40 @@ private static Pair<String, Attribute> prepareAttr(\n      * Build __NAME__ for propagation. First look if there ia a defined accountLink for the given resource (and in this\n      * case evaluate as JEXL); otherwise, take given accountId.\n      *\n-     * @param subject given user / group\n-     * @param resource target resource\n-     * @param accountId accountId\n+     * @param any given any object\n+     * @param provision external resource\n+     * @param connObjectKey connector object key\n      * @return the value to be propagated as __NAME__\n      */\n-    public static Name evaluateNAME(final Subject<?, ?, ?> subject,\n-            final ExternalResource resource, final String accountId) {\n+    public static Name evaluateNAME(final Any<?, ?, ?> any,\n+            final Provision provision, final String connObjectKey) {\n \n-        final AttributableUtilsFactory attrUtilsFactory =\n-                ApplicationContextProvider.getApplicationContext().getBean(AttributableUtilsFactory.class);\n-        final AttributableUtils attrUtils = attrUtilsFactory.getInstance(subject);\n+        final AnyUtilsFactory anyUtilsFactory =\n+                ApplicationContextProvider.getApplicationContext().getBean(AnyUtilsFactory.class);\n+        final AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n \n-        if (StringUtils.isBlank(accountId)) {\n+        if (StringUtils.isBlank(connObjectKey)) {\n             // LOG error but avoid to throw exception: leave it to the external resource\n-            LOG.error(\"Missing accountId for '{}': \", resource.getKey());\n+            LOG.error(\"Missing ConnObjectKey for '{}': \", provision.getResource());\n         }\n \n         // Evaluate AccountLink expression\n         String evalAccountLink = null;\n-        if (StringUtils.isNotBlank(attrUtils.getAccountLink(resource))) {\n+        if (StringUtils.isNotBlank(anyUtils.getConnObjectLink(provision))) {\n             final JexlContext jexlContext = new MapContext();\n-            JexlUtils.addFieldsToContext(subject, jexlContext);\n-            JexlUtils.addAttrsToContext(subject.getPlainAttrs(), jexlContext);\n-            JexlUtils.addDerAttrsToContext(subject.getDerAttrs(), subject.getPlainAttrs(), jexlContext);\n-            evalAccountLink = JexlUtils.evaluate(attrUtils.getAccountLink(resource), jexlContext);\n+            JexlUtils.addFieldsToContext(any, jexlContext);\n+            JexlUtils.addAttrsToContext(any.getPlainAttrs(), jexlContext);\n+            JexlUtils.addDerAttrsToContext(any.getDerAttrs(), any.getPlainAttrs(), jexlContext);\n+            evalAccountLink = JexlUtils.evaluate(anyUtils.getConnObjectLink(provision), jexlContext);\n         }\n \n         // If AccountLink evaluates to an empty string, just use the provided AccountId as Name(),\n         // otherwise evaluated AccountLink expression is taken as Name().\n         Name name;\n         if (StringUtils.isBlank(evalAccountLink)) {\n             // add AccountId as __NAME__ attribute ...\n-            LOG.debug(\"Add AccountId [{}] as __NAME__\", accountId);\n-            name = new Name(accountId);\n+            LOG.debug(\"Add AccountId [{}] as __NAME__\", connObjectKey);\n+            name = new Name(connObjectKey);\n         } else {\n             LOG.debug(\"Add AccountLink [{}] as __NAME__\", evalAccountLink);\n             name = new Name(evalAccountLink);\n@@ -443,51 +412,45 @@ public static Name evaluateNAME(final Subject<?, ?, ?> subject,\n         return name;\n     }\n \n-    private static String getGroupOwnerValue(\n-            final ExternalResource resource, final Subject<?, ?, ?> subject) {\n-\n-        AttributableUtilsFactory attrUtilsFactory =\n-                ApplicationContextProvider.getApplicationContext().getBean(AttributableUtilsFactory.class);\n+    private static String getGroupOwnerValue(final Provision provision, final Any<?, ?, ?> any) {\n+        AnyUtilsFactory anyUtilsFactory =\n+                ApplicationContextProvider.getApplicationContext().getBean(AnyUtilsFactory.class);\n \n         Pair<String, Attribute> preparedAttr = prepareAttr(\n-                resource, attrUtilsFactory.getInstance(subject).getAccountIdItem(resource), subject, null, null,\n-                Collections.<String>emptySet(), Collections.<String, AttrMod>emptyMap(),\n-                Collections.<String>emptySet(), Collections.<String, AttrMod>emptyMap());\n-        String accountId = preparedAttr.getKey();\n+                provision, anyUtilsFactory.getInstance(any).getConnObjectKeyItem(provision),\n+                any, null, null, Collections.<String>emptySet(), Collections.<String, AttrMod>emptyMap());\n+        String connObjectKey = preparedAttr.getKey();\n \n-        final Name groupOwnerName = evaluateNAME(subject, resource, accountId);\n+        final Name groupOwnerName = evaluateNAME(any, provision, connObjectKey);\n         return groupOwnerName.getNameValue();\n     }\n \n     /**\n      * Get attribute values.\n      *\n-     * @param resource target resource\n+     * @param provision provision information\n      * @param mappingItem mapping item\n-     * @param attributables list of attributables\n+     * @param anys any objects\n      * @param vAttrsToBeRemoved virtual attributes to be removed\n      * @param vAttrsToBeUpdated virtual attributes to be added\n-     * @param membVAttrsToBeRemoved membership virtual attributes to be removed\n-     * @param membVAttrsToBeUpdated membership virtual attributes to be added\n      * @return attribute values.\n      */\n-    public static List<PlainAttrValue> getIntValues(final ExternalResource resource,\n-            final MappingItem mappingItem, final List<Attributable<?, ?, ?>> attributables,\n-            final Set<String> vAttrsToBeRemoved, final Map<String, AttrMod> vAttrsToBeUpdated,\n-            final Set<String> membVAttrsToBeRemoved, final Map<String, AttrMod> membVAttrsToBeUpdated) {\n+    public static List<PlainAttrValue> getIntValues(final Provision provision,\n+            final MappingItem mappingItem, final List<Any<?, ?, ?>> anys,\n+            final Set<String> vAttrsToBeRemoved, final Map<String, AttrMod> vAttrsToBeUpdated) {\n \n-        LOG.debug(\"Get attributes for '{}' and mapping type '{}'\", attributables, mappingItem.getIntMappingType());\n+        LOG.debug(\"Get attributes for '{}' and mapping type '{}'\", anys, mappingItem.getIntMappingType());\n \n-        final EntityFactory entityFactory =\n+        EntityFactory entityFactory =\n                 ApplicationContextProvider.getApplicationContext().getBean(EntityFactory.class);\n         List<PlainAttrValue> values = new ArrayList<>();\n         PlainAttrValue attrValue;\n         switch (mappingItem.getIntMappingType()) {\n             case UserPlainSchema:\n             case GroupPlainSchema:\n-            case MembershipPlainSchema:\n-                for (Attributable<?, ?, ?> attributable : attributables) {\n-                    final PlainAttr attr = attributable.getPlainAttr(mappingItem.getIntAttrName());\n+            case AnyPlainSchema:\n+                for (Any<?, ?, ?> any : anys) {\n+                    PlainAttr<?> attr = any.getPlainAttr(mappingItem.getIntAttrName());\n                     if (attr != null) {\n                         if (attr.getUniqueValue() != null) {\n                             values.add(attr.getUniqueValue());\n@@ -507,8 +470,9 @@ public static List<PlainAttrValue> getIntValues(final ExternalResource resource,\n \n             case UserVirtualSchema:\n             case GroupVirtualSchema:\n-                for (Attributable<?, ?, ?> attributable : attributables) {\n-                    VirAttr virAttr = attributable.getVirAttr(mappingItem.getIntAttrName());\n+            case AnyVirtualSchema:\n+                for (Any<?, ?, ?> any : anys) {\n+                    VirAttr<?> virAttr = any.getVirAttr(mappingItem.getIntAttrName());\n                     if (virAttr != null) {\n                         if (vAttrsToBeRemoved != null && vAttrsToBeUpdated != null) {\n                             if (vAttrsToBeUpdated.containsKey(mappingItem.getIntAttrName())) {\n@@ -535,55 +499,21 @@ public static List<PlainAttrValue> getIntValues(final ExternalResource resource,\n                             + \"\\n* IntAttrName {}\"\n                             + \"\\n* IntMappingType {}\"\n                             + \"\\n* Attribute values {}\",\n-                            attributable.getClass().getSimpleName(),\n-                            virAttr, mappingItem.getIntAttrName(), mappingItem.getIntMappingType(), values);\n-                }\n-                break;\n-\n-            case MembershipVirtualSchema:\n-                for (Attributable<?, ?, ?> attributable : attributables) {\n-                    VirAttr virAttr = attributable.getVirAttr(mappingItem.getIntAttrName());\n-                    if (virAttr != null) {\n-                        if (membVAttrsToBeRemoved != null && membVAttrsToBeUpdated != null) {\n-                            if (membVAttrsToBeUpdated.containsKey(mappingItem.getIntAttrName())) {\n-                                virAttr.getValues().clear();\n-                                virAttr.getValues().addAll(\n-                                        membVAttrsToBeUpdated.get(mappingItem.getIntAttrName()).getValuesToBeAdded());\n-                            } else if (membVAttrsToBeRemoved.contains(mappingItem.getIntAttrName())) {\n-                                virAttr.getValues().clear();\n-                            } else {\n-                                throw new IllegalArgumentException(\"Don't need to update membership virtual attribute '\"\n-                                        + mappingItem.getIntAttrName() + \"'\");\n-                            }\n-                        }\n-                        if (virAttr.getValues() != null) {\n-                            for (String value : virAttr.getValues()) {\n-                                attrValue = entityFactory.newEntity(UPlainAttrValue.class);\n-                                attrValue.setStringValue(value);\n-                                values.add(attrValue);\n-                            }\n-                        }\n-                    }\n-\n-                    LOG.debug(\"Retrieved {} virtual attribute {}\"\n-                            + \"\\n* IntAttrName {}\"\n-                            + \"\\n* IntMappingType {}\"\n-                            + \"\\n* Attribute values {}\",\n-                            attributable.getClass().getSimpleName(),\n+                            any.getClass().getSimpleName(),\n                             virAttr, mappingItem.getIntAttrName(), mappingItem.getIntMappingType(), values);\n                 }\n                 break;\n \n             case UserDerivedSchema:\n             case GroupDerivedSchema:\n-            case MembershipDerivedSchema:\n-                for (Attributable<?, ?, ?> attributable : attributables) {\n-                    DerAttr derAttr = attributable.getDerAttr(mappingItem.getIntAttrName());\n+            case AnyDerivedSchema:\n+                for (Any<?, ?, ?> any : anys) {\n+                    DerAttr<?> derAttr = any.getDerAttr(mappingItem.getIntAttrName());\n                     if (derAttr != null) {\n-                        attrValue = attributable instanceof Group\n+                        attrValue = any instanceof Group\n                                 ? entityFactory.newEntity(GPlainAttrValue.class)\n                                 : entityFactory.newEntity(UPlainAttrValue.class);\n-                        attrValue.setStringValue(derAttr.getValue(attributable.getPlainAttrs()));\n+                        attrValue.setStringValue(derAttr.getValue(any.getPlainAttrs()));\n                         values.add(attrValue);\n                     }\n \n@@ -597,44 +527,52 @@ public static List<PlainAttrValue> getIntValues(final ExternalResource resource,\n \n             case UserId:\n             case GroupId:\n-            case MembershipId:\n-                for (Attributable<?, ?, ?> attributable : attributables) {\n+            case AnyId:\n+                for (Any<?, ?, ?> any : anys) {\n                     attrValue = entityFactory.newEntity(UPlainAttrValue.class);\n-                    attrValue.setStringValue(attributable.getKey().toString());\n+                    attrValue.setStringValue(any.getKey().toString());\n                     values.add(attrValue);\n                 }\n                 break;\n \n             case Username:\n-                for (Attributable<?, ?, ?> attributable : attributables) {\n-                    if (attributable instanceof User) {\n+                for (Any<?, ?, ?> any : anys) {\n+                    if (any instanceof User) {\n                         attrValue = entityFactory.newEntity(UPlainAttrValue.class);\n-                        attrValue.setStringValue(((User) attributable).getUsername());\n+                        attrValue.setStringValue(((User) any).getUsername());\n                         values.add(attrValue);\n                     }\n                 }\n                 break;\n \n             case GroupName:\n-                for (Attributable<?, ?, ?> attributable : attributables) {\n-                    if (attributable instanceof Group) {\n+                for (Any<?, ?, ?> any : anys) {\n+                    if (any instanceof Group) {\n                         attrValue = entityFactory.newEntity(GPlainAttrValue.class);\n-                        attrValue.setStringValue(((Group) attributable).getName());\n+                        attrValue.setStringValue(((Group) any).getName());\n                         values.add(attrValue);\n                     }\n                 }\n                 break;\n \n             case GroupOwnerSchema:\n-                for (Attributable<?, ?, ?> attributable : attributables) {\n-                    if (attributable instanceof Group) {\n-                        Group group = (Group) attributable;\n+                AnyTypeDAO anyTypeDAO = ApplicationContextProvider.getApplicationContext().getBean(AnyTypeDAO.class);\n+                Mapping uMapping = provision.getAnyType().equals(anyTypeDAO.findUser())\n+                        ? null\n+                        : provision.getMapping();\n+                Mapping gMapping = provision.getAnyType().equals(anyTypeDAO.findGroup())\n+                        ? null\n+                        : provision.getMapping();\n+\n+                for (Any<?, ?, ?> any : anys) {\n+                    if (any instanceof Group) {\n+                        Group group = (Group) any;\n                         String groupOwnerValue = null;\n-                        if (group.getUserOwner() != null && resource.getUmapping() != null) {\n-                            groupOwnerValue = getGroupOwnerValue(resource, group.getUserOwner());\n+                        if (group.getUserOwner() != null && uMapping != null) {\n+                            groupOwnerValue = getGroupOwnerValue(provision, group.getUserOwner());\n                         }\n-                        if (group.getGroupOwner() != null && resource.getGmapping() != null) {\n-                            groupOwnerValue = getGroupOwnerValue(resource, group.getGroupOwner());\n+                        if (group.getGroupOwner() != null && gMapping != null) {\n+                            groupOwnerValue = getGroupOwnerValue(provision, group.getGroupOwner());\n                         }\n \n                         if (StringUtils.isNotBlank(groupOwnerValue)) {\n@@ -655,77 +593,21 @@ public static List<PlainAttrValue> getIntValues(final ExternalResource resource,\n     }\n \n     /**\n-     * Get accountId internal value.\n+     * Get connObjectKey internal value.\n      *\n-     * @param subject subject\n-     * @param accountIdItem accountId mapping item\n-     * @param resource external resource\n-     * @return accountId internal value\n+     * @param any any object\n+     * @param provision provision information\n+     * @return connObjectKey internal value\n      */\n-    public static String getAccountIdValue(final Subject<?, ?, ?> subject,\n-            final ExternalResource resource, final MappingItem accountIdItem) {\n+    public static String getConnObjectKeyValue(final Any<?, ?, ?> any, final Provision provision) {\n \n-        List<PlainAttrValue> values = getIntValues(resource, accountIdItem,\n-                Collections.<Attributable<?, ?, ?>>singletonList(subject), null, null, null, null);\n+        List<PlainAttrValue> values = getIntValues(provision, provision.getMapping().getConnObjectKeyItem(),\n+                Collections.<Any<?, ?, ?>>singletonList(any), null, null);\n         return values == null || values.isEmpty()\n                 ? null\n                 : values.get(0).getValueAsString();\n     }\n \n-    /**\n-     * For given source mapping type, return the corresponding Class object.\n-     *\n-     * @param intMappingType source mapping type\n-     * @return corresponding Class object, if any (can be null)\n-     */\n-    @SuppressWarnings(\"rawtypes\")\n-    public static Class getIntMappingTypeClass(final IntMappingType intMappingType) {\n-        Class result;\n-\n-        switch (intMappingType) {\n-            case UserPlainSchema:\n-                result = UPlainSchema.class;\n-                break;\n-\n-            case GroupPlainSchema:\n-                result = GPlainSchema.class;\n-                break;\n-\n-            case MembershipPlainSchema:\n-                result = MPlainSchema.class;\n-                break;\n-\n-            case UserDerivedSchema:\n-                result = UDerSchema.class;\n-                break;\n-\n-            case GroupDerivedSchema:\n-                result = GDerSchema.class;\n-                break;\n-\n-            case MembershipDerivedSchema:\n-                result = MDerSchema.class;\n-                break;\n-\n-            case UserVirtualSchema:\n-                result = UVirSchema.class;\n-                break;\n-\n-            case GroupVirtualSchema:\n-                result = GVirSchema.class;\n-                break;\n-\n-            case MembershipVirtualSchema:\n-                result = MVirSchema.class;\n-                break;\n-\n-            default:\n-                result = null;\n-        }\n-\n-        return result;\n-    }\n-\n     /**\n      * Private default constructor, for static-only classes.\n      */"},{"sha":"83e98ec75f230de9014039af61a240a9b1e758b9","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/jexl/JexlUtils.java","status":"modified","additions":19,"deletions":19,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FJexlUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FJexlUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FJexlUtils.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -33,13 +33,13 @@\n import org.apache.commons.jexl2.MapContext;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n+import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.core.persistence.api.entity.Attributable;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.misc.DataFormat;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -146,14 +146,14 @@ public static JexlContext addFieldsToContext(final Object object, final JexlCont\n         return context;\n     }\n \n-    public static JexlContext addAttrsToContext(final Collection<? extends PlainAttr> attrs,\n+    public static JexlContext addAttrsToContext(final Collection<? extends PlainAttr<?>> attrs,\n             final JexlContext jexlContext) {\n \n         JexlContext context = jexlContext == null\n                 ? new MapContext()\n                 : jexlContext;\n \n-        for (PlainAttr attr : attrs) {\n+        for (PlainAttr<?> attr : attrs) {\n             if (attr.getSchema() != null) {\n                 List<String> attrValues = attr.getValuesAsStrings();\n                 String expressionValue = attrValues.isEmpty()\n@@ -170,13 +170,13 @@ public static JexlContext addAttrsToContext(final Collection<? extends PlainAttr\n     }\n \n     public static JexlContext addDerAttrsToContext(final Collection<? extends DerAttr> derAttrs,\n-            final Collection<? extends PlainAttr> attrs, final JexlContext jexlContext) {\n+            final Collection<? extends PlainAttr<?>> attrs, final JexlContext jexlContext) {\n \n         JexlContext context = jexlContext == null\n                 ? new MapContext()\n                 : jexlContext;\n \n-        for (DerAttr derAttr : derAttrs) {\n+        for (DerAttr<?> derAttr : derAttrs) {\n             if (derAttr.getSchema() != null) {\n                 String expressionValue = derAttr.getValue(attrs);\n                 if (expressionValue == null) {\n@@ -199,7 +199,7 @@ public static JexlContext addVirAttrsToContext(final Collection<? extends VirAtt\n                 ? new MapContext()\n                 : jexlContext;\n \n-        for (VirAttr virAttr : virAttrs) {\n+        for (VirAttr<?> virAttr : virAttrs) {\n             if (virAttr.getSchema() != null) {\n                 List<String> attrValues = virAttr.getValues();\n                 String expressionValue = attrValues.isEmpty()\n@@ -216,33 +216,33 @@ public static JexlContext addVirAttrsToContext(final Collection<? extends VirAtt\n     }\n \n     public static boolean evaluateMandatoryCondition(\n-            final String mandatoryCondition, final Attributable<?, ?, ?> attributable) {\n+            final String mandatoryCondition, final Any<?, ?, ?> any) {\n \n         JexlContext jexlContext = new MapContext();\n-        addAttrsToContext(attributable.getPlainAttrs(), jexlContext);\n-        addDerAttrsToContext(attributable.getDerAttrs(), attributable.getPlainAttrs(), jexlContext);\n-        addVirAttrsToContext(attributable.getVirAttrs(), jexlContext);\n+        addAttrsToContext(any.getPlainAttrs(), jexlContext);\n+        addDerAttrsToContext(any.getDerAttrs(), any.getPlainAttrs(), jexlContext);\n+        addVirAttrsToContext(any.getVirAttrs(), jexlContext);\n \n         return Boolean.parseBoolean(evaluate(mandatoryCondition, jexlContext));\n     }\n \n     public static String evaluate(final String expression,\n-            final Attributable<?, ?, ?> attributable, final Collection<? extends PlainAttr> attributes) {\n+            final Any<?, ?, ?> any, final Collection<? extends PlainAttr<?>> attributes) {\n \n         final JexlContext jexlContext = new MapContext();\n         JexlUtils.addAttrsToContext(attributes, jexlContext);\n-        JexlUtils.addFieldsToContext(attributable, jexlContext);\n+        JexlUtils.addFieldsToContext(any, jexlContext);\n \n         // Evaluate expression using the context prepared before\n         return evaluate(expression, jexlContext);\n     }\n \n-    public static String evaluate(final String expression, final AbstractAttributableTO attributableTO) {\n+    public static String evaluate(final String expression, final AnyTO anyTO) {\n         final JexlContext context = new MapContext();\n \n-        addFieldsToContext(attributableTO, context);\n+        addFieldsToContext(anyTO, context);\n \n-        for (AttrTO plainAttr : attributableTO.getPlainAttrs()) {\n+        for (AttrTO plainAttr : anyTO.getPlainAttrs()) {\n             List<String> values = plainAttr.getValues();\n             String expressionValue = values.isEmpty()\n                     ? StringUtils.EMPTY\n@@ -252,7 +252,7 @@ public static String evaluate(final String expression, final AbstractAttributabl\n \n             context.set(plainAttr.getSchema(), expressionValue);\n         }\n-        for (AttrTO derAttr : attributableTO.getDerAttrs()) {\n+        for (AttrTO derAttr : anyTO.getDerAttrs()) {\n             List<String> values = derAttr.getValues();\n             String expressionValue = values.isEmpty()\n                     ? StringUtils.EMPTY\n@@ -262,7 +262,7 @@ public static String evaluate(final String expression, final AbstractAttributabl\n \n             context.set(derAttr.getSchema(), expressionValue);\n         }\n-        for (AttrTO virAttr : attributableTO.getVirAttrs()) {\n+        for (AttrTO virAttr : anyTO.getVirAttrs()) {\n             List<String> values = virAttr.getValues();\n             String expressionValue = values.isEmpty()\n                     ? StringUtils.EMPTY"},{"sha":"52fa0d8cf6295683b0e9095a25781694fdbb7e97","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/PolicyEvaluator.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEvaluator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEvaluator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEvaluator.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -22,7 +22,7 @@\n import org.apache.syncope.common.lib.types.AccountPolicySpec;\n import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n import org.apache.syncope.common.lib.types.PolicySpec;\n-import org.apache.syncope.core.persistence.api.entity.Attributable;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -40,7 +40,7 @@ public class PolicyEvaluator {\n     private static final Logger LOG = LoggerFactory.getLogger(PolicyEvaluator.class);\n \n     @SuppressWarnings(\"unchecked\")\n-    public <T extends PolicySpec> T evaluate(final Policy policy, final Attributable<?, ?, ?> attributable) {\n+    public <T extends PolicySpec> T evaluate(final Policy policy, final Any<?, ?, ?> any) {\n         if (policy == null) {\n             return null;\n         }\n@@ -54,7 +54,7 @@ public <T extends PolicySpec> T evaluate(final Policy policy, final Attributable\n                 BeanUtils.copyProperties(ppSpec, evaluatedPPSpec, new String[] { \"schemasNotPermitted\" });\n \n                 for (String schema : ppSpec.getSchemasNotPermitted()) {\n-                    PlainAttr attr = attributable.getPlainAttr(schema);\n+                    PlainAttr attr = any.getPlainAttr(schema);\n                     if (attr != null) {\n                         List<String> values = attr.getValuesAsStrings();\n                         if (values != null && !values.isEmpty()) {\n@@ -64,13 +64,13 @@ public <T extends PolicySpec> T evaluate(final Policy policy, final Attributable\n                 }\n \n                 // Password history verification and update\n-                if (!(attributable instanceof User)) {\n-                    LOG.error(\"Cannot check previous passwords. attributable is not a user object: {}\",\n-                            attributable.getClass().getName());\n+                if (!(any instanceof User)) {\n+                    LOG.error(\"Cannot check previous passwords. instance is not user object: {}\",\n+                            any.getClass().getName());\n                     result = (T) evaluatedPPSpec;\n                     break;\n                 }\n-                User user = (User) attributable;\n+                User user = (User) any;\n                 if (user.verifyPasswordHistory(user.getClearPassword(), ppSpec.getHistoryLength())) {\n                     evaluatedPPSpec.getWordsNotPermitted().add(user.getClearPassword());\n                 }\n@@ -84,7 +84,7 @@ public <T extends PolicySpec> T evaluate(final Policy policy, final Attributable\n                 BeanUtils.copyProperties(spec, accountPolicy, new String[] { \"schemasNotPermitted\" });\n \n                 for (String schema : spec.getSchemasNotPermitted()) {\n-                    PlainAttr attr = attributable.getPlainAttr(schema);\n+                    PlainAttr attr = any.getPlainAttr(schema);\n                     if (attr != null) {\n                         List<String> values = attr.getValuesAsStrings();\n                         if (values != null && !values.isEmpty()) {"},{"sha":"a67cbf5999a525aa8c78ea5f1d2304c5b038ffbb","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/search/SearchCondVisitor.java","status":"modified","additions":14,"deletions":12,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondVisitor.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -28,26 +28,28 @@\n import org.apache.cxf.jaxrs.ext.search.visitor.AbstractSearchConditionVisitor;\n import org.apache.syncope.common.lib.search.SearchableFields;\n import org.apache.syncope.common.lib.search.SpecialAttr;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n-import org.apache.syncope.core.persistence.api.dao.search.GroupCond;\n+import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n import org.apache.syncope.core.persistence.api.dao.search.ResourceCond;\n import org.apache.syncope.core.persistence.api.dao.search.RoleCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n-import org.apache.syncope.core.persistence.api.dao.search.SubjectCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n \n /**\n  * Converts CXF's <tt>SearchCondition</tt> into internal <tt>SearchCond</tt>.\n  */\n public class SearchCondVisitor extends AbstractSearchConditionVisitor<SearchBean, SearchCond> {\n \n-    private static final List<String> ATTRIBUTABLE_FIELDS;\n+    private static final List<String> ANY_FIELDS;\n \n     static {\n-        ATTRIBUTABLE_FIELDS = new ArrayList<String>();\n-        ATTRIBUTABLE_FIELDS.addAll(SearchableFields.get(UserTO.class));\n-        ATTRIBUTABLE_FIELDS.addAll(SearchableFields.get(GroupTO.class));\n+        ANY_FIELDS = new ArrayList<>();\n+        ANY_FIELDS.addAll(SearchableFields.get(UserTO.class));\n+        ANY_FIELDS.addAll(SearchableFields.get(GroupTO.class));\n+        ANY_FIELDS.addAll(SearchableFields.get(AnyObjectTO.class));\n     }\n \n     private SearchCond searchCond;\n@@ -61,8 +63,8 @@ public SearchCondVisitor(final Map<String, String> fieldMap) {\n     }\n \n     private AttributeCond createAttributeCond(final String schema) {\n-        AttributeCond attributeCond = ATTRIBUTABLE_FIELDS.contains(schema)\n-                ? new SubjectCond()\n+        AttributeCond attributeCond = ANY_FIELDS.contains(schema)\n+                ? new AnyCond()\n                 : new AttributeCond();\n         attributeCond.setSchema(schema);\n         return attributeCond;\n@@ -97,7 +99,7 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n                 } else {\n                     switch (specialAttrName) {\n                         case GROUPS:\n-                            GroupCond groupCond = new GroupCond();\n+                            MembershipCond groupCond = new MembershipCond();\n                             groupCond.setGroupKey(Long.valueOf(value));\n                             leaf = SearchCond.getLeafCond(groupCond);\n                             break;\n@@ -124,10 +126,10 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n                             && leaf.getAttributeCond().getType() == AttributeCond.Type.ISNULL) {\n \n                         leaf.getAttributeCond().setType(AttributeCond.Type.ISNOTNULL);\n-                    } else if (leaf.getSubjectCond() != null\n-                            && leaf.getSubjectCond().getType() == SubjectCond.Type.ISNULL) {\n+                    } else if (leaf.getAnyCond() != null\n+                            && leaf.getAnyCond().getType() == AnyCond.Type.ISNULL) {\n \n-                        leaf.getSubjectCond().setType(AttributeCond.Type.ISNOTNULL);\n+                        leaf.getAnyCond().setType(AttributeCond.Type.ISNOTNULL);\n                     } else {\n                         leaf = SearchCond.getNotLeafCond(leaf);\n                     }"},{"sha":"48cafa3a862c2ec0d563d3b9e5cd27cc2f0b8be4","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/PasswordGenerator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -23,7 +23,7 @@\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.misc.policy.InvalidPasswordPolicySpecException;\n import org.apache.syncope.core.misc.policy.PolicyPattern;"},{"sha":"80d2b484197544aec9d75522f86dd297f49122e0","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeAuthenticationProvider.java","status":"modified","additions":14,"deletions":10,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -23,21 +23,22 @@\n import java.util.Set;\n import javax.annotation.Resource;\n import org.apache.commons.collections4.SetUtils;\n-import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n import org.apache.syncope.core.misc.AuditManager;\n import org.apache.syncope.core.misc.MappingUtils;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.identityconnectors.framework.common.objects.Uid;\n@@ -76,11 +77,14 @@ public class SyncopeAuthenticationProvider implements AuthenticationProvider {\n     @Autowired\n     protected PolicyDAO policyDAO;\n \n+    @Autowired\n+    protected AnyTypeDAO anyTypeDAO;\n+\n     @Autowired\n     protected ConnectorFactory connFactory;\n \n     @Autowired\n-    protected AttributableUtilsFactory attrUtilsFactory;\n+    protected AnyUtilsFactory attrUtilsFactory;\n \n     @Resource(name = \"adminUser\")\n     protected String adminUser;\n@@ -253,23 +257,23 @@ protected boolean authenticate(final User user, final String password) {\n         boolean authenticated = encryptor.verify(password, user.getCipherAlgorithm(), user.getPassword());\n         LOG.debug(\"{} authenticated on internal storage: {}\", user.getUsername(), authenticated);\n \n-        AttributableUtils attrUtils = attrUtilsFactory.getInstance(AttributableType.USER);\n+        AnyUtils attrUtils = attrUtilsFactory.getInstance(AnyTypeKind.USER);\n         for (Iterator<? extends ExternalResource> itor = getPassthroughResources(user).iterator();\n                 itor.hasNext() && !authenticated;) {\n \n             ExternalResource resource = itor.next();\n-            String accountId = null;\n+            String connObjectKey = null;\n             try {\n-                accountId = MappingUtils.getAccountIdValue(user, resource, attrUtils.getAccountIdItem(resource));\n-                Uid uid = connFactory.getConnector(resource).authenticate(accountId, password, null);\n+                connObjectKey = MappingUtils.getConnObjectKeyValue(user, resource.getProvision(anyTypeDAO.findUser()));\n+                Uid uid = connFactory.getConnector(resource).authenticate(connObjectKey, password, null);\n                 if (uid != null) {\n                     authenticated = true;\n                 }\n             } catch (Exception e) {\n                 LOG.debug(\"Could not authenticate {} on {}\", user.getUsername(), resource.getKey(), e);\n             }\n             LOG.debug(\"{} authenticated on {} as {}: {}\",\n-                    user.getUsername(), resource.getKey(), accountId, authenticated);\n+                    user.getUsername(), resource.getKey(), connObjectKey, authenticated);\n         }\n \n         return authenticated;"},{"sha":"a179e75f0c4fef3fc701831ce38a013a7dd19c9c","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeUserDetailsService.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeUserDetailsService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeUserDetailsService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeUserDetailsService.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -26,9 +26,9 @@\n import javax.annotation.Resource;\n import org.apache.commons.collections4.Closure;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IteratorUtils;\n import org.apache.commons.collections4.PredicateUtils;\n import org.apache.commons.collections4.Transformer;\n-import org.apache.syncope.common.lib.CollectionUtils2;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.core.misc.RealmUtils;\n@@ -65,15 +65,15 @@ public UserDetails loadUserByUsername(final String username) {\n         if (anonymousUser.equals(username)) {\n             authorities.add(new SyncopeGrantedAuthority(Entitlement.ANONYMOUS));\n         } else if (adminUser.equals(username)) {\n-            CollectionUtils2.collect(Entitlement.values(),\n+            CollectionUtils.collect(IteratorUtils.filteredIterator(Entitlement.values().iterator(),\n+                    PredicateUtils.notPredicate(PredicateUtils.equalPredicate(Entitlement.ANONYMOUS))),\n                     new Transformer<String, SyncopeGrantedAuthority>() {\n \n                         @Override\n                         public SyncopeGrantedAuthority transform(final String entitlement) {\n                             return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n                         }\n                     },\n-                    PredicateUtils.notPredicate(PredicateUtils.equalPredicate(Entitlement.ANONYMOUS)),\n                     authorities);\n         } else {\n             org.apache.syncope.core.persistence.api.entity.user.User user = userDAO.find(username);"},{"sha":"e5c28156cf9a72ef23d6d6a1dcfe283a3bfc349f","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/UnauthorizedException.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FUnauthorizedException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FUnauthorizedException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FUnauthorizedException.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,13 +18,13 @@\n  */\n package org.apache.syncope.core.misc.security;\n \n-import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n public class UnauthorizedException extends RuntimeException {\n \n     private static final long serialVersionUID = 7540587364235915081L;\n \n-    public UnauthorizedException(final SubjectType subject, final Long key) {\n-        super(\"Missing entitlement or realm administration for \" + subject + \" \" + key);\n+    public UnauthorizedException(final AnyTypeKind type, final Long key) {\n+        super(\"Missing entitlement or realm administration for \" + type + \" \" + key);\n     }\n }"},{"sha":"26068e96759efc8565dc0ff1bf4b0ac40fb11ba9","filename":"core/misc/src/test/java/org/apache/syncope/core/misc/search/SearchCondConverterTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverterTest.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -23,11 +23,11 @@\n import org.apache.syncope.common.lib.search.SpecialAttr;\n import org.apache.syncope.common.lib.search.UserFiqlSearchConditionBuilder;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n-import org.apache.syncope.core.persistence.api.dao.search.GroupCond;\n+import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n import org.apache.syncope.core.persistence.api.dao.search.ResourceCond;\n import org.apache.syncope.core.persistence.api.dao.search.RoleCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n-import org.apache.syncope.core.persistence.api.dao.search.SubjectCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.junit.Test;\n \n public class SearchCondConverterTest {\n@@ -37,7 +37,7 @@ public void eq() {\n         String fiqlExpression = new UserFiqlSearchConditionBuilder().is(\"username\").equalTo(\"rossini\").query();\n         assertEquals(\"username==rossini\", fiqlExpression);\n \n-        SubjectCond attrCond = new SubjectCond(AttributeCond.Type.EQ);\n+        AnyCond attrCond = new AnyCond(AttributeCond.Type.EQ);\n         attrCond.setSchema(\"username\");\n         attrCond.setExpression(\"rossini\");\n         SearchCond simpleCond = SearchCond.getLeafCond(attrCond);\n@@ -50,7 +50,7 @@ public void like() {\n         String fiqlExpression = new UserFiqlSearchConditionBuilder().is(\"username\").equalTo(\"ros*\").query();\n         assertEquals(\"username==ros*\", fiqlExpression);\n \n-        AttributeCond attrCond = new SubjectCond(AttributeCond.Type.LIKE);\n+        AttributeCond attrCond = new AnyCond(AttributeCond.Type.LIKE);\n         attrCond.setSchema(\"username\");\n         attrCond.setExpression(\"ros%\");\n         SearchCond simpleCond = SearchCond.getLeafCond(attrCond);\n@@ -87,7 +87,7 @@ public void groups() {\n         String fiqlExpression = new UserFiqlSearchConditionBuilder().inGroups(1L).query();\n         assertEquals(SpecialAttr.GROUPS + \"==1\", fiqlExpression);\n \n-        GroupCond groupCond = new GroupCond();\n+        MembershipCond groupCond = new MembershipCond();\n         groupCond.setGroupKey(1L);\n         SearchCond simpleCond = SearchCond.getLeafCond(groupCond);\n "},{"sha":"86c97e31ab96abbb6b8f231f381d0f608c8c1f4e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+\n+public interface AnyDAO<A extends Any<?, ?, ?>> extends DAO<A, Long> {\n+\n+    A authFind(Long key);\n+\n+    A find(Long key);\n+\n+    A findByWorkflowId(String workflowId);\n+\n+    List<A> findByAttrValue(String schemaName, PlainAttrValue attrValue);\n+\n+    A findByAttrUniqueValue(String schemaName, PlainAttrValue attrUniqueValue);\n+\n+    /**\n+     * Find any objects by derived attribute value. This method could fail if one or more string literals contained\n+     * into the derived attribute value provided derive from identifier (schema name) replacement. When you are going to\n+     * specify a derived attribute expression you must be quite sure that string literals used to build the expression\n+     * cannot be found into the attribute values used to replace attribute schema names used as identifiers.\n+     *\n+     * @param schemaName derived schema name\n+     * @param value derived attribute value\n+     * @return list of any objects\n+     */\n+    List<A> findByDerAttrValue(String schemaName, String value);\n+\n+    List<A> findByResource(ExternalResource resource);\n+\n+    List<A> findAll(Set<String> adminRealms, int page, int itemsPerPage);\n+\n+    List<A> findAll(Set<String> adminRealms, int page, int itemsPerPage, List<OrderByClause> orderBy);\n+\n+    int count(Set<String> adminRealms);\n+\n+    A save(A any);\n+\n+    void delete(Long key);\n+\n+    void delete(A any);\n+\n+}"},{"sha":"d01511ff47a9ca258f9dde383c6d9137b72f67e6","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java","status":"renamed","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,23 +18,23 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n+import java.util.Collection;\n import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n-public interface MembershipDAO extends DAO<Membership, Long> {\n+public interface AnyObjectDAO extends AnyDAO<AnyObject> {\n \n-    Membership find(Long key);\n+    List<AnyObject> findByAnyType(String anyTypeName);\n \n-    Membership find(User user, Group group);\n+    List<Group> findDynGroupMemberships(AnyObject anyObject);\n \n-    List<Membership> findAll();\n+    Collection<Group> findAllGroups(AnyObject anyObject);\n \n-    Membership save(Membership membership);\n+    Collection<Long> findAllGroupKeys(AnyObject anyObject);\n \n-    void delete(Long key);\n-\n-    Membership authFetch(Long key);\n+    Collection<ExternalResource> findAllResources(AnyObject anyObject);\n \n+    Collection<String> findAllResourceNames(AnyObject anyObject);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/MembershipDAO.java"},{"sha":"f53dff6f19dc7e28c8b7365de67ddd91a2eebb74","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnySearchDAO.java","status":"renamed","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,64 +20,64 @@\n \n import java.util.List;\n import java.util.Set;\n-import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n-import org.apache.syncope.core.persistence.api.entity.Subject;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n \n-public interface SubjectSearchDAO extends DAO<Subject<?, ?, ?>, Long> {\n+public interface AnySearchDAO extends DAO<Any<?, ?, ?>, Long> {\n \n     /**\n      * @param adminRealms realms for which the caller owns the proper entitlement(s)\n      * @param searchCondition the search condition\n-     * @param type user or group\n+     * @param kind any object\n      * @return size of search result\n      */\n-    int count(Set<String> adminRealms, SearchCond searchCondition, SubjectType type);\n+    int count(Set<String> adminRealms, SearchCond searchCondition, AnyTypeKind kind);\n \n     /**\n      * @param adminRealms realms for which the caller owns the proper entitlement(s)\n      * @param searchCondition the search condition\n-     * @param type user or group\n-     * @param <T> user/group\n-     * @return the list of users/groups matching the given search condition\n+     * @param kind any object\n+     * @param <T> any\n+     * @return the list of any objects matching the given search condition\n      */\n-    <T extends Subject<?, ?, ?>> List<T> search(\n-            Set<String> adminRealms, SearchCond searchCondition, SubjectType type);\n+    <T extends Any<?, ?, ?>> List<T> search(\n+            Set<String> adminRealms, SearchCond searchCondition, AnyTypeKind kind);\n \n     /**\n      * @param adminRealms the set of admin groups owned by the caller\n      * @param searchCondition the search condition\n      * @param orderBy list of ordering clauses\n-     * @param type user or group\n-     * @param <T> user/group\n-     * @return the list of users/groups matching the given search condition\n+     * @param kind any object\n+     * @param <T> any\n+     * @return the list of any objects matching the given search condition\n      */\n-    <T extends Subject<?, ?, ?>> List<T> search(\n-            Set<String> adminRealms, SearchCond searchCondition, List<OrderByClause> orderBy, SubjectType type);\n+    <T extends Any<?, ?, ?>> List<T> search(\n+            Set<String> adminRealms, SearchCond searchCondition, List<OrderByClause> orderBy, AnyTypeKind kind);\n \n     /**\n      * @param adminRealms realms for which the caller owns the proper entitlement(s)\n      * @param searchCondition the search condition\n      * @param page position of the first result, start from 1\n      * @param itemsPerPage number of results per page\n      * @param orderBy list of ordering clauses\n-     * @param type user or group\n-     * @param <T> user/group\n-     * @return the list of users/groups matching the given search condition (in the given page)\n+     * @param kind any object\n+     * @param <T> any\n+     * @return the list of any objects matching the given search condition (in the given page)\n      */\n-    <T extends Subject<?, ?, ?>> List<T> search(\n+    <T extends Any<?, ?, ?>> List<T> search(\n             Set<String> adminRealms, SearchCond searchCondition, int page, int itemsPerPage,\n-            List<OrderByClause> orderBy, SubjectType type);\n+            List<OrderByClause> orderBy, AnyTypeKind kind);\n \n     /**\n-     * Verify if user/group matches the given search condition.\n+     * Verify if any matches the given search condition.\n      *\n-     * @param subject to be checked\n+     * @param any to be checked\n      * @param searchCondition to be verified\n-     * @param type user or group\n-     * @param <T> user/group\n-     * @return true if user/group matches searchCondition\n+     * @param kind any object\n+     * @param <T> any\n+     * @return true if any matches searchCondition\n      */\n-    <T extends Subject<?, ?, ?>> boolean matches(T subject, SearchCond searchCondition, SubjectType type);\n+    <T extends Any<?, ?, ?>> boolean matches(T any, SearchCond searchCondition, AnyTypeKind kind);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/SubjectSearchDAO.java"},{"sha":"e43740b77c0d157d8897cd2f059a03c152f9134a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyTypeClassDAO.java","status":"renamed","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyTypeClassDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyTypeClassDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyTypeClassDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -16,19 +16,18 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.membership;\n+package org.apache.syncope.core.persistence.api.dao;\n \n-import org.apache.syncope.core.persistence.api.entity.DerAttr;\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n \n-public interface MDerAttr extends DerAttr {\n+public interface AnyTypeClassDAO extends DAO<AnyTypeClass, String> {\n \n-    @Override\n-    Membership getOwner();\n+    AnyTypeClass find(String key);\n \n-    @Override\n-    MDerSchema getSchema();\n+    List<AnyTypeClass> findAll();\n \n-    MDerAttrTemplate getTemplate();\n+    AnyTypeClass save(AnyTypeClass anyType);\n \n-    void setTemplate(MDerAttrTemplate template);\n+    void delete(String key);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/membership/MDerAttr.java"},{"sha":"bef6812357c04eae031bebb06f5d33759319fa37","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyTypeDAO.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyTypeDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyTypeDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyTypeDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+\n+public interface AnyTypeDAO extends DAO<AnyType, String> {\n+\n+    AnyType find(String key);\n+\n+    AnyType findUser();\n+\n+    AnyType findGroup();\n+\n+    List<AnyType> findAll();\n+\n+    AnyType save(AnyType anyType);\n+\n+    void delete(String key);\n+}"},{"sha":"d087f20206be982a24d9d15a1ff3ce67df38c09e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/DerAttrDAO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDerAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDerAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDerAttrDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -21,15 +21,15 @@\n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n \n-public interface DerAttrDAO extends DAO<DerAttr, Long> {\n+public interface DerAttrDAO extends DAO<DerAttr<?>, Long> {\n \n-    <T extends DerAttr> T find(Long key, Class<T> reference);\n+    <T extends DerAttr<?>> T find(Long key, Class<T> reference);\n \n-    <T extends DerAttr> List<T> findAll(Class<T> reference);\n+    <T extends DerAttr<?>> List<T> findAll(Class<T> reference);\n \n-    <T extends DerAttr> T save(T derAttr);\n+    <T extends DerAttr<?>> T save(T derAttr);\n \n-    <T extends DerAttr> void delete(Long key, Class<T> reference);\n+    <T extends DerAttr<?>> void delete(Long key, Class<T> reference);\n \n-    <T extends DerAttr> void delete(T derAttr);\n+    <T extends DerAttr<?>> void delete(T derAttr);\n }"},{"sha":"d943b8322993834c849920fedd1dd6380ab18860","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/DerSchemaDAO.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDerSchemaDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -19,19 +19,18 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n \n public interface DerSchemaDAO extends DAO<DerSchema, String> {\n \n-    <T extends DerSchema> T find(String name, Class<T> reference);\n+    DerSchema find(String name);\n \n-    <T extends DerSchema> List<T> findAll(Class<T> reference);\n+    List<DerSchema> findAll();\n \n-    <T extends DerAttr> List<T> findAttrs(DerSchema schema, Class<T> reference);\n+    <T extends DerAttr<?>> List<T> findAttrs(DerSchema schema, Class<T> reference);\n \n-    <T extends DerSchema> T save(T derSchema);\n+    DerSchema save(DerSchema derSchema);\n \n-    void delete(String name, AttributableUtils attributableUtil);\n+    void delete(String key);\n }"},{"sha":"a72937c22ab2219f14ad9e7bcd7ca4a51fd10999","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ExternalResourceDAO.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -21,8 +21,7 @@\n import java.util.List;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n \n public interface ExternalResourceDAO extends DAO<ExternalResource, String> {\n@@ -39,8 +38,7 @@ public interface ExternalResourceDAO extends DAO<ExternalResource, String> {\n \n     ExternalResource save(ExternalResource resource);\n \n-    <T extends MappingItem> void deleteMapping(\n-            String schemaName, IntMappingType intMappingType, Class<T> reference);\n+    void deleteMapping(String schemaName, IntMappingType intMappingType);\n \n     void delete(String key);\n }"},{"sha":"f77d9b5196e5927aa4b13ec1b24bb94bb8ad21d6","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java","status":"modified","additions":19,"deletions":34,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,59 +20,44 @@\n \n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n-import org.apache.syncope.core.persistence.api.entity.group.GDerAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirAttr;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n \n-public interface GroupDAO extends SubjectDAO<GPlainAttr, GDerAttr, GVirAttr> {\n-\n-    Group find(Long key);\n+public interface GroupDAO extends AnyDAO<Group> {\n \n     Group find(String name);\n \n     List<Group> findOwnedByUser(Long userKey);\n \n     List<Group> findOwnedByGroup(Long groupKey);\n \n-    List<Group> findByAttrValue(String schemaName, GPlainAttrValue attrValue);\n-\n-    List<Group> findByDerAttrValue(String schemaName, String value);\n-\n-    Group findByAttrUniqueValue(String schemaName, GPlainAttrValue attrUniqueValue);\n-\n-    List<Group> findByResource(ExternalResource resource);\n-\n-    List<Group> findAll(Set<String> adminRealms, int page, int itemsPerPage);\n-\n-    List<Group> findAll(Set<String> adminRealms, int page, int itemsPerPage, List<OrderByClause> orderBy);\n-\n-    List<Membership> findMemberships(Group group);\n-\n-    int count(Set<String> adminRealms);\n+    List<AMembership> findAMemberships(Group group);\n \n-    Group save(Group group);\n+    List<UMembership> findUMemberships(Group group);\n \n-    void delete(Group group);\n-\n-    void delete(Long key);\n-\n-    Group authFetch(Long key);\n+    /**\n+     * Finds any objects having resources assigned exclusively because of memberships of the given group.\n+     *\n+     * @param groupKey group key\n+     * @return map containing pairs with any object key and operations to be performed on those resources (DELETE,\n+     * typically).\n+     */\n+    Map<Long, PropagationByResource> findAnyObjectsWithTransitiveResources(Long groupKey);\n \n     /**\n      * Finds users having resources assigned exclusively because of memberships of the given group.\n      *\n      * @param groupKey group key\n-     * @return map containing pairs with user key and operations to be performed on those resources (DELETE, typically).\n+     * @return map containing pairs with user key and operations to be performed on those resources (DELETE,\n+     * typically).\n      */\n-    Map<Long, PropagationByResource> findUsersWithIndirectResources(Long groupKey);\n+    Map<Long, PropagationByResource> findUsersWithTransitiveResources(Long groupKey);\n+\n+    void refreshDynMemberships(AnyObject anyObject);\n \n     void refreshDynMemberships(User user);\n "},{"sha":"e15b63415ead2815dcf0017ee9e939c2fe184e00","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainAttrDAO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainAttrDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,11 +20,11 @@\n \n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n \n-public interface PlainAttrDAO extends DAO<PlainAttr, Long> {\n+public interface PlainAttrDAO extends DAO<PlainAttr<?>, Long> {\n \n-    <T extends PlainAttr> T find(Long key, Class<T> reference);\n+    <T extends PlainAttr<?>> T find(Long key, Class<T> reference);\n \n-    <T extends PlainAttr> void delete(Long key, Class<T> reference);\n+    <T extends PlainAttr<?>> void delete(Long key, Class<T> reference);\n \n-    <T extends PlainAttr> void delete(T attr);\n+    <T extends PlainAttr<?>> void delete(T attr);\n }"},{"sha":"2dda81e704a59de13ecec833013e4d36d0c441dc","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainSchemaDAO.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainSchemaDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -19,19 +19,18 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n \n public interface PlainSchemaDAO extends DAO<PlainSchema, String> {\n \n-    <T extends PlainSchema> T find(String key, Class<T> reference);\n+    PlainSchema find(String name);\n \n-    <T extends PlainSchema> List<T> findAll(Class<T> reference);\n+    List<PlainSchema> findAll();\n \n-    <T extends PlainAttr> List<T> findAttrs(PlainSchema schema, Class<T> reference);\n+    <T extends PlainAttr<?>> List<T> findAttrs(PlainSchema schema, Class<T> reference);\n \n-    <T extends PlainSchema> T save(T schema);\n+    PlainSchema save(PlainSchema derSchema);\n \n-    void delete(String name, AttributableUtils attributableUtil);\n+    void delete(String key);\n }"},{"sha":"58281ff2be3b59fd3115a20a24661e9bed6752aa","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PolicyDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -21,7 +21,7 @@\n import java.util.List;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n \n public interface PolicyDAO extends DAO<Policy, Long> {"},{"sha":"aca7bf481fe0b11a8f1e7f50f1084a1cdf86c3d8","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/SubjectDAO.java","status":"removed","additions":0,"deletions":44,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSubjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSubjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSubjectDAO.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,44 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.dao;\n-\n-import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n-import org.apache.syncope.core.persistence.api.entity.DerAttr;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.Subject;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-\n-public interface SubjectDAO<P extends PlainAttr, D extends DerAttr, V extends VirAttr>\n-        extends DAO<Subject<P, D, V>, Long> {\n-\n-    List<? extends Subject<P, D, V>> findByAttrValue(\n-            String schemaName, PlainAttrValue attrValue, AttributableUtils attrUtils);\n-\n-    Subject<P, D, V> findByAttrUniqueValue(\n-            String schemaName, PlainAttrValue attrUniqueValue, AttributableUtils attrUtils);\n-\n-    List<? extends Subject<P, D, V>> findByDerAttrValue(\n-            String schemaName, String value, AttributableUtils attrUtils);\n-\n-    List<? extends Subject<P, D, V>> findByResource(\n-            ExternalResource resource, AttributableUtils attrUtils);\n-}"},{"sha":"02b1032625a54eead0af27320858c01e8afa2471","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/TaskDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -21,7 +21,7 @@\n import java.util.List;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n \n public interface TaskDAO extends DAO<Task, Long> {"},{"sha":"a1e4d0910115f492d0cc0855bdc74e9e6bf5cd8f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/UserDAO.java","status":"modified","additions":3,"deletions":35,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,54 +20,22 @@\n \n import java.util.Collection;\n import java.util.List;\n-import java.util.Set;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n-import org.apache.syncope.core.persistence.api.entity.user.UDerAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n \n-public interface UserDAO extends SubjectDAO<UPlainAttr, UDerAttr, UVirAttr> {\n+public interface UserDAO extends AnyDAO<User> {\n \n-    User find(Long key);\n+    User authFind(String username);\n \n     User find(String username);\n \n-    User findByWorkflowId(String workflowId);\n-\n     User findByToken(String token);\n \n     List<User> findBySecurityQuestion(SecurityQuestion securityQuestion);\n \n-    List<User> findByDerAttrValue(String schemaName, String value);\n-\n-    List<User> findByAttrValue(String schemaName, UPlainAttrValue attrValue);\n-\n-    User findByAttrUniqueValue(String schemaName, UPlainAttrValue attrUniqueValue);\n-\n-    List<User> findByResource(ExternalResource resource);\n-\n-    List<User> findAll(Set<String> adminRealms, int page, int itemsPerPage);\n-\n-    List<User> findAll(Set<String> adminRealms, int page, int itemsPerPage, List<OrderByClause> orderBy);\n-\n-    int count(Set<String> adminRealms);\n-\n-    User save(User user);\n-\n-    void delete(Long key);\n-\n-    void delete(User user);\n-\n-    User authFetch(Long key);\n-\n-    User authFetch(String username);\n-\n     List<Role> findDynRoleMemberships(User user);\n \n     List<Group> findDynGroupMemberships(User user);"},{"sha":"b62cb87a111fbb3f70a81242063d4bf103a77b68","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/VirAttrDAO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirAttrDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -21,15 +21,15 @@\n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n \n-public interface VirAttrDAO extends DAO<VirAttr, Long> {\n+public interface VirAttrDAO extends DAO<VirAttr<?>, Long> {\n \n-    <T extends VirAttr> T find(Long key, Class<T> reference);\n+    <T extends VirAttr<?>> T find(Long key, Class<T> reference);\n \n-    <T extends VirAttr> List<T> findAll(Class<T> reference);\n+    <T extends VirAttr<?>> List<T> findAll(Class<T> reference);\n \n-    <T extends VirAttr> T save(T virtualAttribute);\n+    <T extends VirAttr<?>> T save(T virtualAttribute);\n \n-    <T extends VirAttr> void delete(Long key, Class<T> reference);\n+    <T extends VirAttr<?>> void delete(Long key, Class<T> reference);\n \n-    <T extends VirAttr> void delete(T virAttr);\n+    <T extends VirAttr<?>> void delete(T virAttr);\n }"},{"sha":"fc6c7fa8eb2efa641f13b4adc3c2510d3e4d0914","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/VirSchemaDAO.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -19,19 +19,18 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n \n public interface VirSchemaDAO extends DAO<VirSchema, String> {\n \n-    <T extends VirSchema> T find(String key, Class<T> reference);\n+    VirSchema find(String name);\n \n-    <T extends VirSchema> List<T> findAll(Class<T> reference);\n+    List<VirSchema> findAll();\n \n-    <T extends VirAttr> List<T> findAttrs(VirSchema virSchema, Class<T> reference);\n+    <T extends VirAttr<?>> List<T> findAttrs(VirSchema virSchema, Class<T> reference);\n \n-    <T extends VirSchema> T save(T virSchema);\n+    VirSchema save(VirSchema derSchema);\n \n-    void delete(String key, AttributableUtils attributableUtil);\n+    void delete(String key);\n }"},{"sha":"8bc9669cf1c030dd6a9a3f63108e3ff53b4e4370","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AnyCond.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAnyCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAnyCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAnyCond.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -21,15 +21,15 @@\n /**\n  * Search condition to be applied when comparing bean field values.\n  */\n-public class SubjectCond extends AttributeCond {\n+public class AnyCond extends AttributeCond {\n \n     private static final long serialVersionUID = -1880319220462653955L;\n \n-    public SubjectCond() {\n+    public AnyCond() {\n         super();\n     }\n \n-    public SubjectCond(final Type conditionType) {\n+    public AnyCond(final Type conditionType) {\n         super(conditionType);\n     }\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/SubjectCond.java"},{"sha":"887210733f42881abbd879336fa729e388a58a71","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/MembershipCond.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FMembershipCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FMembershipCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FMembershipCond.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.dao.search;\n \n-public class GroupCond extends AbstractSearchCond {\n+public class MembershipCond extends AbstractSearchCond {\n \n     private static final long serialVersionUID = -728155256293925989L;\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/GroupCond.java"},{"sha":"ec26eb8f6bff324ee76fa367f21a41a834d4f88e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RelationshipCond.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRelationshipCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRelationshipCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRelationshipCond.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao.search;\n+\n+public class RelationshipCond extends AbstractSearchCond {\n+\n+    private static final long serialVersionUID = 6865985945516722103L;\n+\n+    private Long anyObjectKey;\n+\n+    public Long getAnyObjectKey() {\n+        return anyObjectKey;\n+    }\n+\n+    public void setAnyObjectKey(final Long anyObjectKey) {\n+        this.anyObjectKey = anyObjectKey;\n+    }\n+\n+    @Override\n+    public final boolean isValid() {\n+        return anyObjectKey != null;\n+    }\n+}"},{"sha":"d942591c1ce272abd9da00ed53ce37da9c90262f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/SearchCond.java","status":"modified","additions":46,"deletions":20,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -35,11 +35,13 @@ public enum Type {\n \n     private Type type;\n \n-    private SubjectCond subjectCond;\n+    private AnyCond anyCond;\n \n     private AttributeCond attributeCond;\n \n-    private GroupCond groupCond;\n+    private RelationshipCond relationshipCond;\n+\n+    private MembershipCond membershipCond;\n \n     private RoleCond roleCond;\n \n@@ -53,20 +55,29 @@ public static SearchCond getLeafCond(final AttributeCond attributeCond) {\n         SearchCond nodeCond = new SearchCond();\n \n         nodeCond.type = Type.LEAF;\n-        if (attributeCond instanceof SubjectCond) {\n-            nodeCond.subjectCond = (SubjectCond) attributeCond;\n+        if (attributeCond instanceof AnyCond) {\n+            nodeCond.anyCond = (AnyCond) attributeCond;\n         } else {\n             nodeCond.attributeCond = attributeCond;\n         }\n \n         return nodeCond;\n     }\n \n-    public static SearchCond getLeafCond(final GroupCond groupCond) {\n+    public static SearchCond getLeafCond(final RelationshipCond relationshipCond) {\n+        SearchCond nodeCond = new SearchCond();\n+\n+        nodeCond.type = Type.LEAF;\n+        nodeCond.relationshipCond = relationshipCond;\n+\n+        return nodeCond;\n+    }\n+\n+    public static SearchCond getLeafCond(final MembershipCond membershipCond) {\n         SearchCond nodeCond = new SearchCond();\n \n         nodeCond.type = Type.LEAF;\n-        nodeCond.groupCond = groupCond;\n+        nodeCond.membershipCond = membershipCond;\n \n         return nodeCond;\n     }\n@@ -95,8 +106,14 @@ public static SearchCond getNotLeafCond(final AttributeCond attributeCond) {\n         return nodeCond;\n     }\n \n-    public static SearchCond getNotLeafCond(final GroupCond groupCond) {\n-        SearchCond nodeCond = getLeafCond(groupCond);\n+    public static SearchCond getNotLeafCond(final RelationshipCond relationshipCond) {\n+        SearchCond nodeCond = getLeafCond(relationshipCond);\n+        nodeCond.type = Type.NOT_LEAF;\n+        return nodeCond;\n+    }\n+\n+    public static SearchCond getNotLeafCond(final MembershipCond membershipCond) {\n+        SearchCond nodeCond = getLeafCond(membershipCond);\n         nodeCond.type = Type.NOT_LEAF;\n         return nodeCond;\n     }\n@@ -156,12 +173,12 @@ public static SearchCond getOrCond(final List<SearchCond> conditions) {\n         }\n     }\n \n-    public SubjectCond getSubjectCond() {\n-        return subjectCond;\n+    public AnyCond getAnyCond() {\n+        return anyCond;\n     }\n \n-    public void setSubjectCond(final SubjectCond subjectCond) {\n-        this.subjectCond = subjectCond;\n+    public void setAnyCond(final AnyCond anyCond) {\n+        this.anyCond = anyCond;\n     }\n \n     public AttributeCond getAttributeCond() {\n@@ -172,12 +189,20 @@ public void setAttributeCond(final AttributeCond attributeCond) {\n         this.attributeCond = attributeCond;\n     }\n \n-    public GroupCond getGroupCond() {\n-        return groupCond;\n+    public RelationshipCond getRelationshipCond() {\n+        return relationshipCond;\n+    }\n+\n+    public void setRelationshipCond(final RelationshipCond relationshipCond) {\n+        this.relationshipCond = relationshipCond;\n+    }\n+\n+    public MembershipCond getMembershipCond() {\n+        return membershipCond;\n     }\n \n-    public void setGroupCond(final GroupCond groupCond) {\n-        this.groupCond = groupCond;\n+    public void setMembershipCond(final MembershipCond membershipCond) {\n+        this.membershipCond = membershipCond;\n     }\n \n     public RoleCond getRoleCond() {\n@@ -231,11 +256,12 @@ public boolean isValid() {\n         switch (type) {\n             case LEAF:\n             case NOT_LEAF:\n-                isValid = (subjectCond != null || attributeCond != null\n-                        || groupCond != null || roleCond != null || resourceCond != null)\n-                        && (subjectCond == null || subjectCond.isValid())\n+                isValid = (anyCond != null || attributeCond != null\n+                        || relationshipCond != null || membershipCond != null\n+                        || roleCond != null || resourceCond != null)\n+                        && (anyCond == null || anyCond.isValid())\n                         && (attributeCond == null || attributeCond.isValid())\n-                        && (groupCond == null || groupCond.isValid())\n+                        && (membershipCond == null || membershipCond.isValid())\n                         && (roleCond == null || roleCond.isValid())\n                         && (resourceCond == null || resourceCond.isValid());\n                 break;"},{"sha":"7a743c2ced7edbfc9b3369228d4257c1e4a345c3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AccountPolicy.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAccountPolicy.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import java.util.Set;\n \n public interface AccountPolicy extends Policy {"},{"sha":"12bf9b6f064506ffc2fcff74e0dc24b2f5eec577","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Any.java","status":"renamed","additions":39,"deletions":7,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,31 +18,63 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import java.util.List;\n \n-public interface Attributable<P extends PlainAttr, D extends DerAttr, V extends VirAttr> extends AnnotatedEntity<Long> {\n+public interface Any<P extends PlainAttr<?>, D extends DerAttr<?>, V extends VirAttr<?>> extends AnnotatedEntity<Long> {\n \n-    boolean addPlainAttr(P attr);\n+    AnyType getType();\n \n-    boolean addDerAttr(D derAttr);\n+    void setType(AnyType type);\n \n-    boolean addVirAttr(V virAttr);\n+    Realm getRealm();\n \n-    boolean removePlainAttr(P attr);\n+    void setRealm(Realm realm);\n \n-    boolean removeDerAttr(D derAttr);\n+    String getStatus();\n \n-    boolean removeVirAttr(V virAttr);\n+    void setStatus(String status);\n+\n+    String getWorkflowId();\n+\n+    void setWorkflowId(String workflowId);\n+\n+    boolean add(P attr);\n+\n+    boolean remove(P attr);\n \n     P getPlainAttr(String plainSchemaName);\n \n     List<? extends P> getPlainAttrs();\n \n+    boolean add(D derAttr);\n+\n+    boolean remove(D derAttr);\n+\n     D getDerAttr(String derSchemaName);\n \n     List<? extends D> getDerAttrs();\n \n+    boolean add(V virAttr);\n+\n+    boolean remove(V virAttr);\n+\n     V getVirAttr(String virSchemaName);\n \n     List<? extends V> getVirAttrs();\n+\n+    boolean add(ExternalResource resource);\n+\n+    boolean remove(ExternalResource resource);\n+\n+    List<String> getResourceNames();\n+\n+    List<? extends ExternalResource> getResources();\n+\n+    boolean add(AnyTypeClass auxClass);\n+\n+    boolean remove(AnyTypeClass auxClass);\n+\n+    List<? extends AnyTypeClass> getAuxClasses();\n+\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Attributable.java"},{"sha":"2f1684be99d7d48d4d706730c8fb336d62ee0aa7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyAbout.java","status":"renamed","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyAbout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyAbout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyAbout.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -16,14 +16,19 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.group;\n+package org.apache.syncope.core.persistence.api.entity;\n \n-import org.apache.syncope.core.persistence.api.entity.Mapping;\n-import org.apache.syncope.core.persistence.api.entity.MappingItem;\n+public interface AnyAbout extends Entity<Long> {\n \n-public interface GMappingItem extends MappingItem {\n+    Notification getNotification();\n \n-    @Override\n-    Mapping<GMappingItem> getMapping();\n+    void setNotification(Notification notification);\n \n+    AnyType getAnyType();\n+\n+    void setAnyType(AnyType anyType);\n+\n+    String get();\n+\n+    void set(String filter);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/GMappingItem.java"},{"sha":"c23897cb3b926d26eb6198bb1c7cc30621e7b7ad","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyType.java","status":"renamed","additions":8,"deletions":13,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyType.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -19,24 +19,19 @@\n package org.apache.syncope.core.persistence.api.entity;\n \n import java.util.List;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n-public interface Mapping<T extends MappingItem> extends Entity<Long> {\n+public interface AnyType extends Entity<String> {\n \n-    T getAccountIdItem();\n+    void setKey(String key);\n \n-    String getAccountLink();\n+    AnyTypeKind getKind();\n \n-    List<? extends T> getItems();\n+    void setKind(AnyTypeKind kind);\n \n-    ExternalResource getResource();\n+    boolean add(AnyTypeClass anyTypeClass);\n \n-    boolean addItem(T item);\n+    boolean remove(AnyTypeClass anyTypeClass);\n \n-    boolean removeItem(T item);\n-\n-    void setAccountIdItem(T item);\n-\n-    void setAccountLink(String accountLink);\n-\n-    void setResource(ExternalResource resource);\n+    List<? extends AnyTypeClass> getClasses();\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Mapping.java"},{"sha":"fdd00bbaa8b275efbb55b0de28c35fe0ac5b70a4","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyTypeClass.java","status":"renamed","additions":16,"deletions":8,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyTypeClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyTypeClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyTypeClass.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,19 +18,27 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-import java.util.Set;\n+import java.util.List;\n \n-public interface Subject<N extends PlainAttr, D extends DerAttr, V extends VirAttr> extends Attributable<N, D, V> {\n+public interface AnyTypeClass extends Entity<String> {\n \n-    Realm getRealm();\n+    void setKey(String key);\n \n-    void setRealm(Realm realm);\n+    boolean add(PlainSchema schema);\n \n-    boolean addResource(ExternalResource resource);\n+    boolean remove(PlainSchema schema);\n \n-    boolean removeResource(ExternalResource resource);\n+    List<? extends PlainSchema> getPlainSchemas();\n \n-    Set<String> getResourceNames();\n+    boolean add(DerSchema schema);\n \n-    Set<? extends ExternalResource> getResources();\n+    boolean remove(DerSchema schema);\n+\n+    List<? extends DerSchema> getDerSchemas();\n+\n+    boolean add(VirSchema schema);\n+\n+    boolean remove(VirSchema schema);\n+\n+    List<? extends VirSchema> getVirSchemas();\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Subject.java"},{"sha":"836f0e313c7bbe01a4f28492ab0871a3e461bbe9","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtils.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+\n+public interface AnyUtils {\n+\n+    AnyTypeKind getAnyTypeKind();\n+\n+    <T extends Any<?, ?, ?>> Class<T> anyClass();\n+\n+    <T extends PlainAttr<?>> Class<T> plainAttrClass();\n+\n+    <T extends PlainAttr<?>> T newPlainAttr();\n+\n+    <T extends PlainAttrValue> Class<T> plainAttrValueClass();\n+\n+    <T extends PlainAttrValue> T newPlainAttrValue();\n+\n+    <T extends PlainAttrValue> Class<T> plainAttrUniqueValueClass();\n+\n+    <T extends PlainAttrValue> T newPlainAttrUniqueValue();\n+\n+    <T extends DerAttr<?>> Class<T> derAttrClass();\n+\n+    <T extends DerAttr<?>> T newDerAttr();\n+\n+    <T extends VirAttr<?>> Class<T> virAttrClass();\n+\n+    <T extends VirAttr<?>> T newVirAttr();\n+\n+    MappingItem getConnObjectKeyItem(Provision provision);\n+\n+    String getConnObjectLink(Provision provision);\n+\n+    List<MappingItem> getMappingItems(Provision provision, MappingPurpose purpose);\n+\n+    IntMappingType plainIntMappingType();\n+\n+    IntMappingType derIntMappingType();\n+\n+    IntMappingType virIntMappingType();\n+\n+    <T extends AnyTO> T newAnyTO();\n+}"},{"sha":"2e2a49e4a3b3eb04920ef764951559faf8868b96","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtilsFactory.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtilsFactory.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+\n+public interface AnyUtilsFactory {\n+\n+    AnyUtils getInstance(AnyTypeKind anyTypeKind);\n+\n+    AnyUtils getInstance(String anyTypeKind);\n+\n+    AnyUtils getInstance(Any<?, ?, ?> any);\n+}"},{"sha":"2be01e96394a83bd545a5981d7b5636f702f07f9","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Attr.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-public interface Attr<S extends Schema> extends Entity<Long> {\n+public interface Attr<S extends Schema, O extends Any<?, ?, ?>> extends Entity<Long> {\n \n-    Attributable<?, ?, ?> getOwner();\n+    O getOwner();\n \n-    void setOwner(Attributable<?, ?, ?> owner);\n+    void setOwner(O owner);\n \n     S getSchema();\n "},{"sha":"953960422cf4d7f880470ad6e2c71e7737a93e2a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AttributableUtils.java","status":"removed","additions":0,"deletions":89,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttributableUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttributableUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttributableUtils.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,89 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity;\n-\n-import java.util.List;\n-import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n-import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n-import org.apache.syncope.common.lib.types.AttributableType;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n-import org.apache.syncope.common.lib.types.MappingPurpose;\n-\n-public interface AttributableUtils {\n-\n-    AttributableType getType();\n-\n-    <T extends Attributable<?, ?, ?>> Class<T> attributableClass();\n-\n-    <T extends PlainSchema> Class<T> plainSchemaClass();\n-\n-    <T extends PlainSchema> T newPlainSchema();\n-\n-    <T extends PlainAttr> Class<T> plainAttrClass();\n-\n-    <T extends PlainAttr> T newPlainAttr();\n-\n-    <T extends PlainAttrValue> Class<T> plainAttrValueClass();\n-\n-    <T extends PlainAttrValue> T newPlainAttrValue();\n-\n-    <T extends AttrTemplate<PlainSchema>> Class<T> plainAttrTemplateClass();\n-\n-    <T extends PlainAttrValue> Class<T> plainAttrUniqueValueClass();\n-\n-    <T extends PlainAttrValue> T newPlainAttrUniqueValue();\n-\n-    <T extends DerSchema> Class<T> derSchemaClass();\n-\n-    <T extends DerSchema> T newDerSchema();\n-\n-    <T extends DerAttr> Class<T> derAttrClass();\n-\n-    <T extends DerAttr> T newDerAttr();\n-\n-    <T extends AttrTemplate<DerSchema>> Class<T> derAttrTemplateClass();\n-\n-    <T extends VirSchema> Class<T> virSchemaClass();\n-\n-    <T extends VirSchema> T newVirSchema();\n-\n-    <T extends VirAttr> Class<T> virAttrClass();\n-\n-    <T extends VirAttr> T newVirAttr();\n-\n-    <T extends AttrTemplate<VirSchema>> Class<T> virAttrTemplateClass();\n-\n-    <T extends MappingItem> T getAccountIdItem(ExternalResource resource);\n-\n-    String getAccountLink(ExternalResource resource);\n-\n-    <T extends MappingItem> List<T> getMappingItems(ExternalResource resource, MappingPurpose purpose);\n-\n-    IntMappingType plainIntMappingType();\n-\n-    IntMappingType derIntMappingType();\n-\n-    IntMappingType virIntMappingType();\n-\n-    <T extends MappingItem> Class<T> mappingItemClass();\n-\n-    <T extends AbstractAttributableTO> T newAttributableTO();\n-\n-    <T extends AbstractSubjectTO> T newSubjectTO();\n-}"},{"sha":"eb665ea9fb4c6249ec47f5c49cbd11541e777cfe","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/ConnInstance.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FConnInstance.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import java.util.List;\n import java.util.Set;\n import org.apache.syncope.common.lib.types.ConnConfProperty;"},{"sha":"9eb3b7ad210fce93292b449690d94942d37d4486","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/DerAttr.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDerAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,7 +20,7 @@\n \n import java.util.Collection;\n \n-public interface DerAttr extends Attr<DerSchema> {\n+public interface DerAttr<O extends Any<?, ?, ?>> extends Attr<DerSchema, O> {\n \n-    String getValue(Collection<? extends PlainAttr> attrs);\n+    String getValue(Collection<? extends PlainAttr<?>> attrs);\n }"},{"sha":"b01fe70b3b80ac9e7cde3f2ee327b93dc612d4e0","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/DynGroupMembership.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynGroupMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynGroupMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynGroupMembership.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,9 +20,9 @@\n \n import org.apache.syncope.core.persistence.api.entity.group.Group;\n \n-public interface DynGroupMembership extends DynMembership {\n+public interface DynGroupMembership<A extends Any<?, ?, ?>> extends DynMembership<A> {\n \n     Group getGroup();\n \n-    void setGroup(Group role);\n+    void setGroup(Group group);\n }"},{"sha":"ba0a62f26aff0087edc6926c65c7f909866e6bfe","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/DynMembership.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynMembership.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -19,17 +19,16 @@\n package org.apache.syncope.core.persistence.api.entity;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n \n-public interface DynMembership extends Entity<Long> {\n+public interface DynMembership<A extends Any<?, ?, ?>> extends Entity<Long> {\n \n     String getFIQLCond();\n \n     void setFIQLCond(String fiql);\n \n-    boolean addUser(User user);\n+    boolean add(A any);\n \n-    boolean removeUser(User user);\n+    boolean remove(A any);\n \n-    List<? extends User> getUsers();\n+    List<? extends A> getMembers();\n }"},{"sha":"8c040abf1b1e08161fad84a949fc56c01ac18bfe","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Membership.java","status":"renamed","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FMembership.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,13 +20,6 @@\n \n import org.apache.syncope.core.persistence.api.entity.group.Group;\n \n-public interface AttrTemplate<S extends Schema> extends Entity<Long> {\n+public interface Membership<L extends Any<?, ?, ?>> extends Relationship<L, Group> {\n \n-    Group getOwner();\n-\n-    void setOwner(Group group);\n-\n-    S getSchema();\n-\n-    void setSchema(S schema);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AttrTemplate.java"},{"sha":"dbf85525b0125fa911b5b1f935ddd96dccf1b7fd","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Notification.java","status":"modified","additions":23,"deletions":22,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FNotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FNotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FNotification.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -26,49 +26,50 @@ public interface Notification extends Entity<Long> {\n \n     List<String> getEvents();\n \n-    String getRecipientAttrName();\n-\n-    IntMappingType getRecipientAttrType();\n-\n-    String getRecipients();\n-\n-    String getGroupAbout();\n+    boolean isSelfAsRecipient();\n \n-    String getSender();\n+    void setSelfAsRecipient(boolean selfAsRecipient);\n \n     List<String> getStaticRecipients();\n \n-    String getSubject();\n-\n-    String getTemplate();\n+    String getRecipientAttrName();\n \n-    TraceLevel getTraceLevel();\n+    void setRecipientAttrName(String recipientAttrName);\n \n-    String getUserAbout();\n+    IntMappingType getRecipientAttrType();\n \n-    boolean isActive();\n+    void setRecipientAttrType(IntMappingType recipientAttrType);\n \n-    boolean isSelfAsRecipient();\n+    String getRecipients();\n \n-    void setActive(boolean active);\n+    void setRecipients(String recipients);\n \n-    void setRecipientAttrName(String recipientAttrName);\n+    boolean add(AnyAbout about);\n \n-    void setRecipientAttrType(IntMappingType recipientAttrType);\n+    boolean remove(AnyAbout about);\n \n-    void setRecipients(String recipients);\n+    AnyAbout getAbout(AnyType anyType);\n \n-    void setGroupAbout(String groupAbout);\n+    List<? extends AnyAbout> getAbouts();\n \n-    void setSelfAsRecipient(boolean selfAsRecipient);\n+    String getSender();\n \n     void setSender(String sender);\n \n+    String getSubject();\n+\n     void setSubject(String subject);\n \n+    String getTemplate();\n+\n     void setTemplate(String template);\n \n+    TraceLevel getTraceLevel();\n+\n     void setTraceLevel(TraceLevel traceLevel);\n \n-    void setUserAbout(String userAbout);\n+    boolean isActive();\n+\n+    void setActive(boolean active);\n+\n }"},{"sha":"b14985172e358174413c6cad2b604a3d88166229","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/PlainAttr.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,17 +20,20 @@\n \n import java.util.List;\n \n-public interface PlainAttr extends Attr<PlainSchema> {\n+public interface PlainAttr<O extends Any<?, ?, ?>> extends Attr<PlainSchema, O> {\n \n-    void addValue(String value, AttributableUtils attributableUtil);\n+    void add(String value, AnyUtils anyUtils);\n \n-    boolean removeValue(PlainAttrValue attrValue);\n+    void add(String value, PlainAttrValue attrValue);\n+\n+    boolean remove(PlainAttrValue attrValue);\n \n     PlainAttrUniqueValue getUniqueValue();\n \n+    void setUniqueValue(PlainAttrUniqueValue uniqueValue);\n+\n     List<? extends PlainAttrValue> getValues();\n \n     List<String> getValuesAsStrings();\n \n-    void setUniqueValue(PlainAttrUniqueValue uniqueValue);\n }"},{"sha":"e1f43b60c02e140384b4179bced6d09399f3d585","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/PlainAttrValue.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttrValue.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -23,7 +23,7 @@\n \n public interface PlainAttrValue extends Entity<Long> {\n \n-    PlainAttr getAttr();\n+    PlainAttr<?> getAttr();\n \n     byte[] getBinaryValue();\n \n@@ -45,7 +45,7 @@ public interface PlainAttrValue extends Entity<Long> {\n \n     void parseValue(PlainSchema schema, String value);\n \n-    void setAttr(PlainAttr attr);\n+    void setAttr(PlainAttr<?> attr);\n \n     void setBinaryValue(byte[] binaryValue);\n "},{"sha":"df4d7ffad80082416d8108c0f999fefb182dd514","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Relationship.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRelationship.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRelationship.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRelationship.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+public interface Relationship<L extends Any<?, ?, ?>, R extends Any<?, ?, ?>> extends Entity<Long> {\n+\n+    L getLeftEnd();\n+\n+    void setLeftEnd(L leftEnd);\n+\n+    R getRightEnd();\n+\n+    void setRightEnd(R rightEnd);\n+}"},{"sha":"432efb1b4faeade78aa3a612505684b68545b22f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Role.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n+import org.apache.syncope.core.persistence.api.entity.user.DynRoleMembership;\n import java.util.List;\n import java.util.Set;\n "},{"sha":"7761d933df50cf9990a7a5e4dc17e5cee2c828dd","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/VirAttr.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FVirAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,11 +20,11 @@\n \n import java.util.List;\n \n-public interface VirAttr extends Attr<VirSchema> {\n+public interface VirAttr<O extends Any<?, ?, ?>> extends Attr<VirSchema, O> {\n \n     List<String> getValues();\n \n-    boolean addValue(String value);\n+    boolean add(String value);\n \n-    boolean removeValue(String value);\n+    boolean remove(String value);\n }"},{"sha":"ca5854a4affbfc81cfc4354276d8cbcc7898aa24","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/anyobject/ADerAttr.java","status":"renamed","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FADerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FADerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FADerAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -16,10 +16,9 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.group;\n+package org.apache.syncope.core.persistence.api.entity.anyobject;\n \n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-\n-public interface GPlainSchema extends PlainSchema {\n+import org.apache.syncope.core.persistence.api.entity.DerAttr;\n \n+public interface ADerAttr extends DerAttr<AnyObject> {\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/GPlainSchema.java"},{"sha":"1e09d24831bb35c0ef4870be81ee81b136ff4d8e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/anyobject/ADynGroupMembership.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FADynGroupMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FADynGroupMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FADynGroupMembership.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.anyobject;\n+\n+import org.apache.syncope.core.persistence.api.entity.DynGroupMembership;\n+\n+public interface ADynGroupMembership extends DynGroupMembership<AnyObject> {\n+\n+}"},{"sha":"7da0739766992c15807b1c72e1844a42e8e62753","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/anyobject/AMembership.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAMembership.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -16,10 +16,10 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.conf;\n+package org.apache.syncope.core.persistence.api.entity.anyobject;\n \n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.Membership;\n \n-public interface CPlainSchema extends PlainSchema {\n+public interface AMembership extends Membership<AnyObject> {\n \n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/conf/CPlainSchema.java"},{"sha":"46d2297a7b96bb26e7aba890d857a49b78462ae8","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/anyobject/APlainAttr.java","status":"renamed","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAPlainAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -16,19 +16,17 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.membership;\n+package org.apache.syncope.core.persistence.api.entity.anyobject;\n \n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n \n-public interface MVirAttr extends VirAttr {\n+public interface APlainAttr extends PlainAttr<AnyObject> {\n \n     @Override\n-    Membership getOwner();\n+    List<? extends APlainAttrValue> getValues();\n \n     @Override\n-    MVirSchema getSchema();\n+    APlainAttrUniqueValue getUniqueValue();\n \n-    MVirAttrTemplate getTemplate();\n-\n-    void setTemplate(MVirAttrTemplate template);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/membership/MVirAttr.java"},{"sha":"1978aaad856b952f0f916572ef9cdc49b457c24e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/anyobject/APlainAttrUniqueValue.java","status":"renamed","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAPlainAttrUniqueValue.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -16,16 +16,13 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.membership;\n+package org.apache.syncope.core.persistence.api.entity.anyobject;\n \n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n \n-public interface MPlainAttrUniqueValue extends PlainAttrUniqueValue {\n+public interface APlainAttrUniqueValue extends PlainAttrUniqueValue {\n \n     @Override\n-    MPlainAttr getAttr();\n-\n-    @Override\n-    MPlainSchema getSchema();\n+    APlainAttr getAttr();\n \n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/membership/MPlainAttrUniqueValue.java"},{"sha":"cbbc1d5373c6d65a9633657f6523a768543910cc","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/anyobject/APlainAttrValue.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAPlainAttrValue.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -16,13 +16,13 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.membership;\n+package org.apache.syncope.core.persistence.api.entity.anyobject;\n \n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n \n-public interface MPlainAttrValue extends PlainAttrValue {\n+public interface APlainAttrValue extends PlainAttrValue {\n \n     @Override\n-    MPlainAttr getAttr();\n+    APlainAttr getAttr();\n \n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/membership/MPlainAttrValue.java"},{"sha":"3c50e4a71d590be8bc2a4cce191c182af8d73d65","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/anyobject/ARelationship.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FARelationship.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FARelationship.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FARelationship.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -16,10 +16,10 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.group;\n+package org.apache.syncope.core.persistence.api.entity.anyobject;\n \n-import org.apache.syncope.core.persistence.api.entity.AttrTemplate;\n+import org.apache.syncope.core.persistence.api.entity.Relationship;\n \n-public interface GDerAttrTemplate extends AttrTemplate<GDerSchema> {\n+public interface ARelationship extends Relationship<AnyObject, AnyObject> {\n \n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/GDerAttrTemplate.java"},{"sha":"be86c594e3051b96efea5e077519b8ad965b26b3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/anyobject/AVirAttr.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAVirAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -16,10 +16,10 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.group;\n+package org.apache.syncope.core.persistence.api.entity.anyobject;\n \n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.VirAttr;\n \n-public interface GDerSchema extends DerSchema {\n+public interface AVirAttr extends VirAttr<AnyObject> {\n \n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/GDerSchema.java"},{"sha":"ddb047e923e68d36cd9a028f94019985191689f2","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/anyobject/AnyObject.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.anyobject;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+\n+public interface AnyObject extends Any<APlainAttr, ADerAttr, AVirAttr> {\n+\n+    boolean add(ARelationship relationship);\n+\n+    boolean remove(ARelationship relationship);\n+\n+    ARelationship getRelationship(AnyObject rightEnd);\n+\n+    List<? extends ARelationship> getRelationships();\n+\n+    boolean add(AMembership membership);\n+\n+    boolean remove(AMembership membership);\n+\n+    AMembership getMembership(Long groupKey);\n+\n+    List<? extends AMembership> getMemberships();\n+\n+}"},{"sha":"a205b32407cf2aa49da81e215336ef4e699eaa8e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/conf/CPlainAttr.java","status":"modified","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fconf%2FCPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fconf%2FCPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fconf%2FCPlainAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -21,14 +21,7 @@\n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n \n-public interface CPlainAttr extends PlainAttr {\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    Conf getOwner();\n-\n-    @Override\n-    CPlainSchema getSchema();\n+public interface CPlainAttr extends PlainAttr<Conf> {\n \n     @Override\n     List<? extends CPlainAttrValue> getValues();"},{"sha":"9b82e00c8432c1ba4bb5205996a72cacdec3c1fd","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/conf/CPlainAttrUniqueValue.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fconf%2FCPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fconf%2FCPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fconf%2FCPlainAttrUniqueValue.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -25,7 +25,4 @@ public interface CPlainAttrUniqueValue extends PlainAttrUniqueValue {\n     @Override\n     CPlainAttr getAttr();\n \n-    @Override\n-    CPlainSchema getSchema();\n-\n }"},{"sha":"2b6e42478dfecac71fcf174ed85457d9f59b2a26","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/conf/Conf.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fconf%2FConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fconf%2FConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fconf%2FConf.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -19,19 +19,19 @@\n package org.apache.syncope.core.persistence.api.entity.conf;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.Attributable;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n \n-public interface Conf extends Attributable<CPlainAttr, DerAttr, VirAttr> {\n+public interface Conf extends Any<CPlainAttr, DerAttr<?>, VirAttr<?>> {\n \n     void setKey(Long key);\n \n     @Override\n-    boolean addPlainAttr(CPlainAttr attr);\n+    boolean add(CPlainAttr attr);\n \n     @Override\n-    boolean removePlainAttr(CPlainAttr attr);\n+    boolean remove(CPlainAttr attr);\n \n     @Override\n     List<? extends CPlainAttr> getPlainAttrs();"},{"sha":"04d1f852aee6623e5e6a2892157632f3e448abf8","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/GDerAttr.java","status":"modified","additions":1,"deletions":10,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGDerAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,15 +20,6 @@\n \n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n \n-public interface GDerAttr extends DerAttr {\n+public interface GDerAttr extends DerAttr<Group> {\n \n-    @Override\n-    Group getOwner();\n-\n-    @Override\n-    GDerSchema getSchema();\n-\n-    GDerAttrTemplate getTemplate();\n-\n-    void setTemplate(GDerAttrTemplate template);\n }"},{"sha":"b8105f32ef17ccf91f1bec617fc4f7de7f4ee0ac","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/GMapping.java","status":"removed","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGMapping.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,25 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity.group;\n-\n-import org.apache.syncope.core.persistence.api.entity.Mapping;\n-\n-public interface GMapping extends Mapping<GMappingItem> {\n-    \n-}"},{"sha":"05bad88383b987ed1ec9886231d80c1dc9a8c0d1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/GPlainAttr.java","status":"modified","additions":1,"deletions":11,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGPlainAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -21,17 +21,7 @@\n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n \n-public interface GPlainAttr extends PlainAttr {\n-\n-    @Override\n-    Group getOwner();\n-\n-    @Override\n-    GPlainSchema getSchema();\n-\n-    GPlainAttrTemplate getTemplate();\n-\n-    void setTemplate(GPlainAttrTemplate template);\n+public interface GPlainAttr extends PlainAttr<Group> {\n \n     @Override\n     List<? extends GPlainAttrValue> getValues();"},{"sha":"c619c729d9dfd5db517b1dc602ce0277c4e40730","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/GPlainAttrTemplate.java","status":"removed","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGPlainAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGPlainAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGPlainAttrTemplate.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,25 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity.group;\n-\n-import org.apache.syncope.core.persistence.api.entity.AttrTemplate;\n-\n-public interface GPlainAttrTemplate extends AttrTemplate<GPlainSchema> {\n-\n-}"},{"sha":"6fa9abb8d841d0a1b38a79c2e7cb6a910ecd100d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/GPlainAttrUniqueValue.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGPlainAttrUniqueValue.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -25,7 +25,4 @@ public interface GPlainAttrUniqueValue extends PlainAttrUniqueValue {\n     @Override\n     GPlainAttr getAttr();\n \n-    @Override\n-    GPlainSchema getSchema();\n-\n }"},{"sha":"184779488b49777251a2cfe6abd6e05a09e5eba3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/GVirAttr.java","status":"modified","additions":1,"deletions":10,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGVirAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,15 +20,6 @@\n \n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n \n-public interface GVirAttr extends VirAttr {\n+public interface GVirAttr extends VirAttr<Group> {\n \n-    @Override\n-    Group getOwner();\n-\n-    @Override\n-    GVirSchema getSchema();\n-\n-    GVirAttrTemplate getTemplate();\n-\n-    void setTemplate(GVirAttrTemplate template);\n }"},{"sha":"478a255847d65c40dc4a0a22d863d886f3947e9f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/GVirAttrTemplate.java","status":"removed","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGVirAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGVirAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGVirAttrTemplate.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,25 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity.group;\n-\n-import org.apache.syncope.core.persistence.api.entity.AttrTemplate;\n-\n-public interface GVirAttrTemplate extends AttrTemplate<GVirSchema> {\n-\n-}"},{"sha":"cb6008e2a006392bb70eb5be009f4ebfe4fb3316","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/Group.java","status":"modified","additions":30,"deletions":24,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -19,69 +19,75 @@\n package org.apache.syncope.core.persistence.api.entity.group;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.AttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.DynGroupMembership;\n-import org.apache.syncope.core.persistence.api.entity.Schema;\n-import org.apache.syncope.core.persistence.api.entity.Subject;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n+import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n \n-public interface Group extends Subject<GPlainAttr, GDerAttr, GVirAttr> {\n+public interface Group extends Any<GPlainAttr, GDerAttr, GVirAttr> {\n \n     String getName();\n \n-    <T extends AttrTemplate<K>, K extends Schema> T getAttrTemplate(Class<T> reference, String schemaName);\n-\n-    <T extends AttrTemplate<K>, K extends Schema> List<K> getAttrTemplateSchemas(Class<T> reference);\n-\n-    <T extends AttrTemplate<K>, K extends Schema> List<T> getAttrTemplates(Class<T> reference);\n+    void setName(String name);\n \n     Group getGroupOwner();\n \n     User getUserOwner();\n \n-    void setName(String name);\n-\n     void setGroupOwner(Group groupOwner);\n \n     void setUserOwner(User userOwner);\n \n     @Override\n-    boolean addPlainAttr(GPlainAttr attr);\n+    boolean add(GPlainAttr attr);\n \n     @Override\n-    boolean removePlainAttr(GPlainAttr attr);\n+    boolean remove(GPlainAttr attr);\n \n     @Override\n-    boolean addDerAttr(GDerAttr attr);\n+    GPlainAttr getPlainAttr(String plainSchemaName);\n \n     @Override\n-    boolean removeDerAttr(GDerAttr derAttr);\n+    List<? extends GPlainAttr> getPlainAttrs();\n \n     @Override\n-    boolean addVirAttr(GVirAttr attr);\n+    boolean add(GDerAttr attr);\n \n     @Override\n-    boolean removeVirAttr(GVirAttr virAttr);\n+    boolean remove(GDerAttr derAttr);\n \n     @Override\n-    GPlainAttr getPlainAttr(String plainSchemaName);\n+    GDerAttr getDerAttr(String derSchemaName);\n \n     @Override\n-    List<? extends GPlainAttr> getPlainAttrs();\n+    List<? extends GDerAttr> getDerAttrs();\n \n     @Override\n-    GDerAttr getDerAttr(String derSchemaName);\n+    boolean add(GVirAttr attr);\n \n     @Override\n-    List<? extends GDerAttr> getDerAttrs();\n+    boolean remove(GVirAttr virAttr);\n \n     @Override\n     GVirAttr getVirAttr(String virSchemaName);\n \n     @Override\n     List<? extends GVirAttr> getVirAttrs();\n \n-    DynGroupMembership getDynMembership();\n+    ADynGroupMembership getADynMembership();\n+\n+    void setADynMembership(ADynGroupMembership aDynMembership);\n+\n+    UDynGroupMembership getUDynMembership();\n+\n+    void setUDynMembership(UDynGroupMembership uDynMembership);\n+\n+    boolean add(TypeExtension typeExtension);\n+\n+    boolean remove(TypeExtension typeExtension);\n+\n+    TypeExtension getTypeExtension(AnyType anyType);\n \n-    void setDynMembership(DynGroupMembership dynMembership);\n+    List<? extends TypeExtension> getTypeExtensions();\n }"},{"sha":"a4261463c8ca8ba4a6bc640edf1b0c70fa1add84","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/TypeExtension.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FTypeExtension.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FTypeExtension.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FTypeExtension.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.group;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+\n+public interface TypeExtension extends Entity<Long> {\n+\n+    Group getGroup();\n+\n+    void setGroup(Group group);\n+\n+    AnyType getAnyType();\n+\n+    void setAnyType(AnyType anyType);\n+\n+    boolean add(AnyTypeClass anyTypeClass);\n+\n+    boolean remove(AnyTypeClass anyTypeClass);\n+\n+    List<? extends AnyTypeClass> getAuxClasses();\n+}"},{"sha":"0fe5ac11beec6b6823d798558a934bb7b01f4688","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/membership/MDerAttrTemplate.java","status":"removed","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMDerAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMDerAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMDerAttrTemplate.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,25 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity.membership;\n-\n-import org.apache.syncope.core.persistence.api.entity.AttrTemplate;\n-\n-public interface MDerAttrTemplate extends AttrTemplate<MDerSchema> {\n-\n-}"},{"sha":"7a4e5157fb47a04d18c0a17604e1216563a0d5d8","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/membership/MPlainAttrTemplate.java","status":"removed","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMPlainAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMPlainAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMPlainAttrTemplate.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,25 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity.membership;\n-\n-import org.apache.syncope.core.persistence.api.entity.AttrTemplate;\n-\n-public interface MPlainAttrTemplate extends AttrTemplate<MPlainSchema> {\n-\n-}"},{"sha":"ed94e2870d081b1025d491e292e11ef1c23e3422","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/membership/MPlainSchema.java","status":"removed","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMPlainSchema.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,25 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity.membership;\n-\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-\n-public interface MPlainSchema extends PlainSchema {\n-\n-}"},{"sha":"0969974b318580a4c28e84cf3646a16afeae17be","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/membership/MVirAttrTemplate.java","status":"removed","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMVirAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMVirAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMVirAttrTemplate.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,25 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity.membership;\n-\n-import org.apache.syncope.core.persistence.api.entity.AttrTemplate;\n-\n-public interface MVirAttrTemplate extends AttrTemplate<MVirSchema> {\n-\n-}"},{"sha":"e13f7bb40809349b6989c9da29c8c95a6da5c1eb","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/membership/MVirSchema.java","status":"removed","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMVirSchema.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,25 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity.membership;\n-\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-\n-public interface MVirSchema extends VirSchema {\n-\n-}"},{"sha":"da545e40f4db88ab76496a1e1e7130bd342a3433","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/ExternalResource.java","status":"renamed","additions":42,"deletions":47,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -16,96 +16,91 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity;\n+package org.apache.syncope.core.persistence.api.entity.resource;\n \n-import org.apache.syncope.core.persistence.api.entity.user.UMapping;\n-import org.apache.syncope.core.persistence.api.entity.group.GMapping;\n import java.util.List;\n import java.util.Set;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.PropagationMode;\n import org.apache.syncope.common.lib.types.TraceLevel;\n-import org.identityconnectors.framework.common.objects.SyncToken;\n+import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.AnnotatedEntity;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n \n public interface ExternalResource extends AnnotatedEntity<String> {\n \n-    AccountPolicy getAccountPolicy();\n-\n-    PasswordPolicy getPasswordPolicy();\n-\n-    SyncPolicy getSyncPolicy();\n-\n-    Set<ConnConfProperty> getConnInstanceConfiguration();\n+    void setKey(String name);\n \n     ConnInstance getConnector();\n \n-    TraceLevel getCreateTraceLevel();\n-\n-    TraceLevel getUpdateTraceLevel();\n+    void setConnector(ConnInstance connector);\n \n-    TraceLevel getDeleteTraceLevel();\n+    Set<ConnConfProperty> getConnInstanceConfiguration();\n \n-    TraceLevel getSyncTraceLevel();\n+    void setConnInstanceConfiguration(Set<ConnConfProperty> properties);\n \n-    List<String> getPropagationActionsClassNames();\n+    AccountPolicy getAccountPolicy();\n \n-    PropagationMode getPropagationMode();\n+    void setAccountPolicy(AccountPolicy accountPolicy);\n \n-    Integer getPropagationPriority();\n+    PasswordPolicy getPasswordPolicy();\n \n-    UMapping getUmapping();\n+    void setPasswordPolicy(PasswordPolicy passwordPolicy);\n \n-    GMapping getGmapping();\n+    SyncPolicy getSyncPolicy();\n \n-    SyncToken getUsyncToken();\n+    void setSyncPolicy(SyncPolicy syncPolicy);\n \n-    String getSerializedUSyncToken();\n+    TraceLevel getCreateTraceLevel();\n \n-    SyncToken getRsyncToken();\n+    void setCreateTraceLevel(TraceLevel createTraceLevel);\n \n-    String getSerializedRSyncToken();\n+    TraceLevel getUpdateTraceLevel();\n \n-    boolean isEnforceMandatoryCondition();\n+    void setUpdateTraceLevel(TraceLevel updateTraceLevel);\n \n-    boolean isPropagationPrimary();\n+    TraceLevel getDeleteTraceLevel();\n \n-    boolean isRandomPwdIfNotProvided();\n+    void setDeleteTraceLevel(TraceLevel deleteTraceLevel);\n \n-    void setKey(String name);\n+    TraceLevel getSyncTraceLevel();\n \n-    void setAccountPolicy(AccountPolicy accountPolicy);\n+    void setSyncTraceLevel(TraceLevel syncTraceLevel);\n \n-    void setPasswordPolicy(PasswordPolicy passwordPolicy);\n+    List<String> getPropagationActionsClassNames();\n \n-    void setSyncPolicy(SyncPolicy syncPolicy);\n+    PropagationMode getPropagationMode();\n \n-    void setConnInstanceConfiguration(Set<ConnConfProperty> properties);\n+    void setPropagationMode(PropagationMode propagationMode);\n \n-    void setConnector(ConnInstance connector);\n+    Integer getPropagationPriority();\n \n-    void setCreateTraceLevel(TraceLevel createTraceLevel);\n+    void setPropagationPriority(Integer priority);\n \n-    void setUpdateTraceLevel(TraceLevel updateTraceLevel);\n+    boolean isEnforceMandatoryCondition();\n \n-    void setDeleteTraceLevel(TraceLevel deleteTraceLevel);\n+    void setEnforceMandatoryCondition(boolean enforce);\n \n-    void setSyncTraceLevel(TraceLevel syncTraceLevel);\n+    boolean isPropagationPrimary();\n \n-    void setPropagationMode(PropagationMode propagationMode);\n+    void setPropagationPrimary(boolean condition);\n \n-    void setPropagationPriority(Integer priority);\n+    boolean isRandomPwdIfNotProvided();\n \n-    void setUmapping(UMapping umapping);\n+    void setRandomPwdIfNotProvided(boolean condition);\n \n-    void setGmapping(GMapping gmapping);\n+    boolean add(Provision provision);\n \n-    void setEnforceMandatoryCondition(boolean enforce);\n+    boolean remove(Provision provision);\n \n-    void setPropagationPrimary(boolean condition);\n+    Provision getProvision(AnyType anyType);\n \n-    void setRandomPwdIfNotProvided(boolean condition);\n+    Provision getProvision(ObjectClass objectClass);\n \n-    void setUsyncToken(SyncToken syncToken);\n+    List<? extends Provision> getProvisions();\n \n-    void setRsyncToken(SyncToken syncToken);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/ExternalResource.java"},{"sha":"ea9f1658e52ca5470190d030137b9f7788fe2004","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/Mapping.java","status":"renamed","additions":14,"deletions":13,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMapping.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -16,27 +16,28 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.membership;\n+package org.apache.syncope.core.persistence.api.entity.resource;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n \n-public interface MPlainAttr extends PlainAttr {\n+public interface Mapping extends Entity<Long> {\n \n-    @Override\n-    Membership getOwner();\n+    Provision getProvision();\n \n-    @Override\n-    MPlainSchema getSchema();\n+    void setProvision(Provision provision);\n \n-    MPlainAttrTemplate getTemplate();\n+    boolean add(MappingItem item);\n \n-    void setTemplate(MPlainAttrTemplate template);\n+    boolean remove(MappingItem item);\n \n-    @Override\n-    List<? extends MPlainAttrValue> getValues();\n+    MappingItem getConnObjectKeyItem();\n \n-    @Override\n-    MPlainAttrUniqueValue getUniqueValue();\n+    void setConnObjectKeyItem(MappingItem item);\n \n+    String getConnObjectLink();\n+\n+    void setConnObjectLink(String connObjectLink);\n+\n+    List<? extends MappingItem> getItems();\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/membership/MPlainAttr.java"},{"sha":"1a5380fb8341aab4cdd23030a39913978f7d04c4","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/MappingItem.java","status":"renamed","additions":17,"deletions":15,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMappingItem.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -16,42 +16,44 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity;\n+package org.apache.syncope.core.persistence.api.entity.resource;\n \n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n \n public interface MappingItem extends Entity<Long> {\n \n+    Mapping getMapping();\n+\n+    void setMapping(Mapping mapping);\n+\n     String getExtAttrName();\n \n+    void setExtAttrName(String extAttrName);\n+\n     String getIntAttrName();\n \n+    void setIntAttrName(String intAttrName);\n+\n     IntMappingType getIntMappingType();\n \n+    void setIntMappingType(IntMappingType intMappingType);\n+\n     String getMandatoryCondition();\n \n-    Mapping<?> getMapping();\n+    void setMandatoryCondition(String condition);\n \n     MappingPurpose getPurpose();\n \n-    boolean isAccountid();\n-\n-    boolean isPassword();\n-\n-    void setAccountid(boolean accountid);\n-\n-    void setExtAttrName(String extAttrName);\n-\n-    void setIntAttrName(String intAttrName);\n+    void setPurpose(MappingPurpose purpose);\n \n-    void setIntMappingType(IntMappingType intMappingType);\n+    boolean isConnObjectKey();\n \n-    void setMandatoryCondition(String condition);\n+    void setConnObjectKey(boolean connObjectKey);\n \n-    void setMapping(Mapping<?> mapping);\n+    boolean isPassword();\n \n     void setPassword(boolean password);\n \n-    void setPurpose(MappingPurpose purpose);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/MappingItem.java"},{"sha":"f1b33fe69d1f4a91badb29f35c7ec52a7db6c9ae","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/Provision.java","status":"renamed","additions":23,"deletions":7,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FProvision.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FProvision.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FProvision.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -16,18 +16,34 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity;\n+package org.apache.syncope.core.persistence.api.entity.resource;\n \n-import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.SyncToken;\n \n-public interface AttributableUtilsFactory {\n+public interface Provision extends Entity<Long> {\n \n-    AttributableUtils getInstance(AttributableType type);\n+    ExternalResource getResource();\n \n-    AttributableUtils getInstance(String attributableType);\n+    void setResource(ExternalResource resource);\n \n-    AttributableUtils getInstance(ObjectClass objectClass);\n+    AnyType getAnyType();\n \n-    AttributableUtils getInstance(Attributable<?, ?, ?> attributable);\n+    void setAnyType(AnyType anyType);\n+\n+    ObjectClass getObjectClass();\n+\n+    void setObjectClass(ObjectClass objectClass);\n+\n+    SyncToken getSyncToken();\n+\n+    String getSerializedSyncToken();\n+\n+    void setSyncToken(SyncToken syncToken);\n+\n+    Mapping getMapping();\n+\n+    void setMapping(Mapping mapping);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AttributableUtilsFactory.java"},{"sha":"8ae4472fd837b629cc1bd5ea850102e1dd7e4930","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/AnyFilter.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FAnyFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FAnyFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FAnyFilter.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.task;\n+\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+\n+public interface AnyFilter extends Entity<Long> {\n+\n+    PushTask getPushTask();\n+\n+    void setPushTask(PushTask pushTask);\n+\n+    AnyType getAnyType();\n+\n+    void setAnyType(AnyType anyType);\n+\n+    String get();\n+\n+    void set(String filter);\n+}"},{"sha":"fa43dc30557b94908b1122e2d8fb9910ff2beb61","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/AnyTemplate.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FAnyTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FAnyTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FAnyTemplate.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.task;\n+\n+import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+\n+public interface AnyTemplate extends Entity<Long> {\n+\n+    SyncTask getSyncTask();\n+\n+    void setSyncTask(SyncTask syncTask);\n+\n+    AnyType getAnyType();\n+\n+    void setAnyType(AnyType anyType);\n+\n+    AnyTO get();\n+\n+    void set(AnyTO template);\n+}"},{"sha":"7629074b04b219604084b25f50e7dc6ea6aaa760","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/PropagationTask.java","status":"modified","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -19,47 +19,47 @@\n package org.apache.syncope.core.persistence.api.entity.task;\n \n import java.util.Set;\n-import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PropagationMode;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.identityconnectors.framework.common.objects.Attribute;\n \n public interface PropagationTask extends Task {\n \n-    String getAccountId();\n+    String getConnObjectKey();\n \n-    Set<Attribute> getAttributes();\n+    void setConnObjectKey(String connObjectKey);\n \n-    String getObjectClassName();\n+    String getOldConnObjectKey();\n \n-    String getOldAccountId();\n+    void setOldConnObjectKey(String oldConnObjectKey);\n \n-    PropagationMode getPropagationMode();\n+    Set<Attribute> getAttributes();\n \n-    ResourceOperation getPropagationOperation();\n+    void setAttributes(Set<Attribute> attributes);\n \n-    ExternalResource getResource();\n+    String getObjectClassName();\n \n-    Long getSubjectKey();\n+    void setObjectClassName(String objectClassName);\n \n-    AttributableType getSubjectType();\n+    PropagationMode getPropagationMode();\n \n-    void setAccountId(String accountId);\n+    void setPropagationMode(PropagationMode propagationMode);\n \n-    void setAttributes(Set<Attribute> attributes);\n+    ResourceOperation getPropagationOperation();\n \n-    void setObjectClassName(String objectClassName);\n+    void setPropagationOperation(ResourceOperation operation);\n \n-    void setOldAccountId(String oldAccountId);\n+    Long getAnyKey();\n \n-    void setPropagationMode(PropagationMode propagationMode);\n+    void setAnyKey(Long anyKey);\n \n-    void setPropagationOperation(ResourceOperation operation);\n+    AnyTypeKind getAnyTypeKind();\n \n-    void setResource(ExternalResource resource);\n+    void setAnyTypeKind(AnyTypeKind anyTypeKind);\n \n-    void setSubjectKey(Long subjectKey);\n+    ExternalResource getResource();\n \n-    void setSubjectType(AttributableType subjectType);\n+    void setResource(ExternalResource resource);\n }"},{"sha":"e1b9a5ebc82a530a294ed8f50bf9da5c3913ed93","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/ProvisioningTask.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FProvisioningTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FProvisioningTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FProvisioningTask.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -21,38 +21,38 @@\n import java.util.List;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface ProvisioningTask extends SchedTask {\n \n+    ExternalResource getResource();\n+\n+    void setResource(ExternalResource resource);\n+\n     List<String> getActionsClassNames();\n \n     MatchingRule getMatchingRule();\n \n-    ExternalResource getResource();\n+    void setMatchingRule(MatchingRule matchigRule);\n \n     UnmatchingRule getUnmatchingRule();\n \n-    boolean isPerformCreate();\n-\n-    boolean isPerformDelete();\n-\n-    boolean isPerformUpdate();\n-\n-    boolean isSyncStatus();\n+    void setUnmatchingRule(UnmatchingRule unmatchigRule);\n \n-    void setMatchingRule(MatchingRule matchigRule);\n+    boolean isPerformCreate();\n \n     void setPerformCreate(boolean performCreate);\n \n+    boolean isPerformDelete();\n+\n     void setPerformDelete(boolean performDelete);\n \n+    boolean isPerformUpdate();\n+\n     void setPerformUpdate(boolean performUpdate);\n \n-    void setResource(ExternalResource resource);\n+    boolean isSyncStatus();\n \n     void setSyncStatus(boolean syncStatus);\n \n-    void setUnmatchingRule(UnmatchingRule unmatchigRule);\n-\n }"},{"sha":"1de32091f1d6c1f9dc743494241e6b378c5c55a1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/PushTask.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPushTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPushTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPushTask.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,13 +18,16 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.task;\n \n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+\n public interface PushTask extends ProvisioningTask {\n \n-    String getGroupFilter();\n+    boolean add(AnyFilter filter);\n \n-    String getUserFilter();\n+    boolean remove(AnyFilter filter);\n \n-    void setGroupFilter(String filter);\n+    AnyFilter getFilter(AnyType anyType);\n \n-    void setUserFilter(String filter);\n+    List<? extends AnyFilter> getFilters();\n }"},{"sha":"7550ed8e396221a7fa17a46ba132a322ae98e17e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/SyncTask.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSyncTask.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,25 +18,25 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.task;\n \n-import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n \n public interface SyncTask extends ProvisioningTask {\n \n     Realm getDestinatioRealm();\n \n-    GroupTO getGroupTemplate();\n-\n-    UserTO getUserTemplate();\n+    void setDestinationRealm(Realm destinationRealm);\n \n     boolean isFullReconciliation();\n \n     void setFullReconciliation(boolean condition);\n \n-    void setGroupTemplate(GroupTO groupTemplate);\n+    boolean add(AnyTemplate template);\n \n-    void setUserTemplate(UserTO userTemplate);\n+    boolean remove(AnyTemplate template);\n \n-    void setDestinationRealm(Realm destinationRealm);\n+    AnyTemplate getTemplate(AnyType anyType);\n+\n+    List<? extends AnyTemplate> getTemplates();\n }"},{"sha":"5b253d87d4e9f8d71f2a7863d1e0c8ae4574c6b7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/DynRoleMembership.java","status":"renamed","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FDynRoleMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FDynRoleMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FDynRoleMembership.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -16,9 +16,12 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity;\n+package org.apache.syncope.core.persistence.api.entity.user;\n \n-public interface DynRoleMembership extends DynMembership {\n+import org.apache.syncope.core.persistence.api.entity.DynMembership;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n+\n+public interface DynRoleMembership extends DynMembership<User> {\n \n     Role getRole();\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/DynRoleMembership.java"},{"sha":"b3ebdecfc6ceabed4a4e04c01b864242dd079ce1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/UDerAttr.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUDerAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,12 +20,6 @@\n \n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n \n-public interface UDerAttr extends DerAttr {\n-\n-    @Override\n-    User getOwner();\n-\n-    @Override\n-    UDerSchema getSchema();\n+public interface UDerAttr extends DerAttr<User> {\n \n }"},{"sha":"efec3f17dc6a91f42bf0f73b8826539eaf055ffa","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/UDynGroupMembership.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUDynGroupMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUDynGroupMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUDynGroupMembership.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.user;\n \n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.DynGroupMembership;\n \n-public interface UVirSchema extends VirSchema {\n+public interface UDynGroupMembership extends DynGroupMembership<User> {\n \n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/UVirSchema.java"},{"sha":"7901a6e3d98b971b2dcfed58e9a642cee834c3a6","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/UDynMembership.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUDynMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUDynMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUDynMembership.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.user;\n \n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.DynMembership;\n \n-public interface UPlainSchema extends PlainSchema {\n+public interface UDynMembership extends DynMembership<User> {\n \n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/UPlainSchema.java"},{"sha":"a21aa0a440df269ed4496e975308b17682ed8812","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/UMappingItem.java","status":"removed","additions":0,"deletions":29,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUMappingItem.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,29 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity.user;\n-\n-import org.apache.syncope.core.persistence.api.entity.Mapping;\n-import org.apache.syncope.core.persistence.api.entity.MappingItem;\n-\n-public interface UMappingItem extends MappingItem {\n-\n-    @Override\n-    Mapping<UMappingItem> getMapping();\n-\n-}"},{"sha":"76f9ef61ce5a08a11403b8f48e442553a9daa8df","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/UMembership.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUMembership.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.user;\n \n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.Membership;\n \n-public interface UDerSchema extends DerSchema {\n+public interface UMembership extends Membership<User> {\n \n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/UDerSchema.java"},{"sha":"5c91acf16dc93cd9cb3a398272e32c6ac2f651f5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/UPlainAttr.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUPlainAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -21,13 +21,7 @@\n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n \n-public interface UPlainAttr extends PlainAttr {\n-\n-    @Override\n-    User getOwner();\n-\n-    @Override\n-    UPlainSchema getSchema();\n+public interface UPlainAttr extends PlainAttr<User> {\n \n     @Override\n     List<? extends UPlainAttrValue> getValues();"},{"sha":"71eb24e0e75d2f13621fdbe077a648e1ec9b148d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/UPlainAttrUniqueValue.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUPlainAttrUniqueValue.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -25,7 +25,4 @@ public interface UPlainAttrUniqueValue extends PlainAttrUniqueValue {\n     @Override\n     UPlainAttr getAttr();\n \n-    @Override\n-    UPlainSchema getSchema();\n-\n }"},{"sha":"2a4c97bc91323cd6a6376ea37bf69154bc31c262","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/URelationship.java","status":"renamed","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FURelationship.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FURelationship.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FURelationship.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,11 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.user;\n \n-import org.apache.syncope.core.persistence.api.entity.Mapping;\n+import org.apache.syncope.core.persistence.api.entity.Relationship;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n \n-public interface UMapping extends Mapping<UMappingItem> {\n+public interface URelationship extends Relationship<User, AnyObject> {\n \n-    UMappingItem getPasswordItem();\n-\n-    boolean setPasswordItem(UMappingItem item);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/UMapping.java"},{"sha":"bb3ab703e29a9fc4977ed731d13081eb6b45b554","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/UVirAttr.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUVirAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,12 +20,6 @@\n \n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n \n-public interface UVirAttr extends VirAttr {\n-\n-    @Override\n-    User getOwner();\n-\n-    @Override\n-    UVirSchema getSchema();\n+public interface UVirAttr extends VirAttr<User> {\n \n }"},{"sha":"d896984df4b1d2e2a359d8131170ee3642c81225","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/User.java","status":"modified","additions":61,"deletions":65,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,134 +18,130 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.user;\n \n-import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.Role;\n-import org.apache.syncope.core.persistence.api.entity.Subject;\n-import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n \n-public interface User extends Subject<UPlainAttr, UDerAttr, UVirAttr> {\n+public interface User extends Any<UPlainAttr, UDerAttr, UVirAttr> {\n \n-    boolean addRole(Role role);\n+    String getUsername();\n \n-    boolean addMembership(Membership membership);\n+    void setUsername(String username);\n \n-    boolean canDecodePassword();\n+    String getToken();\n \n-    boolean checkToken(String token);\n+    Date getTokenExpireTime();\n \n     void generateToken(int tokenLength, int tokenExpireTime);\n \n-    Date getChangePwdDate();\n-\n-    CipherAlgorithm getCipherAlgorithm();\n-\n-    String getClearPassword();\n-\n-    Integer getFailedLogins();\n-\n-    Date getLastLoginDate();\n-\n-    List<? extends Role> getRoles();\n-\n-    Membership getMembership(Long groupKey);\n-\n-    List<? extends Membership> getMemberships();\n-\n-    Collection<Long> getStaticGroupKeys();\n-\n-    String getPassword();\n-\n-    List<String> getPasswordHistory();\n-\n-    String getSecurityAnswer();\n+    void removeToken();\n \n-    SecurityQuestion getSecurityQuestion();\n+    boolean checkToken(String token);\n \n-    String getStatus();\n+    boolean hasTokenExpired();\n \n-    String getToken();\n+    Date getChangePwdDate();\n \n-    Date getTokenExpireTime();\n+    void setChangePwdDate(Date changePwdDate);\n \n-    String getUsername();\n+    CipherAlgorithm getCipherAlgorithm();\n \n-    String getWorkflowId();\n+    void setCipherAlgorithm(CipherAlgorithm cipherAlgorithm);\n \n-    boolean hasTokenExpired();\n+    boolean canDecodePassword();\n \n-    Boolean isSuspended();\n+    String getClearPassword();\n \n     void removeClearPassword();\n \n-    boolean removeRole(Role role);\n-\n-    boolean removeMembership(Membership membership);\n+    String getPassword();\n \n-    void removeToken();\n+    void setEncodedPassword(String password, CipherAlgorithm cipherAlgoritm);\n \n-    void setChangePwdDate(Date changePwdDate);\n+    void setPassword(String password, CipherAlgorithm cipherAlgoritm);\n \n-    void setCipherAlgorithm(CipherAlgorithm cipherAlgorithm);\n+    List<String> getPasswordHistory();\n \n-    void setEncodedPassword(String password, CipherAlgorithm cipherAlgoritm);\n+    boolean verifyPasswordHistory(String password, int size);\n \n-    void setFailedLogins(Integer failedLogins);\n+    SecurityQuestion getSecurityQuestion();\n \n-    void setLastLoginDate(Date lastLoginDate);\n+    void setSecurityQuestion(SecurityQuestion securityQuestion);\n \n-    void setPassword(String password, CipherAlgorithm cipherAlgoritm);\n+    String getSecurityAnswer();\n \n     void setSecurityAnswer(String securityAnswer);\n \n-    void setSecurityQuestion(SecurityQuestion securityQuestion);\n+    Integer getFailedLogins();\n \n-    void setStatus(String status);\n+    void setFailedLogins(Integer failedLogins);\n \n-    void setSuspended(Boolean suspended);\n+    Date getLastLoginDate();\n \n-    void setUsername(String username);\n+    void setLastLoginDate(Date lastLoginDate);\n \n-    void setWorkflowId(String workflowId);\n+    Boolean isSuspended();\n \n-    boolean verifyPasswordHistory(String password, int size);\n+    void setSuspended(Boolean suspended);\n \n     @Override\n-    boolean addPlainAttr(UPlainAttr attr);\n+    boolean add(UPlainAttr attr);\n \n     @Override\n-    boolean removePlainAttr(UPlainAttr attr);\n+    boolean remove(UPlainAttr attr);\n \n     @Override\n-    boolean addDerAttr(UDerAttr attr);\n+    UPlainAttr getPlainAttr(String plainSchemaName);\n \n     @Override\n-    boolean removeDerAttr(UDerAttr derAttr);\n+    List<? extends UPlainAttr> getPlainAttrs();\n \n     @Override\n-    boolean addVirAttr(UVirAttr attr);\n+    boolean add(UDerAttr attr);\n \n     @Override\n-    boolean removeVirAttr(UVirAttr virAttr);\n+    boolean remove(UDerAttr derAttr);\n \n     @Override\n-    UPlainAttr getPlainAttr(String plainSchemaName);\n+    UDerAttr getDerAttr(String derSchemaName);\n \n     @Override\n-    List<? extends UPlainAttr> getPlainAttrs();\n+    List<? extends UDerAttr> getDerAttrs();\n \n     @Override\n-    UDerAttr getDerAttr(String derSchemaName);\n+    boolean add(UVirAttr attr);\n \n     @Override\n-    List<? extends UDerAttr> getDerAttrs();\n+    boolean remove(UVirAttr virAttr);\n \n     @Override\n     UVirAttr getVirAttr(String virSchemaName);\n \n     @Override\n     List<? extends UVirAttr> getVirAttrs();\n \n+    boolean add(Role role);\n+\n+    boolean remove(Role role);\n+\n+    List<? extends Role> getRoles();\n+\n+    boolean add(URelationship relationship);\n+\n+    boolean remove(URelationship relationship);\n+\n+    URelationship getRelationship(AnyObject rightEnd);\n+\n+    List<? extends URelationship> getRelationships();\n+\n+    boolean add(UMembership membership);\n+\n+    boolean remove(UMembership membership);\n+\n+    UMembership getMembership(Long groupKey);\n+\n+    List<? extends UMembership> getMemberships();\n }"},{"sha":"ea13072f956d8d0e45b15f8cf9f9a7636b94bfa7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":13,"deletions":8,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -52,17 +52,21 @@\n import org.apache.syncope.core.misc.DataFormat;\n import org.apache.syncope.core.persistence.api.content.ContentExporter;\n import org.apache.syncope.core.persistence.jpa.entity.JPAReportExec;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMDerAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMPlainAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMPlainAttrUniqueValue;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMPlainAttrValue;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMVirAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMembership;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADerAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAVirAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPATaskExec;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDerAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.springframework.jdbc.datasource.DataSourceUtils;\n@@ -82,8 +86,9 @@ public class XMLContentExporter extends AbstractContentDealer implements Content\n                 \"QRTZ_\", \"LOGGING\", JPAReportExec.TABLE, JPATaskExec.TABLE,\n                 JPAUser.TABLE, JPAUPlainAttr.TABLE, JPAUPlainAttrValue.TABLE, JPAUPlainAttrUniqueValue.TABLE,\n                 JPAUDerAttr.TABLE, JPAUVirAttr.TABLE,\n-                JPAMembership.TABLE, JPAMPlainAttr.TABLE, JPAMPlainAttrValue.TABLE, JPAMPlainAttrUniqueValue.TABLE,\n-                JPAMDerAttr.TABLE, JPAMVirAttr.TABLE\n+                JPAAnyObject.TABLE, JPAAPlainAttr.TABLE, JPAAPlainAttrValue.TABLE, JPAAPlainAttrUniqueValue.TABLE,\n+                JPAADerAttr.TABLE, JPAAVirAttr.TABLE,\n+                JPAARelationship.TABLE, JPAAMembership.TABLE, JPAURelationship.TABLE, JPAUMembership.TABLE\n             }));\n \n     protected static final Set<String> TABLE_SUFFIXES_TO_BE_INCLUDED ="},{"sha":"344873782d40613fcc2a02b12bf82b0001fd333a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"renamed","additions":197,"deletions":124,"changes":321,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import static org.apache.syncope.core.persistence.jpa.dao.AbstractDAO.LOG;\n+\n import java.io.StringReader;\n import java.util.ArrayList;\n import java.util.Collections;\n@@ -26,33 +28,34 @@\n import java.util.List;\n import java.util.Set;\n import java.util.regex.Pattern;\n+import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import javax.persistence.TemporalType;\n import org.apache.commons.jexl2.parser.Parser;\n import org.apache.commons.jexl2.parser.ParserConstants;\n import org.apache.commons.jexl2.parser.Token;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.SubjectDAO;\n-import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n-import org.apache.syncope.core.persistence.api.dao.search.SubjectCond;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n-import org.apache.syncope.core.persistence.api.entity.DerAttr;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.Subject;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-abstract class AbstractSubjectDAO<P extends PlainAttr, D extends DerAttr, V extends VirAttr>\n-        extends AbstractDAO<Subject<P, D, V>, Long> implements SubjectDAO<P, D, V> {\n+public abstract class AbstractAnyDAO<A extends Any<?, ?, ?>> extends AbstractDAO<A, Long> implements AnyDAO<A> {\n \n     @Autowired\n     protected PlainSchemaDAO plainSchemaDAO;\n@@ -61,12 +64,125 @@\n     protected DerSchemaDAO derSchemaDAO;\n \n     @Autowired\n-    protected SubjectSearchDAO searchDAO;\n+    protected AnySearchDAO searchDAO;\n \n-    protected SearchCond getAllMatchingCond() {\n-        SubjectCond idCond = new SubjectCond(AttributeCond.Type.ISNOTNULL);\n-        idCond.setSchema(\"id\");\n-        return SearchCond.getLeafCond(idCond);\n+    protected AnyUtils anyUtils;\n+\n+    protected abstract AnyUtils init();\n+\n+    protected AnyUtils getAnyUtils() {\n+        synchronized (this) {\n+            if (anyUtils == null) {\n+                anyUtils = init();\n+            }\n+        }\n+        return anyUtils;\n+    }\n+\n+    protected abstract void securityChecks(A any);\n+\n+    @Override\n+    public A authFind(final Long key) {\n+        if (key == null) {\n+            throw new NotFoundException(\"Null key\");\n+        }\n+\n+        A any = find(key);\n+        if (any == null) {\n+            throw new NotFoundException(\"Any \" + key);\n+        }\n+\n+        securityChecks(any);\n+\n+        return any;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public A find(final Long key) {\n+        return (A) entityManager.find(getAnyUtils().anyClass(), key);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public A findByWorkflowId(final String workflowId) {\n+        Query query = entityManager.createQuery(\"SELECT e FROM \" + getAnyUtils().anyClass().getSimpleName()\n+                + \" e WHERE e.workflowId = :workflowId\", User.class);\n+        query.setParameter(\"workflowId\", workflowId);\n+\n+        A result = null;\n+        try {\n+            result = (A) query.getSingleResult();\n+        } catch (NoResultException e) {\n+            LOG.debug(\"No user found with workflow id {}\", workflowId, e);\n+        }\n+\n+        return result;\n+    }\n+\n+    private Query findByAttrValueQuery(final String entityName) {\n+        return entityManager.createQuery(\"SELECT e FROM \" + entityName + \" e\"\n+                + \" WHERE e.attribute.schema.name = :schemaName AND (e.stringValue IS NOT NULL\"\n+                + \" AND e.stringValue = :stringValue)\"\n+                + \" OR (e.booleanValue IS NOT NULL AND e.booleanValue = :booleanValue)\"\n+                + \" OR (e.dateValue IS NOT NULL AND e.dateValue = :dateValue)\"\n+                + \" OR (e.longValue IS NOT NULL AND e.longValue = :longValue)\"\n+                + \" OR (e.doubleValue IS NOT NULL AND e.doubleValue = :doubleValue)\");\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<A> findByAttrValue(final String schemaName, final PlainAttrValue attrValue) {\n+        PlainSchema schema = plainSchemaDAO.find(schemaName);\n+        if (schema == null) {\n+            LOG.error(\"Invalid schema name '{}'\", schemaName);\n+            return Collections.<A>emptyList();\n+        }\n+\n+        String entityName = schema.isUniqueConstraint()\n+                ? getAnyUtils().plainAttrUniqueValueClass().getName()\n+                : getAnyUtils().plainAttrValueClass().getName();\n+        Query query = findByAttrValueQuery(entityName);\n+        query.setParameter(\"schemaName\", schemaName);\n+        query.setParameter(\"stringValue\", attrValue.getStringValue());\n+        query.setParameter(\"booleanValue\", attrValue.getBooleanValue() == null\n+                ? null\n+                : ((AbstractPlainAttrValue) attrValue).getBooleanAsInteger(attrValue.getBooleanValue()));\n+        if (attrValue.getDateValue() == null) {\n+            query.setParameter(\"dateValue\", null);\n+        } else {\n+            query.setParameter(\"dateValue\", attrValue.getDateValue(), TemporalType.TIMESTAMP);\n+        }\n+        query.setParameter(\"longValue\", attrValue.getLongValue());\n+        query.setParameter(\"doubleValue\", attrValue.getDoubleValue());\n+\n+        List<A> result = new ArrayList<>();\n+        for (PlainAttrValue value : (List<PlainAttrValue>) query.getResultList()) {\n+            A any = (A) value.getAttr().getOwner();\n+            if (!result.contains(any)) {\n+                result.add(any);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public A findByAttrUniqueValue(final String schemaName, final PlainAttrValue attrUniqueValue) {\n+        PlainSchema schema = plainSchemaDAO.find(schemaName);\n+        if (schema == null) {\n+            LOG.error(\"Invalid schema name '{}'\", schemaName);\n+            return null;\n+        }\n+        if (!schema.isUniqueConstraint()) {\n+            LOG.error(\"This schema has not unique constraint: '{}'\", schemaName);\n+            return null;\n+        }\n+\n+        List<A> result = findByAttrValue(schemaName, attrUniqueValue);\n+        return result.isEmpty()\n+                ? null\n+                : result.iterator().next();\n     }\n \n     /**\n@@ -98,7 +214,7 @@ private List<String> split(final String attrValue, final List<String> literals)\n      * @param attrUtils USER / GROUP\n      * @return where clauses to use to build the query\n      */\n-    private Set<String> getWhereClause(final String expression, final String value, final AttributableUtils attrUtils) {\n+    private Set<String> getWhereClause(final String expression, final String value) {\n         final Parser parser = new Parser(new StringReader(expression));\n \n         // Schema names\n@@ -163,7 +279,7 @@ public int compare(final String t, final String t1) {\n             if (!used.contains(identifiers.get(i))) {\n \n                 // verify schema existence and get schema type\n-                PlainSchema schema = plainSchemaDAO.find(identifiers.get(i), attrUtils.plainSchemaClass());\n+                PlainSchema schema = plainSchemaDAO.find(identifiers.get(i));\n                 if (schema == null) {\n                     LOG.error(\"Invalid schema name '{}'\", identifiers.get(i));\n                     throw new IllegalArgumentException(\"Invalid schema name \" + identifiers.get(i));\n@@ -216,146 +332,103 @@ public int compare(final String t, final String t1) {\n         return clauses;\n     }\n \n-    protected abstract Subject<P, D, V> findInternal(Long key);\n-\n-    private Query findByAttrValueQuery(final String entityName) {\n-        return entityManager.createQuery(\"SELECT e FROM \" + entityName + \" e\"\n-                + \" WHERE e.attribute.schema.name = :schemaName AND (e.stringValue IS NOT NULL\"\n-                + \" AND e.stringValue = :stringValue)\"\n-                + \" OR (e.booleanValue IS NOT NULL AND e.booleanValue = :booleanValue)\"\n-                + \" OR (e.dateValue IS NOT NULL AND e.dateValue = :dateValue)\"\n-                + \" OR (e.longValue IS NOT NULL AND e.longValue = :longValue)\"\n-                + \" OR (e.doubleValue IS NOT NULL AND e.doubleValue = :doubleValue)\");\n-    }\n-\n     @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public List<? extends Subject<P, D, V>> findByAttrValue(\n-            final String schemaName, final PlainAttrValue attrValue, final AttributableUtils attrUtils) {\n-\n-        PlainSchema schema = plainSchemaDAO.find(schemaName, attrUtils.plainSchemaClass());\n+    public List<A> findByDerAttrValue(final String schemaName, final String value) {\n+        DerSchema schema = derSchemaDAO.find(schemaName);\n         if (schema == null) {\n             LOG.error(\"Invalid schema name '{}'\", schemaName);\n-            return Collections.<Subject<P, D, V>>emptyList();\n-        }\n-\n-        final String entityName = schema.isUniqueConstraint()\n-                ? attrUtils.plainAttrUniqueValueClass().getName()\n-                : attrUtils.plainAttrValueClass().getName();\n-\n-        Query query = findByAttrValueQuery(entityName);\n-\n-        query.setParameter(\"schemaName\", schemaName);\n-        query.setParameter(\"stringValue\", attrValue.getStringValue());\n-        query.setParameter(\"booleanValue\", attrValue.getBooleanValue() == null\n-                ? null\n-                : ((AbstractPlainAttrValue) attrValue).getBooleanAsInteger(attrValue.getBooleanValue()));\n-        if (attrValue.getDateValue() == null) {\n-            query.setParameter(\"dateValue\", null);\n-        } else {\n-            query.setParameter(\"dateValue\", attrValue.getDateValue(), TemporalType.TIMESTAMP);\n-        }\n-        query.setParameter(\"longValue\", attrValue.getLongValue());\n-        query.setParameter(\"doubleValue\", attrValue.getDoubleValue());\n-\n-        List<Subject<P, D, V>> result = new ArrayList<>();\n-        for (PlainAttrValue value : (List<PlainAttrValue>) query.getResultList()) {\n-            Subject<P, D, V> subject = (Subject<P, D, V>) value.getAttr().getOwner();\n-            if (!result.contains(subject)) {\n-                result.add(subject);\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public Subject<P, D, V> findByAttrUniqueValue(\n-            final String schemaName, final PlainAttrValue attrUniqueValue, final AttributableUtils attrUtils) {\n-\n-        PlainSchema schema = plainSchemaDAO.find(schemaName, attrUtils.plainSchemaClass());\n-        if (schema == null) {\n-            LOG.error(\"Invalid schema name '{}'\", schemaName);\n-            return null;\n-        }\n-        if (!schema.isUniqueConstraint()) {\n-            LOG.error(\"This schema has not unique constraint: '{}'\", schemaName);\n-            return null;\n-        }\n-\n-        List<? extends Subject<P, D, V>> result = findByAttrValue(schemaName, attrUniqueValue, attrUtils);\n-        return result.isEmpty()\n-                ? null\n-                : result.iterator().next();\n-    }\n-\n-    /**\n-     * Find users / groups by derived attribute value. This method could fail if one or more string literals contained\n-     * into the derived attribute value provided derive from identifier (schema name) replacement. When you are going to\n-     * specify a derived attribute expression you must be quite sure that string literals used to build the expression\n-     * cannot be found into the attribute values used to replace attribute schema names used as identifiers.\n-     *\n-     * @param schemaName derived schema name\n-     * @param value derived attribute value\n-     * @param attrUtils AttributableUtil\n-     * @return list of users / groups\n-     */\n-    @Override\n-    public List<? extends Subject<P, D, V>> findByDerAttrValue(\n-            final String schemaName, final String value, final AttributableUtils attrUtils) {\n-\n-        DerSchema schema = derSchemaDAO.find(schemaName, attrUtils.derSchemaClass());\n-        if (schema == null) {\n-            LOG.error(\"Invalid schema name '{}'\", schemaName);\n-            return Collections.<Subject<P, D, V>>emptyList();\n+            return Collections.<A>emptyList();\n         }\n \n         // query string\n-        final StringBuilder querystring = new StringBuilder();\n+        StringBuilder querystring = new StringBuilder();\n \n         boolean subquery = false;\n-        for (String clause : getWhereClause(schema.getExpression(), value, attrUtils)) {\n+        for (String clause : getWhereClause(schema.getExpression(), value)) {\n             if (querystring.length() > 0) {\n                 subquery = true;\n                 querystring.append(\" AND a.owner_id IN ( \");\n             }\n \n             querystring.append(\"SELECT a.owner_id \").\n-                    append(\"FROM \").append(attrUtils.plainAttrClass().getSimpleName().substring(3)).append(\" a, \").\n-                    append(attrUtils.plainAttrValueClass().getSimpleName().substring(3)).append(\" v, \").\n-                    append(attrUtils.plainSchemaClass().getSimpleName().substring(3)).append(\" s \").\n+                    append(\"FROM \").append(getAnyUtils().plainAttrClass().getSimpleName().substring(3)).append(\" a, \").\n+                    append(getAnyUtils().plainAttrValueClass().getSimpleName().substring(3)).append(\" v, \").\n+                    append(PlainSchema.class.getSimpleName()).append(\" s \").\n                     append(\"WHERE \").append(clause);\n \n             if (subquery) {\n                 querystring.append(')');\n             }\n         }\n \n-        LOG.debug(\"Execute query {}\", querystring);\n-\n-        final Query query = entityManager.createNativeQuery(querystring.toString());\n+        Query query = entityManager.createNativeQuery(querystring.toString());\n \n-        final List<Subject<P, D, V>> result = new ArrayList<>();\n-        for (Object userId : query.getResultList()) {\n-            Subject<P, D, V> subject = findInternal(Long.parseLong(userId.toString()));\n-            if (!result.contains(subject)) {\n-                result.add(subject);\n+        List<A> result = new ArrayList<>();\n+        for (Object anyKey : query.getResultList()) {\n+            A any = find(Long.parseLong(anyKey.toString()));\n+            if (!result.contains(any)) {\n+                result.add(any);\n             }\n         }\n \n         return result;\n     }\n \n-    @Override\n     @SuppressWarnings(\"unchecked\")\n-    public List<? extends Subject<P, D, V>> findByResource(\n-            final ExternalResource resource, final AttributableUtils attrUtils) {\n-\n+    @Override\n+    public List<A> findByResource(final ExternalResource resource) {\n         Query query = entityManager.createQuery(\n-                \"SELECT e FROM \" + attrUtils.attributableClass().getSimpleName() + \" e \"\n+                \"SELECT e FROM \" + getAnyUtils().anyClass().getSimpleName() + \" e \"\n                 + \"WHERE :resource MEMBER OF e.resources\");\n         query.setParameter(\"resource\", resource);\n \n         return query.getResultList();\n     }\n+\n+    @Override\n+    public final List<A> findAll(final Set<String> adminRealms,\n+            final int page, final int itemsPerPage) {\n+\n+        return findAll(adminRealms, page, itemsPerPage, Collections.<OrderByClause>emptyList());\n+    }\n+\n+    private SearchCond getAllMatchingCond() {\n+        AnyCond idCond = new AnyCond(AttributeCond.Type.ISNOTNULL);\n+        idCond.setSchema(\"id\");\n+        return SearchCond.getLeafCond(idCond);\n+    }\n+\n+    @Override\n+    public List<A> findAll(final Set<String> adminRealms,\n+            final int page, final int itemsPerPage, final List<OrderByClause> orderBy) {\n+\n+        return searchDAO.search(adminRealms, getAllMatchingCond(), page, itemsPerPage, orderBy,\n+                getAnyUtils().getAnyTypeKind());\n+    }\n+\n+    @Override\n+    public final int count(final Set<String> adminRealms) {\n+        return searchDAO.count(adminRealms, getAllMatchingCond(), getAnyUtils().getAnyTypeKind());\n+    }\n+\n+    @Override\n+    public A save(final A any) {\n+        A merged = entityManager.merge(any);\n+        for (VirAttr<?> virAttr : merged.getVirAttrs()) {\n+            virAttr.getValues().clear();\n+            virAttr.getValues().addAll(any.getVirAttr(virAttr.getSchema().getKey()).getValues());\n+        }\n+\n+        return merged;\n+    }\n+\n+    @Override\n+    public void delete(final Long key) {\n+        A any = find(key);\n+        if (any == null) {\n+            return;\n+        }\n+\n+        delete(any);\n+    }\n }","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractSubjectDAO.java"},{"sha":"a4ff529f802d68d3f768023e318c5239fa038bae","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractDAO.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -37,9 +37,6 @@\n @Configurable\n public abstract class AbstractDAO<E extends Entity<KEY>, KEY> implements DAO<E, KEY> {\n \n-    /**\n-     * Logger.\n-     */\n     protected static final Logger LOG = LoggerFactory.getLogger(DAO.class);\n \n     private static final String CACHE_STORE_MODE = \"javax.persistence.cache.storeMode\";"},{"sha":"fd9901961f8223dc4d1c9c3042e09b3487082d08","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"added","additions":149,"deletions":0,"changes":149,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.persistence.TypedQuery;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n+import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Propagation;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Repository\n+public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObjectDAO {\n+\n+    @Override\n+    protected AnyUtils init() {\n+        return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.ANY_OBJECT);\n+    }\n+\n+    @Override\n+    protected void securityChecks(final AnyObject anyObject) {\n+        Set<String> authRealms = AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_READ);\n+        boolean authorized = CollectionUtils.exists(authRealms, new Predicate<String>() {\n+\n+            @Override\n+            public boolean evaluate(final String realm) {\n+                return anyObject.getRealm().getFullPath().startsWith(realm);\n+            }\n+        });\n+        if (authRealms == null || authRealms.isEmpty() || !authorized) {\n+            throw new UnauthorizedException(AnyTypeKind.ANY_OBJECT, anyObject.getKey());\n+        }\n+    }\n+\n+    @Override\n+    public List<AnyObject> findByAnyType(final String anyTypeName) {\n+        TypedQuery<AnyObject> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAAnyObject.class.getSimpleName() + \" e WHERE e.type.name=:name\", AnyObject.class);\n+        query.setParameter(\"name\", anyTypeName);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public void delete(final AnyObject any) {\n+        for (Group group : findDynGroupMemberships(any)) {\n+            group.getADynMembership().remove(any);\n+        }\n+\n+        entityManager.remove(any);\n+    }\n+\n+    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n+    @Override\n+    public List<Group> findDynGroupMemberships(final AnyObject anyObject) {\n+        TypedQuery<Group> query = entityManager.createQuery(\n+                \"SELECT e.group FROM \" + JPAADynGroupMembership.class.getSimpleName()\n+                + \" e WHERE :anyObject MEMBER OF e.members\", Group.class);\n+        query.setParameter(\"anyObject\", anyObject);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n+    @Override\n+    public Collection<Group> findAllGroups(final AnyObject anyObject) {\n+        return CollectionUtils.union(\n+                CollectionUtils.collect(anyObject.getMemberships(), new Transformer<AMembership, Group>() {\n+\n+                    @Override\n+                    public Group transform(final AMembership input) {\n+                        return input.getRightEnd();\n+                    }\n+                }, new ArrayList<Group>()),\n+                findDynGroupMemberships(anyObject));\n+    }\n+\n+    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n+    @Override\n+    public Collection<Long> findAllGroupKeys(final AnyObject anyObject) {\n+        return CollectionUtils.collect(findAllGroups(anyObject), new Transformer<Group, Long>() {\n+\n+            @Override\n+            public Long transform(final Group input) {\n+                return input.getKey();\n+            }\n+        });\n+    }\n+\n+    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n+    @Override\n+    public Collection<ExternalResource> findAllResources(final AnyObject anyObject) {\n+        Set<ExternalResource> result = new HashSet<>();\n+        result.addAll(anyObject.getResources());\n+        for (Group group : findAllGroups(anyObject)) {\n+            result.addAll(group.getResources());\n+        }\n+\n+        return result;\n+    }\n+\n+    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n+    @Override\n+    public Collection<String> findAllResourceNames(final AnyObject anyObject) {\n+        return CollectionUtils.collect(findAllResources(anyObject), new Transformer<ExternalResource, String>() {\n+\n+            @Override\n+            public String transform(final ExternalResource input) {\n+                return input.getKey();\n+            }\n+        });\n+    }\n+\n+}"},{"sha":"d91b9482ed5d13490854eeb220c70bcec8a155b7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"renamed","additions":139,"deletions":106,"changes":245,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -37,39 +37,49 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n-import org.apache.syncope.common.lib.types.SubjectType;\n import org.apache.syncope.core.misc.RealmUtils;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n-import org.apache.syncope.core.persistence.api.dao.search.GroupCond;\n+import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.ResourceCond;\n import org.apache.syncope.core.persistence.api.dao.search.RoleCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n-import org.apache.syncope.core.persistence.api.dao.search.SubjectCond;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n+import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n+import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.Subject;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.util.ReflectionUtils;\n \n @Repository\n-public class JPASubjectSearchDAO extends AbstractDAO<Subject<?, ?, ?>, Long> implements SubjectSearchDAO {\n+public class JPAAnySearchDAO extends AbstractDAO<Any<?, ?, ?>, Long> implements AnySearchDAO {\n \n-    private static final String EMPTY_ATTR_QUERY = \"SELECT subject_id FROM user_search_attr WHERE 1=2\";\n+    protected static final Logger LOG = LoggerFactory.getLogger(AnySearchDAO.class);\n+\n+    private static final String EMPTY_ATTR_QUERY = \"SELECT any_id FROM user_search_attr WHERE 1=2\";\n \n     @Autowired\n     private RealmDAO realmDAO;\n \n+    @Autowired\n+    private AnyObjectDAO anyObjectDAO;\n+\n     @Autowired\n     private UserDAO userDAO;\n \n@@ -80,7 +90,7 @@ public class JPASubjectSearchDAO extends AbstractDAO<Subject<?, ?, ?>, Long> imp\n     private PlainSchemaDAO schemaDAO;\n \n     @Autowired\n-    private AttributableUtilsFactory attrUtilsFactory;\n+    private AnyUtilsFactory anyUtilsFactory;\n \n     private String getAdminRealmsFilter(final Set<String> adminRealms, final SearchSupport svs) {\n         Set<Long> realmKeys = new HashSet<>();\n@@ -100,7 +110,7 @@ public Long transform(final Realm descendant) {\n         }\n \n         StringBuilder adminRealmFilter = new StringBuilder().\n-                append(\"SELECT subject_id FROM \").append(svs.field().name).\n+                append(\"SELECT any_id FROM \").append(svs.field().name).\n                 append(\" WHERE realm_id IN (SELECT id AS realm_id FROM Realm\");\n \n         boolean firstRealm = true;\n@@ -120,52 +130,47 @@ public Long transform(final Realm descendant) {\n     }\n \n     @Override\n-    public int count(final Set<String> adminRealms, final SearchCond searchCondition, final SubjectType type) {\n+    public int count(final Set<String> adminRealms, final SearchCond searchCondition, final AnyTypeKind typeKind) {\n         List<Object> parameters = Collections.synchronizedList(new ArrayList<>());\n \n         // 1. get the query string from the search condition\n-        SearchSupport svs = new SearchSupport(type);\n-        StringBuilder queryString = getQuery(searchCondition, parameters, type, svs);\n+        SearchSupport svs = new SearchSupport(typeKind);\n+        StringBuilder queryString = getQuery(searchCondition, parameters, typeKind, svs);\n \n         // 2. take into account administrative realms\n-        queryString.insert(0, \"SELECT u.subject_id FROM (\");\n-        queryString.append(\") u WHERE subject_id IN (\");\n+        queryString.insert(0, \"SELECT u.any_id FROM (\");\n+        queryString.append(\") u WHERE any_id IN (\");\n         queryString.append(getAdminRealmsFilter(adminRealms, svs)).append(')');\n \n         // 3. prepare the COUNT query\n-        queryString.insert(0, \"SELECT COUNT(subject_id) FROM (\");\n-        queryString.append(\") count_subject_id\");\n+        queryString.insert(0, \"SELECT COUNT(any_id) FROM (\");\n+        queryString.append(\") count_any_id\");\n \n         Query countQuery = entityManager.createNativeQuery(queryString.toString());\n         fillWithParameters(countQuery, parameters);\n \n-        LOG.debug(\"Native count query\\n{}\\nwith parameters\\n{}\", queryString.toString(), parameters);\n-\n-        int result = ((Number) countQuery.getSingleResult()).intValue();\n-        LOG.debug(\"Native count query result: {}\", result);\n-\n-        return result;\n+        return ((Number) countQuery.getSingleResult()).intValue();\n     }\n \n     @Override\n-    public <T extends Subject<?, ?, ?>> List<T> search(\n-            final Set<String> adminRealms, final SearchCond searchCondition, final SubjectType type) {\n+    public <T extends Any<?, ?, ?>> List<T> search(\n+            final Set<String> adminRealms, final SearchCond searchCondition, final AnyTypeKind typeKind) {\n \n-        return search(adminRealms, searchCondition, Collections.<OrderByClause>emptyList(), type);\n+        return search(adminRealms, searchCondition, Collections.<OrderByClause>emptyList(), typeKind);\n     }\n \n     @Override\n-    public <T extends Subject<?, ?, ?>> List<T> search(\n+    public <T extends Any<?, ?, ?>> List<T> search(\n             final Set<String> adminRealms, final SearchCond searchCondition, final List<OrderByClause> orderBy,\n-            final SubjectType type) {\n+            final AnyTypeKind typeKind) {\n \n-        return search(adminRealms, searchCondition, -1, -1, orderBy, type);\n+        return search(adminRealms, searchCondition, -1, -1, orderBy, typeKind);\n     }\n \n     @Override\n-    public <T extends Subject<?, ?, ?>> List<T> search(\n+    public <T extends Any<?, ?, ?>> List<T> search(\n             final Set<String> adminRealms, final SearchCond searchCondition, final int page, final int itemsPerPage,\n-            final List<OrderByClause> orderBy, final SubjectType type) {\n+            final List<OrderByClause> orderBy, final AnyTypeKind typeKind) {\n \n         List<T> result = Collections.<T>emptyList();\n \n@@ -174,9 +179,9 @@ public int count(final Set<String> adminRealms, final SearchCond searchCondition\n \n             if (searchCondition != null && searchCondition.isValid()) {\n                 try {\n-                    result = doSearch(adminRealms, searchCondition, page, itemsPerPage, orderBy, type);\n+                    result = doSearch(adminRealms, searchCondition, page, itemsPerPage, orderBy, typeKind);\n                 } catch (Exception e) {\n-                    LOG.error(\"While searching for {}\", type, e);\n+                    LOG.error(\"While searching for {}\", typeKind, e);\n                 }\n             } else {\n                 LOG.error(\"Invalid search condition:\\n{}\", searchCondition);\n@@ -187,23 +192,23 @@ public int count(final Set<String> adminRealms, final SearchCond searchCondition\n     }\n \n     @Override\n-    public <T extends Subject<?, ?, ?>> boolean matches(\n-            final T subject, final SearchCond searchCondition, final SubjectType type) {\n+    public <T extends Any<?, ?, ?>> boolean matches(\n+            final T subject, final SearchCond searchCondition, final AnyTypeKind typeKind) {\n \n         List<Object> parameters = Collections.synchronizedList(new ArrayList<>());\n \n         // 1. get the query string from the search condition\n-        SearchSupport svs = new SearchSupport(type);\n-        StringBuilder queryString = getQuery(searchCondition, parameters, type, svs);\n+        SearchSupport svs = new SearchSupport(typeKind);\n+        StringBuilder queryString = getQuery(searchCondition, parameters, typeKind, svs);\n \n         boolean matches;\n         if (queryString.length() == 0) {\n             // Could be empty: got into a group search with a single membership condition ...\n             matches = false;\n         } else {\n             // 2. take into account the passed user\n-            queryString.insert(0, \"SELECT u.subject_id FROM (\");\n-            queryString.append(\") u WHERE subject_id=?\").append(setParameter(parameters, subject.getKey()));\n+            queryString.insert(0, \"SELECT u.any_id FROM (\");\n+            queryString.append(\") u WHERE any_id=?\").append(setParameter(parameters, subject.getKey()));\n \n             // 3. prepare the search query\n             Query query = entityManager.createNativeQuery(queryString.toString());\n@@ -243,7 +248,7 @@ private void fillWithParameters(final Query query, final List<Object> parameters\n     }\n \n     private StringBuilder buildSelect(final OrderBySupport orderBySupport) {\n-        final StringBuilder select = new StringBuilder(\"SELECT u.subject_id\");\n+        final StringBuilder select = new StringBuilder(\"SELECT u.any_id\");\n \n         for (OrderBySupport.Item obs : orderBySupport.items) {\n             select.append(',').append(obs.select);\n@@ -260,15 +265,15 @@ private StringBuilder buildWhere(final OrderBySupport orderBySupport) {\n         }\n         where.append(\" WHERE \");\n         for (SearchSupport.SearchView searchView : orderBySupport.views) {\n-            where.append(\"u.subject_id=\").append(searchView.alias).append(\".subject_id AND \");\n+            where.append(\"u.any_id=\").append(searchView.alias).append(\".any_id AND \");\n         }\n \n         for (OrderBySupport.Item obs : orderBySupport.items) {\n             if (StringUtils.isNotBlank(obs.where)) {\n                 where.append(obs.where).append(\" AND \");\n             }\n         }\n-        where.append(\"u.subject_id IN (\");\n+        where.append(\"u.any_id IN (\");\n \n         return where;\n     }\n@@ -287,10 +292,10 @@ private StringBuilder buildOrderBy(final OrderBySupport orderBySupport) {\n         return orderBy;\n     }\n \n-    private OrderBySupport parseOrderBy(final SubjectType type, final SearchSupport svs,\n+    private OrderBySupport parseOrderBy(final AnyTypeKind type, final SearchSupport svs,\n             final List<OrderByClause> orderByClauses) {\n \n-        final AttributableUtils attrUtils = attrUtilsFactory.getInstance(type.asAttributableType());\n+        final AnyUtils attrUtils = anyUtilsFactory.getInstance(type);\n \n         OrderBySupport orderBySupport = new OrderBySupport();\n \n@@ -300,9 +305,9 @@ private OrderBySupport parseOrderBy(final SubjectType type, final SearchSupport\n             // Manage difference among external key attribute and internal JPA @Id\n             String fieldName = \"key\".equals(clause.getField()) ? \"id\" : clause.getField();\n \n-            Field subjectField = ReflectionUtils.findField(attrUtils.attributableClass(), fieldName);\n+            Field subjectField = ReflectionUtils.findField(attrUtils.anyClass(), fieldName);\n             if (subjectField == null) {\n-                PlainSchema schema = schemaDAO.find(fieldName, attrUtils.plainSchemaClass());\n+                PlainSchema schema = schemaDAO.find(fieldName);\n                 if (schema != null) {\n                     if (schema.isUniqueConstraint()) {\n                         orderBySupport.views.add(svs.uniqueAttr());\n@@ -345,18 +350,18 @@ private OrderBySupport parseOrderBy(final SubjectType type, final SearchSupport\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private <T extends Subject<?, ?, ?>> List<T> doSearch(final Set<String> adminRealms,\n+    private <T extends Any<?, ?, ?>> List<T> doSearch(final Set<String> adminRealms,\n             final SearchCond nodeCond, final int page, final int itemsPerPage, final List<OrderByClause> orderBy,\n-            final SubjectType type) {\n+            final AnyTypeKind typeKind) {\n \n         List<Object> parameters = Collections.synchronizedList(new ArrayList<>());\n \n         // 1. get the query string from the search condition\n-        SearchSupport svs = new SearchSupport(type);\n-        StringBuilder queryString = getQuery(nodeCond, parameters, type, svs);\n+        SearchSupport svs = new SearchSupport(typeKind);\n+        StringBuilder queryString = getQuery(nodeCond, parameters, typeKind, svs);\n \n         // 2. take into account administrative groups and ordering\n-        OrderBySupport orderBySupport = parseOrderBy(type, svs, orderBy);\n+        OrderBySupport orderBySupport = parseOrderBy(typeKind, svs, orderBy);\n         if (queryString.charAt(0) == '(') {\n             queryString.insert(0, buildSelect(orderBySupport));\n             queryString.append(buildWhere(orderBySupport));\n@@ -381,25 +386,25 @@ private OrderBySupport parseOrderBy(final SubjectType type, final SearchSupport\n         // 5. populate the search query with parameter values\n         fillWithParameters(query, parameters);\n \n-        LOG.debug(\"Native query\\n{}\\nwith parameters\\n{}\", queryString.toString(), parameters);\n-\n         // 6. Prepare the result (avoiding duplicates)\n         List<T> result = new ArrayList<>();\n \n-        for (Object subjectId : query.getResultList()) {\n-            long actualId;\n-            if (subjectId instanceof Object[]) {\n-                actualId = ((Number) ((Object[]) subjectId)[0]).longValue();\n+        for (Object subjectKey : query.getResultList()) {\n+            long actualKey;\n+            if (subjectKey instanceof Object[]) {\n+                actualKey = ((Number) ((Object[]) subjectKey)[0]).longValue();\n             } else {\n-                actualId = ((Number) subjectId).longValue();\n+                actualKey = ((Number) subjectKey).longValue();\n             }\n \n-            T subject = type == SubjectType.USER\n-                    ? (T) userDAO.find(actualId)\n-                    : (T) groupDAO.find(actualId);\n+            T subject = typeKind == AnyTypeKind.USER\n+                    ? (T) userDAO.find(actualKey)\n+                    : typeKind == AnyTypeKind.GROUP\n+                            ? (T) groupDAO.find(actualKey)\n+                            : (T) anyObjectDAO.find(actualKey);\n             if (subject == null) {\n                 LOG.error(\"Could not find {} with id {}, even though returned by the native query\",\n-                        type, actualId);\n+                        typeKind, actualKey);\n             } else {\n                 if (!result.contains(subject)) {\n                     result.add(subject);\n@@ -411,19 +416,27 @@ private OrderBySupport parseOrderBy(final SubjectType type, final SearchSupport\n     }\n \n     private StringBuilder getQuery(final SearchCond nodeCond, final List<Object> parameters,\n-            final SubjectType type, final SearchSupport svs) {\n+            final AnyTypeKind type, final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder();\n \n         switch (nodeCond.getType()) {\n \n             case LEAF:\n             case NOT_LEAF:\n-                if (nodeCond.getGroupCond() != null && SubjectType.USER == type) {\n-                    query.append(getQuery(nodeCond.getGroupCond(),\n+                if (nodeCond.getRelationshipCond() != null\n+                        && (AnyTypeKind.USER == type || AnyTypeKind.ANY_OBJECT == type)) {\n+\n+                    query.append(getQuery(nodeCond.getRelationshipCond(),\n+                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n+                }\n+                if (nodeCond.getMembershipCond() != null\n+                        && (AnyTypeKind.USER == type || AnyTypeKind.ANY_OBJECT == type)) {\n+\n+                    query.append(getQuery(nodeCond.getMembershipCond(),\n                             nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n                 }\n-                if (nodeCond.getRoleCond() != null && SubjectType.USER == type) {\n+                if (nodeCond.getRoleCond() != null && AnyTypeKind.USER == type) {\n                     query.append(getQuery(nodeCond.getRoleCond(),\n                             nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n                 }\n@@ -435,22 +448,22 @@ private StringBuilder getQuery(final SearchCond nodeCond, final List<Object> par\n                     query.append(getQuery(nodeCond.getAttributeCond(),\n                             nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, type, svs));\n                 }\n-                if (nodeCond.getSubjectCond() != null) {\n-                    query.append(getQuery(nodeCond.getSubjectCond(),\n+                if (nodeCond.getAnyCond() != null) {\n+                    query.append(getQuery(nodeCond.getAnyCond(),\n                             nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, type, svs));\n                 }\n                 break;\n \n             case AND:\n                 query.append(getQuery(nodeCond.getLeftNodeCond(), parameters, type, svs)).\n-                        append(\" AND subject_id IN ( \").\n+                        append(\" AND any_id IN ( \").\n                         append(getQuery(nodeCond.getRightNodeCond(), parameters, type, svs)).\n                         append(\")\");\n                 break;\n \n             case OR:\n                 query.append(getQuery(nodeCond.getLeftNodeCond(), parameters, type, svs)).\n-                        append(\" OR subject_id IN ( \").\n+                        append(\" OR any_id IN ( \").\n                         append(getQuery(nodeCond.getRightNodeCond(), parameters, type, svs)).\n                         append(\")\");\n                 break;\n@@ -461,30 +474,50 @@ private StringBuilder getQuery(final SearchCond nodeCond, final List<Object> par\n         return query;\n     }\n \n-    private String getQuery(final GroupCond cond, final boolean not, final List<Object> parameters,\n+    private String getQuery(final RelationshipCond cond, final boolean not, final List<Object> parameters,\n+            final SearchSupport svs) {\n+\n+        StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n+                append(svs.field().name).append(\" WHERE \");\n+\n+        if (not) {\n+            query.append(\"any_id NOT IN (\");\n+        } else {\n+            query.append(\"any_id IN (\");\n+        }\n+\n+        query.append(\"SELECT DISTINCT any_id \").append(\"FROM \").\n+                append(svs.relationship().name).append(\" WHERE \").\n+                append(\"right_anyObject_id=?\").append(setParameter(parameters, cond.getAnyObjectKey())).\n+                append(')');\n+\n+        return query.toString();\n+    }\n+\n+    private String getQuery(final MembershipCond cond, final boolean not, final List<Object> parameters,\n             final SearchSupport svs) {\n \n-        StringBuilder query = new StringBuilder(\"SELECT DISTINCT subject_id FROM \").\n+        StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE \");\n \n         if (not) {\n-            query.append(\"subject_id NOT IN (\");\n+            query.append(\"any_id NOT IN (\");\n         } else {\n-            query.append(\"subject_id IN (\");\n+            query.append(\"any_id IN (\");\n         }\n \n-        query.append(\"SELECT DISTINCT subject_id \").append(\"FROM \").\n+        query.append(\"SELECT DISTINCT any_id \").append(\"FROM \").\n                 append(svs.membership().name).append(\" WHERE \").\n                 append(\"group_id=?\").append(setParameter(parameters, cond.getGroupKey())).\n                 append(')');\n \n         if (not) {\n-            query.append(\"AND subject_id NOT IN (\");\n+            query.append(\"AND any_id NOT IN (\");\n         } else {\n-            query.append(\"OR subject_id IN (\");\n+            query.append(\"OR any_id IN (\");\n         }\n \n-        query.append(\"SELECT DISTINCT subject_id \").append(\"FROM \").\n+        query.append(\"SELECT DISTINCT any_id \").append(\"FROM \").\n                 append(svs.dyngroupmembership().name).append(\" WHERE \").\n                 append(\"group_id=?\").append(setParameter(parameters, cond.getGroupKey())).\n                 append(')');\n@@ -495,27 +528,27 @@ private String getQuery(final GroupCond cond, final boolean not, final List<Obje\n     private String getQuery(final RoleCond cond, final boolean not, final List<Object> parameters,\n             final SearchSupport svs) {\n \n-        StringBuilder query = new StringBuilder(\"SELECT DISTINCT subject_id FROM \").\n+        StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE \");\n \n         if (not) {\n-            query.append(\"subject_id NOT IN (\");\n+            query.append(\"any_id NOT IN (\");\n         } else {\n-            query.append(\"subject_id IN (\");\n+            query.append(\"any_id IN (\");\n         }\n \n-        query.append(\"SELECT DISTINCT subject_id \").append(\"FROM \").\n+        query.append(\"SELECT DISTINCT any_id \").append(\"FROM \").\n                 append(svs.role().name).append(\" WHERE \").\n                 append(\"role_id=?\").append(setParameter(parameters, cond.getRoleKey())).\n                 append(')');\n \n         if (not) {\n-            query.append(\"AND subject_id NOT IN (\");\n+            query.append(\"AND any_id NOT IN (\");\n         } else {\n-            query.append(\"OR subject_id IN (\");\n+            query.append(\"OR any_id IN (\");\n         }\n \n-        query.append(\"SELECT DISTINCT subject_id \").append(\"FROM \").\n+        query.append(\"SELECT DISTINCT any_id \").append(\"FROM \").\n                 append(svs.dynrolemembership().name).append(\" WHERE \").\n                 append(\"role_id=?\").append(setParameter(parameters, cond.getRoleKey())).\n                 append(')');\n@@ -524,24 +557,24 @@ private String getQuery(final RoleCond cond, final boolean not, final List<Objec\n     }\n \n     private String getQuery(final ResourceCond cond, final boolean not, final List<Object> parameters,\n-            final SubjectType type, final SearchSupport svs) {\n+            final AnyTypeKind typeKind, final SearchSupport svs) {\n \n-        final StringBuilder query = new StringBuilder(\"SELECT DISTINCT subject_id FROM \").\n+        final StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE \");\n \n         if (not) {\n-            query.append(\"subject_id NOT IN (\");\n+            query.append(\"any_id NOT IN (\");\n         } else {\n-            query.append(\"subject_id IN (\");\n+            query.append(\"any_id IN (\");\n         }\n \n-        query.append(\"SELECT DISTINCT subject_id FROM \").\n+        query.append(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.resource().name).\n                 append(\" WHERE resource_name=?\").\n                 append(setParameter(parameters, cond.getResourceName()));\n \n-        if (type == SubjectType.USER) {\n-            query.append(\" UNION SELECT DISTINCT subject_id FROM \").\n+        if (typeKind == AnyTypeKind.USER) {\n+            query.append(\" UNION SELECT DISTINCT any_id FROM \").\n                     append(svs.groupResource().name).\n                     append(\" WHERE resource_name=?\").\n                     append(setParameter(parameters, cond.getResourceName()));\n@@ -556,7 +589,7 @@ private void fillAttributeQuery(final StringBuilder query, final PlainAttrValue\n             final PlainSchema schema, final AttributeCond cond, final boolean not,\n             final List<Object> parameters, final SearchSupport svs) {\n \n-        String column = (cond instanceof SubjectCond)\n+        String column = (cond instanceof AnyCond)\n                 ? cond.getSchema()\n                 : \"' AND \" + svs.fieldName(schema.getType());\n \n@@ -582,7 +615,7 @@ private void fillAttributeQuery(final StringBuilder query, final PlainAttrValue\n                     }\n                     query.append(\" LIKE ?\").append(setParameter(parameters, cond.getExpression()));\n                 } else {\n-                    if (!(cond instanceof SubjectCond)) {\n+                    if (!(cond instanceof AnyCond)) {\n                         query.append(\"' AND\");\n                     }\n                     query.append(\" 1=2\");\n@@ -645,11 +678,11 @@ private void fillAttributeQuery(final StringBuilder query, final PlainAttrValue\n     }\n \n     private String getQuery(final AttributeCond cond, final boolean not, final List<Object> parameters,\n-            final SubjectType type, final SearchSupport svs) {\n+            final AnyTypeKind typeKind, final SearchSupport svs) {\n \n-        final AttributableUtils attrUtils = attrUtilsFactory.getInstance(type.asAttributableType());\n+        AnyUtils attrUtils = anyUtilsFactory.getInstance(typeKind);\n \n-        PlainSchema schema = schemaDAO.find(cond.getSchema(), attrUtils.plainSchemaClass());\n+        PlainSchema schema = schemaDAO.find(cond.getSchema());\n         if (schema == null) {\n             LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n             return EMPTY_ATTR_QUERY;\n@@ -667,10 +700,10 @@ private String getQuery(final AttributeCond cond, final boolean not, final List<\n             return EMPTY_ATTR_QUERY;\n         }\n \n-        StringBuilder query = new StringBuilder(\"SELECT DISTINCT subject_id FROM \");\n+        StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \");\n         if (cond.getType() == AttributeCond.Type.ISNOTNULL) {\n             query.append(svs.field().name).\n-                    append(\" WHERE subject_id NOT IN (SELECT subject_id FROM \").\n+                    append(\" WHERE any_id NOT IN (SELECT any_id FROM \").\n                     append(svs.nullAttr().name).\n                     append(\" WHERE schema_name='\").append(schema.getKey()).append(\"')\");\n         } else {\n@@ -693,23 +726,23 @@ private String getQuery(final AttributeCond cond, final boolean not, final List<\n     }\n \n     @SuppressWarnings(\"rawtypes\")\n-    private String getQuery(final SubjectCond cond, final boolean not, final List<Object> parameters,\n-            final SubjectType type, final SearchSupport svs) {\n+    private String getQuery(final AnyCond cond, final boolean not, final List<Object> parameters,\n+            final AnyTypeKind typeKind, final SearchSupport svs) {\n \n-        final AttributableUtils attrUtils = attrUtilsFactory.getInstance(type.asAttributableType());\n+        AnyUtils attrUtils = anyUtilsFactory.getInstance(typeKind);\n \n         // Keeps track of difference between entity's getKey() and JPA @Id fields\n         if (\"key\".equals(cond.getSchema())) {\n             cond.setSchema(\"id\");\n         }\n \n-        Field subjectField = ReflectionUtils.findField(attrUtils.attributableClass(), cond.getSchema());\n+        Field subjectField = ReflectionUtils.findField(attrUtils.anyClass(), cond.getSchema());\n         if (subjectField == null) {\n             LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n             return EMPTY_ATTR_QUERY;\n         }\n \n-        PlainSchema schema = attrUtils.newPlainSchema();\n+        PlainSchema schema = new JPAPlainSchema();\n         schema.setKey(subjectField.getName());\n         for (AttrSchemaType attrSchemaType : AttrSchemaType.values()) {\n             if (subjectField.getType().isAssignableFrom(attrSchemaType.getType())) {\n@@ -768,7 +801,7 @@ private String getQuery(final SubjectCond cond, final boolean not, final List<Ob\n             }\n         }\n \n-        final StringBuilder query = new StringBuilder(\"SELECT DISTINCT subject_id FROM \").\n+        final StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE \");\n \n         fillAttributeQuery(query, attrValue, schema, cond, not, parameters, svs);","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPASubjectSearchDAO.java"},{"sha":"4d82d3170c1ac37267ce8807a94532daff1a7923","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeClassDAO.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAnyTypeClass;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JPAAnyTypeClassDAO extends AbstractDAO<AnyTypeClass, String> implements AnyTypeClassDAO {\n+\n+    @Override\n+    public AnyTypeClass find(final String key) {\n+        return entityManager.find(JPAAnyTypeClass.class, key);\n+    }\n+\n+    @Override\n+    public List<AnyTypeClass> findAll() {\n+        TypedQuery<AnyTypeClass> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAAnyTypeClass.class.getSimpleName() + \" e \", AnyTypeClass.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public AnyTypeClass save(final AnyTypeClass anyTypeClass) {\n+        return entityManager.merge(anyTypeClass);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        AnyTypeClass anyTypeClass = find(key);\n+        if (anyTypeClass == null) {\n+            return;\n+        }\n+\n+        entityManager.remove(anyTypeClass);\n+    }\n+\n+}"},{"sha":"bbbf859f082f1be2c109556097262674e46d00df","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeDAO.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Repository\n+public class JPAAnyTypeDAO extends AbstractDAO<AnyType, String> implements AnyTypeDAO {\n+\n+    @Override\n+    public AnyType find(final String key) {\n+        return entityManager.find(JPAAnyType.class, key);\n+    }\n+\n+    private AnyType find(final AnyTypeKind typeKind) {\n+        AnyType anyType = find(typeKind.name());\n+        if (anyType == null) {\n+            anyType = new JPAAnyType();\n+            anyType.setKey(typeKind.name());\n+            anyType.setKind(typeKind);\n+            anyType = save(anyType);\n+        }\n+        return anyType;\n+    }\n+\n+    @Transactional(readOnly = false)\n+    @Override\n+    public AnyType findUser() {\n+        return find(AnyTypeKind.USER);\n+    }\n+\n+    @Transactional(readOnly = false)\n+    @Override\n+    public AnyType findGroup() {\n+        return find(AnyTypeKind.GROUP);\n+    }\n+\n+    @Override\n+    public List<AnyType> findAll() {\n+        TypedQuery<AnyType> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAAnyType.class.getSimpleName() + \" e \", AnyType.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public AnyType save(final AnyType anyType) {\n+        return entityManager.merge(anyType);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        AnyType anyType = find(key);\n+        if (anyType == null) {\n+            return;\n+        }\n+\n+        entityManager.remove(anyType);\n+    }\n+\n+}"},{"sha":"2b331782785582c0d8e1f920a649d7db53ae256a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAttrTemplateDAO.java","status":"removed","additions":0,"deletions":107,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAttrTemplateDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAttrTemplateDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAttrTemplateDAO.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,107 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.dao;\n-\n-import java.util.Collections;\n-import java.util.List;\n-import javax.persistence.Query;\n-import org.apache.syncope.core.persistence.api.dao.AttrTemplateDAO;\n-import org.apache.syncope.core.persistence.api.entity.AttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.Schema;\n-import org.apache.syncope.core.persistence.api.entity.membership.MDerAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.membership.MVirAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.group.GDerAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirAttrTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractAttrTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMDerAttrTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMPlainAttrTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMVirAttrTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGDerAttrTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirAttrTemplate;\n-import org.springframework.stereotype.Repository;\n-import org.springframework.util.ReflectionUtils;\n-\n-@Repository\n-public class JPAAttrTemplateDAO<S extends Schema>\n-        extends AbstractDAO<AttrTemplate<S>, Long> implements AttrTemplateDAO<S> {\n-\n-    private <T extends AttrTemplate<S>> Class<? extends AbstractAttrTemplate<? extends Schema>> getJPAEntityReference(\n-            final Class<T> reference) {\n-\n-        return MPlainAttrTemplate.class.isAssignableFrom(reference)\n-                ? JPAMPlainAttrTemplate.class\n-                : MDerAttrTemplate.class.isAssignableFrom(reference)\n-                        ? JPAMDerAttrTemplate.class\n-                        : MVirAttrTemplate.class.isAssignableFrom(reference)\n-                                ? JPAMVirAttrTemplate.class\n-                                : GPlainAttrTemplate.class.isAssignableFrom(reference)\n-                                        ? JPAGPlainAttrTemplate.class\n-                                        : GDerAttrTemplate.class.isAssignableFrom(reference)\n-                                                ? JPAGDerAttrTemplate.class\n-                                                : GVirAttrTemplate.class.isAssignableFrom(reference)\n-                                                        ? JPAGVirAttrTemplate.class\n-                                                        : null;\n-    }\n-\n-    @Override\n-    public <T extends AttrTemplate<S>> T find(final Long key, final Class<T> reference) {\n-        return reference.cast(entityManager.find(getJPAEntityReference(reference), key));\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends AttrTemplate<S>> List<Number> findBySchemaName(\n-            final String schemaName, final Class<T> reference) {\n-\n-        Query query = null;\n-        try {\n-            query = entityManager.createNativeQuery(\"SELECT id FROM \"\n-                    + ReflectionUtils.findField(getJPAEntityReference(reference), \"TABLE\").get(null).toString()\n-                    + \" WHERE schema_name=?1\");\n-            query.setParameter(1, schemaName);\n-        } catch (Exception e) {\n-            LOG.error(\"Unexpected exception\", e);\n-        }\n-\n-        return query == null ? Collections.<Number>emptyList() : query.getResultList();\n-    }\n-\n-    @Override\n-    public <T extends AttrTemplate<S>> void delete(final Long key, final Class<T> reference) {\n-        T attrTemplate = find(key, reference);\n-        if (attrTemplate == null) {\n-            return;\n-        }\n-\n-        delete(attrTemplate);\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends AttrTemplate<S>> void delete(final T attrTemplate) {\n-        if (attrTemplate.getOwner() != null) {\n-            attrTemplate.getOwner().getAttrTemplates(attrTemplate.getClass()).remove(attrTemplate);\n-        }\n-\n-        entityManager.remove(attrTemplate);\n-    }\n-}"},{"sha":"7045a1aee379f63948cdfc45795577a89c1bf719","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConfDAO.java","status":"modified","additions":18,"deletions":13,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,15 +18,14 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.conf.CPlainSchema;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPAConf;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n@@ -41,9 +40,6 @@ public class JPAConfDAO extends AbstractDAO<Conf, Long> implements ConfDAO {\n     @Autowired\n     private PlainAttrDAO attrDAO;\n \n-    @Autowired\n-    private AttributableUtilsFactory attrUtilsFactory;\n-\n     @Override\n     public Conf get() {\n         Conf instance = entityManager.find(JPAConf.class, 1L);\n@@ -68,10 +64,19 @@ public CPlainAttr find(final String key) {\n     public CPlainAttr find(final String key, final String defaultValue) {\n         CPlainAttr result = find(key);\n         if (result == null) {\n-            result = new JPACPlainAttr();\n-            result.setSchema(schemaDAO.find(key, CPlainSchema.class));\n-\n-            result.addValue(defaultValue, attrUtilsFactory.getInstance(AttributableType.CONFIGURATION));\n+            JPACPlainAttr newAttr = new JPACPlainAttr();\n+            newAttr.setSchema(schemaDAO.find(key));\n+\n+            JPACPlainAttrValue attrValue;\n+            if (newAttr.getSchema().isUniqueConstraint()) {\n+                attrValue = new JPACPlainAttrValue();\n+                ((PlainAttrUniqueValue) attrValue).setSchema(newAttr.getSchema());\n+            } else {\n+                attrValue = new JPACPlainAttrValue();\n+            }\n+            newAttr.add(defaultValue, attrValue);\n+\n+            result = newAttr;\n         }\n \n         return result;\n@@ -85,11 +90,11 @@ public Conf save(final CPlainAttr attr) {\n         if (old != null && (!attr.getSchema().isUniqueConstraint()\n                 || (!attr.getUniqueValue().getStringValue().equals(old.getUniqueValue().getStringValue())))) {\n \n-            instance.removePlainAttr(old);\n+            instance.remove(old);\n             attrDAO.delete(old.getKey(), CPlainAttr.class);\n         }\n \n-        instance.addPlainAttr(attr);\n+        instance.add(attr);\n         attr.setOwner(instance);\n \n         return entityManager.merge(instance);\n@@ -100,7 +105,7 @@ public Conf delete(final String key) {\n         Conf instance = get();\n         CPlainAttr attr = instance.getPlainAttr(key);\n         if (attr != null) {\n-            instance.removePlainAttr(attr);\n+            instance.remove(attr);\n             instance = entityManager.merge(instance);\n         }\n "},{"sha":"453c363a2ae1787b89fcd95970fc0d87fabccdda","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConnInstanceDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.JPAConnInstance;\n import org.apache.syncope.core.provisioning.api.ConnectorRegistry;\n import org.springframework.beans.factory.annotation.Autowired;"},{"sha":"216289831d1a6b7969a442e752bf7fc935d216c3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerAttrDAO.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerAttrDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -21,51 +21,51 @@\n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.api.dao.DerAttrDAO;\n-import org.apache.syncope.core.persistence.api.entity.Attributable;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n-import org.apache.syncope.core.persistence.api.entity.membership.MDerAttr;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.ADerAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GDerAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UDerAttr;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractDerAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMDerAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADerAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGDerAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDerAttr;\n import org.springframework.stereotype.Repository;\n \n @Repository\n-public class JPADerAttrDAO extends AbstractDAO<DerAttr, Long> implements DerAttrDAO {\n+public class JPADerAttrDAO extends AbstractDAO<DerAttr<?>, Long> implements DerAttrDAO {\n \n-    public <T extends DerAttr> Class<? extends AbstractDerAttr> getJPAEntityReference(\n+    public <T extends DerAttr<?>> Class<? extends AbstractDerAttr<?>> getJPAEntityReference(\n             final Class<T> reference) {\n \n         return GDerAttr.class.isAssignableFrom(reference)\n                 ? JPAGDerAttr.class\n-                : MDerAttr.class.isAssignableFrom(reference)\n-                        ? JPAMDerAttr.class\n+                : ADerAttr.class.isAssignableFrom(reference)\n+                        ? JPAADerAttr.class\n                         : UDerAttr.class.isAssignableFrom(reference)\n                                 ? JPAUDerAttr.class\n                                 : null;\n     }\n \n     @Override\n-    public <T extends DerAttr> T find(final Long key, final Class<T> reference) {\n+    public <T extends DerAttr<?>> T find(final Long key, final Class<T> reference) {\n         return reference.cast(entityManager.find(getJPAEntityReference(reference), key));\n     }\n \n     @Override\n-    public <T extends DerAttr> List<T> findAll(final Class<T> reference) {\n+    public <T extends DerAttr<?>> List<T> findAll(final Class<T> reference) {\n         TypedQuery<T> query = entityManager.createQuery(\n                 \"SELECT e FROM \" + getJPAEntityReference(reference).getSimpleName() + \" e\", reference);\n         return query.getResultList();\n     }\n \n     @Override\n-    public <T extends DerAttr> T save(final T derAttr) {\n+    public <T extends DerAttr<?>> T save(final T derAttr) {\n         return entityManager.merge(derAttr);\n     }\n \n     @Override\n-    public <T extends DerAttr> void delete(final Long key, final Class<T> reference) {\n+    public <T extends DerAttr<?>> void delete(final Long key, final Class<T> reference) {\n         T derAttr = find(key, reference);\n         if (derAttr == null) {\n             return;\n@@ -76,9 +76,9 @@ public <T extends DerAttr> void delete(final Long key, final Class<T> reference)\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public <T extends DerAttr> void delete(final T derAttr) {\n+    public <T extends DerAttr<?>> void delete(final T derAttr) {\n         if (derAttr.getOwner() != null) {\n-            ((Attributable<?, T, ?>) derAttr.getOwner()).removeDerAttr(derAttr);\n+            ((Any<?, T, ?>) derAttr.getOwner()).remove(derAttr);\n         }\n \n         entityManager.remove(derAttr);"},{"sha":"c3c10bfe5eb25f7a98306bba43b75f16abe954cc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerSchemaDAO.java","status":"modified","additions":21,"deletions":63,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,25 +20,16 @@\n \n import java.util.List;\n import javax.persistence.TypedQuery;\n-import org.apache.commons.collections4.Closure;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.syncope.common.lib.types.AttributableType;\n-import org.apache.syncope.core.persistence.api.dao.AttrTemplateDAO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.DerAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.api.entity.membership.MDerSchema;\n-import org.apache.syncope.core.persistence.api.entity.group.GDerSchema;\n-import org.apache.syncope.core.persistence.api.entity.user.UDerAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.UDerSchema;\n-import org.apache.syncope.core.persistence.api.entity.user.UMappingItem;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractDerSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMDerSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGDerSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDerSchema;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n+import org.apache.syncope.core.persistence.jpa.entity.JPADerSchema;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n \n@@ -48,45 +39,26 @@ public class JPADerSchemaDAO extends AbstractDAO<DerSchema, String> implements D\n     @Autowired\n     private DerAttrDAO derAttrDAO;\n \n-    @Autowired\n-    private AttrTemplateDAO<DerSchema> attrTemplateDAO;\n-\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n-    private <T extends DerSchema> Class<? extends AbstractDerSchema> getJPAEntityReference(final Class<T> reference) {\n-        return GDerSchema.class.isAssignableFrom(reference)\n-                ? JPAGDerSchema.class\n-                : MDerSchema.class.isAssignableFrom(reference)\n-                        ? JPAMDerSchema.class\n-                        : UDerSchema.class.isAssignableFrom(reference)\n-                                ? JPAUDerSchema.class\n-                                : null;\n-    }\n-\n     @Override\n-    public <T extends DerSchema> T find(final String key, final Class<T> reference) {\n-        return reference.cast(entityManager.find(getJPAEntityReference(reference), key));\n+    public DerSchema find(final String key) {\n+        return entityManager.find(JPADerSchema.class, key);\n     }\n \n     @Override\n-    public <T extends DerSchema> List<T> findAll(final Class<T> reference) {\n-        TypedQuery<T> query = entityManager.createQuery(\n-                \"SELECT e FROM \" + getJPAEntityReference(reference).getSimpleName() + \" e\", reference);\n+    public List<DerSchema> findAll() {\n+        TypedQuery<DerSchema> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPADerSchema.class.getSimpleName() + \" e\", DerSchema.class);\n         return query.getResultList();\n     }\n \n     @Override\n-    public <T extends DerAttr> List<T> findAttrs(final DerSchema schema, final Class<T> reference) {\n+    public <T extends DerAttr<?>> List<T> findAttrs(final DerSchema schema, final Class<T> reference) {\n         final StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n                 append(((JPADerAttrDAO) derAttrDAO).getJPAEntityReference(reference).getSimpleName()).\n-                append(\" e WHERE e.\");\n-        if (UDerAttr.class.isAssignableFrom(reference)) {\n-            queryString.append(\"derSchema\");\n-        } else {\n-            queryString.append(\"template.schema\");\n-        }\n-        queryString.append(\"=:schema\");\n+                append(\" e WHERE e.schema=:schema\");\n \n         TypedQuery<T> query = entityManager.createQuery(queryString.toString(), reference);\n         query.setParameter(\"schema\", schema);\n@@ -95,42 +67,28 @@ public <T extends DerAttr> List<T> findAttrs(final DerSchema schema, final Class\n     }\n \n     @Override\n-    public <T extends DerSchema> T save(final T derSchema) {\n+    public DerSchema save(final DerSchema derSchema) {\n         return entityManager.merge(derSchema);\n     }\n \n     @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public void delete(final String key, final AttributableUtils attributableUtil) {\n-        final DerSchema schema = find(key, attributableUtil.derSchemaClass());\n+    public void delete(final String key) {\n+        final DerSchema schema = find(key);\n         if (schema == null) {\n             return;\n         }\n \n-        CollectionUtils.forAllDo(findAttrs(schema, attributableUtil.derAttrClass()), new Closure<DerAttr>() {\n+        AnyUtilsFactory anyUtilsFactory = new JPAAnyUtilsFactory();\n+        for (AnyTypeKind anyTypeKind : AnyTypeKind.values()) {\n+            AnyUtils anyUtils = anyUtilsFactory.getInstance(anyTypeKind);\n \n-            @Override\n-            public void execute(final DerAttr input) {\n-                derAttrDAO.delete(input.getKey(), attributableUtil.derAttrClass());\n+            for (DerAttr<?> attr : findAttrs(schema, anyUtils.derAttrClass())) {\n+                derAttrDAO.delete(attr.getKey(), anyUtils.derAttrClass());\n             }\n \n-        });\n-\n-        if (attributableUtil.getType() != AttributableType.USER) {\n-            CollectionUtils.forAllDo(attrTemplateDAO.\n-                    findBySchemaName(schema.getKey(), attributableUtil.derAttrTemplateClass()).iterator(),\n-                    new Closure<Number>() {\n-\n-                        @Override\n-                        public void execute(final Number input) {\n-                            attrTemplateDAO.delete(input.longValue(), attributableUtil.derAttrTemplateClass());\n-                        }\n-\n-                    });\n+            resourceDAO.deleteMapping(key, anyUtils.derIntMappingType());\n         }\n \n-        resourceDAO.deleteMapping(key, attributableUtil.derIntMappingType(), UMappingItem.class);\n-\n         entityManager.remove(schema);\n     }\n }"},{"sha":"b13a8bdb64539e15e24615b3638e6624109f1afa","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":37,"deletions":45,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -25,24 +25,25 @@\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.Mapping;\n-import org.apache.syncope.core.persistence.api.entity.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.user.UMappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractMappingItem;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAExternalResource;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGMappingItem;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUMappingItem;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMappingItem;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMapping;\n import org.apache.syncope.core.provisioning.api.ConnectorRegistry;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n@@ -54,6 +55,9 @@ public class JPAExternalResourceDAO extends AbstractDAO<ExternalResource, String\n     @Autowired\n     private TaskDAO taskDAO;\n \n+    @Autowired\n+    private AnyObjectDAO anyObjectDAO;\n+\n     @Autowired\n     private UserDAO userDAO;\n \n@@ -66,6 +70,9 @@ public class JPAExternalResourceDAO extends AbstractDAO<ExternalResource, String\n     @Autowired\n     private ConnectorRegistry connRegistry;\n \n+    @Autowired\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n     @Override\n     public ExternalResource find(final String name) {\n         return entityManager.find(JPAExternalResource.class, name);\n@@ -146,44 +153,34 @@ public ExternalResource save(final ExternalResource resource) {\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public <T extends MappingItem> void deleteMapping(\n-            final String intAttrName, final IntMappingType intMappingType, final Class<T> reference) {\n-\n+    public void deleteMapping(final String intAttrName, final IntMappingType intMappingType) {\n         if (IntMappingType.getEmbedded().contains(intMappingType)) {\n             return;\n         }\n \n-        Class<? extends AbstractMappingItem> jpaRef = reference.equals(UMappingItem.class)\n-                ? JPAUMappingItem.class\n-                : JPAGMappingItem.class;\n-\n-        TypedQuery<T> query = entityManager.createQuery(\"SELECT m FROM \" + jpaRef.getSimpleName()\n-                + \" m WHERE m.intAttrName=:intAttrName AND m.intMappingType=:intMappingType\", reference);\n+        TypedQuery<MappingItem> query = entityManager.createQuery(\n+                \"SELECT m FROM \" + JPAMappingItem.class.getSimpleName()\n+                + \" m WHERE m.intAttrName=:intAttrName AND m.intMappingType=:intMappingType\", MappingItem.class);\n         query.setParameter(\"intAttrName\", intAttrName);\n         query.setParameter(\"intMappingType\", intMappingType);\n \n-        Set<Long> itemIds = new HashSet<>();\n-        for (T item : query.getResultList()) {\n-            itemIds.add(item.getKey());\n+        Set<Long> itemKeys = new HashSet<>();\n+        for (MappingItem item : query.getResultList()) {\n+            itemKeys.add(item.getKey());\n         }\n-        Class<?> mappingRef = null;\n-        for (Long itemId : itemIds) {\n-            T item = (T) entityManager.find(jpaRef, itemId);\n+        for (Long itemKey : itemKeys) {\n+            MappingItem item = entityManager.find(JPAMappingItem.class, itemKey);\n             if (item != null) {\n-                mappingRef = item.getMapping().getClass();\n-\n-                ((Mapping<T>) item.getMapping()).removeItem(item);\n+                item.getMapping().remove(item);\n                 item.setMapping(null);\n \n                 entityManager.remove(item);\n             }\n         }\n \n         // Make empty query cache for *MappingItem and related *Mapping\n-        entityManager.getEntityManagerFactory().getCache().evict(jpaRef);\n-        if (mappingRef != null) {\n-            entityManager.getEntityManagerFactory().getCache().evict(mappingRef);\n-        }\n+        entityManager.getEntityManagerFactory().getCache().evict(JPAMappingItem.class);\n+        entityManager.getEntityManagerFactory().getCache().evict(JPAMapping.class);\n     }\n \n     @Override\n@@ -197,11 +194,14 @@ public void delete(final String name) {\n         taskDAO.deleteAll(resource, TaskType.SYNCHRONIZATION);\n         taskDAO.deleteAll(resource, TaskType.PUSH);\n \n+        for (AnyObject anyObject : anyObjectDAO.findByResource(resource)) {\n+            anyObject.remove(resource);\n+        }\n         for (User user : userDAO.findByResource(resource)) {\n-            user.removeResource(resource);\n+            user.remove(resource);\n         }\n         for (Group group : groupDAO.findByResource(resource)) {\n-            group.removeResource(resource);\n+            group.remove(resource);\n         }\n         for (AccountPolicy policy : policyDAO.findByResource(resource)) {\n             policy.removeResource(resource);\n@@ -214,21 +214,13 @@ public void delete(final String name) {\n         }\n         resource.setConnector(null);\n \n-        if (resource.getUmapping() != null) {\n-            for (MappingItem item : resource.getUmapping().getItems()) {\n-                item.setMapping(null);\n-            }\n-            resource.getUmapping().getItems().clear();\n-            resource.getUmapping().setResource(null);\n-            resource.setUmapping(null);\n-        }\n-        if (resource.getGmapping() != null) {\n-            for (MappingItem item : resource.getGmapping().getItems()) {\n+        for (Provision provision : resource.getProvisions()) {\n+            for (MappingItem item : provision.getMapping().getItems()) {\n                 item.setMapping(null);\n             }\n-            resource.getGmapping().getItems().clear();\n-            resource.getGmapping().setResource(null);\n-            resource.setGmapping(null);\n+            provision.getMapping().getItems().clear();\n+            provision.setMapping(null);\n+            provision.setResource(null);\n         }\n \n         entityManager.remove(resource);"},{"sha":"22ce79ecc9e3060354bf3ec2fc07064e534b5a8b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":96,"deletions":253,"changes":349,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,101 +18,72 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import javax.persistence.NoResultException;\n-import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.dao.DerAttrDAO;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.VirAttrDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.core.persistence.api.entity.AttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.DerAttr;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.Subject;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-import org.apache.syncope.core.persistence.api.entity.membership.MDerAttr;\n-import org.apache.syncope.core.persistence.api.entity.membership.MDerAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.membership.MVirAttr;\n-import org.apache.syncope.core.persistence.api.entity.membership.MVirAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n-import org.apache.syncope.core.persistence.api.entity.group.GDerAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.GDerAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirAttrTemplate;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMembership;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n-import org.apache.syncope.common.lib.types.SubjectType;\n import org.apache.syncope.core.misc.RealmUtils;\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n-public class JPAGroupDAO extends AbstractSubjectDAO<GPlainAttr, GDerAttr, GVirAttr> implements GroupDAO {\n+public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {\n \n     @Autowired\n-    private UserDAO userDAO;\n-\n-    @Autowired\n-    private PlainAttrDAO plainAttrDAO;\n-\n-    @Autowired\n-    private DerAttrDAO derAttrDAO;\n-\n-    @Autowired\n-    private VirAttrDAO virAttrDAO;\n+    private AnyObjectDAO anyObjectDAO;\n \n     @Autowired\n-    private AttributableUtilsFactory attrUtilsFactory;\n+    private UserDAO userDAO;\n \n     @Override\n-    protected Subject<GPlainAttr, GDerAttr, GVirAttr> findInternal(final Long key) {\n-        return find(key);\n+    protected AnyUtils init() {\n+        return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.GROUP);\n     }\n \n     @Override\n-    public Group find(final Long key) {\n-        TypedQuery<Group> query = entityManager.createQuery(\n-                \"SELECT e FROM \" + JPAGroup.class.getSimpleName() + \" e WHERE e.id = :id\", Group.class);\n-        query.setParameter(\"id\", key);\n+    protected void securityChecks(final Group group) {\n+        Set<String> authRealms = AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_READ);\n+        boolean authorized = CollectionUtils.exists(authRealms, new Predicate<String>() {\n \n-        Group result = null;\n-        try {\n-            result = query.getSingleResult();\n-        } catch (NoResultException e) {\n-            LOG.debug(\"No group found with id {}\", key, e);\n+            @Override\n+            public boolean evaluate(final String realm) {\n+                return group.getRealm().getFullPath().startsWith(realm)\n+                        || realm.equals(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey()));\n+            }\n+        });\n+        if (authRealms == null || authRealms.isEmpty() || !authorized) {\n+            throw new UnauthorizedException(AnyTypeKind.GROUP, group.getKey());\n         }\n-\n-        return result;\n     }\n \n     @Override\n@@ -168,260 +139,132 @@ public List<Group> findOwnedByGroup(final Long groupId) {\n         return query.getResultList();\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     @Override\n-    public List<Group> findByAttrValue(final String schemaName, final GPlainAttrValue attrValue) {\n-        return (List<Group>) findByAttrValue(\n-                schemaName, attrValue, attrUtilsFactory.getInstance(AttributableType.GROUP));\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public Group findByAttrUniqueValue(final String schemaName, final GPlainAttrValue attrUniqueValue) {\n-        return (Group) findByAttrUniqueValue(\n-                schemaName, attrUniqueValue, attrUtilsFactory.getInstance(AttributableType.GROUP));\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public List<Group> findByDerAttrValue(final String schemaName, final String value) {\n-        return (List<Group>) findByDerAttrValue(\n-                schemaName, value, attrUtilsFactory.getInstance(AttributableType.GROUP));\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public List<Group> findByResource(final ExternalResource resource) {\n-        return (List<Group>) findByResource(resource, attrUtilsFactory.getInstance(AttributableType.GROUP));\n-    }\n-\n-    @Override\n-    public final List<Group> findAll(final Set<String> adminRealms, final int page, final int itemsPerPage) {\n-        return findAll(adminRealms, page, itemsPerPage, Collections.<OrderByClause>emptyList());\n-    }\n-\n-    @Override\n-    public List<Group> findAll(final Set<String> adminRealms,\n-            final int page, final int itemsPerPage, final List<OrderByClause> orderBy) {\n-\n-        return searchDAO.search(adminRealms, getAllMatchingCond(), page, itemsPerPage, orderBy, SubjectType.GROUP);\n-    }\n-\n-    @Override\n-    public final int count(final Set<String> adminRealms) {\n-        return searchDAO.count(adminRealms, getAllMatchingCond(), SubjectType.GROUP);\n-    }\n-\n-    @Override\n-    public List<Membership> findMemberships(final Group group) {\n-        TypedQuery<Membership> query = entityManager.createQuery(\n-                \"SELECT e FROM \" + JPAMembership.class.getSimpleName() + \" e WHERE e.group=:group\", Membership.class);\n+    public List<AMembership> findAMemberships(final Group group) {\n+        TypedQuery<AMembership> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAAMembership.class.getSimpleName()\n+                + \" e WHERE e.rightEnd=:group\", AMembership.class);\n         query.setParameter(\"group\", group);\n \n         return query.getResultList();\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    private List<Long> unmatched(final Long groupId,\n-            final Class<?> attrClass, final Class<? extends AttrTemplate<?>> attrTemplateClass) {\n-\n-        final Query query = entityManager.createNativeQuery(new StringBuilder().\n-                append(\"SELECT ma.id \").\n-                append(\"FROM \").append(JPAMembership.TABLE).append(\" m, \").\n-                append(attrClass.getSimpleName()).append(\" ma \").\n-                append(\"WHERE m.group_id = ?1 \").\n-                append(\"AND ma.owner_id = m.id \").\n-                append(\"AND ma.template_id NOT IN (\").\n-                append(\"SELECT id \").\n-                append(\"FROM \").append(attrTemplateClass.getSimpleName()).append(' ').\n-                append(\"WHERE owner_id = ?1)\").toString());\n-        query.setParameter(1, groupId);\n+    @Override\n+    public List<UMembership> findUMemberships(final Group group) {\n+        TypedQuery<UMembership> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAUMembership.class.getSimpleName()\n+                + \" e WHERE e.rightEnd=:group\", UMembership.class);\n+        query.setParameter(\"group\", group);\n \n         return query.getResultList();\n     }\n \n     @Override\n     public Group save(final Group group) {\n         // refresh dynaminc memberships\n-        if (group.getDynMembership() != null) {\n-            List<User> matchingUsers = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n-                    SearchCondConverter.convert(group.getDynMembership().getFIQLCond()), SubjectType.USER);\n-\n-            group.getDynMembership().getUsers().clear();\n-            for (User user : matchingUsers) {\n-                group.getDynMembership().addUser(user);\n-            }\n-        }\n+        if (group.getADynMembership() != null) {\n+            List<AnyObject> matching = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n+                    SearchCondConverter.convert(group.getADynMembership().getFIQLCond()), AnyTypeKind.ANY_OBJECT);\n \n-        // remove plain attributes without a valid template\n-        List<GPlainAttr> rToBeDeleted = new ArrayList<>();\n-        for (final PlainAttr attr : group.getPlainAttrs()) {\n-            boolean found = CollectionUtils.exists(group.getAttrTemplates(GPlainAttrTemplate.class),\n-                    new Predicate<GPlainAttrTemplate>() {\n-\n-                        @Override\n-                        public boolean evaluate(final GPlainAttrTemplate template) {\n-                            return template.getSchema().equals(attr.getSchema());\n-                        }\n-                    });\n-            if (!found) {\n-                rToBeDeleted.add((GPlainAttr) attr);\n+            group.getADynMembership().getMembers().clear();\n+            for (AnyObject anyObject : matching) {\n+                group.getADynMembership().add(anyObject);\n             }\n         }\n-        for (GPlainAttr attr : rToBeDeleted) {\n-            LOG.debug(\"Removing {} from {} because no template is available for it\", attr, group);\n-            group.removePlainAttr(attr);\n-        }\n+        if (group.getUDynMembership() != null) {\n+            List<User> matching = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n+                    SearchCondConverter.convert(group.getUDynMembership().getFIQLCond()), AnyTypeKind.USER);\n \n-        // remove derived attributes without a valid template\n-        List<GDerAttr> rDerToBeDeleted = new ArrayList<>();\n-        for (final DerAttr attr : group.getDerAttrs()) {\n-            boolean found = CollectionUtils.exists(group.getAttrTemplates(GDerAttrTemplate.class),\n-                    new Predicate<GDerAttrTemplate>() {\n-\n-                        @Override\n-                        public boolean evaluate(final GDerAttrTemplate template) {\n-                            return template.getSchema().equals(attr.getSchema());\n-                        }\n-                    });\n-            if (!found) {\n-                rDerToBeDeleted.add((GDerAttr) attr);\n+            group.getUDynMembership().getMembers().clear();\n+            for (User user : matching) {\n+                group.getUDynMembership().add(user);\n             }\n         }\n-        for (GDerAttr attr : rDerToBeDeleted) {\n-            LOG.debug(\"Removing {} from {} because no template is available for it\", attr, group);\n-            group.removeDerAttr(attr);\n-        }\n \n-        // remove virtual attributes without a valid template\n-        List<GVirAttr> rVirToBeDeleted = new ArrayList<>();\n-        for (final VirAttr attr : group.getVirAttrs()) {\n-            boolean found = CollectionUtils.exists(group.getAttrTemplates(GVirAttrTemplate.class),\n-                    new Predicate<GVirAttrTemplate>() {\n-\n-                        @Override\n-                        public boolean evaluate(final GVirAttrTemplate template) {\n-                            return template.getSchema().equals(attr.getSchema());\n-                        }\n-                    });\n-            if (!found) {\n-                LOG.debug(\"Removing {} from {} because no template is available for it\", attr, group);\n-                rVirToBeDeleted.add((GVirAttr) attr);\n-            }\n-        }\n-        for (GVirAttr attr : rVirToBeDeleted) {\n-            group.removeVirAttr(attr);\n-        }\n-\n-        Group merged = entityManager.merge(group);\n-\n-        // Now the same process for any exising membership of the group being saved\n-        if (group.getKey() != null) {\n-            for (Long key : unmatched(group.getKey(), MPlainAttr.class, MPlainAttrTemplate.class)) {\n-                LOG.debug(\"Removing MAttr[{}] because no template is available for it in {}\", key, group);\n-                plainAttrDAO.delete(key, MPlainAttr.class);\n-            }\n-            for (Long id : unmatched(group.getKey(), MDerAttr.class, MDerAttrTemplate.class)) {\n-                LOG.debug(\"Removing MDerAttr[{}] because no template is available for it in {}\", id, group);\n-                derAttrDAO.delete(id, MDerAttr.class);\n-            }\n-            for (Long id : unmatched(group.getKey(), MVirAttr.class, MVirAttrTemplate.class)) {\n-                LOG.debug(\"Removing MVirAttr[{}] because no template is available for it in {}\", id, group);\n-                virAttrDAO.delete(id, MVirAttr.class);\n-            }\n-        }\n-\n-        merged = entityManager.merge(merged);\n-        for (VirAttr attr : merged.getVirAttrs()) {\n-            attr.getValues().clear();\n-            attr.getValues().addAll(group.getVirAttr(attr.getSchema().getKey()).getValues());\n-        }\n-\n-        return merged;\n+        return super.save(group);\n     }\n \n     @Override\n     public void delete(final Group group) {\n-        for (Membership membership : findMemberships(group)) {\n-            membership.getUser().removeMembership(membership);\n-            userDAO.save(membership.getUser());\n+        for (AMembership membership : findAMemberships(group)) {\n+            membership.getLeftEnd().remove(membership);\n+            anyObjectDAO.save(membership.getLeftEnd());\n+\n+            entityManager.remove(membership);\n+        }\n+        for (UMembership membership : findUMemberships(group)) {\n+            membership.getLeftEnd().remove(membership);\n+            userDAO.save(membership.getLeftEnd());\n \n             entityManager.remove(membership);\n         }\n \n         entityManager.remove(group);\n     }\n \n-    @Override\n-    public void delete(final Long key) {\n-        Group group = (Group) findInternal(key);\n-        if (group == null) {\n-            return;\n-        }\n+    private void populateTransitiveResources(\n+            final Group group, final Any<?, ?, ?> any, final Map<Long, PropagationByResource> result) {\n \n-        delete(group);\n-    }\n+        PropagationByResource propByRes = new PropagationByResource();\n+        for (ExternalResource resource : group.getResources()) {\n+            if (!any.getResources().contains(resource)) {\n+                propByRes.add(ResourceOperation.DELETE, resource.getKey());\n+            }\n \n-    @Override\n-    public Group authFetch(final Long key) {\n-        if (key == null) {\n-            throw new NotFoundException(\"Null group id\");\n+            if (!propByRes.isEmpty()) {\n+                result.put(any.getKey(), propByRes);\n+            }\n         }\n+    }\n \n-        final Group group = find(key);\n-        if (group == null) {\n-            throw new NotFoundException(\"Group \" + key);\n-        }\n+    @Transactional(readOnly = true)\n+    @Override\n+    public Map<Long, PropagationByResource> findAnyObjectsWithTransitiveResources(final Long groupKey) {\n+        Group group = authFind(groupKey);\n \n-        Set<String> authRealms = AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_READ);\n-        boolean authorized = CollectionUtils.exists(authRealms, new Predicate<String>() {\n+        Map<Long, PropagationByResource> result = new HashMap<>();\n \n-            @Override\n-            public boolean evaluate(final String realm) {\n-                return group.getRealm().getFullPath().startsWith(realm)\n-                        || realm.equals(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey()));\n-            }\n-        });\n-        if (authRealms == null || authRealms.isEmpty() || !authorized) {\n-            throw new UnauthorizedException(SubjectType.GROUP, group.getKey());\n+        for (AMembership membership : findAMemberships(group)) {\n+            populateTransitiveResources(group, membership.getLeftEnd(), result);\n         }\n \n-        return group;\n+        return result;\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n-    public Map<Long, PropagationByResource> findUsersWithIndirectResources(final Long groupKey) {\n-        Group group = authFetch(groupKey);\n+    public Map<Long, PropagationByResource> findUsersWithTransitiveResources(final Long groupKey) {\n+        Group group = authFind(groupKey);\n \n         Map<Long, PropagationByResource> result = new HashMap<>();\n \n-        for (Membership membership : findMemberships(group)) {\n-            User user = membership.getUser();\n+        for (UMembership membership : findUMemberships(group)) {\n+            populateTransitiveResources(group, membership.getLeftEnd(), result);\n+        }\n+\n+        return result;\n+    }\n \n-            PropagationByResource propByRes = new PropagationByResource();\n-            for (ExternalResource resource : group.getResources()) {\n-                if (!user.getResources().contains(resource)) {\n-                    propByRes.add(ResourceOperation.DELETE, resource.getKey());\n-                }\n+    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n+    @Override\n+    public void refreshDynMemberships(final AnyObject anyObject) {\n+        for (Group role : findAll(SyncopeConstants.FULL_ADMIN_REALMS, -1, -1)) {\n+            if (role.getADynMembership() != null && !searchDAO.matches(anyObject,\n+                    SearchCondConverter.convert(role.getADynMembership().getFIQLCond()), AnyTypeKind.ANY_OBJECT)) {\n \n-                if (!propByRes.isEmpty()) {\n-                    result.put(user.getKey(), propByRes);\n-                }\n+                role.getADynMembership().remove(anyObject);\n             }\n         }\n-\n-        return result;\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public void refreshDynMemberships(final User user) {\n         for (Group role : findAll(SyncopeConstants.FULL_ADMIN_REALMS, -1, -1)) {\n-            if (role.getDynMembership() != null && !searchDAO.matches(user,\n-                    SearchCondConverter.convert(role.getDynMembership().getFIQLCond()), SubjectType.USER)) {\n+            if (role.getUDynMembership() != null && !searchDAO.matches(user,\n+                    SearchCondConverter.convert(role.getUDynMembership().getFIQLCond()), AnyTypeKind.USER)) {\n \n-                role.getDynMembership().removeUser(user);\n+                role.getUDynMembership().remove(user);\n             }\n         }\n     }"},{"sha":"998f68080f4131db284ea42358cd89b142f60ae4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAMembershipDAO.java","status":"removed","additions":0,"deletions":104,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAMembershipDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAMembershipDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAMembershipDAO.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,104 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.dao;\n-\n-import java.util.List;\n-import javax.persistence.NoResultException;\n-import javax.persistence.Query;\n-import javax.persistence.TypedQuery;\n-import org.apache.syncope.core.persistence.api.dao.MembershipDAO;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMembership;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Repository;\n-\n-@Repository\n-public class JPAMembershipDAO extends AbstractDAO<Membership, Long> implements MembershipDAO {\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    @Override\n-    public Membership find(final Long key) {\n-        return entityManager.find(JPAMembership.class, key);\n-    }\n-\n-    @Override\n-    public Membership find(final User user, final Group group) {\n-        Query query = entityManager.createQuery(\n-                \"SELECT e FROM \" + JPAMembership.class.getSimpleName()\n-                + \" e WHERE e.user = :user AND e.group = :group\");\n-        query.setParameter(\"user\", user);\n-        query.setParameter(\"group\", group);\n-\n-        Membership result = null;\n-\n-        try {\n-            result = (Membership) query.getSingleResult();\n-        } catch (NoResultException e) {\n-            LOG.debug(\"No membership was found for user {} and group {}\", user, group, e);\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public List<Membership> findAll() {\n-        TypedQuery<Membership> query = entityManager.createQuery(\n-                \"SELECT e FROM \" + JPAMembership.class.getSimpleName() + \" e\", Membership.class);\n-        return query.getResultList();\n-    }\n-\n-    @Override\n-    public Membership save(final Membership membership) {\n-        return entityManager.merge(membership);\n-    }\n-\n-    @Override\n-    public void delete(final Long key) {\n-        Membership membership = find(key);\n-        if (membership == null) {\n-            return;\n-        }\n-\n-        membership.getUser().removeMembership(membership);\n-        userDAO.save(membership.getUser());\n-\n-        entityManager.remove(membership);\n-    }\n-\n-    @Override\n-    public Membership authFetch(final Long key) {\n-        if (key == null) {\n-            throw new NotFoundException(\"Null membership key\");\n-        }\n-\n-        Membership membership = find(key);\n-        if (membership == null) {\n-            throw new NotFoundException(\"Membership \" + key);\n-        }\n-\n-        return membership;\n-    }\n-\n-}"},{"sha":"5e232fdb81c4c30853077f0689b83487657c9a96","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrDAO.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -19,43 +19,43 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n-import org.apache.syncope.core.persistence.api.entity.Attributable;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttr;\n import org.springframework.stereotype.Repository;\n \n @Repository\n-public class JPAPlainAttrDAO extends AbstractDAO<PlainAttr, Long> implements PlainAttrDAO {\n+public class JPAPlainAttrDAO extends AbstractDAO<PlainAttr<?>, Long> implements PlainAttrDAO {\n \n-    public <T extends PlainAttr> Class<? extends AbstractPlainAttr> getJPAEntityReference(\n+    public <T extends PlainAttr<?>> Class<? extends AbstractPlainAttr<?>> getJPAEntityReference(\n             final Class<T> reference) {\n \n         return CPlainAttr.class.isAssignableFrom(reference)\n                 ? JPACPlainAttr.class\n                 : GPlainAttr.class.isAssignableFrom(reference)\n                         ? JPAGPlainAttr.class\n-                        : MPlainAttr.class.isAssignableFrom(reference)\n-                                ? JPAMPlainAttr.class\n+                        : APlainAttr.class.isAssignableFrom(reference)\n+                                ? JPAAPlainAttr.class\n                                 : UPlainAttr.class.isAssignableFrom(reference)\n                                         ? JPAUPlainAttr.class\n                                         : null;\n     }\n \n     @Override\n-    public <T extends PlainAttr> T find(final Long key, final Class<T> reference) {\n+    public <T extends PlainAttr<?>> T find(final Long key, final Class<T> reference) {\n         return reference.cast(entityManager.find(getJPAEntityReference(reference), key));\n     }\n \n     @Override\n-    public <T extends PlainAttr> void delete(final Long key, final Class<T> reference) {\n+    public <T extends PlainAttr<?>> void delete(final Long key, final Class<T> reference) {\n         T attribute = find(key, reference);\n         if (attribute == null) {\n             return;\n@@ -66,9 +66,9 @@ public <T extends PlainAttr> void delete(final Long key, final Class<T> referenc\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public <T extends PlainAttr> void delete(final T plainAttr) {\n+    public <T extends PlainAttr<?>> void delete(final T plainAttr) {\n         if (plainAttr.getOwner() != null) {\n-            ((Attributable<T, ?, ?>) plainAttr.getOwner()).removePlainAttr(plainAttr);\n+            ((Any<T, ?, ?>) plainAttr.getOwner()).remove(plainAttr);\n         }\n \n         entityManager.remove(plainAttr);"},{"sha":"655decdc6d57214f9cc33bc46b72c2b548af105c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrValueDAO.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -22,19 +22,19 @@\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttrUniqueValue;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttrValue;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMPlainAttrUniqueValue;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrUniqueValue;\n@@ -55,10 +55,10 @@ private <T extends PlainAttrValue> Class<? extends AbstractPlainAttrValue> getJP\n                                 ? JPAGPlainAttrValue.class\n                                 : reference.equals(GPlainAttrUniqueValue.class)\n                                         ? JPAGPlainAttrUniqueValue.class\n-                                        : reference.equals(MPlainAttrValue.class)\n-                                                ? JPAMPlainAttrValue.class\n-                                                : reference.equals(MPlainAttrUniqueValue.class)\n-                                                        ? JPAMPlainAttrUniqueValue.class\n+                                        : reference.equals(APlainAttrValue.class)\n+                                                ? JPAAPlainAttrValue.class\n+                                                : reference.equals(APlainAttrUniqueValue.class)\n+                                                        ? JPAAPlainAttrUniqueValue.class\n                                                         : reference.equals(UPlainAttrValue.class)\n                                                                 ? JPAUPlainAttrValue.class\n                                                                 : reference.equals(UPlainAttrUniqueValue.class)\n@@ -96,7 +96,7 @@ public <T extends PlainAttrValue> void delete(final Long id, final Class<T> refe\n     @Override\n     public <T extends PlainAttrValue> void delete(final T attrValue) {\n         if (attrValue.getAttr() != null) {\n-            attrValue.getAttr().removeValue(attrValue);\n+            attrValue.getAttr().remove(attrValue);\n         }\n \n         entityManager.remove(attrValue);"},{"sha":"a9229466c810abc32d8a7df4d71ba46350a4747d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java","status":"modified","additions":22,"deletions":73,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,29 +20,16 @@\n \n import java.util.List;\n import javax.persistence.TypedQuery;\n-import org.apache.commons.collections4.Closure;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.syncope.common.lib.types.AttributableType;\n-import org.apache.syncope.core.persistence.api.dao.AttrTemplateDAO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.conf.CPlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.group.GMappingItem;\n-import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.GPlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.user.UMappingItem;\n-import org.apache.syncope.core.persistence.api.entity.user.UPlainSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMPlainSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainSchema;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n \n@@ -52,47 +39,26 @@ public class JPAPlainSchemaDAO extends AbstractDAO<PlainSchema, String> implemen\n     @Autowired\n     private PlainAttrDAO plainAttrDAO;\n \n-    @Autowired\n-    private AttrTemplateDAO<PlainSchema> attrTemplateDAO;\n-\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n-    private <T extends PlainSchema> Class<? extends AbstractPlainSchema> getJPAEntityReference(\n-            final Class<T> reference) {\n-\n-        return CPlainSchema.class.isAssignableFrom(reference)\n-                ? JPACPlainSchema.class\n-                : GPlainSchema.class.isAssignableFrom(reference)\n-                        ? JPAGPlainSchema.class\n-                        : MPlainSchema.class.isAssignableFrom(reference)\n-                                ? JPAMPlainSchema.class\n-                                : UPlainSchema.class.isAssignableFrom(reference)\n-                                        ? JPAUPlainSchema.class\n-                                        : null;\n-    }\n-\n     @Override\n-    public <T extends PlainSchema> T find(final String key, final Class<T> reference) {\n-        return reference.cast(entityManager.find(getJPAEntityReference(reference), key));\n+    public PlainSchema find(final String key) {\n+        return entityManager.find(JPAPlainSchema.class, key);\n     }\n \n     @Override\n-    public <T extends PlainSchema> List<T> findAll(final Class<T> reference) {\n-        TypedQuery<T> query = entityManager.createQuery(\n-                \"SELECT e FROM \" + getJPAEntityReference(reference).getSimpleName() + \" e\", reference);\n+    public List<PlainSchema> findAll() {\n+        TypedQuery<PlainSchema> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAPlainSchema.class.getSimpleName() + \" e\", PlainSchema.class);\n         return query.getResultList();\n     }\n \n     @Override\n-    public <T extends PlainAttr> List<T> findAttrs(final PlainSchema schema, final Class<T> reference) {\n-        final StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n+    public <T extends PlainAttr<?>> List<T> findAttrs(final PlainSchema schema, final Class<T> reference) {\n+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n                 append(((JPAPlainAttrDAO) plainAttrDAO).getJPAEntityReference(reference).getSimpleName()).\n-                append(\" e WHERE e.\");\n-        if (GPlainAttr.class.isAssignableFrom(reference) || MPlainAttr.class.isAssignableFrom(reference)) {\n-            queryString.append(\"template.\");\n-        }\n-        queryString.append(\"schema=:schema\");\n+                append(\" e WHERE e.schema=:schema\");\n \n         TypedQuery<T> query = entityManager.createQuery(queryString.toString(), reference);\n         query.setParameter(\"schema\", schema);\n@@ -101,45 +67,28 @@ public <T extends PlainAttr> List<T> findAttrs(final PlainSchema schema, final C\n     }\n \n     @Override\n-    public <T extends PlainSchema> T save(final T schema) {\n+    public PlainSchema save(final PlainSchema schema) {\n         return entityManager.merge(schema);\n     }\n \n     @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public void delete(final String key, final AttributableUtils attributableUtil) {\n-        PlainSchema schema = find(key, attributableUtil.plainSchemaClass());\n+    public void delete(final String key) {\n+        PlainSchema schema = find(key);\n         if (schema == null) {\n             return;\n         }\n \n-        CollectionUtils.forAllDo(findAttrs(schema, attributableUtil.plainAttrClass()), new Closure<PlainAttr>() {\n+        AnyUtilsFactory anyUtilsFactory = new JPAAnyUtilsFactory();\n+        for (AnyTypeKind anyTypeKind : AnyTypeKind.values()) {\n+            AnyUtils anyUtils = anyUtilsFactory.getInstance(anyTypeKind);\n \n-            @Override\n-            public void execute(final PlainAttr input) {\n-                plainAttrDAO.delete(input.getKey(), attributableUtil.plainAttrClass());\n+            for (PlainAttr<?> attr : findAttrs(schema, anyUtils.plainAttrClass())) {\n+                plainAttrDAO.delete(attr.getKey(), anyUtils.plainAttrClass());\n             }\n \n-        });\n-\n-        if (attributableUtil.getType() == AttributableType.GROUP\n-                || attributableUtil.getType() == AttributableType.MEMBERSHIP) {\n-\n-            CollectionUtils.forAllDo(attrTemplateDAO.\n-                    findBySchemaName(schema.getKey(), attributableUtil.plainAttrTemplateClass()).iterator(),\n-                    new Closure<Number>() {\n-\n-                        @Override\n-                        public void execute(final Number input) {\n-                            attrTemplateDAO.delete(input.longValue(), attributableUtil.plainAttrTemplateClass());\n-                        }\n-\n-                    });\n+            resourceDAO.deleteMapping(key, anyUtils.plainIntMappingType());\n         }\n \n-        resourceDAO.deleteMapping(key, attributableUtil.plainIntMappingType(), UMappingItem.class);\n-        resourceDAO.deleteMapping(key, attributableUtil.plainIntMappingType(), GMappingItem.class);\n-\n         entityManager.remove(schema);\n     }\n }"},{"sha":"176cfbd674e8d60315bdea79b55b10a8237a0163","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPolicyDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.Realm;"},{"sha":"5f600b6e8e5f18bee13ee53f981341a4b6678174","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -22,10 +22,10 @@\n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n-import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -39,7 +39,7 @@\n public class JPARoleDAO extends AbstractDAO<Role, Long> implements RoleDAO {\n \n     @Autowired\n-    private SubjectSearchDAO searchDAO;\n+    private AnySearchDAO searchDAO;\n \n     @Override\n     public Role find(final Long key) {\n@@ -82,11 +82,11 @@ public Role save(final Role role) {\n         // refresh dynaminc memberships\n         if (role.getDynMembership() != null) {\n             List<User> matchingUsers = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n-                    SearchCondConverter.convert(role.getDynMembership().getFIQLCond()), SubjectType.USER);\n+                    SearchCondConverter.convert(role.getDynMembership().getFIQLCond()), AnyTypeKind.USER);\n \n-            role.getDynMembership().getUsers().clear();\n+            role.getDynMembership().getMembers().clear();\n             for (User user : matchingUsers) {\n-                role.getDynMembership().addUser(user);\n+                role.getDynMembership().add(user);\n             }\n         }\n \n@@ -113,9 +113,9 @@ public void delete(final Long key) {\n     public void refreshDynMemberships(final User user) {\n         for (Role role : findAll()) {\n             if (role.getDynMembership() != null && !searchDAO.matches(user,\n-                    SearchCondConverter.convert(role.getDynMembership().getFIQLCond()), SubjectType.USER)) {\n+                    SearchCondConverter.convert(role.getDynMembership().getFIQLCond()), AnyTypeKind.USER)) {\n \n-                role.getDynMembership().removeUser(user);\n+                role.getDynMembership().remove(user);\n             }\n         }\n     }"},{"sha":"ff930718716e423a52e98a264429857b5b5def46","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPANotificationTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPropagationTask;"},{"sha":"8c6aaa702dc6aeaa1b1f18283e777f610ecdc781","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":49,"deletions":173,"changes":222,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -30,39 +29,33 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n-import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.Entitlement;\n-import org.apache.syncope.common.lib.types.SubjectType;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.Subject;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n-import org.apache.syncope.core.persistence.api.entity.user.UDerAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.security.UnauthorizedException;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.jpa.entity.JPADynGroupMembership;\n-import org.apache.syncope.core.persistence.jpa.entity.JPADynRoleMembership;\n+import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n+import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n-public class JPAUserDAO extends AbstractSubjectDAO<UPlainAttr, UDerAttr, UVirAttr> implements UserDAO {\n+public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n \n     @Autowired\n     private GroupDAO groupDAO;\n@@ -73,57 +66,60 @@ public class JPAUserDAO extends AbstractSubjectDAO<UPlainAttr, UDerAttr, UVirAtt\n     @Resource(name = \"anonymousUser\")\n     private String anonymousUser;\n \n-    @Autowired\n-    private AttributableUtilsFactory attrUtilsFactory;\n-\n     @Override\n-    protected Subject<UPlainAttr, UDerAttr, UVirAttr> findInternal(final Long key) {\n-        return find(key);\n+    protected AnyUtils init() {\n+        return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.USER);\n     }\n \n     @Override\n-    public User find(final Long key) {\n-        TypedQuery<User> query = entityManager.createQuery(\n-                \"SELECT e FROM \" + JPAUser.class.getSimpleName() + \" e WHERE e.id = :id\", User.class);\n-        query.setParameter(\"id\", key);\n+    protected void securityChecks(final User user) {\n+        // Allows anonymous (during self-registration) and self (during self-update) to read own user,\n+        // otherwise goes through security checks to see if required entitlements are owned\n+        if (!AuthContextUtils.getAuthenticatedUsername().equals(anonymousUser)\n+                && !AuthContextUtils.getAuthenticatedUsername().equals(user.getUsername())) {\n \n-        User result = null;\n-        try {\n-            result = query.getSingleResult();\n-        } catch (NoResultException e) {\n-            LOG.debug(\"No user found with id {}\", key, e);\n-        }\n+            Set<String> authRealms = AuthContextUtils.getAuthorizations().get(Entitlement.USER_READ);\n+            boolean authorized = CollectionUtils.exists(authRealms, new Predicate<String>() {\n \n-        return result;\n+                @Override\n+                public boolean evaluate(final String realm) {\n+                    return user.getRealm().getFullPath().startsWith(realm);\n+                }\n+            });\n+            if (authRealms == null || authRealms.isEmpty() || !authorized) {\n+                throw new UnauthorizedException(AnyTypeKind.USER, user.getKey());\n+            }\n+        }\n     }\n \n+    @Transactional(readOnly = true)\n     @Override\n-    public User find(final String username) {\n-        TypedQuery<User> query = entityManager.createQuery(\"SELECT e FROM \" + JPAUser.class.getSimpleName()\n-                + \" e WHERE e.username = :username\", User.class);\n-        query.setParameter(\"username\", username);\n+    public User authFind(final String username) {\n+        if (username == null) {\n+            throw new NotFoundException(\"Null username\");\n+        }\n \n-        User result = null;\n-        try {\n-            result = query.getSingleResult();\n-        } catch (NoResultException e) {\n-            LOG.debug(\"No user found with username {}\", username, e);\n+        User user = find(username);\n+        if (user == null) {\n+            throw new NotFoundException(\"User \" + username);\n         }\n \n-        return result;\n+        securityChecks(user);\n+\n+        return user;\n     }\n \n     @Override\n-    public User findByWorkflowId(final String workflowId) {\n+    public User find(final String username) {\n         TypedQuery<User> query = entityManager.createQuery(\"SELECT e FROM \" + JPAUser.class.getSimpleName()\n-                + \" e WHERE e.workflowId = :workflowId\", User.class);\n-        query.setParameter(\"workflowId\", workflowId);\n+                + \" e WHERE e.username = :username\", User.class);\n+        query.setParameter(\"username\", username);\n \n         User result = null;\n         try {\n             result = query.getSingleResult();\n         } catch (NoResultException e) {\n-            LOG.debug(\"No user found with workflow id {}\", workflowId, e);\n+            LOG.debug(\"No user found with username {}\", username, e);\n         }\n \n         return result;\n@@ -154,54 +150,10 @@ public List<User> findBySecurityQuestion(final SecurityQuestion securityQuestion\n         return query.getResultList();\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public List<User> findByAttrValue(final String schemaName, final UPlainAttrValue attrValue) {\n-        return (List<User>) findByAttrValue(\n-                schemaName, attrValue, attrUtilsFactory.getInstance(AttributableType.USER));\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public User findByAttrUniqueValue(final String schemaName, final UPlainAttrValue attrUniqueValue) {\n-        return (User) findByAttrUniqueValue(schemaName, attrUniqueValue,\n-                attrUtilsFactory.getInstance(AttributableType.USER));\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public List<User> findByDerAttrValue(final String schemaName, final String value) {\n-        return (List<User>) findByDerAttrValue(\n-                schemaName, value, attrUtilsFactory.getInstance(AttributableType.USER));\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public List<User> findByResource(final ExternalResource resource) {\n-        return (List<User>) findByResource(resource, attrUtilsFactory.getInstance(AttributableType.USER));\n-    }\n-\n-    @Override\n-    public final List<User> findAll(final Set<String> adminRealms, final int page, final int itemsPerPage) {\n-        return findAll(adminRealms, page, itemsPerPage, Collections.<OrderByClause>emptyList());\n-    }\n-\n-    @Override\n-    public List<User> findAll(final Set<String> adminRealms,\n-            final int page, final int itemsPerPage, final List<OrderByClause> orderBy) {\n-\n-        return searchDAO.search(adminRealms, getAllMatchingCond(), page, itemsPerPage, orderBy, SubjectType.USER);\n-    }\n-\n-    @Override\n-    public final int count(final Set<String> adminRealms) {\n-        return searchDAO.count(adminRealms, getAllMatchingCond(), SubjectType.USER);\n-    }\n-\n     @Override\n     public User save(final User user) {\n         User merged = entityManager.merge(user);\n-        for (VirAttr virAttr : merged.getVirAttrs()) {\n+        for (UVirAttr virAttr : merged.getVirAttrs()) {\n             virAttr.getValues().clear();\n             virAttr.getValues().addAll(user.getVirAttr(virAttr.getSchema().getKey()).getValues());\n         }\n@@ -212,94 +164,18 @@ public User save(final User user) {\n         return merged;\n     }\n \n-    @Override\n-    public void delete(final Long key) {\n-        User user = (User) findInternal(key);\n-        if (user == null) {\n-            return;\n-        }\n-\n-        delete(user);\n-    }\n-\n     @Override\n     public void delete(final User user) {\n-        // Not calling membershipDAO.delete() here because it would try to save this user as well, thus going into\n-        // ConcurrentModificationException\n-        for (Membership membership : user.getMemberships()) {\n-            membership.setUser(null);\n-\n-            groupDAO.save(membership.getGroup());\n-            membership.setGroup(null);\n-\n-            entityManager.remove(membership);\n-        }\n-        user.getMemberships().clear();\n-\n         for (Role role : findDynRoleMemberships(user)) {\n-            role.getDynMembership().removeUser(user);\n+            role.getDynMembership().remove(user);\n         }\n         for (Group group : findDynGroupMemberships(user)) {\n-            group.getDynMembership().removeUser(user);\n+            group.getUDynMembership().remove(user);\n         }\n \n         entityManager.remove(user);\n     }\n \n-    private void securityChecks(final User user) {\n-        // Allows anonymous (during self-registration) and self (during self-update) to read own user,\n-        // otherwise goes through security checks to see if required entitlements are owned\n-        if (!AuthContextUtils.getAuthenticatedUsername().equals(anonymousUser)\n-                && !AuthContextUtils.getAuthenticatedUsername().equals(user.getUsername())) {\n-\n-            Set<String> authRealms = AuthContextUtils.getAuthorizations().get(Entitlement.USER_READ);\n-            boolean authorized = CollectionUtils.exists(authRealms, new Predicate<String>() {\n-\n-                @Override\n-                public boolean evaluate(final String realm) {\n-                    return user.getRealm().getFullPath().startsWith(realm);\n-                }\n-            });\n-            if (authRealms == null || authRealms.isEmpty() || !authorized) {\n-                throw new UnauthorizedException(SubjectType.USER, user.getKey());\n-            }\n-        }\n-    }\n-\n-    @Transactional(readOnly = true)\n-    @Override\n-    public User authFetch(final Long key) {\n-        if (key == null) {\n-            throw new NotFoundException(\"Null user id\");\n-        }\n-\n-        User user = find(key);\n-        if (user == null) {\n-            throw new NotFoundException(\"User \" + key);\n-        }\n-\n-        securityChecks(user);\n-\n-        return user;\n-    }\n-\n-    @Transactional(readOnly = true)\n-    @Override\n-    public User authFetch(final String username) {\n-        if (username == null) {\n-            throw new NotFoundException(\"Null username\");\n-        }\n-\n-        User user = find(username);\n-        if (user == null) {\n-            throw new NotFoundException(\"User \" + username);\n-        }\n-\n-        securityChecks(user);\n-\n-        return user;\n-    }\n-\n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public List<Role> findDynRoleMemberships(final User user) {\n@@ -315,7 +191,7 @@ public List<Role> findDynRoleMemberships(final User user) {\n     @Override\n     public List<Group> findDynGroupMemberships(final User user) {\n         TypedQuery<Group> query = entityManager.createQuery(\n-                \"SELECT e.group FROM \" + JPADynGroupMembership.class.getSimpleName()\n+                \"SELECT e.group FROM \" + JPAUDynGroupMembership.class.getSimpleName()\n                 + \" e WHERE :user MEMBER OF e.users\", Group.class);\n         query.setParameter(\"user\", user);\n \n@@ -332,11 +208,11 @@ public Collection<Role> findAllRoles(final User user) {\n     @Override\n     public Collection<Group> findAllGroups(final User user) {\n         return CollectionUtils.union(\n-                CollectionUtils.collect(user.getMemberships(), new Transformer<Membership, Group>() {\n+                CollectionUtils.collect(user.getMemberships(), new Transformer<UMembership, Group>() {\n \n                     @Override\n-                    public Group transform(final Membership input) {\n-                        return input.getGroup();\n+                    public Group transform(final UMembership input) {\n+                        return input.getRightEnd();\n                     }\n                 }, new ArrayList<Group>()),\n                 findDynGroupMemberships(user));"},{"sha":"3ef679138dd92adb8d41f97bf726a0aae1a5ab91","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirAttrDAO.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirAttrDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -21,51 +21,51 @@\n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.api.dao.VirAttrDAO;\n-import org.apache.syncope.core.persistence.api.entity.Attributable;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-import org.apache.syncope.core.persistence.api.entity.membership.MVirAttr;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AVirAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GVirAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractVirAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMVirAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAVirAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirAttr;\n import org.springframework.stereotype.Repository;\n \n @Repository\n-public class JPAVirAttrDAO extends AbstractDAO<VirAttr, Long> implements VirAttrDAO {\n+public class JPAVirAttrDAO extends AbstractDAO<VirAttr<?>, Long> implements VirAttrDAO {\n \n-    public <T extends VirAttr> Class<? extends AbstractVirAttr> getJPAEntityReference(\n+    public <T extends VirAttr<?>> Class<? extends AbstractVirAttr<?>> getJPAEntityReference(\n             final Class<T> reference) {\n \n         return GVirAttr.class.isAssignableFrom(reference)\n                 ? JPAGVirAttr.class\n-                : MVirAttr.class.isAssignableFrom(reference)\n-                        ? JPAMVirAttr.class\n+                : AVirAttr.class.isAssignableFrom(reference)\n+                        ? JPAAVirAttr.class\n                         : UVirAttr.class.isAssignableFrom(reference)\n                                 ? JPAUVirAttr.class\n                                 : null;\n     }\n \n     @Override\n-    public <T extends VirAttr> T find(final Long key, final Class<T> reference) {\n+    public <T extends VirAttr<?>> T find(final Long key, final Class<T> reference) {\n         return reference.cast(entityManager.find(getJPAEntityReference(reference), key));\n     }\n \n     @Override\n-    public <T extends VirAttr> List<T> findAll(final Class<T> reference) {\n+    public <T extends VirAttr<?>> List<T> findAll(final Class<T> reference) {\n         TypedQuery<T> query = entityManager.createQuery(\n                 \"SELECT e FROM \" + getJPAEntityReference(reference).getSimpleName() + \" e\", reference);\n         return query.getResultList();\n     }\n \n     @Override\n-    public <T extends VirAttr> T save(final T virAttr) {\n+    public <T extends VirAttr<?>> T save(final T virAttr) {\n         return entityManager.merge(virAttr);\n     }\n \n     @Override\n-    public <T extends VirAttr> void delete(final Long key, final Class<T> reference) {\n+    public <T extends VirAttr<?>> void delete(final Long key, final Class<T> reference) {\n         T virAttr = find(key, reference);\n         if (virAttr == null) {\n             return;\n@@ -76,9 +76,9 @@ public <T extends VirAttr> void delete(final Long key, final Class<T> reference)\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public <T extends VirAttr> void delete(final T virAttr) {\n+    public <T extends VirAttr<?>> void delete(final T virAttr) {\n         if (virAttr.getOwner() != null) {\n-            ((Attributable<?, ?, T>) virAttr.getOwner()).removeVirAttr(virAttr);\n+            ((Any<?, ?, T>) virAttr.getOwner()).remove(virAttr);\n         }\n \n         entityManager.remove(virAttr);"},{"sha":"ed4f6b63c423434b2e8e697c10a7a1dd24aa60eb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java","status":"modified","additions":21,"deletions":62,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,25 +20,16 @@\n \n import java.util.List;\n import javax.persistence.TypedQuery;\n-import org.apache.commons.collections4.Closure;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.syncope.common.lib.types.AttributableType;\n-import org.apache.syncope.core.persistence.api.dao.AttrTemplateDAO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.VirAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.membership.MVirSchema;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirSchema;\n-import org.apache.syncope.core.persistence.api.entity.user.UMappingItem;\n-import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.UVirSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractVirSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMVirSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirSchema;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAVirSchema;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n \n@@ -48,45 +39,26 @@ public class JPAVirSchemaDAO extends AbstractDAO<VirSchema, String> implements V\n     @Autowired\n     private VirAttrDAO virAttrDAO;\n \n-    @Autowired\n-    private AttrTemplateDAO<VirSchema> attrTemplateDAO;\n-\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n-    private <T extends VirSchema> Class<? extends AbstractVirSchema> getJPAEntityReference(final Class<T> reference) {\n-        return GVirSchema.class.isAssignableFrom(reference)\n-                ? JPAGVirSchema.class\n-                : MVirSchema.class.isAssignableFrom(reference)\n-                        ? JPAMVirSchema.class\n-                        : UVirSchema.class.isAssignableFrom(reference)\n-                                ? JPAUVirSchema.class\n-                                : null;\n-    }\n-\n     @Override\n-    public <T extends VirSchema> T find(final String key, final Class<T> reference) {\n-        return reference.cast(entityManager.find(getJPAEntityReference(reference), key));\n+    public VirSchema find(final String key) {\n+        return entityManager.find(JPAVirSchema.class, key);\n     }\n \n     @Override\n-    public <T extends VirSchema> List<T> findAll(final Class<T> reference) {\n-        TypedQuery<T> query = entityManager.createQuery(\n-                \"SELECT e FROM \" + getJPAEntityReference(reference).getSimpleName() + \" e\", reference);\n+    public List<VirSchema> findAll() {\n+        TypedQuery<VirSchema> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAVirSchema.class.getSimpleName() + \" e\", VirSchema.class);\n         return query.getResultList();\n     }\n \n     @Override\n-    public <T extends VirAttr> List<T> findAttrs(final VirSchema schema, final Class<T> reference) {\n+    public <T extends VirAttr<?>> List<T> findAttrs(final VirSchema schema, final Class<T> reference) {\n         final StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n                 append(((JPAVirAttrDAO) virAttrDAO).getJPAEntityReference(reference).getSimpleName()).\n-                append(\" e WHERE e.\");\n-        if (UVirAttr.class.isAssignableFrom(reference)) {\n-            queryString.append(\"virSchema\");\n-        } else {\n-            queryString.append(\"template.schema\");\n-        }\n-        queryString.append(\"=:schema\");\n+                append(\" e WHERE e.schema=:schema\");\n \n         TypedQuery<T> query = entityManager.createQuery(queryString.toString(), reference);\n         query.setParameter(\"schema\", schema);\n@@ -95,41 +67,28 @@ public <T extends VirAttr> List<T> findAttrs(final VirSchema schema, final Class\n     }\n \n     @Override\n-    public <T extends VirSchema> T save(final T virSchema) {\n+    public VirSchema save(final VirSchema virSchema) {\n         return entityManager.merge(virSchema);\n     }\n \n     @Override\n-    public void delete(final String key, final AttributableUtils attributableUtil) {\n-        final VirSchema schema = find(key, attributableUtil.virSchemaClass());\n+    public void delete(final String key) {\n+        final VirSchema schema = find(key);\n         if (schema == null) {\n             return;\n         }\n \n-        CollectionUtils.forAllDo(findAttrs(schema, attributableUtil.virAttrClass()), new Closure<VirAttr>() {\n+        AnyUtilsFactory anyUtilsFactory = new JPAAnyUtilsFactory();\n+        for (AnyTypeKind anyTypeKind : AnyTypeKind.values()) {\n+            AnyUtils anyUtils = anyUtilsFactory.getInstance(anyTypeKind);\n \n-            @Override\n-            public void execute(final VirAttr input) {\n-                virAttrDAO.delete(input.getKey(), attributableUtil.virAttrClass());\n+            for (VirAttr<?> attr : findAttrs(schema, anyUtils.virAttrClass())) {\n+                virAttrDAO.delete(attr.getKey(), anyUtils.virAttrClass());\n             }\n \n-        });\n-\n-        if (attributableUtil.getType() != AttributableType.USER) {\n-            CollectionUtils.forAllDo(attrTemplateDAO.\n-                    findBySchemaName(schema.getKey(), attributableUtil.virAttrTemplateClass()).iterator(),\n-                    new Closure<Number>() {\n-\n-                        @Override\n-                        public void execute(final Number input) {\n-                            attrTemplateDAO.delete(input.longValue(), attributableUtil.virAttrTemplateClass());\n-                        }\n-\n-                    });\n+            resourceDAO.deleteMapping(key, anyUtils.virIntMappingType());\n         }\n \n-        resourceDAO.deleteMapping(key, attributableUtil.virIntMappingType(), UMappingItem.class);\n-\n         entityManager.remove(schema);\n     }\n }"},{"sha":"77be714596a5f840226453ddc2f1ce15e480c23b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchSupport.java","status":"modified","additions":21,"deletions":10,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,8 +20,8 @@\n \n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n-import org.apache.syncope.common.lib.types.SubjectType;\n \n class SearchSupport {\n \n@@ -47,10 +47,10 @@ public int hashCode() {\n         }\n     }\n \n-    private final SubjectType subjectType;\n+    private final AnyTypeKind anyTypeKind;\n \n-    public SearchSupport(final SubjectType subjectType) {\n-        this.subjectType = subjectType;\n+    public SearchSupport(final AnyTypeKind anyTypeKind) {\n+        this.anyTypeKind = anyTypeKind;\n     }\n \n     public String fieldName(final AttrSchemaType attrSchemaType) {\n@@ -88,15 +88,19 @@ public String fieldName(final AttrSchemaType attrSchemaType) {\n     public SearchView field() {\n         String result = \"\";\n \n-        switch (subjectType) {\n-            case USER:\n-            default:\n-                result = \"user_search\";\n+        switch (anyTypeKind) {\n+            case ANY_OBJECT:\n+                result = \"anyObject_search\";\n                 break;\n \n             case GROUP:\n                 result = \"group_search\";\n                 break;\n+\n+            case USER:\n+            default:\n+                result = \"user_search\";\n+                break;\n         }\n \n         return new SearchView(\"sv\", result);\n@@ -106,12 +110,19 @@ public SearchView attr() {\n         return new SearchView(\"sva\", field().name + \"_attr\");\n     }\n \n+    public SearchView relationship() {\n+        String kind = anyTypeKind == AnyTypeKind.USER ? \"u\" : \"a\";\n+        return new SearchView(\"sv\" + kind + \"m\", field().name + \"_\" + kind + \"relationship\");\n+    }\n+\n     public SearchView membership() {\n-        return new SearchView(\"svm\", field().name + \"_membership\");\n+        String kind = anyTypeKind == AnyTypeKind.USER ? \"u\" : \"a\";\n+        return new SearchView(\"sv\" + kind + \"m\", field().name + \"_\" + kind + \"membership\");\n     }\n \n     public SearchView dyngroupmembership() {\n-        return new SearchView(\"svdg\", field().name + \"_dyngroupmembership\");\n+        String kind = anyTypeKind == AnyTypeKind.USER ? \"u\" : \"a\";\n+        return new SearchView(\"sv\" + kind + \"dgm\", field().name + \"_\" + kind + \"dyngroupmembership\");\n     }\n \n     public SearchView role() {"},{"sha":"161927cab2f1c36da44024848b1cab614c1f3609","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractAny.java","status":"added","additions":149,"deletions":0,"changes":149,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Column;\n+import javax.persistence.FetchType;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.MappedSuperclass;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.DerAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.VirAttr;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+\n+@MappedSuperclass\n+public abstract class AbstractAny<P extends PlainAttr<?>, D extends DerAttr<?>, V extends VirAttr<?>>\n+        extends AbstractAnnotatedEntity<Long>\n+        implements Any<P, D, V> {\n+\n+    private static final long serialVersionUID = -2666540708092702810L;\n+\n+    @ManyToOne(fetch = FetchType.EAGER, optional = false)\n+    private JPARealm realm;\n+\n+    private String workflowId;\n+\n+    @Column(nullable = true)\n+    private String status;\n+\n+    @Override\n+    public Realm getRealm() {\n+        return realm;\n+    }\n+\n+    @Override\n+    public void setRealm(final Realm realm) {\n+        checkType(realm, JPARealm.class);\n+        this.realm = (JPARealm) realm;\n+    }\n+\n+    @Override\n+    public String getWorkflowId() {\n+        return workflowId;\n+    }\n+\n+    @Override\n+    public void setWorkflowId(final String workflowId) {\n+        this.workflowId = workflowId;\n+    }\n+\n+    @Override\n+    public String getStatus() {\n+        return status;\n+    }\n+\n+    @Override\n+    public void setStatus(final String status) {\n+        this.status = status;\n+    }\n+\n+    @Override\n+    public P getPlainAttr(final String plainSchemaName) {\n+        return CollectionUtils.find(getPlainAttrs(), new Predicate<P>() {\n+\n+            @Override\n+            public boolean evaluate(final P plainAttr) {\n+                return plainAttr != null && plainAttr.getSchema() != null\n+                        && plainSchemaName.equals(plainAttr.getSchema().getKey());\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public D getDerAttr(final String derSchemaName) {\n+        return CollectionUtils.find(getDerAttrs(), new Predicate<D>() {\n+\n+            @Override\n+            public boolean evaluate(final D derAttr) {\n+                return derAttr != null && derAttr.getSchema() != null\n+                        && derSchemaName.equals(derAttr.getSchema().getKey());\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public V getVirAttr(final String virSchemaName) {\n+        return CollectionUtils.find(getVirAttrs(), new Predicate<V>() {\n+\n+            @Override\n+            public boolean evaluate(final V virAttr) {\n+                return virAttr != null && virAttr.getSchema() != null\n+                        && virSchemaName.equals(virAttr.getSchema().getKey());\n+            }\n+        });\n+    }\n+\n+    protected abstract List<JPAExternalResource> internalGetResources();\n+\n+    @Override\n+    public boolean add(final ExternalResource resource) {\n+        checkType(resource, JPAExternalResource.class);\n+        return internalGetResources().add((JPAExternalResource) resource);\n+    }\n+\n+    @Override\n+    public boolean remove(final ExternalResource resource) {\n+        checkType(resource, JPAExternalResource.class);\n+        return internalGetResources().remove((JPAExternalResource) resource);\n+    }\n+\n+    @Override\n+    public List<String> getResourceNames() {\n+        return CollectionUtils.collect(getResources(), new Transformer<ExternalResource, String>() {\n+\n+            @Override\n+            public String transform(final ExternalResource input) {\n+                return input.getKey();\n+            }\n+        }, new ArrayList<String>());\n+    }\n+\n+    @Override\n+    public List<? extends ExternalResource> getResources() {\n+        return internalGetResources();\n+    }\n+}"},{"sha":"f2a32a10c29cc50ce546bac33bf448378e18425b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractAttrTemplate.java","status":"removed","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttrTemplate.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,28 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import org.apache.syncope.core.persistence.api.entity.AttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.Schema;\n-\n-public abstract class AbstractAttrTemplate<S extends Schema> extends AbstractEntity<Long> implements AttrTemplate<S> {\n-\n-    private static final long serialVersionUID = 4829112252713766666L;\n-\n-}"},{"sha":"b2e2b347c5b070f004585b1245fb882af27bcc78","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractAttributable.java","status":"removed","additions":0,"deletions":68,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttributable.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,68 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n-import org.apache.syncope.core.persistence.api.entity.Attributable;\n-import org.apache.syncope.core.persistence.api.entity.DerAttr;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-\n-public abstract class AbstractAttributable<P extends PlainAttr, D extends DerAttr, V extends VirAttr>\n-        extends AbstractAnnotatedEntity<Long> implements Attributable<P, D, V> {\n-\n-    private static final long serialVersionUID = -4801685541488201119L;\n-\n-    @Override\n-    public P getPlainAttr(final String plainSchemaName) {\n-        return CollectionUtils.find(getPlainAttrs(), new Predicate<P>() {\n-\n-            @Override\n-            public boolean evaluate(final P plainAttr) {\n-                return plainAttr != null && plainAttr.getSchema() != null\n-                        && plainSchemaName.equals(plainAttr.getSchema().getKey());\n-            }\n-        });\n-    }\n-\n-    @Override\n-    public D getDerAttr(final String derSchemaName) {\n-        return CollectionUtils.find(getDerAttrs(), new Predicate<D>() {\n-\n-            @Override\n-            public boolean evaluate(final D derAttr) {\n-                return derAttr != null && derAttr.getSchema() != null\n-                        && derSchemaName.equals(derAttr.getSchema().getKey());\n-            }\n-        });\n-    }\n-\n-    @Override\n-    public V getVirAttr(final String virSchemaName) {\n-        return CollectionUtils.find(getVirAttrs(), new Predicate<V>() {\n-\n-            @Override\n-            public boolean evaluate(final V virAttr) {\n-                return virAttr != null && virAttr.getSchema() != null\n-                        && virSchemaName.equals(virAttr.getSchema().getKey());\n-            }\n-        });\n-    }\n-}"},{"sha":"60dae3c26fd6bae15b215d43089279b1cb4e27f8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractDerAttr.java","status":"modified","additions":22,"deletions":2,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -19,34 +19,54 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import java.util.Collection;\n+import javax.persistence.Column;\n+import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n import javax.persistence.MappedSuperclass;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n \n @MappedSuperclass\n-public abstract class AbstractDerAttr extends AbstractEntity<Long> implements DerAttr {\n+public abstract class AbstractDerAttr<O extends Any<?, ?, ?>> extends AbstractEntity<Long> implements DerAttr<O> {\n \n     private static final long serialVersionUID = 4740924251090424771L;\n \n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     protected Long id;\n \n+    @ManyToOne(fetch = FetchType.EAGER)\n+    @Column(name = \"schema_name\")\n+    private JPADerSchema schema;\n+\n     @Override\n     public Long getKey() {\n         return id;\n     }\n \n+    @Override\n+    public DerSchema getSchema() {\n+        return schema;\n+    }\n+\n+    @Override\n+    public void setSchema(final DerSchema derSchema) {\n+        checkType(derSchema, JPADerSchema.class);\n+        this.schema = (JPADerSchema) derSchema;\n+    }\n+\n     /**\n      * @param attributes the set of attributes against which evaluate this derived attribute\n      * @return the value of this derived attribute\n      */\n     @Override\n-    public String getValue(final Collection<? extends PlainAttr> attributes) {\n+    public String getValue(final Collection<? extends PlainAttr<?>> attributes) {\n         return JexlUtils.evaluate(getSchema().getExpression(), getOwner(), attributes);\n     }\n }"},{"sha":"3846b1248e484ff7c8ee9507e9d3452dae34e7ec","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractDerAttrTemplate.java","status":"removed","additions":0,"deletions":41,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttrTemplate.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,41 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n-import javax.persistence.Id;\n-import javax.persistence.MappedSuperclass;\n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-\n-@MappedSuperclass\n-public abstract class AbstractDerAttrTemplate<D extends DerSchema> extends AbstractAttrTemplate<D> {\n-\n-    private static final long serialVersionUID = 8871895736733379865L;\n-\n-    @Id\n-    @GeneratedValue(strategy = GenerationType.AUTO)\n-    protected Long id;\n-\n-    @Override\n-    public Long getKey() {\n-        return id;\n-    }\n-\n-}"},{"sha":"c5404e90ffd61290b154da27739cf49ab23fbe16","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractDynMembership.java","status":"modified","additions":3,"deletions":23,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDynMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDynMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDynMembership.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,15 +18,14 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n-import java.util.List;\n import javax.persistence.MappedSuperclass;\n import javax.validation.constraints.NotNull;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.DynMembership;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n \n @MappedSuperclass\n-public abstract class AbstractDynMembership extends AbstractEntity<Long> implements DynMembership {\n+public abstract class AbstractDynMembership<A extends Any<?, ?, ?>>\n+        extends AbstractEntity<Long> implements DynMembership<A> {\n \n     private static final long serialVersionUID = 921821654690948787L;\n \n@@ -43,23 +42,4 @@ public void setFIQLCond(final String fiql) {\n         this.fiql = fiql;\n     }\n \n-    protected abstract List<JPAUser> internalGetUsers();\n-\n-    @Override\n-    public boolean addUser(final User user) {\n-        checkType(user, JPAUser.class);\n-        return internalGetUsers().add((JPAUser) user);\n-    }\n-\n-    @Override\n-    public boolean removeUser(final User user) {\n-        checkType(user, JPAUser.class);\n-        return internalGetUsers().remove((JPAUser) user);\n-    }\n-\n-    @Override\n-    public List<? extends User> getUsers() {\n-        return internalGetUsers();\n-    }\n-\n }"},{"sha":"4481d3edd5254d26013e2833fd5129367f3ed93a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractMapping.java","status":"removed","additions":0,"deletions":78,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractMapping.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,78 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import javax.persistence.Cacheable;\n-import javax.persistence.MappedSuperclass;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n-import org.apache.syncope.core.persistence.api.entity.Mapping;\n-import org.apache.syncope.core.persistence.api.entity.MappingItem;\n-\n-@MappedSuperclass\n-@Cacheable\n-public abstract class AbstractMapping<T extends MappingItem> extends AbstractEntity<Long> implements Mapping<T> {\n-\n-    private static final long serialVersionUID = 4316047254916259158L;\n-\n-    /**\n-     * A JEXL expression for determining how to find the account id in external resource's space.\n-     */\n-    private String accountLink;\n-\n-    @Override\n-    public String getAccountLink() {\n-        return accountLink;\n-    }\n-\n-    @Override\n-    public void setAccountLink(final String accountLink) {\n-        this.accountLink = accountLink;\n-    }\n-\n-    @Override\n-    public T getAccountIdItem() {\n-        return CollectionUtils.find(getItems(), new Predicate<T>() {\n-\n-            @Override\n-            public boolean evaluate(final T item) {\n-                return item.isAccountid();\n-            }\n-        });\n-    }\n-\n-    protected boolean addAccountIdItem(final T accountIdItem) {\n-        if (IntMappingType.UserVirtualSchema == accountIdItem.getIntMappingType()\n-                || IntMappingType.GroupVirtualSchema == accountIdItem.getIntMappingType()\n-                || IntMappingType.MembershipVirtualSchema == accountIdItem.getIntMappingType()\n-                || IntMappingType.Password == accountIdItem.getIntMappingType()) {\n-\n-            throw new IllegalArgumentException(\"Virtual attributes cannot be set as accountId\");\n-        }\n-        if (IntMappingType.Password == accountIdItem.getIntMappingType()) {\n-            throw new IllegalArgumentException(\"Password attributes cannot be set as accountId\");\n-        }\n-\n-        accountIdItem.setExtAttrName(accountIdItem.getExtAttrName());\n-        accountIdItem.setAccountid(true);\n-\n-        return this.addItem(accountIdItem);\n-    }\n-}"},{"sha":"a93cc453d6686a6f907dd502a4d993745b0d175b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttr.java","status":"modified","additions":37,"deletions":12,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -21,33 +21,45 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import javax.persistence.Column;\n+import javax.persistence.FetchType;\n+import javax.persistence.ManyToOne;\n import javax.persistence.MappedSuperclass;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.jpa.validation.entity.PlainAttrCheck;\n \n @MappedSuperclass\n @PlainAttrCheck\n-public abstract class AbstractPlainAttr extends AbstractEntity<Long> implements PlainAttr {\n+public abstract class AbstractPlainAttr<O extends Any<?, ?, ?>> extends AbstractEntity<Long> implements PlainAttr<O> {\n \n     private static final long serialVersionUID = -9115431608821806124L;\n \n-    protected abstract boolean addValue(PlainAttrValue attrValue);\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    @Column(name = \"schema_name\")\n+    private JPAPlainSchema schema;\n \n     @Override\n-    public void addValue(final String value, final AttributableUtils attributableUtil) {\n-        PlainAttrValue attrValue;\n-        if (getSchema().isUniqueConstraint()) {\n-            attrValue = attributableUtil.newPlainAttrUniqueValue();\n-            ((PlainAttrUniqueValue) attrValue).setSchema(getSchema());\n-        } else {\n-            attrValue = attributableUtil.newPlainAttrValue();\n-        }\n+    public PlainSchema getSchema() {\n+        return schema;\n+    }\n+\n+    @Override\n+    public void setSchema(final PlainSchema schema) {\n+        checkType(schema, JPAPlainSchema.class);\n+        this.schema = (JPAPlainSchema) schema;\n+    }\n+\n+    protected abstract boolean addForMultiValue(PlainAttrValue attrValue);\n \n+    @Override\n+    public void add(final String value, final PlainAttrValue attrValue) {\n         attrValue.setAttr(this);\n         getSchema().getValidator().validate(value, attrValue);\n \n@@ -57,8 +69,21 @@ public void addValue(final String value, final AttributableUtils attributableUti\n             if (!getSchema().isMultivalue()) {\n                 getValues().clear();\n             }\n-            addValue(attrValue);\n+            addForMultiValue(attrValue);\n+        }\n+    }\n+\n+    @Override\n+    public void add(final String value, final AnyUtils anyUtils) {\n+        PlainAttrValue attrValue;\n+        if (getSchema().isUniqueConstraint()) {\n+            attrValue = anyUtils.newPlainAttrUniqueValue();\n+            ((PlainAttrUniqueValue) attrValue).setSchema(getSchema());\n+        } else {\n+            attrValue = anyUtils.newPlainAttrValue();\n         }\n+\n+        add(value, attrValue);\n     }\n \n     @Override"},{"sha":"a6777a13d8aecb09a207d40812087d0e32331513","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttrTemplate.java","status":"removed","additions":0,"deletions":27,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrTemplate.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,27 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-\n-public abstract class AbstractPlainAttrTemplate<P extends PlainSchema> extends AbstractAttrTemplate<P> {\n-\n-    private static final long serialVersionUID = -943169893494860655L;\n-\n-}"},{"sha":"166309f235c5bc9936b7131e2cdc8c945b02a305","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractSubject.java","status":"removed","additions":0,"deletions":85,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractSubject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractSubject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractSubject.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,85 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import java.util.HashSet;\n-import java.util.Set;\n-import javax.persistence.FetchType;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.MappedSuperclass;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n-import org.apache.syncope.core.persistence.api.entity.DerAttr;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.Subject;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-\n-@MappedSuperclass\n-public abstract class AbstractSubject<P extends PlainAttr, D extends DerAttr, V extends VirAttr>\n-        extends AbstractAttributable<P, D, V> implements Subject<P, D, V> {\n-\n-    private static final long serialVersionUID = -6876467491398928855L;\n-\n-    @ManyToOne(fetch = FetchType.EAGER, optional = false)\n-    protected JPARealm realm;\n-\n-    @Override\n-    public Realm getRealm() {\n-        return realm;\n-    }\n-\n-    @Override\n-    public void setRealm(final Realm realm) {\n-        checkType(realm, JPARealm.class);\n-        this.realm = (JPARealm) realm;\n-    }\n-\n-    protected abstract Set<JPAExternalResource> internalGetResources();\n-\n-    @Override\n-    public boolean addResource(final ExternalResource resource) {\n-        checkType(resource, JPAExternalResource.class);\n-        return internalGetResources().add((JPAExternalResource) resource);\n-    }\n-\n-    @Override\n-    public boolean removeResource(final ExternalResource resource) {\n-        checkType(resource, JPAExternalResource.class);\n-        return internalGetResources().remove((JPAExternalResource) resource);\n-    }\n-\n-    @Override\n-    public Set<? extends ExternalResource> getResources() {\n-        return internalGetResources();\n-    }\n-\n-    @Override\n-    public Set<String> getResourceNames() {\n-        return CollectionUtils.collect(getResources(), new Transformer<ExternalResource, String>() {\n-\n-            @Override\n-            public String transform(final ExternalResource input) {\n-                return input.getKey();\n-            }\n-        }, new HashSet<String>());\n-    }\n-\n-}"},{"sha":"1ed64f3b3ea6e73d9626b5618d0c4c860692cfdd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractVirAttr.java","status":"modified","additions":23,"deletions":4,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -20,16 +20,20 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-\n+import javax.persistence.Column;\n+import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n import javax.persistence.MappedSuperclass;\n import javax.persistence.Transient;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n \n @MappedSuperclass\n-public abstract class AbstractVirAttr extends AbstractEntity<Long> implements VirAttr {\n+public abstract class AbstractVirAttr<O extends Any<?, ?, ?>> extends AbstractEntity<Long> implements VirAttr<O> {\n \n     private static final long serialVersionUID = 5023204776925954907L;\n \n@@ -40,6 +44,10 @@ public abstract class AbstractVirAttr extends AbstractEntity<Long> implements Vi\n     @Transient\n     protected List<String> values = new ArrayList<>();\n \n+    @ManyToOne(fetch = FetchType.EAGER)\n+    @Column(name = \"schema_name\")\n+    private JPAVirSchema schema;\n+\n     @Override\n     public Long getKey() {\n         return id;\n@@ -51,12 +59,23 @@ public List<String> getValues() {\n     }\n \n     @Override\n-    public boolean addValue(final String value) {\n+    public boolean add(final String value) {\n         return !values.contains(value) && values.add(value);\n     }\n \n     @Override\n-    public boolean removeValue(final String value) {\n+    public boolean remove(final String value) {\n         return values.remove(value);\n     }\n+\n+    @Override\n+    public VirSchema getSchema() {\n+        return schema;\n+    }\n+\n+    @Override\n+    public void setSchema(final VirSchema virSchema) {\n+        checkType(virSchema, JPAVirSchema.class);\n+        this.schema = (JPAVirSchema) virSchema;\n+    }\n }"},{"sha":"94b34dc76ddaa70ab55b5079c66086a4a5107377","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractVirAttrTemplate.java","status":"removed","additions":0,"deletions":41,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirAttrTemplate.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,41 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n-import javax.persistence.Id;\n-import javax.persistence.MappedSuperclass;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-\n-@MappedSuperclass\n-public abstract class AbstractVirAttrTemplate<V extends VirSchema> extends AbstractAttrTemplate<V> {\n-\n-    private static final long serialVersionUID = -943169893494860655L;\n-\n-    @Id\n-    @GeneratedValue(strategy = GenerationType.AUTO)\n-    protected Long id;\n-\n-    @Override\n-    public Long getKey() {\n-        return id;\n-    }\n-\n-}"},{"sha":"6949817be8fcf48de431c3a369da0c32577e6ca6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAccountPolicy.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccountPolicy.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -26,12 +26,12 @@\n import javax.persistence.JoinColumn;\n import javax.persistence.JoinTable;\n import javax.persistence.ManyToMany;\n-import javax.validation.Valid;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n \n @Entity\n @DiscriminatorValue(\"AccountPolicy\")\n@@ -44,10 +44,9 @@ public class JPAAccountPolicy extends JPAPolicy implements AccountPolicy {\n      */\n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(joinColumns =\n-            @JoinColumn(name = \"account_policy_id\"),\n+            @JoinColumn(name = \"accountPolicy_id\"),\n             inverseJoinColumns =\n             @JoinColumn(name = \"resource_name\"))\n-    @Valid\n     private Set<JPAExternalResource> resources = new HashSet<>();\n \n     public JPAAccountPolicy() {"},{"sha":"4d7e9c530892506035da3a99724bc803f34694c7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyAbout.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyAbout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyAbout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyAbout.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Lob;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n+import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Notification;\n+\n+@Entity\n+@Table(name = JPAAnyAbout.TABLE, uniqueConstraints =\n+        @UniqueConstraint(columnNames = { \"notification_id\", \"anyType_name\" }))\n+public class JPAAnyAbout extends AbstractEntity<Long> implements AnyAbout {\n+\n+    private static final long serialVersionUID = 3517381731849788407L;\n+\n+    public static final String TABLE = \"AnyAbout\";\n+\n+    @Id\n+    private Long id;\n+\n+    @ManyToOne\n+    private JPANotification notification;\n+\n+    @ManyToOne\n+    private JPAAnyType anyType;\n+\n+    @Lob\n+    private String about;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public Notification getNotification() {\n+        return notification;\n+    }\n+\n+    @Override\n+    public void setNotification(final Notification notification) {\n+        checkType(notification, JPANotification.class);\n+        this.notification = (JPANotification) notification;\n+    }\n+\n+    @Override\n+    public AnyType getAnyType() {\n+        return anyType;\n+    }\n+\n+    @Override\n+    public void setAnyType(final AnyType anyType) {\n+        checkType(anyType, JPAAnyType.class);\n+        this.anyType = (JPAAnyType) anyType;\n+    }\n+\n+    @Override\n+    public String get() {\n+        return about;\n+    }\n+\n+    @Override\n+    public void set(final String filter) {\n+        this.about = filter;\n+    }\n+\n+}"},{"sha":"2615520a83d6edf8fc7ecc2ee052e7f0b180e43c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyType.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyType.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Cacheable;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+\n+@Entity\n+@Table(name = JPAAnyType.TABLE)\n+@Cacheable\n+public class JPAAnyType extends AbstractEntity<String> implements AnyType {\n+\n+    private static final long serialVersionUID = 2668267884059219835L;\n+\n+    public static final String TABLE = \"AnyType\";\n+\n+    @Id\n+    private String name;\n+\n+    @NotNull\n+    @Enumerated(EnumType.STRING)\n+    private AnyTypeKind kind;\n+\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(joinColumns =\n+            @JoinColumn(name = \"anyType_name\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"anyTypeClass_name\"))\n+    private List<JPAAnyTypeClass> classes = new ArrayList<>();\n+\n+    @Override\n+    public String getKey() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setKey(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public AnyTypeKind getKind() {\n+        return kind;\n+    }\n+\n+    @Override\n+    public void setKind(final AnyTypeKind kind) {\n+        this.kind = kind;\n+    }\n+\n+    @Override\n+    public boolean add(final AnyTypeClass anyTypeClass) {\n+        checkType(anyTypeClass, JPAAnyTypeClass.class);\n+        return this.classes.add((JPAAnyTypeClass) anyTypeClass);\n+    }\n+\n+    @Override\n+    public boolean remove(final AnyTypeClass anyTypeClass) {\n+        checkType(anyTypeClass, JPAAnyTypeClass.class);\n+        return this.classes.remove((JPAAnyTypeClass) anyTypeClass);\n+    }\n+\n+    @Override\n+    public List<? extends AnyTypeClass> getClasses() {\n+        return classes;\n+    }\n+}"},{"sha":"5c5209769c8af145f927c7e4c22e9d91e26a9f3f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyTypeClass.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTypeClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTypeClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTypeClass.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Cacheable;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+\n+@Entity\n+@Table(name = JPAAnyTypeClass.TABLE)\n+@Cacheable\n+public class JPAAnyTypeClass extends AbstractEntity<String> implements AnyTypeClass {\n+\n+    private static final long serialVersionUID = -1750247153774475453L;\n+\n+    public static final String TABLE = \"AnyTypeClass\";\n+\n+    @Id\n+    private String name;\n+\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)\n+    @JoinTable(joinColumns =\n+            @JoinColumn(name = \"anyTypeClass_name\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"plainSchema_name\"))\n+    private List<JPAPlainSchema> plainSchemas = new ArrayList<>();\n+\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)\n+    @JoinTable(joinColumns =\n+            @JoinColumn(name = \"anyTypeClass_name\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"derSchema_name\"))\n+    private List<JPADerSchema> derSchemas = new ArrayList<>();\n+\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)\n+    @JoinTable(joinColumns =\n+            @JoinColumn(name = \"anyTypeClass_name\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"virSchema_name\"))\n+    private List<JPAVirSchema> virSchemas = new ArrayList<>();\n+\n+    @Override\n+    public String getKey() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setKey(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public boolean add(final PlainSchema facet) {\n+        checkType(facet, JPAPlainSchema.class);\n+        return this.plainSchemas.add((JPAPlainSchema) facet);\n+    }\n+\n+    @Override\n+    public boolean remove(final PlainSchema facet) {\n+        checkType(facet, JPAPlainSchema.class);\n+        return this.plainSchemas.remove((JPAPlainSchema) facet);\n+    }\n+\n+    @Override\n+    public List<? extends PlainSchema> getPlainSchemas() {\n+        return plainSchemas;\n+    }\n+\n+    @Override\n+    public boolean add(final DerSchema facet) {\n+        checkType(facet, JPADerSchema.class);\n+        return this.derSchemas.add((JPADerSchema) facet);\n+    }\n+\n+    @Override\n+    public boolean remove(final DerSchema facet) {\n+        checkType(facet, JPAPlainSchema.class);\n+        return this.derSchemas.remove((JPADerSchema) facet);\n+    }\n+\n+    @Override\n+    public List<? extends DerSchema> getDerSchemas() {\n+        return derSchemas;\n+    }\n+\n+    @Override\n+    public boolean add(final VirSchema facet) {\n+        checkType(facet, JPAVirSchema.class);\n+        return this.virSchemas.add((JPAVirSchema) facet);\n+    }\n+\n+    @Override\n+    public boolean remove(final VirSchema facet) {\n+        checkType(facet, JPAPlainSchema.class);\n+        return this.virSchemas.remove((JPAVirSchema) facet);\n+    }\n+\n+    @Override\n+    public List<? extends VirSchema> getVirSchemas() {\n+        return virSchemas;\n+    }\n+\n+}"},{"sha":"989c642ef9f4093c0bd0e8cb8c1af1a98c8f24f3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java","status":"added","additions":488,"deletions":0,"changes":488,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,488 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.DerAttr;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.VirAttr;\n+import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADerAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAVirAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n+import org.apache.syncope.core.persistence.jpa.entity.group.JPAGDerAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDerAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n+\n+@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+public class JPAAnyUtils implements AnyUtils {\n+\n+    private final AnyTypeKind anyTypeKind;\n+\n+    protected JPAAnyUtils(final AnyTypeKind typeKind) {\n+        this.anyTypeKind = typeKind;\n+    }\n+\n+    @Override\n+    public AnyTypeKind getAnyTypeKind() {\n+        return anyTypeKind;\n+    }\n+\n+    @Override\n+    public <T extends Any<?, ?, ?>> Class<T> anyClass() {\n+        Class result;\n+\n+        switch (anyTypeKind) {\n+            case GROUP:\n+                result = JPAGroup.class;\n+                break;\n+\n+            case ANY_OBJECT:\n+                result = JPAAnyObject.class;\n+                break;\n+\n+            case USER:\n+            default:\n+                result = JPAUser.class;\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends PlainAttr<?>> Class<T> plainAttrClass() {\n+        Class result = null;\n+\n+        switch (anyTypeKind) {\n+            case GROUP:\n+                result = JPAGPlainAttr.class;\n+                break;\n+\n+            case ANY_OBJECT:\n+                result = JPAAPlainAttr.class;\n+                break;\n+\n+            case USER:\n+            default:\n+                result = JPAUPlainAttr.class;\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends PlainAttr<?>> T newPlainAttr() {\n+        T result = null;\n+\n+        switch (anyTypeKind) {\n+            case USER:\n+                result = (T) new JPAUPlainAttr();\n+                break;\n+\n+            case GROUP:\n+                result = (T) new JPAGPlainAttr();\n+                break;\n+\n+            case ANY_OBJECT:\n+                result = (T) new JPAAPlainAttr();\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends PlainAttrValue> Class<T> plainAttrValueClass() {\n+        Class result;\n+\n+        switch (anyTypeKind) {\n+            case GROUP:\n+                result = JPAGPlainAttrValue.class;\n+                break;\n+\n+            case ANY_OBJECT:\n+                result = JPAAPlainAttrValue.class;\n+                break;\n+\n+            case USER:\n+            default:\n+                result = JPAUPlainAttrValue.class;\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends PlainAttrValue> T newPlainAttrValue() {\n+        T result = null;\n+\n+        switch (anyTypeKind) {\n+            case USER:\n+                result = (T) new JPAUPlainAttrValue();\n+                break;\n+\n+            case GROUP:\n+                result = (T) new JPAGPlainAttrValue();\n+                break;\n+\n+            case ANY_OBJECT:\n+                result = (T) new JPAAPlainAttrValue();\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends PlainAttrValue> Class<T> plainAttrUniqueValueClass() {\n+        Class result;\n+\n+        switch (anyTypeKind) {\n+            case GROUP:\n+                result = JPAGPlainAttrUniqueValue.class;\n+                break;\n+\n+            case ANY_OBJECT:\n+                result = JPAAPlainAttrUniqueValue.class;\n+                break;\n+\n+            case USER:\n+            default:\n+                result = JPAUPlainAttrUniqueValue.class;\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends PlainAttrValue> T newPlainAttrUniqueValue() {\n+        T result = null;\n+\n+        switch (anyTypeKind) {\n+            case USER:\n+                result = (T) new JPAUPlainAttrUniqueValue();\n+                break;\n+\n+            case GROUP:\n+                result = (T) new JPAGPlainAttrUniqueValue();\n+                break;\n+\n+            case ANY_OBJECT:\n+                result = (T) new JPAAPlainAttrUniqueValue();\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends DerAttr<?>> Class<T> derAttrClass() {\n+        Class result = null;\n+\n+        switch (anyTypeKind) {\n+            case USER:\n+                result = JPAUDerAttr.class;\n+                break;\n+\n+            case GROUP:\n+                result = JPAGDerAttr.class;\n+                break;\n+\n+            case ANY_OBJECT:\n+                result = JPAADerAttr.class;\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends DerAttr<?>> T newDerAttr() {\n+        T result = null;\n+\n+        switch (anyTypeKind) {\n+            case USER:\n+                result = (T) new JPAUDerAttr();\n+                break;\n+\n+            case GROUP:\n+                result = (T) new JPAGDerAttr();\n+                break;\n+\n+            case ANY_OBJECT:\n+                result = (T) new JPAADerAttr();\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends VirAttr<?>> Class<T> virAttrClass() {\n+        Class result = null;\n+\n+        switch (anyTypeKind) {\n+            case USER:\n+                result = JPAUVirAttr.class;\n+                break;\n+\n+            case GROUP:\n+                result = JPAGVirAttr.class;\n+                break;\n+\n+            case ANY_OBJECT:\n+                result = JPAAVirAttr.class;\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends VirAttr<?>> T newVirAttr() {\n+        T result = null;\n+\n+        switch (anyTypeKind) {\n+            case USER:\n+                result = (T) new JPAUVirAttr();\n+                break;\n+\n+            case GROUP:\n+                result = (T) new JPAGVirAttr();\n+                break;\n+\n+            case ANY_OBJECT:\n+                result = (T) new JPAAVirAttr();\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public MappingItem getConnObjectKeyItem(final Provision provision) {\n+        Mapping mapping = null;\n+        if (provision != null) {\n+            mapping = provision.getMapping();\n+        }\n+\n+        return mapping == null\n+                ? null\n+                : mapping.getConnObjectKeyItem();\n+    }\n+\n+    @Override\n+    public String getConnObjectLink(final Provision provision) {\n+        Mapping mapping = null;\n+        if (provision != null) {\n+            mapping = provision.getMapping();\n+        }\n+\n+        return mapping == null\n+                ? null\n+                : mapping.getConnObjectLink();\n+    }\n+\n+    @Override\n+    public List<MappingItem> getMappingItems(final Provision provision, final MappingPurpose purpose) {\n+        List<? extends MappingItem> items = Collections.<MappingItem>emptyList();\n+        if (provision != null) {\n+            items = provision.getMapping().getItems();\n+        }\n+\n+        List<MappingItem> result = new ArrayList<>();\n+\n+        switch (purpose) {\n+            case SYNCHRONIZATION:\n+                for (MappingItem item : items) {\n+                    if (MappingPurpose.PROPAGATION != item.getPurpose()\n+                            && MappingPurpose.NONE != item.getPurpose()) {\n+\n+                        result.add(item);\n+                    }\n+                }\n+                break;\n+\n+            case PROPAGATION:\n+                for (MappingItem item : items) {\n+                    if (MappingPurpose.SYNCHRONIZATION != item.getPurpose()\n+                            && MappingPurpose.NONE != item.getPurpose()) {\n+\n+                        result.add(item);\n+                    }\n+                }\n+                break;\n+\n+            case BOTH:\n+                for (MappingItem item : items) {\n+                    if (MappingPurpose.NONE != item.getPurpose()) {\n+                        result.add(item);\n+                    }\n+                }\n+                break;\n+\n+            case NONE:\n+                for (MappingItem item : items) {\n+                    if (MappingPurpose.NONE == item.getPurpose()) {\n+                        result.add(item);\n+                    }\n+                }\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public IntMappingType plainIntMappingType() {\n+        IntMappingType result = null;\n+\n+        switch (anyTypeKind) {\n+            case GROUP:\n+                result = IntMappingType.GroupPlainSchema;\n+                break;\n+\n+            case ANY_OBJECT:\n+                result = IntMappingType.AnyPlainSchema;\n+                break;\n+\n+            case USER:\n+                result = IntMappingType.UserPlainSchema;\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public IntMappingType derIntMappingType() {\n+        IntMappingType result = null;\n+\n+        switch (anyTypeKind) {\n+            case GROUP:\n+                result = IntMappingType.GroupDerivedSchema;\n+                break;\n+\n+            case ANY_OBJECT:\n+                result = IntMappingType.AnyDerivedSchema;\n+                break;\n+\n+            case USER:\n+                result = IntMappingType.UserDerivedSchema;\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public IntMappingType virIntMappingType() {\n+        IntMappingType result = null;\n+\n+        switch (anyTypeKind) {\n+            case GROUP:\n+                result = IntMappingType.GroupVirtualSchema;\n+                break;\n+\n+            case ANY_OBJECT:\n+                result = IntMappingType.AnyVirtualSchema;\n+                break;\n+\n+            case USER:\n+                result = IntMappingType.UserVirtualSchema;\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends AnyTO> T newAnyTO() {\n+        T result = null;\n+\n+        switch (anyTypeKind) {\n+            case USER:\n+                result = (T) new UserTO();\n+                break;\n+\n+            case GROUP:\n+                result = (T) new GroupTO();\n+                break;\n+\n+            case ANY_OBJECT:\n+                result = (T) new AnyObjectTO();\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+}"},{"sha":"f68b3f957b7e1ce8b230ebf93e06bb1dbfbaf6f4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtilsFactory.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtilsFactory.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class JPAAnyUtilsFactory implements AnyUtilsFactory {\n+\n+    @Override\n+    public AnyUtils getInstance(final AnyTypeKind anyTypeKind) {\n+        return new JPAAnyUtils(anyTypeKind);\n+    }\n+\n+    @Override\n+    public AnyUtils getInstance(final String anyTypeKind) {\n+        return new JPAAnyUtils(AnyTypeKind.valueOf(anyTypeKind));\n+    }\n+\n+    @Override\n+    public AnyUtils getInstance(final Any<?, ?, ?> any) {\n+        AnyTypeKind type = null;\n+        if (any instanceof User) {\n+            type = AnyTypeKind.USER;\n+        } else if (any instanceof Group) {\n+            type = AnyTypeKind.GROUP;\n+        } else if (any instanceof AnyObject) {\n+            type = AnyTypeKind.ANY_OBJECT;\n+        }\n+\n+        if (type == null) {\n+            throw new IllegalArgumentException(\"Any type not supported: \" + any.getClass().getName());\n+        }\n+\n+        return new JPAAnyUtils(type);\n+    }\n+\n+}"},{"sha":"2fe1ae9b67140e8c64c993c6906de78026da63c5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAttributableUtils.java","status":"removed","additions":0,"deletions":862,"changes":862,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAttributableUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAttributableUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAttributableUtils.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,862 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n-import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n-import org.apache.syncope.common.lib.to.ConfTO;\n-import org.apache.syncope.common.lib.to.MembershipTO;\n-import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.types.AttributableType;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n-import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.core.persistence.api.entity.AttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.Attributable;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n-import org.apache.syncope.core.persistence.api.entity.DerAttr;\n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttrUniqueValue;\n-import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttrValue;\n-import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.conf.JPAConf;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMDerAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMDerAttrTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMDerSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMPlainAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMPlainAttrTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMPlainAttrUniqueValue;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMPlainAttrValue;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMPlainSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMVirAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMVirAttrTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMVirSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMembership;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGDerAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGDerAttrTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGDerSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGMappingItem;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrUniqueValue;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrValue;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirAttrTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDerAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDerSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUMappingItem;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrUniqueValue;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrValue;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n-import org.slf4j.LoggerFactory;\n-\n-@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-public class JPAAttributableUtils implements AttributableUtils {\n-\n-    /**\n-     * Logger.\n-     */\n-    private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(AttributableUtils.class);\n-\n-    private final AttributableType type;\n-\n-    protected JPAAttributableUtils(final AttributableType type) {\n-        this.type = type;\n-    }\n-\n-    @Override\n-    public AttributableType getType() {\n-        return type;\n-    }\n-\n-    @Override\n-    public <T extends Attributable<?, ?, ?>> Class<T> attributableClass() {\n-        Class result;\n-\n-        switch (type) {\n-            case GROUP:\n-                result = JPAGroup.class;\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = JPAMembership.class;\n-                break;\n-\n-            case CONFIGURATION:\n-                result = JPAConf.class;\n-                break;\n-\n-            case USER:\n-            default:\n-                result = JPAUser.class;\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends PlainSchema> Class<T> plainSchemaClass() {\n-        Class result;\n-\n-        switch (type) {\n-            case GROUP:\n-                result = JPAGPlainSchema.class;\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = JPAMPlainSchema.class;\n-                break;\n-\n-            case CONFIGURATION:\n-                result = JPACPlainSchema.class;\n-                break;\n-\n-            case USER:\n-            default:\n-                result = JPAUPlainSchema.class;\n-                break;\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends PlainSchema> T newPlainSchema() {\n-        T result = null;\n-\n-        switch (type) {\n-            case USER:\n-                result = (T) new JPAUPlainSchema();\n-                break;\n-\n-            case GROUP:\n-                result = (T) new JPAGPlainSchema();\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = (T) new JPAMPlainSchema();\n-                break;\n-\n-            case CONFIGURATION:\n-                result = (T) new JPACPlainSchema();\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends PlainAttr> Class<T> plainAttrClass() {\n-        Class result = null;\n-\n-        switch (type) {\n-            case GROUP:\n-                result = JPAGPlainAttr.class;\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = JPAMPlainAttr.class;\n-                break;\n-\n-            case CONFIGURATION:\n-                result = JPACPlainAttr.class;\n-                break;\n-\n-            case USER:\n-            default:\n-                result = JPAUPlainAttr.class;\n-                break;\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends PlainAttr> T newPlainAttr() {\n-        T result = null;\n-\n-        switch (type) {\n-            case USER:\n-                result = (T) new JPAUPlainAttr();\n-                break;\n-\n-            case GROUP:\n-                result = (T) new JPAGPlainAttr();\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = (T) new JPAMPlainAttr();\n-                break;\n-\n-            case CONFIGURATION:\n-                result = (T) new JPACPlainAttr();\n-\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends PlainAttrValue> Class<T> plainAttrValueClass() {\n-        Class result;\n-\n-        switch (type) {\n-            case GROUP:\n-                result = JPAGPlainAttrValue.class;\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = JPAMPlainAttrValue.class;\n-                break;\n-\n-            case CONFIGURATION:\n-                result = JPACPlainAttrValue.class;\n-                break;\n-\n-            case USER:\n-            default:\n-                result = JPAUPlainAttrValue.class;\n-                break;\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends PlainAttrValue> T newPlainAttrValue() {\n-        T result = null;\n-\n-        switch (type) {\n-            case USER:\n-                result = (T) new JPAUPlainAttrValue();\n-                break;\n-\n-            case GROUP:\n-                result = (T) new JPAGPlainAttrValue();\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = (T) new JPAMPlainAttrValue();\n-                break;\n-\n-            case CONFIGURATION:\n-                result = (T) new JPACPlainAttrValue();\n-                break;\n-\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends PlainAttrValue> Class<T> plainAttrUniqueValueClass() {\n-        Class result;\n-\n-        switch (type) {\n-            case GROUP:\n-                result = JPAGPlainAttrUniqueValue.class;\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = JPAMPlainAttrUniqueValue.class;\n-                break;\n-\n-            case CONFIGURATION:\n-                result = JPACPlainAttrUniqueValue.class;\n-                break;\n-\n-            case USER:\n-            default:\n-                result = JPAUPlainAttrUniqueValue.class;\n-                break;\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends PlainAttrValue> T newPlainAttrUniqueValue() {\n-        T result = null;\n-\n-        switch (type) {\n-            case USER:\n-                result = (T) new JPAUPlainAttrUniqueValue();\n-                break;\n-\n-            case GROUP:\n-                result = (T) new JPAGPlainAttrUniqueValue();\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = (T) new JPAMPlainAttrUniqueValue();\n-                break;\n-\n-            case CONFIGURATION:\n-                result = (T) new JPACPlainAttrUniqueValue();\n-                break;\n-\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends AttrTemplate<PlainSchema>> Class<T> plainAttrTemplateClass() {\n-        Class result;\n-\n-        switch (type) {\n-            case GROUP:\n-                result = JPAGPlainAttrTemplate.class;\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = JPAMPlainAttrTemplate.class;\n-                break;\n-\n-            case USER:\n-            case CONFIGURATION:\n-            default:\n-                result = null;\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends DerSchema> Class<T> derSchemaClass() {\n-        Class result;\n-\n-        switch (type) {\n-            case USER:\n-                result = JPAUDerSchema.class;\n-                break;\n-\n-            case GROUP:\n-                result = JPAGDerSchema.class;\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = JPAMDerSchema.class;\n-                break;\n-\n-            case CONFIGURATION:\n-            default:\n-                result = null;\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends DerSchema> T newDerSchema() {\n-        T result = null;\n-\n-        switch (type) {\n-            case USER:\n-                result = (T) new JPAUDerSchema();\n-                break;\n-\n-            case GROUP:\n-                result = (T) new JPAGDerSchema();\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = (T) new JPAMDerSchema();\n-                break;\n-\n-            case CONFIGURATION:\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends DerAttr> Class<T> derAttrClass() {\n-        Class result = null;\n-\n-        switch (type) {\n-            case USER:\n-                result = JPAUDerAttr.class;\n-                break;\n-\n-            case GROUP:\n-                result = JPAGDerAttr.class;\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = JPAMDerAttr.class;\n-                break;\n-\n-            case CONFIGURATION:\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends DerAttr> T newDerAttr() {\n-        T result = null;\n-\n-        switch (type) {\n-            case USER:\n-                result = (T) new JPAUDerAttr();\n-                break;\n-\n-            case GROUP:\n-                result = (T) new JPAGDerAttr();\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = (T) new JPAMDerAttr();\n-                break;\n-\n-            case CONFIGURATION:\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends AttrTemplate<DerSchema>> Class<T> derAttrTemplateClass() {\n-        Class result = null;\n-\n-        switch (type) {\n-            case USER:\n-                break;\n-\n-            case GROUP:\n-                result = JPAGDerAttrTemplate.class;\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = JPAMDerAttrTemplate.class;\n-                break;\n-\n-            case CONFIGURATION:\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends VirSchema> Class<T> virSchemaClass() {\n-        Class result = null;\n-\n-        switch (type) {\n-            case USER:\n-                result = JPAUVirSchema.class;\n-                break;\n-\n-            case GROUP:\n-                result = JPAGVirSchema.class;\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = JPAMVirSchema.class;\n-                break;\n-\n-            case CONFIGURATION:\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends VirSchema> T newVirSchema() {\n-        T result = null;\n-\n-        switch (type) {\n-            case USER:\n-                result = (T) new JPAUVirSchema();\n-                break;\n-\n-            case GROUP:\n-                result = (T) new JPAGVirSchema();\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = (T) new JPAMVirSchema();\n-                break;\n-\n-            case CONFIGURATION:\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends VirAttr> Class<T> virAttrClass() {\n-        Class result = null;\n-\n-        switch (type) {\n-            case USER:\n-                result = JPAUVirAttr.class;\n-                break;\n-\n-            case GROUP:\n-                result = JPAGVirAttr.class;\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = JPAMVirAttr.class;\n-                break;\n-\n-            case CONFIGURATION:\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends VirAttr> T newVirAttr() {\n-        T result = null;\n-\n-        switch (type) {\n-            case USER:\n-                result = (T) new JPAUVirAttr();\n-                break;\n-\n-            case GROUP:\n-                result = (T) new JPAGVirAttr();\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = (T) new JPAMVirAttr();\n-                break;\n-\n-            case CONFIGURATION:\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends AttrTemplate<VirSchema>> Class<T> virAttrTemplateClass() {\n-        Class result = null;\n-\n-        switch (type) {\n-            case USER:\n-                break;\n-\n-            case GROUP:\n-                result = JPAGVirAttrTemplate.class;\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = JPAMVirAttrTemplate.class;\n-                break;\n-\n-            case CONFIGURATION:\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends MappingItem> T getAccountIdItem(final ExternalResource resource) {\n-        T result = null;\n-\n-        if (resource != null) {\n-            switch (type) {\n-                case GROUP:\n-                    if (resource.getGmapping() != null) {\n-                        result = (T) resource.getGmapping().getAccountIdItem();\n-                    }\n-                    break;\n-\n-                case MEMBERSHIP:\n-                case USER:\n-                    if (resource.getUmapping() != null) {\n-                        result = (T) resource.getUmapping().getAccountIdItem();\n-                    }\n-                    break;\n-\n-                default:\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public String getAccountLink(final ExternalResource resource) {\n-        String result = null;\n-\n-        if (resource != null) {\n-            switch (type) {\n-                case USER:\n-                    if (resource.getUmapping() != null) {\n-                        result = resource.getUmapping().getAccountLink();\n-                    }\n-                    break;\n-\n-                case GROUP:\n-                    if (resource.getGmapping() != null) {\n-                        result = resource.getGmapping().getAccountLink();\n-                    }\n-                    break;\n-\n-                case MEMBERSHIP:\n-                case CONFIGURATION:\n-                default:\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends MappingItem> List<T> getMappingItems(\n-            final ExternalResource resource, final MappingPurpose purpose) {\n-\n-        List<T> items = Collections.<T>emptyList();\n-\n-        if (resource != null) {\n-            switch (type) {\n-                case GROUP:\n-                    if (resource.getGmapping() != null) {\n-                        items = (List<T>) resource.getGmapping().getItems();\n-                    }\n-                    break;\n-\n-                case MEMBERSHIP:\n-                case USER:\n-                    if (resource.getUmapping() != null) {\n-                        items = (List<T>) resource.getUmapping().getItems();\n-                    }\n-                    break;\n-\n-                default:\n-            }\n-        }\n-\n-        final List<T> result = new ArrayList<>();\n-\n-        switch (purpose) {\n-            case SYNCHRONIZATION:\n-                for (T item : items) {\n-                    if (MappingPurpose.PROPAGATION != item.getPurpose()\n-                            && MappingPurpose.NONE != item.getPurpose()) {\n-\n-                        result.add(item);\n-                    }\n-                }\n-                break;\n-\n-            case PROPAGATION:\n-                for (T item : items) {\n-                    if (MappingPurpose.SYNCHRONIZATION != item.getPurpose()\n-                            && MappingPurpose.NONE != item.getPurpose()) {\n-\n-                        result.add(item);\n-                    }\n-                }\n-                break;\n-\n-            case BOTH:\n-                for (T item : items) {\n-                    if (MappingPurpose.NONE != item.getPurpose()) {\n-                        result.add(item);\n-                    }\n-                }\n-                break;\n-\n-            case NONE:\n-                for (T item : items) {\n-                    if (MappingPurpose.NONE == item.getPurpose()) {\n-                        result.add(item);\n-                    }\n-                }\n-                break;\n-            default:\n-                LOG.error(\"You requested not existing purpose {}\", purpose);\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public IntMappingType plainIntMappingType() {\n-        IntMappingType result = null;\n-\n-        switch (type) {\n-            case GROUP:\n-                result = IntMappingType.GroupPlainSchema;\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = IntMappingType.MembershipPlainSchema;\n-                break;\n-\n-            case USER:\n-                result = IntMappingType.UserPlainSchema;\n-                break;\n-\n-            case CONFIGURATION:\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public IntMappingType derIntMappingType() {\n-        IntMappingType result = null;\n-\n-        switch (type) {\n-            case GROUP:\n-                result = IntMappingType.GroupDerivedSchema;\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = IntMappingType.MembershipDerivedSchema;\n-                break;\n-\n-            case USER:\n-                result = IntMappingType.UserDerivedSchema;\n-                break;\n-\n-            case CONFIGURATION:\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public IntMappingType virIntMappingType() {\n-        IntMappingType result = null;\n-\n-        switch (type) {\n-            case GROUP:\n-                result = IntMappingType.GroupVirtualSchema;\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = IntMappingType.MembershipVirtualSchema;\n-                break;\n-\n-            case USER:\n-                result = IntMappingType.UserVirtualSchema;\n-                break;\n-\n-            case CONFIGURATION:\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends MappingItem> Class<T> mappingItemClass() {\n-        Class result = null;\n-\n-        switch (type) {\n-            case USER:\n-                result = JPAUMappingItem.class;\n-                break;\n-\n-            case GROUP:\n-                result = JPAGMappingItem.class;\n-                break;\n-\n-            case MEMBERSHIP:\n-                result = AbstractMappingItem.class;\n-                break;\n-\n-            case CONFIGURATION:\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends AbstractAttributableTO> T newAttributableTO() {\n-        T result = null;\n-\n-        switch (type) {\n-            case USER:\n-                result = (T) new UserTO();\n-                break;\n-            case GROUP:\n-                result = (T) new GroupTO();\n-                break;\n-            case MEMBERSHIP:\n-                result = (T) new MembershipTO();\n-                break;\n-            case CONFIGURATION:\n-                result = (T) new ConfTO();\n-                break;\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends AbstractSubjectTO> T newSubjectTO() {\n-        T result = null;\n-\n-        switch (type) {\n-            case USER:\n-                result = (T) new UserTO();\n-                break;\n-            case GROUP:\n-                result = (T) new GroupTO();\n-                break;\n-            case MEMBERSHIP:\n-            case CONFIGURATION:\n-            default:\n-                break;\n-        }\n-\n-        return result;\n-    }\n-}"},{"sha":"392949654786e516b3d51d068bd7c38b9304ab0b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAConnInstance.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n@@ -41,7 +42,7 @@\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.ConnPoolConf;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.jpa.validation.entity.ConnInstanceCheck;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n "},{"sha":"0b9a31bf171b6d1a8157045e69ddd1aa485bc535","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPADerSchema.java","status":"renamed","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADerSchema.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,19 +18,25 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n+import javax.persistence.Cacheable;\n import javax.persistence.Column;\n+import javax.persistence.Entity;\n import javax.persistence.Id;\n-import javax.persistence.MappedSuperclass;\n+import javax.persistence.Table;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.jpa.validation.entity.SchemaNameCheck;\n \n-@MappedSuperclass\n+@Entity\n+@Table(name = JPADerSchema.TABLE)\n+@Cacheable\n @SchemaNameCheck\n-public abstract class AbstractDerSchema extends AbstractEntity<String> implements DerSchema {\n+public class JPADerSchema extends AbstractEntity<String> implements DerSchema {\n \n     private static final long serialVersionUID = -6173643493348674060L;\n \n+    public static final String TABLE = \"DerSchema\";\n+\n     @Id\n     private String name;\n ","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractDerSchema.java"},{"sha":"92f98554c056023d56f6a5efa0dee1c2e3522481","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":60,"deletions":109,"changes":169,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,55 +18,47 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n+import org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.ConnPoolConf;\n-import org.apache.syncope.core.persistence.api.entity.DynGroupMembership;\n-import org.apache.syncope.core.persistence.api.entity.DynRoleMembership;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.user.DynRoleMembership;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Logger;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.PushPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n import org.apache.syncope.core.persistence.api.entity.ReportletConfInstance;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.conf.CPlainSchema;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n-import org.apache.syncope.core.persistence.api.entity.membership.MDerAttr;\n-import org.apache.syncope.core.persistence.api.entity.membership.MDerAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.membership.MDerSchema;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttrUniqueValue;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.membership.MVirAttr;\n-import org.apache.syncope.core.persistence.api.entity.membership.MVirAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.membership.MVirSchema;\n-import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n import org.apache.syncope.core.persistence.api.entity.group.GDerAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.GDerAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.group.GDerSchema;\n-import org.apache.syncope.core.persistence.api.entity.group.GMapping;\n-import org.apache.syncope.core.persistence.api.entity.group.GMappingItem;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrTemplate;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.group.GPlainSchema;\n import org.apache.syncope.core.persistence.api.entity.group.GVirAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirSchema;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.task.AnyFilter;\n+import org.apache.syncope.core.persistence.api.entity.task.AnyTemplate;\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n@@ -75,63 +67,46 @@\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n import org.apache.syncope.core.persistence.api.entity.user.UDerAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.UDerSchema;\n-import org.apache.syncope.core.persistence.api.entity.user.UMapping;\n-import org.apache.syncope.core.persistence.api.entity.user.UMappingItem;\n+import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n+import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.user.UPlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.UVirSchema;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship;\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttrValue;\n-import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainSchema;\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPAConf;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMDerAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMDerAttrTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMDerSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMPlainAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMPlainAttrTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMPlainAttrUniqueValue;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMPlainAttrValue;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMPlainSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMVirAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMVirAttrTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMVirSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMembership;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGDerAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGDerAttrTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGDerSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGMapping;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGMappingItem;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrTemplate;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrValue;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainSchema;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirAttrTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirSchema;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMapping;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMappingItem;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n+import org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyFilter;\n+import org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyTemplate;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPANotificationTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPropagationTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPushTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPASchedTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPASyncTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPATaskExec;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDerAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDerSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUMapping;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUMappingItem;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrValue;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainSchema;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirSchema;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.springframework.stereotype.Component;\n \n@@ -159,86 +134,56 @@ public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n             result = (T) new JPAUser();\n         } else if (reference.equals(Group.class)) {\n             result = (T) new JPAGroup();\n-        } else if (reference.equals(Membership.class)) {\n-            result = (T) new JPAMembership();\n+        } else if (reference.equals(ARelationship.class)) {\n+            result = (T) new JPAARelationship();\n+        } else if (reference.equals(URelationship.class)) {\n+            result = (T) new JPAURelationship();\n+        } else if (reference.equals(AMembership.class)) {\n+            result = (T) new JPAAMembership();\n+        } else if (reference.equals(UMembership.class)) {\n+            result = (T) new JPAUMembership();\n         } else if (reference.equals(Conf.class)) {\n             result = (T) new JPAConf();\n+        } else if (reference.equals(AnyAbout.class)) {\n+            result = (T) new JPAAnyAbout();\n         } else if (reference.equals(Notification.class)) {\n             result = (T) new JPANotification();\n         } else if (reference.equals(ExternalResource.class)) {\n             result = (T) new JPAExternalResource();\n+        } else if (reference.equals(Provision.class)) {\n+            result = (T) new JPAProvision();\n         } else if (reference.equals(ConnInstance.class)) {\n             result = (T) new JPAConnInstance();\n-        } else if (reference.equals(UPlainSchema.class)) {\n-            result = (T) new JPAUPlainSchema();\n+        } else if (reference.equals(PlainSchema.class)) {\n+            result = (T) new JPAPlainSchema();\n         } else if (reference.equals(UPlainAttr.class)) {\n             result = (T) new JPAUPlainAttr();\n         } else if (reference.equals(UPlainAttrValue.class)) {\n             result = (T) new JPAUPlainAttrValue();\n         } else if (reference.equals(UPlainAttrUniqueValue.class)) {\n             result = (T) new JPAUPlainAttrUniqueValue();\n-        } else if (reference.equals(UDerSchema.class)) {\n-            result = (T) new JPAUDerSchema();\n+        } else if (reference.equals(DerSchema.class)) {\n+            result = (T) new JPADerSchema();\n         } else if (reference.equals(UDerAttr.class)) {\n             result = (T) new JPAUDerAttr();\n-        } else if (reference.equals(UVirSchema.class)) {\n-            result = (T) new JPAUVirSchema();\n+        } else if (reference.equals(VirSchema.class)) {\n+            result = (T) new JPAVirSchema();\n         } else if (reference.equals(UVirAttr.class)) {\n             result = (T) new JPAUVirAttr();\n-        } else if (reference.equals(UMapping.class)) {\n-            result = (T) new JPAUMapping();\n-        } else if (reference.equals(UMappingItem.class)) {\n-            result = (T) new JPAUMappingItem();\n-        } else if (reference.equals(GPlainSchema.class)) {\n-            result = (T) new JPAGPlainSchema();\n+        } else if (reference.equals(Mapping.class)) {\n+            result = (T) new JPAMapping();\n+        } else if (reference.equals(MappingItem.class)) {\n+            result = (T) new JPAMappingItem();\n         } else if (reference.equals(GPlainAttr.class)) {\n             result = (T) new JPAGPlainAttr();\n         } else if (reference.equals(GPlainAttrValue.class)) {\n             result = (T) new JPAGPlainAttrValue();\n         } else if (reference.equals(GPlainAttrUniqueValue.class)) {\n             result = (T) new JPAGPlainAttrUniqueValue();\n-        } else if (reference.equals(GPlainAttrTemplate.class)) {\n-            result = (T) new JPAGPlainAttrTemplate();\n-        } else if (reference.equals(GDerAttrTemplate.class)) {\n-            result = (T) new JPAGDerAttrTemplate();\n-        } else if (reference.equals(GVirAttrTemplate.class)) {\n-            result = (T) new JPAGVirAttrTemplate();\n-        } else if (reference.equals(GDerSchema.class)) {\n-            result = (T) new JPAGDerSchema();\n         } else if (reference.equals(GDerAttr.class)) {\n             result = (T) new JPAGDerAttr();\n-        } else if (reference.equals(GVirSchema.class)) {\n-            result = (T) new JPAGVirSchema();\n         } else if (reference.equals(GVirAttr.class)) {\n             result = (T) new JPAGVirAttr();\n-        } else if (reference.equals(GMapping.class)) {\n-            result = (T) new JPAGMapping();\n-        } else if (reference.equals(GMappingItem.class)) {\n-            result = (T) new JPAGMappingItem();\n-        } else if (reference.equals(MPlainSchema.class)) {\n-            result = (T) new JPAMPlainSchema();\n-        } else if (reference.equals(MPlainAttr.class)) {\n-            result = (T) new JPAMPlainAttr();\n-        } else if (reference.equals(MPlainAttrValue.class)) {\n-            result = (T) new JPAMPlainAttrValue();\n-        } else if (reference.equals(MPlainAttrUniqueValue.class)) {\n-            result = (T) new JPAMPlainAttrUniqueValue();\n-        } else if (reference.equals(MDerSchema.class)) {\n-            result = (T) new JPAMDerSchema();\n-        } else if (reference.equals(MDerAttr.class)) {\n-            result = (T) new JPAMDerAttr();\n-        } else if (reference.equals(MVirSchema.class)) {\n-            result = (T) new JPAMVirSchema();\n-        } else if (reference.equals(MVirAttr.class)) {\n-            result = (T) new JPAMVirAttr();\n-        } else if (reference.equals(MPlainAttrTemplate.class)) {\n-            result = (T) new JPAMPlainAttrTemplate();\n-        } else if (reference.equals(MDerAttrTemplate.class)) {\n-            result = (T) new JPAMDerAttrTemplate();\n-        } else if (reference.equals(MVirAttrTemplate.class)) {\n-            result = (T) new JPAMVirAttrTemplate();\n-        } else if (reference.equals(CPlainSchema.class)) {\n-            result = (T) new JPACPlainSchema();\n         } else if (reference.equals(CPlainAttr.class)) {\n             result = (T) new JPACPlainAttr();\n         } else if (reference.equals(CPlainAttrValue.class)) {\n@@ -263,14 +208,20 @@ public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n             result = (T) new JPASchedTask();\n         } else if (reference.equals(TaskExec.class)) {\n             result = (T) new JPATaskExec();\n+        } else if (reference.equals(AnyFilter.class)) {\n+            result = (T) new JPAAnyFilter();\n+        } else if (reference.equals(AnyTemplate.class)) {\n+            result = (T) new JPAAnyTemplate();\n         } else if (reference.equals(SecurityQuestion.class)) {\n             result = (T) new JPASecurityQuestion();\n         } else if (reference.equals(Logger.class)) {\n             result = (T) new JPALogger();\n         } else if (reference.equals(DynRoleMembership.class)) {\n             result = (T) new JPADynRoleMembership();\n-        } else if (reference.equals(DynGroupMembership.class)) {\n-            result = (T) new JPADynGroupMembership();\n+        } else if (reference.equals(ADynGroupMembership.class)) {\n+            result = (T) new JPAADynGroupMembership();\n+        } else if (reference.equals(UDynGroupMembership.class)) {\n+            result = (T) new JPAUDynGroupMembership();\n         } else {\n             throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n         }"},{"sha":"7e3d211b3feb97909ba922eee35d8ca024fb2269","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPANotification.java","status":"modified","additions":39,"deletions":25,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -22,6 +22,7 @@\n import java.util.List;\n \n import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n import javax.persistence.CollectionTable;\n import javax.persistence.Column;\n import javax.persistence.ElementCollection;\n@@ -31,12 +32,17 @@\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n import javax.persistence.JoinColumn;\n+import javax.persistence.OneToMany;\n import javax.persistence.Table;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n+import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n import org.apache.syncope.core.persistence.jpa.validation.entity.NotificationCheck;\n \n@@ -56,19 +62,18 @@ public class JPANotification extends AbstractEntity<Long> implements Notificatio\n     @Column(name = \"event\")\n     @CollectionTable(name = \"Notification_events\",\n             joinColumns =\n-            @JoinColumn(name = \"Notification_id\", referencedColumnName = \"id\"))\n+            @JoinColumn(name = \"notification_id\", referencedColumnName = \"id\"))\n     private List<String> events;\n \n-    private String userAbout;\n-\n-    private String groupAbout;\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"notification\")\n+    private List<JPAAnyAbout> abouts;\n \n     private String recipients;\n \n     @ElementCollection(fetch = FetchType.EAGER)\n     @CollectionTable(name = \"Notification_staticRecipients\",\n             joinColumns =\n-            @JoinColumn(name = \"Notification_id\", referencedColumnName = \"id\"))\n+            @JoinColumn(name = \"notification_id\", referencedColumnName = \"id\"))\n     @Column(name = \"staticRecipients\")\n     private List<String> staticRecipients;\n \n@@ -106,6 +111,7 @@ public class JPANotification extends AbstractEntity<Long> implements Notificatio\n \n     public JPANotification() {\n         events = new ArrayList<>();\n+        abouts = new ArrayList<>();\n         staticRecipients = new ArrayList<>();\n         selfAsRecipient = getBooleanAsInteger(false);\n         active = getBooleanAsInteger(true);\n@@ -117,26 +123,6 @@ public Long getKey() {\n         return id;\n     }\n \n-    @Override\n-    public String getUserAbout() {\n-        return userAbout;\n-    }\n-\n-    @Override\n-    public void setUserAbout(final String userAbout) {\n-        this.userAbout = userAbout;\n-    }\n-\n-    @Override\n-    public String getGroupAbout() {\n-        return groupAbout;\n-    }\n-\n-    @Override\n-    public void setGroupAbout(final String groupAbout) {\n-        this.groupAbout = groupAbout;\n-    }\n-\n     @Override\n     public String getRecipients() {\n         return recipients;\n@@ -173,6 +159,34 @@ public List<String> getEvents() {\n         return events;\n     }\n \n+    @Override\n+    public boolean add(final AnyAbout about) {\n+        checkType(about, JPAAnyAbout.class);\n+        return this.abouts.add((JPAAnyAbout) about);\n+    }\n+\n+    @Override\n+    public boolean remove(final AnyAbout about) {\n+        checkType(about, JPAAnyAbout.class);\n+        return this.abouts.remove((JPAAnyAbout) about);\n+    }\n+\n+    @Override\n+    public AnyAbout getAbout(final AnyType anyType) {\n+        return CollectionUtils.find(abouts, new Predicate<AnyAbout>() {\n+\n+            @Override\n+            public boolean evaluate(final AnyAbout about) {\n+                return anyType != null && anyType.equals(about.getAnyType());\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public List<? extends AnyAbout> getAbouts() {\n+        return abouts;\n+    }\n+\n     @Override\n     public List<String> getStaticRecipients() {\n         return staticRecipients;"},{"sha":"5f767e0b0fecaea127f3f8369ad7b0cf42179f33","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPlainSchema.java","status":"renamed","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -21,11 +21,12 @@\n import java.lang.reflect.Constructor;\n import javax.persistence.Basic;\n import javax.persistence.Column;\n+import javax.persistence.Entity;\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n import javax.persistence.Id;\n import javax.persistence.Lob;\n-import javax.persistence.MappedSuperclass;\n+import javax.persistence.Table;\n import javax.persistence.Transient;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n@@ -38,13 +39,16 @@\n import org.apache.syncope.core.persistence.jpa.validation.entity.PlainSchemaCheck;\n import org.apache.syncope.core.persistence.jpa.validation.entity.SchemaNameCheck;\n \n-@MappedSuperclass\n+@Entity\n+@Table(name = JPAPlainSchema.TABLE)\n @PlainSchemaCheck\n @SchemaNameCheck\n-public abstract class AbstractPlainSchema extends AbstractEntity<String> implements PlainSchema {\n+public class JPAPlainSchema extends AbstractEntity<String> implements PlainSchema {\n \n     private static final long serialVersionUID = -8621028596062054739L;\n \n+    public static final String TABLE = \"PlainSchema\";\n+\n     @Id\n     private String name;\n \n@@ -97,7 +101,7 @@ public abstract class AbstractPlainSchema extends AbstractEntity<String> impleme\n     @Transient\n     private Validator validator;\n \n-    public AbstractPlainSchema() {\n+    public JPAPlainSchema() {\n         super();\n \n         type = AttrSchemaType.String;","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainSchema.java"},{"sha":"4969497f528a76136054d31e0ef932f25ca73156","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARole.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n+import org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n@@ -37,7 +38,7 @@\n import javax.persistence.Table;\n import javax.validation.Valid;\n import javax.validation.constraints.NotNull;\n-import org.apache.syncope.core.persistence.api.entity.DynRoleMembership;\n+import org.apache.syncope.core.persistence.api.entity.user.DynRoleMembership;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n "},{"sha":"f7cf71738c6024988d3d2c66e357892185f711ec","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAVirSchema.java","status":"renamed","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -19,20 +19,26 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import javax.persistence.Basic;\n+import javax.persistence.Cacheable;\n+import javax.persistence.Entity;\n import javax.persistence.Id;\n-import javax.persistence.MappedSuperclass;\n+import javax.persistence.Table;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.jpa.validation.entity.SchemaNameCheck;\n \n-@MappedSuperclass\n+@Entity\n+@Table(name = JPAVirSchema.TABLE)\n+@Cacheable\n @SchemaNameCheck\n-public abstract class AbstractVirSchema extends AbstractEntity<String> implements VirSchema {\n+public class JPAVirSchema extends AbstractEntity<String> implements VirSchema {\n \n     private static final long serialVersionUID = 3274006935328590141L;\n \n+    public static final String TABLE = \"VirSchema\";\n+\n     @Id\n     private String name;\n \n@@ -41,7 +47,7 @@ public abstract class AbstractVirSchema extends AbstractEntity<String> implement\n     @Max(1)\n     private Integer readonly;\n \n-    public AbstractVirSchema() {\n+    public JPAVirSchema() {\n         super();\n \n         readonly = getBooleanAsInteger(false);","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractVirSchema.java"},{"sha":"e132601236aad5f22f4e2121a7388afcd9bde811","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAttributableUtilsFactory.java","status":"removed","additions":0,"deletions":81,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAttributableUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAttributableUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAttributableUtilsFactory.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,81 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import org.apache.syncope.common.lib.types.AttributableType;\n-import org.apache.syncope.core.persistence.api.entity.Attributable;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n-import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class JPAttributableUtilsFactory implements AttributableUtilsFactory {\n-\n-    @Override\n-    public AttributableUtils getInstance(final AttributableType type) {\n-        return new JPAAttributableUtils(type);\n-    }\n-\n-    @Override\n-    public AttributableUtils getInstance(final String attributableType) {\n-        return new JPAAttributableUtils(AttributableType.valueOf(attributableType));\n-    }\n-\n-    @Override\n-    public AttributableUtils getInstance(final ObjectClass objectClass) {\n-        AttributableType type = null;\n-        if (ObjectClass.ACCOUNT.equals(objectClass)) {\n-            type = AttributableType.USER;\n-        } else if (ObjectClass.GROUP.equals(objectClass)) {\n-            type = AttributableType.GROUP;\n-        }\n-\n-        if (type == null) {\n-            throw new IllegalArgumentException(\"ObjectClass not supported: \" + objectClass);\n-        }\n-\n-        return new JPAAttributableUtils(type);\n-    }\n-\n-    @Override\n-    public AttributableUtils getInstance(final Attributable<?, ?, ?> attributable) {\n-        AttributableType type = null;\n-        if (attributable instanceof User) {\n-            type = AttributableType.USER;\n-        } else if (attributable instanceof Group) {\n-            type = AttributableType.GROUP;\n-        } else if (attributable instanceof Membership) {\n-            type = AttributableType.MEMBERSHIP;\n-        } else if (attributable instanceof Conf) {\n-            type = AttributableType.CONFIGURATION;\n-        }\n-\n-        if (type == null) {\n-            throw new IllegalArgumentException(\"Attributable type not supported: \" + attributable.getClass().getName());\n-        }\n-\n-        return new JPAAttributableUtils(type);\n-    }\n-\n-}"},{"sha":"abd6676cedda73d68fffc908df2df1e83ff9e4f5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAADerAttr.java","status":"renamed","additions":23,"deletions":7,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAADerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAADerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAADerAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -16,19 +16,35 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity.membership;\n+package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n \n import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.membership.MDerSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractDerSchema;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.ADerAttr;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractDerAttr;\n \n @Entity\n-@Table(name = JPAMDerSchema.TABLE)\n-public class JPAMDerSchema extends AbstractDerSchema implements MDerSchema {\n+@Table(name = JPAADerAttr.TABLE)\n+public class JPAADerAttr extends AbstractDerAttr<AnyObject> implements ADerAttr {\n \n-    private static final long serialVersionUID = -4694082505732174583L;\n+    private static final long serialVersionUID = 5828533701103533330L;\n \n-    public static final String TABLE = \"MDerSchema\";\n+    public static final String TABLE = \"ADerAttr\";\n+\n+    @ManyToOne\n+    private JPAAnyObject owner;\n+\n+    @Override\n+    public AnyObject getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final AnyObject owner) {\n+        checkType(owner, JPAAnyObject.class);\n+        this.owner = (JPAAnyObject) owner;\n+    }\n \n }","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/membership/JPAMDerSchema.java"},{"sha":"c12b8556eeb9baa2adf4872baf67bae9000df1e3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAADynGroupMembership.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAADynGroupMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAADynGroupMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAADynGroupMembership.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractDynMembership;\n+import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n+\n+@Entity\n+@Table(name = JPAADynGroupMembership.TABLE)\n+public class JPAADynGroupMembership extends AbstractDynMembership<AnyObject> implements ADynGroupMembership {\n+\n+    private static final long serialVersionUID = -7336814163949640354L;\n+\n+    public static final String TABLE = \"ADynGroupMembership\";\n+\n+    @Id\n+    private Long id;\n+\n+    @OneToOne\n+    private JPAGroup group;\n+\n+    @ManyToMany\n+    @JoinTable(joinColumns =\n+            @JoinColumn(name = \"aDynGroupMembership_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"anyObject_id\"))\n+    private List<JPAAnyObject> anyObjects = new ArrayList<>();\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public Group getGroup() {\n+        return group;\n+    }\n+\n+    @Override\n+    public void setGroup(final Group role) {\n+        checkType(role, JPAGroup.class);\n+        this.group = (JPAGroup) role;\n+    }\n+\n+    @Override\n+    public boolean add(final AnyObject anyObject) {\n+        checkType(anyObject, JPAAnyObject.class);\n+        return anyObjects.add((JPAAnyObject) anyObject);\n+    }\n+\n+    @Override\n+    public boolean remove(final AnyObject anyObject) {\n+        checkType(anyObject, JPAAnyObject.class);\n+        return anyObjects.remove((JPAAnyObject) anyObject);\n+    }\n+\n+    @Override\n+    public List<? extends AnyObject> getMembers() {\n+        return anyObjects;\n+    }\n+}"},{"sha":"e770e3387cd942d45a6d3a02c2da7c97f2478d25","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAMembership.java","status":"renamed","additions":26,"deletions":24,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAMembership.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -16,60 +16,62 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity.group;\n+package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n \n+import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n-import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.group.GPlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrTemplate;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;\n+import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n \n @Entity\n-@Table(name = JPAGPlainAttrTemplate.TABLE)\n-public class JPAGPlainAttrTemplate extends AbstractPlainAttrTemplate<GPlainSchema> implements GPlainAttrTemplate {\n+@Table(name = JPAAMembership.TABLE)\n+public class JPAAMembership extends AbstractEntity<Long> implements AMembership {\n \n-    private static final long serialVersionUID = 6943917051517266268L;\n+    private static final long serialVersionUID = 1503557547394601405L;\n \n-    public static final String TABLE = \"GPlainAttrTemplate\";\n+    public static final String TABLE = \"AMembership\";\n \n     @Id\n     private Long id;\n \n     @ManyToOne\n-    private JPAGroup owner;\n+    @Column(name = \"anyObject_id\")\n+    private JPAAnyObject leftEnd;\n+\n+    @ManyToOne\n+    @Column(name = \"group_id\")\n+    private JPAGroup rightEnd;\n \n     @Override\n     public Long getKey() {\n         return id;\n     }\n \n-    @ManyToOne\n-    @JoinColumn(name = \"schema_name\")\n-    private JPAGPlainSchema schema;\n-\n     @Override\n-    public GPlainSchema getSchema() {\n-        return schema;\n+    public AnyObject getLeftEnd() {\n+        return leftEnd;\n     }\n \n     @Override\n-    public void setSchema(final GPlainSchema schema) {\n-        checkType(schema, JPAGPlainSchema.class);\n-        this.schema = (JPAGPlainSchema) schema;\n+    public void setLeftEnd(final AnyObject leftEnd) {\n+        checkType(leftEnd, JPAAnyObject.class);\n+        this.leftEnd = (JPAAnyObject) leftEnd;\n     }\n \n     @Override\n-    public Group getOwner() {\n-        return owner;\n+    public JPAGroup getRightEnd() {\n+        return rightEnd;\n     }\n \n     @Override\n-    public void setOwner(final Group owner) {\n-        checkType(owner, JPAGroup.class);\n-        this.owner = (JPAGroup) owner;\n+    public void setRightEnd(final Group rightEnd) {\n+        checkType(rightEnd, JPAGroup.class);\n+        this.rightEnd = (JPAGroup) rightEnd;\n     }\n }","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGPlainAttrTemplate.java"},{"sha":"46c1680805b902b32dbaf19009c486cf9420f22f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAPlainAttr.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.validation.Valid;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttr;\n+\n+@Entity\n+@Table(name = JPAAPlainAttr.TABLE)\n+public class JPAAPlainAttr extends AbstractPlainAttr<AnyObject> implements APlainAttr {\n+\n+    private static final long serialVersionUID = 8066058729580952116L;\n+\n+    public static final String TABLE = \"APlainAttr\";\n+\n+    @Id\n+    private Long id;\n+\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPAAnyObject owner;\n+\n+    @OneToMany(cascade = CascadeType.MERGE, orphanRemoval = true, mappedBy = \"attribute\")\n+    @Valid\n+    private List<JPAAPlainAttrValue> values = new ArrayList<>();\n+\n+    @OneToOne(cascade = CascadeType.ALL, mappedBy = \"attribute\")\n+    @Valid\n+    private JPAAPlainAttrUniqueValue uniqueValue;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public AnyObject getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final AnyObject owner) {\n+        checkType(owner, JPAAnyObject.class);\n+        this.owner = (JPAAnyObject) owner;\n+    }\n+\n+    @Override\n+    protected boolean addForMultiValue(final PlainAttrValue attrValue) {\n+        checkType(attrValue, JPAAPlainAttrValue.class);\n+        return values.add((JPAAPlainAttrValue) attrValue);\n+    }\n+\n+    @Override\n+    public boolean remove(final PlainAttrValue attrValue) {\n+        checkType(attrValue, JPAAPlainAttrValue.class);\n+        return values.remove((JPAAPlainAttrValue) attrValue);\n+    }\n+\n+    @Override\n+    public List<? extends APlainAttrValue> getValues() {\n+        return values;\n+    }\n+\n+    @Override\n+    public APlainAttrUniqueValue getUniqueValue() {\n+        return uniqueValue;\n+    }\n+\n+    @Override\n+    public void setUniqueValue(final PlainAttrUniqueValue uniqueValue) {\n+        checkType(owner, JPAAPlainAttrUniqueValue.class);\n+        this.uniqueValue = (JPAAPlainAttrUniqueValue) uniqueValue;\n+    }\n+}"},{"sha":"25cc5eb7a129917f434158d83bde211f29f131f9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAPlainAttrUniqueValue.java","status":"renamed","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttrUniqueValue.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity.membership;\n+package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n \n import javax.persistence.Entity;\n import javax.persistence.Id;\n@@ -26,53 +26,53 @@\n import javax.persistence.Table;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttrUniqueValue;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n \n @Entity\n-@Table(name = JPAMPlainAttrUniqueValue.TABLE)\n-public class JPAMPlainAttrUniqueValue extends AbstractPlainAttrValue implements MPlainAttrUniqueValue {\n+@Table(name = JPAAPlainAttrUniqueValue.TABLE)\n+public class JPAAPlainAttrUniqueValue extends AbstractPlainAttrValue implements APlainAttrUniqueValue {\n \n-    private static final long serialVersionUID = 3985867531873453718L;\n+    private static final long serialVersionUID = -6412206895091662679L;\n \n-    public static final String TABLE = \"MPlainAttrUniqueValue\";\n+    public static final String TABLE = \"APlainAttrUniqueValue\";\n \n     @Id\n     private Long id;\n \n     @OneToOne(optional = false)\n-    private JPAMPlainAttr attribute;\n+    private JPAAPlainAttr attribute;\n \n     @ManyToOne(optional = false)\n     @JoinColumn(name = \"schema_name\")\n-    private JPAMPlainSchema schema;\n+    private JPAPlainSchema schema;\n \n     @Override\n     public Long getKey() {\n         return id;\n     }\n \n     @Override\n-    public MPlainAttr getAttr() {\n+    public APlainAttr getAttr() {\n         return attribute;\n     }\n \n     @Override\n     public void setAttr(final PlainAttr attr) {\n-        checkType(attr, JPAMPlainAttr.class);\n-        this.attribute = (JPAMPlainAttr) attr;\n+        checkType(attr, JPAAPlainAttr.class);\n+        this.attribute = (JPAAPlainAttr) attr;\n     }\n \n     @Override\n-    public MPlainSchema getSchema() {\n+    public PlainSchema getSchema() {\n         return schema;\n     }\n \n     @Override\n     public void setSchema(final PlainSchema schema) {\n-        checkType(schema, JPAMPlainSchema.class);\n-        this.schema = (JPAMPlainSchema) schema;\n+        checkType(schema, JPAPlainSchema.class);\n+        this.schema = (JPAPlainSchema) schema;\n     }\n }","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/membership/JPAMPlainAttrUniqueValue.java"},{"sha":"73c962c4b1b2a0d2f964a7c23cd0e2a8c1be2bf2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAPlainAttrValue.java","status":"renamed","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttrValue.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity.membership;\n+package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n \n import javax.persistence.Entity;\n import javax.persistence.Id;\n@@ -26,39 +26,39 @@\n import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n \n @Entity\n-@Table(name = JPAMPlainAttrValue.TABLE)\n+@Table(name = JPAAPlainAttrValue.TABLE)\n @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n-public class JPAMPlainAttrValue extends AbstractPlainAttrValue implements MPlainAttrValue {\n+public class JPAAPlainAttrValue extends AbstractPlainAttrValue implements APlainAttrValue {\n \n-    private static final long serialVersionUID = -7188881172631198385L;\n+    private static final long serialVersionUID = -2965487882824889272L;\n \n-    public static final String TABLE = \"MPlainAttrValue\";\n+    public static final String TABLE = \"APlainAttrValue\";\n \n     @Id\n     private Long id;\n \n     @ManyToOne\n     @NotNull\n-    private JPAMPlainAttr attribute;\n+    private JPAAPlainAttr attribute;\n \n     @Override\n     public Long getKey() {\n         return id;\n     }\n \n     @Override\n-    public MPlainAttr getAttr() {\n+    public APlainAttr getAttr() {\n         return attribute;\n     }\n \n     @Override\n     public void setAttr(final PlainAttr attr) {\n-        checkType(attr, JPAMPlainAttr.class);\n-        this.attribute = (JPAMPlainAttr) attr;\n+        checkType(attr, JPAAPlainAttr.class);\n+        this.attribute = (JPAAPlainAttr) attr;\n     }\n }","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/membership/JPAMPlainAttrValue.java"},{"sha":"93a7941654652d1a416b7cdf6a3b2a44dead154d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAARelationship.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAARelationship.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAARelationship.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAARelationship.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;\n+\n+@Entity\n+@Table(name = JPAARelationship.TABLE)\n+public class JPAARelationship extends AbstractEntity<Long> implements ARelationship {\n+\n+    private static final long serialVersionUID = 6608821135023815357L;\n+\n+    public static final String TABLE = \"ARelationship\";\n+\n+    @Id\n+    private Long id;\n+\n+    @ManyToOne\n+    @Column(name = \"left_anyObject_id\")\n+    private JPAAnyObject leftEnd;\n+\n+    @ManyToOne\n+    @Column(name = \"right_anyObject_id\")\n+    private JPAAnyObject rightEnd;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public AnyObject getLeftEnd() {\n+        return leftEnd;\n+    }\n+\n+    @Override\n+    public void setLeftEnd(final AnyObject leftEnd) {\n+        checkType(leftEnd, JPAAnyObject.class);\n+        this.leftEnd = (JPAAnyObject) leftEnd;\n+    }\n+\n+    @Override\n+    public AnyObject getRightEnd() {\n+        return rightEnd;\n+    }\n+\n+    @Override\n+    public void setRightEnd(final AnyObject rightEnd) {\n+        checkType(rightEnd, JPAAnyObject.class);\n+        this.rightEnd = (JPAAnyObject) rightEnd;\n+    }\n+\n+}"},{"sha":"7469799fccdf018e8b32b28177e7208280fd8328","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAVirAttr.java","status":"renamed","additions":23,"deletions":9,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAVirAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -16,21 +16,35 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity.user;\n+package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n \n-import javax.persistence.Cacheable;\n import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.user.UVirSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractVirSchema;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AVirAttr;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractVirAttr;\n \n @Entity\n-@Table(name = JPAUVirSchema.TABLE)\n-@Cacheable\n-public class JPAUVirSchema extends AbstractVirSchema implements UVirSchema {\n+@Table(name = JPAAVirAttr.TABLE)\n+public class JPAAVirAttr extends AbstractVirAttr<AnyObject> implements AVirAttr {\n \n-    private static final long serialVersionUID = 1089308700791426201L;\n+    private static final long serialVersionUID = -4935990254545760827L;\n \n-    public static final String TABLE = \"UVirSchema\";\n+    public static final String TABLE = \"AVirAttr\";\n+\n+    @ManyToOne\n+    private JPAAnyObject owner;\n+\n+    @Override\n+    public AnyObject getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final AnyObject owner) {\n+        checkType(owner, JPAAnyObject.class);\n+        this.owner = (JPAAnyObject) owner;\n+    }\n \n }","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUVirSchema.java"},{"sha":"6442c2dfacdec1cb400a5f8dd4683241c1f88738","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java","status":"added","additions":243,"deletions":0,"changes":243,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,243 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Cacheable;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import javax.validation.Valid;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.ADerAttr;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AVirAttr;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractAny;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAnyTypeClass;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n+\n+@Entity\n+@Table(name = JPAAnyObject.TABLE)\n+@Cacheable\n+public class JPAAnyObject extends AbstractAny<APlainAttr, ADerAttr, AVirAttr> implements AnyObject {\n+\n+    private static final long serialVersionUID = 9063766472970643492L;\n+\n+    public static final String TABLE = \"AnyObject\";\n+\n+    @Id\n+    private Long id;\n+\n+    @ManyToOne(fetch = FetchType.EAGER, optional = false)\n+    private JPAAnyType type;\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n+    private List<JPAAPlainAttr> plainAttrs = new ArrayList<>();\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n+    private List<JPAADerAttr> derAttrs = new ArrayList<>();\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n+    private List<JPAAVirAttr> virAttrs = new ArrayList<>();\n+\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(joinColumns =\n+            @JoinColumn(name = \"anyObject_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"resource_name\"))\n+    private List<JPAExternalResource> resources = new ArrayList<>();\n+\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(joinColumns =\n+            @JoinColumn(name = \"anyObject_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"anyTypeClass_name\"))\n+    private List<JPAAnyTypeClass> auxClasses = new ArrayList<>();\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"leftEnd\")\n+    @Valid\n+    private List<JPAARelationship> relationships = new ArrayList<>();\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"leftEnd\")\n+    @Valid\n+    private List<JPAAMembership> memberships = new ArrayList<>();\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public AnyType getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public void setType(final AnyType type) {\n+        checkType(type, JPAAnyType.class);\n+        this.type = (JPAAnyType) type;\n+    }\n+\n+    @Override\n+    public boolean add(final APlainAttr attr) {\n+        checkType(attr, JPAAPlainAttr.class);\n+        return plainAttrs.add((JPAAPlainAttr) attr);\n+    }\n+\n+    @Override\n+    public boolean remove(final APlainAttr attr) {\n+        checkType(attr, JPAAPlainAttr.class);\n+        return plainAttrs.remove((JPAAPlainAttr) attr);\n+    }\n+\n+    @Override\n+    public List<? extends APlainAttr> getPlainAttrs() {\n+        return plainAttrs;\n+    }\n+\n+    @Override\n+    public boolean add(final ADerAttr attr) {\n+        checkType(attr, JPAADerAttr.class);\n+        return derAttrs.add((JPAADerAttr) attr);\n+    }\n+\n+    @Override\n+    public boolean remove(final ADerAttr attr) {\n+        checkType(attr, JPAADerAttr.class);\n+        return derAttrs.remove((JPAADerAttr) attr);\n+    }\n+\n+    @Override\n+    public List<? extends ADerAttr> getDerAttrs() {\n+        return derAttrs;\n+    }\n+\n+    @Override\n+    public boolean add(final AVirAttr attr) {\n+        checkType(attr, JPAAVirAttr.class);\n+        return virAttrs.add((JPAAVirAttr) attr);\n+    }\n+\n+    @Override\n+    public boolean remove(final AVirAttr attr) {\n+        checkType(attr, JPAAVirAttr.class);\n+        return virAttrs.remove((JPAAVirAttr) attr);\n+    }\n+\n+    @Override\n+    public List<? extends AVirAttr> getVirAttrs() {\n+        return virAttrs;\n+    }\n+\n+    @Override\n+    protected List<JPAExternalResource> internalGetResources() {\n+        return resources;\n+    }\n+\n+    @Override\n+    public boolean add(final AnyTypeClass auxClass) {\n+        checkType(auxClass, JPAAnyTypeClass.class);\n+        return this.auxClasses.add((JPAAnyTypeClass) auxClass);\n+    }\n+\n+    @Override\n+    public boolean remove(final AnyTypeClass auxClass) {\n+        checkType(auxClass, JPAAnyTypeClass.class);\n+        return this.auxClasses.remove((JPAAnyTypeClass) auxClass);\n+    }\n+\n+    @Override\n+    public List<? extends AnyTypeClass> getAuxClasses() {\n+        return auxClasses;\n+    }\n+\n+    @Override\n+    public boolean add(final ARelationship relationship) {\n+        checkType(relationship, JPAARelationship.class);\n+        return this.relationships.add((JPAARelationship) relationship);\n+    }\n+\n+    @Override\n+    public boolean remove(final ARelationship relationship) {\n+        checkType(relationship, JPAARelationship.class);\n+        return this.relationships.remove((JPAARelationship) relationship);\n+    }\n+\n+    @Override\n+    public ARelationship getRelationship(final AnyObject rightEnd) {\n+        return CollectionUtils.find(getRelationships(), new Predicate<ARelationship>() {\n+\n+            @Override\n+            public boolean evaluate(final ARelationship relationship) {\n+                return rightEnd != null && rightEnd.equals(relationship.getRightEnd());\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public List<? extends ARelationship> getRelationships() {\n+        return relationships;\n+    }\n+\n+    @Override\n+    public boolean add(final AMembership membership) {\n+        checkType(membership, JPAAMembership.class);\n+        return this.memberships.add((JPAAMembership) membership);\n+    }\n+\n+    @Override\n+    public boolean remove(final AMembership membership) {\n+        checkType(membership, JPAAMembership.class);\n+        return this.memberships.remove((JPAAMembership) membership);\n+    }\n+\n+    @Override\n+    public AMembership getMembership(final Long groupKey) {\n+        return CollectionUtils.find(getMemberships(), new Predicate<AMembership>() {\n+\n+            @Override\n+            public boolean evaluate(final AMembership membership) {\n+                return groupKey != null && groupKey.equals(membership.getRightEnd().getKey());\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public List<? extends AMembership> getMemberships() {\n+        return memberships;\n+    }\n+}"},{"sha":"6fd6c1e52f2fe5bb5815f8640ee762ad209a3636","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPACPlainAttr.java","status":"modified","additions":5,"deletions":35,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -24,20 +24,16 @@\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n-import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import javax.validation.Valid;\n-import org.apache.syncope.core.persistence.api.entity.Attributable;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.conf.CPlainSchema;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttr;\n \n@@ -46,7 +42,7 @@\n  */\n @Entity\n @Table(name = JPACPlainAttr.TABLE)\n-public class JPACPlainAttr extends AbstractPlainAttr implements CPlainAttr {\n+public class JPACPlainAttr extends AbstractPlainAttr<Conf> implements CPlainAttr {\n \n     private static final long serialVersionUID = 8022331942314540648L;\n \n@@ -64,19 +60,12 @@ public class JPACPlainAttr extends AbstractPlainAttr implements CPlainAttr {\n     @ManyToOne(fetch = FetchType.EAGER)\n     private JPAConf owner;\n \n-    /**\n-     * The schema of this attribute.\n-     */\n-    @ManyToOne(fetch = FetchType.EAGER)\n-    @JoinColumn(name = \"schema_name\")\n-    private JPACPlainSchema schema;\n-\n     /**\n      * Values of this attribute (if schema is not UNIQUE).\n      */\n     @OneToMany(cascade = CascadeType.MERGE, orphanRemoval = true, mappedBy = \"attribute\")\n     @Valid\n-    private List<JPACPlainAttrValue> values;\n+    private List<JPACPlainAttrValue> values = new ArrayList<>();\n \n     /**\n      * Value of this attribute (if schema is UNIQUE).\n@@ -85,14 +74,6 @@ public class JPACPlainAttr extends AbstractPlainAttr implements CPlainAttr {\n     @Valid\n     private JPACPlainAttrUniqueValue uniqueValue;\n \n-    /**\n-     * Default constructor.\n-     */\n-    public JPACPlainAttr() {\n-        super();\n-        values = new ArrayList<>();\n-    }\n-\n     @Override\n     public Long getKey() {\n         return id;\n@@ -104,30 +85,19 @@ public Conf getOwner() {\n     }\n \n     @Override\n-    public void setOwner(final Attributable<?, ?, ?> owner) {\n+    public void setOwner(final Conf owner) {\n         checkType(owner, JPAConf.class);\n         this.owner = (JPAConf) owner;\n     }\n \n     @Override\n-    public CPlainSchema getSchema() {\n-        return schema;\n-    }\n-\n-    @Override\n-    public void setSchema(final PlainSchema schema) {\n-        checkType(schema, JPACPlainSchema.class);\n-        this.schema = (JPACPlainSchema) schema;\n-    }\n-\n-    @Override\n-    protected boolean addValue(final PlainAttrValue attrValue) {\n+    protected boolean addForMultiValue(final PlainAttrValue attrValue) {\n         checkType(attrValue, JPACPlainAttrValue.class);\n         return values.add((JPACPlainAttrValue) attrValue);\n     }\n \n     @Override\n-    public boolean removeValue(final PlainAttrValue attrValue) {\n+    public boolean remove(final PlainAttrValue attrValue) {\n         checkType(attrValue, JPACPlainAttrValue.class);\n         return values.remove((JPACPlainAttrValue) attrValue);\n     }"},{"sha":"47839111ae2d491236a06ad30a5547aa054416e6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPACPlainAttrUniqueValue.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrUniqueValue.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -28,8 +28,8 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrUniqueValue;\n-import org.apache.syncope.core.persistence.api.entity.conf.CPlainSchema;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n \n @Entity\n @Table(name = JPACPlainAttrUniqueValue.TABLE)\n@@ -47,7 +47,7 @@ public class JPACPlainAttrUniqueValue extends AbstractPlainAttrValue implements\n \n     @ManyToOne(optional = false)\n     @JoinColumn(name = \"schema_name\")\n-    private JPACPlainSchema schema;\n+    private JPAPlainSchema schema;\n \n     @Override\n     public Long getKey() {\n@@ -66,13 +66,13 @@ public void setAttr(final PlainAttr attr) {\n     }\n \n     @Override\n-    public CPlainSchema getSchema() {\n+    public PlainSchema getSchema() {\n         return schema;\n     }\n \n     @Override\n     public void setSchema(final PlainSchema schema) {\n-        checkType(schema, JPACPlainSchema.class);\n-        this.schema = (JPACPlainSchema) schema;\n+        checkType(schema, JPAPlainSchema.class);\n+        this.schema = (JPAPlainSchema) schema;\n     }\n }"},{"sha":"590443b2e683503d76450f66ea5b8db6d926720d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPACPlainSchema.java","status":"removed","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainSchema.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,36 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.conf;\n-\n-import javax.persistence.Cacheable;\n-import javax.persistence.Entity;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.conf.CPlainSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainSchema;\n-\n-@Entity\n-@Table(name = JPACPlainSchema.TABLE)\n-@Cacheable\n-public class JPACPlainSchema extends AbstractPlainSchema implements CPlainSchema {\n-\n-    private static final long serialVersionUID = 3363019039331594433L;\n-\n-    public static final String TABLE = \"CPlainSchema\";\n-\n-}"},{"sha":"be3fa1915283f4f2fd4f94fc83ab59797276db55","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPAConf.java","status":"modified","additions":113,"deletions":10,"changes":123,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -28,16 +28,22 @@\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n import javax.validation.Valid;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractAttributable;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractAnnotatedEntity;\n \n @Entity\n @Table(name = JPAConf.TABLE)\n @Cacheable\n-public class JPAConf extends AbstractAttributable<CPlainAttr, DerAttr, VirAttr> implements Conf {\n+public class JPAConf extends AbstractAnnotatedEntity<Long> implements Conf {\n \n     private static final long serialVersionUID = 7671699609879382195L;\n \n@@ -67,50 +73,147 @@ public void setKey(final Long key) {\n     }\n \n     @Override\n-    public boolean addPlainAttr(final CPlainAttr attr) {\n+    public boolean add(final CPlainAttr attr) {\n         checkType(attr, JPACPlainAttr.class);\n         return plainAttrs.add((JPACPlainAttr) attr);\n     }\n \n     @Override\n-    public boolean removePlainAttr(final CPlainAttr attr) {\n+    public boolean remove(final CPlainAttr attr) {\n         checkType(attr, JPACPlainAttr.class);\n         return plainAttrs.remove((JPACPlainAttr) attr);\n     }\n \n+    @Override\n+    public CPlainAttr getPlainAttr(final String plainSchemaName) {\n+        return CollectionUtils.find(plainAttrs, new Predicate<CPlainAttr>() {\n+\n+            @Override\n+            public boolean evaluate(final CPlainAttr plainAttr) {\n+                return plainAttr != null && plainAttr.getSchema() != null\n+                        && plainSchemaName.equals(plainAttr.getSchema().getKey());\n+            }\n+        });\n+    }\n+\n     @Override\n     public List<? extends CPlainAttr> getPlainAttrs() {\n         return plainAttrs;\n     }\n \n     @Override\n-    public boolean addDerAttr(final DerAttr attr) {\n+    public boolean add(final DerAttr<?> attr) {\n         return false;\n     }\n \n     @Override\n-    public boolean removeDerAttr(final DerAttr derAttr) {\n+    public boolean remove(final DerAttr<?> derAttr) {\n         return false;\n     }\n \n     @Override\n-    public List<? extends DerAttr> getDerAttrs() {\n+    public DerAttr<?> getDerAttr(final String derSchemaName) {\n+        return null;\n+    }\n+\n+    @Override\n+    public List<? extends DerAttr<?>> getDerAttrs() {\n         return Collections.emptyList();\n     }\n \n     @Override\n-    public boolean addVirAttr(final VirAttr attr) {\n+    public boolean add(final VirAttr<?> attr) {\n         return false;\n     }\n \n     @Override\n-    public boolean removeVirAttr(final VirAttr virAttr) {\n+    public boolean remove(final VirAttr<?> virAttr) {\n         return false;\n     }\n \n     @Override\n-    public List<? extends VirAttr> getVirAttrs() {\n+    public VirAttr<?> getVirAttr(final String virSchemaName) {\n+        return null;\n+    }\n+\n+    @Override\n+    public List<? extends VirAttr<?>> getVirAttrs() {\n         return Collections.emptyList();\n     }\n \n+    @Override\n+    public boolean add(final ExternalResource resource) {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean remove(final ExternalResource resource) {\n+        return false;\n+    }\n+\n+    @Override\n+    public List<String> getResourceNames() {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public List<? extends ExternalResource> getResources() {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public boolean add(final AnyTypeClass auxClass) {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean remove(final AnyTypeClass auxClass) {\n+        return false;\n+    }\n+\n+    @Override\n+    public List<? extends AnyTypeClass> getAuxClasses() {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public String getWorkflowId() {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setWorkflowId(final String workflowId) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public String getStatus() {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setStatus(final String status) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public Realm getRealm() {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setRealm(final Realm realm) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public AnyType getType() {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setType(final AnyType type) {\n+        // nothing to do\n+    }\n+\n }"},{"sha":"46fc1cdc9c3eedc0b40c0f20dbb4cf0ad2de4543","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGDerAttr.java","status":"modified","additions":2,"deletions":34,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGDerAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,23 +18,16 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.group;\n \n-import javax.persistence.CascadeType;\n-import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.ManyToOne;\n-import javax.persistence.OneToOne;\n import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.Attributable;\n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.group.GDerAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.GDerAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.group.GDerSchema;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractDerAttr;\n \n @Entity\n @Table(name = JPAGDerAttr.TABLE)\n-public class JPAGDerAttr extends AbstractDerAttr implements GDerAttr {\n+public class JPAGDerAttr extends AbstractDerAttr<Group> implements GDerAttr {\n \n     private static final long serialVersionUID = 8007080005675899946L;\n \n@@ -43,40 +36,15 @@ public class JPAGDerAttr extends AbstractDerAttr implements GDerAttr {\n     @ManyToOne\n     private JPAGroup owner;\n \n-    @Column(nullable = false)\n-    @OneToOne(cascade = CascadeType.MERGE)\n-    private JPAGDerAttrTemplate template;\n-\n     @Override\n     public Group getOwner() {\n         return owner;\n     }\n \n     @Override\n-    public void setOwner(final Attributable<?, ?, ?> owner) {\n+    public void setOwner(final Group owner) {\n         checkType(owner, JPAGroup.class);\n         this.owner = (JPAGroup) owner;\n     }\n \n-    @Override\n-    public GDerAttrTemplate getTemplate() {\n-        return template;\n-    }\n-\n-    @Override\n-    public void setTemplate(final GDerAttrTemplate template) {\n-        checkType(template, JPAGDerAttrTemplate.class);\n-        this.template = (JPAGDerAttrTemplate) template;\n-    }\n-\n-    @Override\n-    public GDerSchema getSchema() {\n-        return template == null ? null : template.getSchema();\n-    }\n-\n-    @Override\n-    public void setSchema(final DerSchema schema) {\n-        LOG.warn(\"This is group attribute, set template to select schema\");\n-    }\n-\n }"},{"sha":"427d91beeb574791ed2c31ed55cbdfcce1dc0230","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGDerAttrTemplate.java","status":"removed","additions":0,"deletions":66,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGDerAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGDerAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGDerAttrTemplate.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,66 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.group;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.JoinColumn;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.group.GDerAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.group.GDerSchema;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractDerAttrTemplate;\n-\n-@Entity\n-@Table(name = JPAGDerAttrTemplate.TABLE)\n-public class JPAGDerAttrTemplate extends AbstractDerAttrTemplate<GDerSchema> implements GDerAttrTemplate {\n-\n-    private static final long serialVersionUID = 624868884107016649L;\n-\n-    public static final String TABLE = \"GDerAttrTemplate\";\n-\n-    @ManyToOne\n-    private JPAGroup owner;\n-\n-    @ManyToOne\n-    @JoinColumn(name = \"schema_name\")\n-    private JPAGDerSchema schema;\n-\n-    @Override\n-    public GDerSchema getSchema() {\n-        return schema;\n-    }\n-\n-    @Override\n-    public void setSchema(final GDerSchema schema) {\n-        checkType(schema, JPAGDerSchema.class);\n-        this.schema = (JPAGDerSchema) schema;\n-    }\n-\n-    @Override\n-    public Group getOwner() {\n-        return owner;\n-    }\n-\n-    @Override\n-    public void setOwner(final Group owner) {\n-        checkType(owner, JPAGroup.class);\n-        this.owner = (JPAGroup) owner;\n-    }\n-}"},{"sha":"b0a41aca7a337575604b453deaf09bf3027da28f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGDerSchema.java","status":"removed","additions":0,"deletions":34,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGDerSchema.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,34 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.group;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.group.GDerSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractDerSchema;\n-\n-@Entity\n-@Table(name = JPAGDerSchema.TABLE)\n-public class JPAGDerSchema extends AbstractDerSchema implements GDerSchema {\n-\n-    private static final long serialVersionUID = -6868889736207576372L;\n-\n-    public static final String TABLE = \"GDerSchema\";\n-\n-}"},{"sha":"dd2679d1916916cdb31191881242ab9789b7595e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGMapping.java","status":"removed","additions":0,"deletions":103,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGMapping.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,103 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.group;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.persistence.CascadeType;\n-import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n-import javax.persistence.Id;\n-import javax.persistence.OneToMany;\n-import javax.persistence.OneToOne;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.group.GMapping;\n-import org.apache.syncope.core.persistence.api.entity.group.GMappingItem;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractMapping;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAExternalResource;\n-\n-@Entity\n-@Table(name = JPAGMapping.TABLE)\n-public class JPAGMapping extends AbstractMapping<GMappingItem> implements GMapping {\n-\n-    public static final String TABLE = \"GMapping\";\n-\n-    private static final long serialVersionUID = 4578756002867863392L;\n-\n-    @Id\n-    private Long id;\n-\n-    /**\n-     * Resource owning this mapping.\n-     */\n-    @OneToOne\n-    private JPAExternalResource resource;\n-\n-    /**\n-     * Attribute mappings.\n-     */\n-    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"mapping\")\n-    private List<JPAGMappingItem> items;\n-\n-    public JPAGMapping() {\n-        super();\n-\n-        items = new ArrayList<>();\n-    }\n-\n-    @Override\n-    public Long getKey() {\n-        return id;\n-    }\n-\n-    @Override\n-    public ExternalResource getResource() {\n-        return resource;\n-    }\n-\n-    @Override\n-    public void setResource(final ExternalResource resource) {\n-        checkType(resource, JPAExternalResource.class);\n-        this.resource = (JPAExternalResource) resource;\n-    }\n-\n-    @Override\n-    public void setAccountIdItem(final GMappingItem item) {\n-        checkType(item, JPAGMappingItem.class);\n-        this.addAccountIdItem((JPAGMappingItem) item);\n-    }\n-\n-    @Override\n-    public List<? extends GMappingItem> getItems() {\n-        return items;\n-    }\n-\n-    @Override\n-    public boolean addItem(final GMappingItem item) {\n-        checkType(item, JPAGMappingItem.class);\n-        return items.contains((JPAGMappingItem) item) || items.add((JPAGMappingItem) item);\n-    }\n-\n-    @Override\n-    public boolean removeItem(final GMappingItem item) {\n-        checkType(item, JPAGMappingItem.class);\n-        return items.remove((JPAGMappingItem) item);\n-    }\n-}"},{"sha":"2e3dd8ec4507683de702001964c24bd4fe8f57d7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGMappingItem.java","status":"removed","additions":0,"deletions":58,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGMappingItem.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,58 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.group;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.Mapping;\n-import org.apache.syncope.core.persistence.api.entity.group.GMappingItem;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractMappingItem;\n-\n-@Entity\n-@Table(name = JPAGMappingItem.TABLE)\n-public class JPAGMappingItem extends AbstractMappingItem implements GMappingItem {\n-\n-    public static final String TABLE = \"GMappingItem\";\n-\n-    private static final long serialVersionUID = -2670787666933476166L;\n-\n-    @Id\n-    private Long id;\n-\n-    @ManyToOne\n-    private JPAGMapping mapping;\n-\n-    @Override\n-    public Long getKey() {\n-        return id;\n-    }\n-\n-    @Override\n-    public Mapping<GMappingItem> getMapping() {\n-        return mapping;\n-    }\n-\n-    @Override\n-    public void setMapping(final Mapping<?> mapping) {\n-        checkType(mapping, JPAGMapping.class);\n-        this.mapping = (JPAGMapping) mapping;\n-    }\n-}"},{"sha":"daafd08b7cd26a9344946740524f4e464af0fe1f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGPlainAttr.java","status":"modified","additions":5,"deletions":40,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -21,7 +21,6 @@\n import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.CascadeType;\n-import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n@@ -30,21 +29,17 @@\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import javax.validation.Valid;\n-import org.apache.syncope.core.persistence.api.entity.Attributable;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrTemplate;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.group.GPlainSchema;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttr;\n \n @Entity\n @Table(name = JPAGPlainAttr.TABLE)\n-public class JPAGPlainAttr extends AbstractPlainAttr implements GPlainAttr {\n+public class JPAGPlainAttr extends AbstractPlainAttr<Group> implements GPlainAttr {\n \n     private static final long serialVersionUID = 2848159565890995780L;\n \n@@ -56,23 +51,14 @@ public class JPAGPlainAttr extends AbstractPlainAttr implements GPlainAttr {\n     @ManyToOne(fetch = FetchType.EAGER)\n     private JPAGroup owner;\n \n-    @Column(nullable = false)\n-    @OneToOne(cascade = CascadeType.MERGE)\n-    private JPAGPlainAttrTemplate template;\n-\n     @OneToMany(cascade = CascadeType.MERGE, orphanRemoval = true, mappedBy = \"attribute\")\n     @Valid\n-    private List<JPAGPlainAttrValue> values;\n+    private List<JPAGPlainAttrValue> values = new ArrayList<>();\n \n     @OneToOne(cascade = CascadeType.ALL, mappedBy = \"attribute\")\n     @Valid\n     private JPAGPlainAttrUniqueValue uniqueValue;\n \n-    public JPAGPlainAttr() {\n-        super();\n-        values = new ArrayList<>();\n-    }\n-\n     @Override\n     public Long getKey() {\n         return id;\n@@ -84,40 +70,19 @@ public Group getOwner() {\n     }\n \n     @Override\n-    public void setOwner(final Attributable<?, ?, ?> owner) {\n+    public void setOwner(final Group owner) {\n         checkType(owner, JPAGroup.class);\n         this.owner = (JPAGroup) owner;\n     }\n \n     @Override\n-    public GPlainAttrTemplate getTemplate() {\n-        return template;\n-    }\n-\n-    @Override\n-    public void setTemplate(final GPlainAttrTemplate template) {\n-        checkType(template, JPAGPlainAttrTemplate.class);\n-        this.template = (JPAGPlainAttrTemplate) template;\n-    }\n-\n-    @Override\n-    public GPlainSchema getSchema() {\n-        return template == null ? null : template.getSchema();\n-    }\n-\n-    @Override\n-    public void setSchema(final PlainSchema schema) {\n-        LOG.warn(\"This is group attribute, set template to select schema\");\n-    }\n-\n-    @Override\n-    protected boolean addValue(final PlainAttrValue attrValue) {\n+    protected boolean addForMultiValue(final PlainAttrValue attrValue) {\n         checkType(attrValue, JPAGPlainAttrValue.class);\n         return values.add((JPAGPlainAttrValue) attrValue);\n     }\n \n     @Override\n-    public boolean removeValue(final PlainAttrValue attrValue) {\n+    public boolean remove(final PlainAttrValue attrValue) {\n         checkType(attrValue, JPAGPlainAttrValue.class);\n         return values.remove((JPAGPlainAttrValue) attrValue);\n     }"},{"sha":"3efae7cf1b9dcb4f027843ca94599188bda9fabf","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGPlainAttrUniqueValue.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttrUniqueValue.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -28,8 +28,8 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrUniqueValue;\n-import org.apache.syncope.core.persistence.api.entity.group.GPlainSchema;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n \n @Entity\n @Table(name = JPAGPlainAttrUniqueValue.TABLE)\n@@ -47,7 +47,7 @@ public class JPAGPlainAttrUniqueValue extends AbstractPlainAttrValue implements\n \n     @ManyToOne(optional = false)\n     @JoinColumn(name = \"schema_name\")\n-    private JPAGPlainSchema schema;\n+    private JPAPlainSchema schema;\n \n     @Override\n     public Long getKey() {\n@@ -66,13 +66,13 @@ public void setAttr(final PlainAttr attr) {\n     }\n \n     @Override\n-    public GPlainSchema getSchema() {\n+    public PlainSchema getSchema() {\n         return schema;\n     }\n \n     @Override\n     public void setSchema(final PlainSchema schema) {\n-        checkType(schema, JPAGPlainSchema.class);\n-        this.schema = (JPAGPlainSchema) schema;\n+        checkType(schema, JPAPlainSchema.class);\n+        this.schema = (JPAPlainSchema) schema;\n     }\n }"},{"sha":"684be578f9b120c5dd675320dc27eb140dd757c1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGPlainSchema.java","status":"removed","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainSchema.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,36 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.group;\n-\n-import javax.persistence.Cacheable;\n-import javax.persistence.Entity;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.group.GPlainSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainSchema;\n-\n-@Entity\n-@Table(name = JPAGPlainSchema.TABLE)\n-@Cacheable\n-public class JPAGPlainSchema extends AbstractPlainSchema implements GPlainSchema {\n-\n-    private static final long serialVersionUID = -7417234690221851342L;\n-\n-    public static final String TABLE = \"GPlainSchema\";\n-\n-}"},{"sha":"302e056cad71cbe7b124e74275c8308ec0217d34","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGVirAttr.java","status":"modified","additions":2,"deletions":34,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGVirAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -18,23 +18,16 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.group;\n \n-import javax.persistence.CascadeType;\n-import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.ManyToOne;\n-import javax.persistence.OneToOne;\n import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.Attributable;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.group.GVirAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirSchema;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractVirAttr;\n \n @Entity\n @Table(name = JPAGVirAttr.TABLE)\n-public class JPAGVirAttr extends AbstractVirAttr implements GVirAttr {\n+public class JPAGVirAttr extends AbstractVirAttr<Group> implements GVirAttr {\n \n     private static final long serialVersionUID = -1747430556914428649L;\n \n@@ -43,40 +36,15 @@ public class JPAGVirAttr extends AbstractVirAttr implements GVirAttr {\n     @ManyToOne\n     private JPAGroup owner;\n \n-    @Column(nullable = false)\n-    @OneToOne(cascade = CascadeType.MERGE)\n-    private JPAGVirAttrTemplate template;\n-\n     @Override\n     public Group getOwner() {\n         return owner;\n     }\n \n     @Override\n-    public void setOwner(final Attributable<?, ?, ?> owner) {\n+    public void setOwner(final Group owner) {\n         checkType(owner, JPAGroup.class);\n         this.owner = (JPAGroup) owner;\n     }\n \n-    @Override\n-    public GVirAttrTemplate getTemplate() {\n-        return template;\n-    }\n-\n-    @Override\n-    public void setTemplate(final GVirAttrTemplate template) {\n-        checkType(template, JPAGVirAttrTemplate.class);\n-        this.template = (JPAGVirAttrTemplate) template;\n-    }\n-\n-    @Override\n-    public GVirSchema getSchema() {\n-        return template == null ? null : template.getSchema();\n-    }\n-\n-    @Override\n-    public void setSchema(final VirSchema schema) {\n-        LOG.warn(\"This is group attribute, set template to select schema\");\n-    }\n-\n }"},{"sha":"72f9fd3ca6779904c86e2d092da2617cb22f489e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGVirAttrTemplate.java","status":"removed","additions":0,"deletions":66,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGVirAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGVirAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGVirAttrTemplate.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,66 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.group;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.JoinColumn;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirSchema;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractVirAttrTemplate;\n-\n-@Entity\n-@Table(name = JPAGVirAttrTemplate.TABLE)\n-public class JPAGVirAttrTemplate extends AbstractVirAttrTemplate<GVirSchema> implements GVirAttrTemplate {\n-\n-    private static final long serialVersionUID = 4896495904794493479L;\n-\n-    public static final String TABLE = \"GVirAttrTemplate\";\n-\n-    @ManyToOne\n-    private JPAGroup owner;\n-\n-    @ManyToOne\n-    @JoinColumn(name = \"schema_name\")\n-    private JPAGVirSchema schema;\n-\n-    @Override\n-    public GVirSchema getSchema() {\n-        return schema;\n-    }\n-\n-    @Override\n-    public void setSchema(final GVirSchema schema) {\n-        checkType(schema, JPAGVirSchema.class);\n-        this.schema = (JPAGVirSchema) schema;\n-    }\n-\n-    @Override\n-    public Group getOwner() {\n-        return owner;\n-    }\n-\n-    @Override\n-    public void setOwner(final Group group) {\n-        checkType(group, JPAGroup.class);\n-        this.owner = (JPAGroup) group;\n-    }\n-}"},{"sha":"6f735a8dabb50659d75d10106aa4fc1c32d073db","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGVirSchema.java","status":"removed","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGVirSchema.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,36 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.group;\n-\n-import javax.persistence.Cacheable;\n-import javax.persistence.Entity;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractVirSchema;\n-\n-@Entity\n-@Table(name = JPAGVirSchema.TABLE)\n-@Cacheable\n-public class JPAGVirSchema extends AbstractVirSchema implements GVirSchema {\n-\n-    private static final long serialVersionUID = -2595041749349652939L;\n-\n-    public static final String TABLE = \"GVirSchema\";\n-\n-}"},{"sha":"06bebdbf5ffe6d132e79dac03a11b4d70dac270c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java","status":"modified","additions":107,"deletions":123,"changes":230,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -19,9 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.entity.group;\n \n import java.util.ArrayList;\n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n import javax.persistence.Column;\n@@ -39,35 +37,31 @@\n import javax.validation.constraints.NotNull;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.collections4.Transformer;\n-import org.apache.syncope.core.persistence.api.entity.AttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.DynGroupMembership;\n-import org.apache.syncope.core.persistence.api.entity.Schema;\n-import org.apache.syncope.core.persistence.api.entity.membership.MDerAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.membership.MVirAttrTemplate;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.group.GDerAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.GDerAttrTemplate;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrTemplate;\n import org.apache.syncope.core.persistence.api.entity.group.GVirAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirAttrTemplate;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n+import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractAny;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAnyTypeClass;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.validation.entity.GroupCheck;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractSubject;\n-import org.apache.syncope.core.persistence.jpa.entity.JPADynGroupMembership;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAExternalResource;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMPlainAttrTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMDerAttrTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMVirAttrTemplate;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n \n @Entity\n @Table(name = JPAGroup.TABLE)\n @Cacheable\n @GroupCheck\n-public class JPAGroup extends AbstractSubject<GPlainAttr, GDerAttr, GVirAttr> implements Group {\n+public class JPAGroup extends AbstractAny<GPlainAttr, GDerAttr, GVirAttr> implements Group {\n \n     private static final long serialVersionUID = -5281258853142421875L;\n \n@@ -88,79 +82,59 @@ public class JPAGroup extends AbstractSubject<GPlainAttr, GDerAttr, GVirAttr> im\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n-    private List<JPAGPlainAttrTemplate> gAttrTemplates;\n+    private List<JPAGPlainAttr> plainAttrs = new ArrayList<>();\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n-    private List<JPAGDerAttrTemplate> gDerAttrTemplates;\n+    private List<JPAGDerAttr> derAttrs = new ArrayList<>();\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n-    private List<JPAGVirAttrTemplate> gVirAttrTemplates;\n+    private List<JPAGVirAttr> virAttrs = new ArrayList<>();\n \n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n-    @Valid\n-    private List<JPAMPlainAttrTemplate> mAttrTemplates;\n-\n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n-    @Valid\n-    private List<JPAMDerAttrTemplate> mDerAttrTemplates;\n-\n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n-    @Valid\n-    private List<JPAMVirAttrTemplate> mVirAttrTemplates;\n-\n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n-    @Valid\n-    private List<JPAGPlainAttr> plainAttrs;\n-\n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n-    @Valid\n-    private List<JPAGDerAttr> derAttrs;\n-\n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n-    @Valid\n-    private List<JPAGVirAttr> virAttrs;\n-\n-    /**\n-     * Provisioning external resources.\n-     */\n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"group_id\"),\n             inverseJoinColumns =\n             @JoinColumn(name = \"resource_name\"))\n     @Valid\n-    private Set<JPAExternalResource> resources;\n+    private List<JPAExternalResource> resources = new ArrayList<>();\n+\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(joinColumns =\n+            @JoinColumn(name = \"group_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"anyTypeClass_name\"))\n+    private List<JPAAnyTypeClass> auxClasses = new ArrayList<>();\n \n     @OneToOne(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"group\")\n     @Valid\n-    private JPADynGroupMembership dynMembership;\n+    private JPAADynGroupMembership aDynMembership;\n \n-    public JPAGroup() {\n-        super();\n+    @OneToOne(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"group\")\n+    @Valid\n+    private JPAUDynGroupMembership uDynMembership;\n \n-        gAttrTemplates = new ArrayList<>();\n-        gDerAttrTemplates = new ArrayList<>();\n-        gVirAttrTemplates = new ArrayList<>();\n-        mAttrTemplates = new ArrayList<>();\n-        mDerAttrTemplates = new ArrayList<>();\n-        mVirAttrTemplates = new ArrayList<>();\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"group\")\n+    private List<JPATypeExtension> typeExtensions = new ArrayList<>();\n \n-        plainAttrs = new ArrayList<>();\n-        derAttrs = new ArrayList<>();\n-        virAttrs = new ArrayList<>();\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n \n-        resources = new HashSet<>();\n+    @Override\n+    public AnyType getType() {\n+        return ApplicationContextProvider.getApplicationContext().getBean(AnyTypeDAO.class).findGroup();\n     }\n \n     @Override\n-    public Long getKey() {\n-        return id;\n+    public void setType(final AnyType type) {\n+        // nothing to do\n     }\n \n     @Override\n-    protected Set<JPAExternalResource> internalGetResources() {\n+    protected List<JPAExternalResource> internalGetResources() {\n         return resources;\n     }\n \n@@ -197,59 +171,13 @@ public void setGroupOwner(final Group group) {\n     }\n \n     @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends AttrTemplate<K>, K extends Schema> List<T> getAttrTemplates(final Class<T> reference) {\n-        List<T> result = new ArrayList<>();\n-\n-        if (GPlainAttrTemplate.class.isAssignableFrom(reference)) {\n-            result = (List<T>) gAttrTemplates;\n-        } else if (GDerAttrTemplate.class.isAssignableFrom(reference)) {\n-            result = (List<T>) gDerAttrTemplates;\n-        } else if (GVirAttrTemplate.class.isAssignableFrom(reference)) {\n-            result = (List<T>) gVirAttrTemplates;\n-        } else if (MPlainAttrTemplate.class.isAssignableFrom(reference)) {\n-            result = (List<T>) mAttrTemplates;\n-        } else if (MDerAttrTemplate.class.isAssignableFrom(reference)) {\n-            result = (List<T>) mDerAttrTemplates;\n-        } else if (MVirAttrTemplate.class.isAssignableFrom(reference)) {\n-            result = (List<T>) mVirAttrTemplates;\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends AttrTemplate<K>, K extends Schema> T getAttrTemplate(\n-            final Class<T> reference, final String schemaName) {\n-\n-        return CollectionUtils.find(getAttrTemplates(reference), new Predicate<T>() {\n-\n-            @Override\n-            public boolean evaluate(final T template) {\n-                return schemaName.equals(template.getSchema().getKey());\n-            }\n-        });\n-    }\n-\n-    @Override\n-    public <T extends AttrTemplate<K>, K extends Schema> List<K> getAttrTemplateSchemas(final Class<T> reference) {\n-        return CollectionUtils.collect(getAttrTemplates(reference), new Transformer<T, K>() {\n-\n-            @Override\n-            public K transform(final T input) {\n-                return input.getSchema();\n-            }\n-        }, new ArrayList<K>());\n-    }\n-\n-    @Override\n-    public boolean addPlainAttr(final GPlainAttr attr) {\n+    public boolean add(final GPlainAttr attr) {\n         checkType(attr, JPAGPlainAttr.class);\n         return plainAttrs.add((JPAGPlainAttr) attr);\n     }\n \n     @Override\n-    public boolean removePlainAttr(final GPlainAttr attr) {\n+    public boolean remove(final GPlainAttr attr) {\n         checkType(attr, JPAGPlainAttr.class);\n         return plainAttrs.remove((JPAGPlainAttr) attr);\n     }\n@@ -260,13 +188,13 @@ public List<? extends GPlainAttr> getPlainAttrs() {\n     }\n \n     @Override\n-    public boolean addDerAttr(final GDerAttr attr) {\n+    public boolean add(final GDerAttr attr) {\n         checkType(attr, JPAGDerAttr.class);\n         return derAttrs.add((JPAGDerAttr) attr);\n     }\n \n     @Override\n-    public boolean removeDerAttr(final GDerAttr attr) {\n+    public boolean remove(final GDerAttr attr) {\n         checkType(attr, JPAGDerAttr.class);\n         return derAttrs.remove((JPAGDerAttr) attr);\n     }\n@@ -277,13 +205,13 @@ public List<? extends GDerAttr> getDerAttrs() {\n     }\n \n     @Override\n-    public boolean addVirAttr(final GVirAttr attr) {\n+    public boolean add(final GVirAttr attr) {\n         checkType(attr, JPAGVirAttr.class);\n         return virAttrs.add((JPAGVirAttr) attr);\n     }\n \n     @Override\n-    public boolean removeVirAttr(final GVirAttr attr) {\n+    public boolean remove(final GVirAttr attr) {\n         checkType(attr, JPAGVirAttr.class);\n         return virAttrs.remove((JPAGVirAttr) attr);\n     }\n@@ -294,14 +222,70 @@ public List<? extends GVirAttr> getVirAttrs() {\n     }\n \n     @Override\n-    public DynGroupMembership getDynMembership() {\n-        return dynMembership;\n+    public ADynGroupMembership getADynMembership() {\n+        return aDynMembership;\n+    }\n+\n+    @Override\n+    public void setADynMembership(final ADynGroupMembership aDynMembership) {\n+        checkType(aDynMembership, JPAADynGroupMembership.class);\n+        this.aDynMembership = (JPAADynGroupMembership) aDynMembership;\n+    }\n+\n+    @Override\n+    public UDynGroupMembership getUDynMembership() {\n+        return uDynMembership;\n+    }\n+\n+    @Override\n+    public void setUDynMembership(final UDynGroupMembership uDynMembership) {\n+        checkType(aDynMembership, JPAADynGroupMembership.class);\n+        this.uDynMembership = (JPAUDynGroupMembership) uDynMembership;\n+    }\n+\n+    @Override\n+    public boolean add(final AnyTypeClass auxClass) {\n+        checkType(auxClass, JPAAnyTypeClass.class);\n+        return this.auxClasses.add((JPAAnyTypeClass) auxClass);\n+    }\n+\n+    @Override\n+    public boolean remove(final AnyTypeClass auxClass) {\n+        checkType(auxClass, JPAAnyTypeClass.class);\n+        return this.auxClasses.remove((JPAAnyTypeClass) auxClass);\n+    }\n+\n+    @Override\n+    public List<? extends AnyTypeClass> getAuxClasses() {\n+        return auxClasses;\n+    }\n+\n+    @Override\n+    public boolean add(final TypeExtension typeExtension) {\n+        checkType(typeExtension, JPATypeExtension.class);\n+        return this.typeExtensions.add((JPATypeExtension) typeExtension);\n+    }\n+\n+    @Override\n+    public boolean remove(final TypeExtension typeExtension) {\n+        checkType(typeExtension, JPATypeExtension.class);\n+        return this.typeExtensions.remove((JPATypeExtension) typeExtension);\n+    }\n+\n+    @Override\n+    public TypeExtension getTypeExtension(final AnyType anyType) {\n+        return CollectionUtils.find(typeExtensions, new Predicate<TypeExtension>() {\n+\n+            @Override\n+            public boolean evaluate(final TypeExtension typeExtension) {\n+                return typeExtension.getAnyType().equals(anyType);\n+            }\n+        });\n     }\n \n     @Override\n-    public void setDynMembership(final DynGroupMembership dynMembership) {\n-        checkType(dynMembership, JPADynGroupMembership.class);\n-        this.dynMembership = (JPADynGroupMembership) dynMembership;\n+    public List<? extends TypeExtension> getTypeExtensions() {\n+        return typeExtensions;\n     }\n \n }"},{"sha":"69fe3be83a65bf8bbcb576cb0e631b4d1aed5e9a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPATypeExtension.java","status":"added","additions":108,"deletions":0,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPATypeExtension.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPATypeExtension.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPATypeExtension.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","patch":"@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.group;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAnyTypeClass;\n+\n+@Entity\n+@Table(name = JPATypeExtension.TABLE, uniqueConstraints =\n+        @UniqueConstraint(columnNames = { \"group_id\", \"anyType_name\" }))\n+public class JPATypeExtension extends AbstractEntity<Long> implements TypeExtension {\n+\n+    private static final long serialVersionUID = -8367626793791263551L;\n+\n+    public static final String TABLE = \"TypeExtension\";\n+\n+    @Id\n+    private Long id;\n+\n+    @ManyToOne\n+    private JPAGroup group;\n+\n+    @ManyToOne\n+    private JPAAnyType anyType;\n+\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(joinColumns =\n+            @JoinColumn(name = \"typeExtension_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"anyTypeClass_name\"))\n+    private List<JPAAnyTypeClass> auxClasses = new ArrayList<>();\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public Group getGroup() {\n+        return group;\n+    }\n+\n+    @Override\n+    public void setGroup(final Group group) {\n+        checkType(group, JPAGroup.class);\n+        this.group = (JPAGroup) group;\n+    }\n+\n+    @Override\n+    public AnyType getAnyType() {\n+        return anyType;\n+    }\n+\n+    @Override\n+    public void setAnyType(final AnyType anyType) {\n+        checkType(anyType, JPAAnyType.class);\n+        this.anyType = (JPAAnyType) anyType;\n+    }\n+\n+    @Override\n+    public boolean add(final AnyTypeClass auxClass) {\n+        checkType(auxClass, JPAAnyTypeClass.class);\n+        return this.auxClasses.add((JPAAnyTypeClass) auxClass);\n+    }\n+\n+    @Override\n+    public boolean remove(final AnyTypeClass auxClass) {\n+        checkType(auxClass, JPAAnyTypeClass.class);\n+        return this.auxClasses.remove((JPAAnyTypeClass) auxClass);\n+    }\n+\n+    @Override\n+    public List<? extends AnyTypeClass> getAuxClasses() {\n+        return auxClasses;\n+    }\n+}"},{"sha":"698f68cfed3e4ae89bca3a9eb49bd657fe97a4b5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/membership/JPAMDerAttr.java","status":"removed","additions":0,"deletions":82,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMDerAttr.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,82 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.membership;\n-\n-import javax.persistence.CascadeType;\n-import javax.persistence.Column;\n-import javax.persistence.Entity;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.OneToOne;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.Attributable;\n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.api.entity.membership.MDerAttr;\n-import org.apache.syncope.core.persistence.api.entity.membership.MDerAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.membership.MDerSchema;\n-import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractDerAttr;\n-\n-@Entity\n-@Table(name = JPAMDerAttr.TABLE)\n-public class JPAMDerAttr extends AbstractDerAttr implements MDerAttr {\n-\n-    private static final long serialVersionUID = -443509121923448129L;\n-\n-    public static final String TABLE = \"MDerAttr\";\n-\n-    @ManyToOne\n-    private JPAMembership owner;\n-\n-    @Column(nullable = false)\n-    @OneToOne(cascade = CascadeType.MERGE)\n-    private JPAMDerAttrTemplate template;\n-\n-    @Override\n-    public Membership getOwner() {\n-        return owner;\n-    }\n-\n-    @Override\n-    public void setOwner(final Attributable<?, ?, ?> owner) {\n-        checkType(owner, JPAMembership.class);\n-        this.owner = (JPAMembership) owner;\n-    }\n-\n-    @Override\n-    public MDerAttrTemplate getTemplate() {\n-        return template;\n-    }\n-\n-    @Override\n-    public void setTemplate(final MDerAttrTemplate template) {\n-        checkType(template, JPAMDerAttrTemplate.class);\n-        this.template = (JPAMDerAttrTemplate) template;\n-    }\n-\n-    @Override\n-    public MDerSchema getSchema() {\n-        return template == null ? null : template.getSchema();\n-    }\n-\n-    @Override\n-    public void setSchema(final DerSchema schema) {\n-        LOG.warn(\"This is membership attribute, set template to select schema\");\n-    }\n-\n-}"},{"sha":"2139cd56a447e2051bf71c230d2b821fc22b3407","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/membership/JPAMDerAttrTemplate.java","status":"removed","additions":0,"deletions":67,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMDerAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMDerAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMDerAttrTemplate.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,67 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.membership;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.JoinColumn;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.membership.MDerAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.membership.MDerSchema;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractDerAttrTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n-\n-@Entity\n-@Table(name = JPAMDerAttrTemplate.TABLE)\n-public class JPAMDerAttrTemplate extends AbstractDerAttrTemplate<MDerSchema> implements MDerAttrTemplate {\n-\n-    private static final long serialVersionUID = -4465930976210263434L;\n-\n-    public static final String TABLE = \"MDerAttrTemplate\";\n-\n-    @ManyToOne\n-    private JPAGroup owner;\n-\n-    @ManyToOne\n-    @JoinColumn(name = \"schema_name\")\n-    private JPAMDerSchema schema;\n-\n-    @Override\n-    public MDerSchema getSchema() {\n-        return schema;\n-    }\n-\n-    @Override\n-    public void setSchema(final MDerSchema schema) {\n-        checkType(schema, JPAMDerSchema.class);\n-        this.schema = (JPAMDerSchema) schema;\n-    }\n-\n-    @Override\n-    public Group getOwner() {\n-        return owner;\n-    }\n-\n-    @Override\n-    public void setOwner(final Group owner) {\n-        checkType(owner, JPAGroup.class);\n-        this.owner = (JPAGroup) owner;\n-    }\n-}"},{"sha":"a6c19ff501601badd36d0923a8f7c41f4adcf2f9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/membership/JPAMPlainAttr.java","status":"removed","additions":0,"deletions":141,"changes":141,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainAttr.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,141 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.membership;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.persistence.CascadeType;\n-import javax.persistence.Column;\n-import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n-import javax.persistence.Id;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.OneToMany;\n-import javax.persistence.OneToOne;\n-import javax.persistence.Table;\n-import javax.validation.Valid;\n-import org.apache.syncope.core.persistence.api.entity.Attributable;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttrUniqueValue;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttr;\n-\n-@Entity\n-@Table(name = JPAMPlainAttr.TABLE)\n-public class JPAMPlainAttr extends AbstractPlainAttr implements MPlainAttr {\n-\n-    private static final long serialVersionUID = 3755864809152866489L;\n-\n-    public static final String TABLE = \"MPlainAttr\";\n-\n-    @Id\n-    private Long id;\n-\n-    @ManyToOne(fetch = FetchType.EAGER)\n-    private JPAMembership owner;\n-\n-    @Column(nullable = false)\n-    @OneToOne(cascade = CascadeType.MERGE)\n-    private JPAMPlainAttrTemplate template;\n-\n-    @OneToMany(cascade = CascadeType.MERGE, orphanRemoval = true, mappedBy = \"attribute\")\n-    @Valid\n-    private List<JPAMPlainAttrValue> values;\n-\n-    @OneToOne(cascade = CascadeType.ALL, mappedBy = \"attribute\")\n-    @Valid\n-    private JPAMPlainAttrUniqueValue uniqueValue;\n-\n-    public JPAMPlainAttr() {\n-        super();\n-        values = new ArrayList<>();\n-    }\n-\n-    @Override\n-    public Long getKey() {\n-        return id;\n-    }\n-\n-    @Override\n-    public Membership getOwner() {\n-        return owner;\n-    }\n-\n-    @Override\n-    public void setOwner(final Attributable<?, ?, ?> owner) {\n-        checkType(owner, JPAMembership.class);\n-        this.owner = (JPAMembership) owner;\n-    }\n-\n-    @Override\n-    public MPlainAttrTemplate getTemplate() {\n-        return template;\n-    }\n-\n-    @Override\n-    public void setTemplate(final MPlainAttrTemplate template) {\n-        checkType(template, JPAMPlainAttrTemplate.class);\n-        this.template = (JPAMPlainAttrTemplate) template;\n-    }\n-\n-    @Override\n-    public MPlainSchema getSchema() {\n-        return template == null ? null : template.getSchema();\n-    }\n-\n-    @Override\n-    public void setSchema(final PlainSchema schema) {\n-        LOG.warn(\"This is membership attribute, set template to select schema\");\n-    }\n-\n-    @Override\n-    protected boolean addValue(final PlainAttrValue attrValue) {\n-        checkType(attrValue, JPAMPlainAttrValue.class);\n-        return values.add((JPAMPlainAttrValue) attrValue);\n-    }\n-\n-    @Override\n-    public boolean removeValue(final PlainAttrValue attrValue) {\n-        checkType(attrValue, JPAMPlainAttrValue.class);\n-        return values.remove((JPAMPlainAttrValue) attrValue);\n-    }\n-\n-    @Override\n-    public List<? extends MPlainAttrValue> getValues() {\n-        return values;\n-    }\n-\n-    @Override\n-    public MPlainAttrUniqueValue getUniqueValue() {\n-        return uniqueValue;\n-    }\n-\n-    @Override\n-    public void setUniqueValue(final PlainAttrUniqueValue uniqueValue) {\n-        checkType(owner, JPAMPlainAttrUniqueValue.class);\n-        this.uniqueValue = (JPAMPlainAttrUniqueValue) uniqueValue;\n-    }\n-\n-}"},{"sha":"fd000d64b26fc9bd97af9ddfb338a5324fdb11b1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/membership/JPAMPlainSchema.java","status":"removed","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainSchema.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,36 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.membership;\n-\n-import javax.persistence.Cacheable;\n-import javax.persistence.Entity;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.membership.MPlainSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainSchema;\n-\n-@Entity\n-@Table(name = JPAMPlainSchema.TABLE)\n-@Cacheable\n-public class JPAMPlainSchema extends AbstractPlainSchema implements MPlainSchema {\n-\n-    private static final long serialVersionUID = -8053736450044590651L;\n-\n-    public static final String TABLE = \"MPlainSchema\";\n-\n-}"},{"sha":"ba7fe06533b891d8acda35e6ba97dc86f8d8b1a9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/membership/JPAMVirAttr.java","status":"removed","additions":0,"deletions":81,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMVirAttr.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,81 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.membership;\n-\n-import javax.persistence.CascadeType;\n-import javax.persistence.Column;\n-import javax.persistence.Entity;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.OneToOne;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.Attributable;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.membership.MVirAttr;\n-import org.apache.syncope.core.persistence.api.entity.membership.MVirAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.membership.MVirSchema;\n-import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractVirAttr;\n-\n-@Entity\n-@Table(name = JPAMVirAttr.TABLE)\n-public class JPAMVirAttr extends AbstractVirAttr implements MVirAttr {\n-\n-    private static final long serialVersionUID = 7774760571251641332L;\n-\n-    public static final String TABLE = \"MVirAttr\";\n-\n-    @ManyToOne\n-    private JPAMembership owner;\n-\n-    @Column(nullable = false)\n-    @OneToOne(cascade = CascadeType.MERGE)\n-    private JPAMVirAttrTemplate template;\n-\n-    @Override\n-    public Membership getOwner() {\n-        return owner;\n-    }\n-\n-    @Override\n-    public void setOwner(final Attributable<?, ?, ?> owner) {\n-        checkType(owner, JPAMembership.class);\n-        this.owner = (JPAMembership) owner;\n-    }\n-\n-    @Override\n-    public MVirAttrTemplate getTemplate() {\n-        return template;\n-    }\n-\n-    @Override\n-    public void setTemplate(final MVirAttrTemplate template) {\n-        checkType(template, JPAMVirAttrTemplate.class);\n-        this.template = (JPAMVirAttrTemplate) template;\n-    }\n-\n-    @Override\n-    public MVirSchema getSchema() {\n-        return template == null ? null : template.getSchema();\n-    }\n-\n-    @Override\n-    public void setSchema(final VirSchema schema) {\n-        LOG.warn(\"This is membership attribute, set template to select schema\");\n-    }\n-}"},{"sha":"da84c4de4863d3b5437e5ba67399abb7f398bf25","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/membership/JPAMVirAttrTemplate.java","status":"removed","additions":0,"deletions":67,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMVirAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMVirAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMVirAttrTemplate.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,67 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.membership;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.JoinColumn;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.membership.MVirAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.membership.MVirSchema;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractVirAttrTemplate;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n-\n-@Entity\n-@Table(name = JPAMVirAttrTemplate.TABLE)\n-public class JPAMVirAttrTemplate extends AbstractVirAttrTemplate<MVirSchema> implements MVirAttrTemplate {\n-\n-    private static final long serialVersionUID = 6618560912535667392L;\n-\n-    public static final String TABLE = \"MVirAttrTemplate\";\n-\n-    @ManyToOne\n-    private JPAGroup owner;\n-\n-    @ManyToOne\n-    @JoinColumn(name = \"schema_name\")\n-    private JPAMVirSchema schema;\n-\n-    @Override\n-    public MVirSchema getSchema() {\n-        return schema;\n-    }\n-\n-    @Override\n-    public void setSchema(final MVirSchema schema) {\n-        checkType(schema, JPAMVirSchema.class);\n-        this.schema = (JPAMVirSchema) schema;\n-    }\n-\n-    @Override\n-    public Group getOwner() {\n-        return owner;\n-    }\n-\n-    @Override\n-    public void setOwner(final Group group) {\n-        checkType(group, JPAGroup.class);\n-        this.owner = (JPAGroup) group;\n-    }\n-}"},{"sha":"589ec6e4e129d8b0d1dfeaca23d8a13bbdfd308f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/membership/JPAMVirSchema.java","status":"removed","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMVirSchema.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a","patch":"@@ -1,36 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.membership;\n-\n-import javax.persistence.Cacheable;\n-import javax.persistence.Entity;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.membership.MVirSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractVirSchema;\n-\n-@Entity\n-@Table(name = JPAMVirSchema.TABLE)\n-@Cacheable\n-public class JPAMVirSchema extends AbstractVirSchema implements MVirSchema {\n-\n-    private static final long serialVersionUID = 6255905733563668766L;\n-\n-    public static final String TABLE = \"MVirSchema\";\n-\n-}"},{"sha":"dc02cf3a0ebfc85cd25071dade4da9182e74c78a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/membership/JPAMembership.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMembership.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a"},{"sha":"b4f7f679a5453252ba0d2e6f787b3e58a14aaed7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAExternalResource.java","status":"renamed","additions":42,"deletions":76,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAExternalResource.java"},{"sha":"227f0fdedec09ee4f73654a030f1d61ba296b129","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAMapping.java","status":"added","additions":142,"deletions":0,"changes":142,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"d9c1af2da19fa37a9a11969a1d2b81d8ba2fa924","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAMappingItem.java","status":"renamed","additions":43,"deletions":16,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractMappingItem.java"},{"sha":"273b79d3eec97eb82989a15892414510bc05b802","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAProvision.java","status":"added","additions":133,"deletions":0,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"9723f1d67b5b02c3a588febf7a81824436e6aa6f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/AbstractProvisioningTask.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractProvisioningTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractProvisioningTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractProvisioningTask.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"93e10e346be120a2f717fe373c35ba2aa1b0ad8c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAAnyFilter.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAAnyFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAAnyFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAAnyFilter.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"d90f605058db003c530bc9b95fa9f2f07f571d1a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAAnyTemplate.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAAnyTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAAnyTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAAnyTemplate.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"be72e1eed870bf780b5dfb89fa0b7560e60d20bd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPANotificationTask.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPANotificationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPANotificationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPANotificationTask.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"cffc4bf3df67cd7424821606904a4f8f1edabb46","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPropagationTask.java","status":"modified","additions":25,"deletions":25,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"07e6f00bc5bdc436534e61a33617bc8888fb2f7c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPushTask.java","status":"modified","additions":25,"deletions":12,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"0106a65f7823dac744bb155349e3a7c079a387f0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPASyncTask.java","status":"modified","additions":30,"deletions":26,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"00e85c48d11784f8a747dd7dd2de291467a016db","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/AbstractUDynMembership.java","status":"renamed","additions":19,"deletions":22,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FAbstractUDynMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FAbstractUDynMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FAbstractUDynMembership.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/membership/Membership.java"},{"sha":"f812b28286074d3c3ff9c99294466a4dac3a73be","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPADynRoleMembership.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPADynRoleMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPADynRoleMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPADynRoleMembership.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPADynRoleMembership.java"},{"sha":"90bee1b8b8e866bfe66231425f9714a41fc0616d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUDerAttr.java","status":"modified","additions":2,"deletions":19,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDerAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"eb9ae93c885d0a5680b66f0b761a6346fe8089a4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUDerSchema.java","status":"removed","additions":0,"deletions":34,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDerSchema.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a"},{"sha":"ac150dc28e3fd1183ab9d003a5e2058c5fc5ba05","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUDynGroupMembership.java","status":"renamed","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDynGroupMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDynGroupMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDynGroupMembership.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPADynGroupMembership.java"},{"sha":"86b349ad2f1f166195ad0146dd402b69e8f12191","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUMapping.java","status":"removed","additions":0,"deletions":125,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUMapping.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a"},{"sha":"14b94f03e9b49a3d8153baef0ebb2b5ef42d51cf","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUMappingItem.java","status":"removed","additions":0,"deletions":58,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUMappingItem.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a"},{"sha":"dd794341651cc4c6e3f4729122bd040cef8506a8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUMembership.java","status":"renamed","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUMembership.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/membership/JPAMPlainAttrTemplate.java"},{"sha":"56898d4e5446ee4a6342cef0ea5508055bdbc024","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUPlainAttr.java","status":"modified","additions":5,"deletions":35,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"566739d64e3a5b7d3eac8c67d40027e606e6bdd5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUPlainAttrUniqueValue.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrUniqueValue.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"c5b8dac5162dbc41ebc61899241bd24bcbce21fd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUPlainSchema.java","status":"removed","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4cd6f5dc673497b83c56873f007f61e405f40f2a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainSchema.java?ref=4cd6f5dc673497b83c56873f007f61e405f40f2a"},{"sha":"d4c8bb33c60d78d47f88ff45ec5d1366a58dd989","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAURelationship.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAURelationship.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAURelationship.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAURelationship.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"52a168ef22ebc1d9d4958644e01ff9a312e896d6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUVirAttr.java","status":"modified","additions":2,"deletions":19,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUVirAttr.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"f9c0c81830be61b1cc69bf4519cf5af890b50d6e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":122,"deletions":70,"changes":192,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"b7616c73b610f0a439c9932385bfb2c8e6ca25db","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/EntityValidationListener.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"77eea1c477cbb2dbc27e199cc9707c127d60d9a6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ExternalResourceValidator.java","status":"modified","additions":22,"deletions":19,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"da00ebd1c73cdc8c8498fe8ee5baa6b046ee1428","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PlainAttrValueValidator.java","status":"modified","additions":1,"deletions":12,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValueValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValueValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValueValidator.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"a9b622e74b4786afe3679867011c0751cbb998e9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SchemaNameValidator.java","status":"modified","additions":17,"deletions":55,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchemaNameValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchemaNameValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchemaNameValidator.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"e142de349973785cad3fc176494a8b288af0d82c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/UserValidator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FUserValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FUserValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FUserValidator.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"9d300d0ac00556b61c0a00714fdee6f21d21e70c","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml","status":"modified","additions":100,"deletions":68,"changes":168,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"20b2ebcd1bf30379bf38133a4c0c07edc75dea01","filename":"core/persistence-jpa/src/main/resources/content.xml","status":"modified","additions":35,"deletions":36,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"ae575298b2fe6670047c072d9419bc257806741a","filename":"core/persistence-jpa/src/main/resources/indexes.xml","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"a00b7864c5312598935cc38eeda1929d7cdf2202","filename":"core/persistence-jpa/src/main/resources/views.xml","status":"modified","additions":136,"deletions":49,"changes":185,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"a3b67012f0335cc84bfc326a635e7a6fe5af591c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/AbstractTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FAbstractTest.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"91618d2d63817229cce570c2eaa26f2c509b8f6c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/DummyConnectorRegistry.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyConnectorRegistry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyConnectorRegistry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyConnectorRegistry.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"9d253da5051517b7ea314d320cc007d639e44d4f","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/AnySearchTest.java","status":"renamed","additions":72,"deletions":55,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnySearchTest.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a","previous_filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/SubjectSearchTest.java"},{"sha":"a0d12a670a917bea093b8ae45cc039211543c35d","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/AttrTest.java","status":"modified","additions":22,"deletions":21,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAttrTest.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"606c4177e773509c22407a32b2b2375132f120ad","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/ConfTest.java","status":"modified","additions":18,"deletions":6,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FConfTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FConfTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FConfTest.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"},{"sha":"11381e51ac2610166672b5e7feb8b04393adbaa1","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/DerAttrTest.java","status":"modified","additions":14,"deletions":89,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FDerAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/081d9a04ae66b9200ab9538ad64c927e8f121e1a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FDerAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FDerAttrTest.java?ref=081d9a04ae66b9200ab9538ad64c927e8f121e1a"}]}