{"sha":"3514897204236ff7b04d3ee79077472243c3f32c","node_id":"C_kwDOJfYA1toAKDM1MTQ4OTcyMDQyMzZmZjdiMDRkM2VlNzkwNzc0NzIyNDNjM2YzMmM","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-06-14T14:10:07Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-06-14T14:10:07Z"},"message":"[SYNCOPE-1545] Fixing MFA settings for RegisteredService instances (#351)","tree":{"sha":"5600264308a008a78e1b39a4d7c2774f64d54b63","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5600264308a008a78e1b39a4d7c2774f64d54b63"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3514897204236ff7b04d3ee79077472243c3f32c","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiqJa/CRBK7hj4Ov3rIwAA5hIIAIlUb7JzZEeUXtE2X/iS8eFI\nvIbjfBrPxa3s8f42cWMjpjoPPBxXVtH2cJHrb5nvof87eAsTojHtqu7S4ms1upRM\nLfz2de6jbCX2nYoYkmLOsDTq+ug9/GzwwzD8msC/82+GDU+yR0C4UROiYmgItVFA\nykFnpiN+QT/k2veFYm33piHtZZ9SjFOVMxfZIOQ9EsCIzGzBrzQaiMQbMPcDIs7D\nPoLGudwKmdbuNWb/VLZzVnDa5FMUttNIUGoe28nxhHFj+IOH7qM5s2yUcScU6CR5\nTFFEPIVOag7682pNjYKJwFJcOweORjknB6C8GoBxhaWWq7TBIT5/O3KZda83qKg=\n=z/zS\n-----END PGP SIGNATURE-----\n","payload":"tree 5600264308a008a78e1b39a4d7c2774f64d54b63\nparent b2d618cc42dad69f18478286f3f971dd66f8e8b5\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1655215807 +0200\ncommitter GitHub <noreply@github.com> 1655215807 +0200\n\n[SYNCOPE-1545] Fixing MFA settings for RegisteredService instances (#351)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3514897204236ff7b04d3ee79077472243c3f32c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3514897204236ff7b04d3ee79077472243c3f32c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3514897204236ff7b04d3ee79077472243c3f32c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"b2d618cc42dad69f18478286f3f971dd66f8e8b5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b2d618cc42dad69f18478286f3f971dd66f8e8b5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b2d618cc42dad69f18478286f3f971dd66f8e8b5"}],"stats":{"total":1103,"additions":734,"deletions":369},"files":[{"sha":"28eb7544b1faf6aafd6d60ca61aafe356b5bd101","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/wizards/AuthModuleWizardBuilder.java","status":"modified","additions":32,"deletions":13,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -52,6 +52,8 @@ public class AuthModuleWizardBuilder extends BaseAjaxWizardBuilder<AuthModuleTO>\n \n     protected final LoadableDetachableModel<List<String>> authModuleConfs;\n \n+    protected Model<Class<? extends AuthModuleConf>> authModuleConfClass = Model.of();\n+\n     public AuthModuleWizardBuilder(final AuthModuleTO defaultItem, final PageReference pageRef) {\n \n         super(defaultItem, pageRef);\n@@ -80,23 +82,26 @@ protected Serializable onApplyInternal(final AuthModuleTO modelObject) {\n \n     @Override\n     protected WizardModel buildModelSteps(final AuthModuleTO modelObject, final WizardModel wizardModel) {\n-        wizardModel.add(new Profile(modelObject, authModuleConfs));\n+        wizardModel.add(new Profile(modelObject, authModuleConfs, authModuleConfClass));\n         wizardModel.add(new Configuration(modelObject));\n-\n-        if (modelObject.getConf() instanceof GoogleMfaAuthModuleConf) {\n-            wizardModel.add(new GoogleMfaAuthModuleConfLDAP((GoogleMfaAuthModuleConf) modelObject.getConf()));\n-        }\n-\n+        wizardModel.add(new GoogleMfaAuthModuleConfLDAP(modelObject, authModuleConfClass));\n         wizardModel.add(new Mapping(modelObject));\n         return wizardModel;\n     }\n \n-    public static class Profile extends WizardStep {\n+    protected static class Profile extends WizardStep {\n \n         private static final long serialVersionUID = -3043839139187792810L;\n \n-        Profile(final AuthModuleTO authModule, final LoadableDetachableModel<List<String>> authModuleConfs) {\n+        Profile(\n+                final AuthModuleTO authModule,\n+                final LoadableDetachableModel<List<String>> authModuleConfs,\n+                final Model<Class<? extends AuthModuleConf>> authModuleConfClass) {\n+\n             boolean isNew = authModule.getConf() == null;\n+            if (!isNew) {\n+                authModuleConfClass.setObject(authModule.getConf().getClass());\n+            }\n \n             AjaxTextFieldPanel key = new AjaxTextFieldPanel(\n                     Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME,\n@@ -125,11 +130,12 @@ Constants.DESCRIPTION_FIELD_NAME, getString(Constants.DESCRIPTION_FIELD_NAME),\n                 @Override\n                 protected void onEvent(final AjaxRequestTarget target) {\n                     try {\n-                        Class<? extends AuthModuleConf> authModuleConfClass =\n+                        Class<? extends AuthModuleConf> clazz =\n                                 (Class<? extends AuthModuleConf>) ClassUtils.resolveClassName(\n                                         conf.getModelObject(), ClassUtils.getDefaultClassLoader());\n \n-                        authModule.setConf(authModuleConfClass.getConstructor().newInstance());\n+                        authModule.setConf(clazz.getConstructor().newInstance());\n+                        authModuleConfClass.setObject(clazz);\n                     } catch (Exception e) {\n                         LOG.error(\"During deserialization\", e);\n                     }\n@@ -148,12 +154,20 @@ protected static class Configuration extends WizardStep {\n         }\n     }\n \n-    protected static class GoogleMfaAuthModuleConfLDAP extends WizardStep {\n+    protected static class GoogleMfaAuthModuleConfLDAP extends WizardStep implements WizardModel.ICondition {\n \n         private static final long serialVersionUID = 5328049907748683944L;\n \n-        GoogleMfaAuthModuleConfLDAP(final GoogleMfaAuthModuleConf authModuleConf) {\n-            PropertyModel<GoogleMfaAuthModuleConf.LDAP> beanPanelModel = new PropertyModel<>(authModuleConf, \"ldap\");\n+        private final Model<Class<? extends AuthModuleConf>> authModuleConfClass;\n+\n+        GoogleMfaAuthModuleConfLDAP(\n+                final AuthModuleTO authModule,\n+                final Model<Class<? extends AuthModuleConf>> authModuleConfClass) {\n+\n+            this.authModuleConfClass = authModuleConfClass;\n+\n+            PropertyModel<GoogleMfaAuthModuleConf.LDAP> beanPanelModel =\n+                    new PropertyModel<>(authModule.getConf(), \"ldap\");\n \n             AjaxCheckBoxPanel enable = new AjaxCheckBoxPanel(\"enable\", \"enableLDAP\", new IModel<Boolean>() {\n \n@@ -188,6 +202,11 @@ protected void onUpdate(final AjaxRequestTarget target) {\n             add(new BeanPanel<>(\"bean\", beanPanelModel).setRenderBodyOnly(true));\n             setOutputMarkupId(true);\n         }\n+\n+        @Override\n+        public boolean evaluate() {\n+            return GoogleMfaAuthModuleConf.class.equals(authModuleConfClass.getObject());\n+        }\n     }\n \n     protected static final class Mapping extends WizardStep {"},{"sha":"09fecc67f97aecd68ee5cfc353b60e0f0c0811c5","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/wizards/any/PasswordPanel.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FPasswordPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FPasswordPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FPasswordPanel.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -22,7 +22,6 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPasswordFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.client.ui.commons.markup.html.form.FieldPanel;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.form.PasswordTextField;\n import org.apache.wicket.markup.html.form.validation.EqualPasswordInputValidator;\n@@ -40,6 +39,7 @@ public PasswordPanel(\n             final UserWrapper wrapper,\n             final Boolean storePasswordInSyncope,\n             final boolean templateMode) {\n+\n         this(id, wrapper, templateMode, storePasswordInSyncope, null);\n     }\n \n@@ -56,13 +56,10 @@ public PasswordPanel(\n         Form<?> form = new Form<>(\"passwordInnerForm\");\n         add(form);\n \n-        FieldPanel<String> confirmPasswordField = new AjaxPasswordFieldPanel(\n+        AjaxPasswordFieldPanel confirmPasswordField = new AjaxPasswordFieldPanel(\n                 \"confirmPassword\", \"confirmPassword\", new Model<>(), false, null);\n-\n-        confirmPasswordField.setMarkupId(\"confirmPassword\");\n-        confirmPasswordField.setPlaceholder(\"confirmPassword\");\n         ((PasswordTextField) confirmPasswordField.getField()).setResetPassword(false);\n-        form.add(confirmPasswordField);\n+        form.add(confirmPasswordField.setPlaceholder(\"confirmPassword\").setMarkupId(\"confirmPassword\"));\n \n         if (templateMode) {\n             confirmPasswordField.setEnabled(false);"},{"sha":"67b4a845bfc475acf93ae46e0ae87e160dd4abd3","filename":"client/idrepo/common-ui/src/main/resources/org/apache/syncope/client/ui/commons/wizards/any/PasswordPanel.properties","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FPasswordPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FPasswordPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FPasswordPanel.properties?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+password=Password\n+confirmPassword=Password (confirm)\n+storePasswordInSyncope=Store password in Syncope"},{"sha":"7539a7c7861238b5447c868673e9fd2b957e1229","filename":"client/idrepo/common-ui/src/main/resources/org/apache/syncope/client/ui/commons/wizards/any/PasswordPanel_fr_CA.properties","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FPasswordPanel_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FPasswordPanel_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FPasswordPanel_fr_CA.properties?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+password=Mot de passe\n+confirmPassword=Mot de passe (confirmer)\n+storePasswordInSyncope=Stocker le mot de passe dans Syncope"},{"sha":"a3f719735bfb9e422b8ca2bafa4edb4276ebcc8d","filename":"client/idrepo/common-ui/src/main/resources/org/apache/syncope/client/ui/commons/wizards/any/PasswordPanel_it.properties","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FPasswordPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FPasswordPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FPasswordPanel_it.properties?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+password=Password\n+confirmPassword=Password (conferma)\n+storePasswordInSyncope=Salva password in Syncope"},{"sha":"683d6bc805d65e5200c26fa7d9a754104838abfb","filename":"client/idrepo/common-ui/src/main/resources/org/apache/syncope/client/ui/commons/wizards/any/PasswordPanel_ja.properties","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FPasswordPanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FPasswordPanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FPasswordPanel_ja.properties?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+password=\\u30d1\\u30b9\\u30ef\\u30fc\\u30c9\n+confirmPassword=\\u30d1\\u30b9\\u30ef\\u30fc\\u30c9 (\\u78ba\\u8a8d)\n+storePasswordInSyncope=Syncope \\u306b\\u30d1\\u30b9\\u30ef\\u30fc\\u30c9\\u3092\\u683c\\u7d0d"},{"sha":"91393420a61fc8a2f2291fa0dbf281aec611a77c","filename":"client/idrepo/common-ui/src/main/resources/org/apache/syncope/client/ui/commons/wizards/any/PasswordPanel_pt_BR.properties","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FPasswordPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FPasswordPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FPasswordPanel_pt_BR.properties?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+password=Senha\n+confirmPassword=Senha (confirmar)\n+storePasswordInSyncope=Salvar senha in Syncope"},{"sha":"228f2a0af27a7615cd2fc28dadbca4a31c9f14f6","filename":"client/idrepo/common-ui/src/main/resources/org/apache/syncope/client/ui/commons/wizards/any/PasswordPanel_ru.properties","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FPasswordPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FPasswordPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FPasswordPanel_ru.properties?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -0,0 +1,23 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+# resource=\\u00d0\\u00a0\\u00d0\\u00b5\\u00d1\\u0081\\u00d1\\u0083\\u00d1\\u0080\\u00d1\\u0081\n+password=\\u041f\\u0430\\u0440\\u043e\\u043b\\u044c\n+# connObjectLink=\\u00d0\\u00a3\\u00d1\\u0087\\u00d0\\u00b5\\u00d1\\u0082\\u00d0\\u00bd\\u00d0\\u00b0\\u00d1\\u008f \\u00d0\\u00b7\\u00d0\\u00b0\\u00d0\\u00bf\\u00d0\\u00b8\\u00d1\\u0081\\u00d1\\u008c\n+confirmPassword=\\u041f\\u0430\\u0440\\u043e\\u043b\\u044c (\\u043f\\u043e\\u0434\\u0442\\u0432\\u0435\\u0440\\u0436\\u0434\\u0435\\u043d\\u0438\\u0435)\n+# status=\\u00d0\\u00a1\\u00d1\\u0082\\u00d0\\u00b0\\u00d1\\u0082\\u00d1\\u0083\\u00d1\\u0081\n+storePasswordInSyncope=\\u0425\\u0440\\u0430\\u043d\\u0438\\u0442\\u044c \\u043f\\u0430\\u0440\\u043e\\u043b\\u044c \\u0432 Syncope"},{"sha":"a6b1963b221e57051f5753e780edb3918570a72d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DirectoryPanel.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -184,6 +184,7 @@ protected DirectoryPanel(final String id, final Builder<T, W, E> builder, final\n \n             send(DirectoryPanel.this, Broadcast.EXACT, data);\n \n+            displayAttributeModal.size(Modal.Size.Default);\n             modal.show(false);\n         });\n         displayAttributeModal.size(Modal.Size.Default);"},{"sha":"956c7267d219424d78d147cdc2b48129d8d9b46c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/UserDirectoryPanel.java","status":"modified","additions":75,"deletions":73,"changes":148,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n+import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;\n@@ -108,7 +109,7 @@ public ActionsPanel<Serializable> getHeader(final String componentId) {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                 target.add(displayAttributeModal.setContent(new UserDisplayAttributesModalPanel<>(\n-                    displayAttributeModal, page.getPageReference(), pSchemaNames, dSchemaNames)));\n+                        displayAttributeModal, page.getPageReference(), pSchemaNames, dSchemaNames)));\n \n                 displayAttributeModal.header(new ResourceModel(\"any.attr.display\"));\n                 displayAttributeModal.addSubmitButton();\n@@ -129,16 +130,16 @@ public ActionsPanel<UserTO> getActions(final IModel<UserTO> model) {\n \n         panel.add(new ActionLink<>() {\n \n-                      private static final long serialVersionUID = -7978723352517770644L;\n+            private static final long serialVersionUID = -7978723352517770644L;\n \n-                      @Override\n-                      public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n-                          send(UserDirectoryPanel.this, Broadcast.EXACT,\n-                              new AjaxWizard.EditItemActionEvent<>(\n-                                  new UserWrapper(new UserRestClient().read(model.getObject().getKey())),\n-                                  target));\n-                      }\n-                  }, ActionType.EDIT,\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n+                send(UserDirectoryPanel.this, Broadcast.EXACT,\n+                        new AjaxWizard.EditItemActionEvent<>(\n+                                new UserWrapper(new UserRestClient().read(model.getObject().getKey())),\n+                                target));\n+            }\n+        }, ActionType.EDIT,\n                 String.format(\"%s,%s\", IdRepoEntitlement.USER_READ, IdRepoEntitlement.USER_UPDATE)).\n                 setRealms(realm, model.getObject().getDynRealms());\n \n@@ -151,9 +152,9 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n                 try {\n                     model.setObject(restClient.read(model.getObject().getKey()));\n                     restClient.mustChangePassword(\n-                        model.getObject().getETagValue(),\n-                        !model.getObject().isMustChangePassword(),\n-                        model.getObject().getKey());\n+                            model.getObject().getETagValue(),\n+                            !model.getObject().isMustChangePassword(),\n+                            model.getObject().getKey());\n \n                     SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n@@ -175,17 +176,18 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n                 public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n                     model.setObject(restClient.read(model.getObject().getKey()));\n                     IModel<AnyWrapper<UserTO>> formModel = new CompoundPropertyModel<>(\n-                        new AnyWrapper<>(model.getObject()));\n+                            new AnyWrapper<>(model.getObject()));\n                     displayAttributeModal.setFormModel(formModel);\n \n                     target.add(displayAttributeModal.setContent(new ChangePasswordModal(\n-                        displayAttributeModal,\n-                        pageRef,\n-                        new UserWrapper(model.getObject()))));\n+                            displayAttributeModal,\n+                            pageRef,\n+                            new UserWrapper(model.getObject()))));\n \n                     displayAttributeModal.header(new Model<>(\n-                        getString(\"any.edit\", new Model<>(new AnyWrapper<>(model.getObject())))));\n+                            getString(\"any.edit\", new Model<>(new AnyWrapper<>(model.getObject())))));\n \n+                    displayAttributeModal.size(Modal.Size.Large);\n                     displayAttributeModal.show(true);\n                 }\n             }, ActionType.PASSWORD_MANAGEMENT, IdRepoEntitlement.USER_UPDATE).\n@@ -201,7 +203,7 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n                     public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n                         try {\n                             SyncopeConsoleSession.get().getAnonymousClient().getService(UserSelfService.class).\n-                                requestPasswordReset(model.getObject().getUsername(), null);\n+                                    requestPasswordReset(model.getObject().getUsername(), null);\n \n                             SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n                             target.add(container);\n@@ -230,7 +232,7 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n                 @Override\n                 public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n                     target.add(utilityModal.setContent(new AnyPropagationTasks(\n-                        utilityModal, AnyTypeKind.USER, model.getObject().getKey(), pageRef)));\n+                            utilityModal, AnyTypeKind.USER, model.getObject().getKey(), pageRef)));\n \n                     utilityModal.header(new StringResourceModel(\"any.propagation.tasks\", model));\n                     utilityModal.show(true);\n@@ -244,7 +246,7 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n                 @Override\n                 public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n                     target.add(utilityModal.setContent(\n-                        new NotificationTasks(AnyTypeKind.USER, model.getObject().getKey(), pageRef)));\n+                            new NotificationTasks(AnyTypeKind.USER, model.getObject().getKey(), pageRef)));\n                     utilityModal.header(new StringResourceModel(\"any.notification.tasks\", model));\n                     utilityModal.show(true);\n                     target.add(utilityModal);\n@@ -255,57 +257,57 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n         if (wizardInModal) {\n             panel.add(new ActionLink<>() {\n \n-                          private static final long serialVersionUID = -1978723352517770644L;\n-\n-                          @Override\n-                          public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n-                              model.setObject(restClient.read(model.getObject().getKey()));\n-                              target.add(altDefaultModal.setContent(new AuditHistoryModal<>(\n-                                  altDefaultModal,\n-                                  AuditElements.EventCategoryType.LOGIC,\n-                                  \"UserLogic\",\n-                                  model.getObject(),\n-                                  IdRepoEntitlement.USER_UPDATE,\n-                                  pageRef) {\n-\n-                                  private static final long serialVersionUID = 959378158400669867L;\n-\n-                                  @Override\n-                                  protected void restore(final String json, final AjaxRequestTarget target) {\n-                                      // The original audit record masks the password and the security\n-                                      // answer; so we cannot use the audit record to resurrect the entry\n-                                      // based on mask data.\n-                                      //\n-                                      // The method behavior below will reset the audit record such\n-                                      // that the current security answer and the password for the object\n-                                      // are always maintained, and such properties for the\n-                                      // user cannot be restored using audit records.\n-                                      UserTO original = model.getObject();\n-                                      try {\n-                                          UserTO updated = MAPPER.readValue(json, UserTO.class);\n-                                          UserUR updateReq = AnyOperations.diff(updated, original, false);\n-                                          updateReq.setPassword(null);\n-                                          updateReq.setSecurityAnswer(null);\n-                                          ProvisioningResult<UserTO> result =\n-                                              restClient.update(original.getETagValue(), updateReq);\n-                                          model.getObject().setLastChangeDate(result.getEntity().getLastChangeDate());\n-\n-                                          SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n-                                          target.add(container);\n-                                      } catch (Exception e) {\n-                                          LOG.error(\"While restoring user {}\", model.getObject().getKey(), e);\n-                                          SyncopeConsoleSession.get().onException(e);\n-                                      }\n-                                      ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n-                                  }\n-                              }));\n-\n-                              altDefaultModal.header(new Model<>(\n-                                  getString(\"auditHistory.title\", new Model<>(new AnyWrapper<>(model.getObject())))));\n-\n-                              altDefaultModal.show(true);\n-                          }\n-                      }, ActionType.VIEW_AUDIT_HISTORY,\n+                private static final long serialVersionUID = -1978723352517770644L;\n+\n+                @Override\n+                public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n+                    model.setObject(restClient.read(model.getObject().getKey()));\n+                    target.add(altDefaultModal.setContent(new AuditHistoryModal<>(\n+                            altDefaultModal,\n+                            AuditElements.EventCategoryType.LOGIC,\n+                            \"UserLogic\",\n+                            model.getObject(),\n+                            IdRepoEntitlement.USER_UPDATE,\n+                            pageRef) {\n+\n+                        private static final long serialVersionUID = 959378158400669867L;\n+\n+                        @Override\n+                        protected void restore(final String json, final AjaxRequestTarget target) {\n+                            // The original audit record masks the password and the security\n+                            // answer; so we cannot use the audit record to resurrect the entry\n+                            // based on mask data.\n+                            //\n+                            // The method behavior below will reset the audit record such\n+                            // that the current security answer and the password for the object\n+                            // are always maintained, and such properties for the\n+                            // user cannot be restored using audit records.\n+                            UserTO original = model.getObject();\n+                            try {\n+                                UserTO updated = MAPPER.readValue(json, UserTO.class);\n+                                UserUR updateReq = AnyOperations.diff(updated, original, false);\n+                                updateReq.setPassword(null);\n+                                updateReq.setSecurityAnswer(null);\n+                                ProvisioningResult<UserTO> result =\n+                                        restClient.update(original.getETagValue(), updateReq);\n+                                model.getObject().setLastChangeDate(result.getEntity().getLastChangeDate());\n+\n+                                SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n+                                target.add(container);\n+                            } catch (Exception e) {\n+                                LOG.error(\"While restoring user {}\", model.getObject().getKey(), e);\n+                                SyncopeConsoleSession.get().onException(e);\n+                            }\n+                            ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+                        }\n+                    }));\n+\n+                    altDefaultModal.header(new Model<>(\n+                            getString(\"auditHistory.title\", new Model<>(new AnyWrapper<>(model.getObject())))));\n+\n+                    altDefaultModal.show(true);\n+                }\n+            }, ActionType.VIEW_AUDIT_HISTORY,\n                     String.format(\"%s,%s\", IdRepoEntitlement.USER_READ, IdRepoEntitlement.AUDIT_LIST)).\n                     setRealms(realm, model.getObject().getDynRealms());\n         }\n@@ -320,7 +322,7 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n                 clone.setKey(null);\n                 clone.setUsername(model.getObject().getUsername() + \"_clone\");\n                 send(UserDirectoryPanel.this, Broadcast.EXACT,\n-                    new AjaxWizard.NewItemActionEvent<>(new UserWrapper(clone), target));\n+                        new AjaxWizard.NewItemActionEvent<>(new UserWrapper(clone), target));\n             }\n \n             @Override"},{"sha":"cfa53fdc359e87369156f3ac4b49337ef8402bb8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/status/ChangePasswordModal.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FChangePasswordModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FChangePasswordModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FChangePasswordModal.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -58,7 +58,7 @@ public ChangePasswordModal(\n \n         this.wrapper = wrapper;\n \n-        final PasswordPanel passwordPanel = new PasswordPanel(\"passwordPanel\", wrapper, false, false);\n+        PasswordPanel passwordPanel = new PasswordPanel(\"passwordPanel\", wrapper, false, false);\n         passwordPanel.setOutputMarkupId(true);\n         add(passwordPanel);\n \n@@ -70,13 +70,13 @@ public ChangePasswordModal(\n \n     @Override\n     public void onSubmit(final AjaxRequestTarget target) {\n-        final UserTO inner = wrapper.getInnerObject();\n+        UserTO inner = wrapper.getInnerObject();\n \n         try {\n             if (StringUtils.isBlank(inner.getPassword()) || statusModel.getObject().isEmpty()) {\n                 SyncopeConsoleSession.get().error(getString(Constants.OPERATION_ERROR));\n             } else {\n-                final List<String> resources = new ArrayList<>();\n+                List<String> resources = new ArrayList<>();\n                 boolean isOnSyncope = false;\n                 for (StatusBean sb : statusModel.getObject()) {\n                     if (sb.getResource().equals(Constants.SYNCOPE)) {"},{"sha":"fc2cbec5586fa306ba5090e2d2e0e92c083136b6","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel_it.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionsPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionsPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionsPanel_it.properties?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -143,7 +143,7 @@ execute.title=esegui\n execute.alt=execute icon\n \n password_management.class=fas fa-shield-alt\n-password_management.title=gestione password\n+password_management.title=gestisci password\n password_management.alt=manage password icon\n \n request_password_reset.class=fas fa-user-secret"},{"sha":"d85ce3a2d1288b17a1fec08ff3f69aa70a033e68","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/DuoMfaAuthModuleConf.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FDuoMfaAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FDuoMfaAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FDuoMfaAuthModuleConf.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.common.lib.auth;\n \n-public class DuoMfaAuthModuleConf implements AuthModuleConf {\n+public class DuoMfaAuthModuleConf implements MFAAuthModuleConf {\n \n     private static final long serialVersionUID = -2883257599439312426L;\n \n@@ -30,6 +30,11 @@ public class DuoMfaAuthModuleConf implements AuthModuleConf {\n \n     private String apiHost;\n \n+    @Override\n+    public String getFriendlyName() {\n+        return \"Duo Security\";\n+    }\n+\n     public String getIntegrationKey() {\n         return integrationKey;\n     }"},{"sha":"c5c1d999ffc53ac87a96903e70ced6bbcc14e4a8","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/GoogleMfaAuthModuleConf.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FGoogleMfaAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FGoogleMfaAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FGoogleMfaAuthModuleConf.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -20,7 +20,7 @@\n \n import java.io.Serializable;\n \n-public class GoogleMfaAuthModuleConf implements AuthModuleConf {\n+public class GoogleMfaAuthModuleConf implements MFAAuthModuleConf {\n \n     private static final long serialVersionUID = -7883257599139312426L;\n \n@@ -154,6 +154,11 @@ public void setSubtreeSearch(final boolean subtreeSearch) {\n \n     private LDAP ldap;\n \n+    @Override\n+    public String getFriendlyName() {\n+        return \"Google Authenticator\";\n+    }\n+\n     public String getIssuer() {\n         return issuer;\n     }"},{"sha":"1932063bc44cddfc00753a21bcef2654623f8f22","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/MFAAuthModuleConf.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FMFAAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FMFAAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FMFAAuthModuleConf.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.auth;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+public interface MFAAuthModuleConf extends AuthModuleConf {\n+\n+    @JsonIgnore\n+    String getFriendlyName();\n+}"},{"sha":"7ac948b9732396637834ee98ede5dba609fec2ca","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/SimpleMfaAuthModuleConf.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSimpleMfaAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSimpleMfaAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSimpleMfaAuthModuleConf.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -18,11 +18,12 @@\n  */\n package org.apache.syncope.common.lib.auth;\n \n-public class SimpleMfaAuthModuleConf implements AuthModuleConf {\n+public class SimpleMfaAuthModuleConf implements MFAAuthModuleConf {\n+\n     private static final long serialVersionUID = -7663257599139312426L;\n \n     private long timeToKillInSeconds = 30L;\n-    \n+\n     private int tokenLength = 6;\n \n     private String bypassGroovyScript;\n@@ -35,6 +36,11 @@ public class SimpleMfaAuthModuleConf implements AuthModuleConf {\n \n     private String emailText;\n \n+    @Override\n+    public String getFriendlyName() {\n+        return \"CAS Simple Multifactor Authentication\";\n+    }\n+\n     public String getEmailFrom() {\n         return emailFrom;\n     }"},{"sha":"dc15038abd3ef06fc0ecf48e821cb46424e18e49","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/U2FAuthModuleConf.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FU2FAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FU2FAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FU2FAuthModuleConf.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.common.lib.auth;\n \n-public class U2FAuthModuleConf implements AuthModuleConf {\n+public class U2FAuthModuleConf implements MFAAuthModuleConf {\n \n     private static final long serialVersionUID = -1235771400318503131L;\n \n@@ -30,6 +30,11 @@ public class U2FAuthModuleConf implements AuthModuleConf {\n \n     private String expireDevicesTimeUnit = \"DAYS\";\n \n+    @Override\n+    public String getFriendlyName() {\n+        return \"FIDO U2F\";\n+    }\n+\n     public long getExpireRegistrations() {\n         return expireRegistrations;\n     }"},{"sha":"470103a59823e33454cf37939fb251d07c196272","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/wa/GoogleMfaAuthToken.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FGoogleMfaAuthToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FGoogleMfaAuthToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FGoogleMfaAuthToken.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.common.lib.wa;\n \n-import java.time.OffsetDateTime;\n+import java.time.LocalDateTime;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.commons.lang3.builder.ToStringBuilder;\n@@ -32,7 +32,7 @@ public static class Builder {\n \n         private final GoogleMfaAuthToken instance = new GoogleMfaAuthToken();\n \n-        public GoogleMfaAuthToken.Builder issueDate(final OffsetDateTime issueDate) {\n+        public GoogleMfaAuthToken.Builder issueDate(final LocalDateTime issueDate) {\n             instance.setIssueDate(issueDate);\n             return this;\n         }\n@@ -49,7 +49,7 @@ public GoogleMfaAuthToken build() {\n \n     private int otp;\n \n-    private OffsetDateTime issueDate;\n+    private LocalDateTime issueDate;\n \n     public int getOtp() {\n         return otp;\n@@ -59,11 +59,11 @@ public void setOtp(final int otp) {\n         this.otp = otp;\n     }\n \n-    public OffsetDateTime getIssueDate() {\n+    public LocalDateTime getIssueDate() {\n         return issueDate;\n     }\n \n-    public void setIssueDate(final OffsetDateTime issueDate) {\n+    public void setIssueDate(final LocalDateTime issueDate) {\n         this.issueDate = issueDate;\n     }\n "},{"sha":"ab30e9d5a022b67ae46b511f1520f58c9ec3260e","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/wa/WAClientApp.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWAClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWAClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWAClientApp.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -18,12 +18,17 @@\n  */\n package org.apache.syncope.common.lib.wa;\n \n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import org.apache.syncope.common.lib.BaseBean;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n+import org.apache.syncope.common.lib.to.AuthModuleTO;\n import org.apache.syncope.common.lib.to.ClientAppTO;\n \n public class WAClientApp implements BaseBean {\n@@ -34,6 +39,8 @@ public class WAClientApp implements BaseBean {\n \n     private AccessPolicyTO accessPolicy;\n \n+    private final List<AuthModuleTO> authModules = new ArrayList<>();\n+\n     private AuthPolicyTO authPolicy;\n \n     private AttrReleasePolicyTO attrReleasePolicy;\n@@ -56,6 +63,12 @@ public void setAccessPolicy(final AccessPolicyTO accessPolicy) {\n         this.accessPolicy = accessPolicy;\n     }\n \n+    @JacksonXmlElementWrapper(localName = \"authModules\")\n+    @JacksonXmlProperty(localName = \"authModule\")\n+    public List<AuthModuleTO> getAuthModules() {\n+        return authModules;\n+    }\n+\n     public AuthPolicyTO getAuthPolicy() {\n         return authPolicy;\n     }"},{"sha":"053f9e25ca2174b3ab05d71c389210fd2961a193","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/GoogleMfaAuthTokenService.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthTokenService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthTokenService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthTokenService.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -21,7 +21,7 @@\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n-import java.time.OffsetDateTime;\n+import java.time.LocalDateTime;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n@@ -48,7 +48,7 @@ public interface GoogleMfaAuthTokenService extends JAXRSService {\n     @Path(\"tokens\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void delete(@QueryParam(\"expirationDate\") OffsetDateTime expirationDate);\n+    void delete(@QueryParam(\"expirationDate\") LocalDateTime expirationDate);\n \n     @DELETE\n     @Path(\"tokens/{owner}/{otp}\")"},{"sha":"55d966d38d266c4f40af237ac9d609346f91df06","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/DateParamConverterProvider.java","status":"modified","additions":23,"deletions":2,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FDateParamConverterProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FDateParamConverterProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FDateParamConverterProvider.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -20,6 +20,7 @@\n \n import java.lang.annotation.Annotation;\n import java.lang.reflect.Type;\n+import java.time.LocalDateTime;\n import java.time.OffsetDateTime;\n import java.time.format.DateTimeFormatter;\n import java.time.format.DateTimeParseException;\n@@ -28,7 +29,7 @@\n \n public class DateParamConverterProvider implements ParamConverterProvider {\n \n-    private static class DateParamConverter implements ParamConverter<OffsetDateTime> {\n+    protected static class OffsetDateTimeParamConverter implements ParamConverter<OffsetDateTime> {\n \n         @Override\n         public OffsetDateTime fromString(final String value) {\n@@ -45,13 +46,33 @@ public String toString(final OffsetDateTime value) {\n         }\n     }\n \n+    protected static class LocalDateTimeParamConverter implements ParamConverter<LocalDateTime> {\n+\n+        @Override\n+        public LocalDateTime fromString(final String value) {\n+            try {\n+                return LocalDateTime.parse(value, DateTimeFormatter.ISO_LOCAL_DATE_TIME);\n+            } catch (DateTimeParseException e) {\n+                throw new IllegalArgumentException(\"Unparsable date: \" + value, e);\n+            }\n+        }\n+\n+        @Override\n+        public String toString(final LocalDateTime value) {\n+            return DateTimeFormatter.ISO_LOCAL_DATE_TIME.format(value);\n+        }\n+    }\n+\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public <T> ParamConverter<T> getConverter(\n             final Class<T> rawType, final Type genericType, final Annotation[] annotations) {\n \n         if (OffsetDateTime.class.equals(rawType)) {\n-            return (ParamConverter<T>) new DateParamConverter();\n+            return (ParamConverter<T>) new OffsetDateTimeParamConverter();\n+        }\n+        if (LocalDateTime.class.equals(rawType)) {\n+            return (ParamConverter<T>) new LocalDateTimeParamConverter();\n         }\n \n         return null;"},{"sha":"cecaeaf487f0657fc6df37e8f5ac2eae441c45b4","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/GoogleMfaAuthAccountLogic.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthAccountLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthAccountLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthAccountLogic.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -74,11 +74,12 @@ public void delete(final long id) {\n                 stream().\n                 allMatch(acct -> acct.getId() == id)).\n                 findFirst().\n-                ifPresentOrElse(profile -> {\n-                    if (profile.getGoogleMfaAuthAccounts().removeIf(acct -> acct.getId() == id)) {\n-                        authProfileDAO.save(profile);\n-                    }\n-                },\n+                ifPresentOrElse(\n+                        profile -> {\n+                            if (profile.getGoogleMfaAuthAccounts().removeIf(acct -> acct.getId() == id)) {\n+                                authProfileDAO.save(profile);\n+                            }\n+                        },\n                         () -> {\n                             throw new NotFoundException(\"Could not find account for id \" + id);\n                         });"},{"sha":"1270381285bda367eb70901c791a413b80af025a","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/GoogleMfaAuthTokenLogic.java","status":"modified","additions":14,"deletions":13,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthTokenLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthTokenLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthTokenLogic.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.logic.wa;\n \n-import java.time.OffsetDateTime;\n+import java.time.LocalDateTime;\n import java.util.List;\n import java.util.function.Predicate;\n import java.util.stream.Collectors;\n@@ -46,16 +46,24 @@ public GoogleMfaAuthTokenLogic(\n         this.entityFactory = entityFactory;\n     }\n \n+    protected void removeTokenAndSave(final AuthProfile profile, final Predicate<GoogleMfaAuthToken> criteria) {\n+        List<GoogleMfaAuthToken> tokens = profile.getGoogleMfaAuthTokens();\n+        if (tokens.removeIf(criteria)) {\n+            profile.setGoogleMfaAuthTokens(tokens);\n+            authProfileDAO.save(profile);\n+        }\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public void delete(final OffsetDateTime expirationDate) {\n+    public void delete(final LocalDateTime expirationDate) {\n         authProfileDAO.findAll(-1, -1).forEach(profile -> removeTokenAndSave(\n                 profile, token -> token.getIssueDate().compareTo(expirationDate) >= 0));\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public void delete(final String owner, final int otp) {\n-        authProfileDAO.findByOwner(owner).ifPresent(profile -> removeTokenAndSave(\n-                profile, token -> token.getOtp() == otp));\n+        authProfileDAO.findByOwner(owner).\n+                ifPresent(profile -> removeTokenAndSave(profile, token -> token.getOtp() == otp));\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n@@ -89,6 +97,7 @@ public void store(final String owner, final GoogleMfaAuthToken token) {\n         });\n \n         List<GoogleMfaAuthToken> tokens = profile.getGoogleMfaAuthTokens();\n+        tokens.removeIf(t -> t.getOtp() == token.getOtp());\n         tokens.add(token);\n         profile.setGoogleMfaAuthTokens(tokens);\n         authProfileDAO.save(profile);\n@@ -103,7 +112,7 @@ public GoogleMfaAuthToken read(final String owner, final int otp) {\n                 flatMap(List::stream).\n                 filter(token -> token.getOtp() == otp).\n                 findFirst().\n-                orElseThrow(() -> new NotFoundException(\"Could not find token for Owner \" + owner + \" and otp \" + otp));\n+                orElseThrow(() -> new NotFoundException(\"Could not find token for owner \" + owner + \" and otp \" + otp));\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n@@ -122,12 +131,4 @@ public List<GoogleMfaAuthToken> read(final String owner) {\n                 map(AuthProfile::getGoogleMfaAuthTokens).\n                 orElse(List.of());\n     }\n-\n-    private void removeTokenAndSave(final AuthProfile profile, final Predicate<GoogleMfaAuthToken> criteria) {\n-        List<GoogleMfaAuthToken> tokens = profile.getGoogleMfaAuthTokens();\n-        if (tokens.removeIf(criteria)) {\n-            profile.setGoogleMfaAuthTokens(tokens);\n-            authProfileDAO.save(profile);\n-        }\n-    }\n }"},{"sha":"484bb2ac65744cb9a0da784db54c51e672f3c8ba","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/GoogleMfaAuthTokenServiceImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthTokenServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthTokenServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthTokenServiceImpl.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.rest.cxf.service.wa;\n \n-import java.time.OffsetDateTime;\n+import java.time.LocalDateTime;\n import java.util.List;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n@@ -37,7 +37,7 @@ public GoogleMfaAuthTokenServiceImpl(final GoogleMfaAuthTokenLogic logic) {\n     }\n \n     @Override\n-    public void delete(final OffsetDateTime expirationDate) {\n+    public void delete(final LocalDateTime expirationDate) {\n         if (expirationDate == null) {\n             logic.deleteAll();\n         } else {"},{"sha":"1d61fde03cf2e5ac496f857b6c52b61cd3068e33","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/PersistenceContext.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -391,8 +391,8 @@ public AuditConfDAO auditConfDAO() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public AuthModuleDAO authModuleDAO() {\n-        return new JPAAuthModuleDAO();\n+    public AuthModuleDAO authModuleDAO(final PolicyDAO policyDAO) {\n+        return new JPAAuthModuleDAO(policyDAO);\n     }\n \n     @ConditionalOnMissingBean"},{"sha":"565ea5d7ae9ae7dd10ce32909469077ccbd66b2f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPAAuthModuleDAO.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthModuleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthModuleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthModuleDAO.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -20,14 +20,23 @@\n \n import java.util.List;\n import javax.persistence.TypedQuery;\n+import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n+import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.auth.AuthModuleDAO;\n import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthModule;\n import org.springframework.transaction.annotation.Transactional;\n \n public class JPAAuthModuleDAO extends AbstractDAO<AuthModule> implements AuthModuleDAO {\n \n+    protected final PolicyDAO policyDAO;\n+\n+    public JPAAuthModuleDAO(final PolicyDAO policyDAO) {\n+        this.policyDAO = policyDAO;\n+    }\n+\n     @Transactional(readOnly = true)\n     @Override\n     public AuthModule find(final String key) {\n@@ -59,6 +68,16 @@ public void delete(final String key) {\n \n     @Override\n     public void delete(final AuthModule authModule) {\n+        policyDAO.find(AuthPolicy.class).stream().\n+                filter(policy -> policy.getConf() instanceof DefaultAuthPolicyConf).\n+                forEach(policy -> {\n+                    DefaultAuthPolicyConf conf = (DefaultAuthPolicyConf) policy.getConf();\n+                    if (conf.getAuthModules().remove(authModule.getKey())) {\n+                        policy.setConf(conf);\n+                        policyDAO.save(policy);\n+                    }\n+                });\n+\n         entityManager().remove(authModule);\n     }\n }"},{"sha":"ec3961368a2e7f0a46e42a2e76d5ffe8cb2e2c40","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AuthProfileTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -22,6 +22,7 @@\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import java.time.LocalDateTime;\n import java.time.OffsetDateTime;\n import java.util.List;\n import java.util.Optional;\n@@ -184,7 +185,7 @@ public void impersonationAccounts() {\n     private AuthProfile createAuthProfileWithToken(final String owner, final Integer otp) {\n         AuthProfile profile = entityFactory.newEntity(AuthProfile.class);\n         profile.setOwner(owner);\n-        GoogleMfaAuthToken token = new GoogleMfaAuthToken.Builder().issueDate(OffsetDateTime.now()).token(otp).build();\n+        GoogleMfaAuthToken token = new GoogleMfaAuthToken.Builder().issueDate(LocalDateTime.now()).token(otp).build();\n         profile.setGoogleMfaAuthTokens(List.of(token));\n         return authProfileDAO.save(profile);\n     }"},{"sha":"cb1f72894a1ab135179ab1462945369988855f12","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ProvisioningContext.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -1258,8 +1258,10 @@ public WAConfigDataBinder waConfigDataBinder(\n     public WAClientAppDataBinder waClientAppDataBinder(\n             final ClientAppDataBinder clientAppDataBinder,\n             final PolicyDataBinder policyDataBinder,\n+            final AuthModuleDataBinder authModuleDataBinder,\n             final AuthModuleDAO authModuleDAO) {\n \n-        return new WAClientAppDataBinderImpl(clientAppDataBinder, policyDataBinder, authModuleDAO);\n+        return new WAClientAppDataBinderImpl(\n+                clientAppDataBinder, policyDataBinder, authModuleDataBinder, authModuleDAO);\n     }\n }"},{"sha":"2e25d26730ede91436f8e290d42ac88ab324c1e4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/wa/WAClientAppDataBinderImpl.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppDataBinderImpl.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.core.persistence.api.dao.auth.AuthModuleDAO;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n+import org.apache.syncope.core.provisioning.api.data.AuthModuleDataBinder;\n import org.apache.syncope.core.provisioning.api.data.ClientAppDataBinder;\n import org.apache.syncope.core.provisioning.api.data.PolicyDataBinder;\n import org.slf4j.Logger;\n@@ -38,15 +39,19 @@ public class WAClientAppDataBinderImpl implements WAClientAppDataBinder {\n \n     protected final PolicyDataBinder policyDataBinder;\n \n+    protected final AuthModuleDataBinder authModuleDataBinder;\n+\n     protected final AuthModuleDAO authModuleDAO;\n \n     public WAClientAppDataBinderImpl(\n             final ClientAppDataBinder clientAppDataBinder,\n             final PolicyDataBinder policyDataBinder,\n+            final AuthModuleDataBinder authModuleDataBinder,\n             final AuthModuleDAO authModuleDAO) {\n \n         this.clientAppDataBinder = clientAppDataBinder;\n         this.policyDataBinder = policyDataBinder;\n+        this.authModuleDataBinder = authModuleDataBinder;\n         this.authModuleDAO = authModuleDAO;\n     }\n \n@@ -70,6 +75,8 @@ public WAClientApp getWAClientApp(final ClientApp clientApp) {\n                     if (authModule == null) {\n                         LOG.warn(\"AuthModule \" + authModule + \" not found\");\n                     } else {\n+                        waClientApp.getAuthModules().add(authModuleDataBinder.getAuthModuleTO(authModule));\n+\n                         authModule.getItems().\n                                 forEach(item -> waClientApp.getReleaseAttrs().put(\n                                 item.getIntAttrName(), item.getExtAttrName()));"},{"sha":"7d4776cb0f87ff4b0678f9a2bdfc3788dcd7faf9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/wa/GoogleMfaAuthTokenITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FGoogleMfaAuthTokenITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FGoogleMfaAuthTokenITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FGoogleMfaAuthTokenITCase.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -25,7 +25,7 @@\n import static org.junit.jupiter.api.Assertions.assertThrows;\n \n import java.security.SecureRandom;\n-import java.time.OffsetDateTime;\n+import java.time.LocalDateTime;\n import java.util.UUID;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AuthProfileTO;\n@@ -41,12 +41,12 @@ public class GoogleMfaAuthTokenITCase extends AbstractITCase {\n \n     private static GoogleMfaAuthToken createGoogleMfaAuthToken() {\n         int token = SECURE_RANDOM.ints(100_000, 999_999).findFirst().getAsInt();\n-        return new GoogleMfaAuthToken.Builder().token(token).issueDate(OffsetDateTime.now()).build();\n+        return new GoogleMfaAuthToken.Builder().token(token).issueDate(LocalDateTime.now()).build();\n     }\n \n     @BeforeEach\n     public void setup() {\n-        googleMfaAuthTokenService.delete((OffsetDateTime) null);\n+        googleMfaAuthTokenService.delete((LocalDateTime) null);\n     }\n \n     @Test\n@@ -109,7 +109,7 @@ public void deleteByOwnerAndToken() {\n     public void deleteByDate() {\n         String owner = UUID.randomUUID().toString();\n         createGoogleMfaAuthToken();\n-        googleMfaAuthTokenService.delete(OffsetDateTime.now().minusDays(1));\n+        googleMfaAuthTokenService.delete(LocalDateTime.now().minusDays(1));\n         assertTrue(googleMfaAuthTokenService.read(owner).getResult().isEmpty());\n         assertEquals(0, googleMfaAuthTokenService.read(owner).getTotalCount());\n     }"},{"sha":"f1df61566b94078ec6c8315012fa66023ed34f1f","filename":"src/main/asciidoc/reference-guide/concepts/authenticationmodules.adoc","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fauthenticationmodules.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fauthenticationmodules.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fauthenticationmodules.adoc?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -47,10 +47,10 @@ https://github.com/apache/syncope/blob/master/common/am/lib/src/main/java/org/ap\n endif::[]\n interface and extending appropriately the\n ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n-https://github.com/apache/syncope/blob/syncope-{docVersion}/wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWAPropertySourceLocator.java[SyncopeWAPropertySourceLocator^]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/WAPropertySourceLocator.java[WAPropertySourceLocator^]\n endif::[]\n ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n-https://github.com/apache/syncope/blob/master/wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWAPropertySourceLocator.java[SyncopeWAPropertySourceLocator^]\n+https://github.com/apache/syncope/blob/master/wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/WAPropertySourceLocator.java[WAPropertySourceLocator^]\n endif::[]\n class.\n ===="},{"sha":"6b36823e96ad00e6bc53c6362388cd60c07d0aa0","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/WABootstrapConfiguration.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWABootstrapConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWABootstrapConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWABootstrapConfiguration.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -27,7 +27,7 @@\n @Configuration(proxyBeanMethods = false)\n @PropertySource(\"classpath:wa.properties\")\n @PropertySource(value = \"file:${conf.directory}/wa.properties\", ignoreResourceNotFound = true)\n-public class SyncopeWABootstrapConfiguration {\n+public class WABootstrapConfiguration {\n \n     @Configuration(proxyBeanMethods = false)\n     public static class WAClientConfiguration {\n@@ -50,7 +50,7 @@ public WARestClient waRestClient() {\n     public static class PropertySourceConfiguration {\n         @Bean\n         public PropertySourceLocator configPropertySourceLocator(final WARestClient waRestClient) {\n-            return new SyncopeWAPropertySourceLocator(waRestClient);\n+            return new WAPropertySourceLocator(waRestClient);\n         }\n     }\n }","previous_filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWABootstrapConfiguration.java"},{"sha":"bf6b799a9b3eae81f66ef50b11e895d6f3fd37f2","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/WAPropertySourceLocator.java","status":"renamed","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWAPropertySourceLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWAPropertySourceLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWAPropertySourceLocator.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -72,13 +72,13 @@\n import org.springframework.core.env.PropertySource;\n \n @Order\n-public class SyncopeWAPropertySourceLocator implements PropertySourceLocator {\n+public class WAPropertySourceLocator implements PropertySourceLocator {\n \n-    protected static final Logger LOG = LoggerFactory.getLogger(SyncopeWAPropertySourceLocator.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(WAPropertySourceLocator.class);\n \n     protected final WARestClient waRestClient;\n \n-    public SyncopeWAPropertySourceLocator(final WARestClient waRestClient) {\n+    public WAPropertySourceLocator(final WARestClient waRestClient) {\n         this.waRestClient = waRestClient;\n     }\n \n@@ -104,13 +104,13 @@ protected Map<String, Object> mapAuthModule(\n             final SyncopeAuthModuleConf conf,\n             final String address) {\n \n-        SyncopeAuthenticationProperties syncopeProps = new SyncopeAuthenticationProperties();\n-        syncopeProps.setName(authModule);\n-        syncopeProps.setDomain(conf.getDomain());\n-        syncopeProps.setUrl(StringUtils.substringBefore(address, \"/rest\"));\n+        SyncopeAuthenticationProperties props = new SyncopeAuthenticationProperties();\n+        props.setName(authModule);\n+        props.setDomain(conf.getDomain());\n+        props.setUrl(StringUtils.substringBefore(address, \"/rest\"));\n \n         CasConfigurationProperties casProperties = new CasConfigurationProperties();\n-        casProperties.getAuthn().setSyncope(syncopeProps);\n+        casProperties.getAuthn().setSyncope(props);\n \n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.addFilter(AuthenticationProperties.class.getSimpleName(),\n@@ -125,15 +125,15 @@ protected Map<String, Object> mapAuthModule(\n             final String authModule,\n             final StaticAuthModuleConf conf) {\n \n-        AcceptAuthenticationProperties staticProps = new AcceptAuthenticationProperties();\n-        staticProps.setName(authModule);\n+        AcceptAuthenticationProperties props = new AcceptAuthenticationProperties();\n+        props.setName(authModule);\n         String users = conf.getUsers().entrySet().stream().\n                 map(entry -> entry.getKey() + \"::\" + entry.getValue()).\n                 collect(Collectors.joining(\",\"));\n-        staticProps.setUsers(users);\n+        props.setUsers(users);\n \n         CasConfigurationProperties casProperties = new CasConfigurationProperties();\n-        casProperties.getAuthn().setAccept(staticProps);\n+        casProperties.getAuthn().setAccept(props);\n \n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.addFilter(AuthenticationProperties.class.getSimpleName(),\n@@ -148,22 +148,22 @@ protected Map<String, Object> mapAuthModule(\n             final String authModule,\n             final LDAPAuthModuleConf conf) {\n \n-        LdapAuthenticationProperties ldapProps = new LdapAuthenticationProperties();\n-        ldapProps.setName(authModule);\n-        ldapProps.setLdapUrl(conf.getLdapUrl());\n-        ldapProps.setBaseDn(conf.getBaseDn());\n-        ldapProps.setSearchFilter(conf.getSearchFilter());\n-        ldapProps.setBindDn(conf.getBindDn());\n-        ldapProps.setBindCredential(conf.getBindCredential());\n+        LdapAuthenticationProperties props = new LdapAuthenticationProperties();\n+        props.setName(authModule);\n+        props.setLdapUrl(conf.getLdapUrl());\n+        props.setBaseDn(conf.getBaseDn());\n+        props.setSearchFilter(conf.getSearchFilter());\n+        props.setBindDn(conf.getBindDn());\n+        props.setBindCredential(conf.getBindCredential());\n         if (StringUtils.isNotBlank(conf.getBindDn()) && StringUtils.isNotBlank(conf.getBindCredential())) {\n-            ldapProps.setType(AbstractLdapAuthenticationProperties.AuthenticationTypes.AUTHENTICATED);\n+            props.setType(AbstractLdapAuthenticationProperties.AuthenticationTypes.AUTHENTICATED);\n         }\n-        ldapProps.setPrincipalAttributeId(conf.getUserIdAttribute());\n-        ldapProps.setSubtreeSearch(conf.isSubtreeSearch());\n-        ldapProps.setPrincipalAttributeList(conf.getPrincipalAttributeList());\n+        props.setPrincipalAttributeId(conf.getUserIdAttribute());\n+        props.setSubtreeSearch(conf.isSubtreeSearch());\n+        props.setPrincipalAttributeList(conf.getPrincipalAttributeList());\n \n         CasConfigurationProperties casProperties = new CasConfigurationProperties();\n-        casProperties.getAuthn().getLdap().add(ldapProps);\n+        casProperties.getAuthn().getLdap().add(props);\n \n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.addFilter(\n@@ -250,13 +250,13 @@ protected Map<String, Object> mapAuthModule(\n             final String authModule,\n             final GoogleMfaAuthModuleConf conf) {\n \n-        GoogleAuthenticatorMultifactorProperties gauthProps = new GoogleAuthenticatorMultifactorProperties();\n-        gauthProps.setName(authModule);\n-        gauthProps.getCore().setIssuer(conf.getIssuer());\n-        gauthProps.getCore().setCodeDigits(conf.getCodeDigits());\n-        gauthProps.getCore().setLabel(conf.getLabel());\n-        gauthProps.getCore().setTimeStepSize(conf.getTimeStepSize());\n-        gauthProps.getCore().setWindowSize(conf.getWindowSize());\n+        GoogleAuthenticatorMultifactorProperties props = new GoogleAuthenticatorMultifactorProperties();\n+        props.setName(authModule);\n+        props.getCore().setIssuer(conf.getIssuer());\n+        props.getCore().setCodeDigits(conf.getCodeDigits());\n+        props.getCore().setLabel(conf.getLabel());\n+        props.getCore().setTimeStepSize(conf.getTimeStepSize());\n+        props.getCore().setWindowSize(conf.getWindowSize());\n \n         if (conf.getLdap() != null) {\n             LdapGoogleAuthenticatorMultifactorProperties ldapProps = new LdapGoogleAuthenticatorMultifactorProperties();\n@@ -266,11 +266,11 @@ protected Map<String, Object> mapAuthModule(\n             ldapProps.setBindDn(conf.getLdap().getBindDn());\n             ldapProps.setSearchFilter(conf.getLdap().getSearchFilter());\n             ldapProps.setLdapUrl(conf.getLdap().getUrl());\n-            gauthProps.setLdap(ldapProps);\n+            props.setLdap(ldapProps);\n         }\n \n         CasConfigurationProperties casProperties = new CasConfigurationProperties();\n-        casProperties.getAuthn().getMfa().setGauth(gauthProps);\n+        casProperties.getAuthn().getMfa().setGauth(props);\n \n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.addFilter(","previous_filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWAPropertySourceLocator.java"},{"sha":"f17016337b03a311fced30dba589607ca43b9325","filename":"wa/bootstrap/src/main/resources/META-INF/spring.factories","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fbootstrap%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fbootstrap%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -16,4 +16,4 @@\n # under the License.\n \n org.springframework.cloud.bootstrap.BootstrapConfiguration=\\\n- org.apache.syncope.wa.bootstrap.SyncopeWABootstrapConfiguration\n+ org.apache.syncope.wa.bootstrap.WABootstrapConfiguration"},{"sha":"16c1bacb4110731e5356dbed3c412ff6e1bb295c","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWAApplication.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -23,7 +23,7 @@\n import java.time.ZoneId;\n import java.util.Date;\n import java.util.Map;\n-import org.apache.syncope.wa.starter.config.SyncopeWARefreshContextJob;\n+import org.apache.syncope.wa.starter.config.WARefreshContextJob;\n \n import org.apereo.cas.config.GoogleAuthenticatorLdapConfiguration;\n import org.apereo.cas.configuration.CasConfigurationProperties;\n@@ -128,7 +128,7 @@ protected void scheduleJobToRefreshContext(final  WAProperties waProperties,\n             Trigger trigger = TriggerBuilder.newTrigger().startAt(date).build();\n             JobKey jobKey = new JobKey(getClass().getSimpleName());\n \n-            JobDetail job = JobBuilder.newJob(SyncopeWARefreshContextJob.class).\n+            JobDetail job = JobBuilder.newJob(WARefreshContextJob.class).\n                     withIdentity(jobKey).\n                     build();\n             LOG.info(\"Scheduled job to refresh application context @ [{}]\", date);"},{"sha":"c0da9022dbf58e59058e08af1da07f9b685c66f8","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/audit/WAAuditTrailManager.java","status":"renamed","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FWAAuditTrailManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FWAAuditTrailManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FWAAuditTrailManager.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -23,7 +23,6 @@\n import java.util.Map;\n import java.util.Set;\n import org.apereo.cas.audit.spi.AbstractAuditTrailManager;\n-import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.time.OffsetDateTime;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n@@ -34,13 +33,11 @@\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apereo.inspektr.audit.AuditActionContext;\n \n-public class SyncopeWAAuditTrailManager extends AbstractAuditTrailManager {\n-\n-    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n+public class WAAuditTrailManager extends AbstractAuditTrailManager {\n \n     private final WARestClient waRestClient;\n \n-    public SyncopeWAAuditTrailManager(final WARestClient restClient) {\n+    public WAAuditTrailManager(final WARestClient restClient) {\n         super(true);\n         this.waRestClient = restClient;\n     }","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/audit/SyncopeWAAuditTrailManager.java"},{"sha":"ceba2db313c2c5fa292c2be807065764c80f03ab","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/WAContext.java","status":"renamed","additions":28,"deletions":22,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FWAContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FWAContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FWAContext.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -40,10 +40,10 @@\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apache.syncope.wa.starter.actuate.SyncopeCoreHealthIndicator;\n import org.apache.syncope.wa.starter.actuate.SyncopeWAInfoContributor;\n-import org.apache.syncope.wa.starter.audit.SyncopeWAAuditTrailManager;\n-import org.apache.syncope.wa.starter.events.SyncopeWAEventRepository;\n-import org.apache.syncope.wa.starter.gauth.SyncopeWAGoogleMfaAuthCredentialRepository;\n-import org.apache.syncope.wa.starter.gauth.SyncopeWAGoogleMfaAuthTokenRepository;\n+import org.apache.syncope.wa.starter.audit.WAAuditTrailManager;\n+import org.apache.syncope.wa.starter.events.WAEventRepository;\n+import org.apache.syncope.wa.starter.gauth.WAGoogleMfaAuthCredentialRepository;\n+import org.apache.syncope.wa.starter.gauth.WAGoogleMfaAuthTokenRepository;\n import org.apache.syncope.wa.starter.mapping.AccessMapFor;\n import org.apache.syncope.wa.starter.mapping.AccessMapper;\n import org.apache.syncope.wa.starter.mapping.AttrReleaseMapFor;\n@@ -59,16 +59,17 @@\n import org.apache.syncope.wa.starter.mapping.OIDCRPClientAppTOMapper;\n import org.apache.syncope.wa.starter.mapping.RegisteredServiceMapper;\n import org.apache.syncope.wa.starter.mapping.SAML2SPClientAppTOMapper;\n-import org.apache.syncope.wa.starter.oidc.SyncopeWAOIDCJWKSGeneratorService;\n-import org.apache.syncope.wa.starter.pac4j.saml.SyncopeWASAML2ClientCustomizer;\n+import org.apache.syncope.wa.starter.oidc.WAOIDCJWKSGeneratorService;\n+import org.apache.syncope.wa.starter.pac4j.saml.WASAML2ClientCustomizer;\n import org.apache.syncope.wa.starter.saml.idp.metadata.RestfulSamlIdPMetadataGenerator;\n import org.apache.syncope.wa.starter.saml.idp.metadata.RestfulSamlIdPMetadataLocator;\n-import org.apache.syncope.wa.starter.services.SyncopeWAServiceRegistry;\n-import org.apache.syncope.wa.starter.surrogate.SyncopeWASurrogateAuthenticationService;\n-import org.apache.syncope.wa.starter.u2f.SyncopeWAU2FDeviceRepository;\n-import org.apache.syncope.wa.starter.webauthn.SyncopeWAWebAuthnCredentialRepository;\n+import org.apache.syncope.wa.starter.services.WAServiceRegistry;\n+import org.apache.syncope.wa.starter.surrogate.WASurrogateAuthenticationService;\n+import org.apache.syncope.wa.starter.u2f.WAU2FDeviceRepository;\n+import org.apache.syncope.wa.starter.webauthn.WAWebAuthnCredentialRepository;\n import org.apereo.cas.adaptors.u2f.storage.U2FDeviceRepository;\n import org.apereo.cas.audit.AuditTrailExecutionPlanConfigurer;\n+import org.apereo.cas.authentication.AuthenticationEventExecutionPlan;\n import org.apereo.cas.authentication.surrogate.SurrogateAuthenticationService;\n import org.apereo.cas.configuration.CasConfigurationProperties;\n import org.apereo.cas.configuration.model.support.mfa.gauth.LdapGoogleAuthenticatorMultifactorProperties;\n@@ -101,7 +102,7 @@\n import org.springframework.context.annotation.ScopedProxyMode;\n \n @Configuration(proxyBeanMethods = false)\n-public class SyncopeWAConfiguration {\n+public class WAContext {\n \n     private static String version(final ConfigurableApplicationContext ctx) {\n         return ctx.getEnvironment().getProperty(\"version\");\n@@ -162,7 +163,10 @@ public ClientAppMapper saml2SPClientAppTOMapper() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public RegisteredServiceMapper registeredServiceMapper(final ConfigurableApplicationContext ctx) {\n+    public RegisteredServiceMapper registeredServiceMapper(\n+            final ConfigurableApplicationContext ctx,\n+            final ObjectProvider<AuthenticationEventExecutionPlan> authenticationEventExecutionPlan) {\n+\n         Map<String, AuthMapper> authPolicyConfMappers = new HashMap<>();\n         ctx.getBeansOfType(AuthMapper.class).forEach((name, bean) -> {\n             AuthMapFor authMapFor = ctx.findAnnotationOnBean(name, AuthMapFor.class);\n@@ -197,6 +201,8 @@ public RegisteredServiceMapper registeredServiceMapper(final ConfigurableApplica\n         });\n \n         return new RegisteredServiceMapper(\n+                ctx,\n+                authenticationEventExecutionPlan,\n                 authPolicyConfMappers,\n                 accessPolicyConfMappers,\n                 attrReleasePolicyConfMappers,\n@@ -211,7 +217,7 @@ public ServiceRegistryExecutionPlanConfigurer syncopeServiceRegistryConfigurer(\n             @Qualifier(\"serviceRegistryListeners\")\n             final ObjectProvider<List<ServiceRegistryListener>> serviceRegistryListeners) {\n \n-        SyncopeWAServiceRegistry registry = new SyncopeWAServiceRegistry(\n+        WAServiceRegistry registry = new WAServiceRegistry(\n                 restClient, registeredServiceMapper, ctx,\n                 Optional.ofNullable(serviceRegistryListeners.getIfAvailable()).orElseGet(ArrayList::new));\n         return plan -> plan.registerServiceRegistry(registry);\n@@ -235,7 +241,7 @@ public SamlIdPMetadataLocator samlIdPMetadataLocator(final WARestClient restClie\n \n     @Bean\n     public AuditTrailExecutionPlanConfigurer auditConfigurer(final WARestClient restClient) {\n-        return plan -> plan.registerAuditTrailManager(new SyncopeWAAuditTrailManager(restClient));\n+        return plan -> plan.registerAuditTrailManager(new WAAuditTrailManager(restClient));\n     }\n \n     @ConditionalOnMissingBean(name = \"syncopeWaEventRepositoryFilter\")\n@@ -250,20 +256,20 @@ public CasEventRepository casEventRepository(\n             @Qualifier(\"syncopeWAEventRepositoryFilter\")\n             final CasEventRepositoryFilter syncopeWAEventRepositoryFilter) {\n \n-        return new SyncopeWAEventRepository(syncopeWAEventRepositoryFilter, restClient);\n+        return new WAEventRepository(syncopeWAEventRepositoryFilter, restClient);\n     }\n \n     @Bean\n     public DelegatedClientFactoryCustomizer<Client> delegatedClientCustomizer(final WARestClient restClient) {\n-        return new SyncopeWASAML2ClientCustomizer(restClient);\n+        return new WASAML2ClientCustomizer(restClient);\n     }\n \n     @Bean\n     public OneTimeTokenRepository oneTimeTokenAuthenticatorTokenRepository(\n             final CasConfigurationProperties casProperties,\n             final WARestClient restClient) {\n \n-        return new SyncopeWAGoogleMfaAuthTokenRepository(\n+        return new WAGoogleMfaAuthTokenRepository(\n                 restClient, casProperties.getAuthn().getMfa().getGauth().getCore().getTimeStepSize());\n     }\n \n@@ -292,7 +298,7 @@ public OneTimeTokenCredentialRepository googleAuthenticatorAccountRegistry(\n             return new LdapGoogleAuthenticatorTokenCredentialRepository(\n                     cipherExecutor, googleAuthenticatorInstance, connectionFactory, ldap);\n         }\n-        return new SyncopeWAGoogleMfaAuthCredentialRepository(restClient, googleAuthenticatorInstance);\n+        return new WAGoogleMfaAuthCredentialRepository(restClient, googleAuthenticatorInstance);\n     }\n \n     @Bean\n@@ -304,15 +310,15 @@ public OidcJsonWebKeystoreGeneratorService oidcJsonWebKeystoreGeneratorService(\n                 getProperty(\"cas.authn.oidc.jwks.size\", int.class, 2048);\n         JWSAlgorithm algorithm = ctx.getEnvironment().\n                 getProperty(\"cas.authn.oidc.jwks.algorithm\", JWSAlgorithm.class, JWSAlgorithm.RS256);\n-        return new SyncopeWAOIDCJWKSGeneratorService(restClient, size, algorithm);\n+        return new WAOIDCJWKSGeneratorService(restClient, size, algorithm);\n     }\n \n     @Bean\n     public WebAuthnCredentialRepository webAuthnCredentialRepository(\n             final CasConfigurationProperties casProperties,\n             final WARestClient restClient) {\n \n-        return new SyncopeWAWebAuthnCredentialRepository(casProperties, restClient);\n+        return new WAWebAuthnCredentialRepository(casProperties, restClient);\n     }\n \n     @Bean\n@@ -326,12 +332,12 @@ public U2FDeviceRepository u2fDeviceRepository(\n         LoadingCache<String, String> requestStorage = Caffeine.newBuilder().\n                 expireAfterWrite(u2f.getExpireRegistrations(), u2f.getExpireRegistrationsTimeUnit()).\n                 build(key -> StringUtils.EMPTY);\n-        return new SyncopeWAU2FDeviceRepository(casProperties, requestStorage, restClient, expirationDate);\n+        return new WAU2FDeviceRepository(casProperties, requestStorage, restClient, expirationDate);\n     }\n \n     @Bean\n     public SurrogateAuthenticationService surrogateAuthenticationService(final WARestClient restClient) {\n-        return new SyncopeWASurrogateAuthenticationService(restClient);\n+        return new WASurrogateAuthenticationService(restClient);\n     }\n \n     @ConditionalOnMissingBean","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/SyncopeWAConfiguration.java"},{"sha":"6acac0dc9ff131e93d11e584e5dd19a992c1e00f","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/WARefreshContextJob.java","status":"renamed","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FWARefreshContextJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FWARefreshContextJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FWARefreshContextJob.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -18,32 +18,31 @@\n  */\n package org.apache.syncope.wa.starter.config;\n \n+import java.util.Optional;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n-import org.apache.commons.lang.StringUtils;\n import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGenerator;\n import org.apereo.cas.support.saml.services.idp.metadata.SamlIdPMetadataDocument;\n import org.apereo.cas.util.AsciiArtUtils;\n-\n import org.quartz.Job;\n import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.cloud.context.refresh.ContextRefresher;\n-import java.util.Optional;\n-import org.quartz.JobExecutionException;\n \n-public class SyncopeWARefreshContextJob implements Job {\n+public class WARefreshContextJob implements Job {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWARefreshContextJob.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(WARefreshContextJob.class);\n \n     @Autowired\n     private ContextRefresher contextRefresher;\n \n     @Autowired\n     private SamlIdPMetadataGenerator metadataGenerator;\n \n-    public SyncopeWARefreshContextJob() {\n+    public WARefreshContextJob() {\n     }\n \n     @Override","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/SyncopeWARefreshContextJob.java"},{"sha":"f72ce18562110e15d411e45bc3b1c49255ac51c0","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/events/WAEventRepository.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fevents%2FWAEventRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fevents%2FWAEventRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fevents%2FWAEventRepository.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -39,15 +39,15 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class SyncopeWAEventRepository extends AbstractCasEventRepository {\n+public class WAEventRepository extends AbstractCasEventRepository {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAEventRepository.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(WAEventRepository.class);\n \n     private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     private final WARestClient waRestClient;\n \n-    public SyncopeWAEventRepository(\n+    public WAEventRepository(\n             final CasEventRepositoryFilter eventRepositoryFilter,\n             final WARestClient restClient) {\n ","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/events/SyncopeWAEventRepository.java"},{"sha":"cb2b4fa0d5a7348dd47acfb13b16b8cf5b174a03","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/gauth/WAGoogleMfaAuthCredentialRepository.java","status":"renamed","additions":60,"deletions":41,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FWAGoogleMfaAuthCredentialRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FWAGoogleMfaAuthCredentialRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FWAGoogleMfaAuthCredentialRepository.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -35,30 +35,30 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class SyncopeWAGoogleMfaAuthCredentialRepository extends BaseGoogleAuthenticatorTokenCredentialRepository {\n+public class WAGoogleMfaAuthCredentialRepository extends BaseGoogleAuthenticatorTokenCredentialRepository {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAGoogleMfaAuthTokenRepository.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(WAGoogleMfaAuthTokenRepository.class);\n \n-    private final WARestClient waRestClient;\n+    protected final WARestClient waRestClient;\n \n-    public SyncopeWAGoogleMfaAuthCredentialRepository(\n+    public WAGoogleMfaAuthCredentialRepository(\n             final WARestClient waRestClient, final IGoogleAuthenticator googleAuthenticator) {\n \n         super(CipherExecutor.noOpOfStringToString(), googleAuthenticator);\n         this.waRestClient = waRestClient;\n     }\n \n-    private static GoogleMfaAuthAccount mapGoogleMfaAuthAccount(final OneTimeTokenAccount account) {\n-        return new GoogleMfaAuthAccount.Builder()\n-                .registrationDate(OffsetDateTime.now())\n-                .scratchCodes(account.getScratchCodes())\n-                .validationCode(account.getValidationCode())\n-                .secretKey(account.getSecretKey())\n-                .id(account.getId())\n-                .build();\n+    protected GoogleMfaAuthAccount mapGoogleMfaAuthAccount(final OneTimeTokenAccount account) {\n+        return new GoogleMfaAuthAccount.Builder().\n+                registrationDate(OffsetDateTime.now()).\n+                scratchCodes(account.getScratchCodes()).\n+                validationCode(account.getValidationCode()).\n+                secretKey(account.getSecretKey()).\n+                id(account.getId()).\n+                build();\n     }\n \n-    private static GoogleAuthenticatorAccount mapGoogleMfaAuthAccount(final GoogleMfaAuthAccount account) {\n+    protected GoogleAuthenticatorAccount mapGoogleMfaAuthAccount(final GoogleMfaAuthAccount account) {\n         return GoogleAuthenticatorAccount.builder().\n                 secretKey(account.getSecretKey()).\n                 validationCode(account.getValidationCode()).\n@@ -68,15 +68,18 @@ private static GoogleAuthenticatorAccount mapGoogleMfaAuthAccount(final GoogleMf\n                 build();\n     }\n \n+    protected GoogleMfaAuthAccountService service() {\n+        return waRestClient.getSyncopeClient().getService(GoogleMfaAuthAccountService.class);\n+    }\n+\n     @Override\n     public OneTimeTokenAccount get(final long id) {\n         try {\n-            GoogleMfaAuthAccount account =\n-                    waRestClient.getSyncopeClient().getService(GoogleMfaAuthAccountService.class).read(id);\n+            GoogleMfaAuthAccount account = service().read(id);\n             if (account != null) {\n                 return mapGoogleMfaAuthAccount(account);\n             }\n-        } catch (final SyncopeClientException e) {\n+        } catch (SyncopeClientException e) {\n             if (e.getType() == ClientExceptionType.NotFound) {\n                 LOG.info(\"Could not locate account for id {}\", id);\n             } else {\n@@ -89,12 +92,13 @@ public OneTimeTokenAccount get(final long id) {\n     @Override\n     public OneTimeTokenAccount get(final String username, final long id) {\n         try {\n-            waRestClient.getSyncopeClient().getService(GoogleMfaAuthAccountService.class).read(username).\n+            return service().read(username).\n                     getResult().stream().\n                     filter(account -> account.getId() == id).\n-                    map(SyncopeWAGoogleMfaAuthCredentialRepository::mapGoogleMfaAuthAccount).\n-                    collect(Collectors.toList());\n-        } catch (final SyncopeClientException e) {\n+                    map(this::mapGoogleMfaAuthAccount).\n+                    findFirst().\n+                    orElse(null);\n+        } catch (SyncopeClientException e) {\n             if (e.getType() == ClientExceptionType.NotFound) {\n                 LOG.info(\"Could not locate account for owner {} and id {}\", username, id);\n             } else {\n@@ -107,11 +111,11 @@ public OneTimeTokenAccount get(final String username, final long id) {\n     @Override\n     public Collection<? extends OneTimeTokenAccount> get(final String username) {\n         try {\n-            waRestClient.getSyncopeClient().getService(GoogleMfaAuthAccountService.class).read(username).\n+            return service().read(username).\n                     getResult().stream().\n-                    map(SyncopeWAGoogleMfaAuthCredentialRepository::mapGoogleMfaAuthAccount).\n+                    map(this::mapGoogleMfaAuthAccount).\n                     collect(Collectors.toList());\n-        } catch (final SyncopeClientException e) {\n+        } catch (SyncopeClientException e) {\n             if (e.getType() == ClientExceptionType.NotFound) {\n                 LOG.info(\"Could not locate account for owner {}\", username);\n             } else {\n@@ -123,22 +127,22 @@ public Collection<? extends OneTimeTokenAccount> get(final String username) {\n \n     @Override\n     public Collection<? extends OneTimeTokenAccount> load() {\n-        return waRestClient.getSyncopeClient().getService(GoogleMfaAuthAccountService.class).list().\n+        return service().list().\n                 getResult().stream().\n-                map(SyncopeWAGoogleMfaAuthCredentialRepository::mapGoogleMfaAuthAccount).\n+                map(this::mapGoogleMfaAuthAccount).\n                 collect(Collectors.toList());\n     }\n \n     @Override\n     public OneTimeTokenAccount save(final OneTimeTokenAccount tokenAccount) {\n-        GoogleMfaAuthAccount account = new GoogleMfaAuthAccount.Builder()\n-                .registrationDate(OffsetDateTime.now())\n-                .scratchCodes(tokenAccount.getScratchCodes())\n-                .validationCode(tokenAccount.getValidationCode())\n-                .secretKey(tokenAccount.getSecretKey())\n-                .name(tokenAccount.getName())\n-                .id(tokenAccount.getId())\n-                .build();\n+        GoogleMfaAuthAccount account = new GoogleMfaAuthAccount.Builder().\n+                registrationDate(OffsetDateTime.now()).\n+                scratchCodes(tokenAccount.getScratchCodes()).\n+                validationCode(tokenAccount.getValidationCode()).\n+                secretKey(tokenAccount.getSecretKey()).\n+                name(tokenAccount.getName()).\n+                id(tokenAccount.getId()).\n+                build();\n         waRestClient.getSyncopeClient().\n                 getService(GoogleMfaAuthAccountService.class).create(tokenAccount.getUsername(), account);\n         return mapGoogleMfaAuthAccount(account);\n@@ -147,34 +151,49 @@ public OneTimeTokenAccount save(final OneTimeTokenAccount tokenAccount) {\n     @Override\n     public OneTimeTokenAccount update(final OneTimeTokenAccount tokenAccount) {\n         GoogleMfaAuthAccount acct = mapGoogleMfaAuthAccount(tokenAccount);\n-        waRestClient.getSyncopeClient().getService(GoogleMfaAuthAccountService.class).\n-                update(tokenAccount.getUsername(), acct);\n+        service().update(tokenAccount.getUsername(), acct);\n         return tokenAccount;\n     }\n \n     @Override\n     public void deleteAll() {\n-        waRestClient.getSyncopeClient().getService(GoogleMfaAuthAccountService.class).deleteAll();\n+        service().deleteAll();\n     }\n \n     @Override\n     public void delete(final String username) {\n-        waRestClient.getSyncopeClient().getService(GoogleMfaAuthAccountService.class).delete(username);\n+        try {\n+            service().delete(username);\n+        } catch (SyncopeClientException e) {\n+            if (e.getType() == ClientExceptionType.NotFound) {\n+                LOG.info(\"Could not locate account for owner {}\", username);\n+            } else {\n+                LOG.error(e.getMessage(), e);\n+            }\n+        }\n     }\n \n     @Override\n     public void delete(final long id) {\n-        waRestClient.getSyncopeClient().getService(GoogleMfaAuthAccountService.class).delete(id);\n+        service().delete(id);\n     }\n \n     @Override\n     public long count() {\n-        return waRestClient.getSyncopeClient().getService(GoogleMfaAuthAccountService.class).list().getTotalCount();\n+        return service().list().getTotalCount();\n     }\n \n     @Override\n     public long count(final String username) {\n-        return waRestClient.getSyncopeClient().getService(GoogleMfaAuthAccountService.class).\n-                read(username).getTotalCount();\n+        try {\n+            return service().read(username).getTotalCount();\n+        } catch (SyncopeClientException e) {\n+            if (e.getType() == ClientExceptionType.NotFound) {\n+                LOG.info(\"Could not locate account for owner {}\", username);\n+            } else {\n+                LOG.error(e.getMessage(), e);\n+            }\n+            return 0L;\n+        }\n     }\n }","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/gauth/SyncopeWAGoogleMfaAuthCredentialRepository.java"},{"sha":"95f887cb0530090fce16fa12814f1a8721eb481a","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/gauth/WAGoogleMfaAuthTokenRepository.java","status":"renamed","additions":12,"deletions":15,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FWAGoogleMfaAuthTokenRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FWAGoogleMfaAuthTokenRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FWAGoogleMfaAuthTokenRepository.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -19,8 +19,6 @@\n package org.apache.syncope.wa.starter.gauth;\n \n import java.time.LocalDateTime;\n-import java.time.OffsetDateTime;\n-import java.time.ZoneOffset;\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthTokenService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n@@ -30,15 +28,15 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class SyncopeWAGoogleMfaAuthTokenRepository extends BaseOneTimeTokenRepository {\n+public class WAGoogleMfaAuthTokenRepository extends BaseOneTimeTokenRepository {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAGoogleMfaAuthTokenRepository.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(WAGoogleMfaAuthTokenRepository.class);\n \n-    private final WARestClient waRestClient;\n+    protected final WARestClient waRestClient;\n \n-    private final long expireTokensInSeconds;\n+    protected final long expireTokensInSeconds;\n \n-    public SyncopeWAGoogleMfaAuthTokenRepository(final WARestClient waRestClient, final long expireTokensInSeconds) {\n+    public WAGoogleMfaAuthTokenRepository(final WARestClient waRestClient, final long expireTokensInSeconds) {\n         this.waRestClient = waRestClient;\n         this.expireTokensInSeconds = expireTokensInSeconds;\n     }\n@@ -49,15 +47,15 @@ protected GoogleMfaAuthTokenService service() {\n \n     @Override\n     protected void cleanInternal() {\n-        service().delete(OffsetDateTime.now().minusSeconds(expireTokensInSeconds));\n+        service().delete(LocalDateTime.now().minusSeconds(expireTokensInSeconds));\n     }\n \n     @Override\n     public void store(final OneTimeToken token) {\n-        GoogleMfaAuthToken tokenTO = new GoogleMfaAuthToken.Builder()\n-                .token(token.getToken())\n-                .issueDate(OffsetDateTime.of(token.getIssuedDateTime(), OffsetDateTime.now().getOffset()))\n-                .build();\n+        GoogleMfaAuthToken tokenTO = new GoogleMfaAuthToken.Builder().\n+                token(token.getToken()).\n+                issueDate(token.getIssuedDateTime()).\n+                build();\n         service().store(token.getUserId(), tokenTO);\n     }\n \n@@ -66,8 +64,7 @@ public OneTimeToken get(final String username, final Integer otp) {\n         try {\n             GoogleMfaAuthToken tokenTO = service().read(username, otp);\n             GoogleAuthenticatorToken token = new GoogleAuthenticatorToken(tokenTO.getOtp(), username);\n-            LocalDateTime dateTime = tokenTO.getIssueDate().toInstant().atZone(ZoneOffset.UTC).toLocalDateTime();\n-            token.setIssuedDateTime(dateTime);\n+            token.setIssuedDateTime(tokenTO.getIssueDate());\n             return token;\n         } catch (final Exception e) {\n             LOG.debug(\"Unable to fetch token {} for user {}\", otp, username);\n@@ -92,7 +89,7 @@ public void remove(final Integer otp) {\n \n     @Override\n     public void removeAll() {\n-        service().delete((OffsetDateTime) null);\n+        service().delete((LocalDateTime) null);\n     }\n \n     @Override","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/gauth/SyncopeWAGoogleMfaAuthTokenRepository.java"},{"sha":"ee62c2b43c5f2183834c021ce3be7a46d8b90874","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AbstractClientAppMapper.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAbstractClientAppMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAbstractClientAppMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAbstractClientAppMapper.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -27,6 +27,7 @@\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n+import org.apereo.cas.services.RegisteredServiceMultifactorPolicy;\n import org.apereo.cas.services.RegisteredServiceProperty;\n \n abstract class AbstractClientAppMapper implements ClientAppMapper {\n@@ -48,12 +49,16 @@ protected void setCommon(final RegexRegisteredService service, final ClientAppTO\n \n     protected void setPolicies(\n             final RegexRegisteredService service,\n-            final RegisteredServiceAuthenticationPolicy authenticationPolicy,\n+            final RegisteredServiceAuthenticationPolicy authPolicy,\n+            final RegisteredServiceMultifactorPolicy mfaPolicy,\n             final RegisteredServiceAccessStrategy accessStrategy,\n             final RegisteredServiceAttributeReleasePolicy attributeReleasePolicy) {\n \n-        if (authenticationPolicy != null) {\n-            service.setAuthenticationPolicy(authenticationPolicy);\n+        if (authPolicy != null) {\n+            service.setAuthenticationPolicy(authPolicy);\n+        }\n+        if (mfaPolicy != null) {\n+            service.setMultifactorPolicy(mfaPolicy);\n         }\n         if (accessStrategy != null) {\n             service.setAccessStrategy(accessStrategy);"},{"sha":"4e262bcbcfe4e9d1435636e798f99861cf587945","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AuthMapper.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapper.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -18,11 +18,22 @@\n  */\n package org.apache.syncope.wa.starter.mapping;\n \n+import java.util.List;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n+import org.apache.syncope.common.lib.to.AuthModuleTO;\n+import org.apereo.cas.authentication.AuthenticationEventExecutionPlan;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n+import org.apereo.cas.services.RegisteredServiceMultifactorPolicy;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.context.ConfigurableApplicationContext;\n \n @FunctionalInterface\n public interface AuthMapper {\n \n-    RegisteredServiceAuthenticationPolicy build(AuthPolicyTO policy);\n+    Pair<RegisteredServiceAuthenticationPolicy, RegisteredServiceMultifactorPolicy> build(\n+            ConfigurableApplicationContext ctx,\n+            ObjectProvider<AuthenticationEventExecutionPlan> authenticationEventExecutionPlan,\n+            AuthPolicyTO policy,\n+            List<AuthModuleTO> authModules);\n }"},{"sha":"cbaa5f39778c488d2a1adb79b48aca768970c2b4","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/CASSPClientAppTOMapper.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPClientAppTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPClientAppTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPClientAppTOMapper.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -25,14 +25,16 @@\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n+import org.apereo.cas.services.RegisteredServiceMultifactorPolicy;\n \n @ClientAppMapFor(clientAppClass = CASSPClientAppTO.class)\n public class CASSPClientAppTOMapper extends AbstractClientAppMapper {\n \n     @Override\n     public RegisteredService map(\n             final WAClientApp clientApp,\n-            final RegisteredServiceAuthenticationPolicy authenticationPolicy,\n+            final RegisteredServiceAuthenticationPolicy authPolicy,\n+            final RegisteredServiceMultifactorPolicy mfaPolicy,\n             final RegisteredServiceAccessStrategy accessStrategy,\n             final RegisteredServiceAttributeReleasePolicy attributeReleasePolicy) {\n \n@@ -42,7 +44,7 @@ public RegisteredService map(\n         service.setServiceId(cas.getServiceId());\n         setCommon(service, cas);\n \n-        setPolicies(service, authenticationPolicy, accessStrategy, attributeReleasePolicy);\n+        setPolicies(service, authPolicy, mfaPolicy, accessStrategy, attributeReleasePolicy);\n \n         return service;\n     }"},{"sha":"acb38a6f9ee795f516382b10cfe26cf1c9af901d","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/ClientAppMapper.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapper.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -23,13 +23,15 @@\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n+import org.apereo.cas.services.RegisteredServiceMultifactorPolicy;\n \n @FunctionalInterface\n public interface ClientAppMapper {\n \n     RegisteredService map(\n             WAClientApp clientApp,\n             RegisteredServiceAuthenticationPolicy authPolicy,\n+            RegisteredServiceMultifactorPolicy mfaPolicy,\n             RegisteredServiceAccessStrategy accessStrategy,\n             RegisteredServiceAttributeReleasePolicy attributeReleasePolicy);\n }"},{"sha":"e6d78ef183105b87ba814cb75a3026dd2280be14","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/DefaultAuthMapper.java","status":"modified","additions":58,"deletions":3,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -19,29 +19,84 @@\n package org.apache.syncope.wa.starter.mapping;\n \n import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.auth.MFAAuthModuleConf;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n+import org.apache.syncope.common.lib.to.AuthModuleTO;\n+import org.apereo.cas.authentication.AuthenticationEventExecutionPlan;\n+import org.apereo.cas.authentication.AuthenticationHandler;\n+import org.apereo.cas.authentication.MultifactorAuthenticationHandler;\n+import org.apereo.cas.authentication.MultifactorAuthenticationProvider;\n import org.apereo.cas.services.AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria;\n import org.apereo.cas.services.DefaultRegisteredServiceAuthenticationPolicy;\n+import org.apereo.cas.services.DefaultRegisteredServiceMultifactorPolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n+import org.apereo.cas.services.RegisteredServiceMultifactorPolicy;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.context.ConfigurableApplicationContext;\n \n @AuthMapFor(authPolicyConfClass = DefaultAuthPolicyConf.class)\n public class DefaultAuthMapper implements AuthMapper {\n \n+    protected static final Logger LOG = LoggerFactory.getLogger(DefaultAuthMapper.class);\n+\n     @Override\n-    public RegisteredServiceAuthenticationPolicy build(final AuthPolicyTO policy) {\n+    public Pair<RegisteredServiceAuthenticationPolicy, RegisteredServiceMultifactorPolicy> build(\n+            final ConfigurableApplicationContext ctx,\n+            final ObjectProvider<AuthenticationEventExecutionPlan> authenticationEventExecutionPlan,\n+            final AuthPolicyTO policy,\n+            final List<AuthModuleTO> authModules) {\n+\n         DefaultRegisteredServiceAuthenticationPolicy authPolicy = new DefaultRegisteredServiceAuthenticationPolicy();\n \n+        Set<String> mfaAuthHandlers = new HashSet<>();\n+\n         DefaultAuthPolicyConf policyConf = (DefaultAuthPolicyConf) policy.getConf();\n         if (!policyConf.getAuthModules().isEmpty()) {\n-            authPolicy.setRequiredAuthenticationHandlers(new HashSet<>(policyConf.getAuthModules()));\n+            mfaAuthHandlers.addAll(authenticationEventExecutionPlan.getObject().getAuthenticationHandlers().stream().\n+                    filter(MultifactorAuthenticationHandler.class::isInstance).\n+                    filter(mfaAuthHander -> policyConf.getAuthModules().contains(mfaAuthHander.getName())).\n+                    map(AuthenticationHandler::getName).\n+                    collect(Collectors.toSet()));\n+\n+            Set<String> authHandlers = new HashSet<>(policyConf.getAuthModules());\n+            authHandlers.removeAll(mfaAuthHandlers);\n+            authPolicy.setRequiredAuthenticationHandlers(authHandlers);\n         }\n \n         AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria criteria =\n                 new AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria();\n         criteria.setTryAll(policyConf.isTryAll());\n         authPolicy.setCriteria(criteria);\n \n-        return authPolicy;\n+        DefaultRegisteredServiceMultifactorPolicy mfaPolicy = null;\n+        if (!mfaAuthHandlers.isEmpty()) {\n+            Set<String> fns = mfaAuthHandlers.stream().\n+                    map(handler -> authModules.stream().filter(am -> handler.equals(am.getKey())).findFirst()).\n+                    filter(Optional::isPresent).\n+                    map(Optional::get).\n+                    filter(am -> am.getConf() instanceof MFAAuthModuleConf).\n+                    map(am -> ((MFAAuthModuleConf) am.getConf()).getFriendlyName()).\n+                    collect(Collectors.toSet());\n+\n+            Set<String> mfaProviders = ctx.getBeansOfType(MultifactorAuthenticationProvider.class).values().stream().\n+                    filter(map -> fns.contains(map.getFriendlyName())).\n+                    map(MultifactorAuthenticationProvider::getId).\n+                    collect(Collectors.toSet());\n+\n+            mfaPolicy = new DefaultRegisteredServiceMultifactorPolicy();\n+            mfaPolicy.setBypassEnabled(false);\n+            mfaPolicy.setForceExecution(true);\n+            mfaPolicy.setMultifactorAuthenticationProviders(mfaProviders);\n+        }\n+\n+        return Pair.of(authPolicy, mfaPolicy);\n     }\n }"},{"sha":"614df260b4e6b48669d4da48d3ae1fd0bba1261b","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/OIDCRPClientAppTOMapper.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPClientAppTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPClientAppTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPClientAppTOMapper.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -40,6 +40,7 @@\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n+import org.apereo.cas.services.RegisteredServiceMultifactorPolicy;\n import org.apereo.cas.services.ReturnMappedAttributeReleasePolicy;\n import org.apereo.cas.util.spring.ApplicationContextProvider;\n import org.slf4j.Logger;\n@@ -56,7 +57,8 @@ public class OIDCRPClientAppTOMapper extends AbstractClientAppMapper {\n     @Override\n     public RegisteredService map(\n             final WAClientApp clientApp,\n-            final RegisteredServiceAuthenticationPolicy authenticationPolicy,\n+            final RegisteredServiceAuthenticationPolicy authPolicy,\n+            final RegisteredServiceMultifactorPolicy mfaPolicy,\n             final RegisteredServiceAccessStrategy accessStrategy,\n             final RegisteredServiceAttributeReleasePolicy attributeReleasePolicy) {\n \n@@ -83,7 +85,7 @@ public RegisteredService map(\n         }\n         service.setLogoutUrl(rp.getLogoutUri());\n \n-        setPolicies(service, authenticationPolicy, accessStrategy, attributeReleasePolicy);\n+        setPolicies(service, authPolicy, mfaPolicy, accessStrategy, attributeReleasePolicy);\n         if (attributeReleasePolicy != null) {\n             ChainingAttributeReleasePolicy chain = new ChainingAttributeReleasePolicy();\n             if (attributeReleasePolicy instanceof ReturnMappedAttributeReleasePolicy) {"},{"sha":"d316e02b9af8c967ed4b86a791b74ef7afb23fc4","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/RegisteredServiceMapper.java","status":"modified","additions":25,"deletions":3,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -20,19 +20,28 @@\n \n import java.util.Map;\n import java.util.Optional;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n+import org.apereo.cas.authentication.AuthenticationEventExecutionPlan;\n import org.apereo.cas.services.RegisteredService;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n+import org.apereo.cas.services.RegisteredServiceMultifactorPolicy;\n import org.apereo.cas.services.ReturnMappedAttributeReleasePolicy;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.context.ConfigurableApplicationContext;\n \n public class RegisteredServiceMapper {\n \n     private static final Logger LOG = LoggerFactory.getLogger(RegisteredServiceMapper.class);\n \n+    protected final ConfigurableApplicationContext ctx;\n+\n+    protected final ObjectProvider<AuthenticationEventExecutionPlan> authenticationEventExecutionPlan;\n+\n     protected final Map<String, AuthMapper> authPolicyConfMappers;\n \n     protected final Map<String, AccessMapper> accessPolicyConfMappers;\n@@ -42,11 +51,15 @@ public class RegisteredServiceMapper {\n     protected final Map<String, ClientAppMapper> clientAppTOMappers;\n \n     public RegisteredServiceMapper(\n+            final ConfigurableApplicationContext ctx,\n+            final ObjectProvider<AuthenticationEventExecutionPlan> authenticationEventExecutionPlan,\n             final Map<String, AuthMapper> authPolicyConfMappers,\n             final Map<String, AccessMapper> accessPolicyConfMappers,\n             final Map<String, AttrReleaseMapper> attrReleasePolicyConfMappers,\n             final Map<String, ClientAppMapper> clientAppTOMappers) {\n \n+        this.ctx = ctx;\n+        this.authenticationEventExecutionPlan = authenticationEventExecutionPlan;\n         this.authPolicyConfMappers = authPolicyConfMappers;\n         this.accessPolicyConfMappers = accessPolicyConfMappers;\n         this.attrReleasePolicyConfMappers = attrReleasePolicyConfMappers;\n@@ -62,11 +75,20 @@ public RegisteredService toRegisteredService(final WAClientApp clientApp) {\n         }\n \n         RegisteredServiceAuthenticationPolicy authPolicy = null;\n+        RegisteredServiceMultifactorPolicy mfaPolicy = null;\n         if (clientApp.getAuthPolicy() != null) {\n             AuthMapper authMapper = authPolicyConfMappers.get(\n                     clientApp.getAuthPolicy().getConf().getClass().getName());\n-            authPolicy = Optional.ofNullable(authMapper).\n-                    map(mapper -> mapper.build(clientApp.getAuthPolicy())).orElse(null);\n+            Pair<RegisteredServiceAuthenticationPolicy, RegisteredServiceMultifactorPolicy> mapped =\n+                    Optional.ofNullable(authMapper).map(mapper -> mapper.build(\n+                    ctx, authenticationEventExecutionPlan, clientApp.getAuthPolicy(), clientApp.getAuthModules())).\n+                            orElseGet(() -> Pair.of(null, null));\n+            if (mapped.getLeft() != null) {\n+                authPolicy = mapped.getLeft();\n+            }\n+            if (mapped.getRight() != null) {\n+                mfaPolicy = mapped.getRight();\n+            }\n         }\n \n         RegisteredServiceAccessStrategy accessStrategy = null;\n@@ -89,6 +111,6 @@ public RegisteredService toRegisteredService(final WAClientApp clientApp) {\n             }\n         }\n \n-        return clientAppMapper.map(clientApp, authPolicy, accessStrategy, attributeReleasePolicy);\n+        return clientAppMapper.map(clientApp, authPolicy, mfaPolicy, accessStrategy, attributeReleasePolicy);\n     }\n }"},{"sha":"464677115b5ca87000814d86c8f1fbf408cedccf","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/SAML2SPClientAppTOMapper.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPClientAppTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPClientAppTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPClientAppTOMapper.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -26,6 +26,7 @@\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n+import org.apereo.cas.services.RegisteredServiceMultifactorPolicy;\n import org.apereo.cas.support.saml.services.SamlRegisteredService;\n import org.apereo.cas.util.model.TriStateBoolean;\n \n@@ -35,7 +36,8 @@ public class SAML2SPClientAppTOMapper extends AbstractClientAppMapper {\n     @Override\n     public RegisteredService map(\n             final WAClientApp clientApp,\n-            final RegisteredServiceAuthenticationPolicy authenticationPolicy,\n+            final RegisteredServiceAuthenticationPolicy authPolicy,\n+            final RegisteredServiceMultifactorPolicy mfaPolicy,\n             final RegisteredServiceAccessStrategy accessStrategy,\n             final RegisteredServiceAttributeReleasePolicy attributeReleasePolicy) {\n \n@@ -60,7 +62,7 @@ public RegisteredService map(\n         }\n         service.setServiceProviderNameIdQualifier(sp.getServiceProviderNameIdQualifier());\n \n-        setPolicies(service, authenticationPolicy, accessStrategy, attributeReleasePolicy);\n+        setPolicies(service, authPolicy, mfaPolicy, accessStrategy, attributeReleasePolicy);\n \n         return service;\n     }"},{"sha":"e82f1ac992742314fa510fcdb261d17ea4a9c251","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/oidc/WAOIDCJWKSGeneratorService.java","status":"renamed","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Foidc%2FWAOIDCJWKSGeneratorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Foidc%2FWAOIDCJWKSGeneratorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Foidc%2FWAOIDCJWKSGeneratorService.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -18,36 +18,34 @@\n  */\n package org.apache.syncope.wa.starter.oidc;\n \n-import org.apereo.cas.oidc.jwks.generator.OidcJsonWebKeystoreGeneratorService;\n-\n import java.nio.charset.StandardCharsets;\n import java.util.Optional;\n-\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.JWSAlgorithm;\n import org.apache.syncope.common.rest.api.service.OIDCJWKSService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.apereo.cas.oidc.jwks.generator.OidcJsonWebKeystoreGeneratorService;\n import org.jose4j.jwk.JsonWebKey;\n import org.jose4j.jwk.JsonWebKeySet;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.core.io.ByteArrayResource;\n import org.springframework.core.io.Resource;\n \n-public class SyncopeWAOIDCJWKSGeneratorService implements OidcJsonWebKeystoreGeneratorService {\n+public class WAOIDCJWKSGeneratorService implements OidcJsonWebKeystoreGeneratorService {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAOIDCJWKSGeneratorService.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(WAOIDCJWKSGeneratorService.class);\n \n     private final WARestClient waRestClient;\n \n     private final int size;\n \n     private final JWSAlgorithm algorithm;\n \n-    public SyncopeWAOIDCJWKSGeneratorService(\n+    public WAOIDCJWKSGeneratorService(\n             final WARestClient restClient, final int size, final JWSAlgorithm algorithm) {\n \n         this.waRestClient = restClient;","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/oidc/SyncopeWAOIDCJWKSGeneratorService.java"},{"sha":"24563344e656283a5726a070de5738c6e60ee091","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/WASAML2ClientCustomizer.java","status":"renamed","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2ClientCustomizer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2ClientCustomizer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2ClientCustomizer.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -18,22 +18,21 @@\n  */\n package org.apache.syncope.wa.starter.pac4j.saml;\n \n-import org.apereo.cas.support.pac4j.authentication.DelegatedClientFactoryCustomizer;\n-\n import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.apereo.cas.support.pac4j.authentication.DelegatedClientFactoryCustomizer;\n import org.pac4j.core.client.Client;\n import org.pac4j.saml.client.SAML2Client;\n import org.pac4j.saml.config.SAML2Configuration;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class SyncopeWASAML2ClientCustomizer implements DelegatedClientFactoryCustomizer<Client> {\n+public class WASAML2ClientCustomizer implements DelegatedClientFactoryCustomizer<Client> {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWASAML2ClientCustomizer.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(WASAML2ClientCustomizer.class);\n \n-    private final WARestClient restClient;\n+    protected final WARestClient restClient;\n \n-    public SyncopeWASAML2ClientCustomizer(final WARestClient restClient) {\n+    public WASAML2ClientCustomizer(final WARestClient restClient) {\n         this.restClient = restClient;\n     }\n \n@@ -43,8 +42,8 @@ public void customize(final Client client) {\n             LOG.debug(\"Customizing SAML2 client {}\", client.getName());\n             SAML2Client saml2Client = (SAML2Client) client;\n             SAML2Configuration configuration = saml2Client.getConfiguration();\n-            configuration.setKeystoreGenerator(new SyncopeWASAML2ClientKeystoreGenerator(restClient, saml2Client));\n-            configuration.setMetadataGenerator(new SyncopeWASAML2ClientMetadataGenerator(restClient, saml2Client));\n+            configuration.setKeystoreGenerator(new WASAML2ClientKeystoreGenerator(restClient, saml2Client));\n+            configuration.setMetadataGenerator(new WASAML2ClientMetadataGenerator(restClient, saml2Client));\n         }\n     }\n }","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientCustomizer.java"},{"sha":"3d071354d4f76dc9821ae3b6ed5f9f98299f2bf0","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/WASAML2ClientKeystoreGenerator.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2ClientKeystoreGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2ClientKeystoreGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2ClientKeystoreGenerator.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -33,15 +33,15 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class SyncopeWASAML2ClientKeystoreGenerator extends BaseSAML2KeystoreGenerator {\n+public class WASAML2ClientKeystoreGenerator extends BaseSAML2KeystoreGenerator {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWASAML2ClientKeystoreGenerator.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(WASAML2ClientKeystoreGenerator.class);\n \n     private final WARestClient restClient;\n \n     private final SAML2Client saml2Client;\n \n-    SyncopeWASAML2ClientKeystoreGenerator(final WARestClient restClient, final SAML2Client saml2Client) {\n+    WASAML2ClientKeystoreGenerator(final WARestClient restClient, final SAML2Client saml2Client) {\n         super(saml2Client.getConfiguration());\n         this.restClient = restClient;\n         this.saml2Client = saml2Client;","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientKeystoreGenerator.java"},{"sha":"081c57b634b7ab3570623c5e1ae02a1c90678e10","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/WASAML2ClientMetadataGenerator.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2ClientMetadataGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2ClientMetadataGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2ClientMetadataGenerator.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -31,22 +31,22 @@\n import org.apache.syncope.common.rest.api.service.SAML2SPEntityService;\n import org.opensaml.saml.metadata.resolver.MetadataResolver;\n \n-public class SyncopeWASAML2ClientMetadataGenerator extends BaseSAML2MetadataGenerator {\n+public class WASAML2ClientMetadataGenerator extends BaseSAML2MetadataGenerator {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWASAML2ClientMetadataGenerator.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(WASAML2ClientMetadataGenerator.class);\n \n     private final WARestClient restClient;\n \n     private final SAML2Client saml2Client;\n \n-    SyncopeWASAML2ClientMetadataGenerator(final WARestClient restClient, final SAML2Client saml2Client) {\n+    WASAML2ClientMetadataGenerator(final WARestClient restClient, final SAML2Client saml2Client) {\n         this.restClient = restClient;\n         this.saml2Client = saml2Client;\n     }\n \n     @Override\n     protected AbstractBatchMetadataResolver createMetadataResolver(final Resource metadataResource) {\n-        return new SyncopeWASAML2MetadataResolver(restClient, saml2Client);\n+        return new WASAML2MetadataResolver(restClient, saml2Client);\n     }\n \n     @Override","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientMetadataGenerator.java"},{"sha":"42e2c6033bf68b7f425483ce38b8e0efcc6825ec","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/WASAML2MetadataResolver.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2MetadataResolver.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2MetadataResolver.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2MetadataResolver.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -28,15 +28,15 @@\n import org.slf4j.LoggerFactory;\n import org.apache.syncope.common.rest.api.service.SAML2SPEntityService;\n \n-public class SyncopeWASAML2MetadataResolver extends AbstractReloadingMetadataResolver {\n+public class WASAML2MetadataResolver extends AbstractReloadingMetadataResolver {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWASAML2MetadataResolver.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(WASAML2MetadataResolver.class);\n \n     private final WARestClient restClient;\n \n     private final SAML2Client saml2Client;\n \n-    SyncopeWASAML2MetadataResolver(final WARestClient restClient, final SAML2Client saml2Client) {\n+    WASAML2MetadataResolver(final WARestClient restClient, final SAML2Client saml2Client) {\n         this.restClient = restClient;\n         this.saml2Client = saml2Client;\n     }","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2MetadataResolver.java"},{"sha":"523be1164c94b74a6dd9caf572f3dd2357b7a0f2","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/services/WAServiceRegistry.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fservices%2FWAServiceRegistry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fservices%2FWAServiceRegistry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fservices%2FWAServiceRegistry.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -18,13 +18,14 @@\n  */\n package org.apache.syncope.wa.starter.services;\n \n-import org.apache.syncope.wa.starter.mapping.RegisteredServiceMapper;\n import java.util.Collection;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.rest.api.service.wa.WAClientAppService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.apache.syncope.wa.starter.mapping.RegisteredServiceMapper;\n import org.apereo.cas.services.AbstractServiceRegistry;\n import org.apereo.cas.services.OidcRegisteredService;\n import org.apereo.cas.services.RegisteredService;\n@@ -33,17 +34,16 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.context.ConfigurableApplicationContext;\n-import org.apache.syncope.common.rest.api.service.wa.WAClientAppService;\n \n-public class SyncopeWAServiceRegistry extends AbstractServiceRegistry {\n+public class WAServiceRegistry extends AbstractServiceRegistry {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAServiceRegistry.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(WAServiceRegistry.class);\n \n     private final WARestClient waRestClient;\n \n     private final RegisteredServiceMapper registeredServiceMapper;\n \n-    public SyncopeWAServiceRegistry(\n+    public WAServiceRegistry(\n             final WARestClient restClient,\n             final RegisteredServiceMapper registeredServiceMapper,\n             final ConfigurableApplicationContext applicationContext,","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/services/SyncopeWAServiceRegistry.java"},{"sha":"b5fe2f997c8aaea909f85d0ae8514990505f2294","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/surrogate/WASurrogateAuthenticationService.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsurrogate%2FWASurrogateAuthenticationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsurrogate%2FWASurrogateAuthenticationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsurrogate%2FWASurrogateAuthenticationService.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -30,13 +30,13 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class SyncopeWASurrogateAuthenticationService implements SurrogateAuthenticationService {\n+public class WASurrogateAuthenticationService implements SurrogateAuthenticationService {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWASurrogateAuthenticationService.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(WASurrogateAuthenticationService.class);\n \n     private final WARestClient waRestClient;\n \n-    public SyncopeWASurrogateAuthenticationService(final WARestClient waRestClient) {\n+    public WASurrogateAuthenticationService(final WARestClient waRestClient) {\n         this.waRestClient = waRestClient;\n     }\n ","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/surrogate/SyncopeWASurrogateAuthenticationService.java"},{"sha":"a66a1962463379a0d8fbe7ca6cae273af43b9750","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/u2f/WAU2FDeviceRepository.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fu2f%2FWAU2FDeviceRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fu2f%2FWAU2FDeviceRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fu2f%2FWAU2FDeviceRepository.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -38,15 +38,15 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.util.CollectionUtils;\n \n-public class SyncopeWAU2FDeviceRepository extends BaseU2FDeviceRepository {\n+public class WAU2FDeviceRepository extends BaseU2FDeviceRepository {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAU2FDeviceRepository.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(WAU2FDeviceRepository.class);\n \n     private final WARestClient waRestClient;\n \n     private final OffsetDateTime expirationDate;\n \n-    public SyncopeWAU2FDeviceRepository(\n+    public WAU2FDeviceRepository(\n             final CasConfigurationProperties casProperties,\n             final LoadingCache<String, String> requestStorage,\n             final WARestClient waRestClient,","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/u2f/SyncopeWAU2FDeviceRepository.java"},{"sha":"d62ffe218b0ae556cd80a26e09750eeed25d8737","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/webauthn/WAWebAuthnCredentialRepository.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fwebauthn%2FWAWebAuthnCredentialRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fwebauthn%2FWAWebAuthnCredentialRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fwebauthn%2FWAWebAuthnCredentialRepository.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -38,13 +38,13 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class SyncopeWAWebAuthnCredentialRepository extends BaseWebAuthnCredentialRepository {\n+public class WAWebAuthnCredentialRepository extends BaseWebAuthnCredentialRepository {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAWebAuthnCredentialRepository.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(WAWebAuthnCredentialRepository.class);\n \n     private final WARestClient waRestClient;\n \n-    public SyncopeWAWebAuthnCredentialRepository(final CasConfigurationProperties properties,\n+    public WAWebAuthnCredentialRepository(final CasConfigurationProperties properties,\n             final WARestClient waRestClient) {\n         super(properties, CipherExecutor.noOpOfStringToString());\n         this.waRestClient = waRestClient;","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/webauthn/SyncopeWAWebAuthnCredentialRepository.java"},{"sha":"ad7631e3a58e8dd94612f9a596d3fe468bc7ea5d","filename":"wa/starter/src/main/resources/META-INF/spring.factories","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -14,4 +14,4 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-org.springframework.boot.autoconfigure.EnableAutoConfiguration=org.apache.syncope.wa.starter.config.SyncopeWAConfiguration\n+org.springframework.boot.autoconfigure.EnableAutoConfiguration=org.apache.syncope.wa.starter.config.WAContext"},{"sha":"355a784ddc870521c8ad0ac78a191dcc2d6fb10b","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/SyncopeCoreTestingServer.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -20,7 +20,7 @@\n \n import com.fasterxml.jackson.databind.json.JsonMapper;\n import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n-import java.time.OffsetDateTime;\n+import java.time.LocalDateTime;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n@@ -124,7 +124,7 @@ public static class StubGoogleMfaAuthTokenService implements GoogleMfaAuthTokenS\n         private final Map<String, GoogleMfaAuthToken> tokens = new HashMap<>();\n \n         @Override\n-        public void delete(final OffsetDateTime expirationDate) {\n+        public void delete(final LocalDateTime expirationDate) {\n             if (expirationDate == null) {\n                 tokens.clear();\n             } else {\n@@ -155,9 +155,9 @@ public void store(final String owner, final GoogleMfaAuthToken tokenTO) {\n \n         @Override\n         public GoogleMfaAuthToken read(final String owner, final int otp) {\n-            return tokens.entrySet().stream()\n-                    .filter(to -> to.getValue().getOtp() == otp && to.getKey().equalsIgnoreCase(owner))\n-                    .findFirst().get().getValue();\n+            return tokens.entrySet().stream().\n+                    filter(to -> to.getValue().getOtp() == otp && to.getKey().equalsIgnoreCase(owner)).\n+                    findFirst().get().getValue();\n         }\n \n         @Override"},{"sha":"343224b2c877e745ccb1c8dee5c14099bf8e54da","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/WAServiceRegistryTest.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FWAServiceRegistryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FWAServiceRegistryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FWAServiceRegistryTest.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -53,7 +53,7 @@\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-public class SyncopeWAServiceRegistryTest extends AbstractTest {\n+public class WAServiceRegistryTest extends AbstractTest {\n \n     @Autowired\n     private WARestClient wARestClient;","previous_filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/SyncopeWAServiceRegistryTest.java"},{"sha":"a95dfb38ac8462f62727776f2cd22850c29d634e","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/audit/WAAuditTrailManagerTest.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FWAAuditTrailManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FWAAuditTrailManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FWAAuditTrailManagerTest.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -32,7 +32,7 @@\n import org.junit.jupiter.api.Test;\n import org.apache.syncope.common.rest.api.service.AuditService;\n \n-public class SyncopeWAAuditTrailManagerTest extends AbstractTest {\n+public class WAAuditTrailManagerTest extends AbstractTest {\n \n     private static AuditService loggerService;\n \n@@ -51,7 +51,7 @@ private static WARestClient getWaRestClient() {\n     public void saveAuditRecord() {\n         AuditActionContext audit = new AuditActionContext(\"principal\", \"resourceOperatedUpon\", \"actionPerformed\",\n                 \"applicationCode\", new Date(), \"clientIpAddress\", \"serverIpAddress\", \"userAgent\");\n-        SyncopeWAAuditTrailManager auditTrailManager = new SyncopeWAAuditTrailManager(getWaRestClient());\n+        WAAuditTrailManager auditTrailManager = new WAAuditTrailManager(getWaRestClient());\n         auditTrailManager.saveAuditRecord(audit);\n         verify(loggerService).create(any(AuditEntry.class));\n     }","previous_filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/audit/SyncopeWAAuditTrailManagerTest.java"},{"sha":"138ad5ab43cff1d72b556709e374c6328b3ff6ed","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/events/WAEventRepositoryTest.java","status":"renamed","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fevents%2FWAEventRepositoryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fevents%2FWAEventRepositoryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fevents%2FWAEventRepositoryTest.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -33,7 +33,7 @@\n import org.junit.jupiter.api.Test;\n import org.apache.syncope.common.rest.api.service.AuditService;\n \n-public class SyncopeWAEventRepositoryTest extends AbstractTest {\n+public class WAEventRepositoryTest extends AbstractTest {\n \n     private static AuditService auditService;\n \n@@ -51,10 +51,9 @@ private static WARestClient getWaRestClient() {\n     @Test\n     public void saveInternal() {\n         CasEvent event = new CasEvent(1L, \"Auth\", \"principalId\", \"creationTime\", Map.of(\"timestamp\", \"1\"));\n-        SyncopeWAEventRepository eventRepository = new SyncopeWAEventRepository(CasEventRepositoryFilter.noOp(),\n+        WAEventRepository eventRepository = new WAEventRepository(CasEventRepositoryFilter.noOp(),\n                 getWaRestClient());\n         eventRepository.saveInternal(event);\n         verify(auditService).create(any(AuditEntry.class));\n     }\n-\n }","previous_filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/events/SyncopeWAEventRepositoryTest.java"},{"sha":"835ddbf66385c20d38ad46c5b560e3792421ef8c","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/gauth/token/WAGoogleMfaAuthTokenRepositoryTest.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Ftoken%2FWAGoogleMfaAuthTokenRepositoryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Ftoken%2FWAGoogleMfaAuthTokenRepositoryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Ftoken%2FWAGoogleMfaAuthTokenRepositoryTest.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -26,7 +26,7 @@\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-public class SyncopeWAGoogleMfaAuthTokenRepositoryTest extends AbstractTest {\n+public class WAGoogleMfaAuthTokenRepositoryTest extends AbstractTest {\n \n     @Autowired\n     private OneTimeTokenRepository tokenRepository;","previous_filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/gauth/token/SyncopeWAGoogleMfaAuthTokenRepositoryTest.java"},{"sha":"55dd52543f4f9e76372a2444c848684a0b849746","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/BaseWASAML2ClientTest.java","status":"renamed","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FBaseWASAML2ClientTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FBaseWASAML2ClientTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FBaseWASAML2ClientTest.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -16,9 +16,20 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.wa.starter.pac4j.saml;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.math.BigInteger;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.Signature;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.util.Base64;\n+import java.util.Date;\n import org.bouncycastle.asn1.ASN1EncodableVector;\n import org.bouncycastle.asn1.ASN1Encoding;\n import org.bouncycastle.asn1.ASN1Integer;\n@@ -37,20 +48,7 @@\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.FileSystemResource;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.File;\n-import java.math.BigInteger;\n-import java.security.KeyPair;\n-import java.security.KeyPairGenerator;\n-import java.security.KeyStore;\n-import java.security.Signature;\n-import java.security.cert.Certificate;\n-import java.security.cert.CertificateFactory;\n-import java.util.Base64;\n-import java.util.Date;\n-\n-public abstract class BaseSyncopeWASAML2ClientTest {\n+public abstract class BaseWASAML2ClientTest {\n \n     protected static Certificate createSelfSignedCert(final KeyPair keyPair) throws Exception {\n         final X500Name dn = new X500Name(\"cn=Unknown\");\n@@ -64,7 +62,8 @@ protected static Certificate createSelfSignedCert(final KeyPair keyPair) throws\n         final Date expiration = new Date(System.currentTimeMillis() + 100000);\n         certGen.setEndDate(new Time(expiration));\n \n-        final AlgorithmIdentifier sigAlgID = new AlgorithmIdentifier(PKCSObjectIdentifiers.sha1WithRSAEncryption, DERNull.INSTANCE);\n+        final AlgorithmIdentifier sigAlgID = new AlgorithmIdentifier(PKCSObjectIdentifiers.sha1WithRSAEncryption,\n+                DERNull.INSTANCE);\n         certGen.setSignature(sigAlgID);\n         certGen.setSubjectPublicKeyInfo(SubjectPublicKeyInfo.getInstance(keyPair.getPublic().getEncoded()));\n \n@@ -80,7 +79,7 @@ protected static Certificate createSelfSignedCert(final KeyPair keyPair) throws\n         v.add(new DERBitString(sig.sign()));\n \n         final Certificate cert = CertificateFactory.getInstance(\"X.509\")\n-            .generateCertificate(new ByteArrayInputStream(new DERSequence(v).getEncoded(ASN1Encoding.DER)));\n+                .generateCertificate(new ByteArrayInputStream(new DERSequence(v).getEncoded(ASN1Encoding.DER)));\n         cert.verify(keyPair.getPublic());\n         return cert;\n     }\n@@ -91,7 +90,8 @@ protected static SAML2Client getSAML2Client() throws Exception {\n         saml2Configuration.setPrivateKeyPassword(\"password\");\n         saml2Configuration.setKeystoreAlias(\"Syncope\");\n         saml2Configuration.setIdentityProviderMetadataResource(new ClassPathResource(\"idp-metadata.xml\"));\n-        saml2Configuration.setServiceProviderMetadataResource(new FileSystemResource(File.createTempFile(\"sp-metadata\", \".xml\")));\n+        saml2Configuration.setServiceProviderMetadataResource(new FileSystemResource(File.createTempFile(\"sp-metadata\",\n+                \".xml\")));\n         SAML2Client client = new SAML2Client(saml2Configuration);\n         client.setCallbackUrl(\"https://syncope.apache.org\");\n         return client;\n@@ -105,13 +105,13 @@ protected static KeyStore getKeystore() throws Exception {\n         keyPairGenerator.initialize(4096);\n         KeyPair keyPair = keyPairGenerator.generateKeyPair();\n         Certificate certificate = createSelfSignedCert(keyPair);\n-        ks.setKeyEntry(\"Syncope\", keyPair.getPrivate(), \"password\".toCharArray(), new Certificate[]{certificate});\n+        ks.setKeyEntry(\"Syncope\", keyPair.getPrivate(), \"password\".toCharArray(), new Certificate[] { certificate });\n         return ks;\n     }\n \n     protected static String getKeystoreAsString() throws Exception {\n         char[] pwdArray = \"password\".toCharArray();\n-        try (ByteArrayOutputStream fos = new ByteArrayOutputStream()) {\n+        try ( ByteArrayOutputStream fos = new ByteArrayOutputStream()) {\n             getKeystore().store(fos, pwdArray);\n             fos.flush();\n             return Base64.getEncoder().encodeToString(fos.toByteArray());","previous_filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/BaseSyncopeWASAML2ClientTest.java"},{"sha":"ade1552c41481527979c3212b7d35e8cd29f01c7","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/WASAML2ClientCustomizerTest.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2ClientCustomizerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2ClientCustomizerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2ClientCustomizerTest.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -35,7 +35,7 @@\n import org.springframework.core.io.ClassPathResource;\n import org.apache.syncope.common.rest.api.service.SAML2SPEntityService;\n \n-public class SyncopeWASAML2ClientCustomizerTest extends BaseSyncopeWASAML2ClientTest {\n+public class WASAML2ClientCustomizerTest extends BaseWASAML2ClientTest {\n \n     @Test\n     public void customize() throws Exception {\n@@ -55,11 +55,11 @@ public void customize() throws Exception {\n         when(syncopeClient.getService(SAML2SPEntityService.class)).thenReturn(service);\n         when(restClient.getSyncopeClient()).thenReturn(syncopeClient);\n \n-        SyncopeWASAML2ClientCustomizer customizer = new SyncopeWASAML2ClientCustomizer(restClient);\n+        WASAML2ClientCustomizer customizer = new WASAML2ClientCustomizer(restClient);\n         SAML2Client client = getSAML2Client();\n         customizer.customize(client);\n         client.init();\n-        assertTrue(client.getConfiguration().getKeystoreGenerator() instanceof SyncopeWASAML2ClientKeystoreGenerator);\n-        assertTrue(client.getConfiguration().toMetadataGenerator() instanceof SyncopeWASAML2ClientMetadataGenerator);\n+        assertTrue(client.getConfiguration().getKeystoreGenerator() instanceof WASAML2ClientKeystoreGenerator);\n+        assertTrue(client.getConfiguration().toMetadataGenerator() instanceof WASAML2ClientMetadataGenerator);\n     }\n }","previous_filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientCustomizerTest.java"},{"sha":"2fe958e07aee63200d05cf7f6fdfc9d6889627fe","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/WASAML2ClientKeystoreGeneratorTest.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2ClientKeystoreGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2ClientKeystoreGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2ClientKeystoreGeneratorTest.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -36,7 +36,7 @@\n import org.springframework.core.io.ClassPathResource;\n import org.apache.syncope.common.rest.api.service.SAML2SPEntityService;\n \n-public class SyncopeWASAML2ClientKeystoreGeneratorTest extends BaseSyncopeWASAML2ClientTest {\n+public class WASAML2ClientKeystoreGeneratorTest extends BaseWASAML2ClientTest {\n \n     private static WARestClient getWaRestClient() throws Exception {\n         WARestClient restClient = mock(WARestClient.class);\n@@ -60,7 +60,7 @@ private static WARestClient getWaRestClient() throws Exception {\n     @Test\n     public void generate() throws Exception {\n         SAML2Client client = getSAML2Client();\n-        SAML2KeystoreGenerator generator = new SyncopeWASAML2ClientKeystoreGenerator(getWaRestClient(), client);\n+        SAML2KeystoreGenerator generator = new WASAML2ClientKeystoreGenerator(getWaRestClient(), client);\n         assertDoesNotThrow(generator::generate);\n     }\n }","previous_filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientKeystoreGeneratorTest.java"},{"sha":"a7756e6b29a7272e8c25c63d93be2073b570031a","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/WASAML2ClientMetadataGeneratorTest.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2ClientMetadataGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2ClientMetadataGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2ClientMetadataGeneratorTest.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -39,7 +39,7 @@\n import org.springframework.core.io.ClassPathResource;\n import org.apache.syncope.common.rest.api.service.SAML2SPEntityService;\n \n-public class SyncopeWASAML2ClientMetadataGeneratorTest extends BaseSyncopeWASAML2ClientTest {\n+public class WASAML2ClientMetadataGeneratorTest extends BaseWASAML2ClientTest {\n \n     private static WARestClient getWaRestClient() throws IOException {\n         WARestClient restClient = mock(WARestClient.class);\n@@ -65,7 +65,7 @@ public void storeMetadata() throws Exception {\n         String keystoreFile = File.createTempFile(\"keystore\", \"jks\").getCanonicalPath();\n         client.getConfiguration().setKeystoreResourceFilepath(keystoreFile);\n \n-        SAML2MetadataGenerator generator = new SyncopeWASAML2ClientMetadataGenerator(getWaRestClient(), client);\n+        SAML2MetadataGenerator generator = new WASAML2ClientMetadataGenerator(getWaRestClient(), client);\n         EntityDescriptor entityDescriptor = generator.buildEntityDescriptor();\n         String metadata = generator.getMetadata(entityDescriptor);\n         assertNotNull(generator.storeMetadata(metadata, null, false));","previous_filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientMetadataGeneratorTest.java"},{"sha":"7526726159c2401549e16e8927d3839ab574808e","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/WASAML2MetadataResolverTest.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2MetadataResolverTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2MetadataResolverTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FWASAML2MetadataResolverTest.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -36,7 +36,7 @@\n import org.springframework.core.io.ClassPathResource;\n import org.apache.syncope.common.rest.api.service.SAML2SPEntityService;\n \n-public class SyncopeWASAML2MetadataResolverTest extends BaseSyncopeWASAML2ClientTest {\n+public class WASAML2MetadataResolverTest extends BaseWASAML2ClientTest {\n \n     @Test\n     public void fetchMetadata() throws Exception {\n@@ -59,7 +59,7 @@ public void fetchMetadata() throws Exception {\n         when(syncopeClient.getService(SAML2SPEntityService.class)).thenReturn(saml2SPMetadataService);\n         when(restClient.getSyncopeClient()).thenReturn(syncopeClient);\n \n-        SyncopeWASAML2MetadataResolver resolver = new SyncopeWASAML2MetadataResolver(restClient, client);\n+        WASAML2MetadataResolver resolver = new WASAML2MetadataResolver(restClient, client);\n         assertNotNull(resolver.fetchMetadata());\n     }\n }","previous_filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2MetadataResolverTest.java"},{"sha":"a9c10d2b005940b54d8d3dd9934dd2a5cc7a6a80","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/surrogate/WASurrogateAuthenticationServiceTest.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsurrogate%2FWASurrogateAuthenticationServiceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3514897204236ff7b04d3ee79077472243c3f32c/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsurrogate%2FWASurrogateAuthenticationServiceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsurrogate%2FWASurrogateAuthenticationServiceTest.java?ref=3514897204236ff7b04d3ee79077472243c3f32c","patch":"@@ -32,7 +32,7 @@\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-public class SyncopeWASurrogateAuthenticationServiceTest extends AbstractTest {\n+public class WASurrogateAuthenticationServiceTest extends AbstractTest {\n \n     @Autowired\n     private WARestClient waRestClient;","previous_filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/surrogate/SyncopeWASurrogateAuthenticationServiceTest.java"}]}